#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ SFM - –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç
"""

import sys
import json
sys.path.append('.')

def test_sfm_loading():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É SFM –ø–æ—à–∞–≥–æ–≤–æ"""
    
    print("üîç –û–¢–õ–ê–î–ö–ê SFM - –ü–û–®–ê–ì–û–í–´–ô –ê–ù–ê–õ–ò–ó")
    print("=" * 50)
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–µ—Å—Ç—Ä
    print("\n1. üìÑ –ü–†–û–í–ï–†–Ø–ï–ú –†–ï–ï–°–¢–†")
    print("-" * 30)
    try:
        with open('data/sfm/function_registry.json', 'r', encoding='utf-8') as f:
            registry = json.load(f)
        
        functions_count = len(registry.get('functions', {}))
        print(f"‚úÖ –†–µ–µ—Å—Ç—Ä –∑–∞–≥—Ä—É–∂–µ–Ω: {functions_count} —Ñ—É–Ω–∫—Ü–∏–π")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Ñ—É–Ω–∫—Ü–∏–π
        print("üìã –ü–µ—Ä–≤—ã–µ 5 —Ñ—É–Ω–∫—Ü–∏–π –≤ —Ä–µ–µ—Å—Ç—Ä–µ:")
        for i, func_id in enumerate(list(registry.get('functions', {}).keys())[:5]):
            print(f"   {i+1}. {func_id}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–µ—Å—Ç—Ä–∞: {e}")
        return
    
    # 2. –°–æ–∑–¥–∞–µ–º SFM –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç
    print("\n2. üîß –°–û–ó–î–ê–ï–ú SFM")
    print("-" * 30)
    try:
        from security.safe_function_manager import SafeFunctionManager
        sfm = SafeFunctionManager()
        print(f"‚úÖ SFM —Å–æ–∑–¥–∞–Ω: {len(sfm.functions)} —Ñ—É–Ω–∫—Ü–∏–π")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≤ SFM
        print("üìã –§—É–Ω–∫—Ü–∏–∏ –≤ SFM:")
        for i, func_id in enumerate(sfm.functions.keys()):
            print(f"   {i+1}. {func_id}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è SFM: {e}")
        return
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ _load_saved_functions
    print("\n3. üîç –ê–ù–ê–õ–ò–ó–ò–†–£–ï–ú _load_saved_functions")
    print("-" * 30)
    
    # –ß–∏—Ç–∞–µ–º –∫–æ–¥ –º–µ—Ç–æ–¥–∞ _load_saved_functions
    try:
        with open('security/safe_function_manager.py', 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å self.functions[func_id] = func
        if 'self.functions[func_id] = func' in content:
            print("‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞: self.functions[func_id] = func")
        else:
            print("‚ùå –ù–ï –Ω–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞: self.functions[func_id] = func")
            
        # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å functions_loaded
        if 'functions_loaded' in content:
            print("‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è: functions_loaded")
        else:
            print("‚ùå –ù–ï –Ω–∞–π–¥–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è: functions_loaded")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ–¥–∞: {e}")
    
    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
    print("\n4. üìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê")
    print("-" * 30)
    print(f"üìä –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π –≤ —Ä–µ–µ—Å—Ç—Ä–µ: {functions_count}")
    print(f"üìä –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π –≤ SFM: {len(sfm.functions)}")
    
    if len(sfm.functions) == functions_count:
        print("‚úÖ –í–°–ï –§–£–ù–ö–¶–ò–ò –ó–ê–ì–†–£–ñ–ï–ù–´!")
    else:
        print(f"‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(sfm.functions)} –∏–∑ {functions_count}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É
        registry_functions = set(registry.get('functions', {}).keys())
        sfm_functions = set(sfm.functions.keys())
        missing_functions = registry_functions - sfm_functions
        
        print(f"üìã –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π: {len(missing_functions)}")
        if missing_functions:
            print("üìã –ü–µ—Ä–≤—ã–µ 10 –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π:")
            for i, func_id in enumerate(list(missing_functions)[:10]):
                print(f"   {i+1}. {func_id}")

if __name__ == "__main__":
    test_sfm_loading()