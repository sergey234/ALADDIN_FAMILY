#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Performance Tests Runner –¥–ª—è ALADDIN Dashboard
–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏

–ê–≤—Ç–æ—Ä: ALADDIN Security Team
–í–µ—Ä—Å–∏—è: 1.0.0
–î–∞—Ç–∞: 2025-01-27
–ö–∞—á–µ—Å—Ç–≤–æ: A+
"""

# import asyncio  # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
import os
import subprocess
import sys
import time
from datetime import datetime
# from pathlib import Path  # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
from typing import Any, Dict, List  # Optional –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è


class PerformanceTestRunner:
    """–ó–∞–ø—É—Å–∫–∞—Ç–µ–ª—å —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–ø—É—Å–∫–∞—Ç–µ–ª—è —Ç–µ—Å—Ç–æ–≤"""
        self.start_time = datetime.now()
        self.test_results: List[Dict[str, Any]] = []
        self.test_files = [
            "tests/test_load_performance.py",
            "tests/test_dashboard_performance.py",
            "tests/test_sfm_integration.py",
            "tests/test_memory_optimization.py",
            "tests/test_response_time_optimization.py",
            "tests/test_memory_profiling.py",
            "tests/test_cache_optimization.py",
            "tests/test_sfm_advanced_integration.py",
            "tests/test_sfm_function_lifecycle.py",
            "tests/test_sfm_security_integration.py",
            "tests/test_sfm_monitoring_integration.py",
            "tests/test_sfm_api_integration.py",
            "tests/test_dashboard_v2_endpoints.py",
            "tests/test_dashboard_integration.py",
            "tests/test_dashboard_new_features.py",
        ]

    def check_prerequisites(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π

        Returns:
            True –µ—Å–ª–∏ –≤—Å–µ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
        """
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π...")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Python
        try:
            python_version = sys.version_info
            print(
                f"‚úÖ Python –≤–µ—Ä—Å–∏—è: {python_version.major}.{python_version.minor}.{python_version.micro}"
            )

            if python_version < (3, 8):
                print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8 –∏–ª–∏ –≤—ã—à–µ")
                return False

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Python: {e}")
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ pip
        try:
            subprocess.run(
                [sys.executable, "-m", "pip", "--version"],
                check=True,
                capture_output=True,
            )
            print("‚úÖ pip –¥–æ—Å—Ç—É–ø–µ–Ω")
        except subprocess.CalledProcessError:
            print("‚ùå pip –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ pytest
        try:
            subprocess.run(
                [sys.executable, "-m", "pytest", "--version"],
                check=True,
                capture_output=True,
            )
            print("‚úÖ pytest –¥–æ—Å—Ç—É–ø–µ–Ω")
        except subprocess.CalledProcessError:
            print("‚ö†Ô∏è pytest –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ —Ç–µ—Å—Ç–æ–≤
        for test_file in self.test_files:
            if os.path.exists(test_file):
                print(f"‚úÖ –§–∞–π–ª —Ç–µ—Å—Ç–∞ –Ω–∞–π–¥–µ–Ω: {test_file}")
            else:
                print(f"‚ùå –§–∞–π–ª —Ç–µ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {test_file}")
                return False

        print("‚úÖ –í—Å–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
        return True

    def install_dependencies(self) -> bool:
        """
        –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

        Returns:
            True –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
        """
        print("\nüì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")

        requirements_files = ["requirements-test.txt", "requirements.txt"]

        for req_file in requirements_files:
            if os.path.exists(req_file):
                try:
                    print(f"üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏–∑ {req_file}...")
                    result = subprocess.run(
                        [
                            sys.executable,
                            "-m",
                            "pip",
                            "install",
                            "-r",
                            req_file,
                        ],
                        capture_output=True,
                        text=True,
                    )

                    if result.returncode == 0:
                        print(f"‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏–∑ {req_file} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
                    else:
                        print(
                            f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ {req_file}: {result.stderr}"
                        )

                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ {req_file}: {e}")
                    return False
            else:
                print(f"‚ö†Ô∏è –§–∞–π–ª {req_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")

        print("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        return True

    def run_single_test(self, test_file: str) -> Dict[str, Any]:
        """
        –ó–∞–ø—É—Å–∫ –æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞

        Args:
            test_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Ç–µ—Å—Ç–∞

        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
        """
        print(f"\nüß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: {test_file}")

        start_time = time.time()

        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç —á–µ—Ä–µ–∑ pytest
            result = subprocess.run(
                [
                    sys.executable,
                    "-m",
                    "pytest",
                    test_file,
                    "-v",
                    "--tb=short",
                    "--html=reports/"
                    + os.path.basename(test_file).replace(
                        ".py", "_report.html"
                    ),
                    "--self-contained-html",
                ],
                capture_output=True,
                text=True,
                timeout=300,
            )  # 5 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç

            duration = time.time() - start_time

            test_result = {
                "test_file": test_file,
                "success": result.returncode == 0,
                "duration": duration,
                "stdout": result.stdout,
                "stderr": result.stderr,
                "return_code": result.returncode,
            }

            if result.returncode == 0:
                print(
                    f"‚úÖ –¢–µ—Å—Ç {test_file} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞ {duration:.2f}s"
                )
            else:
                print(
                    f"‚ùå –¢–µ—Å—Ç {test_file} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π –∑–∞ {duration:.2f}s"
                )
                print(f"–û—à–∏–±–∫–∞: {result.stderr[:200]}...")

            return test_result

        except subprocess.TimeoutExpired:
            print(f"‚è∞ –¢–µ—Å—Ç {test_file} –ø—Ä–µ–≤—ã—Å–∏–ª –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è (5 –º–∏–Ω—É—Ç)")
            return {
                "test_file": test_file,
                "success": False,
                "duration": 300,
                "error": "Timeout",
                "return_code": -1,
            }

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞ {test_file}: {e}")
            return {
                "test_file": test_file,
                "success": False,
                "duration": 0,
                "error": str(e),
                "return_code": -1,
            }

    def run_all_tests(self) -> bool:
        """
        –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤

        Returns:
            True –µ—Å–ª–∏ –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        print("\nüöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")

        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
        os.makedirs("reports", exist_ok=True)

        all_success = True

        for test_file in self.test_files:
            result = self.run_single_test(test_file)
            self.test_results.append(result)

            if not result["success"]:
                all_success = False

        return all_success

    def generate_summary_report(self) -> Dict[str, Any]:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤–æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞

        Returns:
            –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç
        """
        print("\nüìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤–æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...")

        total_tests = len(self.test_results)
        successful_tests = sum(1 for r in self.test_results if r["success"])
        failed_tests = total_tests - successful_tests

        total_duration = sum(r["duration"] for r in self.test_results)

        report = {
            "test_run_date": self.start_time.isoformat(),
            "total_duration": total_duration,
            "total_tests": total_tests,
            "successful_tests": successful_tests,
            "failed_tests": failed_tests,
            "success_rate": (
                successful_tests / total_tests * 100 if total_tests > 0 else 0
            ),
            "test_results": self.test_results,
            "summary": {
                "overall_status": (
                    "PASS" if successful_tests == total_tests else "FAIL"
                ),
                "performance_grade": self._calculate_performance_grade(),
                "recommendations": self._generate_recommendations(),
            },
        }

        return report

    def _calculate_performance_grade(self) -> str:
        """–†–∞—Å—á–µ—Ç –æ—Ü–µ–Ω–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        if not self.test_results:
            return "N/A"

        success_rate = sum(1 for r in self.test_results if r["success"]) / len(
            self.test_results
        )

        if success_rate >= 0.95:
            return "A+"
        elif success_rate >= 0.90:
            return "A"
        elif success_rate >= 0.80:
            return "B+"
        elif success_rate >= 0.70:
            return "B"
        else:
            return "C"

    def _generate_recommendations(self) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
        recommendations = []

        failed_tests = [r for r in self.test_results if not r["success"]]

        if failed_tests:
            recommendations.append("–ò—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏ –≤ –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Ç–µ—Å—Ç–∞—Ö")

            for test in failed_tests:
                if "timeout" in test.get("error", "").lower():
                    recommendations.append(
                        f"–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å {test['test_file']}"
                    )
                elif "connection" in test.get("stderr", "").lower():
                    recommendations.append(
                        f"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è {test['test_file']}"
                    )

        successful_tests = [r for r in self.test_results if r["success"]]
        slow_tests = [r for r in successful_tests if r["duration"] > 60]

        if slow_tests:
            recommendations.append("–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–µ–¥–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã")

        if not recommendations:
            recommendations.append(
                "–í—Å–µ —Ç–µ—Å—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ - —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–Ω"
            )

        return recommendations

    def save_report(self, report: Dict[str, Any]) -> str:
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞

        Args:
            report: –û—Ç—á–µ—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è

        Returns:
            –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        """
        import json

        report_file = f"reports/performance_test_summary_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"

        with open(report_file, "w", encoding="utf-8") as f:
            json.dump(report, f, indent=2, ensure_ascii=False, default=str)

        print(f"‚úÖ –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
        return report_file

    def print_final_summary(self, report: Dict[str, Any]):
        """
        –í—ã–≤–æ–¥ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å–≤–æ–¥–∫–∏

        Args:
            report: –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç
        """
        print("\n" + "=" * 60)
        print("üìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–í–û–î–ö–ê –¢–ï–°–¢–û–í –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
        print("=" * 60)

        print(f"üìÖ –î–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {report['test_run_date']}")
        print(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {report['total_duration']:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"üß™ –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {report['total_tests']}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {report['successful_tests']}")
        print(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: {report['failed_tests']}")
        print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {report['success_rate']:.1f}%")
        print(f"üéØ –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: {report['summary']['overall_status']}")
        print(
            f"‚≠ê –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {report['summary']['performance_grade']}"
        )

        print("\nüìã –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        for i, rec in enumerate(report["summary"]["recommendations"], 1):
            print(f"  {i}. {rec}")

        print("\n" + "=" * 60)

        if report["summary"]["overall_status"] == "PASS":
            print("üéâ –í–°–ï –¢–ï–°–¢–´ –í–´–ü–û–õ–ù–ï–ù–´ –£–°–ü–ï–®–ù–û!")
            print("üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–Ω!")
        else:
            print("‚ö†Ô∏è –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´, –¢–†–ï–ë–£–Æ–©–ò–ï –í–ù–ò–ú–ê–ù–ò–Ø")
            print("üîß –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–∞–∫—à–Ω")

        print("=" * 60)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ ALADDIN Dashboard Performance Tests Runner")
    print("üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
    print("üõ°Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –ø—Ä–æ–¥–∞–∫—à–Ω")
    print("=" * 60)

    runner = PerformanceTestRunner()

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
        if not runner.check_prerequisites():
            print("‚ùå –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
            return False

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        if not runner.install_dependencies():
            print("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
            return False

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
        all_success = runner.run_all_tests()

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = runner.generate_summary_report()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        # report_file = runner.save_report(report)  # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è

        # –í—ã–≤–æ–¥–∏–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å–≤–æ–¥–∫—É
        runner.print_final_summary(report)

        return all_success

    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return False

    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
