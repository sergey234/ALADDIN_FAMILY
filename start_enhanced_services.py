#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ Enhanced API Docs –∏ Architecture Visualizer
ALADDIN Security System

–ê–≤—Ç–æ—Ä: ALADDIN Security Team
–í–µ—Ä—Å–∏—è: 2.0
–î–∞—Ç–∞: 2025-01-06
"""

import os
import sys
import subprocess
import time
import signal
import threading
from pathlib import Path

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    required_packages = [
        'fastapi',
        'uvicorn',
        'psutil',
        'httpx',
        'sqlite3'
    ]
    
    missing_packages = []
    
    for package in required_packages:
        try:
            if package == 'sqlite3':
                import sqlite3
            else:
                __import__(package)
            print(f"‚úÖ {package}")
        except ImportError:
            missing_packages.append(package)
            print(f"‚ùå {package}")
    
    if missing_packages:
        print(f"\n‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞–∫–µ—Ç—ã: {', '.join(missing_packages)}")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –∫–æ–º–∞–Ω–¥–æ–π: pip install " + " ".join(missing_packages))
        return False
    
    print("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    return True

def check_aladdin_integration():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å ALADDIN"""
    print("\nüîó –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å ALADDIN...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
    aladdin_modules = [
        'security/safe_function_manager.py',
        'security/microservices/api_gateway.py',
        'security/microservices/load_balancer.py'
    ]
    
    available_modules = 0
    
    for module in aladdin_modules:
        if Path(module).exists():
            print(f"‚úÖ {module}")
            available_modules += 1
        else:
            print(f"‚ùå {module}")
    
    if available_modules > 0:
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {available_modules}/{len(aladdin_modules)} –º–æ–¥—É–ª–µ–π ALADDIN")
        return True
    else:
        print("‚ö†Ô∏è  –ú–æ–¥—É–ª–∏ ALADDIN –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω mock —Ä–µ–∂–∏–º")
        return False

def start_enhanced_api_docs():
    """–ó–∞–ø—É—Å–∫ Enhanced API Docs"""
    print("\nüöÄ –ó–∞–ø—É—Å–∫ Enhanced API Docs –Ω–∞ –ø–æ—Ä—Ç—É 8080...")
    
    try:
        process = subprocess.Popen([
            sys.executable, 'enhanced_api_docs.py'
        ], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø—É—Å–∫–∞
        time.sleep(3)
        
        if process.poll() is None:
            print("‚úÖ Enhanced API Docs –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            print("üåê –î–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:8080")
            return process
        else:
            stdout, stderr = process.communicate()
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Enhanced API Docs:")
            print(f"STDOUT: {stdout.decode()}")
            print(f"STDERR: {stderr.decode()}")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Enhanced API Docs: {e}")
        return None

def start_enhanced_architecture_visualizer():
    """–ó–∞–ø—É—Å–∫ Enhanced Architecture Visualizer"""
    print("\nüèóÔ∏è –ó–∞–ø—É—Å–∫ Enhanced Architecture Visualizer –Ω–∞ –ø–æ—Ä—Ç—É 8081...")
    
    try:
        process = subprocess.Popen([
            sys.executable, 'enhanced_architecture_visualizer.py'
        ], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø—É—Å–∫–∞
        time.sleep(3)
        
        if process.poll() is None:
            print("‚úÖ Enhanced Architecture Visualizer –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            print("üåê –î–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:8081")
            return process
        else:
            stdout, stderr = process.communicate()
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Enhanced Architecture Visualizer:")
            print(f"STDOUT: {stdout.decode()}")
            print(f"STDERR: {stderr.decode()}")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Enhanced Architecture Visualizer: {e}")
        return None

def monitor_processes(processes):
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
    print("\nüìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...")
    
    while True:
        try:
            for name, process in processes.items():
                if process and process.poll() is not None:
                    print(f"‚ö†Ô∏è  –ü—Ä–æ—Ü–µ—Å—Å {name} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ")
                    processes[name] = None
            
            time.sleep(10)
            
        except KeyboardInterrupt:
            print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
            break

def cleanup_processes(processes):
    """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
    print("\nüßπ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...")
    
    for name, process in processes.items():
        if process and process.poll() is None:
            print(f"üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ {name}...")
            try:
                process.terminate()
                process.wait(timeout=5)
                print(f"‚úÖ {name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except subprocess.TimeoutExpired:
                print(f"‚ö†Ô∏è  –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ {name}...")
                process.kill()
                process.wait()
                print(f"‚úÖ {name} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ {name}: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üõ°Ô∏è ALADDIN Enhanced Services Launcher")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if not check_dependencies():
        print("\n‚ùå –ù–µ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å ALADDIN
    aladdin_available = check_aladdin_integration()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
    processes = {}
    
    # –ó–∞–ø—É—Å–∫ Enhanced API Docs
    api_docs_process = start_enhanced_api_docs()
    processes['Enhanced API Docs'] = api_docs_process
    
    # –ó–∞–ø—É—Å–∫ Enhanced Architecture Visualizer
    arch_process = start_enhanced_architecture_visualizer()
    processes['Enhanced Architecture Visualizer'] = arch_process
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–µ—Ä–≤–∏—Å –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
    running_services = [name for name, process in processes.items() if process is not None]
    
    if not running_services:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
        return
    
    print(f"\n‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω—ã —Å–µ—Ä–≤–∏—Å—ã: {', '.join(running_services)}")
    print("\nüåê –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:")
    print("   üì° Enhanced API Docs: http://localhost:8080")
    print("   üèóÔ∏è Enhanced Architecture Visualizer: http://localhost:8081")
    print("\nüìã –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:")
    print("   ‚Ä¢ –†–µ–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å ALADDIN —Å–∏—Å—Ç–µ–º–æ–π")
    print("   ‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–µ–∑ Docker —á–µ—Ä–µ–∑ psutil")
    print("   ‚Ä¢ WebSocket real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
    print("   ‚Ä¢ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API")
    print("   ‚Ä¢ JWT –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è")
    print("   ‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ JSON/CSV")
    print("   ‚Ä¢ 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã")
    
    if aladdin_available:
        print("\nüîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å ALADDIN: –ê–ö–¢–ò–í–ù–ê")
        print("   ‚Ä¢ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö API endpoints")
        print("   ‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ SafeFunctionManager")
        print("   ‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤ 8006-8012")
    else:
        print("\n‚ö†Ô∏è  –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å ALADDIN: MOCK –†–ï–ñ–ò–ú")
        print("   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        print("   ‚Ä¢ –î–ª—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ ALADDIN")
    
    print("\n‚å®Ô∏è  –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤")
    
    try:
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –ø—Ä–æ—Ü–µ—Å—Å—ã
        monitor_processes(processes)
    except KeyboardInterrupt:
        pass
    finally:
        # –û—á–∏—â–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã
        cleanup_processes(processes)
        print("\nüëã –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")

if __name__ == "__main__":
    main()