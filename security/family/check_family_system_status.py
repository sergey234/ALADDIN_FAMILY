#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê –°–ò–°–¢–ï–ú–´ –°–ï–ú–ï–ô –í SFM
====================================

–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –∞–Ω–æ–Ω–∏–º–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–µ–º–µ–π
"""

import sys
import os
import json
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏

def check_family_system_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã —Å–µ–º–µ–π –≤ SFM"""
    print("üîç –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê –°–ò–°–¢–ï–ú–´ –°–ï–ú–ï–ô –í SFM")
    print("=" * 50)
    
    try:
        # –ò–º–ø–æ—Ä—Ç SFM
        from security.safe_function_manager import SafeFunctionManager
        sfm = SafeFunctionManager()
        
        # –ü–æ–∏—Å–∫ —Å–µ–º–µ–π–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
        family_functions = {}
        for func_id, func in sfm.functions.items():
            if 'family' in func_id:
                family_functions[func_id] = {
                    'name': func.name,
                    'status': func.status.value,
                    'security_level': func.security_level.value,
                    'is_critical': func.is_critical
                }
        
        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Å–µ–º–µ–π–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π: {len(family_functions)}")
        print()
        
        for func_id, info in family_functions.items():
            status_icon = "‚úÖ" if info['status'] == 'enabled' else "‚ö†Ô∏è" if info['status'] == 'sleeping' else "‚ùå"
            critical_icon = "üîí" if info['is_critical'] else "üîì"
            
            print(f"{status_icon} {func_id}")
            print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {info['name']}")
            print(f"   –°—Ç–∞—Ç—É—Å: {info['status']}")
            print(f"   –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: {info['security_level']} {critical_icon}")
            print()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–µ—Å—Ç—Ä–∞
        registry_path = "data/sfm/function_registry.json"
        if os.path.exists(registry_path):
            with open(registry_path, 'r', encoding='utf-8') as f:
                registry_data = json.load(f)
            
            registry_family_functions = [k for k in registry_data.get('functions', {}).keys() if 'family' in k]
            print(f"üíæ –í —Ä–µ–µ—Å—Ç—Ä–µ SFM: {len(registry_family_functions)} —Å–µ–º–µ–π–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π")
            print(f"üìÅ –ü—É—Ç—å –∫ —Ä–µ–µ—Å—Ç—Ä—É: {registry_path}")
        else:
            print("‚ùå –§–∞–π–ª —Ä–µ–µ—Å—Ç—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å
        print("\nüéØ –û–ë–©–ò–ô –°–¢–ê–¢–£–°")
        print("=" * 50)
        
        if len(family_functions) >= 4:
            print("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Å–µ–º–µ–π –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≤ SFM")
            print("üîê –ì–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
            print("üì± –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ SFM API")
        else:
            print("‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è - —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        return False

def show_usage_examples():
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    print("\nüìö –ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø")
    print("=" * 50)
    
    print("1. –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–π —Å–µ–º—å–∏:")
    print("   from security.family import create_family, RegistrationData, FamilyRole, AgeGroup")
    print("   data = RegistrationData(role=FamilyRole.PARENT, age_group=AgeGroup.ADULT_24_55)")
    print("   result = create_family(data)")
    print()
    
    print("2. –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —Å–µ–º—å–µ:")
    print("   from security.family import join_family")
    print("   result = join_family(qr_code='family_abc123...')")
    print()
    
    print("3. –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:")
    print("   from security.family import send_family_alert")
    print("   result = send_family_alert(family_id='family_abc123', message='–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å')")
    print()
    
    print("4. –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π –≤ SFM:")
    print("   sfm.enable_function('family_registration_system')")
    print("   sfm.enable_function('family_notification_system')")

if __name__ == "__main__":
    """–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã —Å–µ–º–µ–π"""
    print("üîê –°–ò–°–¢–ï–ú–ê –ê–ù–û–ù–ò–ú–ù–û–ô –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò –°–ï–ú–ï–ô")
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å SFM")
    print("–ü–æ–ª–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ 152-–§–ó")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
    success = check_family_system_status()
    
    # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    if success:
        show_usage_examples()
    
    print(f"\n‚è∞ –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")