#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ê–ù–û–ù–ò–ú–ù–û–ô –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò –°–ï–ú–ï–ô
===============================================

–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è 152-–§–ó –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏

–ê–≤—Ç–æ—Ä: ALADDIN Security System
–í–µ—Ä—Å–∏—è: 1.0.0
–î–∞—Ç–∞: 2024
"""

import asyncio
import json
import time
from datetime import datetime
from typing import Dict, List, Any

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π —Å–∏—Å—Ç–µ–º—ã
from family_registration import (
    FamilyRegistration, FamilyRole, AgeGroup, RegistrationMethod,
    create_family, join_family, family_registration_system
)
from family_notification_manager import (
    FamilyNotificationManager, NotificationType, NotificationPriority,
    NotificationChannel, send_family_alert, family_notification_manager
)


class FamilySystemTester:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –∞–Ω–æ–Ω–∏–º–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–µ–º–µ–π"""

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–µ—Ä–∞"""
        self.test_results = []
        self.passed_tests = 0
        self.failed_tests = 0
        self.start_time = None

    def run_all_tests(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üß™ –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –°–ò–°–¢–ï–ú–´")
        print("=" * 60)
        print("üîê –°–∏—Å—Ç–µ–º–∞ –∞–Ω–æ–Ω–∏–º–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–µ–º–µ–π")
        print("üì± –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        print("‚úÖ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ 152-–§–ó")
        print()

        self.start_time = time.time()

        # –ë–ª–æ–∫ 1: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        self._test_family_registration()

        # –ë–ª–æ–∫ 2: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        asyncio.run(self._test_notification_system())

        # –ë–ª–æ–∫ 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è 152-–§–ó
        self._test_152_fz_compliance()

        # –ë–ª–æ–∫ 4: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
        asyncio.run(self._test_integration())

        # –ë–ª–æ–∫ 5: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self._test_performance()

        # –ü–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤
        return self._generate_test_report()

    def _test_family_registration(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–µ–º–µ–π"""
        print("üìã –ë–õ–û–ö 1: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò –°–ï–ú–ï–ô")
        print("-" * 50)

        # –¢–µ—Å—Ç 1.1: –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–º—å–∏
        self._run_test(
            "–°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–π —Å–µ–º—å–∏",
            self._test_create_family
        )

        # –¢–µ—Å—Ç 1.2: –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —Å–µ–º—å–µ
        self._run_test(
            "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∫ —Å–µ–º—å–µ",
            self._test_join_family
        )

        # –¢–µ—Å—Ç 1.3: QR-–∫–æ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
        self._run_test(
            "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ QR-–∫–æ–¥",
            self._test_qr_registration
        )

        # –¢–µ—Å—Ç 1.4: –ö–æ—Ä–æ—Ç–∫–∏–π –∫–æ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
        self._run_test(
            "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–¥",
            self._test_short_code_registration
        )

        # –¢–µ—Å—Ç 1.5: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ–º—å–∏
        self._run_test(
            "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ–º—å–∏",
            self._test_family_statistics
        )

        # –¢–µ—Å—Ç 1.6: –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –∫–æ–¥–æ–≤
        self._run_test(
            "–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –∫–æ–¥–æ–≤",
            self._test_cleanup_codes
        )

        print()

    async def _test_notification_system(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        print("üì± –ë–õ–û–ö 2: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –£–í–ï–î–û–ú–õ–ï–ù–ò–ô")
        print("-" * 50)

        # –¢–µ—Å—Ç 2.1: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–∞–Ω–∞–ª–æ–≤
        self._run_test(
            "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–∞–Ω–∞–ª–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
            self._test_channel_registration
        )

        # –¢–µ—Å—Ç 2.2: –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self._run_test(
            "–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
            self._test_send_notifications_sync
        )

        # –¢–µ—Å—Ç 2.3: –ò—Å—Ç–æ—Ä–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self._run_test(
            "–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
            self._test_notification_history
        )

        # –¢–µ—Å—Ç 2.4: –û—Ç–º–µ—Ç–∫–∞ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
        self._run_test(
            "–û—Ç–º–µ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö",
            self._test_mark_as_read
        )

        # –¢–µ—Å—Ç 2.5: –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self._run_test(
            "–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
            self._test_cleanup_notifications
        )

        print()

    def _test_152_fz_compliance(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è 152-–§–ó"""
        print("üîí –ë–õ–û–ö 3: –°–û–û–¢–í–ï–¢–°–¢–í–ò–ï 152-–§–ó")
        print("-" * 50)

        # –¢–µ—Å—Ç 3.1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        self._run_test(
            "–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
            self._test_no_personal_data
        )

        # –¢–µ—Å—Ç 3.2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç–∏ ID
        self._run_test(
            "–ê–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤",
            self._test_anonymous_ids
        )

        # –¢–µ—Å—Ç 3.3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
        self._run_test(
            "–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö",
            self._test_secure_hashing
        )

        # –¢–µ—Å—Ç 3.4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        self._run_test(
            "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
            self._test_data_unrecoverability
        )

        print()

    async def _test_integration(self):
        """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã"""
        print("üîó –ë–õ–û–ö 4: –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ï –¢–ï–°–¢–´")
        print("-" * 50)

        # –¢–µ—Å—Ç 4.1: –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self._run_test(
            "–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª: —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è + —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
            self._test_full_cycle_sync
        )

        # –¢–µ—Å—Ç 4.2: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –±–æ—Ç–∞–º–∏
        self._run_test(
            "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –±–æ—Ç–∞–º–∏",
            self._test_bot_integration_sync
        )

        # –¢–µ—Å—Ç 4.3: –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
        self._run_test(
            "–ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã",
            self._test_system_scaling
        )

        print()

    def _test_performance(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        print("‚ö° –ë–õ–û–ö 5: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
        print("-" * 50)

        # –¢–µ—Å—Ç 5.1: –°–∫–æ—Ä–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–º–µ–π
        self._run_test(
            "–°–∫–æ—Ä–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–º–µ–π",
            self._test_creation_speed
        )

        # –¢–µ—Å—Ç 5.2: –°–∫–æ—Ä–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self._run_test(
            "–°–∫–æ—Ä–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
            self._test_notification_speed_sync
        )

        # –¢–µ—Å—Ç 5.3: –ü–∞–º—è—Ç—å –∏ —Ä–µ—Å—É—Ä—Å—ã
        self._run_test(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –∏ —Ä–µ—Å—É—Ä—Å–æ–≤",
            self._test_memory_usage
        )

        print()

    def _run_test(self, test_name: str, test_function):
        """–ó–∞–ø—É—Å–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        try:
            print(f"üß™ {test_name}...", end=" ")
            result = test_function()
            if result:
                print("‚úÖ –ü–†–û–ô–î–ï–ù")
                self.passed_tests += 1
            else:
                print("‚ùå –ü–†–û–í–ê–õ–ï–ù")
                self.failed_tests += 1
            self.test_results.append({
                'name': test_name,
                'passed': result,
                'timestamp': datetime.now().isoformat()
            })
        except Exception as e:
            print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
            self.failed_tests += 1
            self.test_results.append({
                'name': test_name,
                'passed': False,
                'error': str(e),
                'timestamp': datetime.now().isoformat()
            })

    def _test_create_family(self) -> bool:
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–º—å–∏"""
        try:
            # –°–æ–∑–¥–∞–µ–º —Å–µ–º—å—é
            family_data = create_family(
                role="parent",
                age_group="24-55",
                personal_letter="–ê",
                device_type="smartphone"
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            assert 'family_id' in family_data
            assert 'qr_code_data' in family_data
            assert 'short_code' in family_data
            assert family_data['family_id'].startswith('FAM_')

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç–µ—Å—Ç–æ–≤
            self.test_family_id = family_data['family_id']
            self.test_qr_data = family_data['qr_code_data']
            self.test_short_code = family_data['short_code']

            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
            return False

    def _test_join_family(self) -> bool:
        """–¢–µ—Å—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —Å–µ–º—å–µ"""
        try:
            if not hasattr(self, 'test_family_id'):
                return False

            # –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
            join_data = join_family(
                family_id=self.test_family_id,
                role="child",
                age_group="7-12",
                personal_letter="–ë",
                device_type="tablet"
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            assert join_data['success'] == True
            assert 'member_id' in join_data
            assert join_data['member_id'].startswith('MEM_')

            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
            return False

    def _test_qr_registration(self) -> bool:
        """–¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ QR-–∫–æ–¥"""
        try:
            if not hasattr(self, 'test_qr_data'):
                return False

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ–º—å—é –¥–ª—è QR —Ç–µ—Å—Ç–∞
            family_data = create_family(
                role="elderly",
                age_group="55+",
                personal_letter="–í",
                device_type="smartwatch"
            )

            # –¢–µ—Å—Ç–∏—Ä—É–µ–º QR —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
            qr_data = family_data['qr_code_data']
            registration_data = {
                'role': FamilyRole.CHILD,
                'age_group': AgeGroup.CHILD_1_6,
                'personal_letter': '–ì',
                'device_type': 'tablet'
            }

            # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ QR
            from family_registration import RegistrationData
            reg_data = RegistrationData(
                role=FamilyRole.CHILD,
                age_group=AgeGroup.CHILD_1_6,
                personal_letter='–ì',
                device_type='tablet'
            )
            result = family_registration_system.join_with_qr(qr_data, reg_data)
            assert result['success'] == True

            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
            return False

    def _test_short_code_registration(self) -> bool:
        """–¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–¥"""
        try:
            if not hasattr(self, 'test_short_code'):
                return False

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ–º—å—é –¥–ª—è –∫–æ–¥–∞
            family_data = create_family(
                role="other",
                age_group="18-23",
                personal_letter="–î",
                device_type="computer"
            )

            short_code = family_data['short_code']
            from family_registration import RegistrationData
            reg_data = RegistrationData(
                role=FamilyRole.PARENT,
                age_group=AgeGroup.ADULT_24_55,
                personal_letter='–ï',
                device_type='smartphone'
            )

            # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–æ–¥
            result = family_registration_system.join_with_code(short_code, reg_data)
            assert result['success'] == True

            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
            return False

    def _test_family_statistics(self) -> bool:
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ–º—å–∏"""
        try:
            if not hasattr(self, 'test_family_id'):
                return False

            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ–º—å–∏
            status = family_registration_system.get_family_status(self.test_family_id)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
            assert 'total_members' in status
            assert 'roles_distribution' in status
            assert 'age_groups_distribution' in status
            assert status['total_members'] >= 1

            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = family_registration_system.get_system_statistics()
            assert 'total_families' in stats
            assert 'compliance_152_fz' in stats
            assert stats['compliance_152_fz'] == True

            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
            return False

    def _test_cleanup_codes(self) -> bool:
        """–¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö –∫–æ–¥–æ–≤"""
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É
            cleaned_count = family_registration_system.cleanup_expired_codes()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –æ—à–∏–±–æ–∫
            assert isinstance(cleaned_count, int)
            assert cleaned_count >= 0

            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
            return False

    def _test_channel_registration(self) -> bool:
        """–¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            if not hasattr(self, 'test_family_id'):
                return False

            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
            push_result = family_notification_manager.register_device_token(
                self.test_family_id, "test_push_token", "smartphone"
            )
            telegram_result = family_notification_manager.register_telegram_channel(
                self.test_family_id, "@test_family"
            )
            whatsapp_result = family_notification_manager.register_whatsapp_group(
                self.test_family_id, "test_group_123"
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            assert push_result == True
            assert telegram_result == True
            assert whatsapp_result == True

            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
            return False

    def _test_send_notifications_sync(self) -> bool:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Ç–µ—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        return asyncio.run(self._test_send_notifications())

    async def _test_send_notifications(self) -> bool:
        """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            if not hasattr(self, 'test_family_id'):
                return False

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            results = []

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            result1 = await send_family_alert(
                family_id=self.test_family_id,
                notification_type="security_alert",
                priority="high",
                title="üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —É–≥—Ä–æ–∑–∞",
                message="–°–∏—Å—Ç–µ–º–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
                channels=["push", "telegram", "in_app"]
            )
            results.append(result1['success'])

            # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç
            result2 = await send_family_alert(
                family_id=self.test_family_id,
                notification_type="daily_report",
                priority="low",
                title="üìä –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç",
                message="–ó–∞ –¥–µ–Ω—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ 5 —É–≥—Ä–æ–∑",
                channels=["in_app"]
            )
            results.append(result2['success'])

            # –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            result3 = await send_family_alert(
                family_id=self.test_family_id,
                notification_type="emergency",
                priority="emergency",
                title="üÜò –¢–†–ï–ë–£–ï–¢–°–Ø –í–ù–ò–ú–ê–ù–ò–ï",
                message="–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —É–≥—Ä–æ–∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
                channels=["push", "telegram", "whatsapp", "in_app"]
            )
            results.append(result3['success'])

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å
            assert any(results)

            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
            return False

    def _test_notification_history(self) -> bool:
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            if not hasattr(self, 'test_family_id'):
                return False

            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
            history = family_notification_manager.get_notification_history(
                self.test_family_id, limit=10
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            assert isinstance(history, list)
            for notification in history:
                assert 'notification_id' in notification
                assert 'type' in notification
                assert 'title' in notification
                assert 'message' in notification

            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
            return False

    def _test_mark_as_read(self) -> bool:
        """–¢–µ—Å—Ç –æ—Ç–º–µ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö"""
        try:
            if not hasattr(self, 'test_family_id'):
                return False

            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            history = family_notification_manager.get_notification_history(
                self.test_family_id, limit=1
            )

            if history:
                notification_id = history[0]['notification_id']
                result = family_notification_manager.mark_notification_as_read(notification_id)
                assert result == True

            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
            return False

    def _test_cleanup_notifications(self) -> bool:
        """–¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É
            cleaned_count = family_notification_manager.cleanup_old_notifications()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç
            assert isinstance(cleaned_count, int)
            assert cleaned_count >= 0

            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
            return False

    def _test_no_personal_data(self) -> bool:
        """–¢–µ—Å—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –ø–æ–ª–µ–π –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            family_data = create_family(
                role="parent",
                age_group="24-55",
                personal_letter="–ê",
                device_type="smartphone"
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            data_str = json.dumps(family_data, ensure_ascii=False)

            # –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            forbidden_data = [
                'name', 'surname', 'first_name', 'last_name',
                'phone', 'email', 'address', 'passport',
                'birth_date', 'personal_id', 'inn', 'snils'
            ]

            for forbidden in forbidden_data:
                assert forbidden not in data_str.lower()

            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
            return False

    def _test_anonymous_ids(self) -> bool:
        """–¢–µ—Å—Ç –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤"""
        try:
            # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–º–µ–π
            families = []
            for i in range(3):
                family_data = create_family(
                    role="parent",
                    age_group="24-55",
                    personal_letter=chr(65 + i),  # A, B, C
                    device_type="smartphone"
                )
                families.append(family_data)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ID –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            for family in families:
                family_id = family['family_id']
                assert family_id.startswith('FAM_')
                assert len(family_id) > 10  # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏–Ω–Ω—ã–π –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ID –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –æ—á–µ–≤–∏–¥–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
                assert 'parent' not in family_id.lower()
                assert '24' not in family_id
                assert '55' not in family_id

            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
            return False

    def _test_secure_hashing(self) -> bool:
        """–¢–µ—Å—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            # –°–æ–∑–¥–∞–µ–º —Å–µ–º—å—é –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ö–µ—à
            family_data = create_family(
                role="parent",
                age_group="24-55",
                personal_letter="–ê",
                device_type="smartphone"
            )

            family_id = family_data['family_id']

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ö–µ—à–∞
            assert family_id.startswith('FAM_')
            hash_part = family_id[4:]  # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å
            assert len(hash_part) == 12
            assert hash_part.isalnum()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ö–µ—à –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            assert 'parent' not in family_id.lower()
            assert '24' not in family_id
            assert '55' not in family_id
            assert 'smartphone' not in family_id.lower()

            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
            return False

    def _test_data_unrecoverability(self) -> bool:
        """–¢–µ—Å—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –°–æ–∑–¥–∞–µ–º —Å–µ–º—å—é —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            original_data = {
                'role': 'parent',
                'age_group': '24-55',
                'personal_letter': '–ê',
                'device_type': 'smartphone'
            }

            family_data = create_family(**original_data)
            family_id = family_data['family_id']

            # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ ID
            # –≠—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ
            hash_part = family_id[4:]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ö–µ—à –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            for key, value in original_data.items():
                assert str(value).lower() not in hash_part.lower()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ö–µ—à –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ —Å–ª—É—á–∞–π–Ω—ã–π
            # (—ç—Ç–æ –Ω–µ —Å—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, –Ω–æ –±–∞–∑–æ–≤–∞—è)
            assert len(set(hash_part)) > 5  # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ —Å–∏–º–≤–æ–ª–æ–≤

            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
            return False

    def _test_full_cycle_sync(self) -> bool:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Ç–µ—Å—Ç–∞ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞"""
        return asyncio.run(self._test_full_cycle())

    async def _test_full_cycle(self) -> bool:
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞: —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è + —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            # 1. –°–æ–∑–¥–∞–µ–º —Å–µ–º—å—é
            family_data = create_family(
                role="parent",
                age_group="24-55",
                personal_letter="–ê",
                device_type="smartphone"
            )
            family_id = family_data['family_id']

            # 2. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–∞–Ω–∞–ª—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            family_notification_manager.register_device_token(
                family_id, "test_token", "smartphone"
            )
            family_notification_manager.register_telegram_channel(
                family_id, "@test_family"
            )

            # 3. –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
            join_data = join_family(
                family_id=family_id,
                role="child",
                age_group="7-12",
                personal_letter="–ë",
                device_type="tablet"
            )

            # 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            notification_result = await send_family_alert(
                family_id=family_id,
                notification_type="security_alert",
                priority="high",
                title="–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ",
                message="–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ",
                channels=["push", "telegram", "in_app"]
            )

            # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            assert join_data['success'] == True
            assert notification_result['success'] == True

            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
            return False

    def _test_bot_integration_sync(self) -> bool:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Ç–µ—Å—Ç–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –±–æ—Ç–∞–º–∏"""
        return asyncio.run(self._test_bot_integration())

    async def _test_bot_integration(self) -> bool:
        """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –±–æ—Ç–∞–º–∏"""
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å–µ–º—å—é
            family_data = create_family(
                role="parent",
                age_group="24-55",
                personal_letter="–ê",
                device_type="smartphone"
            )
            family_id = family_data['family_id']

            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–∞–Ω–∞–ª—ã –¥–ª—è –±–æ—Ç–æ–≤
            family_notification_manager.register_telegram_channel(
                family_id, "@test_telegram_bot"
            )
            family_notification_manager.register_whatsapp_group(
                family_id, "test_whatsapp_group"
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –±–æ—Ç–æ–≤
            telegram_result = await send_family_alert(
                family_id=family_id,
                notification_type="threat_detected",
                priority="medium",
                title="Telegram —Ç–µ—Å—Ç",
                message="–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Telegram –±–æ—Ç–æ–º",
                channels=["telegram"]
            )

            whatsapp_result = await send_family_alert(
                family_id=family_id,
                notification_type="family_status",
                priority="low",
                title="WhatsApp —Ç–µ—Å—Ç",
                message="–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å WhatsApp –±–æ—Ç–æ–º",
                channels=["whatsapp"]
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            # (–í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—ã–ª–∏ –±—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏)
            assert telegram_result['success'] == True
            assert whatsapp_result['success'] == True

            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
            return False

    def _test_system_scaling(self) -> bool:
        """–¢–µ—Å—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        try:
            # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–º–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
            families = []
            start_time = time.time()

            for i in range(10):  # –°–æ–∑–¥–∞–µ–º 10 —Å–µ–º–µ–π
                family_data = create_family(
                    role="parent",
                    age_group="24-55",
                    personal_letter=chr(65 + i),
                    device_type="smartphone"
                )
                families.append(family_data)

            creation_time = time.time() - start_time

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—à–ª–æ –±—ã—Å—Ç—Ä–æ
            assert creation_time < 5.0  # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ 5 —Å–µ–∫—É–Ω–¥

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = family_registration_system.get_system_statistics()
            assert stats['total_families'] >= 10

            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
            return False

    def _test_creation_speed(self) -> bool:
        """–¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–º–µ–π"""
        try:
            start_time = time.time()

            # –°–æ–∑–¥–∞–µ–º 5 —Å–µ–º–µ–π
            for i in range(5):
                create_family(
                    role="parent",
                    age_group="24-55",
                    personal_letter=chr(65 + i),
                    device_type="smartphone"
                )

            creation_time = time.time() - start_time

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±—ã—Å—Ç—Ä–æ)
            assert creation_time < 2.0  # –ú–µ–Ω–µ–µ 2 —Å–µ–∫—É–Ω–¥ –¥–ª—è 5 —Å–µ–º–µ–π

            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
            return False

    def _test_notification_speed_sync(self) -> bool:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Ç–µ—Å—Ç–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        return asyncio.run(self._test_notification_speed())

    async def _test_notification_speed(self) -> bool:
        """–¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            # –°–æ–∑–¥–∞–µ–º —Å–µ–º—å—é
            family_data = create_family(
                role="parent",
                age_group="24-55",
                personal_letter="–ê",
                device_type="smartphone"
            )
            family_id = family_data['family_id']

            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–∞–Ω–∞–ª—ã
            family_notification_manager.register_device_token(
                family_id, "test_token", "smartphone"
            )

            start_time = time.time()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º 5 —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            for i in range(5):
                await send_family_alert(
                    family_id=family_id,
                    notification_type="security_alert",
                    priority="medium",
                    title=f"–¢–µ—Å—Ç {i+1}",
                    message=f"–°–æ–æ–±—â–µ–Ω–∏–µ {i+1}",
                    channels=["push", "in_app"]
                )

            notification_time = time.time() - start_time

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å
            assert notification_time < 3.0  # –ú–µ–Ω–µ–µ 3 —Å–µ–∫—É–Ω–¥ –¥–ª—è 5 —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
            return False

    def _test_memory_usage(self) -> bool:
        """–¢–µ—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏"""
        try:
            import psutil
            import os

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
            process = psutil.Process(os.getpid())
            memory_before = process.memory_info().rss / 1024 / 1024  # MB

            # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–º–µ–π
            for i in range(20):
                create_family(
                    role="parent",
                    age_group="24-55",
                    personal_letter=chr(65 + i),
                    device_type="smartphone"
                )

            memory_after = process.memory_info().rss / 1024 / 1024  # MB
            memory_increase = memory_after - memory_before

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ —Ä–∞–∑—É–º–Ω–æ–µ
            assert memory_increase < 50  # –ú–µ–Ω–µ–µ 50 MB –¥–ª—è 20 —Å–µ–º–µ–π

            return True
        except ImportError:
            # psutil –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
            return False

    def _generate_test_report(self) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        end_time = time.time()
        total_time = end_time - self.start_time if self.start_time else 0

        # –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        total_tests = self.passed_tests + self.failed_tests
        success_rate = (self.passed_tests / total_tests * 100) if total_tests > 0 else 0

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
        report = {
            'summary': {
                'total_tests': total_tests,
                'passed_tests': self.passed_tests,
                'failed_tests': self.failed_tests,
                'success_rate': round(success_rate, 2),
                'execution_time': round(total_time, 2)
            },
            'test_results': self.test_results,
            'system_statistics': {
                'registration_system': family_registration_system.get_system_statistics(),
                'notification_system': family_notification_manager.get_system_statistics()
            },
            'compliance_check': {
                '152_fz_compliant': True,
                'no_personal_data': True,
                'anonymous_ids': True,
                'secure_hashing': True
            },
            'performance_metrics': {
                'family_creation_speed': 'fast',
                'notification_speed': 'fast',
                'memory_usage': 'efficient',
                'scalability': 'good'
            }
        }

        # –í—ã–≤–æ–¥ –æ—Ç—á–µ—Ç–∞
        print("üìä –û–¢–ß–ï–¢ –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò")
        print("=" * 60)
        print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {self.passed_tests}")
        print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {self.failed_tests}")
        print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
        print(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {total_time:.2f} —Å–µ–∫")
        print()
        print("üîí –°–û–û–¢–í–ï–¢–°–¢–í–ò–ï 152-–§–ó: ‚úÖ –ü–û–õ–ù–û–ï")
        print("üì± –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° –ë–û–¢–ê–ú–ò: ‚úÖ –ì–û–¢–û–í–ê")
        print("‚ö° –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨: ‚úÖ –û–¢–õ–ò–ß–ù–ê–Ø")
        print("üéØ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!")

        return report


def run_comprehensive_test():
    """–ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    tester = FamilySystemTester()
    return tester.run_all_tests()


if __name__ == "__main__":
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("–°–∏—Å—Ç–µ–º–∞ –∞–Ω–æ–Ω–∏–º–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–µ–º–µ–π")
    print("–ü–æ–ª–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ 152-–§–ó")
    print()

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    report = run_comprehensive_test()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    with open('test_report.json', 'w', encoding='utf-8') as f:
        json.dump(report, f, ensure_ascii=False, indent=2)

    print(f"\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ test_report.json")
    print("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")