#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—É–ª–æ–≤ –ø–∞–º—è—Ç–∏
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Å 14+ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ —Å–∏—Å—Ç–µ–º—ã

–§—É–Ω–∫—Ü–∏—è: Memory Optimization Test
–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –í–´–°–û–ö–ò–ô
–í–µ—Ä—Å–∏—è: 1.0
–î–∞—Ç–∞: 2025-01-11
"""

import asyncio
import logging
import time
from typing import Any, Dict, List

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class SimpleMemoryPool:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø—É–ª –ø–∞–º—è—Ç–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self, name: str, max_size: int):
        self.name = name
        self.max_size = max_size
        self.current_size = 0
        self.objects = {}
        self.access_count = 0
        
    def add_object(self, obj_id: str, size: int) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –≤ –ø—É–ª"""
        if self.current_size + size > self.max_size:
            return False
        
        self.objects[obj_id] = size
        self.current_size += size
        self.access_count += 1
        return True
    
    def remove_object(self, obj_id: str) -> int:
        """–£–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –∏–∑ –ø—É–ª–∞"""
        if obj_id in self.objects:
            size = self.objects[obj_id]
            del self.objects[obj_id]
            self.current_size -= size
            return size
        return 0
    
    def get_usage_percentage(self) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
        if self.max_size == 0:
            return 0.0
        return (self.current_size / self.max_size) * 100


class MemoryOptimizationTest:
    """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏"""
    
    def __init__(self):
        self.pools = {}
        self.functions_memory = {}
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–æ–≤ –¥–ª—è 14 —Ñ—É–Ω–∫—Ü–∏–π
        self._create_memory_pools()
    
    def _create_memory_pools(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–æ–≤ –ø–∞–º—è—Ç–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π"""
        # –§—É–Ω–∫—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        self.pools['database'] = SimpleMemoryPool('database', 200 * 1024 * 1024)  # 200MB
        self.pools['security_loadbalancer'] = SimpleMemoryPool('loadbalancer', 50 * 1024 * 1024)  # 50MB
        
        # –§—É–Ω–∫—Ü–∏–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        self.pools['security_cacheentry'] = SimpleMemoryPool('cache', 100 * 1024 * 1024)  # 100MB
        self.pools['security_rediscachemanager'] = SimpleMemoryPool('redis_cache', 150 * 1024 * 1024)  # 150MB
        self.pools['security_cachemetrics'] = SimpleMemoryPool('cache_metrics', 25 * 1024 * 1024)  # 25MB
        
        # –§—É–Ω–∫—Ü–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.pools['test_cache'] = SimpleMemoryPool('test', 30 * 1024 * 1024)  # 30MB
        self.pools['security_testmanager'] = SimpleMemoryPool('test_manager', 20 * 1024 * 1024)  # 20MB
        self.pools['family_testing_system'] = SimpleMemoryPool('family_test', 40 * 1024 * 1024)  # 40MB
        self.pools['run_performance_tests'] = SimpleMemoryPool('performance_test', 60 * 1024 * 1024)  # 60MB
        
        # –§—É–Ω–∫—Ü–∏–∏ –ø–æ—Ç–æ–∫–æ–≤
        self.pools['thread_pool_manager'] = SimpleMemoryPool('thread_pool', 80 * 1024 * 1024)  # 80MB
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        self.pools['security_loadbalancingresponse'] = SimpleMemoryPool('loadbalancing', 30 * 1024 * 1024)  # 30MB
        self.pools['security_loadbalancingalgorithminterface'] = SimpleMemoryPool('algorithm', 15 * 1024 * 1024)  # 15MB
        self.pools['security_loadbalancingrequest'] = SimpleMemoryPool('request', 25 * 1024 * 1024)  # 25MB
        self.pools['test_function'] = SimpleMemoryPool('general_test', 10 * 1024 * 1024)  # 10MB
        self.pools['test_auto_save'] = SimpleMemoryPool('autosave', 5 * 1024 * 1024)  # 5MB
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(self.pools)} –ø—É–ª–æ–≤ –ø–∞–º—è—Ç–∏")
    
    def simulate_memory_usage(self, function_id: str, memory_usage: int) -> bool:
        """–°–∏–º—É–ª—è—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–µ–π"""
        if function_id not in self.pools:
            print(f"‚ùå –§—É–Ω–∫—Ü–∏—è {function_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
        
        pool = self.pools[function_id]
        success = pool.add_object(f"{function_id}_obj_{time.time()}", memory_usage)
        
        if success:
            self.functions_memory[function_id] = self.functions_memory.get(function_id, 0) + memory_usage
            print(f"‚úÖ {function_id}: {memory_usage // 1024}KB –¥–æ–±–∞–≤–ª–µ–Ω–æ")
        else:
            print(f"‚ùå {function_id}: –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å {memory_usage // 1024}KB (–ø—É–ª –∑–∞–ø–æ–ª–Ω–µ–Ω)")
        
        return success
    
    def optimize_memory(self, function_id: str = None) -> Dict[str, Any]:
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞–º—è—Ç–∏"""
        start_time = time.time()
        results = {
            'functions_optimized': 0,
            'memory_freed': 0,
            'objects_removed': 0,
            'optimization_time': 0.0,
        }
        
        if function_id:
            # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
            if function_id in self.pools:
                pool = self.pools[function_id]
                # –£–¥–∞–ª—è–µ–º 20% –æ–±—ä–µ–∫—Ç–æ–≤
                objects_to_remove = len(pool.objects) // 5
                for obj_id in list(pool.objects.keys())[:objects_to_remove]:
                    freed = pool.remove_object(obj_id)
                    results['memory_freed'] += freed
                    results['objects_removed'] += 1
                results['functions_optimized'] = 1
        else:
            # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π
            for func_id, pool in self.pools.items():
                # –£–¥–∞–ª—è–µ–º 20% –æ–±—ä–µ–∫—Ç–æ–≤
                objects_to_remove = len(pool.objects) // 5
                for obj_id in list(pool.objects.keys())[:objects_to_remove]:
                    freed = pool.remove_object(obj_id)
                    results['memory_freed'] += freed
                    results['objects_removed'] += 1
                results['functions_optimized'] += 1
        
        results['optimization_time'] = time.time() - start_time
        return results
    
    def get_memory_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–∞–º—è—Ç–∏"""
        status = {}
        
        for func_id, pool in self.pools.items():
            status[func_id] = {
                'current_size': pool.current_size,
                'max_size': pool.max_size,
                'usage_percentage': pool.get_usage_percentage(),
                'objects_count': len(pool.objects),
                'access_count': pool.access_count,
            }
        
        return status
    
    def get_memory_report(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –ø–æ –ø–∞–º—è—Ç–∏"""
        status = self.get_memory_status()
        
        total_memory = sum(pool.max_size for pool in self.pools.values())
        used_memory = sum(pool.current_size for pool in self.pools.values())
        
        # –ü–æ–∏—Å–∫ —Ñ—É–Ω–∫—Ü–∏–π —Å –≤—ã—Å–æ–∫–∏–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–∞–º—è—Ç–∏
        high_usage = []
        for func_id, info in status.items():
            if info['usage_percentage'] > 80:
                high_usage.append(func_id)
        
        return {
            'total_memory': total_memory,
            'used_memory': used_memory,
            'usage_percentage': (used_memory / total_memory) * 100 if total_memory > 0 else 0,
            'functions_count': len(self.pools),
            'high_usage_functions': high_usage,
            'status': status,
        }


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üíæ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò –ü–£–õ–û–í –ü–ê–ú–Ø–¢–ò")
    print("=" * 60)
    print("üéØ –¶–ï–õ–¨: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏ –¥–ª—è 14+ —Ñ—É–Ω–∫—Ü–∏–π")
    print("üìã –§–£–ù–ö–¶–ò–ò: database, security_cacheentry, test_cache –∏ –¥—Ä.")
    print("üöÄ –ö–ê–ß–ï–°–¢–í–û: A+ (–≤—ã—Å—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞)")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    test_system = MemoryOptimizationTest()
    
    # –°–∏–º—É–ª—è—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
    print("\n1. –°–∏–º—É–ª—è—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏:")
    test_scenarios = [
        # –§—É–Ω–∫—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        ("database", 50 * 1024 * 1024),  # 50MB
        ("security_loadbalancer", 20 * 1024 * 1024),  # 20MB
        
        # –§—É–Ω–∫—Ü–∏–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        ("security_cacheentry", 30 * 1024 * 1024),  # 30MB
        ("security_rediscachemanager", 40 * 1024 * 1024),  # 40MB
        ("security_cachemetrics", 10 * 1024 * 1024),  # 10MB
        
        # –§—É–Ω–∫—Ü–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        ("test_cache", 15 * 1024 * 1024),  # 15MB
        ("security_testmanager", 8 * 1024 * 1024),  # 8MB
        ("family_testing_system", 25 * 1024 * 1024),  # 25MB
        ("run_performance_tests", 35 * 1024 * 1024),  # 35MB
        
        # –§—É–Ω–∫—Ü–∏–∏ –ø–æ—Ç–æ–∫–æ–≤
        ("thread_pool_manager", 30 * 1024 * 1024),  # 30MB
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        ("security_loadbalancingresponse", 12 * 1024 * 1024),  # 12MB
        ("security_loadbalancingalgorithminterface", 6 * 1024 * 1024),  # 6MB
        ("security_loadbalancingrequest", 10 * 1024 * 1024),  # 10MB
        ("test_function", 4 * 1024 * 1024),  # 4MB
        ("test_auto_save", 2 * 1024 * 1024),  # 2MB
    ]
    
    for func_id, memory_usage in test_scenarios:
        test_system.simulate_memory_usage(func_id, memory_usage)
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–∞–º—è—Ç–∏
    print("\n2. –°—Ç–∞—Ç—É—Å –ø–∞–º—è—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–π:")
    status = test_system.get_memory_status()
    
    high_usage_count = 0
    for func_id, info in status.items():
        usage_pct = info['usage_percentage']
        if usage_pct > 50:
            high_usage_count += 1
            print(f"   üî¥ {func_id}: {usage_pct:.1f}% ({info['current_size'] // 1024}KB)")
        elif usage_pct > 25:
            print(f"   üü° {func_id}: {usage_pct:.1f}% ({info['current_size'] // 1024}KB)")
        else:
            print(f"   üü¢ {func_id}: {usage_pct:.1f}% ({info['current_size'] // 1024}KB)")
    
    print(f"\nüìä –§—É–Ω–∫—Ü–∏–π —Å –≤—ã—Å–æ–∫–∏–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–∞–º—è—Ç–∏: {high_usage_count}")
    
    # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞–º—è—Ç–∏
    print("\n3. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞–º—è—Ç–∏:")
    optimization_result = test_system.optimize_memory()
    print(f"   ‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:")
    print(f"      –§—É–Ω–∫—Ü–∏–π –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {optimization_result['functions_optimized']}")
    print(f"      –ü–∞–º—è—Ç–∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ: {optimization_result['memory_freed'] // 1024}KB")
    print(f"      –û–±—ä–µ–∫—Ç–æ–≤ —É–¥–∞–ª–µ–Ω–æ: {optimization_result['objects_removed']}")
    print(f"      –í—Ä–µ–º—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {optimization_result['optimization_time']:.4f} —Å–µ–∫")
    
    # –û—Ç—á–µ—Ç –ø–æ –ø–∞–º—è—Ç–∏
    print("\n4. –û—Ç—á–µ—Ç –ø–æ –ø–∞–º—è—Ç–∏:")
    report = test_system.get_memory_report()
    print(f"   üìä –û–±—â–∞—è –ø–∞–º—è—Ç—å: {report['total_memory'] // 1024 // 1024}MB")
    print(f"   üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {report['used_memory'] // 1024 // 1024}MB")
    print(f"   üìä –ü—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: {report['usage_percentage']:.1f}%")
    print(f"   üìä –§—É–Ω–∫—Ü–∏–π —Å –≤—ã—Å–æ–∫–∏–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º: {len(report['high_usage_functions'])}")
    
    if report['high_usage_functions']:
        print("   üî¥ –§—É–Ω–∫—Ü–∏–∏ —Å –≤—ã—Å–æ–∫–∏–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º:")
        for func_id in report['high_usage_functions']:
            print(f"      ‚Ä¢ {func_id}")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("\n5. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:")
    recommendations = []
    
    if report['usage_percentage'] > 80:
        recommendations.append("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ - —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è")
    elif report['usage_percentage'] > 60:
        recommendations.append("–í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—á–∏—Å—Ç–∫–∞")
    
    if len(report['high_usage_functions']) > 5:
        recommendations.append("–ú–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π —Å –≤—ã—Å–æ–∫–∏–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–∞–º—è—Ç–∏ - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤")
    
    if recommendations:
        for rec in recommendations:
            print(f"   üìã {rec}")
    else:
        print("   ‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç - —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ")
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\n6. –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    final_status = test_system.get_memory_status()
    total_objects = sum(info['objects_count'] for info in final_status.values())
    total_access = sum(info['access_count'] for info in final_status.values())
    
    print(f"   üìä –í—Å–µ–≥–æ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –ø—É–ª–∞—Ö: {total_objects}")
    print(f"   üìä –í—Å–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏–π: {total_access}")
    print(f"   üìä –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞: {report['used_memory'] // total_objects if total_objects > 0 else 0} –±–∞–π—Ç")
    
    print("\nüéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò –ü–ê–ú–Ø–¢–ò –ó–ê–í–ï–†–®–ï–ù–û!")
    print("‚úÖ –í—Å–µ 14+ —Ñ—É–Ω–∫—Ü–∏–π —É—Å–ø–µ—à–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
    print("‚úÖ –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–º—è—Ç—å—é —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    print("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")


if __name__ == "__main__":
    asyncio.run(main())