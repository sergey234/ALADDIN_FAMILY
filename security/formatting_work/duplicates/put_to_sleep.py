#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å–∏—Å—Ç–µ–º –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º
–ü–µ—Ä–µ–≤–æ–¥–∏—Ç RateLimiter, CircuitBreaker –∏ UserInterfaceManager –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º
"""

import asyncio
import logging
import os
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(
    os.path.dirname(
        os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
    )
)

from circuit_breaker import CircuitBreaker  # noqa: E402
from rate_limiter import RateLimiter  # noqa: E402
from user_interface_manager import UserInterfaceManager  # noqa: E402

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
)
logger = logging.getLogger(__name__)


async def put_systems_to_sleep():
    """
    –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –≤—Å–µ —Ç—Ä–∏ —Å–∏—Å—Ç–µ–º—ã –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º
    """
    logger.info("üåô –ù–∞—á–∏–Ω–∞—é –ø–µ—Ä–µ–≤–æ–¥ —Å–∏—Å—Ç–µ–º –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º...")

    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Å–ø—è—â–µ–≥–æ —Ä–µ–∂–∏–º–∞
    sleep_config = {
        "redis_url": "redis://localhost:6379/0",
        "database_url": "sqlite:///sleep_mode.db",
        "ml_enabled": False,  # –û—Ç–∫–ª—é—á–∞–µ–º ML –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
        "adaptive_learning": False,  # –û—Ç–∫–ª—é—á–∞–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ
        "cleanup_interval": 3600,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—á–∏—Å—Ç–∫–∏
        "metrics_enabled": False,  # –û—Ç–∫–ª—é—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
        "logging_enabled": True,  # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –ª–æ–≥–∏
        "sleep_mode": True,  # –í–∫–ª—é—á–∞–µ–º —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º
        "auto_wake_up": True,  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        "wake_up_threshold": 0.8,  # –ü–æ—Ä–æ–≥ –¥–ª—è –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è
        "max_sleep_time": 86400,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Å–Ω–∞ (24 —á–∞—Å–∞)
    }

    systems = []

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º RateLimiter –≤ —Å–ø—è—â–µ–º —Ä–µ–∂–∏–º–µ
        logger.info("‚è≥ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RateLimiter –≤ —Å–ø—è—â–µ–º —Ä–µ–∂–∏–º–µ...")
        rate_limiter = RateLimiter(
            redis_url=sleep_config["redis_url"],
            max_requests=10,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ª–∏–º–∏—Ç—ã
            window_size=60,
            sleep_mode=True,
        )
        systems.append(("RateLimiter", rate_limiter))
        logger.info("‚úÖ RateLimiter –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ —Å–ø—è—â–µ–º —Ä–µ–∂–∏–º–µ")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º CircuitBreaker –≤ —Å–ø—è—â–µ–º —Ä–µ–∂–∏–º–µ
        logger.info("‚è≥ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CircuitBreaker –≤ —Å–ø—è—â–µ–º —Ä–µ–∂–∏–º–µ...")
        circuit_breaker = CircuitBreaker(
            redis_url=sleep_config["redis_url"],
            failure_threshold=5,
            recovery_timeout=30,
            sleep_mode=True,
        )
        systems.append(("CircuitBreaker", circuit_breaker))
        logger.info("‚úÖ CircuitBreaker –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ —Å–ø—è—â–µ–º —Ä–µ–∂–∏–º–µ")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º UserInterfaceManager –≤ —Å–ø—è—â–µ–º —Ä–µ–∂–∏–º–µ
        logger.info("‚è≥ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UserInterfaceManager –≤ —Å–ø—è—â–µ–º —Ä–µ–∂–∏–º–µ...")
        ui_manager = UserInterfaceManager(
            database_url=sleep_config["database_url"],
            sleep_mode=True,
            ml_enabled=sleep_config["ml_enabled"],
            adaptive_learning=sleep_config["adaptive_learning"],
        )
        systems.append(("UserInterfaceManager", ui_manager))
        logger.info("‚úÖ UserInterfaceManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ —Å–ø—è—â–µ–º —Ä–µ–∂–∏–º–µ")

        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤—Å–µ —Å–∏—Å—Ç–µ–º—ã –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º
        logger.info("üò¥ –ü–µ—Ä–µ–≤–æ–¥ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º...")
        for name, system in systems:
            try:
                if hasattr(system, "sleep"):
                    await system.sleep()
                    logger.info(f"‚úÖ {name} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º")
                else:
                    logger.warning(f"‚ö†Ô∏è {name} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º")
            except Exception as e:
                logger.error(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ {name} –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º: {e}"
                )

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ
        if sleep_config["auto_wake_up"]:
            logger.info("üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è...")
            for name, system in systems:
                try:
                    if hasattr(system, "set_auto_wake_up"):
                        await system.set_auto_wake_up(
                            threshold=sleep_config["wake_up_threshold"],
                            max_sleep_time=sleep_config["max_sleep_time"],
                        )
                        logger.info(
                            f"‚úÖ {name} –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ"
                        )
                except Exception as e:
                    logger.error(
                        f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∞–≤—Ç–æ–ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è –¥–ª—è {name}: "
                        f"{e}"
                    )

        logger.info("üéâ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º!")
        logger.info(
            "üí§ –°–∏—Å—Ç–µ–º—ã –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ—Å—ã–ø–∞—Ç—å—Å—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"
        )

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º
        logger.info("üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º:")
        for name, system in systems:
            try:
                if hasattr(system, "get_status"):
                    status = await system.get_status()
                    logger.info(f"  {name}: {status}")
                else:
                    logger.info(f"  {name}: –°–ø—è—â–∏–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                logger.error(f"  {name}: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ - {e}")

    except Exception as e:
        logger.error(
            f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ —Å–∏—Å—Ç–µ–º –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º: {e}"
        )
        raise


async def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    """
    try:
        await put_systems_to_sleep()
        logger.info("‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        logger.error(f"‚ùå –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π: {e}")
        sys.exit(1)


if __name__ == "__main__":
    asyncio.run(main())
