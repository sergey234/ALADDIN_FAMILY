# -*- coding: utf-8 -*-
"""
ALADDIN Security System - MalwareProtection
–ó–∞—â–∏—Ç–∞ –æ—Ç –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω–æ–≥–æ –ü–û - –ö–†–ò–¢–ò–ß–ù–û

–ê–≤—Ç–æ—Ä: ALADDIN Security Team
–í–µ—Ä—Å–∏—è: 1.0
–î–∞—Ç–∞: 2025-09-12
"""

import time
import hashlib
import os
import subprocess
import json
from typing import Dict, List, Optional, Tuple, Any
from dataclasses import dataclass
from enum import Enum
import yara
import requests
from pathlib import Path


class ThreatLevel(Enum):
    """–£—Ä–æ–≤–Ω–∏ —É–≥—Ä–æ–∑"""
    LOW = "low"
    MEDIUM = "medium"
    HIGH = "high"
    CRITICAL = "critical"


class MalwareType(Enum):
    """–¢–∏–ø—ã –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω–æ–≥–æ –ü–û"""
    VIRUS = "virus"
    TROJAN = "trojan"
    WORM = "worm"
    RANSOMWARE = "ransomware"
    SPYWARE = "spyware"
    ADWARE = "adware"
    ROOTKIT = "rootkit"
    BACKDOOR = "backdoor"
    KEYLOGGER = "keylogger"
    BOTNET = "botnet"


@dataclass
class MalwareSignature:
    """–ü–æ–¥–ø–∏—Å—å –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω–æ–≥–æ –ü–û"""
    name: str
    malware_type: MalwareType
    threat_level: ThreatLevel
    signature: str
    description: str
    created_at: float
    updated_at: float


@dataclass
class ScanResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    file_path: str
    is_malicious: bool
    threat_level: ThreatLevel
    malware_type: Optional[MalwareType]
    signature: Optional[str]
    confidence: float
    scan_time: float
    details: Dict[str, Any]


class MalwareProtection:
    """–°–∏—Å—Ç–µ–º–∞ –∑–∞—â–∏—Ç—ã –æ—Ç –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω–æ–≥–æ –ü–û"""
    
    def __init__(self):
        self.signatures: Dict[str, MalwareSignature] = {}
        self.scan_history: List[ScanResult] = []
        self.quarantine_dir = "/tmp/aladdin_quarantine"
        self.yara_rules = []
        self.is_active = True
        self.scan_count = 0
        self.threats_blocked = 0
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä–∞–Ω—Ç–∏–Ω
        os.makedirs(self.quarantine_dir, exist_ok=True)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Å–∏–≥–Ω–∞—Ç—É—Ä—ã
        self._load_default_signatures()
        self._load_yara_rules()
    
    def _load_default_signatures(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –±–∞–∑–æ–≤—ã–µ —Å–∏–≥–Ω–∞—Ç—É—Ä—ã"""
        default_signatures = [
            {
                "name": "EICAR Test String",
                "malware_type": MalwareType.VIRUS,
                "threat_level": ThreatLevel.LOW,
                "signature": "X5O!P%@AP[4\\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*",
                "description": "–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ EICAR –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–Ω—Ç–∏–≤–∏—Ä—É—Å–∞"
            },
            {
                "name": "Generic Ransomware Pattern",
                "malware_type": MalwareType.RANSOMWARE,
                "threat_level": ThreatLevel.CRITICAL,
                "signature": "encrypt",
                "description": "–û–±—â–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω ransomware"
            },
            {
                "name": "Suspicious PowerShell",
                "malware_type": MalwareType.TROJAN,
                "threat_level": ThreatLevel.HIGH,
                "signature": "Invoke-Expression",
                "description": "–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ PowerShell"
            }
        ]
        
        for sig_data in default_signatures:
            signature = MalwareSignature(
                name=sig_data["name"],
                malware_type=sig_data["malware_type"],
                threat_level=sig_data["threat_level"],
                signature=sig_data["signature"],
                description=sig_data["description"],
                created_at=time.time(),
                updated_at=time.time()
            )
            self.signatures[sig_data["name"]] = signature
    
    def _load_yara_rules(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ YARA"""
        try:
            # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞ YARA
            basic_rules = """
rule SuspiciousFile {
    strings:
        $s1 = "malware" nocase
        $s2 = "virus" nocase
        $s3 = "trojan" nocase
    condition:
        any of them
}

rule RansomwarePattern {
    strings:
        $s1 = "encrypt" nocase
        $s2 = "decrypt" nocase
        $s3 = "ransom" nocase
    condition:
        any of them
}
"""
            # –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª–∞
            self.yara_rules = yara.compile(source=basic_rules)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ YARA –ø—Ä–∞–≤–∏–ª: {e}")
            self.yara_rules = []
    
    def add_signature(self, signature: MalwareSignature):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é —Å–∏–≥–Ω–∞—Ç—É—Ä—É"""
        self.signatures[signature.name] = signature
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å–∏–≥–Ω–∞—Ç—É—Ä–∞: {signature.name}")
    
    def scan_file(self, file_path: str) -> ScanResult:
        """–°–∫–∞–Ω–∏—Ä—É–µ—Ç —Ñ–∞–π–ª –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω–æ–≥–æ –ü–û"""
        start_time = time.time()
        self.scan_count += 1
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            if not os.path.exists(file_path):
                return ScanResult(
                    file_path=file_path,
                    is_malicious=False,
                    threat_level=ThreatLevel.LOW,
                    malware_type=None,
                    signature=None,
                    confidence=0.0,
                    scan_time=time.time() - start_time,
                    details={"error": "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"}
                )
            
            # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
            with open(file_path, 'rb') as f:
                content = f.read()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Å–∏–≥–Ω–∞—Ç—É—Ä–∞–º
            for sig_name, signature in self.signatures.items():
                if signature.signature.encode() in content:
                    result = ScanResult(
                        file_path=file_path,
                        is_malicious=True,
                        threat_level=signature.threat_level,
                        malware_type=signature.malware_type,
                        signature=sig_name,
                        confidence=0.9,
                        scan_time=time.time() - start_time,
                        details={"signature": signature.description}
                    )
                    self.scan_history.append(result)
                    self.threats_blocked += 1
                    return result
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ YARA –ø—Ä–∞–≤–∏–ª–∞–º
            if self.yara_rules:
                try:
                    matches = self.yara_rules.match(file_path)
                    if matches:
                        result = ScanResult(
                            file_path=file_path,
                            is_malicious=True,
                            threat_level=ThreatLevel.MEDIUM,
                            malware_type=MalwareType.VIRUS,
                            signature=f"YARA: {matches[0].rule}",
                            confidence=0.8,
                            scan_time=time.time() - start_time,
                            details={"yara_rule": matches[0].rule}
                        )
                        self.scan_history.append(result)
                        self.threats_blocked += 1
                        return result
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ YARA —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            
            # –§–∞–π–ª —á–∏—Å—Ç—ã–π
            result = ScanResult(
                file_path=file_path,
                is_malicious=False,
                threat_level=ThreatLevel.LOW,
                malware_type=None,
                signature=None,
                confidence=1.0,
                scan_time=time.time() - start_time,
                details={"status": "clean"}
            )
            self.scan_history.append(result)
            return result
            
        except Exception as e:
            result = ScanResult(
                file_path=file_path,
                is_malicious=False,
                threat_level=ThreatLevel.LOW,
                malware_type=None,
                signature=None,
                confidence=0.0,
                scan_time=time.time() - start_time,
                details={"error": str(e)}
            )
            self.scan_history.append(result)
            return result
    
    def scan_directory(self, directory_path: str) -> List[ScanResult]:
        """–°–∫–∞–Ω–∏—Ä—É–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é"""
        results = []
        
        try:
            for root, dirs, files in os.walk(directory_path):
                for file in files:
                    file_path = os.path.join(root, file)
                    result = self.scan_file(file_path)
                    results.append(result)
                    
                    if result.is_malicious:
                        print(f"üö® –£–ì–†–û–ó–ê –û–ë–ù–ê–†–£–ñ–ï–ù–ê: {file_path}")
                        print(f"   –¢–∏–ø: {result.malware_type}")
                        print(f"   –£—Ä–æ–≤–µ–Ω—å: {result.threat_level}")
                        print(f"   –°–∏–≥–Ω–∞—Ç—É—Ä–∞: {result.signature}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {e}")
        
        return results
    
    def quarantine_file(self, file_path: str) -> bool:
        """–ü–æ–º–µ—â–∞–µ—Ç —Ñ–∞–π–ª –≤ –∫–∞—Ä–∞–Ω—Ç–∏–Ω"""
        try:
            if not os.path.exists(file_path):
                return False
            
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –≤ –∫–∞—Ä–∞–Ω—Ç–∏–Ω–µ
            filename = os.path.basename(file_path)
            quarantine_path = os.path.join(self.quarantine_dir, f"{int(time.time())}_{filename}")
            
            # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª
            os.rename(file_path, quarantine_path)
            print(f"üîí –§–∞–π–ª –ø–æ–º–µ—â–µ–Ω –≤ –∫–∞—Ä–∞–Ω—Ç–∏–Ω: {quarantine_path}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–º–µ—â–µ–Ω–∏—è –≤ –∫–∞—Ä–∞–Ω—Ç–∏–Ω: {e}")
            return False
    
    def get_scan_statistics(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        total_scans = len(self.scan_history)
        malicious_count = sum(1 for r in self.scan_history if r.is_malicious)
        clean_count = total_scans - malicious_count
        
        threat_levels = {}
        malware_types = {}
        
        for result in self.scan_history:
            if result.is_malicious:
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Ä–æ–≤–Ω–∏ —É–≥—Ä–æ–∑
                level = result.threat_level.value
                threat_levels[level] = threat_levels.get(level, 0) + 1
                
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–∏–ø—ã –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω–æ–≥–æ –ü–û
                if result.malware_type:
                    mtype = result.malware_type.value
                    malware_types[mtype] = malware_types.get(mtype, 0) + 1
        
        return {
            "total_scans": total_scans,
            "malicious_count": malicious_count,
            "clean_count": clean_count,
            "threat_levels": threat_levels,
            "malware_types": malware_types,
            "signatures_count": len(self.signatures),
            "quarantine_count": len(os.listdir(self.quarantine_dir)) if os.path.exists(self.quarantine_dir) else 0
        }
    
    def update_signatures(self) -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–∏–≥–Ω–∞—Ç—É—Ä—ã –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞"""
        try:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É —Å–∏–≥–Ω–∞—Ç—É—Ä –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ API
            print("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞—Ç—É—Ä...")
            
            # –°–∏–º—É–ª—è—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            time.sleep(1)
            
            print("‚úÖ –°–∏–≥–Ω–∞—Ç—É—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏–≥–Ω–∞—Ç—É—Ä: {e}")
            return False
    
    def get_quarantine_files(self) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –∫–∞—Ä–∞–Ω—Ç–∏–Ω–µ"""
        try:
            if os.path.exists(self.quarantine_dir):
                return os.listdir(self.quarantine_dir)
            return []
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–∞—Ä–∞–Ω—Ç–∏–Ω–∞: {e}")
            return []
    
    def restore_from_quarantine(self, filename: str, destination: str) -> bool:
        """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–∞–π–ª –∏–∑ –∫–∞—Ä–∞–Ω—Ç–∏–Ω–∞"""
        try:
            quarantine_path = os.path.join(self.quarantine_dir, filename)
            if os.path.exists(quarantine_path):
                os.rename(quarantine_path, destination)
                print(f"‚úÖ –§–∞–π–ª –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {destination}")
                return True
            return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            return False
    
    def clear_quarantine(self) -> bool:
        """–û—á–∏—â–∞–µ—Ç –∫–∞—Ä–∞–Ω—Ç–∏–Ω"""
        try:
            if os.path.exists(self.quarantine_dir):
                for filename in os.listdir(self.quarantine_dir):
                    file_path = os.path.join(self.quarantine_dir, filename)
                    os.remove(file_path)
                print("üóëÔ∏è –ö–∞—Ä–∞–Ω—Ç–∏–Ω –æ—á–∏—â–µ–Ω")
                return True
            return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–∞—Ä–∞–Ω—Ç–∏–Ω–∞: {e}")
            return False


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º—ã –∑–∞—â–∏—Ç—ã
    malware_protection = MalwareProtection()
    
    # –°–∫–∞–Ω–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    print("üîç –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ...")
    results = malware_protection.scan_directory(".")
    
    # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = malware_protection.get_scan_statistics()
    print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"   –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {stats['total_scans']}")
    print(f"   –ß–∏—Å—Ç—ã—Ö: {stats['clean_count']}")
    print(f"   –ó–∞—Ä–∞–∂–µ–Ω–Ω—ã—Ö: {stats['malicious_count']}")
    print(f"   –°–∏–≥–Ω–∞—Ç—É—Ä: {stats['signatures_count']}")
    print(f"   –í –∫–∞—Ä–∞–Ω—Ç–∏–Ω–µ: {stats['quarantine_count']}")