#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤ SmartMonitoringSystem
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from smart_monitoring import SmartMonitoringSystem, AlertRule, AlertSeverity, AlertStatus
from datetime import datetime

def test_all_methods():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤ –∫–ª–∞—Å—Å–∞ SmartMonitoringSystem"""
    
    print("=" * 60)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –î–û–°–¢–£–ü–ù–û–°–¢–ò –ú–ï–¢–û–î–û–í SmartMonitoringSystem")
    print("=" * 60)
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
        print("1. –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ SmartMonitoringSystem...")
        system = SmartMonitoringSystem("TestSystem")
        print("‚úì –≠–∫–∑–µ–º–ø–ª—è—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ __str__ –∏ __repr__
        print("\n2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π...")
        str_repr = str(system)
        repr_repr = repr(system)
        print(f"‚úì __str__: {str_repr}")
        print(f"‚úì __repr__: {repr_repr}")
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π
        print("\n3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π...")
        system.start()
        print("‚úì start() –≤—ã–ø–æ–ª–Ω–µ–Ω")
        
        system.pause()
        print("‚úì pause() –≤—ã–ø–æ–ª–Ω–µ–Ω")
        
        system.resume()
        print("‚úì resume() –≤—ã–ø–æ–ª–Ω–µ–Ω")
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª
        print("\n4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª...")
        rule = AlertRule(
            rule_id="test_rule",
            name="Test Rule",
            metric_name="test_metric",
            condition=">",
            threshold=50.0,
            severity=AlertSeverity.WARNING
        )
        system.add_rule(rule)
        print("‚úì add_rule() –≤—ã–ø–æ–ª–Ω–µ–Ω")
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫
        print("\n5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫...")
        system.add_metric("test_metric", 75.0, {"source": "test"})
        print("‚úì add_metric() –≤—ã–ø–æ–ª–Ω–µ–Ω")
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ callback'–æ–≤
        print("\n6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ callback'–æ–≤...")
        def test_callback(alert):
            print(f"Callback –ø–æ–ª—É—á–µ–Ω: {alert.title}")
        
        system.add_alert_callback(test_callback)
        print("‚úì add_alert_callback() –≤—ã–ø–æ–ª–Ω–µ–Ω")
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        print("\n7. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö...")
        active_alerts = system.get_active_alerts()
        print(f"‚úì get_active_alerts(): {len(active_alerts)} –∞–ª–µ—Ä—Ç–æ–≤")
        
        alert_stats = system.get_alert_stats()
        print(f"‚úì get_alert_stats(): {alert_stats}")
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤
        print("\n8. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤...")
        print(f"‚úì active_alerts_count: {system.active_alerts_count}")
        print(f"‚úì total_alerts_count: {system.total_alerts_count}")
        print(f"‚úì rules_count: {system.rules_count}")
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        print("\n9. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        config = system.get_config()
        print(f"‚úì get_config(): –ø–æ–ª—É—á–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        print("\n10. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
        metrics_summary = system.get_metrics_summary()
        print(f"‚úì get_metrics_summary(): {metrics_summary}")
        
        perf_stats = system.get_performance_stats()
        print(f"‚úì get_performance_stats(): {perf_stats}")
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
        print("\n11. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã...")
        is_healthy = system.is_healthy()
        print(f"‚úì is_healthy(): {is_healthy}")
        
        health_status = system.get_health_status()
        print(f"‚úì get_health_status(): {health_status}")
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –º–µ—Ç–æ–¥–æ–≤
        print("\n12. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –º–µ—Ç–æ–¥–æ–≤...")
        test_rules = [rule]
        system2 = SmartMonitoringSystem.create_with_rules("TestSystem2", test_rules)
        print("‚úì create_with_rules() –≤—ã–ø–æ–ª–Ω–µ–Ω")
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ class –º–µ—Ç–æ–¥–æ–≤
        print("\n13. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ class –º–µ—Ç–æ–¥–æ–≤...")
        config_data = {
            "name": "ConfigSystem",
            "rules": {
                "config_rule": {
                    "rule_id": "config_rule",
                    "name": "Config Rule",
                    "metric_name": "config_metric",
                    "condition": ">",
                    "threshold": 80.0,
                    "severity": "warning",
                    "cooldown": 300,
                    "min_occurrences": 1,
                    "max_alerts_per_hour": 5,
                    "adaptive_threshold": True
                }
            }
        }
        system3 = SmartMonitoringSystem.from_config(config_data)
        print("‚úì from_config() –≤—ã–ø–æ–ª–Ω–µ–Ω")
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏
        print("\n14. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏...")
        system.clear()
        print("‚úì clear() –≤—ã–ø–æ–ª–Ω–µ–Ω")
        
        system.reset()
        print("‚úì reset() –≤—ã–ø–æ–ª–Ω–µ–Ω")
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        print("\n15. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
        system.stop()
        print("‚úì stop() –≤—ã–ø–æ–ª–Ω–µ–Ω")
        
        system.stop_monitoring()
        print("‚úì stop_monitoring() –≤—ã–ø–æ–ª–Ω–µ–Ω")
        
        print("\n" + "=" * 60)
        print("–í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("=" * 60)
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_error_handling():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
    
    print("\n" + "=" * 60)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ë–†–ê–ë–û–¢–ö–ò –û–®–ò–ë–û–ö")
    print("=" * 60)
    
    try:
        system = SmartMonitoringSystem("ErrorTest")
        
        # –¢–µ—Å—Ç —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        print("1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...")
        try:
            system.add_metric("", 100.0)  # –ü—É—Å—Ç–æ–µ –∏–º—è –º–µ—Ç—Ä–∏–∫–∏
            print("‚ùå –û—à–∏–±–∫–∞ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
        except ValueError as e:
            print(f"‚úì –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞: {e}")
        
        try:
            system.add_metric("test", "invalid")  # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            print("‚ùå –û—à–∏–±–∫–∞ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
        except ValueError as e:
            print(f"‚úì –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞: {e}")
        
        # –¢–µ—Å—Ç —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º callback'–æ–º
        print("\n2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ callback'–∞...")
        try:
            system.add_alert_callback("not_callable")
            print("‚ùå –û—à–∏–±–∫–∞ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
        except ValueError as e:
            print(f"‚úì –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞: {e}")
        
        print("\n‚úì –í—Å–µ —Ç–µ—Å—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –ø—Ä–æ–π–¥–µ–Ω—ã")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫: {e}")
        return False

if __name__ == "__main__":
    success1 = test_all_methods()
    success2 = test_error_handling()
    
    if success1 and success2:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        exit(0)
    else:
        print("\nüí• –ï–°–¢–¨ –û–®–ò–ë–ö–ò –í –¢–ï–°–¢–ê–•!")
        exit(1)