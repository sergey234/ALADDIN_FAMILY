"""
–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ SFM
–°—Ä–∞–≤–Ω–µ–Ω–∏–µ: –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è vs –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
"""

import os
import sys
import time
import psutil
import json
import asyncio
from typing import Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append('/Users/sergejhlystov/ALADDIN_NEW')

def test_original_sfm():
    """–¢–µ—Å—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ SFM"""
    print('
üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ô –í–ï–†–°–ò–ò SFM')
    print('-' * 50)
    
    start_time = time.time()
    start_memory = psutil.Process().memory_info().rss / 1024 / 1024
    
    try:
        from security.safe_function_manager import SafeFunctionManager
        sfm = SafeFunctionManager()
        sfm.initialize()
        
        load_time = time.time() - start_time
        end_memory = psutil.Process().memory_info().rss / 1024 / 1024
        memory_used = end_memory - start_memory
        
        print(f'   ‚è±Ô∏è  –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏: {load_time:.3f} —Å–µ–∫')
        print(f'   üíæ –ü–∞–º—è—Ç—å: {memory_used:.2f} MB')
        print(f'   üì¶ –§—É–Ω–∫—Ü–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {len(sfm.functions)}')
        
        return {
            'load_time': load_time,
            'memory_used': memory_used,
            'functions_count': len(sfm.functions),
            'success': True
        }
        
    except Exception as e:
        print(f'   ‚ùå –û—à–∏–±–∫–∞: {e}')
        return {
            'load_time': 0,
            'memory_used': 0,
            'functions_count': 0,
            'success': False,
            'error': str(e)
        }

def test_optimized_sfm():
    """–¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ SFM"""
    print('
üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ô –í–ï–†–°–ò–ò SFM')
    print('-' * 50)
    
    start_time = time.time()
    start_memory = psutil.Process().memory_info().rss / 1024 / 1024
    
    try:
        from security.optimized_safe_function_manager import OptimizedSafeFunctionManager
        sfm = OptimizedSafeFunctionManager()
        
        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        async def init_sfm():
            await sfm.initialize_async()
            return sfm
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        sfm = asyncio.run(init_sfm())
        
        load_time = time.time() - start_time
        end_memory = psutil.Process().memory_info().rss / 1024 / 1024
        memory_used = end_memory - start_memory
        
        print(f'   ‚è±Ô∏è  –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏: {load_time:.3f} —Å–µ–∫')
        print(f'   üíæ –ü–∞–º—è—Ç—å: {memory_used:.2f} MB')
        print(f'   üì¶ –§—É–Ω–∫—Ü–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {len(sfm.functions)}')
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = sfm.get_stats()
        print(f'   üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}')
        
        return {
            'load_time': load_time,
            'memory_used': memory_used,
            'functions_count': len(sfm.functions),
            'success': True,
            'stats': stats
        }
        
    except Exception as e:
        print(f'   ‚ùå –û—à–∏–±–∫–∞: {e}')
        return {
            'load_time': 0,
            'memory_used': 0,
            'functions_count': 0,
            'success': False,
            'error': str(e)
        }

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print('üß™ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò')
    print('=' * 70)
    
    # –¢–µ—Å—Ç 1: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è
    original_results = test_original_sfm()
    
    # –¢–µ—Å—Ç 2: –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
    optimized_results = test_optimized_sfm()
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print('
üìä –°–†–ê–í–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í')
    print('=' * 70)
    
    if original_results['success'] and optimized_results['success']:
        time_improvement = ((original_results['load_time'] - optimized_results['load_time']) / original_results['load_time']) * 100
        memory_improvement = ((original_results['memory_used'] - optimized_results['memory_used']) / original_results['memory_used']) * 100
        
        print(f'‚è±Ô∏è  –í–†–ï–ú–Ø –ó–ê–ì–†–£–ó–ö–ò:')
        print(f'   –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è: {original_results["load_time"]:.3f} —Å–µ–∫')
        print(f'   –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è: {optimized_results["load_time"]:.3f} —Å–µ–∫')
        print(f'   –£–ª—É—á—à–µ–Ω–∏–µ: {time_improvement:+.1f}%')
        
        print(f'
üíæ –ü–ê–ú–Ø–¢–¨:')
        print(f'   –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è: {original_results["memory_used"]:.2f} MB')
        print(f'   –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è: {optimized_results["memory_used"]:.2f} MB')
        print(f'   –£–ª—É—á—à–µ–Ω–∏–µ: {memory_improvement:+.1f}%')
        
        print(f'
üì¶ –§–£–ù–ö–¶–ò–ò:')
        print(f'   –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è: {original_results["functions_count"]} —Ñ—É–Ω–∫—Ü–∏–π')
        print(f'   –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è: {optimized_results["functions_count"]} —Ñ—É–Ω–∫—Ü–∏–π')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    test_results = {
        'timestamp': time.strftime('%Y-%m-%d %H:%M:%S'),
        'original': original_results,
        'optimized': optimized_results
    }
    
    with open('security/performance_test_results.json', 'w', encoding='utf-8') as f:
        json.dump(test_results, f, indent=2, ensure_ascii=False)
    
    print(f'
üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: security/performance_test_results.json')
    print(f'
üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!')

if __name__ == '__main__':
    main()
