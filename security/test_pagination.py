# -*- coding: utf-8 -*-
"""
Test Pagination - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É pagination_system.py –∏ –µ–≥–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å SFM
"""

import json
import os
import sys
import time
from datetime import datetime
from typing import Dict, List, Any

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

try:
    from pagination_system import (
        PaginationSystem, create_pagination_system,
        get_pagination_system, initialize_pagination_system
    )
    PAGINATION_IMPORT_SUCCESS = True
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ pagination_system: {e}")
    PAGINATION_IMPORT_SUCCESS = False

class PaginationTester:
    """–¢–µ—Å—Ç–µ—Ä —Å–∏—Å—Ç–µ–º—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–µ—Ä–∞"""
        self.test_results = {
            'total_tests': 0,
            'passed_tests': 0,
            'failed_tests': 0,
            'test_details': []
        }
        self.start_time = None
        
    def run_test(self, test_name: str, test_func) -> bool:
        """–ó–∞–ø—É—Å–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        self.test_results['total_tests'] += 1
        self.start_time = time.time()
        
        try:
            result = test_func()
            duration = time.time() - self.start_time
            
            if result:
                self.test_results['passed_tests'] += 1
                status = "‚úÖ –ü–†–û–ô–î–ï–ù"
            else:
                self.test_results['failed_tests'] += 1
                status = "‚ùå –ü–†–û–í–ê–õ–ï–ù"
            
            self.test_results['test_details'].append({
                'test_name': test_name,
                'status': status,
                'duration': duration,
                'timestamp': datetime.now().isoformat()
            })
            
            print(f"{status} {test_name} ({duration:.3f}s)")
            return result
            
        except Exception as e:
            self.test_results['failed_tests'] += 1
            duration = time.time() - self.start_time
            
            self.test_results['test_details'].append({
                'test_name': test_name,
                'status': "‚ùå –û–®–ò–ë–ö–ê",
                'duration': duration,
                'error': str(e),
                'timestamp': datetime.now().isoformat()
            })
            
            print(f"‚ùå –û–®–ò–ë–ö–ê {test_name}: {e} ({duration:.3f}s)")
            return False
    
    def test_pagination_system_creation(self) -> bool:
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
        try:
            pagination = create_pagination_system()
            return pagination is not None
        except Exception:
            return False
    
    def test_pagination_basic_functionality(self) -> bool:
        """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
        try:
            pagination = get_pagination_system()
            if pagination is None:
                return False
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            test_data = [f"item_{i}" for i in range(100)]
            
            # –¢–µ—Å—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            page1 = pagination.paginate(test_data, page=1, per_page=10)
            page2 = pagination.paginate(test_data, page=2, per_page=10)
            
            return (
                len(page1['items']) == 10 and
                len(page2['items']) == 10 and
                page1['items'][0] == "item_0" and
                page2['items'][0] == "item_10"
            )
        except Exception:
            return False
    
    def test_pagination_filtering(self) -> bool:
        """–¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≤ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
        try:
            pagination = get_pagination_system()
            if pagination is None:
                return False
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
            test_data = []
            for i in range(50):
                test_data.append({
                    'id': i,
                    'name': f"item_{i}",
                    'category': 'security' if i % 2 == 0 else 'monitoring'
                })
            
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            filtered = pagination.filter_by_category(test_data, 'security')
            
            return len(filtered) == 25  # –ü–æ–ª–æ–≤–∏–Ω–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        except Exception:
            return False
    
    def test_pagination_searching(self) -> bool:
        """–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –≤ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
        try:
            pagination = get_pagination_system()
            if pagination is None:
                return False
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            test_data = [
                {'name': 'security_function_1'},
                {'name': 'monitoring_function_1'},
                {'name': 'security_function_2'},
                {'name': 'other_function_1'}
            ]
            
            # –ü–æ–∏—Å–∫
            results = pagination.search(test_data, 'security')
            
            return len(results) == 2
        except Exception:
            return False
    
    def test_pagination_sorting(self) -> bool:
        """–¢–µ—Å—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –≤ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
        try:
            pagination = get_pagination_system()
            if pagination is None:
                return False
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            test_data = [
                {'name': 'z_function', 'priority': 1},
                {'name': 'a_function', 'priority': 3},
                {'name': 'm_function', 'priority': 2}
            ]
            
            # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∏–º–µ–Ω–∏
            sorted_data = pagination.sort(test_data, 'name')
            
            return sorted_data[0]['name'] == 'a_function'
        except Exception:
            return False
    
    def test_pagination_performance(self) -> bool:
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
        try:
            pagination = get_pagination_system()
            if pagination is None:
                return False
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –±–æ–ª—å—à–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
            large_data = [{'id': i, 'name': f"item_{i}"} for i in range(10000)]
            
            # –ò–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
            start_time = time.time()
            
            # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
            page = pagination.paginate(large_data, page=1, per_page=100)
            
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
            filtered = pagination.filter_by_category(large_data, 'test')
            
            # –ü–æ–∏—Å–∫
            results = pagination.search(large_data, 'item_1000')
            
            end_time = time.time()
            duration = end_time - start_time
            
            # –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–∞–∑—É–º–Ω—ã–º (–º–µ–Ω–µ–µ 1 —Å–µ–∫—É–Ω–¥—ã)
            return duration < 1.0
        except Exception:
            return False
    
    def test_pagination_edge_cases(self) -> bool:
        """–¢–µ—Å—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤"""
        try:
            pagination = get_pagination_system()
            if pagination is None:
                return False
            
            # –ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ
            empty_page = pagination.paginate([], page=1, per_page=10)
            if empty_page['total_items'] != 0:
                return False
            
            # –°—Ç—Ä–∞–Ω–∏—Ü–∞ –±–æ–ª—å—à–µ —á–µ–º –¥–∞–Ω–Ω—ã—Ö
            small_data = [{'id': 1}, {'id': 2}]
            large_page = pagination.paginate(small_data, page=10, per_page=10)
            if len(large_page['items']) != 0:
                return False
            
            # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            negative_page = pagination.paginate(small_data, page=-1, per_page=10)
            if negative_page['page'] != 1:  # –î–æ–ª–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å—Å—è –Ω–∞ 1
                return False
            
            return True
        except Exception:
            return False
    
    def test_pagination_integration_with_sfm(self) -> bool:
        """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å SFM"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ pagination_system.py —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            pagination_file = "security/pagination_system.py"
            if not os.path.exists(pagination_file):
                return False
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ SFM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
            sfm_file = "security/safe_function_manager.py"
            if os.path.exists(sfm_file):
                with open(sfm_file, 'r', encoding='utf-8') as f:
                    sfm_content = f.read()
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ SFM —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ—Ç–æ–¥—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
                pagination_methods = [
                    'paginate_functions',
                    'get_functions_page',
                    'search_functions'
                ]
                
                for method in pagination_methods:
                    if method not in sfm_content:
                        return False
            
            return True
        except Exception:
            return False
    
    def run_all_tests(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï PAGINATION –°–ò–°–¢–ï–ú–´")
        print("=" * 60)
        
        if not PAGINATION_IMPORT_SUCCESS:
            print("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å pagination_system –º–æ–¥—É–ª—å")
            return self.test_results
        
        # –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤
        tests = [
            ("–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏", self.test_pagination_system_creation),
            ("–ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å", self.test_pagination_basic_functionality),
            ("–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è", self.test_pagination_filtering),
            ("–ü–æ–∏—Å–∫", self.test_pagination_searching),
            ("–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞", self.test_pagination_sorting),
            ("–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", self.test_pagination_performance),
            ("–ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏", self.test_pagination_edge_cases),
            ("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å SFM", self.test_pagination_integration_with_sfm)
        ]
        
        # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
        for test_name, test_func in tests:
            self.run_test(test_name, test_func)
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_time = sum(test['duration'] for test in self.test_results['test_details'])
        success_rate = (self.test_results['passed_tests'] / self.test_results['total_tests']) * 100
        
        print("\n" + "=" * 60)
        print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   üìÅ –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {self.test_results['total_tests']}")
        print(f"   ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {self.test_results['passed_tests']}")
        print(f"   ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {self.test_results['failed_tests']}")
        print(f"   üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
        print(f"   ‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.3f}s")
        
        if success_rate >= 80:
            print("üéØ –û–¶–ï–ù–ö–ê: –û–¢–õ–ò–ß–ù–û!")
        elif success_rate >= 60:
            print("üéØ –û–¶–ï–ù–ö–ê: –•–û–†–û–®–û!")
        else:
            print("üéØ –û–¶–ï–ù–ö–ê: –¢–†–ï–ë–£–ï–¢ –£–õ–£–ß–®–ï–ù–ò–Ø!")
        
        return self.test_results

def test_pagination_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å SFM"""
    print("\nüîó –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –° SFM")
    print("=" * 40)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ pagination_system.py —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        pagination_file = "security/pagination_system.py"
        if os.path.exists(pagination_file):
            size = os.path.getsize(pagination_file)
            print(f"‚úÖ –§–∞–π–ª {pagination_file} –Ω–∞–π–¥–µ–Ω ({size:,} –±–∞–π—Ç)")
        else:
            print(f"‚ùå –§–∞–π–ª {pagination_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ SFM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        sfm_file = "security/safe_function_manager.py"
        if os.path.exists(sfm_file):
            with open(sfm_file, 'r', encoding='utf-8') as f:
                sfm_content = f.read()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–æ–¥–æ–≤ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤ SFM
            pagination_methods = [
                'paginate_functions',
                'get_functions_page',
                'search_functions',
                'filter_functions'
            ]
            
            found_methods = []
            for method in pagination_methods:
                if method in sfm_content:
                    found_methods.append(method)
            
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –º–µ—Ç–æ–¥–æ–≤ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤ SFM: {len(found_methods)}/{len(pagination_methods)}")
            
            if len(found_methods) >= len(pagination_methods) // 2:
                print("‚úÖ SFM —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π")
            else:
                print("‚ö†Ô∏è SFM —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï PAGINATION –°–ò–°–¢–ï–ú–´")
    print("=" * 80)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–µ—Ä–∞
    tester = PaginationTester()
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    results = tester.run_all_tests()
    
    # –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    integration_success = test_pagination_integration()
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    report_file = f"pagination_test_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
    with open(report_file, 'w', encoding='utf-8') as f:
        json.dump({
            'test_results': results,
            'integration_success': integration_success,
            'timestamp': datetime.now().isoformat()
        }, f, indent=2, ensure_ascii=False)
    
    print(f"\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
    print("‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")

if __name__ == "__main__":
    main()
