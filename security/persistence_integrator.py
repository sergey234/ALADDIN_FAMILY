#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–í–ù–ï–®–ù–ò–ô –ò–ù–¢–ï–ì–†–ê–¢–û–† –ü–ï–†–°–ò–°–¢–ï–ù–¢–ù–û–°–¢–ò –î–õ–Ø SAFEFUNCTIONMANAGER
–†–∞–±–æ—Ç–∞–µ—Ç —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º SafeFunctionManager –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –µ–≥–æ –ª–æ–≥–∏–∫–∏
"""

import json
import os
import threading
from dataclasses import asdict, dataclass
from datetime import datetime
from typing import Any, Dict, Optional


@dataclass
class FunctionMetadata:
    """–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è"""

    function_id: str
    name: str
    description: str
    function_type: str
    security_level: str
    status: str
    created_at: str
    last_execution: Optional[str] = None
    execution_count: int = 0
    success_count: int = 0
    error_count: int = 0
    average_execution_time: float = 0.0
    dependencies: list = None
    is_critical: bool = False
    auto_enable: bool = False


class PersistenceIntegrator:
    """–í–Ω–µ—à–Ω–∏–π –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è SafeFunctionManager"""

    def __init__(
        self, sfm_instance, registry_file: str = "data/functions_registry.json"
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä–∞
        Args:
            sfm_instance: –≠–∫–∑–µ–º–ø–ª—è—Ä SafeFunctionManager
            registry_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Ä–µ–µ—Å—Ç—Ä–∞
        """
        self.sfm = sfm_instance
        self.registry_file = registry_file
        self.lock = threading.Lock()

        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs(os.path.dirname(registry_file), exist_ok=True)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        self.load_functions()

    def save_functions(self) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –≤ —Ñ–∞–π–ª"""
        try:
            with self.lock:
                functions_data = {}

                # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ SafeFunctionManager
                for func_id, function in self.sfm.functions.items():
                    functions_data[func_id] = FunctionMetadata(
                        function_id=func_id,
                        name=function.name,
                        description=function.description,
                        function_type=function.function_type,
                        security_level=function.security_level.value,
                        status=function.status.value,
                        created_at=(
                            function.created_at.isoformat()
                            if hasattr(function, "created_at")
                            else datetime.now().isoformat()
                        ),
                        last_execution=(
                            function.last_execution.isoformat()
                            if hasattr(function, "last_execution")
                            and function.last_execution
                            else None
                        ),
                        execution_count=getattr(
                            function, "execution_count", 0
                        ),
                        success_count=getattr(function, "success_count", 0),
                        error_count=getattr(function, "error_count", 0),
                        average_execution_time=getattr(
                            function, "average_execution_time", 0.0
                        ),
                        dependencies=getattr(function, "dependencies", []),
                        is_critical=getattr(function, "is_critical", False),
                        auto_enable=getattr(function, "auto_enable", False),
                    )

                # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
                registry_data = {
                    "version": "1.0",
                    "last_updated": datetime.now().isoformat(),
                    "functions": {
                        k: asdict(v) for k, v in functions_data.items()
                    },
                }

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
                with open(self.registry_file, "w", encoding="utf-8") as f:
                    json.dump(registry_data, f, indent=2, ensure_ascii=False)

                print(f"‚úÖ –§—É–Ω–∫—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {len(functions_data)} —Ñ—É–Ω–∫—Ü–∏–π")
                return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π: {e}")
            return False

    def load_functions(self) -> bool:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if not os.path.exists(self.registry_file):
                print(f"üìÅ –§–∞–π–ª —Ä–µ–µ—Å—Ç—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.registry_file}")
                return False

            with open(self.registry_file, "r", encoding="utf-8") as f:
                registry_data = json.load(f)

            functions_data = registry_data.get("functions", {})
            loaded_count = 0

            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≤ SafeFunctionManager
            for func_id, func_data in functions_data.items():
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –ª–∏ —É–∂–µ —Ñ—É–Ω–∫—Ü–∏—è
                    if func_id not in self.sfm.functions:
                        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ë–ï–ó auto_enable
                        # —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                        success = self.sfm.register_function(
                            function_id=func_id,
                            name=func_data["name"],
                            description=func_data["description"],
                            function_type=func_data["function_type"],
                            security_level=getattr(
                                self.sfm.SecurityLevel,
                                func_data["security_level"].upper(),
                            ),
                            is_critical=func_data.get("is_critical", False),
                            auto_enable=False,  # –í–ê–ñ–ù–û: –æ—Ç–∫–ª—é—á–∞–µ–º auto_enable
                        )

                        if success:
                            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞–ø—Ä—è–º—É—é
                            function = self.sfm.functions[func_id]
                            function.status = getattr(
                                self.sfm.FunctionStatus,
                                func_data["status"].upper(),
                            )

                            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
                            if func_data.get("is_critical"):
                                function.is_critical = True
                            if func_data.get("auto_enable"):
                                function.auto_enable = True

                            loaded_count += 1

                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ—É–Ω–∫—Ü–∏–∏ {func_id}: {e}")
                    continue

            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ—É–Ω–∫—Ü–∏–π: {loaded_count}")
            return loaded_count > 0

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π: {e}")
            return False

    def register_function_with_persistence(self, **kwargs) -> bool:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º"""
        try:
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é
            success = self.sfm.register_function(**kwargs)

            if success:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
                self.save_functions()
                print(
                    f"‚úÖ –§—É–Ω–∫—Ü–∏—è {kwargs.get('function_id')} "
                    f"–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞"
                )

            return success

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏: {e}")
            return False

    def enable_function_with_persistence(self, function_id: str) -> bool:
        """–í–∫–ª—é—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º"""
        try:
            success = self.sfm.enable_function(function_id)

            if success:
                self.save_functions()
                print(f"‚úÖ –§—É–Ω–∫—Ü–∏—è {function_id} –≤–∫–ª—é—á–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")

            return success

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏: {e}")
            return False

    def disable_function_with_persistence(self, function_id: str) -> bool:
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º"""
        try:
            success = self.sfm.disable_function(function_id)

            if success:
                self.save_functions()
                print(f"‚úÖ –§—É–Ω–∫—Ü–∏—è {function_id} –æ—Ç–∫–ª—é—á–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")

            return success

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏: {e}")
            return False

    def get_functions_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
        try:
            status = {
                "total_functions": len(self.sfm.functions),
                "enabled_functions": len(
                    [
                        f
                        for f in self.sfm.functions.values()
                        if f.status.value == "enabled"
                    ]
                ),
                "disabled_functions": len(
                    [
                        f
                        for f in self.sfm.functions.values()
                        if f.status.value == "disabled"
                    ]
                ),
                "critical_functions": len(
                    [
                        f
                        for f in self.sfm.functions.values()
                        if getattr(f, "is_critical", False)
                    ]
                ),
                "registry_file": self.registry_file,
                "registry_exists": os.path.exists(self.registry_file),
            }
            return status
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return {}


if __name__ == "__main__":
    print("üîß PersistenceIntegrator –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
    print("üìÅ –§–∞–π–ª —Ä–µ–µ—Å—Ç—Ä–∞: data/functions_registry.json")
    print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º SafeFunctionManager")
