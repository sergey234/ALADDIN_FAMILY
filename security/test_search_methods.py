#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç –º–µ—Ç–æ–¥–æ–≤ –ø–æ–∏—Å–∫–∞ SFM - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –º–µ—Ç–æ–¥–æ–≤ –ø–æ–∏—Å–∫–∞
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from security.safe_function_manager import SafeFunctionManager, FunctionStatus, SecurityLevel

def test_search_methods():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ –ø–æ–∏—Å–∫–∞ SFM"""
    print("üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–ï–¢–û–î–û–í –ü–û–ò–°–ö–ê SFM")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ SFM
    sfm = SafeFunctionManager("TestSFM")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
    test_functions = [
        {
            "function_id": "test_security_001",
            "name": "Security Scanner",
            "description": "–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –Ω–∞ —É–≥—Ä–æ–∑—ã",
            "function_type": "SECURITY",
            "security_level": SecurityLevel.HIGH,
            "is_critical": True
        },
        {
            "function_id": "test_family_001", 
            "name": "Family Monitor",
            "description": "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ–º–µ–π–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
            "function_type": "FAMILY",
            "security_level": SecurityLevel.MEDIUM,
            "is_critical": False
        },
        {
            "function_id": "test_ai_001",
            "name": "AI Analyzer", 
            "description": "–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–º–æ—â—å—é –ò–ò",
            "function_type": "AI_ML",
            "security_level": SecurityLevel.HIGH,
            "is_critical": True
        }
    ]
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π
    for func_data in test_functions:
        sfm.register_function(
            function_id=func_data["function_id"],
            name=func_data["name"],
            description=func_data["description"],
            function_type=func_data["function_type"],
            security_level=func_data["security_level"],
            is_critical=func_data["is_critical"]
        )
        sfm.enable_function(func_data["function_id"])
    
    print(f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(test_functions)} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π")
    
    # –¢–µ—Å—Ç 1: search_functions
    print("\nüîç –¢–ï–°–¢ 1: search_functions")
    results = sfm.search_functions("security")
    print(f"–ü–æ–∏—Å–∫ 'security': –Ω–∞–π–¥–µ–Ω–æ {len(results)} —Ñ—É–Ω–∫—Ü–∏–π")
    for result in results:
        print(f"  - {result['name']} ({result['function_id']})")
    
    # –¢–µ—Å—Ç 2: find_function
    print("\nüîç –¢–ï–°–¢ 2: find_function")
    function = sfm.find_function("test_security_001")
    if function:
        print(f"–§—É–Ω–∫—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞: {function['name']}")
    else:
        print("‚ùå –§—É–Ω–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    # –¢–µ—Å—Ç 3: get_functions_by_category
    print("\nüîç –¢–ï–°–¢ 3: get_functions_by_category")
    security_functions = sfm.get_functions_by_category("SECURITY")
    print(f"–§—É–Ω–∫—Ü–∏–∏ SECURITY: {len(security_functions)}")
    for func in security_functions:
        print(f"  - {func['name']}")
    
    # –¢–µ—Å—Ç 4: get_functions_by_status
    print("\nüîç –¢–ï–°–¢ 4: get_functions_by_status")
    enabled_functions = sfm.get_functions_by_status("enabled")
    print(f"–í–∫–ª—é—á–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: {len(enabled_functions)}")
    
    # –¢–µ—Å—Ç 5: search_functions_advanced
    print("\nüîç –¢–ï–°–¢ 5: search_functions_advanced")
    advanced_results = sfm.search_functions_advanced(
        query="monitor",
        category="FAMILY",
        is_critical=False
    )
    print(f"–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫: –Ω–∞–π–¥–µ–Ω–æ {advanced_results['total_found']} —Ñ—É–Ω–∫—Ü–∏–π")
    print(f"–ü—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã: {advanced_results['filters_applied']}")
    
    # –¢–µ—Å—Ç 6: get_functions_by_type
    print("\nüîç –¢–ï–°–¢ 6: get_functions_by_type")
    ai_functions = sfm.get_functions_by_type("AI_ML")
    print(f"–§—É–Ω–∫—Ü–∏–∏ AI_ML: {len(ai_functions)}")
    
    print("\n‚úÖ –í–°–ï –¢–ï–°–¢–´ –ú–ï–¢–û–î–û–í –ü–û–ò–°–ö–ê –ó–ê–í–ï–†–®–ï–ù–´")
    return True

if __name__ == "__main__":
    try:
        test_search_methods()
        print("\nüéâ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ó–ê–î–ê–ß–ê –í–´–ü–û–õ–ù–ï–ù–ê: –ú–µ—Ç–æ–¥—ã –ø–æ–∏—Å–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ SFM!")
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: {e}")
        sys.exit(1)