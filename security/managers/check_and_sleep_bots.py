#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏ –ø–µ—Ä–µ–≤–æ–¥ –±–æ—Ç–æ–≤ –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –±–æ—Ç—ã –∏–∑ –≠—Ç–∞–ø–æ–≤ 9.2 –∏ 9.3 –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º
"""

import asyncio
import json
import logging
from datetime import datetime
from pathlib import Path
from typing import Any, Dict

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class BotSleepManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –ø–µ—Ä–µ–≤–æ–¥–∞ –±–æ—Ç–æ–≤ –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º"""

    def __init__(self):
        self.sleep_config_path = "sleep_config.json"
        self.sleep_config = self._load_sleep_config()
        self.bot_instances = {}
        self.sleep_status = {}

        # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±–æ—Ç–æ–≤ –∏–∑ –≠—Ç–∞–ø–æ–≤ 9.2 –∏ 9.3
        self.all_bots = {
            # –≠—Ç–∞–ø 9.2: –ú–æ–±–∏–ª—å–Ω—ã–µ –∏ –∏–≥—Ä–æ–≤—ã–µ –±–æ—Ç—ã
            "mobile_navigation": {
                "file": "mobile_navigation_bot.py",
                "class": "MobileNavigationBot",
                "function": "function_86",
                "description": "–±–æ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–æ–±–∏–ª—å–Ω—ã–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º",
            },
            "gaming_security": {
                "file": "gaming_security_bot.py",
                "class": "GamingSecurityBot",
                "function": "function_87",
                "description": "–±–æ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏–≥—Ä",
            },
            "emergency_response": {
                "file": "emergency_response_bot.py",
                "class": "EmergencyResponseBot",
                "function": "function_88",
                "description": "–±–æ—Ç —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—è",
            },
            "parental_control": {
                "file": "parental_control_bot.py",
                "class": "ParentalControlBot",
                "function": "function_89",
                "description": "–±–æ—Ç —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è",
            },
            "notification": {
                "file": "notification_bot.py",
                "class": "NotificationBot",
                "function": "function_90",
                "description": "–±–æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
            },
            # –≠—Ç–∞–ø 9.3: –ú–µ—Å—Å–µ–Ω–¥–∂–µ—Ä—ã –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏
            "whatsapp": {
                "file": "whatsapp_security_bot.py",
                "class": "WhatsAppSecurityBot",
                "function": "function_91",
                "description": "–±–æ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ WhatsApp",
            },
            "telegram": {
                "file": "telegram_security_bot.py",
                "class": "TelegramSecurityBot",
                "function": "function_92",
                "description": "–±–æ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ Telegram",
            },
            "instagram": {
                "file": "instagram_security_bot.py",
                "class": "InstagramSecurityBot",
                "function": "function_93",
                "description": "–±–æ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ Instagram",
            },
            "max_messenger": {
                "file": "max_messenger_security_bot.py",
                "class": "MaxMessengerSecurityBot",
                "function": "function_94",
                "description": "–±–æ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞ MAX",
            },
            "analytics": {
                "file": "analytics_bot.py",
                "class": "AnalyticsBot",
                "function": "function_95",
                "description": "–±–æ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏",
            },
            "website_navigation": {
                "file": "website_navigation_bot.py",
                "class": "WebsiteNavigationBot",
                "function": "function_96",
                "description": "–±–æ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å–∞–π—Ç–∞–º",
            },
        }

    def _load_sleep_config(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–ø—è—â–µ–≥–æ —Ä–µ–∂–∏–º–∞"""
        default_config = {
            "sleep_enabled": True,
            "auto_sleep_after_minutes": 30,
            "wake_up_on_demand": True,
            "save_state_on_sleep": True,
            "bots": {},
        }

        try:
            if Path(self.sleep_config_path).exists():
                with open(self.sleep_config_path, "r", encoding="utf-8") as f:
                    config = json.load(f)
                return {**default_config, **config}
            else:
                return default_config
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return default_config

    def _save_sleep_config(self, config: Dict[str, Any]) -> None:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–ø—è—â–µ–≥–æ —Ä–µ–∂–∏–º–∞"""
        try:
            with open(self.sleep_config_path, "w", encoding="utf-8") as f:
                json.dump(config, f, indent=2, ensure_ascii=False)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")

    def check_bot_files_exist(self) -> Dict[str, bool]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –±–æ—Ç–æ–≤"""
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –±–æ—Ç–æ–≤...")

        file_status = {}
        for bot_name, bot_info in self.all_bots.items():
            file_path = Path(bot_info["file"])
            exists = file_path.exists()
            file_status[bot_name] = exists

            status_icon = "‚úÖ" if exists else "‚ùå"
            status_text = "–ù–∞–π–¥–µ–Ω" if exists else "–ù–µ –Ω–∞–π–¥–µ–Ω"
            print(f"  {status_icon} {bot_info['file']}: {status_text}")

        return file_status

    def check_sleep_state_files(self) -> Dict[str, bool]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–ø—è—â–µ–≥–æ —Ä–µ–∂–∏–º–∞"""
        print("\nüò¥ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–ø—è—â–µ–≥–æ —Ä–µ–∂–∏–º–∞...")

        sleep_files = {}
        for bot_name in self.all_bots.keys():
            sleep_file = f"sleep_state_{bot_name}.json"
            exists = Path(sleep_file).exists()
            sleep_files[bot_name] = exists

            status_icon = "üò¥" if exists else "üåÖ"
            status_text = "–í —Å–ø—è—â–µ–º —Ä–µ–∂–∏–º–µ" if exists else "–ê–∫—Ç–∏–≤–µ–Ω"
            print(f"  {status_icon} {sleep_file}: {status_text}")

        return sleep_files

    async def create_mock_bot_instances(self) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–ª—É—à–µ–∫ –±–æ—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("\nü§ñ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–ª—É—à–µ–∫ –±–æ—Ç–æ–≤...")

        class MockBot:
            def __init__(self, name, bot_type):
                self.name = name
                self.bot_type = bot_type
                self.config = {"test": True, "bot_type": bot_type}
                self.stats = {"test_count": 0}
                self.running = False

            async def start(self):
                self.running = True
                return True

            async def stop(self):
                self.running = False
                return True

            async def get_status(self):
                return {
                    "status": "running" if self.running else "stopped",
                    "bot_type": self.bot_type,
                    "config": self.config,
                }

        mock_bots = {}
        for bot_name, bot_info in self.all_bots.items():
            mock_bot = MockBot(f"Test{bot_info['class']}", bot_name)
            mock_bots[bot_name] = mock_bot
            print(f"  ‚úÖ {bot_info['class']}: –°–æ–∑–¥–∞–Ω–∞ –∑–∞–≥–ª—É—à–∫–∞")

        return mock_bots

    async def put_bot_to_sleep(self, bot_name: str, bot_instance: Any) -> bool:
        """–ü–µ—Ä–µ–≤–æ–¥ –±–æ—Ç–∞ –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º"""
        try:
            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
            if hasattr(bot_instance, "stop"):
                await bot_instance.stop()

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            sleep_data = {
                "bot_name": bot_name,
                "timestamp": datetime.utcnow().isoformat(),
                "config": getattr(bot_instance, "config", {}),
                "stats": getattr(bot_instance, "stats", {}),
                "running": False,
                "sleep_reason": "Manual sleep command",
            }

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
            sleep_file = f"sleep_state_{bot_name}.json"
            with open(sleep_file, "w", encoding="utf-8") as f:
                json.dump(sleep_data, f, indent=2, ensure_ascii=False)

            logger.info(f"–ë–æ—Ç {bot_name} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º")
            return True

        except Exception as e:
            logger.error(
                f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –±–æ—Ç–∞ {bot_name} –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º: {e}"
            )
            return False

    async def check_and_sleep_all_bots(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø–µ—Ä–µ–≤–æ–¥ –≤—Å–µ—Ö –±–æ—Ç–æ–≤ –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º"""
        print("üöÄ –ü–†–û–í–ï–†–ö–ê –ò –ü–ï–†–ï–í–û–î –ë–û–¢–û–í –í –°–ü–Ø–©–ò–ô –†–ï–ñ–ò–ú")
        print("=" * 60)

        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –±–æ—Ç–æ–≤
        file_status = self.check_bot_files_exist()
        existing_bots = [
            name for name, exists in file_status.items() if exists
        ]

        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–ø—è—â–µ–≥–æ —Ä–µ–∂–∏–º–∞
        sleep_status = self.check_sleep_state_files()
        sleeping_bots = [
            name for name, sleeping in sleep_status.items() if sleeping
        ]
        active_bots = [
            name for name, sleeping in sleep_status.items() if not sleeping
        ]

        print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"  üìÅ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –±–æ—Ç–æ–≤: {len(file_status)}")
        print(f"  ‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤: {len(existing_bots)}")
        print(f"  üò¥ –ë–æ—Ç–æ–≤ –≤ —Å–ø—è—â–µ–º —Ä–µ–∂–∏–º–µ: {len(sleeping_bots)}")
        print(f"  üåÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤: {len(active_bots)}")

        if not active_bots:
            print("\nüéâ –í–°–ï –ë–û–¢–´ –£–ñ–ï –í –°–ü–Ø–©–ï–ú –†–ï–ñ–ò–ú–ï!")
            return True

        # 3. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–ª—É—à–µ–∫ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤
        print(
            f"\nü§ñ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–ª—É—à–µ–∫ –¥–ª—è {len(active_bots)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤..."
        )
        mock_bots = await self.create_mock_bot_instances()

        # 4. –ü–µ—Ä–µ–≤–æ–¥ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤ –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º
        print(
            f"\nüò¥ –ü–µ—Ä–µ–≤–æ–¥ {len(active_bots)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤ –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º..."
        )

        sleep_results = {}
        for bot_name in active_bots:
            if bot_name in mock_bots:
                success = await self.put_bot_to_sleep(
                    bot_name, mock_bots[bot_name]
                )
                sleep_results[bot_name] = success

                bot_info = self.all_bots[bot_name]
                status_icon = "‚úÖ" if success else "‚ùå"
                func_name = bot_info['function']
                func_desc = bot_info['description']
                function_desc = f"{func_name}: {func_desc}"
                print(f"  {status_icon} {function_desc}")

        # 5. –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        successful_sleeps = sum(
            1 for success in sleep_results.values() if success
        )
        total_active = len(active_bots)

        print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        sleep_msg = (
            f"–£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º: "
            f"{successful_sleeps}/{total_active}"
        )
        print(f"  üò¥ {sleep_msg}")
        state_files = [f for f in Path('.').glob('sleep_state_*.json')]
        state_files_count = len(state_files)
        print(f"  üìÅ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {state_files_count}")

        # 6. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        print("\nüîç –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê:")
        final_sleep_status = self.check_sleep_state_files()
        final_sleeping = sum(
            1 for sleeping in final_sleep_status.values() if sleeping
        )
        final_active = len(final_sleep_status) - final_sleeping

        print(f"  üò¥ –ë–æ—Ç–æ–≤ –≤ —Å–ø—è—â–µ–º —Ä–µ–∂–∏–º–µ: {final_sleeping}")
        print(f"  üåÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤: {final_active}")

        if final_active == 0:
            print("\nüéâ –í–°–ï –ë–û–¢–´ –£–°–ü–ï–®–ù–û –ü–ï–†–ï–í–ï–î–ï–ù–´ –í –°–ü–Ø–©–ò–ô –†–ï–ñ–ò–ú!")
            return True
        else:
            print(f"\n‚ö†Ô∏è {final_active} –±–æ—Ç–æ–≤ –æ—Å—Ç–∞–ª–∏—Å—å –∞–∫—Ç–∏–≤–Ω—ã–º–∏")
            return False

    def generate_sleep_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Å–ø—è—â–µ–º —Ä–µ–∂–∏–º–µ"""
        print("\nüìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Å–ø—è—â–µ–º —Ä–µ–∂–∏–º–µ...")

        # –ü–æ–¥—Å—á–µ—Ç —Ñ–∞–π–ª–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        sleep_files = list(Path(".").glob("sleep_state_*.json"))
        sleeping_bots = [
            f.stem.replace("sleep_state_", "") for f in sleep_files
        ]

        report = {
            "timestamp": datetime.utcnow().isoformat(),
            "total_bots": len(self.all_bots),
            "sleeping_bots": len(sleeping_bots),
            "active_bots": len(self.all_bots) - len(sleeping_bots),
            "sleep_files": [f.name for f in sleep_files],
            "sleeping_bot_list": sleeping_bots,
            "config": self.sleep_config,
        }

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        with open(
            "comprehensive_sleep_report.json", "w", encoding="utf-8"
        ) as f:
            json.dump(report, f, indent=2, ensure_ascii=False)

        print("‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: comprehensive_sleep_report.json")
        return report


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    sleep_manager = BotSleepManager()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø–µ—Ä–µ–≤–æ–¥ –±–æ—Ç–æ–≤ –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º
    success = await sleep_manager.check_and_sleep_all_bots()

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
    sleep_manager.generate_sleep_report()

    if success:
        print("\nüéâ –í–°–ï –ë–û–¢–´ –£–°–ü–ï–®–ù–û –ü–ï–†–ï–í–ï–î–ï–ù–´ –í –°–ü–Ø–©–ò–ô –†–ï–ñ–ò–ú!")
        print("üò¥ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É —Ä–∞–∑–≤–∏—Ç–∏—è!")
        return 0
    else:
        print("\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –±–æ—Ç—ã –Ω–µ –±—ã–ª–∏ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º")
        return 1


if __name__ == "__main__":
    exit_code = asyncio.run(main())
    exit(exit_code)
