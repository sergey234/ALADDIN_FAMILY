#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
QRPaymentManager - –ú–µ–Ω–µ–¥–∂–µ—Ä QR-–∫–æ–¥ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ –°–ë–ü –∏ –≤—Å–µ –±–∞–Ω–∫–∏ –†–æ—Å—Å–∏–∏
–í–µ—Ä—Å–∏—è 2.0 - –ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –°–ë–ü, –°–±–µ—ÄPay –∏ –≤—Å–µ–º–∏ –±–∞–Ω–∫–∞–º–∏ –†–æ—Å—Å–∏–∏

–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
- –°–ë–ü (–°–∏—Å—Ç–µ–º–∞ –ë—ã—Å—Ç—Ä—ã—Ö –ü–ª–∞—Ç–µ–∂–µ–π) - –≤—Å–µ –±–∞–Ω–∫–∏ –†–æ—Å—Å–∏–∏
- SberPay QR - –°–±–µ—Ä–±–∞–Ω–∫ –∏ –ø–∞—Ä—Ç–Ω–µ—Ä—ã
- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ QR-–∫–æ–¥—ã - —Ä–∞–±–æ—Ç–∞—é—Ç –≤–µ–∑–¥–µ

–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å:
- SubscriptionManager (—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏)
- FamilyProfileManagerEnhanced (—Å–µ–º–µ–π–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏)
- FamilyNotificationManager (—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ)

–ê–≤—Ç–æ—Ä: ALADDIN Security System
–í–µ—Ä—Å–∏—è: 2.0.0
–î–∞—Ç–∞: 2025-01-27
"""

import asyncio
import logging
import uuid
from dataclasses import dataclass, field
from datetime import datetime, timedelta
from decimal import Decimal
from enum import Enum
from typing import Any, Dict, List, Optional
import qrcode
from io import BytesIO
import base64

from core.base import ComponentStatus, SecurityBase, SecurityLevel

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class PaymentMethod(Enum):
    """–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã - –¢–û–õ–¨–ö–û –†–û–°–°–ò–ô–°–ö–ò–ï –°–ò–°–¢–ï–ú–´"""
    SBP = "sbp"                   # –°–ë–ü (–°–∏—Å—Ç–µ–º–∞ –ë—ã—Å—Ç—Ä—ã—Ö –ü–ª–∞—Ç–µ–∂–µ–π) - –≤—Å–µ –±–∞–Ω–∫–∏ –†–æ—Å—Å–∏–∏
    SBERPAY = "sberpay"           # SberPay QR - –°–±–µ—Ä–±–∞–Ω–∫ –∏ –ø–∞—Ä—Ç–Ω–µ—Ä—ã
    MIR = "mir"                   # –ú–ò–† - —Ä–æ—Å—Å–∏–π—Å–∫–∞—è –ø–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
    UNIVERSAL = "universal"       # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π QR - —Ä–∞–±–æ—Ç–∞–µ—Ç –≤–µ–∑–¥–µ
    # –ù–ï–¢ VISA, MASTERCARD, AMERICAN EXPRESS - —Ç–æ–ª—å–∫–æ —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ —Å–∏—Å—Ç–µ–º—ã!


class PaymentStatus(Enum):
    """–°—Ç–∞—Ç—É—Å—ã –ø–ª–∞—Ç–µ–∂–∞"""
    PENDING = "pending"           # –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã
    PROCESSING = "processing"     # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
    COMPLETED = "completed"       # –ó–∞–≤–µ—Ä—à–µ–Ω
    FAILED = "failed"            # –ù–µ—É–¥–∞—á–Ω—ã–π
    CANCELLED = "cancelled"       # –û—Ç–º–µ–Ω–µ–Ω
    REFUNDED = "refunded"         # –í–æ–∑–≤—Ä–∞—â–µ–Ω


class QRCodeType(Enum):
    """–¢–∏–ø—ã QR-–∫–æ–¥–æ–≤"""
    STATIC = "static"             # –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π QR-–∫–æ–¥
    DYNAMIC = "dynamic"           # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π QR-–∫–æ–¥
    FAMILY_PAYMENT = "family_payment"  # –°–µ–º–µ–π–Ω–∞—è –æ–ø–ª–∞—Ç–∞


@dataclass
class PaymentRequest:
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–ø–ª–∞—Ç—É"""
    payment_id: str
    family_id: str
    subscription_tier: str
    amount: Decimal
    currency: str = "RUB"
    description: str = ""
    payment_method: PaymentMethod = PaymentMethod.QR_CODE
    qr_code_type: QRCodeType = QRCodeType.FAMILY_PAYMENT
    expires_at: Optional[datetime] = None
    metadata: Dict[str, Any] = field(default_factory=dict)


@dataclass
class PaymentResponse:
    """–û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –æ–ø–ª–∞—Ç—ã"""
    payment_id: str
    status: PaymentStatus
    qr_code: Optional[str] = None
    qr_code_image: Optional[str] = None  # Base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ QR-–∫–æ–¥–∞
    payment_url: Optional[str] = None
    yukassa_payment_id: Optional[str] = None
    created_at: datetime = field(default_factory=datetime.now)
    expires_at: Optional[datetime] = None
    error_message: Optional[str] = None


@dataclass
class MerchantConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–µ—Ä—á–∞–Ω—Ç–∞ –¥–ª—è QR-–æ–ø–ª–∞—Ç—ã"""
    # –î–∞–Ω–Ω—ã–µ –º–µ—Ä—á–∞–Ω—Ç–∞ ALADDIN
    card_number: str = "2200300565821376"  # –ö–∞—Ä—Ç–∞ –¥–ª—è –ø—Ä–∏–µ–º–∞ –ø–ª–∞—Ç–µ–∂–µ–π
    phone: str = "+79277020379"            # –¢–µ–ª–µ—Ñ–æ–Ω –†–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω–±–∞–Ω–∫
    merchant_name: str = "ALADDIN"
    inn: Optional[str] = None              # TODO: –ü–æ–ª—É—á–∏—Ç—å –ò–ù–ù –¥–ª—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤
    fiscal_required: bool = False          # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ñ–∏—Å–∫–∞–ª—å–Ω—ã–µ —á–µ–∫–∏ –¥–ª—è –§–ó-54

    def get_formatted_card(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã"""
        return f"{self.card_number[:4]} {self.card_number[4:8]} {self.card_number[8:12]} {self.card_number[12:16]}"

    def get_masked_card(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã"""
        return f"{self.card_number[:4]}****{self.card_number[-4:]}"


class QRPaymentManager(SecurityBase):
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä QR-–∫–æ–¥ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ –°–ë–ü –∏ –≤—Å–µ –±–∞–Ω–∫–∏ –†–æ—Å—Å–∏–∏

    –ü–û–î–î–ï–†–ñ–ò–í–ê–ï–¢ –¢–û–õ–¨–ö–û –†–û–°–°–ò–ô–°–ö–ò–ï –ü–õ–ê–¢–ï–ñ–ù–´–ï –°–ò–°–¢–ï–ú–´:
    - –°–ë–ü (–°–∏—Å—Ç–µ–º–∞ –ë—ã—Å—Ç—Ä—ã—Ö –ü–ª–∞—Ç–µ–∂–µ–π) - –≤—Å–µ –±–∞–Ω–∫–∏ –†–æ—Å—Å–∏–∏
    - SberPay QR - –°–±–µ—Ä–±–∞–Ω–∫ –∏ –ø–∞—Ä—Ç–Ω–µ—Ä—ã
    - –ú–ò–† - —Ä–æ—Å—Å–∏–π—Å–∫–∞—è –ø–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
    - –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ QR-–∫–æ–¥—ã - —Ä–∞–±–æ—Ç–∞—é—Ç –≤–µ–∑–¥–µ

    –ù–ï –ü–û–î–î–ï–†–ñ–ò–í–ê–ï–¢:
    - VISA, Mastercard, American Express (–∑–∞—Ä—É–±–µ–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã)
    - PayPal, Stripe (–∑–∞—Ä—É–±–µ–∂–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã)
    - –ÆKassa (–∑–∞—Ä—É–±–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞)

    –§—É–Ω–∫—Ü–∏–∏:
    - –°–µ–º–µ–π–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
    - –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ 152-–§–ó –∏ —Ä–æ—Å—Å–∏–π—Å–∫–æ–º—É –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É
    """

    def __init__(self, merchant_config: Optional[MerchantConfig] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–ª–∞—Ç–µ–∂–µ–π

        Args:
            merchant_config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–µ—Ä—á–∞–Ω—Ç–∞
        """
        super().__init__()

        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–µ—Ä—á–∞–Ω—Ç–∞
        self.config = merchant_config or MerchantConfig()

        # –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–ª–∞—Ç–µ–∂–µ–π
        self.payments: Dict[str, PaymentResponse] = {}
        self.payment_requests: Dict[str, PaymentRequest] = {}

        # –°—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        self.status = ComponentStatus.ACTIVE
        self.security_level = SecurityLevel.HIGH

        logger.info("QRPaymentManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –°–ë–ü –∏ –≤—Å–µ—Ö –±–∞–Ω–∫–æ–≤ –†–æ—Å—Å–∏–∏")

    def _generate_sbp_qr(self, amount: Decimal, description: str, family_id: str) -> Dict[str, Any]:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –°–ë–ü QR-–∫–æ–¥–∞ –¥–ª—è –≤—Å–µ—Ö –±–∞–Ω–∫–æ–≤ –†–æ—Å—Å–∏–∏

        Args:
            amount: –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞
            description: –û–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
            family_id: ID —Å–µ–º—å–∏

        Returns:
            –î–∞–Ω–Ω—ã–µ –°–ë–ü QR-–∫–æ–¥–∞
        """
        # –°–ë–ü URL –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
        sbp_url = f"sbp://{self.config.phone}?sum={amount}&comment={description}"

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞
        qr_code = self._generate_qr_image(sbp_url)

        return {
            "provider": "SBP",
            "qr_code_data": sbp_url,
            "qr_code_image": qr_code,
            "amount": float(amount),
            "description": description,
            "merchant_info": {
                "name": self.config.merchant_name,
                "card": self.config.get_masked_card(),
                "phone": self.config.phone
            },
            "instructions": """–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –ª—é–±–æ–≥–æ –±–∞–Ω–∫–∞:
‚Ä¢ –°–±–µ—Ä–±–∞–Ω–∫ –û–Ω–ª–∞–π–Ω ‚Ä¢ –í–¢–ë –û–Ω–ª–∞–π–Ω ‚Ä¢ –¢–∏–Ω—å–∫–æ—Ñ—Ñ ‚Ä¢ –ê–ª—å—Ñ–∞-–ú–æ–±–∞–π–ª
‚Ä¢ –†–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω –û–Ω–ª–∞–π–Ω ‚Ä¢ –ì–∞–∑–ø—Ä–æ–º–±–∞–Ω–∫ ‚Ä¢ –†–æ—Å—Å–µ–ª—å—Ö–æ–∑–±–∞–Ω–∫ ‚Ä¢ –í–¢–ë24
‚Ä¢ –Æ–Ω–∏–ö—Ä–µ–¥–∏—Ç ‚Ä¢ –†—É—Å—Å–∫–∏–π –°—Ç–∞–Ω–¥–∞—Ä—Ç ‚Ä¢ –ú–ö–ë –û–Ω–ª–∞–π–Ω ‚Ä¢ –û—Ç–∫—Ä—ã—Ç–∏–µ –∏ –¥—Ä—É–≥–∏–µ"""
        }

    def _generate_sberpay_qr(self, amount: Decimal, description: str, family_id: str) -> Dict[str, Any]:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è SberPay QR-–∫–æ–¥–∞ –¥–ª—è –°–±–µ—Ä–±–∞–Ω–∫–∞ –∏ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤

        Args:
            amount: –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞
            description: –û–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
            family_id: ID —Å–µ–º—å–∏

        Returns:
            –î–∞–Ω–Ω—ã–µ SberPay QR-–∫–æ–¥–∞
        """
        # SberPay URL –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
        sberpay_url = f"sberbank://transfer?phone={self.config.phone}&amount={amount}&comment={description}"

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞
        qr_code = self._generate_qr_image(sberpay_url)

        return {
            "provider": "SberPay",
            "qr_code_data": sberpay_url,
            "qr_code_image": qr_code,
            "amount": float(amount),
            "description": description,
            "merchant_info": {
                "name": self.config.merchant_name,
                "card": self.config.get_masked_card(),
                "phone": self.config.phone
            },
            "instructions": "–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –°–±–µ—Ä–ë–∞–Ω–∫ –û–Ω–ª–∞–π–Ω"
        }

    def _generate_universal_qr(self, amount: Decimal, description: str, family_id: str) -> Dict[str, Any]:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ QR-–∫–æ–¥–∞ –¥–ª—è –≤—Å–µ—Ö –±–∞–Ω–∫–æ–≤

        Args:
            amount: –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞
            description: –û–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
            family_id: ID —Å–µ–º—å–∏

        Returns:
            –î–∞–Ω–Ω—ã–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ QR-–∫–æ–¥–∞
        """
        # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
        universal_data = f"""
üí≥ –ü–ï–†–ï–í–û–î: {amount}‚ÇΩ
üè¶ –ù–ê –ö–ê–†–¢–£: {self.config.get_formatted_card()}
üè¢ –ü–û–õ–£–ß–ê–¢–ï–õ–¨: {self.config.merchant_name}
üìù –ù–ê–ó–ù–ê–ß–ï–ù–ò–ï: {description}
üì± –°–ë–ü: {self.config.phone}
üîí –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨ –°–ï–ú–¨–ò
        """.strip()

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞
        qr_code = self._generate_qr_image(universal_data)

        return {
            "provider": "Universal",
            "qr_code_data": universal_data,
            "qr_code_image": qr_code,
            "amount": float(amount),
            "description": description,
            "merchant_info": {
                "name": self.config.merchant_name,
                "card": self.config.get_masked_card(),
                "phone": self.config.phone
            },
            "instructions": "–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –≤–∞—à–µ–≥–æ –±–∞–Ω–∫–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –°–ë–ü"
        }

    def _generate_qr_image(self, data: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è QR-–∫–æ–¥–∞ –≤ base64"""
        qr = qrcode.QRCode(
            version=1,
            error_correction=qrcode.constants.ERROR_CORRECT_L,
            box_size=10,
            border=4,
        )
        qr.add_data(data)
        qr.make(fit=True)

        img = qr.make_image(fill_color="black", back_color="white")

        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ base64
        buffer = BytesIO()
        img.save(buffer, format='PNG')
        img_str = base64.b64encode(buffer.getvalue()).decode()

        return f"data:image/png;base64,{img_str}"

    async def create_payment(self, family_id: str, subscription_tier: str,
                             amount: Decimal, description: str = "",
                             payment_method: PaymentMethod = PaymentMethod.SBP) -> Dict[str, Any]:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –ø–ª–∞—Ç–µ–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã

        Args:
            family_id: ID —Å–µ–º—å–∏
            subscription_tier: –¢–∞—Ä–∏—Ñ –ø–æ–¥–ø–∏—Å–∫–∏
            amount: –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞
            description: –û–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
            payment_method: –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã (–°–ë–ü, SberPay, Universal)

        Returns:
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ
        """
        try:
            # –°–æ–∑–¥–∞–µ–º ID –ø–ª–∞—Ç–µ–∂–∞
            payment_id = str(uuid.uuid4())

            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–ø–ª–∞—Ç—É
            payment_request = PaymentRequest(
                payment_id=payment_id,
                family_id=family_id,
                subscription_tier=subscription_tier,
                amount=amount,
                description=description or f"–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ {subscription_tier}",
                payment_method=payment_method,
                expires_at=datetime.now() + timedelta(hours=24)  # 24 —á–∞—Å–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
            self.payment_requests[payment_id] = payment_request

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
            if payment_method == PaymentMethod.SBP:
                qr_data = self._generate_sbp_qr(amount, payment_request.description, family_id)
            elif payment_method == PaymentMethod.SBERPAY:
                qr_data = self._generate_sberpay_qr(amount, payment_request.description, family_id)
            elif payment_method == PaymentMethod.UNIVERSAL:
                qr_data = self._generate_universal_qr(amount, payment_request.description, family_id)
            else:
                # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º –°–ë–ü
                qr_data = self._generate_sbp_qr(amount, payment_request.description, family_id)

            # –°–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç
            payment_response = PaymentResponse(
                payment_id=payment_id,
                status=PaymentStatus.PENDING,
                qr_code=qr_data["qr_code_data"],
                qr_code_image=qr_data["qr_code_image"],
                expires_at=payment_request.expires_at
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
            self.payments[payment_id] = payment_response

            logger.info(
                f"–°–æ–∑–¥–∞–Ω –ø–ª–∞—Ç–µ–∂ {payment_id} –¥–ª—è —Å–µ–º—å–∏ {family_id}, —Å—É–º–º–∞ {amount}‚ÇΩ, —Å–ø–æ—Å–æ–± {payment_method.value}")

            return {
                "success": True,
                "payment_id": payment_id,
                "amount": float(amount),
                "currency": "RUB",
                "payment_method": payment_method.value,
                "qr_code": qr_data["qr_code_data"],
                "qr_code_image": qr_data["qr_code_image"],
                "merchant_info": qr_data["merchant_info"],
                "instructions": qr_data["instructions"],
                "payment_url": payment_response.payment_url,
                "expires_at": payment_request.expires_at.isoformat(),
                "status": PaymentStatus.PENDING.value
            }

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {e}")
            return {
                "success": False,
                "error": str(e),
                "payment_id": payment_id if 'payment_id' in locals() else None
            }

    async def check_payment_status(self, payment_id: str) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞

        Args:
            payment_id: ID –ø–ª–∞—Ç–µ–∂–∞

        Returns:
            –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
        """
        try:
            if payment_id not in self.payments:
                return {
                    "success": False,
                    "error": "–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    "payment_id": payment_id
                }

            payment = self.payments[payment_id]
            payment_request = self.payment_requests[payment_id]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ —Å—Ä–æ–∫ –ø–ª–∞—Ç–µ–∂–∞
            if payment_request.expires_at and datetime.now() > payment_request.expires_at:
                payment.status = PaymentStatus.EXPIRED
                self.payments[payment_id] = payment

                return {
                    "success": True,
                    "payment_id": payment_id,
                    "status": PaymentStatus.EXPIRED.value,
                    "message": "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø–ª–∞—Ç–µ–∂–∞ –∏—Å—Ç–µ–∫"
                }

            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –¥–µ–Ω–µ–≥ –Ω–∞ –∫–∞—Ä—Ç—É
            # –ü–æ–∫–∞ —á—Ç–æ –∏–º–∏—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç
            time_since_creation = datetime.now() - payment.created_at
            if time_since_creation.total_seconds() > 300:  # 5 –º–∏–Ω—É—Ç
                payment.status = PaymentStatus.COMPLETED
                self.payments[payment_id] = payment

                logger.info(f"–ü–ª–∞—Ç–µ–∂ {payment_id} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π")

                return {
                    "success": True,
                    "payment_id": payment_id,
                    "status": PaymentStatus.COMPLETED.value,
                    "message": "–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω",
                    "amount": float(payment_request.amount),
                    "currency": "RUB"
                }

            return {
                "success": True,
                "payment_id": payment_id,
                "status": payment.status.value,
                "message": "–ü–ª–∞—Ç–µ–∂ –æ–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã"
            }

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ {payment_id}: {e}")
            return {
                "success": False,
                "error": str(e),
                "payment_id": payment_id
            }

    async def get_payment_info(self, payment_id: str) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞—Ç–µ–∂–µ

        Args:
            payment_id: ID –ø–ª–∞—Ç–µ–∂–∞

        Returns:
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ
        """
        try:
            if payment_id not in self.payments:
                return {
                    "success": False,
                    "error": "–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    "payment_id": payment_id
                }

            payment = self.payments[payment_id]
            payment_request = self.payment_requests[payment_id]

            return {
                "success": True,
                "payment_id": payment_id,
                "family_id": payment_request.family_id,
                "subscription_tier": payment_request.subscription_tier,
                "amount": float(payment_request.amount),
                "currency": payment_request.currency,
                "description": payment_request.description,
                "payment_method": payment_request.payment_method.value,
                "status": payment.status.value,
                "created_at": payment.created_at.isoformat(),
                "expires_at": payment_request.expires_at.isoformat() if payment_request.expires_at else None,
                "qr_code": payment.qr_code,
                "qr_code_image": payment.qr_code_image
            }

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞—Ç–µ–∂–µ {payment_id}: {e}")
            return {
                "success": False,
                "error": str(e),
                "payment_id": payment_id
            }

    # –°—Ç–∞—Ä—ã–µ –º–µ—Ç–æ–¥—ã –ÆKassa —É–¥–∞–ª–µ–Ω—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –ø–ª–∞—Ç–µ–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã!

    async def generate_family_qr(self, family_id: str, tariff: str,
                                 devices_count: int, amount: float) -> Dict[str, Any]:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞ –¥–ª—è —Å–µ–º–µ–π–Ω–æ–π –æ–ø–ª–∞—Ç—ã (–æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥)

        Args:
            family_id: –ê–Ω–æ–Ω–∏–º–Ω—ã–π ID —Å–µ–º—å–∏
            tariff: –í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω
            devices_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            amount: –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ QR-–∫–æ–¥–∞ –∏ —Å—Ç–∞—Ç—É—Å–æ–º
        """
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
            payment_result = await self.create_payment(
                family_id=family_id,
                subscription_tier=tariff,
                amount=Decimal(str(amount)),
                description=f"–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ {tariff} –¥–ª—è {devices_count} —É—Å—Ç—Ä–æ–π—Å—Ç–≤",
                payment_method=PaymentMethod.SBP  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –°–ë–ü
            )

            if payment_result["success"]:
                logger.info(f"QR-–∫–æ–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Å–µ–º—å–∏ {family_id}, —Ç–∞—Ä–∏—Ñ {tariff}, —Å—É–º–º–∞ {amount}")
                return payment_result
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞: {payment_result.get('error')}")
                return payment_result

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ–º–µ–π–Ω–æ–≥–æ QR-–∫–æ–¥–∞: {e}")
            return {"success": False, "message": str(e)}

    async def process_qr_payment(self, payment_id: str) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã –ø–æ QR-–∫–æ–¥—É (–ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏ –∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏)

        Args:
            payment_id: ID –ø–ª–∞—Ç–µ–∂–∞

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
            status_result = await self.check_payment_status(payment_id)

            if not status_result["success"]:
                return status_result

            if status_result["status"] == PaymentStatus.COMPLETED.value:
                # –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω
                payment_info = await self.get_payment_info(payment_id)

                if payment_info["success"]:
                    logger.info(
                        f"–û–ø–ª–∞—Ç–∞ {payment_id} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞. "
                        f"–ü–æ–¥–ø–∏—Å–∫–∞ {payment_info['subscription_tier']} "
                        f"–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è —Å–µ–º—å–∏ {payment_info['family_id']}.")
                    return {
                        "success": True,
                        "message": "–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.",
                        "payment_info": payment_info
                    }
                else:
                    return {
                        "success": False,
                        "message": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞—Ç–µ–∂–µ: {payment_info.get('error')}"}
            else:
                return {
                    "success": False,
                    "message": f"–ü–ª–∞—Ç–µ–∂ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω: {status_result['message']}",
                    "status": status_result["status"]
                }

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ QR-–ø–ª–∞—Ç–µ–∂–∞: {e}")
            return {"success": False, "message": str(e)}

    async def _check_payment_status(self, payment_id: str) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞"""
        try:
            payment = await self._get_payment_by_id(payment_id)
            if not payment:
                return {
                    "success": False,
                    "error": "–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω"
                }

            return {
                "success": True,
                "status": payment.status,
                "amount": float(payment.amount) if hasattr(payment, 'amount') else None,
                "created_at": payment.created_at.isoformat(),
                "expires_at": payment.expires_at.isoformat() if payment.expires_at else None
            }

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞: {e}")
            return {
                "success": False,
                "error": str(e)
            }

    async def _check_yukassa_payment_status(self, yukassa_payment_id: str) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ –≤ –ÆKassa"""
        try:
            if not self.session:
                raise Exception("HTTP —Å–µ—Å—Å–∏—è –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

            async with self.session.get(
                f"{self.config.api_url}/payments/{yukassa_payment_id}"
            ) as response:

                if response.status == 200:
                    data = await response.json()
                    return {
                        "success": True,
                        "data": data
                    }
                else:
                    error_text = await response.text()
                    return {
                        "success": False,
                        "error": f"–û—à–∏–±–∫–∞ –ÆKassa {response.status}: {error_text}"
                    }

        except Exception as e:
            return {
                "success": False,
                "error": f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤ –ÆKassa: {e}"
            }

    def _map_yukassa_status(self, yukassa_status: str) -> PaymentStatus:
        """–ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–æ–≤ –ÆKassa –≤ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å—Ç–∞—Ç—É—Å—ã"""
        status_mapping = {
            "pending": PaymentStatus.PENDING,
            "waiting_for_capture": PaymentStatus.PROCESSING,
            "succeeded": PaymentStatus.COMPLETED,
            "canceled": PaymentStatus.CANCELLED
        }
        return status_mapping.get(yukassa_status, PaymentStatus.PENDING)

    async def _activate_subscription(self, payment_id: str) -> bool:
        """–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞—Ç–µ–∂
            payment = self.payments.get(payment_id)
            if not payment:
                return False

            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–ø–ª–∞—Ç—É
            payment_request = self.payment_requests.get(payment_id)
            if not payment_request:
                return False

            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å SubscriptionManager
            # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
            logger.info(
                f"–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è —Å–µ–º—å–∏ {payment_request.family_id}, —Ç–∞—Ä–∏—Ñ {payment_request.subscription_tier}")

            # TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å SubscriptionManager
            # subscription_manager.activate_subscription(
            #     family_id=payment_request.family_id,
            #     tier=payment_request.subscription_tier
            # )

            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            return False

    async def process_webhook(self, webhook_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç –ÆKassa

        Args:
            webhook_data: –î–∞–Ω–Ω—ã–µ webhook

        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å webhook (–≤ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏)
            # if not self._verify_webhook_signature(webhook_data):
            #     return {"success": False, "error": "–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å webhook"}

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞
            payment_data = webhook_data.get("object", {})
            yukassa_payment_id = payment_data.get("id")

            if not yukassa_payment_id:
                return {"success": False, "error": "ID –ø–ª–∞—Ç–µ–∂–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"}

            # –ù–∞—Ö–æ–¥–∏–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –ø–æ ID –ÆKassa
            local_payment = None
            for payment in self.payments.values():
                if payment.yukassa_payment_id == yukassa_payment_id:
                    local_payment = payment
                    break

            if not local_payment:
                return {"success": False, "error": "–õ–æ–∫–∞–ª—å–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω"}

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            new_status = self._map_yukassa_status(payment_data.get("status", "pending"))
            local_payment.status = new_status
            local_payment.updated_at = datetime.now()

            # –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –∑–∞–≤–µ—Ä—à–µ–Ω, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            if new_status == PaymentStatus.COMPLETED:
                await self._activate_subscription(local_payment.payment_id)

            logger.info(f"Webhook –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ {local_payment.payment_id}, —Å—Ç–∞—Ç—É—Å {new_status.value}")

            return {
                "success": True,
                "payment_id": local_payment.payment_id,
                "status": new_status.value
            }

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
            return {
                "success": False,
                "error": str(e)
            }

    async def get_payment_history(self, family_id: str) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π —Å–µ–º—å–∏"""
        try:
            history = []

            for payment_request in self.payment_requests.values():
                if payment_request.family_id == family_id:
                    payment = self.payments.get(payment_request.payment_id)
                    if payment:
                        history.append({
                            "payment_id": payment.payment_id,
                            "amount": float(payment_request.amount),
                            "currency": payment_request.currency,
                            "subscription_tier": payment_request.subscription_tier,
                            "status": payment.status.value,
                            "created_at": payment.created_at.isoformat(),
                            "completed_at": payment.completed_at.isoformat() if payment.completed_at else None
                        })

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–µ)
            history.sort(key=lambda x: x["created_at"], reverse=True)

            return history

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π: {e}")
            return []

    async def cancel_payment(self, payment_id: str) -> Dict[str, Any]:
        """–û—Ç–º–µ–Ω–∞ –ø–ª–∞—Ç–µ–∂–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞—Ç–µ–∂
            payment = self.payments.get(payment_id)
            if not payment:
                return {
                    "success": False,
                    "error": "–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω"
                }

            # –û—Ç–º–µ–Ω—è–µ–º –≤ –ÆKassa
            if payment.yukassa_payment_id:
                cancel_result = await self._cancel_yukassa_payment(payment.yukassa_payment_id)
                if not cancel_result["success"]:
                    return {
                        "success": False,
                        "error": cancel_result["error"]
                    }

            # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
            payment.status = PaymentStatus.CANCELLED
            payment.updated_at = datetime.now()

            logger.info(f"–ü–ª–∞—Ç–µ–∂ {payment_id} –æ—Ç–º–µ–Ω–µ–Ω")

            return {
                "success": True,
                "payment_id": payment_id,
                "status": PaymentStatus.CANCELLED.value
            }

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–ª–∞—Ç–µ–∂–∞: {e}")
            return {
                "success": False,
                "error": str(e)
            }

    async def _cancel_yukassa_payment(self, yukassa_payment_id: str) -> Dict[str, Any]:
        """–û—Ç–º–µ–Ω–∞ –ø–ª–∞—Ç–µ–∂–∞ –≤ –ÆKassa"""
        try:
            if not self.session:
                raise Exception("HTTP —Å–µ—Å—Å–∏—è –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

            async with self.session.post(
                f"{self.config.api_url}/payments/{yukassa_payment_id}/cancel"
            ) as response:

                if response.status == 200:
                    data = await response.json()
                    return {
                        "success": True,
                        "data": data
                    }
                else:
                    error_text = await response.text()
                    return {
                        "success": False,
                        "error": f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –≤ –ÆKassa {response.status}: {error_text}"
                    }

        except Exception as e:
            return {
                "success": False,
                "error": f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–ª–∞—Ç–µ–∂–∞ –≤ –ÆKassa: {e}"
            }

    async def get_payment_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π"""
        stats = {
            "total_payments": len(self.payments),
            "pending_payments": 0,
            "completed_payments": 0,
            "failed_payments": 0,
            "cancelled_payments": 0,
            "total_amount": Decimal("0"),
            "completed_amount": Decimal("0")
        }

        for payment in self.payments.values():
            # –ü–æ–¥—Å—á–µ—Ç –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
            if payment.status == PaymentStatus.PENDING:
                stats["pending_payments"] += 1
            elif payment.status == PaymentStatus.COMPLETED:
                stats["completed_payments"] += 1
            elif payment.status == PaymentStatus.FAILED:
                stats["failed_payments"] += 1
            elif payment.status == PaymentStatus.CANCELLED:
                stats["cancelled_payments"] += 1

            # –ü–æ–¥—Å—á–µ—Ç —Å—É–º–º
            if hasattr(payment, 'amount'):
                stats["total_amount"] += payment.amount
                if payment.status == PaymentStatus.COMPLETED:
                    stats["completed_amount"] += payment.amount

        return stats

    def get_status(self) -> ComponentStatus:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
        return self.status

    def get_security_level(self) -> SecurityLevel:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        return self.security_level

    async def health_check(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
        try:
            stats = await self.get_payment_stats()

            return {
                "status": "healthy",
                "component": "QRPaymentManager",
                "timestamp": datetime.now().isoformat(),
                "stats": stats,
                "yukassa_connected": self.session is not None
            }
        except Exception as e:
            return {
                "status": "unhealthy",
                "component": "QRPaymentManager",
                "timestamp": datetime.now().isoformat(),
                "error": str(e)
            }


# –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
qr_payment_manager = QRPaymentManager()


async def main():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ QRPaymentManager"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ QRPaymentManager")
    print("=" * 50)

    async with qr_payment_manager:
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
        result = await qr_payment_manager.create_payment(
            family_id="test_family_123",
            subscription_tier="basic",
            amount=Decimal("290"),
            description="–¢–µ—Å—Ç–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ Basic"
        )
        print(f"–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞: {result}")

        if result["success"]:
            payment_id = result["payment_id"]

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
            status = await qr_payment_manager.check_payment_status(payment_id)
            print(f"–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: {status}")

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π
            history = await qr_payment_manager.get_payment_history("test_family_123")
            print(f"–ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π: {len(history)} –ø–ª–∞—Ç–µ–∂–µ–π")

            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            stats = await qr_payment_manager.get_payment_stats()
            print(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")


if __name__ == "__main__":
    asyncio.run(main())
