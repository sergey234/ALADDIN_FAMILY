# -*- coding: utf-8 -*-
"""
Universal Singleton Pattern –¥–ª—è ALADDIN Security System
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω Singleton –¥–ª—è –≤—Å–µ—Ö Manager, Agent –∏ Bot –∫–ª–∞—Å—Å–æ–≤

–ê–≤—Ç–æ—Ä: ALADDIN Security Team
–í–µ—Ä—Å–∏—è: 2.0
–î–∞—Ç–∞: 2025-09-10
"""

import logging
import threading
import weakref
from datetime import datetime
from typing import Any, Dict, Type, TypeVar

# –¢–∏–ø –¥–ª—è Generic Singleton
T = TypeVar("T")


class UniversalSingleton:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π Singleton –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ ALADDIN

    –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
    - Thread-safe (–ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π)
    - Memory-safe (–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–æ –ø–∞–º—è—Ç–∏)
    - Lazy initialization (–ª–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è)
    - Weak references (—Å–ª–∞–±—ã–µ —Å—Å—ã–ª–∫–∏)
    - Auto cleanup (–∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞)
    """

    _instances: Dict[Type, Any] = {}
    _lock = threading.RLock()
    _weak_refs: Dict[Type, weakref.ref] = {}

    def __new__(cls, *args, **kwargs):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
        """
        if cls not in cls._instances:
            with cls._lock:
                # –î–≤–æ–π–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                if cls not in cls._instances:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
                    instance = super(UniversalSingleton, cls).__new__(cls)
                    cls._instances[cls] = instance

                    # –°–æ–∑–¥–∞–µ–º —Å–ª–∞–±—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∏
                    cls._weak_refs[cls] = weakref.ref(instance, cls._cleanup)

                    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä
                    instance._singleton_initialized = False
                    instance._singleton_created_at = datetime.now()
                    instance._singleton_access_count = 0

                    logging.info(f"‚úÖ Singleton —Å–æ–∑–¥–∞–Ω: {cls.__name__}")

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ–±—Ä–∞—â–µ–Ω–∏–π
        instance = cls._instances[cls]
        instance._singleton_access_count += 1
        instance._singleton_last_access = datetime.now()

        return instance

    @classmethod
    def _cleanup(cls, weak_ref):
        """
        –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
        """
        for class_type, ref in list(cls._weak_refs.items()):
            if ref is weak_ref:
                if class_type in cls._instances:
                    del cls._instances[class_type]
                del cls._weak_refs[class_type]
                logging.info(f"üßπ Singleton –æ—á–∏—â–µ–Ω: {class_type.__name__}")
                break

    @classmethod
    def get_instance(cls) -> "UniversalSingleton":
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä
        """
        return cls()

    @classmethod
    def reset_instance(cls):
        """
        –°–±—Ä–æ—Å–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
        """
        with cls._lock:
            if cls in cls._instances:
                del cls._instances[cls]
            if cls in cls._weak_refs:
                del cls._weak_refs[cls]
            logging.info(f"üîÑ Singleton —Å–±—Ä–æ—à–µ–Ω: {cls.__name__}")

    @classmethod
    def get_stats(cls) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É Singleton
        """
        if cls not in cls._instances:
            return {"exists": False}

        instance = cls._instances[cls]
        return {
            "exists": True,
            "created_at": instance._singleton_created_at,
            "access_count": instance._singleton_access_count,
            "last_access": getattr(instance, "_singleton_last_access", None),
            "initialized": getattr(instance, "_singleton_initialized", False),
        }

    def __init__(self, *args, **kwargs):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑)
        """
        if not hasattr(self, "_singleton_initialized"):
            self._singleton_initialized = True
            # –í—ã–∑—ã–≤–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π __init__ –µ—Å–ª–∏ –µ—Å—Ç—å
            super().__init__(*args, **kwargs)
            logging.info(
                f"üöÄ Singleton –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {self.__class__.__name__}"
            )


def get_component(component_class: Type[T], *args, **kwargs) -> T:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞

    Args:
        component_class: –ö–ª–∞—Å—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        *args: –ê—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        **kwargs: –ö–ª—é—á–µ–≤—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏

    Returns:
        –≠–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ (Singleton)
    """
    if not issubclass(component_class, UniversalSingleton):
        raise TypeError(
            f"–ö–ª–∞—Å—Å {component_class.__name__} –¥–æ–ª–∂–µ–Ω –Ω–∞—Å–ª–µ–¥–æ–≤–∞—Ç—å—Å—è –æ—Ç "
            f"UniversalSingleton"
        )

    return component_class(*args, **kwargs)


def reset_all_singletons():
    """
    –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ Singleton —ç–∫–∑–µ–º–ø–ª—è—Ä—ã (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    """
    with UniversalSingleton._lock:
        UniversalSingleton._instances.clear()
        UniversalSingleton._weak_refs.clear()
        logging.info("üßπ –í—Å–µ Singleton —ç–∫–∑–µ–º–ø–ª—è—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã")


def get_all_singleton_stats() -> Dict[str, Dict[str, Any]]:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Å–µ—Ö Singleton —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤
    """
    stats = {}
    for class_type, instance in UniversalSingleton._instances.items():
        stats[class_type.__name__] = {
            "created_at": instance._singleton_created_at,
            "access_count": instance._singleton_access_count,
            "last_access": getattr(instance, "_singleton_last_access", None),
            "initialized": getattr(instance, "_singleton_initialized", False),
        }
    return stats


# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è Singleton
def singleton(cls):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è Singleton
    """

    class SingletonWrapper(cls, UniversalSingleton):
        pass

    SingletonWrapper.__name__ = cls.__name__
    SingletonWrapper.__module__ = cls.__module__
    SingletonWrapper.__doc__ = cls.__doc__

    return SingletonWrapper


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Singleton
    class TestManager(UniversalSingleton):
        def __init__(self):
            super().__init__()
            self.data = []

        def add_data(self, item):
            self.data.append(item)

    # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤
    manager1 = TestManager()
    manager2 = TestManager()
    manager3 = get_component(TestManager)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –æ–±—ä–µ–∫—Ç
    print(f"manager1 is manager2: {manager1 is manager2}")
    print(f"manager2 is manager3: {manager2 is manager3}")

    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –æ–¥–∏–Ω
    manager1.add_data("test1")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –≤–∏–¥–Ω—ã –≤–æ –≤—Å–µ—Ö
    print(f"manager1.data: {manager1.data}")
    print(f"manager2.data: {manager2.data}")
    print(f"manager3.data: {manager3.data}")

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats = TestManager.get_stats()
    print(f"Stats: {stats}")
