#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
PRODUCTION –ú–ï–ù–ï–î–ñ–ï–† –ü–ï–†–°–ò–°–¢–ï–ù–¢–ù–û–°–¢–ò –î–õ–Ø SAFEFUNCTIONMANAGER
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è production –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
"""

import json
import os
import threading
from datetime import datetime
from typing import Any, Dict


class ProductionPersistenceManager:
    """Production –º–µ–Ω–µ–¥–∂–µ—Ä –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è SafeFunctionManager"""

    def __init__(
        self, sfm_instance, registry_file: str = "data/functions_registry.json"
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        Args:
            sfm_instance: –≠–∫–∑–µ–º–ø–ª—è—Ä SafeFunctionManager
            registry_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Ä–µ–µ—Å—Ç—Ä–∞
        """
        self.sfm = sfm_instance
        self.registry_file = registry_file
        self.lock = threading.Lock()

        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs(os.path.dirname(registry_file), exist_ok=True)

        print("üîß ProductionPersistenceManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        print(f"üìÅ –§–∞–π–ª —Ä–µ–µ—Å—Ç—Ä–∞: {registry_file}")

    def save_functions(self) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –≤ —Ñ–∞–π–ª"""
        try:
            with self.lock:
                functions_data = {}

                # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ SafeFunctionManager
                for func_id, function in self.sfm.functions.items():
                    functions_data[func_id] = {
                        "function_id": func_id,
                        "name": function.name,
                        "description": function.description,
                        "function_type": function.function_type,
                        "security_level": (
                            function.security_level.value
                            if hasattr(function.security_level, "value")
                            else str(function.security_level)
                        ),
                        "status": (
                            function.status.value
                            if hasattr(function.status, "value")
                            else str(function.status)
                        ),
                        "created_at": (
                            function.created_at.isoformat()
                            if hasattr(function, "created_at")
                            else datetime.now().isoformat()
                        ),
                        "is_critical": getattr(function, "is_critical", False),
                        "auto_enable": getattr(function, "auto_enable", False),
                    }

                # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
                registry_data = {
                    "version": "1.0",
                    "last_updated": datetime.now().isoformat(),
                    "functions": functions_data,
                }

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
                with open(self.registry_file, "w", encoding="utf-8") as f:
                    json.dump(registry_data, f, indent=2, ensure_ascii=False)

                print(f"‚úÖ –§—É–Ω–∫—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {len(functions_data)} —Ñ—É–Ω–∫—Ü–∏–π")
                return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π: {e}")
            return False

    def load_functions(self) -> bool:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if not os.path.exists(self.registry_file):
                print(f"üìÅ –§–∞–π–ª —Ä–µ–µ—Å—Ç—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.registry_file}")
                return False

            with open(self.registry_file, "r", encoding="utf-8") as f:
                registry_data = json.load(f)

            functions_data = registry_data.get("functions", {})
            loaded_count = 0

            print(f"üì• –ó–∞–≥—Ä—É–∂–∞–µ–º {len(functions_data)} —Ñ—É–Ω–∫—Ü–∏–π...")

            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≤ SafeFunctionManager
            for func_id, func_data in functions_data.items():
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –ª–∏ —É–∂–µ —Ñ—É–Ω–∫—Ü–∏—è
                    if func_id not in self.sfm.functions:
                        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º SecurityLevel
                        from core.base import SecurityLevel

                        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ë–ï–ó auto_enable
                        success = self.sfm.register_function(
                            function_id=func_id,
                            name=func_data["name"],
                            description=func_data["description"],
                            function_type=func_data["function_type"],
                            security_level=SecurityLevel[
                                func_data["security_level"].upper()
                            ],
                            is_critical=func_data.get("is_critical", False),
                            auto_enable=False,  # –í–ê–ñ–ù–û: –æ—Ç–∫–ª—é—á–∞–µ–º auto_enable
                        )

                        if success:
                            loaded_count += 1
                            print(f"   ‚úÖ {func_data['name']} –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
                        else:
                            print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {func_data['name']}")
                    else:
                        print(
                            f"   ‚ÑπÔ∏è {func_data['name']} —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞"
                        )

                except Exception as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ—É–Ω–∫—Ü–∏–∏ {func_id}: {e}")
                    continue

            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ—É–Ω–∫—Ü–∏–π: {loaded_count}")
            return loaded_count > 0

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π: {e}")
            return False

    def register_function_with_persistence(self, **kwargs) -> bool:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º"""
        try:
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é
            success = self.sfm.register_function(**kwargs)

            if success:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
                self.save_functions()
                print(
                    f"‚úÖ –§—É–Ω–∫—Ü–∏—è {kwargs.get('function_id')} "
                    f"–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞"
                )

            return success

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏: {e}")
            return False

    def get_functions_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
        try:
            status = {
                "total_functions": len(self.sfm.functions),
                "enabled_functions": len(
                    [
                        f
                        for f in self.sfm.functions.values()
                        if f.status.value == "enabled"
                    ]
                ),
                "disabled_functions": len(
                    [
                        f
                        for f in self.sfm.functions.values()
                        if f.status.value == "disabled"
                    ]
                ),
                "critical_functions": len(
                    [
                        f
                        for f in self.sfm.functions.values()
                        if getattr(f, "is_critical", False)
                    ]
                ),
                "registry_file": self.registry_file,
                "registry_exists": os.path.exists(self.registry_file),
            }
            return status
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return {}

    def initialize_security_functions(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        try:
            print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...")

            # –°–ø–∏—Å–æ–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
            critical_functions = [
                {
                    "function_id": "anti_fraud_master_ai",
                    "name": "AntiFraudMasterAI",
                    "description": "–ì–ª–∞–≤–Ω—ã–π –∞–≥–µ–Ω—Ç –∑–∞—â–∏—Ç—ã –æ—Ç –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞",
                    "function_type": "ai_agent",
                    "security_level": "critical",
                    "is_critical": True,
                    "auto_enable": False,
                },
                {
                    "function_id": "threat_detection_agent",
                    "name": "ThreatDetectionAgent",
                    "description": "–ê–≥–µ–Ω—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —É–≥—Ä–æ–∑",
                    "function_type": "ai_agent",
                    "security_level": "high",
                    "is_critical": True,
                    "auto_enable": False,
                },
                {
                    "function_id": "security_monitoring",
                    "name": "SecurityMonitoring",
                    "description": "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
                    "function_type": "security",
                    "security_level": "high",
                    "is_critical": True,
                    "auto_enable": False,
                },
            ]

            registered_count = 0
            for func_data in critical_functions:
                if func_data["function_id"] not in self.sfm.functions:
                    success = self.register_function_with_persistence(
                        **func_data
                    )
                    if success:
                        registered_count += 1

            print(
                f"‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π: {registered_count}"
            )
            return registered_count > 0

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π: {e}")
            return False


if __name__ == "__main__":
    print("üîß ProductionPersistenceManager –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
    print("üìÅ –§–∞–π–ª —Ä–µ–µ—Å—Ç—Ä–∞: data/functions_registry.json")
    print("‚úÖ –ì–æ—Ç–æ–≤ –∫ production –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
