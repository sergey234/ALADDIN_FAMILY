#!/usr/bin/env python3
"""
üõ°Ô∏è ALADDIN - DDoS Protection Integration
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç DDoS –∞—Ç–∞–∫

–ê–≤—Ç–æ—Ä: ALADDIN Security Team
–í–µ—Ä—Å–∏—è: 1.0
–î–∞—Ç–∞: 2025-01-27
"""

import asyncio
import logging
from collections import defaultdict, deque
from dataclasses import dataclass
from datetime import datetime, timedelta
from typing import Any, Dict, List


@dataclass
class DDoSAttackAnalysis:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ DDoS –∞—Ç–∞–∫–∏"""

    attack_id: str
    is_ddos: bool
    attack_type: str
    severity: str
    source_ips: List[str]
    requests_per_second: float
    attack_duration: int
    blocked_requests: int
    timestamp: datetime
    details: Dict[str, Any]


class DDoSProtection:
    """
    –°–∏—Å—Ç–µ–º–∞ –∑–∞—â–∏—Ç—ã –æ—Ç DDoS –∞—Ç–∞–∫.
    –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç —Å–µ—Ç–µ–≤–æ–π —Ç—Ä–∞—Ñ–∏–∫ –∏ –±–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å.
    """

    def __init__(
        self, config_path: str = "config/ddos_protection_config.json"
    ):
        self.config_path = config_path
        self.config = self.load_config()
        self.logger = self.setup_logger()

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.total_requests_monitored = 0
        self.ddos_attacks_detected = 0
        self.blocked_requests = 0

        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç—Ä–∞—Ñ–∏–∫–∞
        self.ip_request_counts = defaultdict(deque)
        self.ip_last_request = defaultdict(datetime.now)
        self.blocked_ips = set()

        # –ü–æ—Ä–æ–≥–∏ –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏
        self.request_thresholds = self.load_ddos_thresholds()

    def load_config(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∑–∞—â–∏—Ç—ã –æ—Ç DDoS"""
        try:
            import json

            with open(self.config_path, "r", encoding="utf-8") as f:
                return json.load(f)
        except FileNotFoundError:
            # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            default_config = {
                "enabled": True,
                "strict_mode": True,
                "auto_block_attacks": True,
                "monitor_http": True,
                "monitor_https": True,
                "monitor_tcp": True,
                "monitor_udp": True,
                "protection_level": "maximum",
                "rate_limiting": True,
                "ip_whitelist": [],
                "ip_blacklist": [],
            }
            return default_config

    def setup_logger(self) -> logging.Logger:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logger = logging.getLogger("ddos_protection")
        logger.setLevel(logging.INFO)

        if not logger.handlers:
            handler = logging.StreamHandler()
            formatter = logging.Formatter(
                "%(asctime)s - %(levelname)s - %(message)s"
            )
            handler.setFormatter(formatter)
            logger.addHandler(handler)

        return logger

    def load_ddos_thresholds(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ—Ä–æ–≥–∏ –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ DDoS –∞—Ç–∞–∫"""
        return {
            "requests_per_minute": 1000,  # –ú–∞–∫—Å–∏–º—É–º –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É –æ—Ç –æ–¥–Ω–æ–≥–æ IP
            "requests_per_second": 50,  # –ú–∞–∫—Å–∏–º—É–º –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É –æ—Ç –æ–¥–Ω–æ–≥–æ IP
            "concurrent_connections": 100,  # –ú–∞–∫—Å–∏–º—É–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            "bandwidth_threshold": 1000000,  # –ü–æ—Ä–æ–≥ –ø–æ —Ç—Ä–∞—Ñ–∏–∫—É (–±–∞–π—Ç/—Å–µ–∫)
            "attack_duration_threshold": 60,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—Ç–∞–∫–∏ (—Å–µ–∫)
            "unique_ip_threshold": 1000,  # –ü–æ—Ä–æ–≥ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö IP –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –∞—Ç–∞–∫–∏
        }

    def analyze_request(self, request_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç DDoS –∞—Ç–∞–∫–∏.

        Args:
            request_data: –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞

        Returns:
            Dict[str, Any]: –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
        """
        self.logger.info(
            f"–ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞: {request_data.get('method', 'UNKNOWN')} {request_data.get('path', '/')}"
        )

        source_ip = request_data.get("source_ip", "unknown")
        user_agent = request_data.get("user_agent", "")
        request_time = datetime.now()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ IP
        if source_ip in self.blocked_ips:
            return {
                "is_blocked": True,
                "reason": "ip_blocked",
                "source_ip": source_ip,
                "timestamp": request_time,
            }

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ whitelist
        if source_ip in self.config.get("ip_whitelist", []):
            return {
                "is_blocked": False,
                "reason": "whitelisted",
                "source_ip": source_ip,
                "timestamp": request_time,
            }

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
        self.total_requests_monitored += 1
        self.ip_request_counts[source_ip].append(request_time)
        self.ip_last_request[source_ip] = request_time

        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (—Å—Ç–∞—Ä—à–µ 1 –º–∏–Ω—É—Ç—ã)
        cutoff_time = request_time - timedelta(minutes=1)
        while (
            self.ip_request_counts[source_ip]
            and self.ip_request_counts[source_ip][0] < cutoff_time
        ):
            self.ip_request_counts[source_ip].popleft()

        # –ü–æ–¥—Å—á–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –ø–æ—Å–ª–µ–¥–Ω—é—é –º–∏–Ω—É—Ç—É
        requests_last_minute = len(self.ip_request_counts[source_ip])

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä–æ–≥–æ–≤
        is_suspicious = False
        suspicious_reasons = []

        if (
            requests_last_minute
            > self.request_thresholds["requests_per_minute"]
        ):
            is_suspicious = True
            suspicious_reasons.append("high_request_rate")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π User-Agent
        if self.is_suspicious_user_agent(user_agent):
            is_suspicious = True
            suspicious_reasons.append("suspicious_user_agent")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –∑–∞–ø—Ä–æ—Å—ã
        if self.is_repetitive_request(request_data):
            is_suspicious = True
            suspicious_reasons.append("repetitive_request")

        # –ü—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏—è –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
        should_block = is_suspicious and self.config.get(
            "auto_block_attacks", True
        )

        if should_block:
            self.block_ip(source_ip)
            self.blocked_requests += 1

        result = {
            "is_blocked": should_block,
            "is_suspicious": is_suspicious,
            "reason": "suspicious_activity" if is_suspicious else "normal",
            "suspicious_reasons": suspicious_reasons,
            "requests_last_minute": requests_last_minute,
            "source_ip": source_ip,
            "timestamp": request_time,
        }

        self.logger.info(
            f"DDoS analysis: {source_ip}, blocked={should_block}, suspicious={is_suspicious}"
        )
        return result

    def is_suspicious_user_agent(self, user_agent: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ User-Agent –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º"""
        suspicious_patterns = [
            "bot",
            "crawler",
            "spider",
            "scraper",
            "python-requests",
            "curl",
            "wget",
            "masscan",
            "nmap",
            "sqlmap",
        ]

        user_agent_lower = user_agent.lower()
        return any(
            pattern in user_agent_lower for pattern in suspicious_patterns
        )

    def is_repetitive_request(self, request_data: Dict[str, Any]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–º—Å—è"""
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞
        # –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –∑–∞–ø—Ä–æ—Å–æ–≤
        return False

    def block_ip(self, ip_address: str, duration_minutes: int = 60):
        """–ë–ª–æ–∫–∏—Ä—É–µ—Ç IP –∞–¥—Ä–µ—Å –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è"""
        self.blocked_ips.add(ip_address)
        self.logger.warning(
            f"IP {ip_address} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ {duration_minutes} –º–∏–Ω—É—Ç"
        )

        # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        asyncio.create_task(
            self.unblock_ip_after_delay(ip_address, duration_minutes)
        )

    async def unblock_ip_after_delay(
        self, ip_address: str, delay_minutes: int
    ):
        """–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç IP –∞–¥—Ä–µ—Å —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è"""
        await asyncio.sleep(delay_minutes * 60)
        if ip_address in self.blocked_ips:
            self.blocked_ips.remove(ip_address)
            self.logger.info(f"IP {ip_address} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")

    async def detect_ddos_attack(
        self, traffic_data: List[Dict[str, Any]]
    ) -> DDoSAttackAnalysis:
        """
        –î–µ—Ç–µ–∫—Ç–∏—Ä—É–µ—Ç DDoS –∞—Ç–∞–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–∞—Ñ–∏–∫–∞.

        Args:
            traffic_data: –î–∞–Ω–Ω—ã–µ –æ —Å–µ—Ç–µ–≤–æ–º —Ç—Ä–∞—Ñ–∏–∫–µ

        Returns:
            DDoSAttackAnalysis: –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
        """
        self.logger.info(
            f"–î–µ—Ç–µ–∫—Ü–∏—è DDoS –∞—Ç–∞–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ {len(traffic_data)} –∑–∞–ø–∏—Å–µ–π —Ç—Ä–∞—Ñ–∏–∫–∞"
        )

        attack_id = f"ddos_{datetime.now().timestamp()}"
        is_ddos = False
        attack_type = "none"
        severity = "low"
        source_ips = []
        requests_per_second = 0.0
        attack_duration = 0
        blocked_requests = 0

        # –ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∞—Ç–∞–∫
        ip_counts = defaultdict(int)
        total_requests = len(traffic_data)

        for request in traffic_data:
            source_ip = request.get("source_ip", "unknown")
            ip_counts[source_ip] += 1

            # –ê–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            analysis = self.analyze_request(request)
            if analysis.get("is_blocked"):
                blocked_requests += 1

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∞—Ç–∞–∫–∏
        unique_ips = len(ip_counts)
        max_requests_from_single_ip = (
            max(ip_counts.values()) if ip_counts else 0
        )

        if unique_ips > self.request_thresholds["unique_ip_threshold"]:
            is_ddos = True
            attack_type = "distributed_ddos"
            severity = "high"
        elif (
            max_requests_from_single_ip
            > self.request_thresholds["requests_per_minute"]
        ):
            is_ddos = True
            attack_type = "volumetric_ddos"
            severity = "medium"
        elif total_requests > 10000:  # –ë–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤
            is_ddos = True
            attack_type = "application_layer_ddos"
            severity = "medium"

        # –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫
        source_ips = list(ip_counts.keys())
        if traffic_data:
            time_span = (
                max(
                    req.get("timestamp", datetime.now())
                    for req in traffic_data
                )
                - min(
                    req.get("timestamp", datetime.now())
                    for req in traffic_data
                )
            ).total_seconds()
            if time_span > 0:
                requests_per_second = total_requests / time_span
                attack_duration = int(time_span)

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        if is_ddos:
            self.ddos_attacks_detected += 1

        analysis = DDoSAttackAnalysis(
            attack_id=attack_id,
            is_ddos=is_ddos,
            attack_type=attack_type,
            severity=severity,
            source_ips=source_ips,
            requests_per_second=requests_per_second,
            attack_duration=attack_duration,
            blocked_requests=blocked_requests,
            timestamp=datetime.now(),
            details={
                "total_requests": total_requests,
                "unique_source_ips": unique_ips,
                "max_requests_from_single_ip": max_requests_from_single_ip,
            },
        )

        self.logger.info(
            f"DDoS attack detection: {attack_id}, is_ddos={is_ddos}, type={attack_type}, severity={severity}"
        )
        return analysis

    def get_statistics(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞—â–∏—Ç—ã –æ—Ç DDoS"""
        attack_detection_rate = (
            self.ddos_attacks_detected
            / max(self.total_requests_monitored, 1)
            * 100
        )
        block_rate = (
            self.blocked_requests / max(self.total_requests_monitored, 1) * 100
        )

        return {
            "total_requests_monitored": self.total_requests_monitored,
            "ddos_attacks_detected": self.ddos_attacks_detected,
            "blocked_requests": self.blocked_requests,
            "currently_blocked_ips": len(self.blocked_ips),
            "attack_detection_rate": attack_detection_rate,
            "block_rate": block_rate,
            "enabled": self.config.get("enabled", True),
            "protection_level": self.config.get("protection_level", "medium"),
            "thresholds": self.request_thresholds,
        }
