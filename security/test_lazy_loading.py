# -*- coding: utf-8 -*-
"""
Test Lazy Loading - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É lazy wrappers –∏ –∏—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å SFM
"""

import asyncio
import json
import os
import sys
import time
from datetime import datetime
from typing import Dict, List, Any

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

try:
    from lazy_wrappers import (
        LazyWrapper, LazyWrapperManager, create_lazy_wrapper,
        get_lazy_wrapper, load_lazy_wrapper, unload_lazy_wrapper,
        get_lazy_manager, initialize_lazy_system, get_lazy_system_stats
    )
    LAZY_IMPORT_SUCCESS = True
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ lazy_wrappers: {e}")
    LAZY_IMPORT_SUCCESS = False

class LazyLoadingTester:
    """–¢–µ—Å—Ç–µ—Ä —Å–∏—Å—Ç–µ–º—ã –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–µ—Ä–∞"""
        self.test_results = {
            'total_tests': 0,
            'passed_tests': 0,
            'failed_tests': 0,
            'test_details': []
        }
        self.start_time = None
        
    def run_test(self, test_name: str, test_func) -> bool:
        """–ó–∞–ø—É—Å–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        self.test_results['total_tests'] += 1
        self.start_time = time.time()
        
        try:
            result = test_func()
            duration = time.time() - self.start_time
            
            if result:
                self.test_results['passed_tests'] += 1
                status = "‚úÖ –ü–†–û–ô–î–ï–ù"
            else:
                self.test_results['failed_tests'] += 1
                status = "‚ùå –ü–†–û–í–ê–õ–ï–ù"
            
            self.test_results['test_details'].append({
                'test_name': test_name,
                'status': status,
                'duration': duration,
                'timestamp': datetime.now().isoformat()
            })
            
            print(f"{status} {test_name} ({duration:.3f}s)")
            return result
            
        except Exception as e:
            self.test_results['failed_tests'] += 1
            duration = time.time() - self.start_time
            
            self.test_results['test_details'].append({
                'test_name': test_name,
                'status': "‚ùå –û–®–ò–ë–ö–ê",
                'duration': duration,
                'error': str(e),
                'timestamp': datetime.now().isoformat()
            })
            
            print(f"‚ùå –û–®–ò–ë–ö–ê {test_name}: {e} ({duration:.3f}s)")
            return False
    
    def test_lazy_wrapper_creation(self) -> bool:
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è lazy wrapper"""
        try:
            wrapper = create_lazy_wrapper(
                "test_wrapper",
                "security.safe_function_manager",
                "SafeFunctionManager"
            )
            
            if wrapper is None:
                return False
            
            info = wrapper.get_info()
            return (
                info['module_path'] == "security.safe_function_manager" and
                info['class_name'] == "SafeFunctionManager" and
                not info['is_loaded']
            )
        except Exception:
            return False
    
    def test_lazy_wrapper_loading(self) -> bool:
        """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ lazy wrapper"""
        try:
            wrapper = get_lazy_wrapper("test_wrapper")
            if wrapper is None:
                return False
            
            # –ó–∞–≥—Ä—É–∑–∫–∞
            success = load_lazy_wrapper("test_wrapper")
            if not success:
                return False
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω
            return wrapper.is_loaded()
        except Exception:
            return False
    
    def test_lazy_wrapper_unloading(self) -> bool:
        """–¢–µ—Å—Ç –≤—ã–≥—Ä—É–∑–∫–∏ lazy wrapper"""
        try:
            wrapper = get_lazy_wrapper("test_wrapper")
            if wrapper is None:
                return False
            
            # –í—ã–≥—Ä—É–∑–∫–∞
            success = unload_lazy_wrapper("test_wrapper")
            if not success:
                return False
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –≤—ã–≥—Ä—É–∂–µ–Ω
            return not wrapper.is_loaded()
        except Exception:
            return False
    
    def test_lazy_manager_stats(self) -> bool:
        """–¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ lazy manager"""
        try:
            manager = get_lazy_manager()
            if manager is None:
                return False
            
            stats = manager.get_stats()
            return (
                'total_wrappers' in stats and
                'loaded_wrappers' in stats and
                'failed_wrappers' in stats
            )
        except Exception:
            return False
    
    def test_lazy_system_initialization(self) -> bool:
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            success = initialize_lazy_system()
            return success
        except Exception:
            return False
    
    def test_lazy_system_stats(self) -> bool:
        """–¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            stats = get_lazy_system_stats()
            return (
                'total_wrappers' in stats and
                'loaded_wrappers' in stats and
                'failed_wrappers' in stats
            )
        except Exception:
            return False
    
    def test_lazy_wrapper_info(self) -> bool:
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ wrapper"""
        try:
            wrapper = get_lazy_wrapper("test_wrapper")
            if wrapper is None:
                return False
            
            info = wrapper.get_info()
            return (
                'module_path' in info and
                'class_name' in info and
                'is_loaded' in info
            )
        except Exception:
            return False
    
    def test_lazy_wrapper_error_handling(self) -> bool:
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ wrapper —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –º–æ–¥—É–ª–µ–º
            wrapper = create_lazy_wrapper(
                "error_wrapper",
                "nonexistent.module",
                "NonexistentClass"
            )
            
            if wrapper is None:
                return False
            
            # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
            success = load_lazy_wrapper("error_wrapper")
            
            # –î–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å False –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏
            return not success
        except Exception:
            return False
    
    def test_lazy_wrapper_performance(self) -> bool:
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ lazy loading"""
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö wrappers
            wrappers = []
            for i in range(5):
                wrapper = create_lazy_wrapper(
                    f"perf_wrapper_{i}",
                    "security.safe_function_manager",
                    "SafeFunctionManager"
                )
                wrappers.append(wrapper)
            
            # –ò–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–≥—Ä—É–∑–∫–∏
            start_time = time.time()
            for wrapper in wrappers:
                wrapper.force_load()
            end_time = time.time()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –≤—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
            all_loaded = all(wrapper.is_loaded() for wrapper in wrappers)
            
            # –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–∞–∑—É–º–Ω—ã–º (–º–µ–Ω–µ–µ 5 —Å–µ–∫—É–Ω–¥)
            duration = end_time - start_time
            return all_loaded and duration < 5.0
            
        except Exception:
            return False
    
    def run_all_tests(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï LAZY LOADING –°–ò–°–¢–ï–ú–´")
        print("=" * 60)
        
        if not LAZY_IMPORT_SUCCESS:
            print("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å lazy_wrappers –º–æ–¥—É–ª—å")
            return self.test_results
        
        # –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤
        tests = [
            ("–°–æ–∑–¥–∞–Ω–∏–µ Lazy Wrapper", self.test_lazy_wrapper_creation),
            ("–ó–∞–≥—Ä—É–∑–∫–∞ Lazy Wrapper", self.test_lazy_wrapper_loading),
            ("–í—ã–≥—Ä—É–∑–∫–∞ Lazy Wrapper", self.test_lazy_wrapper_unloading),
            ("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Lazy Manager", self.test_lazy_manager_stats),
            ("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã", self.test_lazy_system_initialization),
            ("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã", self.test_lazy_system_stats),
            ("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Wrapper", self.test_lazy_wrapper_info),
            ("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫", self.test_lazy_wrapper_error_handling),
            ("–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", self.test_lazy_wrapper_performance)
        ]
        
        # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
        for test_name, test_func in tests:
            self.run_test(test_name, test_func)
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_time = sum(test['duration'] for test in self.test_results['test_details'])
        success_rate = (self.test_results['passed_tests'] / self.test_results['total_tests']) * 100
        
        print("\n" + "=" * 60)
        print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   üìÅ –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {self.test_results['total_tests']}")
        print(f"   ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {self.test_results['passed_tests']}")
        print(f"   ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {self.test_results['failed_tests']}")
        print(f"   üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
        print(f"   ‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.3f}s")
        
        if success_rate >= 80:
            print("üéØ –û–¶–ï–ù–ö–ê: –û–¢–õ–ò–ß–ù–û!")
        elif success_rate >= 60:
            print("üéØ –û–¶–ï–ù–ö–ê: –•–û–†–û–®–û!")
        else:
            print("üéØ –û–¶–ï–ù–ö–ê: –¢–†–ï–ë–£–ï–¢ –£–õ–£–ß–®–ï–ù–ò–Ø!")
        
        return self.test_results

def test_lazy_loading_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å SFM"""
    print("\nüîó –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –° SFM")
    print("=" * 40)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ lazy_wrappers.py —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        lazy_file = "security/lazy_wrappers.py"
        if os.path.exists(lazy_file):
            print(f"‚úÖ –§–∞–π–ª {lazy_file} –Ω–∞–π–¥–µ–Ω")
        else:
            print(f"‚ùå –§–∞–π–ª {lazy_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ lazy_wrappers –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        lazy_dir = "security/lazy_wrappers"
        if os.path.exists(lazy_dir):
            files = [f for f in os.listdir(lazy_dir) if f.endswith('.py')]
            print(f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {lazy_dir} –Ω–∞–π–¥–µ–Ω–∞ ({len(files)} —Ñ–∞–π–ª–æ–≤)")
        else:
            print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {lazy_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ SFM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        sfm_file = "security/safe_function_manager.py"
        if os.path.exists(sfm_file):
            with open(sfm_file, 'r', encoding='utf-8') as f:
                sfm_content = f.read()
            
            if 'lazy_wrappers' in sfm_content:
                print("‚úÖ SFM —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å lazy_wrappers")
            else:
                print("‚ö†Ô∏è SFM –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å lazy_wrappers")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï LAZY LOADING –°–ò–°–¢–ï–ú–´")
    print("=" * 80)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–µ—Ä–∞
    tester = LazyLoadingTester()
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    results = tester.run_all_tests()
    
    # –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    integration_success = test_lazy_loading_integration()
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    report_file = f"lazy_loading_test_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
    with open(report_file, 'w', encoding='utf-8') as f:
        json.dump({
            'test_results': results,
            'integration_success': integration_success,
            'timestamp': datetime.now().isoformat()
        }, f, indent=2, ensure_ascii=False)
    
    print(f"\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
    print("‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")

if __name__ == "__main__":
    main()
