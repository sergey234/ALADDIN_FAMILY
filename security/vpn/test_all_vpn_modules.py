#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü–æ–ª–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –í–°–ï–• 7 VPN –º–æ–¥—É–ª–µ–π
–ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞: A+
"""

import asyncio
import sys
from pathlib import Path
from datetime import datetime, timedelta

sys.path.insert(0, str(Path(__file__).parent))

print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–õ–ù–û–ô VPN –°–ò–°–¢–ï–ú–´ (7 –º–æ–¥—É–ª–µ–π)")
print("=" * 70)

# –¢–µ—Å—Ç 1: –ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
print("\n1Ô∏è‚É£ –¢–ï–°–¢ –ò–ú–ü–û–†–¢–ê –í–°–ï–• –ú–û–î–£–õ–ï–ô")
print("-" * 70)

modules_to_test = [
    ("vpn_manager", "VPNManager"),
    ("vpn_configuration", "VPNConfiguration"),
    ("vpn_monitoring", "VPNMonitoring"),
    ("vpn_analytics", "VPNAnalytics"),
    ("vpn_integration", "VPNIntegration"),
    ("service_orchestrator", "ServiceOrchestrator"),
    ("cd_deployment_manager", "CDDeploymentManager")
]

imported_modules = {}
import_errors = []

for module_name, class_name in modules_to_test:
    try:
        module = __import__(module_name)
        cls = getattr(module, class_name)
        imported_modules[module_name] = cls
        print(f"‚úÖ {module_name:<30} - {class_name}")
    except Exception as e:
        import_errors.append((module_name, str(e)))
        print(f"‚ùå {module_name:<30} - –û—à–∏–±–∫–∞: {e}")

print(f"\nüìä –ò–º–ø–æ—Ä—Ç: {len(imported_modules)}/7 —É—Å–ø–µ—à–Ω–æ")

# –¢–µ—Å—Ç 2: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
print("\n2Ô∏è‚É£ –¢–ï–°–¢ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò –í–°–ï–• –ú–û–î–£–õ–ï–ô")
print("-" * 70)

initialized_instances = {}
init_errors = []

for module_name, cls in imported_modules.items():
    try:
        instance = cls()
        initialized_instances[module_name] = instance
        print(f"‚úÖ {module_name:<30} - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        init_errors.append((module_name, str(e)))
        print(f"‚ùå {module_name:<30} - –û—à–∏–±–∫–∞: {e}")

print(f"\nüìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {len(initialized_instances)}/7 —É—Å–ø–µ—à–Ω–æ")

# –¢–µ—Å—Ç 3: –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
print("\n3Ô∏è‚É£ –¢–ï–°–¢ –ë–ê–ó–û–í–û–ô –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–ò")
print("-" * 70)

async def test_vpn_configuration():
    """–¢–µ—Å—Ç VPN Configuration"""
    try:
        config = initialized_instances.get('vpn_configuration')
        if config:
            summary = await config.get_config_summary()
            assert isinstance(summary, dict)
            print(f"‚úÖ vpn_configuration          - get_config_summary() —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return True
    except Exception as e:
        print(f"‚ùå vpn_configuration          - –û—à–∏–±–∫–∞: {e}")
        return False

async def test_service_orchestrator():
    """–¢–µ—Å—Ç Service Orchestrator"""
    try:
        orchestrator = initialized_instances.get('service_orchestrator')
        if orchestrator:
            summary = await orchestrator.get_orchestrator_summary()
            assert isinstance(summary, dict)
            print(f"‚úÖ service_orchestrator       - get_orchestrator_summary() —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return True
    except Exception as e:
        print(f"‚ùå service_orchestrator       - –û—à–∏–±–∫–∞: {e}")
        return False

async def test_cd_deployment_manager():
    """–¢–µ—Å—Ç CD Deployment Manager"""
    try:
        manager = initialized_instances.get('cd_deployment_manager')
        if manager:
            stats = await manager.get_deployment_stats()
            assert isinstance(stats, dict)
            print(f"‚úÖ cd_deployment_manager      - get_deployment_stats() —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return True
    except Exception as e:
        print(f"‚ùå cd_deployment_manager      - –û—à–∏–±–∫–∞: {e}")
        return False

async def test_vpn_analytics():
    """–¢–µ—Å—Ç VPN Analytics"""
    try:
        analytics = initialized_instances.get('vpn_analytics')
        if analytics:
            analytics.add_data_point("test_metric", 100.0, user_id="test_user")
            recommendations = await analytics.get_recommendations()
            assert isinstance(recommendations, list)
            print(f"‚úÖ vpn_analytics              - add_data_point() –∏ get_recommendations() —Ä–∞–±–æ—Ç–∞—é—Ç")
            return True
    except Exception as e:
        print(f"‚ùå vpn_analytics              - –û—à–∏–±–∫–∞: {e}")
        return False

async def test_vpn_integration():
    """–¢–µ—Å—Ç VPN Integration"""
    try:
        integration = initialized_instances.get('vpn_integration')
        if integration:
            from vpn_integration import EventType
            event_id = await integration.emit_event(
                EventType.USER_LOGIN,
                {"test": "data"},
                user_id="test_user"
            )
            assert event_id is not None
            print(f"‚úÖ vpn_integration            - emit_event() —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return True
    except Exception as e:
        print(f"‚ùå vpn_integration            - –û—à–∏–±–∫–∞: {e}")
        return False

# –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã
async def run_functionality_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
    tests = [
        test_vpn_configuration(),
        test_service_orchestrator(),
        test_cd_deployment_manager(),
        test_vpn_analytics(),
        test_vpn_integration()
    ]
    
    results = await asyncio.gather(*tests, return_exceptions=True)
    passed = sum(1 for r in results if r is True)
    
    return passed, len(tests)

functionality_passed, functionality_total = asyncio.run(run_functionality_tests())

print(f"\nüìä –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {functionality_passed}/{functionality_total} —É—Å–ø–µ—à–Ω–æ")

# –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ —Ñ–∞–π–ª–æ–≤
print("\n4Ô∏è‚É£ –¢–ï–°–¢ –†–ê–ó–ú–ï–†–û–í –§–ê–ô–õ–û–í")
print("-" * 70)

total_size = 0
file_count = 0

for module_name, _ in modules_to_test:
    file_path = Path(f'security/vpn/{module_name}.py')
    if file_path.exists():
        size = file_path.stat().st_size
        total_size += size
        file_count += 1
        print(f"‚úÖ {module_name}.py{' ' * (28-len(module_name))} - {size:>10,} –±–∞–π—Ç")
    else:
        print(f"‚ùå {module_name}.py{' ' * (28-len(module_name))} - –ù–ï –ù–ê–ô–î–ï–ù")

print(f"\nüìä –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {total_size:,} –±–∞–π—Ç ({total_size/1024:.1f} KB)")

# –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
print("\n" + "=" * 70)
print("üéØ –§–ò–ù–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
print("=" * 70)

total_tests = 4
passed_tests = 0

if len(imported_modules) == 7:
    passed_tests += 1
    print(f"‚úÖ –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π:          {len(imported_modules)}/7 (100%)")
else:
    print(f"‚ö†Ô∏è –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π:          {len(imported_modules)}/7 ({len(imported_modules)/7*100:.0f}%)")

if len(initialized_instances) == 7:
    passed_tests += 1
    print(f"‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:           {len(initialized_instances)}/7 (100%)")
else:
    print(f"‚ö†Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:           {len(initialized_instances)}/7 ({len(initialized_instances)/7*100:.0f}%)")

if functionality_passed == functionality_total:
    passed_tests += 1
    print(f"‚úÖ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:        {functionality_passed}/{functionality_total} (100%)")
else:
    print(f"‚ö†Ô∏è –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:        {functionality_passed}/{functionality_total} ({functionality_passed/functionality_total*100:.0f}%)")

if file_count == 7:
    passed_tests += 1
    print(f"‚úÖ –§–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã:           {file_count}/7 (100%)")
else:
    print(f"‚ö†Ô∏è –§–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã:           {file_count}/7 ({file_count/7*100:.0f}%)")

success_rate = (passed_tests / total_tests) * 100

print("\n" + "=" * 70)
print(f"üèÜ –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ ({success_rate:.0f}%)")

if success_rate == 100:
    print("üéâ –û–¢–õ–ò–ß–ù–û! –í–°–Ø VPN –°–ò–°–¢–ï–ú–ê –†–ê–ë–û–¢–ê–ï–¢ –ù–ê 100%!")
elif success_rate >= 75:
    print("‚úÖ –•–û–†–û–®–û! VPN —Å–∏—Å—Ç–µ–º–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –≥–æ—Ç–æ–≤–∞!")
else:
    print("‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–†–ê–ë–û–¢–ö–ê!")

sys.exit(0 if success_rate >= 75 else 1)
