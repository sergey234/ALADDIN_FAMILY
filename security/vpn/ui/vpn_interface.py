"""
VPN –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è ALADDIN
–ü—Ä–æ—Å—Ç–æ–π –∏ –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
"""

import logging as std_logging
import asyncio
import json
import time
from typing import Dict, List, Optional, Any
from dataclasses import dataclass
from enum import Enum

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
std_logging.basicConfig(level=std_logging.INFO)
logger = std_logging.getLogger(__name__)

class VPNStatus(Enum):
    """–°—Ç–∞—Ç—É—Å—ã VPN"""
    DISCONNECTED = "disconnected"
    CONNECTING = "connecting"
    CONNECTED = "connected"
    DISCONNECTING = "disconnecting"
    ERROR = "error"

@dataclass
class ServerInfo:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ"""
    id: str
    name: str
    country: str
    flag: str
    ping: int
    load: int
    is_available: bool

class ALADDINVPNInterface:
    """VPN –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è ALADDIN"""
    
    def __init__(self):
        self.status = VPNStatus.DISCONNECTED
        self.current_server: Optional[ServerInfo] = None
        self.connection_start_time: Optional[float] = None
        self.bytes_sent = 0
        self.bytes_received = 0
        
        # –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
        self.servers = [
            ServerInfo("sg-1", "–°–∏–Ω–≥–∞–ø—É—Ä", "SG", "üá∏üá¨", 25, 15, True),
            ServerInfo("de-1", "–ì–µ—Ä–º–∞–Ω–∏—è", "DE", "üá©üá™", 45, 25, True),
            ServerInfo("hk-1", "–ì–æ–Ω–∫–æ–Ω–≥", "HK", "üá≠üá∞", 35, 20, True),
            ServerInfo("jp-1", "–Ø–ø–æ–Ω–∏—è", "JP", "üáØüáµ", 40, 30, True),
            ServerInfo("us-1", "–°–®–ê", "US", "üá∫üá∏", 80, 40, True),
            ServerInfo("ca-1", "–ö–∞–Ω–∞–¥–∞", "CA", "üá®üá¶", 75, 35, True)
        ]
    
    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞"""
        connection_time = 0
        if self.connection_start_time:
            connection_time = time.time() - self.connection_start_time
        
        return {
            "status": self.status.value,
            "current_server": {
                "id": self.current_server.id if self.current_server else None,
                "name": self.current_server.name if self.current_server else None,
                "country": self.current_server.country if self.current_server else None,
                "flag": self.current_server.flag if self.current_server else None
            },
            "connection_time": round(connection_time, 2),
            "bytes_sent": self.bytes_sent,
            "bytes_received": self.bytes_received,
            "speed": self._calculate_speed()
        }
    
    def get_servers(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤"""
        return [
            {
                "id": server.id,
                "name": server.name,
                "country": server.country,
                "flag": server.flag,
                "ping": server.ping,
                "load": server.load,
                "is_available": server.is_available
            }
            for server in self.servers
        ]
    
    def select_server(self, server_id: str) -> bool:
        """–í—ã–±–æ—Ä —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            server = next((s for s in self.servers if s.id == server_id), None)
            if not server:
                logger.error(f"–°–µ—Ä–≤–µ—Ä {server_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            if not server.is_available:
                logger.error(f"–°–µ—Ä–≤–µ—Ä {server_id} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return False
            
            self.current_server = server
            logger.info(f"–í—ã–±—Ä–∞–Ω —Å–µ—Ä–≤–µ—Ä: {server.name} ({server.country})")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            return False
    
    async def connect(self) -> bool:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ VPN"""
        try:
            if self.status != VPNStatus.DISCONNECTED:
                logger.warning("VPN —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∏–ª–∏ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è")
                return False
            
            if not self.current_server:
                # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π —Å–µ—Ä–≤–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                best_server = self._select_best_server()
                if not best_server:
                    logger.error("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤")
                    return False
                self.current_server = best_server
            
            logger.info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {self.current_server.name}...")
            self.status = VPNStatus.CONNECTING
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            await asyncio.sleep(2)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            if await self._test_connection():
                self.status = VPNStatus.CONNECTED
                self.connection_start_time = time.time()
                logger.info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {self.current_server.name} —É—Å–ø–µ—à–Ω–æ")
                return True
            else:
                self.status = VPNStatus.ERROR
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {self.current_server.name}")
                return False
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            self.status = VPNStatus.ERROR
            return False
    
    async def disconnect(self) -> bool:
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç VPN"""
        try:
            if self.status == VPNStatus.DISCONNECTED:
                logger.warning("VPN –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
                return True
            
            logger.info("–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç VPN...")
            self.status = VPNStatus.DISCONNECTING
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ
            await asyncio.sleep(1)
            
            self.status = VPNStatus.DISCONNECTED
            self.current_server = None
            self.connection_start_time = None
            logger.info("–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç VPN –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    def _select_best_server(self) -> Optional[ServerInfo]:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞"""
        available_servers = [s for s in self.servers if s.is_available]
        if not available_servers:
            return None
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–µ—Ä–≤–µ—Ä —Å –Ω–∞–∏–º–µ–Ω—å—à–∏–º –ø–∏–Ω–≥–æ–º –∏ –Ω–∞–≥—Ä—É–∑–∫–æ–π
        best_server = min(available_servers, key=lambda s: s.ping + s.load)
        return best_server
    
    async def _test_connection(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        try:
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç ping –∏–ª–∏ HTTP –∑–∞–ø—Ä–æ—Å
            await asyncio.sleep(1)
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    def _calculate_speed(self) -> Dict[str, float]:
        """–†–∞—Å—á–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        if not self.connection_start_time:
            return {"download": 0.0, "upload": 0.0}
        
        connection_time = time.time() - self.connection_start_time
        if connection_time == 0:
            return {"download": 0.0, "upload": 0.0}
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å
        download_speed = self.bytes_received / connection_time / 1024  # KB/s
        upload_speed = self.bytes_sent / connection_time / 1024  # KB/s
        
        return {
            "download": round(download_speed, 2),
            "upload": round(upload_speed, 2)
        }
    
    def update_traffic(self, bytes_sent: int, bytes_received: int):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç—Ä–∞—Ñ–∏–∫–∞"""
        self.bytes_sent += bytes_sent
        self.bytes_received += bytes_received
    
    def get_quick_connect_servers(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        return [
            {
                "id": server.id,
                "name": server.name,
                "country": server.country,
                "flag": server.flag,
                "ping": server.ping
            }
            for server in sorted(self.servers, key=lambda s: s.ping)[:4]
        ]
    
    def get_connection_summary(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        status = self.get_status()
        
        return {
            "is_connected": self.status == VPNStatus.CONNECTED,
            "status_text": self._get_status_text(),
            "server_info": status["current_server"],
            "connection_time": status["connection_time"],
            "speed": status["speed"],
            "data_usage": {
                "sent": self.bytes_sent,
                "received": self.bytes_received,
                "total": self.bytes_sent + self.bytes_received
            }
        }
    
    def _get_status_text(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞"""
        status_texts = {
            VPNStatus.DISCONNECTED: "–û—Ç–∫–ª—é—á–µ–Ω",
            VPNStatus.CONNECTING: "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...",
            VPNStatus.CONNECTED: "–ü–æ–¥–∫–ª—é—á–µ–Ω",
            VPNStatus.DISCONNECTING: "–û—Ç–∫–ª—é—á–µ–Ω–∏–µ...",
            VPNStatus.ERROR: "–û—à–∏–±–∫–∞"
        }
        return status_texts.get(self.status, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    vpn_ui = ALADDINVPNInterface()
    
    print("=== VPN –ò–ù–¢–ï–†–§–ï–ô–° ALADDIN ===")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤
    servers = vpn_ui.get_servers()
    print(f"–î–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤: {len(servers)}")
    for server in servers:
        print(f"  {server['flag']} {server['name']} - {server['ping']}ms (–Ω–∞–≥—Ä—É–∑–∫–∞: {server['load']}%)")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–µ—Ä—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    quick_servers = vpn_ui.get_quick_connect_servers()
    print(f"\n–ë—ã—Å—Ç—Ä—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {[s['name'] for s in quick_servers]}")
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    if vpn_ui.select_server("sg-1"):
        print("‚úÖ –°–µ—Ä–≤–µ—Ä –≤—ã–±—Ä–∞–Ω")
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
        if await vpn_ui.connect():
            print("‚úÖ VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            summary = vpn_ui.get_connection_summary()
            print(f"–°—Ç–∞—Ç—É—Å: {summary['status_text']}")
            print(f"–°–µ—Ä–≤–µ—Ä: {summary['server_info']['name']} {summary['server_info']['flag']}")
            print(f"–í—Ä–µ–º—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {summary['connection_time']} —Å–µ–∫")
            print(f"–°–∫–æ—Ä–æ—Å—Ç—å: {summary['speed']['download']} KB/s ‚Üì / {summary['speed']['upload']} KB/s ‚Üë")
            
            # –û—Ç–∫–ª—é—á–∞–µ–º—Å—è
            await asyncio.sleep(2)
            await vpn_ui.disconnect()
            print("‚úÖ VPN –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è VPN")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞")

if __name__ == "__main__":
    asyncio.run(main())