"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
"""

import logging as std_logging
import asyncio
import time
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –ò–º–ø–æ—Ä—Ç—ã
from performance import (
    ALADDINConnectionCache, 
    ALADDINConnectionPool, 
    ALADDINAsyncProcessor,
    ALADDINPerformanceManager,
    PerformanceMode,
    PerformanceConfig,
    TaskPriority
)
from features import (
    ALADDINSplitTunneling,
    ALADDINMultiHop,
    ALADDINAutoReconnect,
    ReconnectConfig,
    ReconnectStrategy
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
std_logging.basicConfig(level=std_logging.INFO)
logger = std_logging.getLogger(__name__)

async def test_connection_cache():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
    print("\n=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–≠–®–ò–†–û–í–ê–ù–ò–Ø –°–û–ï–î–ò–ù–ï–ù–ò–ô ===")
    
    cache = ALADDINConnectionCache(max_connections=5, ttl=60)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
    for i in range(3):
        conn_id = f"test_conn_{i+1}"
        server_id = f"test_server_{i+1}"
        connection_data = {
            "protocol": "wireguard",
            "port": 51820,
            "encryption": "aes-256-gcm"
        }
        
        success = cache.cache_connection(conn_id, server_id, connection_data)
        print(f"‚úÖ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è {conn_id}: {'–£—Å–ø–µ—Ö' if success else '–û—à–∏–±–∫–∞'}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–∑ –∫—ç—à–∞
    cached_conn = cache.get_connection("test_server_1")
    if cached_conn:
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∏–∑ –∫—ç—à–∞: {cached_conn.connection_id}")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫—ç—à–∞")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = cache.get_cache_stats()
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞: {stats['total_connections']} —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π, "
          f"–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–æ–ø–∞–¥–∞–Ω–∏–π: {stats['cache_hit_ratio']:.2%}")

async def test_connection_pool():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
    print("\n=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–£–õ–ê –°–û–ï–î–ò–ù–ï–ù–ò–ô ===")
    
    def create_test_connection(server_id: str):
        return {
            "protocol": "wireguard",
            "server_id": server_id,
            "port": 51820,
            "encryption": "aes-256-gcm"
        }
    
    pool = ALADDINConnectionPool(
        min_connections=2,
        max_connections=5,
        connection_timeout=10,
        idle_timeout=60
    )
    
    pool.set_connection_factory(create_test_connection)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É–ª
    if pool.initialize_pool():
        print("‚úÖ –ü—É–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—É–ª–∞")
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    connections = []
    for i in range(3):
        conn = pool.get_connection(f"test_server_{i+1}")
        if conn:
            connections.append(conn)
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: {conn.connection_id}")
        else:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è test_server_{i+1}")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    for conn in connections:
        if pool.return_connection(conn.connection_id):
            print(f"‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ {conn.connection_id} –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è {conn.connection_id}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = pool.get_pool_stats()
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É–ª–∞: {stats['total_connections']} —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π, "
          f"–∞–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active_connections']}, "
          f"–¥–æ—Å—Ç—É–ø–Ω—ã—Ö: {stats['available_connections']}")
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—É–ª
    pool.close_pool()
    print("‚úÖ –ü—É–ª –∑–∞–∫—Ä—ã—Ç")

async def test_async_processor():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞"""
    print("\n=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ê–°–ò–ù–•–†–û–ù–ù–û–ì–û –ü–†–û–¶–ï–°–°–û–†–ê ===")
    
    async def test_task(task_id: str, delay: float):
        print(f"üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ {task_id}...")
        await asyncio.sleep(delay)
        return f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–¥–∞—á–∏ {task_id}"
    
    processor = ALADDINAsyncProcessor(max_workers=3, max_tasks=100)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
    await processor.start()
    print("‚úÖ –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –∑–∞–ø—É—â–µ–Ω")
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏
        task_ids = []
        for i in range(5):
            task_id = await processor.submit_task(
                test_task, f"task_{i+1}", 1.0,
                priority=TaskPriority.LOW
            )
            task_ids.append(task_id)
            print(f"‚úÖ –ó–∞–¥–∞—á–∞ {task_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for task_id in task_ids:
            try:
                result = await processor.get_task_result(task_id, timeout=5.0)
                print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç {task_id}: {result}")
            except asyncio.TimeoutError:
                print(f"‚è∞ –¢–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id}: {e}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = await processor.get_stats()
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞: {stats['active_workers']} –≤–æ—Ä–∫–µ—Ä–æ–≤, "
              f"–∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: {stats['active_tasks']}, "
              f"–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: {stats['completed_tasks']}")
        
    finally:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
        await processor.stop()
        print("‚úÖ –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

async def test_split_tunneling():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Split Tunneling"""
    print("\n=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï SPLIT TUNNELING ===")
    
    split_tunnel = ALADDINSplitTunneling()
    split_tunnel.enable_split_tunneling()
    print("‚úÖ Split Tunneling –≤–∫–ª—é—á–µ–Ω")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –¥–æ–º–µ–Ω—ã
    test_domains = [
        "sberbank.ru",      # –ë–∞–Ω–∫–æ–≤—Å–∫–∏–π - –¥–æ–ª–∂–µ–Ω –æ–±—Ö–æ–¥–∏—Ç—å VPN
        "netflix.com",      # –°—Ç—Ä–∏–º–∏–Ω–≥ - –¥–æ–ª–∂–µ–Ω –∏–¥—Ç–∏ —á–µ—Ä–µ–∑ VPN
        "steam.com",        # –ò–≥—Ä—ã - –¥–æ–ª–∂–µ–Ω –æ–±—Ö–æ–¥–∏—Ç—å VPN
        "facebook.com",     # –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏ - –¥–æ–ª–∂–µ–Ω –∏–¥—Ç–∏ —á–µ—Ä–µ–∑ VPN
        "google.com"        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    ]
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏:")
    for domain in test_domains:
        routing, rule_id = split_tunnel.get_routing_decision(domain=domain)
        rule_name = split_tunnel.rules[rule_id].name if rule_id else "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é"
        print(f"  {domain}: {routing.value} ({rule_name})")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç—Ä–∞—Ñ–∏–∫–∞
    print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞—Ñ–∏–∫–∞:")
    for domain in test_domains[:3]:
        use_vpn = split_tunnel.process_traffic(
            domain=domain,
            port=443,
            protocol="https",
            packet_size=1024
        )
        print(f"  {domain}: {'VPN' if use_vpn else 'Bypass'}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = split_tunnel.get_traffic_stats()
    print(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∞—Ñ–∏–∫–∞:")
    print(f"  –í—Å–µ–≥–æ –ø–∞–∫–µ—Ç–æ–≤: {stats['total_packets']}")
    print(f"  –ß–µ—Ä–µ–∑ VPN: {stats['vpn_packets']} ({stats['vpn_percentage']:.1f}%)")
    print(f"  –û–±—Ö–æ–¥ VPN: {stats['bypass_packets']} ({stats['bypass_percentage']:.1f}%)")

async def test_multi_hop():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Multi-hop –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"""
    print("\n=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï MULTI-HOP –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ô ===")
    
    multi_hop = ALADDINMultiHop()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–µ–ø–æ—á–∫–∏
    chains = multi_hop.get_available_chains()
    print(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–µ–ø–æ—á–∫–∏ ({len(chains)}):")
    for chain in chains[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
        print(f"  {chain['name']}: {chain['hop_count']} —Ö–æ–ø–æ–≤, "
              f"–∑–∞–¥–µ—Ä–∂–∫–∞ {chain['total_latency']:.1f}–º—Å, "
              f"–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å {chain['security_level']}/5")
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±—ã—Å—Ç—Ä–æ–π —Ü–µ–ø–æ—á–∫–µ
    print(f"\nüîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±—ã—Å—Ç—Ä–æ–π —Ü–µ–ø–æ—á–∫–µ...")
    if await multi_hop.connect_chain("fast_chain"):
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = multi_hop.get_chain_stats("fast_chain")
        if stats:
            print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ü–µ–ø–æ—á–∫–∏:")
            print(f"  –ü–æ–¥–∫–ª—é—á–µ–Ω–æ —Ö–æ–ø–æ–≤: {stats['connected_hops']}/{stats['total_hops']}")
            print(f"  –û–±—â–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: {stats['total_latency']:.1f}–º—Å")
            print(f"  –£—Ä–æ–≤–µ–Ω—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {stats['security_level']}/5")
        
        # –û—Ç–∫–ª—é—á–∞–µ–º—Å—è
        if await multi_hop.disconnect_chain("fast_chain"):
            print("‚úÖ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")

async def test_auto_reconnect():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    print("\n=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –ü–ï–†–ï–ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø ===")
    
    config = ReconnectConfig(
        max_attempts=3,
        base_delay=1.0,
        max_delay=10.0,
        strategy=ReconnectStrategy.EXPONENTIAL,
        quality_threshold=0.7,
        health_check_interval=5.0,
        jitter=True
    )
    
    auto_reconnect = ALADDINAutoReconnect(config)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º callbacks
    async def on_reconnect_start():
        print("üîÑ –ù–∞—á–∞–ª–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
    
    async def on_reconnect_success():
        print("‚úÖ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
    
    async def on_reconnect_failure():
        print("‚ùå –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")
    
    async def on_quality_change(quality):
        print(f"üìä –ö–∞—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {quality.value}")
    
    auto_reconnect.set_callbacks(
        on_reconnect_start=on_reconnect_start,
        on_reconnect_success=on_reconnect_success,
        on_reconnect_failure=on_reconnect_failure,
        on_quality_change=on_quality_change
    )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º
    await auto_reconnect.start()
    print("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ID —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    auto_reconnect.set_connection_id("test_connection_123")
    print("‚úÖ ID —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    try:
        # –ñ–¥–µ–º –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        print("‚è≥ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤ —Ç–µ—á–µ–Ω–∏–µ 15 —Å–µ–∫—É–Ω–¥...")
        await asyncio.sleep(15)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = auto_reconnect.get_stats()
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π:")
        print(f"  –í–∫–ª—é—á–µ–Ω–æ: {stats['is_enabled']}")
        print(f"  –ö–∞—á–µ—Å—Ç–≤–æ: {stats['connection_quality']}")
        print(f"  –í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: {stats['stats']['total_attempts']}")
        print(f"  –£—Å–ø–µ—à–Ω—ã—Ö: {stats['stats']['successful_reconnects']}")
        print(f"  –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {stats['success_rate']:.1f}%")
        
    finally:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
        await auto_reconnect.stop()
        print("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

async def test_performance_manager():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    print("\n=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–ï–ù–ï–î–ñ–ï–†–ê –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò ===")
    
    config = PerformanceConfig(
        mode=PerformanceMode.HIGH_PERFORMANCE,
        cache_size=50,
        pool_min_connections=5,
        pool_max_connections=20,
        async_workers=8,
        connection_ttl=300,
        task_timeout=60
    )
    
    manager = ALADDINPerformanceManager(config)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
    if await manager.initialize():
        print("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")
        return
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        connections = []
        for i in range(3):
            server_id = f"test_server_{i+1}"
            conn = await manager.get_connection(server_id)
            if conn:
                connections.append(conn)
                print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è {server_id}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è {server_id}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        for conn in connections:
            if manager.return_connection(conn.connection_id):
                print(f"‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ {conn.connection_id} –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è {conn.connection_id}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        async def test_async_task(task_id: str):
            await asyncio.sleep(0.5)
            return f"–†–µ–∑—É–ª—å—Ç–∞—Ç {task_id}"
        
        task_id = await manager.submit_async_task(test_async_task, "test_task_1")
        print(f"‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ {task_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
        
        try:
            result = await manager.get_async_result(task_id, timeout=5.0)
            print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–¥–∞—á–∏: {result}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = manager.get_performance_stats()
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
        print(f"  –†–µ–∂–∏–º: {stats['manager_status']['mode']}")
        print(f"  –ö—ç—à: {stats['cache_stats']['total_connections']} —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π")
        print(f"  –ü—É–ª: {stats['pool_stats']['total_connections']} —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π")
        print(f"  –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {stats['efficiency']['overall_efficiency']:.2%}")
        
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
        manager.optimize_performance()
        print("‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
        
    finally:
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É
        await manager.shutdown()
        print("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–°–ï–• –ö–û–ú–ü–û–ù–ï–ù–¢–û–í ALADDIN VPN")
    print("=" * 60)
    
    start_time = time.time()
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        await test_connection_cache()
        await test_connection_pool()
        await test_async_processor()
        await test_split_tunneling()
        await test_multi_hop()
        await test_auto_reconnect()
        await test_performance_manager()
        
        total_time = time.time() - start_time
        print(f"\nüéâ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {total_time:.2f} —Å–µ–∫—É–Ω–¥")
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ê–•: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")

if __name__ == "__main__":
    asyncio.run(main())