#!/usr/bin/env python3
"""
ALADDIN VPN - Test Runner
–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ VPN —Å–∏—Å—Ç–µ–º—ã

–ê–≤—Ç–æ—Ä: ALADDIN Security Team
–í–µ—Ä—Å–∏—è: 1.0.0
–î–∞—Ç–∞: 01.10.2025
"""

import unittest
import sys
import os
import time
import json
from datetime import datetime
from io import StringIO

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.dirname(__file__)))

# ============================================================================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –¢–ï–°–¢–û–í
# ============================================================================

class TestConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤"""
    
    # –¢–∏–ø—ã —Ç–µ—Å—Ç–æ–≤
    UNIT_TESTS = "unit"
    INTEGRATION_TESTS = "integration"
    E2E_TESTS = "e2e"
    PERFORMANCE_TESTS = "performance"
    
    # –£—Ä–æ–≤–Ω–∏ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
    QUIET = 0
    NORMAL = 1
    VERBOSE = 2
    
    # –§–æ—Ä–º–∞—Ç—ã –≤—ã–≤–æ–¥–∞
    TEXT = "text"
    JSON = "json"
    HTML = "html"

class TestRunner:
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤"""
    
    def __init__(self, config: TestConfig = None):
        self.config = config or TestConfig()
        self.results = {}
        self.start_time = None
        self.end_time = None
    
    def discover_tests(self, test_type: str = None) -> unittest.TestSuite:
        """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤"""
        test_dir = os.path.join(os.path.dirname(__file__), test_type or "")
        
        if not os.path.exists(test_dir):
            return unittest.TestSuite()
        
        loader = unittest.TestLoader()
        suite = loader.discover(
            start_dir=test_dir,
            pattern="test_*.py",
            top_level_dir=os.path.dirname(__file__)
        )
        
        return suite
    
    def run_unit_tests(self) -> dict:
        """–ó–∞–ø—É—Å–∫ unit —Ç–µ—Å—Ç–æ–≤"""
        print("üß™ –ó–∞–ø—É—Å–∫ Unit —Ç–µ—Å—Ç–æ–≤...")
        
        suite = self.discover_tests(TestConfig.UNIT_TESTS)
        result = self._run_test_suite(suite, "Unit Tests")
        
        self.results["unit"] = result
        return result
    
    def run_integration_tests(self) -> dict:
        """–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üîó –ó–∞–ø—É—Å–∫ Integration —Ç–µ—Å—Ç–æ–≤...")
        
        suite = self.discover_tests(TestConfig.INTEGRATION_TESTS)
        result = self._run_test_suite(suite, "Integration Tests")
        
        self.results["integration"] = result
        return result
    
    def run_e2e_tests(self) -> dict:
        """–ó–∞–ø—É—Å–∫ E2E —Ç–µ—Å—Ç–æ–≤"""
        print("üåê –ó–∞–ø—É—Å–∫ E2E —Ç–µ—Å—Ç–æ–≤...")
        
        suite = self.discover_tests(TestConfig.E2E_TESTS)
        result = self._run_test_suite(suite, "E2E Tests")
        
        self.results["e2e"] = result
        return result
    
    def run_performance_tests(self) -> dict:
        """–ó–∞–ø—É—Å–∫ performance —Ç–µ—Å—Ç–æ–≤"""
        print("‚ö° –ó–∞–ø—É—Å–∫ Performance —Ç–µ—Å—Ç–æ–≤...")
        
        suite = self.discover_tests(TestConfig.PERFORMANCE_TESTS)
        result = self._run_test_suite(suite, "Performance Tests")
        
        self.results["performance"] = result
        return result
    
    def _run_test_suite(self, suite: unittest.TestSuite, test_name: str) -> dict:
        """–ó–∞–ø—É—Å–∫ –Ω–∞–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤"""
        if suite.countTestCases() == 0:
            return {
                "name": test_name,
                "tests_run": 0,
                "failures": 0,
                "errors": 0,
                "skipped": 0,
                "success_rate": 100.0,
                "duration": 0.0,
                "status": "no_tests"
            }
        
        # –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º –≤—ã–≤–æ–¥
        stream = StringIO()
        runner = unittest.TextTestRunner(
            stream=stream,
            verbosity=2 if self.config.verbosity == TestConfig.VERBOSE else 1
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
        start_time = time.time()
        result = runner.run(suite)
        end_time = time.time()
        
        # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        test_result = {
            "name": test_name,
            "tests_run": result.testsRun,
            "failures": len(result.failures),
            "errors": len(result.errors),
            "skipped": len(result.skipped) if hasattr(result, 'skipped') else 0,
            "success_rate": ((result.testsRun - len(result.failures) - len(result.errors)) / result.testsRun * 100) if result.testsRun > 0 else 100.0,
            "duration": end_time - start_time,
            "status": "passed" if len(result.failures) == 0 and len(result.errors) == 0 else "failed",
            "output": stream.getvalue(),
            "failure_details": [{"test": str(test), "traceback": traceback} for test, traceback in result.failures],
            "error_details": [{"test": str(test), "traceback": traceback} for test, traceback in result.errors]
        }
        
        return test_result
    
    def run_all_tests(self) -> dict:
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ ALADDIN VPN...")
        print("=" * 60)
        
        self.start_time = time.time()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–∏–ø—ã —Ç–µ—Å—Ç–æ–≤
        self.run_unit_tests()
        self.run_integration_tests()
        self.run_e2e_tests()
        self.run_performance_tests()
        
        self.end_time = time.time()
        
        # –°–æ–±–∏—Ä–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_tests = sum(result["tests_run"] for result in self.results.values())
        total_failures = sum(result["failures"] for result in self.results.values())
        total_errors = sum(result["errors"] for result in self.results.values())
        total_duration = self.end_time - self.start_time
        
        overall_result = {
            "summary": {
                "total_tests": total_tests,
                "total_failures": total_failures,
                "total_errors": total_errors,
                "total_skipped": sum(result["skipped"] for result in self.results.values()),
                "success_rate": ((total_tests - total_failures - total_errors) / total_tests * 100) if total_tests > 0 else 100.0,
                "total_duration": total_duration,
                "status": "passed" if total_failures == 0 and total_errors == 0 else "failed"
            },
            "test_results": self.results,
            "timestamp": datetime.utcnow().isoformat()
        }
        
        return overall_result
    
    def print_results(self, results: dict):
        """–í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤"""
        print("\n" + "=" * 60)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 60)
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        summary = results["summary"]
        print(f"\nüìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {summary['total_tests']}")
        print(f"   –£—Å–ø–µ—à–Ω–æ: {summary['total_tests'] - summary['total_failures'] - summary['total_errors']}")
        print(f"   –ù–µ—É–¥–∞—á–Ω–æ: {summary['total_failures']}")
        print(f"   –û—à–∏–±–æ–∫: {summary['total_errors']}")
        print(f"   –ü—Ä–æ–ø—É—â–µ–Ω–æ: {summary['total_skipped']}")
        print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {summary['success_rate']:.1f}%")
        print(f"   –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {summary['total_duration']:.2f}—Å")
        
        # –°—Ç–∞—Ç—É—Å
        status_emoji = "‚úÖ" if summary['status'] == 'passed' else "‚ùå"
        print(f"\nüéØ –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: {status_emoji} {summary['status'].upper()}")
        
        # –î–µ—Ç–∞–ª–∏ –ø–æ —Ç–∏–ø–∞–º —Ç–µ—Å—Ç–æ–≤
        print(f"\nüìã –î–µ—Ç–∞–ª–∏ –ø–æ —Ç–∏–ø–∞–º —Ç–µ—Å—Ç–æ–≤:")
        for test_type, result in results["test_results"].items():
            status_emoji = "‚úÖ" if result['status'] == 'passed' else "‚ùå"
            print(f"   {test_type.upper()}: {status_emoji} {result['tests_run']} —Ç–µ—Å—Ç–æ–≤, {result['success_rate']:.1f}% —É—Å–ø–µ—Ö, {result['duration']:.2f}—Å")
        
        # –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫
        if summary['total_failures'] > 0 or summary['total_errors'] > 0:
            print(f"\n‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫:")
            for test_type, result in results["test_results"].items():
                if result['failures'] > 0:
                    print(f"\n   {test_type.upper()} - –ù–µ—É–¥–∞—á–∏:")
                    for failure in result['failure_details']:
                        print(f"     ‚Ä¢ {failure['test']}")
                
                if result['errors'] > 0:
                    print(f"\n   {test_type.upper()} - –û—à–∏–±–∫–∏:")
                    for error in result['error_details']:
                        print(f"     ‚Ä¢ {error['test']}")
    
    def save_results(self, results: dict, filename: str = None):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ñ–∞–π–ª"""
        if filename is None:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"test_results_{timestamp}.json"
        
        filepath = os.path.join(os.path.dirname(__file__), filename)
        
        with open(filepath, 'w', encoding='utf-8') as f:
            json.dump(results, f, indent=2, ensure_ascii=False)
        
        print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {filepath}")
        return filepath

# ============================================================================
# –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
# ============================================================================

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse
    
    parser = argparse.ArgumentParser(description="ALADDIN VPN Test Runner")
    parser.add_argument("--type", choices=["unit", "integration", "e2e", "performance", "all"], 
                       default="all", help="–¢–∏–ø —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞")
    parser.add_argument("--verbosity", type=int, choices=[0, 1, 2], default=1,
                       help="–£—Ä–æ–≤–µ–Ω—å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—ã–≤–æ–¥–∞")
    parser.add_argument("--output", choices=["text", "json", "html"], default="text",
                       help="–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    parser.add_argument("--save", action="store_true", help="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª")
    parser.add_argument("--coverage", action="store_true", help="–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å –∞–Ω–∞–ª–∏–∑–æ–º –ø–æ–∫—Ä—ã—Ç–∏—è")
    
    args = parser.parse_args()
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = TestConfig()
    config.verbosity = args.verbosity
    config.output_format = args.output
    
    # –°–æ–∑–¥–∞–µ–º runner
    runner = TestRunner(config)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    if args.type == "all":
        results = runner.run_all_tests()
    elif args.type == "unit":
        results = {"test_results": {"unit": runner.run_unit_tests()}}
    elif args.type == "integration":
        results = {"test_results": {"integration": runner.run_integration_tests()}}
    elif args.type == "e2e":
        results = {"test_results": {"e2e": runner.run_e2e_tests()}}
    elif args.type == "performance":
        results = {"test_results": {"performance": runner.run_performance_tests()}}
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if args.output == "text":
        runner.print_results(results)
    elif args.output == "json":
        print(json.dumps(results, indent=2, ensure_ascii=False))
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if args.save:
        runner.save_results(results)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
    summary = results.get("summary", {})
    if summary.get("status") == "passed":
        sys.exit(0)
    else:
        sys.exit(1)

if __name__ == "__main__":
    main()