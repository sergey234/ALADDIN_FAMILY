#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è 152-–§–ó –¥–ª—è ALADDIN VPN
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
"""

import sys
import os
import logging
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from compliance.integration import compliance_integration
from compliance.russia_compliance import RussiaComplianceManager
from compliance.data_localization import DataLocalizationManager
from compliance.no_logs_policy import NoLogsPolicyManager, LogLevel, LogType

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
import logging as std_logging
std_logging.basicConfig(
    level=std_logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = std_logging.getLogger(__name__)

def test_russia_compliance():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ä–æ—Å—Å–∏–π—Å–∫–æ–º—É –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É"""
    print("\n" + "="*60)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–û–î–£–õ–Ø –°–û–û–¢–í–ï–¢–°–¢–í–ò–Ø 152-–§–ó")
    print("="*60)
    
    try:
        compliance_manager = RussiaComplianceManager()
        result = compliance_manager.run_full_compliance_check()
        
        print(f"‚úÖ –û–±—â–µ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: {result['compliance_percentage']:.1f}%")
        print(f"‚úÖ –°—Ç–∞—Ç—É—Å: {'–°–û–û–¢–í–ï–¢–°–¢–í–£–ï–¢' if result['is_compliant'] else '–ù–ï –°–û–û–¢–í–ï–¢–°–¢–í–£–ï–¢'}")
        print(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {result['total_checks']}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {result['compliant_checks']}")
        print(f"‚úÖ –ù–µ—É—Å–ø–µ—à–Ω—ã—Ö: {result['non_compliant_checks']}")
        print(f"‚úÖ –û—à–∏–±–æ–∫: {result['error_checks']}")
        
        print("\nüìã –î–ï–¢–ê–õ–ò –ü–†–û–í–ï–†–û–ö:")
        for check in result['checks']:
            status_icon = "‚úÖ" if check['status'] == 'compliant' else "‚ùå"
            print(f"  {status_icon} {check['check_name']}: {check['message']}")
        
        return result['is_compliant']
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è 152-–§–ó: {e}")
        return False

def test_data_localization():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
    print("\n" + "="*60)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–û–î–£–õ–Ø –õ–û–ö–ê–õ–ò–ó–ê–¶–ò–ò –î–ê–ù–ù–´–•")
    print("="*60)
    
    try:
        localization_manager = DataLocalizationManager()
        result = localization_manager.check_data_localization()
        
        print(f"‚úÖ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: {result['compliance_percentage']:.1f}%")
        print(f"‚úÖ –°—Ç–∞—Ç—É—Å: {'–°–û–û–¢–í–ï–¢–°–¢–í–£–ï–¢' if result['is_compliant'] else '–ù–ï –°–û–û–¢–í–ï–¢–°–¢–í–£–ï–¢'}")
        
        print(f"\nüá∑üá∫ –†–û–°–°–ò–ô–°–ö–ò–ï –°–ï–†–í–ï–†–´:")
        print(f"  –í—Å–µ–≥–æ: {result['russian_servers']['total_servers']}")
        print(f"  –î–æ—Å—Ç—É–ø–Ω–æ: {result['russian_servers']['available_servers']}")
        print(f"  –°—Ç–∞—Ç—É—Å: {result['russian_servers']['message']}")
        
        print(f"\nüåç –ó–ê–†–£–ë–ï–ñ–ù–´–ï –°–ï–†–í–ï–†–´:")
        print(f"  –í—Å–µ–≥–æ: {result['foreign_servers']['total_servers']}")
        print(f"  –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç: {result['foreign_servers']['compliant_servers']}")
        print(f"  –°—Ç–∞—Ç—É—Å: {result['foreign_servers']['message']}")
        
        print(f"\nüóÑÔ∏è –ë–ê–ó–ê –î–ê–ù–ù–´–•:")
        print(f"  –õ–æ–∫–∞—Ü–∏—è: {result['database']['location']}")
        print(f"  –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {result['database']['provider']}")
        print(f"  –°—Ç–∞—Ç—É—Å: {result['database']['message']}")
        
        print(f"\nüìä –õ–û–ì–ò:")
        print(f"  –õ–æ–∫–∞—Ü–∏—è: {result['logs']['location']}")
        print(f"  –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {result['logs']['provider']}")
        print(f"  –°—Ç–∞—Ç—É—Å: {result['logs']['message']}")
        
        return result['is_compliant']
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def test_no_logs_policy():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è No-Logs –ø–æ–ª–∏—Ç–∏–∫–∏"""
    print("\n" + "="*60)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–û–î–£–õ–Ø NO-LOGS –ü–û–õ–ò–¢–ò–ö–ò")
    print("="*60)
    
    try:
        no_logs_manager = NoLogsPolicyManager()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ª–æ–≥–∏
        print("üìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ª–æ–≥–æ–≤...")
        no_logs_manager.log_system_event(LogLevel.INFO, "–°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞")
        no_logs_manager.log_security_event(LogLevel.WARNING, "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")
        no_logs_manager.log_performance_event(LogLevel.INFO, "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –Ω–æ—Ä–º–µ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
        result = no_logs_manager.check_no_logs_compliance()
        
        print(f"‚úÖ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: {result['compliance_percentage']:.1f}%")
        print(f"‚úÖ –°—Ç–∞—Ç—É—Å: {'–°–û–û–¢–í–ï–¢–°–¢–í–£–ï–¢' if result['is_compliant'] else '–ù–ï –°–û–û–¢–í–ï–¢–°–¢–í–£–ï–¢'}")
        print(f"‚úÖ –í—Å–µ–≥–æ –ª–æ–≥–æ–≤: {result['total_logs']}")
        print(f"‚úÖ –ù–∞—Ä—É—à–µ–Ω–∏–π: {result['violations_count']}")
        print(f"‚úÖ –ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö –ª–æ–≥–æ–≤: {result['forbidden_logs_count']}")
        print(f"‚úÖ –ù–µ–æ–±–µ–∑–ª–∏—á–µ–Ω–Ω—ã—Ö –ª–æ–≥–æ–≤: {result['non_anonymized_count']}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = no_logs_manager.get_log_statistics()
        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –õ–û–ì–û–í:")
        print(f"  –¢–∏–ø—ã –ª–æ–≥–æ–≤: {stats['log_types']}")
        print(f"  –£—Ä–æ–≤–Ω–∏ –ª–æ–≥–æ–≤: {stats['log_levels']}")
        print(f"  –û–±–µ–∑–ª–∏—á–µ–Ω–Ω—ã—Ö: {stats['anonymized_logs']}")
        print(f"  –ù–µ–æ–±–µ–∑–ª–∏—á–µ–Ω–Ω—ã—Ö: {stats['non_anonymized_logs']}")
        
        return result['is_compliant']
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è No-Logs –ø–æ–ª–∏—Ç–∏–∫–∏: {e}")
        return False

def test_integration():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π"""
    print("\n" + "="*60)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –ú–û–î–£–õ–ï–ô")
    print("="*60)
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
        if not compliance_integration.initialize():
            print("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
            return False
        
        print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ VPN —Å–æ–±—ã—Ç–∏–π
        print("üìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è VPN —Å–æ–±—ã—Ç–∏–π...")
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        connection_data = {
            "user_id": "user_12345",
            "ip_address": "192.168.1.100",
            "mac_address": "AA:BB:CC:DD:EE:FF",
            "device_id": "device_67890",
            "timestamp": datetime.now(),
            "server": "ru-moscow-1"
        }
        
        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        compliance_integration.log_vpn_connection(connection_data)
        print("‚úÖ VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–æ")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ
        compliance_integration.log_vpn_disconnection(connection_data)
        print("‚úÖ VPN –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–æ")
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        security_data = {
            "event_type": "suspicious_activity",
            "source_ip": "192.168.1.200",
            "target_ip": "192.168.1.100",
            "severity": "high"
        }
        
        compliance_integration.log_security_event("suspicious_activity", security_data)
        print("‚úÖ –°–æ–±—ã—Ç–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–æ")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        compliance_integration.log_performance_metric("connection_speed", 150.5)
        print("‚úÖ –ú–µ—Ç—Ä–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
        print("\nüîç –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è...")
        result = compliance_integration.run_compliance_check()
        
        print(f"‚úÖ –û–±—â–µ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: {result['compliance_percentage']:.1f}%")
        print(f"‚úÖ –°—Ç–∞—Ç—É—Å: {'–°–û–û–¢–í–ï–¢–°–¢–í–£–ï–¢' if result['overall_compliant'] else '–ù–ï –°–û–û–¢–í–ï–¢–°–¢–í–£–ï–¢'}")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç
        report = compliance_integration.get_compliance_report()
        print(f"\nüìã –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        for recommendation in report['recommendations']:
            print(f"  ‚Ä¢ {recommendation}")
        
        return result['overall_compliant']
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ú–û–î–£–õ–ï–ô –°–û–û–¢–í–ï–¢–°–¢–í–ò–Ø 152-–§–ó")
    print("="*60)
    print(f"–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    results = {}
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –º–æ–¥—É–ª—å
    results['russia_compliance'] = test_russia_compliance()
    results['data_localization'] = test_data_localization()
    results['no_logs_policy'] = test_no_logs_policy()
    results['integration'] = test_integration()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n" + "="*60)
    print("–ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("="*60)
    
    all_passed = all(results.values())
    
    for module, passed in results.items():
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if passed else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{module}: {status}")
    
    print(f"\nüéØ –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢: {'‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´' if all_passed else '‚ùå –ï–°–¢–¨ –ü–†–û–í–ê–õ–ï–ù–ù–´–ï –¢–ï–°–¢–´'}")
    
    if all_passed:
        print("\nüéâ –°–ò–°–¢–ï–ú–ê –ü–û–õ–ù–û–°–¢–¨–Æ –°–û–û–¢–í–ï–¢–°–¢–í–£–ï–¢ –¢–†–ï–ë–û–í–ê–ù–ò–Ø–ú 152-–§–ó!")
        print("‚úÖ –ì–æ—Ç–æ–≤–æ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤ production")
    else:
        print("\n‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–†–ê–ë–û–¢–ö–ê –ú–û–î–£–õ–ï–ô –°–û–û–¢–í–ï–¢–°–¢–í–ò–Ø")
        print("‚ùå –ù–µ –≥–æ—Ç–æ–≤–æ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤ production")
    
    return all_passed

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)