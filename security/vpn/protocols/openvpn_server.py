#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
OpenVPN Server - –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π VPN —Å–µ—Ä–≤–µ—Ä —Å –≤—ã—Å–æ–∫–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å—é
–ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞: A+
–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: SOLID, DRY, PEP8
"""

import logging
import os
import subprocess
import tempfile
from dataclasses import dataclass
from datetime import datetime
from enum import Enum
from typing import Dict, List, Optional, Tuple

import asyncio

logger = logging.getLogger(__name__)


class OpenVPNState(Enum):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è OpenVPN —Å–µ—Ä–≤–µ—Ä–∞"""

    STOPPED = "stopped"
    STARTING = "starting"
    RUNNING = "running"
    STOPPING = "stopping"
    ERROR = "error"


class OpenVPNProtocol(Enum):
    """–ü—Ä–æ—Ç–æ–∫–æ–ª—ã OpenVPN"""

    UDP = "udp"
    TCP = "tcp"


@dataclass
class OpenVPNConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è OpenVPN —Å–µ—Ä–≤–µ—Ä–∞"""

    server_name: str = "aladdin_openvpn"
    port: int = 1194
    protocol: OpenVPNProtocol = OpenVPNProtocol.UDP
    network: str = "10.8.0.0"
    netmask: str = "255.255.255.0"
    cipher: str = "AES-256-GCM"
    auth: str = "SHA256"
    dh_bits: int = 2048
    ca_cert: str = ""
    server_cert: str = ""
    server_key: str = ""
    dh_param: str = ""


@dataclass
class OpenVPNClient:
    """–ö–ª–∏–µ–Ω—Ç OpenVPN"""

    name: str
    common_name: str
    cert_file: str
    key_file: str
    enabled: bool = True


class ALADDINOpenVPNServer:
    """ALADDIN OpenVPN —Å–µ—Ä–≤–µ—Ä —Å –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π"""

    def __init__(self, config: OpenVPNConfig):
        self.config = config
        self.state = OpenVPNState.STOPPED
        self.clients: Dict[str, OpenVPNClient] = {}
        self.config_dir = f"/etc/openvpn/{self.config.server_name}"
        self.logger = logging.getLogger(
            f"{__name__}.{self.config.server_name}"
        )

    async def start_server(self) -> bool:
        """–ó–∞–ø—É—Å–∫ OpenVPN —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            self.logger.info(
                f"üöÄ –ó–∞–ø—É—Å–∫ OpenVPN —Å–µ—Ä–≤–µ—Ä–∞ {self.config.server_name}"
            )
            self.state = OpenVPNState.STARTING

            # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            await self._create_config_directory()

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if not self.config.ca_cert:
                await self._generate_certificates()

            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞
            await self._create_server_config()

            # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
            result = await self._start_openvpn_process()
            if result:
                self.state = OpenVPNState.RUNNING
                self.logger.info(
                    f"‚úÖ OpenVPN —Å–µ—Ä–≤–µ—Ä {self.config.server_name} –∑–∞–ø—É—â–µ–Ω"
                )
                return True
            else:
                self.state = OpenVPNState.ERROR
                return False

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ OpenVPN —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            self.state = OpenVPNState.ERROR
            return False

    async def stop_server(self) -> bool:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ OpenVPN —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            self.logger.info(
                f"ÔøΩÔøΩ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ OpenVPN —Å–µ—Ä–≤–µ—Ä–∞ {self.config.server_name}"
            )
            self.state = OpenVPNState.STOPPING

            result = await self._stop_openvpn_process()
            if result:
                self.state = OpenVPNState.STOPPED
                self.logger.info(
                    f"‚úÖ OpenVPN —Å–µ—Ä–≤–µ—Ä {self.config.server_name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
                )
                return True
            else:
                self.state = OpenVPNState.ERROR
                return False

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ OpenVPN —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            self.state = OpenVPNState.ERROR
            return False

    async def add_client(self, client: OpenVPNClient) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            self.logger.info(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ {client.name}")
            self.clients[client.name] = client
            return True
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            return False

    async def remove_client(self, client_name: str) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            self.logger.info(f"‚ûñ –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ {client_name}")
            if client_name in self.clients:
                del self.clients[client_name]
                return True
            return False
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            return False

    async def get_server_status(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
        return {
            "server_name": self.config.server_name,
            "state": self.state.value,
            "port": self.config.port,
            "protocol": self.config.protocol.value,
            "network": self.config.network,
            "netmask": self.config.netmask,
            "cipher": self.config.cipher,
            "clients_count": len(self.clients),
        }

    async def _create_config_directory(self) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        os.makedirs(self.config_dir, exist_ok=True)
        self.logger.info(
            f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {self.config_dir}"
        )

    async def _generate_certificates(self) -> None:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ OpenVPN"""
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ CA
            ca_key = os.path.join(self.config_dir, "ca.key")
            ca_cert = os.path.join(self.config_dir, "ca.crt")

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è CA –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
            subprocess.run(
                ["openssl", "genrsa", "-out", ca_key, "4096"], check=True
            )

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è CA —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
            subprocess.run(
                [
                    "openssl",
                    "req",
                    "-new",
                    "-x509",
                    "-key",
                    ca_key,
                    "-out",
                    ca_cert,
                    "-days",
                    "3650",
                    "-subj",
                    "/C=RU/ST=Moscow/L=Moscow/O=ALADDIN/CN=ALADDIN-CA",
                ],
                check=True,
            )

            # –°–æ–∑–¥–∞–Ω–∏–µ DH –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            dh_param = os.path.join(self.config_dir, "dh.pem")
            subprocess.run(
                [
                    "openssl",
                    "dhparam",
                    "-out",
                    dh_param,
                    str(self.config.dh_bits),
                ],
                check=True,
            )

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ –∫–ª—é—á–∞
            server_key = os.path.join(self.config_dir, "server.key")
            subprocess.run(
                ["openssl", "genrsa", "-out", server_key, "4096"], check=True
            )

            # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ CSR
            server_csr = os.path.join(self.config_dir, "server.csr")
            subprocess.run(
                [
                    "openssl",
                    "req",
                    "-new",
                    "-key",
                    server_key,
                    "-out",
                    server_csr,
                    "-subj",
                    "/C=RU/ST=Moscow/L=Moscow/O=ALADDIN/CN=server",
                ],
                check=True,
            )

            # –ü–æ–¥–ø–∏—Å–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
            server_cert = os.path.join(self.config_dir, "server.crt")
            subprocess.run(
                [
                    "openssl",
                    "x509",
                    "-req",
                    "-in",
                    server_csr,
                    "-CA",
                    ca_cert,
                    "-CAkey",
                    ca_key,
                    "-out",
                    server_cert,
                    "-days",
                    "3650",
                ],
                check=True,
            )

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            self.config.ca_cert = ca_cert
            self.config.server_cert = server_cert
            self.config.server_key = server_key
            self.config.dh_param = dh_param

            self.logger.info("üîê –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã OpenVPN —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã")

        except subprocess.CalledProcessError as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤: {e}")
            raise

    async def _create_server_config(self) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞"""
        config_file = os.path.join(self.config_dir, "server.conf")

        config_content = f"""# ALADDIN OpenVPN Server Configuration
port {self.config.port}
proto {self.config.protocol.value}
dev tun

# Network settings
server {self.config.network} {self.config.netmask}
ifconfig-pool-persist ipp.txt

# Certificates
ca {self.config.ca_cert}
cert {self.config.server_cert}
key {self.config.server_key}
dh {self.config.dh_param}

# Security
cipher {self.config.cipher}
auth {self.config.auth}

# Routing
push "redirect-gateway def1 bypass-dhcp"
push "dhcp-option DNS 8.8.8.8"
push "dhcp-option DNS 8.8.4.4"

# Logging
log-append /var/log/openvpn/{self.config.server_name}.log
verb 3

# Client configuration
client-config-dir {self.config_dir}/ccd
status /var/log/openvpn/{self.config.server_name}-status.log

# Security enhancements
tls-auth {self.config_dir}/ta.key 0
tls-crypt {self.config_dir}/tls-crypt.key

# Performance
sndbuf 524288
rcvbuf 524288
"""

        # –°–æ–∑–¥–∞–Ω–∏–µ tls-auth –∫–ª—é—á–∞
        tls_auth_file = os.path.join(self.config_dir, "ta.key")
        subprocess.run(
            ["openvpn", "--genkey", "--secret", tls_auth_file], check=True
        )

        # –°–æ–∑–¥–∞–Ω–∏–µ tls-crypt –∫–ª—é—á–∞
        tls_crypt_file = os.path.join(self.config_dir, "tls-crypt.key")
        subprocess.run(
            ["openvpn", "--genkey", "--secret", tls_crypt_file], check=True
        )

        # –ó–∞–ø–∏—Å—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        with open(config_file, "w") as f:
            f.write(config_content)

        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
        ccd_dir = os.path.join(self.config_dir, "ccd")
        os.makedirs(ccd_dir, exist_ok=True)

        self.logger.info(f"üìù –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è OpenVPN —Å–æ–∑–¥–∞–Ω–∞: {config_file}")

    async def _start_openvpn_process(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ OpenVPN"""
        try:
            config_file = os.path.join(self.config_dir, "server.conf")

            # –ó–∞–ø—É—Å–∫ OpenVPN –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
            process = subprocess.Popen(
                ["openvpn", "--config", config_file, "--daemon"]
            )

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—Å–∫–∞
            await asyncio.sleep(2)
            if process.poll() is None:
                return True
            else:
                self.logger.error("‚ùå OpenVPN –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π")
                return False

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ OpenVPN –ø—Ä–æ—Ü–µ—Å—Å–∞: {e}")
            return False

    async def _stop_openvpn_process(self) -> bool:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ OpenVPN"""
        try:
            # –ü–æ–∏—Å–∫ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ OpenVPN
            subprocess.run(
                ["pkill", "-f", f"openvpn.*{self.config.server_name}"],
                capture_output=True,
            )

            return True
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ OpenVPN –ø—Ä–æ—Ü–µ—Å—Å–∞: {e}")
            return False


class OpenVPNManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä OpenVPN —Å–µ—Ä–≤–µ—Ä–æ–≤"""

    def __init__(self):
        self.servers: Dict[str, ALADDINOpenVPNServer] = {}
        self.logger = logging.getLogger(f"{__name__}.manager")

    async def create_server(
        self, name: str, config: OpenVPNConfig
    ) -> ALADDINOpenVPNServer:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞"""
        server = ALADDINOpenVPNServer(config)
        self.servers[name] = server
        self.logger.info(f"üì¶ –°–æ–∑–¥–∞–Ω OpenVPN —Å–µ—Ä–≤–µ—Ä: {name}")
        return server

    async def get_server(self, name: str) -> Optional[ALADDINOpenVPNServer]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ –∏–º–µ–Ω–∏"""
        return self.servers.get(name)

    async def remove_server(self, name: str) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞"""
        if name in self.servers:
            server = self.servers[name]
            await server.stop_server()
            del self.servers[name]
            self.logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω OpenVPN —Å–µ—Ä–≤–µ—Ä: {name}")
            return True
        return False

    async def get_all_servers_status(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤"""
        status = {}
        for name, server in self.servers.items():
            status[name] = await server.get_server_status()
        return status


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
openvpn_manager = OpenVPNManager()


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logging.basicConfig(level=logging.INFO)

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
    config = OpenVPNConfig(
        server_name="aladdin_test",
        port=1194,
        protocol=OpenVPNProtocol.UDP,
        network="10.8.0.0",
        netmask="255.255.255.0",
    )

    server = await openvpn_manager.create_server("test_server", config)

    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    await server.start_server()

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
    client = OpenVPNClient(
        name="test_client",
        common_name="test_client",
        cert_file="test.crt",
        key_file="test.key",
    )
    await server.add_client(client)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
    status = await server.get_server_status()
    print(f"üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞: {status}")

    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
    await server.stop_server()


if __name__ == "__main__":
    asyncio.run(main())
