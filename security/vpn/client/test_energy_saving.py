"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ VPN —ç–Ω–µ—Ä–≥–æ—Å–±–µ—Ä–µ–∂–µ–Ω–∏—è
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ —Ä–µ–∂–∏–º—ã –∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
"""

import asyncio
import time
from vpn_client import ALADDINVPNClient, VPNEnergyMode


async def test_energy_modes():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∂–∏–º–æ–≤"""
    print("=== –¢–ï–°–¢ VPN –≠–ù–ï–†–ì–û–°–ë–ï–†–ï–ñ–ï–ù–ò–Ø ===\n")
    
    client = ALADDINVPNClient()
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    print("1Ô∏è‚É£ –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:")
    print(f"   –†–µ–∂–∏–º: {client.energy_mode.value}")
    print(f"   –ë–∞—Ç–∞—Ä–µ—è: {client.battery_level}%")
    print(f"   –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ: {client.encryption_strength}")
    print()
    
    # 2. –¢–µ—Å—Ç: –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å ‚Üí FULL —Ä–µ–∂–∏–º
    print("2Ô∏è‚É£ –¢–µ—Å—Ç FULL —Ä–µ–∂–∏–º–∞ (–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å):")
    await client.on_user_activity()
    stats = client.get_energy_stats()
    print(f"   ‚úÖ –†–µ–∂–∏–º: {stats['current_mode']}")
    print(f"   ‚úÖ –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ: {stats['encryption']}")
    print()
    
    # 3. –¢–µ—Å—Ç: 6 –º–∏–Ω—É—Ç –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è ‚Üí NORMAL
    print("3Ô∏è‚É£ –¢–µ—Å—Ç NORMAL —Ä–µ–∂–∏–º–∞ (6 –º–∏–Ω –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è):")
    client.last_activity_time = time.time() - 400  # 6+ –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥
    target_mode = client._calculate_target_mode(100, 400, 'public')
    print(f"   –¶–µ–ª–µ–≤–æ–π —Ä–µ–∂–∏–º: {target_mode.value}")
    await client._switch_energy_mode(target_mode)
    print(f"   ‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞: {client.energy_mode.value}")
    print()
    
    # 4. –¢–µ—Å—Ç: 16 –º–∏–Ω—É—Ç –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è ‚Üí ECO
    print("4Ô∏è‚É£ –¢–µ—Å—Ç ECO —Ä–µ–∂–∏–º–∞ (16 –º–∏–Ω –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è):")
    client.last_activity_time = time.time() - 1000  # 16+ –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥
    target_mode = client._calculate_target_mode(100, 1000, 'public')
    await client._switch_energy_mode(target_mode)
    print(f"   ‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞: {client.energy_mode.value}")
    print()
    
    # 5. –¢–µ—Å—Ç: –ù–∏–∑–∫–∞—è –±–∞—Ç–∞—Ä–µ—è ‚Üí MINIMAL
    print("5Ô∏è‚É£ –¢–µ—Å—Ç MINIMAL —Ä–µ–∂–∏–º–∞ (–±–∞—Ç–∞—Ä–µ—è 15%):")
    client.battery_level = 15
    target_mode = client._calculate_target_mode(15, 0, 'public')
    await client._switch_energy_mode(target_mode)
    print(f"   ‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞: {client.energy_mode.value}")
    print()
    
    # 6. –¢–µ—Å—Ç: –ö—Ä–∏—Ç–∏—á–Ω–∞—è –±–∞—Ç–∞—Ä–µ—è ‚Üí SLEEP
    print("6Ô∏è‚É£ –¢–µ—Å—Ç SLEEP —Ä–µ–∂–∏–º–∞ (–±–∞—Ç–∞—Ä–µ—è 5%):")
    client.battery_level = 5
    target_mode = client._calculate_target_mode(5, 0, 'public')
    await client._switch_energy_mode(target_mode)
    print(f"   ‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞: {client.energy_mode.value}")
    print(f"   ‚úÖ VPN –æ—Ç–∫–ª—é—á–µ–Ω: {client.connection_suspended}")
    print()
    
    # 7. –¢–µ—Å—Ç: –ü—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ
    print("7Ô∏è‚É£ –¢–µ—Å—Ç –±—ã—Å—Ç—Ä–æ–≥–æ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è:")
    print("   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–µ—Ä–Ω—É–ª—Å—è...")
    start_time = time.time()
    await client.on_user_activity()
    wake_time = time.time() - start_time
    print(f"   ‚úÖ –ü—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ –∑–∞: {wake_time:.2f} —Å–µ–∫")
    print(f"   ‚úÖ –†–µ–∂–∏–º: {client.energy_mode.value}")
    print()
    
    # 8. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("8Ô∏è‚É£ –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    stats = client.get_energy_stats()
    for key, value in stats.items():
        print(f"   {key}: {value}")
    print()
    
    print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
    print()
    print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print("   - –í—Å–µ 5 —Ä–µ–∂–∏–º–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç")
    print("   - –ê–≤—Ç–æ–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏–∏ ‚úÖ")
    print("   - –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ –±–∞—Ç–∞—Ä–µ—é ‚úÖ")
    print("   - –ë—ã—Å—Ç—Ä–æ–µ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ ‚úÖ")
    print()


async def test_auto_monitor():
    """–¢–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    print("=== –¢–ï–°–¢ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê ===\n")
    
    client = ALADDINVPNClient()
    client.is_running = True
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    monitor_task = asyncio.create_task(client.monitor_energy())
    
    print("‚ö° –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω...")
    print("   –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥")
    print()
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ü–∏–∫–ª–æ–≤
    for i in range(3):
        await asyncio.sleep(2)  # –ñ–¥—ë–º 2 —Å–µ–∫—É–Ω–¥—ã –≤–º–µ—Å—Ç–æ 60 –¥–ª—è —Ç–µ—Å—Ç–∞
        stats = client.get_energy_stats()
        print(f"–¶–∏–∫–ª {i+1}: –†–µ–∂–∏–º={stats['current_mode']}, –ë–∞—Ç–∞—Ä–µ—è={stats['battery_level']}%")
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    client.is_running = False
    monitor_task.cancel()
    
    print()
    print("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    print()


async def test_energy_settings():
    """–¢–µ—Å—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ —ç–Ω–µ—Ä–≥–æ—Å–±–µ—Ä–µ–∂–µ–Ω–∏—è"""
    print("=== –¢–ï–°–¢ –ù–ê–°–¢–†–û–ï–ö ===\n")
    
    client = ALADDINVPNClient()
    
    print("1Ô∏è‚É£ –ù–∞—á–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
    for key, value in client.energy_settings.items():
        print(f"   {key}: {value}")
    print()
    
    print("2Ô∏è‚É£ –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
    new_settings = {
        'idle_timeout': 600,  # 10 –º–∏–Ω—É—Ç
        'battery_threshold': 15,  # 15%
        'auto_mode': False
    }
    client.update_energy_settings(new_settings)
    print("   ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
    print()
    
    print("3Ô∏è‚É£ –ù–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
    for key, value in client.energy_settings.items():
        print(f"   {key}: {value}")
    print()
    
    print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç!")
    print()


async def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    await test_energy_modes()
    await test_energy_settings()
    # await test_auto_monitor()  # –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ, —Ç.–∫. –¥–æ–ª–≥–æ


if __name__ == "__main__":
    asyncio.run(main())


