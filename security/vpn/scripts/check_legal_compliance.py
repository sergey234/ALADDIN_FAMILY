#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤–æ–≤–æ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ ALADDIN
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
"""

import os
import re
import sys
from pathlib import Path
from typing import List, Dict, Tuple

class LegalComplianceChecker:
    """–ü—Ä–æ–≤–µ—Ä—è–ª—å—â–∏–∫ –ø—Ä–∞–≤–æ–≤–æ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    
    def __init__(self):
        self.forbidden_terms = [
            "VPN —Å–µ—Ä–≤–∏—Å", "VPN-—Å–µ—Ä–≤–∏—Å", "VPN —Å–µ—Ä–≤–∏—Å",
            "–æ–±—Ö–æ–¥ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫", "–æ–±—Ö–æ–¥ —Ü–µ–Ω–∑—É—Ä—ã",
            "–∞–Ω–æ–Ω–∏–º–Ω—ã–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç", "–∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å –≤ —Å–µ—Ç–∏",
            "—Å–º–µ–Ω–∞ IP –∞–¥—Ä–µ—Å–∞", "–∏–∑–º–µ–Ω–µ–Ω–∏–µ IP",
            "–∏–∑–º–µ–Ω–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è", "—Å–º–µ–Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏",
            "–¥–æ—Å—Ç—É–ø –∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–∞–π—Ç–∞–º",
            "–ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç", "–ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å –≤ —Å–µ—Ç–∏",
            "—Å–∫—Ä—ã—Ç–∏–µ IP", "–º–∞—Å–∫–∏—Ä–æ–≤–∫–∞ IP",
            "–∞–Ω–æ–Ω–∏–º–Ω—ã–π –±—Ä–∞—É–∑–∏–Ω–≥",
            "–æ–±—Ö–æ–¥ DPI", "–æ–±—Ö–æ–¥ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"
        ]
        
        self.allowed_terms = [
            "—Å–∏—Å—Ç–µ–º–∞ —Å–µ–º–µ–π–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
            "–∑–∞—â–∏—Ç–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
            "–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –¥–ª—è —Å–µ–º—å–∏",
            "–∑–∞—â–∏—Ç–∞ –æ—Ç –∫–∏–±–µ—Ä—É–≥—Ä–æ–∑",
            "–∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –¥–ª—è —Å–µ–º—å–∏",
            "–∑–∞—â–∏—Ç–∞ –¥–µ—Ç–µ–π –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ",
            "–∫–æ–Ω—Ç—Ä–æ–ª—å –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É",
            "–±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É",
            "–∑–∞—â–∏—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–µ—Ç—è—Ö",
            "–ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å –∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å",
            "–∑–∞—â–∏—Ç–∞ –æ—Ç –≤–∏—Ä—É—Å–æ–≤ –∏ –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω–æ–≥–æ –ü–û",
            "–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ–ø–∞—Å–Ω—ã—Ö —Å–∞–π—Ç–æ–≤",
            "–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–µ—Ç–µ–π",
            "–∫–æ–Ω—Ç—Ä–æ–ª—å –≤—Ä–µ–º–µ–Ω–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤"
        ]
        
        self.documents_to_check = [
            "docs/legal/privacy_policy_vpn.md",
            "docs/legal/consent_form_vpn.md", 
            "docs/legal/technical_description_vpn.md",
            "docs/legal/152_fz_compliance_vpn.md",
            "docs/legal/marketing_guidelines.md"
        ]
    
    def check_document(self, file_path: str) -> Dict[str, any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–¥–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã
            forbidden_found = []
            for term in self.forbidden_terms:
                if re.search(term, content, re.IGNORECASE):
                    # –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è marketing_guidelines.md - —Ç–∞–º –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã —É–∫–∞–∑–∞–Ω—ã –∫–∞–∫ –ø—Ä–∏–º–µ—Ä—ã
                    if "marketing_guidelines" in file_path and "–ù–ï –ò–°–ü–û–õ–¨–ó–£–ï–ú" in content:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ—Ä–º–∏–Ω –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑–¥–µ–ª–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤
                        lines = content.split('\n')
                        in_forbidden_section = False
                        for line in lines:
                            if "–ù–ï –ò–°–ü–û–õ–¨–ó–£–ï–ú" in line:
                                in_forbidden_section = True
                            elif "–ò–°–ü–û–õ–¨–ó–£–ï–ú:" in line or "–í–ù–ò–ú–ê–ù–ò–ï:" in line:
                                in_forbidden_section = False
                            elif in_forbidden_section and term.lower() in line.lower():
                                # –¢–µ—Ä–º–∏–Ω –Ω–∞–π–¥–µ–Ω –≤ —Ä–∞–∑–¥–µ–ª–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
                                break
                        else:
                            # –¢–µ—Ä–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–∞–∑–¥–µ–ª–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö - —ç—Ç–æ –æ—à–∏–±–∫–∞
                            forbidden_found.append(term)
                    else:
                        forbidden_found.append(term)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã
            allowed_found = []
            for term in self.allowed_terms:
                if re.search(term, content, re.IGNORECASE):
                    allowed_found.append(term)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            if forbidden_found:
                status = "NON_COMPLIANT"
            elif not allowed_found:
                status = "RISK"
            else:
                status = "COMPLIANT"
            
            return {
                "file": file_path,
                "status": status,
                "forbidden_found": forbidden_found,
                "allowed_found": allowed_found,
                "total_forbidden": len(forbidden_found),
                "total_allowed": len(allowed_found)
            }
            
        except Exception as e:
            return {
                "file": file_path,
                "status": "ERROR",
                "error": str(e),
                "forbidden_found": [],
                "allowed_found": [],
                "total_forbidden": 0,
                "total_allowed": 0
            }
    
    def check_all_documents(self) -> Dict[str, any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        results = []
        
        for doc_path in self.documents_to_check:
            if os.path.exists(doc_path):
                result = self.check_document(doc_path)
                results.append(result)
            else:
                results.append({
                    "file": doc_path,
                    "status": "NOT_FOUND",
                    "error": "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    "forbidden_found": [],
                    "allowed_found": [],
                    "total_forbidden": 0,
                    "total_allowed": 0
                })
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_docs = len(results)
        compliant_docs = len([r for r in results if r["status"] == "COMPLIANT"])
        risk_docs = len([r for r in results if r["status"] == "RISK"])
        non_compliant_docs = len([r for r in results if r["status"] == "NON_COMPLIANT"])
        error_docs = len([r for r in results if r["status"] in ["ERROR", "NOT_FOUND"]])
        
        compliance_percentage = (compliant_docs / total_docs) * 100 if total_docs > 0 else 0
        
        return {
            "total_documents": total_docs,
            "compliant_documents": compliant_docs,
            "risk_documents": risk_docs,
            "non_compliant_documents": non_compliant_docs,
            "error_documents": error_docs,
            "compliance_percentage": compliance_percentage,
            "is_compliant": compliance_percentage >= 100,
            "results": results
        }
    
    def generate_report(self, results: Dict[str, any]) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ"""
        report = []
        report.append("=" * 80)
        report.append("–û–¢–ß–ï–¢ –û –ü–†–û–í–ï–†–ö–ï –ü–†–ê–í–û–í–û–ì–û –°–û–û–¢–í–ï–¢–°–¢–í–ò–Ø –î–û–ö–£–ú–ï–ù–¢–û–í ALADDIN")
        report.append("=" * 80)
        report.append("")
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        report.append(f"üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        report.append(f"   –í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {results['total_documents']}")
        report.append(f"   –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç: {results['compliant_documents']}")
        report.append(f"   –†–∏—Å–∫: {results['risk_documents']}")
        report.append(f"   –ù–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç: {results['non_compliant_documents']}")
        report.append(f"   –û—à–∏–±–∫–∏: {results['error_documents']}")
        report.append(f"   –ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è: {results['compliance_percentage']:.1f}%")
        report.append("")
        
        # –°—Ç–∞—Ç—É—Å
        if results['is_compliant']:
            report.append("‚úÖ –°–¢–ê–¢–£–°: –í–°–ï –î–û–ö–£–ú–ï–ù–¢–´ –°–û–û–¢–í–ï–¢–°–¢–í–£–Æ–¢ –ü–†–ê–í–û–í–´–ú –¢–†–ï–ë–û–í–ê–ù–ò–Ø–ú")
        else:
            report.append("‚ùå –°–¢–ê–¢–£–°: –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–†–ê–ë–û–¢–ö–ê –î–û–ö–£–ú–ï–ù–¢–û–í")
        report.append("")
        
        # –î–µ—Ç–∞–ª–∏ –ø–æ –∫–∞–∂–¥–æ–º—É –¥–æ–∫—É–º–µ–Ω—Ç—É
        report.append("üìã –î–ï–¢–ê–õ–ò –ü–û –î–û–ö–£–ú–ï–ù–¢–ê–ú:")
        report.append("")
        
        for result in results['results']:
            status_icon = "‚úÖ" if result['status'] == 'COMPLIANT' else "‚ö†Ô∏è" if result['status'] == 'RISK' else "‚ùå"
            report.append(f"{status_icon} {result['file']}")
            
            if result['status'] == 'COMPLIANT':
                report.append(f"   –°—Ç–∞—Ç—É—Å: –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç")
                report.append(f"   –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤: {result['total_allowed']}")
            elif result['status'] == 'RISK':
                report.append(f"   –°—Ç–∞—Ç—É—Å: –†–∏—Å–∫ (–º–∞–ª–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤)")
                report.append(f"   –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤: {result['total_allowed']}")
            elif result['status'] == 'NON_COMPLIANT':
                report.append(f"   –°—Ç–∞—Ç—É—Å: –ù–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç")
                report.append(f"   –ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤: {result['total_forbidden']}")
                if result['forbidden_found']:
                    report.append(f"   –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã:")
                    for term in result['forbidden_found']:
                        report.append(f"     - {term}")
            elif result['status'] in ['ERROR', 'NOT_FOUND']:
                report.append(f"   –°—Ç–∞—Ç—É—Å: –û—à–∏–±–∫–∞")
                report.append(f"   –û—à–∏–±–∫–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            
            report.append("")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        report.append("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        if results['non_compliant_documents'] > 0:
            report.append("   ‚Ä¢ –£–¥–∞–ª–∏—Ç–µ –≤—Å–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
            report.append("   ‚Ä¢ –ó–∞–º–µ–Ω–∏—Ç–µ –∏—Ö –Ω–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
        if results['risk_documents'] > 0:
            report.append("   ‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ —Ç–µ—Ä–º–∏–Ω–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é")
            report.append("   ‚Ä¢ –£—Å–∏–ª—å—Ç–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∫ —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
        if results['error_documents'] > 0:
            report.append("   ‚Ä¢ –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö")
            report.append("   ‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
        
        if results['is_compliant']:
            report.append("   ‚Ä¢ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å–æ–±–ª—é–¥–∞—Ç—å –ø—Ä–∞–≤–æ–≤—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è")
            report.append("   ‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        
        return "\n".join(report)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç –ó–ê–ü–£–°–ö –ü–†–û–í–ï–†–ö–ò –ü–†–ê–í–û–í–û–ì–û –°–û–û–¢–í–ï–¢–°–¢–í–ò–Ø –î–û–ö–£–ú–ï–ù–¢–û–í")
    print("=" * 60)
    
    checker = LegalComplianceChecker()
    results = checker.check_all_documents()
    report = checker.generate_report(results)
    
    print(report)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª
    with open("legal_compliance_report.txt", "w", encoding="utf-8") as f:
        f.write(report)
    
    print(f"\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: legal_compliance_report.txt")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
    return 0 if results['is_compliant'] else 1

if __name__ == "__main__":
    sys.exit(main())