#!/usr/bin/env python3
"""
ALADDIN VPN - Quality Check Script
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞

–ê–≤—Ç–æ—Ä: ALADDIN Security Team
–í–µ—Ä—Å–∏—è: 1.0.0
–î–∞—Ç–∞: 01.10.2025
"""

import subprocess
import sys
import os
import json
from datetime import datetime
from typing import Dict, List, Any, Tuple
from pathlib import Path

class QualityChecker:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞"""
    
    def __init__(self, project_root: str = None):
        self.project_root = Path(project_root or os.getcwd())
        self.results = {
            "timestamp": datetime.utcnow().isoformat(),
            "checks": {},
            "overall_score": 0,
            "status": "unknown"
        }
    
    def run_command(self, command: List[str], cwd: str = None) -> Tuple[bool, str, str]:
        """–ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
        try:
            result = subprocess.run(
                command,
                cwd=cwd or self.project_root,
                capture_output=True,
                text=True,
                timeout=300
            )
            return result.returncode == 0, result.stdout, result.stderr
        except subprocess.TimeoutExpired:
            return False, "", "Command timed out"
        except Exception as e:
            return False, "", str(e)
    
    def check_black_formatting(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Black"""
        print("üé® –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Black...")
        
        success, stdout, stderr = self.run_command([
            "python", "-m", "black", "--check", "--diff", "."
        ])
        
        return {
            "tool": "black",
            "success": success,
            "output": stdout,
            "error": stderr,
            "score": 100 if success else 0
        }
    
    def check_isort_imports(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏–º–ø–æ—Ä—Ç–æ–≤ isort"""
        print("üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏–º–ø–æ—Ä—Ç–æ–≤ isort...")
        
        success, stdout, stderr = self.run_command([
            "python", "-m", "isort", "--check-only", "--diff", "."
        ])
        
        return {
            "tool": "isort",
            "success": success,
            "output": stdout,
            "error": stderr,
            "score": 100 if success else 0
        }
    
    def check_flake8_linting(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–Ω—Ç–∏–Ω–≥–∞ Flake8"""
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–Ω—Ç–∏–Ω–≥–∞ Flake8...")
        
        success, stdout, stderr = self.run_command([
            "python", "-m", "flake8", "."
        ])
        
        # –ü–æ–¥—Å—á–µ—Ç –æ—à–∏–±–æ–∫
        error_count = len([line for line in stdout.split('\n') if line.strip()])
        
        # –û—Ü–µ–Ω–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—à–∏–±–æ–∫
        if error_count == 0:
            score = 100
        elif error_count <= 10:
            score = 90
        elif error_count <= 25:
            score = 75
        elif error_count <= 50:
            score = 50
        else:
            score = 25
        
        return {
            "tool": "flake8",
            "success": success,
            "output": stdout,
            "error": stderr,
            "error_count": error_count,
            "score": score
        }
    
    def check_pylint_analysis(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ Pylint"""
        print("üî¨ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ Pylint...")
        
        success, stdout, stderr = self.run_command([
            "python", "-m", "pylint", "--score=y", "."
        ])
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –∏–∑ –≤—ã–≤–æ–¥–∞
        score = 0
        if "Your code has been rated at" in stdout:
            try:
                score_line = [line for line in stdout.split('\n') if "Your code has been rated at" in line][0]
                score = float(score_line.split("at ")[1].split("/")[0])
            except (IndexError, ValueError):
                pass
        
        return {
            "tool": "pylint",
            "success": success,
            "output": stdout,
            "error": stderr,
            "score": score
        }
    
    def check_mypy_typing(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∏–∑–∞—Ü–∏–∏ MyPy"""
        print("üî§ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∏–∑–∞—Ü–∏–∏ MyPy...")
        
        success, stdout, stderr = self.run_command([
            "python", "-m", "mypy", "--ignore-missing-imports", "."
        ])
        
        # –ü–æ–¥—Å—á–µ—Ç –æ—à–∏–±–æ–∫ —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
        error_count = len([line for line in stdout.split('\n') if "error:" in line])
        
        # –û—Ü–µ–Ω–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—à–∏–±–æ–∫
        if error_count == 0:
            score = 100
        elif error_count <= 5:
            score = 90
        elif error_count <= 15:
            score = 75
        elif error_count <= 30:
            score = 50
        else:
            score = 25
        
        return {
            "tool": "mypy",
            "success": success,
            "output": stdout,
            "error": stderr,
            "error_count": error_count,
            "score": score
        }
    
    def check_security_issues(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–±–ª–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        print("üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–±–ª–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        dangerous_patterns = [
            "eval(",
            "exec(",
            "__import__",
            "pickle.loads",
            "subprocess.call",
            "os.system",
            "shell=True"
        ]
        
        issues = []
        for root, dirs, files in os.walk(self.project_root):
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            dirs[:] = [d for d in dirs if not d.startswith('.') and d not in ['__pycache__', 'node_modules']]
            
            for file in files:
                if file.endswith('.py'):
                    file_path = os.path.join(root, file)
                    try:
                        with open(file_path, 'r', encoding='utf-8') as f:
                            content = f.read()
                            for pattern in dangerous_patterns:
                                if pattern in content:
                                    issues.append(f"{file_path}: {pattern}")
                    except Exception:
                        continue
        
        score = max(0, 100 - len(issues) * 10)
        
        return {
            "tool": "security",
            "success": len(issues) == 0,
            "issues": issues,
            "issue_count": len(issues),
            "score": score
        }
    
    def check_test_coverage(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∫—Ä—ã—Ç–∏—è —Ç–µ—Å—Ç–∞–º–∏"""
        print("üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∫—Ä—ã—Ç–∏—è —Ç–µ—Å—Ç–∞–º–∏...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º
        success, stdout, stderr = self.run_command([
            "python", "-m", "pytest", "--cov=.", "--cov-report=term-missing", "tests/"
        ])
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–∫—Ä—ã—Ç–∏—è
        coverage_percent = 0
        if "TOTAL" in stdout:
            try:
                total_line = [line for line in stdout.split('\n') if "TOTAL" in line][0]
                coverage_percent = float(total_line.split()[-1].replace('%', ''))
            except (IndexError, ValueError):
                pass
        
        return {
            "tool": "coverage",
            "success": success,
            "output": stdout,
            "error": stderr,
            "coverage_percent": coverage_percent,
            "score": coverage_percent
        }
    
    def run_all_checks(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞ ALADDIN VPN...")
        print("=" * 60)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        checks = [
            self.check_black_formatting(),
            self.check_isort_imports(),
            self.check_flake8_linting(),
            self.check_pylint_analysis(),
            self.check_mypy_typing(),
            self.check_security_issues(),
            self.check_test_coverage()
        ]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for check in checks:
            self.results["checks"][check["tool"]] = check
        
        # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é –æ—Ü–µ–Ω–∫—É
        scores = [check["score"] for check in checks]
        self.results["overall_score"] = sum(scores) / len(scores)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        if self.results["overall_score"] >= 90:
            self.results["status"] = "excellent"
        elif self.results["overall_score"] >= 80:
            self.results["status"] = "good"
        elif self.results["overall_score"] >= 70:
            self.results["status"] = "fair"
        elif self.results["overall_score"] >= 60:
            self.results["status"] = "poor"
        else:
            self.results["status"] = "critical"
        
        return self.results
    
    def print_results(self):
        """–í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        print("\n" + "=" * 60)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò –ö–ê–ß–ï–°–¢–í–ê –ö–û–î–ê")
        print("=" * 60)
        
        # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
        overall_score = self.results["overall_score"]
        status = self.results["status"]
        
        status_emoji = {
            "excellent": "üü¢",
            "good": "üü°", 
            "fair": "üü†",
            "poor": "üî¥",
            "critical": "üíÄ"
        }.get(status, "‚ùì")
        
        print(f"\nüéØ –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: {status_emoji} {overall_score:.1f}/100 ({status.upper()})")
        
        # –î–µ—Ç–∞–ª–∏ –ø–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º
        print(f"\nüìã –î–µ—Ç–∞–ª–∏ –ø–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º:")
        for tool, check in self.results["checks"].items():
            score = check["score"]
            success = check["success"]
            
            emoji = "‚úÖ" if success else "‚ùå"
            print(f"   {tool.upper()}: {emoji} {score:.1f}/100")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –¥–ª—è –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
            if not success and "error_count" in check:
                print(f"     –û—à–∏–±–æ–∫: {check['error_count']}")
            elif not success and "issue_count" in check:
                print(f"     –ü—Ä–æ–±–ª–µ–º: {check['issue_count']}")
            elif not success and "coverage_percent" in check:
                print(f"     –ü–æ–∫—Ä—ã—Ç–∏–µ: {check['coverage_percent']:.1f}%")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        for tool, check in self.results["checks"].items():
            if check["score"] < 80:
                if tool == "black":
                    print("   ‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç–µ 'black .' –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞")
                elif tool == "isort":
                    print("   ‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç–µ 'isort .' –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏–º–ø–æ—Ä—Ç–æ–≤")
                elif tool == "flake8":
                    print("   ‚Ä¢ –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –ª–∏–Ω—Ç–∏–Ω–≥–∞, –ø–æ–∫–∞–∑–∞–Ω–Ω—ã–µ –≤—ã—à–µ")
                elif tool == "pylint":
                    print("   ‚Ä¢ –£–ª—É—á—à–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞ —Å–æ–≥–ª–∞—Å–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º Pylint")
                elif tool == "mypy":
                    print("   ‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ —Ç–∏–ø–∏–∑–∞—Ü–∏—é –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞")
                elif tool == "security":
                    print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
                elif tool == "coverage":
                    print("   ‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ —Ç–µ—Å—Ç—ã –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ø–æ–∫—Ä—ã—Ç–∏—è")
    
    def save_results(self, filename: str = None):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ñ–∞–π–ª"""
        if filename is None:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"quality_check_{timestamp}.json"
        
        filepath = self.project_root / filename
        
        with open(filepath, 'w', encoding='utf-8') as f:
            json.dump(self.results, f, indent=2, ensure_ascii=False)
        
        print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {filepath}")
        return filepath

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse
    
    parser = argparse.ArgumentParser(description="ALADDIN VPN Quality Check")
    parser.add_argument("--project-root", help="–ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞")
    parser.add_argument("--save", action="store_true", help="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª")
    parser.add_argument("--check", choices=["all", "format", "lint", "type", "security", "coverage"], 
                       default="all", help="–¢–∏–ø –ø—Ä–æ–≤–µ—Ä–∫–∏")
    
    args = parser.parse_args()
    
    # –°–æ–∑–¥–∞–µ–º checker
    checker = QualityChecker(args.project_root)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏
    if args.check == "all":
        results = checker.run_all_checks()
    else:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
        if args.check == "format":
            results = {"checks": {"black": checker.check_black_formatting(), "isort": checker.check_isort_imports()}}
        elif args.check == "lint":
            results = {"checks": {"flake8": checker.check_flake8_linting(), "pylint": checker.check_pylint_analysis()}}
        elif args.check == "type":
            results = {"checks": {"mypy": checker.check_mypy_typing()}}
        elif args.check == "security":
            results = {"checks": {"security": checker.check_security_issues()}}
        elif args.check == "coverage":
            results = {"checks": {"coverage": checker.check_test_coverage()}}
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    checker.print_results()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if args.save:
        checker.save_results()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
    overall_score = results.get("overall_score", 0)
    if overall_score >= 80:
        sys.exit(0)
    else:
        sys.exit(1)

if __name__ == "__main__":
    main()