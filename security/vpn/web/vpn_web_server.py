"""
Flask —Å–µ—Ä–≤–µ—Ä –¥–ª—è VPN –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ ALADDIN
–ú–∞–≥–∏—á–µ—Å–∫–∏–π –¥–∞—à–±–æ—Ä–¥ —Å –≥–ª—É–±–æ–∫–∏–º —Å–∏–Ω–∏–º –∏ –∑–æ–ª–æ—Ç—ã–º–∏ –±–ª–µ—Å—Ç–∫–∞–º–∏
"""

import json
import os
import sys
import time
from datetime import datetime

import asyncio
from flask import Flask, jsonify, render_template, request

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ VPN –º–æ–¥—É–ª—è–º

from integration.aladdin_vpn_integration import ALADDINVPNIntegration
from ui.vpn_interface import ALADDINVPNInterface

app = Flask(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è VPN –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
vpn_interface = ALADDINVPNInterface()
vpn_integration = ALADDINVPNIntegration()

# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å ALADDIN
vpn_integration.integrate_with_aladdin()


@app.route("/")
def dashboard():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–∞—à–±–æ—Ä–¥–∞"""
    return render_template("vpn_dashboard.html")


@app.route("/api/status")
def get_status():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ VPN"""
    try:
        status = vpn_interface.get_status()
        return jsonify({"success": True, "data": status})
    except Exception as e:
        return jsonify({"success": False, "error": str(e)}), 500


@app.route("/api/servers")
def get_servers():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤"""
    try:
        servers = vpn_interface.get_servers()
        return jsonify({"success": True, "data": servers})
    except Exception as e:
        return jsonify({"success": False, "error": str(e)}), 500


@app.route("/api/connect", methods=["POST"])
def connect_vpn():
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ VPN"""
    try:
        data = request.get_json()
        server_id = data.get("server_id")

        if server_id:
            # –í—ã–±–∏—Ä–∞–µ–º —Å–µ—Ä–≤–µ—Ä
            if not vpn_interface.select_server(server_id):
                return (
                    jsonify(
                        {"success": False, "error": "–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞"}
                    ),
                    400,
                )

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        success = loop.run_until_complete(vpn_interface.connect())
        loop.close()

        if success:
            return jsonify(
                {"success": True, "message": "VPN –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ"}
            )
        else:
            return (
                jsonify(
                    {"success": False, "error": "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ VPN"}
                ),
                500,
            )

    except Exception as e:
        return jsonify({"success": False, "error": str(e)}), 500


@app.route("/api/disconnect", methods=["POST"])
def disconnect_vpn():
    """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç VPN"""
    try:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        success = loop.run_until_complete(vpn_interface.disconnect())
        loop.close()

        if success:
            return jsonify(
                {"success": True, "message": "VPN –æ—Ç–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ"}
            )
        else:
            return (
                jsonify(
                    {"success": False, "error": "–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –æ—Ç VPN"}
                ),
                500,
            )

    except Exception as e:
        return jsonify({"success": False, "error": str(e)}), 500


@app.route("/api/family-stats")
def get_family_stats():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ–º—å–∏"""
    try:
        stats = vpn_integration.get_family_vpn_stats()
        return jsonify({"success": True, "data": stats})
    except Exception as e:
        return jsonify({"success": False, "error": str(e)}), 500


@app.route("/api/quick-connect", methods=["POST"])
def quick_connect():
    """–ë—ã—Å—Ç—Ä–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ª—É—á—à–µ–º—É —Å–µ—Ä–≤–µ—Ä—É"""
    try:
        # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π —Å–µ—Ä–≤–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        best_server = vpn_interface._select_best_server()
        if not best_server:
            return (
                jsonify({"success": False, "error": "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤"}),
                400,
            )

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        success = loop.run_until_complete(vpn_interface.connect())
        loop.close()

        if success:
            return jsonify(
                {
                    "success": True,
                    "message": f"–ü–æ–¥–∫–ª—é—á–µ–Ω –∫ {best_server.name}",
                    "server": {
                        "id": best_server.id,
                        "name": best_server.name,
                        "country": best_server.country,
                        "flag": best_server.flag,
                        "ping": best_server.ping,
                    },
                }
            )
        else:
            return (
                jsonify(
                    {"success": False, "error": "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ VPN"}
                ),
                500,
            )

    except Exception as e:
        return jsonify({"success": False, "error": str(e)}), 500


@app.route("/api/settings", methods=["GET", "POST"])
def vpn_settings():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ VPN"""
    if request.method == "GET":
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            settings = {
                "auto_connect": True,
                "preferred_protocol": "wireguard",
                "family_mode": True,
                "child_safe_mode": True,
                "content_filtering": True,
            }
            return jsonify({"success": True, "data": settings})
        except Exception as e:
            return jsonify({"success": False, "error": str(e)}), 500

    elif request.method == "POST":
        try:
            data = request.get_json()
            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ–º—å–∏
            if "family_settings" in data:
                vpn_integration.update_family_settings(data["family_settings"])

            return jsonify({"success": True, "message": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã"})
        except Exception as e:
            return jsonify({"success": False, "error": str(e)}), 500


@app.route("/api/check-permission", methods=["POST"])
def check_permission():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ VPN –¥–ª—è —á–ª–µ–Ω–∞ —Å–µ–º—å–∏"""
    try:
        data = request.get_json()
        member_type = data.get("member_type", "parent")

        permission = vpn_integration.check_vpn_permission(member_type)
        recommendations = vpn_integration.get_vpn_recommendations(member_type)

        return jsonify(
            {
                "success": True,
                "data": {
                    "permission": permission,
                    "recommendations": recommendations,
                },
            }
        )
    except Exception as e:
        return jsonify({"success": False, "error": str(e)}), 500


@app.route("/api/content-filter", methods=["POST"])
def check_content_filter():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ URL —á–µ—Ä–µ–∑ —Ñ–∏–ª—å—Ç—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    try:
        data = request.get_json()
        url = data.get("url", "")

        allowed = vpn_integration.check_content_filter(url)

        return jsonify(
            {"success": True, "data": {"url": url, "allowed": allowed}}
        )
    except Exception as e:
        return jsonify({"success": False, "error": str(e)}), 500


if __name__ == "__main__":
    print("üîÆ –ó–∞–ø—É—Å–∫ –º–∞–≥–∏—á–µ—Å–∫–æ–≥–æ VPN –¥–∞—à–±–æ—Ä–¥–∞ ALADDIN...")
    print("üåê –û—Ç–∫—Ä–æ–π—Ç–µ: http://localhost:5001")
    print("‚ú® –¶–≤–µ—Ç–∞: –ì–ª—É–±–æ–∫–∏–π —Å–∏–Ω–∏–π + –∑–æ–ª–æ—Ç—ã–µ –±–ª–µ—Å—Ç–∫–∏")

    app.run(host="0.0.0.0", port=5001, debug=True, threaded=True)
