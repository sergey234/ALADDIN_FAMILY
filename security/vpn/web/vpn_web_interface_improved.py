#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
VPN Web Interface - –£–ª—É—á—à–µ–Ω–Ω—ã–π –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é
"""

import json
import logging
import os
import secrets
import sys
import time
from datetime import datetime
from typing import Any, Dict, List, Optional

import asyncio
from flask import Flask, jsonify, redirect, render_template, request, url_for
from flask_cors import CORS
from flask_limiter import Limiter
from flask_limiter.util import get_remote_address

from security.vpn.vpn_security_system import (
    VPNSecurityLevel,
    VPNSecuritySystem,
)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ –ø—Ä–æ–µ–∫—Ç—É
    os.path.dirname(
        os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
    )
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–Ω–∏–µ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = Flask(__name__)

# –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è SECRET_KEY –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ
app.secret_key = os.getenv("SECRET_KEY", secrets.token_hex(32))

# –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨: –û—Ç–∫–ª—é—á–µ–Ω–∏–µ DEBUG –≤ production
app.config["DEBUG"] = os.getenv("DEBUG", "False").lower() == "true"
app.config["ENV"] = os.getenv("FLASK_ENV", "production")

# –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨: Rate Limiting
limiter = Limiter(
    app=app,
    key_func=get_remote_address,
    default_limits=["100 per hour", "20 per minute"],
    storage_uri="memory://",  # –í production –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Redis
)

# –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨: CORS —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
CORS(
    app,
    resources={
        r"/api/*": {
            "origins": ["http://localhost:*", "https://localhost:*"],
            "methods": ["GET", "POST"],
            "allow_headers": ["Content-Type"],
        }
    },
)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è VPN —Å–∏—Å—Ç–µ–º—ã
vpn_system = None
active_connections = {}


def init_vpn_system():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è VPN —Å–∏—Å—Ç–µ–º—ã"""
    global vpn_system
    try:
        vpn_system = VPNSecuritySystem("WebVPNInterface")
        logger.info("VPN —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ VPN —Å–∏—Å—Ç–µ–º—ã: {e}")
        return False


@app.route("/")
@limiter.limit("30 per minute")
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º UI"""
    return """
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>ALADDIN VPN - –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞</title>
        <style>
            * {
                margin: 0;
                padding: 0;
                box-sizing: border-box;
            }

            body {
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                min-height: 100vh;
                padding: 20px;
            }

            .container {
                max-width: 1200px;
                margin: 0 auto;
            }

            .header {
                text-align: center;
                margin-bottom: 40px;
            }

            .header h1 {
                font-size: 3em;
                margin-bottom: 10px;
                text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
            }

            .header p {
                font-size: 1.2em;
                opacity: 0.9;
            }

            .main-card {
                background: rgba(255, 255, 255, 0.1);
                backdrop-filter: blur(10px);
                border-radius: 20px;
                padding: 40px;
                box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);
                margin-bottom: 30px;
            }

            .status-indicator {
                display: flex;
                align-items: center;
                justify-content: center;
                padding: 30px;
                background: rgba(255, 255, 255, 0.05);
                border-radius: 15px;
                margin-bottom: 30px;
            }

            .status-circle {
                width: 80px;
                height: 80px;
                border-radius: 50%;
                background: #f44336;
                display: flex;
                align-items: center;
                justify-content: center;
                font-size: 2em;
                box-shadow: 0 0 20px rgba(244, 67, 54, 0.5);
                animation: pulse 2s infinite;
            }

            .status-circle.connected {
                background: #4CAF50;
                box-shadow: 0 0 20px rgba(76, 175, 80, 0.5);
            }

            @keyframes pulse {
                0%, 100% { transform: scale(1); }
                50% { transform: scale(1.05); }
            }

            .status-text {
                margin-left: 30px;
            }

            .status-text h2 {
                font-size: 2em;
                margin-bottom: 10px;
            }

            .button-group {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                gap: 20px;
                margin-top: 30px;
            }

            .btn {
                padding: 20px 30px;
                border: none;
                border-radius: 10px;
                font-size: 1.1em;
                font-weight: bold;
                cursor: pointer;
                transition: all 0.3s;
                box-shadow: 0 4px 15px rgba(0,0,0,0.2);
            }

            .btn:hover {
                transform: translateY(-2px);
                box-shadow: 0 6px 20px rgba(0,0,0,0.3);
            }

            .btn-primary {
                background: #4CAF50;
                color: white;
            }

            .btn-danger {
                background: #f44336;
                color: white;
            }

            .btn-secondary {
                background: rgba(255, 255, 255, 0.2);
                color: white;
            }

            .country-selector {
                background: rgba(255, 255, 255, 0.05);
                padding: 30px;
                border-radius: 15px;
                margin: 30px 0;
            }

            .country-grid {
                display: grid;
                grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
                gap: 15px;
                margin-top: 20px;
            }

            .country-card {
                background: rgba(255, 255, 255, 0.1);
                padding: 20px;
                border-radius: 10px;
                text-align: center;
                cursor: pointer;
                transition: all 0.3s;
            }

            .country-card:hover {
                background: rgba(255, 255, 255, 0.2);
                transform: scale(1.05);
            }

            .country-flag {
                font-size: 3em;
                margin-bottom: 10px;
            }

            .stats-grid {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
                gap: 20px;
                margin-top: 30px;
            }

            .stat-card {
                background: rgba(255, 255, 255, 0.1);
                padding: 25px;
                border-radius: 15px;
                text-align: center;
            }

            .stat-value {
                font-size: 2.5em;
                font-weight: bold;
                margin: 10px 0;
            }

            .stat-label {
                opacity: 0.8;
                font-size: 0.9em;
            }

            .loading {
                display: none;
                text-align: center;
                padding: 20px;
            }

            .spinner {
                border: 4px solid rgba(255,255,255,0.3);
                border-top: 4px solid white;
                border-radius: 50%;
                width: 50px;
                height: 50px;
                animation: spin 1s linear infinite;
                margin: 0 auto;
            }

            @keyframes spin {
                0% { transform: rotate(0deg); }
                100% { transform: rotate(360deg); }
            }

            .notification {
                position: fixed;
                top: 20px;
                right: 20px;
                padding: 20px 30px;
                background: rgba(76, 175, 80, 0.9);
                border-radius: 10px;
                box-shadow: 0 4px 15px rgba(0,0,0,0.3);
                display: none;
                animation: slideIn 0.3s;
            }

            @keyframes slideIn {
                from { transform: translateX(100%); }
                to { transform: translateX(0); }
            }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>üîí ALADDIN VPN</h1>
                <p>–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ –≤–∞—à–µ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏</p>
            </div>

            <div class="main-card">
                <div class="status-indicator">
                    <div class="status-circle" id="statusCircle">
                        üî¥
                    </div>
                    <div class="status-text">
                        <h2 id="statusTitle">–û—Ç–∫–ª—é—á–µ–Ω–æ</h2>
                        <p id="statusDescription">–ù–∞–∂–º–∏—Ç–µ "–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è" –¥–ª—è –∑–∞—â–∏—Ç—ã</p>
                    </div>
                </div>

                <div class="button-group">
                    <button class="btn btn-primary" onclick="quickConnect()">
                        üöÄ –ë—ã—Å—Ç—Ä–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                    </button>
                    <button class="btn btn-danger" onclick="disconnect()" style="display:none;" id="disconnectBtn">
                        üõë –û—Ç–∫–ª—é—á–∏—Ç—å—Å—è
                    </button>
                    <button class="btn btn-secondary" onclick="showCountries()">
                        üåç –í—ã–±—Ä–∞—Ç—å —Å—Ç—Ä–∞–Ω—É
                    </button>
                    <button class="btn btn-secondary" onclick="showSettings()">
                        ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏
                    </button>
                </div>
            </div>

            <div class="country-selector" id="countrySelector" style="display:none;">
                <h2>üåç –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É</h2>
                <div class="country-grid" id="countryGrid">
                    <!-- –ó–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
                </div>
            </div>

            <div class="main-card">
                <h2>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h2>
                <div class="stats-grid">
                    <div class="stat-card">
                        <div class="stat-value" id="totalConnections">0</div>
                        <div class="stat-label">–í—Å–µ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value" id="successRate">0%</div>
                        <div class="stat-label">–£—Å–ø–µ—à–Ω–æ—Å—Ç—å</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value" id="currentSpeed">0 –ú–±/—Å</div>
                        <div class="stat-label">–¢–µ–∫—É—â–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value" id="dataUsed">0 –ì–ë</div>
                        <div class="stat-label">–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –¥–∞–Ω–Ω—ã—Ö</div>
                    </div>
                </div>
            </div>

            <div class="loading" id="loading">
                <div class="spinner"></div>
                <p style="margin-top: 20px;">–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...</p>
            </div>
        </div>

        <div class="notification" id="notification">
            <span id="notificationText"></span>
        </div>

        <script>
            let isConnected = false;

            function showNotification(message, isSuccess = true) {
                const notification = document.getElementById('notification');
                notification.style.background = isSuccess ?
                    'rgba(76, 175, 80, 0.9)' : 'rgba(244, 67, 54, 0.9)';
                document.getElementById('notificationText').textContent = message;
                notification.style.display = 'block';
                setTimeout(() => {
                    notification.style.display = 'none';
                }, 3000);
            }

            async function quickConnect() {
                const loading = document.getElementById('loading');
                loading.style.display = 'block';

                try {
                    const response = await fetch('/api/test_singapore');
                    const data = await response.json();

                    if (data.success) {
                        isConnected = true;
                        updateUI();
                        showNotification('‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ VPN!');
                    } else {
                        showNotification('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ' + data.error, false);
                    }
                } catch (error) {
                    showNotification('‚ùå –û—à–∏–±–∫–∞: ' + error.message, false);
                } finally {
                    loading.style.display = 'none';
                }
            }

            function disconnect() {
                isConnected = false;
                updateUI();
                showNotification('‚úÖ –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç VPN');
            }

            function updateUI() {
                const circle = document.getElementById('statusCircle');
                const title = document.getElementById('statusTitle');
                const desc = document.getElementById('statusDescription');
                const disconnectBtn = document.getElementById('disconnectBtn');

                if (isConnected) {
                    circle.classList.add('connected');
                    circle.textContent = 'üü¢';
                    title.textContent = '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ';
                    desc.textContent = '–í–∞—à–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞—â–∏—â–µ–Ω–æ';
                    disconnectBtn.style.display = 'block';
                } else {
                    circle.classList.remove('connected');
                    circle.textContent = 'üî¥';
                    title.textContent = '–û—Ç–∫–ª—é—á–µ–Ω–æ';
                    desc.textContent = '–ù–∞–∂–º–∏—Ç–µ "–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è" –¥–ª—è –∑–∞—â–∏—Ç—ã';
                    disconnectBtn.style.display = 'none';
                }
            }

            async function loadStats() {
                try {
                    const response = await fetch('/api/status');
                    const data = await response.json();

                    document.getElementById('totalConnections').textContent =
                        data.statistics.total_connections;
                    document.getElementById('successRate').textContent =
                        data.statistics.success_rate.toFixed(1) + '%';
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
                }
            }

            async function showCountries() {
                const selector = document.getElementById('countrySelector');
                const grid = document.getElementById('countryGrid');

                try {
                    const response = await fetch('/api/countries');
                    const data = await response.json();

                    grid.innerHTML = '';
                    data.countries.forEach(country => {
                        const card = document.createElement('div');
                        card.className = 'country-card';
                        card.innerHTML = `
                            <div class="country-flag">${getCountryFlag(country.name)}</div>
                            <div><strong>${country.name}</strong></div>
                            <div style="font-size: 0.9em; opacity: 0.8;">
                                ${country.total_servers} —Å–µ—Ä–≤–µ—Ä–æ–≤<br>
                                ${country.avg_latency.toFixed(0)}ms
                            </div>
                        `;
                        card.onclick = () => connectToCountry(country.name);
                        grid.appendChild(card);
                    });

                    selector.style.display = 'block';
                } catch (error) {
                    showNotification('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω', false);
                }
            }

            function getCountryFlag(countryName) {
                const flags = {
                    'Singapore': 'üá∏üá¨',
                    'Russia': 'üá∑üá∫',
                    'Netherlands': 'üá≥üá±',
                    'United Kingdom': 'üá¨üáß',
                    'Germany': 'üá©üá™',
                    'USA': 'üá∫üá∏',
                    'Canada': 'üá®üá¶',
                    'France': 'üá´üá∑',
                    'Australia': 'üá¶üá∫',
                    'Japan': 'üáØüáµ'
                };
                return flags[countryName] || 'üåç';
            }

            async function connectToCountry(country) {
                showNotification(`üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ${country}...`);
                // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç—Ä–∞–Ω–µ
            }

            function showSettings() {
                showNotification('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
            }

            // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            window.onload = function() {
                loadStats();
                setInterval(loadStats, 10000); // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
            };
        </script>
    </body>
    </html>
    """


@app.route("/api/status")
@limiter.limit("60 per minute")
def api_status():
    """API —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
    try:
        if not vpn_system:
            return jsonify({"error": "VPN —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞"}), 500

        status = vpn_system.get_status()
        stats = vpn_system.get_system_stats()

        return jsonify(
            {
                "status": status["status"],
                "message": status["message"],
                "statistics": stats,
            }
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
        return jsonify({"error": str(e)}), 500


@app.route("/api/countries")
@limiter.limit("60 per minute")
def api_countries():
    """API —Å–ø–∏—Å–∫–∞ —Å—Ç—Ä–∞–Ω"""
    try:
        if not vpn_system:
            return jsonify({"error": "VPN —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞"}), 500

        servers = vpn_system.get_available_servers()
        countries = {}

        for server in servers:
            country = server["country"]
            if country not in countries:
                countries[country] = {
                    "name": country,
                    "servers": [],
                    "total_servers": 0,
                    "avg_latency": 0,
                }

            countries[country]["servers"].append(server)
            countries[country]["total_servers"] += 1

        # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–π –∑–∞–¥–µ—Ä–∂–∫–∏
        for country_data in countries.values():
            if country_data["servers"]:
                country_data["avg_latency"] = sum(
                    s["latency"] for s in country_data["servers"]
                ) / len(country_data["servers"])

        return jsonify(
            {
                "countries": list(countries.values()),
                "total_countries": len(countries),
            }
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω: {e}")
        return jsonify({"error": str(e)}), 500


@app.route("/api/test_singapore")
@limiter.limit("10 per minute")
def api_test_singapore():
    """API —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Singapore"""
    try:
        if not vpn_system:
            return jsonify({"error": "VPN —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞"}), 500

        test_user = f"test_singapore_{int(time.time())}"

        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Singapore
        success, message, report = asyncio.run(
            vpn_system.connect(
                test_user,
                country="Singapore",
                security_level=VPNSecurityLevel.HIGH,
            )
        )

        if success:
            # –û–∂–∏–¥–∞–Ω–∏–µ 2 —Å–µ–∫—É–Ω–¥—ã
            time.sleep(2)

            # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ
            disconnect_success, disconnect_message = asyncio.run(
                vpn_system.disconnect(test_user)
            )

            return jsonify(
                {
                    "success": True,
                    "connect_message": message,
                    "disconnect_message": disconnect_message,
                    "report": report,
                    "test_duration": "2 —Å–µ–∫—É–Ω–¥—ã",
                }
            )
        else:
            return jsonify({"success": False, "error": message}), 400

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Singapore: {e}")
        return jsonify({"error": str(e)}), 500


@app.route("/health")
def health_check():
    """Health check endpoint"""
    return jsonify(
        {"status": "healthy", "timestamp": datetime.now().isoformat()}
    )


if __name__ == "__main__":
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è VPN —Å–∏—Å—Ç–µ–º—ã
    if init_vpn_system():
        port = int(os.getenv("VPN_PORT", 5000))
        host = os.getenv("VPN_HOST", "0.0.0.0")
        debug = os.getenv("DEBUG", "False").lower() == "true"

        print("=" * 80)
        print("üåç VPN Web Interface –∑–∞–ø—É—â–µ–Ω!")
        print("=" * 80)
        print(f"üì± –û—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ: http://localhost:{port}")
        print(
            f"üîê SECRET_KEY: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if app.secret_key else '‚ùå –ù–ï —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}"
        )
        print(f"üêû DEBUG —Ä–µ–∂–∏–º: {'‚ùå –í–∫–ª—é—á–µ–Ω' if debug else '‚úÖ –û—Ç–∫–ª—é—á–µ–Ω'}")
        print("üõ°Ô∏è  Rate Limiting: ‚úÖ –í–∫–ª—é—á–µ–Ω")
        print("üåê CORS: ‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω")
        print("=" * 80)

        app.run(host=host, port=port, debug=debug)
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ VPN —Å–∏—Å—Ç–µ–º—ã")
