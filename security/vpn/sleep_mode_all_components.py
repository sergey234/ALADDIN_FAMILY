#!/usr/bin/env python3
"""
–°–ø—è—â–∏–π —Ä–µ–∂–∏–º –¥–ª—è –≤—Å–µ—Ö VPN –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ ALADDIN
–ü–µ—Ä–µ–≤–æ–¥–∏—Ç –≤—Å–µ —Å–∏—Å—Ç–µ–º—ã –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ

–í–µ—Ä—Å–∏—è: 2.0
–ê–≤—Ç–æ—Ä: ALADDIN VPN Team
–î–∞—Ç–∞: 2024
–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: SOLID, DRY, PEP8
"""

import logging
import os
import subprocess
import sys
from pathlib import Path
from typing import Any, Dict

import asyncio

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(str(Path(__file__).parent.parent.parent))

# –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Ä–∞–±–æ—Ç—ã
# from security.safe_function_manager import SafeFunctionManager
# from core.system_manager import SystemManager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[logging.FileHandler("logs/vpn_sleep_manager.log"), logging.StreamHandler()],
)
logger = logging.getLogger(__name__)


class ALADDINVPNSleepManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–ø—è—â–µ–≥–æ —Ä–µ–∂–∏–º–∞ –¥–ª—è –≤—Å–µ—Ö VPN –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""

    _instance = None
    _initialized = False

    def __new__(cls):
        """Singleton pattern –¥–ª—è VPN –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        if cls._instance is None:
            cls._instance = super().__new__(cls)
        return cls._instance

    def __init__(self):
        if self._initialized:
            return

        self.components_status = {}
        self.sleep_mode = False

        # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        # self.sfm = SafeFunctionManager()
        # self.system_manager = SystemManager()
        self.sfm = None
        self.system_manager = None

        self.critical_components = [
            "vpn_monitor",  # –°–∞–º—ã–π –≤–∞–∂–Ω—ã–π - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã
            "security_core",  # –í—Ç–æ—Ä–æ–π –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏ - —è–¥—Ä–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        ]

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤ SFM (–≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ)
        # if self.sfm:
        #     self.sfm.register_function(
        #         function_name="vpn_sleep_manager",
        #         function_obj=self,
        #         critical=True,
        #         sleep_mode=True
        #     )

        logger.info("–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–ø—è—â–µ–≥–æ —Ä–µ–∂–∏–º–∞ VPN –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        logger.info(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {len(self.critical_components)}")
        self._initialized = True

    async def check_all_components(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö VPN –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")

        components = {
            # –í–µ–±-—Å–µ—Ä–≤–µ—Ä—ã
            "web_server_5000": await self._check_port(5000),
            "web_server_5001": await self._check_port(5001),
            "web_server_5002": await self._check_port(5002),
            # –°–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            "ddos_protection": await self._check_module("protection.ddos_protection"),
            "rate_limiter": await self._check_module("protection.rate_limiter"),
            "intrusion_detection": await self._check_module("protection.intrusion_detection"),
            "two_factor_auth": await self._check_module("auth.two_factor_auth"),
            # –°–∏—Å—Ç–µ–º—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            "performance_manager": await self._check_module("performance.performance_manager"),
            "connection_cache": await self._check_module("performance.connection_cache"),
            "connection_pool": await self._check_module("performance.connection_pool"),
            "async_processor": await self._check_module("performance.async_processor"),
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
            "split_tunneling": await self._check_module("features.split_tunneling"),
            "multi_hop": await self._check_module("features.multi_hop"),
            "auto_reconnect": await self._check_module("features.auto_reconnect"),
            # –ü—Ä–æ—Ç–æ–∫–æ–ª—ã
            "shadowsocks": await self._check_module("protocols.shadowsocks_client"),
            "v2ray": await self._check_module("protocols.v2ray_client"),
            "obfuscation": await self._check_module("protocols.obfuscation_manager"),
            # –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ 152-–§–ó
            "russia_compliance": await self._check_module("compliance.russia_compliance"),
            "data_localization": await self._check_module("compliance.data_localization"),
            "no_logs_policy": await self._check_module("compliance.no_logs_policy"),
            # –ê—É–¥–∏—Ç –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            "audit_logger": await self._check_module("audit_logging.audit_logger"),
            # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
            "aladdin_integration": await self._check_module("integration.aladdin_vpn_integration"),
            # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            "vpn_monitor": await self._check_process("auto_monitor.py"),
            "security_core": await self._check_module("security_integration"),
        }

        self.components_status = components
        return components

    async def _check_port(self, port: int) -> str:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –ø–æ—Ä—Ç–∞"""
        try:
            result = subprocess.run(f"lsof -i :{port}", shell=True, capture_output=True, text=True)
            if result.returncode == 0:
                return "ACTIVE"
            else:
                return "SLEEPING"
        except Exception:
            return "ERROR"

    async def _check_module(self, module_name: str) -> str:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–æ–¥—É–ª—è"""
        try:
            exec(f"import {module_name}")
            return "READY"
        except ImportError:
            return "NOT_FOUND"
        except Exception:
            return "ERROR"

    async def _check_process(self, process_name: str) -> str:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
        try:
            result = subprocess.run(f"pgrep -f {process_name}", shell=True, capture_output=True, text=True)
            if result.returncode == 0:
                return "ACTIVE"
            else:
                return "SLEEPING"
        except Exception:
            return "ERROR"

    async def put_to_sleep(self, component_name: str) -> bool:
        """–ü–µ—Ä–µ–≤–æ–¥ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º"""
        try:
            if component_name in self.components_status:
                if self.components_status[component_name] == "ACTIVE":
                    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
                    if "web_server" in component_name:
                        port = component_name.split("_")[-1]
                        await self._stop_web_server(port)
                    elif component_name == "vpn_monitor":
                        await self._stop_vpn_monitor()
                    else:
                        logger.info(f"–ö–æ–º–ø–æ–Ω–µ–Ω—Ç {component_name} —É–∂–µ –≤ —Å–ø—è—â–µ–º —Ä–µ–∂–∏–º–µ")

                    self.components_status[component_name] = "SLEEPING"
                    logger.info(f"‚úÖ {component_name} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º")
                    return True
                else:
                    logger.info(f"–ö–æ–º–ø–æ–Ω–µ–Ω—Ç {component_name} —É–∂–µ –≤ —Å–ø—è—â–µ–º —Ä–µ–∂–∏–º–µ")
                    return True
            else:
                logger.warning(f"–ö–æ–º–ø–æ–Ω–µ–Ω—Ç {component_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ {component_name} –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º: {e}")
            return False

    async def _stop_web_server(self, port: str):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É"""
        try:
            subprocess.run(f"lsof -ti :{port} | xargs kill -9", shell=True, capture_output=True)
            logger.info(f"–í–µ–±-—Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É {port} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}: {e}")

    async def _stop_vpn_monitor(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ VPN –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        try:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º auto_monitor.py
            subprocess.run("pkill -f auto_monitor.py", shell=True)

            # –£–¥–∞–ª—è–µ–º PID —Ñ–∞–π–ª
            if os.path.exists("vpn_monitor.pid"):
                os.remove("vpn_monitor.pid")

            logger.info("VPN –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ VPN –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")

    async def sleep_all_except_critical(self) -> Dict[str, Any]:
        """–ü–µ—Ä–µ–≤–æ–¥ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º –∫—Ä–æ–º–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö"""
        logger.info("üò¥ –ü–µ—Ä–µ–≤–æ–¥ –≤—Å–µ—Ö VPN –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º...")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
        await self.check_all_components()

        sleep_results = {}

        for component, status in self.components_status.items():
            if component not in self.critical_components:
                if status in ["ACTIVE", "READY"]:
                    result = await self.put_to_sleep(component)
                    sleep_results[component] = "SLEEPING" if result else "ERROR"
                else:
                    sleep_results[component] = status
            else:
                sleep_results[component] = f"CRITICAL - {status}"
                logger.info(f"üîí {component} –æ—Å—Ç–∞–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º (–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç)")

        return sleep_results

    async def get_sleep_report(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ —Å–ø—è—â–µ–º —Ä–µ–∂–∏–º–µ"""
        await self.check_all_components()

        active_count = sum(1 for status in self.components_status.values() if status in ["ACTIVE", "READY"])
        sleeping_count = sum(1 for status in self.components_status.values() if status == "SLEEPING")
        critical_count = sum(
            1
            for comp in self.critical_components
            if self.components_status.get(comp, "SLEEPING") in ["ACTIVE", "READY"]
        )

        return {
            "total_components": len(self.components_status),
            "active_components": active_count,
            "sleeping_components": sleeping_count,
            "critical_components": critical_count,
            "components_status": self.components_status,
            "critical_list": self.critical_components,
        }

    async def wake_up_component(self, component_name: str) -> bool:
        """–ü—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∏–∑ —Å–ø—è—â–µ–≥–æ —Ä–µ–∂–∏–º–∞"""
        try:
            if component_name in self.components_status:
                if self.components_status[component_name] == "SLEEPING":
                    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è
                    logger.info(f"üîî {component_name} –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—é")
                    self.components_status[component_name] = "READY"
                    return True
                else:
                    logger.info(f"–ö–æ–º–ø–æ–Ω–µ–Ω—Ç {component_name} —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω")
                    return True
            else:
                logger.warning(f"–ö–æ–º–ø–æ–Ω–µ–Ω—Ç {component_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è {component_name}: {e}")
            return False

    def enable_sleep_mode(self):
        """–í–∫–ª—é—á–µ–Ω–∏–µ —Å–ø—è—â–µ–≥–æ —Ä–µ–∂–∏–º–∞"""
        self.sleep_mode = True
        logger.info("–°–ø—è—â–∏–π —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω –¥–ª—è VPN –º–µ–Ω–µ–¥–∂–µ—Ä–∞")

    def disable_sleep_mode(self):
        """–í—ã–∫–ª—é—á–µ–Ω–∏–µ —Å–ø—è—â–µ–≥–æ —Ä–µ–∂–∏–º–∞"""
        self.sleep_mode = False
        logger.info("–°–ø—è—â–∏–π —Ä–µ–∂–∏–º –≤—ã–∫–ª—é—á–µ–Ω –¥–ª—è VPN –º–µ–Ω–µ–¥–∂–µ—Ä–∞")

    async def run_tests(self):
        """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""
        logger.info("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ VPN Sleep Manager...")

        try:
            # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            status = await self.check_all_components()
            logger.info(f"‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {len(status)} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")

            # –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
            report = await self.get_sleep_report()
            logger.info(f"‚úÖ –¢–µ—Å—Ç –æ—Ç—á–µ—Ç–∞: {report['total_components']} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")

            # –¢–µ—Å—Ç 3: –ü—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
            wake_result = await self.wake_up_component("test_component")
            logger.info(f"‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è: {wake_result}")

            logger.info("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã VPN Sleep Manager –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
            return False


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üò¥ VPN –°–ò–°–¢–ï–ú–ê –ü–ï–†–ï–í–û–î–ò–¢–°–Ø –í –°–ü–Ø–©–ò–ô –†–ï–ñ–ò–ú")
    print("=" * 50)

    sleep_manager = ALADDINVPNSleepManager()

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    await sleep_manager.run_tests()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞...")
    current_status = await sleep_manager.check_all_components()

    print("\nüìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:")
    for component, status in current_status.items():
        status_icon = "üü¢" if status in ["ACTIVE", "READY"] else "üî¥" if status == "SLEEPING" else "‚ö™"
        print(f"  {status_icon} {component}: {status}")

    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º
    print("\nüò¥ –ü–µ—Ä–µ–≤–æ–¥ –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º...")
    sleep_results = await sleep_manager.sleep_all_except_critical()

    print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º:")
    for component, status in sleep_results.items():
        if "CRITICAL" in str(status):
            print(f"  üîí {component}: {status}")
        elif status == "SLEEPING":
            print(f"  üò¥ {component}: {status}")
        else:
            print(f"  ‚ö™ {component}: {status}")

    # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    report = await sleep_manager.get_sleep_report()
    print("\nüìà –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢:")
    print(f"  –í—Å–µ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {report['total_components']}")
    print(f"  –ê–∫—Ç–∏–≤–Ω—ã—Ö: {report['active_components']}")
    print(f"  –í —Å–ø—è—â–µ–º —Ä–µ–∂–∏–º–µ: {report['sleeping_components']}")
    print(f"  –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö: {report['critical_components']}")

    print("\nüîí –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´ (–æ—Å—Ç–∞—é—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º–∏):")
    for comp in report["critical_list"]:
        status = report["components_status"].get(comp, "UNKNOWN")
        print(f"  üîí {comp}: {status}")

    print("\n‚úÖ VPN –°–ò–°–¢–ï–ú–ê –£–°–ü–ï–®–ù–û –ü–ï–†–ï–í–ï–î–ï–ù–ê –í –°–ü–Ø–©–ò–ô –†–ï–ñ–ò–ú!")
    print("üí§ –¢–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –æ—Å—Ç–∞—é—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º–∏")


if __name__ == "__main__":
    asyncio.run(main())
