#!/usr/bin/env python3
"""
–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Å–ø—è—â–µ–≥–æ —Ä–µ–∂–∏–º–∞ –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ ALADDIN
–ü–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º –≤—Å–µ —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ

–í–µ—Ä—Å–∏—è: 2.0
–ê–≤—Ç–æ—Ä: ALADDIN Security Team
–î–∞—Ç–∞: 2024
–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: SOLID, DRY, PEP8
"""

import asyncio
import logging
import time
import os
import subprocess
import sys
from typing import Dict, Any
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(str(Path(__file__).parent.parent.parent))

# –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Ä–∞–±–æ—Ç—ã
# from security.safe_function_manager import SafeFunctionManager
# from core.system_manager import SystemManager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/security_sleep_manager.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


class ALADDINSecuritySleepManager:
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Å–ø—è—â–µ–≥–æ —Ä–µ–∂–∏–º–∞ –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""

    _instance = None
    _initialized = False

    def __new__(cls):
        """Singleton pattern –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        if cls._instance is None:
            cls._instance = super().__new__(cls)
        return cls._instance

    def __init__(self):
        if self._initialized:
            return

        # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        # self.sfm = SafeFunctionManager()
        # self.system_manager = SystemManager()
        self.sfm = None
        self.system_manager = None
        self.sleep_mode = False
        self._initialized = True
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–π –ø—É—Ç—å –ø—Ä–æ–µ–∫—Ç–∞
        base_path = Path(__file__).parent.parent.parent

        self.security_components = {
            # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            "advanced_threat_intelligence": {
                "file": str(base_path / "advanced_threat_intelligence.py"),
                "process_name": "advanced_threat_intelligence",
                "critical": False,
                "module": "advanced_threat_intelligence"
            },
            "advanced_behavioral_analytics": {
                "file": None,  # –ë—É–¥–µ–º –∏—Å–∫–∞—Ç—å
                "process_name": "behavioral_analytics",
                "critical": False,
                "module": "advanced_behavioral_analytics"
            },
            "enhanced_security_integration": {
                "file": str(base_path / "enhanced_security_integration.py"),
                "process_name": "enhanced_security_integration",
                "critical": False,
                "module": "enhanced_security_integration"
            },
            "external_integrations_system": {
                "file": str(base_path / "external_integrations.py"),
                "process_name": "external_integrations",
                "critical": False,
                "module": "external_integrations"
            },
            "threat_intelligence_system": {
                "file": str(base_path / "threat_intelligence_system.py"),
                "process_name": "threat_intelligence",
                "critical": False,
                "module": "threat_intelligence_system"
            },
            "automated_audit_system": {
                "file": None,  # –ë—É–¥–µ–º –∏—Å–∫–∞—Ç—å
                "process_name": "audit_system",
                "critical": False,
                "module": "automated_audit_system"
            },
            "enhanced_dashboard_v2": {
                "file": str(base_path / "dashboard_server_optimized.py"),
                "process_name": "dashboard_server",
                "critical": False,
                "module": "dashboard_server_optimized"
            },
            "audit_scheduler": {
                "file": str(base_path / "audit_scheduler.py"),
                "process_name": "audit_scheduler",
                "critical": False,
                "module": "audit_scheduler"
            },
            "compliance_monitor": {
                "file": str(base_path / "security/compliance_monitor_152_fz.py"),
                "process_name": "compliance_monitor",
                "critical": False,
                "module": "compliance_monitor_152_fz"
            },
            "audit_dashboard_integration": {
                "file": None,  # –ë—É–¥–µ–º –∏—Å–∫–∞—Ç—å
                "process_name": "audit_dashboard",
                "critical": False,
                "module": "audit_dashboard_integration"
            },
            "external_integrations_dashboard": {
                "file": str(base_path / "external_integrations_dashboard.py"),
                "process_name": "external_dashboard",
                "critical": False,
                "module": "external_integrations_dashboard"
            },
            "run_performance_tests": {
                "file": str(base_path / "security/vpn/test_performance_features.py"),
                "process_name": "performance_tests",
                "critical": False,
                "module": "test_performance_features"
            }
        }

        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (–æ—Å—Ç–∞—é—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º–∏)
        self.critical_components = [
            "core_security_manager",  # –Ø–¥—Ä–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            "basic_monitoring"       # –ë–∞–∑–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        ]

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤ SFM (–≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ)
        # if self.sfm:
        #     self.sfm.register_function(
        #         function_name="security_sleep_manager",
        #         function_obj=self,
        #         critical=True,
        #         sleep_mode=True
        #     )

        logger.info("–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Å–ø—è—â–µ–≥–æ —Ä–µ–∂–∏–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        logger.info(f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(self.security_components)} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")

    async def find_missing_components(self) -> Dict[str, str]:
        """–ü–æ–∏—Å–∫ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        logger.info("üîç –ü–æ–∏—Å–∫ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...")

        missing_components = {}

        for component, info in self.security_components.items():
            if info["file"] is None:
                # –ò—â–µ–º —Ñ–∞–π–ª—ã –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
                search_terms = {
                    "advanced_behavioral_analytics": ["behavioral", "analytics"],
                    "automated_audit_system": ["audit", "automated"],
                    "audit_dashboard_integration": ["audit", "dashboard", "integration"]
                }

                if component in search_terms:
                    found_files = []
                    for term in search_terms[component]:
                        try:
                            result = subprocess.run(
                                f"find /Users/sergejhlystov/ALADDIN_NEW -name '*{term}*' -type f | head -5",
                                shell=True,
                                capture_output=True,
                                text=True
                            )
                            if result.returncode == 0 and result.stdout.strip():
                                found_files.extend(result.stdout.strip().split('\n'))
                        except Exception as e:
                            logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ {term}: {e}")

                    if found_files:
                        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                        self.security_components[component]["file"] = found_files[0]
                        missing_components[component] = f"–ù–∞–π–¥–µ–Ω: {found_files[0]}"
                    else:
                        missing_components[component] = "–ù–µ –Ω–∞–π–¥–µ–Ω"
                else:
                    missing_components[component] = "–ù–µ –Ω–∞–π–¥–µ–Ω"

        return missing_components

    async def check_all_security_components(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...")

        components_status = {}

        for component, info in self.security_components.items():
            if info["file"] and os.path.exists(info["file"]):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å
                process_status = await self._check_process(info["process_name"])
                file_status = "EXISTS"
            else:
                process_status = "NOT_FOUND"
                file_status = "NOT_FOUND"

            components_status[component] = {
                "file_status": file_status,
                "process_status": process_status,
                "file_path": info["file"],
                "is_critical": info["critical"]
            }

        return components_status

    async def _check_process(self, process_name: str) -> str:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
        try:
            result = subprocess.run(
                f"pgrep -f {process_name}",
                shell=True,
                capture_output=True,
                text=True
            )
            if result.returncode == 0 and result.stdout.strip():
                return "ACTIVE"
            else:
                return "SLEEPING"
        except Exception:
            return "ERROR"

    async def put_security_component_to_sleep(self, component_name: str) -> bool:
        """–ü–µ—Ä–µ–≤–æ–¥ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º"""
        try:
            if component_name not in self.security_components:
                logger.warning(f"–ö–æ–º–ø–æ–Ω–µ–Ω—Ç {component_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False

            info = self.security_components[component_name]

            if info["critical"]:
                logger.info(f"üîí {component_name} –æ—Å—Ç–∞–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º (–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç)")
                return True

            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, –µ—Å–ª–∏ –æ–Ω –∑–∞–ø—É—â–µ–Ω
            if await self._check_process(info["process_name"]) == "ACTIVE":
                await self._stop_process(info["process_name"])
                logger.info(f"‚úÖ {component_name} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º")
            else:
                logger.info(f"üò¥ {component_name} —É–∂–µ –≤ —Å–ø—è—â–µ–º —Ä–µ–∂–∏–º–µ")

            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ {component_name} –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º: {e}")
            return False

    async def _stop_process(self, process_name: str):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
        try:
            # –ù–∞—Ö–æ–¥–∏–º –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
            subprocess.run(
                f"pgrep -f {process_name} | xargs kill -TERM",
                shell=True,
                capture_output=True
            )

            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            time.sleep(2)
            subprocess.run(
                f"pgrep -f {process_name} | xargs kill -KILL",
                shell=True,
                capture_output=True
            )

            logger.info(f"–ü—Ä–æ—Ü–µ—Å—Å {process_name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ {process_name}: {e}")

    async def sleep_all_security_components(self) -> Dict[str, Any]:
        """–ü–µ—Ä–µ–≤–æ–¥ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º"""
        logger.info("üò¥ –ü–µ—Ä–µ–≤–æ–¥ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º...")

        # –ò—â–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        missing = await self.find_missing_components()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
        components_status = await self.check_all_security_components()

        sleep_results = {}

        for component, info in self.security_components.items():
            if component in missing:
                sleep_results[component] = f"MISSING - {missing[component]}"
                continue

            if info["critical"]:
                sleep_results[component] = f"CRITICAL - {components_status[component]['process_status']}"
                logger.info(f"üîí {component} –æ—Å—Ç–∞–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º (–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π)")
            else:
                result = await self.put_security_component_to_sleep(component)
                if result:
                    sleep_results[component] = "SLEEPING"
                else:
                    sleep_results[component] = "ERROR"

        return sleep_results

    async def get_security_sleep_report(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ —Å–ø—è—â–µ–º —Ä–µ–∂–∏–º–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        components_status = await self.check_all_security_components()

        active_count = sum(1 for comp in components_status.values()
                           if comp["process_status"] == "ACTIVE")
        sleeping_count = sum(1 for comp in components_status.values()
                             if comp["process_status"] == "SLEEPING")
        missing_count = sum(1 for comp in components_status.values()
                            if comp["file_status"] == "NOT_FOUND")
        critical_count = sum(1 for comp in self.security_components.values()
                             if comp["critical"])

        return {
            "total_components": len(self.security_components),
            "active_components": active_count,
            "sleeping_components": sleeping_count,
            "missing_components": missing_count,
            "critical_components": critical_count,
            "components_status": components_status,
            "critical_list": self.critical_components
        }

    def enable_sleep_mode(self):
        """–í–∫–ª—é—á–µ–Ω–∏–µ —Å–ø—è—â–µ–≥–æ —Ä–µ–∂–∏–º–∞"""
        self.sleep_mode = True
        logger.info("–°–ø—è—â–∏–π —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω")

    def disable_sleep_mode(self):
        """–í—ã–∫–ª—é—á–µ–Ω–∏–µ —Å–ø—è—â–µ–≥–æ —Ä–µ–∂–∏–º–∞"""
        self.sleep_mode = False
        logger.info("–°–ø—è—â–∏–π —Ä–µ–∂–∏–º –≤—ã–∫–ª—é—á–µ–Ω")

    async def run_tests(self):
        """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""
        logger.info("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ Security Sleep Manager...")

        try:
            # –¢–µ—Å—Ç 1: –ü–æ–∏—Å–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            missing = await self.find_missing_components()
            logger.info(f"‚úÖ –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {len(missing)} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

            # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
            status = await self.check_all_security_components()
            logger.info(f"‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {len(status)} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")

            # –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
            report = await self.get_security_sleep_report()
            logger.info(f"‚úÖ –¢–µ—Å—Ç –æ—Ç—á–µ—Ç–∞: {report['total_components']} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")

            logger.info("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã Security Sleep Manager –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
            return False


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üò¥ –°–ò–°–¢–ï–ú–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò –ü–ï–†–ï–í–û–î–ò–¢–°–Ø –í –°–ü–Ø–©–ò–ô –†–ï–ñ–ò–ú")
    print("=" * 60)

    sleep_manager = ALADDINSecuritySleepManager()

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    await sleep_manager.run_tests()

    # –ò—â–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    print("\nüîç –ü–æ–∏—Å–∫ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
    missing = await sleep_manager.find_missing_components()

    if missing:
        print("üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:")
        for component, status in missing.items():
            print(f"  {component}: {status}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞...")
    current_status = await sleep_manager.check_all_security_components()

    print("\nüìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:")
    for component, status in current_status.items():
        if status["file_status"] == "EXISTS":
            file_icon = "üìÅ"
        else:
            file_icon = "‚ùå"
        if status["process_status"] == "ACTIVE":
            process_icon = "üü¢"
        elif status["process_status"] == "SLEEPING":
            process_icon = "üî¥"
        else:
            process_icon = "‚ö™"
        if status["is_critical"]:
            critical_icon = "üîí"
        else:
            critical_icon = ""
        print(f"  {file_icon} {process_icon} {critical_icon} {component}: {status['process_status']}")

    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º
    print("\nüò¥ –ü–µ—Ä–µ–≤–æ–¥ –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º...")
    sleep_results = await sleep_manager.sleep_all_security_components()

    print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º:")
    for component, status in sleep_results.items():
        if "CRITICAL" in str(status):
            print(f"  üîí {component}: {status}")
        elif "MISSING" in str(status):
            print(f"  ‚ùå {component}: {status}")
        elif status == "SLEEPING":
            print(f"  üò¥ {component}: {status}")
        else:
            print(f"  ‚ö†Ô∏è {component}: {status}")

    # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    report = await sleep_manager.get_security_sleep_report()
    print("\nüìà –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò:")
    print(f"  –í—Å–µ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {report['total_components']}")
    print(f"  –ê–∫—Ç–∏–≤–Ω—ã—Ö: {report['active_components']}")
    print(f"  –í —Å–ø—è—â–µ–º —Ä–µ–∂–∏–º–µ: {report['sleeping_components']}")
    print(f"  –ù–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö: {report['missing_components']}")
    print(f"  –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö: {report['critical_components']}")

    print("\nüîí –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´ (–æ—Å—Ç–∞—é—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º–∏):")
    for comp in report['critical_list']:
        print(f"  üîí {comp}")

    print("\n‚úÖ –°–ò–°–¢–ï–ú–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò –£–°–ü–ï–®–ù–û –ü–ï–†–ï–í–ï–î–ï–ù–ê –í –°–ü–Ø–©–ò–ô –†–ï–ñ–ò–ú!")
    print("üí§ –¢–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –æ—Å—Ç–∞—é—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º–∏")


if __name__ == "__main__":
    asyncio.run(main())
