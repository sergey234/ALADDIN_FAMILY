#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π CPU-–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ modern_encryption, security_hashes, encryption_manager

–§—É–Ω–∫—Ü–∏—è: CPU Optimizations Test
–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –í–´–°–û–ö–ò–ô
–í–µ—Ä—Å–∏—è: 1.0
–î–∞—Ç–∞: 2025-01-11
"""

import asyncio
import time
import sys
import os

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from security.vpn.encryption.modern_encryption import ModernEncryptionSystem, EncryptionAlgorithm
from security.hashes.security_hashes import SecurityHashesSystem, HashAlgorithm, HashPurpose
from security.bots.components.encryption_manager import EncryptionManager, EncryptionAlgorithm as EMAlgorithm
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


async def test_modern_encryption_optimizations():
    """–¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π modern_encryption"""
    print("üîê –¢–ï–°–¢ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ô MODERN_ENCRYPTION")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
    encryption_system = ModernEncryptionSystem("TestEncryption")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_data = ("–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è" * 100).encode('utf-8')  # –ë–æ–ª—å—à–æ–π –æ–±—ä–µ–º –¥–∞–Ω–Ω—ã—Ö
    
    print(f"üìä –†–∞–∑–º–µ—Ä —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {len(test_data)} –±–∞–π—Ç")
    
    # –¢–µ—Å—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
    print("\n1. –°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ:")
    start_time = time.time()
    result = encryption_system.encrypt_data(test_data, EncryptionAlgorithm.CHACHA20_POLY1305)
    sync_time = time.time() - start_time
    
    if result.success:
        print(f"   ‚úÖ –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ: {len(result.encrypted_data)} –±–∞–π—Ç")
        print(f"   ‚è±Ô∏è –í—Ä–µ–º—è: {sync_time:.4f} —Å–µ–∫")
        
        # –¢–µ—Å—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏
        start_time = time.time()
        decrypt_result = encryption_system.decrypt_data(
            result.encrypted_data,
            result.auth_tag,
            result.nonce,
            result.algorithm,
            result.key_id,
        )
        sync_decrypt_time = time.time() - start_time
        
        if decrypt_result.success:
            print(f"   ‚úÖ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞: {len(decrypt_result.encrypted_data)} –±–∞–π—Ç")
            print(f"   ‚è±Ô∏è –í—Ä–µ–º—è: {sync_decrypt_time:.4f} —Å–µ–∫")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏: {decrypt_result.error_message}")
    else:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {result.error_message}")
        return
    
    # –¢–µ—Å—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
    print("\n2. –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ:")
    start_time = time.time()
    async_result = await encryption_system.encrypt_data_async(test_data, EncryptionAlgorithm.CHACHA20_POLY1305)
    async_time = time.time() - start_time
    
    if async_result.success:
        print(f"   ‚úÖ –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ: {len(async_result.encrypted_data)} –±–∞–π—Ç")
        print(f"   ‚è±Ô∏è –í—Ä–µ–º—è: {async_time:.4f} —Å–µ–∫")
        
        # –¢–µ—Å—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏
        start_time = time.time()
        async_decrypt_result = await encryption_system.decrypt_data_async(
            async_result.encrypted_data,
            async_result.auth_tag,
            async_result.nonce,
            async_result.algorithm,
            async_result.key_id,
        )
        async_decrypt_time = time.time() - start_time
        
        if async_decrypt_result.success:
            print(f"   ‚úÖ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞: {len(async_decrypt_result.encrypted_data)} –±–∞–π—Ç")
            print(f"   ‚è±Ô∏è –í—Ä–µ–º—è: {async_decrypt_time:.4f} —Å–µ–∫")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏: {async_decrypt_result.error_message}")
    else:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {async_result.error_message}")
        return
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    print("\n3. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
    sync_total = sync_time + sync_decrypt_time
    async_total = async_time + async_decrypt_time
    improvement = ((sync_total - async_total) / sync_total) * 100 if sync_total > 0 else 0
    
    print(f"   üìä –°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –≤—Ä–µ–º—è: {sync_total:.4f} —Å–µ–∫")
    print(f"   üìä –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –≤—Ä–µ–º—è: {async_total:.4f} —Å–µ–∫")
    print(f"   üöÄ –£–ª—É—á—à–µ–Ω–∏–µ: {improvement:.1f}%")
    
    # –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    print("\n4. –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
    metrics = encryption_system.get_performance_metrics()
    for key, value in metrics.items():
        print(f"   üìà {key}: {value}")
    
    return encryption_system


async def test_security_hashes_optimizations():
    """–¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π security_hashes"""
    print("\nüîê –¢–ï–°–¢ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ô SECURITY_HASHES")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
    hash_system = SecurityHashesSystem("TestHashes")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_data = "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è" * 100  # –ë–æ–ª—å—à–æ–π –æ–±—ä–µ–º –¥–∞–Ω–Ω—ã—Ö
    test_password = "SecurePassword123!" * 10  # –î–ª–∏–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å
    
    print(f"üìä –†–∞–∑–º–µ—Ä —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {len(test_data)} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"üìä –†–∞–∑–º–µ—Ä –ø–∞—Ä–æ–ª—è: {len(test_password)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –¢–µ—Å—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
    print("\n1. –°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ:")
    start_time = time.time()
    result = hash_system._hash_data_sync(
        test_data.encode(),
        HashAlgorithm.SHA_256,
        None,
        100000,
        HashPurpose.DATA_VERIFICATION
    )
    sync_time = time.time() - start_time
    
    if result.success:
        print(f"   ‚úÖ –•–µ—à: {result.hash_value[:32]}...")
        print(f"   ‚è±Ô∏è –í—Ä–µ–º—è: {sync_time:.4f} —Å–µ–∫")
    else:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {result.error_message}")
        return
    
    # –¢–µ—Å—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
    print("\n2. –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ:")
    start_time = time.time()
    async_result = await hash_system.hash_data_async(
        test_data,
        HashAlgorithm.SHA_256,
        None,
        100000,
        HashPurpose.DATA_VERIFICATION
    )
    async_time = time.time() - start_time
    
    if async_result.success:
        print(f"   ‚úÖ –•–µ—à: {async_result.hash_value[:32]}...")
        print(f"   ‚è±Ô∏è –í—Ä–µ–º—è: {async_time:.4f} —Å–µ–∫")
    else:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {async_result.error_message}")
        return
    
    # –¢–µ—Å—Ç —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è
    print("\n3. –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è:")
    start_time = time.time()
    password_result = await hash_system.hash_data_async(
        test_password,
        HashAlgorithm.SHA_256,
        None,
        100000,
        HashPurpose.PASSWORD
    )
    password_time = time.time() - start_time
    
    if password_result.success:
        print(f"   ‚úÖ –•–µ—à –ø–∞—Ä–æ–ª—è: {password_result.hash_value[:32]}...")
        print(f"   üßÇ –°–æ–ª—å: {password_result.salt.hex()[:16]}...")
        print(f"   ‚è±Ô∏è –í—Ä–µ–º—è: {password_time:.4f} —Å–µ–∫")
    else:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {password_result.error_message}")
        return
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    print("\n4. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
    improvement = ((sync_time - async_time) / sync_time) * 100 if sync_time > 0 else 0
    
    print(f"   üìä –°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –≤—Ä–µ–º—è: {sync_time:.4f} —Å–µ–∫")
    print(f"   üìä –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –≤—Ä–µ–º—è: {async_time:.4f} —Å–µ–∫")
    print(f"   üöÄ –£–ª—É—á—à–µ–Ω–∏–µ: {improvement:.1f}%")
    
    # –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    print("\n5. –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
    metrics = hash_system.get_performance_metrics()
    for key, value in metrics.items():
        print(f"   üìà {key}: {value}")
    
    return hash_system


async def test_encryption_manager_optimizations():
    """–¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π encryption_manager"""
    print("\nüîê –¢–ï–°–¢ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ô ENCRYPTION_MANAGER")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
    encryption_manager = EncryptionManager(
        logger=logger,
        default_algorithm=EMAlgorithm.AES_256_GCM
    )
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_data = "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è" * 100  # –ë–æ–ª—å—à–æ–π –æ–±—ä–µ–º –¥–∞–Ω–Ω—ã—Ö
    
    print(f"üìä –†–∞–∑–º–µ—Ä —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {len(test_data)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –¢–µ—Å—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
    print("\n1. –°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ:")
    start_time = time.time()
    result = encryption_manager.encrypt_data(test_data.encode())
    sync_time = time.time() - start_time
    
    if result:
        print(f"   ‚úÖ –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ: {len(result.data)} –±–∞–π—Ç")
        print(f"   ‚è±Ô∏è –í—Ä–µ–º—è: {sync_time:.4f} —Å–µ–∫")
        
        # –¢–µ—Å—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏
        start_time = time.time()
        decrypt_result = encryption_manager.decrypt_data(result)
        sync_decrypt_time = time.time() - start_time
        
        if decrypt_result:
            print(f"   ‚úÖ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞: {len(decrypt_result)} –±–∞–π—Ç")
            print(f"   ‚è±Ô∏è –í—Ä–µ–º—è: {sync_decrypt_time:.4f} —Å–µ–∫")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏")
    else:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è")
        return
    
    # –¢–µ—Å—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
    print("\n2. –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ:")
    start_time = time.time()
    async_result = await encryption_manager.encrypt_data_async(test_data)
    async_time = time.time() - start_time
    
    if async_result:
        print(f"   ‚úÖ –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ: {len(async_result.data)} –±–∞–π—Ç")
        print(f"   ‚è±Ô∏è –í—Ä–µ–º—è: {async_time:.4f} —Å–µ–∫")
        
        # –¢–µ—Å—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏
        start_time = time.time()
        async_decrypt_result = await encryption_manager.decrypt_data_async(async_result)
        async_decrypt_time = time.time() - start_time
        
        if async_decrypt_result:
            print(f"   ‚úÖ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞: {len(async_decrypt_result)} –±–∞–π—Ç")
            print(f"   ‚è±Ô∏è –í—Ä–µ–º—è: {async_decrypt_time:.4f} —Å–µ–∫")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏")
    else:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è")
        return
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    print("\n3. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
    sync_total = sync_time + sync_decrypt_time
    async_total = async_time + async_decrypt_time
    improvement = ((sync_total - async_total) / sync_total) * 100 if sync_total > 0 else 0
    
    print(f"   üìä –°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –≤—Ä–µ–º—è: {sync_total:.4f} —Å–µ–∫")
    print(f"   üìä –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –≤—Ä–µ–º—è: {async_total:.4f} —Å–µ–∫")
    print(f"   üöÄ –£–ª—É—á—à–µ–Ω–∏–µ: {improvement:.1f}%")
    
    # –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    print("\n4. –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
    metrics = encryption_manager.get_performance_metrics()
    for key, value in metrics.items():
        print(f"   üìà {key}: {value}")
    
    return encryption_manager


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("‚ö° –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ô CPU-–ò–ù–¢–ï–ù–°–ò–í–ù–´–• –§–£–ù–ö–¶–ò–ô")
    print("=" * 60)
    print("üéØ –¶–ï–õ–¨: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π")
    print("üìã –§–£–ù–ö–¶–ò–ò: modern_encryption, security_hashes, encryption_manager")
    print("üöÄ –ö–ê–ß–ï–°–¢–í–û: A+ (–≤—ã—Å—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞)")
    
    start_time = time.time()
    
    try:
        # –¢–µ—Å—Ç modern_encryption
        encryption_system = await test_modern_encryption_optimizations()
        
        # –¢–µ—Å—Ç security_hashes
        hash_system = await test_security_hashes_optimizations()
        
        # –¢–µ—Å—Ç encryption_manager
        encryption_manager = await test_encryption_manager_optimizations()
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_time = time.time() - start_time
        print(f"\nüéâ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´!")
        print(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.4f} —Å–µ–∫")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print(f"\nüìã –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print(f"   ‚úÖ –í—Å–µ CPU-–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        print(f"   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        print(f"   ‚úÖ –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞")
        print(f"   ‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø—É–ª—ã –ø–æ—Ç–æ–∫–æ–≤")
        print(f"   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")


if __name__ == "__main__":
    asyncio.run(main())