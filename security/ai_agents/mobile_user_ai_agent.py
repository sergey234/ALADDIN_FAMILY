#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
MobileUserAIAgent - –ì–∏–±—Ä–∏–¥–Ω—ã–π AI –ê–≥–µ–Ω—Ç-–ë–æ—Ç –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–æ—Å—Ç–æ–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π —è–∑—ã–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

–§—É–Ω–∫—Ü–∏–∏:
- –ü—Ä–æ—Å—Ç—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
- –ì–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ –º–æ—Ç–∏–≤–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
- –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ –∏ —Ç—É—Ç–æ—Ä–∏–∞–ª—ã
- –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –ø–æ–º–æ—â—å
- –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

–ê–≤—Ç–æ—Ä: ALADDIN Security System
–í–µ—Ä—Å–∏—è: 1.0
–î–∞—Ç–∞: 2025-09-08
"""

import os
import random
import sys
from dataclasses import dataclass, field
from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ core –º–æ–¥—É–ª—è–º

try:
    from core.base import SecurityBase
except ImportError:
    # Fallback –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    class SecurityBase:
        def __init__(self, name, config=None):
            self.name = name
            self.config = config or {}
            self.is_active = True
            self.created_at = datetime.now()
            self.last_update = datetime.now()


class UserLevel(Enum):
    """–£—Ä–æ–≤–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""

    –ù–û–í–ò–ß–û–ö = "–Ω–æ–≤–∏—á–æ–∫"
    –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ = "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    –û–ü–´–¢–ù–´–ô = "–æ–ø—ã—Ç–Ω—ã–π"
    –≠–ö–°–ü–ï–†–¢ = "—ç–∫—Å–ø–µ—Ä—Ç"
    –ú–ê–°–¢–ï–† = "–º–∞—Å—Ç–µ—Ä"


class FunctionCategory(Enum):
    """–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π"""

    –ó–ê–©–ò–¢–ê = "–∑–∞—â–∏—Ç–∞"
    –ú–û–ù–ò–¢–û–†–ò–ù–ì = "–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"
    –ê–ù–ê–õ–ò–ó = "–∞–Ω–∞–ª–∏–∑"
    –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø = "—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
    –°–ï–ú–¨–Ø = "—Å–µ–º—å—è"
    –î–ï–¢–ò = "–¥–µ—Ç–∏"
    –°–ï–¢–¨ = "—Å–µ—Ç—å"
    –£–°–¢–†–û–ô–°–¢–í–ê = "—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"
    –î–ê–ù–ù–´–ï = "–¥–∞–Ω–Ω—ã–µ"
    –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø = "–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"


class EmotionType(Enum):
    """–¢–∏–ø—ã —ç–º–æ—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    –†–ê–î–û–°–¢–¨ = "—Ä–∞–¥–æ—Å—Ç—å"
    –£–î–ò–í–õ–ï–ù–ò–ï = "—É–¥–∏–≤–ª–µ–Ω–∏–µ"
    –°–ü–û–ö–û–ô–°–¢–í–ò–ï = "—Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ"
    –ë–ï–°–ü–û–ö–û–ô–°–¢–í–û = "–±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–æ"
    –ó–ê–ò–ù–¢–ï–†–ï–°–û–í–ê–ù–ù–û–°–¢–¨ = "–∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å"
    –°–ú–£–©–ï–ù–ò–ï = "—Å–º—É—â–µ–Ω–∏–µ"
    –ì–û–†–î–û–°–¢–¨ = "–≥–æ—Ä–¥–æ—Å—Ç—å"


@dataclass
class SecurityFunction:
    """–§—É–Ω–∫—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""

    english_name: str
    russian_name: str
    category: FunctionCategory
    description: str
    what_it_does: str
    what_protects: str
    for_users: str
    features: List[str]
    icon: str
    color: str
    difficulty: int  # 1-5 (1 - –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ, 5 - —Å–ª–æ–∂–Ω–æ)
    importance: int  # 1-5 (1 - –Ω–∏–∑–∫–∞—è, 5 - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è)


@dataclass
class UserProfile:
    """–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    user_id: str
    name: str
    level: UserLevel
    experience_points: int = 0
    achievements: List[str] = field(default_factory=list)
    favorite_functions: List[str] = field(default_factory=list)
    learned_functions: List[str] = field(default_factory=list)
    current_emotion: EmotionType = EmotionType.–°–ü–û–ö–û–ô–°–¢–í–ò–ï
    last_activity: datetime = field(default_factory=datetime.now)
    preferences: Dict[str, Any] = field(default_factory=dict)


@dataclass
class TutorialStep:
    """–®–∞–≥ —Ç—É—Ç–æ—Ä–∏–∞–ª–∞"""

    step_id: str
    title: str
    description: str
    action: str
    reward: int
    is_completed: bool = False


class MobileUserAIAgent(SecurityBase):
    """
    –ì–∏–±—Ä–∏–¥–Ω—ã–π AI –ê–≥–µ–Ω—Ç-–ë–æ—Ç –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

    –û–±—ä—è—Å–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Å—Ç—ã–º –∏ –ø–æ–Ω—è—Ç–Ω—ã–º —è–∑—ã–∫–æ–º
    –ú–æ—Ç–∏–≤–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—é
    –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
    """

    def __init__(self, name="MobileUserAIAgent", config=None):
        SecurityBase.__init__(self, name, config)

        # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π —Å–∏—Å—Ç–µ–º—ã
        self.functions_database = self._create_functions_database()

        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–æ—Ñ–∏–ª–∏
        self.user_profiles: Dict[str, UserProfile] = {}

        # –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        self.achievements = self._create_achievements_system()

        # –¢—É—Ç–æ—Ä–∏–∞–ª—ã –∏ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞
        self.tutorials = self._create_tutorials()

        # –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏
        self.emotional_responses = self._create_emotional_responses()

        # –ü—Ä–æ—Å—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã (–±–æ—Ç-—Ä–µ–∂–∏–º)
        self.quick_responses = self._create_quick_responses()

        # AI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.learning_engine = None
        self.recommendation_engine = None
        self.emotion_analyzer = None

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
        self.logger = self._setup_logger()

        self.logger.info("MobileUserAIAgent –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def _setup_logger(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞"""
        import logging

        logger = logging.getLogger(self.name)
        logger.setLevel(logging.INFO)

        if not logger.handlers:
            handler = logging.StreamHandler()
            formatter = logging.Formatter(
                "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
            )
            handler.setFormatter(formatter)
            logger.addHandler(handler)

        return logger

    def _create_functions_database(self) -> Dict[str, SecurityFunction]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π —Å–∏—Å—Ç–µ–º—ã —Å –ø—Ä–æ—Å—Ç—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏"""
        functions = {}

        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        functions["temporal_analysis"] = SecurityFunction(
            english_name="Temporal Analysis Engine",
            russian_name="–î–≤–∏–∂–æ–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞",
            category=FunctionCategory.–ê–ù–ê–õ–ò–ó,
            description="–£–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏",
            what_it_does=(
                "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤–æ –≤—Ä–µ–º–µ–Ω–∏ "
                "–¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"
            ),
            what_protects=(
                "–í—Ä–µ–º–µ–Ω–Ω—ã–µ –∞—Ç–∞–∫–∏, –Ω–µ–æ–±—ã—á–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å " "–≤ –Ω–µ–ø–æ–ª–æ–∂–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è"
            ),
            for_users="–ö–∞–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞–∂ - —Å–ª–µ–¥–∏—Ç –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é –ø–æ —á–∞—Å–∞–º",
            features=[
                "–ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
                "–î–µ—Ç–µ–∫—Ü–∏—è –Ω–µ–æ–±—ã—á–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –Ω–µ–ø–æ–ª–æ–∂–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è",
                "–ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∞—Ç–∞–∫",
                "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
                "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏",
            ],
            icon="‚è∞",
            color="#FF6B6B",
            difficulty=2,
            importance=4,
        )

        functions["threat_detection"] = SecurityFunction(
            english_name="Advanced Threat Detection",
            russian_name="–£–º–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä —É–≥—Ä–æ–∑",
            category=FunctionCategory.–ó–ê–©–ò–¢–ê,
            description="–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ–ø–∞—Å–Ω–æ—Å—Ç–µ–π",
            what_it_does=(
                "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Ö–æ–¥–∏—Ç –∏ –±–ª–æ–∫–∏—Ä—É–µ—Ç –≤—Å–µ –≤–∏–¥—ã –∫–∏–±–µ—Ä—É–≥—Ä–æ–∑"
            ),
            what_protects=(
                "–í–∏—Ä—É—Å—ã, —Ö–∞–∫–µ—Ä—Å–∫–∏–µ –∞—Ç–∞–∫–∏, —Ñ–∏—à–∏–Ω–≥, –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã"
            ),
            for_users="–ö–∞–∫ –ª–∏—á–Ω—ã–π –æ—Ö—Ä–∞–Ω–Ω–∏–∫ - –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å—Ç—Ä–∞–∂–µ",
            features=[
                "–ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —É–≥—Ä–æ–∑",
                "–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ–ø–∞—Å–Ω—ã—Ö —Å–∞–π—Ç–æ–≤",
                "–ó–∞—â–∏—Ç–∞ –æ—Ç –≤–∏—Ä—É—Å–æ–≤",
                "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏—è—Ö",
                "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ª–µ—á–µ–Ω–∏–µ –∑–∞—Ä–∞–∂–µ–Ω–∏–π",
            ],
            icon="üõ°Ô∏è",
            color="#4ECDC4",
            difficulty=1,
            importance=5,
        )

        functions["family_protection"] = SecurityFunction(
            english_name="Family Security Manager",
            russian_name="–°–µ–º–µ–π–Ω—ã–π –∑–∞—â–∏—Ç–Ω–∏–∫",
            category=FunctionCategory.–°–ï–ú–¨–Ø,
            description="–ó–∞—â–∏—Ç–∞ –≤—Å–µ–π —Å–µ–º—å–∏ –≤ –æ–¥–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏",
            what_it_does=(
                "–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤—Å–µ—Ö —á–ª–µ–Ω–æ–≤ —Å–µ–º—å–∏ "
                "–Ω–∞ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö"
            ),
            what_protects="–î–µ—Ç–µ–π –æ—Ç –æ–ø–∞—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞, —Å–µ–º—å—é –æ—Ç –∫–∏–±–µ—Ä—É–≥—Ä–æ–∑",
            for_users="–ö–∞–∫ —Å–µ–º–µ–π–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥ - –∑–∞–±–æ—Ç–∏—Ç—Å—è –æ –∫–∞–∂–¥–æ–º",
            features=[
                "–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å",
                "–ó–∞—â–∏—Ç–∞ –¥–µ—Ç–µ–π –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ",
                "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–µ–º—å–∏",
                "–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ",
                "–°–µ–º–µ–π–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
            ],
            icon="üë®‚Äçüë©‚Äçüëß‚Äçüë¶",
            color="#45B7D1",
            difficulty=2,
            importance=5,
        )

        functions["vpn_protection"] = SecurityFunction(
            english_name="VPN Security System",
            russian_name="–ó–∞—â–∏—Ç–Ω—ã–π —Ç—É–Ω–Ω–µ–ª—å",
            category=FunctionCategory.–°–ï–¢–¨,
            description="–ù–µ–≤–∏–¥–∏–º—ã–π —â–∏—Ç –¥–ª—è –≤–∞—à–µ–≥–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞",
            what_it_does="–°–æ–∑–¥–∞–µ—Ç –∑–∞—â–∏—â–µ–Ω–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º",
            what_protects="–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ, –∫—Ä–∞–∂–∞ –¥–∞–Ω–Ω—ã—Ö, –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å–∞–π—Ç–æ–≤",
            for_users="–ö–∞–∫ –Ω–µ–≤–∏–¥–∏–º—ã–π –ø–ª–∞—â - —Å–∫—Ä—ã–≤–∞–µ—Ç –≤–∞—à—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
            features=[
                "–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞",
                "–°–º–µ–Ω–∞ IP-–∞–¥—Ä–µ—Å–∞",
                "–û–±—Ö–æ–¥ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫",
                "–ó–∞—â–∏—Ç–∞ –≤ –ø—É–±–ª–∏—á–Ω—ã—Ö —Å–µ—Ç—è—Ö",
                "–ê–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ",
            ],
            icon="üîí",
            color="#96CEB4",
            difficulty=2,
            importance=4,
        )

        functions["antivirus"] = SecurityFunction(
            english_name="Antivirus Protection",
            russian_name="–ê–Ω—Ç–∏–≤–∏—Ä—É—Å–Ω—ã–π —â–∏—Ç",
            category=FunctionCategory.–ó–ê–©–ò–¢–ê,
            description="–ú–æ—â–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –≤–∏—Ä—É—Å–æ–≤ –∏ –≤—Ä–µ–¥–æ–Ω–æ—Å–æ–≤",
            what_it_does="–°–∫–∞–Ω–∏—Ä—É–µ—Ç –∏ —É–¥–∞–ª—è–µ—Ç –≤—Å–µ –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã",
            what_protects="–í–∏—Ä—É—Å—ã, —Ç—Ä–æ—è–Ω—ã, —à–ø–∏–æ–Ω—Å–∫–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã, —Ä–µ–∫–ª–∞–º–Ω–æ–µ –ü–û",
            for_users="–ö–∞–∫ –≤—Ä–∞—á –¥–ª—è –≤–∞—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ - –ª–µ—á–∏—Ç –∏ –∑–∞—â–∏—â–∞–µ—Ç",
            features=[
                "–†–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è",
                "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —É–≥—Ä–æ–∑",
                "–ö–∞—Ä–∞–Ω—Ç–∏–Ω –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤",
                "–û—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã",
                "–ó–∞—â–∏—Ç–∞ –æ—Ç —Ñ–∏—à–∏–Ω–≥–∞",
            ],
            icon="üíä",
            color="#FFEAA7",
            difficulty=1,
            importance=5,
        )

        functions["behavioral_analysis"] = SecurityFunction(
            english_name="Behavioral Analysis Engine",
            russian_name="–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø–æ–≤–µ–¥–µ–Ω–∏—è",
            category=FunctionCategory.–ê–ù–ê–õ–ò–ó,
            description="–£–º–Ω—ã–π –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å –∑–∞ –ø–æ–≤–µ–¥–µ–Ω–∏–µ–º",
            what_it_does=(
                "–ò–∑—É—á–∞–µ—Ç –ø—Ä–∏–≤—ã—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –Ω–∞—Ö–æ–¥–∏—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è"
            ),
            what_protects=(
                "–ö—Ä–∞–∂–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤, –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, –∞–Ω–æ–º–∞–ª–∏–∏"
            ),
            for_users="–ö–∞–∫ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–π –¥—Ä—É–≥ - –∑–∞–º–µ—á–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è",
            features=[
                "–ò–∑—É—á–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                "–í—ã—è–≤–ª–µ–Ω–∏–µ –Ω–µ–æ–±—ã—á–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è",
                "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
                "–ê–¥–∞–ø—Ç–∞—Ü–∏—è –∫ –Ω–æ–≤—ã–º –ø—Ä–∏–≤—ã—á–∫–∞–º",
                "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
            ],
            icon="üëÅÔ∏è",
            color="#DDA0DD",
            difficulty=3,
            importance=4,
        )

        functions["data_encryption"] = SecurityFunction(
            english_name="Data Encryption Manager",
            russian_name="–®–∏—Ñ—Ä–æ–≤–∞–ª—å—â–∏–∫ –¥–∞–Ω–Ω—ã—Ö",
            category=FunctionCategory.–î–ê–ù–ù–´–ï,
            description="–ù–µ–ø—Ä–∏—Å—Ç—É–ø–Ω–∞—è –∑–∞—â–∏—Ç–∞ –≤–∞—à–∏—Ö —Ñ–∞–π–ª–æ–≤",
            what_it_does="–®–∏—Ñ—Ä—É–µ—Ç –≤—Å–µ –≤–∞–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ",
            what_protects=(
                "–ö—Ä–∞–∂–∞ –¥–∞–Ω–Ω—ã—Ö, —É—Ç–µ—á–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø"
            ),
            for_users="–ö–∞–∫ —Å–µ–π—Ñ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ - —Ö—Ä–∞–Ω–∏—Ç –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
            features=[
                "–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫",
                "–ó–∞—â–∏—Ç–∞ –ø–∞—Ä–æ–ª–µ–π",
                "–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
                "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ",
                "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞",
            ],
            icon="üîê",
            color="#98D8C8",
            difficulty=3,
            importance=5,
        )

        functions["network_monitor"] = SecurityFunction(
            english_name="Network Security Monitor",
            russian_name="–°–µ—Ç–µ–≤–æ–π —Å—Ç—Ä–∞–∂",
            category=FunctionCategory.–ú–û–ù–ò–¢–û–†–ò–ù–ì,
            description="–ë–¥–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ö—Ä–∞–Ω–Ω–∏–∫ –≤–∞—à–µ–π —Å–µ—Ç–∏",
            what_it_does="–°–ª–µ–¥–∏—Ç –∑–∞ –≤—Å–µ–º–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É",
            what_protects=(
                "–í–∑–ª–æ–º—ã —Å–µ—Ç–∏, –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, —É—Ç–µ—á–∫–∏ –¥–∞–Ω–Ω—ã—Ö"
            ),
            for_users="–ö–∞–∫ –æ—Ö—Ä–∞–Ω–Ω–∏–∫ –¥–æ–º–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ—Ö –≥–æ—Å—Ç–µ–π",
            features=[
                "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ç–µ–≤–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞",
                "–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π",
                "–ê–Ω–∞–ª–∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–µ—Ç–∏",
                "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö",
                "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ç–∏",
            ],
            icon="üåê",
            color="#F7DC6F",
            difficulty=2,
            importance=4,
        )

        functions["child_safety"] = SecurityFunction(
            english_name="Child Safety Manager",
            russian_name="–î–µ—Ç—Å–∫–∏–π –∑–∞—â–∏—Ç–Ω–∏–∫",
            category=FunctionCategory.–î–ï–¢–ò,
            description="–ó–∞–±–æ—Ç–ª–∏–≤—ã–π –Ω—è–Ω—è –¥–ª—è –¥–µ—Ç–µ–π –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ",
            what_it_does="–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –¥–µ—Ç–µ–π –≤ —Ü–∏—Ñ—Ä–æ–≤–æ–º –º–∏—Ä–µ",
            what_protects="–û–ø–∞—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç, –Ω–µ–∑–Ω–∞–∫–æ–º—Ü—ã, –∫–∏–±–µ—Ä–±—É–ª–ª–∏–Ω–≥",
            for_users="–ö–∞–∫ –∑–∞–±–æ—Ç–ª–∏–≤–∞—è –Ω—è–Ω—è - –≤—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º —Å —Ä–µ–±–µ–Ω–∫–æ–º",
            features=[
                "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É",
                "–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ–ø–∞—Å–Ω—ã—Ö —Å–∞–π—Ç–æ–≤",
                "–ö–æ–Ω—Ç—Ä–æ–ª—å –≤—Ä–µ–º–µ–Ω–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è",
                "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ–±—â–µ–Ω–∏—è",
                "–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã",
            ],
            icon="üë∂",
            color="#FFB6C1",
            difficulty=1,
            importance=5,
        )

        functions["notification_system"] = SecurityFunction(
            english_name="Smart Notification System",
            russian_name="–£–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
            category=FunctionCategory.–£–í–ï–î–û–ú–õ–ï–ù–ò–Ø,
            description="–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π",
            what_it_does="–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∞–∂–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –Ω—É–∂–Ω–æ–µ –≤—Ä–µ–º—è",
            what_protects="–ü—Ä–æ–ø—É—Å–∫ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∞",
            for_users="–ö–∞–∫ –ª–∏—á–Ω—ã–π —Å–µ–∫—Ä–µ—Ç–∞—Ä—å - –Ω–∞–ø–æ–º–∏–Ω–∞–µ—Ç –æ –≤–∞–∂–Ω–æ–º",
            features=[
                "–£–º–Ω–∞—è –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
                "–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏",
                "–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π",
                "–¢–∏—Ö–∏–µ —á–∞—Å—ã",
                "–ê–Ω–∞–ª–∏–∑ –≤–∞–∂–Ω–æ—Å—Ç–∏",
            ],
            icon="üì¢",
            color="#87CEEB",
            difficulty=1,
            importance=3,
        )

        return functions

    def _create_achievements_system(self) -> Dict[str, Dict[str, Any]]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
        return {
            "–ø–µ—Ä–≤—ã–π_—à–∞–≥": {
                "name": "–ü–µ—Ä–≤—ã–π —à–∞–≥",
                "description": "–ò–∑—É—á–∏–ª–∏ –ø–µ—Ä–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
                "icon": "üéØ",
                "points": 10,
                "requirement": "learned_functions >= 1",
            },
            "–∑–∞—â–∏—Ç–Ω–∏–∫": {
                "name": "–ó–∞—â–∏—Ç–Ω–∏–∫",
                "description": "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ 5 —Ñ—É–Ω–∫—Ü–∏–π –∑–∞—â–∏—Ç—ã",
                "icon": "üõ°Ô∏è",
                "points": 50,
                "requirement": "active_functions >= 5",
            },
            "—Å–µ–º–µ–π–Ω—ã–π_–≥–µ—Ä–æ–π": {
                "name": "–°–µ–º–µ–π–Ω—ã–π –≥–µ—Ä–æ–π",
                "description": "–ù–∞—Å—Ç—Ä–æ–∏–ª–∏ –∑–∞—â–∏—Ç—É –¥–ª—è –≤—Å–µ–π —Å–µ–º—å–∏",
                "icon": "üë®‚Äçüë©‚Äçüëß‚Äçüë¶",
                "points": 100,
                "requirement": "family_protection_active == True",
            },
            "—ç–∫—Å–ø–µ—Ä—Ç_–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏": {
                "name": "–≠–∫—Å–ø–µ—Ä—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
                "description": "–ò–∑—É—á–∏–ª–∏ –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã",
                "icon": "üéì",
                "points": 200,
                "requirement": "learned_functions >= 10",
            },
            "–º–∞—Å—Ç–µ—Ä_–∑–∞—â–∏—Ç—ã": {
                "name": "–ú–∞—Å—Ç–µ—Ä –∑–∞—â–∏—Ç—ã",
                "description": "–î–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –∑–∞—â–∏—Ç—ã",
                "icon": "üëë",
                "points": 500,
                "requirement": "security_level == 5",
            },
        }

    def _create_tutorials(self) -> Dict[str, List[TutorialStep]]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç—É—Ç–æ—Ä–∏–∞–ª–æ–≤"""
        return {
            "–ø–µ—Ä–≤–æ–µ_–∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ": [
                TutorialStep(
                    step_id="welcome",
                    title="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
                    description="–î–∞–≤–∞–π—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è —Å —Å–∏—Å—Ç–µ–º–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
                    action="–ù–∞–∂–º–∏—Ç–µ '–î–∞–ª–µ–µ' —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å",
                    reward=5,
                ),
                TutorialStep(
                    step_id="explore_functions",
                    title="–ò–∑—É—á–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏",
                    description="–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞—â–∏—Ç—ã",
                    action="–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ª—é–±—É—é —Ñ—É–Ω–∫—Ü–∏—é",
                    reward=10,
                ),
                TutorialStep(
                    step_id="activate_protection",
                    title="–ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –∑–∞—â–∏—Ç—É",
                    description="–í–∫–ª—é—á–∏—Ç–µ –ø–µ—Ä–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –∑–∞—â–∏—Ç—ã",
                    action="–ù–∞–∂–º–∏—Ç–µ '–í–∫–ª—é—á–∏—Ç—å' –Ω–∞ –ª—é–±–æ–π —Ñ—É–Ω–∫—Ü–∏–∏",
                    reward=15,
                ),
            ],
            "–Ω–∞—Å—Ç—Ä–æ–π–∫–∞_—Å–µ–º—å–∏": [
                TutorialStep(
                    step_id="add_family_member",
                    title="–î–æ–±–∞–≤—å—Ç–µ —á–ª–µ–Ω–∞ —Å–µ–º—å–∏",
                    description="–°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è —á–ª–µ–Ω–∞ —Å–µ–º—å–∏",
                    action="–ù–∞–∂–º–∏—Ç–µ '–î–æ–±–∞–≤–∏—Ç—å —á–ª–µ–Ω–∞ —Å–µ–º—å–∏'",
                    reward=20,
                ),
                TutorialStep(
                    step_id="set_parental_controls",
                    title="–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å",
                    description="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –¥–µ—Ç–µ–π",
                    action="–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–µ—Ç–µ–π",
                    reward=25,
                ),
            ],
        }

    def _create_emotional_responses(self) -> Dict[EmotionType, List[str]]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∞–∫—Ü–∏–π"""
        return {
            EmotionType.–†–ê–î–û–°–¢–¨: [
                "–û—Ç–ª–∏—á–Ω–æ! –í—ã –¥–µ–ª–∞–µ—Ç–µ –±–æ–ª—å—à–∏–µ —É—Å–ø–µ—Ö–∏! üéâ",
                "–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ! –í–∞—à–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤ –Ω–∞–¥–µ–∂–Ω—ã—Ö —Ä—É–∫–∞—Ö! ‚ú®",
                "–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! –í—ã —Å—Ç–∞–Ω–æ–≤–∏—Ç–µ—Å—å –Ω–∞—Å—Ç–æ—è—â–∏–º —ç–∫—Å–ø–µ—Ä—Ç–æ–º! üåü",
            ],
            EmotionType.–£–î–ò–í–õ–ï–ù–ò–ï: [
                "–í–∞—É! –í—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ —É–∑–Ω–∞–ª–∏ —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ! üò≤",
                "–ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ! –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∫—Ä—É—Ç–∞—è! ü§©",
                "–ü–æ—Ç—Ä—è—Å–∞—é—â–µ! –í—ã –æ—Ç–∫—Ä—ã–ª–∏ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –∑–∞—â–∏—Ç—ã! üöÄ",
            ],
            EmotionType.–°–ü–û–ö–û–ô–°–¢–í–ò–ï: [
                "–í—Å–µ —Ö–æ—Ä–æ—à–æ, –≤—ã –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ üòå",
                "–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ, –º–æ–∂–µ—Ç–µ —Ä–∞—Å—Å–ª–∞–±–∏—Ç—å—Å—è üõ°Ô∏è",
                "–í–∞—à–∞ –∑–∞—â–∏—Ç–∞ –∞–∫—Ç–∏–≤–Ω–∞, –±–µ—Å–ø–æ–∫–æ–∏—Ç—å—Å—è –Ω–µ –æ —á–µ–º üßò‚Äç‚ôÄÔ∏è",
            ],
            EmotionType.–ë–ï–°–ü–û–ö–û–ô–°–¢–í–û: [
                "–ù–µ –≤–æ–ª–Ω—É–π—Ç–µ—Å—å, —è –ø–æ–º–æ–≥—É –≤–∞–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è! ü§ó",
                "–í—Å–µ –±—É–¥–µ—Ç —Ö–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π—Ç–µ —Ä–µ—à–∏–º —ç—Ç–æ –≤–º–µ—Å—Ç–µ! üí™",
                "–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º! –ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ! üÜò",
            ],
            EmotionType.–ó–ê–ò–ù–¢–ï–†–ï–°–û–í–ê–ù–ù–û–°–¢–¨: [
                "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –†–∞—Å—Å–∫–∞–∂—É –≤–∞–º –±–æ–ª—å—à–µ –æ–± —ç—Ç–æ–º! ü§î",
                "–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ! üí°",
                "–õ—é–±–æ–ø—ã—Ç–Ω–æ! –ü–æ–∫–∞–∂—É –≤–∞–º, –∫–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç! üîç",
            ],
            EmotionType.–°–ú–£–©–ï–ù–ò–ï: [
                "–ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ, –≤—Å–µ —Å —á–µ–≥–æ-—Ç–æ –Ω–∞—á–∏–Ω–∞—é—Ç! üòä",
                "–≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ! –Ø –æ–±—ä—è—Å–Ω—é –≤—Å–µ –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏! üìö",
                "–ù–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å! –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å! ü§ù",
            ],
            EmotionType.–ì–û–†–î–û–°–¢–¨: [
                "–í—ã –º–æ–ª–æ–¥–µ—Ü! –ì–æ—Ä–∂—É—Å—å –≤–∞—à–∏–º–∏ —É—Å–ø–µ—Ö–∞–º–∏! üèÜ",
                "–ü–æ—Ç—Ä—è—Å–∞—é—â–µ! –í—ã –Ω–∞—Å—Ç–æ—è—â–∏–π –º–∞—Å—Ç–µ—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏! üéñÔ∏è",
                "–í–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ! –í—ã —Å—Ç–∞–ª–∏ –ø—Ä–∏–º–µ—Ä–æ–º –¥–ª—è –¥—Ä—É–≥–∏—Ö! üëë",
            ],
        }

    def _create_quick_responses(self) -> Dict[str, str]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ (–±–æ—Ç-—Ä–µ–∂–∏–º)"""
        return {
            "–ø—Ä–∏–≤–µ—Ç": (
                "–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏! –ö–∞–∫ –¥–µ–ª–∞? üòä"
            ),
            "–ø–æ–º–æ—â—å": (
                "–ö–æ–Ω–µ—á–Ω–æ! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? –í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –∏–ª–∏ "
                "–∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å! ü§ù"
            ),
            "—Ñ—É–Ω–∫—Ü–∏–∏": (
                "–£ –Ω–∞—Å –µ—Å—Ç—å –º–Ω–æ–≥–æ –∫—Ä—É—Ç—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π! –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –Ω–∏–∂–µ! üìã"
            ),
            "–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å": (
                "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å - —ç—Ç–æ –≤–∞–∂–Ω–æ! –î–∞–≤–∞–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏–º –∑–∞—â–∏—Ç—É! üõ°Ô∏è"
            ),
            "—Å–µ–º—å—è": (
                "–ó–∞—â–∏—Ç–∞ —Å–µ–º—å–∏ - –Ω–∞—à –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç! –ü–æ–∫–∞–∂—É, –∫–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å! üë®‚Äçüë©‚Äçüëß‚Äçüë¶"
            ),
            "—Å–ø–∞—Å–∏–±–æ": (
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –†–∞–¥ –ø–æ–º–æ—á—å! –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –µ—â–µ - –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å! üòä"
            ),
            "–ø–æ–∫–∞": "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –ë–µ—Ä–µ–≥–∏—Ç–µ —Å–µ–±—è –∏ –±—É–¥—å—Ç–µ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏! üëã",
        }

    def get_function_info(
        self, function_key: str, user_id: str = None
    ) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º"""
        if function_key not in self.functions_database:
            return {"error": "–§—É–Ω–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}

        function = self.functions_database[function_key]
        user_profile = self.user_profiles.get(user_id)

        # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø–æ–¥ —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_profile and user_profile.level == UserLevel.–ù–û–í–ò–ß–û–ö:
            explanation = self._simplify_explanation(function, "–Ω–æ–≤–∏—á–æ–∫")
        elif user_profile and user_profile.level == UserLevel.–≠–ö–°–ü–ï–†–¢:
            explanation = self._detailed_explanation(function, "—ç–∫—Å–ø–µ—Ä—Ç")
        else:
            explanation = self._standard_explanation(function)

        return {
            "russian_name": function.russian_name,
            "icon": function.icon,
            "color": function.color,
            "explanation": explanation,
            "difficulty": function.difficulty,
            "importance": function.importance,
            "features": function.features,
        }

    def _simplify_explanation(
        self, function: SecurityFunction, level: str
    ) -> str:
        """–£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤"""
        explanations = {
            "temporal_analysis": (
                f"üïê {function.russian_name} - —ç—Ç–æ –∫–∞–∫ —É–º–Ω—ã–µ —á–∞—Å—ã –¥–ª—è –≤–∞—à–µ–≥–æ "
                f"–∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞! –û–Ω —Å–ª–µ–¥–∏—Ç, –∫–æ–≥–¥–∞ –≤—ã –æ–±—ã—á–Ω–æ –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å "
                f"—Ç–µ–ª–µ—Ñ–æ–Ω–æ–º, "
                f"–∏ –µ—Å–ª–∏ –∑–∞–º–µ—Ç–∏—Ç —á—Ç–æ-—Ç–æ —Å—Ç—Ä–∞–Ω–Ω–æ–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫—Ç–æ-—Ç–æ –∑–∞—Ö–æ–¥–∏—Ç –≤ "
                f"–≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–æ—á—å—é), —Å—Ä–∞–∑—É –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç!"
            ),
            "threat_detection": (
                f"üõ°Ô∏è {function.russian_name} - —ç—Ç–æ –∫–∞–∫ –æ—Ö—Ä–∞–Ω–Ω–∏–∫ –¥–ª—è –≤–∞—à–µ–≥–æ "
                f"—Ç–µ–ª–µ—Ñ–æ–Ω–∞! –û–Ω –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –∏—â–µ—Ç –≤–∏—Ä—É—Å—ã –∏ –æ–ø–∞—Å–Ω–æ—Å—Ç–∏, –∏ –µ—Å–ª–∏ "
                f"—á—Ç–æ-—Ç–æ –Ω–∞–π–¥–µ—Ç, —Å—Ä–∞–∑—É –∑–∞–±–ª–æ–∫–∏—Ä—É–µ—Ç!"
            ),
            "family_protection": (
                f"üë®‚Äçüë©‚Äçüëß‚Äçüë¶ {function.russian_name} - —ç—Ç–æ –∫–∞–∫ –Ω—è–Ω—è –¥–ª—è –≤—Å–µ–π "
                f"—Å–µ–º—å–∏! –û–Ω —Å–ª–µ–¥–∏—Ç, —á—Ç–æ–±—ã –¥–µ—Ç–∏ –Ω–µ –ø–æ–ø–∞–ª–∏ –Ω–∞ –ø–ª–æ—Ö–∏–µ —Å–∞–π—Ç—ã, "
                f"–∞ –≤–∑—Ä–æ—Å–ª—ã–µ –±—ã–ª–∏ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏!"
            ),
            "vpn_protection": (
                f"üîí {function.russian_name} - —ç—Ç–æ –∫–∞–∫ –Ω–µ–≤–∏–¥–∏–º—ã–π –ø–ª–∞—â –¥–ª—è "
                f"–∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞! –û–Ω —Å–∫—Ä—ã–≤–∞–µ—Ç, —á—Ç–æ –≤—ã –¥–µ–ª–∞–µ—Ç–µ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ, "
                f"—á—Ç–æ–±—ã –Ω–∏–∫—Ç–æ –Ω–µ –º–æ–≥ –ø–æ–¥—Å–º–æ—Ç—Ä–µ—Ç—å!"
            ),
            "antivirus": (
                f"üíä {function.russian_name} - —ç—Ç–æ –∫–∞–∫ –≤—Ä–∞—á –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞! "
                f"–û–Ω –ª–µ—á–∏—Ç –≤–∏—Ä—É—Å—ã –∏ –Ω–µ –¥–∞–µ—Ç –∏–º –∑–∞—Ä–∞–∑–∏—Ç—å –≤–∞—à–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ!"
            ),
        }
        return explanations.get(
            function.english_name.lower().replace(" ", "_"),
            f"ü§ñ {function.russian_name} - {function.for_users}",
        )

    def _standard_explanation(self, function: SecurityFunction) -> str:
        """–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ"""
        return (
            f"ü§ñ **{function.russian_name}**\n\n"
            f"**–ß—Ç–æ –¥–µ–ª–∞–µ—Ç:** {function.what_it_does}\n\n"
            f"**–û—Ç —á–µ–≥–æ –∑–∞—â–∏—â–∞–µ—Ç:** {function.what_protects}\n\n"
            f"**–î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:** {function.for_users}"
        )

    def _detailed_explanation(
        self, function: SecurityFunction, level: str
    ) -> str:
        """–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–æ–≤"""
        return (
            f"üî¨ **{function.russian_name}** "
            f"(–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {function.english_name})\n\n"
            f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {function.description}\n\n"
            f"**–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:** {function.what_it_does}\n\n"
            f"**–ó–∞—â–∏—Ç–∞ –æ—Ç:** {function.what_protects}\n\n"
            f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å:** {function.for_users}\n\n"
            f"**–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**\n"
            + "\n".join([f"‚Ä¢ {feature}" for feature in function.features])
        )

    def explain_function(self, function_key: str, user_id: str = None) -> str:
        """–û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        function_info = self.get_function_info(function_key, user_id)

        if "error" in function_info:
            return f"‚ùå {function_info['error']}"

        # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é —Ä–µ–∞–∫—Ü–∏—é
        emotion_response = self._get_emotional_response(user_id)

        return f"{emotion_response}\n\n{function_info['explanation']}"

    def _get_emotional_response(self, user_id: str = None) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π —Ä–µ–∞–∫—Ü–∏–∏"""
        if not user_id or user_id not in self.user_profiles:
            return random.choice(
                self.emotional_responses[EmotionType.–°–ü–û–ö–û–ô–°–¢–í–ò–ï]
            )

        user_profile = self.user_profiles[user_id]
        responses = self.emotional_responses.get(
            user_profile.current_emotion,
            self.emotional_responses[EmotionType.–°–ü–û–ö–û–ô–°–¢–í–ò–ï],
        )
        return random.choice(responses)

    def get_all_functions_simple(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º"""
        functions_list = []

        for key, function in self.functions_database.items():
            functions_list.append(
                {
                    "key": key,
                    "russian_name": function.russian_name,
                    "icon": function.icon,
                    "color": function.color,
                    "category": function.category.value,
                    "difficulty": function.difficulty,
                    "importance": function.importance,
                    "simple_description": function.for_users,
                }
            )

        return functions_list

    def get_functions_by_category(
        self, category: FunctionCategory
    ) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        return [
            func
            for func in self.get_all_functions_simple()
            if func["category"] == category.value
        ]

    def get_recommended_functions(self, user_id: str) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id not in self.user_profiles:
            return self.get_all_functions_simple()[:5]  # –ü–µ—Ä–≤—ã–µ 5 —Ñ—É–Ω–∫—Ü–∏–π

        user_profile = self.user_profiles[user_id]

        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        if user_profile.level == UserLevel.–ù–û–í–ò–ß–û–ö:
            # –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø—Ä–æ—Å—Ç—ã–µ –∏ –≤–∞–∂–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
            return [
                func
                for func in self.get_all_functions_simple()
                if func["difficulty"] <= 2 and func["importance"] >= 4
            ]
        elif user_profile.level == UserLevel.–≠–ö–°–ü–ï–†–¢:
            # –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Å–ª–æ–∂–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
            return [
                func
                for func in self.get_all_functions_simple()
                if func["difficulty"] >= 3
            ]
        else:
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            return [
                func
                for func in self.get_all_functions_simple()
                if func["importance"] >= 3
            ]

    def create_user_profile(self, user_id: str, name: str) -> UserProfile:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        profile = UserProfile(
            user_id=user_id, name=name, level=UserLevel.–ù–û–í–ò–ß–û–ö
        )
        self.user_profiles[user_id] = profile
        return profile

    def get_user_profile(self, user_id: str) -> Optional[UserProfile]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return self.user_profiles.get(user_id)

    def update_user_emotion(self, user_id: str, emotion: EmotionType):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–º–æ—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id in self.user_profiles:
            self.user_profiles[user_id].current_emotion = emotion

    def add_experience(self, user_id: str, points: int):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø—ã—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        if user_id in self.user_profiles:
            self.user_profiles[user_id].experience_points += points
            self._check_level_up(user_id)

    def _check_level_up(self, user_id: str):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è"""
        profile = self.user_profiles[user_id]

        if (
            profile.experience_points >= 500
            and profile.level != UserLevel.–ú–ê–°–¢–ï–†
        ):
            profile.level = UserLevel.–ú–ê–°–¢–ï–†
            self._unlock_achievement(user_id, "–º–∞—Å—Ç–µ—Ä_–∑–∞—â–∏—Ç—ã")
        elif (
            profile.experience_points >= 200
            and profile.level != UserLevel.–≠–ö–°–ü–ï–†–¢
        ):
            profile.level = UserLevel.–≠–ö–°–ü–ï–†–¢
            self._unlock_achievement(user_id, "—ç–∫—Å–ø–µ—Ä—Ç_–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
        elif (
            profile.experience_points >= 100
            and profile.level != UserLevel.–û–ü–´–¢–ù–´–ô
        ):
            profile.level = UserLevel.–û–ü–´–¢–ù–´–ô
        elif (
            profile.experience_points >= 50
            and profile.level != UserLevel.–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨
        ):
            profile.level = UserLevel.–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨

    def _unlock_achievement(self, user_id: str, achievement_key: str):
        """–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"""
        if (
            user_id in self.user_profiles
            and achievement_key in self.achievements
        ):
            profile = self.user_profiles[user_id]
            if achievement_key not in profile.achievements:
                profile.achievements.append(achievement_key)
                achievement = self.achievements[achievement_key]
                self.add_experience(user_id, achievement["points"])
                return (
                    f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "
                    f"'{achievement['name']}'!"
                )
        return None

    def get_quick_response(self, message: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (–±–æ—Ç-—Ä–µ–∂–∏–º)"""
        message_lower = message.lower().strip()

        # –ü–æ–∏—Å–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        for key, response in self.quick_responses.items():
            if key in message_lower:
                return response

        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—â–∏–π –æ—Ç–≤–µ—Ç
        return (
            "–ù–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª, —á—Ç–æ –≤—ã –∏–º–µ–µ—Ç–µ –≤ –≤–∏–¥—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å "
            "–ø–æ-–¥—Ä—É–≥–æ–º—É –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞! ü§î"
        )

    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–≥–µ–Ω—Ç–∞"""
        return {
            "name": self.name,
            "status": "RUNNING" if self.is_active else "STOPPED",
            "total_functions": len(self.functions_database),
            "total_users": len(self.user_profiles),
            "created_at": self.created_at.isoformat(),
            "last_update": self.last_update.isoformat(),
        }


def main():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MobileUserAIAgent"""
    print("ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MobileUserAIAgent")
    print("=" * 50)

    # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞
    agent = MobileUserAIAgent()

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = "test_user_123"
    agent.create_user_profile(user_id, "–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π
    print("\nüìö –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π:")
    print("-" * 30)

    test_functions = [
        "temporal_analysis",
        "threat_detection",
        "family_protection",
    ]

    for func_key in test_functions:
        print(f"\nüîç –§—É–Ω–∫—Ü–∏—è: {func_key}")
        explanation = agent.explain_function(func_key, user_id)
        print(explanation)
        print("-" * 50)

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã
    print("\nüí¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤:")
    print("-" * 30)

    test_messages = ["–ø—Ä–∏–≤–µ—Ç", "–ø–æ–º–æ—â—å", "—Ñ—É–Ω–∫—Ü–∏–∏", "—Å–ø–∞—Å–∏–±–æ"]

    for message in test_messages:
        response = agent.get_quick_response(message)
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message}")
        print(f"–ê–≥–µ–Ω—Ç: {response}")
        print()

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π
    print("\nüìã –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:")
    print("-" * 30)

    all_functions = agent.get_all_functions_simple()
    for func in all_functions:
        print(
            f"{func['icon']} {func['russian_name']} - "
            f"{func['simple_description']}"
        )

    print(f"\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π: {len(all_functions)}")


if __name__ == "__main__":
    main()
