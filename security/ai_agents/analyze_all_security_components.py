#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ú–ê–°–°–û–í–´–ô –ê–ù–ê–õ–ò–ó –í–°–ï–• –ö–û–ú–ü–û–ù–ï–ù–¢–û–í –°–ò–°–¢–ï–ú–´ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò ALADDIN
–ù–∞—Ö–æ–¥–∏—Ç –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –í–°–ï —Ñ–∞–π–ª—ã —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:
- –ú–µ–Ω–µ–¥–∂–µ—Ä—ã (8 –∫–ª–∞—Å—Å–æ–≤)
- –ê–≥–µ–Ω—Ç—ã (8 –∫–ª–∞—Å—Å–æ–≤)
- –ë–æ—Ç—ã (8 –∫–ª–∞—Å—Å–æ–≤)
- SFM (Safe Function Manager)
- –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
"""

import json
import os
from typing import List, Dict, Any
import sys
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ sys.path –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

try:
    from security_quality_analyzer import security_quality_analyzer
except ImportError:
    print("‚ö†Ô∏è –ú–æ–¥—É–ª—å security_quality_analyzer –Ω–µ –Ω–∞–π–¥–µ–Ω")
    security_quality_analyzer = None


class SecurityComponentAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""

    def __init__(self, base_path: str = None):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        self.base_path = base_path or os.path.dirname(os.path.abspath(__file__))
        self.security_components = []
        self.analysis_results = {}
        self.start_time = None

    def find_all_components(self) -> List[str]:
        """–ü–æ–∏—Å–∫ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        components = []

        # –ü–æ–∏—Å–∫ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        security_dirs = ['security', 'managers', 'agents', 'bots']

        for dir_name in security_dirs:
            dir_path = os.path.join(self.base_path, dir_name)
            if os.path.exists(dir_path):
                for root, dirs, files in os.walk(dir_path):
                    for file in files:
                        if file.endswith('.py') and not file.startswith('__'):
                            file_path = os.path.join(root, file)
                            components.append(file_path)

        self.security_components = components
        return components

    def analyze_components(self) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        self.start_time = datetime.now()

        if not self.security_components:
            self.find_all_components()

        results = {
            'total_components': len(self.security_components),
            'analyzed_components': 0,
            'analysis_time': 0,
            'components_data': {}
        }

        for component in self.security_components:
            try:
                component_data = self._analyze_single_component(component)
                results['components_data'][component] = component_data
                results['analyzed_components'] += 1
            except Exception as e:
                results['components_data'][component] = {'error': str(e)}

        results['analysis_time'] = (datetime.now() - self.start_time).total_seconds()
        return results

    def _analyze_single_component(self, component_path: str) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
        try:
            with open(component_path, 'r', encoding='utf-8') as f:
                content = f.read()

            # –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
            lines = content.split('\n')
            total_lines = len(lines)
            code_lines = len([line for line in lines if line.strip() and not line.strip().startswith('#')])

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–ª–∞—Å—Å—ã
            has_classes = 'class ' in content
            has_init = 'def __init__' in content

            return {
                'total_lines': total_lines,
                'code_lines': code_lines,
                'has_classes': has_classes,
                'has_init': has_init,
                'file_size': os.path.getsize(component_path)
            }

        except Exception as e:
            return {'error': str(e)}


def find_security_components():
    """–ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏."""
    security_components = []

    # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    security_dirs = [
        "security/",
        "security/ai_agents/",
        "security/bots/",
        "security/managers/",
        "security/agents/",
        "security/config/",
        "security/architecture/",
    ]

    for security_dir in security_dirs:
        if os.path.exists(security_dir):
            for root, dirs, files in os.walk(security_dir):
                for file in files:
                    if file.endswith(".py") and not any(
                        exclude in file.lower()
                        for exclude in [
                            "backup",
                            "script",
                            "test",
                            "temp",
                            "old",
                        ]
                    ):
                        file_path = os.path.join(root, file)
                        security_components.append(file_path)

    return security_components


def analyze_all_security_components():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏."""
    print("üõ°Ô∏è –ú–ê–°–°–û–í–´–ô –ê–ù–ê–õ–ò–ó –í–°–ï–• –ö–û–ú–ü–û–ù–ï–ù–¢–û–í –°–ò–°–¢–ï–ú–´ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò ALADDIN")
    print("=" * 80)

    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    components = find_security_components()

    if not components:
        print("‚ùå –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return

    print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(components)} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:")
    for i, component in enumerate(components, 1):
        print(f"   {i}. {component}")
    print()

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
    results = []
    total_score = 0
    successful_analyses = 0

    for i, component in enumerate(components, 1):
        print(f"üìä –ê–Ω–∞–ª–∏–∑ {i}/{len(components)}: {component}")
        try:
            result = security_quality_analyzer(component)
            if "error" not in result:
                results.append(result)
                total_score += result.get("overall_quality_score", 0)
                successful_analyses += 1
                print(f"   ‚úÖ –ë–∞–ª–ª: {result.get('overall_quality_score', 0)}")
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {result['error']}")
        except Exception as e:
            print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        print()

    # –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç
    if successful_analyses > 0:
        average_score = total_score / successful_analyses

        print("üìä –°–í–û–î–ù–´–ô –û–¢–ß–ï–¢ –ü–û –°–ò–°–¢–ï–ú–ï –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò:")
        print("=" * 50)
        print(f"üìÅ –í—Å–µ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {len(components)}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {successful_analyses}")
        print(f"‚ùå –û—à–∏–±–æ–∫ –∞–Ω–∞–ª–∏–∑–∞: {len(components) - successful_analyses}")
        print(f"üìä –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –∫–∞—á–µ—Å—Ç–≤–∞: {average_score:.1f}/100")
        print()

        # –¢–æ–ø-5 –ª—É—á—à–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        if results:
            sorted_results = sorted(
                results,
                key=lambda x: x.get("overall_quality_score", 0),
                reverse=True,
            )
            print("üèÜ –¢–û–ü-5 –õ–£–ß–®–ò–• –ö–û–ú–ü–û–ù–ï–ù–¢–û–í:")
            for i, result in enumerate(sorted_results[:5], 1):
                score = result.get("overall_quality_score", 0)
                file_name = os.path.basename(result.get("file", ""))
                print(f"   {i}. {file_name}: {score}/100")
            print()

        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏
        problem_components = [
            r for r in results if r.get("overall_quality_score", 0) < 80
        ]
        if problem_components:
            print("‚ö†Ô∏è –ö–û–ú–ü–û–ù–ï–ù–¢–´ –° –ü–†–û–ë–õ–ï–ú–ê–ú–ò (–±–∞–ª–ª < 80):")
            for result in problem_components:
                score = result.get("overall_quality_score", 0)
                file_name = os.path.basename(result.get("file", ""))
                print(f"   - {file_name}: {score}/100")
            print()

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        managers = [
            r for r in results if "manager" in r.get("file", "").lower()
        ]
        agents = [r for r in results if "agent" in r.get("file", "").lower()]
        bots = [r for r in results if "bot" in r.get("file", "").lower()]

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ SFM
        sfm_registered = [
            r
            for r in results
            if r.get("summary", {}).get("is_sfm_registered", False)
        ]
        sfm_total = (
            results[0].get("summary", {}).get("sfm_total_functions", 0)
            if results
            else 0
        )
        sfm_active = (
            results[0].get("summary", {}).get("sfm_active_functions", 0)
            if results
            else 0
        )
        sfm_critical = (
            results[0].get("summary", {}).get("sfm_critical_functions", 0)
            if results
            else 0
        )

        print("üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –¢–ò–ü–ê–ú –ö–û–ú–ü–û–ù–ï–ù–¢–û–í:")
        if managers:
            manager_avg = sum(
                r.get("overall_quality_score", 0) for r in managers
            ) / len(managers)
            print(f"   üè¢ –ú–µ–Ω–µ–¥–∂–µ—Ä—ã ({len(managers)}): {manager_avg:.1f}/100")
        if agents:
            agent_avg = sum(
                r.get("overall_quality_score", 0) for r in agents
            ) / len(agents)
            print(f"   ü§ñ –ê–≥–µ–Ω—Ç—ã ({len(agents)}): {agent_avg:.1f}/100")
        if bots:
            bot_avg = sum(
                r.get("overall_quality_score", 0) for r in bots
            ) / len(bots)
            print(f"   üõ°Ô∏è –ë–æ—Ç—ã ({len(bots)}): {bot_avg:.1f}/100")

        print("\nüîß –°–¢–ê–¢–ò–°–¢–ò–ö–ê SFM:")
        print(f"   üìä –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π –≤ SFM: {sfm_total}")
        print(f"   ‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π: {sfm_active}")
        print(f"   üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π: {sfm_critical}")
        print(f"   üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤ –∞–Ω–∞–ª–∏–∑–µ: {len(sfm_registered)}")
        print()

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        summary_report = {
            "timestamp": datetime.now().isoformat(),
            "total_components": len(components),
            "successful_analyses": successful_analyses,
            "failed_analyses": len(components) - successful_analyses,
            "average_score": round(average_score, 1),
            "components": results,
            "top_components": sorted_results[:5] if results else [],
            "problem_components": problem_components,
            "statistics": {
                "managers": len(managers),
                "agents": len(agents),
                "bots": len(bots),
            },
        }

        report_filename = (
            f"security_system_summary_report_"
            f"{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        )
        report_path = os.path.join("formatting_work", report_filename)
        os.makedirs("formatting_work", exist_ok=True)
        with open(report_path, "w", encoding="utf-8") as f:
            json.dump(summary_report, f, indent=2, ensure_ascii=False)
        print(f"üìÑ –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_path}")

        print("üéØ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
        print(
            f"üìä –û–±—â–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {average_score:.1f}/100"
        )

        if average_score >= 90:
            print("üèÜ –û–¢–õ–ò–ß–ù–û! –°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤ –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏!")
        elif average_score >= 80:
            print("‚úÖ –•–û–†–û–®–û! –°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤ —Ö–æ—Ä–æ—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏!")
        elif average_score >= 70:
            print("‚ö†Ô∏è –£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û! –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è!")
        else:
            print(
                "‚ùå –ö–†–ò–¢–ò–ß–ù–û! –°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ç—Ä–µ–±—É–µ—Ç "
                "—Å—Ä–æ—á–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è!"
            )
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞!")


if __name__ == "__main__":
    analyze_all_security_components()
