#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Auto Learning System - –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è ML –º–æ–¥–µ–ª–µ–π 24/7
"""

import asyncio
import json
import logging
import os
import schedule
import sys
import threading
import time
from datetime import datetime, timedelta
from typing import Dict, List, Any

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º

try:
    from security.ai_agents.russian_fraud_ml_models import RussianFraudMLModels
    from security.ai_agents.threat_intelligence_agent import ThreatIntelligenceAgent
except ImportError:
    # Fallback –¥–ª—è —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ –º–æ–¥—É–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
    RussianFraudMLModels = None
    ThreatIntelligenceAgent = None

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/auto_learning.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


class AutoLearningSystem:
    """
    –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è ML –º–æ–¥–µ–ª–µ–π 24/7
    """

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è"""
        self.is_running = False
        self.learning_thread = None
        self.ml_models = None
        self.last_update = None
        self.update_interval = 3600  # 1 —á–∞—Å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        self.data_collection_interval = 1800  # 30 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        os.makedirs('logs', exist_ok=True)
        os.makedirs('data/auto_learning', exist_ok=True)

        logger.info("üöÄ –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

    def start_auto_learning(self):
        """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è"""
        if self.is_running:
            logger.warning("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞")
            return

        self.is_running = True
        logger.info("üéØ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è 24/7")

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        self._setup_schedule()

        # –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self.learning_thread = threading.Thread(target=self._run_scheduler)
        self.learning_thread.daemon = True
        self.learning_thread.start()

        logger.info("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ")

    def stop_auto_learning(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è"""
        self.is_running = False
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è")

    def _setup_schedule(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á"""
        # –°–±–æ—Ä –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
        schedule.every(30).minutes.do(self._collect_new_data)

        # –ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –∫–∞–∂–¥—ã–π —á–∞—Å
        schedule.every().hour.do(self._retrain_models)

        # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
        schedule.every(6).hours.do(self._analyze_trends)

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 00:00
        schedule.every().day.at("00:00").do(self._generate_daily_report)

        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é
        schedule.every().week.do(self._cleanup_old_data)

        logger.info("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")

    def _run_scheduler(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á"""
        logger.info("‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –∑–∞–ø—É—â–µ–Ω")

        while self.is_running:
            try:
                schedule.run_pending()
                time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {e}")
                time.sleep(300)  # –ü–∞—É–∑–∞ 5 –º–∏–Ω—É—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ

    def _collect_new_data(self):
        """–°–±–æ—Ä –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            logger.info("üìä –ù–∞—á–∞–ª–æ —Å–±–æ—Ä–∞ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            if not self.ml_models:
                self.ml_models = RussianFraudMLModels()

            # –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ ThreatIntelligenceAgent
            threat_agent = ThreatIntelligenceAgent()

            # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)

            new_data = loop.run_until_complete(
                threat_agent.collect_russian_fraud_data()
            )

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            data_file = f'data/auto_learning/new_data_{timestamp}.json'

            with open(data_file, 'w', encoding='utf-8') as f:
                json.dump(new_data, f, ensure_ascii=False, indent=2)

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            self._update_data_statistics(new_data)

            logger.info(f"‚úÖ –ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {data_file}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")

    def _retrain_models(self):
        """–ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ ML –º–æ–¥–µ–ª–µ–π"""
        try:
            logger.info("ü§ñ –ù–∞—á–∞–ª–æ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è ML –º–æ–¥–µ–ª–µ–π...")

            if not self.ml_models:
                self.ml_models = RussianFraudMLModels()

            # –ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
            self.ml_models.create_region_analyzer()
            self.ml_models.create_fraud_classifier()
            self.ml_models.create_severity_predictor()

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
            self.ml_models.save_models()

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
            metrics = self.ml_models.generate_model_report()
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            metrics_file = f'data/auto_learning/model_metrics_{timestamp}.json'

            with open(metrics_file, 'w', encoding='utf-8') as f:
                json.dump(metrics, f, ensure_ascii=False, indent=2)

            self.last_update = datetime.now()

            logger.info("‚úÖ ML –º–æ–¥–µ–ª–∏ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π: {e}")

    def _analyze_trends(self):
        """–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤"""
        try:
            logger.info("üìà –ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤...")

            threat_agent = ThreatIntelligenceAgent()

            # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            latest_data = self._load_latest_data()
            if not latest_data:
                logger.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤")
                return

            # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)

            trends = loop.run_until_complete(
                threat_agent.analyze_russian_fraud_trends(latest_data)
            )

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            trends_file = f'data/auto_learning/trends_{timestamp}.json'

            with open(trends_file, 'w', encoding='utf-8') as f:
                json.dump(trends, f, ensure_ascii=False, indent=2)

            logger.info(f"‚úÖ –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω: {trends_file}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤: {e}")

    def _generate_daily_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        try:
            logger.info("üìã –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...")

            # –°–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –¥–µ–Ω—å
            daily_stats = self._collect_daily_statistics()

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
            report = {
                'date': datetime.now().strftime('%Y-%m-%d'),
                'timestamp': datetime.now().isoformat(),
                'daily_statistics': daily_stats,
                'model_performance': self._get_model_performance(),
                'data_collection_summary': self._get_data_collection_summary(),
                'recommendations': self._generate_recommendations()
            }

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
            report_file = f'data/auto_learning/daily_report_{datetime.now().strftime("%Y%m%d")}.json'

            with open(report_file, 'w', encoding='utf-8') as f:
                json.dump(report, f, ensure_ascii=False, indent=2)

            logger.info(f"‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {report_file}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")

    def _cleanup_old_data(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")

            # –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π
            cutoff_date = datetime.now() - timedelta(days=30)
            auto_learning_dir = 'data/auto_learning'

            if os.path.exists(auto_learning_dir):
                for filename in os.listdir(auto_learning_dir):
                    file_path = os.path.join(auto_learning_dir, filename)
                    if os.path.isfile(file_path):
                        file_time = datetime.fromtimestamp(os.path.getctime(file_path))
                        if file_time < cutoff_date:
                            os.remove(file_path)
                            logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª: {filename}")

            logger.info("‚úÖ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

    def _update_data_statistics(self, new_data: Dict[str, Any]):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            stats_file = 'data/auto_learning/data_statistics.json'

            # –ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            if os.path.exists(stats_file):
                with open(stats_file, 'r', encoding='utf-8') as f:
                    stats = json.load(f)
            else:
                stats = {
                    'total_collections': 0,
                    'total_records': 0,
                    'last_update': None,
                    'daily_collections': {}
                }

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            stats['total_collections'] += 1
            stats['total_records'] += new_data.get('metadata', {}).get('total_records', 0)
            stats['last_update'] = datetime.now().isoformat()

            today = datetime.now().strftime('%Y-%m-%d')
            if today not in stats['daily_collections']:
                stats['daily_collections'][today] = 0
            stats['daily_collections'][today] += 1

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            with open(stats_file, 'w', encoding='utf-8') as f:
                json.dump(stats, f, ensure_ascii=False, indent=2)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

    def _load_latest_data(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            auto_learning_dir = 'data/auto_learning'
            if not os.path.exists(auto_learning_dir):
                return {}

            # –ü–æ–∏—Å–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã—Ö
            data_files = [f for f in os.listdir(auto_learning_dir) if f.startswith('new_data_')]
            if not data_files:
                return {}

            latest_file = sorted(data_files)[-1]
            with open(os.path.join(auto_learning_dir, latest_file), 'r', encoding='utf-8') as f:
                return json.load(f)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return {}

    def _collect_daily_statistics(self) -> Dict[str, Any]:
        """–°–±–æ—Ä –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            stats_file = 'data/auto_learning/data_statistics.json'
            if os.path.exists(stats_file):
                with open(stats_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            return {}
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}

    def _get_model_performance(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π"""
        try:
            if self.ml_models and hasattr(self.ml_models, 'model_metrics'):
                return self.ml_models.model_metrics
            return {}
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
            return {}

    def _get_data_collection_summary(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            auto_learning_dir = 'data/auto_learning'
            if not os.path.exists(auto_learning_dir):
                return {}

            files = os.listdir(auto_learning_dir)
            return {
                'total_data_files': len([f for f in files if f.startswith('new_data_')]),
                'total_trends_files': len([f for f in files if f.startswith('trends_')]),
                'total_metrics_files': len([f for f in files if f.startswith('model_metrics_')]),
                'last_collection': self.last_update.isoformat() if self.last_update else None
            }
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏: {e}")
            return {}

    def _generate_recommendations(self) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
        recommendations = []

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π
        if self.ml_models and hasattr(self.ml_models, 'model_metrics'):
            for model_name, metrics in self.ml_models.model_metrics.items():
                if 'r2_score' in metrics and metrics['r2_score'] < 0.9:
                    recommendations.append(f"–£–ª—É—á—à–∏—Ç—å —Ç–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏ {model_name}")
                elif 'accuracy' in metrics and metrics['accuracy'] < 0.8:
                    recommendations.append(f"–ü–æ–≤—ã—Å–∏—Ç—å —Ç–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏ {model_name}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—ä–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö
        stats = self._collect_daily_statistics()
        if stats.get('total_records', 0) < 1000:
            recommendations.append("–£–≤–µ–ª–∏—á–∏—Ç—å –æ–±—ä–µ–º —Å–æ–±–∏—Ä–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∞—Å—Ç–æ—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        if not self.last_update or (datetime.now() - self.last_update).seconds > 7200:
            recommendations.append("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å–∏—Å—Ç–µ–º—ã —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö")

        return recommendations

    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        return {
            'is_running': self.is_running,
            'last_update': self.last_update.isoformat() if self.last_update else None,
            'update_interval': self.update_interval,
            'data_collection_interval': self.data_collection_interval,
            'next_collection': schedule.next_run().isoformat() if schedule.jobs else None,
            'statistics': self._collect_daily_statistics()
        }


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è"""
    print("üöÄ –°–ò–°–¢–ï–ú–ê –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –û–ë–£–ß–ï–ù–ò–Ø ML –ú–û–î–ï–õ–ï–ô 24/7")
    print("=" * 60)

    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã
    auto_learning = AutoLearningSystem()

    try:
        # –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã
        auto_learning.start_auto_learning()

        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –∑–∞–ø—É—â–µ–Ω–∞!")
        print("üìä –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö: –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç")
        print("ü§ñ –ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π: –∫–∞–∂–¥—ã–π —á–∞—Å")
        print("üìà –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤: –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤")
        print("üìã –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã: –≤ 00:00")
        print("üßπ –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö: –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ")
        print("\n‚è∞ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")

        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
        while True:
            time.sleep(60)

            # –í—ã–≤–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–∂–¥—ã–π —á–∞—Å
            if datetime.now().minute == 0:
                status = auto_learning.get_status()
                print(f"\nüìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã ({datetime.now().strftime('%H:%M')}):")
                print(f"   –°–±–æ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö: {status['statistics'].get('total_collections', 0)}")
                print(f"   –ó–∞–ø–∏—Å–µ–π: {status['statistics'].get('total_records', 0)}")
                print(f"   –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {status['last_update'] or '–ù–µ –±—ã–ª–æ'}")

    except KeyboardInterrupt:
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã...")
        auto_learning.stop_auto_learning()
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    main()
