#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ö–∞—á–µ—Å—Ç–≤–∞
–¢–û–õ–¨–ö–û –ê–ù–ê–õ–ò–ó - –ù–ï –ò–ó–ú–ï–ù–Ø–ï–¢ –ö–û–î –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò
"""

import ast
# import json  # TODO: –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ JSON —Ñ—É–Ω–∫—Ü–∏–π
import os
# import re  # TODO: –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ regex —Ñ—É–Ω–∫—Ü–∏–π
import subprocess
import sys
from dataclasses import dataclass
from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional


class SafetyLevel(Enum):
    """–£—Ä–æ–≤–Ω–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""

    SAFE = "safe"  # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    MANUAL = "manual"  # –¢—Ä–µ–±—É–µ—Ç —Ä—É—á–Ω–æ–≥–æ –æ–¥–æ–±—Ä–µ–Ω–∏—è
    DANGEROUS = "dangerous"  # –û–ø–∞—Å–Ω–æ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    CRITICAL = "critical"  # –ö—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏


@dataclass
class QualityIssue:
    """–ü—Ä–æ–±–ª–µ–º–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞"""

    line_number: int
    issue_type: str
    description: str
    safety_level: SafetyLevel
    suggested_fix: Optional[str] = None
    auto_fixable: bool = False
    security_impact: str = "none"


@dataclass
class SecurityCheck:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""

    function_name: str
    is_security_function: bool
    has_encryption: bool
    has_authentication: bool
    has_validation: bool
    has_logging: bool
    risk_level: str


class SafeQualityAnalyzer:
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞"""

    def __init__(self):
        self.logger = self._setup_logging()
        self.security_keywords = [
            "encrypt",
            "decrypt",
            "hash",
            "password",
            "token",
            "auth",
            "permission",
            "access",
            "security",
            "validate",
            "sanitize",
            "audit",
            "log",
            "monitor",
            "threat",
            "vulnerability",
        ]
        self.critical_functions = [
            "authenticate",
            "authorize",
            "encrypt",
            "decrypt",
            "validate",
            "sanitize",
            "audit",
            "log_security",
            "check_permissions",
        ]

    def _setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        import logging

        logger = logging.getLogger("SafeQualityAnalyzer")
        logger.setLevel(logging.INFO)
        return logger

    def analyze_file(self, file_path: str) -> Dict[str, Any]:
        """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞ - –¢–û–õ–¨–ö–û –ê–ù–ê–õ–ò–ó"""
        try:
            self.logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞: {file_path}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            if not os.path.exists(file_path):
                return {"error": f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}"}

            # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
            with open(file_path, "r", encoding="utf-8") as f:
                content = f.read()

            # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            analysis_result = {
                "file_path": file_path,
                "timestamp": datetime.now().isoformat(),
                "file_size": os.path.getsize(file_path),
                "line_count": len(content.splitlines()),
                "analysis": {
                    "syntax_check": self._check_syntax(file_path),
                    "import_check": self._check_imports(file_path),
                    "flake8_analysis": self._analyze_flake8(file_path),
                    "security_analysis": self._analyze_security(content),
                    "performance_analysis": self._analyze_performance(content),
                    "code_structure": self._analyze_structure(content),
                    "documentation": self._analyze_documentation(content),
                },
                "suggestions": self._generate_safe_suggestions(
                    file_path, content
                ),
                "safety_report": self._generate_safety_report(
                    file_path, content
                ),
                "recommendations": self._generate_recommendations(
                    file_path, content
                ),
            }

            self.logger.info(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è —Ñ–∞–π–ª–∞: {file_path}")
            return analysis_result

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞ {file_path}: {e}")
            return {"error": str(e)}

    def _check_syntax(self, file_path: str) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ Python"""
        try:
            result = subprocess.run(
                [sys.executable, "-m", "py_compile", file_path],
                capture_output=True,
                text=True,
                timeout=30,
            )

            return {
                "status": "success" if result.returncode == 0 else "error",
                "error_message": (
                    result.stderr if result.returncode != 0 else None
                ),
                "safe_to_fix": result.returncode == 0,
            }
        except Exception as e:
            return {
                "status": "error",
                "error_message": str(e),
                "safe_to_fix": False,
            }

    def _check_imports(self, file_path: str) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤"""
        try:
            result = subprocess.run(
                [
                    sys.executable,
                    "-c",
                    f"import {file_path.replace('/', '.').replace('.py', '')}",
                ],
                capture_output=True,
                text=True,
                timeout=30,
            )

            return {
                "status": "success" if result.returncode == 0 else "error",
                "error_message": (
                    result.stderr if result.returncode != 0 else None
                ),
                "safe_to_fix": result.returncode == 0,
            }
        except Exception as e:
            return {
                "status": "error",
                "error_message": str(e),
                "safe_to_fix": False,
            }

    def _analyze_flake8(self, file_path: str) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ flake8 - –¢–û–õ–¨–ö–û –ê–ù–ê–õ–ò–ó"""
        try:
            result = subprocess.run(
                [
                    sys.executable,
                    "-m",
                    "flake8",
                    file_path,
                    "--format=%(path)s:%(row)d:%(col)d: %(code)s %(text)s",
                ],
                capture_output=True,
                text=True,
                timeout=30,
            )

            errors = []
            if result.stdout:
                for line in result.stdout.strip().split("\n"):
                    if line:
                        parts = line.split(":", 3)
                        if len(parts) >= 4:
                            errors.append(
                                {
                                    "line": int(parts[1]),
                                    "column": int(parts[2]),
                                    "code": parts[3].split()[0],
                                    "message": (
                                        parts[3].split(" ", 1)[1]
                                        if len(parts[3].split()) > 1
                                        else ""
                                    ),
                                    "safety_level": self._get_safety_level(
                                        parts[3].split()[0]
                                    ),
                                    "auto_fixable": self._is_auto_fixable(
                                        parts[3].split()[0]
                                    ),
                                }
                            )

            return {
                "total_errors": len(errors),
                "errors": errors,
                "safe_errors": [
                    e for e in errors if e["safety_level"] == SafetyLevel.SAFE
                ],
                "manual_errors": [
                    e
                    for e in errors
                    if e["safety_level"] == SafetyLevel.MANUAL
                ],
                "dangerous_errors": [
                    e
                    for e in errors
                    if e["safety_level"] == SafetyLevel.DANGEROUS
                ],
                "critical_errors": [
                    e
                    for e in errors
                    if e["safety_level"] == SafetyLevel.CRITICAL
                ],
            }
        except Exception as e:
            return {"total_errors": 0, "errors": [], "error_message": str(e)}

    def _analyze_security(self, content: str) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ - –ù–ï –ò–ó–ú–ï–ù–Ø–ï–¢ –ö–û–î"""
        security_issues = []
        security_functions = []

        lines = content.split("\n")
        for i, line in enumerate(lines, 1):
            line_lower = line.lower()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            for keyword in self.security_keywords:
                if keyword in line_lower:
                    security_functions.append(
                        {
                            "line": i,
                            "keyword": keyword,
                            "context": line.strip(),
                        }
                    )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏
            if "eval(" in line_lower:
                security_issues.append(
                    {
                        "line": i,
                        "type": "dangerous_eval",
                        "description": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ eval() –º–æ–∂–µ—Ç –±—ã—Ç—å "
                        "–æ–ø–∞—Å–Ω–æ",
                        "severity": "high",
                    }
                )

            if "exec(" in line_lower:
                security_issues.append(
                    {
                        "line": i,
                        "type": "dangerous_exec",
                        "description": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ exec() –º–æ–∂–µ—Ç –±—ã—Ç—å "
                        "–æ–ø–∞—Å–Ω–æ",
                        "severity": "high",
                    }
                )

            if "subprocess.call(" in line_lower and "shell=True" in line_lower:
                security_issues.append(
                    {
                        "line": i,
                        "type": "shell_injection",
                        "description": "–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —É—è–∑–≤–∏–º–æ—Å—Ç—å shell "
                        "injection",
                        "severity": "critical",
                    }
                )

        return {
            "security_functions_found": len(security_functions),
            "security_functions": security_functions,
            "security_issues": security_issues,
            "total_issues": len(security_issues),
            "critical_issues": len(
                [i for i in security_issues if i["severity"] == "critical"]
            ),
        }

    def _analyze_performance(self, content: str) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        performance_issues = []

        lines = content.split("\n")
        for i, line in enumerate(lines, 1):
            line_lower = line.lower()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
            if "for i in range(len(" in line_lower:
                performance_issues.append(
                    {
                        "line": i,
                        "type": "inefficient_loop",
                        "description": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ range(len()) "
                        "–Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ",
                        "suggestion": "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ enumerate() –∏–ª–∏ "
                        "–ø—Ä—è–º—É—é –∏—Ç–µ—Ä–∞—Ü–∏—é",
                    }
                )

            if ".keys()" in line_lower and "for" in line_lower:
                performance_issues.append(
                    {
                        "line": i,
                        "type": "unnecessary_keys",
                        "description": "–ù–µ –Ω—É–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å .keys() –¥–ª—è "
                        "–∏—Ç–µ—Ä–∞—Ü–∏–∏ –ø–æ —Å–ª–æ–≤–∞—Ä—é",
                        "suggestion": "–ò—Ç–µ—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞–ø—Ä—è–º—É—é –ø–æ —Å–ª–æ–≤–∞—Ä—é",
                    }
                )

        return {
            "performance_issues": performance_issues,
            "total_issues": len(performance_issues),
        }

    def _analyze_structure(self, content: str) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–æ–¥–∞"""
        try:
            tree = ast.parse(content)

            classes = []
            functions = []

            for node in ast.walk(tree):
                if isinstance(node, ast.ClassDef):
                    classes.append(
                        {
                            "name": node.name,
                            "line": node.lineno,
                            "methods": [
                                n.name
                                for n in node.body
                                if isinstance(n, ast.FunctionDef)
                            ],
                        }
                    )
                elif isinstance(node, ast.FunctionDef):
                    functions.append(
                        {
                            "name": node.name,
                            "line": node.lineno,
                            "args": [arg.arg for arg in node.args.args],
                            "is_async": isinstance(node, ast.AsyncFunctionDef),
                        }
                    )

            return {
                "classes": classes,
                "functions": functions,
                "total_classes": len(classes),
                "total_functions": len(functions),
            }
        except Exception as e:
            return {
                "error": str(e),
                "classes": [],
                "functions": [],
                "total_classes": 0,
                "total_functions": 0,
            }

    def _analyze_documentation(self, content: str) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
        lines = content.split("\n")
        docstring_lines = 0
        comment_lines = 0
        total_lines = len(lines)

        in_docstring = False
        docstring_quote = None

        for line in lines:
            stripped = line.strip()

            # –ü–æ–¥—Å—á–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
            if stripped.startswith("#"):
                comment_lines += 1

            # –ü–æ–¥—Å—á–µ—Ç docstring
            if '"""' in line or "'''" in line:
                if not in_docstring:
                    in_docstring = True
                    docstring_quote = '"""' if '"""' in line else "'''"
                elif docstring_quote in line:
                    in_docstring = False
                    docstring_quote = None

            if in_docstring:
                docstring_lines += 1

        return {
            "total_lines": total_lines,
            "comment_lines": comment_lines,
            "docstring_lines": docstring_lines,
            "comment_percentage": (
                (comment_lines / total_lines * 100) if total_lines > 0 else 0
            ),
            "docstring_percentage": (
                (docstring_lines / total_lines * 100) if total_lines > 0 else 0
            ),
        }

    def _get_safety_level(self, error_code: str) -> SafetyLevel:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è –æ—à–∏–±–∫–∏ flake8"""
        safe_codes = ["E501", "W293", "W292", "E302", "E305", "E128", "E129"]
        manual_codes = ["F401", "F841", "E302", "E305"]
        dangerous_codes = ["F403", "F405", "F811", "F812"]
        critical_codes = ["F999"]  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏

        if error_code in safe_codes:
            return SafetyLevel.SAFE
        elif error_code in manual_codes:
            return SafetyLevel.MANUAL
        elif error_code in dangerous_codes:
            return SafetyLevel.DANGEROUS
        elif error_code in critical_codes:
            return SafetyLevel.CRITICAL
        else:
            return SafetyLevel.MANUAL

    def _is_auto_fixable(self, error_code: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        auto_fixable_codes = [
            "E501",
            "W293",
            "W292",
            "E302",
            "E305",
            "E128",
            "E129",
        ]
        return error_code in auto_fixable_codes

    def _generate_safe_suggestions(
        self, file_path: str, content: str
    ) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ë–ï–ó–û–ü–ê–°–ù–´–• –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é"""
        suggestions = {
            "safe_formatting": [],
            "manual_review_needed": [],
            "security_recommendations": [],
            "performance_optimizations": [],
        }

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º flake8 –æ—à–∏–±–∫–∏
        flake8_result = self._analyze_flake8(file_path)

        for error in flake8_result.get("errors", []):
            if error["safety_level"] == SafetyLevel.SAFE:
                suggestions["safe_formatting"].append(
                    {
                        "line": error["line"],
                        "code": error["code"],
                        "message": error["message"],
                        "suggested_fix": self._get_safe_fix_suggestion(
                            error["code"]
                        ),
                    }
                )
            else:
                suggestions["manual_review_needed"].append(
                    {
                        "line": error["line"],
                        "code": error["code"],
                        "message": error["message"],
                        "reason": "–¢—Ä–µ–±—É–µ—Ç —Ä—É—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
                    }
                )

        return suggestions

    def _get_safe_fix_suggestion(self, error_code: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é"""
        suggestions = {
            "E501": "–†–∞–∑–±–µ–π—Ç–µ –¥–ª–∏–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫",
            "W293": "–£–¥–∞–ª–∏—Ç–µ –ø—Ä–æ–±–µ–ª—ã –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏",
            "W292": "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ —Å—Ç—Ä–æ–∫–∏ –≤ –∫–æ–Ω—Ü–µ —Ñ–∞–π–ª–∞",
            "E302": "–î–æ–±–∞–≤—å—Ç–µ 2 –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –ø–µ—Ä–µ–¥ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º "
            "—Ñ—É–Ω–∫—Ü–∏–∏/–∫–ª–∞—Å—Å–∞",
            "E305": "–î–æ–±–∞–≤—å—Ç–µ 2 –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ—Å–ª–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è "
            "—Ñ—É–Ω–∫—Ü–∏–∏/–∫–ª–∞—Å—Å–∞",
            "E128": "–ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—Ç—Å—Ç—É–ø—ã –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö —Ñ—É–Ω–∫—Ü–∏–∏",
            "E129": "–ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—Ç—Å—Ç—É–ø—ã –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö —Ñ—É–Ω–∫—Ü–∏–∏",
        }
        return suggestions.get(error_code, "–¢—Ä–µ–±—É–µ—Ç —Ä—É—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")

    def _generate_safety_report(
        self, file_path: str, content: str
    ) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        security_analysis = self._analyze_security(content)

        return {
            "security_functions_preserved": True,  # –ú—ã –Ω–µ –∏–∑–º–µ–Ω—è–µ–º –∫–æ–¥
            "encryption_intact": True,  # –ú—ã –Ω–µ –∏–∑–º–µ–Ω—è–µ–º –∫–æ–¥
            "authentication_preserved": True,  # –ú—ã –Ω–µ –∏–∑–º–µ–Ω—è–µ–º –∫–æ–¥
            "validation_intact": True,  # –ú—ã –Ω–µ –∏–∑–º–µ–Ω—è–µ–º –∫–æ–¥
            "logging_preserved": True,  # –ú—ã –Ω–µ –∏–∑–º–µ–Ω—è–µ–º –∫–æ–¥
            "security_issues_found": security_analysis["total_issues"],
            "critical_issues": security_analysis["critical_issues"],
            "recommendation": "–ö–æ–¥ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω - –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞",
        }

    def _generate_recommendations(
        self, file_path: str, content: str
    ) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —É–ª—É—á—à–µ–Ω–∏—é"""
        recommendations = []

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º flake8
        flake8_result = self._analyze_flake8(file_path)
        if flake8_result["total_errors"] > 0:
            recommendations.append(
                f"–ò—Å–ø—Ä–∞–≤—å—Ç–µ {flake8_result['total_errors']} –æ—à–∏–±–æ–∫ flake8"
            )

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
        doc_analysis = self._analyze_documentation(content)
        if doc_analysis["comment_percentage"] < 10:
            recommendations.append("–î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ –∫–æ–¥—É")

        if doc_analysis["docstring_percentage"] < 5:
            recommendations.append("–î–æ–±–∞–≤—å—Ç–µ docstrings –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –∏ –∫–ª–∞—Å—Å–∞–º")

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        perf_analysis = self._analyze_performance(content)
        if perf_analysis["total_issues"] > 0:
            recommendations.append("–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ–¥–∞")

        return recommendations

    def generate_report(self, analysis_result: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        report = []
        report.append("=" * 60)
        report.append("üõ°Ô∏è –ë–ï–ó–û–ü–ê–°–ù–´–ô –ê–ù–ê–õ–ò–ó –ö–ê–ß–ï–°–¢–í–ê –ö–û–î–ê")
        report.append("=" * 60)
        report.append(f"üìÅ –§–∞–π–ª: {analysis_result['file_path']}")
        report.append(f"‚è∞ –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {analysis_result['timestamp']}")
        report.append(f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {analysis_result['file_size']} –±–∞–π—Ç")
        report.append(f"üìè –°—Ç—Ä–æ–∫ –∫–æ–¥–∞: {analysis_result['line_count']}")
        report.append("")

        # –°–∏–Ω—Ç–∞–∫—Å–∏—Å
        syntax = analysis_result["analysis"]["syntax_check"]
        report.append("üîç –ü–†–û–í–ï–†–ö–ê –°–ò–ù–¢–ê–ö–°–ò–°–ê:")
        status_text = ("‚úÖ –£—Å–ø–µ—à–Ω–æ" if syntax['status'] == 'success'
                       else "‚ùå –û—à–∏–±–∫–∞")
        report.append(f"   –°—Ç–∞—Ç—É—Å: {status_text}")
        if syntax["error_message"]:
            report.append(f"   –û—à–∏–±–∫–∞: {syntax['error_message']}")
        report.append("")

        # –ò–º–ø–æ—Ä—Ç—ã
        imports = analysis_result["analysis"]["import_check"]
        report.append("üì¶ –ü–†–û–í–ï–†–ö–ê –ò–ú–ü–û–†–¢–û–í:")
        status_text = ("‚úÖ –£—Å–ø–µ—à–Ω–æ" if imports['status'] == 'success'
                       else "‚ùå –û—à–∏–±–∫–∞")
        report.append(f"   –°—Ç–∞—Ç—É—Å: {status_text}")
        if imports["error_message"]:
            report.append(f"   –û—à–∏–±–∫–∞: {imports['error_message']}")
        report.append("")

        # Flake8
        flake8 = analysis_result["analysis"]["flake8_analysis"]
        report.append("üîß –ê–ù–ê–õ–ò–ó FLAKE8:")
        report.append(f"   –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {flake8['total_errors']}")
        report.append(
            f"   –ë–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: "
            f"{len(flake8.get('safe_errors', []))}"
        )
        report.append(
            f"   –¢—Ä–µ–±—É—é—Ç —Ä—É—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: "
            f"{len(flake8.get('manual_errors', []))}"
        )
        report.append(f"   –û–ø–∞—Å–Ω—ã—Ö: {len(flake8.get('dangerous_errors', []))}")
        report.append(
            f"   –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö: {len(flake8.get('critical_errors', []))}"
        )
        report.append("")

        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
        safety = analysis_result["safety_report"]
        report.append("üõ°Ô∏è –û–¢–ß–ï–¢ –û –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò:")
        report.append(
            f"   –§—É–Ω–∫—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: "
            f"{'‚úÖ' if safety['security_functions_preserved'] else '‚ùå'}"
        )
        report.append(
            f"   –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –∑–∞—Ç—Ä–æ–Ω—É—Ç–æ: "
            f"{'‚úÖ' if safety['encryption_intact'] else '‚ùå'}"
        )
        report.append(
            f"   –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: "
            f"{'‚úÖ' if safety['authentication_preserved'] else '‚ùå'}"
        )
        report.append(
            f"   –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –∑–∞—Ç—Ä–æ–Ω—É—Ç–∞: "
            f"{'‚úÖ' if safety['validation_intact'] else '‚ùå'}"
        )
        report.append(
            f"   –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: "
            f"{'‚úÖ' if safety['logging_preserved'] else '‚ùå'}"
        )
        report.append(
            f"   –ü—Ä–æ–±–ª–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–∞–π–¥–µ–Ω–æ: "
            f"{safety['security_issues_found']}"
        )
        report.append(f"   –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º: {safety['critical_issues']}")
        report.append("")

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = analysis_result["recommendations"]
        if recommendations:
            report.append("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            for i, rec in enumerate(recommendations, 1):
                report.append(f"   {i}. {rec}")
            report.append("")

        report.append("üéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:")
        report.append("   ‚úÖ –ö–æ–¥ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ë–ï–ó–û–ü–ê–°–ù–û")
        report.append("   ‚úÖ –ù–∏–∫–∞–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –≤–Ω–µ—Å–µ–Ω–æ")
        report.append("   ‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
        report.append("   ‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã")
        report.append("")
        report.append("=" * 60)

        return "\n".join(report)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
safe_quality_analyzer = SafeQualityAnalyzer()


def analyze_file_safely(file_path: str) -> Dict[str, Any]:
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ - –¢–û–õ–¨–ö–û –ê–ù–ê–õ–ò–ó"""
    return safe_quality_analyzer.analyze_file(file_path)


def generate_quality_report(file_path: str) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –∫–∞—á–µ—Å—Ç–≤–µ"""
    analysis = analyze_file_safely(file_path)
    return safe_quality_analyzer.generate_report(analysis)


if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    if len(sys.argv) > 1:
        file_path = sys.argv[1]
        print("üõ°Ô∏è –ë–ï–ó–û–ü–ê–°–ù–´–ô –ê–ù–ê–õ–ò–ó –ö–ê–ß–ï–°–¢–í–ê –ö–û–î–ê")
        print("=" * 50)
        print(f"–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª: {file_path}")
        print()

        result = analyze_file_safely(file_path)
        if "error" in result:
            print(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
        else:
            report = generate_quality_report(file_path)
            print(report)
    else:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python3 safe_quality_analyzer.py <–ø—É—Ç—å_–∫_—Ñ–∞–π–ª—É>")
