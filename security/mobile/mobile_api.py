#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Mobile API –¥–ª—è VPN –∏ –∞–Ω—Ç–∏–≤–∏—Ä—É—Å–∞ - –ø—Ä–æ—Å—Ç–æ–µ –∏ –∫—Ä–∞—Å–∏–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
"""

import asyncio
import json
import logging
import os

# –ò–º–ø–æ—Ä—Ç—ã VPN –∏ –∞–Ω—Ç–∏–≤–∏—Ä—É—Å–∞
import sys
import time
from dataclasses import dataclass
from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

# –ò–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
from security.antivirus.antivirus_security_system import (
    AntivirusSecuritySystem,
)
from security.vpn.vpn_security_system import (
    VPNSecurityLevel,
    VPNSecuritySystem,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class ConnectionType(Enum):
    """–¢–∏–ø—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""

    VPN_ONLY = "vpn_only"
    ANTIVIRUS_ONLY = "antivirus_only"
    VPN_ANTIVIRUS = "vpn_antivirus"
    SMART_PROTECTION = "smart_protection"


class ConnectionSpeed(Enum):
    """–°–∫–æ—Ä–æ—Å—Ç–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""

    FAST = "fast"
    BALANCED = "balanced"
    SECURE = "secure"


@dataclass
class MobileConnectionConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""

    connection_type: ConnectionType
    speed: ConnectionSpeed
    country: str = "Singapore"
    auto_connect: bool = True
    notifications: bool = True
    background_protection: bool = True


@dataclass
class MobileConnectionResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""

    success: bool
    message: str
    connection_id: str
    connection_type: str
    speed: str
    country: str
    security_level: str
    connection_time: float
    timestamp: str


class MobileSecurityAPI:
    """API –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ALADDIN"""

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ API"""
        self.vpn_system = None
        self.antivirus_system = None
        self.active_connections = {}
        self.connection_counter = 0

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º
        self._init_systems()

    def _init_systems(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è VPN –∏ –∞–Ω—Ç–∏–≤–∏—Ä—É—Å–Ω—ã—Ö —Å–∏—Å—Ç–µ–º"""
        try:
            self.vpn_system = VPNSecuritySystem("MobileVPN")
            self.antivirus_system = AntivirusSecuritySystem("MobileAntivirus")
            logger.info("–ú–æ–±–∏–ª—å–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–±–∏–ª—å–Ω—ã—Ö —Å–∏—Å—Ç–µ–º: {e}")

    def get_connection_options(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        return {
            "connection_types": [
                {
                    "id": "vpn_only",
                    "name": "üåç –¢–æ–ª—å–∫–æ VPN",
                    "description": "–ë—ã—Å—Ç—Ä–æ–µ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ",
                    "icon": "vpn",
                    "features": [
                        "–ó–∞—â–∏—Ç–∞ —Ç—Ä–∞—Ñ–∏–∫–∞",
                        "–°–º–µ–Ω–∞ IP",
                        "–ë—ã—Å—Ç—Ä–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ",
                    ],
                },
                {
                    "id": "antivirus_only",
                    "name": "üõ°Ô∏è –¢–æ–ª—å–∫–æ –∞–Ω—Ç–∏–≤–∏—Ä—É—Å",
                    "description": "–ó–∞—â–∏—Ç–∞ –æ—Ç –≤–∏—Ä—É—Å–æ–≤ –∏ —É–≥—Ä–æ–∑",
                    "icon": "shield",
                    "features": [
                        "–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤",
                        "–ó–∞—â–∏—Ç–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏",
                        "–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —É–≥—Ä–æ–∑",
                    ],
                },
                {
                    "id": "vpn_antivirus",
                    "name": "üöÄ VPN + –ê–Ω—Ç–∏–≤–∏—Ä—É—Å",
                    "description": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞",
                    "icon": "security",
                    "features": [
                        "VPN –∑–∞—â–∏—Ç–∞",
                        "–ê–Ω—Ç–∏–≤–∏—Ä—É—Å",
                        "–ü–æ–ª–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å",
                    ],
                },
                {
                    "id": "smart_protection",
                    "name": "üß† –£–º–Ω–∞—è –∑–∞—â–∏—Ç–∞",
                    "description": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –ª—É—á—à–µ–π –∑–∞—â–∏—Ç—ã",
                    "icon": "brain",
                    "features": [
                        "AI –∞–Ω–∞–ª–∏–∑",
                        "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä",
                        "–ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –∑–∞—â–∏—Ç–∞",
                    ],
                },
            ],
            "speeds": [
                {
                    "id": "fast",
                    "name": "‚ö° –ë—ã—Å—Ç—Ä–æ",
                    "description": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å",
                    "icon": "lightning",
                },
                {
                    "id": "balanced",
                    "name": "‚öñÔ∏è –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ",
                    "description": "–°–∫–æ—Ä–æ—Å—Ç—å –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å",
                    "icon": "balance",
                },
                {
                    "id": "secure",
                    "name": "üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ",
                    "description": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å",
                    "icon": "lock",
                },
            ],
            "countries": [
                {"id": "singapore", "name": "üá∏üá¨ Singapore", "flag": "üá∏üá¨"},
                {"id": "russia", "name": "üá∑üá∫ Russia", "flag": "üá∑üá∫"},
                {"id": "netherlands", "name": "üá≥üá± Netherlands", "flag": "üá≥üá±"},
                {"id": "usa", "name": "üá∫üá∏ USA", "flag": "üá∫üá∏"},
                {"id": "japan", "name": "üáØüáµ Japan", "flag": "üáØüáµ"},
            ],
        }

    async def connect_mobile(
        self, config: MobileConnectionConfig
    ) -> MobileConnectionResult:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            self.connection_counter += 1
            connection_id = (
                f"mobile_{self.connection_counter}_{int(time.time())}"
            )

            start_time = time.time()

            # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            if config.connection_type == ConnectionType.VPN_ONLY:
                result = await self._connect_vpn_only(connection_id, config)
            elif config.connection_type == ConnectionType.ANTIVIRUS_ONLY:
                result = await self._connect_antivirus_only(
                    connection_id, config
                )
            elif config.connection_type == ConnectionType.VPN_ANTIVIRUS:
                result = await self._connect_vpn_antivirus(
                    connection_id, config
                )
            elif config.connection_type == ConnectionType.SMART_PROTECTION:
                result = await self._connect_smart_protection(
                    connection_id, config
                )
            else:
                raise ValueError(
                    f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {config.connection_type}"
                )

            connection_time = time.time() - start_time

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            self.active_connections[connection_id] = {
                "config": config,
                "start_time": datetime.now().isoformat(),
                "status": "connected",
            }

            return MobileConnectionResult(
                success=True,
                message=result["message"],
                connection_id=connection_id,
                connection_type=config.connection_type.value,
                speed=config.speed.value,
                country=config.country,
                security_level=result.get("security_level", "high"),
                connection_time=connection_time,
                timestamp=datetime.now().isoformat(),
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return MobileConnectionResult(
                success=False,
                message=f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}",
                connection_id="",
                connection_type=config.connection_type.value,
                speed=config.speed.value,
                country=config.country,
                security_level="none",
                connection_time=0.0,
                timestamp=datetime.now().isoformat(),
            )

    async def _connect_vpn_only(
        self, connection_id: str, config: MobileConnectionConfig
    ) -> Dict[str, Any]:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ VPN"""
        if not self.vpn_system:
            raise Exception("VPN —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

        # –í—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏
        security_level = self._get_security_level(config.speed)

        success, message, report = await self.vpn_system.connect(
            connection_id,
            country=config.country,
            security_level=security_level,
        )

        if success:
            return {
                "message": f"üåç VPN –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ {config.country}",
                "security_level": report.get("security_level", "high"),
                "provider": report.get("provider", "internal"),
            }
        else:
            raise Exception(f"–û—à–∏–±–∫–∞ VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {message}")

    async def _connect_antivirus_only(
        self, connection_id: str, config: MobileConnectionConfig
    ) -> Dict[str, Any]:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –∞–Ω—Ç–∏–≤–∏—Ä—É—Å–∞"""
        if not self.antivirus_system:
            raise Exception("–ê–Ω—Ç–∏–≤–∏—Ä—É—Å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

        # –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∞–Ω—Ç–∏–≤–∏—Ä—É—Å–Ω–æ–π –∑–∞—â–∏—Ç—ã
        self.antivirus_system.get_status()

        return {
            "message": "üõ°Ô∏è –ê–Ω—Ç–∏–≤–∏—Ä—É—Å–Ω–∞—è –∑–∞—â–∏—Ç–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞",
            "security_level": "high",
            "provider": "internal",
        }

    async def _connect_vpn_antivirus(
        self, connection_id: str, config: MobileConnectionConfig
    ) -> Dict[str, Any]:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ VPN + –∞–Ω—Ç–∏–≤–∏—Ä—É—Å"""
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ VPN
        vpn_result = await self._connect_vpn_only(connection_id, config)

        # –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∞–Ω—Ç–∏–≤–∏—Ä—É—Å–∞
        antivirus_result = await self._connect_antivirus_only(
            connection_id, config
        )

        return {
            "message": (
                f"üöÄ {vpn_result['message']} + "
                f"{antivirus_result['message']}"
            ),
            "security_level": "maximum",
            "provider": "internal",
        }

    async def _connect_smart_protection(
        self, connection_id: str, config: MobileConnectionConfig
    ) -> Dict[str, Any]:
        """–£–º–Ω–∞—è –∑–∞—â–∏—Ç–∞ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä"""
        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ —É–º–Ω–æ–π –∑–∞—â–∏—Ç—ã
        if config.speed == ConnectionSpeed.FAST:
            return await self._connect_vpn_only(connection_id, config)
        elif config.speed == ConnectionSpeed.SECURE:
            return await self._connect_vpn_antivirus(connection_id, config)
        else:
            return await self._connect_vpn_antivirus(connection_id, config)

    def _get_security_level(self, speed: ConnectionSpeed) -> VPNSecurityLevel:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏"""
        if speed == ConnectionSpeed.FAST:
            return VPNSecurityLevel.MEDIUM
        elif speed == ConnectionSpeed.SECURE:
            return VPNSecurityLevel.HIGH
        else:
            return VPNSecurityLevel.HIGH

    async def disconnect_mobile(self, connection_id: str) -> Dict[str, Any]:
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            if connection_id not in self.active_connections:
                return {"success": False, "message": "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"}

            config = self.active_connections[connection_id]["config"]

            # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            if config.connection_type in [
                ConnectionType.VPN_ONLY,
                ConnectionType.VPN_ANTIVIRUS,
                ConnectionType.SMART_PROTECTION,
            ]:
                if self.vpn_system:
                    success, message = await self.vpn_system.disconnect(
                        connection_id
                    )
                    if not success:
                        return {
                            "success": False,
                            "message": f"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è VPN: {message}",
                        }

            # –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
            del self.active_connections[connection_id]

            return {
                "success": True,
                "message": "‚úÖ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ",
                "connection_id": connection_id,
            }

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return {
                "success": False,
                "message": f"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è: {str(e)}",
            }

    def get_mobile_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        return {
            "app_name": "ALADDIN Security",
            "version": "1.0.0",
            "status": "ready",
            "active_connections": len(self.active_connections),
            "vpn_available": self.vpn_system is not None,
            "antivirus_available": self.antivirus_system is not None,
            "features": [
                "üåç VPN –∑–∞—â–∏—Ç–∞",
                "üõ°Ô∏è –ê–Ω—Ç–∏–≤–∏—Ä—É—Å",
                "üß† –£–º–Ω–∞—è –∑–∞—â–∏—Ç–∞",
                "‚ö° –ë—ã—Å—Ç—Ä–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ",
                "üîí –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å",
            ],
            "connection_options": self.get_connection_options(),
        }

    async def connect_vpn_only(
        self, config: MobileConnectionConfig
    ) -> MobileConnectionResult:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ VPN"""
        try:
            self.connection_counter += 1
            connection_id = f"vpn_{self.connection_counter}_{int(time.time())}"
            return await self._connect_vpn_only(connection_id, config)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è VPN: {e}")
            return MobileConnectionResult(
                success=False,
                message=f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è VPN: {e}",
                connection_id="",
                security_level="none",
                provider="internal",
            )

    async def connect_antivirus_only(
        self, config: MobileConnectionConfig
    ) -> MobileConnectionResult:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –∞–Ω—Ç–∏–≤–∏—Ä—É—Å–∞"""
        try:
            self.connection_counter += 1
            connection_id = (
                f"antivirus_{self.connection_counter}_{int(time.time())}"
            )
            return await self._connect_antivirus_only(connection_id, config)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∞–Ω—Ç–∏–≤–∏—Ä—É—Å–∞: {e}")
            return MobileConnectionResult(
                success=False,
                message=f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∞–Ω—Ç–∏–≤–∏—Ä—É—Å–∞: {e}",
                connection_id="",
                security_level="none",
                provider="internal",
            )

    async def connect_full_security(
        self, config: MobileConnectionConfig
    ) -> MobileConnectionResult:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∑–∞—â–∏—Ç—ã (VPN + –∞–Ω—Ç–∏–≤–∏—Ä—É—Å)"""
        try:
            self.connection_counter += 1
            connection_id = (
                f"full_{self.connection_counter}_{int(time.time())}"
            )
            return await self._connect_vpn_antivirus(connection_id, config)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –∑–∞—â–∏—Ç—ã: {e}")
            return MobileConnectionResult(
                success=False,
                message=f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –∑–∞—â–∏—Ç—ã: {e}",
                connection_id="",
                security_level="none",
                provider="internal",
            )

    async def disconnect_all(self) -> Dict[str, Any]:
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        try:
            disconnected_count = 0
            for connection_id in list(self.active_connections.keys()):
                result = await self.disconnect_mobile(connection_id)
                if result.get("success", False):
                    disconnected_count += 1
            return {
                "success": True,
                "message": f"–û—Ç–∫–ª—é—á–µ–Ω–æ {disconnected_count} —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π",
                "disconnected_count": disconnected_count,
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –≤—Å–µ—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {e}")
            return {
                "success": False,
                "message": f"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è: {e}",
                "disconnected_count": 0,
            }

    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        return self.get_mobile_status()

    def get_connection_info(self, connection_id: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏"""
        try:
            if connection_id in self.active_connections:
                connection = self.active_connections[connection_id]
                return {
                    "connection_id": connection_id,
                    "status": "active",
                    "type": connection.get("type", "unknown"),
                    "created_at": connection.get("created_at", ""),
                    "security_level": connection.get("security_level", "none"),
                }
            else:
                return {
                    "connection_id": connection_id,
                    "status": "not_found",
                    "message": "–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏: {e}")
            return {
                "connection_id": connection_id,
                "status": "error",
                "message": f"–û—à–∏–±–∫–∞: {e}",
            }

    def get_security_level(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            if self.vpn_system and self.antivirus_system:
                return "maximum"
            elif self.vpn_system or self.antivirus_system:
                return "partial"
            else:
                return "none"
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {e}")
            return "error"


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä API
mobile_api = MobileSecurityAPI()


async def main():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–±–∏–ª—å–Ω–æ–≥–æ API"""
    print("üì± –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–û–ë–ò–õ–¨–ù–û–ì–û API ALADDIN")
    print("=" * 50)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    mobile_api.get_connection_options()
    print("‚úÖ –í–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã")

    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è VPN
    config = MobileConnectionConfig(
        connection_type=ConnectionType.VPN_ONLY,
        speed=ConnectionSpeed.FAST,
        country="Singapore",
    )

    result = await mobile_api.connect_mobile(config)
    print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ VPN: {result.message}")

    # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ
    disconnect_result = await mobile_api.disconnect_mobile(
        result.connection_id
    )
    print(f"‚úÖ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ: {disconnect_result['message']}")

    # –°—Ç–∞—Ç—É—Å
    status = mobile_api.get_mobile_status()
    print(f"‚úÖ –°—Ç–∞—Ç—É—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {status['status']}")


if __name__ == "__main__":
    asyncio.run(main())
