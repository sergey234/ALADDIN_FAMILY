#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤—â–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—è
–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ Single Responsibility –ø—Ä–∏–Ω—Ü–∏–ø–∞
"""


from security.ai_agents.emergency_models import (
    EmergencyContact,
    EmergencyEvent,
)


class EmergencyMessageFormatter:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤—â–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π"""

    SEVERITY_EMOJIS = {
        "low": "üü°",
        "medium": "üü†",
        "high": "üî¥",
        "critical": "üö®",
        "life": "üíÄ",
    }

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤—â–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        pass

    @staticmethod
    def format_emergency_message(event: EmergencyEvent) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏

        Args:
            event: –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ

        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        emoji = EmergencyMessageFormatter.SEVERITY_EMOJIS.get(
            event.severity.value, "‚ö†Ô∏è"
        )

        message = f"{emoji} –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –°–ò–¢–£–ê–¶–ò–Ø\n"
        message += f"–¢–∏–ø: {event.emergency_type.value.upper()}\n"
        message += f"–°–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å: {event.severity.value.upper()}\n"
        message += f"–ú–µ—Å—Ç–æ: {event.location.address}\n"
        message += f"–û–ø–∏—Å–∞–Ω–∏–µ: {event.description}\n"
        message += f"–í—Ä–µ–º—è: {event.timestamp.strftime('%H:%M:%S %d.%m.%Y')}"

        return message

    @staticmethod
    def format_contact_notification(
        contact: EmergencyContact, event: EmergencyEvent
    ) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞

        Args:
            contact: –ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            event: –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ

        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        """
        message = f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è {contact.name}:\n\n"
        message += EmergencyMessageFormatter.format_emergency_message(event)
        message += (
            f"\n\n–°–≤—è–∂–∏—Ç–µ—Å—å —Å {contact.name} –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É: {contact.phone}"
        )

        return message

    @staticmethod
    def format_service_call_message(
        service: str, event: EmergencyEvent
    ) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—ã–∑–æ–≤–∞ —Å–ª—É–∂–±—ã

        Args:
            service: –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª—É–∂–±—ã
            event: –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ

        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        message = f"–í—ã–∑–æ–≤ —Å–ª—É–∂–±—ã {service.upper()}:\n\n"
        message += f"ID —Å–æ–±—ã—Ç–∏—è: {event.event_id}\n"
        message += f"–¢–∏–ø: {event.emergency_type.value}\n"
        message += f"–ú–µ—Å—Ç–æ: {event.location.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        message += (
            f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {event.location.get('coordinates', '–ù–µ —É–∫–∞–∑–∞–Ω—ã')}\n"
        )
        message += f"–û–ø–∏—Å–∞–Ω–∏–µ: {event.description}\n"
        message += f"–í—Ä–µ–º—è: {event.timestamp.strftime('%H:%M:%S %d.%m.%Y')}"

        return message


class EmergencyDataFormatter:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤—â–∏–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞"""

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤—â–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
        pass

    @staticmethod
    def format_events_for_json(events: list) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –¥–ª—è JSON —ç–∫—Å–ø–æ—Ä—Ç–∞

        Args:
            events: –°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π

        Returns:
            str: JSON —Å—Ç—Ä–æ–∫–∞
        """
        import json

        try:
            events_data = []
            for event in events:
                event_data = {
                    "event_id": event.event_id,
                    "emergency_type": event.emergency_type.value,
                    "severity": event.severity.value,
                    "location": {
                        "address": event.location.address,
                        "coordinates": event.location.coordinates,
                        "description": event.location.description,
                    },
                    "description": event.description,
                    "timestamp": event.timestamp.isoformat(),
                    "status": event.status.value,
                    "resolved_at": (
                        event.resolved_at.isoformat()
                        if event.resolved_at
                        else None
                    ),
                }
                events_data.append(event_data)

            return json.dumps(events_data, ensure_ascii=False, indent=2)
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {str(e)}"

    @staticmethod
    def format_contacts_for_csv(contacts: list) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è CSV —ç–∫—Å–ø–æ—Ä—Ç–∞

        Args:
            contacts: –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤

        Returns:
            str: CSV —Å—Ç—Ä–æ–∫–∞
        """
        try:
            csv_lines = [
                "contact_id,name,phone,email,relationship,priority,"
                "is_available"
            ]

            for contact in contacts:
                line = f"{contact.contact_id},{contact.name},{contact.phone},"
                line += f"{contact.email or ''},{contact.relationship},"
                line += f"{contact.priority},{contact.is_available}"
                csv_lines.append(line)

            return "\n".join(csv_lines)
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {str(e)}"
