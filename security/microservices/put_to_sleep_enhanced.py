#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å–∏—Å—Ç–µ–º –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º
–ü–µ—Ä–µ–≤–æ–¥–∏—Ç RateLimiter, CircuitBreaker –∏ UserInterfaceManager –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º
"""

import asyncio
import logging
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º

from circuit_breaker import CircuitBreaker
from rate_limiter import RateLimiter
from user_interface_manager import UserInterfaceManager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
)
logger = logging.getLogger(__name__)


class SleepManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å–∏—Å—Ç–µ–º –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º"""

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–Ω–∞"""
        self.sleep_config = {
            "redis_url": "redis://localhost:6379/0",
            "database_url": "sqlite:///sleep_mode.db",
            "ml_enabled": False,  # –û—Ç–∫–ª—é—á–∞–µ–º ML –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
            "adaptive_learning": False,  # –û—Ç–∫–ª—é—á–∞–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ
            "cleanup_interval": 3600,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—á–∏—Å—Ç–∫–∏
            "metrics_enabled": False,  # –û—Ç–∫–ª—é—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
            "logging_enabled": True,  # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –ª–æ–≥–∏
            "sleep_mode": True,  # –í–∫–ª—é—á–∞–µ–º —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º
            "auto_wake_up": True,  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            "wake_up_threshold": 0.8,  # –ü–æ—Ä–æ–≥ –¥–ª—è –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è
            "max_sleep_time": 86400,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Å–Ω–∞ (24 —á–∞—Å–∞)
        }

    async def put_systems_to_sleep(self):
        """
        –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –≤—Å–µ —Ç—Ä–∏ —Å–∏—Å—Ç–µ–º—ã –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º
        """
        logger.info("üåô –ù–∞—á–∏–Ω–∞—é –ø–µ—Ä–µ–≤–æ–¥ —Å–∏—Å—Ç–µ–º –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º...")

        systems = []

        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RateLimiter –≤ —Å–ø—è—â–µ–º —Ä–µ–∂–∏–º–µ
            logger.info("üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RateLimiter –≤ —Å–ø—è—â–µ–º —Ä–µ–∂–∏–º–µ...")
            rate_limiter = RateLimiter("RateLimiter_Sleep", self.sleep_config)
            await rate_limiter.start()
            systems.append(("RateLimiter", rate_limiter))
            logger.info("‚úÖ RateLimiter –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º")

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CircuitBreaker –≤ —Å–ø—è—â–µ–º —Ä–µ–∂–∏–º–µ
            logger.info("‚ö° –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CircuitBreaker –≤ —Å–ø—è—â–µ–º —Ä–µ–∂–∏–º–µ...")
            circuit_breaker = CircuitBreaker("CircuitBreaker_Sleep", self.sleep_config)
            await circuit_breaker.start()
            systems.append(("CircuitBreaker", circuit_breaker))
            logger.info("‚úÖ CircuitBreaker –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º")

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UserInterfaceManager –≤ —Å–ø—è—â–µ–º —Ä–µ–∂–∏–º–µ
            logger.info("üñ•Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UserInterfaceManager –≤ —Å–ø—è—â–µ–º —Ä–µ–∂–∏–º–µ...")
            ui_manager = UserInterfaceManager(
                "UserInterfaceManager_Sleep", self.sleep_config
            )
            await ui_manager.start()
            systems.append(("UserInterfaceManager", ui_manager))
            logger.info("‚úÖ UserInterfaceManager –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º
            logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º...")
            for name, system in systems:
                status = await system.get_status()
                logger.info(f"üìã {name} —Å—Ç–∞—Ç—É—Å: {status.get('status', 'unknown')}")

            logger.info("üéâ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º!")
            logger.info(
                "üí§ –°–∏—Å—Ç–µ–º—ã –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–±—É–∂–¥–∞—Ç—å—Å—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"
            )

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–ø—è—â–µ–≥–æ —Ä–µ–∂–∏–º–∞
            sleep_config_file = os.path.join(
                os.path.dirname(__file__), "sleep_mode_config.json"
            )
            import json

            with open(sleep_config_file, "w", encoding="utf-8") as f:
                json.dump(self.sleep_config, f, indent=2, ensure_ascii=False)
            logger.info(
                f"üíæ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–ø—è—â–µ–≥–æ —Ä–µ–∂–∏–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {sleep_config_file}"
            )

            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ —Å–∏—Å—Ç–µ–º –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º: {e}")
            return False

        finally:
            # –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
            logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...")
            for name, system in systems:
                try:
                    await system.stop()
                    logger.info(f"üõë {name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ {name}: {e}")


def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    """
    print("üåô ALADDIN Security System - –ü–µ—Ä–µ–≤–æ–¥ –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º")
    print("=" * 60)

    try:
        # –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
        sleep_manager = SleepManager()
        result = asyncio.run(sleep_manager.put_systems_to_sleep())

        if result:
            print("\n‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º!")
            print(
                "üí§ –°–∏—Å—Ç–µ–º—ã –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–±—É–∂–¥–∞—Ç—å—Å—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"
            )
            print(
                "üîß –î–ª—è —Ä—É—á–Ω–æ–≥–æ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: python3 wake_up_systems.py"
            )
        else:
            print("\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ —Å–∏—Å—Ç–µ–º –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º!")
            return 1

    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return 1
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1

    return 0


if __name__ == "__main__":
    exit(main())
