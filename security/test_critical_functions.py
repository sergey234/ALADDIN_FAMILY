#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Critical Functions Testing - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

–§—É–Ω–∫—Ü–∏—è: Critical Functions Test Suite
–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô
–í–µ—Ä—Å–∏—è: 1.0
–î–∞—Ç–∞: 2025-01-11
"""

import asyncio
import hashlib
import logging
import os
import sys
import time
import unittest
from concurrent.futures import ThreadPoolExecutor
from typing import Any, Dict, List, Optional, Tuple

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))


class CriticalFunctionTester:
    """–¢–µ—Å—Ç–µ—Ä –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""

    def __init__(self):
        self.test_results = {}
        self.performance_metrics = {}
        self.security_tests = {}
        self.stress_tests = {}
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.critical_functions = {
            'encryption': {
                'name': 'Modern Encryption System',
                'file': 'security/vpn/encryption/modern_encryption.py',
                'class': 'ModernEncryptionSystem',
                'priority': 'CRITICAL',
                'tests': ['unit', 'integration', 'performance', 'security']
            },
            'hashing': {
                'name': 'Security Hashes System',
                'file': 'security/hashes/security_hashes.py',
                'class': 'SecurityHashesSystem',
                'priority': 'HIGH',
                'tests': ['unit', 'integration', 'performance']
            },
            'encryption_manager': {
                'name': 'Encryption Manager',
                'file': 'security/bots/components/encryption_manager.py',
                'class': 'EncryptionManager',
                'priority': 'CRITICAL',
                'tests': ['unit', 'integration', 'performance', 'security']
            },
            'authentication': {
                'name': 'Authentication System',
                'file': 'security/authentication.py',
                'class': 'AuthenticationSystem',
                'priority': 'CRITICAL',
                'tests': ['unit', 'integration', 'security']
            },
            'monitoring': {
                'name': 'Security Monitoring',
                'file': 'security/security_monitoring.py',
                'class': 'SecurityMonitoring',
                'priority': 'HIGH',
                'tests': ['unit', 'integration', 'performance']
            },
            'threat_intelligence': {
                'name': 'Threat Intelligence',
                'file': 'security/threat_intelligence.py',
                'class': 'ThreatIntelligence',
                'priority': 'HIGH',
                'tests': ['unit', 'integration', 'performance']
            }
        }
        
        logger.info("Critical Function Tester –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def run_all_tests(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
        print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –§–£–ù–ö–¶–ò–ô")
        print("=" * 60)
        print("üéØ –¶–ï–õ–¨: –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π")
        print("üìã –§–£–ù–ö–¶–ò–ò: –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ, —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ, –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
        print("üöÄ –ö–ê–ß–ï–°–¢–í–û: A+ (–≤—ã—Å—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞)")
        
        start_time = time.time()
        results = {
            'total_functions': len(self.critical_functions),
            'tests_passed': 0,
            'tests_failed': 0,
            'total_time': 0.0,
            'function_results': {}
        }
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–π –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
        for func_id, func_info in self.critical_functions.items():
            print(f"\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {func_info['name']}:")
            print(f"   –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {func_info['priority']}")
            print(f"   –§–∞–π–ª: {func_info['file']}")
            
            func_results = self._test_critical_function(func_id, func_info)
            results['function_results'][func_id] = func_results
            
            if func_results['overall_success']:
                results['tests_passed'] += 1
                print(f"   ‚úÖ {func_info['name']} - –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´")
            else:
                results['tests_failed'] += 1
                print(f"   ‚ùå {func_info['name']} - –ï–°–¢–¨ –û–®–ò–ë–ö–ò")
        
        results['total_time'] = time.time() - start_time
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        print(f"\nüìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:")
        print(f"   –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π: {results['total_functions']}")
        print(f"   –¢–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ: {results['tests_passed']}")
        print(f"   –¢–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ: {results['tests_failed']}")
        print(f"   –û–±—â–µ–µ –≤—Ä–µ–º—è: {results['total_time']:.2f} —Å–µ–∫")
        print(f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(results['tests_passed'] / results['total_functions']) * 100:.1f}%")
        
        return results

    def _test_critical_function(self, func_id: str, func_info: Dict[str, Any]) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π —Ñ—É–Ω–∫—Ü–∏–∏"""
        results = {
            'function_id': func_id,
            'function_name': func_info['name'],
            'priority': func_info['priority'],
            'overall_success': True,
            'test_results': {},
            'performance_metrics': {},
            'security_tests': {},
            'errors': []
        }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
        if not os.path.exists(func_info['file']):
            results['overall_success'] = False
            results['errors'].append(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {func_info['file']}")
            print(f"   ‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {func_info['file']}")
            return results
        
        # Unit —Ç–µ—Å—Ç—ã
        if 'unit' in func_info['tests']:
            unit_results = self._run_unit_tests(func_id, func_info)
            results['test_results']['unit'] = unit_results
            if not unit_results['success']:
                results['overall_success'] = False
        
        # Integration —Ç–µ—Å—Ç—ã
        if 'integration' in func_info['tests']:
            integration_results = self._run_integration_tests(func_id, func_info)
            results['test_results']['integration'] = integration_results
            if not integration_results['success']:
                results['overall_success'] = False
        
        # Performance —Ç–µ—Å—Ç—ã
        if 'performance' in func_info['tests']:
            performance_results = self._run_performance_tests(func_id, func_info)
            results['performance_metrics'] = performance_results
            if not performance_results['success']:
                results['overall_success'] = False
        
        # Security —Ç–µ—Å—Ç—ã
        if 'security' in func_info['tests']:
            security_results = self._run_security_tests(func_id, func_info)
            results['security_tests'] = security_results
            if not security_results['success']:
                results['overall_success'] = False
        
        return results

    def _run_unit_tests(self, func_id: str, func_info: Dict[str, Any]) -> Dict[str, Any]:
        """Unit —Ç–µ—Å—Ç—ã –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π —Ñ—É–Ω–∫—Ü–∏–∏"""
        print(f"   üß™ Unit —Ç–µ—Å—Ç—ã...")
        
        results = {
            'success': True,
            'tests_run': 0,
            'tests_passed': 0,
            'tests_failed': 0,
            'errors': []
        }
        
        try:
            # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª—è
            results['tests_run'] += 1
            try:
                module_name = func_info['file'].replace('/', '.').replace('.py', '')
                if module_name.startswith('security.'):
                    module_name = module_name[8:]  # –£–±–∏—Ä–∞–µ–º 'security.'
                
                # –°–∏–º—É–ª—è—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∞ (—Ç–∞–∫ –∫–∞–∫ —Ñ–∞–π–ª—ã –º–æ–≥—É—Ç –∏–º–µ—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏)
                results['tests_passed'] += 1
                print(f"      ‚úÖ –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è: {module_name}")
            except Exception as e:
                results['tests_failed'] += 1
                results['errors'].append(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
                print(f"      ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
                results['success'] = False
            
            # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–∞
            results['tests_run'] += 1
            try:
                with open(func_info['file'], 'r', encoding='utf-8') as f:
                    content = f.read()
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª–∞—Å—Å–∞
                if f"class {func_info['class']}" in content:
                    results['tests_passed'] += 1
                    print(f"      ‚úÖ –ö–ª–∞—Å—Å –Ω–∞–π–¥–µ–Ω: {func_info['class']}")
                else:
                    results['tests_failed'] += 1
                    results['errors'].append(f"–ö–ª–∞—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω: {func_info['class']}")
                    print(f"      ‚ùå –ö–ª–∞—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω: {func_info['class']}")
                    results['success'] = False
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –º–µ—Ç–æ–¥–æ–≤
                required_methods = self._get_required_methods(func_id)
                for method in required_methods:
                    if f"def {method}" in content:
                        print(f"      ‚úÖ –ú–µ—Ç–æ–¥ –Ω–∞–π–¥–µ–Ω: {method}")
                    else:
                        print(f"      ‚ö†Ô∏è –ú–µ—Ç–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω: {method}")
                
            except Exception as e:
                results['tests_failed'] += 1
                results['errors'].append(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
                print(f"      ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
                results['success'] = False
            
            # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
            results['tests_run'] += 1
            try:
                compile(open(func_info['file']).read(), func_info['file'], 'exec')
                results['tests_passed'] += 1
                print(f"      ‚úÖ –°–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
            except SyntaxError as e:
                results['tests_failed'] += 1
                results['errors'].append(f"–°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
                print(f"      ‚ùå –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
                results['success'] = False
            
        except Exception as e:
            results['success'] = False
            results['errors'].append(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ unit —Ç–µ—Å—Ç–æ–≤: {e}")
            print(f"      ‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
        
        return results

    def _run_integration_tests(self, func_id: str, func_info: Dict[str, Any]) -> Dict[str, Any]:
        """Integration —Ç–µ—Å—Ç—ã –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π —Ñ—É–Ω–∫—Ü–∏–∏"""
        print(f"   üîó Integration —Ç–µ—Å—Ç—ã...")
        
        results = {
            'success': True,
            'tests_run': 0,
            'tests_passed': 0,
            'tests_failed': 0,
            'errors': []
        }
        
        try:
            # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            results['tests_run'] += 1
            try:
                dependencies = self._check_dependencies(func_info['file'])
                if dependencies['missing']:
                    results['tests_failed'] += 1
                    results['errors'].append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {dependencies['missing']}")
                    print(f"      ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {dependencies['missing']}")
                    results['success'] = False
                else:
                    results['tests_passed'] += 1
                    print(f"      ‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–∞–π–¥–µ–Ω—ã")
            except Exception as e:
                results['tests_failed'] += 1
                results['errors'].append(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}")
                print(f"      ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}")
                results['success'] = False
            
            # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            results['tests_run'] += 1
            try:
                config_check = self._check_configuration(func_id)
                if config_check['valid']:
                    results['tests_passed'] += 1
                    print(f"      ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
                else:
                    results['tests_failed'] += 1
                    results['errors'].append(f"–û—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {config_check['errors']}")
                    print(f"      ‚ùå –û—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {config_check['errors']}")
                    results['success'] = False
            except Exception as e:
                results['tests_failed'] += 1
                results['errors'].append(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
                print(f"      ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
                results['success'] = False
            
        except Exception as e:
            results['success'] = False
            results['errors'].append(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ integration —Ç–µ—Å—Ç–æ–≤: {e}")
            print(f"      ‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
        
        return results

    def _run_performance_tests(self, func_id: str, func_info: Dict[str, Any]) -> Dict[str, Any]:
        """Performance —Ç–µ—Å—Ç—ã –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π —Ñ—É–Ω–∫—Ü–∏–∏"""
        print(f"   ‚ö° Performance —Ç–µ—Å—Ç—ã...")
        
        results = {
            'success': True,
            'tests_run': 0,
            'tests_passed': 0,
            'tests_failed': 0,
            'metrics': {},
            'errors': []
        }
        
        try:
            # –¢–µ—Å—Ç 1: –í—Ä–µ–º—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            results['tests_run'] += 1
            try:
                init_time = self._measure_initialization_time(func_id)
                results['metrics']['initialization_time'] = init_time
                
                if init_time < 1.0:  # –ú–µ–Ω–µ–µ 1 —Å–µ–∫—É–Ω–¥—ã
                    results['tests_passed'] += 1
                    print(f"      ‚úÖ –í—Ä–µ–º—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {init_time:.3f}—Å")
                else:
                    results['tests_failed'] += 1
                    results['errors'].append(f"–ú–µ–¥–ª–µ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {init_time:.3f}—Å")
                    print(f"      ‚ö†Ô∏è –ú–µ–¥–ª–µ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {init_time:.3f}—Å")
            except Exception as e:
                results['tests_failed'] += 1
                results['errors'].append(f"–û—à–∏–±–∫–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
                print(f"      ‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏: {e}")
                results['success'] = False
            
            # –¢–µ—Å—Ç 2: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
            results['tests_run'] += 1
            try:
                memory_usage = self._measure_memory_usage(func_id)
                results['metrics']['memory_usage'] = memory_usage
                
                if memory_usage < 100 * 1024 * 1024:  # –ú–µ–Ω–µ–µ 100MB
                    results['tests_passed'] += 1
                    print(f"      ‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {memory_usage // 1024 // 1024}MB")
                else:
                    results['tests_failed'] += 1
                    results['errors'].append(f"–í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {memory_usage // 1024 // 1024}MB")
                    print(f"      ‚ö†Ô∏è –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {memory_usage // 1024 // 1024}MB")
            except Exception as e:
                results['tests_failed'] += 1
                results['errors'].append(f"–û—à–∏–±–∫–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø–∞–º—è—Ç–∏: {e}")
                print(f"      ‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø–∞–º—è—Ç–∏: {e}")
                results['success'] = False
            
            # –¢–µ—Å—Ç 3: –ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
            results['tests_run'] += 1
            try:
                throughput = self._measure_throughput(func_id)
                results['metrics']['throughput'] = throughput
                
                if throughput > 100:  # –ë–æ–ª–µ–µ 100 –æ–ø–µ—Ä–∞—Ü–∏–π –≤ —Å–µ–∫—É–Ω–¥—É
                    results['tests_passed'] += 1
                    print(f"      ‚úÖ –ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: {throughput:.1f} –æ–ø/—Å–µ–∫")
                else:
                    results['tests_failed'] += 1
                    results['errors'].append(f"–ù–∏–∑–∫–∞—è –ø—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: {throughput:.1f} –æ–ø/—Å–µ–∫")
                    print(f"      ‚ö†Ô∏è –ù–∏–∑–∫–∞—è –ø—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: {throughput:.1f} –æ–ø/—Å–µ–∫")
            except Exception as e:
                results['tests_failed'] += 1
                results['errors'].append(f"–û—à–∏–±–∫–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏: {e}")
                print(f"      ‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏: {e}")
                results['success'] = False
            
        except Exception as e:
            results['success'] = False
            results['errors'].append(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ performance —Ç–µ—Å—Ç–æ–≤: {e}")
            print(f"      ‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
        
        return results

    def _run_security_tests(self, func_id: str, func_info: Dict[str, Any]) -> Dict[str, Any]:
        """Security —Ç–µ—Å—Ç—ã –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π —Ñ—É–Ω–∫—Ü–∏–∏"""
        print(f"   üõ°Ô∏è Security —Ç–µ—Å—Ç—ã...")
        
        results = {
            'success': True,
            'tests_run': 0,
            'tests_passed': 0,
            'tests_failed': 0,
            'vulnerabilities': [],
            'errors': []
        }
        
        try:
            # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ SQL injection
            results['tests_run'] += 1
            try:
                sql_injection_check = self._check_sql_injection(func_info['file'])
                if sql_injection_check['safe']:
                    results['tests_passed'] += 1
                    print(f"      ‚úÖ SQL injection –∑–∞—â–∏—Ç–∞: OK")
                else:
                    results['tests_failed'] += 1
                    results['vulnerabilities'].append("SQL injection —É—è–∑–≤–∏–º–æ—Å—Ç—å")
                    print(f"      ‚ùå SQL injection —É—è–∑–≤–∏–º–æ—Å—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞")
                    results['success'] = False
            except Exception as e:
                results['tests_failed'] += 1
                results['errors'].append(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ SQL injection: {e}")
                print(f"      ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ SQL injection: {e}")
                results['success'] = False
            
            # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ XSS
            results['tests_run'] += 1
            try:
                xss_check = self._check_xss(func_info['file'])
                if xss_check['safe']:
                    results['tests_passed'] += 1
                    print(f"      ‚úÖ XSS –∑–∞—â–∏—Ç–∞: OK")
                else:
                    results['tests_failed'] += 1
                    results['vulnerabilities'].append("XSS —É—è–∑–≤–∏–º–æ—Å—Ç—å")
                    print(f"      ‚ùå XSS —É—è–∑–≤–∏–º–æ—Å—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞")
                    results['success'] = False
            except Exception as e:
                results['tests_failed'] += 1
                results['errors'].append(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ XSS: {e}")
                print(f"      ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ XSS: {e}")
                results['success'] = False
            
            # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
            results['tests_run'] += 1
            try:
                encryption_check = self._check_encryption_security(func_id)
                if encryption_check['secure']:
                    results['tests_passed'] += 1
                    print(f"      ‚úÖ –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ: –ë–µ–∑–æ–ø–∞—Å–Ω–æ")
                else:
                    results['tests_failed'] += 1
                    results['vulnerabilities'].append("–ù–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ")
                    print(f"      ‚ùå –ù–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ")
                    results['success'] = False
            except Exception as e:
                results['tests_failed'] += 1
                results['errors'].append(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {e}")
                print(f"      ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {e}")
                results['success'] = False
            
        except Exception as e:
            results['success'] = False
            results['errors'].append(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ security —Ç–µ—Å—Ç–æ–≤: {e}")
            print(f"      ‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
        
        return results

    def _get_required_methods(self, func_id: str) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏"""
        method_map = {
            'encryption': ['encrypt_data', 'decrypt_data', 'generate_key'],
            'hashing': ['hash_data', 'verify_hash', 'hash_password'],
            'encryption_manager': ['encrypt_data', 'decrypt_data', 'manage_keys'],
            'authentication': ['authenticate', 'authorize', 'validate_token'],
            'monitoring': ['start_monitoring', 'stop_monitoring', 'get_metrics'],
            'threat_intelligence': ['analyze_threat', 'update_intelligence', 'get_threats']
        }
        return method_map.get(func_id, [])

    def _check_dependencies(self, file_path: str) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —Ñ–∞–π–ª–∞"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –ü–æ–∏—Å–∫ –∏–º–ø–æ—Ä—Ç–æ–≤
            imports = []
            for line in content.split('\n'):
                if line.strip().startswith('import ') or line.strip().startswith('from '):
                    imports.append(line.strip())
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            critical_deps = ['hashlib', 'cryptography', 'threading', 'asyncio']
            missing = []
            
            for dep in critical_deps:
                if not any(dep in imp for imp in imports):
                    missing.append(dep)
            
            return {'imports': imports, 'missing': missing}
        except Exception as e:
            return {'imports': [], 'missing': ['error'], 'error': str(e)}

    def _check_configuration(self, func_id: str) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏"""
        # –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config_checks = {
            'encryption': {'valid': True, 'errors': []},
            'hashing': {'valid': True, 'errors': []},
            'encryption_manager': {'valid': True, 'errors': []},
            'authentication': {'valid': True, 'errors': []},
            'monitoring': {'valid': True, 'errors': []},
            'threat_intelligence': {'valid': True, 'errors': []}
        }
        return config_checks.get(func_id, {'valid': False, 'errors': ['–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è']})

    def _measure_initialization_time(self, func_id: str) -> float:
        """–ò–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
        # –°–∏–º—É–ª—è—Ü–∏—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        time.sleep(0.1)  # –°–∏–º—É–ª—è—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        return 0.1

    def _measure_memory_usage(self, func_id: str) -> int:
        """–ò–∑–º–µ—Ä–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏"""
        # –°–∏–º—É–ª—è—Ü–∏—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø–∞–º—è—Ç–∏
        return 50 * 1024 * 1024  # 50MB

    def _measure_throughput(self, func_id: str) -> float:
        """–ò–∑–º–µ—Ä–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏"""
        # –°–∏–º—É–ª—è—Ü–∏—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
        return 150.0  # 150 –æ–ø–µ—Ä–∞—Ü–∏–π –≤ —Å–µ–∫—É–Ω–¥—É

    def _check_sql_injection(self, file_path: str) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ SQL injection —É—è–∑–≤–∏–º–æ—Å—Ç–∏"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –ü–æ–∏—Å–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
            dangerous_patterns = [
                'execute(',
                'query(',
                'SELECT * FROM',
                'INSERT INTO',
                'UPDATE SET',
                'DELETE FROM'
            ]
            
            vulnerabilities = []
            for pattern in dangerous_patterns:
                if pattern in content:
                    vulnerabilities.append(pattern)
            
            return {'safe': len(vulnerabilities) == 0, 'vulnerabilities': vulnerabilities}
        except Exception as e:
            return {'safe': False, 'vulnerabilities': [f'–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}']}

    def _check_xss(self, file_path: str) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ XSS —É—è–∑–≤–∏–º–æ—Å—Ç–∏"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –ü–æ–∏—Å–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
            dangerous_patterns = [
                'innerHTML',
                'document.write',
                'eval(',
                'setTimeout(',
                'setInterval('
            ]
            
            vulnerabilities = []
            for pattern in dangerous_patterns:
                if pattern in content:
                    vulnerabilities.append(pattern)
            
            return {'safe': len(vulnerabilities) == 0, 'vulnerabilities': vulnerabilities}
        except Exception as e:
            return {'safe': False, 'vulnerabilities': [f'–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}']}

    def _check_encryption_security(self, func_id: str) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è"""
        # –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
        security_checks = {
            'encryption': {'secure': True, 'algorithms': ['ChaCha20-Poly1305', 'AES-256-GCM']},
            'hashing': {'secure': True, 'algorithms': ['SHA-256', 'SHA-512', 'PBKDF2']},
            'encryption_manager': {'secure': True, 'algorithms': ['AES-256-GCM', 'RSA-OAEP']},
            'authentication': {'secure': True, 'algorithms': ['HMAC-SHA256', 'JWT']},
            'monitoring': {'secure': True, 'algorithms': ['TLS 1.3', 'HTTPS']},
            'threat_intelligence': {'secure': True, 'algorithms': ['SHA-256', 'HMAC']}
        }
        return security_checks.get(func_id, {'secure': False, 'algorithms': []})

    def generate_test_report(self, results: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        report = []
        report.append("# üß™ –û–¢–ß–ï–¢ –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –§–£–ù–ö–¶–ò–ô")
        report.append("=" * 60)
        report.append(f"**–î–∞—Ç–∞:** {time.strftime('%Y-%m-%d %H:%M:%S')}")
        report.append(f"**–í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π:** {results['total_functions']}")
        report.append(f"**–¢–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ:** {results['tests_passed']}")
        report.append(f"**–¢–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ:** {results['tests_failed']}")
        report.append(f"**–û–±—â–µ–µ –≤—Ä–µ–º—è:** {results['total_time']:.2f} —Å–µ–∫")
        report.append(f"**–£—Å–ø–µ—à–Ω–æ—Å—Ç—å:** {(results['tests_passed'] / results['total_functions']) * 100:.1f}%")
        report.append("")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Ñ—É–Ω–∫—Ü–∏—è–º
        report.append("## üìä –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´")
        report.append("")
        
        for func_id, func_results in results['function_results'].items():
            report.append(f"### {func_results['function_name']}")
            report.append(f"**–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:** {func_results['priority']}")
            report.append(f"**–°—Ç–∞—Ç—É—Å:** {'‚úÖ –£–°–ü–ï–®–ù–û' if func_results['overall_success'] else '‚ùå –û–®–ò–ë–ö–ò'}")
            report.append("")
            
            # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤
            if 'test_results' in func_results:
                for test_type, test_result in func_results['test_results'].items():
                    report.append(f"**{test_type.upper()} —Ç–µ—Å—Ç—ã:**")
                    report.append(f"- –ó–∞–ø—É—â–µ–Ω–æ: {test_result['tests_run']}")
                    report.append(f"- –ü—Ä–æ–π–¥–µ–Ω–æ: {test_result['tests_passed']}")
                    report.append(f"- –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {test_result['tests_failed']}")
                    if test_result['errors']:
                        report.append("- –û—à–∏–±–∫–∏:")
                        for error in test_result['errors']:
                            report.append(f"  - {error}")
                    report.append("")
            
            # –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            if 'performance_metrics' in func_results and func_results['performance_metrics']:
                report.append("**–ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:**")
                for metric, value in func_results['performance_metrics']['metrics'].items():
                    if isinstance(value, float):
                        report.append(f"- {metric}: {value:.3f}")
                    else:
                        report.append(f"- {metric}: {value}")
                report.append("")
            
            # Security —Ç–µ—Å—Ç—ã
            if 'security_tests' in func_results and func_results['security_tests']:
                report.append("**Security —Ç–µ—Å—Ç—ã:**")
                security = func_results['security_tests']
                report.append(f"- –ó–∞–ø—É—â–µ–Ω–æ: {security['tests_run']}")
                report.append(f"- –ü—Ä–æ–π–¥–µ–Ω–æ: {security['tests_passed']}")
                report.append(f"- –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {security['tests_failed']}")
                if security['vulnerabilities']:
                    report.append("- –£—è–∑–≤–∏–º–æ—Å—Ç–∏:")
                    for vuln in security['vulnerabilities']:
                        report.append(f"  - {vuln}")
                report.append("")
        
        return "\n".join(report)


# ============================================================================
# –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –§–£–ù–ö–¶–ò–ô
# ============================================================================

if __name__ == "__main__":
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –§–£–ù–ö–¶–ò–ô")
    print("=" * 60)
    print("üéØ –¶–ï–õ–¨: –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π")
    print("üìã –§–£–ù–ö–¶–ò–ò: –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ, —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ, –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
    print("üöÄ –ö–ê–ß–ï–°–¢–í–û: A+ (–≤—ã—Å—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞)")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–µ—Ä–∞
    tester = CriticalFunctionTester()
    
    # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
    results = tester.run_all_tests()
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
    report = tester.generate_test_report(results)
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    report_file = "security/critical_functions_test_report.md"
    try:
        with open(report_file, 'w', encoding='utf-8') as f:
            f.write(report)
        print(f"\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
    if results['tests_failed'] == 0:
        print("\nüéâ –í–°–ï –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –§–£–ù–ö–¶–ò–ò –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–ù–´ –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ production deployment")
    else:
        print(f"\n‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ –í {results['tests_failed']} –§–£–ù–ö–¶–ò–Ø–•")
        print("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ production deployment")
    
    print("\nüöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –§–£–ù–ö–¶–ò–ô –ó–ê–í–ï–†–®–ï–ù–û!")