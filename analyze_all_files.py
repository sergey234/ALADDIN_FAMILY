#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
"""

import subprocess
import sys
import os
from pathlib import Path

def analyze_file(file_path):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–¥–∏–Ω —Ñ–∞–π–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–∞—Ö"""
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º flake8 –¥–ª—è —Ñ–∞–π–ª–∞
        result = subprocess.run([
            'python3', '-m', 'flake8', 
            '--count', '--statistics', '--max-line-length=79',
            str(file_path)
        ], capture_output=True, text=True, cwd='/Users/sergejhlystov/ALADDIN_NEW')
        
        if result.returncode == 0:
            return {
                'file': file_path,
                'total_errors': 0,
                'error_details': {},
                'raw_output': ''
            }
        
        # –ü–∞—Ä—Å–∏–º –≤—ã–≤–æ–¥ flake8
        lines = result.stdout.strip().split('\n')
        total_errors = 0
        error_details = {}
        
        for line in lines:
            if ':' in line and any(code in line for code in ['E', 'W', 'F']):
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥ –æ—à–∏–±–∫–∏
                parts = line.split(':')
                if len(parts) >= 3:
                    error_code = parts[2].strip().split()[0]
                    if error_code in error_details:
                        error_details[error_code] += 1
                    else:
                        error_details[error_code] = 1
                    total_errors += 1
        
        return {
            'file': file_path,
            'total_errors': total_errors,
            'error_details': error_details,
            'raw_output': result.stdout
        }
        
    except Exception as e:
        return {
            'file': file_path,
            'total_errors': -1,
            'error_details': {},
            'raw_output': f'Error: {str(e)}'
        }

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç –ê–ù–ê–õ–ò–ó –í–°–ï–• –§–ê–ô–õ–û–í –°–ò–°–¢–ï–ú–´ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò")
    print("=" * 60)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
    result = subprocess.run([
        'find', 'security/', 'core/', 'config/', '-name', '*.py'
    ], capture_output=True, text=True, cwd='/Users/sergejhlystov/ALADDIN_NEW')
    
    files = [f for f in result.stdout.strip().split('\n') 
             if f and not any(x in f for x in ['backup', '.bak', '.backup', '__pycache__'])]
    
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(files)}")
    print()
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
    all_results = []
    for i, file_path in enumerate(files, 1):
        print(f"‚è≥ –ê–Ω–∞–ª–∏–∑ {i}/{len(files)}: {os.path.basename(file_path)}")
        result = analyze_file(file_path)
        all_results.append(result)
    
    print("\n" + "=" * 60)
    print("üìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê")
    print("=" * 60)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ—à–∏–±–æ–∫
    all_results.sort(key=lambda x: x['total_errors'], reverse=True)
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    for result in all_results:
        if result['total_errors'] > 0:
            print(f"\nüî¥ {os.path.basename(result['file'])} - {result['total_errors']} –æ—à–∏–±–æ–∫")
            for error_code, count in sorted(result['error_details'].items()):
                print(f"   {error_code}: {count}")
        elif result['total_errors'] == 0:
            print(f"‚úÖ {os.path.basename(result['file'])} - 0 –æ—à–∏–±–æ–∫")
        else:
            print(f"‚ùå {os.path.basename(result['file'])} - –û–®–ò–ë–ö–ê –ê–ù–ê–õ–ò–ó–ê")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_errors = sum(r['total_errors'] for r in all_results if r['total_errors'] > 0)
    files_with_errors = len([r for r in all_results if r['total_errors'] > 0])
    files_perfect = len([r for r in all_results if r['total_errors'] == 0])
    
    print(f"\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {len(files)}")
    print(f"   –§–∞–π–ª–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏: {files_with_errors}")
    print(f"   –ò–¥–µ–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {files_perfect}")
    print(f"   –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {total_errors}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª
    with open('/Users/sergejhlystov/ALADDIN_NEW/all_files_analysis.txt', 'w', encoding='utf-8') as f:
        f.write("üîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –í–°–ï–• –§–ê–ô–õ–û–í –°–ò–°–¢–ï–ú–´ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò\n")
        f.write("=" * 60 + "\n\n")
        
        for result in all_results:
            f.write(f"üìÅ {result['file']}\n")
            f.write(f"   –û—à–∏–±–æ–∫: {result['total_errors']}\n")
            if result['error_details']:
                for error_code, count in sorted(result['error_details'].items()):
                    f.write(f"   {error_code}: {count}\n")
            f.write("\n")
    
    print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: all_files_analysis.txt")

if __name__ == "__main__":
    main()