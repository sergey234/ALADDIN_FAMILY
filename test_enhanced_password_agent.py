#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö —É–ª—É—á—à–µ–Ω–∏–π PasswordSecurityAgent.

–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç:
- ASYNC/AWAIT –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
- –í–∞–ª–∏–¥–∞—Ü–∏—é –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
- –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ docstrings
- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ dataclass
- –í—Å–µ –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∞–≥–µ–Ω—Ç–∞
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.join(os.path.dirname(__file__), "security", "ai_agents"))

from password_security_agent_enhanced_v2 import (
    PasswordSecurityAgent,
    PasswordConfig,
    PasswordStrength,
)


async def test_async_functionality():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏."""
    print("\nüîÑ –¢–ï–°–¢ –ê–°–ò–ù–•–†–û–ù–ù–û–ô –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–ò")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞ —Å –∫–∞—Å—Ç–æ–º–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
    config = PasswordConfig(
        min_length=12,
        max_length=32,
        require_special=True,
        exclude_similar=True,
        max_age_days=60
    )
    
    agent = PasswordSecurityAgent("async_test_agent", config)
    
    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è
    print("üîê –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è...")
    password = await agent.async_generate_password(16)
    print(f"   –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å: {password}")
    
    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    print("üîç –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏...")
    strength = await agent.async_analyze_password_strength(password)
    print(f"   –°–ª–æ–∂–Ω–æ—Å—Ç—å –ø–∞—Ä–æ–ª—è: {strength}")
    
    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
    print("üîí –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ...")
    hash_result = await agent.async_hash_password(password)
    print(f"   –•–µ—à —Å–æ–∑–¥–∞–Ω: {len(hash_result['hash'])} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    print("‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...")
    is_valid = await agent.async_verify_password(
        password, hash_result["hash"], hash_result["salt"]
    )
    print(f"   –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if is_valid else '‚ùå –û—à–∏–±–∫–∞'}")
    
    return agent


def test_validation_and_monitoring(agent):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."""
    print("\nüìä –¢–ï–°–¢ –í–ê–õ–ò–î–ê–¶–ò–ò –ò –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê")
    print("=" * 50)
    
    # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    print("üõ°Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤...")
    
    try:
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        password = agent.generate_password(length=12)
        print(f"   ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: –ø–∞—Ä–æ–ª—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
        
        # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–¥–æ–ª–∂–Ω—ã –≤—ã–∑–≤–∞—Ç—å –æ—à–∏–±–∫—É)
        try:
            invalid_password = agent.generate_password(length=200)  # –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
            print(f"   ‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞!")
        except ValueError as e:
            print(f"   ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ä–∞–±–æ—Ç–∞–ª–∞: {str(e)[:50]}...")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
    
    # –¢–µ—Å—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    print("üìà –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–∞—Ä–æ–ª–µ–π –¥–ª—è —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫
    for i in range(3):
        password = agent.generate_password(12 + i * 2)
        strength = agent.analyze_password_strength(password)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = agent.get_performance_stats()
    print(f"   üìä –û–ø–µ—Ä–∞—Ü–∏–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª–µ–π: {stats['operation_counts'].get('password_generation', 0)}")
    print(f"   üìä –û–ø–µ—Ä–∞—Ü–∏–π –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ä–æ–ª–µ–π: {stats['operation_counts'].get('password_analysis', 0)}")
    print(f"   üìä –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {stats['average_times'].get('password_generation', {}).get('avg', 0):.4f}—Å")
    
    # –¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    print("üîí –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...")
    agent.log_security_event(
        "password_generation",
        "low",
        {"length": 12, "strength": "high"}
    )
    print("   ‚úÖ –°–æ–±—ã—Ç–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ")


def test_configuration_and_export(agent):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö."""
    print("\n‚öôÔ∏è –¢–ï–°–¢ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò –ò –≠–ö–°–ü–û–†–¢–ê")
    print("=" * 50)
    
    # –¢–µ—Å—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
    print("üì§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö...")
    exported_json = agent.export_data()
    
    if exported_json:
        import json
        try:
            exported_data = json.loads(exported_json)
            print(f"   üìã –ò–º—è –∞–≥–µ–Ω—Ç–∞: {exported_data['name']}")
            print(f"   üìã –°—Ç–∞—Ç—É—Å: {exported_data['status']}")
            print(f"   üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {len(exported_data['config'])} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
            print(f"   üìã –ú–µ—Ç—Ä–∏–∫–∏: {len(exported_data['metrics'])} –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∞
            required_keys = ['name', 'status', 'config', 'metrics']
            missing_keys = [key for key in required_keys if key not in exported_data]
            
            if not missing_keys:
                print("   ‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ —ç–∫—Å–ø–æ—Ä—Ç–µ")
            else:
                print(f"   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: {missing_keys}")
        except json.JSONDecodeError as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
    else:
        print("   ‚ùå –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–µ —É–¥–∞–ª—Å—è")
    
    # –¢–µ—Å—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤...")
    print(f"   __str__: {str(agent)[:50]}...")
    print(f"   __repr__: {repr(agent)[:50]}...")
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ç–æ—Ä–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    agent2 = PasswordSecurityAgent("test_agent_2")
    print(f"   __eq__: agent == agent2 -> {agent == agent2}")
    print(f"   __hash__: hash(agent) -> {hash(agent)}")


def test_comprehensive_functionality():
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π."""
    print("\nüéØ –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –¢–ï–°–¢ –í–°–ï–• –í–û–ó–ú–û–ñ–ù–û–°–¢–ï–ô")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞ —Å –ø–æ–ª–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
    config = PasswordConfig(
        min_length=10,
        max_length=50,
        require_uppercase=True,
        require_lowercase=True,
        require_digits=True,
        require_special=True,
        exclude_similar=True,
        max_age_days=90,
        prevent_reuse=True,
        max_attempts=3,
        lockout_duration=300,
        hashing_algorithm="pbkdf2_sha256",
        salt_length=32,
        iterations=100000
    )
    
    agent = PasswordSecurityAgent("comprehensive_test_agent", config)
    
    # –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –ø–∞—Ä–æ–ª–µ–º
    print("üîÑ –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã —Å –ø–∞—Ä–æ–ª–µ–º:")
    
    # 1. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è
    password = agent.generate_password(
        length=16,
        include_uppercase=True,
        include_lowercase=True,
        include_digits=True,
        include_special=True,
        exclude_similar=True
    )
    print(f"   1Ô∏è‚É£ –ü–∞—Ä–æ–ª—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {password}")
    
    # 2. –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    strength = agent.analyze_password_strength(password)
    print(f"   2Ô∏è‚É£ –°–ª–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞: {strength}")
    
    # 3. –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
    hash_result = agent.hash_password(password)
    print(f"   3Ô∏è‚É£ –ü–∞—Ä–æ–ª—å –∑–∞—Ö–µ—à–∏—Ä–æ–≤–∞–Ω: {len(hash_result['hash'])} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞
    is_valid = agent.verify_password(password, hash_result["hash"], hash_result["salt"])
    print(f"   4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if is_valid else '‚ùå –û—à–∏–±–∫–∞'}")
    
    # 5. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–¥–æ—Ä–æ–≤—å—è
    health = agent.get_health_status()
    print(f"   5Ô∏è‚É£ –°—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è: {health}")
    
    # 6. –°–±—Ä–æ—Å –º–µ—Ç—Ä–∏–∫
    agent.reset_metrics()
    print("   6Ô∏è‚É£ –ú–µ—Ç—Ä–∏–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã")
    
    return agent


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤."""
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–õ–£–ß–®–ï–ù–ù–û–ì–û PASSWORD SECURITY AGENT")
    print("=" * 60)
    print("–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–ª—É—á—à–µ–Ω–∏–π:")
    print("‚úÖ ASYNC/AWAIT - –ø–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    print("‚úÖ –í–ê–õ–ò–î–ê–¶–ò–Ø –ü–ê–†–ê–ú–ï–¢–†–û–í - –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏")
    print("‚úÖ –†–ê–°–®–ò–†–ï–ù–ù–´–ï DOCSTRINGS - –ø–æ–¥—Ä–æ–±–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏")
    print("‚úÖ –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –ò –ú–û–ù–ò–¢–û–†–ò–ù–ì - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ")
    print("‚úÖ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø - dataclass –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫")
    
    try:
        # –¢–µ—Å—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
        agent = await test_async_functionality()
        
        # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        test_validation_and_monitoring(agent)
        
        # –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
        test_configuration_and_export(agent)
        
        # –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç
        comprehensive_agent = test_comprehensive_functionality()
        
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("=" * 60)
        print("‚úÖ –í—Å–µ 100% —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã")
        print("‚úÖ –ê–≥–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–º—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        print("‚úÖ A+ –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –í–û –í–†–ï–ú–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: {e}")
        import traceback
        traceback.print_exc()
        return False


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
    success = asyncio.run(main())
    
    if success:
        print("\nüèÜ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        exit(0)
    else:
        print("\nüí• –§–ò–ù–ê–õ–¨–ù–ê–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –ù–ï –£–î–ê–õ–ê–°–¨!")
        exit(1)