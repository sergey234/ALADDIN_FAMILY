#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ALADDIN Security System - Simple Export API
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π API –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö

–ê–≤—Ç–æ—Ä: ALADDIN Security Team
–í–µ—Ä—Å–∏—è: 1.0
–î–∞—Ç–∞: 2025-09-08
"""

from flask import Flask, jsonify, request, send_file
from flask_cors import CORS
import os
import sys
import csv
import json
from datetime import datetime
from typing import List, Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from elasticsearch_simulator import ElasticsearchSimulator, LogLevel

app = Flask(__name__)
CORS(app)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
es_simulator = ElasticsearchSimulator()
export_dir = "exports"
os.makedirs(export_dir, exist_ok=True)

@app.route('/api/export/health')
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è API"""
    return jsonify({
        'status': 'healthy',
        'service': 'Simple Export API',
        'timestamp': datetime.now().isoformat(),
        'export_dir': export_dir,
        'formats': ['CSV', 'JSON']
    })

@app.route('/api/export/logs/csv')
def export_logs_csv():
    """–≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤ –≤ CSV —Ñ–æ—Ä–º–∞—Ç"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        query = request.args.get('q', '')
        limit = int(request.args.get('limit', 50))
        level = request.args.get('level')
        component = request.args.get('component')
        
        # –ü–æ–∏—Å–∫ –ª–æ–≥–æ–≤
        log_level = None
        if level:
            try:
                log_level = LogLevel(level.upper())
            except ValueError:
                pass
        
        results = es_simulator.search(
            query=query,
            level=log_level,
            component=component,
            limit=limit
        )
        
        # –°–æ–∑–¥–∞–µ–º CSV —Ñ–∞–π–ª
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"aladdin_logs_{timestamp}.csv"
        filepath = os.path.join(export_dir, filename)
        
        with open(filepath, 'w', newline='', encoding='utf-8') as csvfile:
            writer = csv.writer(csvfile)
            writer.writerow(['Timestamp', 'Level', 'Component', 'Message', 'Metadata'])
            
            for log in results.get('logs', []):
                writer.writerow([
                    log.get('timestamp', ''),
                    log.get('level', ''),
                    log.get('component', ''),
                    log.get('message', ''),
                    json.dumps(log.get('metadata', {}), ensure_ascii=False)
                ])
        
        return jsonify({
            'success': True,
            'filename': filename,
            'filepath': filepath,
            'records': len(results.get('logs', [])),
            'message': f'CSV —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {filename}'
        })
        
    except Exception as e:
        return jsonify({
            'success': False,
            'error': str(e),
            'message': '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ CSV —Ñ–∞–π–ª–∞'
        }), 500

@app.route('/api/export/logs/json')
def export_logs_json():
    """–≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤ –≤ JSON —Ñ–æ—Ä–º–∞—Ç"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        query = request.args.get('q', '')
        limit = int(request.args.get('limit', 50))
        level = request.args.get('level')
        component = request.args.get('component')
        
        # –ü–æ–∏—Å–∫ –ª–æ–≥–æ–≤
        log_level = None
        if level:
            try:
                log_level = LogLevel(level.upper())
            except ValueError:
                pass
        
        results = es_simulator.search(
            query=query,
            level=log_level,
            component=component,
            limit=limit
        )
        
        # –°–æ–∑–¥–∞–µ–º JSON —Ñ–∞–π–ª
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"aladdin_logs_{timestamp}.json"
        filepath = os.path.join(export_dir, filename)
        
        with open(filepath, 'w', encoding='utf-8') as jsonfile:
            json.dump(results, jsonfile, ensure_ascii=False, indent=2)
        
        return jsonify({
            'success': True,
            'filename': filename,
            'filepath': filepath,
            'records': len(results.get('logs', [])),
            'message': f'JSON —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {filename}'
        })
        
    except Exception as e:
        return jsonify({
            'success': False,
            'error': str(e),
            'message': '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ JSON —Ñ–∞–π–ª–∞'
        }), 500

@app.route('/api/export/stats')
def export_stats():
    """–≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = es_simulator.get_stats()
        
        # –°–æ–∑–¥–∞–µ–º JSON —Ñ–∞–π–ª
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"aladdin_stats_{timestamp}.json"
        filepath = os.path.join(export_dir, filename)
        
        with open(filepath, 'w', encoding='utf-8') as jsonfile:
            json.dump(stats, jsonfile, ensure_ascii=False, indent=2)
        
        return jsonify({
            'success': True,
            'filename': filename,
            'filepath': filepath,
            'message': f'–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞: {filename}'
        })
        
    except Exception as e:
        return jsonify({
            'success': False,
            'error': str(e),
            'message': '–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏'
        }), 500

@app.route('/api/export/files')
def list_exported_files():
    """–°–ø–∏—Å–æ–∫ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    try:
        files = []
        for filename in os.listdir(export_dir):
            filepath = os.path.join(export_dir, filename)
            if os.path.isfile(filepath):
                stat = os.stat(filepath)
                files.append({
                    'filename': filename,
                    'size': stat.st_size,
                    'created': datetime.fromtimestamp(stat.st_ctime).isoformat(),
                    'modified': datetime.fromtimestamp(stat.st_mtime).isoformat()
                })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
        files.sort(key=lambda x: x['created'], reverse=True)
        
        return jsonify({
            'success': True,
            'files': files,
            'count': len(files)
        })
        
    except Exception as e:
        return jsonify({
            'success': False,
            'error': str(e),
            'message': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤'
        }), 500

@app.route('/api/export/download/<filename>')
def download_file(filename):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    try:
        filepath = os.path.join(export_dir, filename)
        if os.path.exists(filepath):
            return send_file(filepath, as_attachment=True)
        else:
            return jsonify({
                'success': False,
                'error': '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω',
                'message': f'–§–∞–π–ª {filename} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
            }), 404
    except Exception as e:
        return jsonify({
            'success': False,
            'error': str(e),
            'message': '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞'
        }), 500

if __name__ == '__main__':
    print("‚ö†Ô∏è ReportLab –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. PDF —ç–∫—Å–ø–æ—Ä—Ç –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
    print("üì§ –ó–∞–ø—É—Å–∫ Simple Export API Server...")
    print("üìä API –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:5002")
    print("üîß –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:5002/api/export/health")
    print("üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    
    app.run(host='127.0.0.1', port=5002, debug=False, threaded=True)