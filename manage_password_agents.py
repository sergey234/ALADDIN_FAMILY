#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏—è–º–∏ –∞–≥–µ–Ω—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª–µ–π –≤ SFM.

–ü–æ–∑–≤–æ–ª—è–µ—Ç:
- –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –≤—Å–µ –≤–µ—Ä—Å–∏–∏ –∞–≥–µ–Ω—Ç–æ–≤
- –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç—å—Å—è –º–µ–∂–¥—É –≤–µ—Ä—Å–∏—è–º–∏
- –£–¥–∞–ª—è—Ç—å —Å—Ç–∞—Ä—ã–µ –≤–µ—Ä—Å–∏–∏ (—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º)
- –°—Ä–∞–≤–Ω–∏–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
"""

import json
import os
from datetime import datetime

def load_registry():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–µ–µ—Å—Ç—Ä SFM."""
    with open('data/sfm/function_registry.json', 'r', encoding='utf-8') as f:
        return json.load(f)

def save_registry(registry):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–µ—Å—Ç—Ä SFM."""
    with open('data/sfm/function_registry.json', 'w', encoding='utf-8') as f:
        json.dump(registry, f, ensure_ascii=False, indent=2)

def show_password_agents():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∞–≥–µ–Ω—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª–µ–π."""
    registry = load_registry()
    
    print("üîê –ê–ì–ï–ù–¢–´ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò –ü–ê–†–û–õ–ï–ô –í SFM")
    print("=" * 60)
    
    password_agents = {}
    for func_id, func_data in registry['functions'].items():
        if 'password' in func_id.lower() and 'security' in func_id.lower():
            password_agents[func_id] = func_data
    
    if not password_agents:
        print("‚ùå –ê–≥–µ–Ω—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ SFM")
        return
    
    for func_id, data in password_agents.items():
        status_emoji = "üü¢" if data['status'] == 'active' else "üü°" if data['status'] == 'running' else "üî¥"
        critical_emoji = "‚ö†Ô∏è" if data.get('is_critical', False) else "‚úÖ"
        
        print(f"\n{status_emoji} {data['name']} ({func_id})")
        print(f"   üìù –û–ø–∏—Å–∞–Ω–∏–µ: {data['description']}")
        print(f"   üìä –°—Ç–∞—Ç—É—Å: {data['status']}")
        print(f"   üî¢ –í–µ—Ä—Å–∏—è: {data.get('version', 'N/A')}")
        print(f"   ‚≠ê –ö–∞—á–µ—Å—Ç–≤–æ: {data.get('quality_score', 'N/A')}")
        print(f"   üõ°Ô∏è –ö—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å: {critical_emoji}")
        print(f"   üìÅ –§–∞–π–ª: {data.get('file_path', 'N/A')}")
        print(f"   üìè –°—Ç—Ä–æ–∫ –∫–æ–¥–∞: {data.get('lines_of_code', 'N/A')}")
        
        if 'deprecation_note' in data:
            print(f"   ‚ö†Ô∏è –£—Å—Ç–∞—Ä–µ–ª–æ: {data['deprecation_note']}")
        if 'replacement' in data:
            print(f"   üîÑ –ó–∞–º–µ–Ω–µ–Ω –Ω–∞: {data['replacement']}")

def compare_agents():
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∞–≥–µ–Ω—Ç–æ–≤."""
    registry = load_registry()
    
    old_agent = registry['functions'].get('password_security_agent', {})
    new_agent = registry['functions'].get('password_security_agent_enhanced_v2', {})
    
    if not old_agent or not new_agent:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–≥–µ–Ω—Ç—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
        return
    
    print("\nüîÑ –°–†–ê–í–ù–ï–ù–ò–ï –ê–ì–ï–ù–¢–û–í")
    print("=" * 60)
    
    print(f"\nüìä –°–¢–ê–†–´–ô –ê–ì–ï–ù–¢ ({old_agent['name']}):")
    print(f"   üî¢ –í–µ—Ä—Å–∏—è: {old_agent.get('version', 'N/A')}")
    print(f"   ‚≠ê –ö–∞—á–µ—Å—Ç–≤–æ: {old_agent.get('quality_score', 'N/A')}")
    print(f"   üìè –°—Ç—Ä–æ–∫ –∫–æ–¥–∞: {old_agent.get('lines_of_code', 'N/A')}")
    print(f"   üõ°Ô∏è –£—Ä–æ–≤–µ–Ω—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {old_agent.get('security_level', 'N/A')}")
    print(f"   üìã –§—É–Ω–∫—Ü–∏–∏: {len(old_agent.get('features', []))}")
    
    print(f"\nüöÄ –ù–û–í–´–ô –ê–ì–ï–ù–¢ ({new_agent['name']}):")
    print(f"   üî¢ –í–µ—Ä—Å–∏—è: {new_agent.get('version', 'N/A')}")
    print(f"   ‚≠ê –ö–∞—á–µ—Å—Ç–≤–æ: {new_agent.get('quality_score', 'N/A')}")
    print(f"   üìè –°—Ç—Ä–æ–∫ –∫–æ–¥–∞: {new_agent.get('lines_of_code', 'N/A')}")
    print(f"   üõ°Ô∏è –£—Ä–æ–≤–µ–Ω—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {new_agent.get('security_level', 'N/A')}")
    print(f"   üìã –§—É–Ω–∫—Ü–∏–∏: {len(new_agent.get('features', []))}")
    
    print(f"\nüìà –£–õ–£–ß–®–ï–ù–ò–Ø:")
    old_features = set(old_agent.get('features', []))
    new_features = set(new_agent.get('features', []))
    new_only = new_features - old_features
    
    if new_only:
        print("   ‚ú® –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:")
        for feature in sorted(new_only):
            print(f"      ‚Ä¢ {feature}")
    else:
        print("   ‚ÑπÔ∏è –ù–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ")

def remove_old_agent():
    """–£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–π –∞–≥–µ–Ω—Ç –∏–∑ SFM (—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º)."""
    registry = load_registry()
    
    if 'password_security_agent' not in registry['functions']:
        print("‚ùå –°—Ç–∞—Ä—ã–π –∞–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ SFM")
        return
    
    old_agent = registry['functions']['password_security_agent']
    
    print(f"\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–≥–µ–Ω—Ç:")
    print(f"   üìù {old_agent['name']} ({old_agent['function_id']})")
    print(f"   üî¢ –í–µ—Ä—Å–∏—è: {old_agent.get('version', 'N/A')}")
    print(f"   üìä –°—Ç–∞—Ç—É—Å: {old_agent['status']}")
    
    print(f"\nüîÑ –ó–∞–º–µ–Ω–∞: {old_agent.get('replacement', '–ù–µ—Ç')}")
    
    confirm = input("\n‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã? –í–≤–µ–¥–∏—Ç–µ 'YES' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ")
    
    if confirm == 'YES':
        del registry['functions']['password_security_agent']
        save_registry(registry)
        print("‚úÖ –°—Ç–∞—Ä—ã–π –∞–≥–µ–Ω—Ç —É–¥–∞–ª–µ–Ω –∏–∑ SFM")
        print("‚úÖ –¢–µ–ø–µ—Ä—å –≤ SFM —Ç–æ–ª—å–∫–æ —É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è")
    else:
        print("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")

def show_sfm_stats():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É SFM."""
    registry = load_registry()
    
    total_functions = len(registry['functions'])
    active_functions = sum(1 for f in registry['functions'].values() if f['status'] == 'active')
    critical_functions = sum(1 for f in registry['functions'].values() if f.get('is_critical', False))
    
    print(f"\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê SFM")
    print("=" * 40)
    print(f"üî¢ –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π: {total_functions}")
    print(f"üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_functions}")
    print(f"‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–Ω—ã—Ö: {critical_functions}")
    print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö: {(active_functions/total_functions)*100:.1f}%")

def main():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    while True:
        print(f"\nüîê –£–ü–†–ê–í–õ–ï–ù–ò–ï –ê–ì–ï–ù–¢–ê–ú–ò –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò –ü–ê–†–û–õ–ï–ô")
        print("=" * 50)
        print("1. –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞–≥–µ–Ω—Ç—ã –ø–∞—Ä–æ–ª–µ–π")
        print("2. –°—Ä–∞–≤–Ω–∏—Ç—å –∞–≥–µ–Ω—Ç—ã")
        print("3. –£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–π –∞–≥–µ–Ω—Ç")
        print("4. –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É SFM")
        print("5. –í—ã—Ö–æ–¥")
        
        choice = input("\n‚ùì –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-5): ")
        
        if choice == '1':
            show_password_agents()
        elif choice == '2':
            compare_agents()
        elif choice == '3':
            remove_old_agent()
        elif choice == '4':
            show_sfm_stats()
        elif choice == '5':
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")

if __name__ == "__main__":
    main()