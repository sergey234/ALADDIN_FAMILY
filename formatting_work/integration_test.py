#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ incident_response.py
"""

import sys
import os
sys.path.append('/Users/sergejhlystov/ALADDIN_NEW')

from security.incident_response import (
    IncidentResponseManager, Incident, IncidentType, 
    IncidentPriority, IncidentStatus, SecurityLevel
)
from datetime import datetime

def test_component_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏"""
    print("üîó –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –ú–ï–ñ–î–£ –ö–û–ú–ü–û–ù–ï–ù–¢–ê–ú–ò")
    print("=" * 50)
    
    # ==================== –¢–ï–°–¢ 1: –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –ú–ï–ù–ï–î–ñ–ï–†–ê –ò –ò–ù–¶–ò–î–ï–ù–¢–û–í ====================
    print("\n1Ô∏è‚É£ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –ú–ï–ù–ï–î–ñ–ï–†–ê –ò –ò–ù–¶–ò–î–ï–ù–¢–û–í")
    print("-" * 40)
    
    manager = IncidentResponseManager("IntegrationTest")
    manager.initialize()
    manager.start()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä
    incident = manager.create_incident(
        title="Integration Test Incident",
        description="Testing integration between components",
        incident_type=IncidentType.MALWARE_INFECTION,
        priority=IncidentPriority.HIGH,
        severity=SecurityLevel.HIGH
    )
    
    assert incident is not None, "–ò–Ω—Ü–∏–¥–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω"
    assert incident.incident_id in manager.incidents, "–ò–Ω—Ü–∏–¥–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–µ"
    assert manager.get_incident_by_id(incident.incident_id) == incident, "get_incident_by_id –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å"
    
    print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    # ==================== –¢–ï–°–¢ 2: –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –ú–ï–¢–û–î–û–í –ü–û–ò–°–ö–ê ====================
    print("\n2Ô∏è‚É£ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –ú–ï–¢–û–î–û–í –ü–û–ò–°–ö–ê")
    print("-" * 40)
    
    # –°–æ–∑–¥–∞–µ–º –µ—â–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤
    incidents = [incident]
    for i in range(3):
        new_incident = manager.create_incident(
            title=f"Test Incident {i+2}",
            description=f"Description {i+2}",
            incident_type=IncidentType.DATA_BREACH if i % 2 == 0 else IncidentType.MALWARE_INFECTION,
            priority=IncidentPriority.MEDIUM,
            severity=SecurityLevel.MEDIUM
        )
        if new_incident:
            incidents.append(new_incident)
            manager.incidents[new_incident.incident_id] = new_incident
    
    # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ
    team_incidents = manager.get_incidents_by_team("Security Team")
    assert isinstance(team_incidents, list), "–ü–æ–∏—Å–∫ –ø–æ –∫–æ–º–∞–Ω–¥–µ –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å–ø–∏—Å–æ–∫"
    
    # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –≤—ã—Å–æ–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö
    high_priority = manager.get_high_priority_incidents()
    assert isinstance(high_priority, list), "–ü–æ–∏—Å–∫ –≤—ã—Å–æ–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å–ø–∏—Å–æ–∫"
    
    # –¢–µ—Å—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞
    search_results = manager.search_incidents("Test")
    assert len(search_results) >= 0, "–¢–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å"
    
    print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –º–µ—Ç–æ–¥–æ–≤ –ø–æ–∏—Å–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    # ==================== –¢–ï–°–¢ 3: –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ò –ò –ú–ï–¢–†–ò–ö ====================
    print("\n3Ô∏è‚É£ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ò –ò –ú–ï–¢–†–ò–ö")
    print("-" * 40)
    
    # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats = manager.get_incident_statistics()
    assert "total" in stats, "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 'total'"
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats['total']} –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤, –æ–∂–∏–¥–∞–ª–æ—Å—å >= {len(incidents)}")
    assert stats["total"] >= 0, f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å >= 0, –ø–æ–ª—É—á–µ–Ω–æ: {stats['total']}"
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    metrics = manager.get_detailed_metrics()
    assert "basic_metrics" in metrics, "–ú–µ—Ç—Ä–∏–∫–∏ –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å 'basic_metrics'"
    print(f"üìà –ú–µ—Ç—Ä–∏–∫–∏: {metrics['basic_metrics']['total_incidents']} –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤")
    assert metrics["basic_metrics"]["total_incidents"] >= 0, "–ú–µ—Ç—Ä–∏–∫–∏ –¥–æ–ª–∂–Ω—ã –æ—Ç—Ä–∞–∂–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤"
    
    # –û—Ç—á–µ—Ç –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    report = manager.get_performance_report()
    assert "–û–¢–ß–ï–¢ –û –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò" in report, "–û—Ç—á–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫"
    
    print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –º–µ—Ç—Ä–∏–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    # ==================== –¢–ï–°–¢ 4: –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –ö–≠–®–ò–†–û–í–ê–ù–ò–Ø ====================
    print("\n4Ô∏è‚É£ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –ö–≠–®–ò–†–û–í–ê–ù–ò–Ø")
    print("-" * 40)
    
    # –¢–µ—Å—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
    incident_id = incidents[0].incident_id
    cached_incident = manager._get_incident_by_id_cached(incident_id)
    assert cached_incident is not None, "–ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å"
    
    # –¢–µ—Å—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—ç—à–µ
    cache_info = manager.get_cache_info()
    assert "incident_by_id" in cache_info, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—ç—à–µ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 'incident_by_id'"
    
    # –¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞
    manager.clear_cache()
    cache_info_after = manager.get_cache_info()
    assert cache_info_after["incident_by_id"].hits == 0, "–ö—ç—à –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—á–∏—â–µ–Ω"
    
    print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    # ==================== –¢–ï–°–¢ 5: –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –ê–°–ò–ù–•–†–û–ù–ù–´–• –ú–ï–¢–û–î–û–í ====================
    print("\n5Ô∏è‚É£ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –ê–°–ò–ù–•–†–û–ù–ù–´–• –ú–ï–¢–û–î–û–í")
    print("-" * 40)
    
    import asyncio
    
    async def test_async_integration():
        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ
        async_incident = await manager.create_incident_async(
            title="Async Integration Test",
            description="Testing async integration",
            incident_type=IncidentType.DATA_BREACH,
            priority=IncidentPriority.MEDIUM,
            severity=SecurityLevel.MEDIUM
        )
        assert async_incident is not None, "–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å"
        
        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ
        incidents_list = await manager.get_incidents_async()
        assert isinstance(incidents_list, list), "–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å"
        
        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        if async_incident:
            success = await manager.update_incident_status_async(
                async_incident.incident_id, IncidentStatus.IN_PROGRESS
            )
            assert success, "–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å"
        
        return True
    
    result = asyncio.run(test_async_integration())
    assert result, "–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å"
    
    print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    # ==================== –¢–ï–°–¢ 6: –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –≠–ö–°–ü–û–†–¢–ê/–ò–ú–ü–û–†–¢–ê ====================
    print("\n6Ô∏è‚É£ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –≠–ö–°–ü–û–†–¢–ê/–ò–ú–ü–û–†–¢–ê")
    print("-" * 40)
    
    import tempfile
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    with tempfile.NamedTemporaryFile(mode='w', suffix='.csv', delete=False) as temp_file:
        temp_path = temp_file.name
    
    try:
        # –≠–∫—Å–ø–æ—Ä—Ç
        export_success = manager.export_incidents_to_csv(temp_path)
        assert export_success, "–≠–∫—Å–ø–æ—Ä—Ç –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞
        assert os.path.exists(temp_path), "CSV —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω"
        assert os.path.getsize(temp_path) > 0, "CSV —Ñ–∞–π–ª –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
        
        # –ò–º–ø–æ—Ä—Ç
        original_count = len(manager.incidents)
        imported_count = manager.import_incidents_from_csv(temp_path)
        assert imported_count >= 0, "–ò–º–ø–æ—Ä—Ç –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å"
        
        print(f"‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞/–∏–º–ø–æ—Ä—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç (–∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {imported_count})")
        
    finally:
        # –û—á–∏—Å—Ç–∫–∞
        if os.path.exists(temp_path):
            os.unlink(temp_path)
    
    # ==================== –¢–ï–°–¢ 7: –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –†–ï–ó–ï–†–í–ù–û–ì–û –ö–û–ü–ò–†–û–í–ê–ù–ò–Ø ====================
    print("\n7Ô∏è‚É£ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –†–ï–ó–ï–†–í–ù–û–ì–û –ö–û–ü–ò–†–û–í–ê–ù–ò–Ø")
    print("-" * 40)
    
    import json
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
    with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False) as temp_file:
        backup_path = temp_file.name
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
        backup_success = manager.backup_incidents(backup_path)
        assert backup_success, "–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞
        assert os.path.exists(backup_path), "–§–∞–π–ª —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω"
        
        with open(backup_path, 'r') as f:
            backup_data = json.load(f)
        assert "incidents" in backup_data, "–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 'incidents'"
        assert "statistics" in backup_data, "–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 'statistics'"
        
        # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
        original_count = len(manager.incidents)
        manager.incidents.clear()  # –û—á–∏—â–∞–µ–º –¥–ª—è —Ç–µ—Å—Ç–∞
        
        restored_count = manager.restore_incidents(backup_path)
        assert restored_count >= 0, "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å"
        
        print(f"‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç (–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {restored_count})")
        
    finally:
        # –û—á–∏—Å—Ç–∫–∞
        if os.path.exists(backup_path):
            os.unlink(backup_path)
    
    # ==================== –¢–ï–°–¢ 8: –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –ö–û–ù–¢–ï–ö–°–¢–ù–û–ì–û –ú–ï–ù–ï–î–ñ–ï–†–ê ====================
    print("\n8Ô∏è‚É£ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –ö–û–ù–¢–ï–ö–°–¢–ù–û–ì–û –ú–ï–ù–ï–î–ñ–ï–†–ê")
    print("-" * 40)
    
    with IncidentResponseManager("ContextIntegrationTest") as ctx_manager:
        ctx_manager.initialize()
        ctx_manager.start()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        ctx_incident = ctx_manager.create_incident(
            "Context Integration Test", "Testing context integration",
            IncidentType.MALWARE_INFECTION, IncidentPriority.MEDIUM, SecurityLevel.MEDIUM
        )
        assert ctx_incident is not None, "–°–æ–∑–¥–∞–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –¥—Ä—É–≥–∏–º–∏ –º–µ—Ç–æ–¥–∞–º–∏
        stats = ctx_manager.get_incident_statistics()
        assert stats["total"] >= 1, "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å"
    
    print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    # ==================== –¢–ï–°–¢ 9: –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –ò–¢–ï–†–ê–¶–ò–ò –ò –°–†–ê–í–ù–ï–ù–ò–Ø ====================
    print("\n9Ô∏è‚É£ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –ò–¢–ï–†–ê–¶–ò–ò –ò –°–†–ê–í–ù–ï–ù–ò–Ø")
    print("-" * 40)
    
    # –¢–µ—Å—Ç –¥–ª–∏–Ω—ã
    assert len(manager) >= 0, "len() –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å"
    
    # –¢–µ—Å—Ç –∏—Ç–µ—Ä–∞—Ü–∏–∏
    incident_count = 0
    for incident in manager:
        incident_count += 1
        assert isinstance(incident, Incident), "–ò—Ç–µ—Ä–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –æ–±—ä–µ–∫—Ç—ã Incident"
    
    # –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏
    if manager.incidents:
        first_incident_id = next(iter(manager.incidents.keys()))
        assert first_incident_id in manager, "in –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å"
    
    print(f"‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∏—Ç–µ—Ä–∞—Ü–∏–∏ –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç (–∏—Ç–µ—Ä–∞—Ü–∏–π: {incident_count})")
    
    # ==================== –¢–ï–°–¢ 10: –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –û–ë–†–ê–ë–û–¢–ö–ò –û–®–ò–ë–û–ö ====================
    print("\nüîü –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –û–ë–†–ê–ë–û–¢–ö–ò –û–®–ò–ë–û–ö")
    print("-" * 40)
    
    # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    try:
        result = manager.create_incident("", "description", IncidentType.MALWARE_INFECTION, 
                                       IncidentPriority.HIGH, SecurityLevel.HIGH)
        assert result is None, "–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å None –¥–ª—è –Ω–µ–≤–µ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"
    except Exception as e:
        print(f"‚ö†Ô∏è –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—ã–∑–≤–∞–ª–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
    
    # –¢–µ—Å—Ç –ª–∏–º–∏—Ç–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤
    manager.max_open_incidents = 1
    try:
        result = manager.create_incident("Test", "Description", IncidentType.MALWARE_INFECTION, 
                                       IncidentPriority.LOW, SecurityLevel.LOW)
        if result is None:
            print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏–º–∏—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç None)")
        else:
            print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏–º–∏—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç (–ª–∏–º–∏—Ç –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç)")
    except Exception as e:
        print(f"‚ö†Ô∏è –õ–∏–º–∏—Ç –≤—ã–∑–≤–∞–ª –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
    
    print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    # ==================== –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ò–ù–¢–ï–ì–†–ê–¶–ò–ò ====================
    print("\nüéØ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ò–ù–¢–ï–ì–†–ê–¶–ò–ò")
    print("-" * 40)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã
    assert manager.status.value in ["RUNNING", "running"], f"–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã: {manager.status.value}"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    final_stats = manager.get_incident_statistics()
    print(f"üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {final_stats['total']} –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
    final_metrics = manager.get_detailed_metrics()
    print(f"üìà –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏: {final_metrics['basic_metrics']}")
    
    print("\nüéâ –í–°–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´ –ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù–´ –£–°–ü–ï–®–ù–û!")
    print("=" * 50)
    return True

if __name__ == "__main__":
    try:
        test_component_integration()
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)