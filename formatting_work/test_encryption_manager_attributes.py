#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –∫–ª–∞—Å—Å–æ–≤ - encryption_manager.py
–í–µ—Ä—Å–∏—è: 2.5
–î–∞—Ç–∞: 2025-09-24
"""

import asyncio
import logging
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º ALADDIN_NEW
sys.path.append(str(Path(__file__).resolve().parents[2]))

from security.bots.components.encryption_manager import (
    EncryptionManager,
    EncryptionAlgorithm,
    KeyDerivation,
    EncryptionKey,
    EncryptedData,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class TestEncryptionManagerAttributes:
    """–¢–µ—Å—Ç –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –∫–ª–∞—Å—Å–æ–≤"""

    def __init__(self):
        self.logger = logger
        self.manager = None
        self.test_results = []

    async def test_encryption_manager_attributes(self):
        """–¢–µ—Å—Ç –∞—Ç—Ä–∏–±—É—Ç–æ–≤ EncryptionManager"""
        self.logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ EncryptionManager...")
        
        try:
            # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä
            self.manager = EncryptionManager(self.logger)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
            required_attributes = [
                'logger',
                'master_password',
                'key_derivation',
                'default_algorithm',
                'key_rotation_days',
                'keys',
                'active_key_id',
                '_cipher_cache',
                '_cache_ttl'
            ]
            
            for attr in required_attributes:
                if hasattr(self.manager, attr):
                    value = getattr(self.manager, attr)
                    self.logger.info(f"‚úÖ –ê—Ç—Ä–∏–±—É—Ç {attr}: {type(value).__name__} = {value}")
                else:
                    self.logger.error(f"‚ùå –ê—Ç—Ä–∏–±—É—Ç {attr} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    self.test_results.append((f"–ê—Ç—Ä–∏–±—É—Ç {attr}", False))
                    return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –∞—Ç—Ä–∏–±—É—Ç–æ–≤
            assert isinstance(self.manager.logger, logging.Logger)
            assert isinstance(self.manager.master_password, str)
            assert isinstance(self.manager.key_derivation, KeyDerivation)
            assert isinstance(self.manager.default_algorithm, EncryptionAlgorithm)
            assert isinstance(self.manager.key_rotation_days, int)
            assert isinstance(self.manager.keys, dict)
            assert isinstance(self.manager._cipher_cache, dict)
            assert isinstance(self.manager._cache_ttl, int)
            
            self.logger.info("‚úÖ –í—Å–µ –∞—Ç—Ä–∏–±—É—Ç—ã EncryptionManager –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
            self.test_results.append(("–ê—Ç—Ä–∏–±—É—Ç—ã EncryptionManager", True))
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞—Ç—Ä–∏–±—É—Ç–æ–≤ EncryptionManager: {e}")
            self.test_results.append(("–ê—Ç—Ä–∏–±—É—Ç—ã EncryptionManager", False))
            return False

    async def test_encryption_key_attributes(self):
        """–¢–µ—Å—Ç –∞—Ç—Ä–∏–±—É—Ç–æ–≤ EncryptionKey"""
        self.logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ EncryptionKey...")
        
        try:
            from datetime import datetime
            
            # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä EncryptionKey
            key = EncryptionKey(
                key_id="test_key_1",
                algorithm=EncryptionAlgorithm.AES_256_GCM,
                key_data=b"test_key_data",
                created_at=datetime.now()
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã
            required_attributes = [
                'key_id',
                'algorithm',
                'key_data',
                'created_at',
                'expires_at',
                'is_active',
                'metadata'
            ]
            
            for attr in required_attributes:
                if hasattr(key, attr):
                    value = getattr(key, attr)
                    self.logger.info(f"‚úÖ –ê—Ç—Ä–∏–±—É—Ç {attr}: {type(value).__name__} = {value}")
                else:
                    self.logger.error(f"‚ùå –ê—Ç—Ä–∏–±—É—Ç {attr} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    self.test_results.append((f"–ê—Ç—Ä–∏–±—É—Ç EncryptionKey.{attr}", False))
                    return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –∞—Ç—Ä–∏–±—É—Ç–æ–≤
            assert isinstance(key.key_id, str)
            assert isinstance(key.algorithm, EncryptionAlgorithm)
            assert isinstance(key.key_data, bytes)
            assert isinstance(key.created_at, datetime)
            assert key.expires_at is None or isinstance(key.expires_at, datetime)
            assert isinstance(key.is_active, bool)
            assert key.metadata is None or isinstance(key.metadata, dict)
            
            self.logger.info("‚úÖ –í—Å–µ –∞—Ç—Ä–∏–±—É—Ç—ã EncryptionKey –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
            self.test_results.append(("–ê—Ç—Ä–∏–±—É—Ç—ã EncryptionKey", True))
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞—Ç—Ä–∏–±—É—Ç–æ–≤ EncryptionKey: {e}")
            self.test_results.append(("–ê—Ç—Ä–∏–±—É—Ç—ã EncryptionKey", False))
            return False

    async def test_encrypted_data_attributes(self):
        """–¢–µ—Å—Ç –∞—Ç—Ä–∏–±—É—Ç–æ–≤ EncryptedData"""
        self.logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ EncryptedData...")
        
        try:
            # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä EncryptedData
            encrypted_data = EncryptedData(
                data=b"encrypted_data",
                key_id="test_key_1",
                algorithm=EncryptionAlgorithm.AES_256_GCM
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã
            required_attributes = [
                'data',
                'key_id',
                'algorithm',
                'iv',
                'tag',
                'metadata',
                'timestamp'
            ]
            
            for attr in required_attributes:
                if hasattr(encrypted_data, attr):
                    value = getattr(encrypted_data, attr)
                    self.logger.info(f"‚úÖ –ê—Ç—Ä–∏–±—É—Ç {attr}: {type(value).__name__} = {value}")
                else:
                    self.logger.error(f"‚ùå –ê—Ç—Ä–∏–±—É—Ç {attr} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    self.test_results.append((f"–ê—Ç—Ä–∏–±—É—Ç EncryptedData.{attr}", False))
                    return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –∞—Ç—Ä–∏–±—É—Ç–æ–≤
            from datetime import datetime
            assert isinstance(encrypted_data.data, bytes)
            assert isinstance(encrypted_data.key_id, str)
            assert isinstance(encrypted_data.algorithm, EncryptionAlgorithm)
            assert encrypted_data.iv is None or isinstance(encrypted_data.iv, bytes)
            assert encrypted_data.tag is None or isinstance(encrypted_data.tag, bytes)
            assert encrypted_data.metadata is None or isinstance(encrypted_data.metadata, dict)
            assert isinstance(encrypted_data.timestamp, datetime)
            
            self.logger.info("‚úÖ –í—Å–µ –∞—Ç—Ä–∏–±—É—Ç—ã EncryptedData –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
            self.test_results.append(("–ê—Ç—Ä–∏–±—É—Ç—ã EncryptedData", True))
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞—Ç—Ä–∏–±—É—Ç–æ–≤ EncryptedData: {e}")
            self.test_results.append(("–ê—Ç—Ä–∏–±—É—Ç—ã EncryptedData", False))
            return False

    async def test_enum_attributes(self):
        """–¢–µ—Å—Ç –∞—Ç—Ä–∏–±—É—Ç–æ–≤ Enum –∫–ª–∞—Å—Å–æ–≤"""
        self.logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ Enum –∫–ª–∞—Å—Å–æ–≤...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º EncryptionAlgorithm
            assert hasattr(EncryptionAlgorithm, 'AES_256_GCM')
            assert hasattr(EncryptionAlgorithm, 'AES_256_CBC')
            assert hasattr(EncryptionAlgorithm, 'FERNET')
            assert hasattr(EncryptionAlgorithm, 'RSA_OAEP')
            assert hasattr(EncryptionAlgorithm, 'CHACHA20_POLY1305')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º KeyDerivation
            assert hasattr(KeyDerivation, 'PBKDF2')
            assert hasattr(KeyDerivation, 'SCRYPT')
            assert hasattr(KeyDerivation, 'ARGON2')
            
            self.logger.info("‚úÖ –í—Å–µ –∞—Ç—Ä–∏–±—É—Ç—ã Enum –∫–ª–∞—Å—Å–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
            self.test_results.append(("–ê—Ç—Ä–∏–±—É—Ç—ã Enum –∫–ª–∞—Å—Å–æ–≤", True))
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞—Ç—Ä–∏–±—É—Ç–æ–≤ Enum –∫–ª–∞—Å—Å–æ–≤: {e}")
            self.test_results.append(("–ê—Ç—Ä–∏–±—É—Ç—ã Enum –∫–ª–∞—Å—Å–æ–≤", False))
            return False

    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –∞—Ç—Ä–∏–±—É—Ç–æ–≤"""
        self.logger.info("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í –ê–¢–†–ò–ë–£–¢–û–í –ö–õ–ê–°–°–û–í")
        self.logger.info("============================================================")
        
        results = []
        results.append(await self.test_encryption_manager_attributes())
        results.append(await self.test_encryption_key_attributes())
        results.append(await self.test_encrypted_data_attributes())
        results.append(await self.test_enum_attributes())
        
        self.logger.info("============================================================")
        passed_tests = sum(1 for r in results if r)
        total_tests = len(results)
        
        self.logger.info(f"üìà –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.logger.info("üìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        for test_name, result in self.test_results:
            status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
            self.logger.info(f"  {test_name}: {status}")
        
        if all(results):
            self.logger.info("üéâ –í–°–ï –¢–ï–°–¢–´ –ê–¢–†–ò–ë–£–¢–û–í –ü–†–û–ô–î–ï–ù–´!")
            return True
        else:
            self.logger.error("‚ùå –ï–°–¢–¨ –û–®–ò–ë–ö–ò –í –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò –ê–¢–†–ò–ë–£–¢–û–í!")
            return False


if __name__ == "__main__":
    logger.info("‚úÖ –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π —É—Å–ø–µ—à–µ–Ω")
    tester = TestEncryptionManagerAttributes()
    asyncio.run(tester.run_all_tests())