#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ê–Ω–∞–ª–∏–∑ –º–µ—Ç–æ–¥–æ–≤ –∫–ª–∞—Å—Å–æ–≤ password_security_agent.py
"""

import ast
import sys
sys.path.append('.')

def analyze_methods():
    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    with open('security/ai_agents/password_security_agent.py', 'r', encoding='utf-8') as f:
        content = f.read()

    # –ü–∞—Ä—Å–∏–º AST
    tree = ast.parse(content)

    print('üîç –ê–ù–ê–õ–ò–ó –ú–ï–¢–û–î–û–í –ö–õ–ê–°–°–û–í')
    print('=' * 60)

    for node in ast.walk(tree):
        if isinstance(node, ast.ClassDef):
            print(f'\nüèóÔ∏è –ö–õ–ê–°–°: {node.name}')
            
            methods = []
            for item in node.body:
                if isinstance(item, ast.FunctionDef):
                    method_name = item.name
                    is_private = method_name.startswith('_')
                    is_dunder = method_name.startswith('__') and method_name.endswith('__')
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ—Ç–æ–¥–∞
                    if is_dunder:
                        method_type = 'special'
                    elif is_private:
                        method_type = 'private'
                    else:
                        method_type = 'public'
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã
                    decorators = []
                    for decorator in item.decorator_list:
                        if isinstance(decorator, ast.Name):
                            decorators.append(decorator.id)
                        elif isinstance(decorator, ast.Attribute):
                            decorators.append(decorator.attr)
                    
                    # –ê—Ä–≥—É–º–µ–Ω—Ç—ã
                    args = [arg.arg for arg in item.args.args]
                    if 'self' in args:
                        args.remove('self')
                    
                    methods.append({
                        'name': method_name,
                        'type': method_type,
                        'decorators': decorators,
                        'args': args,
                        'line': item.lineno,
                        'has_docstring': ast.get_docstring(item) is not None
                    })
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥—ã –ø–æ —Ç–∏–ø—É
            public_methods = [m for m in methods if m['type'] == 'public']
            private_methods = [m for m in methods if m['type'] == 'private']
            special_methods = [m for m in methods if m['type'] == 'special']
            
            print(f'   üìä –í—Å–µ–≥–æ –º–µ—Ç–æ–¥–æ–≤: {len(methods)}')
            print(f'   üîì Public: {len(public_methods)}')
            print(f'   üîí Private: {len(private_methods)}')
            print(f'   ‚ö° Special: {len(special_methods)}')
            
            if public_methods:
                print(f'   \n   üîì PUBLIC –ú–ï–¢–û–î–´:')
                for method in public_methods[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                    decorators_str = f' @{", ".join(method["decorators"])}' if method['decorators'] else ''
                    args_str = f'({", ".join(method["args"])})' if method['args'] else '()'
                    doc_str = 'üìù' if method['has_docstring'] else '‚ùå'
                    print(f'     ‚Ä¢ {method["name"]}{args_str}{decorators_str} {doc_str}')
            
            if special_methods:
                print(f'   \n   ‚ö° SPECIAL –ú–ï–¢–û–î–´:')
                for method in special_methods:
                    decorators_str = f' @{", ".join(method["decorators"])}' if method['decorators'] else ''
                    args_str = f'({", ".join(method["args"])})' if method['args'] else '()'
                    doc_str = 'üìù' if method['has_docstring'] else '‚ùå'
                    print(f'     ‚Ä¢ {method["name"]}{args_str}{decorators_str} {doc_str}')

if __name__ == '__main__':
    analyze_methods()