#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ Circuit Breaker Main
"""

import sys
import os
import asyncio
import time
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—é
sys.path.append('/Users/sergejhlystov/ALADDIN_NEW')

from security.ai_agents.circuit_breaker_main import (
    CircuitState,
    CircuitBreakerConfig,
    CircuitBreakerMain,
    circuit_breaker_main
)

def test_circuit_state_enum():
    """–¢–µ—Å—Ç –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è CircuitState"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CircuitState...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è
    assert CircuitState.CLOSED.value == "closed"
    assert CircuitState.OPEN.value == "open"
    assert CircuitState.HALF_OPEN.value == "half_open"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ç–µ—Ä–∞—Ü–∏—é
    states = list(CircuitState)
    assert len(states) == 3
    
    print("‚úÖ CircuitState —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

def test_circuit_breaker_config():
    """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ CircuitBreakerConfig"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CircuitBreakerConfig...")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = CircuitBreakerConfig(
        service_name="test_service",
        service_type="api",
        strategy="standard",
        failure_threshold=5,
        timeout=60
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã
    assert config.service_name == "test_service"
    assert config.service_type == "api"
    assert config.strategy == "standard"
    assert config.failure_threshold == 5
    assert config.timeout == 60
    assert config.half_open_max_calls == 5  # –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    assert config.success_threshold == 3  # –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    assert config.adaptive == True  # –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    assert config.ml_enabled == True  # –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    print("‚úÖ CircuitBreakerConfig —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

def test_circuit_breaker_main_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è CircuitBreakerMain"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è CircuitBreakerMain...")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = CircuitBreakerConfig(
        service_name="test_service",
        service_type="api",
        strategy="standard",
        failure_threshold=3,
        timeout=30
    )
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä
    circuit_breaker = CircuitBreakerMain(config)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
    assert circuit_breaker.config == config
    assert circuit_breaker.state == CircuitState.CLOSED
    assert circuit_breaker.failure_count == 0
    assert circuit_breaker.success_count == 0
    assert circuit_breaker.last_failure_time is None
    assert circuit_breaker.last_success_time is None
    assert circuit_breaker.half_open_calls == 0
    assert isinstance(circuit_breaker.lock, type(circuit_breaker.lock))
    assert isinstance(circuit_breaker.stats, dict)
    
    print("‚úÖ CircuitBreakerMain —Å–æ–∑–¥–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

def test_circuit_breaker_methods():
    """–¢–µ—Å—Ç –º–µ—Ç–æ–¥–æ–≤ CircuitBreakerMain"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ CircuitBreakerMain...")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = CircuitBreakerConfig(
        service_name="test_service",
        service_type="api",
        strategy="standard",
        failure_threshold=3,
        timeout=30
    )
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä
    circuit_breaker = CircuitBreakerMain(config)
    
    # –¢–µ—Å—Ç get_state
    state = circuit_breaker.get_state()
    assert isinstance(state, dict)
    assert "service_name" in state
    assert "state" in state
    assert "failure_count" in state
    assert "success_count" in state
    assert "stats" in state
    
    # –¢–µ—Å—Ç reset
    circuit_breaker.failure_count = 5
    circuit_breaker.state = CircuitState.OPEN
    circuit_breaker.reset()
    assert circuit_breaker.failure_count == 0
    assert circuit_breaker.state == CircuitState.CLOSED
    
    # –¢–µ—Å—Ç update_config
    new_config = CircuitBreakerConfig(
        service_name="new_service",
        service_type="database",
        strategy="adaptive",
        failure_threshold=10,
        timeout=120
    )
    circuit_breaker.update_config(new_config)
    assert circuit_breaker.config == new_config
    
    print("‚úÖ –ú–µ—Ç–æ–¥—ã CircuitBreakerMain —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

def test_circuit_breaker_call_success():
    """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ —á–µ—Ä–µ–∑ Circuit Breaker"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞...")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = CircuitBreakerConfig(
        service_name="test_service",
        service_type="api",
        strategy="standard",
        failure_threshold=3,
        timeout=30
    )
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä
    circuit_breaker = CircuitBreakerMain(config)
    
    # –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    def test_func(x, y):
        return x + y
    
    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —á–µ—Ä–µ–∑ Circuit Breaker
    result = circuit_breaker.call(test_func, 5, 3)
    assert result == 8
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    assert circuit_breaker.stats["total_calls"] == 1
    assert circuit_breaker.stats["successful_calls"] == 1
    assert circuit_breaker.stats["failed_calls"] == 0
    
    print("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—ã–∑–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

def test_circuit_breaker_call_failure():
    """–¢–µ—Å—Ç –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ —á–µ—Ä–µ–∑ Circuit Breaker"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞...")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = CircuitBreakerConfig(
        service_name="test_service",
        service_type="api",
        strategy="standard",
        failure_threshold=2,
        timeout=30
    )
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä
    circuit_breaker = CircuitBreakerMain(config)
    
    # –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—Å–µ–≥–¥–∞ –ø–∞–¥–∞–µ—Ç
    def failing_func():
        raise Exception("Test error")
    
    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —á–µ—Ä–µ–∑ Circuit Breaker
    try:
        circuit_breaker.call(failing_func)
        assert False, "–û–∂–∏–¥–∞–ª–æ—Å—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ"
    except Exception as e:
        assert str(e) == "Test error"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    assert circuit_breaker.stats["total_calls"] == 1
    assert circuit_breaker.stats["successful_calls"] == 0
    assert circuit_breaker.stats["failed_calls"] == 1
    
    print("‚úÖ –ù–µ—É–¥–∞—á–Ω—ã–π –≤—ã–∑–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

def test_circuit_breaker_state_transitions():
    """–¢–µ—Å—Ç –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏–π Circuit Breaker"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏–π...")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = CircuitBreakerConfig(
        service_name="test_service",
        service_type="api",
        strategy="standard",
        failure_threshold=2,
        timeout=1  # –ö–æ—Ä–æ—Ç–∫–∏–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    )
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä
    circuit_breaker = CircuitBreakerMain(config)
    
    # –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—Å–µ–≥–¥–∞ –ø–∞–¥–∞–µ—Ç
    def failing_func():
        raise Exception("Test error")
    
    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å Circuit Breaker
    for i in range(3):
        try:
            circuit_breaker.call(failing_func)
        except Exception:
            pass
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Circuit Breaker –æ—Ç–∫—Ä—ã—Ç
    assert circuit_breaker.state == CircuitState.OPEN
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—á–µ—Ç—á–∏–∫ –æ—Ç–∫—Ä—ã—Ç–∏–π —É–≤–µ–ª–∏—á–∏–ª—Å—è
    assert circuit_breaker.stats["circuit_opens"] >= 1
    
    # –ñ–¥–µ–º —Ç–∞–π–º–∞—É—Ç
    time.sleep(2)
    
    # –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è —Ä–∞–±–æ—Ç–∞–µ—Ç
    def success_func():
        return "success"
    
    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é - –¥–æ–ª–∂–Ω–∞ –ø–µ—Ä–µ–π—Ç–∏ –≤ HALF_OPEN
    result = circuit_breaker.call(success_func)
    assert result == "success"
    assert circuit_breaker.state == CircuitState.HALF_OPEN
    
    print("‚úÖ –ü–µ—Ä–µ—Ö–æ–¥—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

async def test_async_get_status():
    """–¢–µ—Å—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ get_status"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ async get_status...")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = CircuitBreakerConfig(
        service_name="test_service",
        service_type="api",
        strategy="standard",
        failure_threshold=3,
        timeout=30
    )
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä
    circuit_breaker = CircuitBreakerMain(config)
    
    # –í—ã–∑—ã–≤–∞–µ–º async –º–µ—Ç–æ–¥
    status = await circuit_breaker.get_status()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    assert isinstance(status, dict)
    assert "service_name" in status
    assert "state" in status
    assert "stats" in status
    assert "config" in status
    assert "status" in status
    
    print("‚úÖ Async get_status —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

def test_global_instance():
    """–¢–µ—Å—Ç –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    assert circuit_breaker_main is not None
    assert isinstance(circuit_breaker_main, CircuitBreakerMain)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    assert circuit_breaker_main.config.service_name == "default"
    assert circuit_breaker_main.config.service_type == "api"
    assert circuit_breaker_main.config.strategy == "standard"
    assert circuit_breaker_main.config.failure_threshold == 5
    assert circuit_breaker_main.config.timeout == 60
    
    print("‚úÖ –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

def test_cleanup():
    """–¢–µ—Å—Ç –º–µ—Ç–æ–¥–∞ cleanup"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ cleanup...")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = CircuitBreakerConfig(
        service_name="test_service",
        service_type="api",
        strategy="standard",
        failure_threshold=3,
        timeout=30
    )
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä
    circuit_breaker = CircuitBreakerMain(config)
    
    # –ò–∑–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    circuit_breaker.failure_count = 5
    circuit_breaker.success_count = 3
    circuit_breaker.state = CircuitState.OPEN
    circuit_breaker.stats["total_calls"] = 10
    
    # –í—ã–∑—ã–≤–∞–µ–º cleanup
    circuit_breaker.cleanup()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ
    assert circuit_breaker.failure_count == 0
    assert circuit_breaker.success_count == 0
    assert circuit_breaker.state == CircuitState.CLOSED
    assert circuit_breaker.stats["total_calls"] == 0
    
    print("‚úÖ Cleanup —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ –ó–ê–ü–£–°–ö –í–°–ï–• –¢–ï–°–¢–û–í CIRCUIT BREAKER MAIN")
    print("=" * 60)
    
    try:
        test_circuit_state_enum()
        test_circuit_breaker_config()
        test_circuit_breaker_main_creation()
        test_circuit_breaker_methods()
        test_circuit_breaker_call_success()
        test_circuit_breaker_call_failure()
        test_circuit_breaker_state_transitions()
        test_global_instance()
        test_cleanup()
        
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("‚úÖ Circuit Breaker Main –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ–Ω")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ê–•: {e}")
        import traceback
        traceback.print_exc()
        return False

async def run_async_tests():
    """–ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("\nüîÑ –ó–ê–ü–£–°–ö –ê–°–ò–ù–•–†–û–ù–ù–´–• –¢–ï–°–¢–û–í")
    print("=" * 40)
    
    try:
        await test_async_get_status()
        print("\nüéâ –ê–°–ò–ù–•–†–û–ù–ù–´–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –í –ê–°–ò–ù–•–†–û–ù–ù–´–• –¢–ï–°–¢–ê–•: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
    sync_success = run_all_tests()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
    async_success = asyncio.run(run_async_tests())
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if sync_success and async_success:
        print("\nüèÜ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("‚úÖ Circuit Breaker Main –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
    else:
        print("\nüí• –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–®–õ–ò!")
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")