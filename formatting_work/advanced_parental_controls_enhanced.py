#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü–†–û–î–í–ò–ù–£–¢–´–ô –†–û–î–ò–¢–ï–õ–¨–°–ö–ò–ô –ö–û–ù–¢–†–û–õ–¨ - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –æ–±—Ö–æ–¥–∞
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å IncognitoProtectionBot –¥–ª—è –ø–æ–ª–Ω–æ–π –∑–∞—â–∏—Ç—ã –¥–µ—Ç–µ–π

–£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –° A+ –ö–ê–ß–ï–°–¢–í–û–ú:
- –ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤–æ –≤—Å–µ—Ö –º–µ—Ç–æ–¥–∞—Ö
- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ –≤—Å–µ—Ö –º–µ—Ç–æ–¥–∞—Ö
- –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
- –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã (__str__, __repr__, __eq__, __hash__)
- –ú–µ—Ç–æ–¥—ã –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
- –£–ª—É—á—à–µ–Ω–Ω—ã–µ type hints
- –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
"""

import asyncio
import json
from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional
from pathlib import Path

from core.base import SecurityBase
from security.bots.incognito_protection_bot import (
    IncognitoProtectionBot,
    ThreatLevel,
)


class ProtectionMode(Enum):
    """–†–µ–∂–∏–º—ã –∑–∞—â–∏—Ç—ã –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è"""

    MAXIMUM = "maximum"  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞
    HIGH = "high"  # –í—ã—Å–æ–∫–∞—è –∑–∞—â–∏—Ç–∞
    MEDIUM = "medium"  # –°—Ä–µ–¥–Ω—è—è –∑–∞—â–∏—Ç–∞
    LOW = "low"  # –ù–∏–∑–∫–∞—è –∑–∞—â–∏—Ç–∞


class AdvancedParentalControls(SecurityBase):
    """
    –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ–±—Ö–æ–¥–∞

    –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –∑–∞—â–∏—Ç—É –¥–µ—Ç–µ–π –æ—Ç –ø–æ–ø—ã—Ç–æ–∫ –æ–±—Ö–æ–¥–∞
    —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è —á–µ—Ä–µ–∑ VPN, –∏–Ω–∫–æ–≥–Ω–∏—Ç–æ —Ä–µ–∂–∏–º, –ø—Ä–æ–∫—Å–∏ –∏ Tor.
    """

    def __init__(self, name: str = "AdvancedParentalControls") -> None:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è

        Args:
            name (str): –ò–º—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ç—Ä–æ–ª—è

        Raises:
            ValueError: –ï—Å–ª–∏ –∏–º—è –ø—É—Å—Ç–æ–µ –∏–ª–∏ None
            RuntimeError: –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        """
        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            if not name or not isinstance(name, str):
                raise ValueError("–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π")

            super().__init__(name)

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
            try:
                self.incognito_bot = IncognitoProtectionBot()
            except Exception as e:
                self.logger.error(
                    f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ IncognitoProtectionBot: {e}"
                )
                raise RuntimeError(
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å IncognitoProtectionBot: {e}"
                )

            self.protection_mode = ProtectionMode.MAXIMUM
            self.active_children: Dict[str, Dict[str, Any]] = {}
            self.monitoring_tasks: Dict[str, asyncio.Task] = {}

            self.logger.info(
                f"‚úÖ AdvancedParentalControls '{name}' —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
            )

        except Exception as e:
            self.logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            raise

    def __str__(self) -> str:
        """–°—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        active_count = len(self.active_children)
        return (
            f"AdvancedParentalControls(name='{self.name}', "
            f"active_children={active_count}, "
            f"mode={self.protection_mode.value})"
        )

    def __repr__(self) -> str:
        """–û—Ç–ª–∞–¥–æ—á–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞"""
        return (
            f"AdvancedParentalControls(name='{self.name}', "
            f"protection_mode={self.protection_mode}, "
            f"active_children={list(self.active_children.keys())})"
        )

    def __eq__(self, other: Any) -> bool:
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ –∏–º–µ–Ω–∏ –∏ —Ä–µ–∂–∏–º—É –∑–∞—â–∏—Ç—ã"""
        if not isinstance(other, AdvancedParentalControls):
            return False
        return (
            self.name == other.name
            and self.protection_mode == other.protection_mode
        )

    def __hash__(self) -> int:
        """–•–µ—à –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å–ª–æ–≤–∞—Ä—è—Ö –∏ –º–Ω–æ–∂–µ—Å—Ç–≤–∞—Ö"""
        return hash((self.name, self.protection_mode))

    def __enter__(self) -> "AdvancedParentalControls":
        """–í—Ö–æ–¥ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä"""
        self.logger.info(
            "üîß –í—Ö–æ–¥ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä AdvancedParentalControls"
        )
        return self

    def __exit__(
        self,
        exc_type: Optional[type],
        exc_val: Optional[Exception],
        exc_tb: Optional[Any],
    ) -> None:
        """–í—ã—Ö–æ–¥ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å –æ—á–∏—Å—Ç–∫–æ–π —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            self.logger.info(
                "üßπ –í—ã—Ö–æ–¥ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞, –æ—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"
            )

            # –û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            for child_id, task in self.monitoring_tasks.items():
                if not task.done():
                    task.cancel()
                    self.logger.info(
                        f"‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è {child_id}"
                    )

            # –û—á–∏—Å—Ç–∫–∞ —Å–ª–æ–≤–∞—Ä–µ–π
            self.monitoring_tasks.clear()
            self.active_children.clear()

            if exc_type is not None:
                self.logger.error(
                    f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–º –º–µ–Ω–µ–¥–∂–µ—Ä–µ: "
                    f"{exc_type.__name__}: {exc_val}"
                )
            else:
                self.logger.info("‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")

        except Exception as e:
            self.logger.error(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {e}"
            )

    async def setup_child_protection(
        self, child_id: str, protection_level: str = "MAXIMUM"
    ) -> bool:
        """
        –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∑–∞—â–∏—Ç—ã –¥–ª—è —Ä–µ–±–µ–Ω–∫–∞

        Args:
            child_id (str): –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ä–µ–±–µ–Ω–∫–∞
            protection_level (str): –£—Ä–æ–≤–µ–Ω—å –∑–∞—â–∏—Ç—ã (MAXIMUM, HIGH, MEDIUM, LOW)

        Returns:
            bool: True –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ

        Raises:
            ValueError: –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
            RuntimeError: –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∑–∞—â–∏—Ç—É
        """
        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            if not child_id or not isinstance(child_id, str):
                raise ValueError("child_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π")

            if protection_level not in ["MAXIMUM", "HIGH", "MEDIUM", "LOW"]:
                raise ValueError(
                    f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å –∑–∞—â–∏—Ç—ã: {protection_level}"
                )

            self.logger.info(
                f"üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞—â–∏—Ç—ã –¥–ª—è —Ä–µ–±–µ–Ω–∫–∞ {child_id} "
                f"—Å —É—Ä–æ–≤–Ω–µ–º {protection_level}"
            )

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Ä–æ–≤–Ω—è –∑–∞—â–∏—Ç—ã
            if protection_level == "MAXIMUM":
                self.incognito_bot.protection_level = "MAXIMUM"
                self.incognito_bot.block_vpn = True
                self.incognito_bot.block_incognito = True
                self.incognito_bot.block_proxy = True
                self.incognito_bot.block_tor = True
                self.incognito_bot.emergency_lock_enabled = True

            # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            try:
                task = asyncio.create_task(
                    self.incognito_bot.monitor_continuous_protection(child_id)
                )
                self.monitoring_tasks[child_id] = task
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {e}")

            self.active_children[child_id] = {
                "protection_level": protection_level,
                "start_time": datetime.now(),
                "blocked_attempts": 0,
                "last_alert": None,
            }

            self.logger.info(
                f"üõ°Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è —Ä–µ–±–µ–Ω–∫–∞ {child_id}"
            )
            return True

        except ValueError as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {e}")
            return False
        except RuntimeError as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
            return False
        except Exception as e:
            self.logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞—â–∏—Ç—ã: {e}")
            return False

    async def emergency_response(
        self, child_id: str, threat_level: ThreatLevel
    ) -> bool:
        """
        –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –ø–æ–ø—ã—Ç–∫—É –æ–±—Ö–æ–¥–∞

        Args:
            child_id (str): –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ä–µ–±–µ–Ω–∫–∞
            threat_level (ThreatLevel): –£—Ä–æ–≤–µ–Ω—å —É–≥—Ä–æ–∑—ã

        Returns:
            bool: True –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ

        Raises:
            ValueError: –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
            RuntimeError: –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        """
        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            if not child_id or not isinstance(child_id, str):
                raise ValueError("child_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π")

            if not isinstance(threat_level, ThreatLevel):
                raise ValueError(
                    "threat_level –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º ThreatLevel"
                )

            self.logger.warning(
                f"üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è {child_id}, "
                f"—É—Ä–æ–≤–µ–Ω—å —É–≥—Ä–æ–∑—ã: {threat_level}"
            )

            if threat_level == ThreatLevel.CRITICAL:
                # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                try:
                    await self.incognito_bot.emergency_lock_device(child_id)
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {e}")
                    raise RuntimeError(
                        f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {e}"
                    )

                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª–µ–π
                await self._send_critical_alert(
                    child_id, "–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –£–ì–†–û–ó–ê: –ü–æ–ø—ã—Ç–∫–∞ –æ–±—Ö–æ–¥–∞ –∑–∞—â–∏—Ç—ã!"
                )

                # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
                try:
                    screenshot = await self.incognito_bot.take_screenshot(
                        child_id
                    )
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")
                    screenshot = "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞"

                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
                self.logger.critical(
                    f"üö® –≠–ö–°–¢–†–ï–ù–ù–´–ô –†–ï–ñ–ò–ú: –†–µ–±–µ–Ω–æ–∫ {child_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω! "
                    f"–°–∫—Ä–∏–Ω—à–æ—Ç: {screenshot}"
                )

            elif threat_level == ThreatLevel.HIGH:
                # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –±—Ä–∞—É–∑–µ—Ä–æ–≤
                try:
                    await self.incognito_bot._block_incognito_mode()
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –±—Ä–∞—É–∑–µ—Ä–æ–≤: {e}")
                    raise RuntimeError(
                        f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –±—Ä–∞—É–∑–µ—Ä—ã: {e}"
                    )

                await self._send_high_alert(
                    child_id, "–í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —É–≥—Ä–æ–∑—ã: –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –±—Ä–∞—É–∑–µ—Ä–æ–≤"
                )

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            if child_id in self.active_children:
                self.active_children[child_id]["blocked_attempts"] += 1
                self.active_children[child_id]["last_alert"] = datetime.now()

            self.logger.info(f"‚úÖ –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–ª—è {child_id}")
            return True

        except ValueError as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {e}")
            return False
        except RuntimeError as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
            return False
        except Exception as e:
            self.logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: {e}")
            return False

    async def _send_critical_alert(self, child_id: str, message: str) -> None:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

        Args:
            child_id (str): –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ä–µ–±–µ–Ω–∫–∞
            message (str): –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

        Raises:
            ValueError: –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
            IOError: –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        """
        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            if not child_id or not isinstance(child_id, str):
                raise ValueError("child_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π")

            if not message or not isinstance(message, str):
                raise ValueError("message –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π")

            self.logger.critical(
                f"üö® –û—Ç–ø—Ä–∞–≤–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è {child_id}"
            )

            alert = {
                "child_id": child_id,
                "alert_type": "CRITICAL",
                "message": message,
                "timestamp": datetime.now().isoformat(),
                "action_required": "IMMEDIATE",
            }

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ –≤—Å–µ –∫–∞–Ω–∞–ª—ã
            print(f"üö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï: {message}")

            # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            data_dir = Path("data")
            data_dir.mkdir(exist_ok=True)

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
            try:
                with open(
                    f"data/critical_alerts_{child_id}.json",
                    "a",
                    encoding="utf-8",
                ) as f:
                    f.write(json.dumps(alert, ensure_ascii=False) + "\n")
            except IOError as e:
                self.logger.error(
                    f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}"
                )
                raise

            self.logger.info(
                f"‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è {child_id}"
            )

        except ValueError as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {e}")
            raise
        except Exception as e:
            self.logger.error(
                f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}"
            )
            raise

    async def _send_high_alert(self, child_id: str, message: str) -> None:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã—Å–æ–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è

        Args:
            child_id (str): –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ä–µ–±–µ–Ω–∫–∞
            message (str): –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

        Raises:
            ValueError: –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
            IOError: –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        """
        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            if not child_id or not isinstance(child_id, str):
                raise ValueError("child_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π")

            if not message or not isinstance(message, str):
                raise ValueError("message –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π")

            self.logger.warning(
                f"‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã—Å–æ–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è –¥–ª—è {child_id}"
            )

            alert = {
                "child_id": child_id,
                "alert_type": "HIGH",
                "message": message,
                "timestamp": datetime.now().isoformat(),
                "action_required": "SOON",
            }

            print(f"‚ö†Ô∏è –í–´–°–û–ö–ò–ô –£–†–û–í–ï–ù–¨: {message}")

            # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            data_dir = Path("data")
            data_dir.mkdir(exist_ok=True)

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
            try:
                with open(
                    f"data/high_alerts_{child_id}.json", "a", encoding="utf-8"
                ) as f:
                    f.write(json.dumps(alert, ensure_ascii=False) + "\n")
            except IOError as e:
                self.logger.error(
                    f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã—Å–æ–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è: {e}"
                )
                raise

            self.logger.info(
                f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—ã—Å–æ–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è {child_id}"
            )

        except ValueError as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {e}")
            raise
        except Exception as e:
            self.logger.error(
                f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã—Å–æ–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è: {e}"
            )
            raise

    def get_protection_report(self, child_id: str) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ –∑–∞—â–∏—Ç–µ

        Args:
            child_id (str): –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ä–µ–±–µ–Ω–∫–∞

        Returns:
            Dict[str, Any]: –û—Ç—á–µ—Ç –æ –∑–∞—â–∏—Ç–µ –∏–ª–∏ –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å –ø—Ä–∏ –æ—à–∏–±–∫–µ

        Raises:
            ValueError: –ï—Å–ª–∏ child_id –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω
        """
        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            if not child_id or not isinstance(child_id, str):
                raise ValueError("child_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π")

            self.logger.info(f"üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –∑–∞—â–∏—Ç—ã –¥–ª—è {child_id}")

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç IncognitoProtectionBot
            try:
                bot_stats = self.incognito_bot.get_protection_statistics(
                    child_id
                )
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞: {e}")
                bot_stats = {}

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            child_info = self.active_children.get(child_id, {})

            report = {
                "child_id": child_id,
                "protection_active": child_id in self.active_children,
                "protection_level": child_info.get(
                    "protection_level", "UNKNOWN"
                ),
                "monitoring_duration": str(
                    datetime.now()
                    - child_info.get("start_time", datetime.now())
                ),
                "total_blocked_attempts": child_info.get(
                    "blocked_attempts", 0
                ),
                "last_alert": (
                    child_info.get("last_alert").isoformat()
                    if child_info.get("last_alert")
                    else None
                ),
                "bot_statistics": bot_stats,
                "recommendations": self._generate_recommendations(bot_stats),
            }

            self.logger.info(f"‚úÖ –û—Ç—á–µ—Ç –∑–∞—â–∏—Ç—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è {child_id}")
            return report

        except ValueError as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {e}")
            return {}
        except Exception as e:
            self.logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
            return {}

    def _generate_recommendations(self, stats: Dict[str, Any]) -> List[str]:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

        Args:
            stats (Dict[str, Any]): –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—â–∏—Ç—ã

        Returns:
            List[str]: –°–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π

        Raises:
            ValueError: –ï—Å–ª–∏ stats –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω
        """
        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            if not isinstance(stats, dict):
                raise ValueError("stats –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º")

            self.logger.debug("üîç –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

            recommendations = []

            # –ê–Ω–∞–ª–∏–∑ –ø–æ–ø—ã—Ç–æ–∫ –æ–±—Ö–æ–¥–∞
            bypass_attempts = stats.get("bypass_attempts", {})
            if bypass_attempts:
                for method, data in bypass_attempts.items():
                    if data.get("successful_attempts", 0) > 0:
                        recommendations.append(
                            f"‚ö†Ô∏è –£—Å–∏–ª–∏—Ç—å –∑–∞—â–∏—Ç—É –æ—Ç {method}: "
                            f"{data['successful_attempts']} —É—Å–ø–µ—à–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫"
                        )

            # –ê–Ω–∞–ª–∏–∑ VPN –¥–µ—Ç–µ–∫—Ü–∏–π
            vpn_stats = stats.get("vpn_detections", {})
            if vpn_stats.get("total", 0) > 5:
                recommendations.append(
                    "üîí –ß–∞—Å—Ç—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è VPN - "
                    "—Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞"
                )

            # –ê–Ω–∞–ª–∏–∑ –∏–Ω–∫–æ–≥–Ω–∏—Ç–æ –¥–µ—Ç–µ–∫—Ü–∏–π
            incognito_stats = stats.get("incognito_detections", {})
            if incognito_stats.get("total", 0) > 3:
                recommendations.append(
                    "üåê –ß–∞—Å—Ç—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –∏–Ω–∫–æ–≥–Ω–∏—Ç–æ - —É—Å–∏–ª–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"
                )

            if not recommendations:
                recommendations.append("‚úÖ –ó–∞—â–∏—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ")

            self.logger.debug(
                f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(recommendations)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"
            )
            return recommendations

        except ValueError as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {e}")
            return ["‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"]
        except Exception as e:
            self.logger.error(
                f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}"
            )
            return ["‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"]


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def main() -> None:
    """
    –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è AdvancedParentalControls

    –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è
    —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏
    —Ä–µ—Å—É—Ä—Å–æ–≤.
    """
    try:
        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏
        with AdvancedParentalControls() as controls:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∑–∞—â–∏—Ç—ã –¥–ª—è —Ä–µ–±–µ–Ω–∫–∞
            child_id = "child_001"
            success = await controls.setup_child_protection(
                child_id, "MAXIMUM"
            )

            if success:
                print("üõ°Ô∏è –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
                print(f"üë∂ –ó–∞—â–∏—Ç–∞ –¥–ª—è —Ä–µ–±–µ–Ω–∫–∞: {child_id}")
                print("üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: VPN, –∏–Ω–∫–æ–≥–Ω–∏—Ç–æ, –ø—Ä–æ–∫—Å–∏, Tor")
                print("üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –í–ö–õ–Æ–ß–ï–ù–´")
                print("üîí –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞: –í–ö–õ–Æ–ß–ï–ù–ê")

                # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
                report = controls.get_protection_report(child_id)
                report_json = json.dumps(report, indent=2, ensure_ascii=False)
                print(f"üìä –û—Ç—á–µ—Ç: {report_json}")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è")

    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    asyncio.run(main())
