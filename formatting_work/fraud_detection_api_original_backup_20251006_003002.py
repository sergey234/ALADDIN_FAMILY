#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Fraud Detection API - API —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –¥—Ä—É–≥–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏
"""

import asyncio
import logging
import os
import sys
import threading
from datetime import datetime

from flask import Flask, jsonify, render_template_string, request
from flask_cors import CORS

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º

from security.ai_agents.auto_learning_system import AutoLearningSystem  # noqa: E402
from security.ai_agents.enhanced_data_collector import EnhancedDataCollector  # noqa: E402
from security.ai_agents.russian_fraud_ml_models import RussianFraudMLModels  # noqa: E402

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–Ω–∏–µ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = Flask(__name__)
CORS(app)  # –†–∞–∑—Ä–µ—à–∞–µ–º CORS –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
ml_models = None
data_collector = None
auto_learning = None

# HTML —à–∞–±–ª–æ–Ω –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
HTML_TEMPLATE = """
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ALADDIN AI Fraud Detection API</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }
        .container { max-width: 1200px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        h1 { color: #2c3e50; text-align: center; margin-bottom: 30px; }
        .api-section { margin: 20px 0; padding: 20px; border: 1px solid #ddd; border-radius: 5px; }
        .endpoint { background: #f8f9fa; padding: 15px; margin: 10px 0; border-radius: 5px; }
        .method { display: inline-block; padding: 5px 10px; border-radius: 3px; color: white; font-weight: bold; }
        .get { background: #28a745; }
        .post { background: #007bff; }
        .endpoint-url { font-family: monospace; background: #e9ecef; padding: 5px; border-radius: 3px; }
        .status { padding: 10px; border-radius: 5px; margin: 10px 0; }
        .status.running { background: #d4edda; color: #155724; border: 1px solid #c3e6cb; }
        .status.stopped { background: #f8d7da; color: #721c24; border: 1px solid #f5c6cb; }
        .demo-section { background: #e3f2fd; padding: 20px; border-radius: 5px; margin: 20px 0; }
        .demo-form { margin: 10px 0; }
        .demo-form input, .demo-form select { margin: 5px; padding: 8px; border: 1px solid #ddd; border-radius: 3px; }
        .demo-form button { background: #007bff; color: white; padding: 10px 20px; border: none; border-radius: 3px; cursor: pointer; }
        .demo-form button:hover { background: #0056b3; }
        .result { background: #f8f9fa; padding: 15px; border-radius: 5px; margin: 10px 0; border-left: 4px solid #007bff; }
        .stats { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin: 20px 0; }
        .stat-card { background: #f8f9fa; padding: 20px; border-radius: 5px; text-align: center; border: 1px solid #dee2e6; }
        .stat-number { font-size: 2em; font-weight: bold; color: #007bff; }
        .stat-label { color: #6c757d; margin-top: 5px; }
    </style>
</head>
<body>
    <div class="container">
        <h1>ü§ñ ALADDIN AI Fraud Detection API</h1>

        <div class="status {{ 'running' if api_status.is_running else 'stopped' }}">
            <strong>–°—Ç–∞—Ç—É—Å API:</strong> {{ '–ó–∞–ø—É—â–µ–Ω' if api_status.is_running else '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' }}
            <br><strong>–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞:</strong> {{ api_status.start_time }}
            <br><strong>–í–µ—Ä—Å–∏—è:</strong> {{ api_status.version }}
        </div>

        <div class="stats">
            <div class="stat-card">
                <div class="stat-number">{{ api_status.total_requests }}</div>
                <div class="stat-label">–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤</div>
            </div>
            <div class="stat-card">
                <div class="stat-number">{{ api_status.models_loaded }}</div>
                <div class="stat-label">–ó–∞–≥—Ä—É–∂–µ–Ω–æ –º–æ–¥–µ–ª–µ–π</div>
            </div>
            <div class="stat-card">
                <div class="stat-number">{{ api_status.uptime }}</div>
                <div class="stat-label">–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã (–º–∏–Ω)</div>
            </div>
            <div class="stat-card">
                <div class="stat-number">{{ api_status.success_rate }}%</div>
                <div class="stat-label">–£—Å–ø–µ—à–Ω–æ—Å—Ç—å</div>
            </div>
        </div>

        <div class="api-section">
            <h2>üìä API Endpoints</h2>

            <div class="endpoint">
                <span class="method get">GET</span>
                <span class="endpoint-url">/api/status</span>
                <p>–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å API –∏ —Å–∏—Å—Ç–µ–º—ã</p>
            </div>

            <div class="endpoint">
                <span class="method get">GET</span>
                <span class="endpoint-url">/api/models/status</span>
                <p>–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å ML –º–æ–¥–µ–ª–µ–π</p>
            </div>

            <div class="endpoint">
                <span class="method post">POST</span>
                <span class="endpoint-url">/api/predict/fraud-type</span>
                <p>–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å —Ç–∏–ø –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞</p>
                <p><strong>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:</strong> severity, region, amount, source</p>
            </div>

            <div class="endpoint">
                <span class="method post">POST</span>
                <span class="endpoint-url">/api/predict/severity</span>
                <p>–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞</p>
                <p><strong>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:</strong> fraud_type, region, amount</p>
            </div>

            <div class="endpoint">
                <span class="method post">POST</span>
                <span class="endpoint-url">/api/analyze/region-risk</span>
                <p>–ê–Ω–∞–ª–∏–∑ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–∏—Å–∫–∞</p>
                <p><strong>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:</strong> region</p>
            </div>

            <div class="endpoint">
                <span class="method get">GET</span>
                <span class="endpoint-url">/api/data/collect</span>
                <p>–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–±–æ—Ä –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö</p>
            </div>

            <div class="endpoint">
                <span class="method get">GET</span>
                <span class="endpoint-url">/api/models/retrain</span>
                <p>–ü–µ—Ä–µ–æ–±—É—á–∏—Ç—å ML –º–æ–¥–µ–ª–∏</p>
            </div>

            <div class="endpoint">
                <span class="method get">GET</span>
                <span class="endpoint-url">/api/auto-learning/start</span>
                <p>–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ 24/7</p>
            </div>

            <div class="endpoint">
                <span class="method get">GET</span>
                <span class="endpoint-url">/api/auto-learning/stop</span>
                <p>–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ</p>
            </div>
        </div>

        <div class="demo-section">
            <h2>üß™ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è API</h2>

            <div class="demo-form">
                <h3>–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Ç–∏–ø–∞ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞</h3>
                <select id="severity">
                    <option value="–Ω–∏–∑–∫–∞—è">–ù–∏–∑–∫–∞—è</option>
                    <option value="—Å—Ä–µ–¥–Ω—è—è">–°—Ä–µ–¥–Ω—è—è</option>
                    <option value="–≤—ã—Å–æ–∫–∞—è">–í—ã—Å–æ–∫–∞—è</option>
                    <option value="–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è">–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è</option>
                </select>
                <select id="region">
                    <option value="–ú–æ—Å–∫–≤–∞">–ú–æ—Å–∫–≤–∞</option>
                    <option value="–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥">–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥</option>
                    <option value="–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥">–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥</option>
                    <option value="–ö–∞–∑–∞–Ω—å">–ö–∞–∑–∞–Ω—å</option>
                    <option value="–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫">–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫</option>
                </select>
                <input type="number" id="amount" placeholder="–°—É–º–º–∞ (—Ä—É–±)" value="500000">
                <input type="text" id="source" placeholder="–ò—Å—Ç–æ—á–Ω–∏–∫" value="–±–∞–Ω–∫">
                <button onclick="predictFraudType()">–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å —Ç–∏–ø</button>
            </div>

            <div id="prediction-result" class="result" style="display: none;"></div>

            <div class="demo-form">
                <h3>–ê–Ω–∞–ª–∏–∑ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–∏—Å–∫–∞</h3>
                <select id="region-risk">
                    <option value="–ú–æ—Å–∫–≤–∞">–ú–æ—Å–∫–≤–∞</option>
                    <option value="–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥">–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥</option>
                    <option value="–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥">–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥</option>
                    <option value="–ö–∞–∑–∞–Ω—å">–ö–∞–∑–∞–Ω—å</option>
                    <option value="–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫">–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫</option>
                </select>
                <button onclick="analyzeRegionRisk()">–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∏—Å–∫</button>
            </div>

            <div id="risk-result" class="result" style="display: none;"></div>
        </div>
    </div>

    <script>
        function predictFraudType() {
            const data = {
                severity: document.getElementById('severity').value,
                region: document.getElementById('region').value,
                amount: parseInt(document.getElementById('amount').value),
                source: document.getElementById('source').value
            };

            fetch('/api/predict/fraud-type', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify(data)
            })
            .then(response => response.json())
            .then(result => {
                const resultDiv = document.getElementById('prediction-result');
                resultDiv.style.display = 'block';
                resultDiv.innerHTML = `
                    <h4>–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:</h4>
                    <p><strong>–¢–∏–ø –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞:</strong> ${result.predicted_type || '–û—à–∏–±–∫–∞'}</p>
                    <p><strong>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</strong> ${(result.confidence * 100).toFixed(1)}%</p>
                    <p><strong>–í—Å–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏:</strong></p>
                    <ul>
                        ${Object.entries(result.all_probabilities || {}).map(([type, prob]) =>
                            `<li>${type}: ${(prob * 100).toFixed(1)}%</li>`
                        ).join('')}
                    </ul>
                `;
            })
            .catch(error => {
                document.getElementById('prediction-result').innerHTML = '<p style="color: red;">–û—à–∏–±–∫–∞: ' + error.message + '</p>';
            });
        }

        function analyzeRegionRisk() {
            const region = document.getElementById('region-risk').value;

            fetch(`/api/analyze/region-risk?region=${encodeURIComponent(region)}`)
            .then(response => response.json())
            .then(result => {
                const resultDiv = document.getElementById('risk-result');
                resultDiv.style.display = 'block';
                resultDiv.innerHTML = `
                    <h4>–ê–Ω–∞–ª–∏–∑ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–∏—Å–∫–∞:</h4>
                    <p><strong>–†–µ–≥–∏–æ–Ω:</strong> ${region}</p>
                    <p><strong>–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞:</strong> ${result.risk_level || '–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}</p>
                    <p><strong>–û—Ü–µ–Ω–∫–∞:</strong> ${result.risk_score || 'N/A'}/10</p>
                    <p><strong>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</strong> ${result.recommendations || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}</p>
                `;
            })
            .catch(error => {
                document.getElementById('risk-result').innerHTML = '<p style="color: red;">–û—à–∏–±–∫–∞: ' + error.message + '</p>';
            });
        }
    </script>
</body>
</html>
"""

# API —Å—Ç–∞—Ç—É—Å
api_status = {
    "is_running": False,
    "start_time": None,
    "version": "1.0.0",
    "total_requests": 0,
    "successful_requests": 0,
    "models_loaded": 0,
    "uptime": 0,
}


def initialize_api():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API"""
    global ml_models, data_collector, auto_learning

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ML –º–æ–¥–µ–ª–µ–π
        ml_models = RussianFraudMLModels()
        api_status["models_loaded"] = (
            len(ml_models.models) if ml_models.models else 0
        )

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–±–æ—Ä—â–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        data_collector = EnhancedDataCollector()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
        auto_learning = AutoLearningSystem()

        api_status["is_running"] = True
        api_status["start_time"] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        logger.info("‚úÖ API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ API: {e}")
        api_status["is_running"] = False


@app.route("/")
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º"""
    api_status["uptime"] = (
        int(
            (
                datetime.now()
                - datetime.strptime(
                    api_status["start_time"], "%Y-%m-%d %H:%M:%S"
                )
            ).total_seconds()
            / 60
        )
        if api_status["start_time"]
        else 0
    )

    return render_template_string(HTML_TEMPLATE, api_status=api_status)


@app.route("/api/status")
def get_status():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å API"""
    api_status["total_requests"] += 1
    api_status["successful_requests"] += 1

    return jsonify(
        {
            "status": "running" if api_status["is_running"] else "stopped",
            "version": api_status["version"],
            "start_time": api_status["start_time"],
            "uptime_minutes": api_status["uptime"],
            "total_requests": api_status["total_requests"],
            "success_rate": (
                round(
                    (
                        api_status["successful_requests"]
                        / api_status["total_requests"]
                    )
                    * 100,
                    2,
                )
                if api_status["total_requests"] > 0
                else 0
            ),
            "models_loaded": api_status["models_loaded"],
        }
    )


@app.route("/api/models/status")
def get_models_status():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å ML –º–æ–¥–µ–ª–µ–π"""
    api_status["total_requests"] += 1

    try:
        if ml_models and hasattr(ml_models, "model_metrics"):
            api_status["successful_requests"] += 1
            return jsonify(
                {
                    "status": "loaded",
                    "models": ml_models.model_metrics,
                    "total_models": (
                        len(ml_models.models) if ml_models.models else 0
                    ),
                }
            )
        else:
            return jsonify(
                {"status": "not_loaded", "error": "–ú–æ–¥–µ–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã"}
            )
    except Exception as e:
        return jsonify({"status": "error", "error": str(e)})


@app.route("/api/predict/fraud-type", methods=["POST"])
def predict_fraud_type():
    """–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å —Ç–∏–ø –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞"""
    api_status["total_requests"] += 1

    try:
        data = request.get_json()

        if not data:
            return jsonify({"error": "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ"}), 400

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        required_fields = ["severity", "region", "amount"]
        for field in required_fields:
            if field not in data:
                return jsonify({"error": f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ: {field}"}), 400

        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        if ml_models:
            prediction = ml_models.predict_fraud_type(
                severity=data["severity"],
                region=data["region"],
                amount=data["amount"],
                source=data.get("source", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
            )

            api_status["successful_requests"] += 1
            return jsonify(prediction)
        else:
            return jsonify({"error": "ML –º–æ–¥–µ–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã"}), 500

    except Exception as e:
        return jsonify({"error": str(e)}), 500


@app.route("/api/predict/severity", methods=["POST"])
def predict_severity():
    """–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞"""
    api_status["total_requests"] += 1

    try:
        data = request.get_json()

        if not data:
            return jsonify({"error": "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ"}), 400

        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        fraud_type = data.get("fraud_type", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        amount = data.get("amount", 0)
        region = data.get("region", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏
        severity_map = {
            "—Ñ–∏—à–∏–Ω–≥": 2,
            "–±–∞–Ω–∫–æ–≤—Å–∫–æ–µ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ": 4,
            "–∫–∏–±–µ—Ä–º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ": 3,
            "—Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–µ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ": 1,
        }

        base_severity = severity_map.get(fraud_type, 2)

        if amount > 1000000:
            base_severity = min(base_severity + 1, 4)
        elif amount < 50000:
            base_severity = max(base_severity - 1, 1)

        if region == "–ú–æ—Å–∫–≤–∞":
            base_severity = min(base_severity + 1, 4)

        severity_names = {
            1: "–Ω–∏–∑–∫–∞—è",
            2: "—Å—Ä–µ–¥–Ω—è—è",
            3: "–≤—ã—Å–æ–∫–∞—è",
            4: "–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è",
        }

        api_status["successful_requests"] += 1
        return jsonify(
            {
                "predicted_severity": severity_names[base_severity],
                "severity_level": base_severity,
                "confidence": base_severity / 4,
            }
        )

    except Exception as e:
        return jsonify({"error": str(e)}), 500


@app.route("/api/analyze/region-risk")
def analyze_region_risk():
    """–ê–Ω–∞–ª–∏–∑ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–∏—Å–∫–∞"""
    api_status["total_requests"] += 1

    try:
        region = request.args.get("region", "–ú–æ—Å–∫–≤–∞")

        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        risk_factors = {
            "–ú–æ—Å–∫–≤–∞": {"score": 6.5, "level": "—Å—Ä–µ–¥–Ω–∏–π"},
            "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥": {"score": 5.2, "level": "—Å—Ä–µ–¥–Ω–∏–π"},
            "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥": {"score": 3.9, "level": "–Ω–∏–∑–∫–∏–π"},
            "–ö–∞–∑–∞–Ω—å": {"score": 3.2, "level": "–Ω–∏–∑–∫–∏–π"},
            "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫": {"score": 3.6, "level": "–Ω–∏–∑–∫–∏–π"},
        }

        risk_data = risk_factors.get(
            region, {"score": 5.0, "level": "–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω"}
        )

        api_status["successful_requests"] += 1
        return jsonify(
            {
                "region": region,
                "risk_score": risk_data["score"],
                "risk_level": risk_data["level"],
                "recommendations": [
                    "–£—Å–∏–ª–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π",
                    "–ü—Ä–æ–≤–µ—Å—Ç–∏ –æ–±—É—á–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
                    "–í–Ω–µ–¥—Ä–∏—Ç—å —Å–∏—Å—Ç–µ–º—ã —Ä–∞–Ω–Ω–µ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è",
                ],
            }
        )

    except Exception as e:
        return jsonify({"error": str(e)}), 500


@app.route("/api/data/collect")
def collect_data():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–±–æ—Ä –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    api_status["total_requests"] += 1

    try:
        if data_collector:
            # –ó–∞–ø—É—Å–∫ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            def collect_async():
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                loop.run_until_complete(
                    data_collector.collect_comprehensive_data()
                )

            thread = threading.Thread(target=collect_async)
            thread.start()

            api_status["successful_requests"] += 1
            return jsonify(
                {
                    "status": "started",
                    "message": "–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ",
                }
            )
        else:
            return jsonify({"error": "–°–±–æ—Ä—â–∏–∫ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"}), 500

    except Exception as e:
        return jsonify({"error": str(e)}), 500


@app.route("/api/models/retrain")
def retrain_models():
    """–ü–µ—Ä–µ–æ–±—É—á–∏—Ç—å ML –º–æ–¥–µ–ª–∏"""
    api_status["total_requests"] += 1

    try:
        if ml_models:
            # –ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
            ml_models.create_region_analyzer()
            ml_models.create_fraud_classifier()
            ml_models.create_severity_predictor()
            ml_models.save_models()

            api_status["successful_requests"] += 1
            return jsonify(
                {"status": "completed", "message": "–ú–æ–¥–µ–ª–∏ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω—ã"}
            )
        else:
            return jsonify({"error": "ML –º–æ–¥–µ–ª–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã"}), 500

    except Exception as e:
        return jsonify({"error": str(e)}), 500


@app.route("/api/auto-learning/start")
def start_auto_learning():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ 24/7"""
    api_status["total_requests"] += 1

    try:
        if auto_learning:
            auto_learning.start_auto_learning()

            api_status["successful_requests"] += 1
            return jsonify(
                {
                    "status": "started",
                    "message": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ",
                }
            )
        else:
            return (
                jsonify(
                    {
                        "error": "–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞"
                    }
                ),
                500,
            )

    except Exception as e:
        return jsonify({"error": str(e)}), 500


@app.route("/api/auto-learning/stop")
def stop_auto_learning():
    """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ"""
    api_status["total_requests"] += 1

    try:
        if auto_learning:
            auto_learning.stop_auto_learning()

            api_status["successful_requests"] += 1
            return jsonify(
                {
                    "status": "stopped",
                    "message": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ",
                }
            )
        else:
            return (
                jsonify(
                    {
                        "error": "–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞"
                    }
                ),
                500,
            )

    except Exception as e:
        return jsonify({"error": str(e)}), 500


@app.errorhandler(404)
def not_found(error):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ 404 –æ—à–∏–±–æ–∫"""
    return jsonify({"error": "Endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω"}), 404


@app.errorhandler(500)
def internal_error(error):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ 500 –æ—à–∏–±–æ–∫"""
    return jsonify({"error": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"}), 500


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ API —Å–µ—Ä–≤–µ—Ä–∞"""
    print("üöÄ –ó–ê–ü–£–°–ö FRAUD DETECTION API –°–ï–†–í–ï–†–ê")
    print("=" * 50)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API
    initialize_api()

    if api_status["is_running"]:
        print("‚úÖ API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        print("üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost:5000")
        print("üìä API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:5000/api/status")
        print(
            "ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ: http://localhost:5000/api/auto-learning/start"
        )
        print("\n‚è∞ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")

        # –ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞
        app.run(host="0.0.0.0", port=5000, debug=False, threaded=True)
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ API")


if __name__ == "__main__":
    main()
