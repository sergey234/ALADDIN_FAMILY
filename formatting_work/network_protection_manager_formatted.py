#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–ò–°–¢–ï–ú–ù–´–ô –ú–ï–ù–ï–î–ñ–ï–† –ó–ê–©–ò–¢–´ –°–ï–¢–ò - –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–∞ —É—Ä–æ–≤–Ω–µ —Å–∏—Å—Ç–µ–º—ã
–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –æ–±—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
"""

import json
import logging
import subprocess
from datetime import datetime
from pathlib import Path
from typing import Any, Dict, List, Optional

import psutil

logger = logging.getLogger(__name__)


class NetworkProtectionManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∏—Å—Ç–µ–º–Ω–æ–π –∑–∞—â–∏—Ç—ã —Å–µ—Ç–∏"""

    def __init__(self):
        self.blocked_domains = []
        self.blocked_ips = []
        self.blocked_ports = []
        self.vpn_ports = [1194, 443, 80, 53, 500, 4500, 1723, 8080, 3128, 1080]
        self.tor_ports = [9050, 9051, 9150, 9151]

    def block_vpn_globally(self) -> bool:
        """–ì–ª–æ–±–∞–ª—å–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ VPN –Ω–∞ —É—Ä–æ–≤–Ω–µ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ VPN –ø–æ—Ä—Ç–æ–≤ —á–µ—Ä–µ–∑ iptables
            for port in self.vpn_ports:
                subprocess.run(
                    [
                        "sudo",
                        "iptables",
                        "-A",
                        "OUTPUT",
                        "-p",
                        "tcp",
                        "--dport",
                        str(port),
                        "-j",
                        "DROP",
                    ],
                    check=False,
                )

                subprocess.run(
                    [
                        "sudo",
                        "iptables",
                        "-A",
                        "OUTPUT",
                        "-p",
                        "udp",
                        "--dport",
                        str(port),
                        "-j",
                        "DROP",
                    ],
                    check=False,
                )

            # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö VPN –¥–æ–º–µ–Ω–æ–≤ —á–µ—Ä–µ–∑ hosts
            vpn_domains = [
                "nordvpn.com",
                "expressvpn.com",
                "surfshark.com",
                "cyberghostvpn.com",
                "protonvpn.com",
                "windscribe.com",
            ]

            self._block_domains_in_hosts(vpn_domains)

            logger.info("üîí VPN –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–º —É—Ä–æ–≤–Ω–µ")
            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ VPN: {e}")
            return False

    def block_tor_globally(self) -> bool:
        """–ì–ª–æ–±–∞–ª—å–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ Tor"""
        try:
            # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ Tor –ø–æ—Ä—Ç–æ–≤
            for port in self.tor_ports:
                subprocess.run(
                    [
                        "sudo",
                        "iptables",
                        "-A",
                        "OUTPUT",
                        "-p",
                        "tcp",
                        "--dport",
                        str(port),
                        "-j",
                        "DROP",
                    ],
                    check=False,
                )

            # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ Tor –¥–æ–º–µ–Ω–æ–≤
            tor_domains = ["torproject.org", "tor-browser.org", "onion.com"]

            self._block_domains_in_hosts(tor_domains)

            logger.info("üîí Tor –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–º —É—Ä–æ–≤–Ω–µ")
            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ Tor: {e}")
            return False

    def block_proxy_globally(self) -> bool:
        """–ì–ª–æ–±–∞–ª—å–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ–∫—Å–∏"""
        try:
            # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ–∫—Å–∏ –ø–æ—Ä—Ç–æ–≤
            proxy_ports = [8080, 3128, 1080, 8118, 8888, 9999]
            for port in proxy_ports:
                subprocess.run(
                    [
                        "sudo",
                        "iptables",
                        "-A",
                        "OUTPUT",
                        "-p",
                        "tcp",
                        "--dport",
                        str(port),
                        "-j",
                        "DROP",
                    ],
                    check=False,
                )

            logger.info("üîí –ü—Ä–æ–∫—Å–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–º —É—Ä–æ–≤–Ω–µ")
            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø—Ä–æ–∫—Å–∏: {e}")
            return False

    def _block_domains_in_hosts(self, domains: List[str]) -> bool:
        """–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–æ–º–µ–Ω–æ–≤ —á–µ—Ä–µ–∑ —Ñ–∞–π–ª hosts"""
        try:
            hosts_file = Path("/etc/hosts")
            if not hosts_file.exists():
                return False

            # –ß—Ç–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ hosts —Ñ–∞–π–ª–∞
            with open(hosts_file, "r") as f:
                content = f.read()

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
            block_entries = []
            for domain in domains:
                block_entries.append(f"127.0.0.1 {domain}")
                block_entries.append(f"0.0.0.0 {domain}")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –ª–∏ —É–∂–µ
            new_entries = []
            for entry in block_entries:
                if entry not in content:
                    new_entries.append(entry)

            if new_entries:
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
                with open(hosts_file, "a") as f:
                    f.write("\n# ALADDIN Security - Blocked domains\n")
                    for entry in new_entries:
                        f.write(f"{entry}\n")

                logger.info(f"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –¥–æ–º–µ–Ω—ã: {domains}")

            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–æ–º–µ–Ω–æ–≤: {e}")
            return False

    def kill_suspicious_processes(self) -> bool:
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
        try:
            suspicious_keywords = [
                "tor",
                "vpn",
                "proxy",
                "tunnel",
                "stealth",
                "incognito",
            ]

            killed_processes = []
            for proc in psutil.process_iter(["pid", "name", "cmdline"]):
                try:
                    proc_name = proc.info["name"].lower()
                    cmdline = " ".join(proc.info["cmdline"] or []).lower()

                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
                    if any(
                        keyword in proc_name or keyword in cmdline
                        for keyword in suspicious_keywords
                    ):
                        proc.terminate()
                        killed_processes.append(proc_name)
                        logger.warning(
                            f"–ó–∞–≤–µ—Ä—à–µ–Ω –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å: {proc_name}"
                        )

                except (psutil.NoSuchProcess, psutil.AccessDenied):
                    continue

            return len(killed_processes) > 0

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}")
            return False

    def setup_dns_filtering(self) -> bool:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ DNS —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"""
        try:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ DNS —Å–µ—Ä–≤–µ—Ä–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
            dns_servers = [
                "1.1.1.3",  # Cloudflare —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
                "1.0.0.3",  # Cloudflare —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
                "208.67.222.123",  # OpenDNS
                "208.67.220.123",  # OpenDNS
            ]

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ DNS –Ω–∞—Å—Ç—Ä–æ–µ–∫ (—Ç—Ä–µ–±—É–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
            for dns in dns_servers:
                subprocess.run(
                    ["sudo", "networksetup", "-setdnsservers", "Wi-Fi", dns],
                    check=False,
                )

            logger.info("üîç DNS —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ DNS: {e}")
            return False

    def emergency_internet_lock(self) -> bool:
        """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞"""
        try:
            # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤—Å–µ—Ö –∏—Å—Ö–æ–¥—è—â–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            subprocess.run(
                ["sudo", "iptables", "-A", "OUTPUT", "-j", "DROP"], check=False
            )

            # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ DNS
            subprocess.run(
                [
                    "sudo",
                    "iptables",
                    "-A",
                    "OUTPUT",
                    "-p",
                    "udp",
                    "--dport",
                    "53",
                    "-j",
                    "DROP",
                ],
                check=False,
            )

            logger.critical("üö® –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –ë–õ–û–ö–ò–†–û–í–ö–ê –ò–ù–¢–ï–†–ù–ï–¢–ê –ê–ö–¢–ò–í–ù–ê")
            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {e}")
            return False

    def restore_internet(self) -> bool:
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞"""
        try:
            # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∞–≤–∏–ª iptables
            subprocess.run(["sudo", "iptables", "-F"], check=False)
            subprocess.run(["sudo", "iptables", "-X"], check=False)

            logger.info("‚úÖ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞: {e}")
            return False

    def get_protection_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—â–∏—Ç—ã"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª iptables
            result = subprocess.run(
                ["sudo", "iptables", "-L", "OUTPUT", "-n"],
                capture_output=True,
                text=True,
            )

            blocked_rules = result.stdout.count("DROP")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
            suspicious_count = 0
            for proc in psutil.process_iter(["name"]):
                try:
                    if any(
                        keyword in proc.info["name"].lower()
                        for keyword in ["tor", "vpn", "proxy"]
                    ):
                        suspicious_count += 1
                except (psutil.NoSuchProcess, psutil.AccessDenied):
                    continue

            return {
                "blocked_rules": blocked_rules,
                "suspicious_processes": suspicious_count,
                "protection_active": blocked_rules > 0,
                "timestamp": datetime.now().isoformat(),
            }

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return {}


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
def main():
    """–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è NetworkProtectionManager"""
    manager = NetworkProtectionManager()

    print("üõ°Ô∏è –°–ò–°–¢–ï–ú–ù–ê–Ø –ó–ê–©–ò–¢–ê –°–ï–¢–ò")
    print("=" * 50)

    # –ê–∫—Ç–∏–≤–∞—Ü–∏—è –≤—Å–µ—Ö –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
    print("üîí –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ VPN...")
    manager.block_vpn_globally()

    print("üîí –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ Tor...")
    manager.block_tor_globally()

    print("üîí –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ–∫—Å–∏...")
    manager.block_proxy_globally()

    print("üîç –ù–∞—Å—Ç—Ä–æ–π–∫–∞ DNS —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏...")
    manager.setup_dns_filtering()

    print("üîç –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...")
    manager.kill_suspicious_processes()

    # –°—Ç–∞—Ç—É—Å –∑–∞—â–∏—Ç—ã
    status = manager.get_protection_status()
    print(f"üìä –°—Ç–∞—Ç—É—Å –∑–∞—â–∏—Ç—ã: {json.dumps(status, indent=2)}")

    print("\n‚úÖ –°–ò–°–¢–ï–ú–ù–ê–Ø –ó–ê–©–ò–¢–ê –ê–ö–¢–ò–í–ù–ê")
    print("‚ö†Ô∏è –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π —Ä–∞–±–æ—Ç—ã")


if __name__ == "__main__":
    main()
