#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ Circuit Breaker Main
"""

import sys
import os
import asyncio
import time
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—é
sys.path.append('/Users/sergejhlystov/ALADDIN_NEW')

from security.ai_agents.circuit_breaker_main import (
    CircuitState,
    CircuitBreakerConfig,
    CircuitBreakerMain,
    circuit_breaker_main
)

def test_circuit_state_enhanced():
    """–¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ CircuitState"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ CircuitState...")
    
    # –¢–µ—Å—Ç __str__
    assert str(CircuitState.CLOSED) == "CircuitState.CLOSED"
    assert str(CircuitState.OPEN) == "CircuitState.OPEN"
    assert str(CircuitState.HALF_OPEN) == "CircuitState.HALF_OPEN"
    
    # –¢–µ—Å—Ç __repr__
    assert repr(CircuitState.CLOSED) == "CircuitState.CLOSED"
    
    # –¢–µ—Å—Ç __bool__
    assert bool(CircuitState.CLOSED) == True
    assert bool(CircuitState.OPEN) == False
    assert bool(CircuitState.HALF_OPEN) == True
    
    # –¢–µ—Å—Ç –Ω–æ–≤—ã—Ö –º–µ—Ç–æ–¥–æ–≤
    assert CircuitState.CLOSED.is_closed() == True
    assert CircuitState.OPEN.is_open() == True
    assert CircuitState.HALF_OPEN.is_half_open() == True
    
    assert CircuitState.CLOSED.can_accept_calls() == True
    assert CircuitState.OPEN.can_accept_calls() == False
    assert CircuitState.HALF_OPEN.can_accept_calls() == True
    
    # –¢–µ—Å—Ç –æ–ø–∏—Å–∞–Ω–∏–π
    assert "–Ω–æ—Ä–º–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞" in CircuitState.CLOSED.get_description()
    assert "–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤—ã–∑–æ–≤–æ–≤" in CircuitState.OPEN.get_description()
    assert "—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ" in CircuitState.HALF_OPEN.get_description()
    
    print("‚úÖ –£–ª—É—á—à–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã CircuitState —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

def test_circuit_breaker_config_enhanced():
    """–¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ CircuitBreakerConfig"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ CircuitBreakerConfig...")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = CircuitBreakerConfig(
        service_name="test_service",
        service_type="api",
        strategy="standard",
        failure_threshold=5,
        timeout=60
    )
    
    # –¢–µ—Å—Ç __str__
    str_repr = str(config)
    assert "test_service" in str_repr
    assert "api" in str_repr
    assert "standard" in str_repr
    
    # –¢–µ—Å—Ç __repr__
    repr_str = repr(config)
    assert "CircuitBreakerConfig" in repr_str
    assert "test_service" in repr_str
    
    # –¢–µ—Å—Ç __bool__
    assert bool(config) == True
    
    # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    assert config.validate() == True
    
    # –¢–µ—Å—Ç to_dict
    config_dict = config.to_dict()
    assert isinstance(config_dict, dict)
    assert config_dict["service_name"] == "test_service"
    assert config_dict["service_type"] == "api"
    
    # –¢–µ—Å—Ç from_dict
    new_config = CircuitBreakerConfig.from_dict(config_dict)
    assert new_config.service_name == config.service_name
    assert new_config.service_type == config.service_type
    
    # –¢–µ—Å—Ç __hash__
    config_hash = hash(config)
    assert isinstance(config_hash, int)
    
    # –¢–µ—Å—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    invalid_config = CircuitBreakerConfig(
        service_name="",
        service_type="api",
        strategy="standard",
        failure_threshold=5,
        timeout=60
    )
    assert bool(invalid_config) == False
    assert invalid_config.validate() == False
    
    print("‚úÖ –£–ª—É—á—à–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã CircuitBreakerConfig —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

def test_circuit_breaker_main_enhanced():
    """–¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ CircuitBreakerMain"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ CircuitBreakerMain...")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = CircuitBreakerConfig(
        service_name="test_service",
        service_type="api",
        strategy="standard",
        failure_threshold=3,
        timeout=30
    )
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä
    circuit_breaker = CircuitBreakerMain(config)
    
    # –¢–µ—Å—Ç __str__
    str_repr = str(circuit_breaker)
    assert "test_service" in str_repr
    assert "closed" in str_repr  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ, –∞ –Ω–µ –∏–º—è
    
    # –¢–µ—Å—Ç __repr__
    repr_str = repr(circuit_breaker)
    assert "CircuitBreakerMain" in repr_str
    assert "test_service" in repr_str
    
    # –¢–µ—Å—Ç __bool__
    assert bool(circuit_breaker) == True
    
    # –¢–µ—Å—Ç __len__
    assert len(circuit_breaker) == 0  # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ 0 –≤—ã–∑–æ–≤–æ–≤
    
    # –¢–µ—Å—Ç __iter__
    stats_items = list(circuit_breaker)
    assert isinstance(stats_items, list)
    assert len(stats_items) > 0
    
    # –¢–µ—Å—Ç __contains__
    assert "total_calls" in circuit_breaker
    assert "successful_calls" in circuit_breaker
    assert "nonexistent" not in circuit_breaker
    
    # –¢–µ—Å—Ç __getitem__ –∏ __setitem__
    circuit_breaker["test_key"] = "test_value"
    assert circuit_breaker["test_key"] == "test_value"
    
    # –¢–µ—Å—Ç __delitem__
    del circuit_breaker["test_key"]
    assert "test_key" not in circuit_breaker
    
    # –¢–µ—Å—Ç __eq__
    same_config = CircuitBreakerConfig(
        service_name="test_service",
        service_type="api",
        strategy="standard",
        failure_threshold=3,
        timeout=30
    )
    same_circuit_breaker = CircuitBreakerMain(same_config)
    assert circuit_breaker == same_circuit_breaker
    
    # –¢–µ—Å—Ç __hash__
    circuit_breaker_hash = hash(circuit_breaker)
    assert isinstance(circuit_breaker_hash, int)
    
    print("‚úÖ –£–ª—É—á—à–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã CircuitBreakerMain —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

def test_context_manager():
    """–¢–µ—Å—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞...")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = CircuitBreakerConfig(
        service_name="test_service",
        service_type="api",
        strategy="standard",
        failure_threshold=3,
        timeout=30
    )
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä
    circuit_breaker = CircuitBreakerMain(config)
    
    # –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    with circuit_breaker as cb:
        assert cb == circuit_breaker
        result = cb.call(lambda x, y: x + y, 5, 3)
        assert result == 8
    
    # –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    try:
        with circuit_breaker as cb:
            def failing_func():
                raise Exception("Test error")
            cb.call(failing_func)
    except Exception as e:
        assert str(e) == "Test error"
    
    print("‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

def test_enhanced_functionality():
    """–¢–µ—Å—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏...")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = CircuitBreakerConfig(
        service_name="test_service",
        service_type="api",
        strategy="standard",
        failure_threshold=2,
        timeout=1
    )
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä
    circuit_breaker = CircuitBreakerMain(config)
    
    # –¢–µ—Å—Ç –∏—Ç–µ—Ä–∞—Ü–∏–∏ –ø–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
    for key, value in circuit_breaker:
        assert isinstance(key, str)
        assert isinstance(value, (int, float))
    
    # –¢–µ—Å—Ç —Å–ª–æ–≤–∞—Ä–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
    circuit_breaker["custom_metric"] = 100
    assert circuit_breaker["custom_metric"] == 100
    
    # –¢–µ—Å—Ç –±—É–ª–µ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
    assert bool(circuit_breaker) == True
    
    # –¢–µ—Å—Ç –¥–ª–∏–Ω—ã (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–∑–æ–≤–æ–≤)
    assert len(circuit_breaker) == 0
    
    # –î–µ–ª–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤—ã–∑–æ–≤–æ–≤
    circuit_breaker.call(lambda: "success")
    circuit_breaker.call(lambda: "success")
    
    assert len(circuit_breaker) == 2
    
    print("‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

def run_enhanced_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —É–ª—É—á—à–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ –ó–ê–ü–£–°–ö –£–õ–£–ß–®–ï–ù–ù–´–• –¢–ï–°–¢–û–í CIRCUIT BREAKER MAIN")
    print("=" * 60)
    
    try:
        test_circuit_state_enhanced()
        test_circuit_breaker_config_enhanced()
        test_circuit_breaker_main_enhanced()
        test_context_manager()
        test_enhanced_functionality()
        
        print("\nüéâ –í–°–ï –£–õ–£–ß–®–ï–ù–ù–´–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("‚úÖ Circuit Breaker Main —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ–Ω")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –í –£–õ–£–ß–®–ï–ù–ù–´–• –¢–ï–°–¢–ê–•: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = run_enhanced_tests()
    
    if success:
        print("\nüèÜ –í–°–ï –£–õ–£–ß–®–ï–ù–ò–Ø –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
        print("‚úÖ Circuit Breaker Main –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏")
    else:
        print("\nüí• –ù–ï–ö–û–¢–û–†–´–ï –£–õ–£–ß–®–ï–ù–ò–Ø –ù–ï –†–ê–ë–û–¢–ê–Æ–¢!")
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")