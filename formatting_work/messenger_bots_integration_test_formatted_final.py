#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä –±–æ—Ç–æ–≤
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä –±–æ—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
"""

import asyncio
import json
import logging
import time
from datetime import datetime

from .analytics_bot import AnalyticsBot
from .instagram_security_bot import InstagramSecurityBot
from .max_messenger_security_bot import MaxMessengerSecurityBot
from .telegram_security_bot import TelegramSecurityBot
from .website_navigation_bot import WebsiteNavigationBot

# –ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä –±–æ—Ç–æ–≤
from .whatsapp_security_bot import WhatsAppSecurityBot

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class MessengerBotsIntegrationTest:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä –±–æ—Ç–æ–≤"""

    def __init__(self):
        self.bots = {}
        self.test_results = {}
        self.start_time = None
        self.end_time = None

    async def setup_bots(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –±–æ—Ç–æ–≤"""
        print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä –±–æ—Ç–æ–≤...")

        # –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –±–æ—Ç–æ–≤
        self.bots = {
            "whatsapp": WhatsAppSecurityBot("TestWhatsAppBot"),
            "telegram": TelegramSecurityBot("TestTelegramBot"),
            "instagram": InstagramSecurityBot("TestInstagramBot"),
            "max_messenger": MaxMessengerSecurityBot("TestMaxBot"),
            "analytics": AnalyticsBot("TestAnalyticsBot"),
            "website_navigation": WebsiteNavigationBot("TestWebsiteBot"),
        }

        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(self.bots)} –±–æ—Ç–æ–≤")

    async def start_all_bots(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –±–æ—Ç–æ–≤"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä –±–æ—Ç–æ–≤...")

        started_bots = 0
        for name, bot in self.bots.items():
            try:
                success = await bot.start()
                if success:
                    started_bots += 1
                    print(f"‚úÖ {name}: –ó–∞–ø—É—â–µ–Ω")
                else:
                    print(f"‚ùå {name}: –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞")
            except Exception as e:
                print(f"‚ùå {name}: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ - {e}")

        print(f"üìä –ó–∞–ø—É—â–µ–Ω–æ –±–æ—Ç–æ–≤: {started_bots}/{len(self.bots)}")
        return started_bots == len(self.bots)

    async def test_individual_functionality(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–∞–∂–¥–æ–≥–æ –±–æ—Ç–∞"""
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏...")

        for name, bot in self.bots.items():
            print(f"\n--- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {name} ---")
            try:
                # –¢–µ—Å—Ç —Å—Ç–∞—Ç—É—Å–∞
                status = await bot.get_status()
                print(f"‚úÖ –°—Ç–∞—Ç—É—Å: {status.get('status', 'unknown')}")

                # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–æ—Ç–∞
                if name == "whatsapp":
                    await self._test_whatsapp_bot(bot)
                elif name == "telegram":
                    await self._test_telegram_bot(bot)
                elif name == "instagram":
                    await self._test_instagram_bot(bot)
                elif name == "max_messenger":
                    await self._test_max_messenger_bot(bot)
                elif name == "analytics":
                    await self._test_analytics_bot(bot)
                elif name == "website_navigation":
                    await self._test_website_navigation_bot(bot)

                self.test_results[name] = {"status": "success", "error": None}

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è {name}: {e}")
                self.test_results[name] = {"status": "error", "error": str(e)}

    async def _test_whatsapp_bot(self, bot):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ WhatsApp –±–æ—Ç–∞"""
        # –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        message_data = {
            "id": "msg_123",
            "content": "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
            "type": "text",
            "sender_id": "user123",
        }

        result = await bot.analyze_message(message_data)
        print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è: {result.threat_level.value}")

        # –¢–µ—Å—Ç –æ—Ç—á–µ—Ç–∞ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        report = await bot.get_security_report()
        print(f"‚úÖ –û—Ç—á–µ—Ç: {report.get('total_messages', 0)} —Å–æ–æ–±—â–µ–Ω–∏–π")

    async def _test_telegram_bot(self, bot):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram –±–æ—Ç–∞"""
        # –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        message_data = {
            "message_id": 12345,
            "text": "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram",
            "type": "text",
            "chat": {"id": -1001234567890, "type": "group"},
            "from": {
                "id": 123456789,
                "username": "test_user",
                "is_bot": False,
            },
        }

        result = await bot.analyze_message(message_data)
        print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è: {result.threat_level.value}")

        # –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        chat_added = await bot.add_chat_to_monitoring(
            chat_id="-1001234567890", chat_type="group", title="Test Group"
        )
        print(f"‚úÖ –ß–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {chat_added}")

    async def _test_instagram_bot(self, bot):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Instagram –±–æ—Ç–∞"""
        # –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        content_data = {
            "id": "post_123",
            "type": "post",
            "caption": "–ö—Ä–∞—Å–∏–≤—ã–π –∑–∞–∫–∞—Ç! #sunset #nature",
            "media_url": "https://example.com/image.jpg",
            "media_type": "image",
            "user": {
                "id": "user123",
                "username": "test_user",
                "account_type": "personal",
                "is_verified": False,
                "is_private": False,
                "followers_count": 1000,
                "following_count": 500,
                "posts_count": 50,
            },
        }

        result = await bot.analyze_content(content_data)
        print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {result.threat_level.value}")

        # –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        account_added = await bot.add_account_to_monitoring(
            content_data["user"]
        )
        print(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {account_added}")

    async def _test_max_messenger_bot(self, bot):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MAX –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä –±–æ—Ç–∞"""
        # –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        message_data = {
            "message_id": "msg_123",
            "text": "–°–æ–æ–±—â–µ–Ω–∏–µ –≤ MAX –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–µ",
            "type": "text",
            "chat": {"id": "-1001234567890", "type": "group"},
            "from": {
                "id": "123456789",
                "username": "test_user",
                "is_bot": False,
            },
        }

        result = await bot.analyze_message(message_data)
        print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è: {result.threat_level.value}")

        # –¢–µ—Å—Ç —Å–µ—Å—Å–∏–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        session_id = await bot.start_navigation_session("user123")
        print(f"‚úÖ –°–µ—Å—Å–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: {session_id}")

        if session_id:
            await bot.end_navigation_session(session_id)
            print("‚úÖ –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    async def _test_analytics_bot(self, bot):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Analytics –±–æ—Ç–∞"""
        # –¢–µ—Å—Ç —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫
        await bot.collect_metric(
            "test_metric", 0.75, bot.MetricType.GAUGE, {"component": "test"}
        )
        print("‚úÖ –ú–µ—Ç—Ä–∏–∫–∞ —Å–æ–±—Ä–∞–Ω–∞")

        # –¢–µ—Å—Ç –¥–µ—Ç–µ–∫—Ü–∏–∏ –∞–Ω–æ–º–∞–ª–∏–π
        anomaly_result = await bot.detect_anomaly(
            "test_metric",
            [0.5, 0.6, 0.7, 0.8, 0.9, 0.95, 0.98, 0.99, 1.0, 1.1],
        )
        print(f"‚úÖ –ê–Ω–æ–º–∞–ª–∏—è –¥–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞: {anomaly_result.is_anomaly}")

        # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞
        report = await bot.generate_report(
            "Test Report",
            bot.ReportType.DAILY,
            datetime.utcnow(),
            datetime.utcnow(),
        )
        print(
            f"‚úÖ –û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {report.get('total_metrics', 0)} –º–µ—Ç—Ä–∏–∫"
        )

    async def _test_website_navigation_bot(self, bot):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Website Navigation –±–æ—Ç–∞"""
        # –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –≤–µ–±-—Å–∞–π—Ç–∞
        result = await bot.analyze_website("https://example.com", "user123")
        print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ —Å–∞–π—Ç–∞: {result.threat_level.value}")

        # –¢–µ—Å—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–æ–º–µ–Ω–∞
        blocked = await bot.block_domain(
            "malware.com", "malware", "Test malware site"
        )
        print(f"‚úÖ –î–æ–º–µ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {blocked}")

        # –¢–µ—Å—Ç —Å–µ—Å—Å–∏–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        session_id = await bot.start_navigation_session("user123")
        print(f"‚úÖ –°–µ—Å—Å–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: {session_id}")

        if session_id:
            await bot.end_navigation_session(session_id)
            print("‚úÖ –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    async def test_inter_bot_communication(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–∂–±–æ—Ç–æ–≤–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è"""
        print("\nüîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–∂–±–æ—Ç–æ–≤–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è...")

        try:
            # –¢–µ—Å—Ç –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –±–æ—Ç–∞–º–∏
            if "analytics" in self.bots and "whatsapp" in self.bots:
                # Analytics –±–æ—Ç —Å–æ–±–∏—Ä–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –æ—Ç WhatsApp –±–æ—Ç–∞
                await self.bots["analytics"].collect_metric(
                    "whatsapp_messages_analyzed",
                    self.bots["whatsapp"].stats.get("analyzed_messages", 0),
                    self.bots["analytics"].MetricType.COUNTER,
                    {"bot": "whatsapp"},
                )
                print("‚úÖ –ú–µ–∂–±–æ—Ç–æ–≤–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ –º–µ—Ç—Ä–∏–∫: Analytics ‚Üê WhatsApp")

            # –¢–µ—Å—Ç –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            total_bots = len(self.bots)
            active_bots = sum(1 for bot in self.bots.values() if bot.running)
            print(
                f"‚úÖ –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {active_bots}/{total_bots} –±–æ—Ç–æ–≤ –∞–∫—Ç–∏–≤–Ω—ã"
            )

            self.test_results["inter_bot_communication"] = {
                "status": "success",
                "error": None,
            }

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –º–µ–∂–±–æ—Ç–æ–≤–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è: {e}")
            self.test_results["inter_bot_communication"] = {
                "status": "error",
                "error": str(e),
            }

    async def test_performance(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        print("\n‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")

        try:
            start_time = time.time()

            # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π
            tasks = []
            for name, bot in self.bots.items():
                if hasattr(bot, "get_status"):
                    tasks.append(bot.get_status())

            results = await asyncio.gather(*tasks, return_exceptions=True)

            end_time = time.time()
            execution_time = end_time - start_time

            print(f"‚úÖ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time:.2f} —Å–µ–∫—É–Ω–¥")
            print(
                f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: "
                f"{len([r for r in results if not isinstance(r, Exception)])}"
                f"/{len(results)}"
            )

            self.test_results["performance"] = {
                "status": "success",
                "execution_time": execution_time,
                "successful_operations": len(
                    [r for r in results if not isinstance(r, Exception)]
                ),
                "total_operations": len(results),
            }

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
            self.test_results["performance"] = {
                "status": "error",
                "error": str(e),
            }

    async def stop_all_bots(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –±–æ—Ç–æ–≤"""
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä –±–æ—Ç–æ–≤...")

        stopped_bots = 0
        for name, bot in self.bots.items():
            try:
                success = await bot.stop()
                if success:
                    stopped_bots += 1
                    print(f"‚úÖ {name}: –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                else:
                    print(f"‚ùå {name}: –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
            except Exception as e:
                print(f"‚ùå {name}: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ - {e}")

        print(f"üìä –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –±–æ—Ç–æ–≤: {stopped_bots}/{len(self.bots)}")
        return stopped_bots == len(self.bots)

    def generate_test_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        print("\nüìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏...")

        total_tests = len(self.test_results)
        successful_tests = len(
            [r for r in self.test_results.values() if r["status"] == "success"]
        )
        failed_tests = total_tests - successful_tests

        success_rate = (
            (successful_tests / total_tests * 100) if total_tests > 0 else 0
        )

        report = {
            "test_summary": {
                "total_tests": total_tests,
                "successful_tests": successful_tests,
                "failed_tests": failed_tests,
                "success_rate": success_rate,
                "start_time": (
                    self.start_time.isoformat() if self.start_time else None
                ),
                "end_time": (
                    self.end_time.isoformat() if self.end_time else None
                ),
                "duration": (
                    (self.end_time - self.start_time).total_seconds()
                    if self.start_time and self.end_time
                    else None
                ),
            },
            "test_results": self.test_results,
            "recommendations": self._generate_recommendations(),
        }

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        with open(
            "messenger_bots_test_report.json", "w", encoding="utf-8"
        ) as f:
            json.dump(report, f, indent=2, ensure_ascii=False)

        print("‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: messenger_bots_test_report.json")
        print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {success_rate:.1f}%")

        return report

    def _generate_recommendations(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        recommendations = []

        failed_tests = [
            name
            for name, result in self.test_results.items()
            if result["status"] == "error"
        ]

        if failed_tests:
            recommendations.append(
                f"–ò—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏ –≤ –±–æ—Ç–∞—Ö: {', '.join(failed_tests)}"
            )

        if (
            "performance" in self.test_results
            and self.test_results["performance"]["status"] == "success"
        ):
            exec_time = self.test_results["performance"]["execution_time"]
            if exec_time > 5.0:
                recommendations.append(
                    "–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å - "
                    "–≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–µ–≤—ã—à–∞–µ—Ç 5 —Å–µ–∫—É–Ω–¥"
                )

        if not recommendations:
            recommendations.append(
                "–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ - —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É"
            )

        return recommendations

    async def run_full_test(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print(
            "üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä –±–æ—Ç–æ–≤"
        )
        print("=" * 70)

        self.start_time = datetime.utcnow()

        try:
            # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–æ–≤
            await self.setup_bots()

            # 2. –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –±–æ—Ç–æ–≤
            bots_started = await self.start_all_bots()
            if not bots_started:
                print("‚ùå –ù–µ –≤—Å–µ –±–æ—Ç—ã –∑–∞–ø—É—Å—Ç–∏–ª–∏—Å—å - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ")
                return False

            # 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
            await self.test_individual_functionality()

            # 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–∂–±–æ—Ç–æ–≤–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
            await self.test_inter_bot_communication()

            # 5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            await self.test_performance()

            # 6. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –±–æ—Ç–æ–≤
            await self.stop_all_bots()

            self.end_time = datetime.utcnow()

            # 7. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
            report = self.generate_test_report()

            print("\n" + "=" * 70)
            print("üéâ –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
            print(
                f"üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {report['test_summary']['success_rate']:.1f}%"
            )
            print(
                f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: "
                f"{report['test_summary']['duration']:.2f} —Å–µ–∫—É–Ω–¥"
            )
            print("=" * 70)

            return report["test_summary"]["success_rate"] >= 80.0

        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return False


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    test_suite = MessengerBotsIntegrationTest()
    success = await test_suite.run_full_test()

    if success:
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        return 0
    else:
        print("\n‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏!")
        return 1


if __name__ == "__main__":
    exit_code = asyncio.run(main())
    exit(exit_code)
