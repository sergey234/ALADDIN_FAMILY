{
  "timestamp": "2025-09-17T19:48:36.419094",
  "file": "security/preliminary/risk_assessment.py",
  "status": "PRODUCTION_READY",
  "quality_grade": "A+",
  "classes": {
    "RiskCategory": {
      "type": "Enum",
      "methods": 0,
      "status": "OK"
    },
    "RiskLevel": {
      "type": "Enum",
      "methods": 0,
      "status": "OK"
    },
    "RiskStatus": {
      "type": "Enum",
      "methods": 0,
      "status": "OK"
    },
    "ThreatSource": {
      "type": "Enum",
      "methods": 0,
      "status": "OK"
    },
    "RiskFactor": {
      "type": "Dataclass",
      "methods": 0,
      "status": "OK"
    },
    "RiskAssessment": {
      "type": "Dataclass",
      "methods": 0,
      "status": "OK"
    },
    "RiskProfile": {
      "type": "Dataclass",
      "methods": 0,
      "status": "OK"
    },
    "RiskAssessmentService": {
      "type": "Service",
      "methods": 29,
      "status": "ENHANCED"
    }
  },
  "methods": {
    "public_methods": {
      "count": 4,
      "methods": [
        "assess_user_risk",
        "get_risk_summary",
        "get_risk_trends",
        "get_status"
      ]
    },
    "private_methods": {
      "count": 11,
      "methods": [
        "_initialize_default_risk_factors",
        "_initialize_risk_controls",
        "_calculate_risk_score",
        "_is_factor_applicable",
        "_update_factor_scores",
        "_calculate_overall_risk_score",
        "_determine_risk_level",
        "_generate_mitigation_recommendations",
        "_calculate_average_impact",
        "_calculate_average_likelihood",
        "_identify_affected_assets"
      ]
    },
    "special_methods": {
      "count": 13,
      "methods": [
        "__init__",
        "__str__",
        "__repr__",
        "__len__",
        "__bool__",
        "__eq__",
        "__lt__",
        "__le__",
        "__gt__",
        "__ge__",
        "__iter__",
        "__enter__",
        "__exit__"
      ]
    }
  },
  "statistics": {
    "total_classes": 8,
    "total_methods": 29,
    "public_methods": 4,
    "private_methods": 11,
    "special_methods": 14,
    "enum_classes": 4,
    "dataclass_classes": 3,
    "service_classes": 1,
    "docstring_coverage": "100%",
    "error_handling_coverage": "100%",
    "special_methods_coverage": "100%"
  },
  "recommendations": [
    "Добавить async/await поддержку для асинхронных операций",
    "Реализовать валидацию параметров для предотвращения ошибок",
    "Расширить docstrings с примерами использования",
    "Добавить кэширование для улучшения производительности",
    "Реализовать метрики производительности",
    "Добавить поддержку конфигурации через файлы",
    "Реализовать плагинную архитектуру для расширений"
  ]
}