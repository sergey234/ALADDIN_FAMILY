#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–µ—Ç–æ–¥–æ–≤ –∏ –∫–ª–∞—Å—Å–æ–≤ - encryption_manager.py
–í–µ—Ä—Å–∏—è: 2.5
–î–∞—Ç–∞: 2025-09-24
"""

import asyncio
import logging
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º ALADDIN_NEW
sys.path.append(str(Path(__file__).resolve().parents[2]))

from security.bots.components.encryption_manager import (
    EncryptionManager,
    EncryptionAlgorithm,
    KeyDerivation,
    EncryptionKey,
    EncryptedData,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class TestEncryptionManagerAccessibility:
    """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–µ—Ç–æ–¥–æ–≤ –∏ –∫–ª–∞—Å—Å–æ–≤"""

    def __init__(self):
        self.logger = logger
        self.manager = None
        self.test_results = []

    async def test_class_instantiation(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –∫–ª–∞—Å—Å–æ–≤"""
        self.logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –∫–ª–∞—Å—Å–æ–≤...")
        
        try:
            # 1. EncryptionManager
            self.manager = EncryptionManager(self.logger)
            assert self.manager is not None
            self.logger.info("‚úÖ EncryptionManager —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            
            # 2. EncryptionAlgorithm (Enum)
            aes_algorithm = EncryptionAlgorithm.AES_256_GCM
            assert aes_algorithm is not None
            self.logger.info("‚úÖ EncryptionAlgorithm —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            
            # 3. KeyDerivation (Enum)
            pbkdf2_method = KeyDerivation.PBKDF2
            assert pbkdf2_method is not None
            self.logger.info("‚úÖ KeyDerivation —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            
            # 4. EncryptionKey (Dataclass)
            from datetime import datetime
            key = EncryptionKey(
                key_id="test_key_1",
                algorithm=EncryptionAlgorithm.AES_256_GCM,
                key_data=b"test_key_data",
                created_at=datetime.now()
            )
            assert key is not None
            self.logger.info("‚úÖ EncryptionKey —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            
            # 5. EncryptedData (Dataclass)
            encrypted_data = EncryptedData(
                data=b"encrypted_data",
                key_id="test_key_1",
                algorithm=EncryptionAlgorithm.AES_256_GCM
            )
            assert encrypted_data is not None
            self.logger.info("‚úÖ EncryptedData —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            
            self.test_results.append(("–°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –∫–ª–∞—Å—Å–æ–≤", True))
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤: {e}")
            self.test_results.append(("–°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –∫–ª–∞—Å—Å–æ–≤", False))
            return False

    async def test_public_methods_accessibility(self):
        """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ public –º–µ—Ç–æ–¥–æ–≤"""
        self.logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ public –º–µ—Ç–æ–¥–æ–≤...")
        
        if not self.manager:
            self.logger.error("‚ùå EncryptionManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return False
            
        try:
            # –°–ø–∏—Å–æ–∫ public –º–µ—Ç–æ–¥–æ–≤
            public_methods = [
                'encrypt_data',
                'decrypt_data', 
                'encrypt_sensitive_field',
                'decrypt_sensitive_field',
                'hash_password',
                'verify_password',
                'encrypt_file',
                'decrypt_file',
                'get_encryption_stats',
                'cleanup_expired_keys',
                'export_key',
                'import_key'
            ]
            
            for method_name in public_methods:
                if hasattr(self.manager, method_name):
                    method = getattr(self.manager, method_name)
                    assert callable(method)
                    self.logger.info(f"‚úÖ –ú–µ—Ç–æ–¥ {method_name} –¥–æ—Å—Ç—É–ø–µ–Ω –∏ –≤—ã–∑—ã–≤–∞–µ–º")
                else:
                    self.logger.error(f"‚ùå –ú–µ—Ç–æ–¥ {method_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    self.test_results.append((f"–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å {method_name}", False))
                    return False
            
            self.test_results.append(("–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å public –º–µ—Ç–æ–¥–æ–≤", True))
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ public –º–µ—Ç–æ–¥–æ–≤: {e}")
            self.test_results.append(("–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å public –º–µ—Ç–æ–¥–æ–≤", False))
            return False

    async def test_method_calls_with_correct_parameters(self):
        """–¢–µ—Å—Ç –≤—ã–∑–æ–≤–∞ –º–µ—Ç–æ–¥–æ–≤ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
        self.logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–∑–æ–≤–∞ –º–µ—Ç–æ–¥–æ–≤ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏...")
        
        if not self.manager:
            self.logger.error("‚ùå EncryptionManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return False
            
        try:
            # –¢–µ—Å—Ç encrypt_data
            test_data = {"user": "test", "password": "secret"}
            encrypted = await self.manager.encrypt_data(test_data)
            assert encrypted is not None
            assert hasattr(encrypted, 'data')
            assert hasattr(encrypted, 'key_id')
            assert hasattr(encrypted, 'algorithm')
            self.logger.info("‚úÖ encrypt_data —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            
            # –¢–µ—Å—Ç decrypt_data
            decrypted = await self.manager.decrypt_data(encrypted)
            assert decrypted == test_data
            self.logger.info("‚úÖ decrypt_data —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            
            # –¢–µ—Å—Ç hash_password
            password = "test_password"
            salt = b"test_salt"
            hashed, returned_salt = self.manager.hash_password(password, salt)
            assert isinstance(hashed, str)
            assert len(hashed) > 0
            assert isinstance(returned_salt, bytes)
            self.logger.info("‚úÖ hash_password —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            
            # –¢–µ—Å—Ç verify_password
            is_valid = self.manager.verify_password(password, hashed, returned_salt)
            assert is_valid is True
            self.logger.info("‚úÖ verify_password —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            
            # –¢–µ—Å—Ç get_encryption_stats
            try:
                stats = self.manager.get_encryption_stats()
                assert isinstance(stats, dict)
                assert "total_keys" in stats
                assert "active_key_id" in stats
                self.logger.info("‚úÖ get_encryption_stats —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ get_encryption_stats: {e}")
                raise
            
            self.test_results.append(("–í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–æ–≤ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏", True))
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ –º–µ—Ç–æ–¥–æ–≤: {e}")
            self.test_results.append(("–í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–æ–≤ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏", False))
            return False

    async def test_exception_handling(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –≤ –º–µ—Ç–æ–¥–∞—Ö"""
        self.logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π...")
        
        if not self.manager:
            self.logger.error("‚ùå EncryptionManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return False
            
        try:
            # –¢–µ—Å—Ç —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            try:
                await self.manager.encrypt_data(None)
                self.logger.error("‚ùå –û–∂–∏–¥–∞–ª–æ—Å—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è None")
                return False
            except Exception:
                self.logger.info("‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è None")
            
            # –¢–µ—Å—Ç —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º EncryptedData
            try:
                invalid_encrypted = EncryptedData(
                    data=b"invalid",
                    key_id="nonexistent_key",
                    algorithm=EncryptionAlgorithm.AES_256_GCM
                )
                await self.manager.decrypt_data(invalid_encrypted)
                self.logger.error("‚ùå –û–∂–∏–¥–∞–ª–æ—Å—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª—é—á–∞")
                return False
            except Exception:
                self.logger.info("‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª—é—á–∞")
            
            # –¢–µ—Å—Ç —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º
            try:
                result = self.manager.verify_password("wrong_password", "invalid_hash")
                # verify_password –º–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å False –≤–º–µ—Å—Ç–æ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
                if result is False:
                    self.logger.info("‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å (–≤–æ–∑–≤—Ä–∞—Ç False)")
                else:
                    self.logger.error("‚ùå –û–∂–∏–¥–∞–ª–æ—Å—å False –¥–ª—è –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è")
                    return False
            except Exception:
                self.logger.info("‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è")
            
            self.test_results.append(("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π", True))
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–∫–ª—é—á–µ–Ω–∏–π: {e}")
            self.test_results.append(("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π", False))
            return False

    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏"""
        self.logger.info("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í –î–û–°–¢–£–ü–ù–û–°–¢–ò –ú–ï–¢–û–î–û–í –ò –ö–õ–ê–°–°–û–í")
        self.logger.info("============================================================")
        
        results = []
        results.append(await self.test_class_instantiation())
        results.append(await self.test_public_methods_accessibility())
        results.append(await self.test_method_calls_with_correct_parameters())
        results.append(await self.test_exception_handling())
        
        self.logger.info("============================================================")
        passed_tests = sum(1 for r in results if r)
        total_tests = len(results)
        
        self.logger.info(f"üìà –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.logger.info("üìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        for test_name, result in self.test_results:
            status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
            self.logger.info(f"  {test_name}: {status}")
        
        if all(results):
            self.logger.info("üéâ –í–°–ï –¢–ï–°–¢–´ –î–û–°–¢–£–ü–ù–û–°–¢–ò –ü–†–û–ô–î–ï–ù–´!")
            return True
        else:
            self.logger.error("‚ùå –ï–°–¢–¨ –û–®–ò–ë–ö–ò –í –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò –î–û–°–¢–£–ü–ù–û–°–¢–ò!")
            return False


if __name__ == "__main__":
    logger.info("‚úÖ –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π —É—Å–ø–µ—à–µ–Ω")
    tester = TestEncryptionManagerAccessibility()
    asyncio.run(tester.run_all_tests())