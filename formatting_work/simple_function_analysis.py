#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ —Ñ—É–Ω–∫—Ü–∏–π password_security_agent.py
"""

import ast
import sys
sys.path.append('.')

def analyze_functions():
    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    with open('security/ai_agents/password_security_agent.py', 'r', encoding='utf-8') as f:
        content = f.read()

    # –ü–∞—Ä—Å–∏–º AST
    tree = ast.parse(content)

    print('üîç –ê–ù–ê–õ–ò–ó –§–£–ù–ö–¶–ò–ô (–ù–ï –ö–õ–ê–°–°–û–í)')
    print('=' * 50)

    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏
    all_functions = []
    for node in ast.walk(tree):
        if isinstance(node, ast.FunctionDef):
            all_functions.append(node)

    print(f'–í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π –≤ —Ñ–∞–π–ª–µ: {len(all_functions)}')
    
    # –§—É–Ω–∫—Ü–∏–∏ –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ (–Ω–µ –≤ –∫–ª–∞—Å—Å–∞—Ö)
    top_level_functions = []
    for func in all_functions:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –≤ –∫–ª–∞—Å—Å–µ
        in_class = False
        for node in ast.walk(tree):
            if isinstance(node, ast.ClassDef):
                if func in node.body:
                    in_class = True
                    break
        
        if not in_class:
            top_level_functions.append(func)

    if top_level_functions:
        print(f'\\n–§—É–Ω–∫—Ü–∏–π –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ: {len(top_level_functions)}')
        for func in top_level_functions:
            args = [arg.arg for arg in func.args.args]
            has_docstring = ast.get_docstring(func) is not None
            doc_str = 'üìù' if has_docstring else '‚ùå'
            args_str = f'({", ".join(args)})' if args else '()'
            print(f'  ‚Ä¢ {func.name}{args_str} {doc_str}')
    else:
        print('\\n–§—É–Ω–∫—Ü–∏–π –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')

    print(f'\\nüìä –í–°–ï –§–£–ù–ö–¶–ò–ò –í –§–ê–ô–õ–ï:')
    for i, func in enumerate(all_functions[:15]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 15
        args = [arg.arg for arg in func.args.args]
        has_docstring = ast.get_docstring(func) is not None
        doc_str = 'üìù' if has_docstring else '‚ùå'
        args_str = f'({", ".join(args)})' if args else '()'
        print(f'  {i+1:2d}. {func.name}{args_str} {doc_str}')
    
    if len(all_functions) > 15:
        print(f'  ... –∏ –µ—â–µ {len(all_functions) - 15} —Ñ—É–Ω–∫—Ü–∏–π')

if __name__ == '__main__':
    analyze_functions()