#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤ –∏ –º–µ—Ç–æ–¥–æ–≤ incident_response.py
"""

import sys
import os
import asyncio
import tempfile
import json
sys.path.append('/Users/sergejhlystov/ALADDIN_NEW')

from security.incident_response import (
    IncidentResponseManager, Incident, IncidentType, 
    IncidentPriority, IncidentStatus, SecurityLevel,
    IncidentResponseError, IncidentNotFoundError, 
    InvalidIncidentDataError, IncidentLimitExceededError,
    IncidentValidationError
)
from datetime import datetime

def test_all_classes_and_methods():
    """–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤ –∏ –º–µ—Ç–æ–¥–æ–≤"""
    print("üß™ –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –¢–ï–°–¢ –í–°–ï–• –ö–û–ú–ü–û–ù–ï–ù–¢–û–í")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    manager = IncidentResponseManager("ComprehensiveTest")
    
    # ==================== –¢–ï–°–¢ 1: –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ====================
    print("\n1Ô∏è‚É£ –¢–ï–°–¢ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò –ò –ó–ê–ü–£–°–ö–ê")
    print("-" * 40)
    
    assert manager.initialize(), "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"
    assert manager.start(), "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞"
    assert manager.status.value in ["RUNNING", "running"], f"–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {manager.status.value}"
    print("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ —É—Å–ø–µ—à–Ω—ã")
    
    # ==================== –¢–ï–°–¢ 2: –°–û–ó–î–ê–ù–ò–ï –ò–ù–¶–ò–î–ï–ù–¢–û–í ====================
    print("\n2Ô∏è‚É£ –¢–ï–°–¢ –°–û–ó–î–ê–ù–ò–Ø –ò–ù–¶–ò–î–ï–ù–¢–û–í")
    print("-" * 40)
    
    incidents = []
    for i in range(5):
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ ID
        import time
        time.sleep(0.001)
        
        incident = manager.create_incident(
            title=f"Test Incident {i+1}",
            description=f"Description for incident {i+1}",
            incident_type=IncidentType.MALWARE_INFECTION,
            priority=IncidentPriority.HIGH if i % 2 == 0 else IncidentPriority.MEDIUM,
            severity=SecurityLevel.HIGH if i % 2 == 0 else SecurityLevel.MEDIUM,
            affected_systems=[f"system-{i+1}"]
        )
        assert incident is not None, f"–ò–Ω—Ü–∏–¥–µ–Ω—Ç {i+1} –Ω–µ —Å–æ–∑–¥–∞–Ω"
        incidents.append(incident)
        manager.incidents[incident.incident_id] = incident
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(incidents)} –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤")
    
    # ==================== –¢–ï–°–¢ 3: –ú–ï–¢–û–î–´ –ö–õ–ê–°–°–ê INCIDENT ====================
    print("\n3Ô∏è‚É£ –¢–ï–°–¢ –ú–ï–¢–û–î–û–í –ö–õ–ê–°–°–ê INCIDENT")
    print("-" * 40)
    
    incident = incidents[0]
    
    # –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã
    assert incident.is_open(), "is_open() –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å True"
    assert not incident.is_resolved(), "is_resolved() –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å False"
    assert incident.is_escalated(), "is_escalated() –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å True"
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    age = incident.get_age_hours()
    assert age >= 0, f"get_age_hours() –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, –ø–æ–ª—É—á–µ–Ω–æ: {age}"
    
    # –ú–µ—Ç–æ–¥—ã –æ—Ü–µ–Ω–∫–∏
    assert incident.get_priority_score() == 3, "get_priority_score() –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 3 –¥–ª—è HIGH"
    assert incident.get_severity_score() == 3, "get_severity_score() –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 3 –¥–ª—è HIGH"
    
    # –ú–µ—Ç–æ–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    incident.add_evidence("log", "System log evidence", "/var/log/system.log")
    incident.add_action("Isolation", "admin", "System isolated successfully")
    incident.update_impact_assessment("High impact on production systems")
    incident.set_root_cause("Malware infection via email attachment")
    incident.add_lesson_learned("Implement stricter email filtering")
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    str_repr = str(incident)
    repr_repr = repr(incident)
    assert "Test Incident 1" in str_repr, "str() –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫"
    assert "Incident(" in repr_repr, "repr() –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 'Incident('"
    
    # –ú–µ—Ç–æ–¥—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    incident2 = incidents[1]
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã –∏–º–µ—é—Ç —Ä–∞–∑–Ω—ã–µ ID –∏–ª–∏ —Ä–∞–∑–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è
    if incident.incident_id == incident2.incident_id:
        print(f"‚ö†Ô∏è –ò–Ω—Ü–∏–¥–µ–Ω—Ç—ã –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π ID: {incident.incident_id}")
    else:
        assert incident != incident2, f"–†–∞–∑–Ω—ã–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–µ —Ä–∞–≤–Ω—ã: {incident.incident_id} vs {incident2.incident_id}"
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è
    assert (incident < incident2) != (incident > incident2), "–ò–Ω—Ü–∏–¥–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å—Ä–∞–≤–Ω–∏–º—ã"
    
    print("‚úÖ –í—Å–µ –º–µ—Ç–æ–¥—ã –∫–ª–∞—Å—Å–∞ Incident —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    # ==================== –¢–ï–°–¢ 4: –ú–ï–¢–û–î–´ –ü–û–ò–°–ö–ê –ò –§–ò–õ–¨–¢–†–ê–¶–ò–ò ====================
    print("\n4Ô∏è‚É£ –¢–ï–°–¢ –ú–ï–¢–û–î–û–í –ü–û–ò–°–ö–ê –ò –§–ò–õ–¨–¢–†–ê–¶–ò–ò")
    print("-" * 40)
    
    # –ü–æ–∏—Å–∫ –ø–æ –∫–æ–º–∞–Ω–¥–µ
    team_incidents = manager.get_incidents_by_team("Security Team")
    assert isinstance(team_incidents, list), "get_incidents_by_team() –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å–ø–∏—Å–æ–∫"
    
    # –ü–æ–∏—Å–∫ –≤—ã—Å–æ–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö
    high_priority = manager.get_high_priority_incidents()
    assert len(high_priority) >= 0, "get_high_priority_incidents() –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å–ø–∏—Å–æ–∫"
    
    # –ü–æ–∏—Å–∫ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö
    overdue = manager.get_overdue_incidents(0.001)  # –û—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–π –ø–æ—Ä–æ–≥
    assert isinstance(overdue, list), "get_overdue_incidents() –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å–ø–∏—Å–æ–∫"
    
    # –¢–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫
    search_results = manager.search_incidents("Test")
    assert len(search_results) >= 0, "search_incidents() –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å–ø–∏—Å–æ–∫"
    
    print("‚úÖ –ú–µ—Ç–æ–¥—ã –ø–æ–∏—Å–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    # ==================== –¢–ï–°–¢ 5: –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò –ú–ï–¢–†–ò–ö–ò ====================
    print("\n5Ô∏è‚É£ –¢–ï–°–¢ –°–¢–ê–¢–ò–°–¢–ò–ö–ò –ò –ú–ï–¢–†–ò–ö")
    print("-" * 40)
    
    # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats = manager.get_incident_statistics()
    assert "total" in stats, "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 'total'"
    assert stats["total"] >= 0, "–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å >= 0"
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    metrics = manager.get_detailed_metrics()
    assert "basic_metrics" in metrics, "–ú–µ—Ç—Ä–∏–∫–∏ –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å 'basic_metrics'"
    assert "priority_distribution" in metrics, "–ú–µ—Ç—Ä–∏–∫–∏ –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å 'priority_distribution'"
    assert "time_metrics" in metrics, "–ú–µ—Ç—Ä–∏–∫–∏ –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å 'time_metrics'"
    
    # –û—Ç—á–µ—Ç –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    report = manager.get_performance_report()
    assert "–û–¢–ß–ï–¢ –û –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò" in report, "–û—Ç—á–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫"
    
    print("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –º–µ—Ç—Ä–∏–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    # ==================== –¢–ï–°–¢ 6: –ö–≠–®–ò–†–û–í–ê–ù–ò–ï ====================
    print("\n6Ô∏è‚É£ –¢–ï–°–¢ –ö–≠–®–ò–†–û–í–ê–ù–ò–Ø")
    print("-" * 40)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—ç—à–µ
    cache_info = manager.get_cache_info()
    assert "incident_by_id" in cache_info, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—ç—à–µ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 'incident_by_id'"
    
    # –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
    manager.clear_cache()
    cache_info_after = manager.get_cache_info()
    assert cache_info_after["incident_by_id"].hits == 0, "–ö—ç—à –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—á–∏—â–µ–Ω"
    
    print("‚úÖ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    # ==================== –¢–ï–°–¢ 7: –ê–°–ò–ù–•–†–û–ù–ù–´–ï –ú–ï–¢–û–î–´ ====================
    print("\n7Ô∏è‚É£ –¢–ï–°–¢ –ê–°–ò–ù–•–†–û–ù–ù–´–• –ú–ï–¢–û–î–û–í")
    print("-" * 40)
    
    async def test_async_methods():
        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ
        async_incident = await manager.create_incident_async(
            title="Async Test Incident",
            description="Async description",
            incident_type=IncidentType.DATA_BREACH,
            priority=IncidentPriority.MEDIUM,
            severity=SecurityLevel.MEDIUM
        )
        assert async_incident is not None, "–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å"
        
        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ
        incidents_list = await manager.get_incidents_async()
        assert isinstance(incidents_list, list), "–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å–ø–∏—Å–æ–∫"
        
        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        if async_incident:
            success = await manager.update_incident_status_async(
                async_incident.incident_id, IncidentStatus.IN_PROGRESS
            )
            assert success, "–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å"
        
        return True
    
    result = asyncio.run(test_async_methods())
    assert result, "–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å"
    
    print("‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    # ==================== –¢–ï–°–¢ 8: –≠–ö–°–ü–û–†–¢/–ò–ú–ü–û–†–¢ ====================
    print("\n8Ô∏è‚É£ –¢–ï–°–¢ –≠–ö–°–ü–û–†–¢–ê/–ò–ú–ü–û–†–¢–ê")
    print("-" * 40)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    with tempfile.NamedTemporaryFile(mode='w', suffix='.csv', delete=False) as temp_file:
        temp_path = temp_file.name
    
    try:
        # –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV
        export_success = manager.export_incidents_to_csv(temp_path)
        assert export_success, "–≠–∫—Å–ø–æ—Ä—Ç –≤ CSV –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞
        assert os.path.exists(temp_path), "CSV —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω"
        assert os.path.getsize(temp_path) > 0, "CSV —Ñ–∞–π–ª –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
        
        # –ò–º–ø–æ—Ä—Ç –∏–∑ CSV
        imported_count = manager.import_incidents_from_csv(temp_path)
        assert imported_count >= 0, "–ò–º–ø–æ—Ä—Ç –∏–∑ CSV –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å"
        
        print(f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç/–∏–º–ø–æ—Ä—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (–∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {imported_count})")
        
    finally:
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        if os.path.exists(temp_path):
            os.unlink(temp_path)
    
    # ==================== –¢–ï–°–¢ 9: –†–ï–ó–ï–†–í–ù–û–ï –ö–û–ü–ò–†–û–í–ê–ù–ò–ï ====================
    print("\n9Ô∏è‚É£ –¢–ï–°–¢ –†–ï–ó–ï–†–í–ù–û–ì–û –ö–û–ü–ò–†–û–í–ê–ù–ò–Ø")
    print("-" * 40)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
    with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False) as temp_file:
        backup_path = temp_file.name
    
    try:
        backup_success = manager.backup_incidents(backup_path)
        assert backup_success, "–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
        assert os.path.exists(backup_path), "–§–∞–π–ª —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω"
        
        with open(backup_path, 'r') as f:
            backup_data = json.load(f)
        assert "incidents" in backup_data, "–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 'incidents'"
        assert "statistics" in backup_data, "–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 'statistics'"
        
        # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
        original_count = len(manager.incidents)
        manager.incidents.clear()  # –û—á–∏—â–∞–µ–º –¥–ª—è —Ç–µ—Å—Ç–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        
        restored_count = manager.restore_incidents(backup_path)
        assert restored_count >= 0, "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å"
        
        print(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {restored_count})")
        
    finally:
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        if os.path.exists(backup_path):
            os.unlink(backup_path)
    
    # ==================== –¢–ï–°–¢ 10: –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö ====================
    print("\nüîü –¢–ï–°–¢ –û–ë–†–ê–ë–û–¢–ö–ò –û–®–ò–ë–û–ö")
    print("-" * 40)
    
    # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    try:
        result = manager.create_incident("", "description", IncidentType.MALWARE_INFECTION, 
                                       IncidentPriority.HIGH, SecurityLevel.HIGH)
        assert result is None, "–ü—É—Å—Ç–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å None"
    except IncidentValidationError:
        pass  # –û–∂–∏–¥–∞–µ–º–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
    
    # –¢–µ—Å—Ç –ª–∏–º–∏—Ç–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤
    manager.max_open_incidents = 1
    try:
        result = manager.create_incident("Test", "Description", IncidentType.MALWARE_INFECTION, 
                                       IncidentPriority.LOW, SecurityLevel.LOW)
        if result is None:
            print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏–º–∏—Ç–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç None)")
        else:
            # –ï—Å–ª–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –ª–∏–º–∏—Ç, —ç—Ç–æ —Ç–æ–∂–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
            print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏–º–∏—Ç–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç (–ª–∏–º–∏—Ç –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç)")
    except IncidentLimitExceededError:
        print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏–º–∏—Ç–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç (–∏—Å–∫–ª—é—á–µ–Ω–∏–µ)")
    
    print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    # ==================== –¢–ï–°–¢ 11: –ö–û–ù–¢–ï–ö–°–¢–ù–´–ô –ú–ï–ù–ï–î–ñ–ï–† ====================
    print("\n1Ô∏è‚É£1Ô∏è‚É£ –¢–ï–°–¢ –ö–û–ù–¢–ï–ö–°–¢–ù–û–ì–û –ú–ï–ù–ï–î–ñ–ï–†–ê")
    print("-" * 40)
    
    with IncidentResponseManager("ContextTest") as ctx_manager:
        ctx_manager.initialize()
        ctx_manager.start()
        assert ctx_manager.status.value in ["RUNNING", "running"], "–°—Ç–∞—Ç—É—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å RUNNING –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ"
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        ctx_incident = ctx_manager.create_incident(
            "Context Incident", "Context description",
            IncidentType.MALWARE_INFECTION, IncidentPriority.MEDIUM, SecurityLevel.MEDIUM
        )
        assert ctx_incident is not None, "–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å"
    
    print("‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    # ==================== –¢–ï–°–¢ 12: –ò–¢–ï–†–ê–¶–ò–Ø –ò –°–†–ê–í–ù–ï–ù–ò–ï ====================
    print("\n1Ô∏è‚É£2Ô∏è‚É£ –¢–ï–°–¢ –ò–¢–ï–†–ê–¶–ò–ò –ò –°–†–ê–í–ù–ï–ù–ò–Ø")
    print("-" * 40)
    
    # –¢–µ—Å—Ç –¥–ª–∏–Ω—ã
    assert len(manager) >= 0, "len() –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å"
    
    # –¢–µ—Å—Ç –∏—Ç–µ—Ä–∞—Ü–∏–∏
    incident_count = 0
    for incident in manager:
        incident_count += 1
        assert isinstance(incident, Incident), "–ò—Ç–µ—Ä–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –æ–±—ä–µ–∫—Ç—ã Incident"
    
    # –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏
    if manager.incidents:
        first_incident_id = next(iter(manager.incidents.keys()))
        assert first_incident_id in manager, "in –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å"
    
    print(f"‚úÖ –ò—Ç–µ—Ä–∞—Ü–∏—è –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (–∏—Ç–µ—Ä–∞—Ü–∏–π: {incident_count})")
    
    # ==================== –¢–ï–°–¢ 13: –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ====================
    print("\n1Ô∏è‚É£3Ô∏è‚É£ –¢–ï–°–¢ –°–ü–ï–¶–ò–ê–õ–¨–ù–´–• –ú–ï–¢–û–î–û–í")
    print("-" * 40)
    
    # –¢–µ—Å—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    str_repr = str(manager)
    repr_repr = repr(manager)
    assert "IncidentResponseManager" in str_repr, "str() –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞"
    assert "IncidentResponseManager" in repr_repr, "repr() –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞"
    
    print("‚úÖ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    # ==================== –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê ====================
    print("\nüéØ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–´")
    print("-" * 40)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
    assert manager.status.value in ["RUNNING", "running"], f"–§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {manager.status.value}"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    final_stats = manager.get_incident_statistics()
    print(f"üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {final_stats['total']} –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç—Ä–∏–∫
    final_metrics = manager.get_detailed_metrics()
    print(f"üìà –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏: {final_metrics['basic_metrics']}")
    
    print("\nüéâ –í–°–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´ –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–ù–´ –£–°–ü–ï–®–ù–û!")
    print("=" * 60)
    return True

if __name__ == "__main__":
    try:
        test_all_classes_and_methods()
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)