#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ - encryption_manager.py
–í–µ—Ä—Å–∏—è: 2.5
–î–∞—Ç–∞: 2025-09-24
"""

import asyncio
import logging
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º ALADDIN_NEW
sys.path.append(str(Path(__file__).resolve().parents[2]))

from security.bots.components.encryption_manager import (
    EncryptionManager,
    EncryptionAlgorithm,
    KeyDerivation,
    EncryptionKey,
    EncryptedData,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class ComprehensiveEncryptionManagerTest:
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""

    def __init__(self):
        self.logger = logger
        self.manager = None
        self.test_results = []

    async def test_all_classes_instantiation(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤"""
        self.logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤...")
        
        try:
            # 1. EncryptionManager
            self.manager = EncryptionManager(self.logger)
            assert self.manager is not None
            self.logger.info("‚úÖ EncryptionManager —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            
            # 2. EncryptionAlgorithm (Enum)
            algorithms = [
                EncryptionAlgorithm.AES_256_GCM,
                EncryptionAlgorithm.AES_256_CBC,
                EncryptionAlgorithm.FERNET,
                EncryptionAlgorithm.RSA_OAEP,
                EncryptionAlgorithm.CHACHA20_POLY1305
            ]
            for algo in algorithms:
                assert algo is not None
            self.logger.info("‚úÖ EncryptionAlgorithm —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            
            # 3. KeyDerivation (Enum)
            derivations = [
                KeyDerivation.PBKDF2,
                KeyDerivation.SCRYPT,
                KeyDerivation.ARGON2
            ]
            for deriv in derivations:
                assert deriv is not None
            self.logger.info("‚úÖ KeyDerivation —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            
            # 4. EncryptionKey (Dataclass)
            from datetime import datetime
            key = EncryptionKey(
                key_id="test_key_1",
                algorithm=EncryptionAlgorithm.AES_256_GCM,
                key_data=b"test_key_data",
                created_at=datetime.now()
            )
            assert key is not None
            self.logger.info("‚úÖ EncryptionKey —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            
            # 5. EncryptedData (Dataclass)
            encrypted_data = EncryptedData(
                data=b"encrypted_data",
                key_id="test_key_1",
                algorithm=EncryptionAlgorithm.AES_256_GCM
            )
            assert encrypted_data is not None
            self.logger.info("‚úÖ EncryptedData —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            
            self.test_results.append(("–°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤", True))
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞—Å—Å–æ–≤: {e}")
            self.test_results.append(("–°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤", False))
            return False

    async def test_all_public_methods(self):
        """–¢–µ—Å—Ç –≤—Å–µ—Ö –ø—É–±–ª–∏—á–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤"""
        self.logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –ø—É–±–ª–∏—á–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤...")
        
        if not self.manager:
            self.logger.error("‚ùå EncryptionManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return False
            
        try:
            # –¢–µ—Å—Ç encrypt_data
            test_data = {"user": "test", "password": "secret"}
            encrypted = await self.manager.encrypt_data(test_data)
            assert encrypted is not None
            self.logger.info("‚úÖ encrypt_data —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            # –¢–µ—Å—Ç decrypt_data
            decrypted = await self.manager.decrypt_data(encrypted)
            assert decrypted == test_data
            self.logger.info("‚úÖ decrypt_data —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            # –¢–µ—Å—Ç encrypt_sensitive_field
            sensitive_field = "sensitive_data"
            encrypted_field = await self.manager.encrypt_sensitive_field("field_name", sensitive_field)
            assert encrypted_field is not None
            self.logger.info("‚úÖ encrypt_sensitive_field —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            # –¢–µ—Å—Ç decrypt_sensitive_field
            try:
                field_name, decrypted_field = await self.manager.decrypt_sensitive_field(encrypted_field)
                assert decrypted_field == sensitive_field
                assert field_name == "field_name"
                self.logger.info("‚úÖ decrypt_sensitive_field —Ä–∞–±–æ—Ç–∞–µ—Ç")
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ decrypt_sensitive_field: {e}")
                raise
            
            # –¢–µ—Å—Ç hash_password
            password = "test_password"
            salt = b"test_salt"
            hashed, returned_salt = self.manager.hash_password(password, salt)
            assert isinstance(hashed, str)
            assert isinstance(returned_salt, bytes)
            self.logger.info("‚úÖ hash_password —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            # –¢–µ—Å—Ç verify_password
            is_valid = self.manager.verify_password(password, hashed, returned_salt)
            assert is_valid is True
            self.logger.info("‚úÖ verify_password —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            # –¢–µ—Å—Ç get_encryption_stats
            stats = self.manager.get_encryption_stats()
            assert isinstance(stats, dict)
            assert "total_keys" in stats
            self.logger.info("‚úÖ get_encryption_stats —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            # –¢–µ—Å—Ç cleanup_expired_keys
            cleaned = await self.manager.cleanup_expired_keys()
            assert isinstance(cleaned, int)
            self.logger.info("‚úÖ cleanup_expired_keys —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            self.test_results.append(("–í—Å–µ –ø—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã", True))
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É–±–ª–∏—á–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤: {e}")
            self.test_results.append(("–í—Å–µ –ø—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã", False))
            return False

    async def test_integration_between_components(self):
        """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏"""
        self.logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏...")
        
        if not self.manager:
            self.logger.error("‚ùå EncryptionManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return False
            
        try:
            # –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
            original_data = {
                "user_id": "12345",
                "password": "secure_password",
                "email": "user@example.com",
                "sensitive_info": "confidential_data"
            }
            
            # –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ
            encrypted = await self.manager.encrypt_data(original_data)
            assert isinstance(encrypted, EncryptedData)
            assert encrypted.key_id in self.manager.keys
            self.logger.info("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            # –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞
            decrypted = await self.manager.decrypt_data(encrypted)
            assert decrypted == original_data
            self.logger.info("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            # –¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã —Å –∫–ª—é—á–∞–º–∏
            key = self.manager.keys[encrypted.key_id]
            assert isinstance(key, EncryptionKey)
            assert key.algorithm == encrypted.algorithm
            self.logger.info("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: —Ä–∞–±–æ—Ç–∞ —Å –∫–ª—é—á–∞–º–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            # –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            stats = self.manager.get_encryption_stats()
            assert stats["total_keys"] > 0
            assert stats["active_key_id"] == encrypted.key_id
            self.logger.info("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            self.test_results.append(("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏", True))
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
            self.test_results.append(("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏", False))
            return False

    async def test_error_scenarios(self):
        """–¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –æ—à–∏–±–æ–∫"""
        self.logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –æ—à–∏–±–æ–∫...")
        
        if not self.manager:
            self.logger.error("‚ùå EncryptionManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return False
            
        try:
            # –¢–µ—Å—Ç —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            try:
                await self.manager.encrypt_data(None)
                self.logger.error("‚ùå –û–∂–∏–¥–∞–ª–æ—Å—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è None")
                return False
            except Exception:
                self.logger.info("‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è None")
            
            # –¢–µ—Å—Ç —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–ª—é—á–æ–º
            try:
                invalid_encrypted = EncryptedData(
                    data=b"invalid",
                    key_id="nonexistent_key",
                    algorithm=EncryptionAlgorithm.AES_256_GCM
                )
                await self.manager.decrypt_data(invalid_encrypted)
                self.logger.error("‚ùå –û–∂–∏–¥–∞–ª–æ—Å—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª—é—á–∞")
                return False
            except Exception:
                self.logger.info("‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª—é—á–∞")
            
            # –¢–µ—Å—Ç —Å –Ω–µ–≤–µ—Ä–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º
            try:
                result = self.manager.verify_password("wrong_password", "invalid_hash", b"invalid_salt")
                if result is False:
                    self.logger.info("‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å (–≤–æ–∑–≤—Ä–∞—Ç False)")
                else:
                    self.logger.error("‚ùå –û–∂–∏–¥–∞–ª–æ—Å—å False –¥–ª—è –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è")
                    return False
            except Exception:
                self.logger.info("‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è")
            
            self.test_results.append(("–°—Ü–µ–Ω–∞—Ä–∏–∏ –æ—à–∏–±–æ–∫", True))
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –æ—à–∏–±–æ–∫: {e}")
            self.test_results.append(("–°—Ü–µ–Ω–∞—Ä–∏–∏ –æ—à–∏–±–æ–∫", False))
            return False

    async def run_comprehensive_test(self):
        """–ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        self.logger.info("üöÄ –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ê –í–°–ï–• –ö–û–ú–ü–û–ù–ï–ù–¢–û–í")
        self.logger.info("============================================================")
        
        results = []
        results.append(await self.test_all_classes_instantiation())
        results.append(await self.test_all_public_methods())
        results.append(await self.test_integration_between_components())
        results.append(await self.test_error_scenarios())
        
        self.logger.info("============================================================")
        passed_tests = sum(1 for r in results if r)
        total_tests = len(results)
        
        self.logger.info(f"üìà –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ê: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.logger.info("üìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        for test_name, result in self.test_results:
            status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
            self.logger.info(f"  {test_name}: {status}")
        
        if all(results):
            self.logger.info("üéâ –í–°–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´ –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
            return True
        else:
            self.logger.error("‚ùå –ï–°–¢–¨ –û–®–ò–ë–ö–ò –í –ö–û–ú–ü–û–ù–ï–ù–¢–ê–•!")
            return False


if __name__ == "__main__":
    logger.info("‚úÖ –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π —É—Å–ø–µ—à–µ–Ω")
    tester = ComprehensiveEncryptionManagerTest()
    asyncio.run(tester.run_comprehensive_test())