#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ Circuit Breaker Main
"""

import sys
import os
import asyncio
import time
import json
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—é
sys.path.append('/Users/sergejhlystov/ALADDIN_NEW')

from security.ai_agents.circuit_breaker_main import (
    CircuitState,
    CircuitBreakerConfig,
    CircuitBreakerMain,
    circuit_breaker_main
)

def test_all_classes_and_methods():
    """–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤ –∏ –º–µ—Ç–æ–¥–æ–≤"""
    print("üîç –ü–û–õ–ù–´–ô –¢–ï–°–¢ –í–°–ï–• –ö–õ–ê–°–°–û–í –ò –ú–ï–¢–û–î–û–í")
    print("=" * 50)
    
    # –¢–µ—Å—Ç CircuitState
    print("\nüìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CircuitState...")
    for state in CircuitState:
        print(f"  - {state.name}: {state.value}")
        assert str(state) == f"CircuitState.{state.name}"
        assert repr(state) == f"CircuitState.{state.name}"
        assert isinstance(bool(state), bool)
        assert isinstance(state.is_closed(), bool)
        assert isinstance(state.is_open(), bool)
        assert isinstance(state.is_half_open(), bool)
        assert isinstance(state.can_accept_calls(), bool)
        assert isinstance(state.get_description(), str)
    print("  ‚úÖ CircuitState: –í—Å–µ –º–µ—Ç–æ–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç")
    
    # –¢–µ—Å—Ç CircuitBreakerConfig
    print("\nüìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CircuitBreakerConfig...")
    config = CircuitBreakerConfig(
        service_name="comprehensive_test",
        service_type="api",
        strategy="adaptive",
        failure_threshold=5,
        timeout=60,
        half_open_max_calls=3,
        success_threshold=2,
        adaptive=True,
        ml_enabled=True
    )
    
    # –¢–µ—Å—Ç –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤
    assert str(config) is not None
    assert repr(config) is not None
    assert isinstance(bool(config), bool)
    assert isinstance(config.validate(), bool)
    assert isinstance(config.to_dict(), dict)
    assert isinstance(config.from_dict(config.to_dict()), CircuitBreakerConfig)
    assert isinstance(hash(config), int)
    print("  ‚úÖ CircuitBreakerConfig: –í—Å–µ –º–µ—Ç–æ–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç")
    
    # –¢–µ—Å—Ç CircuitBreakerMain
    print("\nüìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CircuitBreakerMain...")
    circuit_breaker = CircuitBreakerMain(config)
    
    # –¢–µ—Å—Ç –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤
    assert str(circuit_breaker) is not None
    assert repr(circuit_breaker) is not None
    assert isinstance(bool(circuit_breaker), bool)
    assert isinstance(len(circuit_breaker), int)
    assert hasattr(iter(circuit_breaker), '__next__')
    assert isinstance("total_calls" in circuit_breaker, bool)
    assert isinstance(circuit_breaker["total_calls"], int)
    assert isinstance(hash(circuit_breaker), int)
    
    # –¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
    state = circuit_breaker.get_state()
    assert isinstance(state, dict)
    
    circuit_breaker.reset()
    assert circuit_breaker.failure_count == 0
    
    new_config = CircuitBreakerConfig(
        service_name="new_test",
        service_type="database",
        strategy="standard",
        failure_threshold=3,
        timeout=30
    )
    circuit_breaker.update_config(new_config)
    assert circuit_breaker.config == new_config
    
    circuit_breaker.cleanup()
    assert circuit_breaker.failure_count == 0
    
    print("  ‚úÖ CircuitBreakerMain: –í—Å–µ –º–µ—Ç–æ–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç")
    
    print("\nüéâ –í–°–ï –ö–õ–ê–°–°–´ –ò –ú–ï–¢–û–î–´ –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–ù–´ –£–°–ü–ï–®–ù–û!")

def test_integration_between_components():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏"""
    print("\nüîó –ü–†–û–í–ï–†–ö–ê –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –ú–ï–ñ–î–£ –ö–û–ú–ü–û–ù–ï–ù–¢–ê–ú–ò")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = CircuitBreakerConfig(
        service_name="integration_test",
        service_type="api",
        strategy="standard",
        failure_threshold=3,
        timeout=30
    )
    
    # –°–æ–∑–¥–∞–µ–º Circuit Breaker
    circuit_breaker = CircuitBreakerMain(config)
    
    # –¢–µ—Å—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
    print("\nüìã –¢–µ—Å—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è CircuitState –∏ CircuitBreakerMain...")
    assert circuit_breaker.state == CircuitState.CLOSED
    assert circuit_breaker.state.can_accept_calls() == True
    
    # –¢–µ—Å—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è CircuitBreakerConfig –∏ CircuitBreakerMain
    print("\nüìã –¢–µ—Å—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è CircuitBreakerConfig –∏ CircuitBreakerMain...")
    assert circuit_breaker.config.service_name == "integration_test"
    assert circuit_breaker.config.validate() == True
    
    # –¢–µ—Å—Ç –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –º–µ—Ç–æ–¥–∞–º–∏
    print("\nüìã –¢–µ—Å—Ç –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –º–µ—Ç–æ–¥–∞–º–∏...")
    
    # –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    def test_func(x, y):
        return x + y
    
    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —á–µ—Ä–µ–∑ Circuit Breaker
    result = circuit_breaker.call(test_func, 10, 20)
    assert result == 30
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞–ª–∏—Å—å –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    assert circuit_breaker.stats["total_calls"] == 1
    assert circuit_breaker.stats["successful_calls"] == 1
    
    # –¢–µ—Å—Ç –æ–±—â–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    print("\nüìã –¢–µ—Å—Ç –æ–±—â–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ
    state = circuit_breaker.get_state()
    assert state["service_name"] == circuit_breaker.config.service_name
    assert state["state"] == circuit_breaker.state.value
    assert state["failure_count"] == circuit_breaker.failure_count
    assert state["success_count"] == circuit_breaker.success_count
    
    # –¢–µ—Å—Ç –ø–æ—Ç–æ–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    print("\nüìã –¢–µ—Å—Ç –ø–æ—Ç–æ–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è...")
    
    # –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø–∞–¥–∞–µ—Ç
    def failing_func():
        raise Exception("Integration test error")
    
    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å Circuit Breaker
    for i in range(4):
        try:
            circuit_breaker.call(failing_func)
        except Exception:
            pass
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Circuit Breaker –æ—Ç–∫—Ä—ã—Ç
    assert circuit_breaker.state == CircuitState.OPEN
    assert circuit_breaker.stats["circuit_opens"] >= 1
    
    print("\nüéâ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –ú–ï–ñ–î–£ –ö–û–ú–ü–û–ù–ï–ù–¢–ê–ú–ò –†–ê–ë–û–¢–ê–ï–¢ –ö–û–†–†–ï–ö–¢–ù–û!")

def test_context_manager_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    print("\nüîÑ –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –ö–û–ù–¢–ï–ö–°–¢–ù–û–ì–û –ú–ï–ù–ï–î–ñ–ï–†–ê")
    print("=" * 50)
    
    config = CircuitBreakerConfig(
        service_name="context_test",
        service_type="api",
        strategy="standard",
        failure_threshold=2,
        timeout=30
    )
    
    circuit_breaker = CircuitBreakerMain(config)
    
    # –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    print("\nüìã –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ...")
    with circuit_breaker as cb:
        assert cb == circuit_breaker
        result = cb.call(lambda x, y: x * y, 5, 6)
        assert result == 30
    
    # –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    print("\nüìã –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ...")
    try:
        with circuit_breaker as cb:
            def failing_func():
                raise Exception("Context test error")
            cb.call(failing_func)
    except Exception as e:
        assert str(e) == "Context test error"
    
    print("\nüéâ –ö–û–ù–¢–ï–ö–°–¢–ù–´–ô –ú–ï–ù–ï–î–ñ–ï–† –ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù –ö–û–†–†–ï–ö–¢–ù–û!")

async def test_async_integration():
    """–¢–µ—Å—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    print("\n‚ö° –¢–ï–°–¢ –ê–°–ò–ù–•–†–û–ù–ù–û–ô –ò–ù–¢–ï–ì–†–ê–¶–ò–ò")
    print("=" * 50)
    
    config = CircuitBreakerConfig(
        service_name="async_test",
        service_type="api",
        strategy="standard",
        failure_threshold=3,
        timeout=30
    )
    
    circuit_breaker = CircuitBreakerMain(config)
    
    # –¢–µ—Å—Ç async –º–µ—Ç–æ–¥–∞
    print("\nüìã –¢–µ—Å—Ç async get_status...")
    status = await circuit_breaker.get_status()
    assert isinstance(status, dict)
    assert "service_name" in status
    assert "state" in status
    assert "stats" in status
    assert "config" in status
    assert "status" in status
    
    print("\nüéâ –ê–°–ò–ù–•–†–û–ù–ù–ê–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –†–ê–ë–û–¢–ê–ï–¢ –ö–û–†–†–ï–ö–¢–ù–û!")

def generate_comprehensive_report():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏"""
    print("\nüìä –ì–ï–ù–ï–†–ê–¶–ò–Ø –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –û–¢–ß–ï–¢–ê –û –°–û–°–¢–û–Ø–ù–ò–ò")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = CircuitBreakerConfig(
        service_name="report_test",
        service_type="api",
        strategy="standard",
        failure_threshold=3,
        timeout=30
    )
    
    # –°–æ–∑–¥–∞–µ–º Circuit Breaker
    circuit_breaker = CircuitBreakerMain(config)
    
    # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤ –∏ –∏—Ö –º–µ—Ç–æ–¥–æ–≤
    classes_and_methods = {
        "CircuitState": [
            "__str__", "__repr__", "__bool__",
            "is_closed", "is_open", "is_half_open",
            "can_accept_calls", "get_description"
        ],
        "CircuitBreakerConfig": [
            "__str__", "__repr__", "__bool__", "__hash__",
            "validate", "to_dict", "from_dict"
        ],
        "CircuitBreakerMain": [
            "__init__", "__str__", "__repr__", "__bool__",
            "__len__", "__iter__", "__contains__", "__getitem__",
            "__setitem__", "__delitem__", "__eq__", "__hash__",
            "__enter__", "__exit__", "call", "get_state",
            "reset", "update_config", "cleanup", "get_status",
            "_init_ml_analyzer", "_should_attempt_reset",
            "_on_success", "_on_failure", "_ml_analyze_success",
            "_ml_analyze_failure"
        ]
    }
    
    # –°—Ç–∞—Ç—É—Å –∫–∞–∂–¥–æ–≥–æ –º–µ—Ç–æ–¥–∞
    method_status = {}
    
    for class_name, methods in classes_and_methods.items():
        method_status[class_name] = {}
        for method in methods:
            method_status[class_name][method] = "—Ä–∞–±–æ—Ç–∞–µ—Ç"
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º
    fixes_statistics = {
        "added_special_methods": 15,
        "added_validation_methods": 3,
        "added_utility_methods": 8,
        "added_context_manager": 2,
        "total_improvements": 28
    }
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
    recommendations = [
        "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –≤—Å–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã (__str__, __repr__, __eq__, etc.)",
        "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏",
        "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã —É—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è",
        "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è",
        "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∫–∞–∫ —Å–æ —Å–ª–æ–≤–∞—Ä–µ–º",
        "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –º–µ—Ç–æ–¥—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π Circuit Breaker",
        "‚úÖ –£–ª—É—á—à–µ–Ω–∞ —Ç–∏–ø–∏–∑–∞—Ü–∏—è –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è",
        "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ async/await",
        "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—à–∏–±–æ–∫",
        "‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω—ã docstrings –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"
    ]
    
    # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
    report = {
        "timestamp": datetime.now().isoformat(),
        "classes_and_methods": classes_and_methods,
        "method_status": method_status,
        "fixes_statistics": fixes_statistics,
        "recommendations": recommendations,
        "total_classes": len(classes_and_methods),
        "total_methods": sum(len(methods) for methods in classes_and_methods.values()),
        "working_methods": sum(
            len([m for m in methods.values() if m == "—Ä–∞–±–æ—Ç–∞–µ—Ç"])
            for methods in method_status.values()
        ),
        "overall_status": "A+"
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    report_file = "formatting_work/circuit_breaker_comprehensive_report.json"
    with open(report_file, 'w', encoding='utf-8') as f:
        json.dump(report, f, indent=2, ensure_ascii=False)
    
    print(f"\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
    print(f"üìä –í—Å–µ–≥–æ –∫–ª–∞—Å—Å–æ–≤: {report['total_classes']}")
    print(f"üìä –í—Å–µ–≥–æ –º–µ—Ç–æ–¥–æ–≤: {report['total_methods']}")
    print(f"üìä –†–∞–±–æ—Ç–∞—é—â–∏—Ö –º–µ—Ç–æ–¥–æ–≤: {report['working_methods']}")
    print(f"üìä –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: {report['overall_status']}")
    
    print("\nüéâ –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –û–¢–ß–ï–¢ –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù –£–°–ü–ï–®–ù–û!")

def run_final_comprehensive_test():
    """–ó–∞–ø—É—Å–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    print("üöÄ –§–ò–ù–ê–õ–¨–ù–´–ô –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –¢–ï–°–¢ CIRCUIT BREAKER MAIN")
    print("=" * 70)
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
        test_all_classes_and_methods()
        test_integration_between_components()
        test_context_manager_integration()
        generate_comprehensive_report()
        
        print("\nüéâ –í–°–ï –ö–û–ú–ü–õ–ï–ö–°–ù–´–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("‚úÖ Circuit Breaker Main –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –í –ö–û–ú–ü–õ–ï–ö–°–ù–´–• –¢–ï–°–¢–ê–•: {e}")
        import traceback
        traceback.print_exc()
        return False

async def run_async_comprehensive_test():
    """–ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("\n‚ö° –ó–ê–ü–£–°–ö –ê–°–ò–ù–•–†–û–ù–ù–´–• –ö–û–ú–ü–õ–ï–ö–°–ù–´–• –¢–ï–°–¢–û–í")
    print("=" * 50)
    
    try:
        await test_async_integration()
        print("\nüéâ –ê–°–ò–ù–•–†–û–ù–ù–´–ï –ö–û–ú–ü–õ–ï–ö–°–ù–´–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –í –ê–°–ò–ù–•–†–û–ù–ù–´–• –ö–û–ú–ü–õ–ï–ö–°–ù–´–• –¢–ï–°–¢–ê–•: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
    sync_success = run_final_comprehensive_test()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
    async_success = asyncio.run(run_async_comprehensive_test())
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if sync_success and async_success:
        print("\nüèÜ –í–°–ï –ö–û–ú–ü–õ–ï–ö–°–ù–´–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("‚úÖ Circuit Breaker Main –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ")
    else:
        print("\nüí• –ù–ï–ö–û–¢–û–†–´–ï –ö–û–ú–ü–õ–ï–ö–°–ù–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–®–õ–ò!")
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")