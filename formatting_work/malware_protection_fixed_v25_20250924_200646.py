# -*- coding: utf-8 -*-
"""
ALADDIN Security System - Malware Protection Service
Система защиты от вредоносного ПО для семей
Автор: ALADDIN Security Team
Версия: 1.0
Дата: 2025-09-02
"""
import hashlib
import logging
import os
import time
from dataclasses import dataclass, field
from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional, Set

from core.base import SecurityBase


class MalwareType(Enum):
    """Типы вредоносного ПО"""

    VIRUS = "virus"
    TROJAN = "trojan"
    WORM = "worm"
    RANSOMWARE = "ransomware"
    SPYWARE = "spyware"
    ADWARE = "adware"
    ROOTKIT = "rootkit"
    KEYLOGGER = "keylogger"
    BACKDOOR = "backdoor"
    BOTNET = "botnet"
    PHISHING = "phishing"
    SCAREWARE = "scareware"


class MalwareSeverity(Enum):
    """Уровни серьезности вредоносного ПО"""

    LOW = "low"
    MEDIUM = "medium"
    HIGH = "high"
    CRITICAL = "critical"


class ProtectionAction(Enum):
    """Действия защиты"""

    QUARANTINE = "quarantine"
    DELETE = "delete"
    BLOCK_ACCESS = "block_access"
    ALERT_USER = "alert_user"
    ALERT_ADMIN = "alert_admin"
    SCAN_SYSTEM = "scan_system"
    UPDATE_SIGNATURES = "update_signatures"
    ISOLATE_NETWORK = "isolate_network"


class MalwareStatus(Enum):
    """Статусы вредоносного ПО"""

    DETECTED = "detected"
    QUARANTINED = "quarantined"
    REMOVED = "removed"
    BLOCKED = "blocked"
    INVESTIGATING = "investigating"
    FALSE_POSITIVE = "false_positive"


@dataclass
class MalwareDetection:
    """Обнаружение вредоносного ПО"""

    detection_id: str
    malware_type: MalwareType
    severity: MalwareSeverity
    file_path: str
    file_hash: str
    file_size: int
    timestamp: datetime
    description: str
    status: MalwareStatus
    protection_actions: List[ProtectionAction] = field(default_factory=list)
    metadata: Dict[str, Any] = field(default_factory=dict)


@dataclass
class ProtectionRule:
    """Правило защиты"""

    rule_id: str
    name: str
    description: str
    malware_type: MalwareType
    severity_threshold: MalwareSeverity
    conditions: Dict[str, Any]
    actions: List[ProtectionAction]
    enabled: bool = True
    family_specific: bool = False
    age_group: Optional[str] = None


@dataclass
class MalwareSignature:
    """Сигнатура вредоносного ПО"""

    signature_id: str
    name: str
    description: str
    malware_type: MalwareType
    patterns: List[str]
    file_hashes: List[str]
    confidence_threshold: float
    family_protection: bool = True


class MalwareProtectionService(SecurityBase):
    """Сервис защиты от вредоносного ПО для семей"""

    def __init__(
        self,
        name: str = "MalwareProtection",
        config: Optional[Dict[str, Any]] = None,
    ):
        super().__init__(name, config)
        self.logger = logging.getLogger(__name__)
        # Хранилища данных
        self.malware_detections: Dict[str, MalwareDetection] = {}
        self.protection_rules: Dict[str, ProtectionRule] = {}
        self.malware_signatures: Dict[str, MalwareSignature] = {}
        self.quarantined_files: Set[str] = set()
        self.blocked_hashes: Set[str] = set()
        self.family_protection_history: Dict[str, List[str]] = (
            {}
        )  # user_id -> detection_ids
        # Настройки защиты
        self.protection_thresholds = {
            MalwareSeverity.LOW: 0.3,
            MalwareSeverity.MEDIUM: 0.5,
            MalwareSeverity.HIGH: 0.7,
            MalwareSeverity.CRITICAL: 0.9,
        }
        # Семейные настройки
        self.family_protection_enabled = True
        self.child_protection_mode = True
        self.elderly_protection_mode = True
        self.real_time_scanning = True
        self.automatic_quarantine = True
        # Инициализация
        self._initialize_malware_signatures()
        self._initialize_protection_rules()
        self._setup_family_protection()

    def _initialize_malware_signatures(self):
        """Инициализация сигнатур вредоносного ПО"""
        signatures = [
            MalwareSignature(
                signature_id="virus_generic",
                name="Универсальный вирус",
                description="Общие признаки вирусного ПО",
                malware_type=MalwareType.VIRUS,
                patterns=["virus", "malware", "trojan", "worm"],
                file_hashes=["d41d8cd98f00b204e9800998ecf8427e"],
                confidence_threshold=0.6,
                family_protection=True,
            ),
            MalwareSignature(
                signature_id="ransomware_crypto",
                name="Крипто-вымогатель",
                description="Программы-вымогатели с шифрованием",
                malware_type=MalwareType.RANSOMWARE,
                patterns=["encrypt", "decrypt", "ransom", "bitcoin", "crypto"],
                file_hashes=[],
                confidence_threshold=0.8,
                family_protection=True,
            ),
            MalwareSignature(
                signature_id="spyware_keylogger",
                name="Шпионское ПО и кейлоггеры",
                description="Программы для кражи данных",
                malware_type=MalwareType.SPYWARE,
                patterns=["keylog", "spy", "steal", "password", "credit"],
                file_hashes=[],
                confidence_threshold=0.7,
                family_protection=True,
            ),
            MalwareSignature(
                signature_id="adware_popup",
                name="Рекламное ПО",
                description="Назойливая реклама и всплывающие окна",
                malware_type=MalwareType.ADWARE,
                patterns=["adware", "popup", "advertisement", "banner"],
                file_hashes=[],
                confidence_threshold=0.5,
                family_protection=True,
            ),
            MalwareSignature(
                signature_id="phishing_fake",
                name="Фишинговые сайты",
                description="Поддельные сайты для кражи данных",
                malware_type=MalwareType.PHISHING,
                patterns=["phishing", "fake", "scam", "bank", "paypal"],
                file_hashes=[],
                confidence_threshold=0.8,
                family_protection=True,
            ),
            MalwareSignature(
                signature_id="child_exploitation",
                name="Эксплуатация детей",
                description="Вредоносное ПО для эксплуатации "
                "несовершеннолетних",
                malware_type=MalwareType.SPYWARE,
                patterns=["child", "minor", "exploit", "grooming"],
                file_hashes=[],
                confidence_threshold=0.9,
                family_protection=True,
            ),
            MalwareSignature(
                signature_id="elderly_fraud",
                name="Мошенничество с пожилыми",
                description="Вредоносное ПО для мошенничества с пожилыми",
                malware_type=MalwareType.SPYWARE,
                patterns=["elderly", "senior", "fraud", "scam", "money"],
                file_hashes=[],
                confidence_threshold=0.8,
                family_protection=True,
            ),
            MalwareSignature(
                signature_id="rootkit_hidden",
                name="Руткит",
                description="Скрытое вредоносное ПО",
                malware_type=MalwareType.ROOTKIT,
                patterns=["rootkit", "hidden", "stealth", "kernel"],
                file_hashes=[],
                confidence_threshold=0.8,
                family_protection=True,
            ),
        ]
        for signature in signatures:
            self.malware_signatures[signature.signature_id] = signature
        self.log_activity(
            f"Инициализировано {len(signatures)} сигнатур вредоносного ПО"
        )

    def _initialize_protection_rules(self):
        """Инициализация правил защиты"""
        rules = [
            ProtectionRule(
                rule_id="quarantine_virus",
                name="Карантин вирусов",
                description="Помещение вирусов в карантин",
                malware_type=MalwareType.VIRUS,
                severity_threshold=MalwareSeverity.MEDIUM,
                conditions={"auto_quarantine": True},
                actions=[
                    ProtectionAction.QUARANTINE,
                    ProtectionAction.ALERT_USER,
                ],
                family_specific=True,
            ),
            ProtectionRule(
                rule_id="block_ransomware",
                name="Блокировка вымогателей",
                description="Немедленная блокировка программ-вымогателей",
                malware_type=MalwareType.RANSOMWARE,
                severity_threshold=MalwareSeverity.CRITICAL,
                conditions={"immediate_block": True},
                actions=[
                    ProtectionAction.BLOCK_ACCESS,
                    ProtectionAction.ALERT_ADMIN,
                    ProtectionAction.ISOLATE_NETWORK,
                ],
                family_specific=True,
            ),
            ProtectionRule(
                rule_id="remove_spyware",
                name="Удаление шпионского ПО",
                description="Удаление программ-шпионов",
                malware_type=MalwareType.SPYWARE,
                severity_threshold=MalwareSeverity.HIGH,
                conditions={"auto_remove": True},
                actions=[ProtectionAction.DELETE, ProtectionAction.ALERT_USER],
                family_specific=True,
            ),
            ProtectionRule(
                rule_id="block_adware",
                name="Блокировка рекламного ПО",
                description="Блокировка назойливой рекламы",
                malware_type=MalwareType.ADWARE,
                severity_threshold=MalwareSeverity.LOW,
                conditions={"block_ads": True},
                actions=[
                    ProtectionAction.BLOCK_ACCESS,
                    ProtectionAction.ALERT_USER,
                ],
                family_specific=True,
            ),
            ProtectionRule(
                rule_id="child_protection",
                name="Защита детей",
                description="Специальная защита для детей",
                malware_type=MalwareType.SPYWARE,
                severity_threshold=MalwareSeverity.CRITICAL,
                conditions={
                    "age_group": "child",
                    "inappropriate_content": True,
                },
                actions=[
                    ProtectionAction.BLOCK_ACCESS,
                    ProtectionAction.ALERT_ADMIN,
                    ProtectionAction.QUARANTINE,
                ],
                family_specific=True,
                age_group="child",
            ),
            ProtectionRule(
                rule_id="elderly_protection",
                name="Защита пожилых",
                description="Специальная защита для пожилых",
                malware_type=MalwareType.SPYWARE,
                severity_threshold=MalwareSeverity.HIGH,
                conditions={"age_group": "elderly", "financial_fraud": True},
                actions=[
                    ProtectionAction.BLOCK_ACCESS,
                    ProtectionAction.ALERT_ADMIN,
                    ProtectionAction.QUARANTINE,
                ],
                family_specific=True,
                age_group="elderly",
            ),
            ProtectionRule(
                rule_id="scan_system",
                name="Сканирование системы",
                description="Полное сканирование системы при обнаружении",
                malware_type=MalwareType.VIRUS,
                severity_threshold=MalwareSeverity.HIGH,
                conditions={"full_scan": True},
                actions=[
                    ProtectionAction.SCAN_SYSTEM,
                    ProtectionAction.UPDATE_SIGNATURES,
                ],
                family_specific=True,
            ),
        ]
        for rule in rules:
            self.protection_rules[rule.rule_id] = rule
        self.log_activity(f"Инициализировано {len(rules)} правил защиты")

    def _setup_family_protection(self):
        """Настройка семейной защиты"""
        self.family_protection_settings = {
            "child_protection": {
                "enabled": True,
                "strict_mode": True,
                "parent_notifications": True,
                "blocked_content_types": [
                    "inappropriate",
                    "adult",
                    "violence",
                    "gambling",
                ],
            },
            "elderly_protection": {
                "enabled": True,
                "fraud_detection": True,
                "family_notifications": True,
                "suspicious_behavior_alerts": True,
            },
            "general_family": {
                "unified_protection": True,
                "shared_threat_intelligence": True,
                "family_aware_blocking": True,
                "real_time_scanning": True,
            },
        }
        self.log_activity("Настроена семейная защита от вредоносного ПО")

    def scan_file(
        self,
        file_path: str,
        user_id: Optional[str] = None,
        user_age: Optional[int] = None,
    ) -> List[MalwareDetection]:
        """Сканирование файла на наличие вредоносного ПО"""
        try:
            detections = []
            if not os.path.exists(file_path):
                self.log_activity(f"Файл не найден: {file_path}", "warning")
                return detections
            # Получаем информацию о файле
            file_size = os.path.getsize(file_path)
            file_hash = self._calculate_file_hash(file_path)
            # Проверяем по сигнатурам
            for signature_id, signature in self.malware_signatures.items():
                confidence = self._calculate_signature_confidence(
                    file_path, signature, file_hash
                )
                if confidence >= signature.confidence_threshold:
                    # Создаем обнаружение
                    detection = MalwareDetection(
                        detection_id=self._generate_detection_id(),
                        malware_type=signature.malware_type,
                        severity=self._determine_severity(
                            confidence, signature
                        ),
                        file_path=file_path,
                        file_hash=file_hash,
                        file_size=file_size,
                        timestamp=datetime.now(),
                        description=f"Обнаружен {signature.name}",
                        status=MalwareStatus.DETECTED,
                        metadata={
                            "signature_id": signature_id,
                            "confidence": confidence,
                            "user_id": user_id,
                            "user_age": user_age,
                            "family_protection": signature.family_protection,
                        },
                    )
                    detections.append(detection)
                    self.malware_detections[detection.detection_id] = detection
                    # Добавляем в семейную историю
                    if user_id:
                        if user_id not in self.family_protection_history:
                            self.family_protection_history[user_id] = []
                        self.family_protection_history[user_id].append(
                            detection.detection_id
                        )
                    # Добавляем событие безопасности
                    self.add_security_event(
                        event_type="malware_detected",
                        severity=detection.severity.value,
                        description=f"Обнаружено вредоносное ПО: "
                        f"{signature.name}",
                        source="MalwareProtection",
                        metadata={
                            "detection_id": detection.detection_id,
                            "malware_type": signature.malware_type.value,
                            "severity": detection.severity.value,
                            "confidence": confidence,
                            "file_path": file_path,
                            "file_hash": file_hash,
                            "user_id": user_id,
                            "user_age": user_age,
                        },
                    )
            return detections
        except Exception as e:
            self.logger.error(f"Ошибка сканирования файла {file_path}: {e}")
            return []

    def _calculate_file_hash(self, file_path: str) -> str:
        """Расчет хеша файла"""
        try:
            hash_md5 = hashlib.md5()
            with open(file_path, "rb") as f:
                for chunk in iter(lambda: f.read(4096), b""):
                    hash_md5.update(chunk)
            return hash_md5.hexdigest()
        except Exception as e:
            self.logger.error(f"Ошибка расчета хеша файла {file_path}: {e}")
            return ""

    def _calculate_signature_confidence(
        self, file_path: str, signature: MalwareSignature, file_hash: str
    ) -> float:
        """Расчет уверенности в сигнатуре"""
        try:
            confidence = 0.0
            # Проверка хеша файла
            if file_hash in signature.file_hashes:
                confidence += 0.8
            # Проверка паттернов в имени файла
            file_name = os.path.basename(file_path).lower()
            for pattern in signature.patterns:
                if pattern.lower() in file_name:
                    confidence += 0.2
            # Проверка паттернов в содержимом файла (упрощенная)
            try:
                with open(
                    file_path, "r", encoding="utf-8", errors="ignore"
                ) as f:
                    content = f.read(
                        1024
                    ).lower()  # Читаем первые 1024 символа
                    for pattern in signature.patterns:
                        if pattern.lower() in content:
                            confidence += 0.3
            except Exception:
                pass  # Игнорируем ошибки чтения файла
            # Дополнительные факторы для семейной защиты
            if signature.family_protection:
                confidence += 0.1  # Дополнительная защита для семей
            return min(confidence, 1.0)
        except Exception as e:
            self.logger.error(f"Ошибка расчета уверенности: {e}")
            return 0.0

    def _determine_severity(
        self, confidence: float, signature: MalwareSignature
    ) -> MalwareSeverity:
        """Определение серьезности вредоносного ПО"""
        if confidence >= 0.9:
            return MalwareSeverity.CRITICAL
        elif confidence >= 0.7:
            return MalwareSeverity.HIGH
        elif confidence >= 0.5:
            return MalwareSeverity.MEDIUM
        else:
            return MalwareSeverity.LOW

    def protect_against_malware(
        self, detection: MalwareDetection
    ) -> List[ProtectionAction]:
        """Защита от вредоносного ПО"""
        try:
            applied_actions = []
            # Находим подходящие правила
            applicable_rules = self._find_applicable_rules(detection)
            for rule in applicable_rules:
                if self._evaluate_rule_conditions(detection, rule):
                    # Применяем действия правила
                    for action in rule.actions:
                        if self._apply_protection_action(detection, action):
                            applied_actions.append(action)
                    # Обновляем статус обнаружения
                    detection.status = MalwareStatus.QUARANTINED
                    detection.protection_actions.extend(applied_actions)
            # Добавляем событие защиты
            if applied_actions:
                self.add_security_event(
                    event_type="malware_protected",
                    severity=detection.severity.value,
                    description=f"Защита от вредоносного ПО: "
                    f"{detection.description}",
                    source="MalwareProtection",
                    metadata={
                        "detection_id": detection.detection_id,
                        "malware_type": detection.malware_type.value,
                        "severity": detection.severity.value,
                        "applied_actions": [
                            action.value for action in applied_actions
                        ],
                        "file_path": detection.file_path,
                        "user_id": detection.metadata.get("user_id"),
                    },
                )
            return applied_actions
        except Exception as e:
            self.logger.error(f"Ошибка защиты от вредоносного ПО: {e}")
            return []

    def _find_applicable_rules(
        self, detection: MalwareDetection
    ) -> List[ProtectionRule]:
        """Поиск применимых правил"""
        applicable_rules = []
        for rule in self.protection_rules.values():
            if (
                rule.enabled
                and rule.malware_type == detection.malware_type
                and self._compare_severity(
                    detection.severity, rule.severity_threshold
                )
            ):
                applicable_rules.append(rule)
        return applicable_rules

    def _compare_severity(
        self,
        detection_severity: MalwareSeverity,
        rule_threshold: MalwareSeverity,
    ) -> bool:
        """Сравнение серьезности"""
        severity_order = {
            MalwareSeverity.LOW: 1,
            MalwareSeverity.MEDIUM: 2,
            MalwareSeverity.HIGH: 3,
            MalwareSeverity.CRITICAL: 4,
        }
        return (
            severity_order[detection_severity]
            >= severity_order[rule_threshold]
        )

    def _evaluate_rule_conditions(
        self, detection: MalwareDetection, rule: ProtectionRule
    ) -> bool:
        """Оценка условий правила"""
        try:
            conditions = rule.conditions
            # Проверка семейных условий
            if rule.family_specific:
                if (
                    rule.age_group == "child"
                    and detection.metadata.get("user_age", 0) >= 18
                ):
                    return False
                elif (
                    rule.age_group == "elderly"
                    and detection.metadata.get("user_age", 0) < 65
                ):
                    return False
            # Проверка условий защиты
            if (
                "auto_quarantine" in conditions
                and not self.automatic_quarantine
            ):
                return False
            if "immediate_block" in conditions:
                return True  # Немедленная блокировка
            if "auto_remove" in conditions:
                return True  # Автоматическое удаление
            return True
        except Exception as e:
            self.logger.error(f"Ошибка оценки условий правила: {e}")
            return False

    def _apply_protection_action(
        self, detection: MalwareDetection, action: ProtectionAction
    ) -> bool:
        """Применение действия защиты"""
        try:
            if action == ProtectionAction.QUARANTINE:
                self.quarantined_files.add(detection.file_path)
                self.log_activity(
                    f"Файл помещен в карантин: {detection.file_path}"
                )
            elif action == ProtectionAction.DELETE:
                try:
                    os.remove(detection.file_path)
                    self.log_activity(f"Файл удален: {detection.file_path}")
                except Exception as e:
                    self.log_activity(
                        f"Ошибка удаления файла {detection.file_path}: {e}",
                        "error",
                    )
            elif action == ProtectionAction.BLOCK_ACCESS:
                self.blocked_hashes.add(detection.file_hash)
                self.log_activity(
                    f"Заблокирован доступ к файлу: {detection.file_path}"
                )
            elif action == ProtectionAction.ALERT_USER:
                self.log_activity(
                    f"Отправлено уведомление пользователю о "
                    f"вредоносном ПО: {detection.detection_id}"
                )
            elif action == ProtectionAction.ALERT_ADMIN:
                self.log_activity(
                    f"Отправлено уведомление администратору о "
                    f"вредоносном ПО: {detection.detection_id}"
                )
            elif action == ProtectionAction.SCAN_SYSTEM:
                self.log_activity("Запущено полное сканирование системы")
            elif action == ProtectionAction.UPDATE_SIGNATURES:
                self.log_activity("Обновление сигнатур вредоносного ПО")
            elif action == ProtectionAction.ISOLATE_NETWORK:
                self.log_activity(
                    "Изоляция сети для предотвращения распространения"
                )
            return True
        except Exception as e:
            self.logger.error(f"Ошибка применения действия {action}: {e}")
            return False

    def _generate_detection_id(self) -> str:
        """Генерация ID обнаружения"""
        timestamp = str(int(time.time() * 1000))
        random_part = hashlib.md5(timestamp.encode()).hexdigest()[:8]
        return f"malware_{timestamp}_{random_part}"

    def get_malware_summary(
        self, user_id: Optional[str] = None
    ) -> Dict[str, Any]:
        """Получение сводки по вредоносному ПО"""
        try:
            if user_id:
                # Сводка для конкретного пользователя
                user_detections = [
                    detection
                    for detection in self.malware_detections.values()
                    if detection.metadata.get("user_id") == user_id
                ]
            else:
                # Общая сводка
                user_detections = list(self.malware_detections.values())
            summary = {
                "total_detections": len(user_detections),
                "quarantined_files": len(
                    [
                        d
                        for d in user_detections
                        if d.status == MalwareStatus.QUARANTINED
                    ]
                ),
                "removed_files": len(
                    [
                        d
                        for d in user_detections
                        if d.status == MalwareStatus.REMOVED
                    ]
                ),
                "by_severity": {
                    severity.value: len(
                        [d for d in user_detections if d.severity == severity]
                    )
                    for severity in MalwareSeverity
                },
                "by_type": {
                    malware_type.value: len(
                        [
                            d
                            for d in user_detections
                            if d.malware_type == malware_type
                        ]
                    )
                    for malware_type in MalwareType
                },
                "recent_detections": [
                    {
                        "detection_id": detection.detection_id,
                        "type": detection.malware_type.value,
                        "severity": detection.severity.value,
                        "file_path": detection.file_path,
                        "timestamp": detection.timestamp.isoformat(),
                        "status": detection.status.value,
                    }
                    for detection in sorted(
                        user_detections,
                        key=lambda x: x.timestamp,
                        reverse=True,
                    )[:10]
                ],
            }
            return summary
        except Exception as e:
            self.logger.error(f"Ошибка получения сводки: {e}")
            return {}

    def get_family_protection_status(self) -> Dict[str, Any]:
        """Получение статуса семейной защиты"""
        try:
            status = {
                "family_protection_enabled": self.family_protection_enabled,
                "child_protection_mode": self.child_protection_mode,
                "elderly_protection_mode": self.elderly_protection_mode,
                "real_time_scanning": self.real_time_scanning,
                "automatic_quarantine": self.automatic_quarantine,
                "active_rules": len(
                    [r for r in self.protection_rules.values() if r.enabled]
                ),
                "family_specific_rules": len(
                    [
                        r
                        for r in self.protection_rules.values()
                        if r.family_specific
                    ]
                ),
                "quarantined_files_count": len(self.quarantined_files),
                "blocked_hashes_count": len(self.blocked_hashes),
                "protection_settings": self.family_protection_settings,
                "family_history": {
                    user_id: len(detection_ids)
                    for user_id, detection_ids in
                    self.family_protection_history.items()
                },
            }
            return status
        except Exception as e:
            self.logger.error(f"Ошибка получения статуса семейной защиты: {e}")
            return {}

    def get_status(self) -> Dict[str, Any]:
        """Получение статуса сервиса"""
        try:
            return {
                "service_name": self.name,
                "status": self.status.value,
                "malware_signatures": len(self.malware_signatures),
                "protection_rules": len(self.protection_rules),
                "total_detections": len(self.malware_detections),
                "quarantined_files": len(self.quarantined_files),
                "blocked_hashes": len(self.blocked_hashes),
                "family_protection_enabled": self.family_protection_enabled,
                "real_time_scanning": self.real_time_scanning,
                "uptime": (
                    (datetime.now() - self.start_time).total_seconds()
                    if hasattr(self, "start_time") and self.start_time
                    else 0
                ),
            }
        except Exception as e:
            self.logger.error(f"Ошибка получения статуса: {e}")
            return {}
