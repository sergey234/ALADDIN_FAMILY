#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ElderlyProtectionInterface - –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞—â–∏—Ç—ã –¥–ª—è –ø–æ–∂–∏–ª—ã—Ö –ª—é–¥–µ–π
–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å "–ó–∞—â–∏—Ç–Ω–∏–∫ –ü–µ–Ω—Å–∏–æ–Ω–µ—Ä–∞"

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç:
- –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–æ–∂–∏–ª—ã—Ö –ª—é–¥–µ–π
- –ö—Ä—É–ø–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –∏ –ø–æ–Ω—è—Ç–Ω—ã–µ –∏–∫–æ–Ω–∫–∏
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∑–∞—â–∏—Ç—É –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
- –ì–æ–ª–æ—Å–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
- –≠–∫—Å—Ç—Ä–µ–Ω–Ω—É—é —Å–≤—è–∑—å —Å —Å–µ–º—å–µ–π
- –û–±—É—á–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏:
- –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∫—Ä—É–ø–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã –∏ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã–µ —Ü–≤–µ—Ç–∞
- –ü—Ä–∏–º–µ–Ω—è–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
- –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç —Å —Å–∏—Å—Ç–µ–º–∞–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
- –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–æ—Å—Ç—ã–µ –º–µ—Ç–∞—Ñ–æ—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
- –ü—Ä–∏–º–µ–Ω—è–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω
- –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç —Å —Å–µ–º–µ–π–Ω—ã–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º–∏

–ê–≤—Ç–æ—Ä: ALADDIN Security System
–í–µ—Ä—Å–∏—è: 1.0
–î–∞—Ç–∞: 2025-09-08
–õ–∏—Ü–µ–Ω–∑–∏—è: MIT
"""

import asyncio
import logging
from dataclasses import dataclass
from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional, Tuple

from core.base import SecurityBase


class InterfaceMode(Enum):
    """–†–µ–∂–∏–º—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""

    SIMPLE = "simple"  # –ü—Ä–æ—Å—Ç–æ–π —Ä–µ–∂–∏–º
    LARGE_TEXT = "large_text"  # –ö—Ä—É–ø–Ω—ã–π —Ç–µ–∫—Å—Ç
    VOICE_ONLY = "voice_only"  # –¢–æ–ª—å–∫–æ –≥–æ–ª–æ—Å
    EMERGENCY = "emergency"  # –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º
    LEARNING = "learning"  # –†–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è


class ProtectionLevel(Enum):
    """–£—Ä–æ–≤–Ω–∏ –∑–∞—â–∏—Ç—ã"""

    BASIC = "basic"  # –ë–∞–∑–æ–≤–∞—è –∑–∞—â–∏—Ç–∞
    ENHANCED = "enhanced"  # –£–ª—É—á—à–µ–Ω–Ω–∞—è –∑–∞—â–∏—Ç–∞
    MAXIMUM = "maximum"  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞
    EMERGENCY = "emergency"  # –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –∑–∞—â–∏—Ç–∞


class VoiceCommand(Enum):
    """–ì–æ–ª–æ—Å–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã"""

    HELP = "help"  # –ü–æ–º–æ—â—å
    EMERGENCY = "emergency"  # –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å
    CALL_FAMILY = "call_family"  # –ü–æ–∑–≤–æ–Ω–∏—Ç—å —Å–µ–º—å–µ
    BLOCK_CALL = "block_call"  # –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∑–≤–æ–Ω–æ–∫
    CHECK_SECURITY = "check_security"  # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
    LEARN_SAFETY = "learn_safety"  # –ò–∑—É—á–∏—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å


@dataclass
class UserProfile:
    """–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    user_id: str
    name: str
    age: int
    tech_level: str  # "beginner", "intermediate", "advanced"
    preferred_mode: InterfaceMode
    protection_level: ProtectionLevel
    family_contacts: List[str]
    emergency_contacts: List[str]
    voice_enabled: bool
    learning_enabled: bool
    created_at: datetime
    last_activity: datetime


@dataclass
class SafetyLesson:
    """–£—Ä–æ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""

    lesson_id: str
    title: str
    description: str
    content: str
    difficulty: str
    duration_minutes: int
    completed: bool
    completion_date: Optional[datetime] = None


@dataclass
class InterfaceElement:
    """–≠–ª–µ–º–µ–Ω—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""

    element_id: str
    element_type: str  # "button", "text", "icon", "voice_command"
    text: str
    icon: str
    size: str  # "small", "medium", "large", "extra_large"
    color: str
    position: Tuple[int, int]
    action: str
    is_visible: bool = True


class ElderlyProtectionInterface(SecurityBase):
    """
    –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞—â–∏—Ç—ã –¥–ª—è –ø–æ–∂–∏–ª—ã—Ö –ª—é–¥–µ–π
    –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å "–ó–∞—â–∏—Ç–Ω–∏–∫ –ü–µ–Ω—Å–∏–æ–Ω–µ—Ä–∞"
    """

    def __init__(self, config: Optional[Dict[str, Any]] = None):
        super().__init__("ElderlyProtectionInterface", config)
        self.logger = logging.getLogger(
            f"{self.__class__.__module__}.{self.__class__.__name__}"
        )

        # –ü—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.user_profiles = {}

        # –£—Ä–æ–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        self.safety_lessons = self._initialize_safety_lessons()

        # –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.interface_elements = self._initialize_interface_elements()

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.active_users = 0
        self.voice_commands_processed = 0
        self.lessons_completed = 0
        self.emergency_activations = 0

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.default_font_size = 18
        self.large_font_size = 24
        self.extra_large_font_size = 32
        self.contrast_ratio = 4.5  # WCAG AA —Å—Ç–∞–Ω–¥–∞—Ä—Ç

        self.logger.info("ElderlyProtectionInterface –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def _initialize_safety_lessons(self) -> Dict[str, SafetyLesson]:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Ä–æ–∫–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        return {
            "phone_scam_lesson": SafetyLesson(
                lesson_id="phone_scam_001",
                title="–ó–∞—â–∏—Ç–∞ –æ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã—Ö –º–æ—à–µ–Ω–Ω–∏–∫–æ–≤",
                description="–£—á–∏–º—Å—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã—Ö –º–æ—à–µ–Ω–Ω–∏–∫–æ–≤",
                content=(
                    "–¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–µ –º–æ—à–µ–Ω–Ω–∏–∫–∏ —á–∞—Å—Ç–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç—Å—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏ "
                    "–±–∞–Ω–∫–æ–≤, "
                    "–§–°–ë, –ø—Ä–æ–∫—É—Ä–∞—Ç—É—Ä—ã. –û–Ω–∏ –ø—Ä–æ—Å—è—Ç —Å—Ä–æ—á–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏ –∏–ª–∏ "
                    "—Å–æ–æ–±—â–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã. –ü–æ–º–Ω–∏—Ç–µ: –Ω–∞—Å—Ç–æ—è—â–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ "
                    "–Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø—Ä–æ—Å—è—Ç –¥–µ–Ω—å–≥–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É!"
                ),
                difficulty="beginner",
                duration_minutes=5,
                completed=False,
            ),
            "deepfake_lesson": SafetyLesson(
                lesson_id="deepfake_001",
                title="–ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–¥–¥–µ–ª—å–Ω—ã—Ö –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–æ–≤",
                description="–£—á–∏–º—Å—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å –ø–æ–¥–¥–µ–ª—å–Ω—ã–µ –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∏",
                content=(
                    "–ú–æ—à–µ–Ω–Ω–∏–∫–∏ –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–¥–¥–µ–ª—å–Ω—ã–µ –≤–∏–¥–µ–æ —Å –ª–∏—Ü–∞–º–∏ "
                    "–≤–∞—à–∏—Ö "
                    "–∑–Ω–∞–∫–æ–º—ã—Ö. –ï—Å–ª–∏ –∫—Ç–æ-—Ç–æ –∑–≤–æ–Ω–∏—Ç –ø–æ –≤–∏–¥–µ–æ –∏ –ø—Ä–æ—Å–∏—Ç –¥–µ–Ω—å–≥–∏, "
                    "–≤—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —á–µ—Ä–µ–∑ –¥—Ä—É–≥–æ–π –∫–∞–Ω–∞–ª —Å–≤—è–∑–∏!"
                ),
                difficulty="intermediate",
                duration_minutes=7,
                completed=False,
            ),
            "financial_safety_lesson": SafetyLesson(
                lesson_id="financial_001",
                title="–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å",
                description="–ü—Ä–∞–≤–∏–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π",
                content=(
                    "–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç–µ –¥–µ–Ω—å–≥–∏ –Ω–µ–∑–Ω–∞–∫–æ–º—ã–º –ª—é–¥—è–º. –í—Å–µ–≥–¥–∞ "
                    "–ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è. –ü—Ä–∏ —Å–æ–º–Ω–µ–Ω–∏—è—Ö - –∑–≤–æ–Ω–∏—Ç–µ —Å–µ–º—å–µ –∏–ª–∏ "
                    "–≤ –±–∞–Ω–∫!"
                ),
                difficulty="beginner",
                duration_minutes=6,
                completed=False,
            ),
            "emergency_lesson": SafetyLesson(
                lesson_id="emergency_001",
                title="–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å",
                description="–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —ç–∫—Å—Ç—Ä–µ–Ω–Ω—É—é –ø–æ–º–æ—â—å",
                content=(
                    "–ï—Å–ª–∏ –≤—ã –ø–æ–¥–æ–∑—Ä–µ–≤–∞–µ—Ç–µ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "
                    "'–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å' –∏–ª–∏ —Å–∫–∞–∂–∏—Ç–µ '–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å'. "
                    "–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–≤–µ–¥–æ–º–∏—Ç –≤–∞—à—É —Å–µ–º—å—é!"
                ),
                difficulty="beginner",
                duration_minutes=3,
                completed=False,
            ),
        }

    def _initialize_interface_elements(self) -> Dict[str, InterfaceElement]:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        return {
            "emergency_button": InterfaceElement(
                element_id="emergency_btn",
                element_type="button",
                text="–≠–ö–°–¢–†–ï–ù–ù–ê–Ø –ü–û–ú–û–©–¨",
                icon="üö®",
                size="extra_large",
                color="#FF0000",
                position=(50, 50),
                action="trigger_emergency",
            ),
            "call_family_button": InterfaceElement(
                element_id="family_btn",
                element_type="button",
                text="–ü–û–ó–í–û–ù–ò–¢–¨ –°–ï–ú–¨–ï",
                icon="üë®‚Äçüë©‚Äçüëß‚Äçüë¶",
                size="large",
                color="#00AA00",
                position=(50, 150),
                action="call_family",
            ),
            "check_security_button": InterfaceElement(
                element_id="security_btn",
                element_type="button",
                text="–ü–†–û–í–ï–†–ò–¢–¨ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨",
                icon="üõ°Ô∏è",
                size="large",
                color="#0066CC",
                position=(50, 250),
                action="check_security",
            ),
            "learn_safety_button": InterfaceElement(
                element_id="learn_btn",
                element_type="button",
                text="–ò–ó–£–ß–ò–¢–¨ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨",
                icon="üìö",
                size="large",
                color="#FF6600",
                position=(50, 350),
                action="learn_safety",
            ),
            "status_text": InterfaceElement(
                element_id="status_text",
                element_type="text",
                text="–°–∏—Å—Ç–µ–º–∞ –∑–∞—â–∏—Ç—ã –∞–∫—Ç–∏–≤–Ω–∞",
                icon="",
                size="medium",
                color="#000000",
                position=(50, 450),
                action="",
            ),
        }

    async def create_user_profile(
        self, user_id: str, name: str, age: int, tech_level: str = "beginner"
    ) -> UserProfile:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            name: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            age: –í–æ–∑—Ä–∞—Å—Ç
            tech_level: –£—Ä–æ–≤–µ–Ω—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –Ω–∞–≤—ã–∫–æ–≤

        Returns:
            UserProfile: –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        try:
            self.logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ –∏ –Ω–∞–≤—ã–∫–æ–≤
            if age >= 80 or tech_level == "beginner":
                preferred_mode = InterfaceMode.SIMPLE
                protection_level = ProtectionLevel.MAXIMUM
            elif age >= 70 or tech_level == "intermediate":
                preferred_mode = InterfaceMode.LARGE_TEXT
                protection_level = ProtectionLevel.ENHANCED
            else:
                preferred_mode = InterfaceMode.SIMPLE
                protection_level = ProtectionLevel.BASIC

            profile = UserProfile(
                user_id=user_id,
                name=name,
                age=age,
                tech_level=tech_level,
                preferred_mode=preferred_mode,
                protection_level=protection_level,
                family_contacts=[],
                emergency_contacts=[],
                voice_enabled=True,
                learning_enabled=True,
                created_at=datetime.now(),
                last_activity=datetime.now(),
            )

            self.user_profiles[user_id] = profile
            self.active_users += 1

            self.logger.info(f"–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–æ–∑–¥–∞–Ω")
            return profile

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return None

    async def get_interface_for_user(self, user_id: str) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            Dict[str, Any]: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        """
        try:
            if user_id not in self.user_profiles:
                return {"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}

            profile = self.user_profiles[user_id]

            # –ê–¥–∞–ø—Ç–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            interface_config = {
                "user_id": user_id,
                "mode": profile.preferred_mode.value,
                "protection_level": profile.protection_level.value,
                "font_size": self._get_font_size_for_user(profile),
                "contrast_ratio": self.contrast_ratio,
                "elements": self._get_elements_for_user(profile),
                "voice_commands": self._get_voice_commands_for_user(profile),
                "safety_lessons": self._get_lessons_for_user(profile),
            }

            return interface_config

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {e}")
            return {"error": str(e)}

    def _get_font_size_for_user(self, profile: UserProfile) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —à—Ä–∏—Ñ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if profile.age >= 80:
            return self.extra_large_font_size
        elif profile.age >= 70:
            return self.large_font_size
        else:
            return self.default_font_size

    def _get_elements_for_user(
        self, profile: UserProfile
    ) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        elements = []

        for element in self.interface_elements.values():
            # –ê–¥–∞–ø—Ç–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if profile.age >= 80:
                element_size = "extra_large"
            elif profile.age >= 70:
                element_size = "large"
            else:
                element_size = element.size

            elements.append(
                {
                    "id": element.element_id,
                    "type": element.element_type,
                    "text": element.text,
                    "icon": element.icon,
                    "size": element_size,
                    "color": element.color,
                    "position": element.position,
                    "action": element.action,
                    "visible": element.is_visible,
                }
            )

        return elements

    def _get_voice_commands_for_user(
        self, profile: UserProfile
    ) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not profile.voice_enabled:
            return []

        commands = []
        for command in VoiceCommand:
            commands.append(
                {
                    "command": command.value,
                    "description": self._get_command_description(command),
                    "action": self._get_command_action(command),
                }
            )

        return commands

    def _get_command_description(self, command: VoiceCommand) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã"""
        descriptions = {
            VoiceCommand.HELP: "–ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å",
            VoiceCommand.EMERGENCY: "–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å",
            VoiceCommand.CALL_FAMILY: "–ü–æ–∑–≤–æ–Ω–∏—Ç—å —Å–µ–º—å–µ",
            VoiceCommand.BLOCK_CALL: "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∑–≤–æ–Ω–æ–∫",
            VoiceCommand.CHECK_SECURITY: "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å",
            VoiceCommand.LEARN_SAFETY: "–ò–∑—É—á–∏—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å",
        }
        return descriptions.get(command, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

    def _get_command_action(self, command: VoiceCommand) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã"""
        actions = {
            VoiceCommand.HELP: "show_help",
            VoiceCommand.EMERGENCY: "trigger_emergency",
            VoiceCommand.CALL_FAMILY: "call_family",
            VoiceCommand.BLOCK_CALL: "block_current_call",
            VoiceCommand.CHECK_SECURITY: "check_security_status",
            VoiceCommand.LEARN_SAFETY: "show_safety_lessons",
        }
        return actions.get(command, "unknown_action")

    def _get_lessons_for_user(
        self, profile: UserProfile
    ) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–∫–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not profile.learning_enabled:
            return []

        lessons = []
        for lesson in self.safety_lessons.values():
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —É—Ä–æ–≤–Ω—é —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
            if (
                profile.tech_level == "beginner"
                and lesson.difficulty != "beginner"
            ):
                continue
            elif (
                profile.tech_level == "intermediate"
                and lesson.difficulty == "advanced"
            ):
                continue

            lessons.append(
                {
                    "id": lesson.lesson_id,
                    "title": lesson.title,
                    "description": lesson.description,
                    "difficulty": lesson.difficulty,
                    "duration": lesson.duration_minutes,
                    "completed": lesson.completed,
                }
            )

        return lessons

    async def process_voice_command(
        self, user_id: str, command: str
    ) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            command: –ì–æ–ª–æ—Å–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞

        Returns:
            Dict[str, Any]: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        try:
            self.logger.info(
                f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã –¥–ª—è {user_id}: {command}"
            )

            if user_id not in self.user_profiles:
                return {"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}

            profile = self.user_profiles[user_id]

            if not profile.voice_enabled:
                return {"error": "–ì–æ–ª–æ—Å–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã"}

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã
            command_lower = command.lower().strip()

            if "–ø–æ–º–æ—â—å" in command_lower or "help" in command_lower:
                return await self._handle_help_command(user_id)
            elif "—ç–∫—Å—Ç—Ä–µ–Ω–Ω" in command_lower or "emergency" in command_lower:
                return await self._handle_emergency_command(user_id)
            elif "—Å–µ–º—å" in command_lower or "family" in command_lower:
                return await self._handle_call_family_command(user_id)
            elif "–±–ª–æ–∫–∏—Ä" in command_lower or "block" in command_lower:
                return await self._handle_block_call_command(user_id)
            elif "–±–µ–∑–æ–ø–∞—Å–Ω" in command_lower or "security" in command_lower:
                return await self._handle_check_security_command(user_id)
            elif "–∏–∑—É—á" in command_lower or "learn" in command_lower:
                return await self._handle_learn_safety_command(user_id)
            else:
                return {
                    "error": "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞",
                    "suggestion": "–°–∫–∞–∂–∏—Ç–µ '–ø–æ–º–æ—â—å' –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥",
                }

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã: {e}")
            return {"error": str(e)}

    async def _handle_help_command(self, user_id: str) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø–æ–º–æ—â–∏"""
        return {
            "action": "show_help",
            "message": (
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: —ç–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å, –ø–æ–∑–≤–æ–Ω–∏—Ç—å —Å–µ–º—å–µ, "
                "–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∑–≤–æ–Ω–æ–∫, –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å, "
                "–∏–∑—É—á–∏—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å"
            ),
            "voice_response": (
                "–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é. –°–∫–∞–∂–∏—Ç–µ "
                "'—ç–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å' "
                "–¥–ª—è —Å—Ä–æ—á–Ω–æ–π –ø–æ–º–æ—â–∏, '–ø–æ–∑–≤–æ–Ω–∏—Ç—å —Å–µ–º—å–µ' –¥–ª—è —Å–≤—è–∑–∏ —Å —Ä–æ–¥–Ω—ã–º–∏."
            ),
        }

    async def _handle_emergency_command(self, user_id: str) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –ø–æ–º–æ—â–∏"""
        self.emergency_activations += 1
        return {
            "action": "trigger_emergency",
            "message": (
                "–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞! –í–∞—à–∞ —Å–µ–º—å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∞."
            ),
            "voice_response": (
                "–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞! –í–∞—à–∞ —Å–µ–º—å—è –ø–æ–ª—É—á–∏–ª–∞ "
                "—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ. "
                "–û—Å—Ç–∞–≤–∞–π—Ç–µ—Å—å —Å–ø–æ–∫–æ–π–Ω—ã, –ø–æ–º–æ—â—å —É–∂–µ –≤ –ø—É—Ç–∏."
            ),
        }

    async def _handle_call_family_command(
        self, user_id: str
    ) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –∑–≤–æ–Ω–∫–∞ —Å–µ–º—å–µ"""
        return {
            "action": "call_family",
            "message": "–°–≤—è–∑—ã–≤–∞—é—Å—å —Å —Å–µ–º—å–µ–π...",
            "voice_response": (
                "–°–µ–π—á–∞—Å —Å–≤—è–∂—É –≤–∞—Å —Å —Å–µ–º—å–µ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."
            ),
        }

    async def _handle_block_call_command(self, user_id: str) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∑–≤–æ–Ω–∫–∞"""
        return {
            "action": "block_current_call",
            "message": "–¢–µ–∫—É—â–∏–π –∑–≤–æ–Ω–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω",
            "voice_response": (
                "–ó–≤–æ–Ω–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª –º–æ—à–µ–Ω–Ω–∏–∫, –≤–∞—à–∞ —Å–µ–º—å—è "
                "—É–≤–µ–¥–æ–º–ª–µ–Ω–∞."
            ),
        }

    async def _handle_check_security_command(
        self, user_id: str
    ) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        return {
            "action": "check_security",
            "message": (
                "–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç "
                "–Ω–æ—Ä–º–∞–ª—å–Ω–æ."
            ),
            "voice_response": (
                "–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—Å–µ —Å–∏—Å—Ç–µ–º—ã –∑–∞—â–∏—Ç—ã –∞–∫—Ç–∏–≤–Ω—ã "
                "–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ."
            ),
        }

    async def _handle_learn_safety_command(
        self, user_id: str
    ) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –∏–∑—É—á–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        return {
            "action": "show_safety_lessons",
            "message": "–û—Ç–∫—Ä—ã–≤–∞—é —É—Ä–æ–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...",
            "voice_response": (
                "–û—Ç–∫—Ä—ã–≤–∞—é —É—Ä–æ–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è."
            ),
        }

    async def complete_safety_lesson(
        self, user_id: str, lesson_id: str
    ) -> bool:
        """
        –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —É—Ä–æ–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            lesson_id: ID —É—Ä–æ–∫–∞

        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        """
        try:
            if lesson_id in self.safety_lessons:
                self.safety_lessons[lesson_id].completed = True
                self.safety_lessons[lesson_id].completion_date = datetime.now()
                self.lessons_completed += 1

                self.logger.info(
                    f"–£—Ä–æ–∫ {lesson_id} –∑–∞–≤–µ—Ä—à–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}"
                )
                return True

            return False

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Ä–æ–∫–∞: {e}")
            return False

    async def get_user_statistics(self, user_id: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id not in self.user_profiles:
            return {"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}

        profile = self.user_profiles[user_id]
        completed_lessons = sum(
            1 for lesson in self.safety_lessons.values() if lesson.completed
        )

        return {
            "user_id": user_id,
            "name": profile.name,
            "age": profile.age,
            "tech_level": profile.tech_level,
            "interface_mode": profile.preferred_mode.value,
            "protection_level": profile.protection_level.value,
            "completed_lessons": completed_lessons,
            "total_lessons": len(self.safety_lessons),
            "voice_commands_used": self.voice_commands_processed,
            "last_activity": profile.last_activity.isoformat(),
        }

    async def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        return {
            "interface_name": "ElderlyProtectionInterface",
            "status": "active",
            "version": "1.0",
            "features": [
                "–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å",
                "–ö—Ä—É–ø–Ω—ã–µ –∫–Ω–æ–ø–∫–∏",
                "–ì–æ–ª–æ—Å–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã",
                "–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è —Å–≤—è–∑—å",
                "–û–±—É—á–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
                "–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω",
            ],
            "active_users": self.active_users,
            "total_lessons": len(self.safety_lessons),
            "completed_lessons": self.lessons_completed,
            "emergency_activations": self.emergency_activations,
            "voice_commands_processed": self.voice_commands_processed,
        }

    async def get_user_profile(self, user_id: str) -> Optional[UserProfile]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            UserProfile: –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        try:
            return self.user_profiles.get(user_id)
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return None

    async def update_user_profile(
        self, 
        user_id: str, 
        **updates
    ) -> Optional[UserProfile]:
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            **updates: –ü–æ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            
        Returns:
            UserProfile: –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        try:
            if user_id not in self.user_profiles:
                return None
            
            profile = self.user_profiles[user_id]
            for key, value in updates.items():
                if hasattr(profile, key):
                    setattr(profile, key, value)
            
            self.user_profiles[user_id] = profile
            return profile
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return None

    async def get_safety_lessons(self, user_id: str) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–∫–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            Dict[str, Any]: –°–ª–æ–≤–∞—Ä—å —Å —É—Ä–æ–∫–∞–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        """
        try:
            if user_id not in self.user_profiles:
                return {"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}
            
            profile = self.user_profiles[user_id]
            lessons = self._get_lessons_for_user(profile)
            
            return {
                "lessons": lessons,
                "total_lessons": len(lessons),
                "completed_lessons": sum(1 for lesson in lessons if lesson.get("completed", False))
            }
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ä–æ–∫–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {e}")
            return {"error": str(e)}

    async def get_emergency_contacts(self, user_id: str) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            Dict[str, Any]: –°–ª–æ–≤–∞—Ä—å —Å —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–º–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏
        """
        try:
            if user_id not in self.user_profiles:
                return {"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}
            
            profile = self.user_profiles[user_id]
            return {
                "emergency_contacts": profile.emergency_contacts,
                "family_contacts": profile.family_contacts,
                "total_contacts": len(profile.emergency_contacts) + len(profile.family_contacts)
            }
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {e}")
            return {"error": str(e)}

    async def add_emergency_contact(
        self, 
        user_id: str, 
        contact: str
    ) -> Dict[str, Any]:
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            contact: –ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            
        Returns:
            Dict[str, Any]: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        try:
            if user_id not in self.user_profiles:
                return {"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}
            
            profile = self.user_profiles[user_id]
            if contact not in profile.emergency_contacts:
                profile.emergency_contacts.append(contact)
                self.user_profiles[user_id] = profile
                return {"success": True, "message": "–ö–æ–Ω—Ç–∞–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω"}
            else:
                return {"success": False, "message": "–ö–æ–Ω—Ç–∞–∫—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"}
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞: {e}")
            return {"error": str(e)}

    async def remove_emergency_contact(
        self, 
        user_id: str, 
        contact: str
    ) -> Dict[str, Any]:
        """
        –£–¥–∞–ª–µ–Ω–∏–µ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            contact: –ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            
        Returns:
            Dict[str, Any]: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        try:
            if user_id not in self.user_profiles:
                return {"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}
            
            profile = self.user_profiles[user_id]
            if contact in profile.emergency_contacts:
                profile.emergency_contacts.remove(contact)
                self.user_profiles[user_id] = profile
                return {"success": True, "message": "–ö–æ–Ω—Ç–∞–∫—Ç —É–¥–∞–ª–µ–Ω"}
            else:
                return {"success": False, "message": "–ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"}
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞: {e}")
            return {"error": str(e)}

    async def get_interface_mode(self, user_id: str) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            Dict[str, Any]: –†–µ–∂–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        """
        try:
            if user_id not in self.user_profiles:
                return {"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}
            
            profile = self.user_profiles[user_id]
            return {
                "interface_mode": profile.preferred_mode.value,
                "protection_level": profile.protection_level.value,
                "voice_enabled": profile.voice_enabled,
                "learning_enabled": profile.learning_enabled
            }
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {e}")
            return {"error": str(e)}

    async def set_interface_mode(
        self, 
        user_id: str, 
        mode: str,
        protection_level: str = None
    ) -> Dict[str, Any]:
        """
        –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∂–∏–º–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            mode: –†–µ–∂–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            protection_level: –£—Ä–æ–≤–µ–Ω—å –∑–∞—â–∏—Ç—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            Dict[str, Any]: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        try:
            if user_id not in self.user_profiles:
                return {"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}
            
            profile = self.user_profiles[user_id]
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            try:
                profile.preferred_mode = InterfaceMode(mode)
            except ValueError:
                return {"error": f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ä–µ–∂–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {mode}"}
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –∑–∞—â–∏—Ç—ã –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
            if protection_level:
                try:
                    profile.protection_level = ProtectionLevel(protection_level)
                except ValueError:
                    return {"error": f"–ù–µ–≤–µ—Ä–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∑–∞—â–∏—Ç—ã: {protection_level}"}
            
            self.user_profiles[user_id] = profile
            return {
                "success": True, 
                "message": "–†–µ–∂–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω",
                "interface_mode": profile.preferred_mode.value,
                "protection_level": profile.protection_level.value
            }
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–µ–∂–∏–º–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {e}")
            return {"error": str(e)}


if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    async def test_elderly_protection_interface():
        interface = ElderlyProtectionInterface()

        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        profile = await interface.create_user_profile(
            "elderly_001", "–ê–Ω–Ω–∞ –ò–≤–∞–Ω–æ–≤–Ω–∞", 75, "beginner"
        )
        print(f"–ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω: {profile}")

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        ui_config = await interface.get_interface_for_user("elderly_001")
        print(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {ui_config}")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã
        result = await interface.process_voice_command(
            "elderly_001", "—ç–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å"
        )
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã: {result}")

        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —É—Ä–æ–∫–∞
        success = await interface.complete_safety_lesson(
            "elderly_001", "phone_scam_lesson"
        )
        print(f"–£—Ä–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω: {success}")

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        status = await interface.get_status()
        print(f"–°—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {status}")

    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    asyncio.run(test_elderly_protection_interface())
