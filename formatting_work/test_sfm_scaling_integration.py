#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ SafeFunctionManager —Å AutoScalingEngine
"""

import sys
import os
import asyncio
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append('/Users/sergejhlystov/ALADDIN_NEW')

def test_sfm_scaling_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ SafeFunctionManager —Å AutoScalingEngine"""
    print("üîß –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò SAFEFUNCTIONMANAGER –° AUTO_SCALING_ENGINE")
    print("=" * 60)
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º SafeFunctionManager
        from security.safe_function_manager import SafeFunctionManager
        print("‚úÖ –ò–º–ø–æ—Ä—Ç SafeFunctionManager —É—Å–ø–µ—à–µ–Ω")
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        config = {
            "scaling_enabled": True,
            "scaling_config": {
                "min_replicas": 1,
                "max_replicas": 5,
                "scaling_interval": 30
            }
        }
        
        sfm = SafeFunctionManager("TestSFM", config)
        print("‚úÖ SafeFunctionManager —Å–æ–∑–¥–∞–Ω —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é AutoScalingEngine
        if hasattr(sfm, 'auto_scaling_engine') and sfm.auto_scaling_engine:
            print("‚úÖ AutoScalingEngine –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
            scaling_status = sfm.get_scaling_status()
            print(f"üìä –°—Ç–∞—Ç—É—Å –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è: {scaling_status}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
            rules = sfm.auto_scaling_engine.get_scaling_rules()
            print(f"üìã –ü—Ä–∞–≤–∏–ª –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è: {len(rules)}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–±–æ—Ä –º–µ—Ç—Ä–∏–∫
            metrics_result = sfm.collect_scaling_metrics()
            print(f"üìà –°–±–æ—Ä –º–µ—Ç—Ä–∏–∫: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if metrics_result else '‚ùå –û—à–∏–±–∫–∞'}")
            
            # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
            scaling_metrics = sfm.auto_scaling_engine.get_scaling_metrics()
            print(f"üìä –ú–µ—Ç—Ä–∏–∫–∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è: {len(scaling_metrics)} –∑–∞–ø–∏—Å–µ–π")
            
        else:
            print("‚ùå AutoScalingEngine –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return False
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫—É
        stop_result = sfm.stop()
        print(f"üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ SFM: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if stop_result else '‚ùå –û—à–∏–±–∫–∞'}")
        
        print("\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ê:")
        print("‚úÖ SafeFunctionManager —É—Å–ø–µ—à–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å AutoScalingEngine")
        print("‚úÖ –í—Å–µ –º–µ—Ç–æ–¥—ã –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("‚úÖ –°–±–æ—Ä –º–µ—Ç—Ä–∏–∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç")
        print("‚úÖ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_async_scaling_integration():
    """–¢–µ—Å—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    print("\nüîÑ –¢–ï–°–¢ –ê–°–ò–ù–•–†–û–ù–ù–û–ô –ò–ù–¢–ï–ì–†–ê–¶–ò–ò")
    print("=" * 40)
    
    try:
        from security.safe_function_manager import SafeFunctionManager
        
        async def async_test():
            config = {"scaling_enabled": True}
            sfm = SafeFunctionManager("AsyncTestSFM", config)
            
            if sfm.auto_scaling_engine:
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã
                await sfm.auto_scaling_engine.initialize_async()
                print("‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
                
                await sfm.auto_scaling_engine.stop_async()
                print("‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
                async with sfm.auto_scaling_engine as engine:
                    status = engine.get_engine_status()
                    print(f"‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç: {status.get('status', 'unknown')}")
                
                return True
            return False
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç
        result = asyncio.run(async_test())
        print(f"üîÑ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if result else '‚ùå –û—à–∏–±–∫–∞'}")
        return result
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í –ò–ù–¢–ï–ì–†–ê–¶–ò–ò SFM + AUTO_SCALING_ENGINE")
    print("=" * 60)
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç
    test1_result = test_sfm_scaling_integration()
    
    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç
    test2_result = test_async_scaling_integration()
    
    print("\nüìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print(f"–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: {'‚úÖ –ü–†–û–ô–î–ï–ù' if test1_result else '‚ùå –ü–†–û–í–ê–õ–ï–ù'}")
    print(f"–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: {'‚úÖ –ü–†–û–ô–î–ï–ù' if test2_result else '‚ùå –ü–†–û–í–ê–õ–ï–ù'}")
    
    if test1_result and test2_result:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("‚úÖ SafeFunctionManager –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å AutoScalingEngine")
    else:
        print("\n‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´")
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")