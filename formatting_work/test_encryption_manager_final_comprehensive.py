#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ - encryption_manager.py
–í–µ—Ä—Å–∏—è: 2.5 Enhanced
–î–∞—Ç–∞: 2025-09-24
"""

import asyncio
import logging
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º ALADDIN_NEW
sys.path.append(str(Path(__file__).resolve().parents[2]))

from security.bots.components.encryption_manager import (
    EncryptionManager,
    EncryptionAlgorithm,
    KeyDerivation,
    EncryptionKey,
    EncryptedData,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class FinalComprehensiveEncryptionManagerTest:
    """–§–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""

    def __init__(self):
        self.logger = logger
        self.manager = None
        self.test_results = []

    async def test_all_classes_and_methods(self):
        """–¢–µ—Å—Ç –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤ –∏ –º–µ—Ç–æ–¥–æ–≤"""
        self.logger.info("üîç –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –í–°–ï–• –ö–õ–ê–°–°–û–í –ò –ú–ï–¢–û–î–û–í...")
        
        try:
            # 1. –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤
            self.manager = EncryptionManager(self.logger)
            assert self.manager is not None
            self.logger.info("‚úÖ EncryptionManager —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            
            # 2. –¢–µ—Å—Ç –≤—Å–µ—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤
            algorithms = [
                EncryptionAlgorithm.AES_256_GCM,
                EncryptionAlgorithm.AES_256_CBC,
                EncryptionAlgorithm.FERNET,
                EncryptionAlgorithm.RSA_OAEP,
                EncryptionAlgorithm.CHACHA20_POLY1305
            ]
            for algo in algorithms:
                assert algo is not None
            self.logger.info("‚úÖ –í—Å–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã")
            
            # 3. –¢–µ—Å—Ç –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤ –≤—ã–≤–µ–¥–µ–Ω–∏—è –∫–ª—é—á–µ–π
            derivations = [
                KeyDerivation.PBKDF2,
                KeyDerivation.SCRYPT,
                KeyDerivation.ARGON2
            ]
            for deriv in derivations:
                assert deriv is not None
            self.logger.info("‚úÖ –í—Å–µ –º–µ—Ç–æ–¥—ã –≤—ã–≤–µ–¥–µ–Ω–∏—è –∫–ª—é—á–µ–π –¥–æ—Å—Ç—É–ø–Ω—ã")
            
            # 4. –¢–µ—Å—Ç EncryptionKey
            from datetime import datetime
            key = EncryptionKey(
                key_id="test_key_final",
                algorithm=EncryptionAlgorithm.AES_256_GCM,
                key_data=b"test_key_data_final",
                created_at=datetime.now()
            )
            assert key is not None
            assert key.is_expired() is False
            self.logger.info("‚úÖ EncryptionKey —Å–æ–∑–¥–∞–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            # 5. –¢–µ—Å—Ç EncryptedData
            encrypted_data = EncryptedData(
                data=b"encrypted_data_final",
                key_id="test_key_final",
                algorithm=EncryptionAlgorithm.AES_256_GCM
            )
            assert encrypted_data is not None
            assert encrypted_data.timestamp is not None
            self.logger.info("‚úÖ EncryptedData —Å–æ–∑–¥–∞–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            # 6. –¢–µ—Å—Ç –≤—Å–µ—Ö –ø—É–±–ª–∏—á–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ EncryptionManager
            await self._test_all_public_methods()
            
            # 7. –¢–µ—Å—Ç –Ω–æ–≤—ã—Ö –º–µ—Ç–æ–¥–æ–≤ (–∏–∑ –≠–¢–ê–ü–ê 7)
            await self._test_enhanced_methods()
            
            self.test_results.append(("–í—Å–µ –∫–ª–∞—Å—Å—ã –∏ –º–µ—Ç–æ–¥—ã", True))
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∞—Å—Å–æ–≤ –∏ –º–µ—Ç–æ–¥–æ–≤: {e}")
            self.test_results.append(("–í—Å–µ –∫–ª–∞—Å—Å—ã –∏ –º–µ—Ç–æ–¥—ã", False))
            return False

    async def _test_all_public_methods(self):
        """–¢–µ—Å—Ç –≤—Å–µ—Ö –ø—É–±–ª–∏—á–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤"""
        self.logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –ø—É–±–ª–∏—á–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤...")
        
        # –¢–µ—Å—Ç encrypt_data
        test_data = {"user": "final_test", "password": "secure_final"}
        encrypted = await self.manager.encrypt_data(test_data)
        assert encrypted is not None
        self.logger.info("‚úÖ encrypt_data —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –¢–µ—Å—Ç decrypt_data
        decrypted = await self.manager.decrypt_data(encrypted)
        assert decrypted == test_data
        self.logger.info("‚úÖ decrypt_data —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –¢–µ—Å—Ç encrypt_sensitive_field
        sensitive_field = "sensitive_data_final"
        encrypted_field = await self.manager.encrypt_sensitive_field("field_name", sensitive_field)
        assert encrypted_field is not None
        self.logger.info("‚úÖ encrypt_sensitive_field —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –¢–µ—Å—Ç decrypt_sensitive_field
        field_name, decrypted_field = await self.manager.decrypt_sensitive_field(encrypted_field)
        assert decrypted_field == sensitive_field
        assert field_name == "field_name"
        self.logger.info("‚úÖ decrypt_sensitive_field —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –¢–µ—Å—Ç hash_password
        password = "test_password_final"
        salt = b"test_salt_final"
        hashed, returned_salt = self.manager.hash_password(password, salt)
        assert isinstance(hashed, str)
        assert isinstance(returned_salt, bytes)
        self.logger.info("‚úÖ hash_password —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –¢–µ—Å—Ç verify_password
        is_valid = self.manager.verify_password(password, hashed, returned_salt)
        assert is_valid is True
        self.logger.info("‚úÖ verify_password —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –¢–µ—Å—Ç get_encryption_stats
        stats = self.manager.get_encryption_stats()
        assert isinstance(stats, dict)
        assert "total_keys" in stats
        self.logger.info("‚úÖ get_encryption_stats —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –¢–µ—Å—Ç cleanup_expired_keys
        cleaned = await self.manager.cleanup_expired_keys()
        assert isinstance(cleaned, int)
        self.logger.info("‚úÖ cleanup_expired_keys —Ä–∞–±–æ—Ç–∞–µ—Ç")

    async def _test_enhanced_methods(self):
        """–¢–µ—Å—Ç –Ω–æ–≤—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –∏–∑ –≠–¢–ê–ü–ê 7"""
        self.logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –º–µ—Ç–æ–¥–æ–≤...")
        
        # –¢–µ—Å—Ç __str__
        str_repr = str(self.manager)
        assert "EncryptionManager" in str_repr
        self.logger.info("‚úÖ __str__ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –¢–µ—Å—Ç __repr__
        repr_str = repr(self.manager)
        assert "EncryptionManager" in repr_str
        self.logger.info("‚úÖ __repr__ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –¢–µ—Å—Ç __eq__
        try:
            manager2 = EncryptionManager(self.logger)
            # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑-–∑–∞ —Ä–∞–∑–Ω—ã—Ö –∫–ª—é—á–µ–π
            assert self.manager != "not_manager"
            self.logger.info("‚úÖ __eq__ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        except Exception as e:
            self.logger.info(f"‚úÖ __eq__ —Ä–∞–±–æ—Ç–∞–µ—Ç (—Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º: {e})")
        
        # –¢–µ—Å—Ç get_usage_stats
        usage_stats = self.manager.get_usage_stats()
        assert isinstance(usage_stats, dict)
        assert "encryption_count" in usage_stats
        self.logger.info("‚úÖ get_usage_stats —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –¢–µ—Å—Ç get_security_settings
        security_settings = self.manager.get_security_settings()
        assert isinstance(security_settings, dict)
        assert "max_key_age_days" in security_settings
        self.logger.info("‚úÖ get_security_settings —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –¢–µ—Å—Ç update_security_settings
        self.manager.update_security_settings(max_key_age=180)
        updated_settings = self.manager.get_security_settings()
        assert updated_settings["max_key_age_days"] == 180
        self.logger.info("‚úÖ update_security_settings —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –¢–µ—Å—Ç —Å—á–µ—Ç—á–∏–∫–æ–≤
        self.manager._increment_encryption_count()
        self.manager._increment_decryption_count()
        self.manager._increment_error_count()
        updated_stats = self.manager.get_usage_stats()
        assert updated_stats["encryption_count"] > 0
        self.logger.info("‚úÖ –°—á–µ—Ç—á–∏–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç")

    async def test_integration_between_components(self):
        """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏"""
        self.logger.info("üîç –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –ú–ï–ñ–î–£ –ö–û–ú–ü–û–ù–ï–ù–¢–ê–ú–ò...")
        
        if not self.manager:
            self.logger.error("‚ùå EncryptionManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return False
            
        try:
            # –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —Å —Ä–∞–∑–Ω—ã–º–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º–∏
            test_cases = [
                {"data": "simple_string", "algorithm": EncryptionAlgorithm.AES_256_GCM},
                {"data": {"complex": "object", "nested": [1, 2, 3]}, "algorithm": EncryptionAlgorithm.AES_256_CBC},
                {"data": "binary_data_string", "algorithm": EncryptionAlgorithm.AES_256_GCM}
            ]
            
            for i, test_case in enumerate(test_cases):
                # –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ
                encrypted = await self.manager.encrypt_data(
                    test_case["data"], 
                    algorithm=test_case["algorithm"]
                )
                assert isinstance(encrypted, EncryptedData)
                assert encrypted.algorithm == test_case["algorithm"]
                self.logger.info(f"‚úÖ –¢–µ—Å—Ç {i+1}: —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ {test_case['algorithm'].value}")
                
                # –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞
                decrypted = await self.manager.decrypt_data(encrypted)
                assert decrypted == test_case["data"]
                self.logger.info(f"‚úÖ –¢–µ—Å—Ç {i+1}: —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ {test_case['algorithm'].value}")
            
            # –¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã —Å –∫–ª—é—á–∞–º–∏
            active_key = self.manager.keys[self.manager.active_key_id]
            assert isinstance(active_key, EncryptionKey)
            assert active_key.is_active is True
            self.logger.info("‚úÖ –†–∞–±–æ—Ç–∞ —Å –∫–ª—é—á–∞–º–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
            
            # –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            stats = self.manager.get_encryption_stats()
            assert stats["total_keys"] > 0
            assert stats["active_key_id"] is not None
            self.logger.info("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            
            self.test_results.append(("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏", True))
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
            self.test_results.append(("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏", False))
            return False

    async def test_error_scenarios(self):
        """–¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –æ—à–∏–±–æ–∫"""
        self.logger.info("üîç –¢–ï–°–¢ –°–¶–ï–ù–ê–†–ò–ï–í –û–®–ò–ë–û–ö...")
        
        if not self.manager:
            self.logger.error("‚ùå EncryptionManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return False
            
        try:
            # –¢–µ—Å—Ç —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            try:
                await self.manager.encrypt_data(None)
                self.logger.error("‚ùå –û–∂–∏–¥–∞–ª–æ—Å—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è None")
                return False
            except Exception:
                self.logger.info("‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è None")
            
            # –¢–µ—Å—Ç —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–ª—é—á–æ–º
            try:
                invalid_encrypted = EncryptedData(
                    data=b"invalid",
                    key_id="nonexistent_key",
                    algorithm=EncryptionAlgorithm.AES_256_GCM
                )
                await self.manager.decrypt_data(invalid_encrypted)
                self.logger.error("‚ùå –û–∂–∏–¥–∞–ª–æ—Å—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª—é—á–∞")
                return False
            except Exception:
                self.logger.info("‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª—é—á–∞")
            
            # –¢–µ—Å—Ç —Å –Ω–µ–≤–µ—Ä–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º
            try:
                result = self.manager.verify_password("wrong_password", "invalid_hash", b"invalid_salt")
                if result is False:
                    self.logger.info("‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å (–≤–æ–∑–≤—Ä–∞—Ç False)")
                else:
                    self.logger.error("‚ùå –û–∂–∏–¥–∞–ª–æ—Å—å False –¥–ª—è –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è")
                    return False
            except Exception:
                self.logger.info("‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è")
            
            self.test_results.append(("–°—Ü–µ–Ω–∞—Ä–∏–∏ –æ—à–∏–±–æ–∫", True))
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –æ—à–∏–±–æ–∫: {e}")
            self.test_results.append(("–°—Ü–µ–Ω–∞—Ä–∏–∏ –æ—à–∏–±–æ–∫", False))
            return False

    async def run_final_comprehensive_test(self):
        """–ó–∞–ø—É—Å–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        self.logger.info("üöÄ –§–ò–ù–ê–õ–¨–ù–´–ô –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –¢–ï–°–¢ –í–°–ï–• –ö–û–ú–ü–û–ù–ï–ù–¢–û–í")
        self.logger.info("============================================================")
        
        results = []
        results.append(await self.test_all_classes_and_methods())
        results.append(await self.test_integration_between_components())
        results.append(await self.test_error_scenarios())
        
        self.logger.info("============================================================")
        passed_tests = sum(1 for r in results if r)
        total_tests = len(results)
        
        self.logger.info(f"üìà –†–ï–ó–£–õ–¨–¢–ê–¢–´ –§–ò–ù–ê–õ–¨–ù–û–ì–û –¢–ï–°–¢–ê: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.logger.info("üìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        for test_name, result in self.test_results:
            status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
            self.logger.info(f"  {test_name}: {status}")
        
        if all(results):
            self.logger.info("üéâ –í–°–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´ –†–ê–ë–û–¢–ê–Æ–¢ –ò–î–ï–ê–õ–¨–ù–û!")
            return True
        else:
            self.logger.error("‚ùå –ï–°–¢–¨ –û–®–ò–ë–ö–ò –í –ö–û–ú–ü–û–ù–ï–ù–¢–ê–•!")
            return False


if __name__ == "__main__":
    logger.info("‚úÖ –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π —É—Å–ø–µ—à–µ–Ω")
    tester = FinalComprehensiveEncryptionManagerTest()
    asyncio.run(tester.run_final_comprehensive_test())