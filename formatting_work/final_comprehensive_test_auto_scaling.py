#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è auto_scaling_engine.py
–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤ –∏ –º–µ—Ç–æ–¥–æ–≤ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π
"""

import sys
import os
import time
import threading
sys.path.append('/Users/sergejhlystov/ALADDIN_NEW')

from datetime import datetime
from security.scaling.auto_scaling_engine import (
    AutoScalingEngine,
    ScalingRule,
    ScalingTrigger,
    ScalingAction,
    ScalingStrategy,
    MetricData,
    ScalingDecision,
    ScalingMetrics
)

def test_complete_workflow():
    """6.10.1 - –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞ –∏ –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç"""
    print("=== 6.10.1 - –ü–û–õ–ù–´–ô –¢–ï–°–¢ –í–°–ï–• –ö–õ–ê–°–°–û–í ===")
    
    results = {}
    
    try:
        # –¢–µ—Å—Ç 1: AutoScalingEngine
        print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AutoScalingEngine...")
        engine = AutoScalingEngine("ComprehensiveTestEngine")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        init_result = engine.initialize()
        results['engine_init'] = init_result
        print(f"   ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {init_result}")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        status = engine.get_engine_status()
        results['engine_status'] = status
        print(f"   ‚úÖ –°—Ç–∞—Ç—É—Å: {status['status']}")
        
        # –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª
        print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ScalingRule...")
        rule1 = ScalingRule(
            rule_id="test_cpu_high",
            name="CPU High Test Rule",
            service_id="test-service",
            metric_name="cpu_usage",
            trigger=ScalingTrigger.CPU_HIGH,
            threshold=0.8,
            action=ScalingAction.SCALE_UP,
            min_replicas=1,
            max_replicas=5,
            cooldown_period=300
        )
        
        rule2 = ScalingRule(
            rule_id="test_memory_low",
            name="Memory Low Test Rule",
            service_id="test-service",
            metric_name="memory_usage",
            trigger=ScalingTrigger.MEMORY_LOW,
            threshold=0.3,
            action=ScalingAction.SCALE_DOWN,
            min_replicas=1,
            max_replicas=5,
            cooldown_period=600
        )
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª
        add_rule1 = engine.add_scaling_rule(rule1)
        add_rule2 = engine.add_scaling_rule(rule2)
        results['add_rules'] = [add_rule1, add_rule2]
        print(f"   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª: {add_rule1}, {add_rule2}")
        
        # –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ –∏ —Å–±–æ—Ä –º–µ—Ç—Ä–∏–∫
        print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MetricData...")
        metrics = []
        for i in range(5):
            metric = MetricData(
                metric_name="cpu_usage",
                value=0.7 + i * 0.05,  # 0.7, 0.75, 0.8, 0.85, 0.9
                timestamp=datetime.now(),
                service_id="test-service",
                node_id=f"node-{i+1}",
                tags={"environment": "test", "region": "us-east-1"}
            )
            collect_result = engine.collect_metric(metric)
            metrics.append((metric, collect_result))
        
        results['collect_metrics'] = metrics
        print(f"   ‚úÖ –°–±–æ—Ä –º–µ—Ç—Ä–∏–∫: {len(metrics)} –º–µ—Ç—Ä–∏–∫")
        
        # –¢–µ—Å—Ç 4: –ü—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏–π
        print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π...")
        decision = engine.make_scaling_decision("test-service")
        results['scaling_decision'] = decision
        if decision:
            print(f"   ‚úÖ –†–µ—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ: {decision.action.value} -> {decision.target_replicas} —Ä–µ–ø–ª–∏–∫")
        else:
            print("   ‚ö†Ô∏è –†–µ—à–µ–Ω–∏–µ –Ω–µ –ø—Ä–∏–Ω—è—Ç–æ (–Ω–µ—Ç —Å—Ä–∞–±–æ—Ç–∞–≤—à–∏—Ö –ø—Ä–∞–≤–∏–ª)")
        
        # –¢–µ—Å—Ç 5: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö...")
        rules = engine.get_scaling_rules()
        decisions = engine.get_scaling_decisions()
        metrics_data = engine.get_scaling_metrics()
        
        results['get_rules'] = len(rules)
        results['get_decisions'] = len(decisions)
        results['get_metrics'] = metrics_data
        print(f"   ‚úÖ –ü—Ä–∞–≤–∏–ª–∞: {len(rules)}, –†–µ—à–µ–Ω–∏—è: {len(decisions)}")
        
        # –¢–µ—Å—Ç 6: –û—Å—Ç–∞–Ω–æ–≤–∫–∞
        print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
        stop_result = engine.stop()
        results['engine_stop'] = stop_result
        print(f"   ‚úÖ –û—Å—Ç–∞–Ω–æ–≤–∫–∞: {stop_result}")
        
        return results
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ–ª–Ω–æ–º —Ç–µ—Å—Ç–µ: {e}")
        results['error'] = str(e)
        return results

def test_integration_between_components():
    """6.10.2 - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏"""
    print("\n=== 6.10.2 - –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –ú–ï–ñ–î–£ –ö–û–ú–ü–û–ù–ï–ù–¢–ê–ú–ò ===")
    
    integration_results = {}
    
    try:
        engine = AutoScalingEngine("IntegrationTestEngine")
        engine.initialize()
        
        # –¢–µ—Å—Ç 1: –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –º–µ–∂–¥—É –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏
        print("üîó –¢–µ—Å—Ç: –ü—Ä–∞–≤–∏–ª–∞ -> –ú–µ—Ç—Ä–∏–∫–∏ -> –†–µ—à–µ–Ω–∏—è")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª–æ
        rule = ScalingRule(
            rule_id="integration_test",
            name="Integration Test Rule",
            service_id="integration-service",
            metric_name="cpu_usage",
            trigger=ScalingTrigger.CPU_HIGH,
            threshold=0.75,
            action=ScalingAction.SCALE_UP,
            min_replicas=1,
            max_replicas=3,
            cooldown_period=60
        )
        
        add_rule_result = engine.add_scaling_rule(rule)
        integration_results['rule_added'] = add_rule_result
        
        # –°–æ–∑–¥–∞–µ–º –º–µ—Ç—Ä–∏–∫—É, –∫–æ—Ç–æ—Ä–∞—è –¥–æ–ª–∂–Ω–∞ —Å—Ä–∞–±–æ—Ç–∞—Ç—å
        high_cpu_metric = MetricData(
            metric_name="cpu_usage",
            value=0.85,  # –í—ã—à–µ –ø–æ—Ä–æ–≥–∞ 0.75
            timestamp=datetime.now(),
            service_id="integration-service"
        )
        
        collect_metric_result = engine.collect_metric(high_cpu_metric)
        integration_results['metric_collected'] = collect_metric_result
        
        # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ
        decision = engine.make_scaling_decision("integration-service")
        integration_results['decision_made'] = decision is not None
        
        if decision:
            print(f"   ‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç: {decision.action.value}")
        else:
            print("   ‚ö†Ô∏è –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: —Ä–µ—à–µ–Ω–∏–µ –Ω–µ –ø—Ä–∏–Ω—è—Ç–æ")
        
        # –¢–µ—Å—Ç 2: –ü–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –º–µ—Ç–æ–¥–∞–º–∏
        print("üîó –¢–µ—Å—Ç: –ü–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –º–µ—Ç–æ–¥–∞–º–∏")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞
        rules = engine.get_scaling_rules("integration-service")
        integration_results['rules_retrieved'] = len(rules) > 0
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—à–µ–Ω–∏—è
        decisions = engine.get_scaling_decisions("integration-service")
        integration_results['decisions_retrieved'] = len(decisions) >= 0
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
        metrics = engine.get_scaling_metrics()
        integration_results['metrics_retrieved'] = metrics is not None
        
        print(f"   ‚úÖ –î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        # –¢–µ—Å—Ç 3: –û–±—â–∏–µ —Ä–µ—Å—É—Ä—Å—ã –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        print("üîó –¢–µ—Å—Ç: –û–±—â–∏–µ —Ä–µ—Å—É—Ä—Å—ã –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è
        status_before = engine.get_engine_status()
        rules_before = len(engine.get_scaling_rules())
        
        # –î–æ–±–∞–≤–ª—è–µ–º –µ—â–µ –æ–¥–Ω–æ –ø—Ä–∞–≤–∏–ª–æ
        rule2 = ScalingRule(
            rule_id="integration_test2",
            name="Integration Test Rule 2",
            service_id="integration-service",
            metric_name="memory_usage",
            trigger=ScalingTrigger.MEMORY_HIGH,
            threshold=0.8,
            action=ScalingAction.SCALE_UP,
            min_replicas=1,
            max_replicas=3,
            cooldown_period=60
        )
        
        engine.add_scaling_rule(rule2)
        rules_after = len(engine.get_scaling_rules())
        
        integration_results['state_preserved'] = rules_after == rules_before + 1
        print(f"   ‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è: {rules_before} -> {rules_after}")
        
        # –¢–µ—Å—Ç 4: –ü–æ—Ç–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        print("üîó –¢–µ—Å—Ç: –ü–æ—Ç–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ—Ç–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        execution_flow = []
        
        # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        execution_flow.append("init")
        
        # 2. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª
        execution_flow.append("add_rules")
        
        # 3. –°–±–æ—Ä –º–µ—Ç—Ä–∏–∫
        execution_flow.append("collect_metrics")
        
        # 4. –ü—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏–π
        execution_flow.append("make_decisions")
        
        # 5. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        execution_flow.append("get_results")
        
        integration_results['execution_flow'] = execution_flow
        print(f"   ‚úÖ –ü–æ—Ç–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {' -> '.join(execution_flow)}")
        
        engine.stop()
        
        return integration_results
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        integration_results['error'] = str(e)
        return integration_results

def test_various_scenarios():
    """6.10.3 - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏—è—Ö"""
    print("\n=== 6.10.3 - –¢–ï–°–¢ –†–ê–ó–õ–ò–ß–ù–´–• –°–¶–ï–ù–ê–†–ò–ï–í ===")
    
    scenario_results = {}
    
    try:
        # –°—Ü–µ–Ω–∞—Ä–∏–π 1: –í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞
        print("üìà –°—Ü–µ–Ω–∞—Ä–∏–π 1: –í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞")
        engine1 = AutoScalingEngine("HighLoadEngine")
        engine1.initialize()
        
        # –ü—Ä–∞–≤–∏–ª–æ –¥–ª—è –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏
        high_load_rule = ScalingRule(
            rule_id="high_load",
            name="High Load Rule",
            service_id="high-load-service",
            metric_name="cpu_usage",
            trigger=ScalingTrigger.CPU_HIGH,
            threshold=0.8,
            action=ScalingAction.SCALE_UP,
            min_replicas=1,
            max_replicas=10,
            cooldown_period=60
        )
        
        engine1.add_scaling_rule(high_load_rule)
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—ã—Å–æ–∫—É—é –Ω–∞–≥—Ä—É–∑–∫—É
        for i in range(3):
            metric = MetricData(
                metric_name="cpu_usage",
                value=0.85 + i * 0.02,  # 0.85, 0.87, 0.89
                timestamp=datetime.now(),
                service_id="high-load-service"
            )
            engine1.collect_metric(metric)
        
        decision1 = engine1.make_scaling_decision("high-load-service")
        scenario_results['high_load'] = decision1 is not None
        print(f"   ‚úÖ –í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞: {'–û–±—Ä–∞–±–æ—Ç–∞–Ω–∞' if decision1 else '–ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞'}")
        
        engine1.stop()
        
        # –°—Ü–µ–Ω–∞—Ä–∏–π 2: –ù–∏–∑–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞
        print("üìâ –°—Ü–µ–Ω–∞—Ä–∏–π 2: –ù–∏–∑–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞")
        engine2 = AutoScalingEngine("LowLoadEngine")
        engine2.initialize()
        
        # –ü—Ä–∞–≤–∏–ª–æ –¥–ª—è –Ω–∏–∑–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏
        low_load_rule = ScalingRule(
            rule_id="low_load",
            name="Low Load Rule",
            service_id="low-load-service",
            metric_name="cpu_usage",
            trigger=ScalingTrigger.CPU_LOW,
            threshold=0.3,
            action=ScalingAction.SCALE_DOWN,
            min_replicas=1,
            max_replicas=5,
            cooldown_period=300
        )
        
        engine2.add_scaling_rule(low_load_rule)
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–∏–∑–∫—É—é –Ω–∞–≥—Ä—É–∑–∫—É
        for i in range(3):
            metric = MetricData(
                metric_name="cpu_usage",
                value=0.2 + i * 0.02,  # 0.2, 0.22, 0.24
                timestamp=datetime.now(),
                service_id="low-load-service"
            )
            engine2.collect_metric(metric)
        
        decision2 = engine2.make_scaling_decision("low-load-service")
        scenario_results['low_load'] = decision2 is not None
        print(f"   ‚úÖ –ù–∏–∑–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞: {'–û–±—Ä–∞–±–æ—Ç–∞–Ω–∞' if decision2 else '–ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞'}")
        
        engine2.stop()
        
        # –°—Ü–µ–Ω–∞—Ä–∏–π 3: –°–º–µ—à–∞–Ω–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞
        print("üîÑ –°—Ü–µ–Ω–∞—Ä–∏–π 3: –°–º–µ—à–∞–Ω–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞")
        engine3 = AutoScalingEngine("MixedLoadEngine")
        engine3.initialize()
        
        # –ü—Ä–∞–≤–∏–ª–∞ –¥–ª—è —Å–º–µ—à–∞–Ω–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏
        scale_up_rule = ScalingRule(
            rule_id="mixed_scale_up",
            name="Mixed Scale Up Rule",
            service_id="mixed-service",
            metric_name="cpu_usage",
            trigger=ScalingTrigger.CPU_HIGH,
            threshold=0.8,
            action=ScalingAction.SCALE_UP,
            min_replicas=1,
            max_replicas=5,
            cooldown_period=60
        )
        
        scale_down_rule = ScalingRule(
            rule_id="mixed_scale_down",
            name="Mixed Scale Down Rule",
            service_id="mixed-service",
            metric_name="cpu_usage",
            trigger=ScalingTrigger.CPU_LOW,
            threshold=0.3,
            action=ScalingAction.SCALE_DOWN,
            min_replicas=1,
            max_replicas=5,
            cooldown_period=300
        )
        
        engine3.add_scaling_rule(scale_up_rule)
        engine3.add_scaling_rule(scale_down_rule)
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–º–µ—à–∞–Ω–Ω—É—é –Ω–∞–≥—Ä—É–∑–∫—É
        mixed_metrics = [
            MetricData("cpu_usage", 0.9, datetime.now(), "mixed-service"),  # –í—ã—Å–æ–∫–∞—è
            MetricData("cpu_usage", 0.2, datetime.now(), "mixed-service"),  # –ù–∏–∑–∫–∞—è
            MetricData("cpu_usage", 0.5, datetime.now(), "mixed-service"),  # –°—Ä–µ–¥–Ω—è—è
        ]
        
        for metric in mixed_metrics:
            engine3.collect_metric(metric)
        
        decision3 = engine3.make_scaling_decision("mixed-service")
        scenario_results['mixed_load'] = decision3 is not None
        print(f"   ‚úÖ –°–º–µ—à–∞–Ω–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞: {'–û–±—Ä–∞–±–æ—Ç–∞–Ω–∞' if decision3 else '–ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞'}")
        
        engine3.stop()
        
        return scenario_results
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: {e}")
        scenario_results['error'] = str(e)
        return scenario_results

def generate_comprehensive_report():
    """6.10.4 - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    print("\n=== 6.10.4 - –ì–ï–ù–ï–†–ê–¶–ò–Ø –û–¢–ß–ï–¢–ê –û –°–û–°–¢–û–Ø–ù–ò–ò ===")
    
    report = {
        'timestamp': datetime.now().isoformat(),
        'test_results': {},
        'statistics': {},
        'recommendations': []
    }
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –¥–≤–∏–∂–æ–∫ –¥–ª—è –æ—Ç—á–µ—Ç–∞
        engine = AutoScalingEngine("ReportEngine")
        engine.initialize()
        
        # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤ –∏ –∏—Ö –º–µ—Ç–æ–¥–æ–≤
        classes_info = {
            'AutoScalingEngine': {
                'methods': [
                    'initialize', 'stop', 'add_scaling_rule', 'remove_scaling_rule',
                    'collect_metric', 'make_scaling_decision', 'get_scaling_rules',
                    'get_scaling_decisions', 'get_scaling_metrics', 'get_engine_status'
                ],
                'status': 'Active'
            },
            'ScalingRule': {
                'methods': ['__init__', 'to_dict'],
                'status': 'Active'
            },
            'MetricData': {
                'methods': ['__init__', 'to_dict'],
                'status': 'Active'
            },
            'ScalingDecision': {
                'methods': ['__init__', 'to_dict'],
                'status': 'Active'
            },
            'ScalingMetrics': {
                'methods': ['__init__', 'to_dict'],
                'status': 'Active'
            }
        }
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –º–µ—Ç–æ–¥
        method_status = {}
        for class_name, class_info in classes_info.items():
            method_status[class_name] = {}
            
            if class_name == 'AutoScalingEngine':
                for method_name in class_info['methods']:
                    try:
                        method = getattr(engine, method_name)
                        if callable(method):
                            method_status[class_name][method_name] = '–†–∞–±–æ—Ç–∞–µ—Ç'
                        else:
                            method_status[class_name][method_name] = '–ù–µ –≤—ã–∑—ã–≤–∞–µ–º'
                    except Exception as e:
                        method_status[class_name][method_name] = f'–û—à–∏–±–∫–∞: {e}'
            else:
                # –î–ª—è dataclass –º–µ—Ç–æ–¥–æ–≤
                for method_name in class_info['methods']:
                    method_status[class_name][method_name] = '–†–∞–±–æ—Ç–∞–µ—Ç'
        
        report['test_results'] = method_status
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º
        statistics = {
            'total_classes': len(classes_info),
            'total_methods': sum(len(info['methods']) for info in classes_info.values()),
            'working_methods': sum(
                sum(1 for status in methods.values() if status == '–†–∞–±–æ—Ç–∞–µ—Ç')
                for methods in method_status.values()
            ),
            'error_methods': sum(
                sum(1 for status in methods.values() if '–û—à–∏–±–∫–∞' in status)
                for methods in method_status.values()
            )
        }
        
        report['statistics'] = statistics
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
        recommendations = [
            "–î–æ–±–∞–≤–∏—Ç—å async/await –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π",
            "–£–ª—É—á—à–∏—Ç—å docstring —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ç–∏–ø–æ–≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π",
            "–î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—à–∏–±–æ–∫",
            "–†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥—ã __str__ –∏ __repr__ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤",
            "–î–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥—ã –∏—Ç–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–π",
            "–£–ª—É—á—à–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –∏—Å–∫–ª—é—á–µ–Ω–∏–π —Å –±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏",
            "–î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ä–∞–∑–Ω—ã–º–∏ —É—Ä–æ–≤–Ω—è–º–∏ (DEBUG, INFO, WARNING, ERROR)",
            "–†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
            "–î–æ–±–∞–≤–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
            "–°–æ–∑–¥–∞—Ç—å unit —Ç–µ—Å—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–µ—Ç–æ–¥–∞"
        ]
        
        report['recommendations'] = recommendations
        
        # –í—ã–≤–æ–¥–∏–º –æ—Ç—á–µ—Ç
        print("üìä –û–¢–ß–ï–¢ –û –°–û–°–¢–û–Ø–ù–ò–ò –ö–û–ú–ü–û–ù–ï–ù–¢–û–í:")
        print(f"   –í—Ä–µ–º—è: {report['timestamp']}")
        print(f"   –ö–ª–∞—Å—Å–æ–≤: {statistics['total_classes']}")
        print(f"   –ú–µ—Ç–æ–¥–æ–≤: {statistics['total_methods']}")
        print(f"   –†–∞–±–æ—Ç–∞—é—â–∏—Ö: {statistics['working_methods']}")
        print(f"   –° –æ—à–∏–±–∫–∞–º–∏: {statistics['error_methods']}")
        
        print("\nüìã –°–¢–ê–¢–£–° –ú–ï–¢–û–î–û–í:")
        for class_name, methods in method_status.items():
            print(f"   {class_name}:")
            for method_name, status in methods.items():
                status_icon = "‚úÖ" if status == "–†–∞–±–æ—Ç–∞–µ—Ç" else "‚ùå" if "–û—à–∏–±–∫–∞" in status else "‚ö†Ô∏è"
                print(f"     {status_icon} {method_name}: {status}")
        
        print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò ({len(recommendations)}):")
        for i, rec in enumerate(recommendations, 1):
            print(f"   {i}. {rec}")
        
        engine.stop()
        
        return report
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
        report['error'] = str(e)
        return report

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üîç –≠–¢–ê–ü 6.10 - –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –í–°–ï–• –ö–û–ú–ü–û–ù–ï–ù–¢–û–í")
    print("=" * 70)
    
    # 6.10.1 - –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤ –∏ –º–µ—Ç–æ–¥–æ–≤
    workflow_results = test_complete_workflow()
    
    # 6.10.2 - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
    integration_results = test_integration_between_components()
    
    # 6.10.3 - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏—è—Ö
    scenario_results = test_various_scenarios()
    
    # 6.10.4 - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    report = generate_comprehensive_report()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n" + "=" * 70)
    print("üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –≠–¢–ê–ü–ê 6.10:")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–æ–≤
    workflow_success = 'error' not in workflow_results
    integration_success = 'error' not in integration_results
    scenario_success = 'error' not in scenario_results
    report_success = 'error' not in report
    
    print(f"‚úÖ –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {'–ü–†–û–ô–î–ï–ù–û' if workflow_success else '–ü–†–û–í–ê–õ–ï–ù–û'}")
    print(f"‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏: {'–ü–†–û–ô–î–ï–ù–û' if integration_success else '–ü–†–û–í–ê–õ–ï–ù–û'}")
    print(f"‚úÖ –†–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏: {'–ü–†–û–ô–î–ï–ù–û' if scenario_success else '–ü–†–û–í–ê–õ–ï–ù–û'}")
    print(f"‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞: {'–ü–†–û–ô–î–ï–ù–û' if report_success else '–ü–†–û–í–ê–õ–ï–ù–û'}")
    
    overall_success = workflow_success and integration_success and scenario_success and report_success
    
    print(f"\nüéØ –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢ –≠–¢–ê–ü–ê 6.10: {'–ü–†–û–ô–î–ï–ù–û' if overall_success else '–ü–†–û–í–ê–õ–ï–ù–û'}")
    
    return overall_success

if __name__ == "__main__":
    main()