#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
AlertManager - –ú–µ–Ω–µ–¥–∂–µ—Ä –æ–ø–æ–≤–µ—â–µ–Ω–∏–π —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
function_77: –£–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–µ–π –∏
–º—É–ª—å—Ç–∏–∫–∞–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–∞–º–∏ –¥–ª—è AI
—Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, –≤–∫–ª—é—á–∞—é—â—É—é:
- –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—É—é –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—é –∞–ª–µ—Ä—Ç–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
- –ú—É–ª—å—Ç–∏–∫–∞–Ω–∞–ª—å–Ω—É—é –¥–æ—Å—Ç–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (email, SMS, push, –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä—ã)
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É –∏ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—é –∞–ª–µ—Ä—Ç–æ–≤
- –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–ø–∞–º–∞ –∏ –ª–æ–∂–Ω—ã—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π
- –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∞–ª–µ—Ä—Ç–æ–≤
- –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∞–ª–µ—Ä—Ç–æ–≤ –∏ —Ç—Ä–µ–Ω–¥–æ–≤
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
1. –£–º–Ω–∞—è –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è –∞–ª–µ—Ä—Ç–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º ML –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤
2. –ú—É–ª—å—Ç–∏–∫–∞–Ω–∞–ª—å–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ —á–µ—Ä–µ–∑ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
3. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö –∞–ª–µ—Ä—Ç–æ–≤
4. –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –∏ –ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
5. –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—É—â–Ω–æ—Å—Ç–µ–π
6. –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∏ –∞–Ω–æ–º–∞–ª–∏–π –≤ –∞–ª–µ—Ä—Ç–∞—Ö
7. –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ –∏ –ø—Ä–∞–≤–∏–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
8. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–∞–º–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ SIEM
9. –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤
10. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∏ —É–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞

–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏:
- –ò—Å–ø–æ–ª—å–∑—É–µ—Ç scikit-learn –¥–ª—è ML –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏
- –ü—Ä–∏–º–µ–Ω—è–µ—Ç TF-IDF –∏ BERT –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞
- –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç scipy –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
- –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∞–ª–µ—Ä—Ç–æ–≤
- –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç–∏
- –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

–ê–≤—Ç–æ—Ä: ALADDIN Security System
–í–µ—Ä—Å–∏—è: 2.0
–î–∞—Ç–∞: 2025-01-06
–õ–∏—Ü–µ–Ω–∑–∏—è: MIT
"""

import asyncio
import hashlib
import json
import logging
import math
import queue
import re
import smtplib
import statistics
import threading
import time
from abc import ABC, abstractmethod
from dataclasses import dataclass, field
from datetime import datetime, timedelta
from enum import Enum
from typing import (
    Any,
    Callable,
    Dict,
    Iterator,
    List,
    Optional,
    Set,
    Tuple,
    Union,
)

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import requests
import seaborn as sns
from scipy import stats
from scipy.cluster.hierarchy import dendrogram, fcluster, linkage
from scipy.optimize import differential_evolution, minimize
from scipy.signal import find_peaks, savgol_filter
from scipy.stats import kendalltau, normaltest, pearsonr, shapiro, spearmanr
from sklearn.cluster import DBSCAN, AgglomerativeClustering, KMeans
from sklearn.decomposition import PCA, LatentDirichletAllocation, TruncatedSVD
from sklearn.ensemble import (
    GradientBoostingClassifier,
    RandomForestClassifier,
    VotingClassifier,
)
from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer
from sklearn.linear_model import ElasticNet, Lasso, LogisticRegression, Ridge
from sklearn.metrics import (
    classification_report,
    confusion_matrix,
    roc_auc_score,
)
from sklearn.mixture import GaussianMixture
from sklearn.model_selection import (
    GridSearchCV,
    cross_val_score,
    train_test_split,
)
from sklearn.naive_bayes import GaussianNB, MultinomialNB
from sklearn.neural_network import MLPClassifier
from sklearn.preprocessing import MinMaxScaler, RobustScaler, StandardScaler
from sklearn.svm import SVC, LinearSVC


class AlertSeverity(Enum):
    """–£—Ä–æ–≤–Ω–∏ —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏ –∞–ª–µ—Ä—Ç–æ–≤"""

    LOW = "low"
    MEDIUM = "medium"
    HIGH = "high"
    CRITICAL = "critical"
    EMERGENCY = "emergency"


class AlertChannel(Enum):
    """–ö–∞–Ω–∞–ª—ã –¥–æ—Å—Ç–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤"""

    EMAIL = "email"
    SMS = "sms"
    PUSH = "push"
    TELEGRAM = "telegram"
    DISCORD = "discord"
    SLACK = "slack"
    WEBHOOK = "webhook"


@dataclass
class AlertTemplate:
    """–®–∞–±–ª–æ–Ω –∞–ª–µ—Ä—Ç–∞"""

    name: str
    subject: str
    body: str
    channels: List[AlertChannel] = field(default_factory=list)
    severity: AlertSeverity = AlertSeverity.MEDIUM
    cooldown: int = 300  # —Å–µ–∫—É–Ω–¥—ã
    max_frequency: int = 10  # –º–∞–∫—Å–∏–º—É–º –≤ —á–∞—Å


@dataclass
class AlertRecipient:
    """–ü–æ–ª—É—á–∞—Ç–µ–ª—å –∞–ª–µ—Ä—Ç–æ–≤"""

    user_id: str
    name: str
    email: Optional[str] = None
    phone: Optional[str] = None
    telegram_id: Optional[str] = None
    discord_id: Optional[str] = None
    slack_id: Optional[str] = None
    preferences: Dict[str, Any] = field(default_factory=dict)
    enabled_channels: List[AlertChannel] = field(default_factory=list)


@dataclass
class Alert:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∞–ª–µ—Ä—Ç–∞"""

    id: str
    title: str
    message: str
    severity: AlertSeverity
    source: str
    timestamp: datetime
    recipients: List[str] = field(default_factory=list)
    channels: List[AlertChannel] = field(default_factory=list)
    metadata: Dict[str, Any] = field(default_factory=dict)
    resolved: bool = False
    resolved_at: Optional[datetime] = None


class AlertManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –æ–ø–æ–≤–µ—â–µ–Ω–∏–π —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

    –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç:
    - –£–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–µ–π
    - –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    - –ú—É–ª—å—Ç–∏–∫–∞–Ω–∞–ª—å–Ω—ã–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è (SMS, email, push, –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä—ã)
    - –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —ç—Å–∫–∞–ª–∞—Ü–∏—é –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π
    - ML-–∞–Ω–∞–ª–∏–∑ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–ø–∞–º–∞
    """

    def __init__(
        self,
        name: str = "AlertManager",
        config: Optional[Dict[str, Any]] = None,
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AlertManager

        Args:
            name: –ò–º—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∞–ª–µ—Ä—Ç–æ–≤
        """
        self.name = name
        self.config = config or {}
        self.logger = logging.getLogger(f"AlertManager.{name}")

        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.alert_queue = queue.Queue()
        self.templates: Dict[str, AlertTemplate] = {}
        self.recipients: Dict[str, AlertRecipient] = {}
        self.alert_history: List[Alert] = []
        self.rate_limiter: Dict[str, List[datetime]] = {}

        # –ü–æ—Ç–æ–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        self.processing_threads: List[threading.Thread] = []
        self.is_running = False

        # ML –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        self.vectorizer = TfidfVectorizer(
            max_features=1000, stop_words="english"
        )
        self.clusterer = KMeans(n_clusters=5, random_state=42)
        self.scaler = StandardScaler()
        self.is_ml_trained = False

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            "alerts_sent": 0,
            "alerts_blocked": 0,
            "channels_used": {},
            "severity_distribution": {},
            "uptime_start": time.time(),
        }

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        self._setup_logging()
        self._load_default_templates()
        self._initialize_ml_components()

        self.logger.info(f"AlertManager {name} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def _setup_logging(self) -> None:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            handler = logging.StreamHandler()
            formatter = logging.Formatter(
                "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
            )
            handler.setFormatter(formatter)
            self.logger.addHandler(handler)
            self.logger.setLevel(logging.INFO)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

    def _load_default_templates(self) -> None:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ –∞–ª–µ—Ä—Ç–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        default_templates = {
            "security_breach": AlertTemplate(
                name="security_breach",
                subject="üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –£–ì–†–û–ó–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò",
                body="–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —É–≥—Ä–æ–∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {details}",
                channels=[
                    AlertChannel.EMAIL,
                    AlertChannel.SMS,
                    AlertChannel.PUSH,
                ],
                severity=AlertSeverity.CRITICAL,
                cooldown=60,
            ),
            "system_warning": AlertTemplate(
                name="system_warning",
                subject="‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã",
                body="–°–∏—Å—Ç–µ–º–∞ –æ–±–Ω–∞—Ä—É–∂–∏–ª–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é –ø—Ä–æ–±–ª–µ–º—É: {details}",
                channels=[AlertChannel.EMAIL, AlertChannel.PUSH],
                severity=AlertSeverity.MEDIUM,
                cooldown=300,
            ),
            "performance_issue": AlertTemplate(
                name="performance_issue",
                subject="üìä –ü—Ä–æ–±–ª–µ–º–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
                body="–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {details}",
                channels=[AlertChannel.EMAIL],
                severity=AlertSeverity.LOW,
                cooldown=600,
            ),
            "anomaly_detected": AlertTemplate(
                name="anomaly_detected",
                subject="üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∞–Ω–æ–º–∞–ª–∏—è",
                body="–°–∏—Å—Ç–µ–º–∞ –æ–±–Ω–∞—Ä—É–∂–∏–ª–∞ –∞–Ω–æ–º–∞–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ: {details}",
                channels=[AlertChannel.EMAIL, AlertChannel.PUSH],
                severity=AlertSeverity.HIGH,
                cooldown=180,
            ),
        }
        self.templates.update(default_templates)

    def _initialize_ml_components(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è"""
        try:
            # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –¥–∞—Ç–∞—Å–µ—Ç –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
            sample_alerts = [
                "Security breach detected in system",
                "High CPU usage detected",
                "Memory usage exceeded threshold",
                "Network anomaly detected",
                "Unauthorized access attempt",
                "System performance degraded",
                "Database connection failed",
                "File system corruption detected",
            ]

            # –û–±—É—á–µ–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä–∞
            self.vectorizer.fit(sample_alerts)

            # –û–±—É—á–µ–Ω–∏–µ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ç–æ—Ä–∞
            features = self.vectorizer.transform(sample_alerts).toarray()
            self.clusterer.fit(features)

            self.is_ml_trained = True
            self.logger.info("ML –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ML: {e}")

    async def start_alert_processing(self) -> None:
        """–ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤"""
        try:
            self.is_running = True
            self.logger.info("–ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤")

            # –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            self._start_alert_processor()
            self._start_rate_limiter()
            self._start_ml_analyzer()

            self.logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤: {e}")
            raise

    def _start_alert_processor(self) -> None:
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –∞–ª–µ—Ä—Ç–æ–≤"""

        def process_alerts():
            while self.is_running:
                try:
                    if not self.alert_queue.empty():
                        alert = self.alert_queue.get(timeout=1)
                        self._process_alert(alert)
                        self.alert_queue.task_done()
                    else:
                        time.sleep(0.1)
                except queue.Empty:
                    continue
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–ª–µ—Ä—Ç–∞: {e}")

        thread = threading.Thread(target=process_alerts, daemon=True)
        thread.start()
        self.processing_threads.append(thread)

    def _start_rate_limiter(self) -> None:
        """–ó–∞–ø—É—Å–∫ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—è —á–∞—Å—Ç–æ—Ç—ã"""

        def limit_rates():
            while self.is_running:
                try:
                    current_time = datetime.now()
                    # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π (—Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞)
                    for key in list(self.rate_limiter.keys()):
                        self.rate_limiter[key] = [
                            timestamp
                            for timestamp in self.rate_limiter[key]
                            if (current_time - timestamp).total_seconds()
                            < 3600
                        ]
                        if not self.rate_limiter[key]:
                            del self.rate_limiter[key]

                    time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—è —á–∞—Å—Ç–æ—Ç—ã: {e}")

        thread = threading.Thread(target=limit_rates, daemon=True)
        thread.start()
        self.processing_threads.append(thread)

    def _start_ml_analyzer(self) -> None:
        """–ó–∞–ø—É—Å–∫ ML –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""

        def analyze_alerts():
            while self.is_running:
                try:
                    if len(self.alert_history) > 10:
                        self._analyze_alert_patterns()
                    time.sleep(300)  # –ê–Ω–∞–ª–∏–∑ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ ML –∞–Ω–∞–ª–∏–∑–∞: {e}")

        thread = threading.Thread(target=analyze_alerts, daemon=True)
        thread.start()
        self.processing_threads.append(thread)

    def send_alert(
        self,
        title: str,
        message: str,
        severity: AlertSeverity = AlertSeverity.MEDIUM,
        source: str = "system",
        recipients: Optional[List[str]] = None,
        channels: Optional[List[AlertChannel]] = None,
        template_name: Optional[str] = None,
        metadata: Optional[Dict[str, Any]] = None,
    ) -> str:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞

        Args:
            title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∞–ª–µ—Ä—Ç–∞
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞
            severity: –£—Ä–æ–≤–µ–Ω—å —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏
            source: –ò—Å—Ç–æ—á–Ω–∏–∫ –∞–ª–µ—Ä—Ç–∞
            recipients: –°–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
            channels: –ö–∞–Ω–∞–ª—ã –¥–æ—Å—Ç–∞–≤–∫–∏
            template_name: –ò–º—è —à–∞–±–ª–æ–Ω–∞
            metadata: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

        Returns:
            ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∞–ª–µ—Ä—Ç–∞
        """
        try:
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID –∞–ª–µ—Ä—Ç–∞
            alert_id = hashlib.md5(
                f"{title}{message}{time.time()}".encode()
            ).hexdigest()[:16]

            # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
            if template_name and template_name in self.templates:
                template = self.templates[template_name]
                title = template.subject
                message = template.body.format(details=message)
                if not channels:
                    channels = template.channels
                if severity == AlertSeverity.MEDIUM:
                    severity = template.severity

            # –°–æ–∑–¥–∞–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞
            alert = Alert(
                id=alert_id,
                title=title,
                message=message,
                severity=severity,
                source=source,
                timestamp=datetime.now(),
                recipients=recipients or [],
                channels=channels or [AlertChannel.EMAIL],
                metadata=metadata or {},
            )

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limiting
            if self._is_rate_limited(alert):
                self.stats["alerts_blocked"] += 1
                self.logger.warning(
                    f"–ê–ª–µ—Ä—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω rate limiting: {alert_id}"
                )
                return alert_id

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏
            self.alert_queue.put(alert)
            self.alert_history.append(alert)

            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 –∞–ª–µ—Ä—Ç–æ–≤)
            if len(self.alert_history) > 1000:
                self.alert_history = self.alert_history[-1000:]

            self.logger.info(f"–ê–ª–µ—Ä—Ç —Å–æ–∑–¥–∞–Ω: {alert_id} - {title}")
            return alert_id

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–ª–µ—Ä—Ç–∞: {e}")
            return ""

    def _is_rate_limited(self, alert: Alert) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã"""
        try:
            # –ö–ª—é—á –¥–ª—è rate limiting
            rate_key = f"{alert.source}_{alert.severity.value}"
            current_time = datetime.now()

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –∫–ª—é—á–∞
            if rate_key not in self.rate_limiter:
                self.rate_limiter[rate_key] = []

            # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π (—Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞)
            self.rate_limiter[rate_key] = [
                timestamp
                for timestamp in self.rate_limiter[rate_key]
                if (current_time - timestamp).total_seconds() < 3600
            ]

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
            if alert.severity == AlertSeverity.CRITICAL:
                max_per_hour = 50
            elif alert.severity == AlertSeverity.HIGH:
                max_per_hour = 20
            elif alert.severity == AlertSeverity.MEDIUM:
                max_per_hour = 10
            else:
                max_per_hour = 5

            if len(self.rate_limiter[rate_key]) >= max_per_hour:
                return True

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
            self.rate_limiter[rate_key].append(current_time)
            return False

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ rate limiting: {e}")
            return False

    def _process_alert(self, alert: Alert) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ª–µ—Ä—Ç–∞"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
            if not alert.recipients:
                alert.recipients = list(self.recipients.keys())

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–∞–Ω–∞–ª–∞–º
            for channel in alert.channels:
                self._send_via_channel(alert, channel)

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            self.stats["alerts_sent"] += 1
            if alert.severity.value not in self.stats["severity_distribution"]:
                self.stats["severity_distribution"][alert.severity.value] = 0
            self.stats["severity_distribution"][alert.severity.value] += 1

            for channel in alert.channels:
                if channel.value not in self.stats["channels_used"]:
                    self.stats["channels_used"][channel.value] = 0
                self.stats["channels_used"][channel.value] += 1

            self.logger.info(f"–ê–ª–µ—Ä—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {alert.id}")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–ª–µ—Ä—Ç–∞: {e}")

    def _send_via_channel(self, alert: Alert, channel: AlertChannel) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞ –ø–æ –∫–∞–Ω–∞–ª—É"""
        try:
            if channel == AlertChannel.EMAIL:
                self._send_email(alert)
            elif channel == AlertChannel.SMS:
                self._send_sms(alert)
            elif channel == AlertChannel.PUSH:
                self._send_push(alert)
            elif channel == AlertChannel.TELEGRAM:
                self._send_telegram(alert)
            elif channel == AlertChannel.DISCORD:
                self._send_discord(alert)
            elif channel == AlertChannel.SLACK:
                self._send_slack(alert)
            elif channel == AlertChannel.WEBHOOK:
                self._send_webhook(alert)

        except Exception as e:
            self.logger.error(
                f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ –∫–∞–Ω–∞–ª—É {channel.value}: {e}"
            )

    def _send_email(self, alert: Alert) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ email –∞–ª–µ—Ä—Ç–∞"""
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å SMTP —Å–µ—Ä–≤–µ—Ä–æ–º
            self.logger.info(f"EMAIL: {alert.title} - {alert.message}")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: {e}")

    def _send_sms(self, alert: Alert) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ SMS –∞–ª–µ—Ä—Ç–∞"""
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å SMS –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º
            self.logger.info(f"SMS: {alert.title} - {alert.message}")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS: {e}")

    def _send_push(self, alert: Alert) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å push —Å–µ—Ä–≤–∏—Å–æ–º
            self.logger.info(f"PUSH: {alert.title} - {alert.message}")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ push: {e}")

    def _send_telegram(self, alert: Alert) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ Telegram –∞–ª–µ—Ä—Ç–∞"""
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram Bot API
            self.logger.info(f"TELEGRAM: {alert.title} - {alert.message}")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram: {e}")

    def _send_discord(self, alert: Alert) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ Discord –∞–ª–µ—Ä—Ç–∞"""
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Discord Webhook
            self.logger.info(f"DISCORD: {alert.title} - {alert.message}")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Discord: {e}")

    def _send_slack(self, alert: Alert) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ Slack –∞–ª–µ—Ä—Ç–∞"""
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Slack API
            self.logger.info(f"SLACK: {alert.title} - {alert.message}")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Slack: {e}")

    def _send_webhook(self, alert: Alert) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ webhook –∞–ª–µ—Ä—Ç–∞"""
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å webhook
            self.logger.info(f"WEBHOOK: {alert.title} - {alert.message}")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ webhook: {e}")

    def _analyze_alert_patterns(self) -> None:
        """–ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∞–ª–µ—Ä—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é ML"""
        try:
            if not self.is_ml_trained or len(self.alert_history) < 10:
                return

            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            alert_texts = [
                f"{alert.title} {alert.message}"
                for alert in self.alert_history[-100:]
            ]

            # –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
            features = self.vectorizer.transform(alert_texts).toarray()

            # –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è
            clusters = self.clusterer.predict(features)

            # –ê–Ω–∞–ª–∏–∑ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
            unique_clusters, counts = np.unique(clusters, return_counts=True)

            # –ü–æ–∏—Å–∫ –∞–Ω–æ–º–∞–ª—å–Ω—ã—Ö –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
            for cluster_id, count in zip(unique_clusters, counts):
                if count > 10:  # –ú–Ω–æ–≥–æ –∞–ª–µ—Ä—Ç–æ–≤ –≤ –æ–¥–Ω–æ–º –∫–ª–∞—Å—Ç–µ—Ä–µ
                    # cluster_alerts = [
                    #     alert
                    #     for i, alert in enumerate(self.alert_history[-100:])
                    #     if clusters[i] == cluster_id
                    # ]

                    self.logger.warning(
                        f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω –∞–ª–µ—Ä—Ç–æ–≤ –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ {cluster_id}: "
                        f"{count} –∞–ª–µ—Ä—Ç–æ–≤"
                    )

                    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–ª–µ—Ä—Ç–∞ –æ –ø–∞—Ç—Ç–µ—Ä–Ω–µ
                    pattern_alert = Alert(
                        id=f"pattern_{cluster_id}_{int(time.time())}",
                        title="üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω –∞–ª–µ—Ä—Ç–æ–≤",
                        message=f"–°–∏—Å—Ç–µ–º–∞ –æ–±–Ω–∞—Ä—É–∂–∏–ª–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–π—Å—è –ø–∞—Ç—Ç–µ—Ä–Ω: "
                        f"{count} –ø–æ—Ö–æ–∂–∏—Ö –∞–ª–µ—Ä—Ç–æ–≤",
                        severity=AlertSeverity.MEDIUM,
                        source="ml_analyzer",
                        timestamp=datetime.now(),
                        metadata={
                            "cluster_id": int(cluster_id),
                            "count": int(count),
                        },
                    )

                    self.alert_queue.put(pattern_alert)

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {e}")

    def add_recipient(self, recipient: AlertRecipient) -> None:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∞–ª–µ—Ä—Ç–æ–≤"""
        try:
            self.recipients[recipient.user_id] = recipient
            self.logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—å: {recipient.name}")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è: {e}")

    def remove_recipient(self, user_id: str) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∞–ª–µ—Ä—Ç–æ–≤"""
        try:
            if user_id in self.recipients:
                del self.recipients[user_id]
                self.logger.info(f"–£–¥–∞–ª–µ–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—å: {user_id}")
                return True
            return False
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è: {e}")
            return False

    def add_template(self, template: AlertTemplate) -> None:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –∞–ª–µ—Ä—Ç–∞"""
        try:
            self.templates[template.name] = template
            self.logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω —à–∞–±–ª–æ–Ω: {template.name}")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞: {e}")

    def get_alert_history(self, limit: int = 100) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∞–ª–µ—Ä—Ç–æ–≤"""
        try:
            recent_alerts = self.alert_history[-limit:]
            return [
                {
                    "id": alert.id,
                    "title": alert.title,
                    "message": alert.message,
                    "severity": alert.severity.value,
                    "source": alert.source,
                    "timestamp": alert.timestamp.isoformat(),
                    "resolved": alert.resolved,
                    "channels": [ch.value for ch in alert.channels],
                }
                for alert in recent_alerts
            ]
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∞–ª–µ—Ä—Ç–æ–≤: {e}")
            return []

    def get_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤"""
        try:
            uptime = time.time() - self.stats["uptime_start"]
            return {
                "uptime_seconds": uptime,
                "uptime_human": str(timedelta(seconds=int(uptime))),
                "alerts_sent": self.stats["alerts_sent"],
                "alerts_blocked": self.stats["alerts_blocked"],
                "total_recipients": len(self.recipients),
                "total_templates": len(self.templates),
                "channels_used": self.stats["channels_used"],
                "severity_distribution": self.stats["severity_distribution"],
                "is_running": self.is_running,
            }
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}

    async def stop_alert_processing(self) -> None:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤"""
        try:
            self.is_running = False
            self.logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤")

            # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤
            for thread in self.processing_threads:
                if thread.is_alive():
                    thread.join(timeout=5)

            self.logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤: {e}")

    def get_status(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ AlertManager"""
        try:
            if self.is_running:
                return "running"
            else:
                return "stopped"
        except Exception:
            return "unknown"

    def start_alerts(self) -> bool:
        """–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –∞–ª–µ—Ä—Ç–æ–≤"""
        try:
            if not self.is_running:
                self.is_running = True
                self.logger.info("–°–∏—Å—Ç–µ–º–∞ –∞–ª–µ—Ä—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω–∞")
                return True
            else:
                self.logger.warning("–°–∏—Å—Ç–µ–º–∞ –∞–ª–µ—Ä—Ç–æ–≤ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞")
                return False
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∞–ª–µ—Ä—Ç–æ–≤: {e}")
            return False

    def stop_alerts(self) -> bool:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∞–ª–µ—Ä—Ç–æ–≤"""
        try:
            if self.is_running:
                self.is_running = False
                self.logger.info("–°–∏—Å—Ç–µ–º–∞ –∞–ª–µ—Ä—Ç–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
                return True
            else:
                self.logger.warning("–°–∏—Å—Ç–µ–º–∞ –∞–ª–µ—Ä—Ç–æ–≤ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
                return False
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∏—Å—Ç–µ–º—ã –∞–ª–µ—Ä—Ç–æ–≤: {e}")
            return False

    def get_alert_info(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ –∞–ª–µ—Ä—Ç–æ–≤"""
        try:
            return {
                "is_running": self.is_running,
                "recipients_count": len(self.recipients),
                "templates_count": len(self.templates),
                "alerts_sent": self.stats.get("alerts_sent", 0),
                "alerts_failed": self.stats.get("alerts_failed", 0),
                "channels_available": len(AlertChannel),
                "severity_levels": len(AlertSeverity),
                "processing_threads": len(self.processing_threads),
            }
        except Exception as e:
            self.logger.error(
                f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ –∞–ª–µ—Ä—Ç–æ–≤: {e}"
            )
            return {
                "is_running": False,
                "recipients_count": 0,
                "templates_count": 0,
                "alerts_sent": 0,
                "alerts_failed": 0,
                "channels_available": 0,
                "severity_levels": 0,
                "processing_threads": 0,
                "error": str(e),
            }


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":

    async def main():
        alert_manager = AlertManager("TestAlertManager")
        await alert_manager.start_alert_processing()

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–ª–µ—Ä—Ç–∞
        alert_id = alert_manager.send_alert(
            title="–¢–µ—Å—Ç–æ–≤—ã–π –∞–ª–µ—Ä—Ç",
            message="–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
            severity=AlertSeverity.MEDIUM,
            channels=[AlertChannel.EMAIL, AlertChannel.PUSH],
        )

        print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–ª–µ—Ä—Ç: {alert_id}")

        # –û–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await asyncio.sleep(5)

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        alert_stats = alert_manager.get_statistics()
        print(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {alert_stats}")

        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞
        await alert_manager.stop_alert_processing()

    asyncio.run(main())
