#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ incident_response.py
"""

import sys
import os
sys.path.append('/Users/sergejhlystov/ALADDIN_NEW')

from security.incident_response import (
    IncidentResponseManager, Incident, IncidentType, 
    IncidentPriority, IncidentStatus, SecurityLevel,
    IncidentValidationError, IncidentLimitExceededError
)
from datetime import datetime

def test_enhanced_functionality():
    """–¢–µ—Å—Ç –≤—Å–µ—Ö –Ω–æ–≤—ã—Ö —É–ª—É—á—à–µ–Ω–∏–π"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–õ–£–ß–®–ï–ù–ù–û–ô –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–ò")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    manager = IncidentResponseManager("TestManager")
    
    # –¢–µ—Å—Ç 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫
    print("\n1Ô∏è‚É£ –¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –∑–∞–ø—É—Å–∫–∞...")
    assert manager.initialize(), "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"
    assert manager.start(), "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞"
    print("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ —É—Å–ø–µ—à–Ω—ã")
    
    # –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π...")
    try:
        incident = manager.create_incident(
            title="Test Incident",
            description="Test description",
            incident_type=IncidentType.MALWARE_INFECTION,
            priority=IncidentPriority.HIGH,
            severity=SecurityLevel.HIGH
        )
        assert incident is not None, "–ò–Ω—Ü–∏–¥–µ–Ω—Ç –Ω–µ —Å–æ–∑–¥–∞–Ω"
        print("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ")
    except IncidentValidationError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
        return False
    
    # –¢–µ—Å—Ç 3: –ù–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –∫–ª–∞—Å—Å–∞ Incident
    print("\n3Ô∏è‚É£ –¢–µ—Å—Ç –Ω–æ–≤—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –∫–ª–∞—Å—Å–∞ Incident...")
    assert incident.is_open(), "is_open() –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å True"
    assert not incident.is_resolved(), "is_resolved() –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å False"
    assert incident.is_escalated(), "is_escalated() –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å True"
    assert incident.get_age_hours() >= 0, "get_age_hours() –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ"
    assert incident.get_priority_score() == 3, "get_priority_score() –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 3 –¥–ª—è HIGH"
    assert incident.get_severity_score() == 3, "get_severity_score() –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 3 –¥–ª—è HIGH"
    print("‚úÖ –ù–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã Incident —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    # –¢–µ—Å—Ç 4: –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    print("\n4Ô∏è‚É£ –¢–µ—Å—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤...")
    str_repr = str(incident)
    repr_repr = repr(incident)
    assert "Test Incident" in str_repr, "str() –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫"
    assert "Incident(" in repr_repr, "repr() –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 'Incident('"
    print("‚úÖ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    # –¢–µ—Å—Ç 5: –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
    print("\n5Ô∏è‚É£ –¢–µ—Å—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞...")
    with IncidentResponseManager("ContextTest") as ctx_manager:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –≤—Ä—É—á–Ω—É—é –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏
        ctx_manager.initialize()
        ctx_manager.start()
        assert ctx_manager.status.value in ["RUNNING", "running"], f"–°—Ç–∞—Ç—É—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å RUNNING –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ, –ø–æ–ª—É—á–µ–Ω: {ctx_manager.status.value}"
    print("‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    # –¢–µ—Å—Ç 6: –ò—Ç–µ—Ä–∞—Ü–∏—è –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
    print("\n6Ô∏è‚É£ –¢–µ—Å—Ç –∏—Ç–µ—Ä–∞—Ü–∏–∏ –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è...")
    manager.incidents[incident.incident_id] = incident
    assert len(manager) == 1, "len() –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 1"
    assert incident.incident_id in manager, "in –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å"
    print("‚úÖ –ò—Ç–µ—Ä–∞—Ü–∏—è –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    # –¢–µ—Å—Ç 7: –ù–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –ø–æ–∏—Å–∫–∞
    print("\n7Ô∏è‚É£ –¢–µ—Å—Ç –Ω–æ–≤—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –ø–æ–∏—Å–∫–∞...")
    incidents_by_team = manager.get_incidents_by_team("Security Team")
    high_priority = manager.get_high_priority_incidents()
    search_results = manager.search_incidents("Test")
    assert len(search_results) >= 0, "–ü–æ–∏—Å–∫ –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å"
    print("‚úÖ –ú–µ—Ç–æ–¥—ã –ø–æ–∏—Å–∫–∞ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    # –¢–µ—Å—Ç 8: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\n8Ô∏è‚É£ –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
    stats = manager.get_incident_statistics()
    assert "total" in stats, "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 'total'"
    assert stats["total"] >= 0, "–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å >= 0"
    print("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    # –¢–µ—Å—Ç 9: –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
    print("\n9Ô∏è‚É£ –¢–µ—Å—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è...")
    cache_info = manager.get_cache_info()
    assert "incident_by_id" in cache_info, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—ç—à–µ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 'incident_by_id'"
    print("‚úÖ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    # –¢–µ—Å—Ç 10: –î–µ—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    print("\nüîü –¢–µ—Å—Ç –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫...")
    metrics = manager.get_detailed_metrics()
    assert "basic_metrics" in metrics, "–ú–µ—Ç—Ä–∏–∫–∏ –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å 'basic_metrics'"
    report = manager.get_performance_report()
    assert "–û–¢–ß–ï–¢ –û –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò" in report, "–û—Ç—á–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫"
    print("‚úÖ –î–µ—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    # –¢–µ—Å—Ç 11: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    print("\n1Ô∏è‚É£1Ô∏è‚É£ –¢–µ—Å—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤...")
    import asyncio
    
    async def test_async():
        async_incident = await manager.create_incident_async(
            title="Async Test",
            description="Async description",
            incident_type=IncidentType.DATA_BREACH,
            priority=IncidentPriority.MEDIUM,
            severity=SecurityLevel.MEDIUM
        )
        return async_incident is not None
    
    result = asyncio.run(test_async())
    assert result, "–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å"
    print("‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    # –¢–µ—Å—Ç 12: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    print("\n1Ô∏è‚É£2Ô∏è‚É£ –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏...")
    try:
        result = manager.create_incident("", "description", IncidentType.MALWARE_INFECTION, 
                               IncidentPriority.HIGH, SecurityLevel.HIGH)
        if result is None:
            print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç None)")
        else:
            assert False, "–î–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"
    except IncidentValidationError:
        print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (–∏—Å–∫–ª—é—á–µ–Ω–∏–µ)")
    
    print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
    print("=" * 50)
    return True

if __name__ == "__main__":
    try:
        test_enhanced_functionality()
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: {e}")
        sys.exit(1)