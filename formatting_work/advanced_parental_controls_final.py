#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü–†–û–î–í–ò–ù–£–¢–´–ô –†–û–î–ò–¢–ï–õ–¨–°–ö–ò–ô –ö–û–ù–¢–†–û–õ–¨ - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –æ–±—Ö–æ–¥–∞
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å IncognitoProtectionBot –¥–ª—è –ø–æ–ª–Ω–æ–π –∑–∞—â–∏—Ç—ã –¥–µ—Ç–µ–π
"""

import asyncio
import json
from datetime import datetime
from enum import Enum
from typing import Any, Dict, List

from core.base import SecurityBase
from security.bots.incognito_protection_bot import (
    IncognitoProtectionBot,
    ThreatLevel,
)


class ProtectionMode(Enum):
    """–†–µ–∂–∏–º—ã –∑–∞—â–∏—Ç—ã"""

    MAXIMUM = "maximum"  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞
    HIGH = "high"  # –í—ã—Å–æ–∫–∞—è –∑–∞—â–∏—Ç–∞
    MEDIUM = "medium"  # –°—Ä–µ–¥–Ω—è—è –∑–∞—â–∏—Ç–∞
    LOW = "low"  # –ù–∏–∑–∫–∞—è –∑–∞—â–∏—Ç–∞


class AdvancedParentalControls(SecurityBase):
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ–±—Ö–æ–¥–∞"""

    def __init__(self, name: str = "AdvancedParentalControls"):
        super().__init__(name)
        self.incognito_bot = IncognitoProtectionBot()
        self.protection_mode = ProtectionMode.MAXIMUM
        self.active_children = {}
        self.monitoring_tasks = {}

    async def setup_child_protection(
        self, child_id: str, protection_level: str = "MAXIMUM"
    ):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∑–∞—â–∏—Ç—ã –¥–ª—è —Ä–µ–±–µ–Ω–∫–∞"""
        try:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Ä–æ–≤–Ω—è –∑–∞—â–∏—Ç—ã
            if protection_level == "MAXIMUM":
                self.incognito_bot.protection_level = "MAXIMUM"
                self.incognito_bot.block_vpn = True
                self.incognito_bot.block_incognito = True
                self.incognito_bot.block_proxy = True
                self.incognito_bot.block_tor = True
                self.incognito_bot.emergency_lock_enabled = True

            # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            task = asyncio.create_task(
                self.incognito_bot.monitor_continuous_protection(child_id)
            )
            self.monitoring_tasks[child_id] = task
            self.active_children[child_id] = {
                "protection_level": protection_level,
                "start_time": datetime.now(),
                "blocked_attempts": 0,
                "last_alert": None,
            }

            self.logger.info(
                f"üõ°Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è —Ä–µ–±–µ–Ω–∫–∞ {child_id}"
            )
            return True

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞—â–∏—Ç—ã: {e}")
            return False

    async def emergency_response(
        self, child_id: str, threat_level: ThreatLevel
    ):
        """–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –ø–æ–ø—ã—Ç–∫—É –æ–±—Ö–æ–¥–∞"""
        try:
            if threat_level == ThreatLevel.CRITICAL:
                # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                await self.incognito_bot.emergency_lock_device(child_id)

                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª–µ–π
                await self._send_critical_alert(
                    child_id, "–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –£–ì–†–û–ó–ê: –ü–æ–ø—ã—Ç–∫–∞ –æ–±—Ö–æ–¥–∞ –∑–∞—â–∏—Ç—ã!"
                )

                # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
                screenshot = await self.incognito_bot.take_screenshot(child_id)

                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
                self.logger.critical(
                    f"üö® –≠–ö–°–¢–†–ï–ù–ù–´–ô –†–ï–ñ–ò–ú: –†–µ–±–µ–Ω–æ–∫ {child_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω! "
                    f"–°–∫—Ä–∏–Ω—à–æ—Ç: {screenshot}"
                )

            elif threat_level == ThreatLevel.HIGH:
                # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –±—Ä–∞—É–∑–µ—Ä–æ–≤
                await self.incognito_bot._block_incognito_mode()
                await self._send_high_alert(
                    child_id, "–í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —É–≥—Ä–æ–∑—ã: –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –±—Ä–∞—É–∑–µ—Ä–æ–≤"
                )

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            if child_id in self.active_children:
                self.active_children[child_id]["blocked_attempts"] += 1
                self.active_children[child_id]["last_alert"] = datetime.now()

            return True

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: {e}")
            return False

    async def _send_critical_alert(self, child_id: str, message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        alert = {
            "child_id": child_id,
            "alert_type": "CRITICAL",
            "message": message,
            "timestamp": datetime.now().isoformat(),
            "action_required": "IMMEDIATE",
        }

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ –≤—Å–µ –∫–∞–Ω–∞–ª—ã
        print(f"üö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï: {message}")

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
        with open(f"data/critical_alerts_{child_id}.json", "a") as f:
            f.write(json.dumps(alert) + "\n")

    async def _send_high_alert(self, child_id: str, message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã—Å–æ–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è"""
        alert = {
            "child_id": child_id,
            "alert_type": "HIGH",
            "message": message,
            "timestamp": datetime.now().isoformat(),
            "action_required": "SOON",
        }

        print(f"‚ö†Ô∏è –í–´–°–û–ö–ò–ô –£–†–û–í–ï–ù–¨: {message}")

        with open(f"data/high_alerts_{child_id}.json", "a") as f:
            f.write(json.dumps(alert) + "\n")

    def get_protection_report(self, child_id: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ –∑–∞—â–∏—Ç–µ"""
        try:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç IncognitoProtectionBot
            bot_stats = self.incognito_bot.get_protection_statistics(child_id)

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            child_info = self.active_children.get(child_id, {})

            report = {
                "child_id": child_id,
                "protection_active": child_id in self.active_children,
                "protection_level": child_info.get(
                    "protection_level", "UNKNOWN"
                ),
                "monitoring_duration": str(
                    datetime.now()
                    - child_info.get("start_time", datetime.now())
                ),
                "total_blocked_attempts": child_info.get(
                    "blocked_attempts", 0
                ),
                "last_alert": (
                    child_info.get("last_alert").isoformat()
                    if child_info.get("last_alert")
                    else None
                ),
                "bot_statistics": bot_stats,
                "recommendations": self._generate_recommendations(bot_stats),
            }

            return report

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
            return {}

    def _generate_recommendations(self, stats: Dict[str, Any]) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        recommendations = []

        # –ê–Ω–∞–ª–∏–∑ –ø–æ–ø—ã—Ç–æ–∫ –æ–±—Ö–æ–¥–∞
        bypass_attempts = stats.get("bypass_attempts", {})
        if bypass_attempts:
            for method, data in bypass_attempts.items():
                if data["successful_attempts"] > 0:
                    recommendations.append(
                        f"‚ö†Ô∏è –£—Å–∏–ª–∏—Ç—å –∑–∞—â–∏—Ç—É –æ—Ç {method}: "
                        f"{data['successful_attempts']} —É—Å–ø–µ—à–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫"
                    )

        # –ê–Ω–∞–ª–∏–∑ VPN –¥–µ—Ç–µ–∫—Ü–∏–π
        vpn_stats = stats.get("vpn_detections", {})
        if vpn_stats.get("total", 0) > 5:
            recommendations.append(
                "üîí –ß–∞—Å—Ç—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è VPN - "
                "—Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞"
            )

        # –ê–Ω–∞–ª–∏–∑ –∏–Ω–∫–æ–≥–Ω–∏—Ç–æ –¥–µ—Ç–µ–∫—Ü–∏–π
        incognito_stats = stats.get("incognito_detections", {})
        if incognito_stats.get("total", 0) > 3:
            recommendations.append(
                "üåê –ß–∞—Å—Ç—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –∏–Ω–∫–æ–≥–Ω–∏—Ç–æ - —É—Å–∏–ª–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"
            )

        if not recommendations:
            recommendations.append("‚úÖ –ó–∞—â–∏—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ")

        return recommendations


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def main():
    """–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è AdvancedParentalControls"""
    controls = AdvancedParentalControls()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∑–∞—â–∏—Ç—ã –¥–ª—è —Ä–µ–±–µ–Ω–∫–∞
    child_id = "child_001"
    await controls.setup_child_protection(child_id, "MAXIMUM")

    print("üõ°Ô∏è –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
    print(f"üë∂ –ó–∞—â–∏—Ç–∞ –¥–ª—è —Ä–µ–±–µ–Ω–∫–∞: {child_id}")
    print("üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: VPN, –∏–Ω–∫–æ–≥–Ω–∏—Ç–æ, –ø—Ä–æ–∫—Å–∏, Tor")
    print("üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –í–ö–õ–Æ–ß–ï–ù–´")
    print("üîí –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞: –í–ö–õ–Æ–ß–ï–ù–ê")

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    report = controls.get_protection_report(child_id)
    print(f"üìä –û—Ç—á–µ—Ç: {json.dumps(report, indent=2, ensure_ascii=False)}")


if __name__ == "__main__":
    asyncio.run(main())
