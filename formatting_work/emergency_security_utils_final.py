#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–£—Ç–∏–ª–∏—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—è
–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ Single Responsibility –ø—Ä–∏–Ω—Ü–∏–ø–∞
"""

import hashlib
import re
from datetime import datetime
from typing import Any, Dict


class InputSanitizer:
    """–û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞"""

    @staticmethod
    def sanitize_text(text: str) -> str:
        """
        –û—á–∏—Å—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç –æ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤

        Args:
            text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç

        Returns:
            str: –û—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        if not text:
            return ""

        # –£–¥–∞–ª—è–µ–º HTML —Ç–µ–≥–∏
        text = re.sub(r"<[^>]+>", "", text)

        # –£–¥–∞–ª—è–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        text = re.sub(r'[<>"\']', "", text)

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
        return text[:1000]

    @staticmethod
    def sanitize_phone(phone: str) -> str:
        """
        –û—á–∏—Å—Ç–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞

        Args:
            phone: –ò—Å—Ö–æ–¥–Ω—ã–π –Ω–æ–º–µ—Ä

        Returns:
            str: –û—á–∏—â–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä
        """
        if not phone:
            return ""

        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ +
        return re.sub(r"[^\d+]", "", phone)

    @staticmethod
    def sanitize_email(email: str) -> str:
        """
        –û—á–∏—Å—Ç–∏—Ç—å email –∞–¥—Ä–µ—Å

        Args:
            email: –ò—Å—Ö–æ–¥–Ω—ã–π email

        Returns:
            str: –û—á–∏—â–µ–Ω–Ω—ã–π email
        """
        if not email:
            return ""

        # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –∏ —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
        return email.lower().strip()


class SecurityValidator:
    """–í–∞–ª–∏–¥–∞—Ç–æ—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""

    @staticmethod
    def validate_emergency_description(description: str) -> bool:
        """
        –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏

        Args:
            description: –û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

        Returns:
            bool: True –µ—Å–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ
        """
        if not description:
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É
        if len(description) < 10:
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–ø–∞–º
        spam_indicators = {"test", "—Ç–µ—Å—Ç", "spam", "—Å–ø–∞–º"}
        description_lower = description.lower()
        if any(
            indicator in description_lower for indicator in spam_indicators
        ):
            return False

        return True

    @staticmethod
    def validate_input_length(
        text: str, min_length: int = 1, max_length: int = 1000
    ) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–ª–∏–Ω—É –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö

        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            min_length: –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞
            max_length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞

        Returns:
            bool: True –µ—Å–ª–∏ –¥–ª–∏–Ω–∞ –ø—Ä–∏–µ–º–ª–µ–º–∞
        """
        if not text:
            return min_length == 0

        return min_length <= len(text) <= max_length

    @staticmethod
    def validate_contains_suspicious_content(text: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ

        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

        Returns:
            bool: True –µ—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ
        """
        if not text:
            return False

        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        suspicious_patterns = [
            r"<script.*?>.*?</script>",  # JavaScript
            r"javascript:",  # JavaScript –ø—Ä–æ—Ç–æ–∫–æ–ª
            r"data:text/html",  # Data URI
            r"vbscript:",  # VBScript
            r"on\w+\s*=",  # Event handlers
        ]

        text_lower = text.lower()
        for pattern in suspicious_patterns:
            if re.search(pattern, text_lower):
                return True

        return False


class DataHasher:
    """–•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""

    @staticmethod
    def generate_event_hash(event_data: Dict[str, Any]) -> str:
        """
        –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ö–µ—à –¥–ª—è —Å–æ–±—ã—Ç–∏—è (–¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏)

        Args:
            event_data: –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è

        Returns:
            str: –•–µ—à —Å–æ–±—ã—Ç–∏—è
        """
        try:
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –∏–∑ –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–ª–µ–π
            key_fields = [
                str(event_data.get("emergency_type", "")),
                str(event_data.get("location", {}).get("coordinates", (0, 0))),
                str(event_data.get("timestamp", "")),
                str(event_data.get("description", ""))[
                    :100
                ],  # –ü–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤
            ]

            hash_string = "|".join(key_fields)
            return hashlib.md5(hash_string.encode()).hexdigest()
        except Exception:
            return ""

    @staticmethod
    def generate_contact_hash(contact_data: Dict[str, Any]) -> str:
        """
        –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ö–µ—à –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞

        Args:
            contact_data: –î–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞

        Returns:
            str: –•–µ—à –∫–æ–Ω—Ç–∞–∫—Ç–∞
        """
        try:
            key_fields = [
                str(contact_data.get("name", "")),
                str(contact_data.get("phone", "")),
                str(contact_data.get("email", "")),
            ]

            hash_string = "|".join(key_fields)
            return hashlib.sha256(hash_string.encode()).hexdigest()
        except Exception:
            return ""


class SecurityLogger:
    """–õ–æ–≥–≥–µ—Ä –¥–ª—è —Å–æ–±—ã—Ç–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""

    @staticmethod
    def log_security_event(
        event_type: str, details: str, severity: str = "medium"
    ) -> None:
        """
        –ó–∞–ø–∏—Å–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤ –ª–æ–≥

        Args:
            event_type: –¢–∏–ø —Å–æ–±—ã—Ç–∏—è
            details: –î–µ—Ç–∞–ª–∏ —Å–æ–±—ã—Ç–∏—è
            severity: –°–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å (low, medium, high, critical)
        """
        try:
            timestamp = datetime.now().isoformat()
            log_entry = (
                f"[{timestamp}] SECURITY_{severity.upper()}: "
                f"{event_type} - {details}"
            )

            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥ —Ñ–∞–π–ª
            print(f"üîí {log_entry}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {e}")

    @staticmethod
    def log_validation_failure(field: str, value: str, reason: str) -> None:
        """
        –ó–∞–ø–∏—Å–∞—Ç—å –Ω–µ—É–¥–∞—á–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é

        Args:
            field: –ü–æ–ª–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ –ø—Ä–æ—à–ª–æ –≤–∞–ª–∏–¥–∞—Ü–∏—é
            value: –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è
            reason: –ü—Ä–∏—á–∏–Ω–∞ –Ω–µ—É–¥–∞—á–∏
        """
        SecurityLogger.log_security_event(
            "VALIDATION_FAILURE",
            f"Field: {field}, Value: {value[:50]}, Reason: {reason}",
            "medium",
        )

    @staticmethod
    def log_suspicious_activity(activity: str, details: str) -> None:
        """
        –ó–∞–ø–∏—Å–∞—Ç—å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å

        Args:
            activity: –¢–∏–ø –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            details: –î–µ—Ç–∞–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        """
        SecurityLogger.log_security_event(
            "SUSPICIOUS_ACTIVITY",
            f"Activity: {activity}, Details: {details}",
            "high",
        )


class EmergencySecurityUtils:
    """–û—Å–Ω–æ–≤–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""

    @staticmethod
    def secure_emergency_data(data: Dict[str, Any]) -> Dict[str, Any]:
        """
        –û–±–µ–∑–æ–ø–∞—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏

        Args:
            data: –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

        Returns:
            Dict: –û–±–µ–∑–æ–ø–∞—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        """
        try:
            secured_data = {}

            for key, value in data.items():
                if isinstance(value, str):
                    # –û—á–∏—â–∞–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                    secured_data[key] = InputSanitizer.sanitize_text(value)
                elif isinstance(value, dict):
                    # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞—Ä–∏
                    secured_data[key] = (
                        EmergencySecurityUtils.secure_emergency_data(value)
                    )
                else:
                    secured_data[key] = value

            return secured_data
        except Exception as e:
            SecurityLogger.log_security_event(
                "DATA_SECURING_ERROR", f"Error securing data: {str(e)}", "high"
            )
            return data

    @staticmethod
    def validate_emergency_request(request_data: Dict[str, Any]) -> bool:
        """
        –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏

        Args:
            request_data: –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞

        Returns:
            bool: True –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –≤–∞–ª–∏–¥–µ–Ω
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            required_fields = ["emergency_type", "description", "location"]
            for field in required_fields:
                if field not in request_data:
                    SecurityLogger.log_validation_failure(
                        field, "missing", "Required field missing"
                    )
                    return False

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
            description = request_data.get("description", "")
            if not SecurityValidator.validate_emergency_description(
                description
            ):
                SecurityLogger.log_validation_failure(
                    "description", description, "Invalid description"
                )
                return False

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            for key, value in request_data.items():
                if isinstance(value, str):
                    if SecurityValidator.validate_contains_suspicious_content(
                        value
                    ):
                        SecurityLogger.log_suspicious_activity(
                            "SUSPICIOUS_INPUT",
                            f"Field: {key}, Value: {value[:50]}",
                        )
                        return False

            return True
        except Exception as e:
            SecurityLogger.log_security_event(
                "VALIDATION_ERROR",
                f"Error validating request: {str(e)}",
                "high",
            )
            return False
