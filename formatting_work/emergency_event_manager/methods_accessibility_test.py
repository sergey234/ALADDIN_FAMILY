#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏ –≤—ã–∑–æ–≤–∞ –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤ EmergencyEventManager
"""

import sys
import os
sys.path.append('/Users/sergejhlystov/ALADDIN_NEW')

from datetime import datetime
from security.ai_agents.emergency_event_manager import EmergencyEventManager
from security.ai_agents.emergency_models import EmergencyType, EmergencySeverity, ResponseStatus

def test_all_methods():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –º–µ—Ç–æ–¥—ã EmergencyEventManager"""
    
    print("üß™ –¢–ï–°–¢ –î–û–°–¢–£–ü–ù–û–°–¢–ò –ò –í–´–ó–û–í–ê –í–°–ï–• –ú–ï–¢–û–î–û–í")
    print("=" * 60)
    
    try:
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä
        print("1Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞...")
        manager = EmergencyEventManager()
        print("‚úÖ EmergencyEventManager —Å–æ–∑–¥–∞–Ω")
        
        # –¢–µ—Å—Ç 1: create_event
        print("\n2Ô∏è‚É£ –¢–µ—Å—Ç create_event...")
        event = manager.create_event(
            emergency_type=EmergencyType.SECURITY,
            severity=EmergencySeverity.HIGH,
            location={"lat": 55.7558, "lon": 37.6176, "address": "–ú–æ—Å–∫–≤–∞"},
            description="Security breach detected in main system",
            user_id="test_user_123"
        )
        print(f"‚úÖ create_event: {event.event_id}")
        
        # –¢–µ—Å—Ç 2: get_event
        print("\n3Ô∏è‚É£ –¢–µ—Å—Ç get_event...")
        retrieved_event = manager.get_event(event.event_id)
        if retrieved_event:
            print(f"‚úÖ get_event: {retrieved_event.event_id}")
        else:
            print("‚ùå get_event: —Å–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return False
        
        # –¢–µ—Å—Ç 3: update_event_status
        print("\n4Ô∏è‚É£ –¢–µ—Å—Ç update_event_status...")
        success = manager.update_event_status(event.event_id, ResponseStatus.IN_PROGRESS)
        if success:
            print("‚úÖ update_event_status: —É—Å–ø–µ—à–Ω–æ")
        else:
            print("‚ùå update_event_status: –æ—à–∏–±–∫–∞")
            return False
        
        # –¢–µ—Å—Ç 4: get_events_by_type
        print("\n5Ô∏è‚É£ –¢–µ—Å—Ç get_events_by_type...")
        events_by_type = manager.get_events_by_type(EmergencyType.SECURITY)
        print(f"‚úÖ get_events_by_type: {len(events_by_type)} —Å–æ–±—ã—Ç–∏–π")
        
        # –¢–µ—Å—Ç 5: get_events_by_severity
        print("\n6Ô∏è‚É£ –¢–µ—Å—Ç get_events_by_severity...")
        events_by_severity = manager.get_events_by_severity(EmergencySeverity.HIGH)
        print(f"‚úÖ get_events_by_severity: {len(events_by_severity)} —Å–æ–±—ã—Ç–∏–π")
        
        # –¢–µ—Å—Ç 6: get_recent_events
        print("\n7Ô∏è‚É£ –¢–µ—Å—Ç get_recent_events...")
        recent_events = manager.get_recent_events(hours=1)
        print(f"‚úÖ get_recent_events: {len(recent_events)} —Å–æ–±—ã—Ç–∏–π")
        
        # –¢–µ—Å—Ç 7: get_event_statistics
        print("\n8Ô∏è‚É£ –¢–µ—Å—Ç get_event_statistics...")
        stats = manager.get_event_statistics()
        if stats and 'total_events' in stats:
            print(f"‚úÖ get_event_statistics: {stats['total_events']} —Å–æ–±—ã—Ç–∏–π")
        else:
            print("‚ùå get_event_statistics: –æ—à–∏–±–∫–∞")
            return False
        
        # –¢–µ—Å—Ç 8: cleanup_old_events
        print("\n9Ô∏è‚É£ –¢–µ—Å—Ç cleanup_old_events...")
        cleaned_count = manager.cleanup_old_events(days=0)  # –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ
        print(f"‚úÖ cleanup_old_events: {cleaned_count} —Å–æ–±—ã—Ç–∏–π —É–¥–∞–ª–µ–Ω–æ")
        
        print("\n" + "=" * 60)
        print("üéâ –í–°–ï –ú–ï–¢–û–î–´ –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
        print("‚úÖ –í—Å–µ 8 public –º–µ—Ç–æ–¥–æ–≤ –¥–æ—Å—Ç—É–ø–Ω—ã –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã")
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ï: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = test_all_methods()
    sys.exit(0 if success else 1)