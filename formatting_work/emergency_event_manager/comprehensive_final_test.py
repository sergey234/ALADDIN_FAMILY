#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ EmergencyEventManager
"""

import sys
import os
sys.path.append('/Users/sergejhlystov/ALADDIN_NEW')

from datetime import datetime
from security.ai_agents.emergency_event_manager import EmergencyEventManager
from security.ai_agents.emergency_models import EmergencyType, EmergencySeverity, ResponseStatus

def comprehensive_final_test():
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ EmergencyEventManager"""
    
    print("üß™ –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –í–°–ï–• –ö–û–ú–ü–û–ù–ï–ù–¢–û–í")
    print("=" * 70)
    
    try:
        # 6.10.1 - –°–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞
        print("1Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ EmergencyEventManager...")
        manager = EmergencyEventManager()
        print(f"‚úÖ –≠–∫–∑–µ–º–ø–ª—è—Ä —Å–æ–∑–¥–∞–Ω: {type(manager).__name__}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã
        print(f"‚úÖ –ê—Ç—Ä–∏–±—É—Ç—ã: logger={type(manager.logger).__name__}, events={type(manager.events).__name__}, event_history={type(manager.event_history).__name__}")
        
        # 6.10.2 - –í—ã–∑–≤–∞—Ç—å –∫–∞–∂–¥—ã–π –º–µ—Ç–æ–¥ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        print("\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤...")
        
        # –¢–µ—Å—Ç create_event
        print("\nüìù –¢–µ—Å—Ç create_event...")
        event1 = manager.create_event(
            emergency_type=EmergencyType.SECURITY,
            severity=EmergencySeverity.HIGH,
            location={"lat": 55.7558, "lon": 37.6176, "address": "–ú–æ—Å–∫–≤–∞"},
            description="Security breach detected in main system",
            user_id="user_001"
        )
        print(f"‚úÖ create_event: {event1.event_id}")
        
        event2 = manager.create_event(
            emergency_type=EmergencyType.MEDICAL,
            severity=EmergencySeverity.MEDIUM,
            location={"lat": 55.7600, "lon": 37.6200, "address": "–ú–æ—Å–∫–≤–∞"},
            description="Medical emergency in building A",
            user_id="user_002"
        )
        print(f"‚úÖ create_event: {event2.event_id}")
        
        # –¢–µ—Å—Ç get_event
        print("\nüîç –¢–µ—Å—Ç get_event...")
        retrieved_event = manager.get_event(event1.event_id)
        if retrieved_event and retrieved_event.event_id == event1.event_id:
            print(f"‚úÖ get_event: —Å–æ–±—ã—Ç–∏–µ –Ω–∞–π–¥–µ–Ω–æ")
        else:
            print("‚ùå get_event: –æ—à–∏–±–∫–∞")
            return False
        
        # –¢–µ—Å—Ç update_event_status
        print("\nüîÑ –¢–µ—Å—Ç update_event_status...")
        success = manager.update_event_status(event1.event_id, ResponseStatus.IN_PROGRESS)
        if success:
            print("‚úÖ update_event_status: —É—Å–ø–µ—à–Ω–æ")
        else:
            print("‚ùå update_event_status: –æ—à–∏–±–∫–∞")
            return False
        
        # –¢–µ—Å—Ç get_events_by_type
        print("\nüìä –¢–µ—Å—Ç get_events_by_type...")
        security_events = manager.get_events_by_type(EmergencyType.SECURITY)
        medical_events = manager.get_events_by_type(EmergencyType.MEDICAL)
        print(f"‚úÖ get_events_by_type: SECURITY={len(security_events)}, MEDICAL={len(medical_events)}")
        
        # –¢–µ—Å—Ç get_events_by_severity
        print("\n‚ö†Ô∏è –¢–µ—Å—Ç get_events_by_severity...")
        high_severity = manager.get_events_by_severity(EmergencySeverity.HIGH)
        medium_severity = manager.get_events_by_severity(EmergencySeverity.MEDIUM)
        print(f"‚úÖ get_events_by_severity: HIGH={len(high_severity)}, MEDIUM={len(medium_severity)}")
        
        # –¢–µ—Å—Ç get_recent_events
        print("\n‚è∞ –¢–µ—Å—Ç get_recent_events...")
        recent_events = manager.get_recent_events(hours=1)
        print(f"‚úÖ get_recent_events: {len(recent_events)} —Å–æ–±—ã—Ç–∏–π")
        
        # –¢–µ—Å—Ç get_event_statistics
        print("\nüìà –¢–µ—Å—Ç get_event_statistics...")
        stats = manager.get_event_statistics()
        if stats and 'total_events' in stats:
            print(f"‚úÖ get_event_statistics: {stats['total_events']} —Å–æ–±—ã—Ç–∏–π, resolution_rate={stats.get('resolution_rate', 0):.1f}%")
        else:
            print("‚ùå get_event_statistics: –æ—à–∏–±–∫–∞")
            return False
        
        # 6.10.3 - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        print("\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        assert isinstance(manager.get_event(event1.event_id), type(event1)), "get_event –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å EmergencyEvent"
        assert isinstance(manager.get_events_by_type(EmergencyType.SECURITY), list), "get_events_by_type –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å list"
        assert isinstance(manager.get_events_by_severity(EmergencySeverity.HIGH), list), "get_events_by_severity –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å list"
        assert isinstance(manager.get_recent_events(), list), "get_recent_events –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å list"
        assert isinstance(manager.get_event_statistics(), dict), "get_event_statistics –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å dict"
        assert isinstance(manager.update_event_status(event1.event_id, ResponseStatus.RESOLVED), bool), "update_event_status –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å bool"
        
        print("‚úÖ –í—Å–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
        
        # 6.10.4 - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫
        print("\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫...")
        
        # –¢–µ—Å—Ç —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        try:
            manager.create_event(
                emergency_type=EmergencyType.SECURITY,
                severity=EmergencySeverity.HIGH,
                location={"lat": 55.7558},
                description="Invalid",  # –ù–µ–≤–∞–ª–∏–¥–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
                user_id="test"
            )
            print("‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ")
            return False
        except ValueError:
            print("‚úÖ ValueError –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        # –¢–µ—Å—Ç —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º ID
        result = manager.get_event("nonexistent_id")
        if result is None:
            print("‚úÖ get_event —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º ID –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç None")
        else:
            print("‚ùå get_event —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º ID –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å None")
            return False
        
        # –¢–µ—Å—Ç update_event_status —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º ID
        result = manager.update_event_status("nonexistent_id", ResponseStatus.PENDING)
        if not result:
            print("‚úÖ update_event_status —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º ID –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç False")
        else:
            print("‚ùå update_event_status —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º ID –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å False")
            return False
        
        print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        # 6.10.5 - –¢–µ—Å—Ç cleanup_old_events
        print("\n5Ô∏è‚É£ –¢–µ—Å—Ç cleanup_old_events...")
        cleaned_count = manager.cleanup_old_events(days=0)  # –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Å–æ–±—ã—Ç–∏—è
        print(f"‚úÖ cleanup_old_events: {cleaned_count} —Å–æ–±—ã—Ç–∏–π —É–¥–∞–ª–µ–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–±—ã—Ç–∏—è —É–¥–∞–ª–µ–Ω—ã
        remaining_events = len(manager.events)
        if remaining_events == 0:
            print("‚úÖ –í—Å–µ —Å–æ–±—ã—Ç–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã")
        else:
            print(f"‚ö†Ô∏è –û—Å—Ç–∞–ª–æ—Å—å {remaining_events} —Å–æ–±—ã—Ç–∏–π")
        
        print("\n" + "=" * 70)
        print("üéâ –í–°–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´ –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
        print("‚úÖ EmergencyEventManager –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ–Ω")
        print("‚úÖ –í—Å–µ 9 –º–µ—Ç–æ–¥–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        print("‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
        print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ï: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = comprehensive_final_test()
    sys.exit(0 if success else 1)