#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ mobile_security_agent_extra.py
"""

import sys
import os
import asyncio
sys.path.append('/Users/sergejhlystov/ALADDIN_NEW')

from security.ai_agents.mobile_security_agent_extra import (
    MobileSecurityAgentExtra, 
    ThreatData,
    mobile_security_agent_extra
)
from datetime import datetime

def test_all_components():
    """–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    print("üîç –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –í–°–ï–• –ö–û–ú–ü–û–ù–ï–ù–¢–û–í")
    print("=" * 60)
    
    results = {
        "class_creation": False,
        "method_calls": False,
        "error_handling": False,
        "integration": False,
        "global_instance": False
    }
    
    try:
        # 1. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤
        print("=== 1. –¢–ï–°–¢ –°–û–ó–î–ê–ù–ò–Ø –≠–ö–ó–ï–ú–ü–õ–Ø–†–û–í ===")
        
        # –°–æ–∑–¥–∞–µ–º ThreatData
        threat_data = ThreatData(
            app_id="com.test.malicious",
            threat_type="malware",
            severity="high",
            confidence=0.9,
            timestamp=datetime.now(),
            details={"source": "test", "code_signed": False, "reputation_score": 0.2}
        )
        print("‚úÖ ThreatData —Å–æ–∑–¥–∞–Ω")
        
        # –°–æ–∑–¥–∞–µ–º MobileSecurityAgentExtra
        agent = MobileSecurityAgentExtra()
        print("‚úÖ MobileSecurityAgentExtra —Å–æ–∑–¥–∞–Ω")
        
        results["class_creation"] = True
        
        # 2. –¢–µ—Å—Ç –≤—ã–∑–æ–≤–∞ –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤
        print("\n=== 2. –¢–ï–°–¢ –í–´–ó–û–í–ê –í–°–ï–• –ú–ï–¢–û–î–û–í ===")
        
        # –¢–µ—Å—Ç analyze_threat
        result = agent.analyze_threat(threat_data)
        print(f"‚úÖ analyze_threat: {result['final_score']:.3f} -> {result['recommendation']}")
        
        # –¢–µ—Å—Ç get_status (async)
        status = asyncio.run(agent.get_status())
        print(f"‚úÖ get_status: {status['status']}")
        
        # –¢–µ—Å—Ç cleanup
        agent.cleanup()
        print("‚úÖ cleanup –≤—ã–ø–æ–ª–Ω–µ–Ω")
        
        results["method_calls"] = True
        
        # 3. –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
        print("\n=== 3. –¢–ï–°–¢ –û–ë–†–ê–ë–û–¢–ö–ò –û–®–ò–ë–û–ö ===")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∞ –æ—à–∏–±–æ–∫
        try:
            # –¢–µ—Å—Ç —Å None –≤ details
            bad_threat_data = ThreatData(
                app_id="com.test.bad",
                threat_type="malware",
                severity="high",
                confidence=0.5,
                timestamp=datetime.now(),
                details=None
            )
            
            # –≠—Ç–æ –¥–æ–ª–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –æ—à–∏–±–∫—É, –Ω–æ –º–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –µ—ë –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
            result = agent.analyze_threat(bad_threat_data)
            print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫: {result}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–µ –±—ã–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞: {e}")
        
        results["error_handling"] = True
        
        # 4. –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
        print("\n=== 4. –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –ú–ï–ñ–î–£ –ö–û–ú–ü–û–ù–ï–ù–¢–ê–ú–ò ===")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∞–≥–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∞
        agent2 = MobileSecurityAgentExtra()
        
        # –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —É–≥—Ä–æ–∑
        threats = [
            ThreatData("com.trusted.app", "benign", "low", 0.1, datetime.now(), {"code_signed": True}),
            ThreatData("com.suspicious.app", "trojan", "high", 0.8, datetime.now(), {"code_signed": False}),
            ThreatData("com.malware.app", "malware", "critical", 0.95, datetime.now(), {"code_signed": False})
        ]
        
        for i, threat in enumerate(threats, 1):
            result = agent2.analyze_threat(threat)
            print(f"   –£–≥—Ä–æ–∑–∞ {i}: {result['recommendation']} (—Å–∫–æ—Ä: {result['final_score']:.3f})")
        
        results["integration"] = True
        
        # 5. –¢–µ—Å—Ç –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
        print("\n=== 5. –¢–ï–°–¢ –ì–õ–û–ë–ê–õ–¨–ù–û–ì–û –≠–ö–ó–ï–ú–ü–õ–Ø–†–ê ===")
        
        global_result = mobile_security_agent_extra.analyze_threat(threat_data)
        print(f"‚úÖ –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä: {global_result['recommendation']}")
        
        results["global_instance"] = True
        
        return results
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        return results

def generate_component_report(results):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    print("\n" + "=" * 60)
    print("üìä –û–¢–ß–ï–¢ –û –°–û–°–¢–û–Ø–ù–ò–ò –ö–û–ú–ü–û–ù–ï–ù–¢–û–í")
    print("=" * 60)
    
    total_tests = len(results)
    passed_tests = sum(results.values())
    
    for test_name, status in results.items():
        status_icon = "‚úÖ" if status else "‚ùå"
        print(f"{status_icon} {test_name}: {'–ü–†–û–®–ï–õ' if status else '–û–®–ò–ë–ö–ê'}")
    
    print(f"\nüéØ –ò–¢–û–ì–û: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏")
    
    if passed_tests == total_tests:
        print("üéâ –í–°–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´ –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
        return True
    else:
        print("‚ö†Ô∏è –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´ –° –ö–û–ú–ü–û–ù–ï–ù–¢–ê–ú–ò")
        return False

def generate_improvement_recommendations():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —É–ª—É—á—à–µ–Ω–∏—é"""
    print("\n" + "=" * 60)
    print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –£–õ–£–ß–®–ï–ù–ò–Æ")
    print("=" * 60)
    
    recommendations = [
        "1. –î–û–ë–ê–í–ò–¢–¨ ASYNC/AWAIT: –†–∞—Å—à–∏—Ä–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ async/await –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
        "2. –í–ê–õ–ò–î–ê–¶–ò–Ø –ü–ê–†–ê–ú–ï–¢–†–û–í: –î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—à–∏–±–æ–∫",
        "3. –†–ê–°–®–ò–†–ï–ù–ù–´–ï DOCSTRINGS: –£–ª—É—á—à–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤",
        "4. –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –ú–ï–¢–û–î–´: –î–æ–±–∞–≤–∏—Ç—å __str__, __repr__ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤",
        "5. –¢–ò–ü–ò–ó–ê–¶–ò–Ø: –î–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥—É—é —Ç–∏–ø–∏–∑–∞—Ü–∏—é –¥–ª—è –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤",
        "6. –ö–û–ù–°–¢–ê–ù–¢–´: –í—ã–Ω–µ—Å—Ç–∏ –º–∞–≥–∏—á–µ—Å–∫–∏–µ —á–∏—Å–ª–∞ –≤ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∫–ª–∞—Å—Å–∞",
        "7. –ö–≠–®–ò–†–û–í–ê–ù–ò–ï: –î–æ–±–∞–≤–∏—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
        "8. –ú–ï–¢–†–ò–ö–ò: –î–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É",
        "9. –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø: –î–æ–±–∞–≤–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –≤–Ω–µ—à–Ω–∏–µ —Ñ–∞–π–ª—ã",
        "10. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –î–æ–±–∞–≤–∏—Ç—å unit —Ç–µ—Å—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–µ—Ç–æ–¥–∞"
    ]
    
    for recommendation in recommendations:
        print(f"   {recommendation}")
    
    print(f"\nüìà –ü–†–ò–û–†–ò–¢–ï–¢ –£–õ–£–ß–®–ï–ù–ò–ô:")
    print("   üî• –í–´–°–û–ö–ò–ô: –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ docstrings")
    print("   üî∂ –°–†–ï–î–ù–ò–ô: Async/await, —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã, —Ç–∏–ø–∏–∑–∞—Ü–∏—è")
    print("   üî∏ –ù–ò–ó–ö–ò–ô: –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ, –º–µ—Ç—Ä–∏–∫–∏, –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è, —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ö–û–ú–ü–û–ù–ï–ù–¢–û–í MOBILE SECURITY AGENT EXTRA")
    print("=" * 70)
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç—ã
    results = test_all_components()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    success = generate_component_report(results)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    generate_improvement_recommendations()
    
    return success

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)