#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –∫–ª–∞—Å—Å–æ–≤ mobile_security_agent_extra.py
"""

import sys
import os
sys.path.append('/Users/sergejhlystov/ALADDIN_NEW')

from security.ai_agents.mobile_security_agent_extra import (
    MobileSecurityAgentExtra, 
    ThreatData
)
from datetime import datetime
import threading

def test_threat_data_attributes():
    """–¢–µ—Å—Ç –∞—Ç—Ä–∏–±—É—Ç–æ–≤ ThreatData"""
    print("=== –¢–ï–°–¢ –ê–¢–†–ò–ë–£–¢–û–í THREATDATA ===")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä ThreatData
        threat_data = ThreatData(
            app_id="com.test.app",
            threat_type="malware",
            severity="high",
            confidence=0.8,
            timestamp=datetime.now(),
            details={"source": "test"}
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –∞—Ç—Ä–∏–±—É—Ç–æ–≤
        print(f"‚úÖ app_id: {type(threat_data.app_id)} = {threat_data.app_id}")
        print(f"‚úÖ threat_type: {type(threat_data.threat_type)} = {threat_data.threat_type}")
        print(f"‚úÖ severity: {type(threat_data.severity)} = {threat_data.severity}")
        print(f"‚úÖ confidence: {type(threat_data.confidence)} = {threat_data.confidence}")
        print(f"‚úÖ timestamp: {type(threat_data.timestamp)} = {threat_data.timestamp}")
        print(f"‚úÖ details: {type(threat_data.details)} = {threat_data.details}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ThreatData: {e}")
        return False

def test_mobile_security_agent_attributes():
    """–¢–µ—Å—Ç –∞—Ç—Ä–∏–±—É—Ç–æ–≤ MobileSecurityAgentExtra"""
    print("\n=== –¢–ï–°–¢ –ê–¢–†–ò–ë–£–¢–û–í MOBILESECURITYAGENTEXTRA ===")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä
        agent = MobileSecurityAgentExtra()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –∏ –∑–Ω–∞—á–µ–Ω–∏—è –∞—Ç—Ä–∏–±—É—Ç–æ–≤
        print(f"‚úÖ logger: {type(agent.logger)} = {agent.logger.name}")
        print(f"‚úÖ trusted_apps_database: {type(agent.trusted_apps_database)} = {len(agent.trusted_apps_database)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        print(f"‚úÖ threat_patterns: {type(agent.threat_patterns)} = {len(agent.threat_patterns)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        print(f"‚úÖ expert_consensus: {type(agent.expert_consensus)} = {len(agent.expert_consensus)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        print(f"‚úÖ lock: {type(agent.lock)}")
        print(f"‚úÖ stats: {type(agent.stats)} = {agent.stats}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ trusted_apps_database
        print(f"   –î–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {list(agent.trusted_apps_database)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É stats
        expected_stats_keys = ["threats_analyzed", "false_positives", "true_positives"]
        for key in expected_stats_keys:
            if key in agent.stats:
                print(f"   ‚úÖ stats['{key}']: {agent.stats[key]}")
            else:
                print(f"   ‚ùå stats['{key}'] –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è MobileSecurityAgentExtra: {e}")
        return False

def test_attribute_accessibility():
    """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∞—Ç—Ä–∏–±—É—Ç–æ–≤"""
    print("\n=== –¢–ï–°–¢ –î–û–°–¢–£–ü–ù–û–°–¢–ò –ê–¢–†–ò–ë–£–¢–û–í ===")
    
    try:
        agent = MobileSecurityAgentExtra()
        
        # –¢–µ—Å—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞—Ç—Ä–∏–±—É—Ç–æ–≤
        original_stats = agent.stats.copy()
        agent.stats["threats_analyzed"] = 10
        print(f"‚úÖ stats –∏–∑–º–µ–Ω–µ–Ω: {agent.stats['threats_analyzed']}")
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        agent.stats = original_stats
        print("‚úÖ stats –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        # –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ trusted_apps_database
        original_size = len(agent.trusted_apps_database)
        agent.trusted_apps_database.add("com.test.newapp")
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: {len(agent.trusted_apps_database)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        
        # –£–¥–∞–ª—è–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        agent.trusted_apps_database.discard("com.test.newapp")
        print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: {len(agent.trusted_apps_database)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∞—Ç—Ä–∏–±—É—Ç–æ–≤: {e}")
        return False

def test_attribute_types():
    """–¢–µ—Å—Ç —Ç–∏–ø–æ–≤ –∞—Ç—Ä–∏–±—É—Ç–æ–≤"""
    print("\n=== –¢–ï–°–¢ –¢–ò–ü–û–í –ê–¢–†–ò–ë–£–¢–û–í ===")
    
    try:
        agent = MobileSecurityAgentExtra()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–∏–ø–æ–≤
        print(f"   logger —Ç–∏–ø: {type(agent.logger).__name__}")
        print(f"   trusted_apps_database —Ç–∏–ø: {type(agent.trusted_apps_database).__name__}")
        print(f"   threat_patterns —Ç–∏–ø: {type(agent.threat_patterns).__name__}")
        print(f"   expert_consensus —Ç–∏–ø: {type(agent.expert_consensus).__name__}")
        print(f"   lock —Ç–∏–ø: {type(agent.lock).__name__}")
        print(f"   stats —Ç–∏–ø: {type(agent.stats).__name__}")
        
        print("‚úÖ –í—Å–µ —Ç–∏–ø—ã –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∏–ø–æ–≤: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üîç –¢–ï–°–¢ –ê–¢–†–ò–ë–£–¢–û–í –ö–õ–ê–°–°–û–í MOBILE SECURITY AGENT EXTRA")
    print("=" * 60)
    
    # –¢–µ—Å—Ç –∞—Ç—Ä–∏–±—É—Ç–æ–≤ ThreatData
    threat_data_success = test_threat_data_attributes()
    
    # –¢–µ—Å—Ç –∞—Ç—Ä–∏–±—É—Ç–æ–≤ MobileSecurityAgentExtra
    agent_attributes_success = test_mobile_security_agent_attributes()
    
    # –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∞—Ç—Ä–∏–±—É—Ç–æ–≤
    accessibility_success = test_attribute_accessibility()
    
    # –¢–µ—Å—Ç —Ç–∏–ø–æ–≤ –∞—Ç—Ä–∏–±—É—Ç–æ–≤
    types_success = test_attribute_types()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print(f"‚úÖ ThreatData –∞—Ç—Ä–∏–±—É—Ç—ã: {'–£–°–ü–ï–®–ù–û' if threat_data_success else '–û–®–ò–ë–ö–ê'}")
    print(f"‚úÖ MobileSecurityAgentExtra –∞—Ç—Ä–∏–±—É—Ç—ã: {'–£–°–ü–ï–®–ù–û' if agent_attributes_success else '–û–®–ò–ë–ö–ê'}")
    print(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∞—Ç—Ä–∏–±—É—Ç–æ–≤: {'–£–°–ü–ï–®–ù–û' if accessibility_success else '–û–®–ò–ë–ö–ê'}")
    print(f"‚úÖ –¢–∏–ø—ã –∞—Ç—Ä–∏–±—É—Ç–æ–≤: {'–£–°–ü–ï–®–ù–û' if types_success else '–û–®–ò–ë–ö–ê'}")
    
    overall_success = all([threat_data_success, agent_attributes_success, accessibility_success, types_success])
    print(f"\nüéØ –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢: {'–í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò' if overall_success else '–ï–°–¢–¨ –û–®–ò–ë–ö–ò'}")
    
    return overall_success

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)