#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–µ—Ç–æ–¥–æ–≤ mobile_security_agent_extra.py
"""

import sys
import os
sys.path.append('/Users/sergejhlystov/ALADDIN_NEW')

from security.ai_agents.mobile_security_agent_extra import (
    MobileSecurityAgentExtra, 
    ThreatData
)
from datetime import datetime

def test_class_instantiation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –∫–ª–∞—Å—Å–æ–≤"""
    print("=== –¢–ï–°–¢ –°–û–ó–î–ê–ù–ò–Ø –≠–ö–ó–ï–ú–ü–õ–Ø–†–û–í –ö–õ–ê–°–°–û–í ===")
    
    try:
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è ThreatData
        threat_data = ThreatData(
            app_id="com.test.app",
            threat_type="malware",
            severity="high",
            confidence=0.8,
            timestamp=datetime.now(),
            details={"source": "test"}
        )
        print("‚úÖ ThreatData —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è MobileSecurityAgentExtra
        agent = MobileSecurityAgentExtra()
        print("‚úÖ MobileSecurityAgentExtra —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        return threat_data, agent
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤: {e}")
        return None, None

def test_public_methods_accessibility(agent):
    """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ public –º–µ—Ç–æ–¥–æ–≤"""
    print("\n=== –¢–ï–°–¢ –î–û–°–¢–£–ü–ù–û–°–¢–ò PUBLIC –ú–ï–¢–û–î–û–í ===")
    
    if not agent:
        print("‚ùå –ê–≥–µ–Ω—Ç –Ω–µ —Å–æ–∑–¥–∞–Ω")
        return False
    
    try:
        # –¢–µ—Å—Ç get_status (async –º–µ—Ç–æ–¥)
        import asyncio
        status = asyncio.run(agent.get_status())
        print("‚úÖ get_status() –¥–æ—Å—Ç—É–ø–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print(f"   –°—Ç–∞—Ç—É—Å: {status}")
        
        # –¢–µ—Å—Ç cleanup
        agent.cleanup()
        print("‚úÖ cleanup() –¥–æ—Å—Ç—É–ø–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è public –º–µ—Ç–æ–¥–æ–≤: {e}")
        return False

def test_analyze_threat_method(agent, threat_data):
    """–¢–µ—Å—Ç –º–µ—Ç–æ–¥–∞ analyze_threat"""
    print("\n=== –¢–ï–°–¢ –ú–ï–¢–û–î–ê analyze_threat ===")
    
    if not agent or not threat_data:
        print("‚ùå –ê–≥–µ–Ω—Ç –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ —É–≥—Ä–æ–∑—ã –Ω–µ —Å–æ–∑–¥–∞–Ω—ã")
        return False
    
    try:
        # –¢–µ—Å—Ç analyze_threat
        result = agent.analyze_threat(threat_data)
        print("‚úÖ analyze_threat() –¥–æ—Å—Ç—É–ø–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        required_keys = [
            "threat_id", "final_score", "trend_analysis", 
            "expert_consensus", "whitelist_checks", 
            "recommendation", "timestamp"
        ]
        
        for key in required_keys:
            if key in result:
                print(f"   ‚úÖ –ö–ª—é—á '{key}' –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            else:
                print(f"   ‚ùå –ö–ª—é—á '{key}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è analyze_threat: {e}")
        return False

def test_private_methods_accessibility(agent, threat_data):
    """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ private –º–µ—Ç–æ–¥–æ–≤"""
    print("\n=== –¢–ï–°–¢ –î–û–°–¢–£–ü–ù–û–°–¢–ò PRIVATE –ú–ï–¢–û–î–û–í ===")
    
    if not agent or not threat_data:
        print("‚ùå –ê–≥–µ–Ω—Ç –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ —É–≥—Ä–æ–∑—ã –Ω–µ —Å–æ–∑–¥–∞–Ω—ã")
        return False
    
    try:
        # –°–ø–∏—Å–æ–∫ private –º–µ—Ç–æ–¥–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        private_methods = [
            "_init_trusted_apps",
            "_analyze_threat_trends", 
            "_get_expert_consensus",
            "_check_whitelists",
            "_check_threat_patterns",
            "_calculate_final_score",
            "_get_recommendation"
        ]
        
        for method_name in private_methods:
            if hasattr(agent, method_name):
                method = getattr(agent, method_name)
                print(f"‚úÖ {method_name} –¥–æ—Å—Ç—É–ø–µ–Ω")
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
                try:
                    if method_name == "_init_trusted_apps":
                        method()
                    elif method_name in ["_analyze_threat_trends", "_get_expert_consensus", 
                                       "_check_whitelists", "_check_threat_patterns"]:
                        result = method(threat_data)
                        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {type(result)}")
                    elif method_name == "_get_recommendation":
                        result = method(0.5)
                        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
                    elif method_name == "_calculate_final_score":
                        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                        trend_analysis = {"trend_score": 0.5}
                        expert_consensus = 0.5
                        whitelist_checks = {"trusted_publishers": True}
                        result = method(threat_data, trend_analysis, expert_consensus, whitelist_checks)
                        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
                        
                except Exception as e:
                    print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ {method_name}: {e}")
            else:
                print(f"‚ùå {method_name} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è private –º–µ—Ç–æ–¥–æ–≤: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üîç –¢–ï–°–¢ –î–û–°–¢–£–ü–ù–û–°–¢–ò –ú–ï–¢–û–î–û–í MOBILE SECURITY AGENT EXTRA")
    print("=" * 60)
    
    # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤
    threat_data, agent = test_class_instantiation()
    
    # –¢–µ—Å—Ç public –º–µ—Ç–æ–¥–æ–≤
    public_success = test_public_methods_accessibility(agent)
    
    # –¢–µ—Å—Ç analyze_threat
    analyze_success = test_analyze_threat_method(agent, threat_data)
    
    # –¢–µ—Å—Ç private –º–µ—Ç–æ–¥–æ–≤
    private_success = test_private_methods_accessibility(agent, threat_data)
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤: {'–£–°–ü–ï–®–ù–û' if agent else '–û–®–ò–ë–ö–ê'}")
    print(f"‚úÖ Public –º–µ—Ç–æ–¥—ã: {'–£–°–ü–ï–®–ù–û' if public_success else '–û–®–ò–ë–ö–ê'}")
    print(f"‚úÖ analyze_threat: {'–£–°–ü–ï–®–ù–û' if analyze_success else '–û–®–ò–ë–ö–ê'}")
    print(f"‚úÖ Private –º–µ—Ç–æ–¥—ã: {'–£–°–ü–ï–®–ù–û' if private_success else '–û–®–ò–ë–ö–ê'}")
    
    overall_success = all([agent, public_success, analyze_success, private_success])
    print(f"\nüéØ –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢: {'–í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò' if overall_success else '–ï–°–¢–¨ –û–®–ò–ë–ö–ò'}")
    
    return overall_success

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)