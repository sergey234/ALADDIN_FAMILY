#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–µ—Ç–æ–¥–æ–≤ AutoScalingEngine
–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö public –º–µ—Ç–æ–¥–æ–≤ –∏ –∏—Ö –≤—ã–∑–æ–≤–æ–≤
"""

import sys
import os
sys.path.append('/Users/sergejhlystov/ALADDIN_NEW')

from datetime import datetime
from security.scaling.auto_scaling_engine import (
    AutoScalingEngine,
    ScalingRule,
    ScalingTrigger,
    ScalingAction,
    MetricData
)

def test_class_instantiation():
    """6.3.1 - –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞"""
    print("=== 6.3.1 - –°–û–ó–î–ê–ù–ò–ï –≠–ö–ó–ï–ú–ü–õ–Ø–†–û–í –ö–õ–ê–°–°–û–í ===")
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –¥–≤–∏–∂–∫–∞
        engine = AutoScalingEngine("TestEngine")
        print("‚úÖ AutoScalingEngine —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ dataclass –æ–±—ä–µ–∫—Ç–æ–≤
        metric = MetricData(
            metric_name="cpu_usage",
            value=0.75,
            timestamp=datetime.now(),
            service_id="test-service"
        )
        print("‚úÖ MetricData —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        rule = ScalingRule(
            rule_id="test_rule",
            name="Test Rule",
            service_id="test-service",
            metric_name="cpu_usage",
            trigger=ScalingTrigger.CPU_HIGH,
            threshold=0.8,
            action=ScalingAction.SCALE_UP,
            min_replicas=1,
            max_replicas=5,
            cooldown_period=300
        )
        print("‚úÖ ScalingRule —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        return engine, metric, rule
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤: {e}")
        return None, None, None

def test_public_methods_accessibility(engine, metric, rule):
    """6.3.2 - –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö public –º–µ—Ç–æ–¥–æ–≤"""
    print("\n=== 6.3.2 - –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ù–û–°–¢–ò PUBLIC –ú–ï–¢–û–î–û–í ===")
    
    if not engine:
        print("‚ùå –î–≤–∏–∂–æ–∫ –Ω–µ —Å–æ–∑–¥–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç")
        return False
    
    public_methods = [
        'initialize',
        'stop', 
        'add_scaling_rule',
        'remove_scaling_rule',
        'collect_metric',
        'make_scaling_decision',
        'get_scaling_rules',
        'get_scaling_decisions',
        'get_scaling_metrics',
        'get_engine_status'
    ]
    
    accessible_methods = []
    for method_name in public_methods:
        if hasattr(engine, method_name):
            method = getattr(engine, method_name)
            if callable(method):
                accessible_methods.append(method_name)
                print(f"‚úÖ {method_name} - –¥–æ—Å—Ç—É–ø–µ–Ω –∏ –≤—ã–∑—ã–≤–∞–µ–º")
            else:
                print(f"‚ùå {method_name} - –Ω–µ –≤—ã–∑—ã–≤–∞–µ–º")
        else:
            print(f"‚ùå {method_name} - –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    print(f"\nüìä –î–æ—Å—Ç—É–ø–Ω–æ –º–µ—Ç–æ–¥–æ–≤: {len(accessible_methods)}/{len(public_methods)}")
    return len(accessible_methods) == len(public_methods)

def test_method_calls_with_correct_parameters(engine, metric, rule):
    """6.3.3 - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–∑–æ–≤–∞ –∫–∞–∂–¥–æ–≥–æ –º–µ—Ç–æ–¥–∞ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    print("\n=== 6.3.3 - –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–´–ó–û–í–û–í –ú–ï–¢–û–î–û–í ===")
    
    if not engine:
        print("‚ùå –î–≤–∏–∂–æ–∫ –Ω–µ —Å–æ–∑–¥–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç")
        return False
    
    test_results = []
    
    try:
        # –¢–µ—Å—Ç initialize
        result = engine.initialize()
        test_results.append(("initialize", result, "bool"))
        print(f"‚úÖ initialize() -> {result}")
    except Exception as e:
        test_results.append(("initialize", False, f"–û—à–∏–±–∫–∞: {e}"))
        print(f"‚ùå initialize() -> –û—à–∏–±–∫–∞: {e}")
    
    try:
        # –¢–µ—Å—Ç add_scaling_rule
        result = engine.add_scaling_rule(rule)
        test_results.append(("add_scaling_rule", result, "bool"))
        print(f"‚úÖ add_scaling_rule() -> {result}")
    except Exception as e:
        test_results.append(("add_scaling_rule", False, f"–û—à–∏–±–∫–∞: {e}"))
        print(f"‚ùå add_scaling_rule() -> –û—à–∏–±–∫–∞: {e}")
    
    try:
        # –¢–µ—Å—Ç collect_metric
        result = engine.collect_metric(metric)
        test_results.append(("collect_metric", result, "bool"))
        print(f"‚úÖ collect_metric() -> {result}")
    except Exception as e:
        test_results.append(("collect_metric", False, f"–û—à–∏–±–∫–∞: {e}"))
        print(f"‚ùå collect_metric() -> –û—à–∏–±–∫–∞: {e}")
    
    try:
        # –¢–µ—Å—Ç get_scaling_rules
        result = engine.get_scaling_rules()
        test_results.append(("get_scaling_rules", len(result), f"List[{len(result)}]"))
        print(f"‚úÖ get_scaling_rules() -> {len(result)} –ø—Ä–∞–≤–∏–ª")
    except Exception as e:
        test_results.append(("get_scaling_rules", 0, f"–û—à–∏–±–∫–∞: {e}"))
        print(f"‚ùå get_scaling_rules() -> –û—à–∏–±–∫–∞: {e}")
    
    try:
        # –¢–µ—Å—Ç get_scaling_metrics
        result = engine.get_scaling_metrics()
        test_results.append(("get_scaling_metrics", result, "ScalingMetrics"))
        print(f"‚úÖ get_scaling_metrics() -> {type(result).__name__}")
    except Exception as e:
        test_results.append(("get_scaling_metrics", None, f"–û—à–∏–±–∫–∞: {e}"))
        print(f"‚ùå get_scaling_metrics() -> –û—à–∏–±–∫–∞: {e}")
    
    try:
        # –¢–µ—Å—Ç get_engine_status
        result = engine.get_engine_status()
        test_results.append(("get_engine_status", result, "Dict"))
        print(f"‚úÖ get_engine_status() -> {type(result).__name__}")
    except Exception as e:
        test_results.append(("get_engine_status", None, f"–û—à–∏–±–∫–∞: {e}"))
        print(f"‚ùå get_engine_status() -> –û—à–∏–±–∫–∞: {e}")
    
    try:
        # –¢–µ—Å—Ç make_scaling_decision
        result = engine.make_scaling_decision("test-service")
        test_results.append(("make_scaling_decision", result, "Optional[ScalingDecision]"))
        print(f"‚úÖ make_scaling_decision() -> {type(result).__name__ if result else 'None'}")
    except Exception as e:
        test_results.append(("make_scaling_decision", None, f"–û—à–∏–±–∫–∞: {e}"))
        print(f"‚ùå make_scaling_decision() -> –û—à–∏–±–∫–∞: {e}")
    
    try:
        # –¢–µ—Å—Ç get_scaling_decisions
        result = engine.get_scaling_decisions()
        test_results.append(("get_scaling_decisions", len(result), f"List[{len(result)}]"))
        print(f"‚úÖ get_scaling_decisions() -> {len(result)} —Ä–µ—à–µ–Ω–∏–π")
    except Exception as e:
        test_results.append(("get_scaling_decisions", 0, f"–û—à–∏–±–∫–∞: {e}"))
        print(f"‚ùå get_scaling_decisions() -> –û—à–∏–±–∫–∞: {e}")
    
    try:
        # –¢–µ—Å—Ç remove_scaling_rule
        result = engine.remove_scaling_rule("test_rule")
        test_results.append(("remove_scaling_rule", result, "bool"))
        print(f"‚úÖ remove_scaling_rule() -> {result}")
    except Exception as e:
        test_results.append(("remove_scaling_rule", False, f"–û—à–∏–±–∫–∞: {e}"))
        print(f"‚ùå remove_scaling_rule() -> –û—à–∏–±–∫–∞: {e}")
    
    try:
        # –¢–µ—Å—Ç stop
        result = engine.stop()
        test_results.append(("stop", result, "bool"))
        print(f"‚úÖ stop() -> {result}")
    except Exception as e:
        test_results.append(("stop", False, f"–û—à–∏–±–∫–∞: {e}"))
        print(f"‚ùå stop() -> –û—à–∏–±–∫–∞: {e}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–æ–≤
    successful_tests = sum(1 for _, _, result_type in test_results if not result_type.startswith("–û—à–∏–±–∫–∞"))
    total_tests = len(test_results)
    
    print(f"\nüìä –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {successful_tests}/{total_tests}")
    
    return successful_tests == total_tests

def test_exception_handling(engine):
    """6.3.4 - –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –≤ –º–µ—Ç–æ–¥–∞—Ö"""
    print("\n=== 6.3.4 - –ü–†–û–í–ï–†–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò –ò–°–ö–õ–Æ–ß–ï–ù–ò–ô ===")
    
    if not engine:
        print("‚ùå –î–≤–∏–∂–æ–∫ –Ω–µ —Å–æ–∑–¥–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç")
        return False
    
    exception_tests = []
    
    try:
        # –¢–µ—Å—Ç —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        result = engine.add_scaling_rule(None)
        exception_tests.append(("add_scaling_rule(None)", "–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ", result))
        print(f"‚úÖ add_scaling_rule(None) -> –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {result}")
    except Exception as e:
        exception_tests.append(("add_scaling_rule(None)", "–ò—Å–∫–ª—é—á–µ–Ω–∏–µ", str(e)))
        print(f"‚ö†Ô∏è add_scaling_rule(None) -> –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
    
    try:
        # –¢–µ—Å—Ç —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø—Ä–∞–≤–∏–ª–æ–º
        result = engine.remove_scaling_rule("nonexistent_rule")
        exception_tests.append(("remove_scaling_rule(nonexistent)", "–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ", result))
        print(f"‚úÖ remove_scaling_rule(nonexistent) -> –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {result}")
    except Exception as e:
        exception_tests.append(("remove_scaling_rule(nonexistent)", "–ò—Å–∫–ª—é—á–µ–Ω–∏–µ", str(e)))
        print(f"‚ö†Ô∏è remove_scaling_rule(nonexistent) -> –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
    
    try:
        # –¢–µ—Å—Ç —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –º–µ—Ç—Ä–∏–∫–æ–π
        result = engine.collect_metric(None)
        exception_tests.append(("collect_metric(None)", "–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ", result))
        print(f"‚úÖ collect_metric(None) -> –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {result}")
    except Exception as e:
        exception_tests.append(("collect_metric(None)", "–ò—Å–∫–ª—é—á–µ–Ω–∏–µ", str(e)))
        print(f"‚ö†Ô∏è collect_metric(None) -> –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
    handled_exceptions = sum(1 for _, result, _ in exception_tests if result == "–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
    total_exception_tests = len(exception_tests)
    
    print(f"\nüìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–π: {handled_exceptions}/{total_exception_tests}")
    
    return handled_exceptions >= total_exception_tests * 0.8  # 80% –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üîç –≠–¢–ê–ü 6.3 - –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ù–û–°–¢–ò –ú–ï–¢–û–î–û–í")
    print("=" * 60)
    
    # 6.3.1 - –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤
    engine, metric, rule = test_class_instantiation()
    
    # 6.3.2 - –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    accessibility_ok = test_public_methods_accessibility(engine, metric, rule)
    
    # 6.3.3 - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–∑–æ–≤–æ–≤
    calls_ok = test_method_calls_with_correct_parameters(engine, metric, rule)
    
    # 6.3.4 - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
    exceptions_ok = test_exception_handling(engine)
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –≠–¢–ê–ü–ê 6.3:")
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤: {'–ü–†–û–ô–î–ï–ù–û' if engine else '–ü–†–û–í–ê–õ–ï–ù–û'}")
    print(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–µ—Ç–æ–¥–æ–≤: {'–ü–†–û–ô–î–ï–ù–û' if accessibility_ok else '–ü–†–û–í–ê–õ–ï–ù–û'}")
    print(f"‚úÖ –í—ã–∑–æ–≤—ã –º–µ—Ç–æ–¥–æ–≤: {'–ü–†–û–ô–î–ï–ù–û' if calls_ok else '–ü–†–û–í–ê–õ–ï–ù–û'}")
    print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π: {'–ü–†–û–ô–î–ï–ù–û' if exceptions_ok else '–ü–†–û–í–ê–õ–ï–ù–û'}")
    
    overall_success = engine and accessibility_ok and calls_ok and exceptions_ok
    print(f"\nüéØ –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢: {'–ü–†–û–ô–î–ï–ù–û' if overall_success else '–ü–†–û–í–ê–õ–ï–ù–û'}")
    
    return overall_success

if __name__ == "__main__":
    main()