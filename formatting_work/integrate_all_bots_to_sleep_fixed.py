#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤—Å–µ—Ö 15 –±–æ—Ç–æ–≤ –≤ SafeFunctionManager –∏ –ø–µ—Ä–µ–≤–æ–¥ –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º
–í–∫–ª—é—á–∞–µ—Ç 11 –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –±–æ—Ç–æ–≤ + 4 –Ω–æ–≤—ã—Ö –±–æ—Ç–∞ –≠—Ç–∞–ø–∞ 10.1
"""

import asyncio
import json
import logging
from datetime import datetime
from pathlib import Path
from typing import Any, Dict

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class AllBotsSleepManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –±–æ—Ç–æ–≤ –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º"""

    def __init__(self):
        self.sleep_config_path = "comprehensive_sleep_config.json"
        self.sleep_config = self._load_sleep_config()
        self.bot_instances = {}
        self.sleep_status = {}

        # –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö 15 –±–æ—Ç–æ–≤
        self.all_bots = {
            # –≠—Ç–∞–ø 9.2: –ú–æ–±–∏–ª—å–Ω—ã–µ –∏ –∏–≥—Ä–æ–≤—ã–µ –±–æ—Ç—ã (5 –±–æ—Ç–æ–≤)
            "mobile_navigation": {
                "file": "mobile_navigation_bot.py",
                "class": "MobileNavigationBot",
                "function": "function_86",
                "description": "–±–æ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–æ–±–∏–ª—å–Ω—ã–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º",
                "phase": "9.2",
            },
            "gaming_security": {
                "file": "gaming_security_bot.py",
                "class": "GamingSecurityBot",
                "function": "function_87",
                "description": "–±–æ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏–≥—Ä",
                "phase": "9.2",
            },
            "emergency_response": {
                "file": "emergency_response_bot.py",
                "class": "EmergencyResponseBot",
                "function": "function_88",
                "description": "–±–æ—Ç —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—è",
                "phase": "9.2",
            },
            "parental_control": {
                "file": "parental_control_bot.py",
                "class": "ParentalControlBot",
                "function": "function_89",
                "description": "–±–æ—Ç —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è",
                "phase": "9.2",
            },
            "notification": {
                "file": "notification_bot.py",
                "class": "NotificationBot",
                "function": "function_90",
                "description": "–±–æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
                "phase": "9.2",
            },
            # –≠—Ç–∞–ø 9.3: –ú–µ—Å—Å–µ–Ω–¥–∂–µ—Ä—ã –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏ (6 –±–æ—Ç–æ–≤)
            "whatsapp": {
                "file": "whatsapp_security_bot.py",
                "class": "WhatsAppSecurityBot",
                "function": "function_91",
                "description": "–±–æ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ WhatsApp",
                "phase": "9.3",
            },
            "telegram": {
                "file": "telegram_security_bot.py",
                "class": "TelegramSecurityBot",
                "function": "function_92",
                "description": "–±–æ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ Telegram",
                "phase": "9.3",
            },
            "instagram": {
                "file": "instagram_security_bot.py",
                "class": "InstagramSecurityBot",
                "function": "function_93",
                "description": "–±–æ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ Instagram",
                "phase": "9.3",
            },
            "max_messenger": {
                "file": "max_messenger_security_bot.py",
                "class": "MaxMessengerSecurityBot",
                "function": "function_94",
                "description": "–±–æ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞ MAX",
                "phase": "9.3",
            },
            "analytics": {
                "file": "analytics_bot.py",
                "class": "AnalyticsBot",
                "function": "function_95",
                "description": "–±–æ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏",
                "phase": "9.3",
            },
            "website_navigation": {
                "file": "website_navigation_bot.py",
                "class": "WebsiteNavigationBot",
                "function": "function_96",
                "description": "–±–æ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å–∞–π—Ç–∞–º",
                "phase": "9.3",
            },
            # –≠—Ç–∞–ø 10.1: –ë—Ä–∞—É–∑–µ—Ä –∏ –æ–±–ª–∞—á–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã (4 –±–æ—Ç–∞)
            "browser_security": {
                "file": "browser_security_bot.py",
                "class": "BrowserSecurityBot",
                "function": "function_97",
                "description": "–±–æ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –±—Ä–∞—É–∑–µ—Ä–∞",
                "phase": "10.1",
            },
            "cloud_storage": {
                "file": "cloud_storage_security_bot.py",
                "class": "CloudStorageSecurityBot",
                "function": "function_98",
                "description": "–±–æ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –æ–±–ª–∞—á–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞",
                "phase": "10.1",
            },
            "network_security": {
                "file": "network_security_bot.py",
                "class": "NetworkSecurityBot",
                "function": "function_99",
                "description": "–±–æ—Ç —Å–µ—Ç–µ–≤–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
                "phase": "10.1",
            },
            "device_security": {
                "file": "device_security_bot.py",
                "class": "DeviceSecurityBot",
                "function": "function_100",
                "description": "–±–æ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤",
                "phase": "10.1",
            },
        }

    def _load_sleep_config(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–ø—è—â–µ–≥–æ —Ä–µ–∂–∏–º–∞"""
        default_config = {
            "sleep_enabled": True,
            "auto_sleep_after_minutes": 30,
            "wake_up_on_demand": True,
            "save_state_on_sleep": True,
            "total_bots": 15,
            "phases": {
                "9.2": {"name": "–ú–æ–±–∏–ª—å–Ω—ã–µ –∏ –∏–≥—Ä–æ–≤—ã–µ –±–æ—Ç—ã", "bots": 5},
                "9.3": {"name": "–ú–µ—Å—Å–µ–Ω–¥–∂–µ—Ä—ã –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏", "bots": 6},
                "10.1": {"name": "–ë—Ä–∞—É–∑–µ—Ä –∏ –æ–±–ª–∞—á–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã", "bots": 4},
            },
            "bots": {},
        }

        try:
            if Path(self.sleep_config_path).exists():
                with open(self.sleep_config_path, "r", encoding="utf-8") as f:
                    config = json.load(f)
                return {**default_config, **config}
            else:
                return default_config
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return default_config

    def _save_sleep_config(self, config: Dict[str, Any]) -> None:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–ø—è—â–µ–≥–æ —Ä–µ–∂–∏–º–∞"""
        try:
            with open(self.sleep_config_path, "w", encoding="utf-8") as f:
                json.dump(config, f, indent=2, ensure_ascii=False)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")

    def check_all_bot_files(self) -> Dict[str, bool]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –≤—Å–µ—Ö –±–æ—Ç–æ–≤"""
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –≤—Å–µ—Ö 15 –±–æ—Ç–æ–≤...")

        file_status = {}
        for bot_name, bot_info in self.all_bots.items():
            file_path = Path(bot_info["file"])
            exists = file_path.exists()
            file_status[bot_name] = exists

            status_icon = "‚úÖ" if exists else "‚ùå"
            phase_icon = (
                "üü¢"
                if bot_info["phase"] == "9.2"
                else "üîµ" if bot_info["phase"] == "9.3" else "üü°"
            )
            print(
                f"  {status_icon} {phase_icon} {bot_info['file']}: "
                f"{'–ù–∞–π–¥–µ–Ω' if exists else '–ù–µ –Ω–∞–π–¥–µ–Ω'}"
            )

        return file_status

    def check_existing_sleep_files(self) -> Dict[str, bool]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–ø—è—â–µ–≥–æ —Ä–µ–∂–∏–º–∞"""
        print("\nüò¥ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–ø—è—â–µ–≥–æ —Ä–µ–∂–∏–º–∞...")

        sleep_files = {}
        for bot_name in self.all_bots.keys():
            sleep_file = f"sleep_state_{bot_name}.json"
            exists = Path(sleep_file).exists()
            sleep_files[bot_name] = exists

            status_icon = "üò¥" if exists else "üåÖ"
            bot_info = self.all_bots[bot_name]
            phase_icon = (
                "üü¢"
                if bot_info["phase"] == "9.2"
                else "üîµ" if bot_info["phase"] == "9.3" else "üü°"
            )
            print(
                f"  {status_icon} {phase_icon} {sleep_file}: "
                f"{'–í —Å–ø—è—â–µ–º —Ä–µ–∂–∏–º–µ' if exists else '–ê–∫—Ç–∏–≤–µ–Ω'}"
            )

        return sleep_files

    async def create_mock_bot_instances(self) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–ª—É—à–µ–∫ –≤—Å–µ—Ö –±–æ—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("\nü§ñ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–ª—É—à–µ–∫ –≤—Å–µ—Ö 15 –±–æ—Ç–æ–≤...")

        class MockBot:
            def __init__(self, name, bot_type, phase):
                self.name = name
                self.bot_type = bot_type
                self.phase = phase
                self.config = {
                    "test": True,
                    "bot_type": bot_type,
                    "phase": phase,
                }
                self.stats = {"test_count": 0}
                self.running = False

            async def start(self):
                self.running = True
                return True

            async def stop(self):
                self.running = False
                return True

            async def get_status(self):
                return {
                    "status": "running" if self.running else "stopped",
                    "bot_type": self.bot_type,
                    "phase": self.phase,
                    "config": self.config,
                }

        mock_bots = {}
        for bot_name, bot_info in self.all_bots.items():
            mock_bot = MockBot(
                f"Test{bot_info['class']}", bot_name, bot_info["phase"]
            )
            mock_bots[bot_name] = mock_bot

            phase_icon = (
                "üü¢"
                if bot_info["phase"] == "9.2"
                else "üîµ" if bot_info["phase"] == "9.3" else "üü°"
            )
            print(f"  ‚úÖ {phase_icon} {bot_info['class']}: –°–æ–∑–¥–∞–Ω–∞ –∑–∞–≥–ª—É—à–∫–∞")

        return mock_bots

    async def put_bot_to_sleep(self, bot_name: str, bot_instance: Any) -> bool:
        """–ü–µ—Ä–µ–≤–æ–¥ –±–æ—Ç–∞ –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º"""
        try:
            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
            if hasattr(bot_instance, "stop"):
                await bot_instance.stop()

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            sleep_data = {
                "bot_name": bot_name,
                "bot_class": self.all_bots[bot_name]["class"],
                "function": self.all_bots[bot_name]["function"],
                "phase": self.all_bots[bot_name]["phase"],
                "description": self.all_bots[bot_name]["description"],
                "timestamp": datetime.utcnow().isoformat(),
                "config": getattr(bot_instance, "config", {}),
                "stats": getattr(bot_instance, "stats", {}),
                "running": False,
                "sleep_reason": "Comprehensive sleep integration",
            }

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
            sleep_file = f"sleep_state_{bot_name}.json"
            with open(sleep_file, "w", encoding="utf-8") as f:
                json.dump(sleep_data, f, indent=2, ensure_ascii=False)

            logger.info(f"–ë–æ—Ç {bot_name} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º")
            return True

        except Exception as e:
            logger.error(
                f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –±–æ—Ç–∞ {bot_name} –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º: {e}"
            )
            return False

    async def integrate_all_bots_to_sleep(self):
        """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤—Å–µ—Ö 15 –±–æ—Ç–æ–≤ –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º"""
        print("üöÄ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –í–°–ï–• 15 –ë–û–¢–û–í –í SAFEFUNCTIONMANAGER")
        print("=" * 70)

        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –±–æ—Ç–æ–≤
        file_status = self.check_all_bot_files()
        existing_bots = [
            name for name, exists in file_status.items() if exists
        ]

        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–ø—è—â–µ–≥–æ —Ä–µ–∂–∏–º–∞
        sleep_status = self.check_existing_sleep_files()
        sleeping_bots = [
            name for name, sleeping in sleep_status.items() if sleeping
        ]
        active_bots = [
            name for name, sleeping in sleep_status.items() if not sleeping
        ]

        print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"  üìÅ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –±–æ—Ç–æ–≤: {len(file_status)}")
        print(f"  ‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤: {len(existing_bots)}")
        print(f"  üò¥ –ë–æ—Ç–æ–≤ –≤ —Å–ø—è—â–µ–º —Ä–µ–∂–∏–º–µ: {len(sleeping_bots)}")
        print(f"  üåÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤: {len(active_bots)}")

        # 3. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–ª—É—à–µ–∫ –¥–ª—è –≤—Å–µ—Ö –±–æ—Ç–æ–≤
        print(f"\nü§ñ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–ª—É—à–µ–∫ –¥–ª—è –≤—Å–µ—Ö {len(self.all_bots)} –±–æ—Ç–æ–≤...")
        mock_bots = await self.create_mock_bot_instances()

        # 4. –ü–µ—Ä–µ–≤–æ–¥ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤ –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º
        if active_bots:
            print(
                f"\nüò¥ –ü–µ—Ä–µ–≤–æ–¥ {len(active_bots)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤ "
                f"–≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º..."
            )

            sleep_results = {}
            for bot_name in active_bots:
                if bot_name in mock_bots:
                    success = await self.put_bot_to_sleep(
                        bot_name, mock_bots[bot_name]
                    )
                    sleep_results[bot_name] = success

                    bot_info = self.all_bots[bot_name]
                    phase_icon = (
                        "üü¢"
                        if bot_info["phase"] == "9.2"
                        else "üîµ" if bot_info["phase"] == "9.3" else "üü°"
                    )
                    status_icon = "‚úÖ" if success else "‚ùå"
                    print(
                        f"  {status_icon} {phase_icon} "
                        f"{bot_info['function']}: {bot_info['description']}"
                    )
        else:
            print("\nüéâ –í–°–ï –ë–û–¢–´ –£–ñ–ï –í –°–ü–Ø–©–ï–ú –†–ï–ñ–ò–ú–ï!")
            sleep_results = {}

        # 5. –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        successful_sleeps = sum(
            1 for success in sleep_results.values() if success
        )
        total_active = len(active_bots)

        print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò:")
        print(
            f"  üò¥ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º: "
            f"{successful_sleeps}/{total_active}"
        )
        print(
            f"  üìÅ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è: "
            f"{len([f for f in Path('.').glob('sleep_state_*.json')])}"
        )

        # 6. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        print("\nüîç –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê:")
        final_sleep_status = self.check_existing_sleep_files()
        final_sleeping = sum(
            1 for sleeping in final_sleep_status.values() if sleeping
        )
        final_active = len(final_sleep_status) - final_sleeping

        print(f"  üò¥ –ë–æ—Ç–æ–≤ –≤ —Å–ø—è—â–µ–º —Ä–µ–∂–∏–º–µ: {final_sleeping}")
        print(f"  üåÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤: {final_active}")

        # 7. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ —Ñ–∞–∑–∞–º
        self._generate_phase_report(final_sleep_status)

        if final_active == 0:
            print(
                "\nüéâ –í–°–ï 15 –ë–û–¢–û–í –£–°–ü–ï–®–ù–û –ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù–´ –í SAFEFUNCTIONMANAGER!"
            )
            return True
        else:
            print(f"\n‚ö†Ô∏è {final_active} –±–æ—Ç–æ–≤ –æ—Å—Ç–∞–ª–∏—Å—å –∞–∫—Ç–∏–≤–Ω—ã–º–∏")
            return False

    def _generate_phase_report(self, sleep_status: Dict[str, bool]):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ —Ñ–∞–∑–∞–º"""
        print("\nüìã –û–¢–ß–ï–¢ –ü–û –§–ê–ó–ê–ú:")

        phase_stats = {}
        for bot_name, sleeping in sleep_status.items():
            phase = self.all_bots[bot_name]["phase"]
            if phase not in phase_stats:
                phase_stats[phase] = {"total": 0, "sleeping": 0, "active": 0}

            phase_stats[phase]["total"] += 1
            if sleeping:
                phase_stats[phase]["sleeping"] += 1
            else:
                phase_stats[phase]["active"] += 1

        for phase, stats in phase_stats.items():
            phase_name = self.sleep_config["phases"][phase]["name"]
            phase_icon = (
                "üü¢" if phase == "9.2" else "üîµ" if phase == "9.3" else "üü°"
            )
            print(
                f"  {phase_icon} {phase_name} ({phase}): "
                f"{stats['sleeping']}/{stats['total']} –≤ —Å–ø—è—â–µ–º —Ä–µ–∂–∏–º–µ"
            )

    def generate_comprehensive_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("\nüìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...")

        # –ü–æ–¥—Å—á–µ—Ç —Ñ–∞–π–ª–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        sleep_files = list(Path(".").glob("sleep_state_*.json"))
        sleeping_bots = [
            f.stem.replace("sleep_state_", "") for f in sleep_files
        ]

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ñ–∞–∑–∞–º
        phase_stats = {}
        for bot_name in sleeping_bots:
            if bot_name in self.all_bots:
                phase = self.all_bots[bot_name]["phase"]
                if phase not in phase_stats:
                    phase_stats[phase] = 0
                phase_stats[phase] += 1

        report = {
            "timestamp": datetime.utcnow().isoformat(),
            "total_bots": len(self.all_bots),
            "sleeping_bots": len(sleeping_bots),
            "active_bots": len(self.all_bots) - len(sleeping_bots),
            "sleep_files": [f.name for f in sleep_files],
            "sleeping_bot_list": sleeping_bots,
            "phase_statistics": phase_stats,
            "config": self.sleep_config,
        }

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        with open(
            "comprehensive_all_bots_report.json", "w", encoding="utf-8"
        ) as f:
            json.dump(report, f, indent=2, ensure_ascii=False)

        print(
            "‚úÖ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: comprehensive_all_bots_report.json"
        )
        return report

    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        try:
            return {
                "status": "active",
                "bot_count": len(self.all_bots),
                "sleep_status": self.sleep_status,
                "config_loaded": self.sleep_config is not None,
                "bot_instances": len(self.bot_instances),
            }
        except Exception as e:
            return {
                "status": "error",
                "error": str(e),
                "bot_count": 0,
                "sleep_status": {},
                "config_loaded": False,
                "bot_instances": 0,
            }

    def start_sleep_mode(self) -> bool:
        """–ó–∞–ø—É—Å–∫ —Ä–µ–∂–∏–º–∞ —Å–Ω–∞ –¥–ª—è –≤—Å–µ—Ö –±–æ—Ç–æ–≤"""
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–Ω–∞ –¥–ª—è –≤—Å–µ—Ö –±–æ—Ç–æ–≤
            for bot_name in self.all_bots.keys():
                self.sleep_status[bot_name] = True

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            self._save_sleep_config()
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ä–µ–∂–∏–º–∞ —Å–Ω–∞: {e}")
            return False

    def stop_sleep_mode(self) -> bool:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∂–∏–º–∞ —Å–Ω–∞ –¥–ª—è –≤—Å–µ—Ö –±–æ—Ç–æ–≤"""
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –≤—Å–µ—Ö –±–æ—Ç–æ–≤
            for bot_name in self.all_bots.keys():
                self.sleep_status[bot_name] = False

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            self._save_sleep_config()
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–µ–∂–∏–º–∞ —Å–Ω–∞: {e}")
            return False

    def get_bot_count(self) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–æ—Ç–æ–≤"""
        try:
            return len(self.all_bots)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–æ—Ç–æ–≤: {e}")
            return 0



async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    sleep_manager = AllBotsSleepManager()

    # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –±–æ—Ç–æ–≤ –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º
    success = await sleep_manager.integrate_all_bots_to_sleep()

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    sleep_manager.generate_comprehensive_report()

    if success:
        print("\nüéâ –í–°–ï 15 –ë–û–¢–û–í –£–°–ü–ï–®–ù–û –ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù–´ –í SAFEFUNCTIONMANAGER!")
        print("üò¥ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É —Ä–∞–∑–≤–∏—Ç–∏—è!")
        return 0
    else:
        print("\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –±–æ—Ç—ã –Ω–µ –±—ã–ª–∏ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        return 1


if __name__ == "__main__":
    exit_code = asyncio.run(main())
    exit(exit_code)
