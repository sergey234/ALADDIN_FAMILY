#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–ª–µ—Ä—Ç–æ–≤ ALADDIN
–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

–ê–≤—Ç–æ—Ä: ALADDIN Security Team
–í–µ—Ä—Å–∏—è: 2.0
–î–∞—Ç–∞: 2025-09-08
"""

import json
import time
import smtplib
import requests
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional
from dataclasses import dataclass
from enum import Enum
import threading
import logging

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π ALADDIN
try:
    from core.base import ComponentStatus, SecurityLevel
    from core.security_base import SecurityBase
except ImportError as e:
    print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª–∏ ALADDIN: {e}")
    ComponentStatus = None
    SecurityLevel = None
    SecurityBase = object

class AlertType(Enum):
    """–¢–∏–ø—ã –∞–ª–µ—Ä—Ç–æ–≤"""
    SECURITY_THREAT = "security_threat"
    PERFORMANCE_ISSUE = "performance_issue"
    SYSTEM_ERROR = "system_error"
    COMPLIANCE_VIOLATION = "compliance_violation"
    USER_ACTIVITY = "user_activity"
    MAINTENANCE = "maintenance"
    BACKUP = "backup"
    INTEGRATION = "integration"

class AlertSeverity(Enum):
    """–£—Ä–æ–≤–Ω–∏ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏ –∞–ª–µ—Ä—Ç–æ–≤"""
    LOW = "low"
    MEDIUM = "medium"
    HIGH = "high"
    CRITICAL = "critical"

class AlertChannel(Enum):
    """–ö–∞–Ω–∞–ª—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    EMAIL = "email"
    SMS = "sms"
    WEBHOOK = "webhook"
    DASHBOARD = "dashboard"
    LOG = "log"

@dataclass
class AlertRule:
    """–ü—Ä–∞–≤–∏–ª–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–ª–µ—Ä—Ç–æ–≤"""
    name: str
    description: str
    alert_type: AlertType
    severity: AlertSeverity
    condition: str  # Python expression
    channels: List[AlertChannel]
    cooldown: int = 300  # —Å–µ–∫—É–Ω–¥—ã
    enabled: bool = True

@dataclass
class Alert:
    """–ê–ª–µ—Ä—Ç"""
    id: str
    rule_name: str
    alert_type: AlertType
    severity: AlertSeverity
    title: str
    message: str
    timestamp: datetime
    metadata: Dict[str, Any]
    resolved: bool = False
    resolved_at: Optional[datetime] = None

class AdvancedAlertingSystem(SecurityBase):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–ª–µ—Ä—Ç–æ–≤"""
    
    def __init__(self):
        super().__init__("AdvancedAlertingSystem")
        self.status = ComponentStatus.RUNNING if ComponentStatus else "RUNNING"
        self.security_level = SecurityLevel.HIGH if SecurityLevel else "HIGH"
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        self.config = {
            'email': {
                'smtp_server': 'smtp.gmail.com',
                'smtp_port': 587,
                'username': '',
                'password': '',
                'from_email': 'aladdin@security.local'
            },
            'webhook': {
                'url': 'http://localhost:5000/api/alerts/webhook',
                'timeout': 10
            },
            'sms': {
                'api_url': 'https://api.sms.ru/sms/send',
                'api_id': '',
                'timeout': 10
            }
        }
        
        # –ü—Ä–∞–≤–∏–ª–∞ –∞–ª–µ—Ä—Ç–æ–≤
        self.alert_rules = self._initialize_alert_rules()
        
        # –ò—Å—Ç–æ—Ä–∏—è –∞–ª–µ—Ä—Ç–æ–≤
        self.alert_history: List[Alert] = []
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã
        self.active_alerts: Dict[str, Alert] = {}
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –ø—Ä–∞–≤–∏–ª
        self.last_triggered: Dict[str, datetime] = {}
        
        # –õ–æ–≥–≥–µ—Ä
        self.logger = logging.getLogger(__name__)
        
        print("‚úÖ AdvancedAlertingSystem –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _initialize_alert_rules(self) -> List[AlertRule]:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∞–≤–∏–ª –∞–ª–µ—Ä—Ç–æ–≤"""
        rules = [
            # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É–≥—Ä–æ–∑—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            AlertRule(
                name="critical_security_threat",
                description="–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —É–≥—Ä–æ–∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
                alert_type=AlertType.SECURITY_THREAT,
                severity=AlertSeverity.CRITICAL,
                condition="metadata.get('threat_level') == 'critical'",
                channels=[AlertChannel.EMAIL, AlertChannel.SMS, AlertChannel.WEBHOOK, AlertChannel.DASHBOARD],
                cooldown=60
            ),
            
            # –í—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ CPU
            AlertRule(
                name="high_cpu_usage",
                description="–í—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞",
                alert_type=AlertType.PERFORMANCE_ISSUE,
                severity=AlertSeverity.HIGH,
                condition="metadata.get('cpu_usage', 0) > 90",
                channels=[AlertChannel.EMAIL, AlertChannel.DASHBOARD],
                cooldown=300
            ),
            
            # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –ø–∞–º—è—Ç–∏
            AlertRule(
                name="low_memory",
                description="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏",
                alert_type=AlertType.PERFORMANCE_ISSUE,
                severity=AlertSeverity.MEDIUM,
                condition="metadata.get('memory_usage', 0) > 85",
                channels=[AlertChannel.EMAIL, AlertChannel.DASHBOARD],
                cooldown=600
            ),
            
            # –û—à–∏–±–∫–∏ —Å–∏—Å—Ç–µ–º—ã
            AlertRule(
                name="system_errors",
                description="–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ —Å–∏—Å—Ç–µ–º—ã",
                alert_type=AlertType.SYSTEM_ERROR,
                severity=AlertSeverity.HIGH,
                condition="metadata.get('error_count', 0) > 10",
                channels=[AlertChannel.EMAIL, AlertChannel.WEBHOOK, AlertChannel.DASHBOARD],
                cooldown=180
            ),
            
            # –ù–∞—Ä—É—à–µ–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
            AlertRule(
                name="compliance_violation",
                description="–ù–∞—Ä—É—à–µ–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è",
                alert_type=AlertType.COMPLIANCE_VIOLATION,
                severity=AlertSeverity.HIGH,
                condition="metadata.get('compliance_score', 100) < 80",
                channels=[AlertChannel.EMAIL, AlertChannel.DASHBOARD],
                cooldown=900
            ),
            
            # –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            AlertRule(
                name="suspicious_user_activity",
                description="–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
                alert_type=AlertType.USER_ACTIVITY,
                severity=AlertSeverity.MEDIUM,
                condition="metadata.get('suspicious_activity', False)",
                channels=[AlertChannel.EMAIL, AlertChannel.DASHBOARD],
                cooldown=600
            ),
            
            # –ü—Ä–æ–±–ª–µ–º—ã —Å —Ä–µ–∑–µ—Ä–≤–Ω—ã–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            AlertRule(
                name="backup_failure",
                description="–û—à–∏–±–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è",
                alert_type=AlertType.BACKUP,
                severity=AlertSeverity.HIGH,
                condition="metadata.get('backup_status') == 'failed'",
                channels=[AlertChannel.EMAIL, AlertChannel.DASHBOARD],
                cooldown=1800
            ),
            
            # –ü—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è–º–∏
            AlertRule(
                name="integration_failure",
                description="–û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏",
                alert_type=AlertType.INTEGRATION,
                severity=AlertSeverity.MEDIUM,
                condition="metadata.get('integration_status') == 'failed'",
                channels=[AlertChannel.EMAIL, AlertChannel.DASHBOARD],
                cooldown=1200
            )
        ]
        
        return rules
    
    def check_alerts(self, data: Dict[str, Any]) -> List[Alert]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∞–≤–∏–ª–∞–º –∞–ª–µ—Ä—Ç–æ–≤"""
        triggered_alerts = []
        
        for rule in self.alert_rules:
            if not rule.enabled:
                continue
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ cooldown
            if rule.name in self.last_triggered:
                time_since_last = (datetime.now() - self.last_triggered[rule.name]).total_seconds()
                if time_since_last < rule.cooldown:
                    continue
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏—è
            try:
                if eval(rule.condition, {"metadata": data, "datetime": datetime}):
                    alert = self._create_alert(rule, data)
                    triggered_alerts.append(alert)
                    self.last_triggered[rule.name] = datetime.now()
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤–∏–ª–∞ {rule.name}: {e}")
        
        return triggered_alerts
    
    def _create_alert(self, rule: AlertRule, data: Dict[str, Any]) -> Alert:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞"""
        alert_id = f"{rule.name}_{int(time.time())}"
        
        alert = Alert(
            id=alert_id,
            rule_name=rule.name,
            alert_type=rule.alert_type,
            severity=rule.severity,
            title=f"üö® {rule.description}",
            message=self._generate_alert_message(rule, data),
            timestamp=datetime.now(),
            metadata=data
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        self.alert_history.append(alert)
        self.active_alerts[alert_id] = alert
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        self._send_notifications(alert, rule.channels)
        
        return alert
    
    def _generate_alert_message(self, rule: AlertRule, data: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–∞"""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        message = f"""
üö® –ê–õ–ï–†–¢ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò ALADDIN
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

üìã –û–ø–∏—Å–∞–Ω–∏–µ: {rule.description}
üî¥ –ö—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å: {rule.severity.value.upper()}
üìÖ –í—Ä–µ–º—è: {timestamp}
üè∑Ô∏è –¢–∏–ø: {rule.alert_type.value}

üìä –î–∞–Ω–Ω—ã–µ:
{json.dumps(data, indent=2, ensure_ascii=False)}

üõ°Ô∏è –°–∏—Å—Ç–µ–º–∞: ALADDIN Security Platform
üîß –í–µ—Ä—Å–∏—è: 2.0
        """
        
        return message.strip()
    
    def _send_notifications(self, alert: Alert, channels: List[AlertChannel]):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ –∫–∞–Ω–∞–ª–∞–º"""
        for channel in channels:
            try:
                if channel == AlertChannel.EMAIL:
                    self._send_email(alert)
                elif channel == AlertChannel.SMS:
                    self._send_sms(alert)
                elif channel == AlertChannel.WEBHOOK:
                    self._send_webhook(alert)
                elif channel == AlertChannel.DASHBOARD:
                    self._send_to_dashboard(alert)
                elif channel == AlertChannel.LOG:
                    self._log_alert(alert)
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ {channel.value}: {e}")
    
    def _send_email(self, alert: Alert):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è email
        self.logger.info(f"üìß Email –∞–ª–µ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {alert.title}")
    
    def _send_sms(self, alert: Alert):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ SMS —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è SMS
        self.logger.info(f"üì± SMS –∞–ª–µ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {alert.title}")
    
    def _send_webhook(self, alert: Alert):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            webhook_data = {
                'alert_id': alert.id,
                'title': alert.title,
                'message': alert.message,
                'severity': alert.severity.value,
                'timestamp': alert.timestamp.isoformat(),
                'metadata': alert.metadata
            }
            
            response = requests.post(
                self.config['webhook']['url'],
                json=webhook_data,
                timeout=self.config['webhook']['timeout']
            )
            
            if response.status_code == 200:
                self.logger.info(f"üîó Webhook –∞–ª–µ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {alert.title}")
            else:
                self.logger.error(f"–û—à–∏–±–∫–∞ webhook: {response.status_code}")
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ webhook: {e}")
    
    def _send_to_dashboard(self, alert: Alert):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞ –≤ –¥–∞—à–±–æ—Ä–¥"""
        # –ê–ª–µ—Ä—Ç —É–∂–µ –≤ active_alerts, –¥–∞—à–±–æ—Ä–¥ –º–æ–∂–µ—Ç –µ–≥–æ –ø–æ–ª—É—á–∏—Ç—å
        self.logger.info(f"üìä –ê–ª–µ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –¥–∞—à–±–æ—Ä–¥: {alert.title}")
    
    def _log_alert(self, alert: Alert):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞"""
        self.logger.warning(f"üö® –ê–õ–ï–†–¢: {alert.title} - {alert.message}")
    
    def resolve_alert(self, alert_id: str) -> bool:
        """–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞"""
        if alert_id in self.active_alerts:
            alert = self.active_alerts[alert_id]
            alert.resolved = True
            alert.resolved_at = datetime.now()
            del self.active_alerts[alert_id]
            self.logger.info(f"‚úÖ –ê–ª–µ—Ä—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω: {alert.title}")
            return True
        return False
    
    def get_active_alerts(self) -> List[Alert]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤"""
        return list(self.active_alerts.values())
    
    def get_alert_history(self, limit: int = 100) -> List[Alert]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∞–ª–µ—Ä—Ç–æ–≤"""
        return self.alert_history[-limit:]
    
    def get_alert_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤"""
        total_alerts = len(self.alert_history)
        active_alerts = len(self.active_alerts)
        resolved_alerts = total_alerts - active_alerts
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º
        type_stats = {}
        for alert in self.alert_history:
            alert_type = alert.alert_type.value
            type_stats[alert_type] = type_stats.get(alert_type, 0) + 1
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏
        severity_stats = {}
        for alert in self.alert_history:
            severity = alert.severity.value
            severity_stats[severity] = severity_stats.get(severity, 0) + 1
        
        return {
            'total_alerts': total_alerts,
            'active_alerts': active_alerts,
            'resolved_alerts': resolved_alerts,
            'type_statistics': type_stats,
            'severity_statistics': severity_stats,
            'last_alert': self.alert_history[-1].timestamp.isoformat() if self.alert_history else None
        }
    
    def update_rule(self, rule_name: str, **kwargs) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –∞–ª–µ—Ä—Ç–∞"""
        for rule in self.alert_rules:
            if rule.name == rule_name:
                for key, value in kwargs.items():
                    if hasattr(rule, key):
                        setattr(rule, key, value)
                self.logger.info(f"‚úÖ –ü—Ä–∞–≤–∏–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {rule_name}")
                return True
        return False
    
    def add_rule(self, rule: AlertRule) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞"""
        self.alert_rules.append(rule)
        self.logger.info(f"‚úÖ –ü—Ä–∞–≤–∏–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {rule.name}")
        return True
    
    def remove_rule(self, rule_name: str) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞"""
        for i, rule in enumerate(self.alert_rules):
            if rule.name == rule_name:
                del self.alert_rules[i]
                self.logger.info(f"‚úÖ –ü—Ä–∞–≤–∏–ª–æ —É–¥–∞–ª–µ–Ω–æ: {rule_name}")
                return True
        return False

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º—ã –∞–ª–µ—Ä—Ç–æ–≤
alerting_system = AdvancedAlertingSystem()

if __name__ == '__main__':
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∞–ª–µ—Ä—Ç–æ–≤
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AdvancedAlertingSystem...")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_data = {
        'threat_level': 'critical',
        'cpu_usage': 95,
        'memory_usage': 90,
        'error_count': 15,
        'compliance_score': 75,
        'suspicious_activity': True,
        'backup_status': 'failed',
        'integration_status': 'failed'
    }
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤
    alerts = alerting_system.check_alerts(test_data)
    print(f"üö® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∞–ª–µ—Ä—Ç–æ–≤: {len(alerts)}")
    
    for alert in alerts:
        print(f"  - {alert.title} ({alert.severity.value})")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats = alerting_system.get_alert_statistics()
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")
    
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")