#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö VPN —Ñ–∞–π–ª–æ–≤ –Ω–∞ –æ—à–∏–±–∫–∏ flake8
"""

import subprocess
import sys
import os
from pathlib import Path

def run_flake8(file_path):
    """–ó–∞–ø—É—Å–∫ flake8 –¥–ª—è —Ñ–∞–π–ª–∞"""
    try:
        result = subprocess.run([
            'python3', '-m', 'flake8', 
            str(file_path), 
            '--max-line-length=120', 
            '--ignore=E501,W503'
        ], capture_output=True, text=True, cwd='/Users/sergejhlystov/ALADDIN_NEW')
        
        return result.returncode, result.stdout, result.stderr
    except Exception as e:
        return -1, "", str(e)

def main():
    # –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    files_to_check = [
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ (20+ –æ—à–∏–±–æ–∫)
        "security/vpn/validators/vpn_validators.py",
        "security/vpn/test_final_integration.py", 
        "security/vpn/test_security_systems.py",
        "security/vpn/test_performance_features.py",
        
        # –°—Ä–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏ (20-50 –æ—à–∏–±–æ–∫)
        "security/vpn/analytics/ml_detector.py",
        "security/vpn/factories/vpn_factory.py",
        "security/vpn/test_vpn_modules.py",
        "security/vpn/test_vpn_modules_fixed.py",
        "security/vpn/models/vpn_models.py",
        "security/vpn/web/vpn_web_interface_premium.py",
        "security/vpn/web/vpn_web_server.py",
        "security/vpn/web/vpn_web_interface.py",
        
        # –ú–∞–ª—ã–µ –æ—à–∏–±–∫–∏ (1-19 –æ—à–∏–±–æ–∫)
        "security/vpn/config/vpn_constants.py",
        "security/vpn/features/__init__.py",
        "security/vpn/models/__init__.py",
        "security/vpn/validators/__init__.py",
        "security/vpn/web/vpn_variant_1.py",
        "security/vpn/web/vpn_variant_2.py",
        "security/vpn/vpn_integration.py",
        "security/vpn/service_orchestrator.py",
        "security/vpn/test_compliance_152_fz.py",
        "security/vpn/test_intrusion_detection_functionality.py",
        "security/vpn/test_performance_manager_functionality.py",
        "security/vpn/auth/__init__.py",
        "security/vpn/protection/__init__.py",
        "security/vpn/compliance/__init__.py",
        "security/vpn/performance/__init__.py",
        
        # –ü—Ä–æ–ø–∞–≤—à–∏–µ —Ñ–∞–π–ª—ã (–ø—Ä–æ–≤–µ—Ä–∏–º –∏—Ö –Ω–∞–ª–∏—á–∏–µ)
        "security/vpn/protocols/wireguard_server.py",
        "security/vpn/protocols/openvpn_server.py"
    ]
    
    print("üîç –ü–†–û–í–ï–†–ö–ê –í–°–ï–• VPN –§–ê–ô–õ–û–í –ù–ê –û–®–ò–ë–ö–ò FLAKE8")
    print("=" * 60)
    
    total_errors = 0
    files_with_errors = 0
    missing_files = 0
    
    for file_path in files_to_check:
        full_path = Path('/Users/sergejhlystov/ALADDIN_NEW') / file_path
        
        if not full_path.exists():
            print(f"‚ùå –ü–†–û–ü–ê–í–®–ò–ô –§–ê–ô–õ: {file_path}")
            missing_files += 1
            continue
            
        print(f"\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞: {file_path}")
        
        returncode, stdout, stderr = run_flake8(full_path)
        
        if returncode == 0:
            print("‚úÖ –û—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        else:
            files_with_errors += 1
            error_count = len(stdout.split('\n')) - 1  # -1 –¥–ª—è –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ –∫–æ–Ω—Ü–µ
            total_errors += error_count
            
            print(f"‚ùå –ù–∞–π–¥–µ–Ω–æ –æ—à–∏–±–æ–∫: {error_count}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –æ—à–∏–±–æ–∫
            lines = stdout.strip().split('\n')
            for i, line in enumerate(lines[:10]):
                print(f"   {line}")
            
            if len(lines) > 10:
                print(f"   ... –∏ –µ—â–µ {len(lines) - 10} –æ—à–∏–±–æ–∫")
    
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {len(files_to_check)}")
    print(f"   –§–∞–π–ª–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏: {files_with_errors}")
    print(f"   –ü—Ä–æ–ø–∞–≤—à–∏—Ö —Ñ–∞–π–ª–æ–≤: {missing_files}")
    print(f"   –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫: {total_errors}")
    
    if total_errors > 0:
        print(f"\nüîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print("   1. –ò—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã (F401)")
        print("   2. –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–±–µ–ª—ã –≤ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫–∞—Ö (W293)")
        print("   3. –î–æ–±–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –º–µ–∂–¥—É —Ñ—É–Ω–∫—Ü–∏—è–º–∏ (E302)")
        print("   4. –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –≤ –∫–æ–Ω—Ü–µ —Ñ–∞–π–ª–∞ (W292)")
        print("   5. –£–¥–∞–ª–∏—Ç—å trailing whitespace (W291)")

if __name__ == "__main__":
    main()