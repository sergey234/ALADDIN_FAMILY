#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä –±–æ—Ç–æ–≤
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
"""

import asyncio
import json
import logging
import time
from datetime import datetime
from typing import Dict, List, Any

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class SimpleMessengerTest:
    """–£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä –±–æ—Ç–æ–≤"""
    
    def __init__(self):
        self.test_results = {}
        self.start_time = None
        self.end_time = None
        
    async def test_bot_creation(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–æ–≤"""
        print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä –±–æ—Ç–æ–≤...")
        
        bots_created = 0
        total_bots = 6
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è WhatsApp –±–æ—Ç–∞
        try:
            from whatsapp_security_bot import WhatsAppSecurityBot
            bot = WhatsAppSecurityBot("TestWhatsAppBot")
            print("‚úÖ WhatsAppSecurityBot: –°–æ–∑–¥–∞–Ω")
            bots_created += 1
        except Exception as e:
            print(f"‚ùå WhatsAppSecurityBot: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è - {e}")
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è Telegram –±–æ—Ç–∞
        try:
            from telegram_security_bot import TelegramSecurityBot
            bot = TelegramSecurityBot("TestTelegramBot")
            print("‚úÖ TelegramSecurityBot: –°–æ–∑–¥–∞–Ω")
            bots_created += 1
        except Exception as e:
            print(f"‚ùå TelegramSecurityBot: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è - {e}")
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è Instagram –±–æ—Ç–∞
        try:
            from instagram_security_bot import InstagramSecurityBot
            bot = InstagramSecurityBot("TestInstagramBot")
            print("‚úÖ InstagramSecurityBot: –°–æ–∑–¥–∞–Ω")
            bots_created += 1
        except Exception as e:
            print(f"‚ùå InstagramSecurityBot: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è - {e}")
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è MAX –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä –±–æ—Ç–∞
        try:
            from max_messenger_security_bot import MaxMessengerSecurityBot
            bot = MaxMessengerSecurityBot("TestMaxBot")
            print("‚úÖ MaxMessengerSecurityBot: –°–æ–∑–¥–∞–Ω")
            bots_created += 1
        except Exception as e:
            print(f"‚ùå MaxMessengerSecurityBot: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è - {e}")
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è Analytics –±–æ—Ç–∞
        try:
            from analytics_bot import AnalyticsBot
            bot = AnalyticsBot("TestAnalyticsBot")
            print("‚úÖ AnalyticsBot: –°–æ–∑–¥–∞–Ω")
            bots_created += 1
        except Exception as e:
            print(f"‚ùå AnalyticsBot: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è - {e}")
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è Website Navigation –±–æ—Ç–∞
        try:
            from website_navigation_bot import WebsiteNavigationBot
            bot = WebsiteNavigationBot("TestWebsiteBot")
            print("‚úÖ WebsiteNavigationBot: –°–æ–∑–¥–∞–Ω")
            bots_created += 1
        except Exception as e:
            print(f"‚ùå WebsiteNavigationBot: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è - {e}")
        
        print(f"üìä –°–æ–∑–¥–∞–Ω–æ –±–æ—Ç–æ–≤: {bots_created}/{total_bots}")
        self.test_results["bot_creation"] = {
            "status": "success" if bots_created == total_bots else "partial",
            "created": bots_created,
            "total": total_bots
        }
        
        return bots_created == total_bots
    
    async def test_bot_functionality(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –±–æ—Ç–æ–≤"""
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏...")
        
        functionality_tests = 0
        total_tests = 0
        
        # –¢–µ—Å—Ç WhatsApp –±–æ—Ç–∞
        try:
            from whatsapp_security_bot import WhatsAppSecurityBot
            bot = WhatsAppSecurityBot("TestWhatsAppBot")
            
            # –¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            if hasattr(bot, 'name') and bot.name == "TestWhatsAppBot":
                functionality_tests += 1
                print("‚úÖ WhatsAppSecurityBot: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
            total_tests += 1
            
            # –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            if hasattr(bot, 'config') and isinstance(bot.config, dict):
                functionality_tests += 1
                print("‚úÖ WhatsAppSecurityBot: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
            total_tests += 1
            
        except Exception as e:
            print(f"‚ùå WhatsAppSecurityBot: –û—à–∏–±–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ - {e}")
            total_tests += 2
        
        # –¢–µ—Å—Ç Telegram –±–æ—Ç–∞
        try:
            from telegram_security_bot import TelegramSecurityBot
            bot = TelegramSecurityBot("TestTelegramBot")
            
            if hasattr(bot, 'name') and bot.name == "TestTelegramBot":
                functionality_tests += 1
                print("‚úÖ TelegramSecurityBot: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
            total_tests += 1
            
            if hasattr(bot, 'config') and isinstance(bot.config, dict):
                functionality_tests += 1
                print("‚úÖ TelegramSecurityBot: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
            total_tests += 1
            
        except Exception as e:
            print(f"‚ùå TelegramSecurityBot: –û—à–∏–±–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ - {e}")
            total_tests += 2
        
        # –¢–µ—Å—Ç Instagram –±–æ—Ç–∞
        try:
            from instagram_security_bot import InstagramSecurityBot
            bot = InstagramSecurityBot("TestInstagramBot")
            
            if hasattr(bot, 'name') and bot.name == "TestInstagramBot":
                functionality_tests += 1
                print("‚úÖ InstagramSecurityBot: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
            total_tests += 1
            
            if hasattr(bot, 'config') and isinstance(bot.config, dict):
                functionality_tests += 1
                print("‚úÖ InstagramSecurityBot: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
            total_tests += 1
            
        except Exception as e:
            print(f"‚ùå InstagramSecurityBot: –û—à–∏–±–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ - {e}")
            total_tests += 2
        
        # –¢–µ—Å—Ç MAX –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä –±–æ—Ç–∞
        try:
            from max_messenger_security_bot import MaxMessengerSecurityBot
            bot = MaxMessengerSecurityBot("TestMaxBot")
            
            if hasattr(bot, 'name') and bot.name == "TestMaxBot":
                functionality_tests += 1
                print("‚úÖ MaxMessengerSecurityBot: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
            total_tests += 1
            
            if hasattr(bot, 'config') and isinstance(bot.config, dict):
                functionality_tests += 1
                print("‚úÖ MaxMessengerSecurityBot: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
            total_tests += 1
            
        except Exception as e:
            print(f"‚ùå MaxMessengerSecurityBot: –û—à–∏–±–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ - {e}")
            total_tests += 2
        
        # –¢–µ—Å—Ç Analytics –±–æ—Ç–∞
        try:
            from analytics_bot import AnalyticsBot
            bot = AnalyticsBot("TestAnalyticsBot")
            
            if hasattr(bot, 'name') and bot.name == "TestAnalyticsBot":
                functionality_tests += 1
                print("‚úÖ AnalyticsBot: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
            total_tests += 1
            
            if hasattr(bot, 'config') and isinstance(bot.config, dict):
                functionality_tests += 1
                print("‚úÖ AnalyticsBot: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
            total_tests += 1
            
        except Exception as e:
            print(f"‚ùå AnalyticsBot: –û—à–∏–±–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ - {e}")
            total_tests += 2
        
        # –¢–µ—Å—Ç Website Navigation –±–æ—Ç–∞
        try:
            from website_navigation_bot import WebsiteNavigationBot
            bot = WebsiteNavigationBot("TestWebsiteBot")
            
            if hasattr(bot, 'name') and bot.name == "TestWebsiteBot":
                functionality_tests += 1
                print("‚úÖ WebsiteNavigationBot: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
            total_tests += 1
            
            if hasattr(bot, 'config') and isinstance(bot.config, dict):
                functionality_tests += 1
                print("‚úÖ WebsiteNavigationBot: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
            total_tests += 1
            
        except Exception as e:
            print(f"‚ùå WebsiteNavigationBot: –û—à–∏–±–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ - {e}")
            total_tests += 2
        
        success_rate = (functionality_tests / total_tests * 100) if total_tests > 0 else 0
        print(f"üìä –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {functionality_tests}/{total_tests} ({success_rate:.1f}%)")
        
        self.test_results["functionality"] = {
            "status": "success" if success_rate >= 80 else "partial",
            "passed": functionality_tests,
            "total": total_tests,
            "success_rate": success_rate
        }
        
        return success_rate >= 80
    
    async def test_code_quality(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞"""
        print("\nüìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞...")
        
        import subprocess
        import os
        
        bot_files = [
            "whatsapp_security_bot.py",
            "telegram_security_bot.py", 
            "instagram_security_bot.py",
            "max_messenger_security_bot.py",
            "analytics_bot.py",
            "website_navigation_bot.py"
        ]
        
        quality_tests = 0
        total_tests = len(bot_files)
        
        for bot_file in bot_files:
            if os.path.exists(bot_file):
                try:
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
                    result = subprocess.run(
                        ["python3", "-m", "py_compile", bot_file],
                        capture_output=True,
                        text=True
                    )
                    
                    if result.returncode == 0:
                        quality_tests += 1
                        print(f"‚úÖ {bot_file}: –°–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
                    else:
                        print(f"‚ùå {bot_file}: –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ - {result.stderr}")
                        
                except Exception as e:
                    print(f"‚ùå {bot_file}: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ - {e}")
            else:
                print(f"‚ùå {bot_file}: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        success_rate = (quality_tests / total_tests * 100) if total_tests > 0 else 0
        print(f"üìä –ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞: {quality_tests}/{total_tests} ({success_rate:.1f}%)")
        
        self.test_results["code_quality"] = {
            "status": "success" if success_rate >= 80 else "partial",
            "passed": quality_tests,
            "total": total_tests,
            "success_rate": success_rate
        }
        
        return success_rate >= 80
    
    def generate_test_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        print("\nüìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏...")
        
        total_tests = len(self.test_results)
        successful_tests = len([r for r in self.test_results.values() if r["status"] == "success"])
        partial_tests = len([r for r in self.test_results.values() if r["status"] == "partial"])
        failed_tests = total_tests - successful_tests - partial_tests
        
        overall_success_rate = ((successful_tests + partial_tests * 0.5) / total_tests * 100) if total_tests > 0 else 0
        
        report = {
            "test_summary": {
                "total_tests": total_tests,
                "successful_tests": successful_tests,
                "partial_tests": partial_tests,
                "failed_tests": failed_tests,
                "overall_success_rate": overall_success_rate,
                "start_time": self.start_time.isoformat() if self.start_time else None,
                "end_time": self.end_time.isoformat() if self.end_time else None,
                "duration": (self.end_time - self.start_time).total_seconds() if self.start_time and self.end_time else None
            },
            "test_results": self.test_results,
            "recommendations": self._generate_recommendations()
        }
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        with open("simple_messenger_test_report.json", "w", encoding="utf-8") as f:
            json.dump(report, f, indent=2, ensure_ascii=False)
        
        print(f"‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: simple_messenger_test_report.json")
        print(f"üìà –û–±—â–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å: {overall_success_rate:.1f}%")
        
        return report
    
    def _generate_recommendations(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        recommendations = []
        
        if "bot_creation" in self.test_results and self.test_results["bot_creation"]["status"] != "success":
            recommendations.append("–ò—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–æ–≤")
        
        if "functionality" in self.test_results and self.test_results["functionality"]["success_rate"] < 100:
            recommendations.append("–£–ª—É—á—à–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –±–æ—Ç–æ–≤")
        
        if "code_quality" in self.test_results and self.test_results["code_quality"]["success_rate"] < 100:
            recommendations.append("–ò—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞")
        
        if not recommendations:
            recommendations.append("–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ - —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É")
        
        return recommendations
    
    async def run_full_test(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("üöÄ –ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä –±–æ—Ç–æ–≤")
        print("=" * 70)
        
        self.start_time = datetime.utcnow()
        
        try:
            # 1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–æ–≤
            creation_success = await self.test_bot_creation()
            
            # 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
            functionality_success = await self.test_bot_functionality()
            
            # 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞
            quality_success = await self.test_code_quality()
            
            self.end_time = datetime.utcnow()
            
            # 4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
            report = self.generate_test_report()
            
            print("\n" + "=" * 70)
            print("üéâ –£–ü–†–û–©–ï–ù–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
            print(f"üìä –û–±—â–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å: {report['test_summary']['overall_success_rate']:.1f}%")
            print(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {report['test_summary']['duration']:.2f} —Å–µ–∫—É–Ω–¥")
            print("=" * 70)
            
            return report['test_summary']['overall_success_rate'] >= 70.0
            
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return False


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    test_suite = SimpleMessengerTest()
    success = await test_suite.run_full_test()
    
    if success:
        print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ!")
        return 0
    else:
        print("\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –ø—Ä–æ—à–ª–æ!")
        return 1


if __name__ == "__main__":
    exit_code = asyncio.run(main())
    exit(exit_code)