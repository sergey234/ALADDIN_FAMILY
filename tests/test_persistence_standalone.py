#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–¢–ê–ù–î–ê–†–¢–ù–´–ô –¢–ï–°–¢ –ü–ï–†–°–ò–°–¢–ï–ù–¢–ù–û–°–¢–ò - –±–µ–∑ SafeFunctionManager
"""

import os
import sys
import tempfile
import json
from datetime import datetime

def test_persistence_standalone():
    """–¢–µ—Å—Ç –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –±–µ–∑ SafeFunctionManager"""
    print("üß™ –°–¢–ê–ù–î–ê–†–¢–ù–´–ô –¢–ï–°–¢ –ü–ï–†–°–ò–°–¢–ï–ù–¢–ù–û–°–¢–ò")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    test_dir = tempfile.mkdtemp()
    registry_file = os.path.join(test_dir, 'functions_registry.json')
    
    print(f"1. –¢–µ—Å—Ç–æ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {test_dir}")
    print(f"2. –§–∞–π–ª —Ä–µ–µ—Å—Ç—Ä–∞: {registry_file}")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_functions = {
        "anti_fraud_master_ai": {
            "function_id": "anti_fraud_master_ai",
            "name": "AntiFraudMasterAI",
            "description": "–ó–∞—â–∏—Ç–∞ –æ—Ç –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞",
            "function_type": "ai_agent",
            "security_level": "critical",
            "status": "enabled",
            "created_at": datetime.now().isoformat(),
            "is_critical": True,
            "auto_enable": True
        },
        "threat_detection_agent": {
            "function_id": "threat_detection_agent",
            "name": "ThreatDetectionAgent", 
            "description": "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —É–≥—Ä–æ–∑",
            "function_type": "ai_agent",
            "security_level": "high",
            "status": "enabled",
            "created_at": datetime.now().isoformat(),
            "is_critical": True,
            "auto_enable": True
        },
        "security_monitoring": {
            "function_id": "security_monitoring",
            "name": "SecurityMonitoring",
            "description": "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
            "function_type": "security",
            "security_level": "high",
            "status": "enabled",
            "created_at": datetime.now().isoformat(),
            "is_critical": True,
            "auto_enable": True
        }
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    registry_data = {
        "version": "1.0",
        "last_updated": datetime.now().isoformat(),
        "functions": test_functions
    }
    
    print("3. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...")
    with open(registry_file, 'w', encoding='utf-8') as f:
        json.dump(registry_data, f, indent=2, ensure_ascii=False)
    
    print(f"   ‚úÖ –§–∞–π–ª —Å–æ–∑–¥–∞–Ω: {os.path.exists(registry_file)}")
    print(f"   üìÅ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {os.path.getsize(registry_file)} –±–∞–π—Ç")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ —Ñ–∞–π–ª–∞
    print("4. –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ —Ñ–∞–π–ª–∞...")
    with open(registry_file, 'r', encoding='utf-8') as f:
        loaded_data = json.load(f)
    
    loaded_functions = loaded_data.get("functions", {})
    print(f"   ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ—É–Ω–∫—Ü–∏–π: {len(loaded_functions)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    print("5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ...")
    success = True
    
    for func_id, func_data in test_functions.items():
        if func_id in loaded_functions:
            loaded_func = loaded_functions[func_id]
            if (loaded_func["name"] == func_data["name"] and 
                loaded_func["function_type"] == func_data["function_type"] and
                loaded_func["security_level"] == func_data["security_level"]):
                print(f"   ‚úÖ {func_data['name']} - OK")
            else:
                print(f"   ‚ùå {func_data['name']} - –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
                success = False
        else:
            print(f"   ‚ùå {func_data['name']} - –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            success = False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–∞
    print("6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–∞...")
    if "version" in loaded_data and "last_updated" in loaded_data:
        print("   ‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
    else:
        print("   ‚ùå –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        success = False
    
    # –û—á–∏—Å—Ç–∫–∞
    os.remove(registry_file)
    os.rmdir(test_dir)
    
    print("\n" + "=" * 50)
    if success:
        print("üéâ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù!")
        print("‚úÖ –ü–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("‚úÖ JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è/–¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("‚úÖ –§–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        print("‚úÖ –ì–æ—Ç–æ–≤–æ –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å SafeFunctionManager")
    else:
        print("üí• –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù!")
        print("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–º —Ö—Ä–∞–Ω–µ–Ω–∏–µ–º")
    
    return success

if __name__ == "__main__":
    success = test_persistence_standalone()
    sys.exit(0 if success else 1)
