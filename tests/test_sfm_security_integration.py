#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
SFM Security Integration Tests –¥–ª—è ALADDIN Dashboard
–¢–µ—Å—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ Safe Function Manager

–ê–≤—Ç–æ—Ä: ALADDIN Security Team
–í–µ—Ä—Å–∏—è: 1.0.0
–î–∞—Ç–∞: 2025-01-27
–ö–∞—á–µ—Å—Ç–≤–æ: A+
"""

import asyncio
import time
import pytest
import httpx
import json
import os
import sys
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional, Tuple
from dataclasses import dataclass, field
from enum import Enum
import hashlib
import base64
import hmac
import secrets

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

try:
    from security.safe_function_manager import SafeFunctionManager
    from core.base import ComponentStatus, SecurityLevel
    from core.logging_module import LoggingManager
    ALADDIN_AVAILABLE = True
except ImportError:
    ALADDIN_AVAILABLE = False


class SecurityTestType(Enum):
    """–¢–∏–ø—ã —Ç–µ—Å—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    AUTHENTICATION = "authentication"
    AUTHORIZATION = "authorization"
    INPUT_VALIDATION = "input_validation"
    RATE_LIMITING = "rate_limiting"
    ENCRYPTION = "encryption"
    AUDIT_LOGGING = "audit_logging"
    SESSION_MANAGEMENT = "session_management"
    CSRF_PROTECTION = "csrf_protection"
    XSS_PROTECTION = "xss_protection"
    SQL_INJECTION = "sql_injection"


class SecurityVulnerability(Enum):
    """–¢–∏–ø—ã —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    NONE = "none"
    LOW = "low"
    MEDIUM = "medium"
    HIGH = "high"
    CRITICAL = "critical"


@dataclass
class SecurityTestResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    test_id: str
    test_type: SecurityTestType
    function_id: str
    timestamp: datetime
    success: bool
    vulnerability_level: SecurityVulnerability
    details: Dict[str, Any]
    recommendations: List[str]
    execution_time: float


@dataclass
class SecurityMetrics:
    """–ú–µ—Ç—Ä–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    total_tests: int
    passed_tests: int
    failed_tests: int
    vulnerabilities_found: int
    critical_vulnerabilities: int
    high_vulnerabilities: int
    medium_vulnerabilities: int
    low_vulnerabilities: int
    security_score: float  # 0-100
    compliance_percent: float  # –ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º


class SFMSecurityIntegrationTester:
    """–¢–µ—Å—Ç–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ SFM"""
    
    def __init__(self, sfm_url: str = "http://localhost:8011"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–µ—Ä–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        
        Args:
            sfm_url: URL SFM
        """
        self.sfm_url = sfm_url
        self.logger = LoggingManager(name="SFMSecurityIntegrationTester") if ALADDIN_AVAILABLE else None
        self.security_results: List[SecurityTestResult] = []
        self.test_tokens: Dict[str, str] = {}  # –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        
    def generate_test_token(self, user_type: str = "admin") -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
        
        Args:
            user_type: –¢–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω
        """
        payload = {
            "user": user_type,
            "timestamp": int(time.time()),
            "random": secrets.token_hex(16)
        }
        
        # –ü—Ä–æ—Å—Ç–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è JWT)
        token_data = f"{user_type}:{payload['timestamp']}:{payload['random']}"
        token = base64.b64encode(token_data.encode()).decode()
        
        self.test_tokens[user_type] = token
        return token
    
    def generate_malicious_input(self, input_type: str) -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        
        Args:
            input_type: –¢–∏–ø –≤–≤–æ–¥–∞
            
        Returns:
            –í—Ä–µ–¥–æ–Ω–æ—Å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        """
        malicious_inputs = {
            "xss": "<script>alert('XSS')</script>",
            "sql_injection": "'; DROP TABLE users; --",
            "path_traversal": "../../../etc/passwd",
            "command_injection": "; rm -rf /",
            "json_injection": '{"malicious": true, "code": "exec(\'rm -rf /\')"}',
            "xml_bomb": "<?xml version='1.0'?><!DOCTYPE lolz [<!ENTITY lol 'lol'><!ENTITY lol2 '&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;'><!ENTITY lol3 '&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;'>]><lolz>&lol3;</lolz>",
            "buffer_overflow": "A" * 10000,
            "null_byte": "test\x00null",
            "unicode_attack": "\u0000\u0001\u0002",
            "special_chars": "!@#$%^&*()_+-=[]{}|;:,.<>?"
        }
        
        return malicious_inputs.get(input_type, "malicious_input")
    
    async def test_authentication_security(self, function_id: str = "test_function") -> SecurityTestResult:
        """
        –¢–µ—Å—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        
        Args:
            function_id: ID —Ñ—É–Ω–∫—Ü–∏–∏
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        """
        print(f"üîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏: {function_id}")
        
        test_id = f"auth_test_{function_id}_{int(time.time())}"
        start_time = time.time()
        test_details = {
            "tests_performed": [],
            "vulnerabilities": [],
            "auth_methods": []
        }
        
        # 1. –¢–µ—Å—Ç –±–µ–∑ —Ç–æ–∫–µ–Ω–∞
        print("  1. –¢–µ—Å—Ç –±–µ–∑ —Ç–æ–∫–µ–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
        try:
            async with httpx.AsyncClient(timeout=10.0) as client:
                response = await client.get(f"{self.sfm_url}/functions/{function_id}/status")
                
                test_details["tests_performed"].append({
                    "test": "no_auth",
                    "status_code": response.status_code,
                    "success": response.status_code == 401 or response.status_code == 403
                })
                
                if response.status_code not in [401, 403]:
                    test_details["vulnerabilities"].append({
                        "type": "no_auth_protection",
                        "severity": "high",
                        "description": "Endpoint –¥–æ—Å—Ç—É–ø–µ–Ω –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"
                    })
                    
        except Exception as e:
            test_details["tests_performed"].append({
                "test": "no_auth",
                "error": str(e),
                "success": False
            })
        
        # 2. –¢–µ—Å—Ç —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
        print("  2. –¢–µ—Å—Ç —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º...")
        try:
            async with httpx.AsyncClient(timeout=10.0) as client:
                headers = {"Authorization": "Bearer invalid_token_12345"}
                response = await client.get(f"{self.sfm_url}/functions/{function_id}/status", headers=headers)
                
                test_details["tests_performed"].append({
                    "test": "invalid_token",
                    "status_code": response.status_code,
                    "success": response.status_code == 401 or response.status_code == 403
                })
                
                if response.status_code not in [401, 403]:
                    test_details["vulnerabilities"].append({
                        "type": "weak_token_validation",
                        "severity": "high",
                        "description": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –ø—Ä–∏–Ω—è—Ç —Å–∏—Å—Ç–µ–º–æ–π"
                    })
                    
        except Exception as e:
            test_details["tests_performed"].append({
                "test": "invalid_token",
                "error": str(e),
                "success": False
            })
        
        # 3. –¢–µ—Å—Ç —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
        print("  3. –¢–µ—Å—Ç —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º...")
        try:
            valid_token = self.generate_test_token("admin")
            async with httpx.AsyncClient(timeout=10.0) as client:
                headers = {"Authorization": f"Bearer {valid_token}"}
                response = await client.get(f"{self.sfm_url}/functions/{function_id}/status", headers=headers)
                
                test_details["tests_performed"].append({
                    "test": "valid_token",
                    "status_code": response.status_code,
                    "success": 200 <= response.status_code < 300
                })
                
                test_details["auth_methods"].append("Bearer Token")
                
        except Exception as e:
            test_details["tests_performed"].append({
                "test": "valid_token",
                "error": str(e),
                "success": False
            })
        
        # 4. –¢–µ—Å—Ç —Å –ø–æ–¥–¥–µ–ª—å–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
        print("  4. –¢–µ—Å—Ç —Å –ø–æ–¥–¥–µ–ª—å–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º...")
        try:
            fake_token = base64.b64encode(b"fake_admin_token").decode()
            async with httpx.AsyncClient(timeout=10.0) as client:
                headers = {"Authorization": f"Bearer {fake_token}"}
                response = await client.get(f"{self.sfm_url}/functions/{function_id}/status", headers=headers)
                
                test_details["tests_performed"].append({
                    "test": "fake_token",
                    "status_code": response.status_code,
                    "success": response.status_code == 401 or response.status_code == 403
                })
                
                if response.status_code not in [401, 403]:
                    test_details["vulnerabilities"].append({
                        "type": "token_forgery",
                        "severity": "critical",
                        "description": "–ü–æ–¥–¥–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –ø—Ä–∏–Ω—è—Ç —Å–∏—Å—Ç–µ–º–æ–π"
                    })
                    
        except Exception as e:
            test_details["tests_performed"].append({
                "test": "fake_token",
                "error": str(e),
                "success": False
            })
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        total_tests = len(test_details["tests_performed"])
        successful_tests = sum(1 for test in test_details["tests_performed"] if test["success"])
        vulnerabilities = len(test_details["vulnerabilities"])
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —É—è–∑–≤–∏–º–æ—Å—Ç–∏
        if vulnerabilities == 0:
            vulnerability_level = SecurityVulnerability.NONE
        elif any(v["severity"] == "critical" for v in test_details["vulnerabilities"]):
            vulnerability_level = SecurityVulnerability.CRITICAL
        elif any(v["severity"] == "high" for v in test_details["vulnerabilities"]):
            vulnerability_level = SecurityVulnerability.HIGH
        elif any(v["severity"] == "medium" for v in test_details["vulnerabilities"]):
            vulnerability_level = SecurityVulnerability.MEDIUM
        else:
            vulnerability_level = SecurityVulnerability.LOW
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = []
        if vulnerabilities > 0:
            recommendations.append("–£—Å–∏–ª–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
            recommendations.append("–†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–≥—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é —Ç–æ–∫–µ–Ω–æ–≤")
        
        if successful_tests < total_tests * 0.8:
            recommendations.append("–£–ª—É—á—à–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
        
        result = SecurityTestResult(
            test_id=test_id,
            test_type=SecurityTestType.AUTHENTICATION,
            function_id=function_id,
            timestamp=datetime.now(),
            success=vulnerabilities == 0,
            vulnerability_level=vulnerability_level,
            details=test_details,
            recommendations=recommendations,
            execution_time=time.time() - start_time
        )
        
        self.security_results.append(result)
        
        print(f"  –†–µ–∑—É–ª—å—Ç–∞—Ç: {vulnerabilities} —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π, —É—Ä–æ–≤–µ–Ω—å: {vulnerability_level.value}")
        
        return result
    
    async def test_input_validation_security(self, function_id: str = "test_function") -> SecurityTestResult:
        """
        –¢–µ—Å—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤–≤–æ–¥–∞
        
        Args:
            function_id: ID —Ñ—É–Ω–∫—Ü–∏–∏
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤–≤–æ–¥–∞
        """
        print(f"üîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤–≤–æ–¥–∞ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏: {function_id}")
        
        test_id = f"input_test_{function_id}_{int(time.time())}"
        start_time = time.time()
        test_details = {
            "malicious_inputs_tested": [],
            "vulnerabilities": [],
            "validation_methods": []
        }
        
        # –°–ø–∏—Å–æ–∫ –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã—Ö –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        malicious_inputs = [
            ("xss", self.generate_malicious_input("xss")),
            ("sql_injection", self.generate_malicious_input("sql_injection")),
            ("path_traversal", self.generate_malicious_input("path_traversal")),
            ("command_injection", self.generate_malicious_input("command_injection")),
            ("json_injection", self.generate_malicious_input("json_injection")),
            ("buffer_overflow", self.generate_malicious_input("buffer_overflow")),
            ("null_byte", self.generate_malicious_input("null_byte")),
            ("special_chars", self.generate_malicious_input("special_chars"))
        ]
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ç–∏–ø –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω–æ–≥–æ –≤–≤–æ–¥–∞
        for input_type, malicious_input in malicious_inputs:
            print(f"  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {input_type}...")
            
            try:
                valid_token = self.generate_test_token("admin")
                async with httpx.AsyncClient(timeout=10.0) as client:
                    headers = {"Authorization": f"Bearer {valid_token}"}
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã–π –≤–≤–æ–¥ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
                    test_data = {
                        "function_id": malicious_input,
                        "config": {"malicious": malicious_input},
                        "name": malicious_input
                    }
                    
                    # POST –∑–∞–ø—Ä–æ—Å —Å –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                    response = await client.post(
                        f"{self.sfm_url}/functions/{function_id}/configure",
                        headers=headers,
                        json=test_data
                    )
                    
                    test_result = {
                        "input_type": input_type,
                        "status_code": response.status_code,
                        "response_contains_input": malicious_input in response.text,
                        "vulnerable": response.status_code == 200 and malicious_input in response.text
                    }
                    
                    test_details["malicious_inputs_tested"].append(test_result)
                    
                    if test_result["vulnerable"]:
                        test_details["vulnerabilities"].append({
                            "type": f"{input_type}_vulnerability",
                            "severity": "high" if input_type in ["sql_injection", "command_injection"] else "medium",
                            "description": f"–°–∏—Å—Ç–µ–º–∞ —É—è–∑–≤–∏–º–∞ –∫ {input_type}",
                            "input": malicious_input
                        })
                        
            except Exception as e:
                test_details["malicious_inputs_tested"].append({
                    "input_type": input_type,
                    "error": str(e),
                    "vulnerable": False
                })
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        total_tests = len(test_details["malicious_inputs_tested"])
        vulnerabilities = len(test_details["vulnerabilities"])
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —É—è–∑–≤–∏–º–æ—Å—Ç–∏
        if vulnerabilities == 0:
            vulnerability_level = SecurityVulnerability.NONE
        elif any(v["severity"] == "high" for v in test_details["vulnerabilities"]):
            vulnerability_level = SecurityVulnerability.HIGH
        elif any(v["severity"] == "medium" for v in test_details["vulnerabilities"]):
            vulnerability_level = SecurityVulnerability.MEDIUM
        else:
            vulnerability_level = SecurityVulnerability.LOW
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = []
        if vulnerabilities > 0:
            recommendations.append("–†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–≥—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é –≤–≤–æ–¥–∞")
            recommendations.append("–î–æ–±–∞–≤–∏—Ç—å —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö")
            recommendations.append("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å whitelist –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤")
        
        result = SecurityTestResult(
            test_id=test_id,
            test_type=SecurityTestType.INPUT_VALIDATION,
            function_id=function_id,
            timestamp=datetime.now(),
            success=vulnerabilities == 0,
            vulnerability_level=vulnerability_level,
            details=test_details,
            recommendations=recommendations,
            execution_time=time.time() - start_time
        )
        
        self.security_results.append(result)
        
        print(f"  –†–µ–∑—É–ª—å—Ç–∞—Ç: {vulnerabilities} —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π, —É—Ä–æ–≤–µ–Ω—å: {vulnerability_level.value}")
        
        return result
    
    async def test_rate_limiting_security(self, function_id: str = "test_function") -> SecurityTestResult:
        """
        –¢–µ—Å—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
        
        Args:
            function_id: ID —Ñ—É–Ω–∫—Ü–∏–∏
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
        """
        print(f"üîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏: {function_id}")
        
        test_id = f"rate_test_{function_id}_{int(time.time())}"
        start_time = time.time()
        test_details = {
            "requests_sent": 0,
            "requests_blocked": 0,
            "rate_limit_detected": False,
            "response_times": []
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –±—ã—Å—Ç—Ä—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        print("  –û—Ç–ø—Ä–∞–≤–∫–∞ –±—ã—Å—Ç—Ä—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ rate limiting...")
        
        valid_token = self.generate_test_token("admin")
        async with httpx.AsyncClient(timeout=5.0) as client:
            headers = {"Authorization": f"Bearer {valid_token}"}
            
            for i in range(50):  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º 50 –∑–∞–ø—Ä–æ—Å–æ–≤ –±—ã—Å—Ç—Ä–æ
                try:
                    request_start = time.time()
                    response = await client.get(f"{self.sfm_url}/functions/{function_id}/status", headers=headers)
                    request_time = time.time() - request_start
                    
                    test_details["requests_sent"] += 1
                    test_details["response_times"].append(request_time)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –∑–∞–ø—Ä–æ—Å
                    if response.status_code == 429:  # Too Many Requests
                        test_details["requests_blocked"] += 1
                        test_details["rate_limit_detected"] = True
                        print(f"    –ó–∞–ø—Ä–æ—Å {i+1} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω (429)")
                    elif response.status_code == 503:  # Service Unavailable
                        test_details["requests_blocked"] += 1
                        test_details["rate_limit_detected"] = True
                        print(f"    –ó–∞–ø—Ä–æ—Å {i+1} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω (503)")
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                    await asyncio.sleep(0.01)
                    
                except Exception as e:
                    test_details["requests_sent"] += 1
                    # –û—à–∏–±–∫–∞ –º–æ–∂–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
                    if "timeout" in str(e).lower() or "connection" in str(e).lower():
                        test_details["requests_blocked"] += 1
                        test_details["rate_limit_detected"] = True
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        block_rate = (test_details["requests_blocked"] / test_details["requests_sent"]) * 100 if test_details["requests_sent"] > 0 else 0
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —É—è–∑–≤–∏–º–æ—Å—Ç–∏
        if test_details["rate_limit_detected"] and block_rate > 50:
            vulnerability_level = SecurityVulnerability.NONE  # Rate limiting —Ä–∞–±–æ—Ç–∞–µ—Ç
        elif test_details["rate_limit_detected"] and block_rate > 20:
            vulnerability_level = SecurityVulnerability.LOW  # –ß–∞—Å—Ç–∏—á–Ω–∞—è –∑–∞—â–∏—Ç–∞
        elif test_details["rate_limit_detected"]:
            vulnerability_level = SecurityVulnerability.MEDIUM  # –°–ª–∞–±–∞—è –∑–∞—â–∏—Ç–∞
        else:
            vulnerability_level = SecurityVulnerability.HIGH  # –ù–µ—Ç –∑–∞—â–∏—Ç—ã
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = []
        if not test_details["rate_limit_detected"]:
            recommendations.append("–†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å rate limiting –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç DDoS")
            recommendations.append("–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ IP –∞–¥—Ä–µ—Å–∞–º")
        
        if block_rate < 50:
            recommendations.append("–£—Å–∏–ª–∏—Ç—å rate limiting")
            recommendations.append("–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è")
        
        result = SecurityTestResult(
            test_id=test_id,
            test_type=SecurityTestType.RATE_LIMITING,
            function_id=function_id,
            timestamp=datetime.now(),
            success=test_details["rate_limit_detected"],
            vulnerability_level=vulnerability_level,
            details=test_details,
            recommendations=recommendations,
            execution_time=time.time() - start_time
        )
        
        self.security_results.append(result)
        
        print(f"  –†–µ–∑—É–ª—å—Ç–∞—Ç: {test_details['requests_blocked']}/{test_details['requests_sent']} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ")
        print(f"  Rate limiting: {'‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' if test_details['rate_limit_detected'] else '‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'}")
        
        return result
    
    async def test_encryption_security(self, function_id: str = "test_function") -> SecurityTestResult:
        """
        –¢–µ—Å—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
        
        Args:
            function_id: ID —Ñ—É–Ω–∫—Ü–∏–∏
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
        """
        print(f"üîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏: {function_id}")
        
        test_id = f"encryption_test_{function_id}_{int(time.time())}"
        start_time = time.time()
        test_details = {
            "encryption_tests": [],
            "vulnerabilities": [],
            "encryption_methods": []
        }
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ HTTPS
        print("  1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è HTTPS...")
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –ø–æ HTTP (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ HTTPS)
            async with httpx.AsyncClient(timeout=10.0) as client:
                response = await client.get(f"http://localhost:8011/health")
                
                https_test = {
                    "test": "https_redirect",
                    "http_accessible": response.status_code == 200,
                    "secure": response.status_code not in [200]  # HTTP –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω
                }
                
                test_details["encryption_tests"].append(https_test)
                
                if response.status_code == 200:
                    test_details["vulnerabilities"].append({
                        "type": "http_access",
                        "severity": "medium",
                        "description": "HTTP –¥–æ—Å—Ç—É–ø–µ–Ω –±–µ–∑ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ HTTPS"
                    })
                    
        except Exception as e:
            test_details["encryption_tests"].append({
                "test": "https_redirect",
                "error": str(e),
                "secure": True  # –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ HTTP - —Ö–æ—Ä–æ—à–æ
            })
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        print("  2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...")
        try:
            valid_token = self.generate_test_token("admin")
            async with httpx.AsyncClient(timeout=10.0) as client:
                headers = {"Authorization": f"Bearer {valid_token}"}
                response = await client.get(f"{self.sfm_url}/health", headers=headers)
                
                security_headers = {
                    "strict-transport-security": response.headers.get("Strict-Transport-Security"),
                    "x-frame-options": response.headers.get("X-Frame-Options"),
                    "x-content-type-options": response.headers.get("X-Content-Type-Options"),
                    "x-xss-protection": response.headers.get("X-XSS-Protection"),
                    "content-security-policy": response.headers.get("Content-Security-Policy")
                }
                
                headers_test = {
                    "test": "security_headers",
                    "headers_present": sum(1 for v in security_headers.values() if v is not None),
                    "headers": security_headers
                }
                
                test_details["encryption_tests"].append(headers_test)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
                if not security_headers["strict-transport-security"]:
                    test_details["vulnerabilities"].append({
                        "type": "missing_hsts",
                        "severity": "medium",
                        "description": "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ Strict-Transport-Security"
                    })
                
                if not security_headers["x-frame-options"]:
                    test_details["vulnerabilities"].append({
                        "type": "missing_frame_options",
                        "severity": "low",
                        "description": "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ X-Frame-Options"
                    })
                    
        except Exception as e:
            test_details["encryption_tests"].append({
                "test": "security_headers",
                "error": str(e),
                "secure": False
            })
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–∞—Ö
        print("  3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö...")
        try:
            valid_token = self.generate_test_token("admin")
            async with httpx.AsyncClient(timeout=10.0) as client:
                headers = {"Authorization": f"Bearer {valid_token}"}
                response = await client.get(f"{self.sfm_url}/functions/{function_id}/config", headers=headers)
                
                if response.status_code == 200:
                    try:
                        data = response.json()
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ –æ—Ç–≤–µ—Ç–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –≤–∏–¥–µ
                        response_text = response.text.lower()
                        sensitive_patterns = [
                            "password", "secret", "key", "token", "api_key",
                            "private", "credential", "auth", "login"
                        ]
                        
                        exposed_data = [pattern for pattern in sensitive_patterns if pattern in response_text]
                        
                        encryption_test = {
                            "test": "data_encryption",
                            "exposed_patterns": exposed_data,
                            "secure": len(exposed_data) == 0
                        }
                        
                        test_details["encryption_tests"].append(encryption_test)
                        
                        if exposed_data:
                            test_details["vulnerabilities"].append({
                                "type": "exposed_sensitive_data",
                                "severity": "high",
                                "description": f"–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {', '.join(exposed_data)}"
                            })
                            
                    except json.JSONDecodeError:
                        test_details["encryption_tests"].append({
                            "test": "data_encryption",
                            "error": "Invalid JSON response",
                            "secure": True
                        })
                        
        except Exception as e:
            test_details["encryption_tests"].append({
                "test": "data_encryption",
                "error": str(e),
                "secure": False
            })
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        total_tests = len(test_details["encryption_tests"])
        vulnerabilities = len(test_details["vulnerabilities"])
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —É—è–∑–≤–∏–º–æ—Å—Ç–∏
        if vulnerabilities == 0:
            vulnerability_level = SecurityVulnerability.NONE
        elif any(v["severity"] == "high" for v in test_details["vulnerabilities"]):
            vulnerability_level = SecurityVulnerability.HIGH
        elif any(v["severity"] == "medium" for v in test_details["vulnerabilities"]):
            vulnerability_level = SecurityVulnerability.MEDIUM
        else:
            vulnerability_level = SecurityVulnerability.LOW
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = []
        if vulnerabilities > 0:
            recommendations.append("–ù–∞—Å—Ç—Ä–æ–∏—Ç—å HTTPS –∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–¥–∏—Ä–µ–∫—Ç—ã")
            recommendations.append("–î–æ–±–∞–≤–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
            recommendations.append("–ó–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        
        result = SecurityTestResult(
            test_id=test_id,
            test_type=SecurityTestType.ENCRYPTION,
            function_id=function_id,
            timestamp=datetime.now(),
            success=vulnerabilities == 0,
            vulnerability_level=vulnerability_level,
            details=test_details,
            recommendations=recommendations,
            execution_time=time.time() - start_time
        )
        
        self.security_results.append(result)
        
        print(f"  –†–µ–∑—É–ª—å—Ç–∞—Ç: {vulnerabilities} —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π, —É—Ä–æ–≤–µ–Ω—å: {vulnerability_level.value}")
        
        return result
    
    def calculate_security_metrics(self) -> SecurityMetrics:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        total_tests = len(self.security_results)
        passed_tests = sum(1 for result in self.security_results if result.success)
        failed_tests = total_tests - passed_tests
        
        vulnerabilities = len([r for r in self.security_results if not r.success])
        critical_vulnerabilities = len([r for r in self.security_results if r.vulnerability_level == SecurityVulnerability.CRITICAL])
        high_vulnerabilities = len([r for r in self.security_results if r.vulnerability_level == SecurityVulnerability.HIGH])
        medium_vulnerabilities = len([r for r in self.security_results if r.vulnerability_level == SecurityVulnerability.MEDIUM])
        low_vulnerabilities = len([r for r in self.security_results if r.vulnerability_level == SecurityVulnerability.LOW])
        
        # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π –±–∞–ª–ª –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (0-100)
        if total_tests == 0:
            security_score = 0.0
        else:
            # –®—Ç—Ä–∞—Ñ—ã –∑–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–∏
            score = 100.0
            score -= critical_vulnerabilities * 25  # -25 –∑–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ
            score -= high_vulnerabilities * 15      # -15 –∑–∞ –≤—ã—Å–æ–∫–∏–µ
            score -= medium_vulnerabilities * 10    # -10 –∑–∞ —Å—Ä–µ–¥–Ω–∏–µ
            score -= low_vulnerabilities * 5        # -5 –∑–∞ –Ω–∏–∑–∫–∏–µ
            security_score = max(0.0, score)
        
        # –ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º
        compliance_percent = (passed_tests / total_tests) * 100 if total_tests > 0 else 0.0
        
        return SecurityMetrics(
            total_tests=total_tests,
            passed_tests=passed_tests,
            failed_tests=failed_tests,
            vulnerabilities_found=vulnerabilities,
            critical_vulnerabilities=critical_vulnerabilities,
            high_vulnerabilities=high_vulnerabilities,
            medium_vulnerabilities=medium_vulnerabilities,
            low_vulnerabilities=low_vulnerabilities,
            security_score=security_score,
            compliance_percent=compliance_percent
        )
    
    def generate_security_report(self) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        print("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ SFM...")
        
        metrics = self.calculate_security_metrics()
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Ç–∏–ø–∞–º —Ç–µ—Å—Ç–æ–≤
        results_by_type = {}
        for result in self.security_results:
            test_type = result.test_type.value
            if test_type not in results_by_type:
                results_by_type[test_type] = []
            results_by_type[test_type].append(result)
        
        report = {
            "report_date": datetime.now().isoformat(),
            "security_metrics": {
                "total_tests": metrics.total_tests,
                "passed_tests": metrics.passed_tests,
                "failed_tests": metrics.failed_tests,
                "vulnerabilities_found": metrics.vulnerabilities_found,
                "critical_vulnerabilities": metrics.critical_vulnerabilities,
                "high_vulnerabilities": metrics.high_vulnerabilities,
                "medium_vulnerabilities": metrics.medium_vulnerabilities,
                "low_vulnerabilities": metrics.low_vulnerabilities,
                "security_score": metrics.security_score,
                "compliance_percent": metrics.compliance_percent
            },
            "results_by_type": {
                test_type: [
                    {
                        "test_id": result.test_id,
                        "function_id": result.function_id,
                        "timestamp": result.timestamp.isoformat(),
                        "success": result.success,
                        "vulnerability_level": result.vulnerability_level.value,
                        "details": result.details,
                        "recommendations": result.recommendations,
                        "execution_time": result.execution_time
                    }
                    for result in results
                ]
                for test_type, results in results_by_type.items()
            },
            "summary": {
                "overall_security_grade": "A+" if metrics.security_score >= 95 else
                                         "A" if metrics.security_score >= 85 else
                                         "B" if metrics.security_score >= 70 else
                                         "C" if metrics.security_score >= 50 else "F",
                "security_status": "secure" if metrics.security_score >= 80 else
                                 "needs_improvement" if metrics.security_score >= 60 else
                                 "critical_issues",
                "priority_recommendations": self._generate_priority_recommendations()
            }
        }
        
        return report
    
    def _generate_priority_recommendations(self) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
        recommendations = []
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        critical_results = [r for r in self.security_results if r.vulnerability_level == SecurityVulnerability.CRITICAL]
        high_results = [r for r in self.security_results if r.vulnerability_level == SecurityVulnerability.HIGH]
        
        if critical_results:
            recommendations.append("üö® –ö–†–ò–¢–ò–ß–ù–û: –ò—Å–ø—Ä–∞–≤–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ")
        
        if high_results:
            recommendations.append("‚ö†Ô∏è –í–´–°–û–ö–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢: –£—Å—Ç—Ä–∞–Ω–∏—Ç—å –≤—ã—Å–æ–∫–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø—ã —Ç–µ—Å—Ç–æ–≤
        auth_results = [r for r in self.security_results if r.test_type == SecurityTestType.AUTHENTICATION]
        if any(not r.success for r in auth_results):
            recommendations.append("üîê –£—Å–∏–ª–∏—Ç—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é")
        
        input_results = [r for r in self.security_results if r.test_type == SecurityTestType.INPUT_VALIDATION]
        if any(not r.success for r in input_results):
            recommendations.append("üõ°Ô∏è –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–≥—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é –≤–≤–æ–¥–∞")
        
        rate_results = [r for r in self.security_results if r.test_type == SecurityTestType.RATE_LIMITING]
        if any(not r.success for r in rate_results):
            recommendations.append("‚ö° –ù–∞—Å—Ç—Ä–æ–∏—Ç—å rate limiting –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç DDoS")
        
        encryption_results = [r for r in self.security_results if r.test_type == SecurityTestType.ENCRYPTION]
        if any(not r.success for r in encryption_results):
            recommendations.append("üîí –£–ª—É—á—à–∏—Ç—å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö")
        
        if not recommendations:
            recommendations.append("‚úÖ –°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        return recommendations


class TestSFMSecurityIntegration:
    """–¢–µ—Å—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ SFM"""
    
    @pytest.fixture(autouse=True)
    def setup(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
        self.tester = SFMSecurityIntegrationTester()
    
    @pytest.mark.asyncio
    async def test_authentication_security(self):
        """–¢–µ—Å—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
        
        auth_result = await self.tester.test_authentication_security("test_function")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        assert auth_result.test_type == SecurityTestType.AUTHENTICATION
        assert auth_result.execution_time > 0
        assert len(auth_result.details["tests_performed"]) > 0
        
        print(f"‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: {auth_result.vulnerability_level.value} —É—Ä–æ–≤–µ–Ω—å —É—è–∑–≤–∏–º–æ—Å—Ç–∏")
    
    @pytest.mark.asyncio
    async def test_input_validation_security(self):
        """–¢–µ—Å—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤–≤–æ–¥–∞"""
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤–≤–æ–¥–∞...")
        
        input_result = await self.tester.test_input_validation_security("test_function")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        assert input_result.test_type == SecurityTestType.INPUT_VALIDATION
        assert len(input_result.details["malicious_inputs_tested"]) > 0
        assert input_result.execution_time > 0
        
        print(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–æ–¥–∞: {input_result.vulnerability_level.value} —É—Ä–æ–≤–µ–Ω—å —É—è–∑–≤–∏–º–æ—Å—Ç–∏")
    
    @pytest.mark.asyncio
    async def test_rate_limiting_security(self):
        """–¢–µ—Å—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏"""
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏...")
        
        rate_result = await self.tester.test_rate_limiting_security("test_function")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        assert rate_result.test_type == SecurityTestType.RATE_LIMITING
        assert rate_result.details["requests_sent"] > 0
        assert rate_result.execution_time > 0
        
        print(f"‚úÖ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏: {rate_result.vulnerability_level.value} —É—Ä–æ–≤–µ–Ω—å —É—è–∑–≤–∏–º–æ—Å—Ç–∏")
    
    @pytest.mark.asyncio
    async def test_encryption_security(self):
        """–¢–µ—Å—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è"""
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è...")
        
        encryption_result = await self.tester.test_encryption_security("test_function")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        assert encryption_result.test_type == SecurityTestType.ENCRYPTION
        assert len(encryption_result.details["encryption_tests"]) > 0
        assert encryption_result.execution_time > 0
        
        print(f"‚úÖ –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ: {encryption_result.vulnerability_level.value} —É—Ä–æ–≤–µ–Ω—å —É—è–∑–≤–∏–º–æ—Å—Ç–∏")
    
    @pytest.mark.asyncio
    async def test_comprehensive_security(self):
        """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        print("\nüß™ –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        auth_result = await self.tester.test_authentication_security("comprehensive_test")
        input_result = await self.tester.test_input_validation_security("comprehensive_test")
        rate_result = await self.tester.test_rate_limiting_security("comprehensive_test")
        encryption_result = await self.tester.test_encryption_security("comprehensive_test")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        metrics = self.tester.calculate_security_metrics()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        assert metrics.total_tests >= 4, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –º–∏–Ω–∏–º—É–º 4 —Ç–µ—Å—Ç–∞"
        assert 0 <= metrics.security_score <= 100, "–ë–∞–ª–ª –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 100"
        assert 0 <= metrics.compliance_percent <= 100, "–ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 100"
        
        print(f"‚úÖ –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: –±–∞–ª–ª {metrics.security_score:.1f}/100")
        print(f"  –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: {metrics.compliance_percent:.1f}%")
        print(f"  –£—è–∑–≤–∏–º–æ—Å—Ç–µ–π: {metrics.vulnerabilities_found}")
    
    def test_generate_security_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        print("\nüìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ SFM...")
        
        report = self.tester.generate_security_report()
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        report_file = f"sfm_security_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(report, f, indent=2, ensure_ascii=False, default=str)
        
        print(f"‚úÖ –û—Ç—á–µ—Ç –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
        
        # –í—ã–≤–æ–¥ –∫—Ä–∞—Ç–∫–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        metrics = report['security_metrics']
        summary = report['summary']
        
        print(f"\nüìà –ö–†–ê–¢–ö–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò:")
        print(f"  –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {metrics['total_tests']}")
        print(f"  –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {metrics['passed_tests']}")
        print(f"  –ù–∞–π–¥–µ–Ω–æ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π: {metrics['vulnerabilities_found']}")
        print(f"  –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö: {metrics['critical_vulnerabilities']}")
        print(f"  –í—ã—Å–æ–∫–∏—Ö: {metrics['high_vulnerabilities']}")
        print(f"  –°—Ä–µ–¥–Ω–∏—Ö: {metrics['medium_vulnerabilities']}")
        print(f"  –ù–∏–∑–∫–∏—Ö: {metrics['low_vulnerabilities']}")
        print(f"  –ë–∞–ª–ª –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {metrics['security_score']:.1f}/100")
        print(f"  –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º: {metrics['compliance_percent']:.1f}%")
        print(f"  –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: {summary['overall_security_grade']}")
        print(f"  –°—Ç–∞—Ç—É—Å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {summary['security_status']}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç—á–µ—Ç–∞
        assert report['security_metrics']['total_tests'] > 0, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç–µ—Å—Ç–∞—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
        assert 0 <= metrics['security_score'] <= 100, "–ë–∞–ª–ª –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 100"


if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ ALADDIN Dashboard —Å SFM...")
    print("üîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
    print("üõ°Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤–≤–æ–¥–∞ –∏ –∑–∞—â–∏—Ç—ã –æ—Ç –∞—Ç–∞–∫...")
    print("‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ rate limiting –∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è...")
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —á–µ—Ä–µ–∑ pytest
    pytest.main([__file__, "-v", "--tb=short"])