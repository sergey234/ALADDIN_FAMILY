#!/usr/bin/env python3
"""
–¢–µ—Å—Ç—ã –¥–ª—è CodeQualityManager ALADDIN Security System
–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ CodeQualityManager
"""

import os
import sys
import unittest
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent))

try:
    from core.code_quality_manager import (
        CODE_QUALITY_MANAGER,
        CodeQualityManager,
        QualityMetrics,
        QualityReport,
    )

    class TestCodeQualityManager(unittest.TestCase):
        """–¢–µ—Å—Ç—ã –¥–ª—è CodeQualityManager"""

        def setUp(self):
            """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
            self.manager = CodeQualityManager()
            self.test_file = "test_file.py"

            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
            with open(self.test_file, "w") as f:
                f.write('print("Hello, World!")\n')

        def tearDown(self):
            """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤"""
            if os.path.exists(self.test_file):
                os.remove(self.test_file)

        def test_manager_initialization(self):
            """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
            self.assertIsNotNone(self.manager)
            self.assertEqual(self.manager.name, "ALADDIN.CodeQualityManager")
            self.assertEqual(self.manager.status, "initialized")

        def test_manager_start_stop(self):
            """–¢–µ—Å—Ç –∑–∞–ø—É—Å–∫–∞ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"""
            self.manager.start()
            self.assertEqual(self.manager.status, "running")

            self.manager.stop()
            self.assertEqual(self.manager.status, "stopped")

        def test_quality_metrics(self):
            """–¢–µ—Å—Ç –º–µ—Ç—Ä–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞"""
            metrics = QualityMetrics()
            self.assertEqual(metrics.flake8_score, 0.0)
            self.assertEqual(metrics.mypy_score, 0.0)
            self.assertEqual(metrics.overall_score, 0.0)

        def test_quality_report(self):
            """–¢–µ—Å—Ç –æ—Ç—á–µ—Ç–∞ –æ –∫–∞—á–µ—Å—Ç–≤–µ"""
            metrics = QualityMetrics(flake8_score=95.0, mypy_score=90.0)
            report = QualityReport(file_path=self.test_file, metrics=metrics, issues=[], recommendations=[])

            self.assertEqual(report.file_path, self.test_file)
            self.assertEqual(report.metrics.flake8_score, 95.0)
            self.assertEqual(len(report.issues), 0)

        def test_global_instance(self):
            """–¢–µ—Å—Ç –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞"""
            self.assertIsNotNone(CODE_QUALITY_MANAGER)
            self.assertEqual(CODE_QUALITY_MANAGER.name, "ALADDIN.CodeQualityManager")

        def test_status_method(self):
            """–¢–µ—Å—Ç –º–µ—Ç–æ–¥–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞"""
            status = self.manager.get_status()
            self.assertIn("name", status)
            self.assertIn("status", status)
            self.assertIn("start_time", status)

        def test_log_activity(self):
            """–¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
            initial_time = self.manager.last_activity
            self.manager.log_activity("Test message")
            self.assertGreater(self.manager.last_activity, initial_time)

    def run_tests():
        """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤"""
        print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ CodeQualityManager...")
        unittest.main(verbosity=2, exit=False)
        print("‚úÖ –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")

    if __name__ == "__main__":
        run_tests()

except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ CodeQualityManager —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    sys.exit(1)
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤: {e}")
    sys.exit(1)
