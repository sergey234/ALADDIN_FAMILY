#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
SFM Integration Tests –¥–ª—è ALADDIN Dashboard
–¢–µ—Å—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤–µ–±-–¥–∞—à–±–æ—Ä–¥–∞ —Å Safe Function Manager

–ê–≤—Ç–æ—Ä: ALADDIN Security Team
–í–µ—Ä—Å–∏—è: 1.0.0
–î–∞—Ç–∞: 2025-01-27
–ö–∞—á–µ—Å—Ç–≤–æ: A+
"""

import asyncio
import time
import pytest
import httpx
import json
import os
import sys
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional
from dataclasses import dataclass

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

try:
    from security.safe_function_manager import SafeFunctionManager
    from core.base import ComponentStatus, SecurityLevel
    from core.logging_module import LoggingManager
    ALADDIN_AVAILABLE = True
except ImportError:
    ALADDIN_AVAILABLE = False


@dataclass
class SFMFunction:
    """–ú–æ–¥–µ–ª—å —Ñ—É–Ω–∫—Ü–∏–∏ SFM"""
    function_id: str
    name: str
    description: str
    status: str
    security_level: str
    file_path: str
    is_critical: bool
    auto_enable: bool


@dataclass
class SFMIntegrationResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å SFM"""
    endpoint: str
    method: str
    sfm_available: bool
    response_time: float
    status_code: int
    success: bool
    sfm_functions_count: int
    active_functions_count: int
    error_message: Optional[str] = None


class SFMIntegrationTester:
    """–¢–µ—Å—Ç–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å SFM"""
    
    def __init__(self, dashboard_url: str = "http://localhost:8080"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–µ—Ä–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        
        Args:
            dashboard_url: URL –¥–∞—à–±–æ—Ä–¥–∞
        """
        self.dashboard_url = dashboard_url
        self.sfm_url = "http://localhost:8011"  # SFM –ø–æ—Ä—Ç
        self.logger = LoggingManager(name="SFMIntegrationTester") if ALADDIN_AVAILABLE else None
        self.integration_results: List[SFMIntegrationResult] = []
        self.sfm_functions: List[SFMFunction] = []
        
    async def check_sfm_availability(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ SFM
        
        Returns:
            True –µ—Å–ª–∏ SFM –¥–æ—Å—Ç—É–ø–µ–Ω
        """
        try:
            async with httpx.AsyncClient(timeout=5.0) as client:
                response = await client.get(f"{self.sfm_url}/health")
                return response.status_code == 200
        except Exception:
            return False
    
    async def get_sfm_functions(self) -> List[SFMFunction]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π SFM
        
        Returns:
            –°–ø–∏—Å–æ–∫ —Ñ—É–Ω–∫—Ü–∏–π SFM
        """
        try:
            async with httpx.AsyncClient(timeout=10.0) as client:
                response = await client.get(f"{self.sfm_url}/functions")
                
                if response.status_code == 200:
                    data = response.json()
                    functions = []
                    
                    for func_data in data.get("functions", []):
                        function = SFMFunction(
                            function_id=func_data.get("function_id", ""),
                            name=func_data.get("name", ""),
                            description=func_data.get("description", ""),
                            status=func_data.get("status", ""),
                            security_level=func_data.get("security_level", ""),
                            file_path=func_data.get("file_path", ""),
                            is_critical=func_data.get("is_critical", False),
                            auto_enable=func_data.get("auto_enable", False)
                        )
                        functions.append(function)
                    
                    self.sfm_functions = functions
                    return functions
                else:
                    return []
                    
        except Exception as e:
            if self.logger:
                self.logger.log("ERROR", f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π SFM: {e}")
            return []
    
    async def test_dashboard_sfm_integration(
        self, 
        endpoint: str, 
        method: str = "GET",
        json_data: Optional[Dict] = None
    ) -> SFMIntegrationResult:
        """
        –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –¥–∞—à–±–æ—Ä–¥–∞ —Å SFM
        
        Args:
            endpoint: Endpoint –¥–∞—à–±–æ—Ä–¥–∞
            method: HTTP –º–µ—Ç–æ–¥
            json_data: JSON –¥–∞–Ω–Ω—ã–µ
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        """
        start_time = time.time()
        sfm_available = await self.check_sfm_availability()
        
        try:
            async with httpx.AsyncClient(timeout=30.0) as client:
                headers = {"Authorization": "Bearer demo_token"}
                
                if method.upper() == "GET":
                    response = await client.get(f"{self.dashboard_url}{endpoint}", headers=headers)
                elif method.upper() == "POST":
                    response = await client.post(
                        f"{self.dashboard_url}{endpoint}", 
                        json=json_data, 
                        headers=headers
                    )
                else:
                    raise ValueError(f"Unsupported method: {method}")
                
                response_time = time.time() - start_time
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç SFM –¥–∞–Ω–Ω—ã—Ö
                sfm_functions_count = 0
                active_functions_count = 0
                
                if response.status_code == 200:
                    try:
                        data = response.json()
                        
                        # –ò—â–µ–º SFM –¥–∞–Ω–Ω—ã–µ –≤ –æ—Ç–≤–µ—Ç–µ
                        if "services" in data:
                            services = data["services"]
                            if "SafeFunctionManager" in services:
                                sfm_service = services["SafeFunctionManager"]
                                if sfm_service.get("status") == "running":
                                    sfm_functions_count = 1  # SFM —Å–µ—Ä–≤–∏—Å –Ω–∞–π–¥–µ–Ω
                        
                        if "endpoints" in data:
                            endpoints = data["endpoints"]
                            sfm_endpoints = [ep for ep in endpoints if "sfm" in ep.get("service", "").lower()]
                            sfm_functions_count = len(sfm_endpoints)
                        
                    except (json.JSONDecodeError, KeyError):
                        pass
                
                result = SFMIntegrationResult(
                    endpoint=endpoint,
                    method=method,
                    sfm_available=sfm_available,
                    response_time=response_time,
                    status_code=response.status_code,
                    success=200 <= response.status_code < 300,
                    sfm_functions_count=sfm_functions_count,
                    active_functions_count=active_functions_count
                )
                
                self.integration_results.append(result)
                return result
                
        except Exception as e:
            response_time = time.time() - start_time
            
            result = SFMIntegrationResult(
                endpoint=endpoint,
                method=method,
                sfm_available=sfm_available,
                response_time=response_time,
                status_code=0,
                success=False,
                sfm_functions_count=0,
                active_functions_count=0,
                error_message=str(e)
            )
            
            self.integration_results.append(result)
            return result
    
    async def test_sfm_function_management(self) -> Dict[str, Any]:
        """
        –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏—è–º–∏ SFM
        
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        """
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏—è–º–∏ SFM...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ—É–Ω–∫—Ü–∏–π
        functions = await self.get_sfm_functions()
        
        if not functions:
            return {
                "success": False,
                "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ—É–Ω–∫—Ü–∏–π SFM",
                "functions_count": 0
            }
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
        active_functions = [f for f in functions if f.status == "active"]
        critical_functions = [f for f in functions if f.is_critical]
        auto_enable_functions = [f for f in functions if f.auto_enable]
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ —á–µ—Ä–µ–∑ –¥–∞—à–±–æ—Ä–¥
        management_tests = []
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ñ—É–Ω–∫—Ü–∏–π
        status_result = await self.test_dashboard_sfm_integration("/api/services")
        management_tests.append({
            "test": "get_functions_status",
            "success": status_result.success,
            "sfm_functions_found": status_result.sfm_functions_count > 0
        })
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è endpoints
        endpoints_result = await self.test_dashboard_sfm_integration("/api/endpoints")
        management_tests.append({
            "test": "get_sfm_endpoints",
            "success": endpoints_result.success,
            "sfm_endpoints_found": endpoints_result.sfm_functions_count > 0
        })
        
        return {
            "success": True,
            "total_functions": len(functions),
            "active_functions": len(active_functions),
            "critical_functions": len(critical_functions),
            "auto_enable_functions": len(auto_enable_functions),
            "management_tests": management_tests,
            "sfm_available": await self.check_sfm_availability()
        }
    
    def generate_integration_report(self) -> Dict[str, Any]:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ–± –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        
        Returns:
            –û—Ç—á–µ—Ç –æ–± –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        """
        print("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ–± –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å SFM...")
        
        if not self.integration_results:
            return {"error": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"}
        
        successful_tests = [r for r in self.integration_results if r.success]
        failed_tests = [r for r in self.integration_results if not r.success]
        
        avg_response_time = sum(r.response_time for r in self.integration_results) / len(self.integration_results)
        
        sfm_available_count = sum(1 for r in self.integration_results if r.sfm_available)
        sfm_functions_found_count = sum(1 for r in self.integration_results if r.sfm_functions_count > 0)
        
        report = {
            "report_date": datetime.now().isoformat(),
            "total_tests": len(self.integration_results),
            "successful_tests": len(successful_tests),
            "failed_tests": len(failed_tests),
            "success_rate": len(successful_tests) / len(self.integration_results) * 100,
            "avg_response_time": avg_response_time,
            "sfm_availability": sfm_available_count / len(self.integration_results) * 100,
            "sfm_functions_discovered": sfm_functions_found_count / len(self.integration_results) * 100,
            "test_details": [
                {
                    "endpoint": r.endpoint,
                    "method": r.method,
                    "success": r.success,
                    "response_time": r.response_time,
                    "status_code": r.status_code,
                    "sfm_available": r.sfm_available,
                    "sfm_functions_count": r.sfm_functions_count,
                    "error_message": r.error_message
                }
                for r in self.integration_results
            ],
            "summary": {
                "integration_quality": "excellent" if len(successful_tests) / len(self.integration_results) >= 0.9 else "good" if len(successful_tests) / len(self.integration_results) >= 0.7 else "needs_improvement",
                "sfm_integration_status": "fully_integrated" if sfm_functions_found_count > 0 else "partially_integrated" if sfm_available_count > 0 else "not_integrated"
            }
        }
        
        return report


class TestSFMIntegration:
    """–¢–µ—Å—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å SFM"""
    
    @pytest.fixture(autouse=True)
    def setup(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
        self.tester = SFMIntegrationTester()
        
    @pytest.mark.asyncio
    async def test_sfm_availability(self):
        """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ SFM"""
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ SFM...")
        
        sfm_available = await self.tester.check_sfm_availability()
        
        print(f"üìä SFM –¥–æ—Å—Ç—É–ø–µ–Ω: {'–î–∞' if sfm_available else '–ù–µ—Ç'}")
        
        if sfm_available:
            print("‚úÖ SFM —Å–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            print("‚ö†Ô∏è SFM —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - —Ç–µ—Å—Ç—ã –±—É–¥—É—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –≤ —Ä–µ–∂–∏–º–µ –º–æ–∫–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    @pytest.mark.asyncio
    async def test_sfm_functions_discovery(self):
        """–¢–µ—Å—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π SFM"""
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π SFM...")
        
        functions = await self.tester.get_sfm_functions()
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ñ—É–Ω–∫—Ü–∏–π SFM: {len(functions)}")
        
        if functions:
            active_functions = [f for f in functions if f.status == "active"]
            critical_functions = [f for f in functions if f.is_critical]
            
            print(f"üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π: {len(active_functions)}")
            print(f"üìä –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π: {len(critical_functions)}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤
            for i, func in enumerate(functions[:5]):
                print(f"  {i+1}. {func.name} ({func.status}) - {func.description[:50]}...")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        if functions:
            assert len(functions) > 0, "–§—É–Ω–∫—Ü–∏–∏ SFM –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            active_functions = [f for f in functions if f.status == "active"]
            assert len(active_functions) > 0, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π SFM"
    
    @pytest.mark.asyncio
    async def test_dashboard_sfm_endpoints(self):
        """–¢–µ—Å—Ç SFM endpoints –≤ –¥–∞—à–±–æ—Ä–¥–µ"""
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SFM endpoints –≤ –¥–∞—à–±–æ—Ä–¥–µ...")
        
        endpoints_to_test = [
            ("/api/services", "GET"),
            ("/api/endpoints", "GET"),
            ("/api/test-history", "GET")
        ]
        
        results = []
        
        for endpoint, method in endpoints_to_test:
            result = await self.tester.test_dashboard_sfm_integration(endpoint, method)
            results.append(result)
            
            print(f"  {method} {endpoint}:")
            print(f"    –£—Å–ø–µ—Ö: {'–î–∞' if result.success else '–ù–µ—Ç'}")
            print(f"    –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: {result.response_time:.3f}s")
            print(f"    SFM –¥–æ—Å—Ç—É–ø–µ–Ω: {'–î–∞' if result.sfm_available else '–ù–µ—Ç'}")
            print(f"    SFM —Ñ—É–Ω–∫—Ü–∏–π –Ω–∞–π–¥–µ–Ω–æ: {result.sfm_functions_count}")
            
            if result.error_message:
                print(f"    –û—à–∏–±–∫–∞: {result.error_message}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        successful_tests = [r for r in results if r.success]
        sfm_integrated_tests = [r for r in results if r.sfm_functions_count > 0]
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        print(f"  –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {len(successful_tests)}/{len(results)}")
        print(f"  –¢–µ—Å—Ç–æ–≤ —Å SFM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π: {len(sfm_integrated_tests)}/{len(results)}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        assert len(successful_tests) >= len(results) * 0.8, "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"
        assert all(r.response_time < 10.0 for r in results), "–°–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω—ã–µ –æ—Ç–∫–ª–∏–∫–∏"
    
    @pytest.mark.asyncio
    async def test_sfm_function_management(self):
        """–¢–µ—Å—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏—è–º–∏ SFM"""
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏—è–º–∏ SFM...")
        
        management_result = await self.tester.test_sfm_function_management()
        
        if management_result["success"]:
            print(f"‚úÖ –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π: {management_result['total_functions']}")
            print(f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π: {management_result['active_functions']}")
            print(f"‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π: {management_result['critical_functions']}")
            print(f"‚úÖ –ê–≤—Ç–æ–≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π: {management_result['auto_enable_functions']}")
            print(f"‚úÖ SFM –¥–æ—Å—Ç—É–ø–µ–Ω: {'–î–∞' if management_result['sfm_available'] else '–ù–µ—Ç'}")
            
            for test in management_result["management_tests"]:
                print(f"  {test['test']}: {'‚úÖ' if test['success'] else '‚ùå'}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏—è–º–∏: {management_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        assert management_result["success"], f"–û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏—è–º–∏ SFM: {management_result.get('error')}"
        assert management_result["total_functions"] > 0, "–ù–µ—Ç —Ñ—É–Ω–∫—Ü–∏–π SFM –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
    
    @pytest.mark.asyncio
    async def test_sfm_real_time_monitoring(self):
        """–¢–µ—Å—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ SFM –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ SFM –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏...")
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        initial_result = await self.tester.test_dashboard_sfm_integration("/api/services")
        
        print(f"üìä –ù–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å SFM: {'–î–æ—Å—Ç—É–ø–µ–Ω' if initial_result.sfm_available else '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}")
        print(f"üìä –ù–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ—É–Ω–∫—Ü–∏–π: {initial_result.sfm_functions_count}")
        
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–æ–≤–∞
        await asyncio.sleep(2)
        
        final_result = await self.tester.test_dashboard_sfm_integration("/api/services")
        
        print(f"üìä –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å SFM: {'–î–æ—Å—Ç—É–ø–µ–Ω' if final_result.sfm_available else '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}")
        print(f"üìä –§–∏–Ω–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ—É–Ω–∫—Ü–∏–π: {final_result.sfm_functions_count}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å
        status_changed = initial_result.sfm_available != final_result.sfm_available
        functions_changed = initial_result.sfm_functions_count != final_result.sfm_functions_count
        
        print(f"üìä –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è: {'–î–∞' if status_changed else '–ù–µ—Ç'}")
        print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ—É–Ω–∫—Ü–∏–π –∏–∑–º–µ–Ω–∏–ª–æ—Å—å: {'–î–∞' if functions_changed else '–ù–µ—Ç'}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        assert not status_changed, "–°—Ç–∞—Ç—É—Å SFM –∏–∑–º–µ–Ω–∏–ª—Å—è –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∞"
        assert final_result.response_time < 5.0, f"–°–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω—ã–π –æ—Ç–∫–ª–∏–∫: {final_result.response_time:.3f}s"
    
    @pytest.mark.asyncio
    async def test_sfm_error_handling(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ SFM"""
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ SFM...")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π endpoint
        error_result = await self.tester.test_dashboard_sfm_integration("/api/nonexistent", "GET")
        
        print(f"üìä –¢–µ—Å—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ endpoint:")
        print(f"  –°—Ç–∞—Ç—É—Å –∫–æ–¥: {error_result.status_code}")
        print(f"  –£—Å–ø–µ—Ö: {'–î–∞' if error_result.success else '–ù–µ—Ç'}")
        print(f"  –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: {error_result.response_time:.3f}s")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ–≤–µ—Ä–Ω—ã–π –º–µ—Ç–æ–¥
        method_error_result = await self.tester.test_dashboard_sfm_integration("/api/services", "DELETE")
        
        print(f"üìä –¢–µ—Å—Ç –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞:")
        print(f"  –°—Ç–∞—Ç—É—Å –∫–æ–¥: {method_error_result.status_code}")
        print(f"  –£—Å–ø–µ—Ö: {'–î–∞' if method_error_result.success else '–ù–µ—Ç'}")
        print(f"  –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: {method_error_result.response_time:.3f}s")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        assert not error_result.success, "–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π endpoint –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –æ—à–∏–±–∫—É"
        assert error_result.response_time < 5.0, "–°–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏"
    
    def test_generate_integration_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ–± –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        print("\nüìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ–± –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å SFM...")
        
        report = self.tester.generate_integration_report()
        
        if "error" in report:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {report['error']}")
            return
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        report_file = f"sfm_integration_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(report, f, indent=2, ensure_ascii=False, default=str)
        
        print(f"‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
        
        # –í—ã–≤–æ–¥ –∫—Ä–∞—Ç–∫–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        print(f"\nüìà –ö–†–ê–¢–ö–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"  –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {report['total_tests']}")
        print(f"  –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {report['successful_tests']}")
        print(f"  –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {report['success_rate']:.1f}%")
        print(f"  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: {report['avg_response_time']:.3f}s")
        print(f"  –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å SFM: {report['sfm_availability']:.1f}%")
        print(f"  –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π SFM: {report['sfm_functions_discovered']:.1f}%")
        print(f"  –ö–∞—á–µ—Å—Ç–≤–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {report['summary']['integration_quality']}")
        print(f"  –°—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {report['summary']['sfm_integration_status']}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç—á–µ—Ç–∞
        assert report['total_tests'] > 0, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç–µ—Å—Ç–∞—Ö"
        assert report['success_rate'] >= 70, f"–°–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {report['success_rate']:.1f}%"
        assert report['avg_response_time'] < 5.0, f"–°–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω—ã–π –æ—Ç–∫–ª–∏–∫: {report['avg_response_time']:.3f}s"


if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ALADDIN Dashboard —Å SFM...")
    print("üîó –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Safe Function Manager...")
    print("üõ°Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...")
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —á–µ—Ä–µ–∑ pytest
    pytest.main([__file__, "-v", "--tb=short"])