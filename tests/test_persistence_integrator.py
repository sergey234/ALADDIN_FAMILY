#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¢–û–†–ê –ü–ï–†–°–ò–°–¢–ï–ù–¢–ù–û–°–¢–ò
"""

import os
import sys
import tempfile
import time

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from security.safe_function_manager import SafeFunctionManager, SecurityLevel
from security.persistence_integrator import PersistenceIntegrator

def test_persistence_integrator():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä–∞ –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏"""
    print("üß™ –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¢–û–†–ê –ü–ï–†–°–ò–°–¢–ï–ù–¢–ù–û–°–¢–ò")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    test_dir = tempfile.mkdtemp()
    registry_file = os.path.join(test_dir, 'test_functions_registry.json')
    
    print(f"1. –¢–µ—Å—Ç–æ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {test_dir}")
    print(f"2. –§–∞–π–ª —Ä–µ–µ—Å—Ç—Ä–∞: {registry_file}")
    
    try:
        # –°–æ–∑–¥–∞–µ–º SafeFunctionManager
        print("3. –°–æ–∑–¥–∞–Ω–∏–µ SafeFunctionManager...")
        sfm = SafeFunctionManager()
        print(f"   ‚úÖ SFM —Å–æ–∑–¥–∞–Ω, —Ñ—É–Ω–∫—Ü–∏–π: {len(sfm.functions)}")
        
        # –°–æ–∑–¥–∞–µ–º PersistenceIntegrator
        print("4. –°–æ–∑–¥–∞–Ω–∏–µ PersistenceIntegrator...")
        integrator = PersistenceIntegrator(sfm, registry_file)
        print("   ‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        print("5. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π...")
        test_functions = [
            {
                "function_id": "test_anti_fraud",
                "name": "TestAntiFraud",
                "description": "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞",
                "function_type": "ai_agent",
                "security_level": SecurityLevel.CRITICAL,
                "is_critical": True,
                "auto_enable": False
            },
            {
                "function_id": "test_threat_detection",
                "name": "TestThreatDetection",
                "description": "–¢–µ—Å—Ç–æ–≤–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —É–≥—Ä–æ–∑",
                "function_type": "ai_agent",
                "security_level": SecurityLevel.HIGH,
                "is_critical": True,
                "auto_enable": False
            },
            {
                "function_id": "test_security_monitoring",
                "name": "TestSecurityMonitoring",
                "description": "–¢–µ—Å—Ç–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
                "function_type": "security",
                "security_level": SecurityLevel.HIGH,
                "is_critical": False,
                "auto_enable": False
            }
        ]
        
        registered_count = 0
        for func_data in test_functions:
            success = integrator.register_function_with_persistence(**func_data)
            if success:
                registered_count += 1
        
        print(f"   ‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ —Ñ—É–Ω–∫—Ü–∏–π: {registered_count}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        print("6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ñ—É–Ω–∫—Ü–∏–π...")
        status = integrator.get_functions_status()
        print(f"   üìä –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π: {status.get('total_functions', 0)}")
        print(f"   üìä –í–∫–ª—é—á–µ–Ω–Ω—ã—Ö: {status.get('enabled_functions', 0)}")
        print(f"   üìä –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö: {status.get('critical_functions', 0)}")
        print(f"   üìä –§–∞–π–ª —Ä–µ–µ—Å—Ç—Ä–∞: {status.get('registry_exists', False)}")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π SFM –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
        print("7. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ SFM –∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π...")
        sfm2 = SafeFunctionManager()
        integrator2 = PersistenceIntegrator(sfm2, registry_file)
        
        print(f"   ‚úÖ –ù–æ–≤—ã–π SFM —Å–æ–∑–¥–∞–Ω, —Ñ—É–Ω–∫—Ü–∏–π: {len(sfm2.functions)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        print("8. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π...")
        success = True
        for func_data in test_functions:
            func_id = func_data["function_id"]
            if func_id in sfm2.functions:
                function = sfm2.functions[func_id]
                if (function.name == func_data["name"] and 
                    function.function_type == func_data["function_type"]):
                    print(f"   ‚úÖ {func_data['name']} - OK")
                else:
                    print(f"   ‚ùå {func_data['name']} - –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
                    success = False
            else:
                print(f"   ‚ùå {func_data['name']} - –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                success = False
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∫–ª—é—á–µ–Ω–∏–µ/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π
        print("9. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–∏—è/–æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π...")
        if "test_anti_fraud" in sfm2.functions:
            # –í–∫–ª—é—á–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
            enable_success = integrator2.enable_function_with_persistence("test_anti_fraud")
            print(f"   ‚úÖ –í–∫–ª—é—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏: {enable_success}")
            
            # –û—Ç–∫–ª—é—á–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
            disable_success = integrator2.disable_function_with_persistence("test_anti_fraud")
            print(f"   ‚úÖ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏: {disable_success}")
        
        print("\n" + "=" * 50)
        if success:
            print("üéâ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù!")
            print("‚úÖ PersistenceIntegrator —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print("‚úÖ –§—É–Ω–∫—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è")
            print("‚úÖ –ù–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –≤ SafeFunctionManager")
            print("‚úÖ –ì–æ—Ç–æ–≤–æ –∫ production –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        else:
            print("üí• –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù!")
            print("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä–æ–º –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏")
        
        return success
        
    except Exception as e:
        print(f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        return False
    
    finally:
        # –û—á–∏—Å—Ç–∫–∞
        try:
            if os.path.exists(registry_file):
                os.remove(registry_file)
            os.rmdir(test_dir)
        except:
            pass

if __name__ == "__main__":
    success = test_persistence_integrator()
    sys.exit(0 if success else 1)
