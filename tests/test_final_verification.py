#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π Service Mesh Manager
"""

import sys
import os
import time
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from security.microservices.service_mesh_manager import (
    ServiceMeshManager,
    ServiceInfo,
    ServiceType
)


def test_all_functions():
    """–¢–µ—Å—Ç –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
    print("üîß –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ Service Mesh Manager")
    print("=" * 50)
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        manager = ServiceMeshManager(name="FinalTest")
        print("‚úÖ 1. ServiceMeshManager —Å–æ–∑–¥–∞–Ω")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        success = manager.initialize()
        assert success
        print("‚úÖ 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
        service_info = ServiceInfo(
            service_id="test_service",
            name="Test Service",
            description="–¢–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å",
            service_type=ServiceType.SECURITY,
            version="1.0.0",
            endpoints=[],
            dependencies=[]
        )
        manager.register_service(service_info)
        print("‚úÖ 3. –°–µ—Ä–≤–∏—Å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
        
        # Rate Limiting
        manager.enable_rate_limiting()
        manager.set_service_rate_limit("test_service", {"per_minute": 3})
        allowed = sum(1 for _ in range(5) if manager.check_rate_limit("service", "test_service"))
        print(f"‚úÖ 4. Rate Limiting —Ä–∞–±–æ—Ç–∞–µ—Ç: {allowed}/5 –∑–∞–ø—Ä–æ—Å–æ–≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ")
        
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        manager.enable_monitoring()
        health = manager.get_system_health()
        print(f"‚úÖ 5. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∞–±–æ—Ç–∞–µ—Ç: CPU {health.cpu_usage}%, Memory {health.memory_usage}%")
        
        # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
        manager.cache_enable()
        manager.cache_set("test_key", {"data": "test"}, ttl_seconds=60)
        cached = manager.cache_get("test_key")
        assert cached["data"] == "test"
        print("‚úÖ 6. –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        manager.enable_performance_optimization()
        perf_stats = manager.get_performance_stats()
        assert "memory_stats" in perf_stats
        print("‚úÖ 7. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        manager.enable_logging()
        logging_stats = manager.get_logging_statistics()
        assert logging_stats["enabled"]
        print("‚úÖ 8. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
        manager.enable_async()
        manager.start_async_loop()
        time.sleep(0.5)
        manager.stop_async_loop()
        print("‚úÖ 9. –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞
        manager.stop()
        print("‚úÖ 10. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞")
        
        print("\nüéâ –í–°–ï –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–ê–Æ–¢ –ù–ê 100%!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False


if __name__ == "__main__":
    success = test_all_functions()
    sys.exit(0 if success else 1)