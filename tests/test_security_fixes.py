"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è ALADDIN Security System
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
"""

import os
import sys
import unittest
import tempfile
import shutil
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, str(Path(__file__).parent.parent))

from core.database import DatabaseManager
from security.secure_config_manager import SecureConfigManager, SecureConfig
from security.ransomware_protection import RansomwareProtectionSystem
from security.zero_trust_manager import ZeroTrustManager, UserIdentity, AccessRequest, DeviceFingerprint

class TestSecurityFixes(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    
    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
        self.temp_dir = tempfile.mkdtemp()
        self.db_path = os.path.join(self.temp_dir, "test.db")
        
    def tearDown(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤"""
        shutil.rmtree(self.temp_dir, ignore_errors=True)
    
    def test_sql_injection_protection(self):
        """–¢–µ—Å—Ç –∑–∞—â–∏—Ç—ã –æ—Ç SQL –∏–Ω—ä–µ–∫—Ü–∏–π"""
        print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—â–∏—Ç—ã –æ—Ç SQL –∏–Ω—ä–µ–∫—Ü–∏–π...")
        
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db_manager = DatabaseManager("TestDB", {"db_path": self.db_path})
        db_manager.start()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é –∏–º–µ–Ω–∏ —Ç–∞–±–ª–∏—Ü—ã
        self.assertTrue(db_manager._is_valid_table_name("users"))
        self.assertTrue(db_manager._is_valid_table_name("security_events"))
        self.assertTrue(db_manager._is_valid_table_name("test_table_123"))
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –æ–ø–∞—Å–Ω—ã—Ö –∏–º–µ–Ω
        self.assertFalse(db_manager._is_valid_table_name("users; DROP TABLE users; --"))
        self.assertFalse(db_manager._is_valid_table_name("'; DELETE FROM users; --"))
        self.assertFalse(db_manager._is_valid_table_name("users UNION SELECT * FROM passwords"))
        self.assertFalse(db_manager._is_valid_table_name(""))
        self.assertFalse(db_manager._is_valid_table_name("123invalid"))
        self.assertFalse(db_manager._is_valid_table_name("select"))  # SQL –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–ª–∏–Ω–Ω—ã–µ –∏–º–µ–Ω–∞
        long_name = "a" * 65  # –ü—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç –≤ 64 —Å–∏–º–≤–æ–ª–∞
        self.assertFalse(db_manager._is_valid_table_name(long_name))
        
        print("‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç SQL –∏–Ω—ä–µ–∫—Ü–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    def test_secure_config_manager(self):
        """–¢–µ—Å—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∞
        os.environ['ALADDIN_MASTER_PASSWORD'] = 'test_master_password_123'
        
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config_manager = SecureConfigManager("test_config.json")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = SecureConfig(
            telegram_bot_token="test_token_123",
            discord_bot_token="discord_token_456",
            twilio_auth_token="twilio_token_789",
            email_password="email_pass_123",
            firebase_server_key="firebase_key_456",
            encryption_key="encryption_key_789"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        self.assertTrue(config_manager.save_config(config))
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        loaded_config = config_manager.load_config()
        self.assertIsNotNone(loaded_config)
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        validation = config_manager.validate_config()
        self.assertTrue(validation['valid'])
        self.assertGreater(validation['security_score'], 80)
        
        # –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        self.assertTrue(config_manager.create_env_template("test.env.template"))
        self.assertTrue(os.path.exists("test.env.template"))
        
        # –û—á–∏—â–∞–µ–º
        os.remove("test.env.template")
        os.remove("test_config.json")
        
        print("‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    def test_ransomware_protection(self):
        """–¢–µ—Å—Ç –∑–∞—â–∏—Ç—ã –æ—Ç ransomware"""
        print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—â–∏—Ç—ã –æ—Ç ransomware...")
        
        # –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É –∑–∞—â–∏—Ç—ã –æ—Ç ransomware
        ransomware_protection = RansomwareProtectionSystem("TestRansomwareProtection")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        test_dir = os.path.join(self.temp_dir, "test_files")
        os.makedirs(test_dir, exist_ok=True)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
        test_files = [
            "normal_file.txt",
            "suspicious_file.wncry",
            "encrypted_file.locked",
            "malware_file.cerber"
        ]
        
        for file_name in test_files:
            file_path = os.path.join(test_dir, file_name)
            with open(file_path, 'w') as f:
                f.write("Test content")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        self.assertTrue(ransomware_protection.start_monitoring([test_dir]))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        status = ransomware_protection.get_status()
        self.assertTrue(status['is_running'])
        self.assertGreater(len(status['monitored_directories']), 0)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        suspicious_count = status['suspicious_files_count']
        self.assertGreaterEqual(suspicious_count, 0)
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º—É
        ransomware_protection.stop()
        
        print("‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç ransomware —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    def test_zero_trust_manager(self):
        """–¢–µ—Å—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ Zero Trust"""
        print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ Zero Trust...")
        
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä Zero Trust
        zero_trust = ZeroTrustManager("TestZeroTrust")
        zero_trust.start()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        device = DeviceFingerprint(
            device_id="test_device_001",
            hardware_id="hw_test_12345",
            os_info="Test OS",
            mac_address="00:11:22:33:44:55",
            screen_resolution="1920x1080"
        )
        self.assertTrue(zero_trust.register_device(device))
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = UserIdentity(
            user_id="test_user_001",
            username="testuser",
            email="test@example.com",
            mfa_enabled=True,
            trust_score=0.8
        )
        self.assertTrue(zero_trust.register_user(user))
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø
        context = {
            'ip_address': '192.168.1.100',
            'user_agent': 'Test Browser'
        }
        
        access_request = zero_trust.request_access(
            user_id="test_user_001",
            device_id="test_device_001",
            resource="/test/resource",
            action="read",
            context=context
        )
        
        self.assertIsNotNone(access_request)
        self.assertEqual(access_request.user_id, "test_user_001")
        self.assertEqual(access_request.device_id, "test_device_001")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ü–µ–Ω–∫—É —Ä–∏—Å–∫–∞
        self.assertGreaterEqual(access_request.risk_score, 0.0)
        self.assertLessEqual(access_request.risk_score, 1.0)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        status = zero_trust.get_status()
        self.assertTrue(status['is_running'])
        self.assertGreater(status['devices_count'], 0)
        self.assertGreater(status['users_count'], 0)
        
        zero_trust.stop()
        
        print("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä Zero Trust —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    def test_integration_security(self):
        """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∞
        os.environ['ALADDIN_MASTER_PASSWORD'] = 'integration_test_password_123'
        
        # –°–æ–∑–¥–∞–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        db_manager = DatabaseManager("IntegrationTestDB", {"db_path": self.db_path})
        config_manager = SecureConfigManager("integration_config.json")
        ransomware_protection = RansomwareProtectionSystem("IntegrationRansomware")
        zero_trust = ZeroTrustManager("IntegrationZeroTrust")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.assertTrue(db_manager.start())
        zero_trust.start()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = SecureConfig(
            telegram_bot_token="integration_test_token",
            encryption_key="integration_encryption_key"
        )
        self.assertTrue(config_manager.save_config(config))
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
        loaded_config = config_manager.load_config()
        self.assertIsNotNone(loaded_config)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏
        stats = db_manager.get_database_stats()
        self.assertIsInstance(stats, dict)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Zero Trust
        status = zero_trust.get_status()
        self.assertTrue(status['is_running'])
        
        # –û—á–∏—â–∞–µ–º
        db_manager.stop()
        zero_trust.stop()
        os.remove("integration_config.json")
        
        print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

def run_security_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    print("üõ°Ô∏è –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –Ω–∞–±–æ—Ä
    test_suite = unittest.TestLoader().loadTestsFromTestCase(TestSecurityFixes)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(test_suite)
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "=" * 50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {result.testsRun - len(result.failures) - len(result.errors)}")
    print(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {len(result.failures)}")
    print(f"üí• –û—à–∏–±–æ–∫: {len(result.errors)}")
    
    if result.failures:
        print("\n‚ùå –ù–ï–£–î–ê–ß–ù–´–ï –¢–ï–°–¢–´:")
        for test, traceback in result.failures:
            print(f"  - {test}: {traceback}")
    
    if result.errors:
        print("\nüí• –û–®–ò–ë–ö–ò:")
        for test, traceback in result.errors:
            print(f"  - {test}: {traceback}")
    
    success_rate = ((result.testsRun - len(result.failures) - len(result.errors)) / result.testsRun) * 100
    print(f"\nüéØ –£–°–ü–ï–®–ù–û–°–¢–¨: {success_rate:.1f}%")
    
    if success_rate >= 90:
        print("üõ°Ô∏è –°–ò–°–¢–ï–ú–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò: –û–¢–õ–ò–ß–ù–û!")
    elif success_rate >= 80:
        print("üõ°Ô∏è –°–ò–°–¢–ï–ú–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò: –•–û–†–û–®–û!")
    elif success_rate >= 70:
        print("üõ°Ô∏è –°–ò–°–¢–ï–ú–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò: –£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û!")
    else:
        print("üõ°Ô∏è –°–ò–°–¢–ï–ú–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò: –¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò!")
    
    return success_rate >= 80

if __name__ == "__main__":
    success = run_security_tests()
    sys.exit(0 if success else 1)