# -*- coding: utf-8 -*-
"""
ALADDIN Security System - Tests for Malware Protection Service
Тесты для сервиса защиты от вредоносного ПО

Автор: ALADDIN Security Team
Версия: 1.0
Дата: 2025-09-02
"""

import pytest
import time
import os
import tempfile
from datetime import datetime, timedelta
from unittest.mock import Mock, patch

from security.active.malware_protection import (
    MalwareProtectionService,
    MalwareType,
    MalwareSeverity,
    ProtectionAction,
    MalwareStatus,
    MalwareDetection,
    ProtectionRule,
    MalwareSignature
)


class TestMalwareProtection:
    """Тесты для сервиса защиты от вредоносного ПО"""

    @pytest.fixture
    def malware_protection(self):
        """Фикстура для сервиса защиты от вредоносного ПО"""
        return MalwareProtectionService()

    @pytest.fixture
    def temp_file(self):
        """Фикстура для временного файла"""
        with tempfile.NamedTemporaryFile(mode='w', delete=False, suffix='.txt') as f:
            f.write("This is a test file with virus content")
            temp_file_path = f.name
        yield temp_file_path
        try:
            os.unlink(temp_file_path)
        except:
            pass

    def test_initialization(self, malware_protection):
        """Тест инициализации сервиса"""
        assert malware_protection.name == "MalwareProtection"
        assert len(malware_protection.malware_signatures) > 0
        assert len(malware_protection.protection_rules) > 0
        assert malware_protection.family_protection_enabled is True
        assert malware_protection.child_protection_mode is True
        assert malware_protection.elderly_protection_mode is True
        assert malware_protection.real_time_scanning is True
        assert malware_protection.automatic_quarantine is True

    def test_scan_file_virus_detection(self, malware_protection, temp_file):
        """Тест обнаружения вируса в файле"""
        # Переименовываем файл для срабатывания сигнатуры
        virus_file = temp_file.replace('.txt', '_virus.txt')
        os.rename(temp_file, virus_file)
        
        detections = malware_protection.scan_file(virus_file, user_id="test_user")
        
        assert len(detections) > 0
        detection = detections[0]
        assert detection.malware_type == MalwareType.VIRUS
        assert detection.severity in [MalwareSeverity.MEDIUM, MalwareSeverity.HIGH, MalwareSeverity.CRITICAL]
        assert detection.file_path == virus_file
        assert detection.metadata["user_id"] == "test_user"
        
        # Очистка
        try:
            os.unlink(virus_file)
        except:
            pass

    def test_scan_file_ransomware_detection(self, malware_protection):
        """Тест обнаружения программы-вымогателя"""
        with tempfile.NamedTemporaryFile(mode='w', delete=False, suffix='_ransomware.txt') as f:
            f.write("This file contains ransom and encrypt content")
            ransom_file = f.name
        
        detections = malware_protection.scan_file(ransom_file, user_id="test_user")
        
        assert len(detections) > 0
        detection = detections[0]
        assert detection.malware_type == MalwareType.RANSOMWARE
        assert detection.severity in [MalwareSeverity.HIGH, MalwareSeverity.CRITICAL]
        
        # Очистка
        try:
            os.unlink(ransom_file)
        except:
            pass

    def test_scan_file_spyware_detection(self, malware_protection):
        """Тест обнаружения шпионского ПО"""
        with tempfile.NamedTemporaryFile(mode='w', delete=False, suffix='_spyware.txt') as f:
            f.write("This is spyware that steals passwords and credit card info")
            spyware_file = f.name
        
        detections = malware_protection.scan_file(spyware_file, user_id="test_user")
        
        assert len(detections) > 0
        detection = detections[0]
        assert detection.malware_type == MalwareType.SPYWARE
        assert detection.severity in [MalwareSeverity.HIGH, MalwareSeverity.CRITICAL]
        
        # Очистка
        try:
            os.unlink(spyware_file)
        except:
            pass

    def test_scan_file_adware_detection(self, malware_protection):
        """Тест обнаружения рекламного ПО"""
        with tempfile.NamedTemporaryFile(mode='w', delete=False, suffix='_adware.txt') as f:
            f.write("This is adware with popup advertisements")
            adware_file = f.name
        
        detections = malware_protection.scan_file(adware_file, user_id="test_user")
        
        assert len(detections) > 0
        detection = detections[0]
        assert detection.malware_type == MalwareType.ADWARE
        assert detection.severity in [MalwareSeverity.LOW, MalwareSeverity.MEDIUM, MalwareSeverity.HIGH, MalwareSeverity.CRITICAL]
        
        # Очистка
        try:
            os.unlink(adware_file)
        except:
            pass

    def test_scan_file_phishing_detection(self, malware_protection):
        """Тест обнаружения фишингового контента"""
        with tempfile.NamedTemporaryFile(mode='w', delete=False, suffix='_phishing.txt') as f:
            f.write("This is a phishing scam targeting bank and paypal users")
            phishing_file = f.name
        
        detections = malware_protection.scan_file(phishing_file, user_id="test_user")
        
        assert len(detections) > 0
        detection = detections[0]
        assert detection.malware_type == MalwareType.PHISHING
        assert detection.severity in [MalwareSeverity.HIGH, MalwareSeverity.CRITICAL]
        
        # Очистка
        try:
            os.unlink(phishing_file)
        except:
            pass

    def test_scan_file_child_exploitation_detection(self, malware_protection):
        """Тест обнаружения контента для эксплуатации детей"""
        with tempfile.NamedTemporaryFile(mode='w', delete=False, suffix='_child_exploit.txt') as f:
            f.write("This content exploits children and minors")
            exploit_file = f.name
        
        detections = malware_protection.scan_file(exploit_file, user_id="child_user", user_age=12)
        
        assert len(detections) > 0
        detection = detections[0]
        assert detection.malware_type == MalwareType.SPYWARE
        assert detection.severity == MalwareSeverity.CRITICAL
        assert detection.metadata["user_age"] == 12
        
        # Очистка
        try:
            os.unlink(exploit_file)
        except:
            pass

    def test_scan_file_elderly_fraud_detection(self, malware_protection):
        """Тест обнаружения мошенничества с пожилыми"""
        with tempfile.NamedTemporaryFile(mode='w', delete=False, suffix='_elderly_fraud.txt') as f:
            f.write("This targets elderly and senior citizens for fraud and money scams")
            fraud_file = f.name
        
        detections = malware_protection.scan_file(fraud_file, user_id="elderly_user", user_age=70)
        
        assert len(detections) > 0
        detection = detections[0]
        assert detection.malware_type == MalwareType.SPYWARE
        assert detection.severity in [MalwareSeverity.HIGH, MalwareSeverity.CRITICAL]
        assert detection.metadata["user_age"] == 70
        
        # Очистка
        try:
            os.unlink(fraud_file)
        except:
            pass

    def test_protect_against_malware_quarantine(self, malware_protection):
        """Тест защиты от вредоносного ПО с карантином"""
        # Создаем обнаружение
        detection = MalwareDetection(
            detection_id="test_detection_1",
            malware_type=MalwareType.VIRUS,
            severity=MalwareSeverity.MEDIUM,
            file_path="/tmp/test_virus.txt",
            file_hash="test_hash_123",
            file_size=1024,
            timestamp=datetime.now(),
            description="Тестовый вирус",
            status=MalwareStatus.DETECTED
        )
        
        # Применяем защиту
        actions = malware_protection.protect_against_malware(detection)
        
        assert len(actions) > 0
        assert ProtectionAction.QUARANTINE in actions
        assert "/tmp/test_virus.txt" in malware_protection.quarantined_files

    def test_protect_against_malware_block(self, malware_protection):
        """Тест защиты от вредоносного ПО с блокировкой"""
        detection = MalwareDetection(
            detection_id="test_detection_2",
            malware_type=MalwareType.RANSOMWARE,
            severity=MalwareSeverity.CRITICAL,
            file_path="/tmp/test_ransomware.txt",
            file_hash="test_hash_456",
            file_size=2048,
            timestamp=datetime.now(),
            description="Тестовая программа-вымогатель",
            status=MalwareStatus.DETECTED
        )
        
        actions = malware_protection.protect_against_malware(detection)
        
        assert len(actions) > 0
        assert ProtectionAction.BLOCK_ACCESS in actions
        assert "test_hash_456" in malware_protection.blocked_hashes

    def test_protect_against_malware_child_protection(self, malware_protection):
        """Тест защиты от вредоносного ПО с защитой детей"""
        detection = MalwareDetection(
            detection_id="test_detection_3",
            malware_type=MalwareType.SPYWARE,
            severity=MalwareSeverity.CRITICAL,
            file_path="/tmp/test_child_exploit.txt",
            file_hash="test_hash_789",
            file_size=512,
            timestamp=datetime.now(),
            description="Попытка эксплуатации ребенка",
            status=MalwareStatus.DETECTED,
            metadata={"user_age": 10}
        )
        
        actions = malware_protection.protect_against_malware(detection)
        
        assert len(actions) > 0
        assert ProtectionAction.BLOCK_ACCESS in actions
        assert ProtectionAction.ALERT_ADMIN in actions
        assert ProtectionAction.QUARANTINE in actions

    def test_protect_against_malware_elderly_protection(self, malware_protection):
        """Тест защиты от вредоносного ПО с защитой пожилых"""
        detection = MalwareDetection(
            detection_id="test_detection_4",
            malware_type=MalwareType.SPYWARE,
            severity=MalwareSeverity.HIGH,
            file_path="/tmp/test_elderly_fraud.txt",
            file_hash="test_hash_101",
            file_size=1024,
            timestamp=datetime.now(),
            description="Попытка мошенничества с пожилым",
            status=MalwareStatus.DETECTED,
            metadata={"user_age": 75}
        )
        
        actions = malware_protection.protect_against_malware(detection)
        
        assert len(actions) > 0
        assert ProtectionAction.BLOCK_ACCESS in actions
        assert ProtectionAction.ALERT_ADMIN in actions
        assert ProtectionAction.QUARANTINE in actions

    def test_get_malware_summary_user_specific(self, malware_protection):
        """Тест получения сводки по вредоносному ПО для конкретного пользователя"""
        # Создаем несколько обнаружений
        for i in range(3):
            detection = MalwareDetection(
                detection_id=f"test_detection_{i}",
                malware_type=MalwareType.VIRUS,
                severity=MalwareSeverity.MEDIUM,
                file_path=f"/tmp/test_virus_{i}.txt",
                file_hash=f"test_hash_{i}",
                file_size=1024,
                timestamp=datetime.now(),
                description=f"Тестовый вирус {i}",
                status=MalwareStatus.QUARANTINED,
                metadata={"user_id": "test_user"}
            )
            malware_protection.malware_detections[detection.detection_id] = detection
        
        summary = malware_protection.get_malware_summary(user_id="test_user")
        
        assert summary["total_detections"] == 3
        assert summary["quarantined_files"] == 3
        assert summary["by_severity"]["medium"] == 3
        assert summary["by_type"]["virus"] == 3
        assert len(summary["recent_detections"]) == 3

    def test_get_malware_summary_all_users(self, malware_protection):
        """Тест получения общей сводки по вредоносному ПО"""
        # Создаем обнаружения для разных пользователей
        users = ["user1", "user2", "user3"]
        for i, user in enumerate(users):
            detection = MalwareDetection(
                detection_id=f"test_detection_{i}",
                malware_type=MalwareType.ADWARE,
                severity=MalwareSeverity.LOW,
                file_path=f"/tmp/test_adware_{i}.txt",
                file_hash=f"test_hash_{i}",
                file_size=512,
                timestamp=datetime.now(),
                description=f"Тестовое рекламное ПО для {user}",
                status=MalwareStatus.DETECTED,
                metadata={"user_id": user}
            )
            malware_protection.malware_detections[detection.detection_id] = detection
        
        summary = malware_protection.get_malware_summary()
        
        assert summary["total_detections"] == 3
        assert summary["by_type"]["adware"] == 3
        assert len(summary["recent_detections"]) == 3

    def test_get_family_protection_status(self, malware_protection):
        """Тест получения статуса семейной защиты"""
        status = malware_protection.get_family_protection_status()
        
        assert status["family_protection_enabled"] is True
        assert status["child_protection_mode"] is True
        assert status["elderly_protection_mode"] is True
        assert status["real_time_scanning"] is True
        assert status["automatic_quarantine"] is True
        assert status["active_rules"] > 0
        assert status["family_specific_rules"] > 0
        assert "protection_settings" in status
        assert "family_history" in status

    def test_get_status(self, malware_protection):
        """Тест получения статуса сервиса"""
        status = malware_protection.get_status()
        
        assert status["service_name"] == "MalwareProtection"
        assert status["malware_signatures"] > 0
        assert status["protection_rules"] > 0
        assert status["family_protection_enabled"] is True
        assert status["real_time_scanning"] is True
        assert "uptime" in status

    def test_family_protection_history(self, malware_protection):
        """Тест истории семейной защиты"""
        # Создаем обнаружение для семейного пользователя
        with tempfile.NamedTemporaryFile(mode='w', delete=False, suffix='_family_test.txt') as f:
            f.write("This is a test file with virus and malware content")
            test_file = f.name
        
        detections = malware_protection.scan_file(test_file, user_id="family_user", user_age=15)
        
        assert len(detections) > 0
        assert "family_user" in malware_protection.family_protection_history
        assert len(malware_protection.family_protection_history["family_user"]) > 0
        
        # Очистка
        try:
            os.unlink(test_file)
        except:
            pass

    def test_severity_determination(self, malware_protection):
        """Тест определения серьезности"""
        # Тестируем разные уровни уверенности
        test_cases = [
            (0.95, MalwareSeverity.CRITICAL),
            (0.8, MalwareSeverity.HIGH),
            (0.6, MalwareSeverity.MEDIUM),
            (0.3, MalwareSeverity.LOW)
        ]
        
        for confidence, expected_severity in test_cases:
            # Создаем тестовую сигнатуру
            signature = MalwareSignature(
                signature_id="test_signature",
                name="Тестовая сигнатура",
                description="Тестовое описание",
                malware_type=MalwareType.VIRUS,
                patterns=["test_pattern"],
                file_hashes=[],
                confidence_threshold=0.5
            )
            
            severity = malware_protection._determine_severity(confidence, signature)
            assert severity == expected_severity

    def test_confidence_calculation(self, malware_protection):
        """Тест расчета уверенности"""
        # Тестируем с разными паттернами
        with tempfile.NamedTemporaryFile(mode='w', delete=False, suffix='_virus_test.txt') as f:
            f.write("This file contains virus and malware content")
            test_file = f.name
        
        signature = malware_protection.malware_signatures["virus_generic"]
        confidence = malware_protection._calculate_signature_confidence(test_file, signature, "test_hash")
        
        assert 0.0 <= confidence <= 1.0
        assert confidence > 0.3  # Должна быть достаточная уверенность
        
        # Очистка
        try:
            os.unlink(test_file)
        except:
            pass

    def test_rule_condition_evaluation(self, malware_protection):
        """Тест оценки условий правил"""
        # Создаем тестовое обнаружение
        detection = MalwareDetection(
            detection_id="test_rule_eval",
            malware_type=MalwareType.VIRUS,
            severity=MalwareSeverity.MEDIUM,
            file_path="/tmp/test_virus.txt",
            file_hash="test_hash",
            file_size=1024,
            timestamp=datetime.now(),
            description="Тестовое обнаружение",
            status=MalwareStatus.DETECTED
        )
        
        # Получаем правило для вирусов
        rule = malware_protection.protection_rules["quarantine_virus"]
        
        # Оценка должна пройти для подходящих условий
        result = malware_protection._evaluate_rule_conditions(detection, rule)
        assert isinstance(result, bool)

    def test_security_event_creation(self, malware_protection):
        """Тест создания событий безопасности"""
        initial_events = len(malware_protection.activity_log)
        
        # Создаем обнаружение вредоносного ПО
        with tempfile.NamedTemporaryFile(mode='w', delete=False, suffix='_virus.txt') as f:
            f.write("This is a virus file")
            virus_file = f.name
        
        detections = malware_protection.scan_file(virus_file, user_id="test_user")
        
        # Проверяем, что событие добавлено в журнал
        assert len(detections) > 0
        assert len(malware_protection.activity_log) > initial_events
        
        # Проверяем последнее событие
        last_event = malware_protection.activity_log[-1]
        assert last_event["event_type"] == "malware_detected"
        assert "detection_id" in last_event["metadata"]
        assert last_event["metadata"]["user_id"] == "test_user"
        
        # Очистка
        try:
            os.unlink(virus_file)
        except:
            pass

    def test_security_event_filtering(self, malware_protection):
        """Тест фильтрации событий безопасности"""
        # Создаем несколько событий
        with tempfile.NamedTemporaryFile(mode='w', delete=False, suffix='_virus1.txt') as f:
            f.write("virus content")
            virus1 = f.name
        
        with tempfile.NamedTemporaryFile(mode='w', delete=False, suffix='_adware1.txt') as f:
            f.write("adware content")
            adware1 = f.name
        
        malware_protection.scan_file(virus1, "user1")
        malware_protection.scan_file(adware1, "user2")
        
        # Фильтруем по типу события
        malware_events = malware_protection.get_security_events(event_type="malware_detected")
        assert len(malware_events) >= 1
        
        # Фильтруем по серьезности
        high_events = malware_protection.get_security_events(severity="high")
        assert len(high_events) >= 0  # Может быть 0 или больше в зависимости от уверенности
        
        # Очистка
        try:
            os.unlink(virus1)
            os.unlink(adware1)
        except:
            pass

    def test_security_event_clearing(self, malware_protection):
        """Тест очистки событий безопасности"""
        # Создаем событие
        with tempfile.NamedTemporaryFile(mode='w', delete=False, suffix='_virus.txt') as f:
            f.write("virus content")
            virus_file = f.name
        
        malware_protection.scan_file(virus_file, "user1")
        assert len(malware_protection.activity_log) > 0
        
        # Очищаем все события
        malware_protection.clear_security_events()
        assert len(malware_protection.activity_log) == 0
        
        # Очистка
        try:
            os.unlink(virus_file)
        except:
            pass
