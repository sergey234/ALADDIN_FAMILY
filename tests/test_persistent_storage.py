#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π SafeFunctionManager
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ

–ê–≤—Ç–æ—Ä: ALADDIN Security Team
–í–µ—Ä—Å–∏—è: 1.0
–î–∞—Ç–∞: 2025-09-09
"""

import os
import sys
import json
import time
import tempfile
import shutil

# –î–æ–±–∞–≤–∏—Ç—å –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from security.safe_function_manager import SafeFunctionManager, SecurityLevel

class TestPersistentStorage:
    """–¢–µ—Å—Ç –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π"""
    
    def __init__(self):
        self.test_dir = tempfile.mkdtemp()
        self.registry_file = os.path.join(self.test_dir, "test_functions_registry.json")
        self.sfm1 = None
        self.sfm2 = None
        
    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        if os.path.exists(self.test_dir):
            shutil.rmtree(self.test_dir)
    
    def test_persistent_storage(self) -> bool:
        """–¢–µ—Å—Ç –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è"""
        
        print("üß™ –¢–ï–°–¢ –ü–ï–†–°–ò–°–¢–ï–ù–¢–ù–û–ì–û –•–†–ê–ù–ï–ù–ò–Ø")
        print("=" * 40)
        
        try:
            # –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞—Ç—å SFM –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏
            print("1. –°–æ–∑–¥–∞–Ω–∏–µ SafeFunctionManager...")
            config = {
                "registry_file": self.registry_file,
                "enable_persistence": True
            }
            self.sfm1 = SafeFunctionManager("TestSFM1", config)
            
            print("2. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π...")
            test_functions = [
                {
                    "function_id": "test_function_1",
                    "name": "TestFunction1",
                    "description": "–¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è 1",
                    "function_type": "test",
                    "security_level": SecurityLevel.HIGH,
                    "is_critical": True,
                    "auto_enable": True
                },
                {
                    "function_id": "test_function_2", 
                    "name": "TestFunction2",
                    "description": "–¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è 2",
                    "function_type": "test",
                    "security_level": SecurityLevel.MEDIUM,
                    "is_critical": False,
                    "auto_enable": False
                },
                {
                    "function_id": "test_function_3",
                    "name": "TestFunction3",
                    "description": "–¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è 3",
                    "function_type": "security",
                    "security_level": SecurityLevel.CRITICAL,
                    "is_critical": True,
                    "auto_enable": True
                }
            ]
            
            for func_data in test_functions:
                success = self.sfm1.register_function(
                    function_id=func_data["function_id"],
                    name=func_data["name"],
                    description=func_data["description"],
                    function_type=func_data["function_type"],
                    security_level=func_data["security_level"],
                    is_critical=func_data["is_critical"],
                    auto_enable=func_data["auto_enable"]
                )
                
                if not success:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ {func_data['name']}")
                    return False
                else:
                    print(f"   ‚úÖ {func_data['name']} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞")
            
            print(f"   –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ —Ñ—É–Ω–∫—Ü–∏–π: {len(self.sfm1.functions)}")
            
            # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω
            if not os.path.exists(self.registry_file):
                print("   ‚ùå –§–∞–π–ª —Ä–µ–µ—Å—Ç—Ä–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω")
                return False
            else:
                print("   ‚úÖ –§–∞–π–ª —Ä–µ–µ—Å—Ç—Ä–∞ —Å–æ–∑–¥–∞–Ω")
            
            # –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π SFM –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É
            print("3. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ SafeFunctionManager...")
            self.sfm2 = SafeFunctionManager("TestSFM2", config)
            
            print(f"   –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ—É–Ω–∫—Ü–∏–π: {len(self.sfm2.functions)}")
            
            # –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            print("4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ...")
            if len(self.sfm2.functions) == 3:
                print("   ‚úÖ –§—É–Ω–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                
                for func_id, func in self.sfm2.functions.items():
                    print(f"   - {func.name} ({func.status.value})")
                
                # –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–µ—Ç–∞–ª–∏ —Ñ—É–Ω–∫—Ü–∏–π
                print("5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ—Ç–∞–ª–µ–π —Ñ—É–Ω–∫—Ü–∏–π...")
                for func_data in test_functions:
                    func_id = func_data["function_id"]
                    if func_id in self.sfm2.functions:
                        func = self.sfm2.functions[func_id]
                        
                        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
                        if (func.name == func_data["name"] and 
                            func.description == func_data["description"] and
                            func.function_type == func_data["function_type"] and
                            func.security_level == func_data["security_level"] and
                            func.is_critical == func_data["is_critical"] and
                            func.auto_enable == func_data["auto_enable"]):
                            print(f"   ‚úÖ {func.name} - –≤—Å–µ —Å–≤–æ–π—Å—Ç–≤–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
                        else:
                            print(f"   ‚ùå {func.name} - –æ—à–∏–±–∫–∞ –≤ —Å–≤–æ–π—Å—Ç–≤–∞—Ö")
                            return False
                    else:
                        print(f"   ‚ùå –§—É–Ω–∫—Ü–∏—è {func_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                        return False
                
                return True
            else:
                print("   ‚ùå –§—É–Ω–∫—Ü–∏–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
                return False
                
        except Exception as e:
            print(f"   ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            return False
    
    def test_file_format(self) -> bool:
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–∞–π–ª–∞ —Ä–µ–µ—Å—Ç—Ä–∞"""
        print("\n6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–∞–π–ª–∞ —Ä–µ–µ—Å—Ç—Ä–∞...")
        
        try:
            with open(self.registry_file, 'r', encoding='utf-8') as f:
                registry_data = json.load(f)
            
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            required_keys = ["version", "last_updated", "functions"]
            for key in required_keys:
                if key not in registry_data:
                    print(f"   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á: {key}")
                    return False
            
            print("   ‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
            
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–µ—Ä—Å–∏—é
            if registry_data["version"] == "1.0":
                print("   ‚úÖ –í–µ—Ä—Å–∏—è —Ñ–∞–π–ª–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
            else:
                print(f"   ‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –≤–µ—Ä—Å–∏—è: {registry_data['version']}")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏
            functions = registry_data["functions"]
            if len(functions) == 3:
                print("   ‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ—É–Ω–∫—Ü–∏–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            else:
                print(f"   ‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ—É–Ω–∫—Ü–∏–π: {len(functions)}")
                return False
            
            return True
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            return False

def run_test():
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞"""
    test = TestPersistentStorage()
    
    try:
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç
        success1 = test.test_persistent_storage()
        
        # –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–∞–π–ª–∞
        success2 = test.test_file_format()
        
        # –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        success = success1 and success2
        
        if success:
            print("\nüéâ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù!")
            print("‚úÖ –ü–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print("‚úÖ –§—É–Ω–∫—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
            print("‚úÖ –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ —Ä–µ–µ—Å—Ç—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
        else:
            print("\nüí• –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù!")
            print("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–º —Ö—Ä–∞–Ω–µ–Ω–∏–µ–º")
        
        return success
        
    finally:
        # –û—á–∏—Å—Ç–∫–∞
        test.cleanup()

if __name__ == "__main__":
    success = run_test()
    sys.exit(0 if success else 1)
