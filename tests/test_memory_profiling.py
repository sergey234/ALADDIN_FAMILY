#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Memory Profiling Tests –¥–ª—è ALADDIN Dashboard
–î–µ—Ç–∞–ª—å–Ω–æ–µ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –∏ –∞–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

–ê–≤—Ç–æ—Ä: ALADDIN Security Team
–í–µ—Ä—Å–∏—è: 1.0.0
–î–∞—Ç–∞: 2025-01-27
–ö–∞—á–µ—Å—Ç–≤–æ: A+
"""

import asyncio
import time
import gc
import tracemalloc
import psutil
import pytest
import httpx
import json
import os
import sys
import threading
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional, Tuple
from dataclasses import dataclass, field
from collections import defaultdict
import weakref
import objgraph

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

try:
    from core.base import ComponentStatus, SecurityLevel
    from core.logging_module import LoggingManager
    ALADDIN_AVAILABLE = True
except ImportError:
    ALADDIN_AVAILABLE = False


@dataclass
class MemoryProfileSnapshot:
    """–°–Ω–∏–º–æ–∫ –ø—Ä–æ—Ñ–∏–ª—è –ø–∞–º—è—Ç–∏"""
    timestamp: datetime
    rss_mb: float
    vms_mb: float
    shared_mb: float
    text_mb: float
    data_mb: float
    lib_mb: float
    dirty_mb: float
    memory_percent: float
    available_memory_mb: float
    cached_memory_mb: float
    buffer_memory_mb: float
    gc_objects_count: int
    tracemalloc_current_mb: float
    tracemalloc_peak_mb: float


@dataclass
class MemoryLeakAnalysis:
    """–ê–Ω–∞–ª–∏–∑ —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏"""
    leak_type: str
    severity: str  # low, medium, high, critical
    description: str
    affected_objects: int
    memory_impact_mb: float
    recommendation: str
    detection_method: str


@dataclass
class MemoryUsagePattern:
    """–ü–∞—Ç—Ç–µ—Ä–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏"""
    pattern_name: str
    memory_growth_rate: float  # MB per second
    peak_usage_mb: float
    average_usage_mb: float
    memory_efficiency: float  # 0-1
    optimization_potential: str  # low, medium, high


class MemoryProfiler:
    """–ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤—â–∏–∫ –ø–∞–º—è—Ç–∏"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤—â–∏–∫–∞"""
        self.tracemalloc_enabled = False
        self.snapshots: List[MemoryProfileSnapshot] = []
        self.logger = LoggingManager(name="MemoryProfiler") if ALADDIN_AVAILABLE else None
        self.monitoring_thread: Optional[threading.Thread] = None
        self.monitoring_active = False
        
    def start_profiling(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏"""
        print("üìä –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º tracemalloc
        if not self.tracemalloc_enabled:
            tracemalloc.start()
            self.tracemalloc_enabled = True
            print("‚úÖ tracemalloc –∑–∞–ø—É—â–µ–Ω")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self.monitoring_active = True
        self.monitoring_thread = threading.Thread(target=self._monitor_memory, daemon=True)
        self.monitoring_thread.start()
        print("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞–º—è—Ç–∏ –∑–∞–ø—É—â–µ–Ω")
    
    def stop_profiling(self) -> Tuple[float, float]:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏"""
        print("üìä –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏...")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        self.monitoring_active = False
        if self.monitoring_thread:
            self.monitoring_thread.join(timeout=5)
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º tracemalloc
        if self.tracemalloc_enabled:
            current, peak = tracemalloc.get_traced_memory()
            tracemalloc.stop()
            self.tracemalloc_enabled = False
            print(f"‚úÖ tracemalloc –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–∏–∫–æ–≤–∞—è –ø–∞–º—è—Ç—å: {peak / 1024 / 1024:.2f} MB")
            return current, peak
        
        return 0, 0
    
    def _monitor_memory(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞–º—è—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        while self.monitoring_active:
            try:
                snapshot = self._take_detailed_snapshot()
                self.snapshots.append(snapshot)
                time.sleep(1)  # –°–Ω–∏–º–æ–∫ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
            except Exception as e:
                if self.logger:
                    self.logger.log("ERROR", f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–∞–º—è—Ç–∏: {e}")
                break
    
    def _take_detailed_snapshot(self) -> MemoryProfileSnapshot:
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Å–Ω–∏–º–∫–∞ –ø–∞–º—è—Ç–∏"""
        process = psutil.Process()
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
        memory_info = process.memory_info()
        memory_percent = process.memory_percent()
        
        # –°–∏—Å—Ç–µ–º–Ω–∞—è –ø–∞–º—è—Ç—å
        system_memory = psutil.virtual_memory()
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ GC
        gc_objects = len(gc.get_objects())
        
        # tracemalloc —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        tracemalloc_current = 0
        tracemalloc_peak = 0
        if self.tracemalloc_enabled:
            current, peak = tracemalloc.get_traced_memory()
            tracemalloc_current = current / 1024 / 1024
            tracemalloc_peak = peak / 1024 / 1024
        
        snapshot = MemoryProfileSnapshot(
            timestamp=datetime.now(),
            rss_mb=memory_info.rss / 1024 / 1024,
            vms_mb=memory_info.vms / 1024 / 1024,
            shared_mb=getattr(memory_info, 'shared', 0) / 1024 / 1024,
            text_mb=getattr(memory_info, 'text', 0) / 1024 / 1024,
            data_mb=getattr(memory_info, 'data', 0) / 1024 / 1024,
            lib_mb=getattr(memory_info, 'lib', 0) / 1024 / 1024,
            dirty_mb=getattr(memory_info, 'dirty', 0) / 1024 / 1024,
            memory_percent=memory_percent,
            available_memory_mb=system_memory.available / 1024 / 1024,
            cached_memory_mb=getattr(system_memory, 'cached', 0) / 1024 / 1024,
            buffer_memory_mb=getattr(system_memory, 'buffers', 0) / 1024 / 1024,
            gc_objects_count=gc_objects,
            tracemalloc_current_mb=tracemalloc_current,
            tracemalloc_peak_mb=tracemalloc_peak
        )
        
        return snapshot
    
    def analyze_memory_growth(self) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —Ä–æ—Å—Ç–∞ –ø–∞–º—è—Ç–∏"""
        if len(self.snapshots) < 2:
            return {"error": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–Ω–∏–º–∫–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"}
        
        initial = self.snapshots[0]
        final = self.snapshots[-1]
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Ä–æ—Å—Ç
        time_diff = (final.timestamp - initial.timestamp).total_seconds()
        rss_growth = final.rss_mb - initial.rss_mb
        vms_growth = final.vms_mb - initial.vms_mb
        
        growth_rate = rss_growth / time_diff if time_diff > 0 else 0
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–¥
        rss_values = [s.rss_mb for s in self.snapshots]
        growth_trend = self._calculate_trend(rss_values)
        
        return {
            "initial_rss_mb": initial.rss_mb,
            "final_rss_mb": final.rss_mb,
            "rss_growth_mb": rss_growth,
            "vms_growth_mb": vms_growth,
            "growth_rate_mb_per_sec": growth_rate,
            "growth_trend": growth_trend,
            "total_snapshots": len(self.snapshots),
            "analysis_duration_sec": time_diff,
            "peak_memory_mb": max(rss_values),
            "min_memory_mb": min(rss_values),
            "memory_volatility": max(rss_values) - min(rss_values)
        }
    
    def _calculate_trend(self, values: List[float]) -> str:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞"""
        if len(values) < 3:
            return "insufficient_data"
        
        # –ü—Ä–æ—Å—Ç–∞—è –ª–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è
        n = len(values)
        x = list(range(n))
        y = values
        
        sum_x = sum(x)
        sum_y = sum(y)
        sum_xy = sum(x[i] * y[i] for i in range(n))
        sum_x2 = sum(x[i] ** 2 for i in range(n))
        
        slope = (n * sum_xy - sum_x * sum_y) / (n * sum_x2 - sum_x ** 2)
        
        if slope > 0.1:
            return "increasing"
        elif slope < -0.1:
            return "decreasing"
        else:
            return "stable"
    
    def detect_memory_leaks(self) -> List[MemoryLeakAnalysis]:
        """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏"""
        leak_analyses = []
        
        if len(self.snapshots) < 5:
            return leak_analyses
        
        # 1. –ê–Ω–∞–ª–∏–∑ —Ä–æ—Å—Ç–∞ RSS
        rss_growth = self.snapshots[-1].rss_mb - self.snapshots[0].rss_mb
        if rss_growth > 100:  # –†–æ—Å—Ç > 100MB
            leak_analyses.append(MemoryLeakAnalysis(
                leak_type="RSS Growth",
                severity="high" if rss_growth > 500 else "medium",
                description=f"–ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π —Ä–æ—Å—Ç RSS –ø–∞–º—è—Ç–∏: {rss_growth:.2f} MB",
                affected_objects=0,  # –ù–µ –º–æ–∂–µ–º —Ç–æ—á–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å
                memory_impact_mb=rss_growth,
                recommendation="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Ç–µ—á–∫–∏ –ø–∞–º—è—Ç–∏ –≤ –∫–æ–¥–µ",
                detection_method="RSS monitoring"
            ))
        
        # 2. –ê–Ω–∞–ª–∏–∑ —Ä–æ—Å—Ç–∞ –æ–±—ä–µ–∫—Ç–æ–≤ GC
        gc_growth = self.snapshots[-1].gc_objects_count - self.snapshots[0].gc_objects_count
        if gc_growth > 10000:  # –†–æ—Å—Ç > 10k –æ–±—ä–µ–∫—Ç–æ–≤
            leak_analyses.append(MemoryLeakAnalysis(
                leak_type="GC Objects Growth",
                severity="medium" if gc_growth > 50000 else "low",
                description=f"–†–æ—Å—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ GC: {gc_growth}",
                affected_objects=gc_growth,
                memory_impact_mb=gc_growth * 0.001,  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
                recommendation="–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤",
                detection_method="GC monitoring"
            ))
        
        # 3. –ê–Ω–∞–ª–∏–∑ tracemalloc
        if self.tracemalloc_enabled:
            tracemalloc_growth = self.snapshots[-1].tracemalloc_current_mb - self.snapshots[0].tracemalloc_current_mb
            if tracemalloc_growth > 50:  # –†–æ—Å—Ç > 50MB
                leak_analyses.append(MemoryLeakAnalysis(
                    leak_type="Tracemalloc Growth",
                    severity="high" if tracemalloc_growth > 200 else "medium",
                    description=f"–†–æ—Å—Ç –ø–∞–º—è—Ç–∏ tracemalloc: {tracemalloc_growth:.2f} MB",
                    affected_objects=0,
                    memory_impact_mb=tracemalloc_growth,
                    recommendation="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Ç–µ—á–∫–∏ –ø–∞–º—è—Ç–∏ –≤ Python –∫–æ–¥–µ",
                    detection_method="tracemalloc"
                ))
        
        # 4. –ê–Ω–∞–ª–∏–∑ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –ø–∞–º—è—Ç–∏
        rss_values = [s.rss_mb for s in self.snapshots]
        memory_volatility = max(rss_values) - min(rss_values)
        if memory_volatility > 200:  # –ù–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å > 200MB
            leak_analyses.append(MemoryLeakAnalysis(
                leak_type="Memory Volatility",
                severity="medium" if memory_volatility > 500 else "low",
                description=f"–í—ã—Å–æ–∫–∞—è –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –ø–∞–º—è—Ç–∏: {memory_volatility:.2f} MB",
                affected_objects=0,
                memory_impact_mb=memory_volatility,
                recommendation="–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç—å—é",
                detection_method="volatility analysis"
            ))
        
        return leak_analyses
    
    def analyze_memory_patterns(self) -> List[MemoryUsagePattern]:
        """–ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏"""
        patterns = []
        
        if len(self.snapshots) < 10:
            return patterns
        
        rss_values = [s.rss_mb for s in self.snapshots]
        
        # 1. –ü–∞—Ç—Ç–µ—Ä–Ω —Ä–æ—Å—Ç–∞
        growth_rate = self._calculate_growth_rate(rss_values)
        if growth_rate > 1.0:  # –†–æ—Å—Ç > 1MB/sec
            patterns.append(MemoryUsagePattern(
                pattern_name="Memory Growth",
                memory_growth_rate=growth_rate,
                peak_usage_mb=max(rss_values),
                average_usage_mb=sum(rss_values) / len(rss_values),
                memory_efficiency=0.5,  # –ù–∏–∑–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–∏ —Ä–æ—Å—Ç–µ
                optimization_potential="high"
            ))
        
        # 2. –ü–∞—Ç—Ç–µ—Ä–Ω —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        memory_std = self._calculate_standard_deviation(rss_values)
        if memory_std < 10:  # –ù–∏–∑–∫–∞—è –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å
            patterns.append(MemoryUsagePattern(
                pattern_name="Memory Stability",
                memory_growth_rate=0,
                peak_usage_mb=max(rss_values),
                average_usage_mb=sum(rss_values) / len(rss_values),
                memory_efficiency=0.9,  # –í—ã—Å–æ–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                optimization_potential="low"
            ))
        
        # 3. –ü–∞—Ç—Ç–µ—Ä–Ω —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        if self._detect_cyclical_pattern(rss_values):
            patterns.append(MemoryUsagePattern(
                pattern_name="Cyclical Memory Usage",
                memory_growth_rate=0,
                peak_usage_mb=max(rss_values),
                average_usage_mb=sum(rss_values) / len(rss_values),
                memory_efficiency=0.7,
                optimization_potential="medium"
            ))
        
        return patterns
    
    def _calculate_growth_rate(self, values: List[float]) -> float:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ —Ä–æ—Å—Ç–∞"""
        if len(values) < 2:
            return 0
        
        total_growth = values[-1] - values[0]
        time_span = len(values)  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º 1 —Å–µ–∫—É–Ω–¥–∞ –º–µ–∂–¥—É —Å–Ω–∏–º–∫–∞–º–∏
        return total_growth / time_span if time_span > 0 else 0
    
    def _calculate_standard_deviation(self, values: List[float]) -> float:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è"""
        if len(values) < 2:
            return 0
        
        mean_val = sum(values) / len(values)
        variance = sum((x - mean_val) ** 2 for x in values) / len(values)
        return variance ** 0.5
    
    def _detect_cyclical_pattern(self, values: List[float]) -> bool:
        """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞"""
        if len(values) < 20:
            return False
        
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ü–∏–∫–ª—ã (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è)
        # –ò—â–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ –¥–∞–Ω–Ω—ã—Ö
        for cycle_length in range(5, min(20, len(values) // 2)):
            if self._check_cycle(values, cycle_length):
                return True
        
        return False
    
    def _check_cycle(self, values: List[float], cycle_length: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ü–∏–∫–ª–∞ –∑–∞–¥–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã"""
        if len(values) < cycle_length * 2:
            return False
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –¥–≤–∞ —Ü–∏–∫–ª–∞
        first_cycle = values[:cycle_length]
        second_cycle = values[cycle_length:cycle_length * 2]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ö–æ–∂–µ—Å—Ç—å (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
        differences = [abs(a - b) for a, b in zip(first_cycle, second_cycle)]
        avg_difference = sum(differences) / len(differences)
        
        # –ï—Å–ª–∏ —Å—Ä–µ–¥–Ω—è—è —Ä–∞–∑–Ω–æ—Å—Ç—å –º–∞–ª–∞, —Å—á–∏—Ç–∞–µ–º —Ü–∏–∫–ª –Ω–∞–π–¥–µ–Ω–Ω—ã–º
        return avg_difference < 10  # 10MB –ø–æ—Ä–æ–≥
    
    def generate_profiling_report(self) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏...")
        
        if not self.snapshots:
            return {"error": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è"}
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–æ—Å—Ç –ø–∞–º—è—Ç–∏
        growth_analysis = self.analyze_memory_growth()
        
        # –û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ–º —É—Ç–µ—á–∫–∏
        leak_analyses = self.detect_memory_leaks()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        usage_patterns = self.analyze_memory_patterns()
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        rss_values = [s.rss_mb for s in self.snapshots]
        
        report = {
            "report_date": datetime.now().isoformat(),
            "profiling_duration_sec": (self.snapshots[-1].timestamp - self.snapshots[0].timestamp).total_seconds(),
            "total_snapshots": len(self.snapshots),
            "growth_analysis": growth_analysis,
            "memory_leaks": [
                {
                    "leak_type": leak.leak_type,
                    "severity": leak.severity,
                    "description": leak.description,
                    "memory_impact_mb": leak.memory_impact_mb,
                    "recommendation": leak.recommendation,
                    "detection_method": leak.detection_method
                }
                for leak in leak_analyses
            ],
            "usage_patterns": [
                {
                    "pattern_name": pattern.pattern_name,
                    "memory_growth_rate": pattern.memory_growth_rate,
                    "peak_usage_mb": pattern.peak_usage_mb,
                    "average_usage_mb": pattern.average_usage_mb,
                    "memory_efficiency": pattern.memory_efficiency,
                    "optimization_potential": pattern.optimization_potential
                }
                for pattern in usage_patterns
            ],
            "summary": {
                "initial_memory_mb": self.snapshots[0].rss_mb,
                "final_memory_mb": self.snapshots[-1].rss_mb,
                "peak_memory_mb": max(rss_values),
                "min_memory_mb": min(rss_values),
                "average_memory_mb": sum(rss_values) / len(rss_values),
                "memory_growth_mb": rss_values[-1] - rss_values[0],
                "leaks_detected": len(leak_analyses),
                "critical_leaks": len([l for l in leak_analyses if l.severity == "critical"]),
                "high_severity_leaks": len([l for l in leak_analyses if l.severity == "high"]),
                "optimization_score": self._calculate_optimization_score(leak_analyses, usage_patterns)
            },
            "snapshots": [
                {
                    "timestamp": s.timestamp.isoformat(),
                    "rss_mb": s.rss_mb,
                    "vms_mb": s.vms_mb,
                    "memory_percent": s.memory_percent,
                    "gc_objects_count": s.gc_objects_count,
                    "tracemalloc_current_mb": s.tracemalloc_current_mb,
                    "tracemalloc_peak_mb": s.tracemalloc_peak_mb
                }
                for s in self.snapshots
            ]
        }
        
        return report
    
    def _calculate_optimization_score(
        self, 
        leak_analyses: List[MemoryLeakAnalysis], 
        usage_patterns: List[MemoryUsagePattern]
    ) -> float:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        score = 1.0
        
        # –®—Ç—Ä–∞—Ñ—ã –∑–∞ —É—Ç–µ—á–∫–∏
        for leak in leak_analyses:
            if leak.severity == "critical":
                score -= 0.3
            elif leak.severity == "high":
                score -= 0.2
            elif leak.severity == "medium":
                score -= 0.1
            else:
                score -= 0.05
        
        # –®—Ç—Ä–∞—Ñ—ã –∑–∞ –Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        for pattern in usage_patterns:
            if pattern.optimization_potential == "high":
                score -= 0.2
            elif pattern.optimization_potential == "medium":
                score -= 0.1
        
        return max(0.0, min(1.0, score))


class MemoryProfilingTester:
    """–¢–µ—Å—Ç–µ—Ä –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏"""
    
    def __init__(self, base_url: str = "http://localhost:8080"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–µ—Ä–∞ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        
        Args:
            base_url: –ë–∞–∑–æ–≤—ã–π URL –¥–∞—à–±–æ—Ä–¥–∞
        """
        self.base_url = base_url
        self.profiler = MemoryProfiler()
        self.logger = LoggingManager(name="MemoryProfilingTester") if ALADDIN_AVAILABLE else None
        
    async def test_memory_profiling_baseline(self):
        """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏"""
        print("üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.profiler.start_profiling()
        
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        await asyncio.sleep(5)
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
        tracemalloc_current, tracemalloc_peak = self.profiler.stop_profiling()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if self.profiler.snapshots:
            initial = self.profiler.snapshots[0]
            final = self.profiler.snapshots[-1]
            
            print(f"üìä –ë–∞–∑–æ–≤–æ–µ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ:")
            print(f"  –ù–∞—á–∞–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å: {initial.rss_mb:.2f} MB")
            print(f"  –§–∏–Ω–∞–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å: {final.rss_mb:.2f} MB")
            print(f"  –†–æ—Å—Ç –ø–∞–º—è—Ç–∏: {final.rss_mb - initial.rss_mb:.2f} MB")
            print(f"  –ü–∏–∫–æ–≤–∞—è –ø–∞–º—è—Ç—å tracemalloc: {tracemalloc_peak / 1024 / 1024:.2f} MB")
            print(f"  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–Ω–∏–º–∫–æ–≤: {len(self.profiler.snapshots)}")
            
            return True
        else:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è")
            return False
    
    async def test_memory_profiling_under_load(self):
        """–¢–µ—Å—Ç –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏ –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π"""
        print("üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏ –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.profiler.start_profiling()
        
        # –°–æ–∑–¥–∞–µ–º –Ω–∞–≥—Ä—É–∑–∫—É
        async def load_task():
            async with httpx.AsyncClient(timeout=30.0) as client:
                headers = {"Authorization": "Bearer demo_token"}
                for _ in range(100):
                    try:
                        await client.get(f"{self.base_url}/api/services", headers=headers)
                    except Exception:
                        pass
                    await asyncio.sleep(0.1)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–≥—Ä—É–∑–∫—É
        load_tasks = [load_task() for _ in range(3)]
        await asyncio.gather(*load_tasks, return_exceptions=True)
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
        tracemalloc_current, tracemalloc_peak = self.profiler.stop_profiling()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if self.profiler.snapshots:
            growth_analysis = self.profiler.analyze_memory_growth()
            leak_analyses = self.profiler.detect_memory_leaks()
            
            print(f"üìä –ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π:")
            print(f"  –†–æ—Å—Ç –ø–∞–º—è—Ç–∏: {growth_analysis.get('rss_growth_mb', 0):.2f} MB")
            print(f"  –°–∫–æ—Ä–æ—Å—Ç—å —Ä–æ—Å—Ç–∞: {growth_analysis.get('growth_rate_mb_per_sec', 0):.4f} MB/s")
            print(f"  –¢—Ä–µ–Ω–¥: {growth_analysis.get('growth_trend', 'unknown')}")
            print(f"  –£—Ç–µ—á–µ–∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ: {len(leak_analyses)}")
            print(f"  –ü–∏–∫–æ–≤–∞—è –ø–∞–º—è—Ç—å tracemalloc: {tracemalloc_peak / 1024 / 1024:.2f} MB")
            
            return len(leak_analyses) == 0  # –£—Å–ø–µ—Ö –µ—Å–ª–∏ –Ω–µ—Ç —É—Ç–µ—á–µ–∫
        else:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è")
            return False


class TestMemoryProfiling:
    """–¢–µ—Å—Ç—ã –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏"""
    
    @pytest.fixture(autouse=True)
    def setup(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
        self.tester = MemoryProfilingTester()
    
    @pytest.mark.asyncio
    async def test_baseline_memory_profiling(self):
        """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏"""
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏...")
        
        success = await self.tester.test_memory_profiling_baseline()
        
        assert success, "–ë–∞–∑–æ–≤–æ–µ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å"
        assert len(self.tester.profiler.snapshots) > 0, "–ù–µ—Ç —Å–Ω–∏–º–∫–æ–≤ –ø–∞–º—è—Ç–∏"
        
        print("‚úÖ –ë–∞–∑–æ–≤–æ–µ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    @pytest.mark.asyncio
    async def test_memory_profiling_under_load(self):
        """–¢–µ—Å—Ç –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏ –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π"""
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏ –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π...")
        
        success = await self.tester.test_memory_profiling_under_load()
        
        assert success, "–ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π –æ–±–Ω–∞—Ä—É–∂–∏–ª–æ —É—Ç–µ—á–∫–∏"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—Ä–∞–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö
        assert len(self.tester.profiler.snapshots) >= 10, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–Ω–∏–º–∫–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
        
        print("‚úÖ –ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    @pytest.mark.asyncio
    async def test_memory_leak_detection(self):
        """–¢–µ—Å—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏"""
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.tester.profiler.start_profiling()
        
        # –°–æ–∑–¥–∞–µ–º –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—É—é —É—Ç–µ—á–∫—É (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
        memory_objects = []
        for i in range(1000):
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤—ã–∑–≤–∞—Ç—å —Ä–æ—Å—Ç –ø–∞–º—è—Ç–∏
            large_dict = {f"key_{j}": f"value_{j}" * 100 for j in range(100)}
            memory_objects.append(large_dict)
            
            # –î–µ–ª–∞–µ–º HTTP –∑–∞–ø—Ä–æ—Å—ã
            async with httpx.AsyncClient(timeout=10.0) as client:
                try:
                    headers = {"Authorization": "Bearer demo_token"}
                    await client.get(f"{self.tester.base_url}/api/services", headers=headers)
                except Exception:
                    pass
            
            if i % 100 == 0:
                await asyncio.sleep(0.1)
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.tester.profiler.stop_profiling()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —É—Ç–µ—á–∫–∏
        leak_analyses = self.tester.profiler.detect_memory_leaks()
        
        print(f"üìä –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —É—Ç–µ—á–µ–∫: {len(leak_analyses)}")
        for leak in leak_analyses:
            print(f"  {leak.leak_type}: {leak.description} ({leak.severity})")
        
        # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã
        del memory_objects
        gc.collect()
        
        print("‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    @pytest.mark.asyncio
    async def test_memory_pattern_analysis(self):
        """–¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ø–∞–º—è—Ç–∏"""
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ø–∞–º—è—Ç–∏...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.tester.profiler.start_profiling()
        
        # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
        for cycle in range(5):
            # –¶–∏–∫–ª–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤
            objects = [{"data": "x" * 1000} for _ in range(1000)]
            
            # HTTP –∑–∞–ø—Ä–æ—Å—ã
            async with httpx.AsyncClient(timeout=10.0) as client:
                headers = {"Authorization": "Bearer demo_token"}
                for _ in range(10):
                    try:
                        await client.get(f"{self.tester.base_url}/api/services", headers=headers)
                    except Exception:
                        pass
            
            # –£–¥–∞–ª—è–µ–º –æ–±—ä–µ–∫—Ç—ã
            del objects
            gc.collect()
            
            await asyncio.sleep(1)
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.tester.profiler.stop_profiling()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        usage_patterns = self.tester.profiler.analyze_memory_patterns()
        
        print(f"üìä –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {len(usage_patterns)}")
        for pattern in usage_patterns:
            print(f"  {pattern.pattern_name}: —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å {pattern.memory_efficiency:.2f}")
        
        print("‚úÖ –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ø–∞–º—è—Ç–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    def test_generate_profiling_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("\nüìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏...")
        
        report = self.tester.profiler.generate_profiling_report()
        
        if "error" in report:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {report['error']}")
            return
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        report_file = f"memory_profiling_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(report, f, indent=2, ensure_ascii=False, default=str)
        
        print(f"‚úÖ –û—Ç—á–µ—Ç –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
        
        # –í—ã–≤–æ–¥ –∫—Ä–∞—Ç–∫–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        summary = report['summary']
        print(f"\nüìà –ö–†–ê–¢–ö–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"  –ù–∞—á–∞–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å: {summary['initial_memory_mb']:.2f} MB")
        print(f"  –§–∏–Ω–∞–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å: {summary['final_memory_mb']:.2f} MB")
        print(f"  –ü–∏–∫–æ–≤–∞—è –ø–∞–º—è—Ç—å: {summary['peak_memory_mb']:.2f} MB")
        print(f"  –†–æ—Å—Ç –ø–∞–º—è—Ç–∏: {summary['memory_growth_mb']:.2f} MB")
        print(f"  –£—Ç–µ—á–µ–∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ: {summary['leaks_detected']}")
        print(f"  –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É—Ç–µ—á–µ–∫: {summary['critical_leaks']}")
        print(f"  –û—Ü–µ–Ω–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {summary['optimization_score']:.2f}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç—á–µ—Ç–∞
        assert report['total_snapshots'] > 0, "–ù–µ—Ç —Å–Ω–∏–º–∫–æ–≤ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è"
        assert summary['memory_growth_mb'] < 1000, f"–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ä–æ—Å—Ç –ø–∞–º—è—Ç–∏: {summary['memory_growth_mb']:.2f} MB"
        assert summary['optimization_score'] >= 0.5, f"–°–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∞—è –æ—Ü–µ–Ω–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {summary['optimization_score']:.2f}"


if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏ ALADDIN Dashboard...")
    print("üìä –î–µ—Ç–∞–ª—å–Ω–æ–µ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏...")
    print("üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏...")
    print("üìà –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏...")
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —á–µ—Ä–µ–∑ pytest
    pytest.main([__file__, "-v", "--tb=short"])