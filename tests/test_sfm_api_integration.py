#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
SFM API Integration Tests –¥–ª—è ALADDIN Dashboard
–¢–µ—Å—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ API Safe Function Manager

–ê–≤—Ç–æ—Ä: ALADDIN Security Team
–í–µ—Ä—Å–∏—è: 1.0.0
–î–∞—Ç–∞: 2025-01-27
–ö–∞—á–µ—Å—Ç–≤–æ: A+
"""

import asyncio
import time
import pytest
import httpx
import json
import os
import sys
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional, Tuple
from dataclasses import dataclass, field
from enum import Enum
import statistics
import threading
from concurrent.futures import ThreadPoolExecutor

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

try:
    from security.safe_function_manager import SafeFunctionManager
    from core.base import ComponentStatus, SecurityLevel
    from core.logging_module import LoggingManager
    ALADDIN_AVAILABLE = True
except ImportError:
    ALADDIN_AVAILABLE = False


class APITestType(Enum):
    """–¢–∏–ø—ã —Ç–µ—Å—Ç–æ–≤ API"""
    ENDPOINT_DISCOVERY = "endpoint_discovery"
    API_VERSIONING = "api_versioning"
    RESPONSE_FORMAT = "response_format"
    ERROR_HANDLING = "error_handling"
    RATE_LIMITING = "rate_limiting"
    AUTHENTICATION = "authentication"
    AUTHORIZATION = "authorization"
    DATA_VALIDATION = "data_validation"
    PERFORMANCE = "performance"
    DOCUMENTATION = "documentation"


class APIResponseStatus(Enum):
    """–°—Ç–∞—Ç—É—Å—ã –æ—Ç–≤–µ—Ç–æ–≤ API"""
    SUCCESS = "success"
    CLIENT_ERROR = "client_error"
    SERVER_ERROR = "server_error"
    TIMEOUT = "timeout"
    NETWORK_ERROR = "network_error"
    AUTHENTICATION_ERROR = "authentication_error"
    AUTHORIZATION_ERROR = "authorization_error"


@dataclass
class APIEndpoint:
    """Endpoint API"""
    endpoint_id: str
    path: str
    method: str
    description: str
    parameters: List[Dict[str, Any]]
    response_schema: Dict[str, Any]
    authentication_required: bool
    rate_limit: Optional[int] = None


@dataclass
class APITestResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ API"""
    test_id: str
    test_type: APITestType
    endpoint: str
    timestamp: datetime
    status: APIResponseStatus
    response_code: int
    response_time: float
    response_size: int
    success: bool
    error_message: Optional[str] = None
    response_data: Optional[Dict[str, Any]] = None


@dataclass
class APIIntegrationMetrics:
    """–ú–µ—Ç—Ä–∏–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ API"""
    total_endpoints_tested: int
    successful_endpoints: int
    failed_endpoints: int
    average_response_time: float
    max_response_time: float
    min_response_time: float
    total_requests: int
    successful_requests: int
    failed_requests: int
    api_coverage_percent: float
    integration_quality: str


class SFMAPIIntegrationTester:
    """–¢–µ—Å—Ç–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ API SFM"""
    
    def __init__(self, sfm_url: str = "http://localhost:8011"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–µ—Ä–∞ API
        
        Args:
            sfm_url: URL SFM API
        """
        self.sfm_url = sfm_url
        self.logger = LoggingManager(name="SFMAPIIntegrationTester") if ALADDIN_AVAILABLE else None
        self.api_endpoints: List[APIEndpoint] = []
        self.api_test_results: List[APITestResult] = []
        self.discovered_endpoints: List[str] = []
        
    async def discover_api_endpoints(self) -> List[APIEndpoint]:
        """
        –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ endpoints API SFM
        
        Returns:
            –°–ø–∏—Å–æ–∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö endpoints
        """
        print("üìä –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ endpoints API SFM...")
        
        discovered_endpoints = []
        
        # –°–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞–µ–º—ã—Ö endpoints SFM
        expected_endpoints = [
            {
                "path": "/health",
                "method": "GET",
                "description": "Health check endpoint",
                "auth_required": False
            },
            {
                "path": "/functions",
                "method": "GET",
                "description": "List all functions",
                "auth_required": True
            },
            {
                "path": "/functions/{function_id}/status",
                "method": "GET",
                "description": "Get function status",
                "auth_required": True
            },
            {
                "path": "/functions/{function_id}/enable",
                "method": "POST",
                "description": "Enable function",
                "auth_required": True
            },
            {
                "path": "/functions/{function_id}/disable",
                "method": "POST",
                "description": "Disable function",
                "auth_required": True
            },
            {
                "path": "/functions/{function_id}/restart",
                "method": "POST",
                "description": "Restart function",
                "auth_required": True
            },
            {
                "path": "/functions/{function_id}/config",
                "method": "GET",
                "description": "Get function configuration",
                "auth_required": True
            },
            {
                "path": "/functions/{function_id}/config",
                "method": "PUT",
                "description": "Update function configuration",
                "auth_required": True
            },
            {
                "path": "/functions/{function_id}/metrics",
                "method": "GET",
                "description": "Get function metrics",
                "auth_required": True
            },
            {
                "path": "/functions/{function_id}/health",
                "method": "GET",
                "description": "Get function health",
                "auth_required": True
            },
            {
                "path": "/metrics",
                "method": "GET",
                "description": "Get system metrics",
                "auth_required": True
            },
            {
                "path": "/docs",
                "method": "GET",
                "description": "API documentation",
                "auth_required": False
            },
            {
                "path": "/openapi.json",
                "method": "GET",
                "description": "OpenAPI specification",
                "auth_required": False
            }
        ]
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –æ–∂–∏–¥–∞–µ–º—ã–π endpoint
        for endpoint_info in expected_endpoints:
            print(f"  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {endpoint_info['method']} {endpoint_info['path']}...")
            
            try:
                async with httpx.AsyncClient(timeout=10.0) as client:
                    headers = {"Authorization": "Bearer demo_token"} if endpoint_info["auth_required"] else {}
                    
                    # –ó–∞–º–µ–Ω—è–µ–º {function_id} –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID
                    test_path = endpoint_info["path"].replace("{function_id}", "test_function")
                    
                    if endpoint_info["method"] == "GET":
                        response = await client.get(f"{self.sfm_url}{test_path}", headers=headers)
                    elif endpoint_info["method"] == "POST":
                        response = await client.post(f"{self.sfm_url}{test_path}", headers=headers, json={})
                    elif endpoint_info["method"] == "PUT":
                        response = await client.put(f"{self.sfm_url}{test_path}", headers=headers, json={})
                    else:
                        continue
                    
                    # –°–æ–∑–¥–∞–µ–º endpoint –æ–±—ä–µ–∫—Ç
                    endpoint = APIEndpoint(
                        endpoint_id=f"{endpoint_info['method'].lower()}_{endpoint_info['path'].replace('/', '_').replace('{', '').replace('}', '')}",
                        path=endpoint_info["path"],
                        method=endpoint_info["method"],
                        description=endpoint_info["description"],
                        parameters=[],  # –ó–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
                        response_schema={},  # –ó–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –æ—Ç–≤–µ—Ç–æ–≤
                        authentication_required=endpoint_info["auth_required"],
                        rate_limit=None  # –ó–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ rate limiting
                    )
                    
                    discovered_endpoints.append(endpoint)
                    self.discovered_endpoints.append(test_path)
                    
                    print(f"    ‚úÖ –ù–∞–π–¥–µ–Ω: {response.status_code}")
                    
            except Exception as e:
                print(f"    ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω: {e}")
        
        self.api_endpoints = discovered_endpoints
        
        print(f"  –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ endpoints: {len(discovered_endpoints)}")
        
        return discovered_endpoints
    
    async def test_api_response_formats(self) -> Dict[str, Any]:
        """
        –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤ API
        
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
        """
        print("üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤ API...")
        
        format_results = {
            "endpoints_tested": [],
            "format_compliance": {},
            "schema_validation": {},
            "overall_compliance": "unknown"
        }
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–π endpoint
        for endpoint in self.api_endpoints:
            print(f"  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞: {endpoint.method} {endpoint.path}")
            
            endpoint_result = {
                "endpoint": f"{endpoint.method} {endpoint.path}",
                "response_format": "unknown",
                "content_type": "unknown",
                "schema_valid": False,
                "status_codes": []
            }
            
            try:
                async with httpx.AsyncClient(timeout=10.0) as client:
                    headers = {"Authorization": "Bearer demo_token"} if endpoint.authentication_required else {}
                    
                    # –ó–∞–º–µ–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –ø—É—Ç–∏
                    test_path = endpoint.path.replace("{function_id}", "test_function")
                    
                    if endpoint.method == "GET":
                        response = await client.get(f"{self.sfm_url}{test_path}", headers=headers)
                    elif endpoint.method == "POST":
                        response = await client.post(f"{self.sfm_url}{test_path}", headers=headers, json={})
                    else:
                        continue
                    
                    endpoint_result["status_codes"].append(response.status_code)
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º Content-Type
                    content_type = response.headers.get("Content-Type", "")
                    endpoint_result["content_type"] = content_type
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞
                    if "application/json" in content_type:
                        endpoint_result["response_format"] = "json"
                        
                        try:
                            json_data = response.json()
                            endpoint_result["schema_valid"] = isinstance(json_data, (dict, list))
                            
                            # –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è JSON —Å—Ö–µ–º—ã
                            if isinstance(json_data, dict):
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø–æ–ª–µ–π
                                has_status = "status" in json_data or "success" in json_data
                                has_data = "data" in json_data or "result" in json_data
                                endpoint_result["schema_valid"] = has_status or has_data
                                
                        except json.JSONDecodeError:
                            endpoint_result["schema_valid"] = False
                            endpoint_result["response_format"] = "invalid_json"
                            
                    elif "text/html" in content_type:
                        endpoint_result["response_format"] = "html"
                    elif "text/plain" in content_type:
                        endpoint_result["response_format"] = "text"
                    else:
                        endpoint_result["response_format"] = "unknown"
                    
                    format_results["endpoints_tested"].append(endpoint_result)
                    
            except Exception as e:
                endpoint_result["error"] = str(e)
                format_results["endpoints_tested"].append(endpoint_result)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—â–µ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
        total_endpoints = len(format_results["endpoints_tested"])
        json_endpoints = len([e for e in format_results["endpoints_tested"] if e["response_format"] == "json"])
        valid_schemas = len([e for e in format_results["endpoints_tested"] if e["schema_valid"]])
        
        if json_endpoints == total_endpoints and valid_schemas >= total_endpoints * 0.8:
            format_results["overall_compliance"] = "excellent"
        elif json_endpoints >= total_endpoints * 0.8 and valid_schemas >= total_endpoints * 0.6:
            format_results["overall_compliance"] = "good"
        elif json_endpoints >= total_endpoints * 0.5:
            format_results["overall_compliance"] = "fair"
        else:
            format_results["overall_compliance"] = "poor"
        
        format_results["format_compliance"] = {
            "total_endpoints": total_endpoints,
            "json_endpoints": json_endpoints,
            "valid_schemas": valid_schemas,
            "json_percentage": (json_endpoints / total_endpoints) * 100 if total_endpoints > 0 else 0,
            "schema_validity_percentage": (valid_schemas / total_endpoints) * 100 if total_endpoints > 0 else 0
        }
        
        print(f"  –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞–º: {format_results['overall_compliance']}")
        print(f"  JSON endpoints: {json_endpoints}/{total_endpoints}")
        print(f"  –í–∞–ª–∏–¥–Ω—ã–µ —Å—Ö–µ–º—ã: {valid_schemas}/{total_endpoints}")
        
        return format_results
    
    async def test_api_error_handling(self) -> Dict[str, Any]:
        """
        –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ API
        
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
        """
        print("üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ API...")
        
        error_results = {
            "error_scenarios_tested": [],
            "error_response_formats": {},
            "error_handling_quality": "unknown"
        }
        
        # –°—Ü–µ–Ω–∞—Ä–∏–∏ –æ—à–∏–±–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        error_scenarios = [
            {
                "name": "invalid_function_id",
                "endpoint": "/functions/invalid_id_12345/status",
                "method": "GET",
                "expected_status": [404, 400]
            },
            {
                "name": "invalid_endpoint",
                "endpoint": "/invalid/endpoint",
                "method": "GET",
                "expected_status": [404, 405]
            },
            {
                "name": "unauthorized_access",
                "endpoint": "/functions",
                "method": "GET",
                "headers": {},  # –ë–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                "expected_status": [401, 403]
            },
            {
                "name": "invalid_request_body",
                "endpoint": "/functions/test_function/config",
                "method": "PUT",
                "data": {"invalid": "data"},
                "expected_status": [400, 422]
            },
            {
                "name": "method_not_allowed",
                "endpoint": "/health",
                "method": "DELETE",
                "expected_status": [405]
            }
        ]
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –æ—à–∏–±–∫–∏
        for scenario in error_scenarios:
            print(f"  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è: {scenario['name']}")
            
            scenario_result = {
                "scenario": scenario["name"],
                "endpoint": scenario["endpoint"],
                "method": scenario["method"],
                "expected_status": scenario["expected_status"],
                "actual_status": None,
                "response_format": "unknown",
                "error_message_present": False,
                "success": False
            }
            
            try:
                async with httpx.AsyncClient(timeout=10.0) as client:
                    headers = scenario.get("headers", {"Authorization": "Bearer demo_token"})
                    data = scenario.get("data", {})
                    
                    if scenario["method"] == "GET":
                        response = await client.get(f"{self.sfm_url}{scenario['endpoint']}", headers=headers)
                    elif scenario["method"] == "POST":
                        response = await client.post(f"{self.sfm_url}{scenario['endpoint']}", headers=headers, json=data)
                    elif scenario["method"] == "PUT":
                        response = await client.put(f"{self.sfm_url}{scenario['endpoint']}", headers=headers, json=data)
                    elif scenario["method"] == "DELETE":
                        response = await client.delete(f"{self.sfm_url}{scenario['endpoint']}", headers=headers)
                    else:
                        continue
                    
                    scenario_result["actual_status"] = response.status_code
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —Å—Ç–∞—Ç—É—Å –æ–∂–∏–¥–∞–µ–º–æ–º—É
                    scenario_result["success"] = response.status_code in scenario["expected_status"]
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ–± –æ—à–∏–±–∫–µ
                    content_type = response.headers.get("Content-Type", "")
                    if "application/json" in content_type:
                        try:
                            error_data = response.json()
                            scenario_result["response_format"] = "json"
                            scenario_result["error_message_present"] = any(
                                key in error_data for key in ["error", "message", "detail", "description"]
                            )
                        except json.JSONDecodeError:
                            scenario_result["response_format"] = "invalid_json"
                    else:
                        scenario_result["response_format"] = "non_json"
                        scenario_result["error_message_present"] = len(response.text) > 0
                    
                    error_results["error_scenarios_tested"].append(scenario_result)
                    
            except Exception as e:
                scenario_result["actual_status"] = 0
                scenario_result["error"] = str(e)
                error_results["error_scenarios_tested"].append(scenario_result)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
        total_scenarios = len(error_results["error_scenarios_tested"])
        successful_scenarios = len([s for s in error_results["error_scenarios_tested"] if s["success"]])
        json_error_responses = len([s for s in error_results["error_scenarios_tested"] if s["response_format"] == "json"])
        messages_present = len([s for s in error_results["error_scenarios_tested"] if s["error_message_present"]])
        
        if successful_scenarios >= total_scenarios * 0.8 and json_error_responses >= total_scenarios * 0.8 and messages_present >= total_scenarios * 0.8:
            error_results["error_handling_quality"] = "excellent"
        elif successful_scenarios >= total_scenarios * 0.6 and json_error_responses >= total_scenarios * 0.6:
            error_results["error_handling_quality"] = "good"
        elif successful_scenarios >= total_scenarios * 0.4:
            error_results["error_handling_quality"] = "fair"
        else:
            error_results["error_handling_quality"] = "poor"
        
        error_results["error_response_formats"] = {
            "total_scenarios": total_scenarios,
            "successful_scenarios": successful_scenarios,
            "json_responses": json_error_responses,
            "messages_present": messages_present,
            "success_rate": (successful_scenarios / total_scenarios) * 100 if total_scenarios > 0 else 0
        }
        
        print(f"  –ö–∞—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫: {error_results['error_handling_quality']}")
        print(f"  –£—Å–ø–µ—à–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: {successful_scenarios}/{total_scenarios}")
        print(f"  JSON –æ—Ç–≤–µ—Ç—ã: {json_error_responses}/{total_scenarios}")
        
        return error_results
    
    async def test_api_performance(self) -> Dict[str, Any]:
        """
        –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ API
        
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ API
        """
        print("üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ API...")
        
        performance_results = {
            "endpoint_performance": [],
            "load_test_results": {},
            "concurrent_test_results": {},
            "overall_performance": "unknown"
        }
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω—ã—Ö endpoints
        main_endpoints = [
            {"path": "/health", "method": "GET", "auth": False},
            {"path": "/functions", "method": "GET", "auth": True},
            {"path": "/functions/test_function/status", "method": "GET", "auth": True}
        ]
        
        # 1. –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö endpoints
        print("  1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ endpoints...")
        
        for endpoint_info in main_endpoints:
            print(f"    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {endpoint_info['method']} {endpoint_info['path']}...")
            
            response_times = []
            success_count = 0
            
            # –î–µ–ª–∞–µ–º 10 –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            for i in range(10):
                try:
                    async with httpx.AsyncClient(timeout=10.0) as client:
                        headers = {"Authorization": "Bearer demo_token"} if endpoint_info["auth"] else {}
                        
                        start_time = time.time()
                        
                        if endpoint_info["method"] == "GET":
                            response = await client.get(f"{self.sfm_url}{endpoint_info['path']}", headers=headers)
                        else:
                            continue
                        
                        response_time = time.time() - start_time
                        response_times.append(response_time)
                        
                        if 200 <= response.status_code < 300:
                            success_count += 1
                        
                        await asyncio.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                        
                except Exception:
                    response_times.append(10.0)  # –¢–∞–π–º–∞—É—Ç
            
            if response_times:
                avg_response_time = statistics.mean(response_times)
                min_response_time = min(response_times)
                max_response_time = max(response_times)
                success_rate = (success_count / len(response_times)) * 100
                
                endpoint_perf = {
                    "endpoint": f"{endpoint_info['method']} {endpoint_info['path']}",
                    "avg_response_time": avg_response_time,
                    "min_response_time": min_response_time,
                    "max_response_time": max_response_time,
                    "success_rate": success_rate,
                    "requests_tested": len(response_times)
                }
                
                performance_results["endpoint_performance"].append(endpoint_perf)
                
                print(f"      –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_response_time:.3f}s, –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
        
        # 2. –¢–µ—Å—Ç –Ω–∞–≥—Ä—É–∑–∫–∏
        print("  2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏...")
        
        load_test_requests = 50
        load_response_times = []
        load_success_count = 0
        
        async with httpx.AsyncClient(timeout=10.0) as client:
            headers = {"Authorization": "Bearer demo_token"}
            
            for i in range(load_test_requests):
                try:
                    start_time = time.time()
                    response = await client.get(f"{self.sfm_url}/health", headers=headers)
                    response_time = time.time() - start_time
                    
                    load_response_times.append(response_time)
                    
                    if 200 <= response.status_code < 300:
                        load_success_count += 1
                    
                except Exception:
                    load_response_times.append(10.0)
        
        performance_results["load_test_results"] = {
            "total_requests": load_test_requests,
            "successful_requests": load_success_count,
            "avg_response_time": statistics.mean(load_response_times) if load_response_times else 0,
            "max_response_time": max(load_response_times) if load_response_times else 0,
            "success_rate": (load_success_count / load_test_requests) * 100
        }
        
        # 3. –¢–µ—Å—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å—Ç–∏
        print("  3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å—Ç–∏...")
        
        concurrent_requests = 20
        concurrent_start = time.time()
        
        async def make_concurrent_request():
            try:
                async with httpx.AsyncClient(timeout=10.0) as client:
                    headers = {"Authorization": "Bearer demo_token"}
                    start_time = time.time()
                    response = await client.get(f"{self.sfm_url}/health", headers=headers)
                    return time.time() - start_time, response.status_code
            except Exception:
                return 10.0, 0
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        tasks = [make_concurrent_request() for _ in range(concurrent_requests)]
        concurrent_results = await asyncio.gather(*tasks, return_exceptions=True)
        
        concurrent_total_time = time.time() - concurrent_start
        concurrent_response_times = [r[0] if isinstance(r, tuple) else 10.0 for r in concurrent_results]
        concurrent_success_count = sum(1 for r in concurrent_results if isinstance(r, tuple) and 200 <= r[1] < 300)
        
        performance_results["concurrent_test_results"] = {
            "total_requests": concurrent_requests,
            "successful_requests": concurrent_success_count,
            "total_time": concurrent_total_time,
            "avg_response_time": statistics.mean(concurrent_response_times),
            "max_response_time": max(concurrent_response_times),
            "requests_per_second": concurrent_requests / concurrent_total_time if concurrent_total_time > 0 else 0,
            "success_rate": (concurrent_success_count / concurrent_requests) * 100
        }
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—â—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        avg_endpoint_time = statistics.mean([ep["avg_response_time"] for ep in performance_results["endpoint_performance"]])
        avg_load_time = performance_results["load_test_results"]["avg_response_time"]
        avg_concurrent_time = performance_results["concurrent_test_results"]["avg_response_time"]
        
        overall_avg_time = statistics.mean([avg_endpoint_time, avg_load_time, avg_concurrent_time])
        
        if overall_avg_time < 1.0:
            performance_results["overall_performance"] = "excellent"
        elif overall_avg_time < 2.0:
            performance_results["overall_performance"] = "good"
        elif overall_avg_time < 5.0:
            performance_results["overall_performance"] = "fair"
        else:
            performance_results["overall_performance"] = "poor"
        
        print(f"  –û–±—â–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {performance_results['overall_performance']}")
        print(f"  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: {overall_avg_time:.3f}s")
        print(f"  –ù–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —Ç–µ—Å—Ç: {load_success_count}/{load_test_requests} —É—Å–ø–µ—à–Ω–æ")
        print(f"  –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–π —Ç–µ—Å—Ç: {concurrent_success_count}/{concurrent_requests} —É—Å–ø–µ—à–Ω–æ")
        
        return performance_results
    
    def calculate_api_integration_metrics(self) -> APIIntegrationMetrics:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ API"""
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤
        total_endpoints = len(self.api_endpoints)
        successful_endpoints = len([ep for ep in self.api_endpoints if ep.endpoint_id in self.discovered_endpoints])
        failed_endpoints = total_endpoints - successful_endpoints
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if self.api_test_results:
            response_times = [r.response_time for r in self.api_test_results]
            total_requests = len(self.api_test_results)
            successful_requests = len([r for r in self.api_test_results if r.success])
            failed_requests = total_requests - successful_requests
            
            avg_response_time = statistics.mean(response_times)
            max_response_time = max(response_times)
            min_response_time = min(response_times)
        else:
            avg_response_time = max_response_time = min_response_time = 0.0
            total_requests = successful_requests = failed_requests = 0
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∫—Ä—ã—Ç–∏–µ API
        api_coverage_percent = (successful_endpoints / total_endpoints) * 100 if total_endpoints > 0 else 0
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        if api_coverage_percent >= 90 and avg_response_time < 2.0:
            integration_quality = "excellent"
        elif api_coverage_percent >= 80 and avg_response_time < 5.0:
            integration_quality = "good"
        elif api_coverage_percent >= 60:
            integration_quality = "fair"
        else:
            integration_quality = "poor"
        
        return APIIntegrationMetrics(
            total_endpoints_tested=total_endpoints,
            successful_endpoints=successful_endpoints,
            failed_endpoints=failed_endpoints,
            average_response_time=avg_response_time,
            max_response_time=max_response_time,
            min_response_time=min_response_time,
            total_requests=total_requests,
            successful_requests=successful_requests,
            failed_requests=failed_requests,
            api_coverage_percent=api_coverage_percent,
            integration_quality=integration_quality
        )
    
    def generate_api_integration_report(self) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ–± –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ API"""
        print("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ–± –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ API SFM...")
        
        metrics = self.calculate_api_integration_metrics()
        
        report = {
            "report_date": datetime.now().isoformat(),
            "api_integration_metrics": {
                "total_endpoints_tested": metrics.total_endpoints_tested,
                "successful_endpoints": metrics.successful_endpoints,
                "failed_endpoints": metrics.failed_endpoints,
                "average_response_time": metrics.average_response_time,
                "max_response_time": metrics.max_response_time,
                "min_response_time": metrics.min_response_time,
                "total_requests": metrics.total_requests,
                "successful_requests": metrics.successful_requests,
                "failed_requests": metrics.failed_requests,
                "api_coverage_percent": metrics.api_coverage_percent,
                "integration_quality": metrics.integration_quality
            },
            "discovered_endpoints": [
                {
                    "endpoint_id": ep.endpoint_id,
                    "path": ep.path,
                    "method": ep.method,
                    "description": ep.description,
                    "authentication_required": ep.authentication_required,
                    "rate_limit": ep.rate_limit
                }
                for ep in self.api_endpoints
            ],
            "test_results": [
                {
                    "test_id": r.test_id,
                    "test_type": r.test_type.value,
                    "endpoint": r.endpoint,
                    "timestamp": r.timestamp.isoformat(),
                    "status": r.status.value,
                    "response_code": r.response_code,
                    "response_time": r.response_time,
                    "response_size": r.response_size,
                    "success": r.success,
                    "error_message": r.error_message
                }
                for r in self.api_test_results
            ],
            "summary": {
                "api_availability": "high" if metrics.api_coverage_percent >= 80 else "medium" if metrics.api_coverage_percent >= 60 else "low",
                "performance_grade": "A+" if metrics.average_response_time < 1.0 else
                                   "A" if metrics.average_response_time < 2.0 else
                                   "B" if metrics.average_response_time < 5.0 else "C",
                "integration_recommendations": self._generate_api_recommendations(metrics)
            }
        }
        
        return report
    
    def _generate_api_recommendations(self, metrics: APIIntegrationMetrics) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ API"""
        recommendations = []
        
        if metrics.api_coverage_percent < 80:
            recommendations.append("–£–≤–µ–ª–∏—á–∏—Ç—å –ø–æ–∫—Ä—ã—Ç–∏–µ API - –Ω–µ –≤—Å–µ endpoints –¥–æ—Å—Ç—É–ø–Ω—ã")
        
        if metrics.average_response_time > 2.0:
            recommendations.append("–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ API")
        
        if metrics.successful_requests < metrics.total_requests * 0.9:
            recommendations.append("–£–ª—É—á—à–∏—Ç—å –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å API endpoints")
        
        if metrics.failed_endpoints > 0:
            recommendations.append(f"–ò—Å–ø—Ä–∞–≤–∏—Ç—å {metrics.failed_endpoints} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö endpoints")
        
        if not recommendations:
            recommendations.append("API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ")
        
        return recommendations


class TestSFMAPIIntegration:
    """–¢–µ—Å—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ API SFM"""
    
    @pytest.fixture(autouse=True)
    def setup(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
        self.tester = SFMAPIIntegrationTester()
    
    @pytest.mark.asyncio
    async def test_api_endpoint_discovery(self):
        """–¢–µ—Å—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è endpoints API"""
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è endpoints API...")
        
        endpoints = await self.tester.discover_api_endpoints()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        assert len(endpoints) > 0, "–ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ endpoint"
        assert all(isinstance(ep, APIEndpoint) for ep in endpoints), "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ endpoint –æ–±—ä–µ–∫—Ç—ã"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ endpoints
        endpoint_paths = [ep.path for ep in endpoints]
        assert "/health" in endpoint_paths or "/health" in self.tester.discovered_endpoints, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç health endpoint"
        
        print(f"‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ endpoints: {len(endpoints)} endpoints –Ω–∞–π–¥–µ–Ω–æ")
    
    @pytest.mark.asyncio
    async def test_api_response_formats(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤ API"""
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤ API...")
        
        format_results = await self.tester.test_api_response_formats()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        assert len(format_results["endpoints_tested"]) > 0, "–ù–µ—Ç –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö endpoints"
        assert format_results["overall_compliance"] != "unknown", "–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞–º"
        
        compliance = format_results["format_compliance"]
        assert compliance["total_endpoints"] > 0, "–ù–µ—Ç endpoints –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
        assert 0 <= compliance["json_percentage"] <= 100, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç JSON endpoints"
        
        print(f"‚úÖ –§–æ—Ä–º–∞—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤: {format_results['overall_compliance']}")
        print(f"  JSON endpoints: {compliance['json_percentage']:.1f}%")
    
    @pytest.mark.asyncio
    async def test_api_error_handling(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ API"""
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ API...")
        
        error_results = await self.tester.test_api_error_handling()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        assert len(error_results["error_scenarios_tested"]) > 0, "–ù–µ—Ç –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –æ—à–∏–±–æ–∫"
        assert error_results["error_handling_quality"] != "unknown", "–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"
        
        error_formats = error_results["error_response_formats"]
        assert error_formats["total_scenarios"] > 0, "–ù–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –æ—à–∏–±–æ–∫"
        assert 0 <= error_formats["success_rate"] <= 100, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"
        
        print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫: {error_results['error_handling_quality']}")
        print(f"  –£—Å–ø–µ—à–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: {error_formats['success_rate']:.1f}%")
    
    @pytest.mark.asyncio
    async def test_api_performance(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ API"""
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ API...")
        
        performance_results = await self.tester.test_api_performance()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        assert len(performance_results["endpoint_performance"]) > 0, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ endpoints"
        assert performance_results["overall_performance"] != "unknown", "–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"
        
        load_results = performance_results["load_test_results"]
        concurrent_results = performance_results["concurrent_test_results"]
        
        assert load_results["total_requests"] > 0, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"
        assert concurrent_results["total_requests"] > 0, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"
        
        print(f"‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å API: {performance_results['overall_performance']}")
        print(f"  –ù–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —Ç–µ—Å—Ç: {load_results['success_rate']:.1f}% —É—Å–ø–µ—à–Ω–æ")
        print(f"  –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–π —Ç–µ—Å—Ç: {concurrent_results['success_rate']:.1f}% —É—Å–ø–µ—à–Ω–æ")
    
    @pytest.mark.asyncio
    async def test_comprehensive_api_integration(self):
        """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ API"""
        print("\nüß™ –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ API...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã API
        endpoints = await self.tester.discover_api_endpoints()
        format_results = await self.tester.test_api_response_formats()
        error_results = await self.tester.test_api_error_handling()
        performance_results = await self.tester.test_api_performance()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        metrics = self.tester.calculate_api_integration_metrics()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        assert metrics.total_endpoints_tested > 0, "–ù–µ—Ç –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö endpoints"
        assert 0 <= metrics.api_coverage_percent <= 100, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–∫—Ä—ã—Ç–∏—è API"
        assert metrics.integration_quality != "unknown", "–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"
        
        print(f"‚úÖ –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è API:")
        print(f"  Endpoints: {metrics.successful_endpoints}/{metrics.total_endpoints_tested}")
        print(f"  –ü–æ–∫—Ä—ã—Ç–∏–µ API: {metrics.api_coverage_percent:.1f}%")
        print(f"  –ö–∞—á–µ—Å—Ç–≤–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {metrics.integration_quality}")
        print(f"  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: {metrics.average_response_time:.3f}s")
    
    def test_generate_api_integration_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ–± –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ API"""
        print("\nüìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ–± –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ API SFM...")
        
        report = self.tester.generate_api_integration_report()
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        report_file = f"sfm_api_integration_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(report, f, indent=2, ensure_ascii=False, default=str)
        
        print(f"‚úÖ –û—Ç—á–µ—Ç –æ–± –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ API —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
        
        # –í—ã–≤–æ–¥ –∫—Ä–∞—Ç–∫–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        metrics = report['api_integration_metrics']
        summary = report['summary']
        
        print(f"\nüìà –ö–†–ê–¢–ö–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò–ù–¢–ï–ì–†–ê–¶–ò–ò API:")
        print(f"  Endpoints –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: {metrics['total_endpoints_tested']}")
        print(f"  Endpoints —É—Å–ø–µ—à–Ω—ã—Ö: {metrics['successful_endpoints']}")
        print(f"  –ü–æ–∫—Ä—ã—Ç–∏–µ API: {metrics['api_coverage_percent']:.1f}%")
        print(f"  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: {metrics['average_response_time']:.3f}s")
        print(f"  –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {metrics['total_requests']}")
        print(f"  –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {metrics['successful_requests']}")
        print(f"  –ö–∞—á–µ—Å—Ç–≤–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {metrics['integration_quality']}")
        print(f"  –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API: {summary['api_availability']}")
        print(f"  –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {summary['performance_grade']}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç—á–µ—Ç–∞
        assert report['api_integration_metrics']['total_endpoints_tested'] > 0, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± endpoints"
        assert 0 <= metrics['api_coverage_percent'] <= 100, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–∫—Ä—ã—Ç–∏—è API"


if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ API ALADDIN Dashboard —Å SFM...")
    print("üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ endpoints –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API...")
    print("üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫...")
    print("‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –Ω–∞–≥—Ä—É–∑–æ—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤...")
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —á–µ—Ä–µ–∑ pytest
    pytest.main([__file__, "-v", "--tb=short"])