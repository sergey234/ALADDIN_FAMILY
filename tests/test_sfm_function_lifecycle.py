#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
SFM Function Lifecycle Tests –¥–ª—è ALADDIN Dashboard
–¢–µ—Å—Ç—ã –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ñ—É–Ω–∫—Ü–∏–π Safe Function Manager

–ê–≤—Ç–æ—Ä: ALADDIN Security Team
–í–µ—Ä—Å–∏—è: 1.0.0
–î–∞—Ç–∞: 2025-01-27
–ö–∞—á–µ—Å—Ç–≤–æ: A+
"""

import asyncio
import time
import pytest
import httpx
import json
import os
import sys
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional, Tuple
from dataclasses import dataclass, field
from enum import Enum
import threading
from concurrent.futures import ThreadPoolExecutor

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

try:
    from security.safe_function_manager import SafeFunctionManager
    from core.base import ComponentStatus, SecurityLevel
    from core.logging_module import LoggingManager
    ALADDIN_AVAILABLE = True
except ImportError:
    ALADDIN_AVAILABLE = False


class FunctionState(Enum):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏"""
    UNKNOWN = "unknown"
    INITIALIZING = "initializing"
    ACTIVE = "active"
    SLEEPING = "sleeping"
    DISABLED = "disabled"
    ERROR = "error"
    RESTARTING = "restarting"
    UPDATING = "updating"


class FunctionEvent(Enum):
    """–°–æ–±—ã—Ç–∏—è —Ñ—É–Ω–∫—Ü–∏–∏"""
    CREATED = "created"
    ENABLED = "enabled"
    DISABLED = "disabled"
    RESTARTED = "restarted"
    CONFIGURED = "configured"
    HEALTH_CHECK = "health_check"
    ERROR_OCCURRED = "error_occurred"
    RECOVERED = "recovered"
    DESTROYED = "destroyed"


@dataclass
class FunctionLifecycleEvent:
    """–°–æ–±—ã—Ç–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ñ—É–Ω–∫—Ü–∏–∏"""
    event_id: str
    function_id: str
    event_type: FunctionEvent
    timestamp: datetime
    previous_state: FunctionState
    current_state: FunctionState
    event_data: Dict[str, Any]
    duration: float = 0.0
    success: bool = True
    error_message: Optional[str] = None


@dataclass
class FunctionLifecycleMetrics:
    """–ú–µ—Ç—Ä–∏–∫–∏ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ñ—É–Ω–∫—Ü–∏–∏"""
    function_id: str
    total_events: int
    state_transitions: int
    average_transition_time: float
    error_count: int
    recovery_count: int
    uptime_percent: float
    last_activity: datetime
    lifecycle_duration: float
    health_score: float


@dataclass
class FunctionConfiguration:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏"""
    function_id: str
    name: str
    description: str
    security_level: str
    is_critical: bool
    auto_enable: bool
    dependencies: List[str]
    configuration: Dict[str, Any]
    version: str
    created_at: datetime
    updated_at: datetime


class FunctionLifecycleTester:
    """–¢–µ—Å—Ç–µ—Ä –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ñ—É–Ω–∫—Ü–∏–π"""
    
    def __init__(self, sfm_url: str = "http://localhost:8011"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–µ—Ä–∞ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
        
        Args:
            sfm_url: URL SFM
        """
        self.sfm_url = sfm_url
        self.logger = LoggingManager(name="FunctionLifecycleTester") if ALADDIN_AVAILABLE else None
        self.lifecycle_events: List[FunctionLifecycleEvent] = []
        self.function_configurations: Dict[str, FunctionConfiguration] = {}
        self.function_metrics: Dict[str, FunctionLifecycleMetrics] = {}
        
    async def get_function_state(self, function_id: str) -> Tuple[FunctionState, Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
        
        Args:
            function_id: ID —Ñ—É–Ω–∫—Ü–∏–∏
            
        Returns:
            –ö–æ—Ä—Ç–µ–∂ (—Å–æ—Å—Ç–æ—è–Ω–∏–µ, –¥–∞–Ω–Ω—ã–µ)
        """
        try:
            async with httpx.AsyncClient(timeout=10.0) as client:
                headers = {"Authorization": "Bearer demo_token"}
                response = await client.get(f"{self.sfm_url}/functions/{function_id}/status", headers=headers)
                
                if response.status_code == 200:
                    data = response.json()
                    status = data.get("status", "unknown")
                    
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –≤ enum
                    state_mapping = {
                        "active": FunctionState.ACTIVE,
                        "sleeping": FunctionState.SLEEPING,
                        "disabled": FunctionState.DISABLED,
                        "error": FunctionState.ERROR,
                        "initializing": FunctionState.INITIALIZING,
                        "restarting": FunctionState.RESTARTING,
                        "updating": FunctionState.UPDATING
                    }
                    
                    function_state = state_mapping.get(status, FunctionState.UNKNOWN)
                    return function_state, data
                else:
                    return FunctionState.ERROR, {"error": f"HTTP {response.status_code}"}
                    
        except Exception as e:
            return FunctionState.ERROR, {"error": str(e)}
    
    def record_lifecycle_event(
        self,
        function_id: str,
        event_type: FunctionEvent,
        previous_state: FunctionState,
        current_state: FunctionState,
        event_data: Dict[str, Any],
        duration: float = 0.0,
        success: bool = True,
        error_message: Optional[str] = None
    ) -> FunctionLifecycleEvent:
        """
        –ó–∞–ø–∏—Å—å —Å–æ–±—ã—Ç–∏—è –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
        
        Args:
            function_id: ID —Ñ—É–Ω–∫—Ü–∏–∏
            event_type: –¢–∏–ø —Å–æ–±—ã—Ç–∏—è
            previous_state: –ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            current_state: –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            event_data: –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
            duration: –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
            success: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
            error_message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            
        Returns:
            –°–æ–±—ã—Ç–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
        """
        event_id = f"{function_id}_{event_type.value}_{int(time.time())}"
        
        event = FunctionLifecycleEvent(
            event_id=event_id,
            function_id=function_id,
            event_type=event_type,
            timestamp=datetime.now(),
            previous_state=previous_state,
            current_state=current_state,
            event_data=event_data,
            duration=duration,
            success=success,
            error_message=error_message
        )
        
        self.lifecycle_events.append(event)
        return event
    
    async def test_function_creation_lifecycle(self, function_config: FunctionConfiguration) -> Dict[str, Any]:
        """
        –¢–µ—Å—Ç –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
        
        Args:
            function_config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è
        """
        print(f"üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏: {function_config.function_id}")
        
        creation_results = {
            "function_id": function_config.function_id,
            "events": [],
            "success": False,
            "total_duration": 0.0
        }
        
        start_time = time.time()
        
        # 1. –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (—Ñ—É–Ω–∫—Ü–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        print("  1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è...")
        initial_state, initial_data = await self.get_function_state(function_config.function_id)
        
        # 2. –°–æ–∑–¥–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–∏–º–∏—Ç–∏—Ä—É–µ–º)
        print("  2. –°–æ–∑–¥–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏...")
        creation_start = time.time()
        
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã POST –∑–∞–ø—Ä–æ—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
        # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ
        await asyncio.sleep(0.5)  # –ò–º–∏—Ç–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è
        
        creation_event = self.record_lifecycle_event(
            function_id=function_config.function_id,
            event_type=FunctionEvent.CREATED,
            previous_state=initial_state,
            current_state=FunctionState.INITIALIZING,
            event_data={"config": function_config.__dict__},
            duration=time.time() - creation_start
        )
        creation_results["events"].append(creation_event)
        
        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
        print("  3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è...")
        await asyncio.sleep(1)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        post_creation_state, post_creation_data = await self.get_function_state(function_config.function_id)
        
        # 4. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
        print("  4. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏...")
        config_start = time.time()
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        await asyncio.sleep(0.3)
        
        config_event = self.record_lifecycle_event(
            function_id=function_config.function_id,
            event_type=FunctionEvent.CONFIGURED,
            previous_state=FunctionState.INITIALIZING,
            current_state=FunctionState.INITIALIZING,
            event_data={"configuration": function_config.configuration},
            duration=time.time() - config_start
        )
        creation_results["events"].append(config_event)
        
        # 5. –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ (–µ—Å–ª–∏ auto_enable)
        if function_config.auto_enable:
            print("  5. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏...")
            enable_start = time.time()
            
            try:
                async with httpx.AsyncClient(timeout=10.0) as client:
                    headers = {"Authorization": "Bearer demo_token"}
                    response = await client.post(
                        f"{self.sfm_url}/functions/{function_config.function_id}/enable",
                        headers=headers
                    )
                    
                    enable_success = 200 <= response.status_code < 300
                    
                    await asyncio.sleep(1)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é
                    post_enable_state, post_enable_data = await self.get_function_state(function_config.function_id)
                    
                    enable_event = self.record_lifecycle_event(
                        function_id=function_config.function_id,
                        event_type=FunctionEvent.ENABLED,
                        previous_state=FunctionState.INITIALIZING,
                        current_state=post_enable_state,
                        event_data={"response": response.json() if enable_success else None},
                        duration=time.time() - enable_start,
                        success=enable_success,
                        error_message=None if enable_success else f"HTTP {response.status_code}"
                    )
                    creation_results["events"].append(enable_event)
                    
            except Exception as e:
                enable_event = self.record_lifecycle_event(
                    function_id=function_config.function_id,
                    event_type=FunctionEvent.ENABLED,
                    previous_state=FunctionState.INITIALIZING,
                    current_state=FunctionState.ERROR,
                    event_data={},
                    duration=time.time() - enable_start,
                    success=False,
                    error_message=str(e)
                )
                creation_results["events"].append(enable_event)
        
        creation_results["total_duration"] = time.time() - start_time
        creation_results["success"] = all(event.success for event in creation_results["events"])
        
        print(f"  –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if creation_results['success'] else '‚ùå –ù–µ—É–¥–∞—á–Ω–æ'}")
        print(f"  –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {creation_results['total_duration']:.2f}s")
        
        return creation_results
    
    async def test_function_operation_lifecycle(self, function_id: str) -> Dict[str, Any]:
        """
        –¢–µ—Å—Ç –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –æ–ø–µ—Ä–∞—Ü–∏–π —Ñ—É–Ω–∫—Ü–∏–∏
        
        Args:
            function_id: ID —Ñ—É–Ω–∫—Ü–∏–∏
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π
        """
        print(f"üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Ñ—É–Ω–∫—Ü–∏–∏: {function_id}")
        
        operation_results = {
            "function_id": function_id,
            "operations": [],
            "success": False,
            "total_duration": 0.0
        }
        
        start_time = time.time()
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        print("  1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è...")
        current_state, current_data = await self.get_function_state(function_id)
        
        # 2. –í–∫–ª—é—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
        print("  2. –í–∫–ª—é—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏...")
        enable_start = time.time()
        
        try:
            async with httpx.AsyncClient(timeout=10.0) as client:
                headers = {"Authorization": "Bearer demo_token"}
                response = await client.post(
                    f"{self.sfm_url}/functions/{function_id}/enable",
                    headers=headers
                )
                
                enable_success = 200 <= response.status_code < 300
                await asyncio.sleep(1)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é
                
                post_enable_state, post_enable_data = await self.get_function_state(function_id)
                
                enable_operation = {
                    "operation": "enable",
                    "success": enable_success,
                    "duration": time.time() - enable_start,
                    "previous_state": current_state.value,
                    "current_state": post_enable_state.value,
                    "response_data": response.json() if enable_success else None
                }
                operation_results["operations"].append(enable_operation)
                
        except Exception as e:
            enable_operation = {
                "operation": "enable",
                "success": False,
                "duration": time.time() - enable_start,
                "error": str(e)
            }
            operation_results["operations"].append(enable_operation)
        
        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Ñ—É–Ω–∫—Ü–∏–∏
        print("  3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Ñ—É–Ω–∫—Ü–∏–∏...")
        health_start = time.time()
        
        try:
            async with httpx.AsyncClient(timeout=10.0) as client:
                headers = {"Authorization": "Bearer demo_token"}
                response = await client.get(
                    f"{self.sfm_url}/functions/{function_id}/health",
                    headers=headers
                )
                
                health_success = 200 <= response.status_code < 300
                
                health_operation = {
                    "operation": "health_check",
                    "success": health_success,
                    "duration": time.time() - health_start,
                    "response_data": response.json() if health_success else None
                }
                operation_results["operations"].append(health_operation)
                
        except Exception as e:
            health_operation = {
                "operation": "health_check",
                "success": False,
                "duration": time.time() - health_start,
                "error": str(e)
            }
            operation_results["operations"].append(health_operation)
        
        # 4. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏
        print("  4. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏...")
        restart_start = time.time()
        
        try:
            async with httpx.AsyncClient(timeout=15.0) as client:
                headers = {"Authorization": "Bearer demo_token"}
                response = await client.post(
                    f"{self.sfm_url}/functions/{function_id}/restart",
                    headers=headers
                )
                
                restart_success = 200 <= response.status_code < 300
                await asyncio.sleep(2)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
                
                post_restart_state, post_restart_data = await self.get_function_state(function_id)
                
                restart_operation = {
                    "operation": "restart",
                    "success": restart_success,
                    "duration": time.time() - restart_start,
                    "previous_state": "unknown",
                    "current_state": post_restart_state.value,
                    "response_data": response.json() if restart_success else None
                }
                operation_results["operations"].append(restart_operation)
                
        except Exception as e:
            restart_operation = {
                "operation": "restart",
                "success": False,
                "duration": time.time() - restart_start,
                "error": str(e)
            }
            operation_results["operations"].append(restart_operation)
        
        # 5. –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
        print("  5. –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏...")
        disable_start = time.time()
        
        try:
            async with httpx.AsyncClient(timeout=10.0) as client:
                headers = {"Authorization": "Bearer demo_token"}
                response = await client.post(
                    f"{self.sfm_url}/functions/{function_id}/disable",
                    headers=headers
                )
                
                disable_success = 200 <= response.status_code < 300
                await asyncio.sleep(1)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—é
                
                post_disable_state, post_disable_data = await self.get_function_state(function_id)
                
                disable_operation = {
                    "operation": "disable",
                    "success": disable_success,
                    "duration": time.time() - disable_start,
                    "previous_state": "unknown",
                    "current_state": post_disable_state.value,
                    "response_data": response.json() if disable_success else None
                }
                operation_results["operations"].append(disable_operation)
                
        except Exception as e:
            disable_operation = {
                "operation": "disable",
                "success": False,
                "duration": time.time() - disable_start,
                "error": str(e)
            }
            operation_results["operations"].append(disable_operation)
        
        operation_results["total_duration"] = time.time() - start_time
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        successful_operations = sum(1 for op in operation_results["operations"] if op["success"])
        total_operations = len(operation_results["operations"])
        operation_results["success"] = successful_operations >= total_operations * 0.7  # 70% —É—Å–ø–µ—Ö–∞
        
        print(f"  –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–π: {successful_operations}/{total_operations} —É—Å–ø–µ—à–Ω–æ")
        print(f"  –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {operation_results['total_duration']:.2f}s")
        
        return operation_results
    
    async def test_function_error_recovery_lifecycle(self, function_id: str) -> Dict[str, Any]:
        """
        –¢–µ—Å—Ç –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ—à–∏–±–æ–∫
        
        Args:
            function_id: ID —Ñ—É–Ω–∫—Ü–∏–∏
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        """
        print(f"üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏: {function_id}")
        
        recovery_results = {
            "function_id": function_id,
            "error_scenarios": [],
            "recovery_attempts": [],
            "success": False,
            "total_duration": 0.0
        }
        
        start_time = time.time()
        
        # 1. –ò–º–∏—Ç–∞—Ü–∏—è –æ—à–∏–±–∫–∏ (–æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞)
        print("  1. –ò–º–∏—Ç–∞—Ü–∏—è –æ—à–∏–±–∫–∏...")
        error_start = time.time()
        
        try:
            async with httpx.AsyncClient(timeout=5.0) as client:
                headers = {"Authorization": "Bearer demo_token"}
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å
                response = await client.post(
                    f"{self.sfm_url}/functions/{function_id}/invalid_operation",
                    headers=headers,
                    json={"invalid": "data"}
                )
                
                error_scenario = {
                    "scenario": "invalid_operation",
                    "error_occurred": True,
                    "error_code": response.status_code,
                    "duration": time.time() - error_start
                }
                recovery_results["error_scenarios"].append(error_scenario)
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –æ—à–∏–±–∫–∏
                self.record_lifecycle_event(
                    function_id=function_id,
                    event_type=FunctionEvent.ERROR_OCCURRED,
                    previous_state=FunctionState.ACTIVE,
                    current_state=FunctionState.ERROR,
                    event_data={"error_code": response.status_code, "error_type": "invalid_operation"},
                    success=False,
                    error_message=f"Invalid operation: HTTP {response.status_code}"
                )
                
        except Exception as e:
            error_scenario = {
                "scenario": "invalid_operation",
                "error_occurred": True,
                "error_code": 0,
                "error_message": str(e),
                "duration": time.time() - error_start
            }
            recovery_results["error_scenarios"].append(error_scenario)
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏
        print("  2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏...")
        await asyncio.sleep(1)
        error_state, error_data = await self.get_function_state(function_id)
        
        # 3. –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è (–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫)
        print("  3. –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è...")
        recovery_start = time.time()
        
        try:
            async with httpx.AsyncClient(timeout=15.0) as client:
                headers = {"Authorization": "Bearer demo_token"}
                response = await client.post(
                    f"{self.sfm_url}/functions/{function_id}/restart",
                    headers=headers
                )
                
                recovery_success = 200 <= response.status_code < 300
                await asyncio.sleep(2)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
                
                post_recovery_state, post_recovery_data = await self.get_function_state(function_id)
                
                recovery_attempt = {
                    "method": "restart",
                    "success": recovery_success,
                    "duration": time.time() - recovery_start,
                    "previous_state": error_state.value,
                    "current_state": post_recovery_state.value,
                    "response_data": response.json() if recovery_success else None
                }
                recovery_results["recovery_attempts"].append(recovery_attempt)
                
                if recovery_success and post_recovery_state != FunctionState.ERROR:
                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
                    self.record_lifecycle_event(
                        function_id=function_id,
                        event_type=FunctionEvent.RECOVERED,
                        previous_state=error_state,
                        current_state=post_recovery_state,
                        event_data={"recovery_method": "restart"},
                        success=True
                    )
                
        except Exception as e:
            recovery_attempt = {
                "method": "restart",
                "success": False,
                "duration": time.time() - recovery_start,
                "error": str(e)
            }
            recovery_results["recovery_attempts"].append(recovery_attempt)
        
        recovery_results["total_duration"] = time.time() - start_time
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        successful_recoveries = sum(1 for attempt in recovery_results["recovery_attempts"] if attempt["success"])
        total_recoveries = len(recovery_results["recovery_attempts"])
        recovery_results["success"] = successful_recoveries > 0 and total_recoveries > 0
        
        print(f"  –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ: {successful_recoveries}/{total_recoveries} —É—Å–ø–µ—à–Ω–æ")
        print(f"  –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {recovery_results['total_duration']:.2f}s")
        
        return recovery_results
    
    def calculate_function_metrics(self, function_id: str) -> FunctionLifecycleMetrics:
        """
        –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ñ—É–Ω–∫—Ü–∏–∏
        
        Args:
            function_id: ID —Ñ—É–Ω–∫—Ü–∏–∏
            
        Returns:
            –ú–µ—Ç—Ä–∏–∫–∏ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
        """
        function_events = [event for event in self.lifecycle_events if event.function_id == function_id]
        
        if not function_events:
            return FunctionLifecycleMetrics(
                function_id=function_id,
                total_events=0,
                state_transitions=0,
                average_transition_time=0.0,
                error_count=0,
                recovery_count=0,
                uptime_percent=0.0,
                last_activity=datetime.now(),
                lifecycle_duration=0.0,
                health_score=0.0
            )
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
        total_events = len(function_events)
        state_transitions = len([e for e in function_events if e.previous_state != e.current_state])
        error_count = len([e for e in function_events if e.event_type == FunctionEvent.ERROR_OCCURRED])
        recovery_count = len([e for e in function_events if e.event_type == FunctionEvent.RECOVERED])
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
        transition_times = [e.duration for e in function_events if e.duration > 0]
        average_transition_time = sum(transition_times) / len(transition_times) if transition_times else 0.0
        
        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏
        if function_events:
            lifecycle_duration = (function_events[-1].timestamp - function_events[0].timestamp).total_seconds()
            last_activity = function_events[-1].timestamp
        else:
            lifecycle_duration = 0.0
            last_activity = datetime.now()
        
        # –í—ã—á–∏—Å–ª—è–µ–º uptime (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
        active_events = len([e for e in function_events if e.current_state == FunctionState.ACTIVE])
        uptime_percent = (active_events / total_events) * 100 if total_events > 0 else 0.0
        
        # –í—ã—á–∏—Å–ª—è–µ–º health score
        successful_events = len([e for e in function_events if e.success])
        health_score = (successful_events / total_events) * 100 if total_events > 0 else 0.0
        
        metrics = FunctionLifecycleMetrics(
            function_id=function_id,
            total_events=total_events,
            state_transitions=state_transitions,
            average_transition_time=average_transition_time,
            error_count=error_count,
            recovery_count=recovery_count,
            uptime_percent=uptime_percent,
            last_activity=last_activity,
            lifecycle_duration=lifecycle_duration,
            health_score=health_score
        )
        
        self.function_metrics[function_id] = metrics
        return metrics
    
    def generate_lifecycle_report(self) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –∂–∏–∑–Ω–µ–Ω–Ω–æ–º —Ü–∏–∫–ª–µ"""
        print("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –∂–∏–∑–Ω–µ–Ω–Ω–æ–º —Ü–∏–∫–ª–µ —Ñ—É–Ω–∫—Ü–∏–π...")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏
        function_ids = set(event.function_id for event in self.lifecycle_events)
        
        report = {
            "report_date": datetime.now().isoformat(),
            "total_functions_tested": len(function_ids),
            "total_lifecycle_events": len(self.lifecycle_events),
            "functions": {}
        }
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Ñ—É–Ω–∫—Ü–∏—é
        for function_id in function_ids:
            metrics = self.calculate_function_metrics(function_id)
            
            function_events = [event for event in self.lifecycle_events if event.function_id == function_id]
            
            report["functions"][function_id] = {
                "metrics": {
                    "total_events": metrics.total_events,
                    "state_transitions": metrics.state_transitions,
                    "average_transition_time": metrics.average_transition_time,
                    "error_count": metrics.error_count,
                    "recovery_count": metrics.recovery_count,
                    "uptime_percent": metrics.uptime_percent,
                    "health_score": metrics.health_score,
                    "lifecycle_duration": metrics.lifecycle_duration
                },
                "events": [
                    {
                        "event_id": event.event_id,
                        "event_type": event.event_type.value,
                        "timestamp": event.timestamp.isoformat(),
                        "previous_state": event.previous_state.value,
                        "current_state": event.current_state.value,
                        "duration": event.duration,
                        "success": event.success,
                        "error_message": event.error_message
                    }
                    for event in function_events
                ]
            }
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        all_events = self.lifecycle_events
        total_events = len(all_events)
        successful_events = len([e for e in all_events if e.success])
        error_events = len([e for e in all_events if e.event_type == FunctionEvent.ERROR_OCCURRED])
        recovery_events = len([e for e in all_events if e.event_type == FunctionEvent.RECOVERED])
        
        report["summary"] = {
            "overall_success_rate": (successful_events / total_events) * 100 if total_events > 0 else 0,
            "total_errors": error_events,
            "total_recoveries": recovery_events,
            "recovery_rate": (recovery_events / error_events) * 100 if error_events > 0 else 0,
            "average_health_score": sum(metrics.health_score for metrics in self.function_metrics.values()) / len(self.function_metrics) if self.function_metrics else 0,
            "lifecycle_quality": "excellent" if (successful_events / total_events) >= 0.9 else
                               "good" if (successful_events / total_events) >= 0.8 else
                               "fair" if (successful_events / total_events) >= 0.7 else "poor",
            "recommendations": self._generate_lifecycle_recommendations()
        }
        
        return report
    
    def _generate_lifecycle_recommendations(self) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –∂–∏–∑–Ω–µ–Ω–Ω–æ–º—É —Ü–∏–∫–ª—É"""
        recommendations = []
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏
        if not self.function_metrics:
            recommendations.append("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∂–∏–∑–Ω–µ–Ω–Ω–æ–º —Ü–∏–∫–ª–µ —Ñ—É–Ω–∫—Ü–∏–π")
            return recommendations
        
        avg_health_score = sum(metrics.health_score for metrics in self.function_metrics.values()) / len(self.function_metrics)
        
        if avg_health_score < 80:
            recommendations.append("–£–ª—É—á—à–∏—Ç—å –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–π - –Ω–∏–∑–∫–∏–π health score")
        
        high_error_functions = [fid for fid, metrics in self.function_metrics.items() if metrics.error_count > 5]
        if high_error_functions:
            recommendations.append(f"–§—É–Ω–∫—Ü–∏–∏ —Å –≤—ã—Å–æ–∫–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –æ—à–∏–±–æ–∫: {', '.join(high_error_functions)}")
        
        low_recovery_functions = [fid for fid, metrics in self.function_metrics.items() 
                                if metrics.error_count > 0 and metrics.recovery_count == 0]
        if low_recovery_functions:
            recommendations.append(f"–§—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ—à–∏–±–æ–∫: {', '.join(low_recovery_functions)}")
        
        slow_functions = [fid for fid, metrics in self.function_metrics.items() 
                         if metrics.average_transition_time > 5.0]
        if slow_functions:
            recommendations.append(f"–ú–µ–¥–ª–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–ø–µ—Ä–µ—Ö–æ–¥—ã > 5s): {', '.join(slow_functions)}")
        
        if not recommendations:
            recommendations.append("–ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª —Ñ—É–Ω–∫—Ü–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ")
        
        return recommendations


class TestFunctionLifecycle:
    """–¢–µ—Å—Ç—ã –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ñ—É–Ω–∫—Ü–∏–π"""
    
    @pytest.fixture(autouse=True)
    def setup(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
        self.tester = FunctionLifecycleTester()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ñ—É–Ω–∫—Ü–∏–∏
        self.test_function_config = FunctionConfiguration(
            function_id="test_lifecycle_function",
            name="Test Lifecycle Function",
            description="–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞",
            security_level="medium",
            is_critical=False,
            auto_enable=True,
            dependencies=[],
            configuration={"test": True, "timeout": 30},
            version="1.0.0",
            created_at=datetime.now(),
            updated_at=datetime.now()
        )
    
    @pytest.mark.asyncio
    async def test_function_creation_lifecycle(self):
        """–¢–µ—Å—Ç –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏"""
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏...")
        
        creation_results = await self.tester.test_function_creation_lifecycle(self.test_function_config)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        assert creation_results["function_id"] == self.test_function_config.function_id
        assert len(creation_results["events"]) > 0, "–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π —Å–æ–∑–¥–∞–Ω–∏—è"
        assert creation_results["total_duration"] < 30, f"–°–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ: {creation_results['total_duration']:.2f}s"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Å–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è
        creation_events = [e for e in creation_results["events"] if e.event_type == FunctionEvent.CREATED]
        assert len(creation_events) > 0, "–ù–µ—Ç —Å–æ–±—ã—Ç–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏"
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏: {len(creation_results['events'])} —Å–æ–±—ã—Ç–∏–π –∑–∞ {creation_results['total_duration']:.2f}s")
    
    @pytest.mark.asyncio
    async def test_function_operation_lifecycle(self):
        """–¢–µ—Å—Ç –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –æ–ø–µ—Ä–∞—Ü–∏–π —Ñ—É–Ω–∫—Ü–∏–∏"""
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Ñ—É–Ω–∫—Ü–∏–∏...")
        
        operation_results = await self.tester.test_function_operation_lifecycle("test_function")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        assert len(operation_results["operations"]) > 0, "–ù–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π"
        assert operation_results["total_duration"] < 60, f"–°–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {operation_results['total_duration']:.2f}s"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        operation_types = [op["operation"] for op in operation_results["operations"]]
        expected_operations = ["enable", "health_check", "restart", "disable"]
        
        for expected_op in expected_operations:
            assert expected_op in operation_types, f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—è: {expected_op}"
        
        print(f"‚úÖ –û–ø–µ—Ä–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏: {len(operation_results['operations'])} –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞ {operation_results['total_duration']:.2f}s")
    
    @pytest.mark.asyncio
    async def test_function_error_recovery_lifecycle(self):
        """–¢–µ—Å—Ç –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ—à–∏–±–æ–∫"""
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏...")
        
        recovery_results = await self.tester.test_function_error_recovery_lifecycle("test_function")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        assert len(recovery_results["error_scenarios"]) > 0, "–ù–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –æ—à–∏–±–æ–∫"
        assert len(recovery_results["recovery_attempts"]) > 0, "–ù–µ—Ç –ø–æ–ø—ã—Ç–æ–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"
        assert recovery_results["total_duration"] < 30, f"–°–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ: {recovery_results['total_duration']:.2f}s"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Å–æ–±—ã—Ç–∏—è –æ—à–∏–±–∫–∏ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        error_events = [e for e in self.tester.lifecycle_events if e.event_type == FunctionEvent.ERROR_OCCURRED]
        recovery_events = [e for e in self.tester.lifecycle_events if e.event_type == FunctionEvent.RECOVERED]
        
        print(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏: {len(error_events)} –æ—à–∏–±–æ–∫, {len(recovery_events)} –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π")
    
    @pytest.mark.asyncio
    async def test_function_state_transitions(self):
        """–¢–µ—Å—Ç –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ñ—É–Ω–∫—Ü–∏–∏"""
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ñ—É–Ω–∫—Ü–∏–∏...")
        
        function_id = "test_state_function"
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏–π
        await self.tester.test_function_operation_lifecycle(function_id)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ö–æ–¥—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
        function_events = [e for e in self.tester.lifecycle_events if e.function_id == function_id]
        
        state_transitions = []
        for event in function_events:
            if event.previous_state != event.current_state:
                state_transitions.append({
                    "from": event.previous_state.value,
                    "to": event.current_state.value,
                    "event": event.event_type.value,
                    "timestamp": event.timestamp
                })
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        assert len(state_transitions) > 0, "–ù–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏–π"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –ø–µ—Ä–µ—Ö–æ–¥—ã —á–µ—Ä–µ–∑ —Ä–∞–∑–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        unique_states = set()
        for transition in state_transitions:
            unique_states.add(transition["from"])
            unique_states.add(transition["to"])
        
        assert len(unique_states) > 1, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π"
        
        print(f"‚úÖ –ü–µ—Ä–µ—Ö–æ–¥—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π: {len(state_transitions)} –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ —á–µ—Ä–µ–∑ {len(unique_states)} —Å–æ—Å—Ç–æ—è–Ω–∏–π")
    
    def test_function_lifecycle_metrics(self):
        """–¢–µ—Å—Ç –º–µ—Ç—Ä–∏–∫ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ñ—É–Ω–∫—Ü–∏–∏"""
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞...")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Ç—Ä–∏–∫
        function_id = "test_metrics_function"
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è
        self.tester.record_lifecycle_event(
            function_id=function_id,
            event_type=FunctionEvent.CREATED,
            previous_state=FunctionState.UNKNOWN,
            current_state=FunctionState.INITIALIZING,
            event_data={},
            duration=1.0
        )
        
        self.tester.record_lifecycle_event(
            function_id=function_id,
            event_type=FunctionEvent.ENABLED,
            previous_state=FunctionState.INITIALIZING,
            current_state=FunctionState.ACTIVE,
            event_data={},
            duration=2.0
        )
        
        self.tester.record_lifecycle_event(
            function_id=function_id,
            event_type=FunctionEvent.ERROR_OCCURRED,
            previous_state=FunctionState.ACTIVE,
            current_state=FunctionState.ERROR,
            event_data={},
            duration=0.5,
            success=False
        )
        
        self.tester.record_lifecycle_event(
            function_id=function_id,
            event_type=FunctionEvent.RECOVERED,
            previous_state=FunctionState.ERROR,
            current_state=FunctionState.ACTIVE,
            event_data={},
            duration=3.0
        )
        
        # –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
        metrics = self.tester.calculate_function_metrics(function_id)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        assert metrics.function_id == function_id
        assert metrics.total_events == 4
        assert metrics.state_transitions == 4  # –í—Å–µ —Å–æ–±—ã—Ç–∏—è –∏–∑–º–µ–Ω—è—é—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        assert metrics.error_count == 1
        assert metrics.recovery_count == 1
        assert metrics.average_transition_time > 0
        assert 0 <= metrics.health_score <= 100
        
        print(f"‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞: health_score={metrics.health_score:.1f}, events={metrics.total_events}")
    
    def test_generate_lifecycle_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –∂–∏–∑–Ω–µ–Ω–Ω–æ–º —Ü–∏–∫–ª–µ"""
        print("\nüìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –∂–∏–∑–Ω–µ–Ω–Ω–æ–º —Ü–∏–∫–ª–µ —Ñ—É–Ω–∫—Ü–∏–π...")
        
        report = self.tester.generate_lifecycle_report()
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        report_file = f"function_lifecycle_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(report, f, indent=2, ensure_ascii=False, default=str)
        
        print(f"‚úÖ –û—Ç—á–µ—Ç –æ –∂–∏–∑–Ω–µ–Ω–Ω–æ–º —Ü–∏–∫–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
        
        # –í—ã–≤–æ–¥ –∫—Ä–∞—Ç–∫–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        print(f"\nüìà –ö–†–ê–¢–ö–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"  –§—É–Ω–∫—Ü–∏–π –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: {report['total_functions_tested']}")
        print(f"  –°–æ–±—ã—Ç–∏–π –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞: {report['total_lifecycle_events']}")
        
        summary = report['summary']
        print(f"  –û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {summary['overall_success_rate']:.1f}%")
        print(f"  –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {summary['total_errors']}")
        print(f"  –í—Å–µ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π: {summary['total_recoveries']}")
        print(f"  –ü—Ä–æ—Ü–µ–Ω—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {summary['recovery_rate']:.1f}%")
        print(f"  –°—Ä–µ–¥–Ω–∏–π health score: {summary['average_health_score']:.1f}")
        print(f"  –ö–∞—á–µ—Å—Ç–≤–æ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞: {summary['lifecycle_quality']}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç—á–µ—Ç–∞
        assert report['total_functions_tested'] >= 0, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ—É–Ω–∫—Ü–∏–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º"
        assert report['total_lifecycle_events'] >= 0, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º"
        assert 0 <= summary['overall_success_rate'] <= 100, "–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 100"


if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ñ—É–Ω–∫—Ü–∏–π ALADDIN Dashboard...")
    print("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è, –æ–ø–µ—Ä–∞—Ü–∏–π –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π...")
    print("üìä –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏ –º–µ—Ç—Ä–∏–∫...")
    print("üõ°Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞...")
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —á–µ—Ä–µ–∑ pytest
    pytest.main([__file__, "-v", "--tb=short"])