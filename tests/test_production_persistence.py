#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
PRODUCTION –¢–ï–°–¢ –ü–ï–†–°–ò–°–¢–ï–ù–¢–ù–û–°–¢–ò
"""

import os
import sys
import tempfile

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from security.safe_function_manager import SafeFunctionManager, SecurityLevel
from security.production_persistence_manager import ProductionPersistenceManager

def test_production_persistence():
    """Production —Ç–µ—Å—Ç –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏"""
    print("üß™ PRODUCTION –¢–ï–°–¢ –ü–ï–†–°–ò–°–¢–ï–ù–¢–ù–û–°–¢–ò")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    test_dir = tempfile.mkdtemp()
    registry_file = os.path.join(test_dir, 'production_functions_registry.json')
    
    print(f"1. –¢–µ—Å—Ç–æ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {test_dir}")
    print(f"2. –§–∞–π–ª —Ä–µ–µ—Å—Ç—Ä–∞: {registry_file}")
    
    try:
        # –°–æ–∑–¥–∞–µ–º SafeFunctionManager
        print("3. –°–æ–∑–¥–∞–Ω–∏–µ SafeFunctionManager...")
        sfm = SafeFunctionManager()
        print(f"   ‚úÖ SFM —Å–æ–∑–¥–∞–Ω, —Ñ—É–Ω–∫—Ü–∏–π: {len(sfm.functions)}")
        
        # –°–æ–∑–¥–∞–µ–º ProductionPersistenceManager
        print("4. –°–æ–∑–¥–∞–Ω–∏–µ ProductionPersistenceManager...")
        manager = ProductionPersistenceManager(sfm, registry_file)
        print("   ‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ–∑–¥–∞–Ω")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
        print("5. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π...")
        init_success = manager.initialize_security_functions()
        print(f"   ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {init_success}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        print("6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ñ—É–Ω–∫—Ü–∏–π...")
        status = manager.get_functions_status()
        print(f"   üìä –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π: {status.get('total_functions', 0)}")
        print(f"   üìä –í–∫–ª—é—á–µ–Ω–Ω—ã—Ö: {status.get('enabled_functions', 0)}")
        print(f"   üìä –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö: {status.get('critical_functions', 0)}")
        print(f"   üìä –§–∞–π–ª —Ä–µ–µ—Å—Ç—Ä–∞: {status.get('registry_exists', False)}")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π SFM –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
        print("7. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ SFM –∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π...")
        sfm2 = SafeFunctionManager()
        manager2 = ProductionPersistenceManager(sfm2, registry_file)
        
        load_success = manager2.load_functions()
        print(f"   ‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π: {load_success}")
        print(f"   üìä –§—É–Ω–∫—Ü–∏–π –≤ –Ω–æ–≤–æ–º SFM: {len(sfm2.functions)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        print("8. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π...")
        success = True
        expected_functions = ["anti_fraud_master_ai", "threat_detection_agent", "security_monitoring"]
        
        for func_id in expected_functions:
            if func_id in sfm2.functions:
                function = sfm2.functions[func_id]
                print(f"   ‚úÖ {function.name} - OK")
            else:
                print(f"   ‚ùå {func_id} - –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                success = False
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
        print("9. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏...")
        new_func_success = manager2.register_function_with_persistence(
            function_id="test_production_function",
            name="TestProductionFunction",
            description="–¢–µ—Å—Ç–æ–≤–∞—è production —Ñ—É–Ω–∫—Ü–∏—è",
            function_type="test",
            security_level=SecurityLevel.MEDIUM,
            is_critical=False,
            auto_enable=False
        )
        print(f"   ‚úÖ –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞: {new_func_success}")
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        print("10. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...")
        final_status = manager2.get_functions_status()
        print(f"   üìä –ò—Ç–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π: {final_status.get('total_functions', 0)}")
        
        print("\n" + "=" * 50)
        if success and load_success and new_func_success:
            print("üéâ PRODUCTION –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù!")
            print("‚úÖ ProductionPersistenceManager —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print("‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            print("‚úÖ –§—É–Ω–∫—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è")
            print("‚úÖ –ù–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –≤ SafeFunctionManager")
            print("‚úÖ –ì–æ—Ç–æ–≤–æ –∫ production –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        else:
            print("üí• PRODUCTION –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù!")
            print("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å production –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º")
        
        return success and load_success and new_func_success
        
    except Exception as e:
        print(f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    finally:
        # –û—á–∏—Å—Ç–∫–∞
        try:
            if os.path.exists(registry_file):
                os.remove(registry_file)
            os.rmdir(test_dir)
        except:
            pass

if __name__ == "__main__":
    success = test_production_persistence()
    sys.exit(0 if success else 1)
