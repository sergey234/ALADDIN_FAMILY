#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Memory Optimization Tests –¥–ª—è ALADDIN Dashboard
–¢–µ—Å—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏ –∏ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ

–ê–≤—Ç–æ—Ä: ALADDIN Security Team
–í–µ—Ä—Å–∏—è: 1.0.0
–î–∞—Ç–∞: 2025-01-27
–ö–∞—á–µ—Å—Ç–≤–æ: A+
"""

import asyncio
import time
import gc
import tracemalloc
import psutil
import pytest
import httpx
import json
import os
import sys
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional, Tuple
from dataclasses import dataclass, field
from memory_profiler import profile
import threading
from concurrent.futures import ThreadPoolExecutor

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

try:
    from core.base import ComponentStatus, SecurityLevel
    from core.logging_module import LoggingManager
    ALADDIN_AVAILABLE = True
except ImportError:
    ALADDIN_AVAILABLE = False


@dataclass
class MemorySnapshot:
    """–°–Ω–∏–º–æ–∫ –ø–∞–º—è—Ç–∏"""
    timestamp: datetime
    rss_mb: float  # Resident Set Size –≤ MB
    vms_mb: float  # Virtual Memory Size –≤ MB
    percent: float  # –ü—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
    available_mb: float  # –î–æ—Å—Ç—É–ø–Ω–∞—è –ø–∞–º—è—Ç—å –≤ MB
    cached_mb: float  # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–∞–º—è—Ç—å –≤ MB
    buffers_mb: float  # –ë—É—Ñ–µ—Ä–Ω–∞—è –ø–∞–º—è—Ç—å –≤ MB


@dataclass
class MemoryLeakDetection:
    """–î–µ—Ç–µ–∫—Ç–æ—Ä —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏"""
    initial_snapshot: Optional[MemorySnapshot] = None
    final_snapshot: Optional[MemorySnapshot] = None
    snapshots: List[MemorySnapshot] = field(default_factory=list)
    memory_growth: float = 0.0
    leak_detected: bool = False
    growth_rate: float = 0.0


@dataclass
class MemoryOptimizationResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏"""
    test_name: str
    initial_memory: MemorySnapshot
    final_memory: MemorySnapshot
    memory_growth: float
    optimization_score: float
    recommendations: List[str]
    success: bool


class MemoryProfiler:
    """–ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤—â–∏–∫ –ø–∞–º—è—Ç–∏"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤—â–∏–∫–∞"""
        self.tracemalloc_started = False
        self.logger = LoggingManager(name="MemoryProfiler") if ALADDIN_AVAILABLE else None
        self.snapshots: List[MemorySnapshot] = []
        
    def start_tracing(self):
        """–ó–∞–ø—É—Å–∫ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ –ø–∞–º—è—Ç–∏"""
        if not self.tracemalloc_started:
            tracemalloc.start()
            self.tracemalloc_started = True
            print("üìä –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –ø–∞–º—è—Ç–∏ –∑–∞–ø—É—â–µ–Ω–∞")
    
    def stop_tracing(self) -> Optional[Tuple]:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        if self.tracemalloc_started:
            current, peak = tracemalloc.get_traced_memory()
            tracemalloc.stop()
            self.tracemalloc_started = False
            print(f"üìä –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –¢–µ–∫—É—â–∞—è: {current / 1024 / 1024:.2f} MB, –ü–∏–∫–æ–≤–∞—è: {peak / 1024 / 1024:.2f} MB")
            return current, peak
        return None
    
    def take_memory_snapshot(self) -> MemorySnapshot:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–Ω–∏–º–∫–∞ –ø–∞–º—è—Ç–∏"""
        process = psutil.Process()
        memory_info = process.memory_info()
        memory_percent = process.memory_percent()
        
        # –°–∏—Å—Ç–µ–º–Ω–∞—è –ø–∞–º—è—Ç—å
        system_memory = psutil.virtual_memory()
        
        snapshot = MemorySnapshot(
            timestamp=datetime.now(),
            rss_mb=memory_info.rss / 1024 / 1024,
            vms_mb=memory_info.vms / 1024 / 1024,
            percent=memory_percent,
            available_mb=system_memory.available / 1024 / 1024,
            cached_mb=getattr(system_memory, 'cached', 0) / 1024 / 1024,
            buffers_mb=getattr(system_memory, 'buffers', 0) / 1024 / 1024
        )
        
        self.snapshots.append(snapshot)
        return snapshot
    
    def detect_memory_leak(self, snapshots: List[MemorySnapshot]) -> MemoryLeakDetection:
        """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏"""
        if len(snapshots) < 2:
            return MemoryLeakDetection()
        
        initial = snapshots[0]
        final = snapshots[-1]
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Ä–æ—Å—Ç –ø–∞–º—è—Ç–∏
        memory_growth = final.rss_mb - initial.rss_mb
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å —Ä–æ—Å—Ç–∞
        time_diff = (final.timestamp - initial.timestamp).total_seconds()
        growth_rate = memory_growth / time_diff if time_diff > 0 else 0
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ç–µ—á–∫—É (—Ä–æ—Å—Ç > 50MB –∑–∞ —Ç–µ—Å—Ç)
        leak_detected = memory_growth > 50.0
        
        return MemoryLeakDetection(
            initial_snapshot=initial,
            final_snapshot=final,
            snapshots=snapshots,
            memory_growth=memory_growth,
            leak_detected=leak_detected,
            growth_rate=growth_rate
        )
    
    def force_garbage_collection(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞"""
        collected = gc.collect()
        print(f"üóëÔ∏è –°–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞: –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ {collected} –æ–±—ä–µ–∫—Ç–æ–≤")
        return collected


class MemoryOptimizationTester:
    """–¢–µ—Å—Ç–µ—Ä –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏"""
    
    def __init__(self, base_url: str = "http://localhost:8080"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–µ—Ä–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        
        Args:
            base_url: –ë–∞–∑–æ–≤—ã–π URL –¥–∞—à–±–æ—Ä–¥–∞
        """
        self.base_url = base_url
        self.profiler = MemoryProfiler()
        self.logger = LoggingManager(name="MemoryOptimizationTester") if ALADDIN_AVAILABLE else None
        self.optimization_results: List[MemoryOptimizationResult] = []
        
    async def test_memory_usage_baseline(self) -> MemorySnapshot:
        """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏"""
        print("üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏...")
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞
        self.profiler.force_garbage_collection()
        
        # –°–Ω–∏–º–æ–∫ –ø–∞–º—è—Ç–∏
        snapshot = self.profiler.take_memory_snapshot()
        
        print(f"üìä –ë–∞–∑–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏:")
        print(f"  RSS: {snapshot.rss_mb:.2f} MB")
        print(f"  VMS: {snapshot.vms_mb:.2f} MB")
        print(f"  –ü—Ä–æ—Ü–µ–Ω—Ç: {snapshot.percent:.2f}%")
        print(f"  –î–æ—Å—Ç—É–ø–Ω–æ: {snapshot.available_mb:.2f} MB")
        
        return snapshot
    
    async def test_memory_usage_during_requests(
        self, 
        num_requests: int = 100
    ) -> List[MemorySnapshot]:
        """
        –¢–µ—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏ –≤–æ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–æ–≤
        
        Args:
            num_requests: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–Ω–∏–º–∫–æ–≤ –ø–∞–º—è—Ç–∏
        """
        print(f"üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –≤–æ –≤—Ä–µ–º—è {num_requests} –∑–∞–ø—Ä–æ—Å–æ–≤...")
        
        snapshots = []
        
        async with httpx.AsyncClient(timeout=30.0) as client:
            headers = {"Authorization": "Bearer demo_token"}
            
            for i in range(num_requests):
                # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å
                try:
                    response = await client.get(f"{self.base_url}/api/services", headers=headers)
                    
                    # –ö–∞–∂–¥—ã–µ 10 –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–µ–ª–∞–µ–º —Å–Ω–∏–º–æ–∫ –ø–∞–º—è—Ç–∏
                    if i % 10 == 0:
                        snapshot = self.profiler.take_memory_snapshot()
                        snapshots.append(snapshot)
                        
                        print(f"  –ó–∞–ø—Ä–æ—Å {i}: RSS {snapshot.rss_mb:.2f} MB")
                
                except Exception as e:
                    print(f"  –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ {i}: {e}")
        
        return snapshots
    
    async def test_memory_leak_detection(self) -> MemoryLeakDetection:
        """–¢–µ—Å—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏"""
        print("üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É
        self.profiler.start_tracing()
        
        # –ù–∞—á–∞–ª—å–Ω—ã–π —Å–Ω–∏–º–æ–∫
        initial_snapshot = self.profiler.take_memory_snapshot()
        snapshots = [initial_snapshot]
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π
        for cycle in range(5):
            print(f"  –¶–∏–∫–ª {cycle + 1}/5...")
            
            # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã
            await self.test_memory_usage_during_requests(50)
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞
            self.profiler.force_garbage_collection()
            
            # –°–Ω–∏–º–æ–∫ –ø–∞–º—è—Ç–∏
            snapshot = self.profiler.take_memory_snapshot()
            snapshots.append(snapshot)
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
            await asyncio.sleep(1)
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É
        tracemalloc_result = self.profiler.stop_tracing()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —É—Ç–µ—á–∫–∏
        leak_detection = self.profiler.detect_memory_leak(snapshots)
        
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —É—Ç–µ—á–µ–∫:")
        print(f"  –†–æ—Å—Ç –ø–∞–º—è—Ç–∏: {leak_detection.memory_growth:.2f} MB")
        print(f"  –°–∫–æ—Ä–æ—Å—Ç—å —Ä–æ—Å—Ç–∞: {leak_detection.growth_rate:.4f} MB/s")
        print(f"  –£—Ç–µ—á–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞: {'–î–∞' if leak_detection.leak_detected else '–ù–µ—Ç'}")
        
        if tracemalloc_result:
            current, peak = tracemalloc_result
            print(f"  –ü–∏–∫–æ–≤–∞—è –ø–∞–º—è—Ç—å (tracemalloc): {peak / 1024 / 1024:.2f} MB")
        
        return leak_detection
    
    async def test_concurrent_memory_usage(self) -> MemorySnapshot:
        """–¢–µ—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏ –ø—Ä–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö"""
        print("üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –ø—Ä–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö...")
        
        initial_snapshot = self.profiler.take_memory_snapshot()
        
        async def make_requests():
            async with httpx.AsyncClient(timeout=30.0) as client:
                headers = {"Authorization": "Bearer demo_token"}
                for _ in range(20):
                    try:
                        await client.get(f"{self.base_url}/api/endpoints", headers=headers)
                    except Exception:
                        pass
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º 10 –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã—Ö –∑–∞–¥–∞—á
        tasks = [make_requests() for _ in range(10)]
        await asyncio.gather(*tasks, return_exceptions=True)
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞
        self.profiler.force_garbage_collection()
        
        final_snapshot = self.profiler.take_memory_snapshot()
        
        memory_growth = final_snapshot.rss_mb - initial_snapshot.rss_mb
        
        print(f"üìä –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã:")
        print(f"  –ù–∞—á–∞–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å: {initial_snapshot.rss_mb:.2f} MB")
        print(f"  –§–∏–Ω–∞–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å: {final_snapshot.rss_mb:.2f} MB")
        print(f"  –†–æ—Å—Ç –ø–∞–º—è—Ç–∏: {memory_growth:.2f} MB")
        
        return final_snapshot
    
    async def test_memory_optimization_techniques(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç —Ç–µ—Ö–Ω–∏–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏"""
        print("üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏...")
        
        results = {}
        
        # 1. –¢–µ—Å—Ç —Å –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        print("  1. –¢–µ—Å—Ç –±–µ–∑ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è...")
        initial_snapshot = self.profiler.take_memory_snapshot()
        
        async with httpx.AsyncClient(timeout=30.0) as client:
            headers = {"Authorization": "Bearer demo_token", "Cache-Control": "no-cache"}
            for _ in range(50):
                try:
                    await client.get(f"{self.base_url}/api/services", headers=headers)
                except Exception:
                    pass
        
        no_cache_snapshot = self.profiler.take_memory_snapshot()
        results["no_cache"] = {
            "memory_usage": no_cache_snapshot.rss_mb - initial_snapshot.rss_mb,
            "snapshot": no_cache_snapshot
        }
        
        # 2. –¢–µ—Å—Ç —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Å–±–æ—Ä–∫–æ–π –º—É—Å–æ—Ä–∞
        print("  2. –¢–µ—Å—Ç —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Å–±–æ—Ä–∫–æ–π –º—É—Å–æ—Ä–∞...")
        self.profiler.force_garbage_collection()
        gc_snapshot = self.profiler.take_memory_snapshot()
        results["with_gc"] = {
            "memory_usage": gc_snapshot.rss_mb - initial_snapshot.rss_mb,
            "snapshot": gc_snapshot
        }
        
        # 3. –¢–µ—Å—Ç —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏
        print("  3. –¢–µ—Å—Ç —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏...")
        optimized_snapshot = await self._test_optimized_requests()
        results["optimized"] = {
            "memory_usage": optimized_snapshot.rss_mb - initial_snapshot.rss_mb,
            "snapshot": optimized_snapshot
        }
        
        return results
    
    async def _test_optimized_requests(self) -> MemorySnapshot:
        """–¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        async with httpx.AsyncClient(
            timeout=30.0,
            limits=httpx.Limits(max_keepalive_connections=5, max_connections=10)
        ) as client:
            headers = {
                "Authorization": "Bearer demo_token",
                "Connection": "keep-alive",
                "Accept-Encoding": "gzip"
            }
            
            for _ in range(50):
                try:
                    response = await client.get(f"{self.base_url}/api/services", headers=headers)
                    # –ß–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
                    _ = response.headers
                except Exception:
                    pass
        
        return self.profiler.take_memory_snapshot()
    
    def generate_optimization_recommendations(
        self, 
        results: List[MemoryOptimizationResult]
    ) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        recommendations = []
        
        for result in results:
            if result.memory_growth > 100:  # –†–æ—Å—Ç > 100MB
                recommendations.append(
                    f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ä–æ—Å—Ç –ø–∞–º—è—Ç–∏ –≤ {result.test_name}: {result.memory_growth:.2f} MB"
                )
            elif result.memory_growth > 50:  # –†–æ—Å—Ç > 50MB
                recommendations.append(
                    f"–í—ã—Å–æ–∫–∏–π —Ä–æ—Å—Ç –ø–∞–º—è—Ç–∏ –≤ {result.test_name}: {result.memory_growth:.2f} MB"
                )
            
            if result.optimization_score < 0.7:
                recommendations.append(
                    f"–ù–∏–∑–∫–∏–π –±–∞–ª–ª –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤ {result.test_name}: {result.optimization_score:.2f}"
                )
        
        if not recommendations:
            recommendations.append("–ü–∞–º—è—Ç—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Ö–æ—Ä–æ—à–æ")
        
        return recommendations


class TestMemoryOptimization:
    """–¢–µ—Å—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏"""
    
    @pytest.fixture(autouse=True)
    def setup(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
        self.tester = MemoryOptimizationTester()
        
    def teardown_method(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤"""
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞
        self.tester.profiler.force_garbage_collection()
    
    @pytest.mark.asyncio
    async def test_baseline_memory_usage(self):
        """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏"""
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏...")
        
        baseline = await self.tester.test_memory_usage_baseline()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        assert baseline.rss_mb < 1000, f"–°–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–æ–µ –±–∞–∑–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {baseline.rss_mb:.2f} MB"
        assert baseline.percent < 50, f"–°–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏: {baseline.percent:.2f}%"
        
        print(f"‚úÖ –ë–∞–∑–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –≤ –Ω–æ—Ä–º–µ: {baseline.rss_mb:.2f} MB")
    
    @pytest.mark.asyncio
    async def test_memory_during_requests(self):
        """–¢–µ—Å—Ç –ø–∞–º—è—Ç–∏ –≤–æ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–æ–≤"""
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –≤–æ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–æ–≤...")
        
        snapshots = await self.tester.test_memory_usage_during_requests(100)
        
        if len(snapshots) >= 2:
            initial = snapshots[0]
            final = snapshots[-1]
            memory_growth = final.rss_mb - initial.rss_mb
            
            print(f"üìä –†–æ—Å—Ç –ø–∞–º—è—Ç–∏ –∑–∞ 100 –∑–∞–ø—Ä–æ—Å–æ–≤: {memory_growth:.2f} MB")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∏
            assert memory_growth < 200, f"–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ä–æ—Å—Ç –ø–∞–º—è—Ç–∏: {memory_growth:.2f} MB"
            
            print(f"‚úÖ –†–æ—Å—Ç –ø–∞–º—è—Ç–∏ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã: {memory_growth:.2f} MB")
        else:
            print("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
    
    @pytest.mark.asyncio
    async def test_memory_leak_detection(self):
        """–¢–µ—Å—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏"""
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏...")
        
        leak_detection = await self.tester.test_memory_leak_detection()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        assert not leak_detection.leak_detected, f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —É—Ç–µ—á–∫–∞ –ø–∞–º—è—Ç–∏: {leak_detection.memory_growth:.2f} MB"
        assert leak_detection.memory_growth < 100, f"–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ä–æ—Å—Ç –ø–∞–º—è—Ç–∏: {leak_detection.memory_growth:.2f} MB"
        assert leak_detection.growth_rate < 10, f"–°–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å —Ä–æ—Å—Ç–∞: {leak_detection.growth_rate:.4f} MB/s"
        
        print(f"‚úÖ –£—Ç–µ—á–∫–∏ –ø–∞–º—è—Ç–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã. –†–æ—Å—Ç: {leak_detection.memory_growth:.2f} MB")
    
    @pytest.mark.asyncio
    async def test_concurrent_memory_usage(self):
        """–¢–µ—Å—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏"""
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏...")
        
        final_snapshot = await self.tester.test_concurrent_memory_usage()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        assert final_snapshot.rss_mb < 2000, f"–°–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {final_snapshot.rss_mb:.2f} MB"
        assert final_snapshot.percent < 80, f"–°–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç: {final_snapshot.percent:.2f}%"
        
        print(f"‚úÖ –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –≤ –Ω–æ—Ä–º–µ: {final_snapshot.rss_mb:.2f} MB")
    
    @pytest.mark.asyncio
    async def test_memory_optimization_techniques(self):
        """–¢–µ—Å—Ç —Ç–µ—Ö–Ω–∏–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏"""
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏...")
        
        results = await self.tester.test_memory_optimization_techniques()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for technique, result in results.items():
            memory_usage = result["memory_usage"]
            print(f"  {technique}: {memory_usage:.2f} MB")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∏
            assert memory_usage < 300, f"–°–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –¥–ª—è {technique}: {memory_usage:.2f} MB"
        
        print("‚úÖ –í—Å–µ —Ç–µ—Ö–Ω–∏–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    @pytest.mark.asyncio
    async def test_memory_pressure_test(self):
        """–¢–µ—Å—Ç –¥–∞–≤–ª–µ–Ω–∏—è –Ω–∞ –ø–∞–º—è—Ç—å"""
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–≤–ª–µ–Ω–∏—è –Ω–∞ –ø–∞–º—è—Ç—å...")
        
        initial_snapshot = self.tester.profiler.take_memory_snapshot()
        
        # –°–æ–∑–¥–∞–µ–º –¥–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –ø–∞–º—è—Ç—å
        memory_intensive_tasks = []
        
        async def memory_intensive_task():
            # –°–æ–∑–¥–∞–µ–º –±–æ–ª—å—à–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
            large_data = []
            for _ in range(1000):
                large_data.append({"data": "x" * 1000})
            
            # –î–µ–ª–∞–µ–º HTTP –∑–∞–ø—Ä–æ—Å—ã
            async with httpx.AsyncClient(timeout=30.0) as client:
                headers = {"Authorization": "Bearer demo_token"}
                for _ in range(10):
                    try:
                        await client.get(f"{self.tester.base_url}/api/services", headers=headers)
                    except Exception:
                        pass
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            del large_data
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º 5 –∑–∞–¥–∞—á –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        tasks = [memory_intensive_task() for _ in range(5)]
        await asyncio.gather(*tasks, return_exceptions=True)
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞
        self.tester.profiler.force_garbage_collection()
        
        final_snapshot = self.tester.profiler.take_memory_snapshot()
        memory_growth = final_snapshot.rss_mb - initial_snapshot.rss_mb
        
        print(f"üìä –†–æ—Å—Ç –ø–∞–º—è—Ç–∏ –ø–æ–¥ –¥–∞–≤–ª–µ–Ω–∏–µ–º: {memory_growth:.2f} MB")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        assert memory_growth < 500, f"–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ä–æ—Å—Ç –ø–∞–º—è—Ç–∏ –ø–æ–¥ –¥–∞–≤–ª–µ–Ω–∏–µ–º: {memory_growth:.2f} MB"
        
        print(f"‚úÖ –°–∏—Å—Ç–µ–º–∞ –≤—ã–¥–µ—Ä–∂–∞–ª–∞ –¥–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –ø–∞–º—è—Ç—å. –†–æ—Å—Ç: {memory_growth:.2f} MB")
    
    def test_generate_memory_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ –ø–∞–º—è—Ç–∏"""
        print("\nüìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏...")
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–Ω–∏–º–∫–∏ –ø–∞–º—è—Ç–∏
        all_snapshots = self.tester.profiler.snapshots
        
        if not all_snapshots:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–∞–º—è—Ç–∏ –¥–ª—è –æ—Ç—á–µ—Ç–∞")
            return
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–¥—ã
        initial = all_snapshots[0]
        final = all_snapshots[-1]
        memory_growth = final.rss_mb - initial.rss_mb
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
        report = {
            "report_date": datetime.now().isoformat(),
            "total_snapshots": len(all_snapshots),
            "initial_memory_mb": initial.rss_mb,
            "final_memory_mb": final.rss_mb,
            "memory_growth_mb": memory_growth,
            "memory_growth_percent": (memory_growth / initial.rss_mb * 100) if initial.rss_mb > 0 else 0,
            "snapshots": [
                {
                    "timestamp": s.timestamp.isoformat(),
                    "rss_mb": s.rss_mb,
                    "vms_mb": s.vms_mb,
                    "percent": s.percent,
                    "available_mb": s.available_mb
                }
                for s in all_snapshots
            ],
            "recommendations": self.tester.generate_optimization_recommendations([])
        }
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        report_file = f"memory_optimization_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(report, f, indent=2, ensure_ascii=False, default=str)
        
        print(f"‚úÖ –û—Ç—á–µ—Ç –ø–æ –ø–∞–º—è—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
        
        # –í—ã–≤–æ–¥ –∫—Ä–∞—Ç–∫–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        print(f"\nüìà –ö–†–ê–¢–ö–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"  –ù–∞—á–∞–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å: {initial.rss_mb:.2f} MB")
        print(f"  –§–∏–Ω–∞–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å: {final.rss_mb:.2f} MB")
        print(f"  –†–æ—Å—Ç –ø–∞–º—è—Ç–∏: {memory_growth:.2f} MB")
        print(f"  –ü—Ä–æ—Ü–µ–Ω—Ç —Ä–æ—Å—Ç–∞: {report['memory_growth_percent']:.2f}%")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç—á–µ—Ç–∞
        assert report['total_snapshots'] > 0, "–ù–µ—Ç —Å–Ω–∏–º–∫–æ–≤ –ø–∞–º—è—Ç–∏"
        assert report['memory_growth_mb'] < 1000, f"–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ä–æ—Å—Ç –ø–∞–º—è—Ç–∏: {report['memory_growth_mb']:.2f} MB"


if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏ ALADDIN Dashboard...")
    print("üìä –ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏...")
    print("üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏...")
    print("‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏...")
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —á–µ—Ä–µ–∑ pytest
    pytest.main([__file__, "-v", "--tb=short"])