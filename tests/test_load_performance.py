#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Load Performance Tests –¥–ª—è ALADDIN Dashboard
–ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–±-–¥–∞—à–±–æ—Ä–¥–∞ —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

–ê–≤—Ç–æ—Ä: ALADDIN Security Team
–í–µ—Ä—Å–∏—è: 1.0.0
–î–∞—Ç–∞: 2025-01-27
–ö–∞—á–µ—Å—Ç–≤–æ: A+
"""

import asyncio
import time
import psutil
import pytest
import httpx
from concurrent.futures import ThreadPoolExecutor
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional
import json
import os
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

try:
    from core.base import ComponentStatus, SecurityLevel
    from core.logging_module import LoggingManager
    ALADDIN_AVAILABLE = True
except ImportError:
    ALADDIN_AVAILABLE = False


class DashboardLoadTester:
    """–ö–ª–∞—Å—Å –¥–ª—è –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—à–±–æ—Ä–¥–∞"""
    
    def __init__(self, base_url: str = "http://localhost:8080"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–µ—Ä–∞
        
        Args:
            base_url: –ë–∞–∑–æ–≤—ã–π URL –¥–∞—à–±–æ—Ä–¥–∞
        """
        self.base_url = base_url
        self.logger = LoggingManager(name="DashboardLoadTester") if ALADDIN_AVAILABLE else None
        self.test_results: List[Dict[str, Any]] = []
        self.start_time: Optional[datetime] = None
        self.end_time: Optional[datetime] = None
        
    async def simulate_user_session(self, user_id: int) -> Dict[str, Any]:
        """
        –°–∏–º—É–ª—è—Ü–∏—è —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–µ—Å—Å–∏–∏
        """
        session_start = time.time()
        session_results = {
            "user_id": user_id,
            "requests": [],
            "total_time": 0,
            "success": True,
            "errors": []
        }
        
        try:
            async with httpx.AsyncClient(timeout=30.0) as client:
                # 1. –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
                response = await self._make_request(client, "GET", "/")
                session_results["requests"].append({
                    "endpoint": "/",
                    "status_code": response.status_code,
                    "response_time": response.elapsed.total_seconds()
                })
                
                # 2. API endpoints
                response = await self._make_request(client, "GET", "/api/endpoints")
                session_results["requests"].append({
                    "endpoint": "/api/endpoints",
                    "status_code": response.status_code,
                    "response_time": response.elapsed.total_seconds()
                })
                
                # 3. –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤
                response = await self._make_request(client, "GET", "/api/services")
                session_results["requests"].append({
                    "endpoint": "/api/services",
                    "status_code": response.status_code,
                    "response_time": response.elapsed.total_seconds()
                })
                
                # 4. –ò—Å—Ç–æ—Ä–∏—è —Ç–µ—Å—Ç–æ–≤
                response = await self._make_request(client, "GET", "/api/test-history")
                session_results["requests"].append({
                    "endpoint": "/api/test-history",
                    "status_code": response.status_code,
                    "response_time": response.elapsed.total_seconds()
                })
                
                # 5. ML –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
                try:
                    response = await self._make_request(client, "GET", "/api/ml/health-analysis")
                    session_results["requests"].append({
                        "endpoint": "/api/ml/health-analysis",
                        "status_code": response.status_code,
                        "response_time": response.elapsed.total_seconds()
                    })
                except Exception as e:
                    session_results["errors"].append(f"ML analytics error: {str(e)}")
                
                # 6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ endpoint
                response = await self._make_request(
                    client, 
                    "POST", 
                    "/api/test",
                    json_data={
                        "endpoint": "/health",
                        "method": "GET"
                    }
                )
                session_results["requests"].append({
                    "endpoint": "/api/test",
                    "status_code": response.status_code,
                    "response_time": response.elapsed.total_seconds()
                })
                
        except Exception as e:
            session_results["success"] = False
            session_results["errors"].append(str(e))
            
        session_results["total_time"] = time.time() - session_start
        return session_results
    
    async def _make_request(
        self, 
        client: httpx.AsyncClient, 
        method: str, 
        endpoint: str,
        json_data: Optional[Dict] = None
    ) -> httpx.Response:
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ HTTP –∑–∞–ø—Ä–æ—Å–∞
        
        Args:
            client: HTTP –∫–ª–∏–µ–Ω—Ç
            method: HTTP –º–µ—Ç–æ–¥
            endpoint: Endpoint
            json_data: JSON –¥–∞–Ω–Ω—ã–µ –¥–ª—è POST –∑–∞–ø—Ä–æ—Å–æ–≤
            
        Returns:
            HTTP –æ—Ç–≤–µ—Ç
        """
        url = f"{self.base_url}{endpoint}"
        headers = {"Authorization": "Bearer demo_token"}
        
        if method.upper() == "GET":
            response = await client.get(url, headers=headers)
        elif method.upper() == "POST":
            response = await client.post(url, json=json_data, headers=headers)
        else:
            raise ValueError(f"Unsupported method: {method}")
            
        return response


class TestDashboardLoadPerformance:
    """–¢–µ—Å—Ç—ã –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—à–±–æ—Ä–¥–∞"""
    
    @pytest.fixture(autouse=True)
    def setup(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
        self.tester = DashboardLoadTester()
        self.tester.start_time = datetime.now()
        
    def teardown_method(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤"""
        if self.tester:
            self.tester.end_time = datetime.now()
    
    @pytest.mark.asyncio
    async def test_concurrent_users_10(self):
        """–¢–µ—Å—Ç 10 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ 10 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        
        start_time = time.time()
        tasks = [self.tester.simulate_user_session(i) for i in range(10)]
        results = await asyncio.gather(*tasks, return_exceptions=True)
        duration = time.time() - start_time
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        successful_sessions = [r for r in results if isinstance(r, dict) and r.get("success", False)]
        failed_sessions = [r for r in results if not (isinstance(r, dict) and r.get("success", False))]
        
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {len(successful_sessions)}/10")
        print(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {len(failed_sessions)}/10")
        print(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {duration:.2f} —Å–µ–∫—É–Ω–¥")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        assert len(successful_sessions) >= 8, f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {len(failed_sessions)}"
        assert duration < 60, f"–¢–µ—Å—Ç —Å–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω—ã–π: {duration:.2f}s > 60s"
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.tester.test_results.append({
            "test_name": "concurrent_users_10",
            "duration": duration,
            "successful_sessions": len(successful_sessions),
            "failed_sessions": len(failed_sessions),
            "success_rate": len(successful_sessions) / 10 * 100
        })
    
    @pytest.mark.asyncio
    async def test_concurrent_users_50(self):
        """–¢–µ—Å—Ç 50 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ 50 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        
        start_time = time.time()
        tasks = [self.tester.simulate_user_session(i) for i in range(50)]
        results = await asyncio.gather(*tasks, return_exceptions=True)
        duration = time.time() - start_time
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        successful_sessions = [r for r in results if isinstance(r, dict) and r.get("success", False)]
        failed_sessions = [r for r in results if not (isinstance(r, dict) and r.get("success", False))]
        
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {len(successful_sessions)}/50")
        print(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {len(failed_sessions)}/50")
        print(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {duration:.2f} —Å–µ–∫—É–Ω–¥")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏ (–±–æ–ª–µ–µ –º—è–≥–∫–∏–µ –¥–ª—è 50 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
        assert len(successful_sessions) >= 35, f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {len(failed_sessions)}"
        assert duration < 120, f"–¢–µ—Å—Ç —Å–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω—ã–π: {duration:.2f}s > 120s"
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.tester.test_results.append({
            "test_name": "concurrent_users_50",
            "duration": duration,
            "successful_sessions": len(successful_sessions),
            "failed_sessions": len(failed_sessions),
            "success_rate": len(successful_sessions) / 50 * 100
        })
    
    @pytest.mark.asyncio
    async def test_concurrent_users_100(self):
        """–¢–µ—Å—Ç 100 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ 100 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        
        start_time = time.time()
        tasks = [self.tester.simulate_user_session(i) for i in range(100)]
        results = await asyncio.gather(*tasks, return_exceptions=True)
        duration = time.time() - start_time
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        successful_sessions = [r for r in results if isinstance(r, dict) and r.get("success", False)]
        failed_sessions = [r for r in results if not (isinstance(r, dict) and r.get("success", False))]
        
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {len(successful_sessions)}/100")
        print(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {len(failed_sessions)}/100")
        print(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {duration:.2f} —Å–µ–∫—É–Ω–¥")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏ (–µ—â–µ –±–æ–ª–µ–µ –º—è–≥–∫–∏–µ –¥–ª—è 100 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
        assert len(successful_sessions) >= 60, f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {len(failed_sessions)}"
        assert duration < 180, f"–¢–µ—Å—Ç —Å–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω—ã–π: {duration:.2f}s > 180s"
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.tester.test_results.append({
            "test_name": "concurrent_users_100",
            "duration": duration,
            "successful_sessions": len(successful_sessions),
            "failed_sessions": len(failed_sessions),
            "success_rate": len(successful_sessions) / 100 * 100
        })
    
    @pytest.mark.asyncio
    async def test_sustained_load(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏ (5 –º–∏–Ω—É—Ç)"""
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏ (5 –º–∏–Ω—É—Ç)...")
        
        start_time = time.time()
        end_time = start_time + 300  # 5 –º–∏–Ω—É—Ç
        concurrent_users = 20
        results = []
        
        while time.time() < end_time:
            # –ó–∞–ø—É—Å–∫–∞–µ–º batch –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            tasks = [
                self.tester.simulate_user_session(i) 
                for i in range(concurrent_users)
            ]
            batch_results = await asyncio.gather(*tasks, return_exceptions=True)
            results.extend(batch_results)
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É batches
            await asyncio.sleep(10)
        
        duration = time.time() - start_time
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        successful_sessions = [r for r in results if isinstance(r, dict) and r.get("success", False)]
        failed_sessions = [r for r in results if not (isinstance(r, dict) and r.get("success", False))]
        
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {len(successful_sessions)}")
        print(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {len(failed_sessions)}")
        print(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {duration:.2f} —Å–µ–∫—É–Ω–¥")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        assert len(successful_sessions) >= len(results) * 0.7, "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Å–µ—Å—Å–∏–π"
        assert duration >= 280, f"–¢–µ—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π: {duration:.2f}s < 280s"
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.tester.test_results.append({
            "test_name": "sustained_load_5min",
            "duration": duration,
            "successful_sessions": len(successful_sessions),
            "failed_sessions": len(failed_sessions),
            "success_rate": len(successful_sessions) / len(results) * 100
        })
    
    @pytest.mark.asyncio
    async def test_memory_usage_during_load(self):
        """–¢–µ—Å—Ç –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏ –≤–æ –≤—Ä–µ–º—è –Ω–∞–≥—Ä—É–∑–∫–∏"""
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏ –≤–æ –≤—Ä–µ–º—è –Ω–∞–≥—Ä—É–∑–∫–∏...")
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏
        initial_memory = psutil.virtual_memory().percent
        process = psutil.Process()
        initial_process_memory = process.memory_info().rss / 1024 / 1024  # MB
        
        print(f"üìä –ù–∞—á–∞–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å —Å–∏—Å—Ç–µ–º—ã: {initial_memory:.1f}%")
        print(f"üìä –ù–∞—á–∞–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–∞: {initial_process_memory:.1f} MB")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —Ç–µ—Å—Ç
        start_time = time.time()
        tasks = [self.tester.simulate_user_session(i) for i in range(30)]
        results = await asyncio.gather(*tasks, return_exceptions=True)
        duration = time.time() - start_time
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏
        final_memory = psutil.virtual_memory().percent
        final_process_memory = process.memory_info().rss / 1024 / 1024  # MB
        
        memory_increase = final_memory - initial_memory
        process_memory_increase = final_process_memory - initial_process_memory
        
        print(f"üìä –§–∏–Ω–∞–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å —Å–∏—Å—Ç–µ–º—ã: {final_memory:.1f}%")
        print(f"üìä –§–∏–Ω–∞–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–∞: {final_process_memory:.1f} MB")
        print(f"üìä –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ —Å–∏—Å—Ç–µ–º—ã: {memory_increase:.1f}%")
        print(f"üìä –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞: {process_memory_increase:.1f} MB")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        assert memory_increase < 20, f"–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ —Å–∏—Å—Ç–µ–º—ã: {memory_increase:.1f}%"
        assert process_memory_increase < 100, f"–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞: {process_memory_increase:.1f} MB"
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.tester.test_results.append({
            "test_name": "memory_usage_during_load",
            "duration": duration,
            "initial_memory_percent": initial_memory,
            "final_memory_percent": final_memory,
            "memory_increase_percent": memory_increase,
            "initial_process_memory_mb": initial_process_memory,
            "final_process_memory_mb": final_process_memory,
            "process_memory_increase_mb": process_memory_increase
        })
    
    def test_generate_performance_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        print("\nüìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
        
        if not self.tester.test_results:
            print("‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –æ—Ç—á–µ—Ç–∞")
            return
        
        report = {
            "test_date": datetime.now().isoformat(),
            "total_tests": len(self.tester.test_results),
            "tests": self.tester.test_results,
            "summary": self._generate_summary()
        }
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        report_file = f"load_performance_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(report, f, indent=2, ensure_ascii=False)
        
        print(f"‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
        
        # –í—ã–≤–æ–¥ –∫—Ä–∞—Ç–∫–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        print("\nüìà –ö–†–ê–¢–ö–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        for test in self.tester.test_results:
            print(f"  {test['test_name']}: {test.get('success_rate', 'N/A'):.1f}% —É—Å–ø–µ—Ö")
    
    def _generate_summary(self) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–∞—Ç–∫–æ–≥–æ —Ä–µ–∑—é–º–µ —Ç–µ—Å—Ç–æ–≤"""
        if not self.tester.test_results:
            return {}
        
        total_tests = len(self.tester.test_results)
        successful_tests = sum(1 for test in self.tester.test_results if test.get('success_rate', 0) >= 70)
        
        return {
            "total_tests": total_tests,
            "successful_tests": successful_tests,
            "success_rate": successful_tests / total_tests * 100,
            "average_duration": sum(test.get('duration', 0) for test in self.tester.test_results) / total_tests
        }


class TestDashboardEndpoints:
    """–¢–µ—Å—Ç—ã –æ—Ç–¥–µ–ª—å–Ω—ã—Ö endpoints –¥–∞—à–±–æ—Ä–¥–∞"""
    
    @pytest.fixture(autouse=True)
    def setup(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
        self.base_url = "http://localhost:8080"
    
    @pytest.mark.asyncio
    async def test_main_page_response_time(self):
        """–¢–µ—Å—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫–ª–∏–∫–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫–ª–∏–∫–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
        
        async with httpx.AsyncClient(timeout=10.0) as client:
            start_time = time.time()
            response = await client.get(f"{self.base_url}/")
            duration = time.time() - start_time
            
            print(f"‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: {duration:.3f} —Å–µ–∫—É–Ω–¥")
            print(f"üìä –°—Ç–∞—Ç—É—Å –∫–æ–¥: {response.status_code}")
            
            assert response.status_code == 200, f"–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∫–æ–¥: {response.status_code}"
            assert duration < 2.0, f"–°–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω—ã–π –æ—Ç–∫–ª–∏–∫: {duration:.3f}s > 2.0s"
    
    @pytest.mark.asyncio
    async def test_api_endpoints_response_time(self):
        """–¢–µ—Å—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫–ª–∏–∫–∞ API endpoints"""
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫–ª–∏–∫–∞ API endpoints...")
        
        endpoints = [
            "/api/endpoints",
            "/api/services",
            "/api/test-history",
            "/api/autocomplete?query=test"
        ]
        
        async with httpx.AsyncClient(timeout=10.0) as client:
            headers = {"Authorization": "Bearer demo_token"}
            
            for endpoint in endpoints:
                start_time = time.time()
                response = await client.get(f"{self.base_url}{endpoint}", headers=headers)
                duration = time.time() - start_time
                
                print(f"  {endpoint}: {duration:.3f}s (—Å—Ç–∞—Ç—É—Å: {response.status_code})")
                
                assert duration < 3.0, f"–°–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω—ã–π –æ—Ç–∫–ª–∏–∫ –¥–ª—è {endpoint}: {duration:.3f}s"
                assert response.status_code in [200, 404], f"–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∫–æ–¥ –¥–ª—è {endpoint}: {response.status_code}"
    
    @pytest.mark.asyncio
    async def test_api_test_endpoint(self):
        """–¢–µ—Å—Ç endpoint –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API"""
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ endpoint –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API...")
        
        async with httpx.AsyncClient(timeout=15.0) as client:
            headers = {"Authorization": "Bearer demo_token"}
            
            test_data = {
                "endpoint": "/health",
                "method": "GET"
            }
            
            start_time = time.time()
            response = await client.post(
                f"{self.base_url}/api/test", 
                json=test_data, 
                headers=headers
            )
            duration = time.time() - start_time
            
            print(f"‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: {duration:.3f} —Å–µ–∫—É–Ω–¥")
            print(f"üìä –°—Ç–∞—Ç—É—Å –∫–æ–¥: {response.status_code}")
            
            if response.status_code == 200:
                result = response.json()
                print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞: {result.get('success', 'unknown')}")
            
            assert response.status_code in [200, 400, 500], f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∫–æ–¥: {response.status_code}"
            assert duration < 10.0, f"–°–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω—ã–π –æ—Ç–∫–ª–∏–∫: {duration:.3f}s > 10.0s"


if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ –Ω–∞–≥—Ä—É–∑–æ—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è ALADDIN Dashboard...")
    print("üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
    print("üõ°Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π...")
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —á–µ—Ä–µ–∑ pytest
    pytest.main([__file__, "-v", "--tb=short"])