#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü–†–û–°–¢–û–ô –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¢–û–†–ê
"""

import os
import sys
import tempfile

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from security.safe_function_manager import SafeFunctionManager, SecurityLevel
from security.persistence_integrator import PersistenceIntegrator

def test_simple_integrator():
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä–∞"""
    print("üß™ –ü–†–û–°–¢–û–ô –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¢–û–†–ê")
    print("=" * 40)
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    test_dir = tempfile.mkdtemp()
    registry_file = os.path.join(test_dir, 'test_functions_registry.json')
    
    print(f"1. –¢–µ—Å—Ç–æ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {test_dir}")
    print(f"2. –§–∞–π–ª —Ä–µ–µ—Å—Ç—Ä–∞: {registry_file}")
    
    try:
        # –°–æ–∑–¥–∞–µ–º SafeFunctionManager
        print("3. –°–æ–∑–¥–∞–Ω–∏–µ SafeFunctionManager...")
        sfm = SafeFunctionManager()
        print(f"   ‚úÖ SFM —Å–æ–∑–¥–∞–Ω, —Ñ—É–Ω–∫—Ü–∏–π: {len(sfm.functions)}")
        
        # –°–æ–∑–¥–∞–µ–º PersistenceIntegrator
        print("4. –°–æ–∑–¥–∞–Ω–∏–µ PersistenceIntegrator...")
        integrator = PersistenceIntegrator(sfm, registry_file)
        print("   ‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –û–î–ù–£ —Ç–µ—Å—Ç–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
        print("5. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏...")
        success = integrator.register_function_with_persistence(
            function_id="test_simple",
            name="TestSimple",
            description="–ü—Ä–æ—Å—Ç–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è",
            function_type="test",
            security_level=SecurityLevel.MEDIUM,
            is_critical=False,
            auto_enable=False
        )
        
        print(f"   ‚úÖ –§—É–Ω–∫—Ü–∏—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞: {success}")
        print(f"   üìä –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π: {len(sfm.functions)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª
        print("6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ —Ä–µ–µ—Å—Ç—Ä–∞...")
        if os.path.exists(registry_file):
            print(f"   ‚úÖ –§–∞–π–ª —Å–æ–∑–¥–∞–Ω: {os.path.getsize(registry_file)} –±–∞–π—Ç")
        else:
            print("   ‚ùå –§–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω")
            return False
        
        print("\n" + "=" * 40)
        print("üéâ –ü–†–û–°–¢–û–ô –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù!")
        print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("‚úÖ –§—É–Ω–∫—Ü–∏—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞")
        print("‚úÖ –§–∞–π–ª —Å–æ–∑–¥–∞–Ω")
        
        return True
        
    except Exception as e:
        print(f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    finally:
        # –û—á–∏—Å—Ç–∫–∞
        try:
            if os.path.exists(registry_file):
                os.remove(registry_file)
            os.rmdir(test_dir)
        except:
            pass

if __name__ == "__main__":
    success = test_simple_integrator()
    sys.exit(0 if success else 1)
