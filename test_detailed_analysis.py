#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∫–∞—á–µ—Å—Ç–≤–∞
"""

import sys
import json
from security.ai_agents.universal_quality_system import analyze_file_universally

def test_detailed_analysis(file_path: str):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ —Å –ø–æ–ª–Ω—ã–º –≤—ã–≤–æ–¥–æ–º"""
    print(f"üîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –§–ê–ô–õ–ê: {file_path}")
    print("=" * 80)
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    result = analyze_file_universally(file_path)
    
    if "error" in result:
        print(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
        return
    
    # –í—ã–≤–æ–¥–∏–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    print(f"üìÅ –§–∞–π–ª: {result['file_path']}")
    print(f"üìä –û–±—â–∏–π –±–∞–ª–ª: {result['overall_score']:.1f}/100")
    print(f"üìè –°—Ç—Ä–æ–∫ –∫–æ–¥–∞: {result['line_count']}")
    print(f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {result['file_size']} –±–∞–π—Ç")
    print()
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    analysis_results = result.get('analysis_results', {})
    
    print("üîç –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:")
    print("-" * 50)
    
    # 1. –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
    if 'syntax_analysis' in analysis_results:
        syntax = analysis_results['syntax_analysis']
        print(f"1. –°–ò–ù–¢–ê–ö–°–ò–°: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if syntax.get('status') == 'success' else '‚ùå –û—à–∏–±–∫–∞'}")
        if 'ast_analysis' in syntax:
            ast_info = syntax['ast_analysis']
            print(f"   - AST –≤–∞–ª–∏–¥–µ–Ω: {'‚úÖ' if ast_info.get('valid_ast') else '‚ùå'}")
            print(f"   - –£–∑–ª–æ–≤ AST: {ast_info.get('nodes_count', 0)}")
            print(f"   - –ì–ª—É–±–∏–Ω–∞ AST: {ast_info.get('depth', 0)}")
        print()
    
    # 2. –ê–Ω–∞–ª–∏–∑ –∏–º–ø–æ—Ä—Ç–æ–≤
    if 'import_analysis' in analysis_results:
        imports = analysis_results['import_analysis']
        print(f"2. –ò–ú–ü–û–†–¢–´: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if imports.get('status') == 'success' else '‚ùå –û—à–∏–±–∫–∞'}")
        if 'import_analysis' in imports:
            imp_info = imports['import_analysis']
            print(f"   - –í—Å–µ–≥–æ –∏–º–ø–æ—Ä—Ç–æ–≤: {imp_info.get('total_imports', 0)}")
            print(f"   - –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö: {len(imp_info.get('unused_imports', []))}")
        print()
    
    # 3. –ê–Ω–∞–ª–∏–∑ flake8
    if 'flake8_analysis' in analysis_results:
        flake8 = analysis_results['flake8_analysis']
        print(f"3. FLAKE8: {flake8.get('total_errors', 0)} –æ—à–∏–±–æ–∫")
        print(f"   - –ë–∞–ª–ª –∫–∞—á–µ—Å—Ç–≤–∞: {flake8.get('quality_score', 0):.1f}/100")
        if 'error_groups' in flake8:
            groups = flake8['error_groups']
            print(f"   - –ë–µ–∑–æ–ø–∞—Å–Ω—ã—Ö: {len(groups.get('safe', []))}")
            print(f"   - –†—É—á–Ω—ã—Ö: {len(groups.get('manual', []))}")
            print(f"   - –û–ø–∞—Å–Ω—ã—Ö: {len(groups.get('dangerous', []))}")
            print(f"   - –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö: {len(groups.get('critical', []))}")
        print()
    
    # 4. –ê–Ω–∞–ª–∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    if 'security_analysis' in analysis_results:
        security = analysis_results['security_analysis']
        print(f"4. –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨: {security.get('total_vulnerabilities', 0)} —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π")
        print(f"   - –ë–∞–ª–ª –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {security.get('security_score', 0):.1f}/100")
        print(f"   - –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö: {security.get('critical_vulnerabilities', 0)}")
        print(f"   - –í—ã—Å–æ–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è: {security.get('high_vulnerabilities', 0)}")
        print()
    
    # 5. –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    if 'performance_analysis' in analysis_results:
        perf = analysis_results['performance_analysis']
        print(f"5. –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨: {perf.get('total_issues', 0)} –ø—Ä–æ–±–ª–µ–º")
        print(f"   - –ë–∞–ª–ª –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {perf.get('performance_score', 0):.1f}/100")
        print()
    
    # 6. –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    if 'structure_analysis' in analysis_results:
        structure = analysis_results['structure_analysis']
        print(f"6. –°–¢–†–£–ö–¢–£–†–ê: {structure.get('total_classes', 0)} –∫–ª–∞—Å—Å–æ–≤, {structure.get('total_functions', 0)} —Ñ—É–Ω–∫—Ü–∏–π")
        print(f"   - –ë–∞–ª–ª —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {structure.get('structure_score', 0):.1f}/100")
        print(f"   - –û–±—â–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: {structure.get('total_complexity', 0)}")
        print(f"   - –°—Ä–µ–¥–Ω—è—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: {structure.get('average_complexity', 0):.1f}")
        print()
    
    # 7. –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    if 'documentation_analysis' in analysis_results:
        doc = analysis_results['documentation_analysis']
        print(f"7. –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–Ø: {doc.get('comment_percentage', 0):.1f}% –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")
        print(f"   - –ë–∞–ª–ª –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: {doc.get('documentation_score', 0):.1f}/100")
        print(f"   - –°—Ç—Ä–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: {doc.get('docstring_lines', 0)}")
        print()
    
    # 8. –ê–Ω–∞–ª–∏–∑ –º–µ—Ç—Ä–∏–∫
    if 'metrics_analysis' in analysis_results:
        metrics = analysis_results['metrics_analysis']
        print(f"8. –ú–ï–¢–†–ò–ö–ò:")
        print(f"   - –°—Ç—Ä–æ–∫ –∫–æ–¥–∞: {metrics.get('code_lines', 0)}")
        print(f"   - –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {metrics.get('comment_lines', 0)}")
        print(f"   - –ü—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫: {metrics.get('blank_lines', 0)}")
        print(f"   - –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫–æ–¥–∞: {metrics.get('code_ratio', 0):.1%}")
        print()
    
    # 9. –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
    if 'vulnerability_scan' in analysis_results:
        vuln = analysis_results['vulnerability_scan']
        print(f"9. –£–Ø–ó–í–ò–ú–û–°–¢–ò: {vuln.get('total_vulnerabilities', 0)} –Ω–∞–π–¥–µ–Ω–æ")
        print(f"   - –ë–∞–ª–ª —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π: {vuln.get('vulnerability_score', 0):.1f}/100")
        print()
    
    # 10. –ó–∞–ø–∞—Ö–∏ –∫–æ–¥–∞
    if 'code_smells' in analysis_results:
        smells = analysis_results['code_smells']
        print(f"10. –ó–ê–ü–ê–•–ò –ö–û–î–ê: {smells.get('total_smells', 0)} –Ω–∞–π–¥–µ–Ω–æ")
        print(f"    - –ë–∞–ª–ª –∑–∞–ø–∞—Ö–æ–≤: {smells.get('smell_score', 0):.1f}/100")
        print()
    
    # –°–≤–æ–¥–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
    if 'quality_summary' in result:
        summary = result['quality_summary']
        print("üìä –°–í–û–î–ö–ê –ö–ê–ß–ï–°–¢–í–ê:")
        print(f"   - –û–±—â–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ: {summary.get('overall_quality', 'N/A')}")
        print(f"   - –í—Å–µ–≥–æ –ø—Ä–æ–±–ª–µ–º: {summary.get('total_issues', 0)}")
        print(f"   - –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö: {summary.get('critical_issues', 0)}")
        print()
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if 'recommendations' in result:
        recommendations = result['recommendations']
        if recommendations:
            print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            for i, rec in enumerate(recommendations, 1):
                print(f"   {i}. {rec}")
            print()
    
    # –ü–ª–∞–Ω –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
    if 'fix_plan' in result:
        plan = result['fix_plan']
        print("üìã –ü–õ–ê–ù –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô:")
        print(f"   - –í—Å–µ–≥–æ –ø—Ä–æ–±–ª–µ–º: {plan.get('total_issues', 0)}")
        print(f"   - –ë–µ–∑–æ–ø–∞—Å–Ω—ã—Ö: {plan.get('safe_fixes', 0)}")
        print(f"   - –†—É—á–Ω—ã—Ö: {plan.get('manual_fixes', 0)}")
        print(f"   - –û–ø–∞—Å–Ω—ã—Ö: {plan.get('dangerous_fixes', 0)}")
        print(f"   - –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö: {plan.get('critical_fixes', 0)}")
        
        if 'steps' in plan and plan['steps']:
            print("   –®–∞–≥–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π:")
            for step in plan['steps']:
                print(f"   - –®–∞–≥ {step['step']}: {step['action']} ({step['count']} –ø—Ä–æ–±–ª–µ–º)")
        print()

if __name__ == "__main__":
    if len(sys.argv) > 1:
        test_detailed_analysis(sys.argv[1])
    else:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python3 test_detailed_analysis.py <–ø—É—Ç—å_–∫_—Ñ–∞–π–ª—É>")