import UIKit

class ViewController: UIViewController {
    
    // MARK: - IBOutlets
    @IBOutlet weak var mainScrollView: UIScrollView!
    @IBOutlet weak var contentView: UIView!
    @IBOutlet weak var headerView: UIView!
    @IBOutlet weak var logoLabel: UILabel!
    @IBOutlet weak var profileButton: UIButton!
    @IBOutlet weak var cardsStackView: UIStackView!
    @IBOutlet weak var aiAssistantView: UIView!
    @IBOutlet weak var aiTitleLabel: UILabel!
    @IBOutlet weak var aiMessageLabel: UILabel!
    @IBOutlet weak var aiInputTextField: UITextField!
    @IBOutlet weak var aiSendButton: UIButton!
    
    // MARK: - Properties
    private var aiAssistant = UnifiedSupportAPI()
    private var isAIActive = false
    
    // MARK: - Lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        setupUI()
        setupCards()
        setupAIAssistant()
        applyStormSkyTheme()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        updateSecurityStatus()
    }
    
    // MARK: - UI Setup
    private func setupUI() {
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        view.backgroundColor = StormSkyColors.primaryBackground
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        setupHeader()
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ AI –ø–æ–º–æ—â–Ω–∏–∫–∞
        setupAIAssistantView()
    }
    
    private func setupHeader() {
        headerView.backgroundColor = StormSkyColors.primaryBackground
        logoLabel.text = "üå©Ô∏è ALADDIN"
        logoLabel.textColor = StormSkyColors.accentColor
        logoLabel.font = UIFont.boldSystemFont(ofSize: 24)
        
        profileButton.backgroundColor = StormSkyColors.accentColor
        profileButton.setTitleColor(StormSkyColors.primaryBackground, for: .normal)
        profileButton.layer.cornerRadius = 20
        profileButton.setTitle("üë§", for: .normal)
    }
    
    private func setupCards() {
        // –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ —Ñ—É–Ω–∫—Ü–∏–π
        let protectionCard = createFunctionCard(
            icon: "üõ°Ô∏è",
            title: "–ó–∞—â–∏—Ç–∞",
            subtitle: "VPN ‚Ä¢ –ê–Ω—Ç–∏–≤–∏—Ä—É—Å",
            action: #selector(protectionCardTapped)
        )
        
        let familyCard = createFunctionCard(
            icon: "üë®‚Äçüë©‚Äçüëß‚Äçüë¶",
            title: "–°–µ–º—å—è",
            subtitle: "–ü—Ä–æ—Ñ–∏–ª–∏ ‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª—å",
            action: #selector(familyCardTapped)
        )
        
        let analyticsCard = createFunctionCard(
            icon: "üìä",
            title: "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞",
            subtitle: "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ‚Ä¢ –û—Ç—á–µ—Ç—ã",
            action: #selector(analyticsCardTapped)
        )
        
        let settingsCard = createFunctionCard(
            icon: "‚öôÔ∏è",
            title: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏",
            subtitle: "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è",
            action: #selector(settingsCardTapped)
        )
        
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ —Å—Ç–µ–∫
        cardsStackView.addArrangedSubview(protectionCard)
        cardsStackView.addArrangedSubview(familyCard)
        cardsStackView.addArrangedSubview(analyticsCard)
        cardsStackView.addArrangedSubview(settingsCard)
    }
    
    private func createFunctionCard(icon: String, title: String, subtitle: String, action: Selector) -> UIView {
        let cardView = UIView()
        cardView.backgroundColor = UIColor.white.withAlphaComponent(0.1)
        cardView.layer.cornerRadius = 15
        cardView.layer.borderWidth = 1
        cardView.layer.borderColor = UIColor.white.withAlphaComponent(0.2).cgColor
        
        // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ glassmorphism —ç—Ñ—Ñ–µ–∫—Ç–∞
        cardView.applyGlassmorphism(style: .light)
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∫–∞—Ä—Ç–æ—á–∫–∏
        let iconLabel = UILabel()
        iconLabel.text = icon
        iconLabel.font = UIFont.systemFont(ofSize: 32)
        iconLabel.textAlignment = .center
        
        let titleLabel = UILabel()
        titleLabel.text = title
        titleLabel.font = UIFont.boldSystemFont(ofSize: 16)
        titleLabel.textColor = StormSkyColors.primaryText
        titleLabel.textAlignment = .center
        
        let subtitleLabel = UILabel()
        subtitleLabel.text = subtitle
        subtitleLabel.font = UIFont.systemFont(ofSize: 12)
        subtitleLabel.textColor = StormSkyColors.primaryText.withAlphaComponent(0.8)
        subtitleLabel.textAlignment = .center
        
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –∫–∞—Ä—Ç–æ—á–∫—É
        cardView.addSubview(iconLabel)
        cardView.addSubview(titleLabel)
        cardView.addSubview(subtitleLabel)
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ constraints
        iconLabel.translatesAutoresizingMaskIntoConstraints = false
        titleLabel.translatesAutoresizingMaskIntoConstraints = false
        subtitleLabel.translatesAutoresizingMaskIntoConstraints = false
        
        NSLayoutConstraint.activate([
            iconLabel.topAnchor.constraint(equalTo: cardView.topAnchor, constant: 20),
            iconLabel.centerXAnchor.constraint(equalTo: cardView.centerXAnchor),
            
            titleLabel.topAnchor.constraint(equalTo: iconLabel.bottomAnchor, constant: 10),
            titleLabel.leadingAnchor.constraint(equalTo: cardView.leadingAnchor, constant: 10),
            titleLabel.trailingAnchor.constraint(equalTo: cardView.trailingAnchor, constant: -10),
            
            subtitleLabel.topAnchor.constraint(equalTo: titleLabel.bottomAnchor, constant: 5),
            subtitleLabel.leadingAnchor.constraint(equalTo: cardView.leadingAnchor, constant: 10),
            subtitleLabel.trailingAnchor.constraint(equalTo: cardView.trailingAnchor, constant: -10),
            subtitleLabel.bottomAnchor.constraint(equalTo: cardView.bottomAnchor, constant: -20)
        ])
        
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∂–µ—Å—Ç–∞ –Ω–∞–∂–∞—Ç–∏—è
        let tapGesture = UITapGestureRecognizer(target: self, action: action)
        cardView.addGestureRecognizer(tapGesture)
        cardView.isUserInteractionEnabled = true
        
        return cardView
    }
    
    private func setupAIAssistantView() {
        aiAssistantView.backgroundColor = StormSkyColors.accentColor.withAlphaComponent(0.1)
        aiAssistantView.layer.cornerRadius = 15
        aiAssistantView.layer.borderWidth = 2
        aiAssistantView.layer.borderColor = StormSkyColors.accentColor.cgColor
        
        aiTitleLabel.text = "ü§ñ AI –ü–æ–º–æ—â–Ω–∏–∫"
        aiTitleLabel.textColor = StormSkyColors.accentColor
        aiTitleLabel.font = UIFont.boldSystemFont(ofSize: 18)
        
        aiMessageLabel.text = "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∑–∞—â–∏—Ç—É –¥–ª—è –≤–∞—à–µ–π —Å–µ–º—å–∏. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"
        aiMessageLabel.textColor = StormSkyColors.primaryText
        aiMessageLabel.font = UIFont.systemFont(ofSize: 14)
        aiMessageLabel.numberOfLines = 0
        
        aiInputTextField.placeholder = "–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å..."
        aiInputTextField.backgroundColor = UIColor.white.withAlphaComponent(0.1)
        aiInputTextField.layer.cornerRadius = 25
        aiInputTextField.layer.borderWidth = 1
        aiInputTextField.layer.borderColor = UIColor.white.withAlphaComponent(0.3).cgColor
        aiInputTextField.textColor = StormSkyColors.primaryText
        
        aiSendButton.backgroundColor = StormSkyColors.accentColor
        aiSendButton.setTitleColor(StormSkyColors.primaryBackground, for: .normal)
        aiSendButton.layer.cornerRadius = 25
        aiSendButton.setTitle("‚û§", for: .normal)
    }
    
    private func applyStormSkyTheme() {
        // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤–æ–π —Å—Ö–µ–º—ã "–ì—Ä–æ–∑–æ–≤–æ–µ –Ω–µ–±–æ —Å –∑–æ–ª–æ—Ç—ã–º–∏ –∞–∫—Ü–µ–Ω—Ç–∞–º–∏"
        view.backgroundColor = StormSkyColors.primaryBackground
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        navigationController?.navigationBar.barTintColor = StormSkyColors.primaryBackground
        navigationController?.navigationBar.tintColor = StormSkyColors.accentColor
        navigationController?.navigationBar.titleTextAttributes = [
            .foregroundColor: StormSkyColors.primaryText
        ]
    }
    
    // MARK: - Actions
    @objc private func protectionCardTapped() {
        // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —ç–∫—Ä–∞–Ω—É –∑–∞—â–∏—Ç—ã
        print("üõ°Ô∏è Protection card tapped")
        // TODO: Implement navigation to protection screen
    }
    
    @objc private func familyCardTapped() {
        // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —ç–∫—Ä–∞–Ω—É —Å–µ–º—å–∏
        print("üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Family card tapped")
        // TODO: Implement navigation to family screen
    }
    
    @objc private func analyticsCardTapped() {
        // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —ç–∫—Ä–∞–Ω—É –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        print("üìä Analytics card tapped")
        // TODO: Implement navigation to analytics screen
    }
    
    @objc private func settingsCardTapped() {
        // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —ç–∫—Ä–∞–Ω—É –Ω–∞—Å—Ç—Ä–æ–µ–∫
        print("‚öôÔ∏è Settings card tapped")
        // TODO: Implement navigation to settings screen
    }
    
    @IBAction func profileButtonTapped(_ sender: UIButton) {
        // –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print("üë§ Profile button tapped")
        // TODO: Implement profile navigation
    }
    
    @IBAction func aiSendButtonTapped(_ sender: UIButton) {
        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è AI –ø–æ–º–æ—â–Ω–∏–∫—É
        guard let message = aiInputTextField.text, !message.isEmpty else { return }
        
        sendMessageToAI(message: message)
        aiInputTextField.text = ""
    }
    
    // MARK: - AI Assistant
    private func sendMessageToAI(message: String) {
        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è AI –ø–æ–º–æ—â–Ω–∏–∫—É
        print("ü§ñ Sending message to AI: \(message)")
        
        // –ü–æ–∫–∞–∑ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏
        showAILoadingIndicator()
        
        // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ AI API
        Task {
            do {
                let response = try await aiAssistant.sendMessage(message)
                await MainActor.run {
                    self.hideAILoadingIndicator()
                    self.updateAIMessage(response)
                }
            } catch {
                await MainActor.run {
                    self.hideAILoadingIndicator()
                    self.showAIError(error)
                }
            }
        }
    }
    
    private func showAILoadingIndicator() {
        aiMessageLabel.text = "ü§ñ AI –ø–æ–º–æ—â–Ω–∏–∫ –ø–µ—á–∞—Ç–∞–µ—Ç..."
        isAIActive = true
    }
    
    private func hideAILoadingIndicator() {
        isAIActive = false
    }
    
    private func updateAIMessage(_ response: String) {
        aiMessageLabel.text = response
    }
    
    private func showAIError(_ error: Error) {
        aiMessageLabel.text = "‚ùå –û—à–∏–±–∫–∞: \(error.localizedDescription)"
    }
    
    // MARK: - Security
    private func updateSecurityStatus() {
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        print("üõ°Ô∏è Updating security status...")
        // TODO: Implement security status update
    }
}

// MARK: - Extensions
extension ViewController: UITextFieldDelegate {
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        if textField == aiInputTextField {
            aiSendButtonTapped(aiSendButton)
            return true
        }
        return false
    }
}

