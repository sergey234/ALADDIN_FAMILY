/**
 * VPN Activity Tracker
 * –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç VPN –∫–ª–∏–µ–Ω—Ç
 * –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–æ—Å–±–µ—Ä–µ–≥–∞—é—â–∏–º–∏ —Ä–µ–∂–∏–º–∞–º–∏
 */

class VPNActivityTracker {
    constructor() {
        this.lastActivityTime = Date.now();
        this.activityLog = [];
        this.maxLogSize = 100;
        this.isInitialized = false;
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        this.settings = {
            logToConsole: true,
            sendToBackend: false,  // TODO: –í–∫–ª—é—á–∏—Ç—å –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç API
            updateInterval: 30000   // 30 —Å–µ–∫—É–Ω–¥
        };
        
        this.init();
    }
    
    init() {
        if (this.isInitialized) return;
        
        console.log('‚ö° VPN Activity Tracker: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...');
        
        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –≤—Å–µ —Ç–∏–ø—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        const events = [
            'touchstart', 'touchmove', 'touchend',
            'mousedown', 'mousemove', 'mouseup',
            'scroll', 'keypress', 'click',
            'input', 'change'
        ];
        
        events.forEach(event => {
            document.addEventListener(event, (e) => this.recordActivity(event, e), 
                { passive: true, capture: true });
        });
        
        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å/–±–ª—é—Ä –æ–∫–Ω–∞
        window.addEventListener('focus', () => this.recordActivity('window_focus'));
        window.addEventListener('blur', () => this.recordActivity('window_blur'));
        
        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        document.addEventListener('visibilitychange', () => {
            this.recordActivity(document.hidden ? 'page_hidden' : 'page_visible');
        });
        
        // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º idle –≤—Ä–µ–º—è
        setInterval(() => this.checkIdleStatus(), 60000); // –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        
        // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        setInterval(() => this.sendStatusToVPN(), this.settings.updateInterval);
        
        this.isInitialized = true;
        console.log('‚úÖ VPN Activity Tracker: –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
    }
    
    recordActivity(type, event = null) {
        const now = Date.now();
        const timeSinceLastActivity = now - this.lastActivityTime;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        this.lastActivityTime = now;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–≥
        const logEntry = {
            type,
            timestamp: now,
            timeSinceLastActivity,
            page: window.location.pathname
        };
        
        this.activityLog.push(logEntry);
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ª–æ–≥–∞
        if (this.activityLog.length > this.maxLogSize) {
            this.activityLog.shift();
        }
        
        // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ—Å–ª–µ –¥–æ–ª–≥–æ–≥–æ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è
        if (timeSinceLastActivity > 300000) { // 5 –º–∏–Ω—É—Ç
            this.onWakeUp(timeSinceLastActivity);
        }
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º VPN –∫–ª–∏–µ–Ω—Ç –æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        this.notifyVPNActivity();
    }
    
    onWakeUp(idleTime) {
        const idleMinutes = Math.floor(idleTime / 60000);
        console.log(`‚ö° –ü—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ –ø–æ—Å–ª–µ ${idleMinutes} –º–∏–Ω—É—Ç –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è
        this.sendEventToVPN('wake_up', {
            idle_time: idleTime,
            idle_minutes: idleMinutes
        });
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if (idleMinutes > 15) {
            this.showNotification(
                `‚ö° VPN –≤–æ–∑–æ–±–Ω–æ–≤–∏–ª –ø–æ–ª–Ω—É—é –∑–∞—â–∏—Ç—É –ø–æ—Å–ª–µ ${idleMinutes} –º–∏–Ω—É—Ç`,
                'info'
            );
        }
    }
    
    checkIdleStatus() {
        const idleTime = this.getIdleTime();
        const idleMinutes = Math.floor(idleTime / 60000);
        
        if (this.settings.logToConsole) {
            console.log(`‚è±Ô∏è Idle time: ${idleMinutes} –º–∏–Ω—É—Ç`);
        }
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
        if (idleMinutes === 5) {
            this.showNotification('‚ö° VPN –ø–µ—Ä–µ–∫–ª—é—á—ë–Ω –≤ –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º', 'info');
        } else if (idleMinutes === 15) {
            this.showNotification('‚ö° VPN –ø–µ—Ä–µ–∫–ª—é—á—ë–Ω –≤ —ç–∫–æ–Ω–æ–º–Ω—ã–π —Ä–µ–∂–∏–º', 'info');
        } else if (idleMinutes === 30) {
            this.showNotification('üí§ VPN –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –±–∞—Ç–∞—Ä–µ–∏', 'warning');
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        this.sendEventToVPN('idle_check', {
            idle_time: idleTime,
            idle_minutes: idleMinutes
        });
    }
    
    getIdleTime() {
        return Date.now() - this.lastActivityTime;
    }
    
    getIdleMinutes() {
        return Math.floor(this.getIdleTime() / 60000);
    }
    
    notifyVPNActivity() {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ VPN –∫–ª–∏–µ–Ω—Ç —á–µ—Ä–µ–∑ API
        if (this.settings.sendToBackend) {
            this.sendEventToVPN('user_activity', {
                timestamp: Date.now(),
                page: window.location.pathname
            });
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º localStorage –¥–ª—è –¥—Ä—É–≥–∏—Ö –≤–∫–ª–∞–¥–æ–∫
        localStorage.setItem('vpn_last_activity', Date.now().toString());
    }
    
    sendEventToVPN(eventType, data) {
        // TODO: –†–µ–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ API
        const event = {
            event: eventType,
            data: data,
            timestamp: Date.now()
        };
        
        if (this.settings.logToConsole) {
            console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ VPN:', event);
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏
        const events = JSON.parse(localStorage.getItem('vpn_events') || '[]');
        events.push(event);
        if (events.length > 50) events.shift();
        localStorage.setItem('vpn_events', JSON.stringify(events));
    }
    
    sendStatusToVPN() {
        const status = this.getStatus();
        
        if (this.settings.sendToBackend) {
            this.sendEventToVPN('status_update', status);
        }
    }
    
    getStatus() {
        const idleTime = this.getIdleTime();
        const idleMinutes = this.getIdleMinutes();
        
        return {
            idle_time: idleTime,
            idle_minutes: idleMinutes,
            last_activity: this.lastActivityTime,
            activity_count: this.activityLog.length,
            current_page: window.location.pathname,
            is_visible: !document.hidden,
            has_focus: document.hasFocus()
        };
    }
    
    getStats() {
        const status = this.getStatus();
        const activityTypes = {};
        
        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–∏–ø—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        this.activityLog.forEach(log => {
            activityTypes[log.type] = (activityTypes[log.type] || 0) + 1;
        });
        
        return {
            ...status,
            activity_types: activityTypes,
            total_events: this.activityLog.length
        };
    }
    
    showNotification(message, type = 'info') {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–∏ –º—ã —É–∂–µ —Ç–∞–∫–æ–µ –∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const lastNotification = localStorage.getItem('last_vpn_notification');
        if (lastNotification === message) return;
        
        localStorage.setItem('last_vpn_notification', message);
        
        const notification = document.createElement('div');
        notification.textContent = message;
        
        const colors = {
            'info': '#3B82F6',
            'success': '#10B981',
            'warning': '#F59E0B',
            'error': '#EF4444'
        };
        
        notification.style.cssText = `
            position: fixed;
            top: 80px;
            left: 50%;
            transform: translateX(-50%);
            background: ${colors[type] || colors.info};
            color: white;
            padding: 12px 20px;
            border-radius: 10px;
            font-size: 12px;
            font-weight: 500;
            z-index: 10001;
            box-shadow: 0 4px 12px rgba(0,0,0,0.3);
            max-width: 280px;
            text-align: center;
        `;
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
            notification.remove();
            localStorage.removeItem('last_vpn_notification');
        }, 3000);
    }
    
    // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    debug() {
        console.log('=== VPN Activity Tracker Debug ===');
        console.log('Status:', this.getStatus());
        console.log('Stats:', this.getStats());
        console.log('Recent Activity:', this.activityLog.slice(-10));
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
let vpnActivityTracker;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
        vpnActivityTracker = new VPNActivityTracker();
    });
} else {
    vpnActivityTracker = new VPNActivityTracker();
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Å–∫—Ä–∏–ø—Ç–∞—Ö
window.VPNActivityTracker = VPNActivityTracker;
window.vpnActivityTracker = vpnActivityTracker;

console.log('üì¶ VPN Activity Tracker –∑–∞–≥—Ä—É–∂–µ–Ω');


