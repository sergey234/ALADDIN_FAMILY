#!/usr/bin/env python3
"""
–ú–æ–±–∏–ª—å–Ω—ã–π API –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ ALADDIN
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –º–æ–±–∏–ª—å–Ω—ã–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º–∏
"""

import sys
import os
import json
import time
import asyncio
from pathlib import Path
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
import hashlib
import hmac
import base64

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(str(Path(__file__).parent.parent))


class MobileAPI:
    """–ú–æ–±–∏–ª—å–Ω—ã–π API –¥–ª—è —Å–∏—Å—Ç–µ–º—ã ALADDIN"""

    def __init__(self):
        self.devices = {}
        self.family_groups = {}
        self.notifications = []
        self.offline_data = {}
        self.push_tokens = {}

    def register_device(self, device_data: Dict[str, Any]) -> Dict[str, Any]:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        try:
            device_id = device_data.get('device_id')
            device_type = device_data.get('device_type', 'unknown')
            app_version = device_data.get('app_version', '1.0.0')
            family_id = device_data.get('family_id')

            if not device_id:
                return {
                    'success': False,
                    'error': 'device_id is required'
                }

            # –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            device_token = self._generate_device_token(device_id)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
            self.devices[device_id] = {
                'device_id': device_id,
                'device_type': device_type,
                'app_version': app_version,
                'family_id': family_id,
                'device_token': device_token,
                'registered_at': datetime.now().isoformat(),
                'last_seen': datetime.now().isoformat(),
                'status': 'active'
            }

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–µ–º–µ–π–Ω—É—é –≥—Ä—É–ø–ø—É
            if family_id:
                if family_id not in self.family_groups:
                    self.family_groups[family_id] = []
                self.family_groups[family_id].append(device_id)

            return {
                'success': True,
                'device_token': device_token,
                'expires_in': 3600,
                'permissions': ['read', 'notify', 'location']
            }

        except Exception as e:
            return {
                'success': False,
                'error': str(e)
            }

    def authenticate_device(self, device_token: str) -> Dict[str, Any]:
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ —Ç–æ–∫–µ–Ω—É"""
        try:
            # –ò—â–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ —Ç–æ–∫–µ–Ω—É
            device = None
            for dev_id, dev_data in self.devices.items():
                if dev_data.get('device_token') == device_token:
                    device = dev_data
                    break

            if not device:
                return {
                    'success': False,
                    'error': 'Invalid device token'
                }

            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è
            device['last_seen'] = datetime.now().isoformat()

            return {
                'success': True,
                'device_id': device['device_id'],
                'device_type': device['device_type'],
                'family_id': device.get('family_id'),
                'permissions': ['read', 'notify', 'location']
            }

        except Exception as e:
            return {
                'success': False,
                'error': str(e)
            }

    def send_notification(
            self, notification_data: Dict[str, Any]) -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            device_token = notification_data.get('device_token')
            title = notification_data.get('title', 'ALADDIN Security')
            message = notification_data.get('message', '')
            priority = notification_data.get('priority', 'normal')
            action = notification_data.get('action', 'view_details')

            if not device_token:
                return {
                    'success': False,
                    'error': 'device_token is required'
                }

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
            auth_result = self.authenticate_device(device_token)
            if not auth_result['success']:
                return auth_result

            # –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            notification_id = f"notif_{int(time.time())}"
            notification = {
                'id': notification_id,
                'device_token': device_token,
                'title': title,
                'message': message,
                'priority': priority,
                'action': action,
                'sent_at': datetime.now().isoformat(),
                'status': 'sent'
            }

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            self.notifications.append(notification)

            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã –≤—ã–∑–æ–≤ FCM/APNS
            print(f"üì± Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {title}")

            return {
                'success': True,
                'notification_id': notification_id,
                'sent_at': notification['sent_at']
            }

        except Exception as e:
            return {
                'success': False,
                'error': str(e)
            }

    def get_offline_data(self, device_token: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
            auth_result = self.authenticate_device(device_token)
            if not auth_result['success']:
                return auth_result

            family_id = auth_result.get('family_id')

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–∞
            offline_data = {
                'security_rules': self._get_security_rules(),
                'blocked_sites': self._get_blocked_sites(),
                'family_settings': self._get_family_settings(family_id),
                'emergency_contacts': self._get_emergency_contacts(family_id),
                'last_sync': datetime.now().isoformat()
            }

            return {
                'success': True,
                'offline_data': offline_data,
                'last_sync': offline_data['last_sync']
            }

        except Exception as e:
            return {
                'success': False,
                'error': str(e)
            }

    def update_location(self, device_token: str,
                        location_data: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
            auth_result = self.authenticate_device(device_token)
            if not auth_result['success']:
                return auth_result

            device_id = auth_result['device_id']
            latitude = location_data.get('latitude')
            longitude = location_data.get('longitude')
            accuracy = location_data.get('accuracy', 0)

            if not latitude or not longitude:
                return {
                    'success': False,
                    'error': 'latitude and longitude are required'
                }

            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            if device_id in self.devices:
                self.devices[device_id]['location'] = {
                    'latitude': latitude,
                    'longitude': longitude,
                    'accuracy': accuracy,
                    'updated_at': datetime.now().isoformat()
                }

            return {
                'success': True,
                'message': 'Location updated'
            }

        except Exception as e:
            return {
                'success': False,
                'error': str(e)
            }

    def get_family_devices(self, device_token: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —Å–µ–º—å–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
            auth_result = self.authenticate_device(device_token)
            if not auth_result['success']:
                return auth_result

            family_id = auth_result.get('family_id')
            if not family_id:
                return {
                    'success': False,
                    'error': 'Device not associated with family'
                }

            # –ü–æ–ª—É—á–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å–µ–º—å–∏
            family_devices = []
            for device_id in self.family_groups.get(family_id, []):
                if device_id in self.devices:
                    device = self.devices[device_id].copy()
                    # –£–±–∏—Ä–∞–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    device.pop('device_token', None)
                    family_devices.append(device)

            return {
                'success': True,
                'family_id': family_id,
                'devices': family_devices,
                'count': len(family_devices)
            }

        except Exception as e:
            return {
                'success': False,
                'error': str(e)
            }

    def report_security_event(self, device_token: str,
                              event_data: Dict[str, Any]) -> Dict[str, Any]:
        """–û—Ç—á–µ—Ç –æ —Å–æ–±—ã—Ç–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
            auth_result = self.authenticate_device(device_token)
            if not auth_result['success']:
                return auth_result

            device_id = auth_result['device_id']
            event_type = event_data.get('event_type')

            if not event_type:
                return {
                    'success': False,
                    'error': 'event_type is required'
                }

            # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            event_id = f"mobile_evt_{int(time.time())}"

            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã –≤—ã–∑–æ–≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
            # –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            print(f"üîí –°–æ–±—ã—Ç–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –æ—Ç {device_id}: {event_type}")

            return {
                'success': True,
                'event_id': event_id,
                'message': 'Security event reported'
            }

        except Exception as e:
            return {
                'success': False,
                'error': str(e)
            }

    def _generate_device_token(self, device_id: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        secret = "aladdin_mobile_secret_key_2025"
        timestamp = str(int(time.time()))
        data = f"{device_id}:{timestamp}"
        token = hmac.new(
            secret.encode(),
            data.encode(),
            hashlib.sha256
        ).hexdigest()
        return f"{token[:32]}.{timestamp}"

    def _get_security_rules(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–∞"""
        return [
            {
                'id': 'rule_001',
                'name': 'block_suspicious_sites',
                'type': 'url_filter',
                'enabled': True,
                'pattern': 'malware|phishing|suspicious'
            },
            {
                'id': 'rule_002',
                'name': 'parental_control',
                'type': 'content_filter',
                'enabled': True,
                'categories': ['adult', 'violence', 'gambling']
            }
        ]

    def _get_blocked_sites(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∞–π—Ç–æ–≤"""
        return [
            'malware.example.com',
            'phishing.example.com',
            'adult-content.example.com'
        ]

    def _get_family_settings(self, family_id: Optional[str]) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–µ–º—å–∏"""
        if not family_id:
            return {}

        return {
            'family_id': family_id,
            'parental_controls': {
                'enabled': True,
                'max_screen_time': 120,
                'bedtime': '21:00'
            },
            'child_protection': {
                'enabled': True,
                'age_restrictions': True,
                'location_tracking': True
            }
        }

    def _get_emergency_contacts(
            self, family_id: Optional[str]) -> List[Dict[str, str]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
        return [
            {
                'name': 'Emergency Services',
                'phone': '+7-800-123-45-67',
                'type': 'emergency'
            },
            {
                'name': 'Family Contact',
                'phone': '+7-900-123-45-67',
                'type': 'family'
            }
        ]


class MobileAPIServer:
    """–°–µ—Ä–≤–µ—Ä –º–æ–±–∏–ª—å–Ω–æ–≥–æ API"""

    def __init__(self, host: str = '0.0.0.0', port: int = 8001):
        self.host = host
        self.port = port
        self.api = MobileAPI()
        self.running = False

    def start(self):
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –º–æ–±–∏–ª—å–Ω–æ–≥–æ API"""
        try:
            print(
                f"üöÄ –ó–∞–ø—É—Å–∫ –º–æ–±–∏–ª—å–Ω–æ–≥–æ API —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ {self.host}:{self.port}")
            print(
                "üì± API –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: "
                "http://localhost:8001/mobile/api/v1"
            )
            print("üîó –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:8001/docs")
            print("=" * 60)

            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã Flask/FastAPI —Å–µ—Ä–≤–µ—Ä
            # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –∏–º–∏—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É
            self.running = True

            while self.running:
                time.sleep(1)

        except KeyboardInterrupt:
            print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–≥–æ API —Å–µ—Ä–≤–µ—Ä–∞")
            self.running = False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            self.running = False

    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
        self.running = False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    server = MobileAPIServer()
    server.start()


if __name__ == "__main__":
    main()
