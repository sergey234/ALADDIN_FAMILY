#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü–û–õ–ù–´–ô –û–¢–ß–ï–¢ –û –°–ò–°–¢–ï–ú–ï ALADDIN
"""

import os
import ast
import sys
from collections import defaultdict

def generate_final_report():
    print('üîç –ü–û–õ–ù–´–ô –û–¢–ß–ï–¢ –û –°–ò–°–¢–ï–ú–ï ALADDIN')
    print('=' * 100)
    
    # –°–∫–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ Python —Ñ–∞–π–ª—ã
    all_py_files = []
    for root, dirs, files in os.walk('.'):
        for file in files:
            if file.endswith('.py') and not file.startswith('__'):
                all_py_files.append(os.path.join(root, file))

    print(f'üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:')
    print(f'   –í—Å–µ–≥–æ Python —Ñ–∞–π–ª–æ–≤: {len(all_py_files)}')
    print()

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∞—Å—Å—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏
    total_classes = 0
    total_functions = 0
    total_methods = 0
    total_ai_agents = 0
    total_bots = 0
    total_security_components = 0

    class_details = []
    function_details = []

    for file_path in all_py_files:
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –ü–∞—Ä—Å–∏–º AST
            tree = ast.parse(content)
            
            for node in ast.walk(tree):
                if isinstance(node, ast.ClassDef):
                    total_classes += 1
                    class_name = node.name
                    class_methods = 0
                    
                    # –°—á–∏—Ç–∞–µ–º –º–µ—Ç–æ–¥—ã –≤ –∫–ª–∞—Å—Å–µ
                    for item in node.body:
                        if isinstance(item, (ast.FunctionDef, ast.AsyncFunctionDef)):
                            class_methods += 1
                            total_methods += 1
                    
                    class_details.append({
                        'name': class_name,
                        'file': file_path,
                        'methods': class_methods
                    })
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
                    if 'agent' in class_name.lower() or 'ai' in class_name.lower():
                        total_ai_agents += 1
                    elif 'bot' in class_name.lower():
                        total_bots += 1
                    elif 'security' in class_name.lower() or 'protection' in class_name.lower():
                        total_security_components += 1
                        
                elif isinstance(node, (ast.FunctionDef, ast.AsyncFunctionDef)):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –≤–Ω—É—Ç—Ä–∏ –∫–ª–∞—Å—Å–∞
                    is_class_method = False
                    for parent in ast.walk(tree):
                        if isinstance(parent, ast.ClassDef):
                            if node in parent.body:
                                is_class_method = True
                                break
                    
                    if not is_class_method:
                        total_functions += 1
                        function_details.append({
                            'name': node.name,
                            'file': file_path
                        })
                        
        except Exception as e:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª—ã —Å –æ—à–∏–±–∫–∞–º–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
            continue

    print(f'üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–õ–ê–°–°–û–í –ò –§–£–ù–ö–¶–ò–ô:')
    print(f'   –í—Å–µ–≥–æ –∫–ª–∞—Å—Å–æ–≤: {total_classes}')
    print(f'   –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π: {total_functions}')
    print(f'   –í—Å–µ–≥–æ –º–µ—Ç–æ–¥–æ–≤: {total_methods}')
    print(f'   AI –∞–≥–µ–Ω—Ç–æ–≤: {total_ai_agents}')
    print(f'   –ë–æ—Ç–æ–≤: {total_bots}')
    print(f'   –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {total_security_components}')
    print(f'   –í–°–ï–ì–û –î–ï–ô–°–¢–í–ò–ô: {total_functions + total_methods}')
    print()

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-10 –∫–ª–∞—Å—Å–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –º–µ—Ç–æ–¥–æ–≤
    print(f'üìã –¢–û–ü-10 –ö–õ–ê–°–°–û–í –ü–û –ö–û–õ–ò–ß–ï–°–¢–í–£ –ú–ï–¢–û–î–û–í:')
    print('-' * 80)
    sorted_classes = sorted(class_details, key=lambda x: x['methods'], reverse=True)
    for i, cls in enumerate(sorted_classes[:10], 1):
        print(f'{i:2d}. {cls["name"]} - {cls["methods"]} –º–µ—Ç–æ–¥–æ–≤ ({os.path.basename(cls["file"])})')

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-10 AI –∞–≥–µ–Ω—Ç–æ–≤
    print(f'\nü§ñ –¢–û–ü-10 AI –ê–ì–ï–ù–¢–û–í:')
    print('-' * 80)
    ai_agents = [cls for cls in class_details if 'agent' in cls['name'].lower() or 'ai' in cls['name'].lower()]
    sorted_ai_agents = sorted(ai_agents, key=lambda x: x['methods'], reverse=True)
    for i, agent in enumerate(sorted_ai_agents[:10], 1):
        print(f'{i:2d}. {agent["name"]} - {agent["methods"]} –º–µ—Ç–æ–¥–æ–≤ ({os.path.basename(agent["file"])})')

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-10 –±–æ—Ç–æ–≤
    print(f'\nü§ñ –¢–û–ü-10 –ë–û–¢–û–í:')
    print('-' * 80)
    bots = [cls for cls in class_details if 'bot' in cls['name'].lower()]
    sorted_bots = sorted(bots, key=lambda x: x['methods'], reverse=True)
    for i, bot in enumerate(sorted_bots[:10], 1):
        print(f'{i:2d}. {bot["name"]} - {bot["methods"]} –º–µ—Ç–æ–¥–æ–≤ ({os.path.basename(bot["file"])})')

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-10 –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    print(f'\nüõ°Ô∏è –¢–û–ü-10 –ö–û–ú–ü–û–ù–ï–ù–¢–û–í –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò:')
    print('-' * 80)
    security_components = [cls for cls in class_details if 'security' in cls['name'].lower() or 'protection' in cls['name'].lower()]
    sorted_security = sorted(security_components, key=lambda x: x['methods'], reverse=True)
    for i, comp in enumerate(sorted_security[:10], 1):
        print(f'{i:2d}. {comp["name"]} - {comp["methods"]} –º–µ—Ç–æ–¥–æ–≤ ({os.path.basename(comp["file"])})')

    print(f'\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:')
    print(f'   –í—Å–µ–≥–æ Python —Ñ–∞–π–ª–æ–≤: {len(all_py_files)}')
    print(f'   –í—Å–µ–≥–æ –∫–ª–∞—Å—Å–æ–≤: {total_classes}')
    print(f'   –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π: {total_functions}')
    print(f'   –í—Å–µ–≥–æ –º–µ—Ç–æ–¥–æ–≤: {total_methods}')
    print(f'   AI –∞–≥–µ–Ω—Ç–æ–≤: {total_ai_agents}')
    print(f'   –ë–æ—Ç–æ–≤: {total_bots}')
    print(f'   –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {total_security_components}')
    print(f'   –í–°–ï–ì–û –î–ï–ô–°–¢–í–ò–ô: {total_functions + total_methods}')

if __name__ == "__main__":
    generate_final_report()
