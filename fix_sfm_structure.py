#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
SFM Structure Fixer - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã SFM —Ä–µ–µ—Å—Ç—Ä–∞
–ü–µ—Ä–µ–º–µ—â–∞–µ—Ç –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤–Ω—É—Ç—Ä—å –±–ª–æ–∫–∞ functions
"""

import json
import re
from datetime import datetime

def fix_sfm_structure():
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã SFM —Ä–µ–µ—Å—Ç—Ä–∞"""
    try:
        print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –°–¢–†–£–ö–¢–£–†–´ SFM –†–ï–ï–°–¢–†–ê")
        print("=" * 50)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
        with open('data/sfm/function_registry.json', 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ù–∞–π–¥–µ–º –ø–æ–∑–∏—Ü–∏—é –±–ª–æ–∫–∞ functions
        functions_pos = content.find('"functions":')
        print(f"–ü–æ–∑–∏—Ü–∏—è –±–ª–æ–∫–∞ functions: {functions_pos}")
        
        # –ù–∞–π–¥–µ–º –∑–∞–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É –±–ª–æ–∫–∞ functions
        brace_count = 0
        pos = functions_pos
        while pos < len(content):
            if content[pos] == '{':
                brace_count += 1
            elif content[pos] == '}':
                brace_count -= 1
                if brace_count == 0:
                    functions_end = pos
                    break
            pos += 1
        
        print(f"–ë–ª–æ–∫ functions –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏: {functions_end}")
        
        # –ù–∞–π–¥–µ–º –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ—Å–ª–µ –±–ª–æ–∫–∞ functions
        after_functions = content[functions_end:]
        
        # –ù–∞–π–¥–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
        functions_to_move = []
        function_patterns = [
            r'"smart_monitoring_system":\s*{[^}]*}(?:\s*,\s*"[^"]*":\s*{[^}]*})*',
            r'"intrusion_prevention":\s*{[^}]*}(?:\s*,\s*"[^"]*":\s*{[^}]*})*',
            r'"circuit_breaker":\s*{[^}]*}(?:\s*,\s*"[^"]*":\s*{[^}]*})*'
        ]
        
        for pattern in function_patterns:
            matches = re.findall(pattern, after_functions, re.DOTALL)
            functions_to_move.extend(matches)
        
        print(f"–ù–∞–π–¥–µ–Ω–æ —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è: {len(functions_to_move)}")
        
        if not functions_to_move:
            print("‚úÖ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —É–∂–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –º–µ—Å—Ç–µ")
            return
        
        # –°–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        before_functions = content[:functions_end]
        after_functions_clean = content[functions_end:]
        
        # –£–¥–∞–ª–∏–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –º–µ—Å—Ç–∞
        for func_content in functions_to_move:
            after_functions_clean = after_functions_clean.replace(func_content, '')
        
        # –î–æ–±–∞–≤–∏–º —Ñ—É–Ω–∫—Ü–∏–∏ –≤–Ω—É—Ç—Ä—å –±–ª–æ–∫–∞ functions
        functions_to_add = ',\n  ' + ',\n  '.join(functions_to_move)
        new_content = before_functions + functions_to_add + after_functions_clean
        
        # –û—á–∏—Å—Ç–∏–º –ª–∏—à–Ω–∏–µ –∑–∞–ø—è—Ç—ã–µ
        new_content = re.sub(r',\s*,', ',', new_content)
        new_content = re.sub(r',\s*}', '}', new_content)
        
        # –°–æ–∑–¥–∞–¥–∏–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        backup_name = f"data/sfm/function_registry_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(backup_name, 'w', encoding='utf-8') as f:
            f.write(content)
        print(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_name}")
        
        # –°–æ—Ö—Ä–∞–Ω–∏–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with open('data/sfm/function_registry.json', 'w', encoding='utf-8') as f:
            f.write(new_content)
        
        print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ SFM —Ä–µ–µ—Å—Ç—Ä–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        with open('data/sfm/function_registry.json', 'r', encoding='utf-8') as f:
            registry = json.load(f)
        
        functions = registry.get('functions', {})
        print(f"‚úÖ –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π –≤ —Ä–µ–µ—Å—Ç—Ä–µ: {len(functions)}")
        
        # –ü—Ä–æ–≤–µ—Ä–∏–º –ø–µ—Ä–µ–º–µ—â–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        moved_functions = ['smart_monitoring_system', 'intrusion_prevention', 'circuit_breaker']
        for func_name in moved_functions:
            if func_name in functions:
                print(f"‚úÖ {func_name} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞")
            else:
                print(f"‚ùå {func_name} –ù–ï –Ω–∞–π–¥–µ–Ω–∞")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

if __name__ == "__main__":
    fix_sfm_structure()