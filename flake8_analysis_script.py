#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Flake8 Analysis Script –¥–ª—è –Ω–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ ALADDIN
–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ PEP8 —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º

–ê–≤—Ç–æ—Ä: ALADDIN Security Team
–í–µ—Ä—Å–∏—è: 1.0
–î–∞—Ç–∞: 2025-01-27
"""

import ast
import re
import sys
from pathlib import Path
from typing import List, Dict, Any

class Flake8Analyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∫–æ–¥–∞ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ PEP8"""
    
    def __init__(self, max_line_length: int = 120):
        self.max_line_length = max_line_length
        self.errors = []
        self.warnings = []
        
    def analyze_file(self, file_path: str) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ –Ω–∞ –æ—à–∏–±–∫–∏ flake8"""
        self.errors = []
        self.warnings = []
        
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
                lines = content.split('\n')
            
            # –ê–Ω–∞–ª–∏–∑ –¥–ª–∏–Ω—ã —Å—Ç—Ä–æ–∫
            self._check_line_length(lines)
            
            # –ê–Ω–∞–ª–∏–∑ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
            self._check_syntax(content)
            
            # –ê–Ω–∞–ª–∏–∑ –∏–º–ø–æ—Ä—Ç–æ–≤
            self._check_imports(lines)
            
            # –ê–Ω–∞–ª–∏–∑ –æ—Ç—Å—Ç—É–ø–æ–≤
            self._check_indentation(lines)
            
            # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–µ–ª–æ–≤
            self._check_whitespace(lines)
            
            # –ê–Ω–∞–ª–∏–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
            self._check_comments(lines)
            
            return {
                "file": file_path,
                "total_lines": len(lines),
                "errors": len(self.errors),
                "warnings": len(self.warnings),
                "error_details": self.errors,
                "warning_details": self.warnings,
                "quality_score": self._calculate_quality_score(len(lines))
            }
            
        except Exception as e:
            return {
                "file": file_path,
                "error": str(e),
                "quality_score": 0
            }
    
    def _check_line_length(self, lines: List[str]):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã —Å—Ç—Ä–æ–∫"""
        for i, line in enumerate(lines, 1):
            if len(line) > self.max_line_length:
                self.errors.append({
                    "line": i,
                    "code": "E501",
                    "message": f"line too long ({len(line)} > {self.max_line_length} characters)",
                    "severity": "error"
                })
    
    def _check_syntax(self, content: str):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ Python"""
        try:
            ast.parse(content)
        except SyntaxError as e:
            self.errors.append({
                "line": e.lineno,
                "code": "E999",
                "message": f"syntax error: {e.msg}",
                "severity": "error"
            })
    
    def _check_imports(self, lines: List[str]):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤"""
        import_line = False
        for i, line in enumerate(lines, 1):
            stripped = line.strip()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—è–¥–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤
            if stripped.startswith('import ') or stripped.startswith('from '):
                if not import_line:
                    import_line = True
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–±–µ–ª–æ–≤ –ø–æ—Å–ª–µ import
                if 'import ' in stripped and not re.match(r'^import\s+\w', stripped):
                    self.warnings.append({
                        "line": i,
                        "code": "E401",
                        "message": "multiple imports on one line",
                        "severity": "warning"
                    })
            elif import_line and stripped and not stripped.startswith('#'):
                import_line = False
    
    def _check_indentation(self, lines: List[str]):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—Ç—É–ø–æ–≤"""
        for i, line in enumerate(lines, 1):
            if line.strip():  # –ù–µ–ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–º–µ—à–∞–Ω–Ω—ã—Ö —Ç–∞–±–æ–≤ –∏ –ø—Ä–æ–±–µ–ª–æ–≤
                if '\t' in line and '    ' in line:
                    self.errors.append({
                        "line": i,
                        "code": "E101",
                        "message": "indentation contains mixed spaces and tabs",
                        "severity": "error"
                    })
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç—Å—Ç—É–ø–æ–≤
                leading_spaces = len(line) - len(line.lstrip())
                if leading_spaces % 4 != 0 and leading_spaces > 0:
                    self.warnings.append({
                        "line": i,
                        "code": "E111",
                        "message": "indentation is not a multiple of four",
                        "severity": "warning"
                    })
    
    def _check_whitespace(self, lines: List[str]):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–±–µ–ª–æ–≤"""
        for i, line in enumerate(lines, 1):
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–±–µ–ª–æ–≤ –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏
            if line.endswith(' ') or line.endswith('\t'):
                self.warnings.append({
                    "line": i,
                    "code": "W291",
                    "message": "trailing whitespace",
                    "severity": "warning"
                })
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–±–µ–ª–æ–≤ –ø–µ—Ä–µ–¥ –¥–≤–æ–µ—Ç–æ—á–∏–µ–º
            if re.search(r'\s+:', line):
                self.warnings.append({
                    "line": i,
                    "code": "E203",
                    "message": "whitespace before ':'",
                    "severity": "warning"
                })
    
    def _check_comments(self, lines: List[str]):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"""
        for i, line in enumerate(lines, 1):
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ TODO, FIXME
            if '#' in line:
                comment = line.split('#')[1].strip()
                if comment.upper().startswith(('TODO', 'FIXME', 'XXX', 'HACK')):
                    self.warnings.append({
                        "line": i,
                        "code": "W291",
                        "message": f"found {comment.split()[0].upper()} comment",
                        "severity": "warning"
                    })
    
    def _calculate_quality_score(self, total_lines: int) -> float:
        """–†–∞—Å—á–µ—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞"""
        if total_lines == 0:
            return 0.0
        
        error_penalty = len(self.errors) * 10
        warning_penalty = len(self.warnings) * 2
        
        base_score = 100.0
        final_score = max(0.0, base_score - error_penalty - warning_penalty)
        
        return round(final_score, 1)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç FLAKE8 –ê–ù–ê–õ–ò–ó –¢–†–ï–• –ù–û–í–´–• –ö–û–ú–ü–û–ù–ï–ù–¢–û–í ALADDIN")
    print("=" * 60)
    
    analyzer = Flake8Analyzer(max_line_length=120)
    
    files_to_analyze = [
        "advanced_threat_intelligence.py",
        "advanced_behavioral_analytics.py", 
        "enhanced_security_integration.py"
    ]
    
    total_errors = 0
    total_warnings = 0
    total_lines = 0
    quality_scores = []
    
    for filename in files_to_analyze:
        print(f"\nüìÅ –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞: {filename}")
        print("-" * 40)
        
        result = analyzer.analyze_file(filename)
        
        if "error" in result:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {result['error']}")
            continue
        
        print(f"üìä –°—Ç—Ä–æ–∫ –∫–æ–¥–∞: {result['total_lines']}")
        print(f"‚ùå –û—à–∏–±–∫–∏: {result['errors']}")
        print(f"‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {result['warnings']}")
        print(f"‚≠ê –ö–∞—á–µ—Å—Ç–≤–æ: {result['quality_score']}/100")
        
        # –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫
        if result['error_details']:
            print("\nüîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫:")
            for error in result['error_details']:
                print(f"  –°—Ç—Ä–æ–∫–∞ {error['line']}: {error['code']} - {error['message']}")
        
        # –î–µ—Ç–∞–ª–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
        if result['warning_details']:
            print("\n‚ö†Ô∏è  –î–µ—Ç–∞–ª–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π:")
            for warning in result['warning_details']:
                print(f"  –°—Ç—Ä–æ–∫–∞ {warning['line']}: {warning['code']} - {warning['message']}")
        
        total_errors += result['errors']
        total_warnings += result['warnings']
        total_lines += result['total_lines']
        quality_scores.append(result['quality_score'])
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\n" + "=" * 60)
    print("üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    print("=" * 60)
    print(f"üìÅ –§–∞–π–ª–æ–≤ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {len(files_to_analyze)}")
    print(f"üìÑ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: {total_lines}")
    print(f"‚ùå –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫: {total_errors}")
    print(f"‚ö†Ô∏è  –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {total_warnings}")
    
    if quality_scores:
        avg_quality = sum(quality_scores) / len(quality_scores)
        print(f"‚≠ê –°—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ: {avg_quality:.1f}/100")
        
        if avg_quality >= 95:
            print("üèÜ –ö–ê–ß–ï–°–¢–í–û: A+ (–û–¢–õ–ò–ß–ù–û)")
        elif avg_quality >= 90:
            print("ü•á –ö–ê–ß–ï–°–¢–í–û: A (–û–ß–ï–ù–¨ –•–û–†–û–®–û)")
        elif avg_quality >= 80:
            print("ü•à –ö–ê–ß–ï–°–¢–í–û: B (–•–û–†–û–®–û)")
        elif avg_quality >= 70:
            print("ü•â –ö–ê–ß–ï–°–¢–í–û: C (–£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û)")
        else:
            print("‚ùå –ö–ê–ß–ï–°–¢–í–û: –¢–†–ï–ë–£–ï–¢ –£–õ–£–ß–®–ï–ù–ò–Ø")
    
    # –û—Ü–µ–Ω–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
    if total_errors == 0 and total_warnings <= 5:
        print("\n‚úÖ –ì–û–¢–û–í–ù–û–°–¢–¨ –ö –ü–†–û–î–ê–ö–®–ù: 100%")
        print("üöÄ –í–°–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´ –ì–û–¢–û–í–´ –ö –ó–ê–ü–£–°–ö–£!")
    elif total_errors == 0:
        print("\n‚ö†Ô∏è  –ì–û–¢–û–í–ù–û–°–¢–¨ –ö –ü–†–û–î–ê–ö–®–ù: 95%")
        print("üîß –¢–†–ï–ë–£–Æ–¢–°–Ø –ú–ò–ù–û–†–ù–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø")
    else:
        print("\n‚ùå –ì–û–¢–û–í–ù–û–°–¢–¨ –ö –ü–†–û–î–ê–ö–®–ù: < 90%")
        print("üõ†Ô∏è  –¢–†–ï–ë–£–Æ–¢–°–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –û–®–ò–ë–û–ö")
    
    print("\n" + "=" * 60)

if __name__ == "__main__":
    main()