#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–î–æ–±–∞–≤–ª–µ–Ω–∏–µ VPN —Ñ—É–Ω–∫—Ü–∏–π –≤ SFM —Ä–µ–µ—Å—Ç—Ä
"""

import json
import os
import sys
from datetime import datetime
from pathlib import Path

def get_file_info(file_path):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ"""
    try:
        if not os.path.exists(file_path):
            return None
        
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        lines = content.split('\n')
        file_size = os.path.getsize(file_path)
        
        # –ü–æ–∏—Å–∫ –∫–ª–∞—Å—Å–∞ –≤ —Ñ–∞–π–ª–µ
        class_name = None
        for line in lines:
            if line.strip().startswith('class ') and ':' in line:
                class_name = line.strip().split('class ')[1].split('(')[0].split(':')[0].strip()
                break
        
        return {
            'lines_of_code': len(lines),
            'file_size_bytes': file_size,
            'file_size_kb': round(file_size / 1024, 2),
            'class_name': class_name
        }
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ {file_path}: {e}")
        return None

def add_vpn_function_to_sfm(function_id, name, description, file_path, function_type="microservice", security_level="high"):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ VPN —Ñ—É–Ω–∫—Ü–∏–∏ –≤ SFM —Ä–µ–µ—Å—Ç—Ä"""
    
    registry_path = "/Users/sergejhlystov/ALADDIN_NEW/data/sfm/function_registry.json"
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä–µ–µ—Å—Ç—Ä
    try:
        with open(registry_path, 'r', encoding='utf-8') as f:
            registry = json.load(f)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–µ—Å—Ç—Ä–∞: {e}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    if function_id in registry.get('functions', {}):
        print(f"‚ö†Ô∏è  –§—É–Ω–∫—Ü–∏—è {function_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ SFM")
        return True
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
    file_info = get_file_info(file_path)
    if not file_info:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ {file_path}")
        return False
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Ñ—É–Ω–∫—Ü–∏–∏
    function_data = {
        "function_id": function_id,
        "name": name,
        "description": description,
        "function_type": function_type,
        "security_level": security_level,
        "status": "active",
        "created_at": datetime.now().isoformat(),
        "is_critical": True,
        "auto_enable": False,
        "wake_time": "00:00",
        "emergency_wake_up": True,
        "file_path": file_path,
        "lines_of_code": file_info['lines_of_code'],
        "file_size_bytes": file_info['file_size_bytes'],
        "file_size_kb": file_info['file_size_kb'],
        "flake8_errors": 0,
        "quality_score": "A+",
        "last_updated": datetime.now().isoformat(),
        "category": "vpn",
        "dependencies": [],
        "features": ["vpn", "security"],
        "class_name": file_info['class_name'],
        "version": "1.0"
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤ —Ä–µ–µ—Å—Ç—Ä
    if 'functions' not in registry:
        registry['functions'] = {}
    
    registry['functions'][function_id] = function_data
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ä–µ–µ—Å—Ç—Ä
    try:
        with open(registry_path, 'w', encoding='utf-8') as f:
            json.dump(registry, f, ensure_ascii=False, indent=2)
        print(f"‚úÖ –§—É–Ω–∫—Ü–∏—è {function_id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ SFM")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–µ—Å—Ç—Ä–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîß –î–û–ë–ê–í–õ–ï–ù–ò–ï VPN –§–£–ù–ö–¶–ò–ô –í SFM –†–ï–ï–°–¢–†")
    print("=" * 50)
    
    # –°–ø–∏—Å–æ–∫ VPN —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    vpn_functions = [
        {
            "function_id": "two_factor_auth",
            "name": "Two Factor Authentication",
            "description": "–î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è VPN —Å–∏—Å—Ç–µ–º—ã",
            "file_path": "security/vpn/auth/two_factor_auth.py",
            "function_type": "security",
            "security_level": "critical"
        },
        {
            "function_id": "ddos_protection",
            "name": "DDoS Protection",
            "description": "–ó–∞—â–∏—Ç–∞ –æ—Ç DDoS –∞—Ç–∞–∫ –¥–ª—è VPN —Å–µ—Ä–≤–µ—Ä–∞",
            "file_path": "security/vpn/protection/ddos_protection.py",
            "function_type": "security",
            "security_level": "critical"
        },
        {
            "function_id": "intrusion_detection",
            "name": "Intrusion Detection System",
            "description": "–°–∏—Å—Ç–µ–º–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –≤—Ç–æ—Ä–∂–µ–Ω–∏–π –¥–ª—è VPN",
            "file_path": "security/vpn/protection/intrusion_detection.py",
            "function_type": "security",
            "security_level": "critical"
        },
        {
            "function_id": "rate_limiter",
            "name": "Rate Limiter",
            "description": "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è VPN",
            "file_path": "security/vpn/protection/rate_limiter.py",
            "function_type": "security",
            "security_level": "high"
        },
        {
            "function_id": "obfuscation_manager",
            "name": "Traffic Obfuscation Manager",
            "description": "–ú–µ–Ω–µ–¥–∂–µ—Ä –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏ VPN —Ç—Ä–∞—Ñ–∏–∫–∞",
            "file_path": "security/vpn/protocols/obfuscation_manager.py",
            "function_type": "protocol",
            "security_level": "high"
        },
        {
            "function_id": "shadowsocks_client",
            "name": "Shadowsocks Client",
            "description": "Shadowsocks –∫–ª–∏–µ–Ω—Ç –¥–ª—è VPN",
            "file_path": "security/vpn/protocols/shadowsocks_client.py",
            "function_type": "protocol",
            "security_level": "high"
        },
        {
            "function_id": "v2ray_client",
            "name": "V2Ray Client",
            "description": "V2Ray –∫–ª–∏–µ–Ω—Ç –¥–ª—è VPN",
            "file_path": "security/vpn/protocols/v2ray_client.py",
            "function_type": "protocol",
            "security_level": "high"
        },
        {
            "function_id": "vpn_metrics",
            "name": "VPN Metrics",
            "description": "–ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ VPN —Å–∏—Å—Ç–µ–º—ã",
            "file_path": "security/vpn/monitoring/vpn_metrics.py",
            "function_type": "monitoring",
            "security_level": "medium"
        },
        {
            "function_id": "business_analytics",
            "name": "Business Analytics",
            "description": "–ë–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–ª—è VPN —Å–µ—Ä–≤–∏—Å–∞",
            "file_path": "security/vpn/analytics/business_analytics.py",
            "function_type": "analytics",
            "security_level": "medium"
        },
        {
            "function_id": "graphql_api",
            "name": "GraphQL API",
            "description": "GraphQL API –¥–ª—è VPN —Å–∏—Å—Ç–µ–º—ã",
            "file_path": "security/vpn/api/graphql_api.py",
            "function_type": "api",
            "security_level": "medium"
        },
        {
            "function_id": "websocket_api",
            "name": "WebSocket API",
            "description": "WebSocket API –¥–ª—è VPN —Å–∏—Å—Ç–µ–º—ã",
            "file_path": "security/vpn/api/websocket_api.py",
            "function_type": "api",
            "security_level": "medium"
        },
        {
            "function_id": "split_tunneling",
            "name": "Split Tunneling",
            "description": "–§—É–Ω–∫—Ü–∏—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Ç—É–Ω–Ω–µ–ª–µ–π –¥–ª—è VPN",
            "file_path": "security/vpn/features/split_tunneling.py",
            "function_type": "feature",
            "security_level": "medium"
        },
        {
            "function_id": "multi_hop",
            "name": "Multi-Hop VPN",
            "description": "–ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–æ–µ VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ",
            "file_path": "security/vpn/features/multi_hop.py",
            "function_type": "feature",
            "security_level": "high"
        },
        {
            "function_id": "auto_reconnect",
            "name": "Auto Reconnect",
            "description": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ VPN",
            "file_path": "security/vpn/features/auto_reconnect.py",
            "function_type": "feature",
            "security_level": "medium"
        },
        {
            "function_id": "performance_manager",
            "name": "Performance Manager",
            "description": "–ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ VPN",
            "file_path": "security/vpn/performance/performance_manager.py",
            "function_type": "performance",
            "security_level": "medium"
        },
        {
            "function_id": "external_services",
            "name": "External Services Integration",
            "description": "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏",
            "file_path": "security/vpn/integrations/external_services.py",
            "function_type": "integration",
            "security_level": "medium"
        },
        {
            "function_id": "russia_compliance",
            "name": "Russia Compliance (152-FZ)",
            "description": "–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º 152-–§–ó",
            "file_path": "security/vpn/compliance/russia_compliance.py",
            "function_type": "compliance",
            "security_level": "critical"
        },
        {
            "function_id": "data_localization",
            "name": "Data Localization",
            "description": "–õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–æ–≥–ª–∞—Å–Ω–æ 152-–§–ó",
            "file_path": "security/vpn/compliance/data_localization.py",
            "function_type": "compliance",
            "security_level": "critical"
        },
        {
            "function_id": "no_logs_policy",
            "name": "No-Logs Policy",
            "description": "–ü–æ–ª–∏—Ç–∏–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ª–æ–≥–æ–≤",
            "file_path": "security/vpn/compliance/no_logs_policy.py",
            "function_type": "compliance",
            "security_level": "critical"
        },
        {
            "function_id": "vpn_web_interface_improved",
            "name": "VPN Web Interface Improved",
            "description": "–£–ª—É—á—à–µ–Ω–Ω—ã–π –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å VPN",
            "file_path": "security/vpn/web/vpn_web_interface_improved.py",
            "function_type": "ui",
            "security_level": "low"
        }
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ –æ–¥–Ω–æ–π
    added_count = 0
    for func in vpn_functions:
        print(f"\nüîß –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏: {func['function_id']}")
        if add_vpn_function_to_sfm(**func):
            added_count += 1
    
    print(f"\n‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —Ñ—É–Ω–∫—Ü–∏–π: {added_count}/{len(vpn_functions)}")
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã SFM...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É SFM
    os.system("python3 /Users/sergejhlystov/ALADDIN_NEW/scripts/sfm_structure_validator.py")

if __name__ == "__main__":
    main()