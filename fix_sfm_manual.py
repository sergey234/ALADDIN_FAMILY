#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
SFM Manual Fixer - –†—É—á–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã SFM —Ä–µ–µ—Å—Ç—Ä–∞
"""

import json
import re
from datetime import datetime

def extract_function(content, start_pos):
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    brace_count = 0
    pos = start_pos
    while pos < len(content):
        if content[pos] == '{':
            brace_count += 1
        elif content[pos] == '}':
            brace_count -= 1
            if brace_count == 0:
                return content[start_pos:pos+1]
        pos += 1
    return None

def fix_sfm_manual():
    """–†—É—á–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã SFM —Ä–µ–µ—Å—Ç—Ä–∞"""
    try:
        print("üîß –†–£–ß–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –°–¢–†–£–ö–¢–£–†–´ SFM –†–ï–ï–°–¢–†–ê")
        print("=" * 50)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
        with open('data/sfm/function_registry.json', 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ù–∞–π–¥–µ–º –ø–æ–∑–∏—Ü–∏—é –±–ª–æ–∫–∞ functions
        functions_pos = content.find('"functions":')
        
        # –ù–∞–π–¥–µ–º –∑–∞–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É –±–ª–æ–∫–∞ functions
        brace_count = 0
        pos = functions_pos
        while pos < len(content):
            if content[pos] == '{':
                brace_count += 1
            elif content[pos] == '}':
                brace_count -= 1
                if brace_count == 0:
                    functions_end = pos
                    break
            pos += 1
        
        print(f"–ë–ª–æ–∫ functions –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏: {functions_end}")
        
        # –ù–∞–π–¥–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ—Å–ª–µ –±–ª–æ–∫–∞ functions
        after_functions = content[functions_end:]
        
        # –ò–∑–≤–ª–µ—á–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
        functions_to_move = []
        
        # smart_monitoring_system
        smart_monitoring_pos = after_functions.find('"smart_monitoring_system":')
        if smart_monitoring_pos != -1:
            smart_monitoring_func = extract_function(after_functions, smart_monitoring_pos)
            if smart_monitoring_func:
                functions_to_move.append(smart_monitoring_func)
                print("‚úÖ smart_monitoring_system –∏–∑–≤–ª–µ—á–µ–Ω–∞")
        
        # intrusion_prevention
        intrusion_pos = after_functions.find('"intrusion_prevention":')
        if intrusion_pos != -1:
            intrusion_func = extract_function(after_functions, intrusion_pos)
            if intrusion_func:
                functions_to_move.append(intrusion_func)
                print("‚úÖ intrusion_prevention –∏–∑–≤–ª–µ—á–µ–Ω–∞")
        
        # circuit_breaker
        circuit_breaker_pos = after_functions.find('"circuit_breaker":')
        if circuit_breaker_pos != -1:
            circuit_breaker_func = extract_function(after_functions, circuit_breaker_pos)
            if circuit_breaker_func:
                functions_to_move.append(circuit_breaker_func)
                print("‚úÖ circuit_breaker –∏–∑–≤–ª–µ—á–µ–Ω–∞")
        
        if not functions_to_move:
            print("‚úÖ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —É–∂–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –º–µ—Å—Ç–µ")
            return True
        
        print(f"–ù–∞–π–¥–µ–Ω–æ —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è: {len(functions_to_move)}")
        
        # –°–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        before_functions = content[:functions_end]
        after_functions_clean = content[functions_end:]
        
        # –£–¥–∞–ª–∏–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –º–µ—Å—Ç–∞
        for func_content in functions_to_move:
            after_functions_clean = after_functions_clean.replace(func_content, '')
        
        # –î–æ–±–∞–≤–∏–º —Ñ—É–Ω–∫—Ü–∏–∏ –≤–Ω—É—Ç—Ä—å –±–ª–æ–∫–∞ functions
        functions_to_add = ',\n  ' + ',\n  '.join(functions_to_move)
        new_content = before_functions + functions_to_add + after_functions_clean
        
        # –û—á–∏—Å—Ç–∏–º –ª–∏—à–Ω–∏–µ –∑–∞–ø—è—Ç—ã–µ –∏ –ø—Ä–æ–±–µ–ª—ã
        new_content = re.sub(r',\s*,+', ',', new_content)
        new_content = re.sub(r',\s*}', '}', new_content)
        new_content = re.sub(r'{\s*,', '{', new_content)
        
        # –°–æ–∑–¥–∞–¥–∏–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        backup_name = f"data/sfm/function_registry_backup_manual_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(backup_name, 'w', encoding='utf-8') as f:
            f.write(content)
        print(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_name}")
        
        # –°–æ—Ö—Ä–∞–Ω–∏–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with open('data/sfm/function_registry.json', 'w', encoding='utf-8') as f:
            f.write(new_content)
        
        print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ SFM —Ä–µ–µ—Å—Ç—Ä–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        try:
            with open('data/sfm/function_registry.json', 'r', encoding='utf-8') as f:
                registry = json.load(f)
            
            functions = registry.get('functions', {})
            print(f"‚úÖ –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π –≤ —Ä–µ–µ—Å—Ç—Ä–µ: {len(functions)}")
            
            # –ü—Ä–æ–≤–µ—Ä–∏–º –ø–µ—Ä–µ–º–µ—â–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
            moved_functions = ['smart_monitoring_system', 'intrusion_prevention', 'circuit_breaker']
            for func_name in moved_functions:
                if func_name in functions:
                    print(f"‚úÖ {func_name} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞")
                else:
                    print(f"‚ùå {func_name} –ù–ï –Ω–∞–π–¥–µ–Ω–∞")
            
            return True
            
        except json.JSONDecodeError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ JSON –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {e}")
            print(f"–°—Ç—Ä–æ–∫–∞: {e.lineno if hasattr(e, 'lineno') else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}")
            return False
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

if __name__ == "__main__":
    fix_sfm_manual()