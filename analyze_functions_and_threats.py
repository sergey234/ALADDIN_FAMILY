#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ê–Ω–∞–ª–∏–∑ —Ñ—É–Ω–∫—Ü–∏–π –∏ —É–≥—Ä–æ–∑ —Å–∏—Å—Ç–µ–º—ã ALADDIN Family Security System
"""

import re
import os

def analyze_functions_and_threats():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ—É–Ω–∫—Ü–∏–π –∏ —É–≥—Ä–æ–∑ –≤ —Å–∏—Å—Ç–µ–º–µ"""
    
    # –ß–∏—Ç–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
    with open('/Users/sergejhlystov/ALADDIN_NEW/ALADDIN_FAMILY_SECURITY_SYSTEM_COMPLETE_DOCUMENTATION.md', 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –ò—â–µ–º –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    functions_pattern = r'- \*\*–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\*\*\s*\n((?:  - .+\n?)*)'
    functions_matches = re.findall(functions_pattern, content, re.MULTILINE)
    
    all_functions = []
    all_threats = []
    
    print("=== –ê–ù–ê–õ–ò–ó –§–£–ù–ö–¶–ò–ô –ò –£–ì–†–û–ó –°–ò–°–¢–ï–ú–´ ALADDIN ===\n")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –º–æ–¥—É–ª—å
    module_pattern = r'\*\*([^*]+\.py)\*\*.*?\*\*–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\*\*\s*\n((?:  - .+\n?)*)\*\*–ó–∞—â–∏—â–∞–µ—Ç –æ—Ç:\*\* ((?:[^-]|-[^-])*)'
    module_matches = re.findall(module_pattern, content, re.DOTALL)
    
    total_functions = 0
    total_threats = 0
    modules_count = 0
    
    print("üìã –ú–û–î–£–õ–ò –ò –ò–• –§–£–ù–ö–¶–ò–ò:")
    print("=" * 50)
    
    for module_name, functions_text, threats_text in module_matches:
        modules_count += 1
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
        functions = re.findall(r'  - ([^-\n]+)', functions_text)
        functions = [f.strip() for f in functions if f.strip()]
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —É–≥—Ä–æ–∑—ã
        threats = re.findall(r'[^,]+', threats_text)
        threats = [t.strip() for t in threats if t.strip() and t.strip() != '**–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è:**']
        
        total_functions += len(functions)
        total_threats += len(threats)
        
        print(f"\nüîß {module_name}")
        print(f"   –§—É–Ω–∫—Ü–∏–π: {len(functions)}")
        print(f"   –£–≥—Ä–æ–∑: {len(threats)}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ–±—â–∏–µ —Å–ø–∏—Å–∫–∏
        all_functions.extend(functions)
        all_threats.extend(threats)
    
    # –ò—â–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–æ–¥—É–ª—è—Ö
    integrated_pattern = r'\*\*–ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò:\*\*\s*\n((?:    - .+\n?)*)'
    integrated_matches = re.findall(integrated_pattern, content, re.MULTILINE)
    
    integrated_functions = 0
    for match in integrated_matches:
        functions = re.findall(r'    - ([^-\n]+)', match)
        integrated_functions += len(functions)
        all_functions.extend([f.strip() for f in functions if f.strip()])
    
    # –ò—â–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ AURA
    aura_pattern = r'\*\*([^*]+)\*\*\s*\n- \*\*–§–∞–π–ª:\*\* ([^*]+)\n- \*\*–§—É–Ω–∫—Ü–∏—è:\*\* ([^*]+)\n- \*\*–ß—Ç–æ –¥–µ–ª–∞–µ—Ç:\*\* ([^*]+)\n- \*\*–ó–∞—â–∏—â–∞–µ—Ç –æ—Ç:\*\* ([^*]+)'
    aura_matches = re.findall(aura_pattern, content, re.MULTILINE)
    
    aura_functions = 0
    for aura_name, file_name, function_name, description, threats in aura_matches:
        aura_functions += 1
        all_functions.append(f"{function_name} - {description}")
        # –†–∞–∑–±–∏—Ä–∞–µ–º —É–≥—Ä–æ–∑—ã
        threat_list = re.findall(r'[^,]+', threats)
        all_threats.extend([t.strip() for t in threat_list if t.strip()])
    
    # –ò—â–µ–º –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—é
    gamification_functions = [
        "5 –∏–≥—Ä–æ–≤—ã—Ö —É—Ä–æ–≤–Ω–µ–π",
        "5 —Ç–∏–ø–æ–≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π", 
        "–°–∏—Å—Ç–µ–º–∞ –æ—á–∫–æ–≤",
        "–ù–∞–≥—Ä–∞–¥—ã –∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏",
        "–û–±—É—á–∞—é—â–∏–µ –∏–≥—Ä—ã",
        "–°–µ–º–µ–π–Ω—ã–µ –∫–≤–µ—Å—Ç—ã"
    ]
    
    all_functions.extend(gamification_functions)
    
    print(f"\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print("=" * 50)
    print(f"üîß –ú–æ–¥—É–ª–µ–π: {modules_count}")
    print(f"‚öôÔ∏è –û—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π: {total_functions}")
    print(f"üîó –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π: {integrated_functions}")
    print(f"üåü AURA —Ñ—É–Ω–∫—Ü–∏–π: {aura_functions}")
    print(f"üéÆ –ì–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π: {len(gamification_functions)}")
    print(f"üìà –í–°–ï–ì–û –§–£–ù–ö–¶–ò–ô: {len(all_functions)}")
    print(f"üõ°Ô∏è –í–°–ï–ì–û –£–ì–†–û–ó: {len(set(all_threats))}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø—ã —É–≥—Ä–æ–∑
    print(f"\nüõ°Ô∏è –ê–ù–ê–õ–ò–ó –¢–ò–ü–û–í –£–ì–†–û–ó:")
    print("=" * 50)
    
    threat_categories = {
        '–ö–∏–±–µ—Ä—É–≥—Ä–æ–∑—ã': ['–≤–∏—Ä—É—Å—ã', '—Ç—Ä–æ—è–Ω—ã', 'ransomware', '—à–ø–∏–æ–Ω—Å–∫–æ–µ', '–±–æ—Ç–Ω–µ—Ç—ã', 'ddos', '—Ñ–∏—à–∏–Ω–≥', '–≤—Ä–µ–¥–æ–Ω–æ—Å–Ω–æ–µ'],
        '–ú–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ': ['–º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ', '—Ñ–∏—à–∏–Ω–≥', '—Å–æ—Ü–∏–∞–ª—å–Ω–∞—è –∏–Ω–∂–µ–Ω–µ—Ä–∏—è', '–ø–æ–¥–¥–µ–ª—å–Ω—ã–µ', '–∞—Ñ–µ—Ä—ã'],
        '–î–µ—Ç—Å–∫–∏–µ —É–≥—Ä–æ–∑—ã': ['–Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç', '–∫–∏–±–µ—Ä–±—É–ª–ª–∏–Ω–≥', '–æ–ø–∞—Å–Ω—ã–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞', '–∏–≥—Ä–æ–≤–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å'],
        '–£—Ç–µ—á–∫–∏ –¥–∞–Ω–Ω—ã—Ö': ['–∫—Ä–∞–∂–∞ –ø–∞—Ä–æ–ª–µ–π', '—É—Ç–µ—á–∫–∏', '–∫–æ–º–ø—Ä–æ–º–µ—Ç–∞—Ü–∏—è', '–ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å', '—Å–ª–µ–∂–∫–∞'],
        '–ü–æ–¥–¥–µ–ª–∫–∏': ['deepfake', '—Å–ø—É—Ñ–∏–Ω–≥', '–ø–æ–¥–¥–µ–ª—å–Ω—ã–µ', '—Ñ–µ–π–∫–æ–≤—ã–µ'],
        '–°–µ–º–µ–π–Ω—ã–µ —É–≥—Ä–æ–∑—ã': ['—Å–µ–º–µ–π–Ω—ã–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã', '–∏–∑–æ–ª—è—Ü–∏—è', '—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã']
    }
    
    for category, keywords in threat_categories.items():
        count = 0
        for threat in set(all_threats):
            if any(keyword.lower() in threat.lower() for keyword in keywords):
                count += 1
        print(f"   {category}: {count} —Ç–∏–ø–æ–≤")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –º–æ–±–∏–ª—å–Ω—ã–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
    print(f"\nüì± –°–û–û–¢–í–ï–¢–°–¢–í–ò–ï –° –ú–û–ë–ò–õ–¨–ù–´–ú –ü–†–ò–õ–û–ñ–ï–ù–ò–ï–ú:")
    print("=" * 50)
    
    mobile_file = '/Users/sergejhlystov/ALADDIN_NEW/MOBILE_APP_INFO_SECTIONS.md'
    if os.path.exists(mobile_file):
        with open(mobile_file, 'r', encoding='utf-8') as f:
            mobile_content = f.read()
        
        # –ò—â–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ñ—É–Ω–∫—Ü–∏–π –∏ —É–≥—Ä–æ–∑
        functions_mentions = re.findall(r'(\d+)\+?\s*—Ñ—É–Ω–∫—Ü–∏', mobile_content, re.IGNORECASE)
        threats_mentions = re.findall(r'(\d+)\+?\s*—Ç–∏–ø–æ–≤?\s*—É–≥—Ä–æ–∑', mobile_content, re.IGNORECASE)
        
        print(f"   –£–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π –≤ –º–æ–±–∏–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏: {functions_mentions}")
        print(f"   –£–ø–æ–º–∏–Ω–∞–Ω–∏—è —É–≥—Ä–æ–∑ –≤ –º–æ–±–∏–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏: {threats_mentions}")
    
    return len(all_functions), len(set(all_threats))

if __name__ == "__main__":
    functions_count, threats_count = analyze_functions_and_threats()
    print(f"\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢: {functions_count} —Ñ—É–Ω–∫—Ü–∏–π –∑–∞—â–∏—â–∞—é—Ç –æ—Ç {threats_count} —Ç–∏–ø–æ–≤ —É–≥—Ä–æ–∑")
