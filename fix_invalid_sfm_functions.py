#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 32 –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –≤ SFM —Ä–µ–µ—Å—Ç—Ä–µ
"""

import json
from datetime import datetime

def fix_invalid_sfm_functions():
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –≤ SFM —Ä–µ–µ—Å—Ç—Ä–µ"""
    
    registry_path = "/Users/sergejhlystov/ALADDIN_NEW/data/sfm/function_registry.json"
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–µ—Å—Ç—Ä
    try:
        with open(registry_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–µ—Å—Ç—Ä–∞: {e}")
        return False
    
    functions = data.get('functions', {})
    
    # –ù–∞—Ö–æ–¥–∏–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    invalid_functions = []
    for func_id, func_data in functions.items():
        if not isinstance(func_data, dict) or 'function_id' not in func_data:
            invalid_functions.append(func_id)
    
    print(f"üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï {len(invalid_functions)} –ù–ï–í–ê–õ–ò–î–ù–´–• –§–£–ù–ö–¶–ò–ô")
    print("=" * 60)
    
    fixed_count = 0
    
    for func_id in invalid_functions:
        func_data = functions[func_id]
        
        if not isinstance(func_data, dict):
            print(f"‚ùå {func_id}: –ù–ï –°–õ–û–í–ê–†–¨ - –ü–†–û–ü–£–°–ö–ê–ï–ú")
            continue
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ—É–Ω–∫—Ü–∏–∏
        fixed_function = {
            "function_id": func_id,
            "name": func_data.get("name", func_id.replace("_", " ").title()),
            "description": func_data.get("description", f"Enhanced version of {func_id}"),
            "function_type": func_data.get("category", "enhanced"),
            "security_level": "medium",
            "status": func_data.get("status", "sleeping"),
            "created_at": func_data.get("created_at", datetime.now().isoformat()),
            "is_critical": False,
            "auto_enable": False,
            "wake_time": "00:00",
            "emergency_wake_up": False,
            "file_path": func_data.get("file_path", ""),
            "lines_of_code": 0,
            "file_size_bytes": 0,
            "file_size_kb": 0.0,
            "flake8_errors": 0,
            "quality_score": "A+",
            "last_updated": func_data.get("last_modified", datetime.now().isoformat()),
            "category": func_data.get("category", "enhanced"),
            "dependencies": func_data.get("dependencies", []),
            "features": func_data.get("tags", []),
            "class_name": func_data.get("name", func_id.replace("_", "")),
            "version": func_data.get("version", "1.0")
        }
        
        # –ó–∞–º–µ–Ω—è–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é
        functions[func_id] = fixed_function
        fixed_count += 1
        print(f"‚úÖ {func_id}: –ò–°–ü–†–ê–í–õ–ï–ù–ê")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ä–µ–µ—Å—Ç—Ä
    try:
        with open(registry_path, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        print(f"\nüéâ –ò–°–ü–†–ê–í–õ–ï–ù–û –§–£–ù–ö–¶–ò–ô: {fixed_count}/{len(invalid_functions)}")
        print(f"‚úÖ –†–µ–µ—Å—Ç—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {registry_path}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–µ—Å—Ç—Ä–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ù–ï–í–ê–õ–ò–î–ù–´–• –§–£–ù–ö–¶–ò–ô –í SFM")
    print("=" * 50)
    
    if fix_invalid_sfm_functions():
        print("\nüéâ –í—Å–µ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print("\nüîç –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–ê:")
        import subprocess
        result = subprocess.run([
            "python3", "/Users/sergejhlystov/ALADDIN_NEW/scripts/sfm_structure_validator.py"
        ], capture_output=True, text=True)
        print(result.stdout)
    else:
        print("\n‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π")

if __name__ == "__main__":
    main()