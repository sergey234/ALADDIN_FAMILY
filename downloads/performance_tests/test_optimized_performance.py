#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Test Optimized Performance for ALADDIN System
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã ALADDIN
"""

import time
import requests
import json
from datetime import datetime
from typing import Dict, List, Any

class PerformanceTester:
    """–¢–µ—Å—Ç–µ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self):
        self.results = {}
        self.start_time = time.time()
    
    def test_api_response_times(self, iterations: int = 10) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫–ª–∏–∫–∞ API"""
        print(f"üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API ({iterations} –∑–∞–ø—Ä–æ—Å–æ–≤)...")
        
        apis = [
            {"name": "Dashboard", "url": "http://localhost:5000/api/health"},
            {"name": "Search", "url": "http://localhost:5001/api/health"},
            {"name": "Alerts", "url": "http://localhost:5003/api/alerts/health"}
        ]
        
        results = {}
        
        for api in apis:
            times = []
            success_count = 0
            
            for i in range(iterations):
                try:
                    start_time = time.time()
                    response = requests.get(api["url"], timeout=5)
                    end_time = time.time()
                    
                    response_time = (end_time - start_time) * 1000  # ms
                    times.append(response_time)
                    
                    if response.status_code == 200:
                        success_count += 1
                        
                except Exception as e:
                    times.append(None)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            valid_times = [t for t in times if t is not None]
            if valid_times:
                avg_time = sum(valid_times) / len(valid_times)
                min_time = min(valid_times)
                max_time = max(valid_times)
            else:
                avg_time = min_time = max_time = 0
            
            results[api["name"]] = {
                "avg_response_time_ms": round(avg_time, 2),
                "min_response_time_ms": round(min_time, 2),
                "max_response_time_ms": round(max_time, 2),
                "success_rate": round((success_count / iterations) * 100, 2),
                "total_requests": iterations,
                "successful_requests": success_count
            }
        
        return results
    
    def test_database_performance(self, iterations: int = 5) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        print(f"üóÑÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ({iterations} –∑–∞–ø—Ä–æ—Å–æ–≤)...")
        
        search_queries = [
            "test",
            "error",
            "security",
            "warning",
            "info"
        ]
        
        results = []
        
        for query in search_queries:
            times = []
            
            for i in range(iterations):
                try:
                    start_time = time.time()
                    response = requests.get(
                        f"http://localhost:5001/api/elasticsearch/search?query={query}",
                        timeout=10
                    )
                    end_time = time.time()
                    
                    response_time = (end_time - start_time) * 1000  # ms
                    times.append(response_time)
                    
                    if response.status_code == 200:
                        data = response.json()
                        results_count = len(data.get("results", []))
                    else:
                        results_count = 0
                        
                except Exception as e:
                    times.append(None)
                    results_count = 0
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            valid_times = [t for t in times if t is not None]
            if valid_times:
                avg_time = sum(valid_times) / len(valid_times)
            else:
                avg_time = 0
            
            results.append({
                "query": query,
                "avg_response_time_ms": round(avg_time, 2),
                "results_count": results_count,
                "success_rate": round((len(valid_times) / iterations) * 100, 2)
            })
        
        return results
    
    def test_concurrent_requests(self, concurrent_users: int = 10) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        print(f"üë• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ ({concurrent_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)...")
        
        import threading
        
        results = []
        threads = []
        
        def make_request(thread_id):
            start_time = time.time()
            try:
                response = requests.get("http://localhost:5000/api/health", timeout=5)
                end_time = time.time()
                
                response_time = (end_time - start_time) * 1000  # ms
                results.append({
                    "thread_id": thread_id,
                    "response_time_ms": round(response_time, 2),
                    "status_code": response.status_code,
                    "success": response.status_code == 200
                })
            except Exception as e:
                end_time = time.time()
                response_time = (end_time - start_time) * 1000  # ms
                results.append({
                    "thread_id": thread_id,
                    "response_time_ms": round(response_time, 2),
                    "status_code": None,
                    "success": False,
                    "error": str(e)
                })
        
        # –ó–∞–ø—É—Å–∫ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        start_time = time.time()
        
        for i in range(concurrent_users):
            thread = threading.Thread(target=make_request, args=(i,))
            threads.append(thread)
            thread.start()
        
        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
        for thread in threads:
            thread.join()
        
        end_time = time.time()
        total_time = (end_time - start_time) * 1000  # ms
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        successful_requests = [r for r in results if r["success"]]
        success_rate = (len(successful_requests) / len(results)) * 100
        
        if successful_requests:
            avg_response_time = sum(r["response_time_ms"] for r in successful_requests) / len(successful_requests)
            max_response_time = max(r["response_time_ms"] for r in successful_requests)
            min_response_time = min(r["response_time_ms"] for r in successful_requests)
        else:
            avg_response_time = max_response_time = min_response_time = 0
        
        return {
            "concurrent_users": concurrent_users,
            "total_time_ms": round(total_time, 2),
            "success_rate": round(success_rate, 2),
            "avg_response_time_ms": round(avg_response_time, 2),
            "min_response_time_ms": round(min_response_time, 2),
            "max_response_time_ms": round(max_response_time, 2),
            "requests_per_second": round(concurrent_users / (total_time / 1000), 2)
        }
    
    def run_full_test(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
        print("=" * 50)
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API
        api_results = self.test_api_response_times(10)
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db_results = self.test_database_performance(5)
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        concurrent_results = self.test_concurrent_requests(10)
        
        # –û–±—â–µ–µ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        total_time = time.time() - self.start_time
        
        results = {
            "timestamp": datetime.now().isoformat(),
            "test_time_seconds": round(total_time, 2),
            "api_performance": api_results,
            "database_performance": db_results,
            "concurrent_performance": concurrent_results
        }
        
        return results
    
    def print_results(self, results: Dict[str, Any]):
        """–í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("\n" + "=" * 60)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
        print("=" * 60)
        
        # API –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        print("\nüåê API –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨:")
        for name, perf in results["api_performance"].items():
            print(f"   {name}:")
            print(f"     –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {perf['avg_response_time_ms']}ms")
            print(f"     –ú–∏–Ω/–ú–∞–∫—Å: {perf['min_response_time_ms']}ms / {perf['max_response_time_ms']}ms")
            print(f"     –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {perf['success_rate']}%")
        
        # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
        print("\nüóÑÔ∏è –ë–ê–ó–ê –î–ê–ù–ù–´–•:")
        for db_result in results["database_performance"]:
            print(f"   –ó–∞–ø—Ä–æ—Å '{db_result['query']}': {db_result['avg_response_time_ms']}ms ({db_result['results_count']} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)")
        
        # –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        print("\nüë• –ö–û–ù–ö–£–†–ï–ù–¢–ù–´–ï –ó–ê–ü–†–û–°–´:")
        conc = results["concurrent_performance"]
        print(f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {conc['concurrent_users']}")
        print(f"   –û–±—â–µ–µ –≤—Ä–µ–º—è: {conc['total_time_ms']}ms")
        print(f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {conc['success_rate']}%")
        print(f"   –ó–∞–ø—Ä–æ—Å–æ–≤/—Å–µ–∫: {conc['requests_per_second']}")
        print(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {conc['avg_response_time_ms']}ms")
        
        print(f"\n‚è±Ô∏è –í—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {results['test_time_seconds']} —Å–µ–∫—É–Ω–¥")
        print("=" * 60)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = PerformanceTester()
    results = tester.run_full_test()
    tester.print_results(results)
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    with open("performance_test_results.json", "w", encoding="utf-8") as f:
        json.dump(results, f, indent=2, ensure_ascii=False)
    
    print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ performance_test_results.json")

if __name__ == "__main__":
    main()