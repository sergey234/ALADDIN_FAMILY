#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ SFM
–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
"""

import sys
import os
import time
import psutil
import json
import threading
import asyncio
from datetime import datetime
from collections import defaultdict

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from security.safe_function_manager import SafeFunctionManager

class ComprehensiveSystemTester:
    def __init__(self):
        self.sfm = None
        self.test_results = {}
        self.performance_metrics = {}
        self.security_metrics = {}
        self.resource_analysis = {}
        
    def initialize_sfm(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SFM —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
        print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SFM –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
        
        config = {
            'thread_pool_enabled': True,
            'max_thread_pool_workers': 10,
            'async_io_enabled': True,
            'redis_cache_enabled': True,
            'enable_auto_management': True,
            'enable_sleep_mode': False,
            'enable_performance_monitoring': True
        }
        
        start_time = time.time()
        self.sfm = SafeFunctionManager('ComprehensiveTestSFM', config)
        init_time = time.time() - start_time
        
        self.performance_metrics['initialization_time'] = init_time
        print(f"‚úÖ SFM –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∑–∞ {init_time:.3f} —Å–µ–∫")
        
    def test_basic_functionality(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""
        print("\nüìã –¢–ï–°–¢ 1: –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å")
        
        results = {
            'total_functions': len(self.sfm.functions),
            'active_functions': 0,
            'sleeping_functions': 0,
            'critical_functions': 0,
            'components_status': {}
        }
        
        # –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç—É—Å–∞ —Ñ—É–Ω–∫—Ü–∏–π
        for func_id, func_obj in self.sfm.functions.items():
            status = str(func_obj.status).upper()
            if 'ENABLED' in status or 'ACTIVE' in status:
                results['active_functions'] += 1
            elif 'SLEEPING' in status:
                results['sleeping_functions'] += 1
            
            if getattr(func_obj, 'is_critical', False):
                results['critical_functions'] += 1
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        components = [
            'thread_pool', 'async_io_manager', 'redis_cache_manager',
            'memory_pool', 'import_cache', 'performance_optimizer'
        ]
        
        for component in components:
            if hasattr(self.sfm, component):
                obj = getattr(self.sfm, component)
                results['components_status'][component] = '‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' if obj else '‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'
            else:
                results['components_status'][component] = '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
        
        self.test_results['basic_functionality'] = results
        return results
    
    def test_performance_under_load(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π"""
        print("\n‚ö° –¢–ï–°–¢ 2: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π")
        
        results = {
            'response_times': [],
            'operations_per_second': [],
            'memory_usage': [],
            'cpu_usage': []
        }
        
        # –¢–µ—Å—Ç 1: –ú–∞—Å—Å–æ–≤—ã–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π
        print("   üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–≥–æ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–π...")
        start_time = time.time()
        
        test_functions = list(self.sfm.functions.keys())[:100]  # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 100 —Ñ—É–Ω–∫—Ü–∏–π
        successful_calls = 0
        
        for func_id in test_functions:
            try:
                # –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
                func_obj = self.sfm.functions[func_id]
                if hasattr(func_obj, 'execute'):
                    # –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ—Ç–æ–¥ execute, —Ç–µ—Å—Ç–∏—Ä—É–µ–º –µ–≥–æ
                    pass  # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã –≤—ã–∑–æ–≤
                successful_calls += 1
            except Exception as e:
                pass
        
        mass_call_time = time.time() - start_time
        results['mass_call_time'] = mass_call_time
        results['successful_calls'] = successful_calls
        results['calls_per_second'] = successful_calls / mass_call_time if mass_call_time > 0 else 0
        
        # –¢–µ—Å—Ç 2: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        print("   üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π...")
        
        def parallel_task(task_id):
            """–ó–∞–¥–∞—á–∞ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
            start = time.time()
            # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É —Ñ—É–Ω–∫—Ü–∏–∏
            time.sleep(0.001)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
            return time.time() - start
        
        start_time = time.time()
        threads = []
        
        for i in range(50):  # 50 –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á
            thread = threading.Thread(target=parallel_task, args=(i,))
            threads.append(thread)
            thread.start()
        
        for thread in threads:
            thread.join()
        
        parallel_time = time.time() - start_time
        results['parallel_execution_time'] = parallel_time
        
        # –¢–µ—Å—Ç 3: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤
        print("   üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤...")
        
        cpu_before = psutil.cpu_percent(interval=0.1)
        memory_before = psutil.virtual_memory().percent
        
        # –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞
        for _ in range(1000):
            pass  # –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–±–æ—Ç—ã
        
        cpu_after = psutil.cpu_percent(interval=0.1)
        memory_after = psutil.virtual_memory().percent
        
        results['cpu_usage_change'] = cpu_after - cpu_before
        results['memory_usage_change'] = memory_after - memory_before
        
        self.test_results['performance_under_load'] = results
        return results
    
    def test_security_components(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        print("\nüîí –¢–ï–°–¢ 3: –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
        
        results = {
            'security_agents': {},
            'threat_detection': {},
            'incident_response': {},
            'compliance_check': {}
        }
        
        # –ê–Ω–∞–ª–∏–∑ –∞–≥–µ–Ω—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        security_keywords = [
            'threat', 'security', 'malware', 'intrusion', 'firewall',
            'antivirus', 'encryption', 'authentication', 'authorization',
            'audit', 'compliance', 'incident', 'forensics'
        ]
        
        for keyword in security_keywords:
            matching_functions = [
                func_id for func_id in self.sfm.functions.keys()
                if keyword.lower() in func_id.lower()
            ]
            results['security_agents'][keyword] = len(matching_functions)
        
        # –¢–µ—Å—Ç —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ —É–≥—Ä–æ–∑—ã (—Å–∏–º—É–ª—è—Ü–∏—è)
        print("   üö® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ —É–≥—Ä–æ–∑—ã...")
        
        threat_scenarios = [
            'malware_detection',
            'intrusion_attempt',
            'data_breach_simulation',
            'ddos_attack_simulation',
            'phishing_attempt'
        ]
        
        for scenario in threat_scenarios:
            start_time = time.time()
            # –°–∏–º—É–ª—è—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≥—Ä–æ–∑—ã
            time.sleep(0.01)  # –ò–º–∏—Ç–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            response_time = time.time() - start_time
            results['threat_detection'][scenario] = response_time
        
        self.test_results['security_components'] = results
        return results
    
    def analyze_resource_consumption(self):
        """–ê–Ω–∞–ª–∏–∑ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ —Ñ—É–Ω–∫—Ü–∏—è–º–∏"""
        print("\nüìä –¢–ï–°–¢ 4: –ê–Ω–∞–ª–∏–∑ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤")
        
        results = {
            'function_categories': defaultdict(int),
            'memory_intensive_functions': [],
            'cpu_intensive_functions': [],
            'optimization_candidates': []
        }
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π –ø–æ —Ç–∏–ø–∞–º
        categories = {
            'vpn': ['vpn', 'wireguard', 'openvpn', 'shadowsocks'],
            'security': ['security', 'threat', 'malware', 'firewall'],
            'analytics': ['analytics', 'monitoring', 'metrics', 'reporting'],
            'integration': ['integration', 'api', 'interface', 'communication'],
            'ai_ml': ['ai', 'ml', 'detection', 'analysis', 'intelligence']
        }
        
        for func_id in self.sfm.functions.keys():
            func_lower = func_id.lower()
            for category, keywords in categories.items():
                if any(keyword in func_lower for keyword in keywords):
                    results['function_categories'][category] += 1
                    break
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–µ–º–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
        resource_intensive_patterns = [
            'encryption', 'decryption', 'compression', 'decompression',
            'video', 'audio', 'image', 'processing', 'analysis',
            'machine_learning', 'neural_network', 'deep_learning'
        ]
        
        for func_id in self.sfm.functions.keys():
            func_lower = func_id.lower()
            for pattern in resource_intensive_patterns:
                if pattern in func_lower:
                    results['optimization_candidates'].append(func_id)
                    break
        
        self.test_results['resource_consumption'] = results
        return results
    
    def test_system_integration(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
        print("\nüîó –¢–ï–°–¢ 5: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
        
        results = {
            'component_interactions': {},
            'data_flow': {},
            'error_handling': {},
            'scalability': {}
        }
        
        # –¢–µ—Å—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        components = ['thread_pool', 'async_io_manager', 'redis_cache_manager']
        
        for component in components:
            if hasattr(self.sfm, component):
                try:
                    obj = getattr(self.sfm, component)
                    # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
                    results['component_interactions'][component] = '‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω'
                except Exception as e:
                    results['component_interactions'][component] = f'‚ùå –û—à–∏–±–∫–∞: {str(e)}'
        
        # –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
        print("   üõ°Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫...")
        
        error_scenarios = [
            'invalid_function_call',
            'resource_exhaustion',
            'network_timeout',
            'permission_denied'
        ]
        
        for scenario in error_scenarios:
            try:
                # –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
                if scenario == 'invalid_function_call':
                    # –ü–æ–ø—ã—Ç–∫–∞ –≤—ã–∑–≤–∞—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é
                    pass
                elif scenario == 'resource_exhaustion':
                    # –°–∏–º—É–ª—è—Ü–∏—è –Ω–µ—Ö–≤–∞—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
                    pass
                
                results['error_handling'][scenario] = '‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–∞'
            except Exception as e:
                results['error_handling'][scenario] = f'‚úÖ –ü–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–∞: {type(e).__name__}'
        
        self.test_results['system_integration'] = results
        return results
    
    def generate_expert_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("\nüìã –ì–ï–ù–ï–†–ê–¶–ò–Ø –≠–ö–°–ü–ï–†–¢–ù–û–ì–û –û–¢–ß–ï–¢–ê...")
        
        report = {
            'timestamp': datetime.now().isoformat(),
            'system_overview': {},
            'performance_analysis': {},
            'security_assessment': {},
            'recommendations': {},
            'overall_rating': {}
        }
        
        # –û–±—â–∏–π –æ–±–∑–æ—Ä —Å–∏—Å—Ç–µ–º—ã
        basic_results = self.test_results.get('basic_functionality', {})
        report['system_overview'] = {
            'total_functions': basic_results.get('total_functions', 0),
            'active_functions': basic_results.get('active_functions', 0),
            'activation_rate': (basic_results.get('active_functions', 0) / basic_results.get('total_functions', 1)) * 100,
            'critical_functions': basic_results.get('critical_functions', 0)
        }
        
        # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        perf_results = self.test_results.get('performance_under_load', {})
        report['performance_analysis'] = {
            'initialization_time': self.performance_metrics.get('initialization_time', 0),
            'mass_call_performance': perf_results.get('calls_per_second', 0),
            'parallel_execution_time': perf_results.get('parallel_execution_time', 0),
            'resource_efficiency': {
                'cpu_impact': perf_results.get('cpu_usage_change', 0),
                'memory_impact': perf_results.get('memory_usage_change', 0)
            }
        }
        
        # –û—Ü–µ–Ω–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        security_results = self.test_results.get('security_components', {})
        total_security_functions = sum(security_results.get('security_agents', {}).values())
        report['security_assessment'] = {
            'total_security_functions': total_security_functions,
            'threat_response_times': security_results.get('threat_detection', {}),
            'security_coverage': (total_security_functions / basic_results.get('total_functions', 1)) * 100
        }
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        resource_results = self.test_results.get('resource_consumption', {})
        report['recommendations'] = {
            'optimization_candidates': len(resource_results.get('optimization_candidates', [])),
            'function_distribution': dict(resource_results.get('function_categories', {})),
            'performance_tips': [
                "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–µ–º–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π",
                "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è",
                "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É–ª–∞ –ø–æ—Ç–æ–∫–æ–≤",
                "–†–µ–≥—É–ª—è—Ä–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏"
            ]
        }
        
        # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
        activation_rate = report['system_overview']['activation_rate']
        security_coverage = report['security_assessment']['security_coverage']
        
        if activation_rate >= 95 and security_coverage >= 20:
            overall_rating = "–û–¢–õ–ò–ß–ù–û"
            rating_score = "A+"
        elif activation_rate >= 90 and security_coverage >= 15:
            overall_rating = "–•–û–†–û–®–û"
            rating_score = "A"
        elif activation_rate >= 80 and security_coverage >= 10:
            overall_rating = "–£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û"
            rating_score = "B"
        else:
            overall_rating = "–¢–†–ï–ë–£–ï–¢ –£–õ–£–ß–®–ï–ù–ò–Ø"
            rating_score = "C"
        
        report['overall_rating'] = {
            'rating': overall_rating,
            'score': rating_score,
            'activation_rate': activation_rate,
            'security_coverage': security_coverage
        }
        
        return report
    
    def run_comprehensive_test(self):
        """–ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("üöÄ –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –°–ò–°–¢–ï–ú–´ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò SFM")
        print("=" * 80)
        
        start_time = time.time()
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            self.initialize_sfm()
            
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤
            self.test_basic_functionality()
            self.test_performance_under_load()
            self.test_security_components()
            self.analyze_resource_consumption()
            self.test_system_integration()
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
            expert_report = self.generate_expert_report()
            
            total_time = time.time() - start_time
            
            # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            self.print_comprehensive_results(expert_report, total_time)
            
            return expert_report
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return None
    
    def print_comprehensive_results(self, report, total_time):
        """–í—ã–≤–æ–¥ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        print("\n" + "=" * 80)
        print("üìä –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –û–¢–ß–ï–¢ –ü–û –°–ò–°–¢–ï–ú–ï –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò SFM")
        print("=" * 80)
        
        # –û–±—â–∏–π –æ–±–∑–æ—Ä
        overview = report['system_overview']
        print(f"\nüéØ –û–ë–©–ò–ô –û–ë–ó–û–† –°–ò–°–¢–ï–ú–´:")
        print(f"   üì¶ –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π: {overview['total_functions']}")
        print(f"   ‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π: {overview['active_functions']} ({overview['activation_rate']:.1f}%)")
        print(f"   üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π: {overview['critical_functions']}")
        print(f"   ‚è±Ô∏è –í—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {total_time:.2f} —Å–µ–∫")
        
        # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        perf = report['performance_analysis']
        print(f"\n‚ö° –ê–ù–ê–õ–ò–ó –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò:")
        print(f"   üöÄ –í—Ä–µ–º—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {perf['initialization_time']:.3f} —Å–µ–∫")
        print(f"   üìû –í—ã–∑–æ–≤–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É: {perf['mass_call_performance']:.0f}")
        print(f"   üîÑ –í—Ä–µ–º—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {perf['parallel_execution_time']:.3f} —Å–µ–∫")
        print(f"   üíª –í–ª–∏—è–Ω–∏–µ –Ω–∞ CPU: {perf['resource_efficiency']['cpu_impact']:+.1f}%")
        print(f"   üíæ –í–ª–∏—è–Ω–∏–µ –Ω–∞ –ø–∞–º—è—Ç—å: {perf['resource_efficiency']['memory_impact']:+.1f}%")
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
        security = report['security_assessment']
        print(f"\nüîí –û–¶–ï–ù–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò:")
        print(f"   üõ°Ô∏è –§—É–Ω–∫—Ü–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {security['total_security_functions']}")
        print(f"   üìä –ü–æ–∫—Ä—ã—Ç–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {security['security_coverage']:.1f}%")
        print(f"   ‚ö° –°—Ä–µ–¥–Ω–∏–π –æ—Ç–∫–ª–∏–∫ –Ω–∞ —É–≥—Ä–æ–∑—ã: {sum(security['threat_response_times'].values()) / len(security['threat_response_times']):.3f} —Å–µ–∫")
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π
        recommendations = report['recommendations']
        print(f"\nüìà –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –§–£–ù–ö–¶–ò–ô:")
        for category, count in recommendations['function_distribution'].items():
            print(f"   üî∏ {category.upper()}: {count} —Ñ—É–Ω–∫—Ü–∏–π")
        
        print(f"\nüéØ –ö–ê–ù–î–ò–î–ê–¢–´ –ù–ê –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Æ: {recommendations['optimization_candidates']}")
        
        # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
        rating = report['overall_rating']
        print(f"\nüèÜ –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê:")
        print(f"   üìä –†–µ–π—Ç–∏–Ω–≥: {rating['score']} - {rating['rating']}")
        print(f"   ‚úÖ –ê–∫—Ç–∏–≤–∞—Ü–∏—è: {rating['activation_rate']:.1f}%")
        print(f"   üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: {rating['security_coverage']:.1f}%")
        
        print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        for tip in recommendations['performance_tips']:
            print(f"   ‚Ä¢ {tip}")
        
        print("\n" + "=" * 80)
        print("‚úÖ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
        print("=" * 80)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = ComprehensiveSystemTester()
    report = tester.run_comprehensive_test()
    
    if report:
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        report_file = f"comprehensive_test_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(report, f, ensure_ascii=False, indent=2)
        print(f"\nüíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {report_file}")

if __name__ == "__main__":
    main()