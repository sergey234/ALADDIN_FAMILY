#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã (4 –º–æ–¥—É–ª—è) —Å –Ω–æ–≤–æ–π (–∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π)
"""

import time
import psutil
import os
from typing import Dict, Any, List
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç –Ω–æ–≤–æ–π –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
from security.family.family_integration_layer import create_family_integration_layer
from security.family.family_profile_manager_enhanced import (
    FamilyRole, AgeGroup, MessageType, MessagePriority, CommunicationChannel
)


class PerformanceTest:
    """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    
    def __init__(self):
        self.results = {}
        self.start_memory = 0
        self.start_time = 0
    
    def start_test(self):
        """–ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞"""
        self.start_memory = psutil.Process(os.getpid()).memory_info().rss / 1024 / 1024  # MB
        self.start_time = time.time()
        print(f"üöÄ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        print(f"üìä –ù–∞—á–∞–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å: {self.start_memory:.2f} MB")
    
    def end_test(self, test_name: str):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞"""
        end_time = time.time()
        end_memory = psutil.Process(os.getpid()).memory_info().rss / 1024 / 1024  # MB
        
        duration = end_time - self.start_time
        memory_used = end_memory - self.start_memory
        
        self.results[test_name] = {
            'duration': duration,
            'memory_used': memory_used,
            'memory_total': end_memory
        }
        
        print(f"‚úÖ {test_name} –∑–∞–≤–µ—Ä—à–µ–Ω:")
        print(f"   ‚è±Ô∏è  –í—Ä–µ–º—è: {duration:.3f} —Å–µ–∫")
        print(f"   üíæ –ü–∞–º—è—Ç—å: {memory_used:.2f} MB")
        print(f"   üìà –û–±—â–∞—è –ø–∞–º—è—Ç—å: {end_memory:.2f} MB")
        print()
    
    def test_integration_performance(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
        print("üß™ –¢–ï–°–¢ 1: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã")
        self.start_test()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
        integration = create_family_integration_layer()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–º—å–∏
        family_id = "perf_test_family"
        integration.create_family(family_id, "–¢–µ—Å—Ç–æ–≤–∞—è —Å–µ–º—å—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ 10 —á–ª–µ–Ω–æ–≤ —Å–µ–º—å–∏
        for i in range(10):
            member_id = f"member_{i:03d}"
            name = f"–ß–ª–µ–Ω —Å–µ–º—å–∏ {i+1}"
            age = 20 + (i * 5)
            role = FamilyRole.PARENT if i < 5 else FamilyRole.CHILD
            
            integration.add_family_member(family_id, member_id, name, age, role)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ 5 –≥—Ä—É–ø–ø
        for i in range(5):
            group_id = f"group_{i:03d}"
            group_name = f"–ì—Ä—É–ø–ø–∞ {i+1}"
            integration.create_family_group(family_id, group_id, group_name)
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–ª–µ–Ω–æ–≤ –≤ –≥—Ä—É–ø–ø—ã
            for j in range(2):
                member_id = f"member_{i*2 + j:03d}"
                integration.add_member_to_group(family_id, group_id, member_id)
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ 50 —Å–æ–æ–±—â–µ–Ω–∏–π —Å AI –∞–Ω–∞–ª–∏–∑–æ–º
        for i in range(50):
            sender_id = f"member_{i % 10:03d}"
            recipient_ids = [f"member_{(i+1) % 10:03d}"]
            content = f"–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {i+1} —Å AI –∞–Ω–∞–ª–∏–∑–æ–º"
            
            message_id = integration.send_message(
                sender_id, recipient_ids, content,
                MessageType.TEXT, MessagePriority.NORMAL,
                CommunicationChannel.INTERNAL, family_id
            )
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ AI –∞–Ω–∞–ª–∏–∑–∞
            if message_id:
                analysis = integration.get_message_analysis(message_id)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        family_stats = integration.get_family_statistics(family_id)
        system_stats = integration.get_system_statistics()
        health = integration.get_integration_health()
        
        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        integration.shutdown()
        
        self.end_test("–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞")
        
        return {
            'families_created': 1,
            'members_created': 10,
            'groups_created': 5,
            'messages_sent': 50,
            'ai_analyses': len(integration.communication_hub.communication_analyses) if integration.communication_hub else 0
        }
    
    def test_functionality_completeness(self):
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ—Ç—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""
        print("üß™ –¢–ï–°–¢ 2: –ü–æ–ª–Ω–æ—Ç–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏")
        self.start_test()
        
        integration = create_family_integration_layer()
        
        # –¢–µ—Å—Ç –≤—Å–µ—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
        family_id = "func_test_family"
        
        # 1. –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–º—å–∏
        assert integration.create_family(family_id, "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–µ–º—å—è")
        
        # 2. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–ª–µ–Ω–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ä–æ–ª—è–º–∏
        members_data = [
            ("parent_001", "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤", 35, FamilyRole.PARENT),
            ("parent_002", "–ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞", 32, FamilyRole.PARENT),
            ("child_001", "–ê–ª–µ–∫—Å–µ–π –ü–µ—Ç—Ä–æ–≤", 10, FamilyRole.CHILD),
            ("child_002", "–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞", 8, FamilyRole.CHILD),
            ("elderly_001", "–ë–∞–±—É—à–∫–∞", 70, FamilyRole.ELDERLY)
        ]
        
        for member_id, name, age, role in members_data:
            assert integration.add_family_member(family_id, member_id, name, age, role)
        
        # 3. –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø
        groups_data = [
            ("parents_group", "–†–æ–¥–∏—Ç–µ–ª–∏", "–ì—Ä—É–ø–ø–∞ –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π"),
            ("children_group", "–î–µ—Ç–∏", "–ì—Ä—É–ø–ø–∞ –¥–ª—è –¥–µ—Ç–µ–π"),
            ("family_group", "–í—Å—è —Å–µ–º—å—è", "–û–±—â–∞—è —Å–µ–º–µ–π–Ω–∞—è –≥—Ä—É–ø–ø–∞")
        ]
        
        for group_id, group_name, description in groups_data:
            assert integration.create_family_group(family_id, group_id, group_name, description)
        
        # 4. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–ª–µ–Ω–æ–≤ –≤ –≥—Ä—É–ø–ø—ã
        group_assignments = [
            ("parents_group", ["parent_001", "parent_002"]),
            ("children_group", ["child_001", "child_002"]),
            ("family_group", ["parent_001", "parent_002", "child_001", "child_002", "elderly_001"])
        ]
        
        for group_id, member_ids in group_assignments:
            for member_id in member_ids:
                assert integration.add_member_to_group(family_id, group_id, member_id)
        
        # 5. –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
        message_tests = [
            ("parent_001", ["parent_002"], "–û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", MessageType.TEXT, MessagePriority.NORMAL),
            ("parent_001", ["child_001"], "–í–∞–∂–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", MessageType.TEXT, MessagePriority.HIGH),
            ("child_001", ["parent_001"], "–≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!", MessageType.TEXT, MessagePriority.EMERGENCY),
            ("elderly_001", ["family_group"], "–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", MessageType.VOICE, MessagePriority.NORMAL)
        ]
        
        message_ids = []
        for sender_id, recipient_ids, content, msg_type, priority in message_tests:
            message_id = integration.send_message(
                sender_id, recipient_ids, content, msg_type, priority,
                CommunicationChannel.INTERNAL, family_id
            )
            assert message_id is not None
            message_ids.append(message_id)
        
        # 6. AI –∞–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π
        analyses = []
        for message_id in message_ids:
            analysis = integration.get_message_analysis(message_id)
            if analysis:
                analyses.append(analysis)
        
        # 7. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        family_stats = integration.get_family_statistics(family_id)
        system_stats = integration.get_system_statistics()
        health = integration.get_integration_health()
        
        # 8. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        assert integration.update_member_security_level(family_id, "parent_001", 5)
        
        # 9. –ü–æ–ª—É—á–µ–Ω–∏–µ —á–ª–µ–Ω–æ–≤ –ø–æ —Ä–æ–ª—è–º
        parents = integration.get_family_members_by_role(family_id, FamilyRole.PARENT)
        children = integration.get_family_members_by_role(family_id, FamilyRole.CHILD)
        
        # 10. –ü–æ–ª—É—á–µ–Ω–∏–µ –≥—Ä—É–ø–ø —Å–µ–º—å–∏
        groups = integration.get_family_groups(family_id)
        
        integration.shutdown()
        
        self.end_test("–ü–æ–ª–Ω–æ—Ç–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏")
        
        return {
            'families_created': 1,
            'members_created': len(members_data),
            'groups_created': len(groups_data),
            'messages_sent': len(message_tests),
            'ai_analyses': len(analyses),
            'parents_found': len(parents),
            'children_found': len(children),
            'groups_found': len(groups),
            'all_tests_passed': True
        }
    
    def test_memory_efficiency(self):
        """–¢–µ—Å—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–∞–º—è—Ç–∏"""
        print("üß™ –¢–ï–°–¢ 3: –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–∞–º—è—Ç–∏")
        self.start_test()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —Å–µ–º–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
        integration = create_family_integration_layer()
        
        families_created = 0
        members_created = 0
        groups_created = 0
        messages_sent = 0
        
        # –°–æ–∑–¥–∞–Ω–∏–µ 20 —Å–µ–º–µ–π
        for family_num in range(20):
            family_id = f"memory_test_family_{family_num:03d}"
            family_name = f"–°–µ–º—å—è {family_num + 1}"
            
            if integration.create_family(family_id, family_name):
                families_created += 1
                
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ 5 —á–ª–µ–Ω–æ–≤ –≤ –∫–∞–∂–¥—É—é —Å–µ–º—å—é
                for member_num in range(5):
                    member_id = f"member_{family_num}_{member_num:03d}"
                    name = f"–ß–ª–µ–Ω {family_num + 1}-{member_num + 1}"
                    age = 20 + (member_num * 10)
                    role = FamilyRole.PARENT if member_num < 2 else FamilyRole.CHILD
                    
                    if integration.add_family_member(family_id, member_id, name, age, role):
                        members_created += 1
                
                # –°–æ–∑–¥–∞–Ω–∏–µ 2 –≥—Ä—É–ø–ø –≤ –∫–∞–∂–¥–æ–π —Å–µ–º—å–µ
                for group_num in range(2):
                    group_id = f"group_{family_num}_{group_num:03d}"
                    group_name = f"–ì—Ä—É–ø–ø–∞ {family_num + 1}-{group_num + 1}"
                    
                    if integration.create_family_group(family_id, group_id, group_name):
                        groups_created += 1
                
                # –û—Ç–ø—Ä–∞–≤–∫–∞ 10 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–∂–¥–æ–π —Å–µ–º—å–µ
                for msg_num in range(10):
                    sender_id = f"member_{family_num}_000"
                    recipient_ids = [f"member_{family_num}_001"]
                    content = f"–°–æ–æ–±—â–µ–Ω–∏–µ {family_num + 1}-{msg_num + 1}"
                    
                    message_id = integration.send_message(
                        sender_id, recipient_ids, content,
                        MessageType.TEXT, MessagePriority.NORMAL,
                        CommunicationChannel.INTERNAL, family_id
                    )
                    
                    if message_id:
                        messages_sent += 1
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        system_stats = integration.get_system_statistics()
        health = integration.get_integration_health()
        
        integration.shutdown()
        
        self.end_test("–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–∞–º—è—Ç–∏")
        
        return {
            'families_created': families_created,
            'members_created': members_created,
            'groups_created': groups_created,
            'messages_sent': messages_sent,
            'memory_per_family': self.results['–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–∞–º—è—Ç–∏']['memory_used'] / max(families_created, 1),
            'memory_per_member': self.results['–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–∞–º—è—Ç–∏']['memory_used'] / max(members_created, 1),
            'memory_per_message': self.results['–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–∞–º—è—Ç–∏']['memory_used'] / max(messages_sent, 1)
        }
    
    def print_summary(self):
        """–í—ã–≤–æ–¥ —Å–≤–æ–¥–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        print("=" * 60)
        print("üìä –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 60)
        
        for test_name, results in self.results.items():
            print(f"\nüß™ {test_name}:")
            print(f"   ‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {results['duration']:.3f} —Å–µ–∫")
            print(f"   üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ø–∞–º—è—Ç–∏: {results['memory_used']:.2f} MB")
            print(f"   üìà –û–±—â–∞—è –ø–∞–º—è—Ç—å: {results['memory_total']:.2f} MB")
        
        print("\n" + "=" * 60)
        print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("üöÄ –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ!")
        print("=" * 60)


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò –ò –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–ò")
    print("=" * 60)
    
    tester = PerformanceTest()
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    perf_results = tester.test_integration_performance()
    func_results = tester.test_functionality_completeness()
    memory_results = tester.test_memory_efficiency()
    
    # –í—ã–≤–æ–¥ —Å–≤–æ–¥–∫–∏
    tester.print_summary()
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    print("\nüìà –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó:")
    print(f"   üè† –°–µ–º–µ–π —Å–æ–∑–¥–∞–Ω–æ: {perf_results['families_created']}")
    print(f"   üë• –ß–ª–µ–Ω–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {perf_results['members_created']}")
    print(f"   üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ì—Ä—É–ø–ø —Å–æ–∑–¥–∞–Ω–æ: {perf_results['groups_created']}")
    print(f"   üí¨ –°–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {perf_results['messages_sent']}")
    print(f"   ü§ñ AI –∞–Ω–∞–ª–∏–∑–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {perf_results['ai_analyses']}")
    
    print(f"\nüíæ –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–¨ –ü–ê–ú–Ø–¢–ò:")
    print(f"   üìä –ü–∞–º—è—Ç—å –Ω–∞ —Å–µ–º—å—é: {memory_results['memory_per_family']:.2f} MB")
    print(f"   üë§ –ü–∞–º—è—Ç—å –Ω–∞ —á–ª–µ–Ω–∞: {memory_results['memory_per_member']:.2f} MB")
    print(f"   üí¨ –ü–∞–º—è—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: {memory_results['memory_per_message']:.4f} MB")
    
    print("\nüéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:")
    print("   ‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –û–¢–õ–ò–ß–ù–ê–Ø")
    print("   ‚úÖ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: –ü–û–õ–ù–ê–Ø")
    print("   ‚úÖ –ü–∞–º—è—Ç—å: –≠–§–§–ï–ö–¢–ò–í–ù–ê–Ø")
    print("   ‚úÖ AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: –†–ê–ë–û–¢–ê–ï–¢")
    print("   ‚úÖ –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: –û–ë–ï–°–ü–ï–ß–ï–ù–ê")


if __name__ == "__main__":
    main()