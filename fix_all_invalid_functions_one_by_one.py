#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –ø–æ –æ–¥–Ω–æ–π –∑–∞ —Ä–∞–∑
"""

import json
from datetime import datetime

def fix_all_invalid_functions():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ –æ–¥–Ω–æ–π –∑–∞ —Ä–∞–∑"""
    
    registry_path = "/Users/sergejhlystov/ALADDIN_NEW/data/sfm/function_registry.json"
    
    print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –í–°–ï–• –ù–ï–í–ê–õ–ò–î–ù–´–• –§–£–ù–ö–¶–ò–ô –ü–û –û–î–ù–û–ô")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    backup_path = f"/Users/sergejhlystov/ALADDIN_NEW/data/sfm/function_registry_backup_all_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–µ—Å—Ç—Ä
        with open(registry_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        with open(backup_path, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        
        print(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_path}")
        
        functions = data.get('functions', {})
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        invalid_functions = []
        for func_id, func_data in functions.items():
            if not isinstance(func_data, dict) or 'function_id' not in func_data:
                invalid_functions.append(func_id)
        
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π: {len(invalid_functions)}")
        print("=" * 60)
        
        fixed_count = 0
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–æ –æ–¥–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
        for i, func_id in enumerate(invalid_functions, 1):
            print(f"\nüîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï {i}/{len(invalid_functions)}: {func_id}")
            print("-" * 50)
            
            func_data = functions[func_id]
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            print(f"üìã –¢–µ–∫—É—â–∏–µ –∫–ª—é—á–∏: {list(func_data.keys())}")
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: function_id")
            
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
            fixed_function = {
                "function_id": func_id,
                "name": func_data.get("name", func_id.replace("_", " ").title()),
                "description": func_data.get("description", f"Enhanced version of {func_id}"),
                "function_type": func_data.get("category", "enhanced"),
                "security_level": "medium",
                "status": func_data.get("status", "sleeping"),
                "created_at": func_data.get("created_at", datetime.now().isoformat()),
                "is_critical": False,
                "auto_enable": False,
                "wake_time": "00:00",
                "emergency_wake_up": False,
                "file_path": func_data.get("file_path", ""),
                "lines_of_code": 0,
                "file_size_bytes": 0,
                "file_size_kb": 0.0,
                "flake8_errors": 0,
                "quality_score": "A+",
                "last_updated": func_data.get("last_modified", datetime.now().isoformat()),
                "category": func_data.get("category", "enhanced"),
                "dependencies": func_data.get("dependencies", []),
                "features": func_data.get("tags", []),
                "class_name": func_data.get("name", func_data.get("class_name", func_id.replace("_", ""))),
                "version": func_data.get("version", "1.0")
            }
            
            # –ó–∞–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
            functions[func_id] = fixed_function
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
            with open(registry_path, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            valid_count = 0
            invalid_count = 0
            
            for check_func_id, check_func_data in functions.items():
                if isinstance(check_func_data, dict) and 'function_id' in check_func_data:
                    valid_count += 1
                else:
                    invalid_count += 1
            
            fixed_count += 1
            print(f"‚úÖ –§—É–Ω–∫—Ü–∏—è {func_id} –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞!")
            print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {valid_count} –≤–∞–ª–∏–¥–Ω—ã—Ö, {invalid_count} –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö")
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏
            if i < len(invalid_functions):
                print("‚è≥ –ü–∞—É–∑–∞ 1 —Å–µ–∫—É–Ω–¥–∞...")
                import time
                time.sleep(1)
        
        print(f"\nüéâ –í–°–ï –§–£–ù–ö–¶–ò–ò –ò–°–ü–†–ê–í–õ–ï–ù–´!")
        print(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ—É–Ω–∫—Ü–∏–π: {fixed_count}")
        print(f"‚úÖ –†–µ–µ—Å—Ç—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {registry_path}")
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        print(f"\nüîç –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê:")
        valid_count = 0
        invalid_count = 0
        
        for func_id, func_data in functions.items():
            if isinstance(func_data, dict) and 'function_id' in func_data:
                valid_count += 1
            else:
                invalid_count += 1
        
        print(f"üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"  - –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π: {len(functions)}")
        print(f"  - –í–∞–ª–∏–¥–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π: {valid_count}")
        print(f"  - –ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π: {invalid_count}")
        print(f"  - –ü—Ä–æ—Ü–µ–Ω—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏: {(valid_count/len(functions)*100):.1f}%")
        
        if invalid_count == 0:
            print(f"üéâ –í–°–ï –§–£–ù–ö–¶–ò–ò –í–ê–õ–ò–î–ù–´! SFM –†–ï–ï–°–¢–† –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù!")
        else:
            print(f"‚ö†Ô∏è  –û—Å—Ç–∞–ª–æ—Å—å {invalid_count} –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

if __name__ == "__main__":
    fix_all_invalid_functions()