#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Optimized Dashboard Server for ALADDIN
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –¥–∞—à–±–æ—Ä–¥–∞ –¥–ª—è ALADDIN
"""

import json
import time
import psutil
import threading
import csv
import os
import gzip
from datetime import datetime
from typing import Dict, Any, List
from flask import Flask, jsonify, send_file, request, Response
from flask_cors import CORS
from functools import lru_cache
import sqlite3
from concurrent.futures import ThreadPoolExecutor

app = Flask(__name__)
CORS(app)

# –ö—ç—à –¥–ª—è —á–∞—Å—Ç–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
@lru_cache(maxsize=100)
def get_cached_metrics():
    """–ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
    return {
        "timestamp": datetime.now().isoformat(),
        "cpu_percent": psutil.cpu_percent(interval=0.1),
        "memory_percent": psutil.virtual_memory().percent,
        "disk_percent": psutil.disk_usage('/').percent,
        "processes": len(psutil.pids())
    }

# –ü—É–ª–∏–Ω–≥ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
class DatabasePool:
    def __init__(self, max_connections=10):
        self.max_connections = max_connections
        self.connections = []
        self.lock = threading.Lock()

    def get_connection(self):
        with self.lock:
            if self.connections:
                return self.connections.pop()
            return sqlite3.connect('aladdin_logs.db')

    def return_connection(self, conn):
        with self.lock:
            if len(self.connections) < self.max_connections:
                self.connections.append(conn)
            else:
                conn.close()

db_pool = DatabasePool()

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
executor = ThreadPoolExecutor(max_workers=4)

def compress_response(data):
    """–°–∂–∞—Ç–∏–µ –æ—Ç–≤–µ—Ç–∞"""
    json_data = json.dumps(data, ensure_ascii=False)
    if len(json_data) > 1024:  # –°–∂–∏–º–∞–µ–º —Ç–æ–ª—å–∫–æ –±–æ–ª—å—à–∏–µ –æ—Ç–≤–µ—Ç—ã
        compressed = gzip.compress(json_data.encode('utf-8'))
        return Response(compressed, mimetype='application/json',
                      headers={'Content-Encoding': 'gzip'})
    return jsonify(data)

@app.route('/api/health')
def health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
    return compress_response({"status": "ok", "timestamp": datetime.now().isoformat()})

@app.route('/api/data')
def get_data():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º—ã —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        metrics = get_cached_metrics()

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        metrics.update({
            "system_uptime": time.time() - psutil.boot_time(),
            "load_average": os.getloadavg() if hasattr(os, 'getloadavg') else [0, 0, 0]
        })

        return compress_response(metrics)

    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route('/api/export/csv')
def export_csv():
    """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ CSV —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π"""
    try:
        conn = db_pool.get_connection()
        cursor = conn.cursor()

        # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –ª–∏–º–∏—Ç–æ–º
        cursor.execute("""
            SELECT timestamp, level, component, message, metadata
            FROM logs
            ORDER BY timestamp DESC
            LIMIT 1000
        """)

        results = cursor.fetchall()
        db_pool.return_connection(conn)

        # –°–æ–∑–¥–∞–Ω–∏–µ CSV —Ñ–∞–π–ª–∞
        filename = f"aladdin_export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
        filepath = f"exports/{filename}"

        os.makedirs("exports", exist_ok=True)

        with open(filepath, 'w', newline='', encoding='utf-8') as csvfile:
            writer = csv.writer(csvfile)
            writer.writerow(['Timestamp', 'Level', 'Component', 'Message', 'Metadata'])
            writer.writerows(results)

        return jsonify({"success": True, "filename": filename, "count": len(results)})

    except Exception as e:
        return jsonify({"error": str(e)}), 500

if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ ALADDIN Dashboard Server...")
    print("üìä –î–∞—à–±–æ—Ä–¥ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:5000")
    print("üîß API –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:5000/api/")
    print("üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")

    try:
        app.run(host='0.0.0.0', port=5000, debug=False, threaded=True)
    except KeyboardInterrupt:
        print("\nüõë –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
