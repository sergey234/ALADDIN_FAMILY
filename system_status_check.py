#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã ALADDIN
"""

import sys
import os
import json
from datetime import datetime

sys.path.append('.')

def check_api_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ API —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        import requests
        response = requests.get('http://localhost:5000/api/status', timeout=5)
        if response.status_code == 200:
            data = response.json()
            return {
                "status": "running",
                "uptime": data.get('uptime_minutes', 0),
                "requests": data.get('total_requests', 0),
                "success_rate": data.get('success_rate', 0)
            }
    except:
        pass
    return {"status": "stopped"}

def check_auto_learning_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è"""
    try:
        from security.ai_agents.auto_learning_system import AutoLearningSystem
        auto_learning = AutoLearningSystem()
        status = auto_learning.get_status()
        return status
    except Exception as e:
        return {"error": str(e), "status": "not_available"}

def check_data_collection():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö"""
    data_dirs = [
        "data/auto_learning/",
        "data/enhanced_collection/",
        "data/ml_models/",
        "data/demo_russian_fraud_data.json"
    ]
    
    results = {}
    for dir_path in data_dirs:
        if os.path.exists(dir_path):
            if os.path.isdir(dir_path):
                files = os.listdir(dir_path)
                results[dir_path] = {
                    "exists": True,
                    "type": "directory",
                    "files_count": len(files),
                    "files": files[:5]  # –ü–µ—Ä–≤—ã–µ 5 —Ñ–∞–π–ª–æ–≤
                }
            else:
                size = os.path.getsize(dir_path)
                results[dir_path] = {
                    "exists": True,
                    "type": "file",
                    "size_bytes": size
                }
        else:
            results[dir_path] = {"exists": False}
    
    return results

def check_sfm_integration():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å SFM"""
    try:
        sfm_path = "data/sfm/function_registry.json"
        if os.path.exists(sfm_path):
            with open(sfm_path, 'r', encoding='utf-8') as f:
                registry = json.load(f)
            
            # –ò—â–µ–º –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
            new_functions = [
                "auto_learning_system",
                "enhanced_data_collector", 
                "fraud_detection_api",
                "improved_ml_models"
            ]
            
            found_functions = []
            for func_id in new_functions:
                if func_id in registry.get('functions', {}):
                    found_functions.append(func_id)
            
            return {
                "exists": True,
                "total_functions": len(registry.get('functions', {})),
                "new_functions_found": found_functions,
                "new_functions_count": len(found_functions)
            }
    except Exception as e:
        return {"error": str(e), "exists": False}
    
    return {"exists": False}

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("üîç –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê –°–ò–°–¢–ï–ú–´ ALADDIN")
    print("=" * 60)
    print(f"üìÖ –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ API —Å–µ—Ä–≤–µ—Ä–∞
    print("üåê API –°–ï–†–í–ï–†:")
    api_status = check_api_status()
    if api_status["status"] == "running":
        print(f"   ‚úÖ –°—Ç–∞—Ç—É—Å: –†–∞–±–æ—Ç–∞–µ—Ç")
        print(f"   ‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {api_status['uptime']} –º–∏–Ω—É—Ç")
        print(f"   üìä –ó–∞–ø—Ä–æ—Å–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {api_status['requests']}")
        print(f"   üéØ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {api_status['success_rate']}%")
    else:
        print(f"   ‚ùå –°—Ç–∞—Ç—É—Å: –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
    print("ü§ñ –°–ò–°–¢–ï–ú–ê –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –û–ë–£–ß–ï–ù–ò–Ø:")
    auto_status = check_auto_learning_status()
    if "error" not in auto_status:
        print(f"   üü¢ –†–∞–±–æ—Ç–∞–µ—Ç: {auto_status.get('is_running', False)}")
        print(f"   üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {auto_status.get('last_update', '–ù–∏–∫–æ–≥–¥–∞')}")
        print(f"   ‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {auto_status.get('update_interval', 0)} —Å–µ–∫—É–Ω–¥")
        print(f"   üìä –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: {auto_status.get('data_collection_interval', 0)} —Å–µ–∫—É–Ω–¥")
        print(f"   üîÑ –°–ª–µ–¥—É—é—â–∏–π —Å–±–æ—Ä: {auto_status.get('next_collection', '–ù–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω')}")
    else:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {auto_status['error']}")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
    print("üìä –°–ë–û–† –î–ê–ù–ù–´–•:")
    data_status = check_data_collection()
    for path, info in data_status.items():
        if info.get("exists"):
            if info["type"] == "directory":
                print(f"   ‚úÖ {path}: {info['files_count']} —Ñ–∞–π–ª–æ–≤")
                if info['files']:
                    print(f"      üìÅ –§–∞–π–ª—ã: {', '.join(info['files'])}")
            else:
                size_kb = info['size_bytes'] / 1024
                print(f"   ‚úÖ {path}: {size_kb:.1f} KB")
        else:
            print(f"   ‚ùå {path}: –ù–µ –Ω–∞–π–¥–µ–Ω")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ SFM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    print("üîß SFM –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø:")
    sfm_status = check_sfm_integration()
    if sfm_status.get("exists"):
        print(f"   ‚úÖ –†–µ–µ—Å—Ç—Ä —Ñ—É–Ω–∫—Ü–∏–π: –ù–∞–π–¥–µ–Ω")
        print(f"   üìä –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π: {sfm_status['total_functions']}")
        print(f"   üÜï –ù–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π: {sfm_status['new_functions_count']}")
        if sfm_status['new_functions_found']:
            print(f"      üîß –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã: {', '.join(sfm_status['new_functions_found'])}")
    else:
        print(f"   ‚ùå –†–µ–µ—Å—Ç—Ä —Ñ—É–Ω–∫—Ü–∏–π: –ù–µ –Ω–∞–π–¥–µ–Ω")
    print()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
    print("üéØ –ò–¢–û–ì–û–í–´–ô –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´:")
    
    active_components = 0
    total_components = 4
    
    if api_status["status"] == "running":
        active_components += 1
        print("   ‚úÖ API —Å–µ—Ä–≤–µ—Ä: –ê–ö–¢–ò–í–ï–ù")
    else:
        print("   ‚ùå API —Å–µ—Ä–≤–µ—Ä: –ù–ï –ê–ö–¢–ò–í–ï–ù")
    
    if auto_status.get("is_running", False):
        active_components += 1
        print("   ‚úÖ –ê–≤—Ç–æ–æ–±—É—á–µ–Ω–∏–µ: –ê–ö–¢–ò–í–ù–û")
    else:
        print("   ‚ùå –ê–≤—Ç–æ–æ–±—É—á–µ–Ω–∏–µ: –ù–ï –ê–ö–¢–ò–í–ù–û")
    
    if any(info.get("exists") for info in data_status.values()):
        active_components += 1
        print("   ‚úÖ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö: –ê–ö–¢–ò–í–ï–ù")
    else:
        print("   ‚ùå –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö: –ù–ï –ê–ö–¢–ò–í–ï–ù")
    
    if sfm_status.get("exists", False):
        active_components += 1
        print("   ‚úÖ SFM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: –ê–ö–¢–ò–í–ù–ê")
    else:
        print("   ‚ùå SFM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: –ù–ï –ê–ö–¢–ò–í–ù–ê")
    
    print()
    percentage = (active_components / total_components) * 100
    print(f"üìä –û–ë–©–ê–Ø –ê–ö–¢–ò–í–ù–û–°–¢–¨: {active_components}/{total_components} ({percentage:.0f}%)")
    
    if percentage >= 75:
        print("üü¢ –°–ò–°–¢–ï–ú–ê –†–ê–ë–û–¢–ê–ï–¢ –û–¢–õ–ò–ß–ù–û!")
    elif percentage >= 50:
        print("üü° –°–ò–°–¢–ï–ú–ê –†–ê–ë–û–¢–ê–ï–¢ –ß–ê–°–¢–ò–ß–ù–û")
    else:
        print("üî¥ –°–ò–°–¢–ï–ú–ê –¢–†–ï–ë–£–ï–¢ –í–ù–ò–ú–ê–ù–ò–Ø")
    
    print()
    print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    if api_status["status"] != "running":
        print("   üîß –ó–∞–ø—É—Å—Ç–∏—Ç–µ API —Å–µ—Ä–≤–µ—Ä: python3 security/ai_agents/fraud_detection_api.py")
    if not auto_status.get("is_running", False):
        print("   üîß –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∞–≤—Ç–æ–æ–±—É—á–µ–Ω–∏–µ: python3 security/ai_agents/auto_learning_system.py")
    if not any(info.get("exists") for info in data_status.values()):
        print("   üîß –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö: python3 security/ai_agents/enhanced_data_collector.py")

if __name__ == "__main__":
    main()