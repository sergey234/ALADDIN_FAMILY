#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ó–∞–ø—É—Å–∫ –Ω–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ ALADDIN
Interactive API Docs –∏ Real-time Architecture
"""

import os
import sys
import subprocess
import threading
import time
import signal
import logging
from datetime import datetime
from typing import List, Dict

class ALADDINServicesManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–ø—É—Å–∫–∞ –Ω–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ ALADDIN"""
    
    def __init__(self):
        self.logger = self._setup_logging()
        self.services = {}
        self.running = False
        
    def _setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler('logs/new_services.log'),
                logging.StreamHandler()
            ]
        )
        return logging.getLogger(self.__class__.__name__)
    
    def start_interactive_api_docs(self):
        """–ó–∞–ø—É—Å–∫ Interactive API Docs"""
        try:
            self.logger.info("üöÄ –ó–∞–ø—É—Å–∫ Interactive API Docs...")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞
            if not os.path.exists("api_docs/secure_api_docs.py"):
                self.logger.error("‚ùå –§–∞–π–ª api_docs/secure_api_docs.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            # –ó–∞–ø—É—Å–∫ FastAPI —Å–µ—Ä–≤–µ—Ä–∞
            cmd = [
                sys.executable, "-m", "uvicorn",
                "api_docs.secure_api_docs:InteractiveAPIDocs",
                "--host", "0.0.0.0",
                "--port", "8008",
                "--reload",
                "--log-level", "info"
            ]
            
            process = subprocess.Popen(
                cmd,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True
            )
            
            self.services['api_docs'] = {
                'process': process,
                'port': 8008,
                'url': 'http://localhost:8008',
                'name': 'Interactive API Docs'
            }
            
            self.logger.info("‚úÖ Interactive API Docs –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8008")
            self.logger.info("üåê URL: http://localhost:8008")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Interactive API Docs: {e}")
            return False
    
    def start_real_time_architecture(self):
        """–ó–∞–ø—É—Å–∫ Real-time Architecture Visualizer"""
        try:
            self.logger.info("üöÄ –ó–∞–ø—É—Å–∫ Real-time Architecture Visualizer...")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞
            if not os.path.exists("architecture/real_time_visualizer.py"):
                self.logger.error("‚ùå –§–∞–π–ª architecture/real_time_visualizer.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            # –ó–∞–ø—É—Å–∫ Flask-SocketIO —Å–µ—Ä–≤–µ—Ä–∞
            cmd = [
                sys.executable,
                "architecture/real_time_visualizer.py"
            ]
            
            process = subprocess.Popen(
                cmd,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True
            )
            
            self.services['architecture'] = {
                'process': process,
                'port': 8007,
                'url': 'http://localhost:8007',
                'name': 'Real-time Architecture'
            }
            
            self.logger.info("‚úÖ Real-time Architecture –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8007")
            self.logger.info("üåê URL: http://localhost:8007")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Real-time Architecture: {e}")
            return False
    
    def check_dependencies(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        self.logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
        
        required_packages = [
            'fastapi',
            'uvicorn',
            'flask',
            'flask_socketio',
            'docker',
            'psutil',
            'networkx',
            'matplotlib',
            'numpy',
            'pyyaml',
            'cryptography',
            'pyjwt'
        ]
        
        missing_packages = []
        
        for package in required_packages:
            try:
                __import__(package)
                self.logger.info(f"‚úÖ {package} - —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except ImportError:
                missing_packages.append(package)
                self.logger.warning(f"‚ùå {package} - –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        if missing_packages:
            self.logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–∞–∫–µ—Ç—ã: {', '.join(missing_packages)}")
            self.logger.info("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –∫–æ–º–∞–Ω–¥–æ–π: pip install -r requirements_new.txt")
            return False
        
        self.logger.info("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        return True
    
    def create_directories(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
        directories = [
            'logs',
            'api_docs/templates',
            'api_docs/static',
            'architecture/templates',
            'architecture/static'
        ]
        
        for directory in directories:
            os.makedirs(directory, exist_ok=True)
            self.logger.info(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {directory}")
    
    def monitor_services(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ä–≤–∏—Å–æ–≤"""
        while self.running:
            try:
                for service_name, service_info in self.services.items():
                    process = service_info['process']
                    
                    if process.poll() is not None:
                        # –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è
                        self.logger.warning(f"‚ö†Ô∏è –°–µ—Ä–≤–∏—Å {service_name} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è")
                        
                        # –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
                        if service_name == 'api_docs':
                            self.start_interactive_api_docs()
                        elif service_name == 'architecture':
                            self.start_real_time_architecture()
                
                time.sleep(5)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
                
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                time.sleep(5)
    
    def stop_services(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        self.logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...")
        
        for service_name, service_info in self.services.items():
            try:
                process = service_info['process']
                if process.poll() is None:  # –ü—Ä–æ—Ü–µ—Å—Å –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
                    process.terminate()
                    process.wait(timeout=10)
                    self.logger.info(f"‚úÖ –°–µ—Ä–≤–∏—Å {service_name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                else:
                    self.logger.info(f"‚ÑπÔ∏è –°–µ—Ä–≤–∏—Å {service_name} —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–∏—Å–∞ {service_name}: {e}")
        
        self.services.clear()
        self.running = False
    
    def start_all_services(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        self.logger.info("üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –Ω–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ ALADDIN...")
        self.logger.info("=" * 60)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        self.create_directories()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        if not self.check_dependencies():
            self.logger.error("‚ùå –ù–µ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –ó–∞–ø—É—Å–∫ –ø—Ä–µ—Ä–≤–∞–Ω.")
            return False
        
        # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
        success_count = 0
        
        if self.start_interactive_api_docs():
            success_count += 1
        
        if self.start_real_time_architecture():
            success_count += 1
        
        if success_count == 0:
            self.logger.error("‚ùå –ù–∏ –æ–¥–∏–Ω —Å–µ—Ä–≤–∏—Å –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å")
            return False
        
        self.logger.info("=" * 60)
        self.logger.info(f"‚úÖ –ó–∞–ø—É—â–µ–Ω–æ {success_count} –∏–∑ 2 —Å–µ—Ä–≤–∏—Å–æ–≤")
        self.logger.info("üåê –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:")
        
        for service_name, service_info in self.services.items():
            self.logger.info(f"   üìä {service_info['name']}: {service_info['url']}")
        
        # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        self.running = True
        monitor_thread = threading.Thread(target=self.monitor_services, daemon=True)
        monitor_thread.start()
        
        return True
    
    def show_status(self):
        """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤"""
        self.logger.info("üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:")
        self.logger.info("=" * 40)
        
        if not self.services:
            self.logger.info("‚ùå –°–µ—Ä–≤–∏—Å—ã –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã")
            return
        
        for service_name, service_info in self.services.items():
            process = service_info['process']
            status = "üü¢ –†–∞–±–æ—Ç–∞–µ—Ç" if process.poll() is None else "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            
            self.logger.info(f"üìä {service_info['name']}")
            self.logger.info(f"   –°—Ç–∞—Ç—É—Å: {status}")
            self.logger.info(f"   –ü–æ—Ä—Ç: {service_info['port']}")
            self.logger.info(f"   URL: {service_info['url']}")
            self.logger.info("")

def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
    if 'manager' in globals():
        manager.stop_services()
    sys.exit(0)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    global manager
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        manager = ALADDINServicesManager()
        
        # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
        if manager.start_all_services():
            print("\nüéâ –ù–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã ALADDIN —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω—ã!")
            print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:")
            print("   üõ°Ô∏è Interactive API Docs: http://localhost:8008")
            print("   üó∫Ô∏è Real-time Architecture: http://localhost:8007")
            print("\nüí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
            try:
                while True:
                    time.sleep(1)
            except KeyboardInterrupt:
                print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...")
                manager.stop_services()
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã")
            return 1
            
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    sys.exit(main())