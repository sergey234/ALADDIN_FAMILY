#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö public –º–µ—Ç–æ–¥–æ–≤ SecurityMonitoringManager
"""

import sys
import os
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from security.security_monitoring_a_plus import (
    MonitoringLevel,
    AlertType,
    SecurityEvent,
    MonitoringConfig,
    ThreatDetectionStrategy,
    AnomalyDetectionStrategy,
    MonitoringDataManager,
    AlertManager,
    SecurityMonitoringManager
)


def test_public_methods():
    """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö public –º–µ—Ç–æ–¥–æ–≤"""
    print("üöÄ –¢–ï–°–¢ –î–û–°–¢–£–ü–ù–û–°–¢–ò PUBLIC –ú–ï–¢–û–î–û–í")
    print("=" * 50)
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = MonitoringConfig(
            enabled=True,
            alert_threshold=5,
            check_interval=30,
            retention_days=7,
            log_level="INFO"
        )
        
        # 1. –¢–µ—Å—Ç –º–µ—Ç–æ–¥–æ–≤ ThreatDetectionStrategy
        print("1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ThreatDetectionStrategy...")
        threat_strategy = ThreatDetectionStrategy(config)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–µ—Ç–æ–¥–æ–≤
        assert hasattr(threat_strategy, 'check_security'), "check_security –Ω–µ –Ω–∞–π–¥–µ–Ω"
        assert hasattr(threat_strategy, 'get_strategy_name'), "get_strategy_name –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥—ã
        strategy_name = threat_strategy.get_strategy_name()
        assert strategy_name == "ThreatDetection", f"–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {strategy_name}"
        print(f"‚úÖ ThreatDetectionStrategy: {strategy_name}")
        
        # 2. –¢–µ—Å—Ç –º–µ—Ç–æ–¥–æ–≤ AnomalyDetectionStrategy
        print("2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AnomalyDetectionStrategy...")
        anomaly_strategy = AnomalyDetectionStrategy(config)
        
        strategy_name = anomaly_strategy.get_strategy_name()
        assert strategy_name == "AnomalyDetection", f"–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {strategy_name}"
        print(f"‚úÖ AnomalyDetectionStrategy: {strategy_name}")
        
        # 3. –¢–µ—Å—Ç –º–µ—Ç–æ–¥–æ–≤ MonitoringDataManager
        print("3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MonitoringDataManager...")
        data_manager = MonitoringDataManager(config)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–µ—Ç–æ–¥–æ–≤
        assert hasattr(data_manager, 'add_event'), "add_event –Ω–µ –Ω–∞–π–¥–µ–Ω"
        assert hasattr(data_manager, 'get_events'), "get_events –Ω–µ –Ω–∞–π–¥–µ–Ω"
        assert hasattr(data_manager, 'get_events_by_level'), "get_events_by_level –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥—ã
        events = data_manager.get_events()
        assert isinstance(events, list), "get_events –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å–ø–∏—Å–æ–∫"
        print(f"‚úÖ MonitoringDataManager: {len(events)} —Å–æ–±—ã—Ç–∏–π")
        
        # 4. –¢–µ—Å—Ç –º–µ—Ç–æ–¥–æ–≤ AlertManager
        print("4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AlertManager...")
        alert_manager = AlertManager(config)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–µ—Ç–æ–¥–æ–≤
        assert hasattr(alert_manager, 'process_events'), "process_events –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        print(f"‚úÖ AlertManager: {type(alert_manager).__name__}")
        
        # 5. –¢–µ—Å—Ç –º–µ—Ç–æ–¥–æ–≤ SecurityMonitoringManager
        print("5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SecurityMonitoringManager...")
        main_manager = SecurityMonitoringManager(
            name="TestManager",
            config=config
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–µ—Ç–æ–¥–æ–≤
        assert hasattr(main_manager, 'add_monitoring_strategy'), "add_monitoring_strategy –Ω–µ –Ω–∞–π–¥–µ–Ω"
        assert hasattr(main_manager, 'remove_monitoring_strategy'), "remove_monitoring_strategy –Ω–µ –Ω–∞–π–¥–µ–Ω"
        assert hasattr(main_manager, 'get_security_status'), "get_security_status –Ω–µ –Ω–∞–π–¥–µ–Ω"
        assert hasattr(main_manager, 'update_config'), "update_config –Ω–µ –Ω–∞–π–¥–µ–Ω"
        assert hasattr(main_manager, 'stop_monitoring'), "stop_monitoring –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥—ã
        status = main_manager.get_security_status()
        assert isinstance(status, dict), "get_security_status –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å–ª–æ–≤–∞—Ä—å"
        assert "total_events" in status, "status –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å total_events"
        print(f"‚úÖ SecurityMonitoringManager: {len(status)} –ø–æ–ª–µ–π —Å—Ç–∞—Ç—É—Å–∞")
        
        # 6. –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        print("6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π...")
        main_manager.add_monitoring_strategy(threat_strategy)
        main_manager.add_monitoring_strategy(anomaly_strategy)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã
        assert len(main_manager.strategies) >= 2, "–°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã"
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {len(main_manager.strategies)}")
        
        # 7. –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        print("7. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        new_config = MonitoringConfig(
            enabled=True,
            alert_threshold=10,
            check_interval=60,
            retention_days=14,
            log_level="DEBUG"
        )
        main_manager.update_config(new_config)
        
        assert main_manager.config.alert_threshold == 10, "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∞"
        print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: threshold={main_manager.config.alert_threshold}")
        
        print("\n" + "=" * 50)
        print("üéâ –í–°–ï PUBLIC –ú–ï–¢–û–î–´ –î–û–°–¢–£–ü–ù–´!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –ü–†–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò –ú–ï–¢–û–î–û–í: {e}")
        import traceback
        traceback.print_exc()
        return False


if __name__ == "__main__":
    success = test_public_methods()
    sys.exit(0 if success else 1)