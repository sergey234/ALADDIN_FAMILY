#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª–∞–º –≤ SFM —Ä–µ–µ—Å—Ç—Ä–µ
–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ 10 —Ñ–∞–π–ª–æ–≤ –∑–∞ —Ä–∞–∑ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
"""

import json
import os
from datetime import datetime

def find_file_in_project(filename: str, root_dir: str):
    """–ò—â–µ—Ç —Ñ–∞–π–ª –ø–æ –∏–º–µ–Ω–∏ –≤–æ –≤—Å–µ–º –ø—Ä–æ–µ–∫—Ç–µ."""
    for dirpath, _, filenames in os.walk(root_dir):
        if filename in filenames:
            return os.path.relpath(os.path.join(dirpath, filename), root_dir)
    return None

def fix_sfm_paths(registry_file: str, root_dir: str, max_fixes: int = 10):
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –≤ SFM —Ä–µ–µ—Å—Ç—Ä–µ."""
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–µ—Å—Ç—Ä
    with open(registry_file, 'r', encoding='utf-8') as f:
        registry_data = json.load(f)
    
    functions = registry_data.get("functions", {})
    fixed_count = 0
    total_functions = len(functions)
    
    print(f"üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–£–¢–ï–ô –ö –§–ê–ô–õ–ê–ú")
    print(f"================================================")
    print(f"–í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π –≤ —Ä–µ–µ—Å—Ç—Ä–µ: {total_functions}")
    print(f"–ú–∞–∫—Å–∏–º—É–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∑–∞ —Ä–∞–∑: {max_fixes}")
    print("")
    
    for func_id, func_data in functions.items():
        if fixed_count >= max_fixes:
            break
            
        old_path = func_data.get("file_path", "")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ –ø—É—Ç—å –ø—É—Å—Ç–æ–π –∏–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if not old_path or (old_path and not os.path.exists(old_path)):
            # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ ID —Ñ—É–Ω–∫—Ü–∏–∏
            filename = f"{func_id}.py"
            print(f"üîç –ò—â–µ–º —Ñ–∞–π–ª: {filename}")
            
            new_path = find_file_in_project(filename, root_dir)
            if new_path:
                # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Ç—å
                func_data["file_path"] = new_path
                func_data["last_updated"] = datetime.now().isoformat()
                fixed_count += 1
                print(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –ø—É—Ç—å –¥–ª—è {func_id}: {new_path}")
            else:
                print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {filename}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if fixed_count > 0:
        registry_data["functions"] = functions
        registry_data["last_updated"] = datetime.now().isoformat()
        
        with open(registry_file, 'w', encoding='utf-8') as f:
            json.dump(registry_data, f, indent=2, ensure_ascii=False)
        
        print(f"üíæ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {registry_file}")
    
    print(f"")
    print(f"üéØ –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print(f"   –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: {fixed_count} –∏–∑ {max_fixes} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö")
    print(f"   –û—Å—Ç–∞–ª–æ—Å—å —Ñ—É–Ω–∫—Ü–∏–π —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø—É—Ç—è–º–∏: {total_functions - fixed_count}")
    
    return fixed_count

if __name__ == "__main__":
    project_root = os.getcwd()
    registry_path = os.path.join(project_root, "data", "sfm", "function_registry.json")
    
    if not os.path.exists(registry_path):
        print(f"‚ùå –§–∞–π–ª —Ä–µ–µ—Å—Ç—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {registry_path}")
        exit(1)
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–æ 10 —Ñ–∞–π–ª–æ–≤ –∑–∞ —Ä–∞–∑
    fix_sfm_paths(registry_path, project_root, max_fixes=10)