#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø–æ 10 —Ñ—É–Ω–∫—Ü–∏–π –∑–∞ —Ä–∞–∑, –∏—Å–∫–ª—é—á–∞—è web –∏ –ø–æ—Ä—Ç–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
"""

import json
import os
import time
import psutil
from datetime import datetime

def load_registry():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–µ–µ—Å—Ç—Ä —Ñ—É–Ω–∫—Ü–∏–π"""
    with open('data/sfm/function_registry.json', 'r', encoding='utf-8') as f:
        return json.load(f)

def save_registry(data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–µ—Å—Ç—Ä —Ñ—É–Ω–∫—Ü–∏–π"""
    with open('data/sfm/function_registry.json', 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

def get_sleeping_critical_functions(data):
    """–ü–æ–ª—É—á–∞–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Å–ø—è—â–µ–º —Ä–µ–∂–∏–º–µ"""
    functions = data.get('functions', {})
    critical_sleeping = []
    
    for func_id, func_data in functions.items():
        status = func_data.get('status', '')
        priority = func_data.get('priority', '')
        func_type = func_data.get('function_type', '')
        name = func_data.get('name', '')
        
        # –ò—Å–∫–ª—é—á–∞–µ–º web —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –ø–æ—Ä—Ç–∞–º–∏
        if any(exclude in name.lower() for exclude in ['web', 'interface', 'server', 'api']):
            continue
        if any(exclude in func_type.lower() for exclude in ['web', 'interface', 'server', 'api']):
            continue
            
        # –ò—â–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–ø—è—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
        if status == 'sleeping' and priority == 'critical':
            critical_sleeping.append((func_id, func_data))
    
    return critical_sleeping

def get_system_stats():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã"""
    return {
        'cpu_percent': psutil.cpu_percent(interval=1),
        'memory_percent': psutil.virtual_memory().percent,
        'memory_available': psutil.virtual_memory().available,
        'timestamp': datetime.now().isoformat()
    }

def activate_functions(functions_to_activate):
    """–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Ä–µ–µ—Å—Ç—Ä–µ"""
    data = load_registry()
    functions = data.get('functions', {})
    
    activated = []
    for func_id, func_data in functions_to_activate:
        if func_id in functions:
            functions[func_id]['status'] = 'active'
            functions[func_id]['last_updated'] = datetime.now().isoformat()
            activated.append(func_id)
    
    save_registry(data)
    return activated

def test_activation(batch_size=10):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏—é —Ñ—É–Ω–∫—Ü–∏–π"""
    print(f"üöÄ –¢–ï–°–¢–û–í–ê–Ø –ê–ö–¢–ò–í–ê–¶–ò–Ø –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –§–£–ù–ö–¶–ò–ô")
    print(f"================================================")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–µ—Å—Ç—Ä
    data = load_registry()
    critical_sleeping = get_sleeping_critical_functions(data)
    
    print(f"–í—Å–µ–≥–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–ø—è—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π: {len(critical_sleeping)}")
    print(f"–†–∞–∑–º–µ—Ä –ø–∞—Ä—Ç–∏–∏: {batch_size}")
    print("")
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats_before = get_system_stats()
    print(f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–û –ê–ö–¢–ò–í–ê–¶–ò–ò:")
    print(f"   CPU: {stats_before['cpu_percent']:.1f}%")
    print(f"   Memory: {stats_before['memory_percent']:.1f}%")
    print(f"   Available: {stats_before['memory_available'] / 1024**3:.1f} GB")
    print("")
    
    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
    functions_to_activate = critical_sleeping[:batch_size]
    activated = activate_functions(functions_to_activate)
    
    print(f"‚úÖ –ê–ö–¢–ò–í–ò–†–û–í–ê–ù–û {len(activated)} –§–£–ù–ö–¶–ò–ô:")
    for func_id in activated:
        func_data = next(f for f_id, f in functions_to_activate if f_id == func_id)
        print(f"   ‚Ä¢ {func_data[1].get('name', func_id)} ({func_id})")
    
    # –ñ–¥–µ–º —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
    print(f"\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã (5 —Å–µ–∫)...")
    time.sleep(5)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    stats_after = get_system_stats()
    print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–°–õ–ï –ê–ö–¢–ò–í–ê–¶–ò–ò:")
    print(f"   CPU: {stats_after['cpu_percent']:.1f}% (Œî{stats_after['cpu_percent'] - stats_before['cpu_percent']:+.1f}%)")
    print(f"   Memory: {stats_after['memory_percent']:.1f}% (Œî{stats_after['memory_percent'] - stats_before['memory_percent']:+.1f}%)")
    print(f"   Available: {stats_after['memory_available'] / 1024**3:.1f} GB")
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print(f"\nüîç –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:")
    cpu_delta = stats_after['cpu_percent'] - stats_before['cpu_percent']
    memory_delta = stats_after['memory_percent'] - stats_before['memory_percent']
    
    if cpu_delta > 10:
        print(f"   ‚ö†Ô∏è  –í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ CPU: +{cpu_delta:.1f}%")
    elif cpu_delta > 5:
        print(f"   ‚ö° –£–º–µ—Ä–µ–Ω–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ CPU: +{cpu_delta:.1f}%")
    else:
        print(f"   ‚úÖ –ù–∏–∑–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ CPU: +{cpu_delta:.1f}%")
    
    if memory_delta > 5:
        print(f"   ‚ö†Ô∏è  –í—ã—Å–æ–∫–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏: +{memory_delta:.1f}%")
    elif memory_delta > 2:
        print(f"   ‚ö° –£–º–µ—Ä–µ–Ω–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏: +{memory_delta:.1f}%")
    else:
        print(f"   ‚úÖ –ù–∏–∑–∫–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏: +{memory_delta:.1f}%")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    report = {
        'timestamp': datetime.now().isoformat(),
        'batch_size': batch_size,
        'activated_functions': activated,
        'stats_before': stats_before,
        'stats_after': stats_after,
        'cpu_delta': cpu_delta,
        'memory_delta': memory_delta
    }
    
    with open('data/sfm/repair_reports/activation_report.json', 'w', encoding='utf-8') as f:
        json.dump(report, f, ensure_ascii=False, indent=4)
    
    print(f"\nüíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: data/sfm/repair_reports/activation_report.json")
    
    return activated, stats_before, stats_after

if __name__ == "__main__":
    test_activation(batch_size=10)
