#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ UNKNOWN —Ñ—É–Ω–∫—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ —è–≤–ª—è—é—Ç—Å—è –º–æ–¥–µ–ª—è–º–∏ –¥–∞–Ω–Ω—ã—Ö
–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
"""

import json
import os
import re
from datetime import datetime
from collections import Counter

def categorize_data_model(func_id, func_name, description):
    """–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ—Ç –º–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ ID, –∏–º–µ–Ω–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏—è."""
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –º–æ–¥–µ–ª–µ–π
    patterns = {
        'security_model': [
            r'security_', r'user.*session', r'rate.*limit', r'health.*check',
            r'load.*balancing', r'access.*control', r'authentication', r'authorization',
            r'device.*fingerprint', r'network.*monitoring', r'performance.*metrics',
            r'threat.*detection', r'intrusion.*attempt', r'circuit.*breaker',
            r'recovery.*plan', r'security.*alert', r'family.*contact', r'audit.*finding'
        ],
        'bot_model': [
            r'bot_', r'activity.*alert', r'user.*preference', r'message.*analysis',
            r'notification.*', r'telegram.*', r'whatsapp.*', r'instagram.*',
            r'parental.*control', r'emergency.*response', r'content.*analysis',
            r'child.*profile', r'emergency.*contact'
        ],
        'ai_agent_model': [
            r'ai_agent_', r'data.*protection.*result', r'behavior.*pattern',
            r'incident.*', r'threat.*intelligence', r'password.*metrics',
            r'emergency.*response.*system', r'network.*threat', r'compliance.*metrics',
            r'deepfake.*analysis', r'financial.*protection.*hub', r'performance.*metric',
            r'antifraud.*master', r'behaviormetrics', r'optimization.*recommendation',
            r'behaviorevent', r'mobile.*threat', r'incident.*response.*metrics',
            r'voice.*analysis.*engine', r'threat.*intelligence.*metrics',
            r'mobile.*device', r'behavior.*analysis', r'network.*analysis',
            r'threat.*indicator', r'emergency.*alert', r'password.*policy',
            r'financial.*risk.*assessment', r'voice.*analysis.*result'
        ],
        'monitoring_model': [
            r'performance.*metrics', r'optimization.*metrics', r'detection.*metrics',
            r'scaling.*metrics', r'orchestration.*metrics', r'cache.*metrics',
            r'network.*metric', r'load.*balancing.*metrics', r'circuit.*breaker.*event',
            r'interface.*event.*record', r'alert.*level', r'load.*balancing.*request',
            r'api.*log', r'intrusion.*attempt', r'circuit.*breaker.*record',
            r'access.*request', r'attack.*type', r'interface.*config',
            r'voice.*interface', r'fixed.*window', r'least.*connections.*algorithm',
            r'mobile.*app', r'circuit.*breakerevent', r'device.*status',
            r'instagram.*comment', r'instagram.*user', r'compliance.*requirement',
            r'malware.*protection', r'time.*based.*strategy', r'network.*monitoring',
            r'ratelimit.*request', r'device.*fingerprint', r'authentication.*interface',
            r'network.*packet', r'telegram.*message', r'incident.*response.*metrics',
            r'circuit.*breaker.*request', r'intrusion.*prevention', r'optimization.*result',
            r'performance.*optimizer', r'threat.*level', r'threat.*intelligence.*metrics',
            r'forensics.*report', r'sliding.*window', r'load.*balancing.*session',
            r'threat.*report', r'error.*rate.*based.*strategy', r'evidence',
            r'round.*robin.*algorithm', r'mobile.*device', r'emergency.*incident',
            r'anomaly.*detector', r'node.*info', r'behavior.*analysis',
            r'content.*filter', r'telegram.*user', r'network.*analysis',
            r'threat.*indicator', r'api.*route', r'auto.*save', r'control.*rule',
            r'emergency.*response', r'circuit.*breaker.*config', r'emergency.*contact.*info',
            r'interface.*record', r'emergency.*alert', r'child.*protection',
            r'policy.*rule', r'cache.*metrics', r'child.*profile', r'ratelimiter',
            r'password.*policy', r'web.*interface', r'financial.*risk.*assessment',
            r'api.*key', r'elderly.*protection', r'interface.*response',
            r'network.*flow', r'api.*response', r'emergency.*contact', r'threat.*type',
            r'voice.*analysis.*result', r'whatsapp.*message', r'child.*activity.*summary'
        ],
        'utility_model': [
            r'test_', r'color.*scheme', r'optimization.*metrics', r'cache.*entry',
            r'api.*interface', r'token.*bucket', r'scam.*pattern', r'count.*based.*strategy',
            r'pbkdf2.*hmac', r'circuit.*breaker.*response', r'network.*alert',
            r'metric.*data', r'network.*device', r'health.*check.*interface',
            r'parental.*controls', r'device.*type', r'notification.*',
            r'access.*control', r'scaling.*decision', r'scaling.*rule',
            r'metrics.*collector.*interface', r'threat.*status', r'interface.*request',
            r'api.*gateway', r'load.*balancing.*algorithm.*interface', r'action.*type',
            r'user', r'behaviormetrics', r'optimization.*recommendation',
            r'telegram.*security.*config', r'behaviorevent', r'interface.*event.*record',
            r'cluster.*analyzer', r'alert.*level', r'load.*balancing.*request',
            r'mobile.*threat', r'api.*log', r'notification.*response',
            r'intrusion.*attempt', r'circuit.*breaker.*record', r'recovery.*plan',
            r'access.*request', r'attack.*type', r'interface.*config',
            r'network.*metric', r'voice.*interface', r'fixed.*window',
            r'least.*connections.*algorithm', r'circuit.*breaker', r'mobile.*app',
            r'load.*balancing.*metrics', r'circuit.*breakerevent', r'test.*function',
            r'device.*status', r'instagram.*comment', r'instagram.*user',
            r'compliance.*requirement', r'malware.*protection', r'scaling.*metrics',
            r'orchestration.*metrics', r'time.*based.*strategy', r'detection.*metrics',
            r'network.*monitoring', r'ratelimit.*request', r'device.*fingerprint',
            r'authentication.*interface', r'network.*packet', r'telegram.*message',
            r'incident.*response.*metrics', r'circuit.*breaker.*request',
            r'intrusion.*prevention', r'optimization.*result', r'performance.*optimizer',
            r'threat.*level', r'threat.*intelligence.*metrics', r'forensics.*report',
            r'sliding.*window', r'load.*balancing.*session', r'threat.*report',
            r'error.*rate.*based.*strategy', r'evidence', r'round.*robin.*algorithm',
            r'mobile.*device', r'emergency.*incident', r'anomaly.*detector',
            r'node.*info', r'behavior.*analysis', r'content.*filter',
            r'telegram.*user', r'network.*analysis', r'threat.*indicator',
            r'api.*route', r'auto.*save', r'control.*rule', r'emergency.*response',
            r'circuit.*breaker.*config', r'emergency.*contact.*info',
            r'interface.*record', r'emergency.*alert', r'child.*protection',
            r'policy.*rule', r'cache.*metrics', r'child.*profile', r'ratelimiter',
            r'password.*policy', r'web.*interface', r'financial.*risk.*assessment',
            r'api.*key', r'elderly.*protection', r'interface.*response',
            r'network.*flow', r'api.*response', r'emergency.*contact', r'threat.*type',
            r'voice.*analysis.*result', r'whatsapp.*message', r'child.*activity.*summary'
        ]
    }
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º ID, –∏–º—è –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
    text_to_analyze = f"{func_id} {func_name} {description}".lower()
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
    type_scores = {}
    for func_type, pattern_list in patterns.items():
        score = 0
        for pattern in pattern_list:
            matches = len(re.findall(pattern, text_to_analyze))
            score += matches
        type_scores[func_type] = score
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–∏–ø —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
    if type_scores:
        best_type = max(type_scores, key=type_scores.get)
        if type_scores[best_type] > 0:
            return best_type
    
    return "data_model"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –º–æ–¥–µ–ª–µ–π –¥–∞–Ω–Ω—ã—Ö

def categorize_unknown_data_models(registry_file, max_fixes=10):
    """–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ—Ç UNKNOWN —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ —è–≤–ª—è—é—Ç—Å—è –º–æ–¥–µ–ª—è–º–∏ –¥–∞–Ω–Ω—ã—Ö."""
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–µ—Å—Ç—Ä
    with open(registry_file, 'r', encoding='utf-8') as f:
        registry_data = json.load(f)
    
    functions = registry_data.get("functions", {})
    unknown_functions = []
    
    # –ù–∞—Ö–æ–¥–∏–º UNKNOWN —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –ø—É—Ç–µ–π (–º–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö)
    for func_id, func_data in functions.items():
        func_type = func_data.get('function_type', '')
        file_path = func_data.get('file_path', '')
        if func_type == 'unknown' and not file_path:
            unknown_functions.append((func_id, func_data))
    
    print(f"üîç –ö–ê–¢–ï–ì–û–†–ò–ó–ê–¶–ò–Ø –ú–û–î–ï–õ–ï–ô –î–ê–ù–ù–´–•")
    print(f"================================================")
    print(f"–í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π –≤ —Ä–µ–µ—Å—Ç—Ä–µ: {len(functions)}")
    print(f"UNKNOWN –º–æ–¥–µ–ª–µ–π –¥–∞–Ω–Ω—ã—Ö: {len(unknown_functions)}")
    print(f"–ú–∞–∫—Å–∏–º—É–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∑–∞ —Ä–∞–∑: {max_fixes}")
    print("")
    
    fixed_count = 0
    type_changes = Counter()
    
    for func_id, func_data in unknown_functions:
        if fixed_count >= max_fixes:
            break
            
        func_name = func_data.get('name', '')
        description = func_data.get('description', '')
        
        print(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {func_id}...")
        print(f"   Name: {func_name}")
        print(f"   Description: {description[:60]}...")
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö
        new_type = categorize_data_model(func_id, func_name, description)
        
        if new_type != "unknown":
            old_type = func_data.get('function_type', 'unknown')
            func_data['function_type'] = new_type
            func_data['last_updated'] = datetime.now().isoformat()
            
            type_changes[new_type] += 1
            fixed_count += 1
            
            print(f"   ‚úÖ –¢–∏–ø –∏–∑–º–µ–Ω–µ–Ω: {old_type} ‚Üí {new_type}")
        else:
            print(f"   ‚ö†Ô∏è –¢–∏–ø –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω: {new_type}")
        
        print()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    with open(registry_file, 'w', encoding='utf-8') as f:
        json.dump(registry_data, f, ensure_ascii=False, indent=4)
    
    print(f"üíæ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {registry_file}")
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è UNKNOWN
    remaining_unknown = 0
    for func_id, func_data in functions.items():
        if func_data.get('function_type', '') == 'unknown':
            remaining_unknown += 1
    
    print(f"\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print(f"   –ú–æ–¥–µ–ª–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {fixed_count}")
    print(f"   –û—Å—Ç–∞–ª–æ—Å—å UNKNOWN —Ñ—É–Ω–∫—Ü–∏–π: {remaining_unknown}")
    
    if type_changes:
        print(f"\nüìä –ù–û–í–´–ï –¢–ò–ü–´:")
        for func_type, count in type_changes.most_common():
            print(f"   {func_type}: +{count}")

if __name__ == "__main__":
    # –£–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Ä–µ–µ—Å—Ç—Ä–∞
    registry_path = 'data/sfm/function_registry.json'

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—é –º–æ–¥–µ–ª–µ–π –¥–∞–Ω–Ω—ã—Ö (—Ç–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ 10)
    categorize_unknown_data_models(registry_path, max_fixes=10)
