#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
"""

import json
import os
import sys
from datetime import datetime

def test_system_comprehensive():
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    
    print("üîç –ö–û–ú–ü–õ–ï–ö–°–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–´")
    print("=" * 50)
    
    results = {
        "timestamp": datetime.now().isoformat(),
        "tests": {},
        "overall_status": "UNKNOWN"
    }
    
    # 1. –ü–†–û–í–ï–†–ö–ê SFM –ó–ê–ì–†–£–ó–ö–ò
    print("\n1. üîß –ü–†–û–í–ï–†–ö–ê SFM –ó–ê–ì–†–£–ó–ö–ò")
    print("-" * 30)
    try:
        sys.path.append('.')
        from security.safe_function_manager import SafeFunctionManager
        sfm = SafeFunctionManager()
        results["tests"]["sfm_load"] = {
            "status": "PASS",
            "functions_count": len(sfm.functions),
            "message": f"SFM –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ: {len(sfm.functions)} —Ñ—É–Ω–∫—Ü–∏–π"
        }
        print(f"‚úÖ SFM –∑–∞–≥—Ä—É–∂–µ–Ω: {len(sfm.functions)} —Ñ—É–Ω–∫—Ü–∏–π")
    except Exception as e:
        results["tests"]["sfm_load"] = {
            "status": "FAIL",
            "error": str(e),
            "message": f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ SFM: {e}"
        }
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ SFM: {e}")
    
    # 2. –ü–†–û–í–ï–†–ö–ê –†–ï–ï–°–¢–†–ê JSON
    print("\n2. üìã –ü–†–û–í–ï–†–ö–ê –†–ï–ï–°–¢–†–ê JSON")
    print("-" * 30)
    try:
        with open('data/sfm/function_registry.json', 'r', encoding='utf-8') as f:
            registry = json.load(f)
        
        total_functions = len(registry.get("functions", {}))
        results["tests"]["registry_load"] = {
            "status": "PASS",
            "total_functions": total_functions,
            "message": f"–†–µ–µ—Å—Ç—Ä –∑–∞–≥—Ä—É–∂–µ–Ω: {total_functions} —Ñ—É–Ω–∫—Ü–∏–π"
        }
        print(f"‚úÖ –†–µ–µ—Å—Ç—Ä –∑–∞–≥—Ä—É–∂–µ–Ω: {total_functions} —Ñ—É–Ω–∫—Ü–∏–π")
    except Exception as e:
        results["tests"]["registry_load"] = {
            "status": "FAIL",
            "error": str(e),
            "message": f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–µ—Å—Ç—Ä–∞: {e}"
        }
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–µ—Å—Ç—Ä–∞: {e}")
    
    # 3. –ü–†–û–í–ï–†–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–• –§–ê–ô–õ–û–í
    print("\n3. üìÅ –ü–†–û–í–ï–†–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–• –§–ê–ô–õ–û–í")
    print("-" * 30)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞
    fixed_functions = []
    for func_id, func_data in registry.get("functions", {}).items():
        file_path = func_data.get("file_path", "")
        if file_path and os.path.exists(file_path):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –Ω–µ —Å—Ç–∞—Ä—ã–π –ø—É—Ç—å
            if not file_path.startswith("security/") or "/" in file_path.replace("security/", ""):
                fixed_functions.append({
                    "id": func_id,
                    "path": file_path,
                    "exists": True
                })
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
    existing_count = 0
    for func in fixed_functions:
        if os.path.exists(func["path"]):
            existing_count += 1
            print(f"‚úÖ {func['id']}: {func['path']}")
        else:
            print(f"‚ùå {func['id']}: {func['path']} - –ù–ï –ù–ê–ô–î–ï–ù")
    
    results["tests"]["fixed_files"] = {
        "status": "PASS" if existing_count == len(fixed_functions) else "PARTIAL",
        "total_checked": len(fixed_functions),
        "existing": existing_count,
        "missing": len(fixed_functions) - existing_count,
        "message": f"–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ {len(fixed_functions)} —Ñ–∞–π–ª–æ–≤, –Ω–∞–π–¥–µ–Ω–æ {existing_count}"
    }
    
    # 4. –ü–†–û–í–ï–†–ö–ê –°–ò–ù–¢–ê–ö–°–ò–°–ê PYTHON
    print("\n4. üêç –ü–†–û–í–ï–†–ö–ê –°–ò–ù–¢–ê–ö–°–ò–°–ê PYTHON")
    print("-" * 30)
    
    syntax_errors = 0
    checked_files = 0
    
    for func in fixed_functions[:5]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 5 —Ñ–∞–π–ª–æ–≤
        if func["path"].endswith('.py') and os.path.exists(func["path"]):
            checked_files += 1
            try:
                with open(func["path"], 'r', encoding='utf-8') as f:
                    compile(f.read(), func["path"], 'exec')
                print(f"‚úÖ {os.path.basename(func['path'])}: –°–∏–Ω—Ç–∞–∫—Å–∏—Å OK")
            except SyntaxError as e:
                syntax_errors += 1
                print(f"‚ùå {os.path.basename(func['path'])}: –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ - {e}")
    
    results["tests"]["python_syntax"] = {
        "status": "PASS" if syntax_errors == 0 else "FAIL",
        "checked_files": checked_files,
        "syntax_errors": syntax_errors,
        "message": f"–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ {checked_files} —Ñ–∞–π–ª–æ–≤, –æ—à–∏–±–æ–∫: {syntax_errors}"
    }
    
    # 5. –ü–†–û–í–ï–†–ö–ê –ò–ú–ü–û–†–¢–û–í
    print("\n5. üì¶ –ü–†–û–í–ï–†–ö–ê –ò–ú–ü–û–†–¢–û–í")
    print("-" * 30)
    
    import_errors = 0
    for func in fixed_functions[:3]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ñ–∞–π–ª–∞
        if func["path"].endswith('.py') and os.path.exists(func["path"]):
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å
                module_name = func["path"].replace('/', '.').replace('.py', '')
                if module_name.startswith('.'):
                    module_name = module_name[1:]
                
                # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞
                with open(func["path"], 'r', encoding='utf-8') as f:
                    content = f.read()
                    if 'import ' in content or 'from ' in content:
                        print(f"‚úÖ {os.path.basename(func['path'])}: –ò–º–ø–æ—Ä—Ç—ã –Ω–∞–π–¥–µ–Ω—ã")
                    else:
                        print(f"‚ö†Ô∏è {os.path.basename(func['path'])}: –ù–µ—Ç –∏–º–ø–æ—Ä—Ç–æ–≤")
            except Exception as e:
                import_errors += 1
                print(f"‚ùå {os.path.basename(func['path'])}: –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ - {e}")
    
    results["tests"]["imports"] = {
        "status": "PASS" if import_errors == 0 else "PARTIAL",
        "import_errors": import_errors,
        "message": f"–û—à–∏–±–æ–∫ –∏–º–ø–æ—Ä—Ç–∞: {import_errors}"
    }
    
    # 6. –û–ë–©–ê–Ø –û–¶–ï–ù–ö–ê
    print("\n6. üìä –û–ë–©–ê–Ø –û–¶–ï–ù–ö–ê")
    print("-" * 30)
    
    passed_tests = sum(1 for test in results["tests"].values() if test["status"] == "PASS")
    total_tests = len(results["tests"])
    
    if passed_tests == total_tests:
        results["overall_status"] = "EXCELLENT"
        print("üéâ –û–¢–õ–ò–ß–ù–û! –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!")
    elif passed_tests >= total_tests * 0.8:
        results["overall_status"] = "GOOD"
        print("‚úÖ –•–û–†–û–®–û! –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ!")
    elif passed_tests >= total_tests * 0.6:
        results["overall_status"] = "FAIR"
        print("‚ö†Ô∏è –£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û! –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã!")
    else:
        results["overall_status"] = "POOR"
        print("‚ùå –ü–õ–û–•–û! –ú–Ω–æ–≥–æ –ø—Ä–æ–±–ª–µ–º!")
    
    print(f"\nüìà –†–ï–ó–£–õ–¨–¢–ê–¢: {passed_tests}/{total_tests} –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ")
    print(f"üèÜ –°–¢–ê–¢–£–°: {results['overall_status']}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    with open('data/sfm/repair_reports/test_results.json', 'w', encoding='utf-8') as f:
        json.dump(results, f, indent=2, ensure_ascii=False)
    
    return results

if __name__ == "__main__":
    test_system_comprehensive()