#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–ª–∏—á–∏–π –º–µ–∂–¥—É —Ä–µ–µ—Å—Ç—Ä–∞–º–∏ SFM
–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç function_registry.json –∏ true_sfm_functions.json
"""

import json
import os
from datetime import datetime
from typing import Dict, List, Set, Any

def load_registry(file_path: str) -> Dict[str, Any]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–µ–µ—Å—Ç—Ä –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {file_path}: {e}")
        return {}

def analyze_registry_differences():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–∏—è –º–µ–∂–¥—É —Ä–µ–µ—Å—Ç—Ä–∞–º–∏"""
    
    print('üîç –ê–ù–ê–õ–ò–ó –†–ê–ó–õ–ò–ß–ò–ô –ú–ï–ñ–î–£ –†–ï–ï–°–¢–†–ê–ú–ò SFM')
    print('=' * 70)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–µ—Å—Ç—Ä—ã
    print('üìã –ó–ê–ì–†–£–ó–ö–ê –†–ï–ï–°–¢–†–û–í...')
    sfm_registry = load_registry('data/sfm/function_registry.json')
    true_sfm = load_registry('true_sfm_functions.json')
    
    if not sfm_registry or not true_sfm:
        print('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–¥–∏–Ω –∏–ª–∏ –æ–±–∞ —Ä–µ–µ—Å—Ç—Ä–∞')
        return
    
    print('‚úÖ –†–µ–µ—Å—Ç—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ')
    print()
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    print('üìä –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´:')
    print('-' * 40)
    
    sfm_functions = sfm_registry.get('functions', {})
    true_functions = true_sfm.get('functions', [])
    
    print(f'üìã FUNCTION_REGISTRY.JSON:')
    print(f'   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ—É–Ω–∫—Ü–∏–π: {len(sfm_functions)}')
    print(f'   –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: {type(sfm_functions)}')
    print(f'   –ö–ª—é—á–∏ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è: {list(sfm_registry.keys())}')
    
    print(f'\nüìã TRUE_SFM_FUNCTIONS.JSON:')
    print(f'   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ—É–Ω–∫—Ü–∏–π: {len(true_functions)}')
    print(f'   –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: {type(true_functions)}')
    print(f'   –ö–ª—é—á–∏ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è: {list(true_sfm.keys())}')
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–∏—è –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ñ—É–Ω–∫—Ü–∏–π
    print(f'\nüìä –°–†–ê–í–ù–ï–ù–ò–ï –ö–û–õ–ò–ß–ï–°–¢–í–ê –§–£–ù–ö–¶–ò–ô:')
    print('-' * 40)
    
    difference = len(true_functions) - len(sfm_functions)
    print(f'   SFM Registry: {len(sfm_functions)} —Ñ—É–Ω–∫—Ü–∏–π')
    print(f'   True SFM: {len(true_functions)} —Ñ—É–Ω–∫—Ü–∏–π')
    print(f'   –†–∞–∑–Ω–∏—Ü–∞: {difference} —Ñ—É–Ω–∫—Ü–∏–π')
    
    if difference > 0:
        print(f'   ‚úÖ True SFM —Å–æ–¥–µ—Ä–∂–∏—Ç –ë–û–õ–¨–®–ï —Ñ—É–Ω–∫—Ü–∏–π –Ω–∞ {difference}')
    elif difference < 0:
        print(f'   ‚ö†Ô∏è  True SFM —Å–æ–¥–µ—Ä–∂–∏—Ç –ú–ï–ù–¨–®–ï —Ñ—É–Ω–∫—Ü–∏–π –Ω–∞ {abs(difference)}')
    else:
        print(f'   ‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ—É–Ω–∫—Ü–∏–π –°–û–í–ü–ê–î–ê–ï–¢')
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ True SFM
    print(f'\nüìã –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï –í TRUE_SFM:')
    print('-' * 40)
    
    additional_data = {}
    for key in ['sleep_functions', 'active_functions', 'registration_scripts', 'statistics']:
        if key in true_sfm:
            data = true_sfm[key]
            if isinstance(data, list):
                additional_data[key] = len(data)
            elif isinstance(data, dict):
                additional_data[key] = len(data)
            else:
                additional_data[key] = data
    
    for key, value in additional_data.items():
        print(f'   {key}: {value}')
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ —Ç–∏–ø–∞–º
    print(f'\nüìä –ê–ù–ê–õ–ò–ó –§–£–ù–ö–¶–ò–ô –ü–û –¢–ò–ü–ê–ú:')
    print('-' * 40)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º SFM Registry
    sfm_types = {}
    for func_data in sfm_functions.values():
        func_type = func_data.get('function_type', 'unknown')
        sfm_types[func_type] = sfm_types.get(func_type, 0) + 1
    
    print(f'üìã SFM REGISTRY - –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –¢–ò–ü–ê–ú:')
    for func_type, count in sorted(sfm_types.items(), key=lambda x: x[1], reverse=True):
        print(f'   {func_type}: {count} —Ñ—É–Ω–∫—Ü–∏–π')
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º True SFM
    true_types = {}
    for func_data in true_functions:
        func_type = func_data.get('function_type', 'unknown')
        true_types[func_type] = true_types.get(func_type, 0) + 1
    
    print(f'\nüìã TRUE SFM - –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –¢–ò–ü–ê–ú:')
    for func_type, count in sorted(true_types.items(), key=lambda x: x[1], reverse=True):
        print(f'   {func_type}: {count} —Ñ—É–Ω–∫—Ü–∏–π')
    
    # –ù–∞—Ö–æ–¥–∏–º —Ä–∞–∑–ª–∏—á–∏—è –≤ —Ç–∏–ø–∞—Ö
    print(f'\nüîç –†–ê–ó–õ–ò–ß–ò–Ø –í –¢–ò–ü–ê–• –§–£–ù–ö–¶–ò–ô:')
    print('-' * 40)
    
    sfm_type_set = set(sfm_types.keys())
    true_type_set = set(true_types.keys())
    
    only_in_sfm = sfm_type_set - true_type_set
    only_in_true = true_type_set - sfm_type_set
    common_types = sfm_type_set & true_type_set
    
    if only_in_sfm:
        print(f'   –¢–∏–ø—ã —Ç–æ–ª—å–∫–æ –≤ SFM Registry: {sorted(only_in_sfm)}')
    if only_in_true:
        print(f'   –¢–∏–ø—ã —Ç–æ–ª—å–∫–æ –≤ True SFM: {sorted(only_in_true)}')
    
    print(f'   –û–±—â–∏—Ö —Ç–∏–ø–æ–≤: {len(common_types)}')
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–∏—è –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –ø–æ –æ–±—â–∏–º —Ç–∏–ø–∞–º
    print(f'\nüìä –†–ê–ó–õ–ò–ß–ò–Ø –í –ö–û–õ–ò–ß–ï–°–¢–í–ï –ü–û –û–ë–©–ò–ú –¢–ò–ü–ê–ú:')
    print('-' * 40)
    
    for func_type in sorted(common_types):
        sfm_count = sfm_types.get(func_type, 0)
        true_count = true_types.get(func_type, 0)
        diff = true_count - sfm_count
        
        if diff != 0:
            print(f'   {func_type}: SFM={sfm_count}, True={true_count}, Œî={diff:+d}')
    
    # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
    report = {
        'timestamp': datetime.now().isoformat(),
        'analysis_summary': {
            'sfm_registry_functions': len(sfm_functions),
            'true_sfm_functions': len(true_functions),
            'difference': difference,
            'sfm_types_count': len(sfm_types),
            'true_types_count': len(true_types),
            'common_types_count': len(common_types)
        },
        'sfm_registry_types': sfm_types,
        'true_sfm_types': true_types,
        'additional_data': additional_data,
        'type_differences': {
            'only_in_sfm': list(only_in_sfm),
            'only_in_true': list(only_in_true),
            'common_types': list(common_types)
        },
        'count_differences': {
            func_type: {
                'sfm_count': sfm_types.get(func_type, 0),
                'true_count': true_types.get(func_type, 0),
                'difference': true_types.get(func_type, 0) - sfm_types.get(func_type, 0)
            }
            for func_type in common_types
            if sfm_types.get(func_type, 0) != true_types.get(func_type, 0)
        }
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    report_path = 'data/sfm/repair_reports/registry_differences_analysis.json'
    with open(report_path, 'w', encoding='utf-8') as f:
        json.dump(report, f, ensure_ascii=False, indent=4)
    
    print(f'\nüíæ –û–¢–ß–ï–¢ –°–û–•–†–ê–ù–ï–ù: {report_path}')
    
    # –ò—Ç–æ–≥–æ–≤—ã–µ –≤—ã–≤–æ–¥—ã
    print(f'\nüéØ –ò–¢–û–ì–û–í–´–ï –í–´–í–û–î–´:')
    print('-' * 40)
    print(f'   ‚úÖ True SFM - —ç—Ç–æ –†–ê–°–®–ò–†–ï–ù–ù–´–ô —Ä–µ–µ—Å—Ç—Ä')
    print(f'   ‚úÖ –°–æ–¥–µ—Ä–∂–∏—Ç {difference} –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π')
    print(f'   ‚úÖ –í–∫–ª—é—á–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ —Å–∫—Ä–∏–ø—Ç–æ–≤ –∏ —Ç–µ—Å—Ç–æ–≤')
    print(f'   ‚úÖ –°–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø—è—â–∏—Ö –∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö')
    print(f'   ‚úÖ –í–∫–ª—é—á–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏')
    print(f'   üí° –≠—Ç–æ –ü–û–õ–ù–´–ô –∫–∞—Ç–∞–ª–æ–≥ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π —Å–∏—Å—Ç–µ–º—ã')
    
    print(f'\nüöÄ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!')
    
    return report

if __name__ == "__main__":
    analyze_registry_differences()
