#!/usr/bin/env python3
"""
–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç: –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—É—Ç–µ–π + –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è UNKNOWN —Ñ—É–Ω–∫—Ü–∏–π
–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—É—Ç–∏, –ø–æ—Ç–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ—Ç –ø–æ 5-10 —Ñ—É–Ω–∫—Ü–∏–π –∑–∞ —Ä–∞–∑
"""

import json
import os
import re
from datetime import datetime
from collections import Counter

def find_file_in_project(filename, root_dir):
    """–ò—â–µ—Ç —Ñ–∞–π–ª –ø–æ –∏–º–µ–Ω–∏ –≤–æ –≤—Å–µ–º –ø—Ä–æ–µ–∫—Ç–µ."""
    for dirpath, _, filenames in os.walk(root_dir):
        if filename in filenames:
            return os.path.relpath(os.path.join(dirpath, filename), root_dir)
    return None

def analyze_file_content(file_path, root_dir):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —Ñ—É–Ω–∫—Ü–∏–∏."""
    full_path = os.path.join(root_dir, file_path)
    
    if not os.path.exists(full_path):
        return "file_not_found"
    
    try:
        with open(full_path, 'r', encoding='utf-8') as f:
            content = f.read().lower()
    except:
        return "unreadable"
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–æ–≤
    patterns = {
        'ai_agent': [
            r'class.*agent', r'def.*agent', r'ai.*agent', r'behavioral.*analysis',
            r'threat.*detection', r'incident.*response', r'password.*security',
            r'mobile.*security', r'compliance.*agent', r'data.*protection'
        ],
        'bot': [
            r'class.*bot', r'def.*bot', r'telegram.*bot', r'whatsapp.*bot',
            r'instagram.*bot', r'gaming.*bot', r'parental.*control.*bot',
            r'emergency.*response.*bot', r'notification.*bot'
        ],
        'manager': [
            r'class.*manager', r'def.*manager', r'function.*manager', r'safe.*function.*manager',
            r'user.*interface.*manager', r'data.*protection.*manager', r'network.*protection.*manager'
        ],
        'security': [
            r'security.*system', r'security.*service', r'security.*module',
            r'encryption', r'authentication', r'authorization', r'access.*control'
        ],
        'service': [
            r'class.*service', r'def.*service', r'notification.*service',
            r'emergency.*service', r'vpn.*service'
        ],
        'integration': [
            r'integration', r'api.*integration', r'external.*service',
            r'russian.*api', r'banking.*integration', r'messenger.*integration'
        ],
        'monitoring': [
            r'monitoring', r'analytics', r'metrics', r'performance.*monitor',
            r'health.*check', r'alert.*system'
        ],
        'vpn': [
            r'vpn', r'wireguard', r'openvpn', r'shadowsocks', r'v2ray',
            r'tunnel', r'proxy'
        ],
        'utility': [
            r'utility', r'helper', r'utils', r'common', r'base.*class',
            r'config', r'configuration'
        ],
        'core': [
            r'core', r'base', r'foundation', r'fundamental', r'primary'
        ]
    }
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
    type_scores = {}
    for func_type, pattern_list in patterns.items():
        score = 0
        for pattern in pattern_list:
            matches = len(re.findall(pattern, content))
            score += matches
        type_scores[func_type] = score
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–∏–ø —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
    if type_scores:
        best_type = max(type_scores, key=type_scores.get)
        if type_scores[best_type] > 0:
            return best_type
    
    return "unknown"

def fix_paths_and_categorize(registry_file, root_dir, max_fixes=10):
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—É—Ç–∏ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ—Ç UNKNOWN —Ñ—É–Ω–∫—Ü–∏–∏."""
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–µ—Å—Ç—Ä
    with open(registry_file, 'r', encoding='utf-8') as f:
        registry_data = json.load(f)
    
    functions = registry_data.get("functions", {})
    unknown_functions = []
    
    # –ù–∞—Ö–æ–¥–∏–º UNKNOWN —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –ø—É—Ç–µ–π
    for func_id, func_data in functions.items():
        func_type = func_data.get('function_type', '')
        file_path = func_data.get('file_path', '')
        if func_type == 'unknown' and not file_path:
            unknown_functions.append((func_id, func_data))
    
    print(f"üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–£–¢–ï–ô + –ö–ê–¢–ï–ì–û–†–ò–ó–ê–¶–ò–Ø")
    print(f"================================================")
    print(f"–í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π –≤ —Ä–µ–µ—Å—Ç—Ä–µ: {len(functions)}")
    print(f"UNKNOWN —Ñ—É–Ω–∫—Ü–∏–π –±–µ–∑ –ø—É—Ç–µ–π: {len(unknown_functions)}")
    print(f"–ú–∞–∫—Å–∏–º—É–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∑–∞ —Ä–∞–∑: {max_fixes}")
    print("")
    
    fixed_paths = 0
    categorized = 0
    type_changes = Counter()
    
    for func_id, func_data in unknown_functions:
        if fixed_paths >= max_fixes:
            break
            
        print(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {func_id}...")
        
        # –®–∞–≥ 1: –ò—â–µ–º —Ñ–∞–π–ª
        filename = f"{func_id}.py"
        new_path = find_file_in_project(filename, root_dir)
        
        if new_path:
            # –®–∞–≥ 2: –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Ç—å
            func_data['file_path'] = new_path
            func_data['last_updated'] = datetime.now().isoformat()
            fixed_paths += 1
            print(f"   ‚úÖ –ü—É—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω: {new_path}")
            
            # –®–∞–≥ 3: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ–º
            new_type = analyze_file_content(new_path, root_dir)
            
            if new_type != "unknown" and new_type != "file_not_found" and new_type != "unreadable":
                old_type = func_data.get('function_type', 'unknown')
                func_data['function_type'] = new_type
                type_changes[new_type] += 1
                categorized += 1
                print(f"   ‚úÖ –¢–∏–ø –∏–∑–º–µ–Ω–µ–Ω: {old_type} ‚Üí {new_type}")
            else:
                print(f"   ‚ö†Ô∏è –¢–∏–ø –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω: {new_type}")
        else:
            print(f"   ‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {filename}")
        
        print()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    with open(registry_file, 'w', encoding='utf-8') as f:
        json.dump(registry_data, f, ensure_ascii=False, indent=4)
    
    print(f"üíæ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {registry_file}")
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è UNKNOWN
    remaining_unknown = 0
    for func_id, func_data in functions.items():
        if func_data.get('function_type', '') == 'unknown':
            remaining_unknown += 1
    
    print(f"\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print(f"   –ü—É—Ç–µ–π –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: {fixed_paths}")
    print(f"   –§—É–Ω–∫—Ü–∏–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {categorized}")
    print(f"   –û—Å—Ç–∞–ª–æ—Å—å UNKNOWN —Ñ—É–Ω–∫—Ü–∏–π: {remaining_unknown}")
    
    if type_changes:
        print(f"\nüìä –ù–û–í–´–ï –¢–ò–ü–´:")
        for func_type, count in type_changes.most_common():
            print(f"   {func_type}: +{count}")

if __name__ == "__main__":
    # –£–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Ä–µ–µ—Å—Ç—Ä–∞ –∏ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
    registry_path = 'data/sfm/function_registry.json'
    project_root = '.' # –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å (—Ç–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ 10 —Ñ—É–Ω–∫—Ü–∏—è—Ö)
    fix_paths_and_categorize(registry_path, project_root, max_fixes=10)
