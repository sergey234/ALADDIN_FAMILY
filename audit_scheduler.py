#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Audit Scheduler –¥–ª—è ALADDIN Security System
–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∞—É–¥–∏—Ç–æ–≤ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏

–ê–≤—Ç–æ—Ä: ALADDIN Security Team
–í–µ—Ä—Å–∏—è: 1.0
–î–∞—Ç–∞: 2025-01-27
–ö–∞—á–µ—Å—Ç–≤–æ: A+
"""

import asyncio
# import json  # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
# import os  # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
import smtplib
import sqlite3
# import threading  # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
import time
from dataclasses import dataclass
from datetime import datetime, timedelta
from email.mime.multipart import MimeMultipart
from email.mime.text import MimeText
from typing import Any, Dict, List, Optional

import schedule

from automated_audit_system import AuditResult, AuditType, AutomatedAuditSystem


@dataclass
class AuditSchedule:
    """–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞—É–¥–∏—Ç–∞"""

    audit_type: AuditType
    frequency: str  # daily, weekly, monthly
    time: str  # HH:MM format
    enabled: bool = True
    last_run: Optional[datetime] = None
    next_run: Optional[datetime] = None


@dataclass
class NotificationConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""

    email_enabled: bool = False
    smtp_server: str = ""
    smtp_port: int = 587
    smtp_username: str = ""
    smtp_password: str = ""
    email_recipients: List[str] = None
    slack_enabled: bool = False
    slack_webhook: str = ""
    telegram_enabled: bool = False
    telegram_bot_token: str = ""
    telegram_chat_id: str = ""


class AuditScheduler:
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞—É–¥–∏—Ç–æ–≤"""

    def __init__(self, db_path: str = "audit_schedule.db"):
        self.db_path = db_path
        self.audit_system = AutomatedAuditSystem()
        self.notification_config = NotificationConfig()
        self.init_database()
        self.load_schedules()

    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        cursor.execute(
            """
            CREATE TABLE IF NOT EXISTS audit_schedules (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                audit_type TEXT,
                frequency TEXT,
                time TEXT,
                enabled BOOLEAN,
                last_run DATETIME,
                next_run DATETIME
            )
        """
        )

        cursor.execute(
            """
            CREATE TABLE IF NOT EXISTS notification_config (
                id INTEGER PRIMARY KEY,
                email_enabled BOOLEAN,
                smtp_server TEXT,
                smtp_port INTEGER,
                smtp_username TEXT,
                smtp_password TEXT,
                email_recipients TEXT,
                slack_enabled BOOLEAN,
                slack_webhook TEXT,
                telegram_enabled BOOLEAN,
                telegram_bot_token TEXT,
                telegram_chat_id TEXT
            )
        """
        )

        conn.commit()
        conn.close()

    def load_schedules(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        cursor.execute("SELECT * FROM audit_schedules")
        rows = cursor.fetchall()

        self.schedules = []
        for row in rows:
            schedule = AuditSchedule(
                audit_type=AuditType(row[1]),
                frequency=row[2],
                time=row[3],
                enabled=bool(row[4]),
                last_run=datetime.fromisoformat(row[5]) if row[5] else None,
                next_run=datetime.fromisoformat(row[6]) if row[6] else None,
            )
            self.schedules.append(schedule)

        conn.close()

    def save_schedule(self, schedule: AuditSchedule):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        cursor.execute(
            """
            INSERT OR REPLACE INTO audit_schedules
            (audit_type, frequency, time, enabled, last_run, next_run)
            VALUES (?, ?, ?, ?, ?, ?)
        """,
            (
                schedule.audit_type.value,
                schedule.frequency,
                schedule.time,
                schedule.enabled,
                schedule.last_run.isoformat() if schedule.last_run else None,
                schedule.next_run.isoformat() if schedule.next_run else None,
            ),
        )

        conn.commit()
        conn.close()

    def add_schedule(self, audit_type: AuditType, frequency: str, time: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
        schedule = AuditSchedule(
            audit_type=audit_type, frequency=frequency, time=time, enabled=True
        )

        # –í—ã—á–∏—Å–ª—è–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞
        schedule.next_run = self._calculate_next_run(frequency, time)

        self.schedules.append(schedule)
        self.save_schedule(schedule)

        print(
            f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: {audit_type.value} - {frequency} –≤ {time}"
        )

    def _calculate_next_run(self, frequency: str, time: str) -> datetime:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø—É—Å–∫–∞"""
        now = datetime.now()
        hour, minute = map(int, time.split(":"))

        if frequency == "daily":
            next_run = now.replace(
                hour=hour, minute=minute, second=0, microsecond=0
            )
            if next_run <= now:
                next_run += timedelta(days=1)
        elif frequency == "weekly":
            # –ó–∞–ø—É—Å–∫ –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
            days_ahead = 0 - now.weekday()
            if days_ahead <= 0:
                days_ahead += 7
            next_run = now + timedelta(days=days_ahead)
            next_run = next_run.replace(
                hour=hour, minute=minute, second=0, microsecond=0
            )
        elif frequency == "monthly":
            # –ó–∞–ø—É—Å–∫ –≤ –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
            if now.month == 12:
                next_run = now.replace(
                    year=now.year + 1,
                    month=1,
                    day=1,
                    hour=hour,
                    minute=minute,
                    second=0,
                    microsecond=0,
                )
            else:
                next_run = now.replace(
                    month=now.month + 1,
                    day=1,
                    hour=hour,
                    minute=minute,
                    second=0,
                    microsecond=0,
                )
        else:
            next_run = now + timedelta(hours=1)

        return next_run

    async def run_scheduled_audit(self, schedule: AuditSchedule):
        """–ó–∞–ø—É—Å–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞—É–¥–∏—Ç–∞"""
        print(
            f"üîç –ó–∞–ø—É—Å–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞—É–¥–∏—Ç–∞: {schedule.audit_type.value}"
        )

        try:
            # –ó–∞–ø—É—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –∞—É–¥–∏—Ç–∞
            if schedule.audit_type == AuditType.SECURITY:
                result = await self.audit_system.run_security_audit()
            elif schedule.audit_type == AuditType.COMPLIANCE:
                result = await self.audit_system.run_compliance_audit()
            elif schedule.audit_type == AuditType.PERFORMANCE:
                result = await self.audit_system.run_performance_audit()
            elif schedule.audit_type == AuditType.CODE_QUALITY:
                result = await self.audit_system.run_code_quality_audit()
            elif schedule.audit_type == AuditType.DEPENDENCIES:
                result = await self.audit_system.run_dependencies_audit()
            elif schedule.audit_type == AuditType.INFRASTRUCTURE:
                result = await self.audit_system.run_infrastructure_audit()
            else:
                print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∞—É–¥–∏—Ç–∞: {schedule.audit_type}")
                return

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            schedule.last_run = datetime.now()
            schedule.next_run = self._calculate_next_run(
                schedule.frequency, schedule.time
            )
            self.save_schedule(schedule)

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            await self.send_notifications(result)

            print(
                f"‚úÖ –ê—É–¥–∏—Ç {schedule.audit_type.value} –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—Ü–µ–Ω–∫–æ–π {result.score}"
            )

        except Exception as e:
            print(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞—É–¥–∏—Ç–∞ {schedule.audit_type.value}: {e}"
            )

    async def send_notifications(self, result: AuditResult):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –∞—É–¥–∏—Ç–∞"""
        if result.status == "failed" or result.severity.value in [
            "critical",
            "high",
        ]:
            message = self._format_notification_message(result)

            if self.notification_config.email_enabled:
                await self._send_email_notification(message, result)

            if self.notification_config.slack_enabled:
                await self._send_slack_notification(message, result)

            if self.notification_config.telegram_enabled:
                await self._send_telegram_notification(message, result)

    def _format_notification_message(self, result: AuditResult) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        status_emoji = (
            "‚ùå"
            if result.status == "failed"
            else "‚ö†Ô∏è" if result.status == "warning" else "‚úÖ"
        )

        message = f"""
{status_emoji} **–ê—É–¥–∏—Ç {result.audit_type.value.upper()}**

**–°—Ç–∞—Ç—É—Å:** {result.status.upper()}
**–û—Ü–µ–Ω–∫–∞:** {result.score}/100
**–°–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å:** {result.severity.value.upper()}
**–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:** {result.duration:.2f}s

**–ù–∞—Ö–æ–¥–∫–∏:** {len(result.findings)}
**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:** {len(result.recommendations)}

**–í—Ä–µ–º—è:** {result.timestamp.strftime('%Y-%m-%d %H:%M:%S')}
        """.strip()

        return message

    async def _send_email_notification(
        self, message: str, result: AuditResult
    ):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            msg = MimeMultipart()
            msg["From"] = self.notification_config.smtp_username
            msg["To"] = ", ".join(self.notification_config.email_recipients)
            msg["Subject"] = f"ALADDIN Audit Alert: {result.audit_type.value}"

            msg.attach(MimeText(message, "plain"))

            server = smtplib.SMTP(
                self.notification_config.smtp_server,
                self.notification_config.smtp_port,
            )
            server.starttls()
            server.login(
                self.notification_config.smtp_username,
                self.notification_config.smtp_password,
            )
            server.send_message(msg)
            server.quit()

            print("‚úÖ Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: {e}")

    async def _send_slack_notification(
        self, message: str, result: AuditResult
    ):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ Slack —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            import httpx

            payload = {
                "text": message,
                "username": "ALADDIN Audit Bot",
                "icon_emoji": ":shield:",
            }

            async with httpx.AsyncClient() as client:
                response = await client.post(
                    self.notification_config.slack_webhook,
                    json=payload,
                    timeout=10,
                )
                response.raise_for_status()

            print("‚úÖ Slack —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Slack: {e}")

    async def _send_telegram_notification(
        self, message: str, result: AuditResult
    ):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            import httpx

            url = f"https://api.telegram.org/bot{self.notification_config.telegram_bot_token}/sendMessage"
            payload = {
                "chat_id": self.notification_config.telegram_chat_id,
                "text": message,
                "parse_mode": "Markdown",
            }

            async with httpx.AsyncClient() as client:
                response = await client.post(url, json=payload, timeout=10)
                response.raise_for_status()

            print("‚úÖ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram: {e}")

    def check_scheduled_audits(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞—É–¥–∏—Ç–æ–≤"""
        now = datetime.now()

        for audit_schedule in self.schedules:
            if not audit_schedule.enabled:
                continue

            if audit_schedule.next_run and now >= audit_schedule.next_run:
                asyncio.create_task(self.run_scheduled_audit(audit_schedule))

    def start_scheduler(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∞—É–¥–∏—Ç–æ–≤...")

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if not self.schedules:
            self.add_schedule(AuditType.SECURITY, "daily", "02:00")
            self.add_schedule(AuditType.COMPLIANCE, "weekly", "03:00")
            self.add_schedule(AuditType.PERFORMANCE, "daily", "04:00")
            self.add_schedule(AuditType.CODE_QUALITY, "daily", "05:00")
            self.add_schedule(AuditType.DEPENDENCIES, "weekly", "06:00")
            self.add_schedule(AuditType.INFRASTRUCTURE, "monthly", "07:00")

        # –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        schedule.every().minute.do(self.check_scheduled_audits)

        print("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")
        print("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞—É–¥–∏—Ç–æ–≤:")
        for s in self.schedules:
            if s.enabled:
                print(f"  - {s.audit_type.value}: {s.frequency} –≤ {s.time}")

        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
        while True:
            schedule.run_pending()
            time.sleep(1)

    def stop_scheduler(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∞—É–¥–∏—Ç–æ–≤...")
        schedule.clear()
        print("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    def get_schedule_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π"""
        now = datetime.now()

        status = {
            "total_schedules": len(self.schedules),
            "enabled_schedules": len([s for s in self.schedules if s.enabled]),
            "disabled_schedules": len(
                [s for s in self.schedules if not s.enabled]
            ),
            "schedules": [],
        }

        for audit_schedule in self.schedules:
            schedule_info = {
                "audit_type": audit_schedule.audit_type.value,
                "frequency": audit_schedule.frequency,
                "time": audit_schedule.time,
                "enabled": audit_schedule.enabled,
                "last_run": (
                    audit_schedule.last_run.isoformat()
                    if audit_schedule.last_run
                    else None
                ),
                "next_run": (
                    audit_schedule.next_run.isoformat()
                    if audit_schedule.next_run
                    else None
                ),
                "overdue": (
                    audit_schedule.next_run < now if audit_schedule.next_run else False
                ),
            }
            status["schedules"].append(schedule_info)

        return status


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    scheduler = AuditScheduler()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–ø—Ä–∏–º–µ—Ä)
    scheduler.notification_config.email_enabled = (
        False  # –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    )
    scheduler.notification_config.slack_enabled = (
        False  # –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    )
    scheduler.notification_config.telegram_enabled = (
        False  # –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    )

    # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    try:
        scheduler.start_scheduler()
    except KeyboardInterrupt:
        scheduler.stop_scheduler()


if __name__ == "__main__":
    asyncio.run(main())
