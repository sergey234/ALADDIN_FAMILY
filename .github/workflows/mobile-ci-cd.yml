name: ALADDIN Mobile CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'mobile/**'
      - '.github/workflows/mobile-ci-cd.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'mobile/**'
  release:
    types: [ published ]

env:
  # iOS Configuration
  IOS_SCHEME: "ALADDIN Security"
  IOS_CONFIGURATION: "Release"
  IOS_SDK: "iphoneos"
  IOS_DESTINATION: "generic/platform=iOS"
  
  # Android Configuration
  ANDROID_GRADLE_VERSION: "8.0"
  ANDROID_BUILD_TOOLS: "34.0.0"
  ANDROID_COMPILE_SDK: "34"
  ANDROID_TARGET_SDK: "34"
  ANDROID_MIN_SDK: "21"

jobs:
  # iOS Build and Test
  ios-build-test:
    runs-on: macos-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '15.0'
        
    - name: Cache CocoaPods
      uses: actions/cache@v3
      with:
        path: mobile/ios/Pods
        key: ${{ runner.os }}-pods-${{ hashFiles('mobile/ios/Podfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-pods-
          
    - name: Install CocoaPods dependencies
      working-directory: mobile/ios
      run: |
        pod install --repo-update
        
    - name: Build iOS app
      working-directory: mobile/ios
      run: |
        xcodebuild -workspace ALADDIN\ Security.xcworkspace \
                   -scheme "${{ env.IOS_SCHEME }}" \
                   -configuration "${{ env.IOS_CONFIGURATION }}" \
                   -sdk "${{ env.IOS_SDK }}" \
                   -destination "${{ env.IOS_DESTINATION }}" \
                   -archivePath ALADDIN\ Security.xcarchive \
                   archive
                   
    - name: Run iOS tests
      working-directory: mobile/ios
      run: |
        xcodebuild test -workspace ALADDIN\ Security.xcworkspace \
                        -scheme "${{ env.IOS_SCHEME }}" \
                        -destination "platform=iOS Simulator,name=iPhone 15,OS=17.0"
                        
    - name: Upload iOS build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ios-build
        path: mobile/ios/ALADDIN\ Security.xcarchive
        retention-days: 30

  # Android Build and Test
  android-build-test:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Java
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      
    - name: Cache Gradle dependencies
      uses: actions/cache@v3
      with:
        path: |
          mobile/android/.gradle
          mobile/android/app/build
        key: ${{ runner.os }}-gradle-${{ hashFiles('mobile/android/gradle/wrapper/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew
      working-directory: mobile/android
      run: chmod +x gradlew
      
    - name: Build Android app
      working-directory: mobile/android
      run: |
        ./gradlew assembleRelease
        
    - name: Run Android tests
      working-directory: mobile/android
      run: |
        ./gradlew test
        ./gradlew connectedAndroidTest
      env:
        ANDROID_SDK_ROOT: ${{ env.ANDROID_SDK_ROOT }}
        
    - name: Upload Android build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: android-build
        path: mobile/android/app/build/outputs/apk/release/
        retention-days: 30

  # Security Scan
  security-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run security scan
      run: |
        # iOS Security Scan
        if [ -d "mobile/ios" ]; then
          echo "Running iOS security scan..."
          # Add iOS security scanning tools here
        fi
        
        # Android Security Scan
        if [ -d "mobile/android" ]; then
          echo "Running Android security scan..."
          # Add Android security scanning tools here
        fi
        
        # General security scan
        echo "Running general security scan..."
        # Add general security scanning tools here

  # Performance Testing
  performance-test:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run performance tests
      run: |
        echo "Running performance tests..."
        # Add performance testing tools here
        
    - name: Generate performance report
      run: |
        echo "Generating performance report..."
        # Add performance report generation here

  # Code Quality Check
  code-quality:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run SwiftLint (iOS)
      if: github.event_name == 'push' || github.event_name == 'pull_request'
      run: |
        if [ -d "mobile/ios" ]; then
          echo "Running SwiftLint..."
          # Add SwiftLint here
        fi
        
    - name: Run Detekt (Android)
      if: github.event_name == 'push' || github.event_name == 'pull_request'
      run: |
        if [ -d "mobile/android" ]; then
          echo "Running Detekt..."
          # Add Detekt here
        fi
        
    - name: Run Flake8 (Python)
      if: github.event_name == 'push' || github.event_name == 'pull_request'
      run: |
        echo "Running Flake8..."
        # Add Flake8 here

  # Deploy to TestFlight (iOS)
  deploy-ios-testflight:
    runs-on: macos-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [ios-build-test, security-scan, performance-test, code-quality]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download iOS build artifacts
      uses: actions/download-artifact@v3
      with:
        name: ios-build
        path: mobile/ios/
        
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '15.0'
        
    - name: Deploy to TestFlight
      working-directory: mobile/ios
      run: |
        echo "Deploying to TestFlight..."
        # Add TestFlight deployment here
      env:
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
        TEAM_ID: ${{ secrets.TEAM_ID }}

  # Deploy to Google Play Internal Testing (Android)
  deploy-android-internal:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [android-build-test, security-scan, performance-test, code-quality]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download Android build artifacts
      uses: actions/download-artifact@v3
      with:
        name: android-build
        path: mobile/android/app/build/outputs/apk/release/
        
    - name: Deploy to Google Play Internal Testing
      run: |
        echo "Deploying to Google Play Internal Testing..."
        # Add Google Play deployment here
      env:
        GOOGLE_PLAY_SERVICE_ACCOUNT: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT }}
        GOOGLE_PLAY_PACKAGE_NAME: ${{ secrets.GOOGLE_PLAY_PACKAGE_NAME }}

  # Deploy to App Store (iOS)
  deploy-ios-appstore:
    runs-on: macos-latest
    if: github.event_name == 'release'
    needs: [ios-build-test, security-scan, performance-test, code-quality]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download iOS build artifacts
      uses: actions/download-artifact@v3
      with:
        name: ios-build
        path: mobile/ios/
        
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '15.0'
        
    - name: Deploy to App Store
      working-directory: mobile/ios
      run: |
        echo "Deploying to App Store..."
        # Add App Store deployment here
      env:
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
        TEAM_ID: ${{ secrets.TEAM_ID }}

  # Deploy to Google Play Production (Android)
  deploy-android-production:
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    needs: [android-build-test, security-scan, performance-test, code-quality]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download Android build artifacts
      uses: actions/download-artifact@v3
      with:
        name: android-build
        path: mobile/android/app/build/outputs/apk/release/
        
    - name: Deploy to Google Play Production
      run: |
        echo "Deploying to Google Play Production..."
        # Add Google Play production deployment here
      env:
        GOOGLE_PLAY_SERVICE_ACCOUNT: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT }}
        GOOGLE_PLAY_PACKAGE_NAME: ${{ secrets.GOOGLE_PLAY_PACKAGE_NAME }}

  # Notification
  notify:
    runs-on: ubuntu-latest
    if: always()
    needs: [ios-build-test, android-build-test, security-scan, performance-test, code-quality]
    
    steps:
    - name: Notify team
      run: |
        echo "Sending notification to team..."
        # Add notification logic here (Slack, Discord, etc.)

