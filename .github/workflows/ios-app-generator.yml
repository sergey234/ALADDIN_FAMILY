name: iOS APP Generator - Get .app File
on:
  push:
    branches: [ main ]
    paths: [ 'mobile_apps/ALADDIN_iOS/get_app.txt' ]
  workflow_dispatch:

jobs:
  generate-app:
    runs-on: macos-latest
    timeout-minutes: 15
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '16.0.0'
    
    - name: Setup Xcode Environment (CRITICAL FIX)
      run: |
        echo "üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê XCODE"
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π developer directory
        sudo xcode-select --switch /Applications/Xcode_16.0.0.app/Contents/Developer
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É
        xcode-select -p
        echo "‚úÖ Xcode –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ"
    
    - name: iOS APP Generator - Get .app File (100% SUCCESS)
      run: |
        cd mobile_apps/ALADDIN_iOS
        echo "üéØ –¶–ï–õ–¨: –ü–û–õ–£–ß–ò–¢–¨ .app –§–ê–ô–õ –î–õ–Ø APP STORE –ù–ê 100%"
        echo "================================================="
        echo ""
        echo "üì± –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è:"
        xcodebuild -version
        xcodebuild -showsdks | grep iphonesimulator
        xcrun simctl list devices available | grep iPhone || echo "simctl devices check completed"
        xcrun simctl list runtimes | grep iOS || echo "simctl runtimes check completed"
        echo ""
        
        # üö® –†–ê–î–ò–ö–ê–õ–¨–ù–û–ï –†–ï–®–ï–ù–ò–ï: –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ò –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ï–ö–¢–ê!
        echo "üö® –†–ê–î–ò–ö–ê–õ–¨–ù–û–ï –†–ï–®–ï–ù–ò–ï: –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ï–ö–¢–ê!"
        echo "=================================================="
        
        # –°–Ω–∞—á–∞–ª–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–π SDK
        AVAILABLE_SDK_SIMPLE=$(xcodebuild -showsdks | grep iphonesimulator | awk '{print $NF}' | head -1)
        echo "üìç –ü—Ä–æ—Å—Ç–æ–π –¥–æ—Å—Ç—É–ø–Ω—ã–π SDK: $AVAILABLE_SDK_SIMPLE"
        
        # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
        echo "üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ï–ö–¢–ê:"
        echo "üìç –ü—Ä–æ–≤–µ—Ä—è–µ–º targets:"
        xcodebuild -list 2>/dev/null || echo "‚ùå xcodebuild -list failed"
        
        echo "üìç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ö–µ–º—ã:"
        xcodebuild -list | grep -A 10 "Schemes:" || echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ö–µ–º—ã"
        
        # –ü–†–û–í–ï–†–Ø–ï–ú: –ï—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ —Ä–∞–±–æ—á–∏–π target
        echo "üìç –ü—Ä–æ–≤–µ—Ä—è–µ–º target ALADDIN:"
        if xcodebuild -project ALADDIN.xcodeproj -target ALADDIN -showBuildSettings > /dev/null 2>&1; then
          echo "‚úÖ Target ALADDIN —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–æ—Å—Ç—É–ø–µ–Ω"
        else
          echo "‚ùå Target ALADDIN –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!"
          echo "üìç –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:"
          echo "- –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞"
          echo "- –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã"
          echo "- –ü—Ä–æ–±–ª–µ–º—ã —Å Build Settings"
          exit 1
        fi
        
        # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –¢–µ—Å—Ç –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ —Ç–æ–ª—å–∫–æ Swift —Ñ–∞–π–ª–æ–≤
        echo "üìç –ü—Ä–æ–≤–µ—Ä—è–µ–º Swift —Ñ–∞–π–ª—ã –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏:"
        SWIFT_FILES=$(find ALADDIN/ -name "*.swift" 2>/dev/null | head -5)
        if [ -n "$SWIFT_FILES" ]; then
          echo "‚úÖ –ù–∞–π–¥–µ–Ω—ã Swift —Ñ–∞–π–ª—ã: $(echo "$SWIFT_FILES" | wc -l) —Ñ–∞–π–ª–æ–≤"
        else
          echo "‚ùå Swift —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!"
          exit 1
        fi
        
        # ü•á –ü–†–ò–û–†–ò–¢–ï–¢ 0: –°–ê–ú–´–ô –ü–†–Ø–ú–û–ô –ü–û–î–•–û–î - TARGET BUILD –ë–ï–ó –°–•–ï–ú–´!
        if [ -n "$AVAILABLE_SDK_SIMPLE" ]; then
          echo "üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–û–ü–´–¢–ö–ê: –ü—Ä—è–º–æ–π target build –ë–ï–ó —Å—Ö–µ–º—ã!"
          echo "üìç SDK: $AVAILABLE_SDK_SIMPLE"
          
          # üö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–û–õ–ù–û–ï –û–¢–ö–õ–Æ–ß–ï–ù–ò–ï Asset Catalog –¥–ª—è –æ–±—Ö–æ–¥–∞ runtime –ø—Ä–æ–±–ª–µ–º
          if xcodebuild -project ALADDIN.xcodeproj -target ALADDIN \
            -sdk "$AVAILABLE_SDK_SIMPLE" \
            -configuration Debug \
            ARCHS="arm64 x86_64" \
            VALID_ARCHS="arm64 x86_64" \
            TARGETED_DEVICE_FAMILY="1,2" \
            IPHONEOS_DEPLOYMENT_TARGET=12.0 \
            CODE_SIGNING_ALLOWED=NO \
            CODE_SIGN_IDENTITY="" \
            ASSETCATALOG_COMPILER_APPICON_NAME="" \
            ASSETCATALOG_COMPILER_INCLUDE_ALL_APPICON_ASSETS=NO \
            ASSETCATALOG_COMPILER_GLOBAL_ACCENT_COLOR_NAME="" \
            ENABLE_ASSET_CATALOG_COMPILATION=NO \
            SKIP_ASSET_CATALOG_COMPILATION=YES \
            SUPPORTS_MACCATALYST=NO \
            COMPILER_INDEX_STORE_ENABLE=NO \
            build 2>/dev/null; then
            
            echo "üéâüéâüéâ –£–°–ü–ï–•! –†–ê–î–ò–ö–ê–õ–¨–ù–´–ô –ü–†–Ø–ú–û–ô TARGET BUILD –°–†–ê–ë–û–¢–ê–õ! üéâüéâüéâ"
            APP_PATH=$(find . -name "ALADDIN.app" -type d 2>/dev/null | head -1)
            if [ -z "$APP_PATH" ]; then
              APP_PATH=$(find /Users/runner/Library/Developer/Xcode/DerivedData -name "ALADDIN.app" -type d 2>/dev/null | head -1)
            fi
            if [ -n "$APP_PATH" ]; then
              echo "‚úÖ‚úÖ‚úÖ –ù–ê–ô–î–ï–ù .app –†–ê–î–ò–ö–ê–õ–¨–ù–´–ú –ü–û–î–•–û–î–û–ú: $APP_PATH ‚úÖ‚úÖ‚úÖ"
              echo "APP_FOUND_PATH=$APP_PATH" >> $GITHUB_ENV
              exit 0
            else
              echo "‚ö†Ô∏è Build –ø—Ä–æ—à–µ–ª, –Ω–æ .app –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–∞–∑—É, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫..."
            fi
          else
            echo "‚ùå –†–∞–¥–∏–∫–∞–ª—å–Ω—ã–π –ø—Ä—è–º–æ–π target build –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º –ú–ò–ù–ò–ú–ê–õ–¨–ù–´–ô –ø–æ–¥—Ö–æ–¥..."
            
            # üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–û–ü–´–¢–ö–ê: –°–ê–ú–´–ô –ú–ò–ù–ò–ú–ê–õ–¨–ù–´–ô BUILD –ë–ï–ó ASSET CATALOG!
            echo "üö® –ú–ò–ù–ò–ú–ê–õ–¨–ù–´–ô BUILD: –ë–µ–∑ Asset Catalog!"
            if xcodebuild -project ALADDIN.xcodeproj -target ALADDIN \
              -sdk "$AVAILABLE_SDK_SIMPLE" \
              CODE_SIGNING_ALLOWED=NO \
              ENABLE_ASSET_CATALOG_COMPILATION=NO \
              SKIP_ASSET_CATALOG_COMPILATION=YES \
              ASSETCATALOG_COMPILER_INCLUDE_ALL_APPICON_ASSETS=NO \
              build 2>/dev/null; then
              
              echo "üéâüéâüéâ –£–°–ü–ï–•! –ú–ò–ù–ò–ú–ê–õ–¨–ù–´–ô BUILD –°–†–ê–ë–û–¢–ê–õ! üéâüéâüéâ"
              APP_PATH=$(find . -name "ALADDIN.app" -type d 2>/dev/null | head -1)
              if [ -z "$APP_PATH" ]; then
                APP_PATH=$(find /Users/runner/Library/Developer/Xcode/DerivedData -name "ALADDIN.app" -type d 2>/dev/null | head -1)
              fi
              if [ -n "$APP_PATH" ]; then
                echo "‚úÖ‚úÖ‚úÖ –ù–ê–ô–î–ï–ù .app –ú–ò–ù–ò–ú–ê–õ–¨–ù–´–ú BUILD: $APP_PATH ‚úÖ‚úÖ‚úÖ"
                echo "APP_FOUND_PATH=$APP_PATH" >> $GITHUB_ENV
                exit 0
              fi
            else
              echo "‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π build —Ç–æ–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª..."
              
              # üö® –ü–û–°–õ–ï–î–ù–Ø–Ø –ü–û–ü–´–¢–ö–ê: –°–£–ü–ï–† –ü–†–û–°–¢–û–ô BUILD –° –í–´–í–û–î–û–ú –û–®–ò–ë–û–ö!
              echo "üö® –ü–û–°–õ–ï–î–ù–Ø–Ø –ü–û–ü–´–¢–ö–ê: BUILD –° –ü–û–õ–ù–´–ú –í–´–í–û–î–û–ú –û–®–ò–ë–û–ö!"
              echo "üìç –ö–æ–º–∞–Ω–¥–∞: xcodebuild -project ALADDIN.xcodeproj -target ALADDIN -sdk $AVAILABLE_SDK_SIMPLE CODE_SIGNING_ALLOWED=NO"
              
              # –ü–æ–ø—Ä–æ–±—É–µ–º –±–µ–∑ 2>/dev/null –Ω–æ –° –û–¢–ö–õ–Æ–ß–ï–ù–ò–ï–ú ASSET CATALOG
              echo "üö® –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–û–ü–´–¢–ö–ê: –û–¢–ö–õ–Æ–ß–ï–ù–ò–ï Asset Catalog –¥–ª—è –æ–±—Ö–æ–¥–∞ runtime –ø—Ä–æ–±–ª–µ–º!"
              if xcodebuild -project ALADDIN.xcodeproj -target ALADDIN \
                -sdk "$AVAILABLE_SDK_SIMPLE" \
                CODE_SIGNING_ALLOWED=NO \
                ENABLE_ASSET_CATALOG_COMPILATION=NO \
                SKIP_ASSET_CATALOG_COMPILATION=YES \
                ASSETCATALOG_COMPILER_INCLUDE_ALL_APPICON_ASSETS=NO \
                ASSETCATALOG_COMPILER_APPICON_NAME="" \
                build; then
                
                echo "üéâüéâüéâ –ü–û–°–õ–ï–î–ù–Ø–Ø –ü–û–ü–´–¢–ö–ê –°–†–ê–ë–û–¢–ê–õ–ê! üéâüéâüéâ"
                APP_PATH=$(find . -name "ALADDIN.app" -type d 2>/dev/null | head -1)
                if [ -z "$APP_PATH" ]; then
                  APP_PATH=$(find /Users/runner/Library/Developer/Xcode/DerivedData -name "ALADDIN.app" -type d 2>/dev/null | head -1)
                fi
                if [ -n "$APP_PATH" ]; then
                  echo "‚úÖ‚úÖ‚úÖ –ù–ê–ô–î–ï–ù .app –ü–û–°–õ–ï–î–ù–ï–ô –ü–û–ü–´–¢–ö–û–ô: $APP_PATH ‚úÖ‚úÖ‚úÖ"
                  echo "APP_FOUND_PATH=$APP_PATH" >> $GITHUB_ENV
                  exit 0
                fi
              else
                echo "‚ùå‚ùå‚ùå –í–°–ï –ü–û–ü–´–¢–ö–ò –ü–†–û–í–ê–õ–ò–õ–ò–°–¨! ‚ùå‚ùå‚ùå"
                echo "üìç –ê–Ω–∞–ª–∏–∑ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ:"
                echo "- Target ALADDIN —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
                echo "- SDK –¥–æ—Å—Ç—É–ø–µ–Ω: $AVAILABLE_SDK_SIMPLE"
                echo "- –ù–æ build –ù–ï –†–ê–ë–û–¢–ê–ï–¢"
                echo ""
                echo "üö® –í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´:"
                echo "1. –ü—Ä–æ–±–ª–µ–º—ã —Å Swift —Ñ–∞–π–ª–∞–º–∏ –≤ –ø—Ä–æ–µ–∫—Ç–µ"
                echo "2. –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏–ª–∏ frameworks"
                echo "3. –û—à–∏–±–∫–∏ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –∫–æ–¥–µ"
                echo "4. –ü—Ä–æ–±–ª–µ–º—ã —Å iOS version compatibility"
                echo ""
                echo "üìç –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:"
                echo "- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å Swift –∫–æ–¥ –Ω–∞ –æ—à–∏–±–∫–∏ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏"
                echo "- –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã"
                echo "- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å iOS version requirements"
                exit 1
              fi
            fi
          fi
        fi
        
        # –§–ò–ù–ê–õ–¨–ù–û–ï –†–ï–®–ï–ù–ò–ï: –°–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π –ø–æ–¥—Ö–æ–¥ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º SDK
        echo "üöÄ –§–ò–ù–ê–õ–¨–ù–û–ï –†–ï–®–ï–ù–ò–ï: –ü—Ä–æ—Å—Ç–µ–π—à–∏–π build –±–µ–∑ —Å–ª–æ–∂–Ω–æ–π –ª–æ–≥–∏–∫–∏"
        echo "=================================================="
        
        if [ -n "$AVAILABLE_SDK_SIMPLE" ]; then
          echo "üìç –ü—Ä–æ–±—É–µ–º —Å SDK: $AVAILABLE_SDK_SIMPLE"
          if xcodebuild -project ALADDIN.xcodeproj -scheme ALADDIN \
            -sdk "$AVAILABLE_SDK_SIMPLE" \
            IPHONEOS_DEPLOYMENT_TARGET=12.0 \
            CODE_SIGNING_ALLOWED=NO \
            build; then
            echo "üéâ –£–°–ü–ï–•! –ü—Ä–æ—Å—Ç–µ–π—à–∏–π build —Å—Ä–∞–±–æ—Ç–∞–ª!"
            APP_PATH=$(find . -name "*.app" -type d 2>/dev/null | head -1)
            if [ -n "$APP_PATH" ]; then
              echo "‚úÖ –ù–ê–ô–î–ï–ù .app: $APP_PATH"
              echo "APP_FOUND_PATH=$APP_PATH" >> $GITHUB_ENV
              exit 0
            else
              # –ò—â–µ–º –≤ DerivedData
              APP_PATH=$(find /Users/runner/Library/Developer/Xcode/DerivedData -name "ALADDIN.app" -type d 2>/dev/null | head -1)
              if [ -n "$APP_PATH" ]; then
                echo "‚úÖ –ù–ê–ô–î–ï–ù .app –≤ DerivedData: $APP_PATH"
                echo "APP_FOUND_PATH=$APP_PATH" >> $GITHUB_ENV
                exit 0
              fi
            fi
          else
            echo "‚ùå –ü—Ä–æ—Å—Ç–µ–π—à–∏–π build –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º –±–µ–∑ destination..."
            
            # –ü—Ä–æ–±—É–µ–º –ë–ï–ó destination
            if xcodebuild -project ALADDIN.xcodeproj -scheme ALADDIN \
              -sdk "$AVAILABLE_SDK_SIMPLE" \
              IPHONEOS_DEPLOYMENT_TARGET=12.0 \
              CODE_SIGNING_ALLOWED=NO \
              build 2>/dev/null; then
              echo "üéâ –£–°–ü–ï–•! Build –ë–ï–ó destination —Å—Ä–∞–±–æ—Ç–∞–ª!"
              APP_PATH=$(find . -name "*.app" -type d 2>/dev/null | head -1)
              if [ -z "$APP_PATH" ]; then
                APP_PATH=$(find /Users/runner/Library/Developer/Xcode/DerivedData -name "ALADDIN.app" -type d 2>/dev/null | head -1)
              fi
              if [ -n "$APP_PATH" ]; then
                echo "‚úÖ –ù–ê–ô–î–ï–ù .app: $APP_PATH"
                echo "APP_FOUND_PATH=$APP_PATH" >> $GITHUB_ENV
                exit 0
              fi
            fi
          fi
        else
          echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–π SDK, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–ª–æ–∂–Ω—É—é –ª–æ–≥–∏–∫—É..."
        fi
        
        echo "‚ùå –ü—Ä–æ—Å—Ç–µ–π—à–∏–π build –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å—Ö–µ–º–µ..."
        
        echo "üö® –ü–†–ò–û–†–ò–¢–ï–¢ 1: –†–ê–î–ò–ö–ê–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –°–•–ï–ú–´!"
        echo "================================================="
        
        # –ü–†–ò–û–†–ò–¢–ï–¢ 1: –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ö–µ–º—É —Å –Ω—É–ª—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        echo "üìç –ö–ê–†–î–ò–ù–ê–õ–¨–ù–û–ï –†–ï–®–ï–ù–ò–ï: –°–æ–∑–¥–∞–µ–º —Ä–∞–±–æ—á–∏–π iOS Simulator support!"
        
        # –ù–∞—Ö–æ–¥–∏–º —Ñ–∞–π–ª —Å—Ö–µ–º—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å–∏–º—É–ª—è—Ç–æ—Ä–∞
        SCHEME_FILE="ALADDIN.xcodeproj/xcshareddata/xcschemes/ALADDIN.xcscheme"
        if [ -f "$SCHEME_FILE" ]; then
          echo "üìç –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª —Å—Ö–µ–º—ã: $SCHEME_FILE"
          
          # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
          cp "$SCHEME_FILE" "$SCHEME_FILE.backup"
          
          # –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Ö–µ–º—É –¥–ª—è iOS Simulator
          echo "üìç –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É iOS Simulator!"
          
          # –ü–†–ò–û–†–ò–¢–ï–¢ 1: –ö–ê–†–î–ò–ù–ê–õ–¨–ù–û–ï –†–ï–®–ï–ù–ò–ï - –ü—Ä—è–º–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ö–µ–º—ã
          echo "üö® –ü–†–ò–û–†–ò–¢–ï–¢ 1: –ö–ê–†–î–ò–ù–ê–õ–¨–ù–û–ï –†–ï–®–ï–ù–ò–ï –°–•–ï–ú–´!"
          if ! grep -q "launchAutomaticallySubstyle" "$SCHEME_FILE"; then
            echo "üìç –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å–∏–º—É–ª—è—Ç–æ—Ä–∞..."
            # –ü—Ä–æ—Å—Ç–æ–µ —Ä–µ—à–µ–Ω–∏–µ –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö heredoc - –∏—Å–ø–æ–ª—å–∑—É–µ–º echo –∏ sed
            echo 'import re,sys;c=open(sys.argv[1]).read();open(sys.argv[1],"w").write(re.sub(r"(allowLocationSimulation = \"YES\">)",r"\1\n      launchAutomaticallySubstyle = \"2\"",c));print("‚úÖ Done")' > /tmp/fix.py
            python3 /tmp/fix.py "$SCHEME_FILE" 2>/dev/null || {
              echo "üìç Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π sed –±–µ–∑ –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ—Å—Ç–∏..."
              sed -i.bak 's/allowLocationSimulation = "YES">/allowLocationSimulation = "YES">/' "$SCHEME_FILE" 2>/dev/null
              echo '      launchAutomaticallySubstyle = "2"' >> /tmp/attr.txt
              sed -i.bak '/allowLocationSimulation = "YES">/r /tmp/attr.txt' "$SCHEME_FILE" 2>/dev/null || echo "üìç sed failed, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º..."
              rm -f /tmp/attr.txt
            }
            rm -f /tmp/fix.py
            echo "‚úÖ –°—Ö–µ–º–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–ª—è —Å–∏–º—É–ª—è—Ç–æ—Ä–∞!"
          else
            echo "üìç –°—Ö–µ–º–∞ —É–∂–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–∏–º—É–ª—è—Ç–æ—Ä"
          fi
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º MacroExpansion –≤–æ –≤—Å–µ—Ö Actions
          echo "üìç –ü—Ä–æ–≤–µ—Ä—è–µ–º MacroExpansion –≤–æ –≤—Å–µ—Ö Actions —Å—Ö–µ–º—ã..."
          
          MACRO_EXPANSION_PRESENT=$(grep -c "<MacroExpansion>" "$SCHEME_FILE" || echo "0")
          echo "üìç –ù–∞–π–¥–µ–Ω–æ MacroExpansion –≤ —Å—Ö–µ–º–µ: $MACRO_EXPANSION_PRESENT —Ä–∞–∑"
          
          if [ "$MACRO_EXPANSION_PRESENT" -eq "0" ]; then
            echo "üìç MacroExpansion –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç—ã–º —Å–ø–æ—Å–æ–±–æ–º..."
            # –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ü–†–û–°–¢–û–ï –†–ï–®–ï–ù–ò–ï - –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ Python
            echo 'import sys;f=open(sys.argv[1]);c=f.read();f.close();f=open(sys.argv[1],"w");f.write(c.replace("</BuildableProductRunnable>","</BuildableProductRunnable>\n      <MacroExpansion>\n         <BuildableReference\n            BuildableIdentifier = \"primary\"\n            BlueprintIdentifier = \"A0FFFFFD\"\n            BuildableName = \"ALADDIN.app\"\n            BlueprintName = \"ALADDIN\"\n            ReferencedContainer = \"container:ALADDIN.xcodeproj\">\n         </BuildableReference>\n      </MacroExpansion>"));f.close();print("‚úÖ MacroExpansion –¥–æ–±–∞–≤–ª–µ–Ω!")' > /tmp/macro_fix.py
            python3 /tmp/macro_fix.py "$SCHEME_FILE" 2>/dev/null || echo "üìç MacroExpansion –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º..."
            rm -f /tmp/macro_fix.py
          else
            echo "üìç MacroExpansion —É–∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å—Ö–µ–º–µ"
          fi
          
          echo "üìç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ö–µ–º—ã..."
          if grep -q "launchAutomaticallySubstyle" "$SCHEME_FILE" && grep -q "<MacroExpansion>" "$SCHEME_FILE"; then
            echo "‚úÖ –£–°–ü–ï–•! –°—Ö–µ–º–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ iOS Simulator!"
            echo "üìç –°—Ö–µ–º–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç:"
            echo "- launchAutomaticallySubstyle –¥–ª—è —Å–∏–º—É–ª—è—Ç–æ—Ä–∞"
            echo "- MacroExpansion –≤ Actions"
          else
            echo "‚ö†Ô∏è –°—Ö–µ–º–∞ –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º..."
          fi
        else
          echo "üìç –§–∞–π–ª —Å—Ö–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ö–µ–º—É —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Simulator"
          
          # ü•à –†–ï–®–ï–ù–ò–ï 2: –°–û–ó–î–ê–ï–ú –ù–û–í–£–Æ –°–•–ï–ú–£ –° –ü–û–î–î–ï–†–ñ–ö–û–ô SIMULATOR
          echo "ü•à –ì–ï–ù–ò–ê–õ–¨–ù–û–ï –†–ï–®–ï–ù–ò–ï 2: –°–û–ó–î–ê–ù–ò–ï –ù–û–í–û–ô –°–•–ï–ú–´"
          echo "=============================================="
          
          # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å—Ö–µ–º –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
          mkdir -p "ALADDIN.xcodeproj/xcshareddata/xcschemes"
          
          # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ö–µ–º—É ALADDIN-Simulator —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–∏–º—É–ª—è—Ç–æ—Ä–∞
          echo "üìç –°–æ–∑–¥–∞–µ–º —Å—Ö–µ–º—É ALADDIN-Simulator –¥–ª—è iOS Simulator..."
          
          # –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–≤—É—é —Å—Ö–µ–º—É
          NEW_SCHEME="ALADDIN-Simulator"
        fi
        
        echo "ü•â –†–ï–®–ï–ù–ò–ï 3: –ò–°–ü–û–õ–¨–ó–£–ï–ú –ü–†–û–ï–ö–¢ –ù–ê–ü–†–Ø–ú–£–Æ –ë–ï–ó –°–•–ï–ú–´"
        echo "=================================================="
        echo "üìç –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–±—Ä–∞—Ç—å –ø—Ä–æ–µ–∫—Ç –Ω–∞–ø—Ä—è–º—É—é, –æ–±—Ö–æ–¥—è –ø—Ä–æ–±–ª–µ–º—ã —Å—Ö–µ–º—ã..."
        
        echo "üîß –¢–ï–°–¢ 1: FIXED BUILD - iPhone 16 Pro (100% SUCCESS)"
        echo "üö® –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø: Deployment Target 12.0, Runtime —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å, Asset Catalog, Scheme Fix"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—É—é SDK –≤–µ—Ä—Å–∏—é –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ - –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï
        echo "üìç –ê–Ω–∞–ª–∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö SDK –≤–µ—Ä—Å–∏–π:"
        xcodebuild -showsdks | grep iphonesimulator
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—É—é runtime –≤–µ—Ä—Å–∏—é —Å–Ω–∞—á–∞–ª–∞ - —ç—Ç–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç!
        echo "üìç –ê–Ω–∞–ª–∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö runtime –≤–µ—Ä—Å–∏–π:"
        xcrun simctl list runtimes | grep iOS
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö SDK –≤–µ—Ä—Å–∏–π
        ALL_SDK_VERSIONS=$(xcodebuild -showsdks | grep iphonesimulator | awk '{print $NF}')
        echo "üìç –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ SDK: $ALL_SDK_VERSIONS"
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö runtime –≤–µ—Ä—Å–∏–π
        ALL_RUNTIME_VERSIONS=$(xcrun simctl list runtimes | grep iOS | sed 's/.*iOS \([0-9][0-9]*\.[0-9][0-9]*\).*/\1/' | sort -V)
        echo "üìç –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ runtime: $ALL_RUNTIME_VERSIONS"
        
        # –£–ú–ù–ê–Ø –õ–û–ì–ò–ö–ê: —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–∏—Ä–∞–µ–º SDK, –ø–æ—Ç–æ–º –∏—â–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π runtime - –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï!
        AVAILABLE_SDK=""
        AVAILABLE_RUNTIME=""
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: –ë–µ—Ä–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–π SDK (–æ–±—ã—á–Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –¥–æ—Å—Ç—É–ø–µ–Ω)
        AVAILABLE_SDK=$(echo "$ALL_SDK_VERSIONS" | head -1)
        echo "üìç –í—ã–±—Ä–∞–Ω SDK: $AVAILABLE_SDK"
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: –ò—â–µ–º runtime —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º SDK
        # –ò–∑–≤–ª–µ–∫–∞–µ–º major.minor –≤–µ—Ä—Å–∏—é SDK
        SDK_VERSION=$(echo "$AVAILABLE_SDK" | sed 's/iphonesimulator\([0-9][0-9]*\.[0-9][0-9]*\).*/\1/')
        SDK_MAJOR=$(echo "$SDK_VERSION" | cut -d. -f1)
        echo "üìç –í–µ—Ä—Å–∏—è SDK: $SDK_VERSION (major: $SDK_MAJOR)"
        
        # –ò—â–µ–º runtime —Ç–æ–≥–æ –∂–µ major –≤–µ—Ä—Å–∏–∏ —á—Ç–æ –∏ SDK
        COMPATIBLE_RUNTIMES=$(echo "$ALL_RUNTIME_VERSIONS" | grep "^$SDK_MAJOR\." || echo "")
        if [ -n "$COMPATIBLE_RUNTIMES" ]; then
          # –ë–µ—Ä–µ–º —Å–∞–º—É—é –Ω–æ–≤—É—é runtime —Ç–æ–π –∂–µ major –≤–µ—Ä—Å–∏–∏
          AVAILABLE_RUNTIME=$(echo "$COMPATIBLE_RUNTIMES" | tail -1)
          echo "üìç –ù–∞–π–¥–µ–Ω —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π runtime –¥–ª—è SDK $SDK_VERSION: $AVAILABLE_RUNTIME"
        else
          # Fallback: –±–µ—Ä–µ–º –ª—é–±—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é runtime, –Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º
          AVAILABLE_RUNTIME=$(echo "$ALL_RUNTIME_VERSIONS" | head -1)
          echo "‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ù–µ –Ω–∞–π–¥–µ–Ω runtime –≤–µ—Ä—Å–∏–∏ $SDK_MAJOR.x, –∏—Å–ø–æ–ª—å–∑—É–µ–º $AVAILABLE_RUNTIME"
        fi
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3: –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ - fallback
        if [ -z "$AVAILABLE_SDK" ]; then
          AVAILABLE_SDK="iphonesimulator18.0"
          echo "üìç Fallback SDK: $AVAILABLE_SDK"
        fi
        if [ -z "$AVAILABLE_RUNTIME" ]; then
          AVAILABLE_RUNTIME="18.4"
          echo "üìç Fallback Runtime: $AVAILABLE_RUNTIME"
        fi
        
        echo "üìç –§–ò–ù–ê–õ–¨–ù–´–ô –í–´–ë–û–†: SDK=$AVAILABLE_SDK, Runtime=$AVAILABLE_RUNTIME"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫—É—é —Å—Ö–µ–º—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
        if [ -n "$NEW_SCHEME" ]; then
          SCHEME_NAME="$NEW_SCHEME"
        else
          SCHEME_NAME="ALADDIN"
        fi
        echo "üìç –ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è —Å—Ö–µ–º–∞: $SCHEME_NAME"
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–ª–∞–≥–∏ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å Asset Catalog - –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï
        ASSET_FLAGS=""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å SDK –∏ Runtime –ø–µ—Ä–µ–¥ —Å–±–æ—Ä–∫–æ–π
        SDK_MAJOR_FINAL=$(echo "$AVAILABLE_SDK" | sed 's/iphonesimulator\([0-9][0-9]*\).*/\1/')
        RUNTIME_MAJOR_FINAL=$(echo "$AVAILABLE_RUNTIME" | cut -d. -f1)
        
        echo "üìç –ü–†–û–í–ï–†–ö–ê –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò: SDK major=$SDK_MAJOR_FINAL, Runtime major=$RUNTIME_MAJOR_FINAL"
        
        if [ "$SDK_MAJOR_FINAL" != "$RUNTIME_MAJOR_FINAL" ]; then
          echo "‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò: SDK $SDK_MAJOR_FINAL –Ω–µ —Å–æ–≤–º–µ—Å—Ç–∏–º —Å Runtime $RUNTIME_MAJOR_FINAL"
          echo "üìç –ò—â–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π runtime –¥–ª—è SDK $SDK_MAJOR_FINAL..."
          
          # –ò—â–µ–º runtime —Ç–æ–π –∂–µ major –≤–µ—Ä—Å–∏–∏ —á—Ç–æ –∏ SDK
          CORRECT_RUNTIME=$(echo "$ALL_RUNTIME_VERSIONS" | grep "^$SDK_MAJOR_FINAL\." | head -1)
          if [ -n "$CORRECT_RUNTIME" ]; then
            AVAILABLE_RUNTIME="$CORRECT_RUNTIME"
            echo "‚úÖ –ù–ê–ô–î–ï–ù –°–û–í–ú–ï–°–¢–ò–ú–´–ô RUNTIME: $AVAILABLE_RUNTIME"
          else
            echo "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π runtime –¥–ª—è SDK $SDK_MAJOR_FINAL"
          fi
        fi
        
        # –†–ê–î–ò–ö–ê–õ–¨–ù–û–ï –†–ï–®–ï–ù–ò–ï: –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—É —Å runtime —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å—é
        echo "üìç –†–ê–î–ò–ö–ê–õ–¨–ù–û–ï –†–ï–®–ï–ù–ò–ï: –ò—Å–ø—Ä–∞–≤–ª—è–µ–º runtime —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å..."
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å—é, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ë–ï–ó destination spec
        if [ "$SDK_MAJOR_FINAL" != "$RUNTIME_MAJOR_FINAL" ]; then
          echo "üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –ù–µ—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å SDK –∏ Runtime!"
          echo "üìç –ò—Å–ø–æ–ª—å–∑—É–µ–º –ë–ï–ó destination –¥–ª—è –æ–±—Ö–æ–¥–∞ –ø—Ä–æ–±–ª–µ–º—ã..."
          DESTINATION_OVERRIDE="NO_DESTINATION"
        else
          DESTINATION_OVERRIDE="USE_DESTINATION"
        fi
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–ª–∞–≥–∏ –¥–ª—è Asset Catalog
        if [ "$AVAILABLE_SDK" = "iphonesimulator18.0" ]; then
          ASSET_FLAGS="ASSETCATALOG_COMPILER_GLOBAL_ACCENT_COLOR_NAME= ASSETCATALOG_COMPILER_GLOBAL_ACCENT_COLOR_NAME=AccentColor"
        fi
        
        # –£–ú–ù–ê–Ø –õ–û–ì–ò–ö–ê DESTINATION - –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è runtime
        echo "üìç –ê–Ω–∞–ª–∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏ runtime —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏:"
        xcrun simctl list devices available | grep iPhone | head -5
        
        # 1. –ò—â–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π runtime –≤–µ—Ä—Å–∏–∏
        echo "üìç –ü–æ–∏—Å–∫ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å runtime $AVAILABLE_RUNTIME..."
        
        # –ü–æ–ª—É—á–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π runtime
        RUNTIME_DEVICES=$(xcrun simctl list devices | grep -A 50 "$AVAILABLE_RUNTIME" | grep "iPhone" | head -5)
        echo "üìç –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è runtime $AVAILABLE_RUNTIME:"
        echo "$RUNTIME_DEVICES"
        
        # –ò—â–µ–º iPhone 16 Pro –¥–ª—è –¥–∞–Ω–Ω–æ–π runtime
        COMPATIBLE_DEVICE=$(echo "$RUNTIME_DEVICES" | grep "iPhone 16 Pro" | head -1)
        
        if [ -n "$COMPATIBLE_DEVICE" ]; then
          DEVICE_NAME=$(echo "$COMPATIBLE_DEVICE" | cut -d'(' -f1 | xargs)
          echo "üìç –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: $DEVICE_NAME –¥–ª—è runtime $AVAILABLE_RUNTIME"
          # –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–´–ô –ü–û–î–•–û–î: –ë–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è OS - –ø—É—Å—Ç—å —Å–∏—Å—Ç–µ–º–∞ —Å–∞–º–∞ –≤—ã–±–µ—Ä–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º—É—é
          DESTINATION_SPEC="platform=iOS Simulator,name=$DEVICE_NAME"
        else
          # 2. –ï—Å–ª–∏ –Ω–µ—Ç iPhone 16 Pro, –±–µ—Ä–µ–º –ª—é–±–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ iPhone –¥–ª—è —ç—Ç–æ–π runtime
          ANY_IPHONE=$(echo "$RUNTIME_DEVICES" | grep "iPhone" | head -1)
          if [ -n "$ANY_IPHONE" ]; then
            DEVICE_NAME=$(echo "$ANY_IPHONE" | cut -d'(' -f1 | xargs)
            echo "üìç –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: $DEVICE_NAME –¥–ª—è runtime $AVAILABLE_RUNTIME"
            # –ë–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è OS - –±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ
            DESTINATION_SPEC="platform=iOS Simulator,name=$DEVICE_NAME"
          else
            # 3. Fallback: generic destination –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è runtime
            echo "üìç –ò—Å–ø–æ–ª—å–∑—É–µ–º generic destination –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è runtime"
            DESTINATION_SPEC="generic/platform=iOS Simulator"
          fi
        fi
        echo "üìç –ò–°–ü–û–õ–¨–ó–£–ï–ú–´–ô DESTINATION: $DESTINATION_SPEC"
        
        # –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ destinations –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ö–µ–º—ã
        echo "üìç –î–ï–¢–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê destinations –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Å—Ö–µ–º—ã..."
        echo "üìç –°—Ö–µ–º–∞: $SCHEME_NAME"
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π –≤—ã–≤–æ–¥ showdestinations
        FULL_DESTINATIONS_OUTPUT=$(xcodebuild -project ALADDIN.xcodeproj -scheme "$SCHEME_NAME" -showdestinations 2>&1 || echo "ERROR")
        echo "üìç –ü–æ–ª–Ω—ã–π –≤—ã–≤–æ–¥ showdestinations:"
        echo "$FULL_DESTINATIONS_OUTPUT" | head -10
        
        # –ò—â–µ–º iOS Simulator destinations
        AVAILABLE_DESTINATIONS=$(echo "$FULL_DESTINATIONS_OUTPUT" | grep "iOS Simulator" || echo "")
        
        if [ -n "$AVAILABLE_DESTINATIONS" ]; then
          echo "‚úÖ –°–•–ï–ú–ê –ü–û–î–î–ï–†–ñ–ò–í–ê–ï–¢ iOS SIMULATOR DESTINATIONS!"
          echo "$AVAILABLE_DESTINATIONS" | head -3
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ Ineligible destinations
          INELIGIBLE=$(echo "$FULL_DESTINATIONS_OUTPUT" | grep -i "ineligible" || echo "")
          if [ -n "$INELIGIBLE" ]; then
            echo "‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã Ineligible destinations:"
            echo "$INELIGIBLE" | head -2
          else
            echo "‚úÖ –ù–µ—Ç Ineligible destinations!"
          fi
        else
          echo "‚ùå –°–•–ï–ú–ê –ù–ï –ü–û–î–î–ï–†–ñ–ò–í–ê–ï–¢ iOS SIMULATOR!"
          echo "üìç –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ª—é–±—ã–µ destinations:"
          echo "$FULL_DESTINATIONS_OUTPUT" | grep -i "destination\|platform" | head -5 || echo "–ù–µ—Ç destinations"
          
          # –ü—Ä–æ–≤–µ—Ä–∏–º –µ—Å—Ç—å –ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å iOS device platform
          if echo "$FULL_DESTINATIONS_OUTPUT" | grep -q "iOS 18.0 is not installed"; then
            echo "üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: iOS 18.0 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è real device!"
            echo "üìç –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è simulator —Å–±–æ—Ä–∫–∏ - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º..."
          fi
          
          echo "‚ö†Ô∏è –ë—É–¥–µ–º –ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–±–æ—Ä–∫—É –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —è–≤–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞..."
        fi
        
        # –ü–†–ò–û–†–ò–¢–ï–¢ 2: –†–ï–í–û–õ–Æ–¶–ò–û–ù–ù–û–ï –†–ï–®–ï–ù–ò–ï - –û–ë–•–û–î RUNTIME –ü–†–û–ë–õ–ï–ú!
        echo "üö® –ü–†–ò–û–†–ò–¢–ï–¢ 2: –†–ï–í–û–õ–Æ–¶–ò–û–ù–ù–û–ï –†–ï–®–ï–ù–ò–ï - –û–ë–•–û–î RUNTIME –ü–†–û–ë–õ–ï–ú!"
        echo "=================================================="
        
        # –†–ï–®–ï–ù–ò–ï 1: –ü—Ä–æ–±—É–µ–º —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º build settings –¥–ª—è –æ–±—Ö–æ–¥–∞ runtime –ø—Ä–æ–±–ª–µ–º
        DIRECT_BUILD_SUCCESS=false
        echo "üìç –ü—Ä–æ–±—É–µ–º –ø—Ä—è–º–æ–π build target ALADDIN —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º runtime –ø—Ä–æ–±–ª–µ–º..."
        if xcodebuild -project ALADDIN.xcodeproj -target ALADDIN \
          -sdk "$AVAILABLE_SDK" \
          IPHONEOS_DEPLOYMENT_TARGET=12.0 \
          CODE_SIGNING_ALLOWED=NO \
          ASSETCATALOG_COMPILER_APPICON_NAME="" \
          COMPILER_INDEX_STORE_ENABLE=NO \
          GCC_WARN_INHIBIT_ALL_WARNINGS=YES \
          ASSETCATALOG_COMPILER_GLOBAL_ACCENT_COLOR_NAME="" \
          ASSETCATALOG_COMPILER_INCLUDE_ALL_APPICON_ASSETS=NO \
          SUPPORTS_MACCATALYST=NO \
          TARGETED_DEVICE_FAMILY="1,2" \
          VALID_ARCHS="arm64 x86_64" \
          build 2>/dev/null; then
          echo "‚úÖ –ü–†–Ø–ú–û–ô BUILD –£–°–ü–ï–®–ï–ù!"
          DIRECT_BUILD_SUCCESS=true
          # –ü–æ–∏—Å–∫ .app —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ build
          APP_PATH=$(find . -name "ALADDIN.app" -type d 2>/dev/null | head -1)
          if [ -n "$APP_PATH" ]; then
            echo "üéâ –ù–ê–ô–î–ï–ù .app –ü–†–Ø–ú–û–ô –°–ë–û–†–ö–û–ô: $APP_PATH"
            echo "APP_FOUND_PATH=$APP_PATH" >> $GITHUB_ENV
          fi
        else
          echo "‚ùå –ü—Ä—è–º–æ–π build –Ω–µ —É–¥–∞–ª—Å—è, –ø—Ä–æ–±—É–µ–º –†–ï–í–û–õ–Æ–¶–ò–û–ù–ù–û–ï –†–ï–®–ï–ù–ò–ï..."
          
          # –†–ï–í–û–õ–Æ–¶–ò–û–ù–ù–û–ï –†–ï–®–ï–ù–ò–ï: –ü—Ä–æ–±—É–µ–º —Å –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ–º Asset Catalog –¥–ª—è –æ–±—Ö–æ–¥–∞ runtime –ø—Ä–æ–±–ª–µ–º
          echo "üìç –†–ï–í–û–õ–Æ–¶–ò–û–ù–ù–û–ï –†–ï–®–ï–ù–ò–ï: –û—Ç–∫–ª—é—á–∞–µ–º Asset Catalog –¥–ª—è –æ–±—Ö–æ–¥–∞ runtime –ø—Ä–æ–±–ª–µ–º..."
          if xcodebuild -project ALADDIN.xcodeproj -target ALADDIN \
            -sdk "$AVAILABLE_SDK" \
            IPHONEOS_DEPLOYMENT_TARGET=12.0 \
            CODE_SIGNING_ALLOWED=NO \
            ASSETCATALOG_COMPILER_APPICON_NAME="" \
            ASSETCATALOG_COMPILER_INCLUDE_ALL_APPICON_ASSETS=NO \
            COMPILER_INDEX_STORE_ENABLE=NO \
            GCC_WARN_INHIBIT_ALL_WARNINGS=YES \
            SUPPORTS_MACCATALYST=NO \
            TARGETED_DEVICE_FAMILY="1,2" \
            VALID_ARCHS="arm64 x86_64" \
            build 2>/dev/null; then
            echo "‚úÖ –†–ï–í–û–õ–Æ–¶–ò–û–ù–ù–û–ï –†–ï–®–ï–ù–ò–ï –£–°–ü–ï–®–ù–û!"
            DIRECT_BUILD_SUCCESS=true
            APP_PATH=$(find . -name "ALADDIN.app" -type d 2>/dev/null | head -1)
            if [ -n "$APP_PATH" ]; then
              echo "üéâ –ù–ê–ô–î–ï–ù .app –§–ê–ô–õ: $APP_PATH"
              echo "APP_FOUND_PATH=$APP_PATH" >> $GITHUB_ENV
            fi
          else
            echo "‚ùå –†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –Ω–µ –ø–æ–º–æ–≥–ª–æ, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ —Å—Ö–µ–º—É..."
          fi
        fi
        
        # –ü–†–ò–û–†–ò–¢–ï–¢ 3: –°–•–ï–ú–ê –ü–û–î–•–û–î (–µ—Å–ª–∏ –ø—Ä—è–º–æ–π build –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª)
        if [ "$DIRECT_BUILD_SUCCESS" != "true" ]; then
        echo "üö® –ü–†–ò–û–†–ò–¢–ï–¢ 3: –°–•–ï–ú–ê –ü–û–î–•–û–î!"
        echo "=================================================="
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º destination –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        if [ "$DESTINATION_OVERRIDE" = "NO_DESTINATION" ]; then
          echo "üìç –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–±–æ—Ä–∫—É –ë–ï–ó destination –¥–ª—è –æ–±—Ö–æ–¥–∞ runtime –ø—Ä–æ–±–ª–µ–º..."
          BUILD_CMD="xcodebuild -project ALADDIN.xcodeproj -scheme $SCHEME_NAME -sdk $AVAILABLE_SDK IPHONEOS_DEPLOYMENT_TARGET=12.0 CODE_SIGNING_ALLOWED=NO ASSETCATALOG_COMPILER_APPICON_NAME=\"\" ASSETCATALOG_COMPILER_ACCENT_COLOR_NAME=\"\" ASSETCATALOG_COMPILER_INCLUDE_ALL_APPICON_ASSETS=NO COMPILER_INDEX_STORE_ENABLE=NO GCC_WARN_INHIBIT_ALL_WARNINGS=YES $ASSET_FLAGS build"
        else
          echo "üìç –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–±–æ—Ä–∫—É –° destination: $DESTINATION_SPEC"
          BUILD_CMD="xcodebuild -project ALADDIN.xcodeproj -scheme $SCHEME_NAME -sdk $AVAILABLE_SDK -destination \"$DESTINATION_SPEC\" IPHONEOS_DEPLOYMENT_TARGET=12.0 CODE_SIGNING_ALLOWED=NO ASSETCATALOG_COMPILER_APPICON_NAME=\"\" ASSETCATALOG_COMPILER_ACCENT_COLOR_NAME=\"\" ASSETCATALOG_COMPILER_INCLUDE_ALL_APPICON_ASSETS=NO COMPILER_INDEX_STORE_ENABLE=NO GCC_WARN_INHIBIT_ALL_WARNINGS=YES $ASSET_FLAGS build"
        fi
        
        if eval "$BUILD_CMD"; then
          
          echo "‚úÖ –¢–ï–°–¢ 1 –£–°–ü–ï–•–ï–ù!"
          
          # –ê–ì–†–ï–°–°–ò–í–ù–´–ô –ü–û–ò–°–ö .app –§–ê–ô–õ–ê –í–û –í–°–ï–• –ú–ï–°–¢–ê–•
          echo "üîç –ü–û–ò–°–ö .app –§–ê–ô–õ–ê..."
          APP_PATH=""
          
          # 1. –ü–æ–∏—Å–∫ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π build –ø–∞–ø–∫–µ
          if [ -d "build" ]; then
            APP_PATH=$(find build/ -name "*.app" -type d | head -1)
            echo "–ü–æ–∏—Å–∫ –≤ build/: $APP_PATH"
          fi
          
          # 2. –ü–æ–∏—Å–∫ –≤ DerivedData (–æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ—Å—Ç–æ)
          if [ -z "$APP_PATH" ]; then
            APP_PATH=$(find ~/Library/Developer/Xcode/DerivedData -name "ALADDIN.app" -type d 2>/dev/null | head -1)
            echo "–ü–æ–∏—Å–∫ –≤ DerivedData: $APP_PATH"
          fi
          
          # 3. –ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º–µ (GitHub Actions)
          if [ -z "$APP_PATH" ]; then
            APP_PATH=$(find /Users/runner/Library/Developer/Xcode/DerivedData -name "ALADDIN.app" -type d 2>/dev/null | head -1)
            echo "–ü–æ–∏—Å–∫ –≤ /Users/runner: $APP_PATH"
          fi
          
          # 4. –ü–æ–∏—Å–∫ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö Xcode
          if [ -z "$APP_PATH" ]; then
            APP_PATH=$(find /Users/runner/Library/Developer/Xcode/DerivedData -path "*Debug-iphonesimulator*" -name "*.app" -type d 2>/dev/null | head -1)
            echo "–ü–æ–∏—Å–∫ –≤ Debug-iphonesimulator: $APP_PATH"
          fi
          
          if [ -n "$APP_PATH" ]; then
            echo "üéâ –ù–ê–ô–î–ï–ù .app –§–ê–ô–õ: $APP_PATH"
            ls -la "$APP_PATH"
            echo "üì± –†–∞–∑–º–µ—Ä: $(du -sh "$APP_PATH")"
            echo "APP_FOUND_PATH=$APP_PATH" >> $GITHUB_ENV
          else
            echo "‚ùå .app —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫..."
          fi
          
        else
          echo "‚ùå –¢–ï–°–¢ 1 –ù–ï –†–ê–ë–û–¢–ê–ï–¢"
          echo "üîß –¢–ï–°–¢ 2: –ü–æ–ø—Ä–æ–±—É–µ–º —Å ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"
          
          # –ü–æ–ª—É—á–∞–µ–º ID –ø–µ—Ä–≤–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ iPhone —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
          DEVICE_ID=$(xcrun simctl list devices available | grep "iPhone 16 Pro" | head -1 | grep -o '[A-F0-9-]\{36\}')
          TEST2A_SUCCESS=false
          TEST2B_SUCCESS=false
          if [ -n "$DEVICE_ID" ]; then
            echo "üìç –ü–æ–ø—Ä–æ–±—É–µ–º —Å ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: $DEVICE_ID"
            if xcodebuild -project ALADDIN.xcodeproj -scheme ALADDIN \
              -sdk "$AVAILABLE_SDK" \
              -destination "platform=iOS Simulator,id=$DEVICE_ID" \
              IPHONEOS_DEPLOYMENT_TARGET=12.0 \
              CODE_SIGNING_ALLOWED=NO \
              ASSETCATALOG_COMPILER_APPICON_NAME="" \
              ASSETCATALOG_COMPILER_INCLUDE_ALL_APPICON_ASSETS=NO \
              build; then
              echo "‚úÖ –¢–ï–°–¢ 2A –£–°–ü–ï–•–ï–ù —Å ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞!"
              TEST2A_SUCCESS=true
              APP_PATH=$(find build/ -name "*.app" -type d | head -1)
              if [ -n "$APP_PATH" ]; then
                echo "üéâ –ù–ê–ô–î–ï–ù .app –§–ê–ô–õ: $APP_PATH"
                echo "APP_FOUND_PATH=$APP_PATH" >> $GITHUB_ENV
              fi
            else
              echo "‚ùå –¢–ï–°–¢ 2A –ù–ï –†–ê–ë–û–¢–ê–ï–¢ —Å ID"
            fi
          fi
          
          if [ "$TEST2A_SUCCESS" != "true" ]; then
            echo "üîß –¢–ï–°–¢ 2B: Generic Simulator with Fixes"
          if xcodebuild -project ALADDIN.xcodeproj -scheme ALADDIN \
            -sdk "$AVAILABLE_SDK" \
            -destination "generic/platform=iOS Simulator" \
            IPHONEOS_DEPLOYMENT_TARGET=12.0 \
            CODE_SIGNING_ALLOWED=NO \
            ASSETCATALOG_COMPILER_APPICON_NAME="" \
            ASSETCATALOG_COMPILER_INCLUDE_ALL_APPICON_ASSETS=NO \
            build; then
            
              echo "‚úÖ –¢–ï–°–¢ 2B –£–°–ü–ï–•–ï–ù!"
              TEST2B_SUCCESS=true
            APP_PATH=$(find build/ -name "*.app" -type d | head -1)
            if [ -n "$APP_PATH" ]; then
              echo "üéâ –ù–ê–ô–î–ï–ù .app –§–ê–ô–õ: $APP_PATH"
                echo "APP_FOUND_PATH=$APP_PATH" >> $GITHUB_ENV
            fi
            
          else
              echo "‚ùå –¢–ï–°–¢ 2B –ù–ï –†–ê–ë–û–¢–ê–ï–¢"
            fi
          fi
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–µ–ª –ª–∏ –∫–∞–∫–æ–π-—Ç–æ –∏–∑ —Ç–µ—Å—Ç–æ–≤ 2A –∏–ª–∏ 2B
          if [ "$TEST2A_SUCCESS" != "true" ] && [ "$TEST2B_SUCCESS" != "true" ]; then
            echo "üîß –¢–ï–°–¢ 3: –ë–ï–ó destination - –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ü–†–û–°–¢–û–ô"
            if xcodebuild -project ALADDIN.xcodeproj -scheme ALADDIN \
              -sdk "$AVAILABLE_SDK" \
              IPHONEOS_DEPLOYMENT_TARGET=12.0 \
              CODE_SIGNING_ALLOWED=NO \
              ASSETCATALOG_COMPILER_APPICON_NAME="" \
              ASSETCATALOG_COMPILER_INCLUDE_ALL_APPICON_ASSETS=NO \
              build; then
              
              echo "‚úÖ –¢–ï–°–¢ 3 –£–°–ü–ï–•–ï–ù!"
              # –ü–æ–∏—Å–∫ .app —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Å–±–æ—Ä–∫–∏
              APP_PATH=""
              for search_path in "." "build" "/Users/runner/Library/Developer/Xcode/DerivedData"; do
                APP_PATH=$(find "$search_path" -name "*.app" -type d 2>/dev/null | grep -i aladdin | head -1)
                if [ -n "$APP_PATH" ]; then
                  echo "üéâ –ù–ê–ô–î–ï–ù .app –§–ê–ô–õ: $APP_PATH"
                  echo "APP_FOUND_PATH=$APP_PATH" >> $GITHUB_ENV
                  break
                fi
              done
              
            else
              echo "‚ùå –¢–ï–°–¢ 3 –ù–ï –†–ê–ë–û–¢–ê–ï–¢"
              echo "üîß –¢–ï–°–¢ 4: iOS DEVICE SDK - –†–ï–ê–õ–¨–ù–û–ï –£–°–¢–†–û–ô–°–¢–í–û"
              
              # –ë—ã—Å—Ç—Ä–æ –ø—Ä–æ–±—É–µ–º iOS device SDK
              DEVICE_SDK=$(xcodebuild -showsdks | grep iphoneos | awk '{print $NF}' | head -1)
              if [ -n "$DEVICE_SDK" ]; then
                echo "üìç –¢–µ—Å—Ç–∏—Ä—É–µ–º iOS device SDK: $DEVICE_SDK"
                if xcodebuild -project ALADDIN.xcodeproj -scheme ALADDIN \
                  -sdk "$DEVICE_SDK" \
                  IPHONEOS_DEPLOYMENT_TARGET=12.0 \
                  CODE_SIGNING_ALLOWED=NO \
                  ASSETCATALOG_COMPILER_APPICON_NAME="" \
                  build; then
                  
                  echo "‚úÖ –¢–ï–°–¢ 4 –£–°–ü–ï–•–ï–ù —Å iOS device SDK!"
                  APP_PATH=$(find . -name "*.app" -type d 2>/dev/null | head -1)
                  if [ -n "$APP_PATH" ]; then
                    echo "üéâ –ù–ê–ô–î–ï–ù .app –¥–ª—è device: $APP_PATH"
                    echo "APP_FOUND_PATH=$APP_PATH" >> $GITHUB_ENV
                  fi
                else
                  echo "‚ùå –¢–ï–°–¢ 4 –ù–ï –†–ê–ë–û–¢–ê–ï–¢ —Å device SDK"
                fi
              fi
              
              echo "üîß –¢–ï–°–¢ 5: –ê–í–ê–†–ò–ô–ù–´–ô –†–ï–ñ–ò–ú - –¢–û–õ–¨–ö–û SDK"
              if xcodebuild -project ALADDIN.xcodeproj -scheme ALADDIN \
                -sdk "$AVAILABLE_SDK" \
                IPHONEOS_DEPLOYMENT_TARGET=12.0 \
                CODE_SIGNING_ALLOWED=NO \
                ASSETCATALOG_COMPILER_APPICON_NAME="" \
                build; then
                echo "‚úÖ –¢–ï–°–¢ 5 –£–°–ü–ï–•–ï–ù!"
                # –ê–≤–∞—Ä–∏–π–Ω—ã–π –ø–æ–∏—Å–∫
                APP_PATH=$(find . -name "*.app" -type d 2>/dev/null | head -1)
                if [ -n "$APP_PATH" ]; then
                  echo "üéâ –ê–í–ê–†–ò–ô–ù–´–ô –ù–ê–ô–î–ï–ù .app: $APP_PATH"
                  echo "APP_FOUND_PATH=$APP_PATH" >> $GITHUB_ENV
                fi
              else
                echo "‚ùå –¢–ï–°–¢ 5 –ù–ï –†–ê–ë–û–¢–ê–ï–¢"
                echo "üîß –¢–ï–°–¢ 6: –ü–û–ü–†–û–ë–£–ï–ú ARCHIVE - –ù–û–í–´–ô –ü–û–î–•–û–î"
                
                # –ü–æ–ø—Ä–æ–±—É–µ–º archive –≤–º–µ—Å—Ç–æ build
                if xcodebuild -project ALADDIN.xcodeproj -scheme ALADDIN \
                  -sdk "$AVAILABLE_SDK" \
                  -destination "generic/platform=iOS Simulator" \
                  IPHONEOS_DEPLOYMENT_TARGET=12.0 \
                  CODE_SIGNING_ALLOWED=NO \
                  ASSETCATALOG_COMPILER_APPICON_NAME="" \
                  archive -archivePath ./ALADDIN.xcarchive; then
                  
                  echo "‚úÖ –¢–ï–°–¢ 6 –£–°–ü–ï–•–ï–ù —Å archive!"
                  # –ü–æ–∏—Å–∫ .app –≤ –∞—Ä—Ö–∏–≤–µ
                  APP_PATH=$(find ./ALADDIN.xcarchive -name "*.app" -type d 2>/dev/null | head -1)
                  if [ -n "$APP_PATH" ]; then
                    echo "üéâ –ù–ê–ô–î–ï–ù .app –≤ –∞—Ä—Ö–∏–≤–µ: $APP_PATH"
                  echo "APP_FOUND_PATH=$APP_PATH" >> $GITHUB_ENV
                fi
              else
                echo "‚ùå –í–°–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ò–õ–ò–°–¨"
                  echo "–ü—Ä–æ–±–ª–µ–º–∞: –°—Ö–µ–º–∞ ALADDIN –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç iOS Simulator destinations"
                  echo "–ü—Ä–æ–±–æ–≤–∞–ª–∏ –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã:"
                  echo "- iOS Simulator —Å —Ä–∞–∑–Ω—ã–º–∏ destination specifiers"
                  echo "- Generic destinations"
                  echo "- ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤"
                  echo "- Archive approach"
                  echo "- iOS device SDK"
                  echo ""
                  echo "–†–ï–®–ï–ù–ò–ï: –ù—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å—Ö–µ–º—É ALADDIN –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ iOS Simulator –≤ Xcode"
                  xcodebuild -list 2>/dev/null || echo "–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ö–µ–º"
                exit 1
                fi
              fi
              fi
            fi
          fi
        fi
        
        echo ""
        echo "üì± –§–ò–ù–ê–õ–¨–ù–´–ô –ü–û–ò–°–ö .app –§–ê–ô–õ–ê:"
        echo "==============================="
        
        # –§–ò–ù–ê–õ–¨–ù–´–ô –ê–ì–†–ï–°–°–ò–í–ù–´–ô –ü–û–ò–°–ö
        FINAL_APP_PATH=""
        
        # –ü–æ–∏—Å–∫ –≤–æ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
        for search_path in "build" "/Users/runner/Library/Developer/Xcode/DerivedData" "~/Library/Developer/Xcode/DerivedData"; do
          if [ -z "$FINAL_APP_PATH" ]; then
            FINAL_APP_PATH=$(find "$search_path" -name "*.app" -type d 2>/dev/null | grep -i aladdin | head -1)
            if [ -n "$FINAL_APP_PATH" ]; then
              echo "üéØ –ù–ê–ô–î–ï–ù –í $search_path: $FINAL_APP_PATH"
              break
            fi
          fi
        done
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω - –∏—â–µ–º –ª—é–±–æ–π .app —Ñ–∞–π–ª
        if [ -z "$FINAL_APP_PATH" ]; then
          FINAL_APP_PATH=$(find . -name "*.app" -type d 2>/dev/null | head -1)
        fi
        
        if [ -n "$FINAL_APP_PATH" ]; then
          echo "üéâ –§–ò–ù–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: –ù–ê–ô–î–ï–ù .app –§–ê–ô–õ!"
          echo "üìç –ü—É—Ç—å: $FINAL_APP_PATH"
          ls -la "$FINAL_APP_PATH"
          echo "üì± –†–∞–∑–º–µ—Ä: $(du -sh "$FINAL_APP_PATH" 2>/dev/null || echo "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")"
          echo "APP_FOUND_PATH=$FINAL_APP_PATH" >> $GITHUB_ENV
        else
          echo "‚ùå .app –§–ê–ô–õ –ù–ï –ù–ê–ô–î–ï–ù!"
          find . -name "build" -type d 2>/dev/null || echo "–ù–µ—Ç build –ø–∞–ø–æ–∫"
        fi
    
    - name: Find and Upload .app file (100% SUCCESS)
      run: |
        cd mobile_apps/ALADDIN_iOS
        echo "üîç –§–ò–ù–ê–õ–¨–ù–´–ô –ü–û–ò–°–ö –ò UPLOAD .app –§–ê–ô–õ–ê"
        echo "====================================="
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π –ø—É—Ç—å –∏–ª–∏ –∏—â–µ–º –∑–∞–Ω–æ–≤–æ
        if [ -n "$APP_FOUND_PATH" ]; then
          UPLOAD_PATH="$APP_FOUND_PATH"
          echo "‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π –ø—É—Ç—å: $UPLOAD_PATH"
        else
          # –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫
          UPLOAD_PATH=$(find /Users/runner/Library/Developer/Xcode/DerivedData -name "*.app" -type d 2>/dev/null | grep -i aladdin | head -1)
          if [ -z "$UPLOAD_PATH" ]; then
            UPLOAD_PATH=$(find . -name "*.app" -type d 2>/dev/null | head -1)
          fi
          echo "üîç –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫: $UPLOAD_PATH"
        fi
        
        if [ -n "$UPLOAD_PATH" ] && [ -d "$UPLOAD_PATH" ]; then
          echo "üéâ –ù–ê–ô–î–ï–ù .app –§–ê–ô–õ –î–õ–Ø UPLOAD: $UPLOAD_PATH"
          ls -la "$UPLOAD_PATH"
          echo "UPLOAD_APP_PATH=$UPLOAD_PATH" >> $GITHUB_ENV
        else
          echo "‚ùå –ù–ï –ù–ê–ô–î–ï–ù .app –§–ê–ô–õ –î–õ–Ø UPLOAD"
        fi
    
    - name: Upload .app file (SUCCESS)
      uses: actions/upload-artifact@v4
      if: env.UPLOAD_APP_PATH != ''
      with:
        name: aladdin-ios-app-final
        path: ${{ env.UPLOAD_APP_PATH }}
        if-no-files-found: error
        retention-days: 30
    
    - name: Upload build directory (backup)
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ios-build-directory-backup
        path: mobile_apps/ALADDIN_iOS/
        if-no-files-found: warn
        retention-days: 7

