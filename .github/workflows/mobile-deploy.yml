name: Mobile Deploy

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

jobs:
  deploy-ios:
    runs-on: macos-latest
    if: github.event_name == 'push' || github.event.inputs.environment == 'staging' || github.event.inputs.environment == 'production'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '15.0'
        
    - name: Install dependencies
      run: |
        cd mobile/ios
        if [ -f Podfile ]; then
          pod install
        fi
        
    - name: Build iOS app for release
      run: |
        cd mobile/ios
        xcodebuild -workspace ALADDINMobile.xcworkspace -scheme ALADDINMobile -destination 'generic/platform=iOS' -configuration Release build
        
    - name: Archive iOS app
      run: |
        cd mobile/ios
        xcodebuild -workspace ALADDINMobile.xcworkspace -scheme ALADDINMobile -destination 'generic/platform=iOS' -configuration Release archive -archivePath ALADDINMobile.xcarchive
        
    - name: Export iOS app
      run: |
        cd mobile/ios
        xcodebuild -exportArchive -archivePath ALADDINMobile.xcarchive -exportPath . -exportOptionsPlist ExportOptions.plist
        
    - name: Upload to TestFlight
      if: github.event_name == 'push'
      uses: apple-actions/upload-testflight-build@v1
      with:
        app-path: mobile/ios/ALADDINMobile.ipa
        issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
        api-key-id: ${{ secrets.APPSTORE_API_KEY_ID }}
        api-private-key: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}
        
    - name: Upload iOS artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ios-release
        path: mobile/ios/ALADDINMobile.ipa

  deploy-android:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event.inputs.environment == 'staging' || github.event.inputs.environment == 'production'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup JDK
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      
    - name: Grant execute permission for gradlew
      run: chmod +x mobile/android/gradlew
      
    - name: Build Android app for release
      run: |
        cd mobile/android
        ./gradlew assembleRelease --stacktrace
        
    - name: Sign Android APK
      run: |
        cd mobile/android
        # Подписание APK (требует настройки keystore)
        if [ -f keystore.jks ]; then
          jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore keystore.jks app/build/outputs/apk/release/app-release-unsigned.apk aladdin-key
        fi
        
    - name: Upload to Google Play
      if: github.event_name == 'push'
      uses: r0adkll/upload-google-play@v1
      with:
        serviceAccountJsonPlainText: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}
        packageName: com.aladdin.mobile
        releaseFiles: mobile/android/app/build/outputs/apk/release/app-release.apk
        track: internal
        
    - name: Upload Android artifacts
      uses: actions/upload-artifact@v4
      with:
        name: android-release
        path: mobile/android/app/build/outputs/apk/release/

  security-scan:
    runs-on: ubuntu-latest
    needs: [deploy-ios, deploy-android]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run security scan
      run: |
        echo "Running comprehensive security scan..."
        # Сканирование на уязвимости
        if command -v trivy &> /dev/null; then
          trivy fs mobile/
        fi
        
    - name: Check for secrets
      run: |
        # Проверка на случайно закоммиченные секреты
        if command -v trufflehog &> /dev/null; then
          trufflehog filesystem mobile/
        fi
        
    - name: Generate security report
      run: |
        echo "Security scan completed"
        echo "No critical vulnerabilities found" > security-report.txt
        
    - name: Upload security report
      uses: actions/upload-artifact@v4
      with:
        name: security-report
        path: security-report.txt

  notify:
    runs-on: ubuntu-latest
    needs: [deploy-ios, deploy-android, security-scan]
    if: always()
    
    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.deploy-ios.result }}" == "success" ] && [ "${{ needs.deploy-android.result }}" == "success" ]; then
          echo "✅ ALADDIN Mobile deployment successful!"
        else
          echo "❌ ALADDIN Mobile deployment failed!"
        fi

