name: iOS Smart Fix - Auto Detect Working Simulator

on:
  push:
    branches: [ main ]
    paths: [ 'mobile_apps/ALADDIN_iOS/smart_fix.txt' ]

jobs:
  smart-fix:
    runs-on: macos-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '16.0.0'
      
    - name: Smart iOS Build Fix
      run: |
        echo "üß† –£–ú–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï iOS –°–ë–û–†–ö–ò"
        echo "================================"
        
        cd mobile_apps/ALADDIN_iOS
        
        echo "üîç –®–ê–ì 1: –ê–ù–ê–õ–ò–ó –î–û–°–¢–£–ü–ù–´–• –°–ò–ú–£–õ–Ø–¢–û–†–û–í"
        echo "====================================="
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∏–º—É–ª—è—Ç–æ—Ä–æ–≤
        echo "–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∏–º—É–ª—è—Ç–æ—Ä—ã:"
        xcrun simctl list devices available
        
        echo ""
        echo "iPhone —Å–∏–º—É–ª—è—Ç–æ—Ä—ã:"
        IPHONE_SIMULATORS=$(xcrun simctl list devices available | grep iPhone || echo "")
        echo "$IPHONE_SIMULATORS"
        
        if [ -z "$IPHONE_SIMULATORS" ]; then
          echo "‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–∏ –æ–¥–Ω–æ–≥–æ iPhone —Å–∏–º—É–ª—è—Ç–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!"
          echo "–ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Å–∏–º—É–ª—è—Ç–æ—Ä..."
          
          # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤
          echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤:"
          xcrun simctl list devicetypes | grep iPhone
          
          # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ runtime
          echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ iOS runtime:"
          xcrun simctl list runtimes | grep iOS
          
          exit 1
        fi
        
        echo ""
        echo "üîç –®–ê–ì 2: –ü–û–ò–°–ö –†–ê–ë–û–ß–ï–ì–û –°–ò–ú–£–õ–Ø–¢–û–†–ê"
        echo "=================================="
        
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–±–æ—Ä–∫–∏
        test_build() {
          local destination="$1"
          local description="$2"
          
          echo ""
          echo "–¢–µ—Å—Ç–∏—Ä—É–µ–º: $description"
          echo "–ö–æ–º–∞–Ω–¥–∞: xcodebuild -destination \"$destination\" build"
          
          if xcodebuild -project ALADDIN.xcodeproj -scheme ALADDIN -destination "$destination" build; then
            echo "‚úÖ –£–°–ü–ï–•! $description —Ä–∞–±–æ—Ç–∞–µ—Ç!"
            ls -la build/
            find build/ -name "*.app" -type d
            return 0
          else
            echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å: $description"
            return 1
          fi
        }
        
        # –¢–µ—Å—Ç 1: –ë–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä)
        echo ""
        echo "üß™ –¢–ï–°–¢ 1: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä —Å–∏–º—É–ª—è—Ç–æ—Ä–∞"
        if test_build "platform=iOS Simulator" "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä"; then
          echo "üéâ –†–ï–®–ï–ù–ò–ï –ù–ê–ô–î–ï–ù–û: platform=iOS Simulator"
          exit 0
        fi
        
        # –¢–µ—Å—Ç 2: Generic platform
        echo ""
        echo "üß™ –¢–ï–°–¢ 2: Generic platform"
        if test_build "generic/platform=iOS Simulator" "Generic platform"; then
          echo "üéâ –†–ï–®–ï–ù–ò–ï –ù–ê–ô–î–ï–ù–û: generic/platform=iOS Simulator"
          exit 0
        fi
        
        # –¢–µ—Å—Ç 3: –ü–æ–ø—Ä–æ–±—É–µ–º –∫–∞–∂–¥—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π iPhone
        echo ""
        echo "üß™ –¢–ï–°–¢ 3: –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π iPhone"
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º–µ–Ω–∞ iPhone —Å–∏–º—É–ª—è—Ç–æ—Ä–æ–≤
        IPHONE_NAMES=$(echo "$IPHONE_SIMULATORS" | grep -o 'iPhone [^()]*' | sort -u)
        
        for iphone_name in $IPHONE_NAMES; do
          echo "–¢–µ—Å—Ç–∏—Ä—É–µ–º iPhone: $iphone_name"
          if test_build "platform=iOS Simulator,name=$iphone_name" "iPhone $iphone_name"; then
            echo "üéâ –†–ï–®–ï–ù–ò–ï –ù–ê–ô–î–ï–ù–û: platform=iOS Simulator,name=$iphone_name"
            exit 0
          fi
        done
        
        # –¢–µ—Å—Ç 4: –ë–µ–∑ destination –≤–æ–æ–±—â–µ
        echo ""
        echo "üß™ –¢–ï–°–¢ 4: –ë–µ–∑ destination"
        if test_build "" "–ë–µ–∑ destination" "xcodebuild -project ALADDIN.xcodeproj -scheme ALADDIN build"; then
          echo "üéâ –†–ï–®–ï–ù–ò–ï –ù–ê–ô–î–ï–ù–û: –ë–µ–∑ destination"
          exit 0
        fi
        
        # –¢–µ—Å—Ç 5: –ü–æ–ø—Ä–æ–±—É–µ–º —Å SDK
        echo ""
        echo "üß™ –¢–ï–°–¢ 5: –° SDK"
        AVAILABLE_SDK=$(xcodebuild -showsdks | grep "iOS" | head -1 | awk '{print $2}' || echo "")
        if [ -n "$AVAILABLE_SDK" ]; then
          echo "–ò—Å–ø–æ–ª—å–∑—É–µ–º SDK: $AVAILABLE_SDK"
          if xcodebuild -project ALADDIN.xcodeproj -scheme ALADDIN -sdk "$AVAILABLE_SDK" build; then
            echo "üéâ –†–ï–®–ï–ù–ò–ï –ù–ê–ô–î–ï–ù–û: SDK $AVAILABLE_SDK"
            ls -la build/
            find build/ -name "*.app" -type d
            exit 0
          fi
        fi
        
        echo ""
        echo "‚ùå –í–°–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ò–õ–ò–°–¨!"
        echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∏–º—É–ª—è—Ç–æ—Ä—ã:"
        xcrun simctl list devices available | grep iPhone
        echo ""
        echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ SDK:"
        xcodebuild -showsdks | grep iOS
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ios-smart-fix-artifacts
        path: mobile_apps/ALADDIN_iOS/build/
        retention-days: 7
