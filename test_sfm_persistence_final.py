#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ SFM
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ data/sfm/function_registry.json
"""

import sys
import os
import json
from datetime import datetime

# –î–æ–±–∞–≤–∏—Ç—å –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.join(os.path.dirname(__file__), '.'))

try:
    from security.safe_function_manager import SafeFunctionManager, SecurityLevel
    from core.base import SecurityBase
    
    print("üîç –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ü–ï–†–°–ò–°–¢–ï–ù–¢–ù–û–°–¢–ò SFM")
    print("=" * 60)
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–µ—Å—Ç—Ä–∞
    registry_path = "data/sfm/function_registry.json"
    if os.path.exists(registry_path):
        with open(registry_path, 'r', encoding='utf-8') as f:
            registry_data = json.load(f)
        functions_before = len(registry_data.get('functions', {}))
        active_before = registry_data.get('active_functions_count', 0)
        print(f"üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –î–û —Ç–µ—Å—Ç–∞:")
        print(f"   –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π: {functions_before}")
        print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_before}")
        print(f"   –°–ø—è—â–∏—Ö: {registry_data.get('sleeping_functions_count', 0)}")
    else:
        functions_before = 0
        active_before = 0
        print("‚ùå –†–µ–µ—Å—Ç—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        
    print("\n" + "-" * 40)
    
    # 2. –°–æ–∑–¥–∞–Ω–∏–µ SFM –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
    print("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ SafeFunctionManager...")
    base_module = SecurityBase("test_base")
    sfm = SafeFunctionManager(base_module)
    
    print(f"‚úÖ SFM —Å–æ–∑–¥–∞–Ω")
    print(f"   –§—É–Ω–∫—Ü–∏–π –≤ –ø–∞–º—è—Ç–∏ SFM: {len(sfm.functions)}")
    print(f"   –ü–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –≤–∫–ª—é—á–µ–Ω–∞: {sfm.enable_persistence}")
    print(f"   –ü—É—Ç—å –∫ —Ä–µ–µ—Å—Ç—Ä—É: {sfm.registry_file}")
    
    # 3. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    print("\n" + "-" * 40)
    test_function_id = f"test_persistence_function_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    print(f"üîß –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏: {test_function_id}")
    
    result = sfm.register_function(
        function_id=test_function_id,
        name="Test Persistence Function",
        description="–¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏",
        function_type="test",
        security_level=SecurityLevel.LOW,
        is_critical=False,
        auto_enable=True
    )
    
    if result:
        print("‚úÖ –§—É–Ω–∫—Ü–∏—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≤ –ø–∞–º—è—Ç–∏ SFM")
        print(f"   –§—É–Ω–∫—Ü–∏–π –≤ –ø–∞–º—è—Ç–∏ SFM —Ç–µ–ø–µ—Ä—å: {len(sfm.functions)}")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏!")
        
    # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞—Å—å –≤ —Ñ–∞–π–ª
    print("\n" + "-" * 40)
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª...")
    
    if os.path.exists(registry_path):
        with open(registry_path, 'r', encoding='utf-8') as f:
            registry_data_after = json.load(f)
        functions_after = len(registry_data_after.get('functions', {}))
        active_after = registry_data_after.get('active_functions_count', 0)
        
        print(f"üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –ü–û–°–õ–ï —Ç–µ—Å—Ç–∞:")
        print(f"   –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π: {functions_after}")
        print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_after}")
        print(f"   –°–ø—è—â–∏—Ö: {registry_data_after.get('sleeping_functions_count', 0)}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –µ—Å—Ç—å –≤ —Ñ–∞–π–ª–µ
        if test_function_id in registry_data_after.get('functions', {}):
            print(f"‚úÖ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø –ù–ê–ô–î–ï–ù–ê –í –†–ï–ï–°–¢–†–ï!")
            func_data = registry_data_after['functions'][test_function_id]
            print(f"   –°—Ç–∞—Ç—É—Å: {func_data.get('status')}")
            print(f"   –¢–∏–ø: {func_data.get('function_type')}")
            print(f"   –°–æ–∑–¥–∞–Ω–∞: {func_data.get('created_at')}")
        else:
            print(f"‚ùå –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø –ù–ï –ù–ê–ô–î–ï–ù–ê –í –†–ï–ï–°–¢–†–ï!")
            print("   –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:")
            for func_id in list(registry_data_after.get('functions', {}).keys())[:5]:
                print(f"     - {func_id}")
            if len(registry_data_after.get('functions', {})) > 5:
                print(f"     ... –∏ –µ—â–µ {len(registry_data_after.get('functions', {})) - 5}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        if functions_after > functions_before:
            print(f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ—É–Ω–∫—Ü–∏–π —É–≤–µ–ª–∏—á–∏–ª–æ—Å—å –Ω–∞ {functions_after - functions_before}")
        else:
            print(f"‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ—É–Ω–∫—Ü–∏–π –ù–ï –∏–∑–º–µ–Ω–∏–ª–æ—Å—å")
            
    else:
        print("‚ùå –†–µ–µ—Å—Ç—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞!")
    
    print("\n" + "=" * 60)
    print("üèÅ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù")
    
except Exception as e:
    print(f"‚ùå –û–®–ò–ë–ö–ê –¢–ï–°–¢–ê: {e}")
    import traceback
    traceback.print_exc()