#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤ SFM
–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö 8 –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤

–ê–≤—Ç–æ—Ä: ALADDIN Security Team
–í–µ—Ä—Å–∏—è: 1.0
–î–∞—Ç–∞: 2025-01-27
–ö–∞—á–µ—Å—Ç–≤–æ: A+
"""

import json
import os
from typing import Dict, Any, List

def test_sfm_registration():
    """–¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤ SFM"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤ SFM...")
    
    # –ü—É—Ç—å –∫ —Ä–µ–µ—Å—Ç—Ä—É SFM
    registry_path = "data/sfm/function_registry.json"
    
    if not os.path.exists(registry_path):
        print("‚ùå –§–∞–π–ª —Ä–µ–µ—Å—Ç—Ä–∞ SFM –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–µ—Å—Ç—Ä–∞
        with open(registry_path, 'r', encoding='utf-8') as f:
            registry = json.load(f)
        
        print(f"‚úÖ –†–µ–µ—Å—Ç—Ä SFM –∑–∞–≥—Ä—É–∂–µ–Ω: {registry_path}")
        
        # –°–ø–∏—Å–æ–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        expected_components = [
            "external_integrations_system",
            "threat_intelligence_system", 
            "automated_audit_system",
            "enhanced_dashboard_v2",
            "audit_scheduler",
            "compliance_monitor",
            "audit_dashboard_integration",
            "external_integrations_dashboard"
        ]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–∞–∂–¥–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        registered_components = []
        missing_components = []
        
        for component_id in expected_components:
            if component_id in registry.get("functions", {}):
                component = registry["functions"][component_id]
                registered_components.append({
                    "id": component_id,
                    "name": component.get("name", "Unknown"),
                    "status": component.get("status", "unknown"),
                    "is_critical": component.get("is_critical", False),
                    "quality_score": component.get("quality_score", "unknown"),
                    "lines_of_code": component.get("lines_of_code", 0)
                })
                print(f"  ‚úÖ {component_id}: {component.get('name', 'Unknown')} - {component.get('status', 'unknown')}")
            else:
                missing_components.append(component_id)
                print(f"  ‚ùå {component_id}: –ù–ï –ù–ê–ô–î–ï–ù!")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats = registry.get("statistics", {})
        total_functions = stats.get("total_functions", 0)
        external_integrations = stats.get("external_integrations_added", 0)
        
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ SFM:")
        print(f"  –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π: {total_functions}")
        print(f"  –í–Ω–µ—à–Ω–∏—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π: {external_integrations}")
        print(f"  –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {len(registered_components)}")
        print(f"  –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {len(missing_components)}")
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        success = len(missing_components) == 0
        
        if success:
            print(f"\nüéâ –í–°–ï {len(registered_components)} –ö–û–ú–ü–û–ù–ï–ù–¢–û–í –£–°–ü–ï–®–ù–û –ó–ê–†–ï–ì–ò–°–¢–†–ò–†–û–í–ê–ù–´!")
            
            # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            critical_components = [c for c in registered_components if c["is_critical"]]
            auxiliary_components = [c for c in registered_components if not c["is_critical"]]
            
            print(f"\nüìã –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print(f"  üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {len(critical_components)}")
            print(f"  üîß –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {len(auxiliary_components)}")
            
            # –ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            a_plus_components = [c for c in registered_components if c["quality_score"] == "A+"]
            print(f"  ‚≠ê –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å –∫–∞—á–µ—Å—Ç–≤–æ–º A+: {len(a_plus_components)}")
            
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞
            total_lines = sum(c["lines_of_code"] for c in registered_components)
            print(f"  üìù –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞: {total_lines:,}")
            
            # –°—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            active_components = [c for c in registered_components if c["status"] == "active"]
            print(f"  üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {len(active_components)}")
            
        else:
            print(f"\n‚ùå –û–®–ò–ë–ö–ê: {len(missing_components)} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            for missing in missing_components:
                print(f"  - {missing}")
        
        return success
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return False

def test_component_details():
    """–¢–µ—Å—Ç –¥–µ—Ç–∞–ª–µ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    print("\nüîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
    
    registry_path = "data/sfm/function_registry.json"
    
    try:
        with open(registry_path, 'r', encoding='utf-8') as f:
            registry = json.load(f)
        
        components = registry.get("functions", {})
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        categories = {}
        for component_id, component in components.items():
            if component_id.startswith(("external_", "threat_", "automated_", "enhanced_", "audit_", "compliance_")):
                category = component.get("category", "unknown")
                if category not in categories:
                    categories[category] = []
                categories[category].append(component_id)
        
        print(f"\nüìÅ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
        for category, component_list in categories.items():
            print(f"  {category}: {len(component_list)} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
            for comp_id in component_list:
                comp = components[comp_id]
                print(f"    - {comp_id}: {comp.get('name', 'Unknown')} ({comp.get('status', 'unknown')})")
        
        # –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        all_dependencies = set()
        for component_id, component in components.items():
            if component_id.startswith(("external_", "threat_", "automated_", "enhanced_", "audit_", "compliance_")):
                deps = component.get("dependencies", [])
                all_dependencies.update(deps)
        
        print(f"\nüîó –û–±—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ ({len(all_dependencies)}):")
        for dep in sorted(all_dependencies):
            print(f"  - {dep}")
        
        # –ê–Ω–∞–ª–∏–∑ —Ñ—É–Ω–∫—Ü–∏–π
        all_features = set()
        for component_id, component in components.items():
            if component_id.startswith(("external_", "threat_", "automated_", "enhanced_", "audit_", "compliance_")):
                features = component.get("features", [])
                all_features.update(features)
        
        print(f"\n‚ö° –û–±—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ ({len(all_features)}):")
        for feature in sorted(all_features):
            print(f"  - {feature}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò –ö–û–ú–ü–û–ù–ï–ù–¢–û–í –í SFM")
    print("=" * 60)
    
    # –¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    registration_success = test_sfm_registration()
    
    # –¢–µ—Å—Ç –¥–µ—Ç–∞–ª–µ–π
    details_success = test_component_details()
    
    print("\n" + "=" * 60)
    
    if registration_success and details_success:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –í—Å–µ 8 –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ SFM")
        print("‚úÖ –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω")
        print("üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
    else:
        print("‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–®–õ–ò!")
        if not registration_success:
            print("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
        if not details_success:
            print("‚ùå –û—à–∏–±–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
    
    return registration_success and details_success

if __name__ == "__main__":
    main()