#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –û–î–ù–û–ô —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import json
from datetime import datetime

def fix_one_function():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    registry_path = "/Users/sergejhlystov/ALADDIN_NEW/data/sfm/function_registry.json"
    
    print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –û–î–ù–û–ô –§–£–ù–ö–¶–ò–ò –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    backup_path = f"/Users/sergejhlystov/ALADDIN_NEW/data/sfm/function_registry_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–µ—Å—Ç—Ä
        with open(registry_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        with open(backup_path, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        
        print(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_path}")
        
        functions = data.get('functions', {})
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—É—é –Ω–µ–≤–∞–ª–∏–¥–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        invalid_func_id = None
        for func_id, func_data in functions.items():
            if not isinstance(func_data, dict) or 'function_id' not in func_data:
                invalid_func_id = func_id
                break
        
        if not invalid_func_id:
            print("‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return False
        
        print(f"üîç –ù–∞–π–¥–µ–Ω–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: {invalid_func_id}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        func_data = functions[invalid_func_id]
        print(f"\nüìã –¢–ï–ö–£–©–ê–Ø –°–¢–†–£–ö–¢–£–†–ê:")
        print(f"–ö–ª—é—á–∏: {list(func_data.keys())}")
        print(f"–ù–µ—Ç –ø–æ–ª—è: function_id")
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
        fixed_function = {
            "function_id": invalid_func_id,
            "name": func_data.get("name", invalid_func_id.replace("_", " ").title()),
            "description": func_data.get("description", f"Enhanced version of {invalid_func_id}"),
            "function_type": func_data.get("category", "enhanced"),
            "security_level": "medium",
            "status": func_data.get("status", "sleeping"),
            "created_at": func_data.get("created_at", datetime.now().isoformat()),
            "is_critical": False,
            "auto_enable": False,
            "wake_time": "00:00",
            "emergency_wake_up": False,
            "file_path": func_data.get("file_path", ""),
            "lines_of_code": 0,
            "file_size_bytes": 0,
            "file_size_kb": 0.0,
            "flake8_errors": 0,
            "quality_score": "A+",
            "last_updated": func_data.get("last_modified", datetime.now().isoformat()),
            "category": func_data.get("category", "enhanced"),
            "dependencies": func_data.get("dependencies", []),
            "features": func_data.get("tags", []),
            "class_name": func_data.get("name", invalid_func_id.replace("_", "")),
            "version": func_data.get("version", "1.0")
        }
        
        # –ó–∞–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
        functions[invalid_func_id] = fixed_function
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ä–µ–µ—Å—Ç—Ä
        with open(registry_path, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        
        print(f"‚úÖ –§—É–Ω–∫—Ü–∏—è {invalid_func_id} –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞!")
        print(f"‚úÖ –†–µ–µ—Å—Ç—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {registry_path}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print(f"\nüîç –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–ê:")
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        valid_count = 0
        invalid_count = 0
        
        for func_id, func_data in functions.items():
            if isinstance(func_data, dict) and 'function_id' in func_data:
                valid_count += 1
            else:
                invalid_count += 1
        
        print(f"–í–∞–ª–∏–¥–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π: {valid_count}")
        print(f"–ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π: {invalid_count}")
        print(f"–í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π: {len(functions)}")
        
        if invalid_count < 32:
            print(f"üéâ –£–°–ü–ï–•! –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π —É–º–µ–Ω—å—à–∏–ª–æ—Å—å —Å 32 –¥–æ {invalid_count}")
        else:
            print(f"‚ö†Ô∏è  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å: {invalid_count}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

if __name__ == "__main__":
    fix_one_function()