#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ SecurityMonitoringManager
"""

import sys
import os
import asyncio
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from security.security_monitoring_a_plus import (
    MonitoringLevel,
    AlertType,
    SecurityEvent,
    MonitoringConfig,
    ThreatDetectionStrategy,
    AnomalyDetectionStrategy,
    MonitoringDataManager,
    AlertManager,
    SecurityMonitoringManager
)


async def test_comprehensive_functionality():
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    print("üöÄ –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –¢–ï–°–¢ –í–°–ï–• –ö–û–ú–ü–û–ù–ï–ù–¢–û–í")
    print("=" * 60)
    
    try:
        # 1. –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        print("1. –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        config = MonitoringConfig(
            enabled=True,
            alert_threshold=3,
            check_interval=10,
            retention_days=7,
            log_level="INFO"
        )
        print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: threshold={config.alert_threshold}")
        
        # 2. –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
        print("2. –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π...")
        events = []
        for i in range(5):
            event = SecurityEvent(
                event_id=f"test_event_{i:03d}",
                timestamp=datetime.now(),
                level=MonitoringLevel.MEDIUM,
                alert_type=AlertType.THREAT_DETECTED,
                description=f"Test event {i}",
                source="test_system"
            )
            events.append(event)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ —Å–æ–±—ã—Ç–∏–π: {len(events)}")
        
        # 3. –¢–µ—Å—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        print("3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π...")
        threat_strategy = ThreatDetectionStrategy(config)
        anomaly_strategy = AnomalyDetectionStrategy(config)
        
        # –¢–µ—Å—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
        threat_events = await threat_strategy.check_security()
        anomaly_events = await anomaly_strategy.check_security()
        
        print(f"‚úÖ ThreatDetectionStrategy: {threat_strategy.get_strategy_name()}")
        print(f"‚úÖ AnomalyDetectionStrategy: {anomaly_strategy.get_strategy_name()}")
        print(f"‚úÖ –°–æ–±—ã—Ç–∏—è –æ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {len(threat_events + anomaly_events)}")
        
        # 4. –¢–µ—Å—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö
        print("4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö...")
        data_manager = MonitoringDataManager(config)
        alert_manager = AlertManager(config)
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
        for event in events:
            data_manager.add_event(event)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
        all_events = data_manager.get_events()
        critical_events = data_manager.get_events_by_level(MonitoringLevel.CRITICAL)
        
        print(f"‚úÖ MonitoringDataManager: {len(all_events)} —Å–æ–±—ã—Ç–∏–π")
        print(f"‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π: {len(critical_events)}")
        
        # 5. –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤
        print("5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤...")
        await alert_manager.process_events(events)
        print(f"‚úÖ AlertManager: {alert_manager.alert_count} –∞–ª–µ—Ä—Ç–æ–≤")
        
        # 6. –¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        print("6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SecurityMonitoringManager...")
        main_manager = SecurityMonitoringManager(
            name="ComprehensiveTestManager",
            config=config
        )
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        main_manager.add_monitoring_strategy(threat_strategy)
        main_manager.add_monitoring_strategy(anomaly_strategy)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        status = main_manager.get_security_status()
        
        print(f"‚úÖ SecurityMonitoringManager: {main_manager.name}")
        print(f"‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏–π: {len(main_manager.strategies)}")
        print(f"‚úÖ –°—Ç–∞—Ç—É—Å: {len(status)} –ø–æ–ª–µ–π")
        
        # 7. –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        print("7. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        new_config = MonitoringConfig(
            enabled=True,
            alert_threshold=10,
            check_interval=60,
            retention_days=14,
            log_level="DEBUG"
        )
        main_manager.update_config(new_config)
        
        assert main_manager.config.alert_threshold == 10
        print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: threshold={main_manager.config.alert_threshold}")
        
        # 8. –¢–µ—Å—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        print("8. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
        main_manager.stop_monitoring()
        assert not main_manager.config.enabled
        print("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        # 9. –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("\n9. –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞...")
        final_status = main_manager.get_security_status()
        
        print(f"üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   - –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {final_status['total_events']}")
        print(f"   - –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π: {final_status['critical_events']}")
        print(f"   - –í—ã—Å–æ–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π: {final_status['high_events']}")
        print(f"   - –ê–ª–µ—Ä—Ç–æ–≤: {final_status['alert_count']}")
        print(f"   - –°—Ç—Ä–∞—Ç–µ–≥–∏–π: {final_status['strategies_count']}")
        print(f"   - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤–∫–ª—é—á–µ–Ω: {final_status['monitoring_enabled']}")
        
        print("\n" + "=" * 60)
        print("üéâ –í–°–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´ –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
        print("‚úÖ SecurityMonitoringManager –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –í –ö–û–ú–ü–õ–ï–ö–°–ù–û–ú –¢–ï–°–¢–ï: {e}")
        import traceback
        traceback.print_exc()
        return False


if __name__ == "__main__":
    success = asyncio.run(test_comprehensive_functionality())
    sys.exit(0 if success else 1)