config/replacement_components_config.py:8:18: W291 trailing whitespace
# Discord Bot API  
                 ^
config/safe_config.py:213:80: E501 line too long (81 > 79 characters)
            return False, f"Операция '{operation}' запрещена в безопасном режиме"
                                                                               ^
config/safe_config.py:217:80: E501 line too long (94 > 79 characters)
            return False, f"Операция '{operation}' не разрешена в текущем режиме безопасности"
                                                                               ^
core/singleton.py:8:1: F401 'typing.Optional' imported but unused
from typing import Any, Dict, Optional
^
core/singleton.py:15:1: W293 blank line contains whitespace
    
^
core/singleton.py:18:1: W293 blank line contains whitespace
    
^
core/singleton.py:25:1: W293 blank line contains whitespace
    
^
core/singleton.py:37:1: W293 blank line contains whitespace
    
^
core/singleton.py:41:1: W293 blank line contains whitespace
    
^
core/singleton.py:49:80: E501 line too long (90 > 79 characters)
                        cls._instances[cls] = super(ThreadSafeSingleton, cls).__new__(cls)
                                                                               ^
core/singleton.py:51:1: W293 blank line contains whitespace
    
^
core/singleton.py:63:1: W293 blank line contains whitespace
    """
    Decorator for creating singleton classes
    
    Usage:
        @get_singleton
        class MyClass:
            pass
    """
^
core/singleton.py:71:1: W293 blank line contains whitespace
    
^
core/singleton.py:78:1: W293 blank line contains whitespace
    
^
core/singleton.py:86:1: W293 blank line contains whitespace
    
^
core/singleton.py:89:1: W293 blank line contains whitespace
    
^
core/singleton.py:94:80: E501 line too long (93 > 79 characters)
                    cls._instances[cls] = super(SingletonMeta, cls).__call__(*args, **kwargs)
                                                                               ^
core/singleton.py:104:1: W293 blank line contains whitespace
    
^
core/singleton.py:108:1: W293 blank line contains whitespace
    
^
core/singleton.py:113:1: W293 blank line contains whitespace
    
^
core/singleton.py:117:1: W293 blank line contains whitespace
    
^
core/singleton.py:118:65: W292 no newline at end of file
    print("Singleton pattern implementation working correctly!")                                                                ^
security/access_control.py:72:80: E501 line too long (80 > 79 characters)
    def __init__(self, user_id: str, username: str, email: str, role: UserRole):
                                                                               ^
security/access_control.py:114:80: E501 line too long (83 > 79 characters)
            "last_login": self.last_login.isoformat() if self.last_login else None,
                                                                               ^
security/access_control.py:117:80: E501 line too long (91 > 79 characters)
            "locked_until": (self.locked_until.isoformat() if self.locked_until else None),
                                                                               ^
security/access_control.py:127:80: E501 line too long (93 > 79 characters)
    def __init__(self, name: str = "AccessControl", config: Optional[Dict[str, Any]] = None):
                                                                               ^
security/access_control.py:131:80: E501 line too long (88 > 79 characters)
        self.max_failed_attempts = config.get("max_failed_attempts", 5) if config else 5
                                                                               ^
security/access_control.py:132:80: E501 line too long (100 > 79 characters)
        self.lockout_duration = config.get("lockout_duration", 1800) if config else 1800  # 30 минут
                                                                               ^
security/access_control.py:133:80: E501 line too long (95 > 79 characters)
        self.session_timeout = config.get("session_timeout", 3600) if config else 3600  # 1 час
                                                                               ^
security/access_control.py:134:80: E501 line too long (94 > 79 characters)
        self.enable_ip_whitelist = config.get("enable_ip_whitelist", True) if config else True
                                                                               ^
security/access_control.py:156:80: E501 line too long (84 > 79 characters)
            self.log_activity(f"Инициализация системы контроля доступа {self.name}")
                                                                               ^
security/access_control.py:170:80: E501 line too long (95 > 79 characters)
            self.log_activity(f"Система контроля доступа {self.name} успешно инициализирована")
                                                                               ^
security/access_control.py:174:80: E501 line too long (93 > 79 characters)
            self.log_activity(f"Ошибка инициализации системы контроля доступа: {e}", "error")
                                                                               ^
security/access_control.py:328:80: E501 line too long (81 > 79 characters)
                    if user.ip_whitelist and ip_address not in user.ip_whitelist:
                                                                               ^
security/access_control.py:339:80: E501 line too long (101 > 79 characters)
                        user.locked_until = datetime.now() + timedelta(seconds=self.lockout_duration)
                                                                               ^
security/access_control.py:342:80: E501 line too long (106 > 79 characters)
                            f"Пользователь {username} заблокирован из-за превышения лимита попыток входа",
                                                                               ^
security/access_control.py:347:80: E501 line too long (94 > 79 characters)
                            "Пользователь заблокирован из-за превышения лимита попыток входа",
                                                                               ^
security/access_control.py:360:80: E501 line too long (85 > 79 characters)
                self.log_activity(f"Успешная аутентификация пользователя {username}")
                                                                               ^
security/access_control.py:364:80: E501 line too long (93 > 79 characters)
            self.log_activity(f"Ошибка аутентификации пользователя {username}: {e}", "error")
                                                                               ^
security/access_control.py:371:26: F821 undefined name 'os'
        admin_password = os.getenv('ADMIN_DEFAULT_PASSWORD', 'CHANGE_IN_PRODUCTION')
                         ^
security/access_control.py:371:80: E501 line too long (84 > 79 characters)
        admin_password = os.getenv('ADMIN_DEFAULT_PASSWORD', 'CHANGE_IN_PRODUCTION')
                                                                               ^
security/access_control.py:372:28: F821 undefined name 'os'
        analyst_password = os.getenv('ANALYST_DEFAULT_PASSWORD', 'CHANGE_IN_PRODUCTION')
                           ^
security/access_control.py:372:80: E501 line too long (88 > 79 characters)
        analyst_password = os.getenv('ANALYST_DEFAULT_PASSWORD', 'CHANGE_IN_PRODUCTION')
                                                                               ^
security/access_control.py:373:28: F821 undefined name 'os'
        monitor_password = os.getenv('MONITOR_DEFAULT_PASSWORD', 'CHANGE_IN_PRODUCTION')
                           ^
security/access_control.py:373:80: E501 line too long (88 > 79 characters)
        monitor_password = os.getenv('MONITOR_DEFAULT_PASSWORD', 'CHANGE_IN_PRODUCTION')
                                                                               ^
security/access_control.py:374:1: W293 blank line contains whitespace
        
^
security/access_control.py:377:80: E501 line too long (81 > 79 characters)
        elif user.user_id == "security_analyst" and password == analyst_password:
                                                                               ^
security/access_control.py:383:80: E501 line too long (82 > 79 characters)
    def create_session(self, user: User, ip_address: Optional[str] = None) -> str:
                                                                               ^
security/access_control.py:414:80: E501 line too long (94 > 79 characters)
            self.log_activity(f"Создана сессия {session_id} для пользователя {user.username}")
                                                                               ^
security/access_control.py:418:80: E501 line too long (103 > 79 characters)
            self.log_activity(f"Ошибка создания сессии для пользователя {user.username}: {e}", "error")
                                                                               ^
security/access_control.py:427:80: E501 line too long (89 > 79 characters)
    def validate_session(self, session_id: str) -> Tuple[bool, Optional[Dict[str, Any]]]:
                                                                               ^
security/access_control.py:449:80: E501 line too long (88 > 79 characters)
            if datetime.now() - last_activity > timedelta(seconds=self.session_timeout):
                                                                               ^
security/access_control.py:459:80: E501 line too long (84 > 79 characters)
            self.log_activity(f"Ошибка валидации сессии {session_id}: {e}", "error")
                                                                               ^
security/access_control.py:462:80: E501 line too long (80 > 79 characters)
    def check_permission(self, session_id: str, permission: Permission) -> bool:
                                                                               ^
security/access_control.py:482:80: E501 line too long (98 > 79 characters)
            self.log_activity(f"Ошибка проверки разрешения для сессии {session_id}: {e}", "error")
                                                                               ^
security/access_control.py:531:80: E501 line too long (91 > 79 characters)
    def create_user(self, user_id: str, username: str, email: str, role: UserRole) -> bool:
                                                                               ^
security/access_control.py:556:80: E501 line too long (85 > 79 characters)
            self.log_activity(f"Создан пользователь {username} с ролью {role.value}")
                                                                               ^
security/access_control.py:560:80: E501 line too long (87 > 79 characters)
            self.log_activity(f"Ошибка создания пользователя {username}: {e}", "error")
                                                                               ^
security/access_control.py:580:80: E501 line too long (114 > 79 characters)
                (self.successful_logins / self.total_login_attempts * 100) if self.total_login_attempts > 0 else 0
                                                                               ^
security/access_control_manager.py:12:1: F401 'typing.Tuple' imported but unused
from typing import Dict, List, Any, Optional, Set, Tuple
^
security/access_control_manager.py:51:1: W293 blank line contains whitespace
    
^
security/access_control_manager.py:52:80: E501 line too long (100 > 79 characters)
    def __init__(self, name: str = "AccessControlManager", config: Optional[Dict[str, Any]] = None):
                                                                               ^
security/access_control_manager.py:54:1: W293 blank line contains whitespace
        
^
security/access_control_manager.py:59:1: W293 blank line contains whitespace
        
^
security/access_control_manager.py:63:1: W293 blank line contains whitespace
        
^
security/access_control_manager.py:65:80: E501 line too long (88 > 79 characters)
        self.max_failed_attempts = config.get("max_failed_attempts", 5) if config else 5
                                                                               ^
security/access_control_manager.py:66:80: E501 line too long (88 > 79 characters)
        self.lockout_duration = config.get("lockout_duration", 1800) if config else 1800
                                                                               ^
security/access_control_manager.py:67:80: E501 line too long (86 > 79 characters)
        self.session_timeout = config.get("session_timeout", 3600) if config else 3600
                                                                               ^
security/access_control_manager.py:68:1: W293 blank line contains whitespace
        
^
security/access_control_manager.py:74:1: W293 blank line contains whitespace
        
^
security/access_control_manager.py:77:1: W293 blank line contains whitespace
        
^
security/access_control_manager.py:81:80: E501 line too long (80 > 79 characters)
            self.log_activity(f"Инициализация AccessControlManager {self.name}")
                                                                               ^
security/access_control_manager.py:83:1: W293 blank line contains whitespace
            
^
security/access_control_manager.py:86:1: W293 blank line contains whitespace
            
^
security/access_control_manager.py:89:1: W293 blank line contains whitespace
            
^
security/access_control_manager.py:92:80: E501 line too long (90 > 79 characters)
            self.log_activity(f"AccessControlManager {self.name} успешно инициализирован")
                                                                               ^
security/access_control_manager.py:94:1: W293 blank line contains whitespace
            
^
security/access_control_manager.py:96:80: E501 line too long (89 > 79 characters)
            self.log_activity(f"Ошибка инициализации AccessControlManager: {e}", "error")
                                                                               ^
security/access_control_manager.py:99:1: W293 blank line contains whitespace
    
^
security/access_control_manager.py:104:80: E501 line too long (84 > 79 characters)
                Permission.READ_DATA, Permission.WRITE_DATA, Permission.DELETE_DATA,
                                                                               ^
security/access_control_manager.py:105:80: E501 line too long (95 > 79 characters)
                Permission.EXECUTE_FUNCTIONS, Permission.MANAGE_USERS, Permission.MANAGE_ROLES,
                                                                               ^
security/access_control_manager.py:106:80: E501 line too long (81 > 79 characters)
                Permission.VIEW_SECURITY_EVENTS, Permission.MANAGE_SECURITY_RULES
                                                                               ^
security/access_control_manager.py:113:80: E501 line too long (89 > 79 characters)
                Permission.READ_DATA, Permission.WRITE_DATA, Permission.EXECUTE_FUNCTIONS
                                                                               ^
security/access_control_manager.py:123:1: W293 blank line contains whitespace
    
^
security/access_control_manager.py:140:1: W293 blank line contains whitespace
    
^
security/access_control_manager.py:144:1: W293 blank line contains whitespace
    
^
security/access_control_manager.py:150:80: E501 line too long (107 > 79 characters)
                    self.log_activity(f"Попытка входа несуществующего пользователя: {username}", "warning")
                                                                               ^
security/access_control_manager.py:152:1: W293 blank line contains whitespace
                
^
security/access_control_manager.py:154:1: W293 blank line contains whitespace
                
^
security/access_control_manager.py:156:80: E501 line too long (86 > 79 characters)
                if user.get("locked_until") and datetime.now() < user["locked_until"]:
                                                                               ^
security/access_control_manager.py:157:80: E501 line too long (89 > 79 characters)
                    self.log_activity(f"Пользователь {username} заблокирован", "warning")
                                                                               ^
security/access_control_manager.py:159:1: W293 blank line contains whitespace
                
^
security/access_control_manager.py:164:1: W293 blank line contains whitespace
                    
^
security/access_control_manager.py:166:80: E501 line too long (104 > 79 characters)
                        user["locked_until"] = datetime.now() + timedelta(seconds=self.lockout_duration)
                                                                               ^
security/access_control_manager.py:167:80: E501 line too long (117 > 79 characters)
                        self.log_activity(f"Пользователь {username} заблокирован из-за неудачных попыток", "warning")
                                                                               ^
security/access_control_manager.py:168:1: W293 blank line contains whitespace
                    
^
security/access_control_manager.py:170:1: W293 blank line contains whitespace
                
^
security/access_control_manager.py:175:1: W293 blank line contains whitespace
                
^
security/access_control_manager.py:182:80: E501 line too long (87 > 79 characters)
                    "ip_address": "127.0.0.1"  # В реальной системе получать из запроса
                                                                               ^
security/access_control_manager.py:184:1: W293 blank line contains whitespace
                
^
security/access_control_manager.py:188:1: W293 blank line contains whitespace
                
^
security/access_control_manager.py:189:80: E501 line too long (86 > 79 characters)
                self.log_activity(f"Успешная аутентификация пользователя: {username}")
                                                                               ^
security/access_control_manager.py:191:1: W293 blank line contains whitespace
                
^
security/access_control_manager.py:195:1: W293 blank line contains whitespace
    
^
security/access_control_manager.py:196:80: E501 line too long (80 > 79 characters)
    def check_permission(self, session_id: str, permission: Permission) -> bool:
                                                                               ^
security/access_control_manager.py:202:1: W293 blank line contains whitespace
                
^
security/access_control_manager.py:205:1: W293 blank line contains whitespace
                
^
security/access_control_manager.py:207:80: E501 line too long (103 > 79 characters)
                if datetime.now() - session["last_activity"] > timedelta(seconds=self.session_timeout):
                                                                               ^
security/access_control_manager.py:211:1: W293 blank line contains whitespace
                
^
security/access_control_manager.py:214:1: W293 blank line contains whitespace
                
^
security/access_control_manager.py:218:1: W293 blank line contains whitespace
                
^
security/access_control_manager.py:223:1: W293 blank line contains whitespace
                
^
security/access_control_manager.py:225:1: W293 blank line contains whitespace
                
^
security/access_control_manager.py:229:1: W293 blank line contains whitespace
    
^
security/access_control_manager.py:236:1: W293 blank line contains whitespace
                
^
security/access_control_manager.py:240:1: W293 blank line contains whitespace
                
^
security/access_control_manager.py:244:1: W293 blank line contains whitespace
                
^
security/access_control_manager.py:246:1: W293 blank line contains whitespace
                
^
security/access_control_manager.py:250:1: W293 blank line contains whitespace
    
^
security/access_control_manager.py:259:80: E501 line too long (81 > 79 characters)
                    self.log_activity(f"Пользователь {user_id} вышел из системы")
                                                                               ^
security/access_control_manager.py:262:1: W293 blank line contains whitespace
                
^
security/access_control_manager.py:266:1: W293 blank line contains whitespace
    
^
security/access_control_manager.py:275:80: E501 line too long (87 > 79 characters)
            "success_rate": (self.allowed_requests / max(self.total_requests, 1)) * 100
                                                                               ^
security/access_control_manager.py:277:1: W293 blank line contains whitespace
    
^
security/access_control_manager.py:286:80: E501 line too long (85 > 79 characters)
            self.log_activity(f"Ошибка остановки AccessControlManager: {e}", "error")
                                                                               ^
security/access_control_manager.py:293:1: W293 blank line contains whitespace
    
^
security/access_control_manager.py:297:1: W293 blank line contains whitespace
        
^
security/access_control_manager.py:302:1: W293 blank line contains whitespace
            
^
security/access_control_manager.py:304:80: E501 line too long (81 > 79 characters)
            can_read = manager.check_permission(session_id, Permission.READ_DATA)
                                                                               ^
security/access_control_manager.py:305:80: E501 line too long (83 > 79 characters)
            can_write = manager.check_permission(session_id, Permission.WRITE_DATA)
                                                                               ^
security/access_control_manager.py:307:1: W293 blank line contains whitespace
            
^
security/access_control_manager.py:311:1: W293 blank line contains whitespace
        
^
security/active/device_security.py:134:80: E501 line too long (94 > 79 characters)
    def __init__(self, name: str = "DeviceSecurity", config: Optional[Dict[str, Any]] = None):
                                                                               ^
security/active/device_security.py:143:80: E501 line too long (86 > 79 characters)
        self.family_device_history: Dict[str, List[str]] = {}  # user_id -> device_ids
                                                                               ^
security/active/device_security.py:169:80: E501 line too long (91 > 79 characters)
                description="Регулярное сканирование устройств на наличие вредоносного ПО",
                                                                               ^
security/active/device_security.py:178:80: E501 line too long (81 > 79 characters)
                description="Автоматическое обновление программного обеспечения",
                                                                               ^
security/active/device_security.py:189:80: E501 line too long (81 > 79 characters)
                conditions={"age_group": "child", "inappropriate_content": True},
                                                                               ^
security/active/device_security.py:190:80: E501 line too long (104 > 79 characters)
                actions=[SecurityAction.BLOCK, SecurityAction.NOTIFY_PARENT, SecurityAction.QUARANTINE],
                                                                               ^
security/active/device_security.py:199:80: E501 line too long (81 > 79 characters)
                conditions={"age_group": "elderly", "suspicious_activity": True},
                                                                               ^
security/active/device_security.py:200:80: E501 line too long (100 > 79 characters)
                actions=[SecurityAction.ALERT, SecurityAction.NOTIFY_ADMIN, SecurityAction.ISOLATE],
                                                                               ^
security/active/device_security.py:209:80: E501 line too long (89 > 79 characters)
                conditions={"default_password": True, "unencrypted_communication": True},
                                                                               ^
security/active/device_security.py:210:80: E501 line too long (93 > 79 characters)
                actions=[SecurityAction.PATCH, SecurityAction.ALERT, SecurityAction.ISOLATE],
                                                                               ^
security/active/device_security.py:216:80: E501 line too long (85 > 79 characters)
                description="Контроль безопасности роутеров и сетевого оборудования",
                                                                               ^
security/active/device_security.py:218:80: E501 line too long (80 > 79 characters)
                conditions={"firmware_outdated": True, "weak_encryption": True},
                                                                               ^
security/active/device_security.py:219:80: E501 line too long (92 > 79 characters)
                actions=[SecurityAction.UPDATE, SecurityAction.ALERT, SecurityAction.PATCH],
                                                                               ^
security/active/device_security.py:228:80: E501 line too long (104 > 79 characters)
                actions=[SecurityAction.ALERT, SecurityAction.QUARANTINE, SecurityAction.NOTIFY_PARENT],
                                                                               ^
security/active/device_security.py:237:80: E501 line too long (93 > 79 characters)
                actions=[SecurityAction.PATCH, SecurityAction.ALERT, SecurityAction.ISOLATE],
                                                                               ^
security/active/device_security.py:243:80: E501 line too long (89 > 79 characters)
        self.log_activity(f"Инициализировано {len(rules)} правил безопасности устройств")
                                                                               ^
security/active/device_security.py:295:80: E501 line too long (95 > 79 characters)
            self.log_activity(f"Обнаружено системное устройство: {device_profile.device_name}")
                                                                               ^
security/active/device_security.py:391:80: E501 line too long (80 > 79 characters)
                description=f"Зарегистрировано новое устройство: {device_name}",
                                                                               ^
security/active/device_security.py:416:80: E501 line too long (90 > 79 characters)
            device_profile.vulnerabilities = [v.vulnerability_id for v in vulnerabilities]
                                                                               ^
security/active/device_security.py:418:80: E501 line too long (107 > 79 characters)
            device_profile.security_score = self._calculate_security_score(device_profile, vulnerabilities)
                                                                               ^
security/active/device_security.py:425:80: E501 line too long (113 > 79 characters)
                vulnerabilities_critical=len([v for v in vulnerabilities if v.severity == ThreatLevel.CRITICAL]),
                                                                               ^
security/active/device_security.py:426:80: E501 line too long (105 > 79 characters)
                vulnerabilities_high=len([v for v in vulnerabilities if v.severity == ThreatLevel.HIGH]),
                                                                               ^
security/active/device_security.py:427:80: E501 line too long (109 > 79 characters)
                vulnerabilities_medium=len([v for v in vulnerabilities if v.severity == ThreatLevel.MEDIUM]),
                                                                               ^
security/active/device_security.py:428:80: E501 line too long (103 > 79 characters)
                vulnerabilities_low=len([v for v in vulnerabilities if v.severity == ThreatLevel.LOW]),
                                                                               ^
security/active/device_security.py:429:80: E501 line too long (96 > 79 characters)
                recommendations=self._generate_recommendations(device_profile, vulnerabilities),
                                                                               ^
security/active/device_security.py:430:80: E501 line too long (80 > 79 characters)
                compliance_status=self._check_compliance_status(device_profile),
                                                                               ^
security/active/device_security.py:431:80: E501 line too long (91 > 79 characters)
                family_protection_status=self._get_family_protection_status(device_profile)
                                                                               ^
security/active/device_security.py:437:80: E501 line too long (108 > 79 characters)
                description=f"Завершено сканирование безопасности устройства: {device_profile.device_name}",
                                                                               ^
security/active/device_security.py:443:80: E501 line too long (80 > 79 characters)
                    "vulnerabilities_critical": report.vulnerabilities_critical,
                                                                               ^
security/active/device_security.py:449:80: E501 line too long (82 > 79 characters)
            self.logger.error(f"Ошибка сканирования безопасности устройства: {e}")
                                                                               ^
security/active/device_security.py:452:80: E501 line too long (99 > 79 characters)
    def _perform_security_scan(self, device_profile: DeviceProfile) -> List[SecurityVulnerability]:
                                                                               ^
security/active/device_security.py:457:80: E501 line too long (88 > 79 characters)
            vulnerabilities.extend(self._check_software_vulnerabilities(device_profile))
                                                                               ^
security/active/device_security.py:458:80: E501 line too long (87 > 79 characters)
            vulnerabilities.extend(self._check_network_vulnerabilities(device_profile))
                                                                               ^
security/active/device_security.py:459:80: E501 line too long (93 > 79 characters)
            vulnerabilities.extend(self._check_configuration_vulnerabilities(device_profile))
                                                                               ^
security/active/device_security.py:460:80: E501 line too long (95 > 79 characters)
            vulnerabilities.extend(self._check_family_specific_vulnerabilities(device_profile))
                                                                               ^
security/active/device_security.py:463:80: E501 line too long (93 > 79 characters)
                self.security_vulnerabilities[vulnerability.vulnerability_id] = vulnerability
                                                                               ^
security/active/device_security.py:466:80: E501 line too long (82 > 79 characters)
            self.logger.error(f"Ошибка выполнения сканирования безопасности: {e}")
                                                                               ^
security/active/device_security.py:469:80: E501 line too long (108 > 79 characters)
    def _check_software_vulnerabilities(self, device_profile: DeviceProfile) -> List[SecurityVulnerability]:
                                                                               ^
security/active/device_security.py:481:80: E501 line too long (86 > 79 characters)
                        description=f"Устаревшее программное обеспечение: {software}",
                                                                               ^
security/active/device_security.py:493:80: E501 line too long (83 > 79 characters)
                    description="Отсутствует антивирусное программное обеспечение",
                                                                               ^
security/active/device_security.py:494:80: E501 line too long (81 > 79 characters)
                    remediation="Установить антивирусное программное обеспечение"
                                                                               ^
security/active/device_security.py:502:80: E501 line too long (107 > 79 characters)
    def _check_network_vulnerabilities(self, device_profile: DeviceProfile) -> List[SecurityVulnerability]:
                                                                               ^
security/active/device_security.py:514:80: E501 line too long (80 > 79 characters)
                        description=f"Открытые порты на интерфейсе {interface}",
                                                                               ^
security/active/device_security.py:523:80: E501 line too long (113 > 79 characters)
    def _check_configuration_vulnerabilities(self, device_profile: DeviceProfile) -> List[SecurityVulnerability]:
                                                                               ^
security/active/device_security.py:554:80: E501 line too long (115 > 79 characters)
    def _check_family_specific_vulnerabilities(self, device_profile: DeviceProfile) -> List[SecurityVulnerability]:
                                                                               ^
security/active/device_security.py:566:80: E501 line too long (91 > 79 characters)
                        description="Обнаружен неподходящий контент на детском устройстве",
                                                                               ^
security/active/device_security.py:567:80: E501 line too long (87 > 79 characters)
                        remediation="Удалить неподходящий контент и усилить фильтрацию"
                                                                               ^
security/active/device_security.py:578:80: E501 line too long (96 > 79 characters)
                        description="Подозрительная активность на устройстве пожилого человека",
                                                                               ^
security/active/device_security.py:598:80: E501 line too long (99 > 79 characters)
    def _evaluate_rule_conditions(self, device_profile: DeviceProfile, rule: SecurityRule) -> bool:
                                                                               ^
security/active/device_security.py:607:80: E501 line too long (87 > 79 characters)
                if rule.age_group == "child" and device_profile.family_role != "child":
                                                                               ^
security/active/device_security.py:609:80: E501 line too long (93 > 79 characters)
                elif rule.age_group == "elderly" and device_profile.family_role != "elderly":
                                                                               ^
security/active/device_security.py:615:80: E501 line too long (85 > 79 characters)
            if "updates_available" in conditions and conditions["updates_available"]:
                                                                               ^
security/active/device_security.py:618:80: E501 line too long (93 > 79 characters)
            if "inappropriate_content" in conditions and conditions["inappropriate_content"]:
                                                                               ^
security/active/device_security.py:621:80: E501 line too long (89 > 79 characters)
            if "suspicious_activity" in conditions and conditions["suspicious_activity"]:
                                                                               ^
security/active/device_security.py:624:80: E501 line too long (95 > 79 characters)
            if "critical_vulnerability" in conditions and conditions["critical_vulnerability"]:
                                                                               ^
security/active/device_security.py:631:80: E501 line too long (85 > 79 characters)
    def _apply_rule_actions(self, device_profile: DeviceProfile, rule: SecurityRule):
                                                                               ^
security/active/device_security.py:638:80: E501 line too long (93 > 79 characters)
                    self.log_activity(f"Обновление устройства: {device_profile.device_name}")
                                                                               ^
security/active/device_security.py:641:80: E501 line too long (102 > 79 characters)
                    self.log_activity(f"Устройство помещено в карантин: {device_profile.device_name}")
                                                                               ^
security/active/device_security.py:644:80: E501 line too long (96 > 79 characters)
                    self.log_activity(f"Устройство заблокировано: {device_profile.device_name}")
                                                                               ^
security/active/device_security.py:646:80: E501 line too long (104 > 79 characters)
                    self.log_activity(f"Алерт безопасности: {rule.name} - {device_profile.device_name}")
                                                                               ^
security/active/device_security.py:650:80: E501 line too long (81 > 79 characters)
                    self.log_activity(f"Уведомление администратору: {rule.name}")
                                                                               ^
security/active/device_security.py:652:80: E501 line too long (91 > 79 characters)
                    self.log_activity(f"Изоляция устройства: {device_profile.device_name}")
                                                                               ^
security/active/device_security.py:654:80: E501 line too long (87 > 79 characters)
                    self.log_activity(f"Установка патча: {device_profile.device_name}")
                                                                               ^
security/active/device_security.py:656:80: E501 line too long (88 > 79 characters)
                    self.log_activity(f"Сброс устройства: {device_profile.device_name}")
                                                                               ^
security/active/device_security.py:661:80: E501 line too long (89 > 79 characters)
                                  vulnerabilities: List[SecurityVulnerability]) -> float:
                                                                               ^
security/active/device_security.py:686:80: E501 line too long (93 > 79 characters)
                                  vulnerabilities: List[SecurityVulnerability]) -> List[str]:
                                                                               ^
security/active/device_security.py:723:80: E501 line too long (93 > 79 characters)
    def _get_family_protection_status(self, device_profile: DeviceProfile) -> Dict[str, Any]:
                                                                               ^
security/active/device_security.py:733:80: E501 line too long (103 > 79 characters)
                "last_scan": device_profile.last_scan.isoformat() if device_profile.last_scan else None
                                                                               ^
security/active/device_security.py:740:80: E501 line too long (91 > 79 characters)
    def get_device_security_summary(self, user_id: Optional[str] = None) -> Dict[str, Any]:
                                                                               ^
security/active/device_security.py:754:80: E501 line too long (111 > 79 characters)
                "secure_devices": len([d for d in user_devices if d.security_status == SecurityStatus.SECURE]),
                                                                               ^
security/active/device_security.py:755:80: E501 line too long (119 > 79 characters)
                "vulnerable_devices": len([d for d in user_devices if d.security_status == SecurityStatus.VULNERABLE]),
                                                                               ^
security/active/device_security.py:756:80: E501 line too long (113 > 79 characters)
                "quarantined_devices": len([d for d in user_devices if d.device_id in self.quarantined_devices]),
                                                                               ^
security/active/device_security.py:757:80: E501 line too long (105 > 79 characters)
                "blocked_devices": len([d for d in user_devices if d.device_id in self.blocked_devices]),
                                                                               ^
security/active/device_security.py:758:80: E501 line too long (129 > 79 characters)
                "average_security_score": sum(d.security_score for d in user_devices) / len(user_devices) if user_devices else 0,
                                                                               ^
security/active/device_security.py:760:80: E501 line too long (101 > 79 characters)
                    device_type.value: len([d for d in user_devices if d.device_type == device_type])
                                                                               ^
security/active/device_security.py:764:80: E501 line too long (95 > 79 characters)
                    status.value: len([d for d in user_devices if d.security_status == status])
                                                                               ^
security/active/device_security.py:772:80: E501 line too long (96 > 79 characters)
                        "last_scan": device.last_scan.isoformat() if device.last_scan else None,
                                                                               ^
security/active/device_security.py:775:80: E501 line too long (116 > 79 characters)
                    for device in sorted(user_devices, key=lambda x: x.last_scan or datetime.min, reverse=True)[:10]
                                                                               ^
security/active/device_security.py:780:80: E501 line too long (88 > 79 characters)
            self.logger.error(f"Ошибка получения сводки по безопасности устройств: {e}")
                                                                               ^
security/active/device_security.py:793:80: E501 line too long (92 > 79 characters)
                "active_rules": len([r for r in self.security_rules.values() if r.enabled]),
                                                                               ^
security/active/device_security.py:794:80: E501 line too long (109 > 79 characters)
                "family_specific_rules": len([r for r in self.security_rules.values() if r.family_specific]),
                                                                               ^
security/active/device_security.py:802:80: E501 line too long (81 > 79 characters)
                    for user_id, device_ids in self.family_device_history.items()
                                                                               ^
security/active/device_security.py:807:80: E501 line too long (82 > 79 characters)
            self.logger.error(f"Ошибка получения статуса семейных устройств: {e}")
                                                                               ^
security/active/device_security.py:848:80: E501 line too long (88 > 79 characters)
        return any(av in device_profile.installed_software for av in antivirus_software)
                                                                               ^
security/active/device_security.py:865:80: E501 line too long (80 > 79 characters)
    def _has_inappropriate_content(self, device_profile: DeviceProfile) -> bool:
                                                                               ^
security/active/device_security.py:880:80: E501 line too long (83 > 79 characters)
    def _has_critical_vulnerabilities(self, device_profile: DeviceProfile) -> bool:
                                                                               ^
security/active/incident_response.py:162:80: E501 line too long (96 > 79 characters)
    def __init__(self, name: str = "IncidentResponse", config: Optional[Dict[str, Any]] = None):
                                                                               ^
security/active/incident_response.py:170:80: E501 line too long (90 > 79 characters)
        self.family_incident_history: Dict[str, List[str]] = {}  # user_id -> incident_ids
                                                                               ^
security/active/incident_response.py:195:80: E501 line too long (89 > 79 characters)
                description="Автоматическое реагирование на обнаружение вредоносного ПО",
                                                                               ^
security/active/incident_response.py:199:80: E501 line too long (106 > 79 characters)
                actions=[ResponseAction.ISOLATE, ResponseAction.QUARANTINE, ResponseAction.NOTIFY_PARENT],
                                                                               ^
security/active/incident_response.py:205:80: E501 line too long (83 > 79 characters)
                description="Реагирование на попытки несанкционированного доступа",
                                                                               ^
security/active/incident_response.py:209:80: E501 line too long (104 > 79 characters)
                actions=[ResponseAction.BLOCK, ResponseAction.INVESTIGATE, ResponseAction.NOTIFY_ADMIN],
                                                                               ^
security/active/incident_response.py:219:80: E501 line too long (136 > 79 characters)
                actions=[ResponseAction.BLOCK, ResponseAction.ISOLATE, ResponseAction.NOTIFY_PARENT, ResponseAction.NOTIFY_AUTHORITIES],
                                                                               ^
security/active/incident_response.py:230:80: E501 line too long (100 > 79 characters)
                actions=[ResponseAction.BLOCK, ResponseAction.NOTIFY_ADMIN, ResponseAction.MONITOR],
                                                                               ^
security/active/incident_response.py:251:80: E501 line too long (137 > 79 characters)
                actions=[ResponseAction.CONTAIN, ResponseAction.INVESTIGATE, ResponseAction.NOTIFY_AUTHORITIES, ResponseAction.ESCALATE],
                                                                               ^
security/active/incident_response.py:261:80: E501 line too long (95 > 79 characters)
                actions=[ResponseAction.BLOCK, ResponseAction.ISOLATE, ResponseAction.MONITOR],
                                                                               ^
security/active/incident_response.py:271:80: E501 line too long (110 > 79 characters)
                actions=[ResponseAction.QUARANTINE, ResponseAction.INVESTIGATE, ResponseAction.NOTIFY_PARENT],
                                                                               ^
security/active/incident_response.py:277:80: E501 line too long (92 > 79 characters)
        self.log_activity(f"Инициализировано {len(rules)} правил реагирования на инциденты")
                                                                               ^
security/active/incident_response.py:311:80: E501 line too long (81 > 79 characters)
            self.log_activity("Запущен мониторинг инцидентов в реальном времени")
                                                                               ^
security/active/incident_response.py:315:80: E501 line too long (86 > 79 characters)
    def create_incident(self, incident_type: IncidentType, severity: IncidentSeverity,
                                                                               ^
security/active/incident_response.py:317:80: E501 line too long (84 > 79 characters)
                        affected_entities: List[str], user_id: Optional[str] = None,
                                                                               ^
security/active/incident_response.py:319:80: E501 line too long (82 > 79 characters)
                        evidence: Optional[List[str]] = None) -> SecurityIncident:
                                                                               ^
security/active/incident_response.py:382:80: E501 line too long (87 > 79 characters)
    def _find_applicable_rules(self, incident: SecurityIncident) -> List[ResponseRule]:
                                                                               ^
security/active/incident_response.py:392:80: E501 line too long (86 > 79 characters)
            if self._compare_severity(incident.severity, rule.severity_threshold) < 0:
                                                                               ^
security/active/incident_response.py:396:80: E501 line too long (81 > 79 characters)
                if rule.age_group == "child" and incident.family_role != "child":
                                                                               ^
security/active/incident_response.py:398:80: E501 line too long (87 > 79 characters)
                elif rule.age_group == "elderly" and incident.family_role != "elderly":
                                                                               ^
security/active/incident_response.py:403:80: E501 line too long (96 > 79 characters)
    def _evaluate_rule_conditions(self, incident: SecurityIncident, rule: ResponseRule) -> bool:
                                                                               ^
security/active/incident_response.py:414:80: E501 line too long (84 > 79 characters)
                    return incident.incident_type == IncidentType.CHILD_EXPLOITATION
                                                                               ^
security/active/incident_response.py:422:80: E501 line too long (80 > 79 characters)
                    return incident.incident_type == IncidentType.NETWORK_ATTACK
                                                                               ^
security/active/incident_response.py:424:80: E501 line too long (83 > 79 characters)
                    return incident.incident_type == IncidentType.DEVICE_COMPROMISE
                                                                               ^
security/active/incident_response.py:430:80: E501 line too long (88 > 79 characters)
    def _execute_response_actions(self, incident: SecurityIncident, rule: ResponseRule):
                                                                               ^
security/active/incident_response.py:434:80: E501 line too long (80 > 79 characters)
                response = self._execute_response_action(incident, action, rule)
                                                                               ^
security/active/incident_response.py:440:80: E501 line too long (90 > 79 characters)
    def _execute_response_action(self, incident: SecurityIncident, action: ResponseAction,
                                                                               ^
security/active/incident_response.py:441:80: E501 line too long (83 > 79 characters)
                                 rule: ResponseRule) -> Optional[IncidentResponse]:
                                                                               ^
security/active/incident_response.py:447:80: E501 line too long (99 > 79 characters)
                description = f"Изоляция затронутых сущностей для инцидента {incident.incident_id}"
                                                                               ^
security/active/incident_response.py:450:80: E501 line too long (99 > 79 characters)
                description = f"Карантин затронутых сущностей для инцидента {incident.incident_id}"
                                                                               ^
security/active/incident_response.py:453:80: E501 line too long (87 > 79 characters)
                description = f"Блокировка угрозы для инцидента {incident.incident_id}"
                                                                               ^
security/active/incident_response.py:456:80: E501 line too long (89 > 79 characters)
                description = f"Уведомление родителей о инциденте {incident.incident_id}"
                                                                               ^
security/active/incident_response.py:459:80: E501 line too long (94 > 79 characters)
                description = f"Уведомление администратора о инциденте {incident.incident_id}"
                                                                               ^
security/active/incident_response.py:462:80: E501 line too long (99 > 79 characters)
                description = f"Уведомление властей о критическом инциденте {incident.incident_id}"
                                                                               ^
security/active/incident_response.py:468:80: E501 line too long (86 > 79 characters)
                description = f"Начало расследования инцидента {incident.incident_id}"
                                                                               ^
security/active/incident_response.py:474:80: E501 line too long (88 > 79 characters)
                description = f"Устранение последствий инцидента {incident.incident_id}"
                                                                               ^
security/active/incident_response.py:477:80: E501 line too long (92 > 79 characters)
                description = f"Усиленный мониторинг после инцидента {incident.incident_id}"
                                                                               ^
security/active/incident_response.py:483:80: E501 line too long (105 > 79 characters)
                description = f"Неизвестное действие {action.value} для инцидента {incident.incident_id}"
                                                                               ^
security/active/incident_response.py:503:80: E501 line too long (81 > 79 characters)
                if action in [ResponseAction.CONTAIN, ResponseAction.QUARANTINE]:
                                                                               ^
security/active/incident_response.py:542:80: E501 line too long (84 > 79 characters)
    def get_incident_summary(self, user_id: Optional[str] = None) -> Dict[str, Any]:
                                                                               ^
security/active/incident_response.py:556:80: E501 line too long (164 > 79 characters)
                "open_incidents": len([i for i in user_incidents if i.status in [IncidentStatus.DETECTED, IncidentStatus.INVESTIGATING, IncidentStatus.CONTAINED]]),
                                                                               ^
security/active/incident_response.py:557:80: E501 line too long (110 > 79 characters)
                "resolved_incidents": len([i for i in user_incidents if i.status == IncidentStatus.RESOLVED]),
                                                                               ^
security/active/incident_response.py:558:80: E501 line too long (106 > 79 characters)
                "closed_incidents": len([i for i in user_incidents if i.status == IncidentStatus.CLOSED]),
                                                                               ^
security/active/incident_response.py:560:80: E501 line too long (94 > 79 characters)
                    severity.value: len([i for i in user_incidents if i.severity == severity])
                                                                               ^
security/active/incident_response.py:564:80: E501 line too long (109 > 79 characters)
                    incident_type.value: len([i for i in user_incidents if i.incident_type == incident_type])
                                                                               ^
security/active/incident_response.py:568:80: E501 line too long (88 > 79 characters)
                    status.value: len([i for i in user_incidents if i.status == status])
                                                                               ^
security/active/incident_response.py:582:80: E501 line too long (109 > 79 characters)
                    for incident in sorted(user_incidents, key=lambda x: x.detection_time, reverse=True)[:10]
                                                                               ^
security/active/incident_response.py:586:80: E501 line too long (108 > 79 characters)
                    "successful_responses": len([r for r in self.incident_responses.values() if r.success]),
                                                                               ^
security/active/incident_response.py:587:80: E501 line too long (107 > 79 characters)
                    "failed_responses": len([r for r in self.incident_responses.values() if not r.success])
                                                                               ^
security/active/incident_response.py:598:80: E501 line too long (84 > 79 characters)
            status = {"automatic_response_enabled": self.automatic_response_enabled,
                                                                               ^
security/active/incident_response.py:599:80: E501 line too long (88 > 79 characters)
                      "family_notifications_enabled": self.family_notifications_enabled,
                                                                               ^
security/active/incident_response.py:600:80: E501 line too long (94 > 79 characters)
                      "authority_notifications_enabled": self.authority_notifications_enabled,
                                                                               ^
security/active/incident_response.py:603:80: E501 line too long (98 > 79 characters)
                      "active_rules": len([r for r in self.response_rules.values() if r.enabled]),
                                                                               ^
security/active/incident_response.py:604:80: E501 line too long (115 > 79 characters)
                      "family_specific_rules": len([r for r in self.response_rules.values() if r.family_specific]),
                                                                               ^
security/active/incident_response.py:606:80: E501 line too long (120 > 79 characters)
                      "open_incidents": len([i for i in self.incidents.values() if i.status in [IncidentStatus.DETECTED,
                                                                               ^
security/active/incident_response.py:607:80: E501 line too long (125 > 79 characters)
                                                                                                IncidentStatus.INVESTIGATING,
                                                                               ^
security/active/incident_response.py:608:80: E501 line too long (124 > 79 characters)
                                                                                                IncidentStatus.CONTAINED]]),
                                                                               ^
security/active/incident_response.py:612:80: E501 line too long (80 > 79 characters)
                      "family_history": {user_id: len(incident_ids) for user_id,
                                                                               ^
security/active/incident_response.py:613:80: E501 line too long (95 > 79 characters)
                                         incident_ids in self.family_incident_history.items()}}
                                                                               ^
security/active/incident_response.py:616:80: E501 line too long (83 > 79 characters)
            self.logger.error(f"Ошибка получения статуса семейных инцидентов: {e}")
                                                                               ^
security/active/incident_response.py:664:80: E501 line too long (89 > 79 characters)
            self.log_activity(f"Блокировка угрозы для инцидента: {incident.incident_id}")
                                                                               ^
security/active/incident_response.py:673:80: E501 line too long (89 > 79 characters)
                self.log_activity(f"КРИТИЧЕСКОЕ УВЕДОМЛЕНИЕ РОДИТЕЛЯМ: {incident.title}")
                                                                               ^
security/active/incident_response.py:692:80: E501 line too long (87 > 79 characters)
                self.log_activity(f"КРИТИЧЕСКОЕ УВЕДОМЛЕНИЕ ВЛАСТЯМ: {incident.title}")
                                                                               ^
security/active/incident_response.py:749:80: E501 line too long (97 > 79 characters)
    def _compare_severity(self, severity1: IncidentSeverity, severity2: IncidentSeverity) -> int:
                                                                               ^
security/active/intrusion_prevention.py:107:80: E501 line too long (99 > 79 characters)
    def __init__(self, name: str = "IntrusionPrevention", config: Optional[Dict[str, Any]] = None):
                                                                               ^
security/active/intrusion_prevention.py:116:80: E501 line too long (91 > 79 characters)
        self.family_protection_history: Dict[str, List[str]] = {}  # user_id -> attempt_ids
                                                                               ^
security/active/intrusion_prevention.py:141:80: E501 line too long (98 > 79 characters)
                indicators=["multiple_failed_logins", "rapid_login_attempts", "common_passwords"],
                                                                               ^
security/active/intrusion_prevention.py:150:80: E501 line too long (102 > 79 characters)
                indicators=["high_request_volume", "multiple_source_ips", "unusual_traffic_patterns"],
                                                                               ^
security/active/intrusion_prevention.py:159:80: E501 line too long (109 > 79 characters)
                indicators=["sequential_port_access", "multiple_port_attempts", "unusual_port_combinations"],
                                                                               ^
security/active/intrusion_prevention.py:168:80: E501 line too long (85 > 79 characters)
                indicators=["sql_keywords", "suspicious_queries", "database_errors"],
                                                                               ^
security/active/intrusion_prevention.py:177:80: E501 line too long (82 > 79 characters)
                indicators=["script_tags", "javascript_code", "suspicious_input"],
                                                                               ^
security/active/intrusion_prevention.py:186:80: E501 line too long (102 > 79 characters)
                indicators=["privilege_escalation", "access_denied_errors", "suspicious_permissions"],
                                                                               ^
security/active/intrusion_prevention.py:195:80: E501 line too long (104 > 79 characters)
                indicators=["inappropriate_content", "grooming_behavior", "age_inappropriate_requests"],
                                                                               ^
security/active/intrusion_prevention.py:204:80: E501 line too long (95 > 79 characters)
                indicators=["financial_requests", "urgency_tactics", "personal_info_requests"],
                                                                               ^
security/active/intrusion_prevention.py:211:80: E501 line too long (82 > 79 characters)
        self.log_activity(f"Инициализировано {len(patterns)} паттернов вторжений")
                                                                               ^
security/active/intrusion_prevention.py:223:80: E501 line too long (82 > 79 characters)
                actions=[PreventionAction.BLOCK_IP, PreventionAction.ALERT_ADMIN],
                                                                               ^
security/active/intrusion_prevention.py:232:80: E501 line too long (80 > 79 characters)
                conditions={"max_requests": 100, "time_window": 60},  # 1 минута
                                                                               ^
security/active/intrusion_prevention.py:233:80: E501 line too long (81 > 79 characters)
                actions=[PreventionAction.RATE_LIMIT, PreventionAction.BLOCK_IP],
                                                                               ^
security/active/intrusion_prevention.py:243:80: E501 line too long (80 > 79 characters)
                actions=[PreventionAction.BLOCK_IP, PreventionAction.LOG_EVENT],
                                                                               ^
security/active/intrusion_prevention.py:253:80: E501 line too long (88 > 79 characters)
                actions=[PreventionAction.BLOCK_RESOURCE, PreventionAction.ALERT_ADMIN],
                                                                               ^
security/active/intrusion_prevention.py:263:80: E501 line too long (86 > 79 characters)
                actions=[PreventionAction.BLOCK_RESOURCE, PreventionAction.LOG_EVENT],
                                                                               ^
security/active/intrusion_prevention.py:272:80: E501 line too long (81 > 79 characters)
                conditions={"age_group": "child", "inappropriate_content": True},
                                                                               ^
security/active/intrusion_prevention.py:286:80: E501 line too long (80 > 79 characters)
                conditions={"age_group": "elderly", "financial_requests": True},
                                                                               ^
security/active/intrusion_prevention.py:287:80: E501 line too long (118 > 79 characters)
                actions=[PreventionAction.BLOCK_RESOURCE, PreventionAction.ALERT_ADMIN, PreventionAction.REQUIRE_MFA],
                                                                               ^
security/active/intrusion_prevention.py:294:80: E501 line too long (81 > 79 characters)
        self.log_activity(f"Инициализировано {len(rules)} правил предотвращения")
                                                                               ^
security/active/intrusion_prevention.py:321:80: E501 line too long (83 > 79 characters)
                         user_age: Optional[int] = None) -> List[IntrusionAttempt]:
                                                                               ^
security/active/intrusion_prevention.py:327:80: E501 line too long (84 > 79 characters)
                confidence = self._calculate_pattern_confidence(event_data, pattern)
                                                                               ^
security/active/intrusion_prevention.py:352:80: E501 line too long (90 > 79 characters)
                        self.family_protection_history[user_id].append(attempt.attempt_id)
                                                                               ^
security/active/intrusion_prevention.py:387:80: E501 line too long (80 > 79 characters)
                elif event_data.get("user_age") and event_data["user_age"] > 65:
                                                                               ^
security/active/intrusion_prevention.py:394:80: E501 line too long (83 > 79 characters)
    def _check_indicator(self, event_data: Dict[str, Any], indicator: str) -> bool:
                                                                               ^
security/active/intrusion_prevention.py:400:80: E501 line too long (87 > 79 characters)
                return event_data.get("login_frequency", 0) > 10  # 10 попыток в минуту
                                                                               ^
security/active/intrusion_prevention.py:409:80: E501 line too long (88 > 79 characters)
                sql_keywords = ["select", "insert", "update", "delete", "drop", "union"]
                                                                               ^
security/active/intrusion_prevention.py:425:80: E501 line too long (101 > 79 characters)
    def _determine_severity(self, confidence: float, pattern: IntrusionPattern) -> IntrusionSeverity:
                                                                               ^
security/active/intrusion_prevention.py:436:80: E501 line too long (85 > 79 characters)
    def prevent_intrusion(self, attempt: IntrusionAttempt) -> List[PreventionAction]:
                                                                               ^
security/active/intrusion_prevention.py:456:80: E501 line too long (82 > 79 characters)
                    description=f"Предотвращено вторжение: {attempt.description}",
                                                                               ^
security/active/intrusion_prevention.py:462:80: E501 line too long (88 > 79 characters)
                        "applied_actions": [action.value for action in applied_actions],
                                                                               ^
security/active/intrusion_prevention.py:471:80: E501 line too long (88 > 79 characters)
    def _find_applicable_rules(self, attempt: IntrusionAttempt) -> List[PreventionRule]:
                                                                               ^
security/active/intrusion_prevention.py:477:80: E501 line too long (87 > 79 characters)
                    self._compare_severity(attempt.severity, rule.severity_threshold)):
                                                                               ^
security/active/intrusion_prevention.py:490:80: E501 line too long (81 > 79 characters)
        return severity_order[attempt_severity] >= severity_order[rule_threshold]
                                                                               ^
security/active/intrusion_prevention.py:499:80: E501 line too long (91 > 79 characters)
                if rule.age_group == "child" and attempt.metadata.get("user_age", 0) >= 18:
                                                                               ^
security/active/intrusion_prevention.py:501:80: E501 line too long (94 > 79 characters)
                elif rule.age_group == "elderly" and attempt.metadata.get("user_age", 0) < 65:
                                                                               ^
security/active/intrusion_prevention.py:513:80: E501 line too long (97 > 79 characters)
                    attempt.source_ip, attempt.intrusion_type, conditions.get("time_window", 300)
                                                                               ^
security/active/intrusion_prevention.py:522:80: E501 line too long (83 > 79 characters)
    def _count_recent_attempts(self, source_ip: str, intrusion_type: IntrusionType,
                                                                               ^
security/active/intrusion_prevention.py:547:80: E501 line too long (98 > 79 characters)
                self.log_activity(f"Установлено ограничение скорости для IP: {attempt.source_ip}")
                                                                               ^
security/active/intrusion_prevention.py:549:80: E501 line too long (109 > 79 characters)
                self.log_activity(f"Отправлено уведомление администратору о вторжении: {attempt.attempt_id}")
                                                                               ^
security/active/intrusion_prevention.py:551:80: E501 line too long (86 > 79 characters)
                self.log_activity(f"Записано событие вторжения: {attempt.attempt_id}")
                                                                               ^
security/active/intrusion_prevention.py:554:80: E501 line too long (91 > 79 characters)
                    self.log_activity(f"Пользователь {attempt.user_id} помещен в карантин")
                                                                               ^
security/active/intrusion_prevention.py:557:80: E501 line too long (90 > 79 characters)
                    self.log_activity(f"Требуется MFA для пользователя {attempt.user_id}")
                                                                               ^
security/active/intrusion_prevention.py:560:80: E501 line too long (89 > 79 characters)
                    self.log_activity(f"Сессия пользователя {attempt.user_id} завершена")
                                                                               ^
security/active/intrusion_prevention.py:562:80: E501 line too long (85 > 79 characters)
                self.log_activity(f"Заблокирован ресурс для IP: {attempt.source_ip}")
                                                                               ^
security/active/intrusion_prevention.py:574:80: E501 line too long (85 > 79 characters)
    def get_intrusion_summary(self, user_id: Optional[str] = None) -> Dict[str, Any]:
                                                                               ^
security/active/intrusion_prevention.py:588:80: E501 line too long (111 > 79 characters)
                "prevented_attempts": len([a for a in user_attempts if a.status == IntrusionStatus.PREVENTED]),
                                                                               ^
security/active/intrusion_prevention.py:589:80: E501 line too long (107 > 79 characters)
                "blocked_attempts": len([a for a in user_attempts if a.status == IntrusionStatus.BLOCKED]),
                                                                               ^
security/active/intrusion_prevention.py:591:80: E501 line too long (93 > 79 characters)
                    severity.value: len([a for a in user_attempts if a.severity == severity])
                                                                               ^
security/active/intrusion_prevention.py:595:80: E501 line too long (111 > 79 characters)
                    intrusion_type.value: len([a for a in user_attempts if a.intrusion_type == intrusion_type])
                                                                               ^
security/active/intrusion_prevention.py:606:80: E501 line too long (102 > 79 characters)
                    for attempt in sorted(user_attempts, key=lambda x: x.timestamp, reverse=True)[:10]
                                                                               ^
security/active/intrusion_prevention.py:621:80: E501 line too long (94 > 79 characters)
                "active_rules": len([r for r in self.prevention_rules.values() if r.enabled]),
                                                                               ^
security/active/intrusion_prevention.py:622:80: E501 line too long (111 > 79 characters)
                "family_specific_rules": len([r for r in self.prevention_rules.values() if r.family_specific]),
                                                                               ^
security/active/intrusion_prevention.py:628:80: E501 line too long (86 > 79 characters)
                    for user_id, attempt_ids in self.family_protection_history.items()
                                                                               ^
security/active/malware_protection.py:113:80: E501 line too long (97 > 79 characters)
    def __init__(self, name: str = "MalwareProtection", config: Optional[Dict[str, Any]] = None):
                                                                               ^
security/active/malware_protection.py:122:80: E501 line too long (93 > 79 characters)
        self.family_protection_history: Dict[str, List[str]] = {}  # user_id -> detection_ids
                                                                               ^
security/active/malware_protection.py:197:80: E501 line too long (81 > 79 characters)
                description="Вредоносное ПО для эксплуатации несовершеннолетних",
                                                                               ^
security/active/malware_protection.py:227:80: E501 line too long (89 > 79 characters)
        self.log_activity(f"Инициализировано {len(signatures)} сигнатур вредоносного ПО")
                                                                               ^
security/active/malware_protection.py:239:80: E501 line too long (83 > 79 characters)
                actions=[ProtectionAction.QUARANTINE, ProtectionAction.ALERT_USER],
                                                                               ^
security/active/malware_protection.py:249:80: E501 line too long (120 > 79 characters)
                actions=[ProtectionAction.BLOCK_ACCESS, ProtectionAction.ALERT_ADMIN, ProtectionAction.ISOLATE_NETWORK],
                                                                               ^
security/active/malware_protection.py:269:80: E501 line too long (85 > 79 characters)
                actions=[ProtectionAction.BLOCK_ACCESS, ProtectionAction.ALERT_USER],
                                                                               ^
security/active/malware_protection.py:278:80: E501 line too long (81 > 79 characters)
                conditions={"age_group": "child", "inappropriate_content": True},
                                                                               ^
security/active/malware_protection.py:279:80: E501 line too long (115 > 79 characters)
                actions=[ProtectionAction.BLOCK_ACCESS, ProtectionAction.ALERT_ADMIN, ProtectionAction.QUARANTINE],
                                                                               ^
security/active/malware_protection.py:290:80: E501 line too long (115 > 79 characters)
                actions=[ProtectionAction.BLOCK_ACCESS, ProtectionAction.ALERT_ADMIN, ProtectionAction.QUARANTINE],
                                                                               ^
security/active/malware_protection.py:301:80: E501 line too long (91 > 79 characters)
                actions=[ProtectionAction.SCAN_SYSTEM, ProtectionAction.UPDATE_SIGNATURES],
                                                                               ^
security/active/malware_protection.py:316:80: E501 line too long (91 > 79 characters)
                "blocked_content_types": ["inappropriate", "adult", "violence", "gambling"]
                                                                               ^
security/active/malware_protection.py:346:80: E501 line too long (98 > 79 characters)
                confidence = self._calculate_signature_confidence(file_path, signature, file_hash)
                                                                               ^
security/active/malware_protection.py:352:80: E501 line too long (81 > 79 characters)
                        severity=self._determine_severity(confidence, signature),
                                                                               ^
security/active/malware_protection.py:373:80: E501 line too long (94 > 79 characters)
                        self.family_protection_history[user_id].append(detection.detection_id)
                                                                               ^
security/active/malware_protection.py:378:80: E501 line too long (83 > 79 characters)
                        description=f"Обнаружено вредоносное ПО: {signature.name}",
                                                                               ^
security/active/malware_protection.py:408:80: E501 line too long (90 > 79 characters)
    def _calculate_signature_confidence(self, file_path: str, signature: MalwareSignature,
                                                                               ^
security/active/malware_protection.py:423:80: E501 line too long (82 > 79 characters)
                with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
                                                                               ^
security/active/malware_protection.py:424:80: E501 line too long (80 > 79 characters)
                    content = f.read(1024).lower()  # Читаем первые 1024 символа
                                                                               ^
security/active/malware_protection.py:438:80: E501 line too long (101 > 79 characters)
    def _determine_severity(self, confidence: float, signature: MalwareSignature) -> MalwareSeverity:
                                                                               ^
security/active/malware_protection.py:449:80: E501 line too long (93 > 79 characters)
    def protect_against_malware(self, detection: MalwareDetection) -> List[ProtectionAction]:
                                                                               ^
security/active/malware_protection.py:469:80: E501 line too long (86 > 79 characters)
                    description=f"Защита от вредоносного ПО: {detection.description}",
                                                                               ^
security/active/malware_protection.py:475:80: E501 line too long (88 > 79 characters)
                        "applied_actions": [action.value for action in applied_actions],
                                                                               ^
security/active/malware_protection.py:485:80: E501 line too long (90 > 79 characters)
    def _find_applicable_rules(self, detection: MalwareDetection) -> List[ProtectionRule]:
                                                                               ^
security/active/malware_protection.py:491:80: E501 line too long (89 > 79 characters)
                    self._compare_severity(detection.severity, rule.severity_threshold)):
                                                                               ^
security/active/malware_protection.py:504:80: E501 line too long (83 > 79 characters)
        return severity_order[detection_severity] >= severity_order[rule_threshold]
                                                                               ^
security/active/malware_protection.py:513:80: E501 line too long (93 > 79 characters)
                if rule.age_group == "child" and detection.metadata.get("user_age", 0) >= 18:
                                                                               ^
security/active/malware_protection.py:515:80: E501 line too long (96 > 79 characters)
                elif rule.age_group == "elderly" and detection.metadata.get("user_age", 0) < 65:
                                                                               ^
security/active/malware_protection.py:518:80: E501 line too long (81 > 79 characters)
            if "auto_quarantine" in conditions and not self.automatic_quarantine:
                                                                               ^
security/active/malware_protection.py:535:80: E501 line too long (84 > 79 characters)
                self.log_activity(f"Файл помещен в карантин: {detection.file_path}")
                                                                               ^
security/active/malware_protection.py:541:80: E501 line too long (99 > 79 characters)
                    self.log_activity(f"Ошибка удаления файла {detection.file_path}: {e}", "error")
                                                                               ^
security/active/malware_protection.py:544:80: E501 line too long (88 > 79 characters)
                self.log_activity(f"Заблокирован доступ к файлу: {detection.file_path}")
                                                                               ^
security/active/malware_protection.py:546:80: E501 line too long (116 > 79 characters)
                self.log_activity(f"Отправлено уведомление пользователю о вредоносном ПО: {detection.detection_id}")
                                                                               ^
security/active/malware_protection.py:548:80: E501 line too long (118 > 79 characters)
                self.log_activity(f"Отправлено уведомление администратору о вредоносном ПО: {detection.detection_id}")
                                                                               ^
security/active/malware_protection.py:554:80: E501 line too long (85 > 79 characters)
                self.log_activity("Изоляция сети для предотвращения распространения")
                                                                               ^
security/active/malware_protection.py:566:80: E501 line too long (83 > 79 characters)
    def get_malware_summary(self, user_id: Optional[str] = None) -> Dict[str, Any]:
                                                                               ^
security/active/malware_protection.py:580:80: E501 line too long (112 > 79 characters)
                "quarantined_files": len([d for d in user_detections if d.status == MalwareStatus.QUARANTINED]),
                                                                               ^
security/active/malware_protection.py:581:80: E501 line too long (104 > 79 characters)
                "removed_files": len([d for d in user_detections if d.status == MalwareStatus.REMOVED]),
                                                                               ^
security/active/malware_protection.py:583:80: E501 line too long (95 > 79 characters)
                    severity.value: len([d for d in user_detections if d.severity == severity])
                                                                               ^
security/active/malware_protection.py:587:80: E501 line too long (107 > 79 characters)
                    malware_type.value: len([d for d in user_detections if d.malware_type == malware_type])
                                                                               ^
security/active/malware_protection.py:599:80: E501 line too long (106 > 79 characters)
                    for detection in sorted(user_detections, key=lambda x: x.timestamp, reverse=True)[:10]
                                                                               ^
security/active/malware_protection.py:616:80: E501 line too long (94 > 79 characters)
                "active_rules": len([r for r in self.protection_rules.values() if r.enabled]),
                                                                               ^
security/active/malware_protection.py:617:80: E501 line too long (111 > 79 characters)
                "family_specific_rules": len([r for r in self.protection_rules.values() if r.family_specific]),
                                                                               ^
security/active/malware_protection.py:623:80: E501 line too long (88 > 79 characters)
                    for user_id, detection_ids in self.family_protection_history.items()
                                                                               ^
security/active/network_monitoring.py:132:80: E501 line too long (97 > 79 characters)
    def __init__(self, name: str = "NetworkMonitoring", config: Optional[Dict[str, Any]] = None):
                                                                               ^
security/active/network_monitoring.py:142:80: E501 line too long (91 > 79 characters)
        self.family_network_history: Dict[str, List[str]] = {}  # user_id -> connection_ids
                                                                               ^
security/active/network_monitoring.py:196:80: E501 line too long (81 > 79 characters)
                actions=[MonitoringAction.BLOCK, MonitoringAction.NOTIFY_PARENT],
                                                                               ^
security/active/network_monitoring.py:220:80: E501 line too long (101 > 79 characters)
                actions=[MonitoringAction.BLOCK, MonitoringAction.ALERT, MonitoringAction.SCAN_DEEP],
                                                                               ^
security/active/network_monitoring.py:234:80: E501 line too long (83 > 79 characters)
        self.log_activity(f"Инициализировано {len(rules)} правил мониторинга сети")
                                                                               ^
security/active/network_monitoring.py:265:80: E501 line too long (89 > 79 characters)
            self.log_activity("Запущен мониторинг сетевой активности в реальном времени")
                                                                               ^
security/active/network_monitoring.py:273:80: E501 line too long (80 > 79 characters)
                           user_age: Optional[int] = None) -> NetworkConnection:
                                                                               ^
security/active/network_monitoring.py:285:80: E501 line too long (83 > 79 characters)
                traffic_type=self._detect_traffic_type(destination_port, protocol),
                                                                               ^
security/active/network_monitoring.py:304:80: E501 line too long (85 > 79 characters)
                self.family_network_history[user_id].append(connection.connection_id)
                                                                               ^
security/active/network_monitoring.py:311:80: E501 line too long (122 > 79 characters)
                description=f"Новое сетевое соединение: {source_ip}:{source_port} -> {destination_ip}:{destination_port}",
                                                                               ^
security/active/network_monitoring.py:330:80: E501 line too long (89 > 79 characters)
            if destination_ip.startswith("192.168.") or destination_ip.startswith("10."):
                                                                               ^
security/active/network_monitoring.py:349:80: E501 line too long (118 > 79 characters)
            elif port in [21, 22, 23, 53, 67, 68, 69, 80, 110, 123, 135, 139, 143, 161, 162, 389, 443, 445, 993, 995]:
                                                                               ^
security/active/network_monitoring.py:353:80: E501 line too long (80 > 79 characters)
            elif port in [6881, 6882, 6883, 6884, 6885, 6886, 6887, 6888, 6889]:
                                                                               ^
security/active/network_monitoring.py:371:80: E501 line too long (98 > 79 characters)
    def _evaluate_rule_conditions(self, connection: NetworkConnection, rule: NetworkRule) -> bool:
                                                                               ^
security/active/network_monitoring.py:377:80: E501 line too long (94 > 79 characters)
                if rule.age_group == "child" and connection.metadata.get("user_age", 0) >= 18:
                                                                               ^
security/active/network_monitoring.py:379:80: E501 line too long (97 > 79 characters)
                elif rule.age_group == "elderly" and connection.metadata.get("user_age", 0) < 65:
                                                                               ^
security/active/network_monitoring.py:394:80: E501 line too long (93 > 79 characters)
            if "inappropriate_content" in conditions and conditions["inappropriate_content"]:
                                                                               ^
security/active/network_monitoring.py:402:80: E501 line too long (85 > 79 characters)
            if "data_exfiltration" in conditions and conditions["data_exfiltration"]:
                                                                               ^
security/active/network_monitoring.py:410:80: E501 line too long (84 > 79 characters)
    def _apply_rule_actions(self, connection: NetworkConnection, rule: NetworkRule):
                                                                               ^
security/active/network_monitoring.py:416:80: E501 line too long (86 > 79 characters)
                    self.log_activity(f"Заблокирован IP: {connection.destination_ip}")
                                                                               ^
security/active/network_monitoring.py:419:80: E501 line too long (94 > 79 characters)
                    self.log_activity(f"Ограничен трафик для IP: {connection.destination_ip}")
                                                                               ^
security/active/network_monitoring.py:421:80: E501 line too long (89 > 79 characters)
                    self.log_activity(f"Алерт: {rule.name} - {connection.connection_id}")
                                                                               ^
security/active/network_monitoring.py:425:80: E501 line too long (81 > 79 characters)
                    self.log_activity(f"Уведомление администратору: {rule.name}")
                                                                               ^
security/active/network_monitoring.py:427:80: E501 line too long (91 > 79 characters)
                    self.log_activity(f"Глубокое сканирование: {connection.connection_id}")
                                                                               ^
security/active/network_monitoring.py:485:80: E501 line too long (80 > 79 characters)
                description=f"Сетевая аномалия: {anomaly_type} - {description}",
                                                                               ^
security/active/network_monitoring.py:513:80: E501 line too long (89 > 79 characters)
    def get_network_statistics(self, user_id: Optional[str] = None) -> NetworkStatistics:
                                                                               ^
security/active/network_monitoring.py:527:80: E501 line too long (80 > 79 characters)
            total_bytes_sent = sum(conn.bytes_sent for conn in user_connections)
                                                                               ^
security/active/network_monitoring.py:528:80: E501 line too long (88 > 79 characters)
            total_bytes_received = sum(conn.bytes_received for conn in user_connections)
                                                                               ^
security/active/network_monitoring.py:538:80: E501 line too long (88 > 79 characters)
                by_traffic_type[traffic_type] = by_traffic_type.get(traffic_type, 0) + 1
                                                                               ^
security/active/network_monitoring.py:540:80: E501 line too long (88 > 79 characters)
                by_network_type[network_type] = by_network_type.get(network_type, 0) + 1
                                                                               ^
security/active/network_monitoring.py:543:80: E501 line too long (88 > 79 characters)
                by_threat_level[threat_level] = by_threat_level.get(threat_level, 0) + 1
                                                                               ^
security/active/network_monitoring.py:550:80: E501 line too long (84 > 79 characters)
                destination_counts[dest_ip] = destination_counts.get(dest_ip, 0) + 1
                                                                               ^
security/active/network_monitoring.py:552:80: E501 line too long (104 > 79 characters)
            top_destinations = sorted(destination_counts.items(), key=lambda x: x[1], reverse=True)[:10]
                                                                               ^
security/active/network_monitoring.py:553:80: E501 line too long (94 > 79 characters)
            top_sources = sorted(source_counts.items(), key=lambda x: x[1], reverse=True)[:10]
                                                                               ^
security/active/network_monitoring.py:582:80: E501 line too long (94 > 79 characters)
                "active_rules": len([r for r in self.monitoring_rules.values() if r.enabled]),
                                                                               ^
security/active/network_monitoring.py:583:80: E501 line too long (111 > 79 characters)
                "family_specific_rules": len([r for r in self.monitoring_rules.values() if r.family_specific]),
                                                                               ^
security/active/network_monitoring.py:591:80: E501 line too long (86 > 79 characters)
                    for user_id, connection_ids in self.family_network_history.items()
                                                                               ^
security/active/threat_detection.py:106:80: E501 line too long (95 > 79 characters)
    def __init__(self, name: str = "ThreatDetection", config: Optional[Dict[str, Any]] = None):
                                                                               ^
security/active/threat_detection.py:113:80: E501 line too long (86 > 79 characters)
        self.family_threat_history: Dict[str, List[str]] = {}  # user_id -> threat_ids
                                                                               ^
security/active/threat_detection.py:189:80: E501 line too long (81 > 79 characters)
                    "description": "Обнаружение попыток загрузки вредоносного ПО"
                                                                               ^
security/active/threat_detection.py:218:80: E501 line too long (93 > 79 characters)
            self.logger.info(f"Инициализировано {len(self.threat_patterns)} паттернов угроз")
                                                                               ^
security/active/threat_detection.py:229:80: E501 line too long (85 > 79 characters)
                        "age_group": "child", "threat_type": "child_exploitation"}, [
                                                                               ^
security/active/threat_detection.py:230:80: E501 line too long (82 > 79 characters)
                        "block", "notify_parents", "log_incident"]), SecurityRule(
                                                                               ^
security/active/threat_detection.py:232:80: E501 line too long (82 > 79 characters)
                        "age_group": "elderly", "threat_type": "elderly_fraud"}, [
                                                                               ^
security/active/threat_detection.py:233:80: E501 line too long (85 > 79 characters)
                            "block", "notify_family", "log_incident"]), SecurityRule(
                                                                               ^
security/active/threat_detection.py:234:80: E501 line too long (80 > 79 characters)
                                "Защита семейных данных", "family_protection", {
                                                                               ^
security/active/threat_detection.py:235:80: E501 line too long (86 > 79 characters)
                                    "threat_type": "phishing", "family_data": True}, [
                                                                               ^
security/active/threat_detection.py:236:80: E501 line too long (83 > 79 characters)
                                        "block", "notify_family", "log_incident"])]
                                                                               ^
security/active/threat_detection.py:239:80: E501 line too long (92 > 79 characters)
            self.logger.info(f"Инициализировано {len(family_rules)} правил семейной защиты")
                                                                               ^
security/active/threat_detection.py:241:80: E501 line too long (82 > 79 characters)
            self.logger.error(f"Ошибка инициализации правил семейной защиты: {e}")
                                                                               ^
security/active/threat_detection.py:245:80: E501 line too long (81 > 79 characters)
                        user_age: Optional[int] = None) -> List[ThreatDetection]:
                                                                               ^
security/active/threat_detection.py:264:80: E501 line too long (85 > 79 characters)
                    confidence = min(len(matches) / len(pattern.patterns) + 0.3, 1.0)
                                                                               ^
security/active/threat_detection.py:277:80: E501 line too long (80 > 79 characters)
                        detection_id=f"threat_{len(self.detected_threats) + 1}",
                                                                               ^
security/active/threat_detection.py:289:80: E501 line too long (103 > 79 characters)
                            "content_preview": content[:100] + "..." if len(content) > 100 else content
                                                                               ^
security/active/threat_detection.py:298:80: E501 line too long (90 > 79 characters)
                        self.family_threat_history[user_id].append(detection.detection_id)
                                                                               ^
security/active/threat_detection.py:302:80: E501 line too long (89 > 79 characters)
                        severity=self._map_threat_severity_to_incident(pattern.severity),
                                                                               ^
security/active/threat_detection.py:334:80: E501 line too long (93 > 79 characters)
    def _map_threat_severity_to_incident(self, severity: ThreatSeverity) -> IncidentSeverity:
                                                                               ^
security/active/threat_detection.py:358:80: E501 line too long (85 > 79 characters)
                    description=f"Обнаружен известный вредоносный файл: {file_path}",
                                                                               ^
security/active/threat_detection.py:365:80: E501 line too long (84 > 79 characters)
            suspicious_extensions = ['.exe', '.bat', '.cmd', '.scr', '.pif', '.com']
                                                                               ^
security/active/threat_detection.py:366:80: E501 line too long (89 > 79 characters)
            file_extension = file_path.lower().split('.')[-1] if '.' in file_path else ''
                                                                               ^
security/active/threat_detection.py:369:80: E501 line too long (85 > 79 characters)
                    detection_id=f"suspicious_file_{len(self.detected_threats) + 1}",
                                                                               ^
security/active/threat_detection.py:377:80: E501 line too long (82 > 79 characters)
                    metadata={"file_path": file_path, "extension": file_extension}
                                                                               ^
security/active/threat_detection.py:397:80: E501 line too long (89 > 79 characters)
                                 user_id: Optional[str] = None) -> List[ThreatDetection]:
                                                                               ^
security/active/threat_detection.py:402:80: E501 line too long (91 > 79 characters)
            if self._is_suspicious_ip(source_ip) or self._is_suspicious_ip(destination_ip):
                                                                               ^
security/active/threat_detection.py:404:80: E501 line too long (84 > 79 characters)
                    detection_id=f"network_threat_{len(self.detected_threats) + 1}",
                                                                               ^
security/active/threat_detection.py:410:80: E501 line too long (102 > 79 characters)
                    description=f"Подозрительная сетевая активность: {source_ip} -> {destination_ip}",
                                                                               ^
security/active/threat_detection.py:422:80: E501 line too long (92 > 79 characters)
            suspicious_ports = [22, 23, 135, 139, 445, 1433, 3389]  # SSH, Telnet, RDP и др.
                                                                               ^
security/active/threat_detection.py:425:80: E501 line too long (85 > 79 characters)
                    detection_id=f"suspicious_port_{len(self.detected_threats) + 1}",
                                                                               ^
security/active/threat_detection.py:451:80: E501 line too long (82 > 79 characters)
    def get_threat_summary(self, user_id: Optional[str] = None) -> Dict[str, Any]:
                                                                               ^
security/active/threat_detection.py:498:80: E501 line too long (100 > 79 characters)
                    for threat in sorted(user_threats, key=lambda x: x.timestamp, reverse=True)[:10]
                                                                               ^
security/active/threat_detection.py:511:80: E501 line too long (98 > 79 characters)
                if threat.threat_type in [ThreatType.CHILD_EXPLOITATION, ThreatType.ELDERLY_FRAUD]
                                                                               ^
security/active/threat_detection.py:517:80: E501 line too long (80 > 79 characters)
                    self.detected_threats[threat_id] for threat_id in threat_ids
                                                                               ^
security/advanced_alerting_system.py:14:1: F401 'smtplib' imported but unused
import smtplib
^
security/advanced_alerting_system.py:16:1: F401 'datetime.timedelta' imported but unused
from datetime import datetime, timedelta
^
security/advanced_alerting_system.py:20:1: F401 'threading' imported but unused
import threading
^
security/advanced_alerting_system.py:33:1: E302 expected 2 blank lines, found 1
class AlertType(Enum):
^
security/advanced_alerting_system.py:44:1: E302 expected 2 blank lines, found 1
class AlertSeverity(Enum):
^
security/advanced_alerting_system.py:51:1: E302 expected 2 blank lines, found 1
class AlertChannel(Enum):
^
security/advanced_alerting_system.py:59:1: E302 expected 2 blank lines, found 1
@dataclass
^
security/advanced_alerting_system.py:71:1: E302 expected 2 blank lines, found 1
@dataclass
^
security/advanced_alerting_system.py:85:1: E302 expected 2 blank lines, found 1
class AdvancedAlertingSystem(SecurityBase):
^
security/advanced_alerting_system.py:87:1: W293 blank line contains whitespace
    
^
security/advanced_alerting_system.py:92:1: W293 blank line contains whitespace
        
^
security/advanced_alerting_system.py:112:1: W293 blank line contains whitespace
        
^
security/advanced_alerting_system.py:115:1: W293 blank line contains whitespace
        
^
security/advanced_alerting_system.py:118:1: W293 blank line contains whitespace
        
^
security/advanced_alerting_system.py:121:1: W293 blank line contains whitespace
        
^
security/advanced_alerting_system.py:124:1: W293 blank line contains whitespace
        
^
security/advanced_alerting_system.py:127:1: W293 blank line contains whitespace
        
^
security/advanced_alerting_system.py:129:1: W293 blank line contains whitespace
    
^
security/advanced_alerting_system.py:140:80: E501 line too long (110 > 79 characters)
                channels=[AlertChannel.EMAIL, AlertChannel.SMS, AlertChannel.WEBHOOK, AlertChannel.DASHBOARD],
                                                                               ^
security/advanced_alerting_system.py:143:1: W293 blank line contains whitespace
            
^
security/advanced_alerting_system.py:154:1: W293 blank line contains whitespace
            
^
security/advanced_alerting_system.py:165:1: W293 blank line contains whitespace
            
^
security/advanced_alerting_system.py:173:80: E501 line too long (92 > 79 characters)
                channels=[AlertChannel.EMAIL, AlertChannel.WEBHOOK, AlertChannel.DASHBOARD],
                                                                               ^
security/advanced_alerting_system.py:176:1: W293 blank line contains whitespace
            
^
security/advanced_alerting_system.py:187:1: W293 blank line contains whitespace
            
^
security/advanced_alerting_system.py:198:1: W293 blank line contains whitespace
            
^
security/advanced_alerting_system.py:209:1: W293 blank line contains whitespace
            
^
security/advanced_alerting_system.py:221:1: W293 blank line contains whitespace
        
^
security/advanced_alerting_system.py:223:1: W293 blank line contains whitespace
    
^
security/advanced_alerting_system.py:227:1: W293 blank line contains whitespace
        
^
security/advanced_alerting_system.py:231:1: W293 blank line contains whitespace
            
^
security/advanced_alerting_system.py:234:80: E501 line too long (99 > 79 characters)
                time_since_last = (datetime.now() - self.last_triggered[rule.name]).total_seconds()
                                                                               ^
security/advanced_alerting_system.py:237:1: W293 blank line contains whitespace
            
^
security/advanced_alerting_system.py:240:80: E501 line too long (82 > 79 characters)
                if eval(rule.condition, {"metadata": data, "datetime": datetime}):
                                                                               ^
security/advanced_alerting_system.py:245:80: E501 line too long (82 > 79 characters)
                self.logger.error(f"Ошибка при проверке правила {rule.name}: {e}")
                                                                               ^
security/advanced_alerting_system.py:246:1: W293 blank line contains whitespace
        
^
security/advanced_alerting_system.py:248:1: W293 blank line contains whitespace
    
^
security/advanced_alerting_system.py:252:1: W293 blank line contains whitespace
        
^
security/advanced_alerting_system.py:263:1: W293 blank line contains whitespace
        
^
security/advanced_alerting_system.py:267:1: W293 blank line contains whitespace
        
^
security/advanced_alerting_system.py:270:1: W293 blank line contains whitespace
        
^
security/advanced_alerting_system.py:272:1: W293 blank line contains whitespace
    
^
security/advanced_alerting_system.py:273:80: E501 line too long (84 > 79 characters)
    def _generate_alert_message(self, rule: AlertRule, data: Dict[str, Any]) -> str:
                                                                               ^
security/advanced_alerting_system.py:276:1: W293 blank line contains whitespace
        
^
security/advanced_alerting_system.py:292:1: W293 blank line contains whitespace
        
^
security/advanced_alerting_system.py:294:1: W293 blank line contains whitespace
    
^
security/advanced_alerting_system.py:310:80: E501 line too long (92 > 79 characters)
                self.logger.error(f"Ошибка отправки уведомления через {channel.value}: {e}")
                                                                               ^
security/advanced_alerting_system.py:311:1: W293 blank line contains whitespace
    
^
security/advanced_alerting_system.py:316:1: W293 blank line contains whitespace
    
^
security/advanced_alerting_system.py:321:1: W293 blank line contains whitespace
    
^
security/advanced_alerting_system.py:333:1: W293 blank line contains whitespace
            
^
security/advanced_alerting_system.py:339:1: W293 blank line contains whitespace
            
^
security/advanced_alerting_system.py:344:1: W293 blank line contains whitespace
                
^
security/advanced_alerting_system.py:347:1: W293 blank line contains whitespace
    
^
security/advanced_alerting_system.py:352:1: W293 blank line contains whitespace
    
^
security/advanced_alerting_system.py:356:1: W293 blank line contains whitespace
    
^
security/advanced_alerting_system.py:367:1: W293 blank line contains whitespace
    
^
security/advanced_alerting_system.py:371:1: W293 blank line contains whitespace
    
^
security/advanced_alerting_system.py:375:1: W293 blank line contains whitespace
    
^
security/advanced_alerting_system.py:381:1: W293 blank line contains whitespace
        
^
security/advanced_alerting_system.py:387:1: W293 blank line contains whitespace
        
^
security/advanced_alerting_system.py:393:1: W293 blank line contains whitespace
        
^
security/advanced_alerting_system.py:400:80: E501 line too long (102 > 79 characters)
            'last_alert': self.alert_history[-1].timestamp.isoformat() if self.alert_history else None
                                                                               ^
security/advanced_alerting_system.py:402:1: W293 blank line contains whitespace
    
^
security/advanced_alerting_system.py:413:1: W293 blank line contains whitespace
    
^
security/advanced_alerting_system.py:419:1: W293 blank line contains whitespace
    
^
security/advanced_alerting_system.py:430:1: E305 expected 2 blank lines after class or function definition, found 1
alerting_system = AdvancedAlertingSystem()
^
security/advanced_alerting_system.py:435:1: W293 blank line contains whitespace
    
^
security/advanced_alerting_system.py:447:1: W293 blank line contains whitespace
    
^
security/advanced_alerting_system.py:451:1: W293 blank line contains whitespace
    
^
security/advanced_alerting_system.py:454:1: W293 blank line contains whitespace
    
^
security/advanced_alerting_system.py:458:1: W293 blank line contains whitespace
    
^
security/advanced_alerting_system.py:459:39: W292 no newline at end of file
    print("✅ Тестирование завершено!")                                      ^
security/advanced_monitoring_manager.py:7:1: F401 'asyncio' imported but unused
import asyncio
^
security/advanced_monitoring_manager.py:8:1: F401 'json' imported but unused
import json
^
security/advanced_monitoring_manager.py:12:1: F401 'requests' imported but unused
import requests
^
security/advanced_monitoring_manager.py:91:1: W293 blank line contains whitespace
        
^
security/advanced_monitoring_manager.py:96:1: W293 blank line contains whitespace
        
^
security/advanced_monitoring_manager.py:98:80: E501 line too long (80 > 79 characters)
        self.metrics: Dict[str, deque] = defaultdict(lambda: deque(maxlen=1000))
                                                                               ^
security/advanced_monitoring_manager.py:101:1: W293 blank line contains whitespace
        
^
security/advanced_monitoring_manager.py:110:1: W293 blank line contains whitespace
        
^
security/advanced_monitoring_manager.py:115:1: W293 blank line contains whitespace
        
^
security/advanced_monitoring_manager.py:118:1: W293 blank line contains whitespace
        
^
security/advanced_monitoring_manager.py:121:1: W293 blank line contains whitespace
        
^
security/advanced_monitoring_manager.py:153:1: W293 blank line contains whitespace
            
^
security/advanced_monitoring_manager.py:171:1: W293 blank line contains whitespace
            
^
security/advanced_monitoring_manager.py:190:1: W293 blank line contains whitespace
        
^
security/advanced_monitoring_manager.py:193:1: W293 blank line contains whitespace
        
^
security/advanced_monitoring_manager.py:195:80: E501 line too long (100 > 79 characters)
        self.logger.log("INFO", f"Инициализировано {len(self.monitoring_rules)} правил мониторинга")
                                                                               ^
security/advanced_monitoring_manager.py:200:80: E501 line too long (81 > 79 characters)
        main_thread = threading.Thread(target=self._monitoring_loop, daemon=True)
                                                                               ^
security/advanced_monitoring_manager.py:203:1: W293 blank line contains whitespace
        
^
security/advanced_monitoring_manager.py:205:80: E501 line too long (81 > 79 characters)
        cleanup_thread = threading.Thread(target=self._cleanup_loop, daemon=True)
                                                                               ^
security/advanced_monitoring_manager.py:208:1: W293 blank line contains whitespace
        
^
security/advanced_monitoring_manager.py:217:1: W293 blank line contains whitespace
                
^
security/advanced_monitoring_manager.py:220:1: W293 blank line contains whitespace
                
^
security/advanced_monitoring_manager.py:223:1: W293 blank line contains whitespace
                
^
security/advanced_monitoring_manager.py:226:1: W293 blank line contains whitespace
                
^
security/advanced_monitoring_manager.py:229:1: W293 blank line contains whitespace
                
^
security/advanced_monitoring_manager.py:231:1: W293 blank line contains whitespace
                
^
security/advanced_monitoring_manager.py:234:1: W293 blank line contains whitespace
            
^
security/advanced_monitoring_manager.py:242:1: W293 blank line contains whitespace
                
^
security/advanced_monitoring_manager.py:245:80: E501 line too long (123 > 79 characters)
                    while metric_deque and (current_time - metric_deque[0].timestamp.timestamp()) > self.metrics_retention:
                                                                               ^
security/advanced_monitoring_manager.py:247:1: W293 blank line contains whitespace
                
^
security/advanced_monitoring_manager.py:250:51: W291 trailing whitespace
                    alert for alert in self.alerts 
                                                  ^
security/advanced_monitoring_manager.py:251:80: E501 line too long (92 > 79 characters)
                    if (current_time - alert.timestamp.timestamp()) <= self.alerts_retention
                                                                               ^
security/advanced_monitoring_manager.py:253:1: W293 blank line contains whitespace
                
^
security/advanced_monitoring_manager.py:255:1: W293 blank line contains whitespace
                
^
security/advanced_monitoring_manager.py:264:80: E501 line too long (93 > 79 characters)
            self._add_metric("system.cpu_percent", cpu_percent, MetricType.SYSTEM, "percent")
                                                                               ^
security/advanced_monitoring_manager.py:265:1: W293 blank line contains whitespace
            
^
security/advanced_monitoring_manager.py:268:80: E501 line too long (99 > 79 characters)
            self._add_metric("system.memory_percent", memory.percent, MetricType.SYSTEM, "percent")
                                                                               ^
security/advanced_monitoring_manager.py:269:80: E501 line too long (91 > 79 characters)
            self._add_metric("system.memory_used", memory.used, MetricType.SYSTEM, "bytes")
                                                                               ^
security/advanced_monitoring_manager.py:270:80: E501 line too long (101 > 79 characters)
            self._add_metric("system.memory_available", memory.available, MetricType.SYSTEM, "bytes")
                                                                               ^
security/advanced_monitoring_manager.py:271:1: W293 blank line contains whitespace
            
^
security/advanced_monitoring_manager.py:275:80: E501 line too long (95 > 79 characters)
            self._add_metric("system.disk_percent", disk_percent, MetricType.SYSTEM, "percent")
                                                                               ^
security/advanced_monitoring_manager.py:276:80: E501 line too long (87 > 79 characters)
            self._add_metric("system.disk_used", disk.used, MetricType.SYSTEM, "bytes")
                                                                               ^
security/advanced_monitoring_manager.py:277:80: E501 line too long (87 > 79 characters)
            self._add_metric("system.disk_free", disk.free, MetricType.SYSTEM, "bytes")
                                                                               ^
security/advanced_monitoring_manager.py:278:1: W293 blank line contains whitespace
            
^
security/advanced_monitoring_manager.py:281:80: E501 line too long (105 > 79 characters)
            self._add_metric("system.network_bytes_sent", net_io.bytes_sent, MetricType.NETWORK, "bytes")
                                                                               ^
security/advanced_monitoring_manager.py:282:80: E501 line too long (105 > 79 characters)
            self._add_metric("system.network_bytes_recv", net_io.bytes_recv, MetricType.NETWORK, "bytes")
                                                                               ^
security/advanced_monitoring_manager.py:283:1: W293 blank line contains whitespace
            
^
security/advanced_monitoring_manager.py:295:1: W293 blank line contains whitespace
            
^
security/advanced_monitoring_manager.py:296:80: E501 line too long (99 > 79 characters)
            self._add_metric("security.failed_logins", failed_logins, MetricType.SECURITY, "count")
                                                                               ^
security/advanced_monitoring_manager.py:297:80: E501 line too long (107 > 79 characters)
            self._add_metric("security.suspicious_events", suspicious_events, MetricType.SECURITY, "count")
                                                                               ^
security/advanced_monitoring_manager.py:298:80: E501 line too long (101 > 79 characters)
            self._add_metric("security.active_threats", active_threats, MetricType.SECURITY, "count")
                                                                               ^
security/advanced_monitoring_manager.py:299:1: W293 blank line contains whitespace
            
^
security/advanced_monitoring_manager.py:308:80: E501 line too long (107 > 79 characters)
            self._add_metric("performance.response_time", response_time, MetricType.PERFORMANCE, "seconds")
                                                                               ^
security/advanced_monitoring_manager.py:309:1: W293 blank line contains whitespace
            
^
security/advanced_monitoring_manager.py:312:80: E501 line too long (108 > 79 characters)
            self._add_metric("performance.active_connections", connections, MetricType.PERFORMANCE, "count")
                                                                               ^
security/advanced_monitoring_manager.py:313:1: W293 blank line contains whitespace
            
^
security/advanced_monitoring_manager.py:316:80: E501 line too long (105 > 79 characters)
            self._add_metric("performance.process_count", process_count, MetricType.PERFORMANCE, "count")
                                                                               ^
security/advanced_monitoring_manager.py:317:1: W293 blank line contains whitespace
            
^
security/advanced_monitoring_manager.py:319:80: E501 line too long (84 > 79 characters)
            self.logger.log("ERROR", f"Ошибка сбора метрик производительности: {e}")
                                                                               ^
security/advanced_monitoring_manager.py:328:1: W293 blank line contains whitespace
            
^
security/advanced_monitoring_manager.py:329:80: E501 line too long (101 > 79 characters)
            self._add_metric("api.requests_per_second", api_requests, MetricType.API, "requests/sec")
                                                                               ^
security/advanced_monitoring_manager.py:330:80: E501 line too long (88 > 79 characters)
            self._add_metric("api.error_rate", api_errors, MetricType.API, "errors/sec")
                                                                               ^
security/advanced_monitoring_manager.py:331:80: E501 line too long (95 > 79 characters)
            self._add_metric("api.response_time", api_response_time, MetricType.API, "seconds")
                                                                               ^
security/advanced_monitoring_manager.py:332:1: W293 blank line contains whitespace
            
^
security/advanced_monitoring_manager.py:336:80: E501 line too long (121 > 79 characters)
    def _add_metric(self, name: str, value: float, metric_type: MetricType, unit: str = "", tags: Dict[str, str] = None):
                                                                               ^
security/advanced_monitoring_manager.py:346:1: W293 blank line contains whitespace
        
^
security/advanced_monitoring_manager.py:355:1: W293 blank line contains whitespace
            
^
security/advanced_monitoring_manager.py:357:80: E501 line too long (102 > 79 characters)
            if rule.last_triggered and (datetime.now() - rule.last_triggered).seconds < rule.cooldown:
                                                                               ^
security/advanced_monitoring_manager.py:359:1: W293 blank line contains whitespace
            
^
security/advanced_monitoring_manager.py:361:80: E501 line too long (90 > 79 characters)
            if rule.metric_name not in self.metrics or not self.metrics[rule.metric_name]:
                                                                               ^
security/advanced_monitoring_manager.py:363:1: W293 blank line contains whitespace
            
^
security/advanced_monitoring_manager.py:366:1: W293 blank line contains whitespace
            
^
security/advanced_monitoring_manager.py:368:80: E501 line too long (87 > 79 characters)
            if self._evaluate_condition(current_value, rule.condition, rule.threshold):
                                                                               ^
security/advanced_monitoring_manager.py:371:80: E501 line too long (90 > 79 characters)
    def _evaluate_condition(self, value: float, condition: str, threshold: float) -> bool:
                                                                               ^
security/advanced_monitoring_manager.py:392:80: E501 line too long (102 > 79 characters)
            message=f"Метрика {rule.metric_name} = {current_value} {rule.condition} {rule.threshold}",
                                                                               ^
security/advanced_monitoring_manager.py:400:1: W293 blank line contains whitespace
        
^
security/advanced_monitoring_manager.py:404:1: W293 blank line contains whitespace
        
^
security/advanced_monitoring_manager.py:411:1: W293 blank line contains whitespace
        
^
security/advanced_monitoring_manager.py:418:80: E501 line too long (102 > 79 characters)
            self.stats["active_rules"] = len([r for r in self.monitoring_rules.values() if r.enabled])
                                                                               ^
security/advanced_monitoring_manager.py:419:80: E501 line too long (82 > 79 characters)
            self.logger.log("INFO", f"Добавлено правило мониторинга: {rule.name}")
                                                                               ^
security/advanced_monitoring_manager.py:430:80: E501 line too long (106 > 79 characters)
                self.stats["active_rules"] = len([r for r in self.monitoring_rules.values() if r.enabled])
                                                                               ^
security/advanced_monitoring_manager.py:431:80: E501 line too long (82 > 79 characters)
                self.logger.log("INFO", f"Удалено правило мониторинга: {rule_id}")
                                                                               ^
security/advanced_monitoring_manager.py:443:80: E501 line too long (97 > 79 characters)
    def get_metrics(self, metric_name: Optional[str] = None, limit: int = 100) -> Dict[str, Any]:
                                                                               ^
security/advanced_monitoring_manager.py:460:1: W293 blank line contains whitespace
        
^
security/advanced_monitoring_manager.py:473:1: W293 blank line contains whitespace
        
^
security/advanced_monitoring_manager.py:476:80: E501 line too long (108 > 79 characters)
    def get_alerts(self, severity: Optional[AlertSeverity] = None, limit: int = 50) -> List[Dict[str, Any]]:
                                                                               ^
security/advanced_monitoring_manager.py:479:1: W293 blank line contains whitespace
        
^
security/advanced_monitoring_manager.py:482:1: W293 blank line contains whitespace
        
^
security/advanced_monitoring_manager.py:485:1: W293 blank line contains whitespace
        
^
security/advanced_monitoring_manager.py:505:1: W293 blank line contains whitespace
        
^
security/advanced_monitoring_manager.py:515:1: W293 blank line contains whitespace
        
^
security/advanced_monitoring_manager.py:520:1: W293 blank line contains whitespace
        
^
security/advanced_monitoring_manager.py:525:80: E501 line too long (107 > 79 characters)
                "last_update": self.stats["last_update"].isoformat() if self.stats["last_update"] else None
                                                                               ^
security/advanced_monitoring_manager.py:551:80: E501 line too long (103 > 79 characters)
            "last_update": self.stats["last_update"].isoformat() if self.stats["last_update"] else None
                                                                               ^
security/advanced_monitoring_manager.py:558:1: W293 blank line contains whitespace
        
^
security/advanced_monitoring_manager.py:563:1: W293 blank line contains whitespace
        
^
security/advanced_monitoring_manager.py:568:58: W292 no newline at end of file
advanced_monitoring_manager = AdvancedMonitoringManager()                                                         ^
security/ai/__init__.py:30:2: W292 no newline at end of file
] ^
security/ai/super_ai_support_assistant.py:16:1: F401 'hashlib' imported but unused
import hashlib
^
security/ai/super_ai_support_assistant.py:25:1: E302 expected 2 blank lines, found 1
class SupportCategory(Enum):
^
security/ai/super_ai_support_assistant.py:48:1: E302 expected 2 blank lines, found 1
class EmotionType(Enum):
^
security/ai/super_ai_support_assistant.py:61:1: E302 expected 2 blank lines, found 1
class PriorityLevel(Enum):
^
security/ai/super_ai_support_assistant.py:68:1: E302 expected 2 blank lines, found 1
class SupportStatus(Enum):
^
security/ai/super_ai_support_assistant.py:76:1: E302 expected 2 blank lines, found 1
class Language(Enum):
^
security/ai/super_ai_support_assistant.py:91:1: E302 expected 2 blank lines, found 1
class UserProfile:
^
security/ai/super_ai_support_assistant.py:125:1: E302 expected 2 blank lines, found 1
class SupportRequest:
^
security/ai/super_ai_support_assistant.py:127:80: E501 line too long (98 > 79 characters)
    def __init__(self, request_id, user_id, category, description, priority=PriorityLevel.MEDIUM):
                                                                               ^
security/ai/super_ai_support_assistant.py:150:80: E501 line too long (86 > 79 characters)
            "resolved_at": self.resolved_at.isoformat() if self.resolved_at else None,
                                                                               ^
security/ai/super_ai_support_assistant.py:157:1: E302 expected 2 blank lines, found 1
class EmotionalAnalysis:
^
security/ai/super_ai_support_assistant.py:175:1: E302 expected 2 blank lines, found 1
class SupportMetrics:
^
security/ai/super_ai_support_assistant.py:203:1: E302 expected 2 blank lines, found 1
class SuperAISupportAssistant:
^
security/ai/super_ai_support_assistant.py:206:1: W293 blank line contains whitespace
    """
    Супер AI-ассистент поддержки - самый крутой в мире!
    
    Универсальный AI-помощник с поддержкой 20+ сфер деятельности:
    - Кибербезопасность и защита данных
    - Семейная поддержка и психология
    - Медицинская помощь и здоровье
    - Образование и обучение
    - Финансы и бизнес
    - Технологии и ремонт
    - И многое другое...
    
    Возможности:
    - Эмоциональный анализ и поддержка
    - Многоязычная поддержка (12 языков)
    - Персонализированные рекомендации
    - Машинное обучение и адаптация
    - 100% автоматическое решение проблем
    - Интеграция с семейным психологом и врачом
    
    Автор: ALADDIN Security Team
    Версия: 1.0
    """
^
security/ai/super_ai_support_assistant.py:215:1: W293 blank line contains whitespace
    """
    Супер AI-ассистент поддержки - самый крутой в мире!
    
    Универсальный AI-помощник с поддержкой 20+ сфер деятельности:
    - Кибербезопасность и защита данных
    - Семейная поддержка и психология
    - Медицинская помощь и здоровье
    - Образование и обучение
    - Финансы и бизнес
    - Технологии и ремонт
    - И многое другое...
    
    Возможности:
    - Эмоциональный анализ и поддержка
    - Многоязычная поддержка (12 языков)
    - Персонализированные рекомендации
    - Машинное обучение и адаптация
    - 100% автоматическое решение проблем
    - Интеграция с семейным психологом и врачом
    
    Автор: ALADDIN Security Team
    Версия: 1.0
    """
^
security/ai/super_ai_support_assistant.py:223:1: W293 blank line contains whitespace
    """
    Супер AI-ассистент поддержки - самый крутой в мире!
    
    Универсальный AI-помощник с поддержкой 20+ сфер деятельности:
    - Кибербезопасность и защита данных
    - Семейная поддержка и психология
    - Медицинская помощь и здоровье
    - Образование и обучение
    - Финансы и бизнес
    - Технологии и ремонт
    - И многое другое...
    
    Возможности:
    - Эмоциональный анализ и поддержка
    - Многоязычная поддержка (12 языков)
    - Персонализированные рекомендации
    - Машинное обучение и адаптация
    - 100% автоматическое решение проблем
    - Интеграция с семейным психологом и врачом
    
    Автор: ALADDIN Security Team
    Версия: 1.0
    """
^
security/ai/super_ai_support_assistant.py:227:1: W293 blank line contains whitespace
    
^
security/ai/super_ai_support_assistant.py:232:1: W293 blank line contains whitespace
        
^
security/ai/super_ai_support_assistant.py:240:1: W293 blank line contains whitespace
        
^
security/ai/super_ai_support_assistant.py:248:1: W293 blank line contains whitespace
        
^
security/ai/super_ai_support_assistant.py:254:1: W293 blank line contains whitespace
        
^
security/ai/super_ai_support_assistant.py:261:1: W293 blank line contains whitespace
        
^
security/ai/super_ai_support_assistant.py:269:1: W293 blank line contains whitespace
        
^
security/ai/super_ai_support_assistant.py:276:1: W293 blank line contains whitespace
            
^
security/ai/super_ai_support_assistant.py:279:1: W293 blank line contains whitespace
            
^
security/ai/super_ai_support_assistant.py:282:1: W293 blank line contains whitespace
            
^
security/ai/super_ai_support_assistant.py:285:1: W293 blank line contains whitespace
            
^
security/ai/super_ai_support_assistant.py:288:1: W293 blank line contains whitespace
            
^
security/ai/super_ai_support_assistant.py:291:1: W293 blank line contains whitespace
            
^
security/ai/super_ai_support_assistant.py:295:1: W293 blank line contains whitespace
            
^
security/ai/super_ai_support_assistant.py:297:80: E501 line too long (96 > 79 characters)
            self.logger.error("Ошибка инициализации SuperAISupportAssistant: {}".format(str(e)))
                                                                               ^
security/ai/super_ai_support_assistant.py:308:80: E501 line too long (89 > 79 characters)
                "languages_supported": [lang.value for lang in self.supported_languages],
                                                                               ^
security/ai/super_ai_support_assistant.py:309:80: E501 line too long (82 > 79 characters)
                "features": ["text_analysis", "voice_analysis", "facial_analysis"]
                                                                               ^
security/ai/super_ai_support_assistant.py:311:1: W293 blank line contains whitespace
            
^
security/ai/super_ai_support_assistant.py:318:1: W293 blank line contains whitespace
            
^
security/ai/super_ai_support_assistant.py:324:1: W293 blank line contains whitespace
            
^
security/ai/super_ai_support_assistant.py:330:1: W293 blank line contains whitespace
            
^
security/ai/super_ai_support_assistant.py:337:1: W293 blank line contains whitespace
            
^
security/ai/super_ai_support_assistant.py:344:1: W293 blank line contains whitespace
            
^
security/ai/super_ai_support_assistant.py:346:1: W293 blank line contains whitespace
            
^
security/ai/super_ai_support_assistant.py:348:80: E501 line too long (83 > 79 characters)
            self.logger.error("Ошибка инициализации AI-моделей: {}".format(str(e)))
                                                                               ^
security/ai/super_ai_support_assistant.py:393:1: W293 blank line contains whitespace
            
^
security/ai/super_ai_support_assistant.py:394:80: E501 line too long (100 > 79 characters)
            self.logger.info("База знаний загружена: {} категорий".format(len(self.knowledge_base)))
                                                                               ^
security/ai/super_ai_support_assistant.py:395:1: W293 blank line contains whitespace
            
^
security/ai/super_ai_support_assistant.py:405:80: E501 line too long (96 > 79 characters)
                self.logger.info("Инициализация языковой модели для: {}".format(language.value))
                                                                               ^
security/ai/super_ai_support_assistant.py:406:1: W293 blank line contains whitespace
            
^
security/ai/super_ai_support_assistant.py:407:80: E501 line too long (116 > 79 characters)
            self.logger.info("Языковые модели инициализированы для {} языков".format(len(self.supported_languages)))
                                                                               ^
security/ai/super_ai_support_assistant.py:408:1: W293 blank line contains whitespace
            
^
security/ai/super_ai_support_assistant.py:410:80: E501 line too long (89 > 79 characters)
            self.logger.error("Ошибка инициализации языковых моделей: {}".format(str(e)))
                                                                               ^
security/ai/super_ai_support_assistant.py:425:1: W293 blank line contains whitespace
            
^
security/ai/super_ai_support_assistant.py:427:1: W293 blank line contains whitespace
            
^
security/ai/super_ai_support_assistant.py:429:80: E501 line too long (91 > 79 characters)
            self.logger.error("Ошибка настройки эмоционального анализа: {}".format(str(e)))
                                                                               ^
security/ai/super_ai_support_assistant.py:443:1: W293 blank line contains whitespace
            
^
security/ai/super_ai_support_assistant.py:445:1: W293 blank line contains whitespace
            
^
security/ai/super_ai_support_assistant.py:447:80: E501 line too long (85 > 79 characters)
            self.logger.error("Ошибка настройки системы обучения: {}".format(str(e)))
                                                                               ^
security/ai/super_ai_support_assistant.py:453:1: W293 blank line contains whitespace
        """
        Создание профиля пользователя
        
        Args:
            user_id (str): Уникальный идентификатор пользователя
            name (str): Имя пользователя
            age (int): Возраст пользователя
            preferences (dict): Предпочтения пользователя
            
        Returns:
            bool: True если профиль создан успешно, False в противном случае
            
        Raises:
            ValueError: Если user_id пустой или некорректный
            TypeError: Если age не является числом
        """
^
security/ai/super_ai_support_assistant.py:459:1: W293 blank line contains whitespace
        """
        Создание профиля пользователя
        
        Args:
            user_id (str): Уникальный идентификатор пользователя
            name (str): Имя пользователя
            age (int): Возраст пользователя
            preferences (dict): Предпочтения пользователя
            
        Returns:
            bool: True если профиль создан успешно, False в противном случае
            
        Raises:
            ValueError: Если user_id пустой или некорректный
            TypeError: Если age не является числом
        """
^
security/ai/super_ai_support_assistant.py:462:1: W293 blank line contains whitespace
        """
        Создание профиля пользователя
        
        Args:
            user_id (str): Уникальный идентификатор пользователя
            name (str): Имя пользователя
            age (int): Возраст пользователя
            preferences (dict): Предпочтения пользователя
            
        Returns:
            bool: True если профиль создан успешно, False в противном случае
            
        Raises:
            ValueError: Если user_id пустой или некорректный
            TypeError: Если age не является числом
        """
^
security/ai/super_ai_support_assistant.py:471:1: W293 blank line contains whitespace
            
^
security/ai/super_ai_support_assistant.py:474:1: W293 blank line contains whitespace
            
^
security/ai/super_ai_support_assistant.py:477:1: W293 blank line contains whitespace
            
^
security/ai/super_ai_support_assistant.py:481:1: W293 blank line contains whitespace
            
^
security/ai/super_ai_support_assistant.py:484:1: W293 blank line contains whitespace
            
^
security/ai/super_ai_support_assistant.py:486:80: E501 line too long (89 > 79 characters)
            self.logger.error("Ошибка валидации при создании профиля: {}".format(str(e)))
                                                                               ^
security/ai/super_ai_support_assistant.py:489:80: E501 line too long (91 > 79 characters)
            self.logger.error("Ошибка типа данных при создании профиля: {}".format(str(e)))
                                                                               ^
security/ai/super_ai_support_assistant.py:492:80: E501 line too long (91 > 79 characters)
            self.logger.error("Неожиданная ошибка при создании профиля: {}".format(str(e)))
                                                                               ^
security/ai/super_ai_support_assistant.py:498:1: W293 blank line contains whitespace
        """
        Анализ эмоций в тексте
        
        Анализирует эмоциональное состояние пользователя на основе текста
        с использованием AI-моделей и ключевых слов.
        
        Args:
            text (str): Текст для анализа эмоций
            user_id (str, optional): ID пользователя для персонализации
            
        Returns:
            EmotionalAnalysis: Результат анализа эмоций с типом, уверенностью и рекомендациями
            
        Raises:
            ValueError: Если text пустой или некорректный
            TypeError: Если user_id не строка (когда указан)
            
        Example:
            >>> assistant = SuperAISupportAssistant()
            >>> result = assistant.analyze_emotion("Я очень рад сегодня!")
            >>> print(result.emotion_type)  # EmotionType.HAPPY
            >>> print(result.confidence)    # 0.8
        """
^
security/ai/super_ai_support_assistant.py:501:1: W293 blank line contains whitespace
        """
        Анализ эмоций в тексте
        
        Анализирует эмоциональное состояние пользователя на основе текста
        с использованием AI-моделей и ключевых слов.
        
        Args:
            text (str): Текст для анализа эмоций
            user_id (str, optional): ID пользователя для персонализации
            
        Returns:
            EmotionalAnalysis: Результат анализа эмоций с типом, уверенностью и рекомендациями
            
        Raises:
            ValueError: Если text пустой или некорректный
            TypeError: Если user_id не строка (когда указан)
            
        Example:
            >>> assistant = SuperAISupportAssistant()
            >>> result = assistant.analyze_emotion("Я очень рад сегодня!")
            >>> print(result.emotion_type)  # EmotionType.HAPPY
            >>> print(result.confidence)    # 0.8
        """
^
security/ai/super_ai_support_assistant.py:505:1: W293 blank line contains whitespace
        """
        Анализ эмоций в тексте
        
        Анализирует эмоциональное состояние пользователя на основе текста
        с использованием AI-моделей и ключевых слов.
        
        Args:
            text (str): Текст для анализа эмоций
            user_id (str, optional): ID пользователя для персонализации
            
        Returns:
            EmotionalAnalysis: Результат анализа эмоций с типом, уверенностью и рекомендациями
            
        Raises:
            ValueError: Если text пустой или некорректный
            TypeError: Если user_id не строка (когда указан)
            
        Example:
            >>> assistant = SuperAISupportAssistant()
            >>> result = assistant.analyze_emotion("Я очень рад сегодня!")
            >>> print(result.emotion_type)  # EmotionType.HAPPY
            >>> print(result.confidence)    # 0.8
        """
^
security/ai/super_ai_support_assistant.py:507:80: E501 line too long (94 > 79 characters)
        """
        Анализ эмоций в тексте
        
        Анализирует эмоциональное состояние пользователя на основе текста
        с использованием AI-моделей и ключевых слов.
        
        Args:
            text (str): Текст для анализа эмоций
            user_id (str, optional): ID пользователя для персонализации
            
        Returns:
            EmotionalAnalysis: Результат анализа эмоций с типом, уверенностью и рекомендациями
            
        Raises:
            ValueError: Если text пустой или некорректный
            TypeError: Если user_id не строка (когда указан)
            
        Example:
            >>> assistant = SuperAISupportAssistant()
            >>> result = assistant.analyze_emotion("Я очень рад сегодня!")
            >>> print(result.emotion_type)  # EmotionType.HAPPY
            >>> print(result.confidence)    # 0.8
        """
           
                              
        
                           ^
security/ai/super_ai_support_assistant.py:508:1: W293 blank line contains whitespace
        """
        Анализ эмоций в тексте
        
        Анализирует эмоциональное состояние пользователя на основе текста
        с использованием AI-моделей и ключевых слов.
        
        Args:
            text (str): Текст для анализа эмоций
            user_id (str, optional): ID пользователя для персонализации
            
        Returns:
            EmotionalAnalysis: Результат анализа эмоций с типом, уверенностью и рекомендациями
            
        Raises:
            ValueError: Если text пустой или некорректный
            TypeError: Если user_id не строка (когда указан)
            
        Example:
            >>> assistant = SuperAISupportAssistant()
            >>> result = assistant.analyze_emotion("Я очень рад сегодня!")
            >>> print(result.emotion_type)  # EmotionType.HAPPY
            >>> print(result.confidence)    # 0.8
        """
^
security/ai/super_ai_support_assistant.py:512:1: W293 blank line contains whitespace
        """
        Анализ эмоций в тексте
        
        Анализирует эмоциональное состояние пользователя на основе текста
        с использованием AI-моделей и ключевых слов.
        
        Args:
            text (str): Текст для анализа эмоций
            user_id (str, optional): ID пользователя для персонализации
            
        Returns:
            EmotionalAnalysis: Результат анализа эмоций с типом, уверенностью и рекомендациями
            
        Raises:
            ValueError: Если text пустой или некорректный
            TypeError: Если user_id не строка (когда указан)
            
        Example:
            >>> assistant = SuperAISupportAssistant()
            >>> result = assistant.analyze_emotion("Я очень рад сегодня!")
            >>> print(result.emotion_type)  # EmotionType.HAPPY
            >>> print(result.confidence)    # 0.8
        """
^
security/ai/super_ai_support_assistant.py:523:1: W293 blank line contains whitespace
            
^
security/ai/super_ai_support_assistant.py:526:1: W293 blank line contains whitespace
            
^
security/ai/super_ai_support_assistant.py:527:80: E501 line too long (81 > 79 characters)
            # Симуляция анализа эмоций (в реальной системе здесь будет AI-модель)
                                                                               ^
security/ai/super_ai_support_assistant.py:528:13: F841 local variable 'emotions' is assigned to but never used
            emotions = [EmotionType.HAPPY, EmotionType.SAD, EmotionType.ANGRY, 
            ^
security/ai/super_ai_support_assistant.py:528:79: W291 trailing whitespace
            emotions = [EmotionType.HAPPY, EmotionType.SAD, EmotionType.ANGRY, 
                                                                              ^
security/ai/super_ai_support_assistant.py:529:24: E128 continuation line under-indented for visual indent
                       EmotionType.FEARFUL, EmotionType.STRESSED, EmotionType.NEUTRAL]
                       ^
security/ai/super_ai_support_assistant.py:529:80: E501 line too long (86 > 79 characters)
                       EmotionType.FEARFUL, EmotionType.STRESSED, EmotionType.NEUTRAL]
                                                                               ^
security/ai/super_ai_support_assistant.py:530:1: W293 blank line contains whitespace
            
^
security/ai/super_ai_support_assistant.py:533:80: E501 line too long (83 > 79 characters)
                EmotionType.HAPPY: ["хорошо", "отлично", "рад", "счастлив", "ура"],
                                                                               ^
security/ai/super_ai_support_assistant.py:537:80: E501 line too long (84 > 79 characters)
                EmotionType.STRESSED: ["стресс", "напряжен", "устал", "перегружен"],
                                                                               ^
security/ai/super_ai_support_assistant.py:540:1: W293 blank line contains whitespace
            
^
security/ai/super_ai_support_assistant.py:543:1: W293 blank line contains whitespace
            
^
security/ai/super_ai_support_assistant.py:553:1: W293 blank line contains whitespace
            
^
security/ai/super_ai_support_assistant.py:559:80: E501 line too long (81 > 79 characters)
                triggers=[]  # В реальной системе здесь будут выявленные триггеры
                                                                               ^
security/ai/super_ai_support_assistant.py:561:1: W293 blank line contains whitespace
            
^
security/ai/super_ai_support_assistant.py:564:1: W293 blank line contains whitespace
            
^
security/ai/super_ai_support_assistant.py:569:1: W293 blank line contains whitespace
            
^
security/ai/super_ai_support_assistant.py:570:80: E501 line too long (87 > 79 characters)
            self.logger.info("Анализ эмоций завершен: {} (уверенность: {:.2f})".format(
                                                                               ^
security/ai/super_ai_support_assistant.py:572:1: W293 blank line contains whitespace
            
^
security/ai/super_ai_support_assistant.py:574:1: W293 blank line contains whitespace
            
^
security/ai/super_ai_support_assistant.py:576:80: E501 line too long (87 > 79 characters)
            self.logger.error("Ошибка валидации при анализе эмоций: {}".format(str(e)))
                                                                               ^
security/ai/super_ai_support_assistant.py:579:80: E501 line too long (89 > 79 characters)
            self.logger.error("Ошибка типа данных при анализе эмоций: {}".format(str(e)))
                                                                               ^
security/ai/super_ai_support_assistant.py:582:80: E501 line too long (89 > 79 characters)
            self.logger.error("Неожиданная ошибка при анализе эмоций: {}".format(str(e)))
                                                                               ^
security/ai/super_ai_support_assistant.py:585:80: E501 line too long (101 > 79 characters)
    def process_support_request(self, user_id, category, description, priority=PriorityLevel.MEDIUM):
                                                                               ^
security/ai/super_ai_support_assistant.py:588:1: W293 blank line contains whitespace
        """
        Обработка запроса на поддержку
        
        Обрабатывает запросы пользователей на поддержку с анализом эмоций,
        персонализацией ответов и автоматическим решением проблем.
        
        Args:
            user_id (str): Уникальный идентификатор пользователя
            category (SupportCategory): Категория запроса поддержки
            description (str): Описание проблемы или запроса
            priority (PriorityLevel): Приоритет запроса (по умолчанию MEDIUM)
            
        Returns:
            SupportRequest: Обработанный запрос с решением и рекомендациями
            
        Raises:
            ValueError: Если user_id, category или description некорректны
            TypeError: Если priority не является PriorityLevel
            
        Example:
            >>> assistant = SuperAISupportAssistant()
            >>> request = assistant.process_support_request(
            ...     "user123", 
            ...     SupportCategory.CYBERSECURITY, 
            ...     "Мой компьютер работает медленно"
            ... )
            >>> print(request.status)  # "RESOLVED"
        """
^
security/ai/super_ai_support_assistant.py:591:1: W293 blank line contains whitespace
        """
        Обработка запроса на поддержку
        
        Обрабатывает запросы пользователей на поддержку с анализом эмоций,
        персонализацией ответов и автоматическим решением проблем.
        
        Args:
            user_id (str): Уникальный идентификатор пользователя
            category (SupportCategory): Категория запроса поддержки
            description (str): Описание проблемы или запроса
            priority (PriorityLevel): Приоритет запроса (по умолчанию MEDIUM)
            
        Returns:
            SupportRequest: Обработанный запрос с решением и рекомендациями
            
        Raises:
            ValueError: Если user_id, category или description некорректны
            TypeError: Если priority не является PriorityLevel
            
        Example:
            >>> assistant = SuperAISupportAssistant()
            >>> request = assistant.process_support_request(
            ...     "user123", 
            ...     SupportCategory.CYBERSECURITY, 
            ...     "Мой компьютер работает медленно"
            ... )
            >>> print(request.status)  # "RESOLVED"
        """
^
security/ai/super_ai_support_assistant.py:597:1: W293 blank line contains whitespace
        """
        Обработка запроса на поддержку
        
        Обрабатывает запросы пользователей на поддержку с анализом эмоций,
        персонализацией ответов и автоматическим решением проблем.
        
        Args:
            user_id (str): Уникальный идентификатор пользователя
            category (SupportCategory): Категория запроса поддержки
            description (str): Описание проблемы или запроса
            priority (PriorityLevel): Приоритет запроса (по умолчанию MEDIUM)
            
        Returns:
            SupportRequest: Обработанный запрос с решением и рекомендациями
            
        Raises:
            ValueError: Если user_id, category или description некорректны
            TypeError: Если priority не является PriorityLevel
            
        Example:
            >>> assistant = SuperAISupportAssistant()
            >>> request = assistant.process_support_request(
            ...     "user123", 
            ...     SupportCategory.CYBERSECURITY, 
            ...     "Мой компьютер работает медленно"
            ... )
            >>> print(request.status)  # "RESOLVED"
        """
^
security/ai/super_ai_support_assistant.py:600:1: W293 blank line contains whitespace
        """
        Обработка запроса на поддержку
        
        Обрабатывает запросы пользователей на поддержку с анализом эмоций,
        персонализацией ответов и автоматическим решением проблем.
        
        Args:
            user_id (str): Уникальный идентификатор пользователя
            category (SupportCategory): Категория запроса поддержки
            description (str): Описание проблемы или запроса
            priority (PriorityLevel): Приоритет запроса (по умолчанию MEDIUM)
            
        Returns:
            SupportRequest: Обработанный запрос с решением и рекомендациями
            
        Raises:
            ValueError: Если user_id, category или description некорректны
            TypeError: Если priority не является PriorityLevel
            
        Example:
            >>> assistant = SuperAISupportAssistant()
            >>> request = assistant.process_support_request(
            ...     "user123", 
            ...     SupportCategory.CYBERSECURITY, 
            ...     "Мой компьютер работает медленно"
            ... )
            >>> print(request.status)  # "RESOLVED"
        """
^
security/ai/super_ai_support_assistant.py:604:1: W293 blank line contains whitespace
        """
        Обработка запроса на поддержку
        
        Обрабатывает запросы пользователей на поддержку с анализом эмоций,
        персонализацией ответов и автоматическим решением проблем.
        
        Args:
            user_id (str): Уникальный идентификатор пользователя
            category (SupportCategory): Категория запроса поддержки
            description (str): Описание проблемы или запроса
            priority (PriorityLevel): Приоритет запроса (по умолчанию MEDIUM)
            
        Returns:
            SupportRequest: Обработанный запрос с решением и рекомендациями
            
        Raises:
            ValueError: Если user_id, category или description некорректны
            TypeError: Если priority не является PriorityLevel
            
        Example:
            >>> assistant = SuperAISupportAssistant()
            >>> request = assistant.process_support_request(
            ...     "user123", 
            ...     SupportCategory.CYBERSECURITY, 
            ...     "Мой компьютер работает медленно"
            ... )
            >>> print(request.status)  # "RESOLVED"
        """
^
security/ai/super_ai_support_assistant.py:608:31: W291 trailing whitespace
        """
        Обработка запроса на поддержку
        
        Обрабатывает запросы пользователей на поддержку с анализом эмоций,
        персонализацией ответов и автоматическим решением проблем.
        
        Args:
            user_id (str): Уникальный идентификатор пользователя
            category (SupportCategory): Категория запроса поддержки
            description (str): Описание проблемы или запроса
            priority (PriorityLevel): Приоритет запроса (по умолчанию MEDIUM)
            
        Returns:
            SupportRequest: Обработанный запрос с решением и рекомендациями
            
        Raises:
            ValueError: Если user_id, category или description некорректны
            TypeError: Если priority не является PriorityLevel
            
        Example:
            >>> assistant = SuperAISupportAssistant()
            >>> request = assistant.process_support_request(
            ...     "user123", 
            ...     SupportCategory.CYBERSECURITY, 
            ...     "Мой компьютер работает медленно"
            ... )
            >>> print(request.status)  # "RESOLVED"
        """
           
                  ^
security/ai/super_ai_support_assistant.py:609:51: W291 trailing whitespace
        """
        Обработка запроса на поддержку
        
        Обрабатывает запросы пользователей на поддержку с анализом эмоций,
        персонализацией ответов и автоматическим решением проблем.
        
        Args:
            user_id (str): Уникальный идентификатор пользователя
            category (SupportCategory): Категория запроса поддержки
            description (str): Описание проблемы или запроса
            priority (PriorityLevel): Приоритет запроса (по умолчанию MEDIUM)
            
        Returns:
            SupportRequest: Обработанный запрос с решением и рекомендациями
            
        Raises:
            ValueError: Если user_id, category или description некорректны
            TypeError: Если priority не является PriorityLevel
            
        Example:
            >>> assistant = SuperAISupportAssistant()
            >>> request = assistant.process_support_request(
            ...     "user123", 
            ...     SupportCategory.CYBERSECURITY, 
            ...     "Мой компьютер работает медленно"
            ... )
            >>> print(request.status)  # "RESOLVED"
        """
           
                                      ^
security/ai/super_ai_support_assistant.py:618:1: W293 blank line contains whitespace
            
^
security/ai/super_ai_support_assistant.py:620:80: E501 line too long (83 > 79 characters)
                raise TypeError("category должен быть экземпляром SupportCategory")
                                                                               ^
security/ai/super_ai_support_assistant.py:621:1: W293 blank line contains whitespace
            
^
security/ai/super_ai_support_assistant.py:624:1: W293 blank line contains whitespace
            
^
security/ai/super_ai_support_assistant.py:626:80: E501 line too long (81 > 79 characters)
                raise TypeError("priority должен быть экземпляром PriorityLevel")
                                                                               ^
security/ai/super_ai_support_assistant.py:627:1: W293 blank line contains whitespace
            
^
security/ai/super_ai_support_assistant.py:630:80: E501 line too long (90 > 79 characters)
            request = SupportRequest(request_id, user_id, category, description, priority)
                                                                               ^
security/ai/super_ai_support_assistant.py:631:1: W293 blank line contains whitespace
            
^
security/ai/super_ai_support_assistant.py:636:80: E501 line too long (83 > 79 characters)
                request.context["emotional_intensity"] = emotion_analysis.intensity
                                                                               ^
security/ai/super_ai_support_assistant.py:637:1: W293 blank line contains whitespace
            
^
security/ai/super_ai_support_assistant.py:639:80: E501 line too long (127 > 79 characters)
            if emotion_analysis and emotion_analysis.emotion in [EmotionType.ANGRY, EmotionType.FEARFUL, EmotionType.STRESSED]:
                                                                               ^
security/ai/super_ai_support_assistant.py:641:1: W293 blank line contains whitespace
            
^
security/ai/super_ai_support_assistant.py:646:1: W293 blank line contains whitespace
            
^
security/ai/super_ai_support_assistant.py:654:1: W293 blank line contains whitespace
                
^
security/ai/super_ai_support_assistant.py:656:80: E501 line too long (92 > 79 characters)
                resolution_time = (request.resolved_at - request.created_at).total_seconds()
                                                                               ^
security/ai/super_ai_support_assistant.py:658:80: E501 line too long (111 > 79 characters)
                    (self.metrics.avg_resolution_time * (self.metrics.resolved_requests - 1) + resolution_time) 
                                                                               ^
security/ai/super_ai_support_assistant.py:658:112: W291 trailing whitespace
                    (self.metrics.avg_resolution_time * (self.metrics.resolved_requests - 1) + resolution_time) 
                                                                                                               ^
security/ai/super_ai_support_assistant.py:661:1: W293 blank line contains whitespace
                
^
security/ai/super_ai_support_assistant.py:662:80: E501 line too long (84 > 79 characters)
                self.logger.info("Запрос {} решен автоматически".format(request_id))
                                                                               ^
security/ai/super_ai_support_assistant.py:665:80: E501 line too long (108 > 79 characters)
                self.metrics.escalation_rate = self.metrics.escalated_requests / self.metrics.total_requests
                                                                               ^
security/ai/super_ai_support_assistant.py:667:1: W293 blank line contains whitespace
            
^
security/ai/super_ai_support_assistant.py:669:1: W293 blank line contains whitespace
            
^
security/ai/super_ai_support_assistant.py:671:80: E501 line too long (90 > 79 characters)
            self.logger.error("Ошибка валидации при обработке запроса: {}".format(str(e)))
                                                                               ^
security/ai/super_ai_support_assistant.py:674:80: E501 line too long (92 > 79 characters)
            self.logger.error("Ошибка типа данных при обработке запроса: {}".format(str(e)))
                                                                               ^
security/ai/super_ai_support_assistant.py:677:80: E501 line too long (92 > 79 characters)
            self.logger.error("Неожиданная ошибка при обработке запроса: {}".format(str(e)))
                                                                               ^
security/ai/super_ai_support_assistant.py:683:1: W293 blank line contains whitespace
        """
        Генерация решения для запроса
        
        Генерирует автоматическое решение для запроса поддержки на основе
        базы знаний, AI-моделей и контекста запроса.
        
        Args:
            request (SupportRequest): Запрос на поддержку
            
        Returns:
            str: Сгенерированное решение или None если не найдено
            
        Raises:
            TypeError: Если request не является SupportRequest
        """
^
security/ai/super_ai_support_assistant.py:686:1: W293 blank line contains whitespace
        """
        Генерация решения для запроса
        
        Генерирует автоматическое решение для запроса поддержки на основе
        базы знаний, AI-моделей и контекста запроса.
        
        Args:
            request (SupportRequest): Запрос на поддержку
            
        Returns:
            str: Сгенерированное решение или None если не найдено
            
        Raises:
            TypeError: Если request не является SupportRequest
        """
^
security/ai/super_ai_support_assistant.py:689:1: W293 blank line contains whitespace
        """
        Генерация решения для запроса
        
        Генерирует автоматическое решение для запроса поддержки на основе
        базы знаний, AI-моделей и контекста запроса.
        
        Args:
            request (SupportRequest): Запрос на поддержку
            
        Returns:
            str: Сгенерированное решение или None если не найдено
            
        Raises:
            TypeError: Если request не является SupportRequest
        """
^
security/ai/super_ai_support_assistant.py:692:1: W293 blank line contains whitespace
        """
        Генерация решения для запроса
        
        Генерирует автоматическое решение для запроса поддержки на основе
        базы знаний, AI-моделей и контекста запроса.
        
        Args:
            request (SupportRequest): Запрос на поддержку
            
        Returns:
            str: Сгенерированное решение или None если не найдено
            
        Raises:
            TypeError: Если request не является SupportRequest
        """
^
security/ai/super_ai_support_assistant.py:698:80: E501 line too long (87 > 79 characters)
            if not hasattr(request, 'category') or not hasattr(request, 'description'):
                                                                               ^
security/ai/super_ai_support_assistant.py:699:80: E501 line too long (81 > 79 characters)
                raise TypeError("request должен быть экземпляром SupportRequest")
                                                                               ^
security/ai/super_ai_support_assistant.py:700:1: W293 blank line contains whitespace
            
^
security/ai/super_ai_support_assistant.py:702:13: F841 local variable 'category_knowledge' is assigned to but never used
            category_knowledge = self.knowledge_base.get(request.category.value, {})
            ^
security/ai/super_ai_support_assistant.py:702:80: E501 line too long (84 > 79 characters)
            category_knowledge = self.knowledge_base.get(request.category.value, {})
                                                                               ^
security/ai/super_ai_support_assistant.py:703:1: W293 blank line contains whitespace
            
^
security/ai/super_ai_support_assistant.py:749:1: W293 blank line contains whitespace
            
^
security/ai/super_ai_support_assistant.py:750:80: E501 line too long (100 > 79 characters)
            category_solutions = solutions.get(request.category.value, ["Обратитесь к специалисту"])
                                                                               ^
security/ai/super_ai_support_assistant.py:751:1: W293 blank line contains whitespace
            
^
security/ai/super_ai_support_assistant.py:754:80: E501 line too long (93 > 79 characters)
                solution = "Сначала успокойтесь, затем: " + random.choice(category_solutions)
                                                                               ^
security/ai/super_ai_support_assistant.py:756:80: E501 line too long (121 > 79 characters)
                solution = "Понимаю ваше разочарование. Давайте решим это пошагово: " + random.choice(category_solutions)
                                                                               ^
security/ai/super_ai_support_assistant.py:759:1: W293 blank line contains whitespace
            
^
security/ai/super_ai_support_assistant.py:764:80: E501 line too long (96 > 79 characters)
                    solution += " (Рекомендация для несовершеннолетнего: обсудите с родителями)"
                                                                               ^
security/ai/super_ai_support_assistant.py:766:80: E501 line too long (104 > 79 characters)
                    solution += " (Рекомендация для пожилого человека: обратитесь за помощью к близким)"
                                                                               ^
security/ai/super_ai_support_assistant.py:767:1: W293 blank line contains whitespace
            
^
security/ai/super_ai_support_assistant.py:769:1: W293 blank line contains whitespace
            
^
security/ai/super_ai_support_assistant.py:771:80: E501 line too long (92 > 79 characters)
            self.logger.error("Ошибка типа данных при генерации решения: {}".format(str(e)))
                                                                               ^
security/ai/super_ai_support_assistant.py:774:80: E501 line too long (92 > 79 characters)
            self.logger.error("Неожиданная ошибка при генерации решения: {}".format(str(e)))
                                                                               ^
security/ai/super_ai_support_assistant.py:777:80: E501 line too long (81 > 79 characters)
    def get_personalized_recommendations(self, user_id, category=None, limit=10):
                                                                               ^
security/ai/super_ai_support_assistant.py:780:1: W293 blank line contains whitespace
        """
        Получение персонализированных рекомендаций
        
        Генерирует персонализированные рекомендации для пользователя на основе
        его профиля, истории взаимодействий и предпочтений.
        
        Args:
            user_id (str): Уникальный идентификатор пользователя
            category (SupportCategory, optional): Категория рекомендаций
            limit (int): Максимальное количество рекомендаций (по умолчанию 10)
            
        Returns:
            list: Список персонализированных рекомендаций
            
        Raises:
            ValueError: Если user_id пустой или некорректный
            TypeError: Если category не является SupportCategory или limit не число
            
        Example:
            >>> assistant = SuperAISupportAssistant()
            >>> recommendations = assistant.get_personalized_recommendations(
            ...     "user123", 
            ...     SupportCategory.CYBERSECURITY, 
            ...     5
            ... )
            >>> print(len(recommendations))  # 5
        """
^
security/ai/super_ai_support_assistant.py:783:1: W293 blank line contains whitespace
        """
        Получение персонализированных рекомендаций
        
        Генерирует персонализированные рекомендации для пользователя на основе
        его профиля, истории взаимодействий и предпочтений.
        
        Args:
            user_id (str): Уникальный идентификатор пользователя
            category (SupportCategory, optional): Категория рекомендаций
            limit (int): Максимальное количество рекомендаций (по умолчанию 10)
            
        Returns:
            list: Список персонализированных рекомендаций
            
        Raises:
            ValueError: Если user_id пустой или некорректный
            TypeError: Если category не является SupportCategory или limit не число
            
        Example:
            >>> assistant = SuperAISupportAssistant()
            >>> recommendations = assistant.get_personalized_recommendations(
            ...     "user123", 
            ...     SupportCategory.CYBERSECURITY, 
            ...     5
            ... )
            >>> print(len(recommendations))  # 5
        """
^
security/ai/super_ai_support_assistant.py:788:1: W293 blank line contains whitespace
        """
        Получение персонализированных рекомендаций
        
        Генерирует персонализированные рекомендации для пользователя на основе
        его профиля, истории взаимодействий и предпочтений.
        
        Args:
            user_id (str): Уникальный идентификатор пользователя
            category (SupportCategory, optional): Категория рекомендаций
            limit (int): Максимальное количество рекомендаций (по умолчанию 10)
            
        Returns:
            list: Список персонализированных рекомендаций
            
        Raises:
            ValueError: Если user_id пустой или некорректный
            TypeError: Если category не является SupportCategory или limit не число
            
        Example:
            >>> assistant = SuperAISupportAssistant()
            >>> recommendations = assistant.get_personalized_recommendations(
            ...     "user123", 
            ...     SupportCategory.CYBERSECURITY, 
            ...     5
            ... )
            >>> print(len(recommendations))  # 5
        """
^
security/ai/super_ai_support_assistant.py:791:1: W293 blank line contains whitespace
        """
        Получение персонализированных рекомендаций
        
        Генерирует персонализированные рекомендации для пользователя на основе
        его профиля, истории взаимодействий и предпочтений.
        
        Args:
            user_id (str): Уникальный идентификатор пользователя
            category (SupportCategory, optional): Категория рекомендаций
            limit (int): Максимальное количество рекомендаций (по умолчанию 10)
            
        Returns:
            list: Список персонализированных рекомендаций
            
        Raises:
            ValueError: Если user_id пустой или некорректный
            TypeError: Если category не является SupportCategory или limit не число
            
        Example:
            >>> assistant = SuperAISupportAssistant()
            >>> recommendations = assistant.get_personalized_recommendations(
            ...     "user123", 
            ...     SupportCategory.CYBERSECURITY, 
            ...     5
            ... )
            >>> print(len(recommendations))  # 5
        """
^
security/ai/super_ai_support_assistant.py:794:80: E501 line too long (83 > 79 characters)
        """
        Получение персонализированных рекомендаций
        
        Генерирует персонализированные рекомендации для пользователя на основе
        его профиля, истории взаимодействий и предпочтений.
        
        Args:
            user_id (str): Уникальный идентификатор пользователя
            category (SupportCategory, optional): Категория рекомендаций
            limit (int): Максимальное количество рекомендаций (по умолчанию 10)
            
        Returns:
            list: Список персонализированных рекомендаций
            
        Raises:
            ValueError: Если user_id пустой или некорректный
            TypeError: Если category не является SupportCategory или limit не число
            
        Example:
            >>> assistant = SuperAISupportAssistant()
            >>> recommendations = assistant.get_personalized_recommendations(
            ...     "user123", 
            ...     SupportCategory.CYBERSECURITY, 
            ...     5
            ... )
            >>> print(len(recommendations))  # 5
        """
           
                                                  
        
       ^
security/ai/super_ai_support_assistant.py:795:1: W293 blank line contains whitespace
        """
        Получение персонализированных рекомендаций
        
        Генерирует персонализированные рекомендации для пользователя на основе
        его профиля, истории взаимодействий и предпочтений.
        
        Args:
            user_id (str): Уникальный идентификатор пользователя
            category (SupportCategory, optional): Категория рекомендаций
            limit (int): Максимальное количество рекомендаций (по умолчанию 10)
            
        Returns:
            list: Список персонализированных рекомендаций
            
        Raises:
            ValueError: Если user_id пустой или некорректный
            TypeError: Если category не является SupportCategory или limit не число
            
        Example:
            >>> assistant = SuperAISupportAssistant()
            >>> recommendations = assistant.get_personalized_recommendations(
            ...     "user123", 
            ...     SupportCategory.CYBERSECURITY, 
            ...     5
            ... )
            >>> print(len(recommendations))  # 5
        """
^
security/ai/super_ai_support_assistant.py:799:31: W291 trailing whitespace
        """
        Получение персонализированных рекомендаций
        
        Генерирует персонализированные рекомендации для пользователя на основе
        его профиля, истории взаимодействий и предпочтений.
        
        Args:
            user_id (str): Уникальный идентификатор пользователя
            category (SupportCategory, optional): Категория рекомендаций
            limit (int): Максимальное количество рекомендаций (по умолчанию 10)
            
        Returns:
            list: Список персонализированных рекомендаций
            
        Raises:
            ValueError: Если user_id пустой или некорректный
            TypeError: Если category не является SupportCategory или limit не число
            
        Example:
            >>> assistant = SuperAISupportAssistant()
            >>> recommendations = assistant.get_personalized_recommendations(
            ...     "user123", 
            ...     SupportCategory.CYBERSECURITY, 
            ...     5
            ... )
            >>> print(len(recommendations))  # 5
        """
           
                  ^
security/ai/super_ai_support_assistant.py:800:51: W291 trailing whitespace
        """
        Получение персонализированных рекомендаций
        
        Генерирует персонализированные рекомендации для пользователя на основе
        его профиля, истории взаимодействий и предпочтений.
        
        Args:
            user_id (str): Уникальный идентификатор пользователя
            category (SupportCategory, optional): Категория рекомендаций
            limit (int): Максимальное количество рекомендаций (по умолчанию 10)
            
        Returns:
            list: Список персонализированных рекомендаций
            
        Raises:
            ValueError: Если user_id пустой или некорректный
            TypeError: Если category не является SupportCategory или limit не число
            
        Example:
            >>> assistant = SuperAISupportAssistant()
            >>> recommendations = assistant.get_personalized_recommendations(
            ...     "user123", 
            ...     SupportCategory.CYBERSECURITY, 
            ...     5
            ... )
            >>> print(len(recommendations))  # 5
        """
           
                                      ^
security/ai/super_ai_support_assistant.py:809:1: W293 blank line contains whitespace
            
^
security/ai/super_ai_support_assistant.py:810:80: E501 line too long (82 > 79 characters)
            if category is not None and not isinstance(category, SupportCategory):
                                                                               ^
security/ai/super_ai_support_assistant.py:811:80: E501 line too long (83 > 79 characters)
                raise TypeError("category должен быть экземпляром SupportCategory")
                                                                               ^
security/ai/super_ai_support_assistant.py:812:1: W293 blank line contains whitespace
            
^
security/ai/super_ai_support_assistant.py:815:1: W293 blank line contains whitespace
            
^
security/ai/super_ai_support_assistant.py:818:1: W293 blank line contains whitespace
            
^
security/ai/super_ai_support_assistant.py:821:1: W293 blank line contains whitespace
            
^
security/ai/super_ai_support_assistant.py:844:1: W293 blank line contains whitespace
            
^
security/ai/super_ai_support_assistant.py:858:1: W293 blank line contains whitespace
            
^
security/ai/super_ai_support_assistant.py:861:80: E501 line too long (99 > 79 characters)
                recommendations = [rec for rec in recommendations if category.value in rec.lower()]
                                                                               ^
security/ai/super_ai_support_assistant.py:862:1: W293 blank line contains whitespace
            
^
security/ai/super_ai_support_assistant.py:864:1: W293 blank line contains whitespace
            
^
security/ai/super_ai_support_assistant.py:866:80: E501 line too long (95 > 79 characters)
            self.logger.error("Ошибка валидации при получении рекомендаций: {}".format(str(e)))
                                                                               ^
security/ai/super_ai_support_assistant.py:869:80: E501 line too long (97 > 79 characters)
            self.logger.error("Ошибка типа данных при получении рекомендаций: {}".format(str(e)))
                                                                               ^
security/ai/super_ai_support_assistant.py:872:80: E501 line too long (97 > 79 characters)
            self.logger.error("Неожиданная ошибка при получении рекомендаций: {}".format(str(e)))
                                                                               ^
security/ai/super_ai_support_assistant.py:875:80: E501 line too long (89 > 79 characters)
    def learn_from_interaction(self, user_id, request_id, feedback, satisfaction_rating):
                                                                               ^
security/ai/super_ai_support_assistant.py:881:1: W293 blank line contains whitespace
                
^
security/ai/super_ai_support_assistant.py:893:1: W293 blank line contains whitespace
                
^
security/ai/super_ai_support_assistant.py:896:1: W293 blank line contains whitespace
                
^
security/ai/super_ai_support_assistant.py:898:80: E501 line too long (133 > 79 characters)
                total_ratings = sum(req.satisfaction_rating for req in self.support_requests.values() if req.satisfaction_rating > 0)
                                                                               ^
security/ai/super_ai_support_assistant.py:899:80: E501 line too long (112 > 79 characters)
                rated_requests = sum(1 for req in self.support_requests.values() if req.satisfaction_rating > 0)
                                                                               ^
security/ai/super_ai_support_assistant.py:901:80: E501 line too long (84 > 79 characters)
                    self.metrics.satisfaction_score = total_ratings / rated_requests
                                                                               ^
security/ai/super_ai_support_assistant.py:902:1: W293 blank line contains whitespace
                
^
security/ai/super_ai_support_assistant.py:903:80: E501 line too long (113 > 79 characters)
                self.logger.info("Обучение на основе взаимодействия завершено для запроса {}".format(request_id))
                                                                               ^
security/ai/super_ai_support_assistant.py:904:1: W293 blank line contains whitespace
                
^
security/ai/super_ai_support_assistant.py:906:80: E501 line too long (92 > 79 characters)
            self.logger.error("Ошибка обучения на основе взаимодействия: {}".format(str(e)))
                                                                               ^
security/ai/super_ai_support_assistant.py:912:80: E501 line too long (121 > 79 characters)
            automated_requests = sum(1 for req in self.support_requests.values() if req.status == SupportStatus.RESOLVED)
                                                                               ^
security/ai/super_ai_support_assistant.py:914:80: E501 line too long (95 > 79 characters)
                self.metrics.automation_rate = automated_requests / self.metrics.total_requests
                                                                               ^
security/ai/super_ai_support_assistant.py:915:1: W293 blank line contains whitespace
            
^
security/ai/super_ai_support_assistant.py:917:1: W293 blank line contains whitespace
            
^
security/ai/super_ai_support_assistant.py:919:80: E501 line too long (85 > 79 characters)
            self.logger.error("Ошибка получения метрик поддержки: {}".format(str(e)))
                                                                               ^
security/ai/super_ai_support_assistant.py:927:1: W293 blank line contains whitespace
            
^
security/ai/super_ai_support_assistant.py:929:80: E501 line too long (101 > 79 characters)
            user_requests = [req for req in self.support_requests.values() if req.user_id == user_id]
                                                                               ^
security/ai/super_ai_support_assistant.py:930:1: W293 blank line contains whitespace
            
^
security/ai/super_ai_support_assistant.py:934:80: E501 line too long (109 > 79 characters)
                "resolved_requests": sum(1 for req in user_requests if req.status == SupportStatus.RESOLVED),
                                                                               ^
security/ai/super_ai_support_assistant.py:935:80: E501 line too long (194 > 79 characters)
                "avg_satisfaction": sum(req.satisfaction_rating for req in user_requests if req.satisfaction_rating > 0) / max(1, sum(1 for req in user_requests if req.satisfaction_rating > 0)),
                                                                               ^
security/ai/super_ai_support_assistant.py:936:80: E501 line too long (110 > 79 characters)
                "most_common_category": max(set(req.category.value for req in user_requests), default="none"),
                                                                               ^
security/ai/super_ai_support_assistant.py:937:80: E501 line too long (157 > 79 characters)
                "emotional_trends": [analysis.to_dict() for analysis in self.emotional_analyses if analysis.timestamp > datetime.now() - timedelta(days=30)],
                                                                               ^
security/ai/super_ai_support_assistant.py:938:80: E501 line too long (81 > 79 characters)
                "recommendations": self.get_personalized_recommendations(user_id)
                                                                               ^
security/ai/super_ai_support_assistant.py:940:1: W293 blank line contains whitespace
            
^
security/ai/super_ai_support_assistant.py:942:1: W293 blank line contains whitespace
            
^
security/ai/super_ai_support_assistant.py:944:80: E501 line too long (90 > 79 characters)
            self.logger.error("Ошибка получения инсайтов пользователя: {}".format(str(e)))
                                                                               ^
security/ai/super_ai_support_assistant.py:951:1: W293 blank line contains whitespace
            
^
security/ai/super_ai_support_assistant.py:954:1: W293 blank line contains whitespace
            
^
security/ai/super_ai_support_assistant.py:957:1: W293 blank line contains whitespace
            
^
security/ai/super_ai_support_assistant.py:961:1: W293 blank line contains whitespace
            
^
security/ai/super_ai_support_assistant.py:963:80: E501 line too long (92 > 79 characters)
            self.logger.error("Ошибка остановки SuperAISupportAssistant: {}".format(str(e)))
                                                                               ^
security/ai/super_ai_support_assistant.py:972:1: W293 blank line contains whitespace
            
^
security/ai/super_ai_support_assistant.py:976:80: E501 line too long (103 > 79 characters)
                profiles_data = {uid: profile.to_dict() for uid, profile in self.user_profiles.items()}
                                                                               ^
security/ai/super_ai_support_assistant.py:978:1: W293 blank line contains whitespace
            
^
security/ai/super_ai_support_assistant.py:982:80: E501 line too long (106 > 79 characters)
                requests_data = {rid: request.to_dict() for rid, request in self.support_requests.items()}
                                                                               ^
security/ai/super_ai_support_assistant.py:984:1: W293 blank line contains whitespace
            
^
security/ai/super_ai_support_assistant.py:988:80: E501 line too long (82 > 79 characters)
                json.dump(self.metrics.to_dict(), f, ensure_ascii=False, indent=2)
                                                                               ^
security/ai/super_ai_support_assistant.py:989:1: W293 blank line contains whitespace
            
^
security/ai/super_ai_support_assistant.py:991:1: W293 blank line contains whitespace
            
^
security/ai/super_ai_support_assistant.py:1003:1: W293 blank line contains whitespace
            
^
security/ai/super_ai_support_assistant.py:1005:1: W293 blank line contains whitespace
            
^
security/ai/super_ai_support_assistant.py:1013:1: W293 blank line contains whitespace
    
^
security/ai/super_ai_support_assistant.py:1016:1: W293 blank line contains whitespace
    
^
security/ai/super_ai_support_assistant.py:1020:1: W293 blank line contains whitespace
        
^
security/ai/super_ai_support_assistant.py:1029:1: W293 blank line contains whitespace
        
^
security/ai/super_ai_support_assistant.py:1031:80: E501 line too long (99 > 79 characters)
        emotion = assistant.analyze_emotion("Мне очень грустно и я не знаю что делать", "user_001")
                                                                               ^
security/ai/super_ai_support_assistant.py:1034:1: W293 blank line contains whitespace
        
^
security/ai/super_ai_support_assistant.py:1044:1: W293 blank line contains whitespace
        
^
security/ai/super_ai_support_assistant.py:1046:80: E501 line too long (89 > 79 characters)
        recommendations = assistant.get_personalized_recommendations("user_001", limit=5)
                                                                               ^
security/ai/super_ai_support_assistant.py:1050:1: W293 blank line contains whitespace
        
^
security/ai/super_ai_support_assistant.py:1055:1: W293 blank line contains whitespace
        
^
security/ai/super_ai_support_assistant.py:1060:64: W292 no newline at end of file
        print("❌ Ошибка инициализации SuperAISupportAssistant")                                                               ^
security/ai_agents/__init__.py:67:1: F811 redefinition of unused 'ThreatType' from line 11
from .mobile_security_agent import (
^
security/ai_agents/__init__.py:132:2: W292 no newline at end of file
] ^
security/ai_agents/alert_manager.py:7:80: E501 line too long (94 > 79 characters)
"""
AlertManager - Менеджер оповещений системы безопасности
function_77: Умные уведомления с приоритизацией и мультиканальностью

Этот модуль предоставляет комплексную систему управления алертами для AI системы безопасности,
включающую:
- Интеллектуальную приоритизацию алертов с использованием машинного обучения
- Мультиканальную доставку уведомлений (email, SMS, push, мессенджеры)
- Автоматическую группировку и дедупликацию алертов
- Адаптивные алгоритмы фильтрации спама и ложных срабатываний
- Продвинутый анализ текста для классификации алертов
- Статистический анализ паттернов алертов и трендов
- Интеграцию с внешними системами мониторинга
- Автоматическое обучение на основе обратной связи пользователей

Основные возможности:
1. Умная приоритизация алертов с использованием ML алгоритмов
2. Мультиканальная доставка через различные платформы
3. Автоматическая группировка похожих алертов
4. Дедупликация и подавление дублирующихся уведомлений
5. Анализ текста для классификации и извлечения сущностей
6. Статистический анализ паттернов и аномалий в алертах
7. Адаптивные пороги и правила на основе исторических данных
8. Интеграция с системами мониторинга и SIEM
9. Визуализация и аналитика алертов
10. Автоматическое обучение и улучшение качества

Технические детали:
- Использует scikit-learn для ML классификации и кластеризации
- Применяет TF-IDF и BERT для анализа текста
- Интегрирует scipy для статистического анализа
- Поддерживает асинхронную обработку алертов
- Использует очереди для масштабируемости
- Поддерживает различные форматы уведомлений

Автор: ALADDIN Security System
Версия: 2.0
Дата: 2025-01-06
Лицензия: MIT
"""
   
                                                       
                   ^
security/ai_agents/alert_manager.py:49:1: F401 'json' imported but unused
import json
^
security/ai_agents/alert_manager.py:50:1: F401 'smtplib' imported but unused
import smtplib
^
security/ai_agents/alert_manager.py:51:1: F401 'requests' imported but unused
import requests
^
security/ai_agents/alert_manager.py:53:1: F401 'math' imported but unused
import math
^
security/ai_agents/alert_manager.py:54:1: F401 'statistics' imported but unused
import statistics
^
security/ai_agents/alert_manager.py:55:1: F401 're' imported but unused
import re
^
security/ai_agents/alert_manager.py:57:1: F401 'typing.Callable' imported but unused
from typing import Dict, List, Any, Optional, Callable, Union, Tuple, Set, Iterator
^
security/ai_agents/alert_manager.py:57:1: F401 'typing.Union' imported but unused
from typing import Dict, List, Any, Optional, Callable, Union, Tuple, Set, Iterator
^
security/ai_agents/alert_manager.py:57:1: F401 'typing.Tuple' imported but unused
from typing import Dict, List, Any, Optional, Callable, Union, Tuple, Set, Iterator
^
security/ai_agents/alert_manager.py:57:1: F401 'typing.Set' imported but unused
from typing import Dict, List, Any, Optional, Callable, Union, Tuple, Set, Iterator
^
security/ai_agents/alert_manager.py:57:1: F401 'typing.Iterator' imported but unused
from typing import Dict, List, Any, Optional, Callable, Union, Tuple, Set, Iterator
^
security/ai_agents/alert_manager.py:57:80: E501 line too long (83 > 79 characters)
from typing import Dict, List, Any, Optional, Callable, Union, Tuple, Set, Iterator
                                                                               ^
security/ai_agents/alert_manager.py:60:1: F401 'abc.ABC' imported but unused
from abc import ABC, abstractmethod
^
security/ai_agents/alert_manager.py:60:1: F401 'abc.abstractmethod' imported but unused
from abc import ABC, abstractmethod
^
security/ai_agents/alert_manager.py:62:1: F401 'scipy.stats' imported but unused
from scipy import stats
^
security/ai_agents/alert_manager.py:63:1: F401 'scipy.signal.find_peaks' imported but unused
from scipy.signal import find_peaks, savgol_filter
^
security/ai_agents/alert_manager.py:63:1: F401 'scipy.signal.savgol_filter' imported but unused
from scipy.signal import find_peaks, savgol_filter
^
security/ai_agents/alert_manager.py:64:1: F401 'scipy.optimize.minimize' imported but unused
from scipy.optimize import minimize, differential_evolution
^
security/ai_agents/alert_manager.py:64:1: F401 'scipy.optimize.differential_evolution' imported but unused
from scipy.optimize import minimize, differential_evolution
^
security/ai_agents/alert_manager.py:65:1: F401 'scipy.stats.pearsonr' imported but unused
from scipy.stats import pearsonr, spearmanr, kendalltau, normaltest, shapiro
^
security/ai_agents/alert_manager.py:65:1: F401 'scipy.stats.spearmanr' imported but unused
from scipy.stats import pearsonr, spearmanr, kendalltau, normaltest, shapiro
^
security/ai_agents/alert_manager.py:65:1: F401 'scipy.stats.kendalltau' imported but unused
from scipy.stats import pearsonr, spearmanr, kendalltau, normaltest, shapiro
^
security/ai_agents/alert_manager.py:65:1: F401 'scipy.stats.normaltest' imported but unused
from scipy.stats import pearsonr, spearmanr, kendalltau, normaltest, shapiro
^
security/ai_agents/alert_manager.py:65:1: F401 'scipy.stats.shapiro' imported but unused
from scipy.stats import pearsonr, spearmanr, kendalltau, normaltest, shapiro
^
security/ai_agents/alert_manager.py:66:1: F401 'scipy.cluster.hierarchy.dendrogram' imported but unused
from scipy.cluster.hierarchy import dendrogram, linkage, fcluster
^
security/ai_agents/alert_manager.py:66:1: F401 'scipy.cluster.hierarchy.linkage' imported but unused
from scipy.cluster.hierarchy import dendrogram, linkage, fcluster
^
security/ai_agents/alert_manager.py:66:1: F401 'scipy.cluster.hierarchy.fcluster' imported but unused
from scipy.cluster.hierarchy import dendrogram, linkage, fcluster
^
security/ai_agents/alert_manager.py:67:1: F401 'sklearn.feature_extraction.text.CountVectorizer' imported but unused
from sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer
^
security/ai_agents/alert_manager.py:68:1: F401 'sklearn.cluster.DBSCAN' imported but unused
from sklearn.cluster import KMeans, DBSCAN, AgglomerativeClustering
^
security/ai_agents/alert_manager.py:68:1: F401 'sklearn.cluster.AgglomerativeClustering' imported but unused
from sklearn.cluster import KMeans, DBSCAN, AgglomerativeClustering
^
security/ai_agents/alert_manager.py:69:1: F401 'sklearn.preprocessing.MinMaxScaler' imported but unused
from sklearn.preprocessing import StandardScaler, MinMaxScaler, RobustScaler
^
security/ai_agents/alert_manager.py:69:1: F401 'sklearn.preprocessing.RobustScaler' imported but unused
from sklearn.preprocessing import StandardScaler, MinMaxScaler, RobustScaler
^
security/ai_agents/alert_manager.py:70:1: F401 'sklearn.linear_model.LogisticRegression' imported but unused
from sklearn.linear_model import LogisticRegression, Ridge, Lasso, ElasticNet
^
security/ai_agents/alert_manager.py:70:1: F401 'sklearn.linear_model.Ridge' imported but unused
from sklearn.linear_model import LogisticRegression, Ridge, Lasso, ElasticNet
^
security/ai_agents/alert_manager.py:70:1: F401 'sklearn.linear_model.Lasso' imported but unused
from sklearn.linear_model import LogisticRegression, Ridge, Lasso, ElasticNet
^
security/ai_agents/alert_manager.py:70:1: F401 'sklearn.linear_model.ElasticNet' imported but unused
from sklearn.linear_model import LogisticRegression, Ridge, Lasso, ElasticNet
^
security/ai_agents/alert_manager.py:71:1: F401 'sklearn.ensemble.RandomForestClassifier' imported but unused
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier, VotingClassifier
^
security/ai_agents/alert_manager.py:71:1: F401 'sklearn.ensemble.GradientBoostingClassifier' imported but unused
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier, VotingClassifier
^
security/ai_agents/alert_manager.py:71:1: F401 'sklearn.ensemble.VotingClassifier' imported but unused
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier, VotingClassifier
^
security/ai_agents/alert_manager.py:71:80: E501 line too long (97 > 79 characters)
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier, VotingClassifier
                                                                               ^
security/ai_agents/alert_manager.py:72:1: F401 'sklearn.svm.SVC' imported but unused
from sklearn.svm import SVC, LinearSVC
^
security/ai_agents/alert_manager.py:72:1: F401 'sklearn.svm.LinearSVC' imported but unused
from sklearn.svm import SVC, LinearSVC
^
security/ai_agents/alert_manager.py:73:1: F401 'sklearn.naive_bayes.MultinomialNB' imported but unused
from sklearn.naive_bayes import MultinomialNB, GaussianNB
^
security/ai_agents/alert_manager.py:73:1: F401 'sklearn.naive_bayes.GaussianNB' imported but unused
from sklearn.naive_bayes import MultinomialNB, GaussianNB
^
security/ai_agents/alert_manager.py:74:1: F401 'sklearn.neural_network.MLPClassifier' imported but unused
from sklearn.neural_network import MLPClassifier
^
security/ai_agents/alert_manager.py:75:1: F401 'sklearn.metrics.classification_report' imported but unused
from sklearn.metrics import classification_report, confusion_matrix, roc_auc_score
^
security/ai_agents/alert_manager.py:75:1: F401 'sklearn.metrics.confusion_matrix' imported but unused
from sklearn.metrics import classification_report, confusion_matrix, roc_auc_score
^
security/ai_agents/alert_manager.py:75:1: F401 'sklearn.metrics.roc_auc_score' imported but unused
from sklearn.metrics import classification_report, confusion_matrix, roc_auc_score
^
security/ai_agents/alert_manager.py:75:80: E501 line too long (82 > 79 characters)
from sklearn.metrics import classification_report, confusion_matrix, roc_auc_score
                                                                               ^
security/ai_agents/alert_manager.py:76:1: F401 'sklearn.model_selection.cross_val_score' imported but unused
from sklearn.model_selection import cross_val_score, GridSearchCV, train_test_split
^
security/ai_agents/alert_manager.py:76:1: F401 'sklearn.model_selection.GridSearchCV' imported but unused
from sklearn.model_selection import cross_val_score, GridSearchCV, train_test_split
^
security/ai_agents/alert_manager.py:76:1: F401 'sklearn.model_selection.train_test_split' imported but unused
from sklearn.model_selection import cross_val_score, GridSearchCV, train_test_split
^
security/ai_agents/alert_manager.py:76:80: E501 line too long (83 > 79 characters)
from sklearn.model_selection import cross_val_score, GridSearchCV, train_test_split
                                                                               ^
security/ai_agents/alert_manager.py:77:1: F401 'sklearn.decomposition.PCA' imported but unused
from sklearn.decomposition import PCA, TruncatedSVD, LatentDirichletAllocation
^
security/ai_agents/alert_manager.py:77:1: F401 'sklearn.decomposition.TruncatedSVD' imported but unused
from sklearn.decomposition import PCA, TruncatedSVD, LatentDirichletAllocation
^
security/ai_agents/alert_manager.py:77:1: F401 'sklearn.decomposition.LatentDirichletAllocation' imported but unused
from sklearn.decomposition import PCA, TruncatedSVD, LatentDirichletAllocation
^
security/ai_agents/alert_manager.py:78:1: F401 'sklearn.mixture.GaussianMixture' imported but unused
from sklearn.mixture import GaussianMixture
^
security/ai_agents/alert_manager.py:79:1: F401 'pandas as pd' imported but unused
import pandas as pd
^
security/ai_agents/alert_manager.py:80:1: F401 'matplotlib.pyplot as plt' imported but unused
import matplotlib.pyplot as plt
^
security/ai_agents/alert_manager.py:81:1: F401 'seaborn as sns' imported but unused
import seaborn as sns
^
security/ai_agents/alert_manager.py:83:1: E302 expected 2 blank lines, found 1
class AlertSeverity(Enum):
^
security/ai_agents/alert_manager.py:91:1: E302 expected 2 blank lines, found 1
class AlertChannel(Enum):
^
security/ai_agents/alert_manager.py:101:1: E302 expected 2 blank lines, found 1
@dataclass
^
security/ai_agents/alert_manager.py:112:1: E302 expected 2 blank lines, found 1
@dataclass
^
security/ai_agents/alert_manager.py:125:1: E302 expected 2 blank lines, found 1
@dataclass
^
security/ai_agents/alert_manager.py:140:1: E302 expected 2 blank lines, found 1
class AlertManager:
^
security/ai_agents/alert_manager.py:143:1: W293 blank line contains whitespace
    """
    Менеджер оповещений системы безопасности
    
    Обеспечивает:
    - Умные уведомления с приоритизацией
    - Персонализированные алерты для каждого пользователя
    - Мультиканальные оповещения (SMS, email, push, мессенджеры)
    - Настраиваемые расписания уведомлений
    - Автоматическую эскалацию критических событий
    - ML-анализ для предотвращения спама
    """
^
security/ai_agents/alert_manager.py:152:1: W293 blank line contains whitespace
    
^
security/ai_agents/alert_manager.py:153:80: E501 line too long (92 > 79 characters)
    def __init__(self, name: str = "AlertManager", config: Optional[Dict[str, Any]] = None):
                                                                               ^
security/ai_agents/alert_manager.py:156:1: W293 blank line contains whitespace
        """
        Инициализация AlertManager
        
        Args:
            name: Имя менеджера
            config: Конфигурация системы алертов
        """
^
security/ai_agents/alert_manager.py:164:1: W293 blank line contains whitespace
        
^
security/ai_agents/alert_manager.py:171:1: W293 blank line contains whitespace
        
^
security/ai_agents/alert_manager.py:175:1: W293 blank line contains whitespace
        
^
security/ai_agents/alert_manager.py:177:80: E501 line too long (82 > 79 characters)
        self.vectorizer = TfidfVectorizer(max_features=1000, stop_words='english')
                                                                               ^
security/ai_agents/alert_manager.py:181:1: W293 blank line contains whitespace
        
^
security/ai_agents/alert_manager.py:190:1: W293 blank line contains whitespace
        
^
security/ai_agents/alert_manager.py:195:1: W293 blank line contains whitespace
        
^
security/ai_agents/alert_manager.py:218:80: E501 line too long (83 > 79 characters)
                channels=[AlertChannel.EMAIL, AlertChannel.SMS, AlertChannel.PUSH],
                                                                               ^
security/ai_agents/alert_manager.py:263:1: W293 blank line contains whitespace
            
^
security/ai_agents/alert_manager.py:266:1: W293 blank line contains whitespace
            
^
security/ai_agents/alert_manager.py:270:1: W293 blank line contains whitespace
            
^
security/ai_agents/alert_manager.py:281:1: W293 blank line contains whitespace
            
^
security/ai_agents/alert_manager.py:286:1: W293 blank line contains whitespace
            
^
security/ai_agents/alert_manager.py:322:80: E501 line too long (80 > 79 characters)
                            if (current_time - timestamp).total_seconds() < 3600
                                                                               ^
security/ai_agents/alert_manager.py:326:1: W293 blank line contains whitespace
                    
^
security/ai_agents/alert_manager.py:350:25: W291 trailing whitespace
    def send_alert(self, 
                        ^
security/ai_agents/alert_manager.py:351:31: W291 trailing whitespace
                   title: str, 
                              ^
security/ai_agents/alert_manager.py:352:33: W291 trailing whitespace
                   message: str, 
                                ^
security/ai_agents/alert_manager.py:361:1: W293 blank line contains whitespace
        """
        Отправка алерта
        
        Args:
            title: Заголовок алерта
            message: Сообщение алерта
            severity: Уровень серьезности
            source: Источник алерта
            recipients: Список получателей
            channels: Каналы доставки
            template_name: Имя шаблона
            metadata: Дополнительные данные
            
        Returns:
            ID созданного алерта
        """
^
security/ai_agents/alert_manager.py:371:1: W293 blank line contains whitespace
        """
        Отправка алерта
        
        Args:
            title: Заголовок алерта
            message: Сообщение алерта
            severity: Уровень серьезности
            source: Источник алерта
            recipients: Список получателей
            channels: Каналы доставки
            template_name: Имя шаблона
            metadata: Дополнительные данные
            
        Returns:
            ID созданного алерта
        """
^
security/ai_agents/alert_manager.py:377:80: E501 line too long (94 > 79 characters)
            alert_id = hashlib.md5(f"{title}{message}{time.time()}".encode()).hexdigest()[:16]
                                                                               ^
security/ai_agents/alert_manager.py:378:1: W293 blank line contains whitespace
            
^
security/ai_agents/alert_manager.py:388:1: W293 blank line contains whitespace
            
^
security/ai_agents/alert_manager.py:401:1: W293 blank line contains whitespace
            
^
security/ai_agents/alert_manager.py:405:80: E501 line too long (84 > 79 characters)
                self.logger.warning(f"Алерт заблокирован rate limiting: {alert_id}")
                                                                               ^
security/ai_agents/alert_manager.py:407:1: W293 blank line contains whitespace
            
^
security/ai_agents/alert_manager.py:411:1: W293 blank line contains whitespace
            
^
security/ai_agents/alert_manager.py:415:1: W293 blank line contains whitespace
            
^
security/ai_agents/alert_manager.py:418:1: W293 blank line contains whitespace
            
^
security/ai_agents/alert_manager.py:429:1: W293 blank line contains whitespace
            
^
security/ai_agents/alert_manager.py:433:1: W293 blank line contains whitespace
            
^
security/ai_agents/alert_manager.py:439:1: W293 blank line contains whitespace
            
^
security/ai_agents/alert_manager.py:449:1: W293 blank line contains whitespace
            
^
security/ai_agents/alert_manager.py:452:1: W293 blank line contains whitespace
            
^
security/ai_agents/alert_manager.py:456:1: W293 blank line contains whitespace
            
^
security/ai_agents/alert_manager.py:467:1: W293 blank line contains whitespace
            
^
security/ai_agents/alert_manager.py:471:1: W293 blank line contains whitespace
            
^
security/ai_agents/alert_manager.py:477:1: W293 blank line contains whitespace
            
^
security/ai_agents/alert_manager.py:482:1: W293 blank line contains whitespace
            
^
security/ai_agents/alert_manager.py:484:1: W293 blank line contains whitespace
            
^
security/ai_agents/alert_manager.py:505:1: W293 blank line contains whitespace
                
^
security/ai_agents/alert_manager.py:507:80: E501 line too long (80 > 79 characters)
            self.logger.error(f"Ошибка отправки по каналу {channel.value}: {e}")
                                                                               ^
security/ai_agents/alert_manager.py:570:1: W293 blank line contains whitespace
            
^
security/ai_agents/alert_manager.py:572:80: E501 line too long (99 > 79 characters)
            alert_texts = [f"{alert.title} {alert.message}" for alert in self.alert_history[-100:]]
                                                                               ^
security/ai_agents/alert_manager.py:573:1: W293 blank line contains whitespace
            
^
security/ai_agents/alert_manager.py:576:1: W293 blank line contains whitespace
            
^
security/ai_agents/alert_manager.py:579:1: W293 blank line contains whitespace
            
^
security/ai_agents/alert_manager.py:582:1: W293 blank line contains whitespace
            
^
security/ai_agents/alert_manager.py:586:21: F841 local variable 'cluster_alerts' is assigned to but never used
                    cluster_alerts = [alert for i, alert in enumerate(self.alert_history[-100:]) 
                    ^
security/ai_agents/alert_manager.py:586:80: E501 line too long (96 > 79 characters)
                    cluster_alerts = [alert for i, alert in enumerate(self.alert_history[-100:]) 
                                                                               ^
security/ai_agents/alert_manager.py:586:97: W291 trailing whitespace
                    cluster_alerts = [alert for i, alert in enumerate(self.alert_history[-100:]) 
                                                                                                ^
security/ai_agents/alert_manager.py:587:37: E128 continuation line under-indented for visual indent
                                    if clusters[i] == cluster_id]
                                    ^
security/ai_agents/alert_manager.py:588:1: W293 blank line contains whitespace
                    
^
security/ai_agents/alert_manager.py:589:80: E501 line too long (110 > 79 characters)
                    self.logger.warning(f"Обнаружен паттерн алертов в кластере {cluster_id}: {count} алертов")
                                                                               ^
security/ai_agents/alert_manager.py:590:1: W293 blank line contains whitespace
                    
^
security/ai_agents/alert_manager.py:595:80: E501 line too long (101 > 79 characters)
                        message=f"Система обнаружила повторяющийся паттерн: {count} похожих алертов",
                                                                               ^
security/ai_agents/alert_manager.py:599:80: E501 line too long (85 > 79 characters)
                        metadata={'cluster_id': int(cluster_id), 'count': int(count)}
                                                                               ^
security/ai_agents/alert_manager.py:601:1: W293 blank line contains whitespace
                    
^
security/ai_agents/alert_manager.py:603:1: W293 blank line contains whitespace
                    
^
security/ai_agents/alert_manager.py:680:1: W293 blank line contains whitespace
            
^
security/ai_agents/alert_manager.py:685:1: W293 blank line contains whitespace
            
^
security/ai_agents/alert_manager.py:691:1: E305 expected 2 blank lines after class or function definition, found 1
if __name__ == "__main__":
^
security/ai_agents/alert_manager.py:695:1: W293 blank line contains whitespace
        
^
security/ai_agents/alert_manager.py:703:1: W293 blank line contains whitespace
        
^
security/ai_agents/alert_manager.py:705:1: W293 blank line contains whitespace
        
^
security/ai_agents/alert_manager.py:708:1: W293 blank line contains whitespace
        
^
security/ai_agents/alert_manager.py:710:9: F811 redefinition of unused 'stats' from line 62
        stats = alert_manager.get_statistics()
        ^
security/ai_agents/alert_manager.py:712:1: W293 blank line contains whitespace
        
^
security/ai_agents/alert_manager.py:715:1: W293 blank line contains whitespace
    
^
security/ai_agents/alert_manager.py:716:24: W292 no newline at end of file
    asyncio.run(main())                       ^
security/ai_agents/analytics_manager.py:7:80: E501 line too long (84 > 79 characters)
"""
AnalyticsManager - Расширенный менеджер аналитики системы безопасности
Глубокая аналитика поведения пользователей и трендов безопасности

Этот модуль предоставляет комплексную систему аналитики для AI системы безопасности,
включающую глубокий анализ поведения, предсказательное моделирование и статистический анализ.

Автор: ALADDIN Security System
Версия: 3.0
Дата: 2025-01-06
Лицензия: MIT
"""
   
                                                                      
    ^
security/ai_agents/analytics_manager.py:8:80: E501 line too long (93 > 79 characters)
"""
AnalyticsManager - Расширенный менеджер аналитики системы безопасности
Глубокая аналитика поведения пользователей и трендов безопасности

Этот модуль предоставляет комплексную систему аналитики для AI системы безопасности,
включающую глубокий анализ поведения, предсказательное моделирование и статистический анализ.

Автор: ALADDIN Security System
Версия: 3.0
Дата: 2025-01-06
Лицензия: MIT
"""
   
                                                                      
    ^
security/ai_agents/analytics_manager.py:318:80: E501 line too long (81 > 79 characters)
                anomaly_predictions = await anomaly_model.predict(processed_data)
                                                                               ^
security/ai_agents/analytics_manager.py:319:80: E501 line too long (80 > 79 characters)
                result.anomaly_score = float(np.mean(anomaly_predictions == -1))
                                                                               ^
security/ai_agents/analytics_manager.py:329:80: E501 line too long (83 > 79 characters)
            result.insights = await self._generate_insights(processed_data, result)
                                                                               ^
security/ai_agents/analytics_manager.py:330:80: E501 line too long (81 > 79 characters)
            result.recommendations = await self._generate_recommendations(result)
                                                                               ^
security/ai_agents/analytics_manager.py:346:80: E501 line too long (95 > 79 characters)
    async def _generate_insights(self, data: np.ndarray, result: AnalyticsResult) -> List[str]:
                                                                               ^
security/ai_agents/analytics_manager.py:378:80: E501 line too long (84 > 79 characters)
    async def _generate_recommendations(self, result: AnalyticsResult) -> List[str]:
                                                                               ^
security/ai_agents/analytics_manager.py:386:80: E501 line too long (87 > 79 characters)
                    "Высокий уровень аномалий - требуется дополнительное расследование"
                                                                               ^
security/ai_agents/analytics_manager.py:392:80: E501 line too long (93 > 79 characters)
                    "Низкая уверенность в результатах - рекомендуется увеличить объем данных"
                                                                               ^
security/ai_agents/analytics_manager.py:446:49: W291 trailing whitespace
                r for r in self.results.values() 
                                                ^
security/ai_agents/analytics_manager.py:450:49: W291 trailing whitespace
                r for r in self.results.values() 
                                                ^
security/ai_agents/analytics_manager.py:459:56: W291 trailing whitespace
                    completed_analyses / total_analyses 
                                                       ^
security/ai_agents/analytics_manager.py:463:80: E501 line too long (80 > 79 characters)
                    np.mean([r.confidence_score for r in self.results.values()]) 
                                                                               ^
security/ai_agents/analytics_manager.py:463:81: W291 trailing whitespace
                    np.mean([r.confidence_score for r in self.results.values()]) 
                                                                                ^
security/ai_agents/analytics_manager.py:467:78: W291 trailing whitespace
                    np.mean([r.anomaly_score for r in self.results.values()]) 
                                                                             ^
security/ai_agents/analytics_manager_new.py:7:80: E501 line too long (84 > 79 characters)
"""
AnalyticsManager - Расширенный менеджер аналитики системы безопасности
Глубокая аналитика поведения пользователей и трендов безопасности

Этот модуль предоставляет комплексную систему аналитики для AI системы безопасности,
включающую глубокий анализ поведения, предсказательное моделирование и статистический анализ.

Автор: ALADDIN Security System
Версия: 3.0
Дата: 2025-01-06
Лицензия: MIT
"""
   
                                                                      
    ^
security/ai_agents/analytics_manager_new.py:8:80: E501 line too long (93 > 79 characters)
"""
AnalyticsManager - Расширенный менеджер аналитики системы безопасности
Глубокая аналитика поведения пользователей и трендов безопасности

Этот модуль предоставляет комплексную систему аналитики для AI системы безопасности,
включающую глубокий анализ поведения, предсказательное моделирование и статистический анализ.

Автор: ALADDIN Security System
Версия: 3.0
Дата: 2025-01-06
Лицензия: MIT
"""
   
                                                                      
    ^
security/ai_agents/analytics_manager_new.py:318:80: E501 line too long (81 > 79 characters)
                anomaly_predictions = await anomaly_model.predict(processed_data)
                                                                               ^
security/ai_agents/analytics_manager_new.py:319:80: E501 line too long (80 > 79 characters)
                result.anomaly_score = float(np.mean(anomaly_predictions == -1))
                                                                               ^
security/ai_agents/analytics_manager_new.py:329:80: E501 line too long (83 > 79 characters)
            result.insights = await self._generate_insights(processed_data, result)
                                                                               ^
security/ai_agents/analytics_manager_new.py:330:80: E501 line too long (81 > 79 characters)
            result.recommendations = await self._generate_recommendations(result)
                                                                               ^
security/ai_agents/analytics_manager_new.py:346:80: E501 line too long (95 > 79 characters)
    async def _generate_insights(self, data: np.ndarray, result: AnalyticsResult) -> List[str]:
                                                                               ^
security/ai_agents/analytics_manager_new.py:378:80: E501 line too long (84 > 79 characters)
    async def _generate_recommendations(self, result: AnalyticsResult) -> List[str]:
                                                                               ^
security/ai_agents/analytics_manager_new.py:386:80: E501 line too long (87 > 79 characters)
                    "Высокий уровень аномалий - требуется дополнительное расследование"
                                                                               ^
security/ai_agents/analytics_manager_new.py:392:80: E501 line too long (93 > 79 characters)
                    "Низкая уверенность в результатах - рекомендуется увеличить объем данных"
                                                                               ^
security/ai_agents/analytics_manager_new.py:446:49: W291 trailing whitespace
                r for r in self.results.values() 
                                                ^
security/ai_agents/analytics_manager_new.py:450:49: W291 trailing whitespace
                r for r in self.results.values() 
                                                ^
security/ai_agents/analytics_manager_new.py:459:56: W291 trailing whitespace
                    completed_analyses / total_analyses 
                                                       ^
security/ai_agents/analytics_manager_new.py:463:80: E501 line too long (80 > 79 characters)
                    np.mean([r.confidence_score for r in self.results.values()]) 
                                                                               ^
security/ai_agents/analytics_manager_new.py:463:81: W291 trailing whitespace
                    np.mean([r.confidence_score for r in self.results.values()]) 
                                                                                ^
security/ai_agents/analytics_manager_new.py:467:78: W291 trailing whitespace
                    np.mean([r.anomaly_score for r in self.results.values()]) 
                                                                             ^
security/ai_agents/anti_fraud_master_ai.py:7:80: E501 line too long (85 > 79 characters)
"""
AntiFraudMasterAI - Главный агент защиты от мошенничества на 27 миллионов
Самый крутой AI-агент в сфере кибербезопасности!

Этот модуль предоставляет интегрированную систему защиты от всех видов мошенничества:
- AI-детектор социальной инженерии
- Защита от deepfake видеозвонков
- Финансовая защита в реальном времени
- Система экстренных уведомлений
- Специальный интерфейс для пожилых людей

Основные возможности:
1. Анализ голосовых звонков с AI-детекцией манипуляций
2. Детекция deepfake аватаров и синтетического голоса
3. Интеграция с банками для защиты финансов
4. Экстренные уведомления и блокировки
5. Упрощенный интерфейс для пожилых людей
6. Защита от всех видов мошенничества

Технические детали:
- Использует передовые AI-алгоритмы
- Интегрирует с банковскими API
- Применяет компьютерное зрение для deepfake
- Использует NLP для анализа речи
- Интегрирует с системами уведомлений
- Применяет машинное обучение для адаптации

Автор: ALADDIN Security System
Версия: 1.0
Дата: 2025-09-08
Лицензия: MIT
"""
   
                                                                         
 ^
security/ai_agents/anti_fraud_master_ai.py:39:1: F401 'json' imported but unused
import json
^
security/ai_agents/anti_fraud_master_ai.py:40:1: F401 'hashlib' imported but unused
import hashlib
^
security/ai_agents/anti_fraud_master_ai.py:41:1: F401 'base64' imported but unused
import base64
^
security/ai_agents/anti_fraud_master_ai.py:42:1: F401 'datetime.timedelta' imported but unused
from datetime import datetime, timedelta
^
security/ai_agents/anti_fraud_master_ai.py:43:1: F401 'typing.Union' imported but unused
from typing import Dict, List, Optional, Any, Tuple, Union
^
security/ai_agents/anti_fraud_master_ai.py:44:1: F401 'dataclasses.field' imported but unused
from dataclasses import dataclass, field
^
security/ai_agents/anti_fraud_master_ai.py:53:1: F401 'core.base.ComponentStatus' imported but unused
from core.base import SecurityBase, ComponentStatus, SecurityLevel
^
security/ai_agents/anti_fraud_master_ai.py:53:1: F401 'core.base.SecurityLevel' imported but unused
from core.base import SecurityBase, ComponentStatus, SecurityLevel
^
security/ai_agents/anti_fraud_master_ai.py:54:1: F401 'core.security_base.SecurityEvent' imported but unused
from core.security_base import SecurityEvent, SecurityRule, IncidentSeverity
^
security/ai_agents/anti_fraud_master_ai.py:54:1: F401 'core.security_base.SecurityRule' imported but unused
from core.security_base import SecurityEvent, SecurityRule, IncidentSeverity
^
security/ai_agents/anti_fraud_master_ai.py:54:1: F401 'core.security_base.IncidentSeverity' imported but unused
from core.security_base import SecurityEvent, SecurityRule, IncidentSeverity
^
security/ai_agents/anti_fraud_master_ai.py:68:80: E501 line too long (84 > 79 characters)
    GOVERNMENT_SCAM = "government_scam"          # Мошенничество от имени госорганов
                                                                               ^
security/ai_agents/anti_fraud_master_ai.py:126:41: E261 at least two spaces before inline comment
    recommended_action: ProtectionAction # Рекомендуемое действие
                                        ^
security/ai_agents/anti_fraud_master_ai.py:148:1: W293 blank line contains whitespace
    
^
security/ai_agents/anti_fraud_master_ai.py:151:80: E501 line too long (97 > 79 characters)
        self.logger = logging.getLogger(f"{self.__class__.__module__}.{self.__class__.__name__}")
                                                                               ^
security/ai_agents/anti_fraud_master_ai.py:152:1: W293 blank line contains whitespace
        
^
security/ai_agents/anti_fraud_master_ai.py:159:1: W293 blank line contains whitespace
        
^
security/ai_agents/anti_fraud_master_ai.py:166:1: W293 blank line contains whitespace
        
^
security/ai_agents/anti_fraud_master_ai.py:169:1: W293 blank line contains whitespace
        
^
security/ai_agents/anti_fraud_master_ai.py:174:1: W293 blank line contains whitespace
        
^
security/ai_agents/anti_fraud_master_ai.py:175:80: E501 line too long (96 > 79 characters)
        self.logger.info("AntiFraudMasterAI инициализирован - готов защищать от мошенничества!")
                                                                               ^
security/ai_agents/anti_fraud_master_ai.py:183:80: E501 line too long (83 > 79 characters)
                    "ФСБ", "прокуратура", "суд", "полиция", "следственный комитет",
                                                                               ^
security/ai_agents/anti_fraud_master_ai.py:193:80: E501 line too long (84 > 79 characters)
                    "авторитет", "социальное доказательство", "дефицит", "срочность"
                                                                               ^
security/ai_agents/anti_fraud_master_ai.py:211:80: E501 line too long (88 > 79 characters)
                "suspicious_recipients": ["неизвестные", "зарубежные", "криптовалютные"]
                                                                               ^
security/ai_agents/anti_fraud_master_ai.py:216:14: W291 trailing whitespace
        self, 
             ^
security/ai_agents/anti_fraud_master_ai.py:217:25: W291 trailing whitespace
        elderly_id: str, 
                        ^
security/ai_agents/anti_fraud_master_ai.py:218:27: W291 trailing whitespace
        phone_number: str, 
                          ^
security/ai_agents/anti_fraud_master_ai.py:225:1: W293 blank line contains whitespace
        """
        Анализ телефонного звонка на мошенничество
        
        Args:
            elderly_id: ID пожилого человека
            phone_number: Номер телефона
            audio_data: Аудиоданные звонка
            caller_name: Имя звонящего
            call_duration: Длительность звонка в секундах
            
        Returns:
            Tuple[RiskLevel, ProtectionAction, str]: (уровень риска, действие, причина)
        """
^
security/ai_agents/anti_fraud_master_ai.py:232:1: W293 blank line contains whitespace
        """
        Анализ телефонного звонка на мошенничество
        
        Args:
            elderly_id: ID пожилого человека
            phone_number: Номер телефона
            audio_data: Аудиоданные звонка
            caller_name: Имя звонящего
            call_duration: Длительность звонка в секундах
            
        Returns:
            Tuple[RiskLevel, ProtectionAction, str]: (уровень риска, действие, причина)
        """
^
security/ai_agents/anti_fraud_master_ai.py:234:80: E501 line too long (87 > 79 characters)
        """
        Анализ телефонного звонка на мошенничество
        
        Args:
            elderly_id: ID пожилого человека
            phone_number: Номер телефона
            audio_data: Аудиоданные звонка
            caller_name: Имя звонящего
            call_duration: Длительность звонка в секундах
            
        Returns:
            Tuple[RiskLevel, ProtectionAction, str]: (уровень риска, действие, причина)
        """
           
                                                  
        
       ^
security/ai_agents/anti_fraud_master_ai.py:238:1: W293 blank line contains whitespace
            
^
security/ai_agents/anti_fraud_master_ai.py:241:28: W291 trailing whitespace
                audio_data, 
                           ^
security/ai_agents/anti_fraud_master_ai.py:242:30: W291 trailing whitespace
                phone_number, 
                             ^
security/ai_agents/anti_fraud_master_ai.py:245:1: W293 blank line contains whitespace
            
^
security/ai_agents/anti_fraud_master_ai.py:248:80: E501 line too long (87 > 79 characters)
                return RiskLevel.CRITICAL, ProtectionAction.BLOCK, "Номер заблокирован"
                                                                               ^
security/ai_agents/anti_fraud_master_ai.py:249:1: W293 blank line contains whitespace
            
^
security/ai_agents/anti_fraud_master_ai.py:252:80: E501 line too long (82 > 79 characters)
                return RiskLevel.LOW, ProtectionAction.ALLOW, "Доверенный контакт"
                                                                               ^
security/ai_agents/anti_fraud_master_ai.py:253:1: W293 blank line contains whitespace
            
^
security/ai_agents/anti_fraud_master_ai.py:255:13: F841 local variable 'suspicious_phrases' is assigned to but never used
            suspicious_phrases = self._detect_suspicious_phrases(voice_result.suspicious_phrases)
            ^
security/ai_agents/anti_fraud_master_ai.py:255:80: E501 line too long (97 > 79 characters)
            suspicious_phrases = self._detect_suspicious_phrases(voice_result.suspicious_phrases)
                                                                               ^
security/ai_agents/anti_fraud_master_ai.py:256:1: W293 blank line contains whitespace
            
^
security/ai_agents/anti_fraud_master_ai.py:258:80: E501 line too long (88 > 79 characters)
            emotional_risk = self._assess_emotional_risk(voice_result.emotion_detection)
                                                                               ^
security/ai_agents/anti_fraud_master_ai.py:259:1: W293 blank line contains whitespace
            
^
security/ai_agents/anti_fraud_master_ai.py:261:80: E501 line too long (100 > 79 characters)
            manipulation_risk = self._assess_manipulation_risk(voice_result.manipulation_indicators)
                                                                               ^
security/ai_agents/anti_fraud_master_ai.py:262:1: W293 blank line contains whitespace
            
^
security/ai_agents/anti_fraud_master_ai.py:269:1: W293 blank line contains whitespace
            
^
security/ai_agents/anti_fraud_master_ai.py:272:80: E501 line too long (96 > 79 characters)
                await self._trigger_emergency_mode(elderly_id, "Критический риск мошенничества")
                                                                               ^
security/ai_agents/anti_fraud_master_ai.py:273:80: E501 line too long (113 > 79 characters)
                return RiskLevel.EMERGENCY, ProtectionAction.EMERGENCY_MODE, f"Экстренный риск: {total_risk:.2f}"
                                                                               ^
security/ai_agents/anti_fraud_master_ai.py:274:1: W293 blank line contains whitespace
            
^
security/ai_agents/anti_fraud_master_ai.py:277:80: E501 line too long (108 > 79 characters)
                await self._notify_family(elderly_id, f"Заблокирован подозрительный звонок: {phone_number}")
                                                                               ^
security/ai_agents/anti_fraud_master_ai.py:278:80: E501 line too long (106 > 79 characters)
                return RiskLevel.CRITICAL, ProtectionAction.BLOCK_PHONE, f"Высокий риск: {total_risk:.2f}"
                                                                               ^
security/ai_agents/anti_fraud_master_ai.py:279:1: W293 blank line contains whitespace
            
^
security/ai_agents/anti_fraud_master_ai.py:281:80: E501 line too long (95 > 79 characters)
                await self._notify_family(elderly_id, f"Подозрительный звонок: {phone_number}")
                                                                               ^
security/ai_agents/anti_fraud_master_ai.py:282:80: E501 line too long (104 > 79 characters)
                return RiskLevel.HIGH, ProtectionAction.NOTIFY_FAMILY, f"Средний риск: {total_risk:.2f}"
                                                                               ^
security/ai_agents/anti_fraud_master_ai.py:283:1: W293 blank line contains whitespace
            
^
security/ai_agents/anti_fraud_master_ai.py:285:80: E501 line too long (96 > 79 characters)
                return RiskLevel.MEDIUM, ProtectionAction.WARN, f"Низкий риск: {total_risk:.2f}"
                                                                               ^
security/ai_agents/anti_fraud_master_ai.py:286:1: W293 blank line contains whitespace
            
^
security/ai_agents/anti_fraud_master_ai.py:288:80: E501 line too long (80 > 79 characters)
                return RiskLevel.LOW, ProtectionAction.ALLOW, "Звонок безопасен"
                                                                               ^
security/ai_agents/anti_fraud_master_ai.py:289:1: W293 blank line contains whitespace
                
^
security/ai_agents/anti_fraud_master_ai.py:295:14: W291 trailing whitespace
        self, 
             ^
security/ai_agents/anti_fraud_master_ai.py:296:25: W291 trailing whitespace
        elderly_id: str, 
                        ^
security/ai_agents/anti_fraud_master_ai.py:297:29: W291 trailing whitespace
        video_stream: bytes, 
                            ^
security/ai_agents/anti_fraud_master_ai.py:303:1: W293 blank line contains whitespace
        """
        Анализ видеозвонка на deepfake мошенничество
        
        Args:
            elderly_id: ID пожилого человека
            video_stream: Видеопоток
            audio_stream: Аудиопоток
            caller_name: Имя звонящего
            
        Returns:
            Tuple[RiskLevel, ProtectionAction, str]: (уровень риска, действие, причина)
        """
^
security/ai_agents/anti_fraud_master_ai.py:309:1: W293 blank line contains whitespace
        """
        Анализ видеозвонка на deepfake мошенничество
        
        Args:
            elderly_id: ID пожилого человека
            video_stream: Видеопоток
            audio_stream: Аудиопоток
            caller_name: Имя звонящего
            
        Returns:
            Tuple[RiskLevel, ProtectionAction, str]: (уровень риска, действие, причина)
        """
^
security/ai_agents/anti_fraud_master_ai.py:311:80: E501 line too long (87 > 79 characters)
        """
        Анализ видеозвонка на deepfake мошенничество
        
        Args:
            elderly_id: ID пожилого человека
            video_stream: Видеопоток
            audio_stream: Аудиопоток
            caller_name: Имя звонящего
            
        Returns:
            Tuple[RiskLevel, ProtectionAction, str]: (уровень риска, действие, причина)
        """
           
                                                    
        
     ^
security/ai_agents/anti_fraud_master_ai.py:314:80: E501 line too long (80 > 79 characters)
            self.logger.info(f"Анализ видеозвонка на deepfake для {elderly_id}")
                                                                               ^
security/ai_agents/anti_fraud_master_ai.py:315:1: W293 blank line contains whitespace
            
^
security/ai_agents/anti_fraud_master_ai.py:318:30: W291 trailing whitespace
                video_stream, 
                             ^
security/ai_agents/anti_fraud_master_ai.py:319:30: W291 trailing whitespace
                audio_stream, 
                             ^
security/ai_agents/anti_fraud_master_ai.py:322:1: W293 blank line contains whitespace
            
^
security/ai_agents/anti_fraud_master_ai.py:325:30: W291 trailing whitespace
                audio_stream, 
                             ^
security/ai_agents/anti_fraud_master_ai.py:326:20: W291 trailing whitespace
                "", 
                   ^
security/ai_agents/anti_fraud_master_ai.py:329:1: W293 blank line contains whitespace
            
^
security/ai_agents/anti_fraud_master_ai.py:335:1: W293 blank line contains whitespace
            
^
security/ai_agents/anti_fraud_master_ai.py:338:80: E501 line too long (94 > 79 characters)
                await self._trigger_emergency_mode(elderly_id, "Обнаружен deepfake мошенник!")
                                                                               ^
security/ai_agents/anti_fraud_master_ai.py:339:80: E501 line too long (116 > 79 characters)
                return RiskLevel.EMERGENCY, ProtectionAction.EMERGENCY_MODE, f"Deepfake обнаружен: {total_risk:.2f}"
                                                                               ^
security/ai_agents/anti_fraud_master_ai.py:340:1: W293 blank line contains whitespace
            
^
security/ai_agents/anti_fraud_master_ai.py:342:80: E501 line too long (99 > 79 characters)
                await self._notify_family(elderly_id, f"Подозрительный видеозвонок: {caller_name}")
                                                                               ^
security/ai_agents/anti_fraud_master_ai.py:343:80: E501 line too long (109 > 79 characters)
                return RiskLevel.CRITICAL, ProtectionAction.BLOCK, f"Высокий риск deepfake: {total_risk:.2f}"
                                                                               ^
security/ai_agents/anti_fraud_master_ai.py:344:1: W293 blank line contains whitespace
            
^
security/ai_agents/anti_fraud_master_ai.py:346:80: E501 line too long (99 > 79 characters)
                await self._notify_family(elderly_id, f"Подозрительный видеозвонок: {caller_name}")
                                                                               ^
security/ai_agents/anti_fraud_master_ai.py:347:80: E501 line too long (104 > 79 characters)
                return RiskLevel.HIGH, ProtectionAction.NOTIFY_FAMILY, f"Средний риск: {total_risk:.2f}"
                                                                               ^
security/ai_agents/anti_fraud_master_ai.py:348:1: W293 blank line contains whitespace
            
^
security/ai_agents/anti_fraud_master_ai.py:350:80: E501 line too long (85 > 79 characters)
                return RiskLevel.LOW, ProtectionAction.ALLOW, "Видеозвонок безопасен"
                                                                               ^
security/ai_agents/anti_fraud_master_ai.py:351:1: W293 blank line contains whitespace
                
^
security/ai_agents/anti_fraud_master_ai.py:357:14: W291 trailing whitespace
        self, 
             ^
security/ai_agents/anti_fraud_master_ai.py:358:25: W291 trailing whitespace
        elderly_id: str, 
                        ^
security/ai_agents/anti_fraud_master_ai.py:363:1: W293 blank line contains whitespace
        """
        Мониторинг финансовых транзакций
        
        Args:
            elderly_id: ID пожилого человека
            transaction_data: Данные транзакции
            
        Returns:
            FinancialRiskAssessment: Оценка финансового риска
        """
^
security/ai_agents/anti_fraud_master_ai.py:367:1: W293 blank line contains whitespace
        """
        Мониторинг финансовых транзакций
        
        Args:
            elderly_id: ID пожилого человека
            transaction_data: Данные транзакции
            
        Returns:
            FinancialRiskAssessment: Оценка финансового риска
        """
^
security/ai_agents/anti_fraud_master_ai.py:372:80: E501 line too long (82 > 79 characters)
            self.logger.info(f"Мониторинг финансовой транзакции для {elderly_id}")
                                                                               ^
security/ai_agents/anti_fraud_master_ai.py:373:1: W293 blank line contains whitespace
            
^
security/ai_agents/anti_fraud_master_ai.py:376:28: W291 trailing whitespace
                elderly_id, 
                           ^
security/ai_agents/anti_fraud_master_ai.py:379:1: W293 blank line contains whitespace
            
^
security/ai_agents/anti_fraud_master_ai.py:383:80: E501 line too long (139 > 79 characters)
                await self._notify_family(elderly_id, f"Заблокирована подозрительная транзакция: {transaction_data.get('amount', 0)} руб.")
                                                                               ^
security/ai_agents/anti_fraud_master_ai.py:385:80: E501 line too long (80 > 79 characters)
                risk_assessment.recommended_action = ProtectionAction.BLOCK_BANK
                                                                               ^
security/ai_agents/anti_fraud_master_ai.py:386:1: W293 blank line contains whitespace
            
^
security/ai_agents/anti_fraud_master_ai.py:389:80: E501 line too long (94 > 79 characters)
                await self._trigger_emergency_mode(elderly_id, "Критический финансовый риск!")
                                                                               ^
security/ai_agents/anti_fraud_master_ai.py:390:80: E501 line too long (84 > 79 characters)
                risk_assessment.recommended_action = ProtectionAction.EMERGENCY_MODE
                                                                               ^
security/ai_agents/anti_fraud_master_ai.py:391:1: W293 blank line contains whitespace
            
^
security/ai_agents/anti_fraud_master_ai.py:394:1: W293 blank line contains whitespace
            
^
security/ai_agents/anti_fraud_master_ai.py:396:1: W293 blank line contains whitespace
            
^
security/ai_agents/anti_fraud_master_ai.py:409:80: E501 line too long (80 > 79 characters)
    async def _detect_suspicious_phrases(self, phrases: List[str]) -> List[str]:
                                                                               ^
security/ai_agents/anti_fraud_master_ai.py:423:1: W293 blank line contains whitespace
        
^
security/ai_agents/anti_fraud_master_ai.py:427:1: W293 blank line contains whitespace
        
^
security/ai_agents/anti_fraud_master_ai.py:432:80: E501 line too long (94 > 79 characters)
        manipulation_techniques = self.fraud_patterns["phone_scam"]["manipulation_techniques"]
                                                                               ^
security/ai_agents/anti_fraud_master_ai.py:434:1: W293 blank line contains whitespace
        
^
security/ai_agents/anti_fraud_master_ai.py:438:1: W293 blank line contains whitespace
        
^
security/ai_agents/anti_fraud_master_ai.py:452:1: W293 blank line contains whitespace
            
^
security/ai_agents/anti_fraud_master_ai.py:453:80: E501 line too long (81 > 79 characters)
            await self.emergency_system.trigger_emergency_mode(elderly_id, alert)
                                                                               ^
security/ai_agents/anti_fraud_master_ai.py:455:1: W293 blank line contains whitespace
            
^
security/ai_agents/anti_fraud_master_ai.py:456:80: E501 line too long (91 > 79 characters)
            self.logger.warning(f"ЭКСТРЕННЫЙ РЕЖИМ активирован для {elderly_id}: {reason}")
                                                                               ^
security/ai_agents/anti_fraud_master_ai.py:457:1: W293 blank line contains whitespace
            
^
security/ai_agents/anti_fraud_master_ai.py:466:1: W293 blank line contains whitespace
            
^
security/ai_agents/anti_fraud_master_ai.py:475:1: W293 blank line contains whitespace
            
^
security/ai_agents/anti_fraud_master_ai.py:508:1: E402 module level import not at top of file
from security.ai_agents.voice_analysis_engine import VoiceAnalysisEngine
^
security/ai_agents/anti_fraud_master_ai.py:509:1: E402 module level import not at top of file
from security.ai_agents.deepfake_protection_system import DeepfakeProtectionSystem
^
security/ai_agents/anti_fraud_master_ai.py:509:80: E501 line too long (82 > 79 characters)
from security.ai_agents.deepfake_protection_system import DeepfakeProtectionSystem
                                                                               ^
security/ai_agents/anti_fraud_master_ai.py:510:1: E402 module level import not at top of file
from security.ai_agents.financial_protection_hub import FinancialProtectionHub
^
security/ai_agents/anti_fraud_master_ai.py:511:1: E402 module level import not at top of file
from security.ai_agents.emergency_response_system import EmergencyResponseSystem
^
security/ai_agents/anti_fraud_master_ai.py:511:80: E501 line too long (80 > 79 characters)
from security.ai_agents.emergency_response_system import EmergencyResponseSystem
                                                                               ^
security/ai_agents/anti_fraud_master_ai.py:512:1: E402 module level import not at top of file
from security.ai_agents.elderly_protection_interface import ElderlyProtectionInterface
^
security/ai_agents/anti_fraud_master_ai.py:512:80: E501 line too long (86 > 79 characters)
from security.ai_agents.elderly_protection_interface import ElderlyProtectionInterface
                                                                               ^
security/ai_agents/anti_fraud_master_ai.py:519:1: W293 blank line contains whitespace
        
^
security/ai_agents/anti_fraud_master_ai.py:527:1: W293 blank line contains whitespace
        
^
security/ai_agents/anti_fraud_master_ai.py:529:1: W293 blank line contains whitespace
        
^
security/ai_agents/anti_fraud_master_ai.py:536:1: W293 blank line contains whitespace
        
^
security/ai_agents/anti_fraud_master_ai.py:541:1: W293 blank line contains whitespace
        
^
security/ai_agents/anti_fraud_master_ai.py:543:1: W293 blank line contains whitespace
        
^
security/ai_agents/anti_fraud_master_ai.py:547:1: W293 blank line contains whitespace
    
^
security/ai_agents/anti_fraud_master_ai.py:549:45: W292 no newline at end of file
    asyncio.run(test_anti_fraud_master_ai())                                            ^
security/ai_agents/behavioral_analysis_agent.py:286:80: E501 line too long (85 > 79 characters)
                         analysis_time) / self.statistics["total_analyses_performed"]
                                                                               ^
security/ai_agents/behavioral_analysis_agent.py:295:80: E501 line too long (82 > 79 characters)
    def get_user_behavior_profile(self, user_id: str) -> Optional[Dict[str, Any]]:
                                                                               ^
security/ai_agents/behavioral_analysis_agent.py:311:80: E501 line too long (82 > 79 characters)
            self.log_activity(f"Ошибка получения профиля поведения: {e}", "error")
                                                                               ^
security/ai_agents/behavioral_analysis_agent.py:314:80: E501 line too long (92 > 79 characters)
    def get_behavior_patterns(self, user_id: Optional[str] = None) -> List[BehaviorPattern]:
                                                                               ^
security/ai_agents/behavioral_analysis_agent.py:327:80: E501 line too long (84 > 79 characters)
            self.log_activity(f"Ошибка получения паттернов поведения: {e}", "error")
                                                                               ^
security/ai_agents/behavioral_analysis_agent.py:336:80: E501 line too long (81 > 79 characters)
            self.log_activity(f"Ошибка получения метрик поведения: {e}", "error")
                                                                               ^
security/ai_agents/behavioral_analysis_agent.py:345:80: E501 line too long (97 > 79 characters)
                    "total_events": sum(len(events) for events in self.behavior_events.values()),
                                                                               ^
security/ai_agents/behavioral_analysis_agent.py:346:80: E501 line too long (105 > 79 characters)
                    "total_patterns": sum(len(patterns) for patterns in self.behavior_patterns.values()),
                                                                               ^
security/ai_agents/behavioral_analysis_agent.py:361:80: E501 line too long (85 > 79 characters)
            self.log_activity("AI модели анализа поведения инициализированы", "info")
                                                                               ^
security/ai_agents/behavioral_analysis_agent.py:377:80: E501 line too long (92 > 79 characters)
                    characteristics={"avg_session_duration": 1800, "pages_per_session": 15},
                                                                               ^
security/ai_agents/behavioral_analysis_agent.py:388:80: E501 line too long (84 > 79 characters)
                    characteristics={"unusual_timing": True, "rapid_actions": True},
                                                                               ^
security/ai_agents/behavioral_analysis_agent.py:400:80: E501 line too long (92 > 79 characters)
            self.log_activity(f"Загружено {len(test_patterns)} паттернов поведения", "info")
                                                                               ^
security/ai_agents/behavioral_analysis_agent.py:402:80: E501 line too long (83 > 79 characters)
            self.log_activity(f"Ошибка загрузки паттернов поведения: {e}", "error")
                                                                               ^
security/ai_agents/behavioral_analysis_agent.py:446:80: E501 line too long (89 > 79 characters)
                event_id=f"event-{int(time.time() * 1000)}-{random.randint(1000, 9999)}",
                                                                               ^
security/ai_agents/behavioral_analysis_agent.py:461:80: E501 line too long (81 > 79 characters)
            self.log_activity(f"Ошибка создания события поведения: {e}", "error")
                                                                               ^
security/ai_agents/behavioral_analysis_agent.py:484:80: E501 line too long (80 > 79 characters)
            if len(self.behavior_events[user_id]) > self.max_events_per_session:
                                                                               ^
security/ai_agents/behavioral_analysis_agent.py:485:80: E501 line too long (108 > 79 characters)
                self.behavior_events[user_id] = self.behavior_events[user_id][-self.max_events_per_session:]
                                                                               ^
security/ai_agents/behavioral_analysis_agent.py:488:80: E501 line too long (89 > 79 characters)
            cutoff_time = datetime.now() - timedelta(hours=self.behavior_retention_hours)
                                                                               ^
security/ai_agents/behavioral_analysis_agent.py:498:80: E501 line too long (83 > 79 characters)
            self.log_activity(f"Ошибка добавления события поведения: {e}", "error")
                                                                               ^
security/ai_agents/behavioral_analysis_agent.py:501:80: E501 line too long (87 > 79 characters)
                                   event: BehaviorEvent) -> Optional[BehaviorAnalysis]:
                                                                               ^
security/ai_agents/behavioral_analysis_agent.py:506:80: E501 line too long (105 > 79 characters)
            recent_events = [e for e in user_events if e.timestamp > datetime.now() - timedelta(hours=1)]
                                                                               ^
security/ai_agents/behavioral_analysis_agent.py:515:80: E501 line too long (95 > 79 characters)
            overall_risk, risk_score = self._calculate_overall_risk(event, anomalies, patterns)
                                                                               ^
security/ai_agents/behavioral_analysis_agent.py:518:80: E501 line too long (95 > 79 characters)
            recommendations = self._generate_recommendations(overall_risk, anomalies, patterns)
                                                                               ^
security/ai_agents/behavioral_analysis_agent.py:543:80: E501 line too long (83 > 79 characters)
            self.log_activity(f"Ошибка выполнения анализа поведения: {e}", "error")
                                                                               ^
security/ai_agents/behavioral_analysis_agent.py:546:80: E501 line too long (82 > 79 characters)
    def _classify_behavior_type(self, event_data: Dict[str, Any]) -> BehaviorType:
                                                                               ^
security/ai_agents/behavioral_analysis_agent.py:564:80: E501 line too long (83 > 79 characters)
            self.log_activity(f"Ошибка классификации типа поведения: {e}", "error")
                                                                               ^
security/ai_agents/behavioral_analysis_agent.py:567:80: E501 line too long (90 > 79 characters)
    def _classify_behavior_category(self, event_data: Dict[str, Any]) -> BehaviorCategory:
                                                                               ^
security/ai_agents/behavioral_analysis_agent.py:586:80: E501 line too long (88 > 79 characters)
            self.log_activity(f"Ошибка классификации категории поведения: {e}", "error")
                                                                               ^
security/ai_agents/behavioral_analysis_agent.py:682:80: E501 line too long (81 > 79 characters)
    def _calculate_overall_risk(self, event: BehaviorEvent, anomalies: List[str],
                                                                               ^
security/ai_agents/behavioral_analysis_agent.py:683:80: E501 line too long (80 > 79 characters)
                                patterns: List[str]) -> Tuple[RiskLevel, float]:
                                                                               ^
security/ai_agents/behavioral_analysis_agent.py:713:80: E501 line too long (84 > 79 characters)
    def _generate_recommendations(self, risk_level: RiskLevel, anomalies: List[str],
                                                                               ^
security/ai_agents/behavioral_analysis_agent.py:738:80: E501 line too long (81 > 79 characters)
    def _create_behavior_profile(self, user_id: str) -> Optional[Dict[str, Any]]:
                                                                               ^
security/ai_agents/behavioral_analysis_agent.py:752:80: E501 line too long (112 > 79 characters)
                "most_common_category": max(set(categories), key=categories.count) if categories else "unknown",
                                                                               ^
security/ai_agents/behavioral_analysis_agent.py:753:80: E501 line too long (93 > 79 characters)
                "most_common_type": max(set(types), key=types.count) if types else "unknown",
                                                                               ^
security/ai_agents/behavioral_analysis_agent.py:754:80: E501 line too long (91 > 79 characters)
                "average_risk_score": statistics.mean([e.risk_score for e in user_events]),
                                                                               ^
security/ai_agents/behavioral_analysis_agent.py:756:80: E501 line too long (109 > 79 characters)
                "last_activity": max([e.timestamp for e in user_events]).isoformat() if user_events else None
                                                                               ^
security/ai_agents/behavioral_analysis_agent.py:762:80: E501 line too long (81 > 79 characters)
            self.log_activity(f"Ошибка создания профиля поведения: {e}", "error")
                                                                               ^
security/ai_agents/behavioral_analysis_agent.py:777:80: E501 line too long (92 > 79 characters)
                self.behavior_metrics.anomalies_detected += len(analysis.anomalies_detected)
                                                                               ^
security/ai_agents/behavioral_analysis_agent.py:780:80: E501 line too long (82 > 79 characters)
            self.log_activity(f"Ошибка обновления метрик поведения: {e}", "error")
                                                                               ^
security/ai_agents/behavioral_analysis_agent.py:804:80: E501 line too long (80 > 79 characters)
            self.log_activity(f"Ошибка задачи обучения паттернов: {e}", "error")
                                                                               ^
security/ai_agents/behavioral_analysis_agent.py:811:80: E501 line too long (93 > 79 characters)
                if len(events) > 10:  # Анализируем только при достаточном количестве событий
                                                                               ^
security/ai_agents/behavioral_analysis_agent.py:816:80: E501 line too long (82 > 79 characters)
            self.log_activity(f"Ошибка анализа накопленных событий: {e}", "error")
                                                                               ^
security/ai_agents/behavioral_analysis_agent.py:834:80: E501 line too long (106 > 79 characters)
    def _identify_user_patterns(self, user_id: str, events: List[BehaviorEvent]) -> List[BehaviorPattern]:
                                                                               ^
security/ai_agents/behavioral_analysis_agent.py:857:80: E501 line too long (91 > 79 characters)
            self.log_activity(f"Ошибка идентификации паттернов пользователя: {e}", "error")
                                                                               ^
security/ai_agents/behavioral_analysis_agent.py:867:80: E501 line too long (101 > 79 characters)
                "patterns": {k: [p.to_dict() for p in v] for k, v in self.behavior_patterns.items()},
                                                                               ^
security/ai_agents/behavioral_analysis_agent.py:874:80: E501 line too long (91 > 79 characters)
            with open("/tmp/aladdin_behavior/last_state.json", 'w', encoding='utf-8') as f:
                                                                               ^
security/ai_agents/behavioral_analysis_agent.py:879:80: E501 line too long (93 > 79 characters)
            self.log_activity(f"Ошибка сохранения состояния анализа поведения: {e}", "error")
                                                                               ^
security/ai_agents/behavioral_analytics_engine.py:13:1: F401 'time' imported but unused
import time
^
security/ai_agents/behavioral_analytics_engine.py:19:1: F401 'typing.Optional' imported but unused
from typing import Dict, List, Optional, Any, Tuple, Callable
^
security/ai_agents/behavioral_analytics_engine.py:19:1: F401 'typing.Tuple' imported but unused
from typing import Dict, List, Optional, Any, Tuple, Callable
^
security/ai_agents/behavioral_analytics_engine.py:19:1: F401 'typing.Callable' imported but unused
from typing import Dict, List, Optional, Any, Tuple, Callable
^
security/ai_agents/behavioral_analytics_engine.py:21:1: F401 'threading' imported but unused
import threading
^
security/ai_agents/behavioral_analytics_engine.py:23:1: F401 'collections.defaultdict' imported but unused
from collections import defaultdict, Counter
^
security/ai_agents/behavioral_analytics_engine.py:41:1: E302 expected 2 blank lines, found 1
class BehaviorType(Enum):
^
security/ai_agents/behavioral_analytics_engine.py:49:1: E302 expected 2 blank lines, found 1
class UserActivity(Enum):
^
security/ai_agents/behavioral_analytics_engine.py:55:36: E261 at least two spaces before inline comment
    VOICE_COMMAND = "voice_command" # Голосовые команды
                                   ^
security/ai_agents/behavioral_analytics_engine.py:56:40: E261 at least two spaces before inline comment
    SECURITY_ACTION = "security_action" # Действия безопасности
                                       ^
security/ai_agents/behavioral_analytics_engine.py:58:46: E261 at least two spaces before inline comment
    FAMILY_INTERACTION = "family_interaction" # Семейное взаимодействие
                                             ^
security/ai_agents/behavioral_analytics_engine.py:60:1: E302 expected 2 blank lines, found 1
class RiskLevel(Enum):
^
security/ai_agents/behavioral_analytics_engine.py:67:1: E302 expected 2 blank lines, found 1
@dataclass
^
security/ai_agents/behavioral_analytics_engine.py:80:1: E302 expected 2 blank lines, found 1
@dataclass
^
security/ai_agents/behavioral_analytics_engine.py:92:1: E302 expected 2 blank lines, found 1
@dataclass
^
security/ai_agents/behavioral_analytics_engine.py:103:1: E302 expected 2 blank lines, found 1
class BehavioralAnalyticsEngine(SecurityBase):
^
security/ai_agents/behavioral_analytics_engine.py:105:1: W293 blank line contains whitespace
    
^
security/ai_agents/behavioral_analytics_engine.py:107:80: E501 line too long (90 > 79 characters)
        super().__init__("BehavioralAnalyticsEngine", "AI-анализ поведения пользователей")
                                                                               ^
security/ai_agents/behavioral_analytics_engine.py:125:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:148:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:158:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:159:9: F841 local variable 'e' is assigned to but never used
        except Exception as e:
        ^
security/ai_agents/behavioral_analytics_engine.py:184:80: E501 line too long (90 > 79 characters)
                "features": ["duration", "frequency", "location", "device", "time_of_day"]
                                                                               ^
security/ai_agents/behavioral_analytics_engine.py:190:80: E501 line too long (93 > 79 characters)
                "features": ["activity_type", "duration", "location", "device", "risk_score"]
                                                                               ^
security/ai_agents/behavioral_analytics_engine.py:196:80: E501 line too long (97 > 79 characters)
                "features": ["behavior_history", "anomaly_count", "risk_factors", "user_profile"]
                                                                               ^
security/ai_agents/behavioral_analytics_engine.py:202:80: E501 line too long (103 > 79 characters)
                "features": ["activity_sequence", "time_patterns", "location_patterns", "device_usage"]
                                                                               ^
security/ai_agents/behavioral_analytics_engine.py:210:1: W293 blank line contains whitespace
        
^
security/ai_agents/behavioral_analytics_engine.py:211:80: E501 line too long (105 > 79 characters)
        log_file = os.path.join(log_dir, f"behavioral_analytics_{datetime.now().strftime('%Y%m%d')}.log")
                                                                               ^
security/ai_agents/behavioral_analytics_engine.py:212:1: W293 blank line contains whitespace
        
^
security/ai_agents/behavioral_analytics_engine.py:216:80: E501 line too long (95 > 79 characters)
            handlers=[logging.FileHandler(log_file, encoding='utf-8'), logging.StreamHandler()]
                                                                               ^
security/ai_agents/behavioral_analytics_engine.py:218:1: W293 blank line contains whitespace
        
^
security/ai_agents/behavioral_analytics_engine.py:227:21: F841 local variable 'config' is assigned to but never used
                    config = json.load(f)
                    ^
security/ai_agents/behavioral_analytics_engine.py:228:80: E501 line too long (82 > 79 characters)
                    self.logger.info("Конфигурация аналитики поведения загружена")
                                                                               ^
security/ai_agents/behavioral_analytics_engine.py:230:80: E501 line too long (96 > 79 characters)
                self.logger.info("Конфигурация не найдена, используются настройки по умолчанию")
                                                                               ^
security/ai_agents/behavioral_analytics_engine.py:234:79: W291 trailing whitespace
    def analyze_user_behavior(self, user_id: str, activity_type: UserActivity, 
                                                                              ^
security/ai_agents/behavioral_analytics_engine.py:235:29: E128 continuation line under-indented for visual indent
                            duration: float, location: str, device: str, 
                            ^
security/ai_agents/behavioral_analytics_engine.py:235:73: W291 trailing whitespace
                            duration: float, location: str, device: str, 
                                                                        ^
security/ai_agents/behavioral_analytics_engine.py:236:29: E128 continuation line under-indented for visual indent
                            metadata: Dict[str, Any] = None) -> Dict[str, Any]:
                            ^
security/ai_agents/behavioral_analytics_engine.py:251:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:254:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:257:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:260:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:263:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:265:80: E501 line too long (103 > 79 characters)
            report = self._generate_behavior_report(user_id, behavior, analysis_result, anomaly_result)
                                                                               ^
security/ai_agents/behavioral_analytics_engine.py:266:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:267:80: E501 line too long (105 > 79 characters)
            self.logger.info(f"Поведение пользователя {user_id} проанализировано: {activity_type.value}")
                                                                               ^
security/ai_agents/behavioral_analytics_engine.py:269:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:280:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:284:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:287:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:290:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:306:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:315:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:323:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:331:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:339:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:349:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:353:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:362:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:381:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:383:80: E501 line too long (85 > 79 characters)
            user_behaviors = [b for b in self.user_behaviors if b.user_id == user_id]
                                                                               ^
security/ai_agents/behavioral_analytics_engine.py:384:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:387:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:390:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:393:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:396:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:398:80: E501 line too long (88 > 79 characters)
            pattern_anomalies = self._detect_pattern_anomalies(behavior, user_behaviors)
                                                                               ^
security/ai_agents/behavioral_analytics_engine.py:399:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:412:80: E501 line too long (86 > 79 characters)
    def _analyze_time_patterns(self, behaviors: List[UserBehavior]) -> Dict[str, Any]:
                                                                               ^
security/ai_agents/behavioral_analytics_engine.py:428:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:432:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:435:80: E501 line too long (85 > 79 characters)
            most_active_hour = hour_counts.most_common(1)[0][0] if hour_counts else 0
                                                                               ^
security/ai_agents/behavioral_analytics_engine.py:436:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:439:80: E501 line too long (82 > 79 characters)
            most_active_day = day_counts.most_common(1)[0][0] if day_counts else 0
                                                                               ^
security/ai_agents/behavioral_analytics_engine.py:440:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:442:80: E501 line too long (93 > 79 characters)
            avg_activity = sum(hour_counts.values()) / len(hour_counts) if hour_counts else 0
                                                                               ^
security/ai_agents/behavioral_analytics_engine.py:443:80: E501 line too long (100 > 79 characters)
            peak_hours = [hour for hour, count in hour_counts.items() if count > avg_activity * 1.5]
                                                                               ^
security/ai_agents/behavioral_analytics_engine.py:444:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:446:80: E501 line too long (99 > 79 characters)
            off_hours = [hour for hour, count in hour_counts.items() if count < avg_activity * 0.5]
                                                                               ^
security/ai_agents/behavioral_analytics_engine.py:447:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:450:80: E501 line too long (96 > 79 characters)
            weekend_activity = sum(day_counts[day] for day in weekend_days if day in day_counts)
                                                                               ^
security/ai_agents/behavioral_analytics_engine.py:451:80: E501 line too long (92 > 79 characters)
            weekday_activity = sum(day_counts[day] for day in range(5) if day in day_counts)
                                                                               ^
security/ai_agents/behavioral_analytics_engine.py:453:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:454:80: E501 line too long (92 > 79 characters)
            weekend_ratio = weekend_activity / total_activity if total_activity > 0 else 0.0
                                                                               ^
security/ai_agents/behavioral_analytics_engine.py:455:80: E501 line too long (92 > 79 characters)
            weekday_ratio = weekday_activity / total_activity if total_activity > 0 else 0.0
                                                                               ^
security/ai_agents/behavioral_analytics_engine.py:456:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:457:80: E501 line too long (82 > 79 characters)
            # Временная консистентность (насколько регулярно пользователь активен)
                                                                               ^
security/ai_agents/behavioral_analytics_engine.py:459:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:461:80: E501 line too long (89 > 79 characters)
            temporal_anomalies = self._detect_temporal_anomalies(timestamps, hour_counts)
                                                                               ^
security/ai_agents/behavioral_analytics_engine.py:462:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:490:80: E501 line too long (90 > 79 characters)
    def _analyze_location_patterns(self, behaviors: List[UserBehavior]) -> Dict[str, Any]:
                                                                               ^
security/ai_agents/behavioral_analytics_engine.py:495:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:497:80: E501 line too long (105 > 79 characters)
            most_common_location = location_counts.most_common(1)[0][0] if location_counts else "unknown"
                                                                               ^
security/ai_agents/behavioral_analytics_engine.py:498:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:501:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:511:80: E501 line too long (90 > 79 characters)
    def _analyze_activity_patterns(self, behaviors: List[UserBehavior]) -> Dict[str, Any]:
                                                                               ^
security/ai_agents/behavioral_analytics_engine.py:516:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:518:80: E501 line too long (105 > 79 characters)
            most_common_activity = activity_counts.most_common(1)[0][0] if activity_counts else "unknown"
                                                                               ^
security/ai_agents/behavioral_analytics_engine.py:519:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:522:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:532:72: W291 trailing whitespace
    def _detect_pattern_anomalies(self, current_behavior: UserBehavior, 
                                                                       ^
security/ai_agents/behavioral_analytics_engine.py:533:34: E128 continuation line under-indented for visual indent
                                 historical_behaviors: List[UserBehavior]) -> List[Dict[str, Any]]:
                                 ^
security/ai_agents/behavioral_analytics_engine.py:533:80: E501 line too long (99 > 79 characters)
                                 historical_behaviors: List[UserBehavior]) -> List[Dict[str, Any]]:
                                                                               ^
security/ai_agents/behavioral_analytics_engine.py:537:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:540:80: E501 line too long (84 > 79 characters)
                avg_hour = np.mean([b.timestamp.hour for b in historical_behaviors])
                                                                               ^
security/ai_agents/behavioral_analytics_engine.py:542:1: W293 blank line contains whitespace
                
^
security/ai_agents/behavioral_analytics_engine.py:543:80: E501 line too long (81 > 79 characters)
                if abs(current_hour - avg_hour) > 4:  # Более 4 часов от среднего
                                                                               ^
security/ai_agents/behavioral_analytics_engine.py:546:80: E501 line too long (88 > 79 characters)
                        "description": f"Необычное время активности: {current_hour}:00",
                                                                               ^
security/ai_agents/behavioral_analytics_engine.py:549:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:552:80: E501 line too long (82 > 79 characters)
                avg_duration = np.mean([b.duration for b in historical_behaviors])
                                                                               ^
security/ai_agents/behavioral_analytics_engine.py:554:1: W293 blank line contains whitespace
                
^
security/ai_agents/behavioral_analytics_engine.py:555:80: E501 line too long (83 > 79 characters)
                if current_duration > avg_duration * 2:  # В 2 раза дольше среднего
                                                                               ^
security/ai_agents/behavioral_analytics_engine.py:558:80: E501 line too long (94 > 79 characters)
                        "description": f"Необычно долгая активность: {current_duration:.1f}с",
                                                                               ^
security/ai_agents/behavioral_analytics_engine.py:561:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:564:80: E501 line too long (82 > 79 characters)
                common_locations = set([b.location for b in historical_behaviors])
                                                                               ^
security/ai_agents/behavioral_analytics_engine.py:568:80: E501 line too long (92 > 79 characters)
                        "description": f"Новое местоположение: {current_behavior.location}",
                                                                               ^
security/ai_agents/behavioral_analytics_engine.py:571:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:582:80: E501 line too long (82 > 79 characters)
                "location_context": self._get_location_context(behavior.location),
                                                                               ^
security/ai_agents/behavioral_analytics_engine.py:584:80: E501 line too long (86 > 79 characters)
                "activity_context": self._get_activity_context(behavior.activity_type)
                                                                               ^
security/ai_agents/behavioral_analytics_engine.py:586:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:596:1: W293 blank line contains whitespace
        
^
security/ai_agents/behavioral_analytics_engine.py:605:1: W293 blank line contains whitespace
        
^
security/ai_agents/behavioral_analytics_engine.py:622:1: W293 blank line contains whitespace
        
^
security/ai_agents/behavioral_analytics_engine.py:638:1: W293 blank line contains whitespace
        
^
security/ai_agents/behavioral_analytics_engine.py:646:80: E501 line too long (83 > 79 characters)
    def _get_activity_context(self, activity_type: UserActivity) -> Dict[str, Any]:
                                                                               ^
security/ai_agents/behavioral_analytics_engine.py:649:80: E501 line too long (87 > 79 characters)
            UserActivity.LOGIN: {"risk_level": "low", "description": "Вход в систему"},
                                                                               ^
security/ai_agents/behavioral_analytics_engine.py:650:80: E501 line too long (90 > 79 characters)
            UserActivity.LOGOUT: {"risk_level": "low", "description": "Выход из системы"},
                                                                               ^
security/ai_agents/behavioral_analytics_engine.py:651:80: E501 line too long (101 > 79 characters)
            UserActivity.NAVIGATION: {"risk_level": "low", "description": "Навигация по интерфейсу"},
                                                                               ^
security/ai_agents/behavioral_analytics_engine.py:652:80: E501 line too long (97 > 79 characters)
            UserActivity.MESSAGING: {"risk_level": "medium", "description": "Обмен сообщениями"},
                                                                               ^
security/ai_agents/behavioral_analytics_engine.py:653:80: E501 line too long (98 > 79 characters)
            UserActivity.VOICE_COMMAND: {"risk_level": "low", "description": "Голосовые команды"},
                                                                               ^
security/ai_agents/behavioral_analytics_engine.py:654:80: E501 line too long (105 > 79 characters)
            UserActivity.SECURITY_ACTION: {"risk_level": "high", "description": "Действия безопасности"},
                                                                               ^
security/ai_agents/behavioral_analytics_engine.py:655:80: E501 line too long (101 > 79 characters)
            UserActivity.EMERGENCY: {"risk_level": "critical", "description": "Экстренная ситуация"},
                                                                               ^
security/ai_agents/behavioral_analytics_engine.py:656:80: E501 line too long (108 > 79 characters)
            UserActivity.FAMILY_INTERACTION: {"risk_level": "low", "description": "Семейное взаимодействие"}
                                                                               ^
security/ai_agents/behavioral_analytics_engine.py:658:1: W293 blank line contains whitespace
        
^
security/ai_agents/behavioral_analytics_engine.py:659:80: E501 line too long (122 > 79 characters)
        context = activity_contexts.get(activity_type, {"risk_level": "unknown", "description": "Неизвестная активность"})
                                                                               ^
security/ai_agents/behavioral_analytics_engine.py:666:80: E501 line too long (88 > 79 characters)
    def _detect_anomalies(self, user_id: str, behavior: UserBehavior) -> Dict[str, Any]:
                                                                               ^
security/ai_agents/behavioral_analytics_engine.py:670:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:676:80: E501 line too long (96 > 79 characters)
                    "description": f"Активность в необычное время: {behavior.timestamp.hour}:00"
                                                                               ^
security/ai_agents/behavioral_analytics_engine.py:678:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:684:80: E501 line too long (91 > 79 characters)
                    "description": f"Чрезмерно долгая активность: {behavior.duration:.1f}с"
                                                                               ^
security/ai_agents/behavioral_analytics_engine.py:686:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:694:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:702:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:710:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:714:80: E501 line too long (119 > 79 characters)
                    anomaly_id=hashlib.md5(f"{user_id}{behavior.timestamp}{len(anomalies)}".encode()).hexdigest()[:12],
                                                                               ^
security/ai_agents/behavioral_analytics_engine.py:718:80: E501 line too long (84 > 79 characters)
                    description=f"Обнаружено {len(anomalies)} аномалий в поведении",
                                                                               ^
security/ai_agents/behavioral_analytics_engine.py:722:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:726:80: E501 line too long (89 > 79 characters)
                "severity": max([a["severity"] for a in anomalies]) if anomalies else 0.0
                                                                               ^
security/ai_agents/behavioral_analytics_engine.py:732:80: E501 line too long (106 > 79 characters)
    def _update_user_profile(self, user_id: str, behavior: UserBehavior, analysis_result: Dict[str, Any]):
                                                                               ^
security/ai_agents/behavioral_analytics_engine.py:744:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:748:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:753:80: E501 line too long (157 > 79 characters)
                profile["risk_score_avg"] = (profile["risk_score_avg"] * (profile["total_behaviors"] - 1) + behavior.risk_score) / profile["total_behaviors"]
                                                                               ^
security/ai_agents/behavioral_analytics_engine.py:754:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:757:80: E501 line too long (106 > 79 characters)
            profile["behavior_types"][behavior_type] = profile["behavior_types"].get(behavior_type, 0) + 1
                                                                               ^
security/ai_agents/behavioral_analytics_engine.py:758:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:762:78: W291 trailing whitespace
    def _generate_behavior_report(self, user_id: str, behavior: UserBehavior, 
                                                                             ^
security/ai_agents/behavioral_analytics_engine.py:763:33: E128 continuation line under-indented for visual indent
                                analysis_result: Dict[str, Any], anomaly_result: Dict[str, Any]) -> Dict[str, Any]:
                                ^
security/ai_agents/behavioral_analytics_engine.py:763:80: E501 line too long (115 > 79 characters)
                                analysis_result: Dict[str, Any], anomaly_result: Dict[str, Any]) -> Dict[str, Any]:
                                                                               ^
security/ai_agents/behavioral_analytics_engine.py:768:80: E501 line too long (103 > 79 characters)
                "behavior_id": hashlib.md5(f"{user_id}{behavior.timestamp}".encode()).hexdigest()[:12],
                                                                               ^
security/ai_agents/behavioral_analytics_engine.py:779:80: E501 line too long (92 > 79 characters)
                "color_scheme": self.color_scheme["analytics_colors"]["analytics_elements"],
                                                                               ^
security/ai_agents/behavioral_analytics_engine.py:782:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:794:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:796:80: E501 line too long (90 > 79 characters)
            behavior_types = Counter([b.behavior_type.value for b in self.user_behaviors])
                                                                               ^
security/ai_agents/behavioral_analytics_engine.py:797:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:799:80: E501 line too long (90 > 79 characters)
            activity_types = Counter([b.activity_type.value for b in self.user_behaviors])
                                                                               ^
security/ai_agents/behavioral_analytics_engine.py:800:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:803:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:806:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:815:80: E501 line too long (123 > 79 characters)
                "average_risk_score": np.mean([b.risk_score for b in self.user_behaviors]) if self.user_behaviors else 0.0,
                                                                               ^
security/ai_agents/behavioral_analytics_engine.py:816:80: E501 line too long (99 > 79 characters)
                "high_risk_behaviors": len([b for b in self.user_behaviors if b.risk_score > 0.7]),
                                                                               ^
security/ai_agents/behavioral_analytics_engine.py:817:80: E501 line too long (92 > 79 characters)
                "color_scheme": self.color_scheme["analytics_colors"]["analytics_elements"],
                                                                               ^
security/ai_agents/behavioral_analytics_engine.py:820:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:838:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:842:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:851:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:852:80: E501 line too long (123 > 79 characters)
            self.logger.info(f"Тестирование завершено: {passed_tests}/{total_tests} тестов пройдено ({success_rate:.1f}%)")
                                                                               ^
security/ai_agents/behavioral_analytics_engine.py:854:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:866:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:870:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:872:9: E722 do not use bare 'except'
        except:
        ^
security/ai_agents/behavioral_analytics_engine.py:886:9: E722 do not use bare 'except'
        except:
        ^
security/ai_agents/behavioral_analytics_engine.py:904:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:907:9: E722 do not use bare 'except'
        except:
        ^
security/ai_agents/behavioral_analytics_engine.py:915:80: E501 line too long (132 > 79 characters)
                UserBehavior("test_user", UserActivity.LOGIN, datetime.now(), 30.0, "home", "mobile", 0.0, BehaviorType.NORMAL, {}),
                                                                               ^
security/ai_agents/behavioral_analytics_engine.py:916:80: E501 line too long (136 > 79 characters)
                UserBehavior("test_user", UserActivity.NAVIGATION, datetime.now(), 60.0, "home", "mobile", 0.0, BehaviorType.NORMAL, {})
                                                                               ^
security/ai_agents/behavioral_analytics_engine.py:918:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:921:9: E722 do not use bare 'except'
        except:
        ^
security/ai_agents/behavioral_analytics_engine.py:938:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:941:9: E722 do not use bare 'except'
        except:
        ^
security/ai_agents/behavioral_analytics_engine.py:959:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:962:9: E722 do not use bare 'except'
        except:
        ^
security/ai_agents/behavioral_analytics_engine.py:969:80: E501 line too long (85 > 79 characters)
            result = self.analyze_user_behavior("", UserActivity.LOGIN, -1.0, "", "")
                                                                               ^
security/ai_agents/behavioral_analytics_engine.py:972:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:974:9: E722 do not use bare 'except'
        except:
        ^
security/ai_agents/behavioral_analytics_engine.py:983:80: E501 line too long (90 > 79 characters)
                    "methods_count": len([m for m in dir(self) if not m.startswith('_')]),
                                                                               ^
security/ai_agents/behavioral_analytics_engine.py:1010:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:1019:80: E501 line too long (92 > 79 characters)
            required_fields = ["user_id", "activity_type", "duration", "location", "device"]
                                                                               ^
security/ai_agents/behavioral_analytics_engine.py:1020:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:1024:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:1029:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:1032:80: E501 line too long (106 > 79 characters)
            if not isinstance(activity_type, str) or activity_type not in [a.value for a in UserActivity]:
                                                                               ^
security/ai_agents/behavioral_analytics_engine.py:1034:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:1039:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:1044:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:1049:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:1061:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:1065:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:1069:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:1072:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:1094:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:1096:80: E501 line too long (90 > 79 characters)
            behavior_types = Counter([b.behavior_type.value for b in self.user_behaviors])
                                                                               ^
security/ai_agents/behavioral_analytics_engine.py:1097:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:1099:80: E501 line too long (90 > 79 characters)
            activity_types = Counter([b.activity_type.value for b in self.user_behaviors])
                                                                               ^
security/ai_agents/behavioral_analytics_engine.py:1100:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:1103:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:1106:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:1109:80: E501 line too long (103 > 79 characters)
            today_behaviors = len([b for b in self.user_behaviors if b.timestamp.date() == now.date()])
                                                                               ^
security/ai_agents/behavioral_analytics_engine.py:1110:80: E501 line too long (108 > 79 characters)
            week_behaviors = len([b for b in self.user_behaviors if b.timestamp >= now - timedelta(days=7)])
                                                                               ^
security/ai_agents/behavioral_analytics_engine.py:1111:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:1122:80: E501 line too long (123 > 79 characters)
                "average_risk_score": np.mean([b.risk_score for b in self.user_behaviors]) if self.user_behaviors else 0.0,
                                                                               ^
security/ai_agents/behavioral_analytics_engine.py:1123:80: E501 line too long (99 > 79 characters)
                "high_risk_behaviors": len([b for b in self.user_behaviors if b.risk_score > 0.7]),
                                                                               ^
security/ai_agents/behavioral_analytics_engine.py:1132:80: E501 line too long (92 > 79 characters)
                "color_scheme": self.color_scheme["analytics_colors"]["analytics_elements"],
                                                                               ^
security/ai_agents/behavioral_analytics_engine.py:1135:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:1147:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:1152:80: E501 line too long (84 > 79 characters)
                    "total_behaviors": behavior_analytics.get("total_behaviors", 0),
                                                                               ^
security/ai_agents/behavioral_analytics_engine.py:1154:80: E501 line too long (84 > 79 characters)
                    "total_anomalies": behavior_analytics.get("total_anomalies", 0),
                                                                               ^
security/ai_agents/behavioral_analytics_engine.py:1162:80: E501 line too long (102 > 79 characters)
                    "analytics_elements": self.color_scheme["analytics_colors"]["analytics_elements"],
                                                                               ^
security/ai_agents/behavioral_analytics_engine.py:1176:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:1187:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:1190:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:1194:80: E501 line too long (108 > 79 characters)
                interval = (sorted_timestamps[i] - sorted_timestamps[i-1]).total_seconds() / 3600  # в часах
                                                                               ^
security/ai_agents/behavioral_analytics_engine.py:1196:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:1199:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:1203:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:1210:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:1216:80: E501 line too long (115 > 79 characters)
    def _detect_temporal_anomalies(self, timestamps: List[datetime], hour_counts: Counter) -> List[Dict[str, Any]]:
                                                                               ^
security/ai_agents/behavioral_analytics_engine.py:1220:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:1223:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:1226:80: E501 line too long (82 > 79 characters)
                avg_hourly_activity = sum(hour_counts.values()) / len(hour_counts)
                                                                               ^
security/ai_agents/behavioral_analytics_engine.py:1228:80: E501 line too long (87 > 79 characters)
                    if count > avg_hourly_activity * 3:  # Аномально высокая активность
                                                                               ^
security/ai_agents/behavioral_analytics_engine.py:1235:80: E501 line too long (104 > 79 characters)
                    elif count > 0 and count < avg_hourly_activity * 0.1:  # Аномально низкая активность
                                                                               ^
security/ai_agents/behavioral_analytics_engine.py:1242:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:1245:80: E501 line too long (98 > 79 characters)
            night_activity = sum(hour_counts[hour] for hour in night_hours if hour in hour_counts)
                                                                               ^
security/ai_agents/behavioral_analytics_engine.py:1247:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:1254:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:1259:80: E501 line too long (92 > 79 characters)
                gap = (sorted_timestamps[i] - sorted_timestamps[i-1]).total_seconds() / 3600
                                                                               ^
security/ai_agents/behavioral_analytics_engine.py:1261:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:1265:1: W293 blank line contains whitespace
                
^
security/ai_agents/behavioral_analytics_engine.py:1267:80: E501 line too long (80 > 79 characters)
                    if gap > avg_gap + 2 * std_gap:  # Аномально большой перерыв
                                                                               ^
security/ai_agents/behavioral_analytics_engine.py:1274:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:1285:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:1295:80: E501 line too long (102 > 79 characters)
                    "analytics_elements": self.color_scheme["analytics_colors"]["analytics_elements"],
                                                                               ^
security/ai_agents/behavioral_analytics_engine.py:1308:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine.py:1314:1: E305 expected 2 blank lines after class or function definition, found 1
if __name__ == "__main__":
^
security/ai_agents/behavioral_analytics_engine.py:1318:80: E501 line too long (83 > 79 characters)
    print(f"📊 Цветовая схема: {analytics_engine.color_scheme['base_scheme'].name}")
                                                                               ^
security/ai_agents/behavioral_analytics_engine.py:1320:68: W292 no newline at end of file
    print(f"👥 Пользователи: {len(analytics_engine.user_profiles)}")                                                                   ^
security/ai_agents/behavioral_analytics_engine_extra.py:4:80: E501 line too long (89 > 79 characters)
"""
Behavioral Analytics Engine Extra - Дополнительные функции движка поведенческой аналитики
"""
   
                                                                           ^
security/ai_agents/behavioral_analytics_engine_extra.py:7:1: F401 'numpy as np' imported but unused
import numpy as np
^
security/ai_agents/behavioral_analytics_engine_extra.py:9:1: F401 'time' imported but unused
import time
^
security/ai_agents/behavioral_analytics_engine_extra.py:10:1: F401 'os' imported but unused
import os
^
security/ai_agents/behavioral_analytics_engine_extra.py:12:1: F401 'typing.List' imported but unused
from typing import Dict, Any, List, Optional
^
security/ai_agents/behavioral_analytics_engine_extra.py:12:1: F401 'typing.Optional' imported but unused
from typing import Dict, Any, List, Optional
^
security/ai_agents/behavioral_analytics_engine_extra.py:15:1: E302 expected 2 blank lines, found 1
@dataclass
^
security/ai_agents/behavioral_analytics_engine_extra.py:23:1: E302 expected 2 blank lines, found 1
class BehavioralAnalyticsEngineExtra:
^
security/ai_agents/behavioral_analytics_engine_extra.py:25:1: W293 blank line contains whitespace
    
^
security/ai_agents/behavioral_analytics_engine_extra.py:27:80: E501 line too long (81 > 79 characters)
        self.logger = logging.getLogger("ALADDIN.BehavioralAnalyticsEngineExtra")
                                                                               ^
security/ai_agents/behavioral_analytics_engine_extra.py:38:1: W293 blank line contains whitespace
    
^
security/ai_agents/behavioral_analytics_engine_extra.py:52:1: W293 blank line contains whitespace
    
^
security/ai_agents/behavioral_analytics_engine_extra.py:57:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine_extra.py:67:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine_extra.py:69:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine_extra.py:73:1: W293 blank line contains whitespace
    
^
security/ai_agents/behavioral_analytics_engine_extra.py:86:80: E501 line too long (81 > 79 characters)
            self.logger.error(f"Ошибка получения метрик производительности: {e}")
                                                                               ^
security/ai_agents/behavioral_analytics_engine_extra.py:88:1: W293 blank line contains whitespace
    
^
security/ai_agents/behavioral_analytics_engine_extra.py:94:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine_extra.py:96:45: W291 trailing whitespace
                data.get("response_time", 0) 
                                            ^
security/ai_agents/behavioral_analytics_engine_extra.py:99:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine_extra.py:100:80: E501 line too long (87 > 79 characters)
            return sum(response_times) / len(response_times) if response_times else 0.0
                                                                               ^
security/ai_agents/behavioral_analytics_engine_extra.py:101:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine_extra.py:105:1: W293 blank line contains whitespace
    
^
security/ai_agents/behavioral_analytics_engine_extra.py:111:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine_extra.py:117:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine_extra.py:118:80: E501 line too long (87 > 79 characters)
            return error_operations / total_operations if total_operations > 0 else 0.0
                                                                               ^
security/ai_agents/behavioral_analytics_engine_extra.py:119:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine_extra.py:123:1: W293 blank line contains whitespace
    
^
security/ai_agents/behavioral_analytics_engine_extra.py:128:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine_extra.py:133:80: E501 line too long (82 > 79 characters)
                    self.logger.warning(f"Отсутствует обязательное поле: {field}")
                                                                               ^
security/ai_agents/behavioral_analytics_engine_extra.py:135:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine_extra.py:140:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine_extra.py:144:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine_extra.py:146:80: E501 line too long (81 > 79 characters)
                self.logger.warning("timestamp должен быть строкой или datetime")
                                                                               ^
security/ai_agents/behavioral_analytics_engine_extra.py:148:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine_extra.py:154:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine_extra.py:157:80: E501 line too long (105 > 79 characters)
                self.logger.info(f"Данные поведения для пользователя {data['user_id']} прошли валидацию")
                                                                               ^
security/ai_agents/behavioral_analytics_engine_extra.py:160:80: E501 line too long (119 > 79 characters)
                self.logger.warning(f"Данные поведения для пользователя {data['user_id']} не прошли проверку качества")
                                                                               ^
security/ai_agents/behavioral_analytics_engine_extra.py:162:1: W293 blank line contains whitespace
                
^
security/ai_agents/behavioral_analytics_engine_extra.py:166:1: W293 blank line contains whitespace
    
^
security/ai_agents/behavioral_analytics_engine_extra.py:172:80: E501 line too long (80 > 79 characters)
            if completeness_score < self.quality_standards["data_completeness"]:
                                                                               ^
security/ai_agents/behavioral_analytics_engine_extra.py:173:80: E501 line too long (87 > 79 characters)
                self.logger.warning(f"Низкая полнота данных: {completeness_score:.2f}")
                                                                               ^
security/ai_agents/behavioral_analytics_engine_extra.py:175:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine_extra.py:179:80: E501 line too long (84 > 79 characters)
                self.logger.warning(f"Низкая точность данных: {accuracy_score:.2f}")
                                                                               ^
security/ai_agents/behavioral_analytics_engine_extra.py:181:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine_extra.py:183:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine_extra.py:187:1: W293 blank line contains whitespace
    
^
security/ai_agents/behavioral_analytics_engine_extra.py:192:80: E501 line too long (101 > 79 characters)
            non_empty_fields = sum(1 for value in data.values() if value is not None and value != "")
                                                                               ^
security/ai_agents/behavioral_analytics_engine_extra.py:197:1: W293 blank line contains whitespace
    
^
security/ai_agents/behavioral_analytics_engine_extra.py:203:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine_extra.py:207:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine_extra.py:211:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine_extra.py:220:13: E722 do not use bare 'except'
            except:
            ^
security/ai_agents/behavioral_analytics_engine_extra.py:222:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine_extra.py:224:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine_extra.py:228:1: W293 blank line contains whitespace
    
^
security/ai_agents/behavioral_analytics_engine_extra.py:229:80: E501 line too long (88 > 79 characters)
    def analyze_performance(self, operation_id: str, start_time: float, end_time: float, 
                                                                               ^
security/ai_agents/behavioral_analytics_engine_extra.py:229:89: W291 trailing whitespace
    def analyze_performance(self, operation_id: str, start_time: float, end_time: float, 
                                                                                        ^
security/ai_agents/behavioral_analytics_engine_extra.py:230:27: E128 continuation line under-indented for visual indent
                          success: bool, error_message: str = None) -> None:
                          ^
security/ai_agents/behavioral_analytics_engine_extra.py:234:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine_extra.py:236:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine_extra.py:246:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine_extra.py:249:80: E501 line too long (109 > 79 characters)
                self.logger.warning(f"Операция {operation_id} превысила время отклика: {response_time:.3f}s")
                                                                               ^
security/ai_agents/behavioral_analytics_engine_extra.py:250:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine_extra.py:254:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine_extra.py:257:1: W293 blank line contains whitespace
    
^
security/ai_agents/behavioral_analytics_engine_extra.py:258:80: E501 line too long (83 > 79 characters)
    def _record_error_pattern(self, operation_id: str, error_message: str) -> None:
                                                                               ^
security/ai_agents/behavioral_analytics_engine_extra.py:269:1: W293 blank line contains whitespace
                
^
security/ai_agents/behavioral_analytics_engine_extra.py:271:80: E501 line too long (82 > 79 characters)
                self.error_patterns[error_type]["operations"].append(operation_id)
                                                                               ^
security/ai_agents/behavioral_analytics_engine_extra.py:272:1: W293 blank line contains whitespace
                
^
security/ai_agents/behavioral_analytics_engine_extra.py:275:1: W293 blank line contains whitespace
    
^
security/ai_agents/behavioral_analytics_engine_extra.py:280:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine_extra.py:293:1: W293 blank line contains whitespace
                
^
security/ai_agents/behavioral_analytics_engine_extra.py:297:1: W293 blank line contains whitespace
    
^
security/ai_agents/behavioral_analytics_engine_extra.py:303:80: E501 line too long (98 > 79 characters)
                "total_errors": sum(pattern["count"] for pattern in self.error_patterns.values()),
                                                                               ^
security/ai_agents/behavioral_analytics_engine_extra.py:305:49: W291 trailing whitespace
                    self.error_patterns.items(), 
                                                ^
security/ai_agents/behavioral_analytics_engine_extra.py:313:1: W293 blank line contains whitespace
    
^
security/ai_agents/behavioral_analytics_engine_extra.py:329:1: W293 blank line contains whitespace
    
^
security/ai_agents/behavioral_analytics_engine_extra.py:345:1: E305 expected 2 blank lines after class or function definition, found 1
behavioral_analytics_engine_extra = BehavioralAnalyticsEngineExtra()^
security/ai_agents/behavioral_analytics_engine_extra.py:345:69: W292 no newline at end of file
behavioral_analytics_engine_extra = BehavioralAnalyticsEngineExtra()                                                                    ^
security/ai_agents/behavioral_analytics_engine_main.py:7:1: F401 'numpy as np' imported but unused
import numpy as np
^
security/ai_agents/behavioral_analytics_engine_main.py:9:1: F401 'time' imported but unused
import time
^
security/ai_agents/behavioral_analytics_engine_main.py:10:1: F401 'os' imported but unused
import os
^
security/ai_agents/behavioral_analytics_engine_main.py:12:1: F401 'typing.Optional' imported but unused
from typing import Dict, Any, List, Optional
^
security/ai_agents/behavioral_analytics_engine_main.py:21:1: E302 expected 2 blank lines, found 1
@dataclass
^
security/ai_agents/behavioral_analytics_engine_main.py:30:1: E302 expected 2 blank lines, found 1
class BehavioralAnalyticsEngineMain:
^
security/ai_agents/behavioral_analytics_engine_main.py:32:1: W293 blank line contains whitespace
    
^
security/ai_agents/behavioral_analytics_engine_main.py:34:80: E501 line too long (80 > 79 characters)
        self.logger = logging.getLogger("ALADDIN.BehavioralAnalyticsEngineMain")
                                                                               ^
security/ai_agents/behavioral_analytics_engine_main.py:44:1: W293 blank line contains whitespace
    
^
security/ai_agents/behavioral_analytics_engine_main.py:68:1: W293 blank line contains whitespace
    
^
security/ai_agents/behavioral_analytics_engine_main.py:73:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine_main.py:76:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine_main.py:79:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine_main.py:81:80: E501 line too long (81 > 79 characters)
            risk_level = self._determine_risk_level(anomaly_score, risk_analysis)
                                                                               ^
security/ai_agents/behavioral_analytics_engine_main.py:82:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine_main.py:84:80: E501 line too long (82 > 79 characters)
            recommendations = self._generate_recommendations(risk_level, behavior)
                                                                               ^
security/ai_agents/behavioral_analytics_engine_main.py:85:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine_main.py:94:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine_main.py:98:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine_main.py:100:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine_main.py:104:1: W293 blank line contains whitespace
    
^
security/ai_agents/behavioral_analytics_engine_main.py:109:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine_main.py:113:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine_main.py:115:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine_main.py:118:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine_main.py:120:80: E501 line too long (88 > 79 characters)
            frequency_anomaly = self._analyze_frequency_patterns(behavior, user_history)
                                                                               ^
security/ai_agents/behavioral_analytics_engine_main.py:121:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine_main.py:123:80: E501 line too long (86 > 79 characters)
            location_anomaly = self._analyze_location_patterns(behavior, user_history)
                                                                               ^
security/ai_agents/behavioral_analytics_engine_main.py:124:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine_main.py:126:80: E501 line too long (85 > 79 characters)
            anomaly_score = (time_anomaly + frequency_anomaly + location_anomaly) / 3
                                                                               ^
security/ai_agents/behavioral_analytics_engine_main.py:127:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine_main.py:130:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine_main.py:134:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine_main.py:136:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine_main.py:140:1: W293 blank line contains whitespace
    
^
security/ai_agents/behavioral_analytics_engine_main.py:141:80: E501 line too long (99 > 79 characters)
    def _analyze_time_patterns(self, behavior: UserBehavior, history: List[UserBehavior]) -> float:
                                                                               ^
security/ai_agents/behavioral_analytics_engine_main.py:146:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine_main.py:148:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine_main.py:150:80: E501 line too long (94 > 79 characters)
            usual_hours = [b.timestamp.hour for b in history[-100:]]  # Последние 100 действий
                                                                               ^
security/ai_agents/behavioral_analytics_engine_main.py:151:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine_main.py:154:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine_main.py:158:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine_main.py:160:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine_main.py:164:1: W293 blank line contains whitespace
    
^
security/ai_agents/behavioral_analytics_engine_main.py:165:80: E501 line too long (104 > 79 characters)
    def _analyze_frequency_patterns(self, behavior: UserBehavior, history: List[UserBehavior]) -> float:
                                                                               ^
security/ai_agents/behavioral_analytics_engine_main.py:170:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine_main.py:173:35: W291 trailing whitespace
                b for b in history 
                                  ^
security/ai_agents/behavioral_analytics_engine_main.py:176:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine_main.py:179:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine_main.py:181:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine_main.py:185:1: W293 blank line contains whitespace
    
^
security/ai_agents/behavioral_analytics_engine_main.py:186:80: E501 line too long (103 > 79 characters)
    def _analyze_location_patterns(self, behavior: UserBehavior, history: List[UserBehavior]) -> float:
                                                                               ^
security/ai_agents/behavioral_analytics_engine_main.py:192:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine_main.py:196:1: W293 blank line contains whitespace
    
^
security/ai_agents/behavioral_analytics_engine_main.py:201:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine_main.py:216:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine_main.py:218:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine_main.py:222:1: W293 blank line contains whitespace
    
^
security/ai_agents/behavioral_analytics_engine_main.py:223:80: E501 line too long (95 > 79 characters)
    def _matches_pattern(self, behavior: UserBehavior, pattern_config: Dict[str, Any]) -> bool:
                                                                               ^
security/ai_agents/behavioral_analytics_engine_main.py:227:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine_main.py:229:80: E501 line too long (82 > 79 characters)
                return behavior.timestamp.hour < 6 or behavior.timestamp.hour > 22
                                                                               ^
security/ai_agents/behavioral_analytics_engine_main.py:236:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine_main.py:238:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine_main.py:242:1: W293 blank line contains whitespace
    
^
security/ai_agents/behavioral_analytics_engine_main.py:243:80: E501 line too long (96 > 79 characters)
    def _determine_risk_level(self, anomaly_score: float, risk_analysis: Dict[str, Any]) -> str:
                                                                               ^
security/ai_agents/behavioral_analytics_engine_main.py:248:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine_main.py:253:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine_main.py:256:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine_main.py:266:1: W293 blank line contains whitespace
                
^
security/ai_agents/behavioral_analytics_engine_main.py:270:1: W293 blank line contains whitespace
    
^
security/ai_agents/behavioral_analytics_engine_main.py:271:80: E501 line too long (94 > 79 characters)
    def _generate_recommendations(self, risk_level: str, behavior: UserBehavior) -> List[str]:
                                                                               ^
security/ai_agents/behavioral_analytics_engine_main.py:275:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine_main.py:295:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine_main.py:297:1: W293 blank line contains whitespace
            
^
security/ai_agents/behavioral_analytics_engine_main.py:301:1: W293 blank line contains whitespace
    
^
security/ai_agents/behavioral_analytics_engine_main.py:316:1: W293 blank line contains whitespace
    
^
security/ai_agents/behavioral_analytics_engine_main.py:331:1: E305 expected 2 blank lines after class or function definition, found 1
behavioral_analytics_engine_main = BehavioralAnalyticsEngineMain()^
security/ai_agents/behavioral_analytics_engine_main.py:331:67: W292 no newline at end of file
behavioral_analytics_engine_main = BehavioralAnalyticsEngineMain()                                                                  ^
security/ai_agents/child_interface_manager.py:10:1: F401 'time' imported but unused
import time
^
security/ai_agents/child_interface_manager.py:11:1: F401 'json' imported but unused
import json
^
security/ai_agents/child_interface_manager.py:14:1: F401 'datetime.timedelta' imported but unused
from datetime import datetime, timedelta
^
security/ai_agents/child_interface_manager.py:22:5: F401 'core.security_core.SecurityCore' imported but unused
    from core.security_core import SecurityCore
    ^
security/ai_agents/child_interface_manager.py:85:80: E501 line too long (82 > 79 characters)
                "colors": ["#FF6B6B", "#4ECDC4", "#45B7D1", "#96CEB4", "#FFEAA7"],
                                                                               ^
security/ai_agents/child_interface_manager.py:86:80: E501 line too long (82 > 79 characters)
                "characters": ["Мудрый Зайчик", "Храбрая Белочка", "Умный Мишка"],
                                                                               ^
security/ai_agents/child_interface_manager.py:115:80: E501 line too long (82 > 79 characters)
                "colors": ["#FF4757", "#2ED573", "#1E90FF", "#FFA502", "#FF6348"],
                                                                               ^
security/ai_agents/child_interface_manager.py:116:80: E501 line too long (86 > 79 characters)
                "characters": ["Капитан Безопасность", "Щит-Защитник", "Кибер-Герой"],
                                                                               ^
security/ai_agents/child_interface_manager.py:118:80: E501 line too long (88 > 79 characters)
                "animations": ["hero_pose", "shield_up", "power_blast", "victory_dance"]
                                                                               ^
security/ai_agents/child_interface_manager.py:145:80: E501 line too long (82 > 79 characters)
                "colors": ["#6C5CE7", "#A29BFE", "#FD79A8", "#FDCB6E", "#00B894"],
                                                                               ^
security/ai_agents/child_interface_manager.py:147:80: E501 line too long (90 > 79 characters)
                "sounds": ["tech_beep", "hack_success", "code_complete", "system_online"],
                                                                               ^
security/ai_agents/child_interface_manager.py:148:80: E501 line too long (88 > 79 characters)
                "animations": ["matrix_rain", "hack_effect", "code_glow", "system_boot"]
                                                                               ^
security/ai_agents/child_interface_manager.py:175:80: E501 line too long (82 > 79 characters)
                "colors": ["#2D3436", "#636E72", "#74B9FF", "#0984E3", "#00CEC9"],
                                                                               ^
security/ai_agents/child_interface_manager.py:176:80: E501 line too long (89 > 79 characters)
                "characters": ["Кибер-Аналитик", "Сетевой Эксперт", "Безопасность-Гуру"],
                                                                               ^
security/ai_agents/child_interface_manager.py:177:80: E501 line too long (105 > 79 characters)
                "sounds": ["professional_beep", "analysis_complete", "threat_detected", "system_secure"],
                                                                               ^
security/ai_agents/child_interface_manager.py:178:80: E501 line too long (93 > 79 characters)
                "animations": ["data_flow", "analysis_scan", "threat_block", "success_check"]
                                                                               ^
security/ai_agents/child_interface_manager.py:205:80: E501 line too long (82 > 79 characters)
                "colors": ["#2D3436", "#636E72", "#74B9FF", "#0984E3", "#00CEC9"],
                                                                               ^
security/ai_agents/child_interface_manager.py:206:80: E501 line too long (86 > 79 characters)
                "characters": ["Кибер-Архитектор", "Безопасность-Лидер", "Инноватор"],
                                                                               ^
security/ai_agents/child_interface_manager.py:207:80: E501 line too long (105 > 79 characters)
                "sounds": ["corporate_chime", "leadership_theme", "innovation_sound", "success_fanfare"],
                                                                               ^
security/ai_agents/child_interface_manager.py:208:80: E501 line too long (110 > 79 characters)
                "animations": ["corporate_flow", "leadership_pose", "innovation_spark", "success_celebration"]
                                                                               ^
security/ai_agents/child_interface_manager.py:211:80: E501 line too long (82 > 79 characters)
                "input_methods": ["touch", "keyboard", "voice", "gesture", "api"],
                                                                               ^
security/ai_agents/child_interface_manager.py:234:80: E501 line too long (106 > 79 characters)
                GameLevel.BEGINNER: {"min_score": 0, "max_score": 100, "rewards": ["badge", "character"]},
                                                                               ^
security/ai_agents/child_interface_manager.py:235:80: E501 line too long (117 > 79 characters)
                GameLevel.EXPLORER: {"min_score": 101, "max_score": 300, "rewards": ["badge", "character", "theme"]},
                                                                               ^
security/ai_agents/child_interface_manager.py:236:80: E501 line too long (126 > 79 characters)
                GameLevel.GUARDIAN: {"min_score": 301, "max_score": 600, "rewards": ["badge", "character", "theme", "power"]},
                                                                               ^
security/ai_agents/child_interface_manager.py:237:80: E501 line too long (134 > 79 characters)
                GameLevel.EXPERT: {"min_score": 601, "max_score": 1000, "rewards": ["badge", "character", "theme", "power", "title"]},
                                                                               ^
security/ai_agents/child_interface_manager.py:238:80: E501 line too long (143 > 79 characters)
                GameLevel.MASTER: {"min_score": 1001, "max_score": 9999, "rewards": ["badge", "character", "theme", "power", "title", "crown"]}
                                                                               ^
security/ai_agents/child_interface_manager.py:241:80: E501 line too long (106 > 79 characters)
                AchievementType.SAFETY_RULE: {"points": 10, "description": "Изучил правило безопасности"},
                                                                               ^
security/ai_agents/child_interface_manager.py:242:80: E501 line too long (104 > 79 characters)
                AchievementType.DAILY_QUEST: {"points": 25, "description": "Выполнил ежедневный квест"},
                                                                               ^
security/ai_agents/child_interface_manager.py:243:80: E501 line too long (106 > 79 characters)
                AchievementType.FAMILY_TEAM: {"points": 50, "description": "Помог семье с безопасностью"},
                                                                               ^
security/ai_agents/child_interface_manager.py:244:80: E501 line too long (99 > 79 characters)
                AchievementType.LEARNING: {"points": 30, "description": "Прошел обучающий модуль"},
                                                                               ^
security/ai_agents/child_interface_manager.py:245:80: E501 line too long (94 > 79 characters)
                AchievementType.PROTECTION: {"points": 40, "description": "Защитил от угрозы"}
                                                                               ^
security/ai_agents/child_interface_manager.py:248:80: E501 line too long (89 > 79 characters)
                "daily": ["Проверь безопасность", "Изучи новое правило", "Помоги семье"],
                                                                               ^
security/ai_agents/child_interface_manager.py:249:80: E501 line too long (85 > 79 characters)
                "weekly": ["Семейный квест", "Командная миссия", "Экспертный вызов"],
                                                                               ^
security/ai_agents/child_interface_manager.py:250:80: E501 line too long (86 > 79 characters)
                "monthly": ["Мастер-класс", "Семейный турнир", "Инновационный проект"]
                                                                               ^
security/ai_agents/child_interface_manager.py:258:80: E501 line too long (91 > 79 characters)
                "toddler": ["Сказки безопасности", "Песенки правил", "Игры с персонажами"],
                                                                               ^
security/ai_agents/child_interface_manager.py:260:80: E501 line too long (82 > 79 characters)
                "tween": ["Симуляции хакера", "Логические задачи", "Кодирование"],
                                                                               ^
security/ai_agents/child_interface_manager.py:262:80: E501 line too long (93 > 79 characters)
                "young_adult": ["Архитектурные решения", "Управление командами", "Инновации"]
                                                                               ^
security/ai_agents/child_interface_manager.py:265:80: E501 line too long (92 > 79 characters)
                "basic": ["Что такое пароль?", "Кто такие хакеры?", "Как защитить данные?"],
                                                                               ^
security/ai_agents/child_interface_manager.py:266:80: E501 line too long (99 > 79 characters)
                "intermediate": ["Двухфакторная аутентификация", "Фишинг", "Социальная инженерия"],
                                                                               ^
security/ai_agents/child_interface_manager.py:267:80: E501 line too long (93 > 79 characters)
                "advanced": ["Архитектура безопасности", "Управление рисками", "Кибер-атаки"]
                                                                               ^
security/ai_agents/child_interface_manager.py:309:80: E501 line too long (96 > 79 characters)
                "features": ["interaction_pattern", "preference_analysis", "behavior_analysis"],
                                                                               ^
security/ai_agents/child_interface_manager.py:314:80: E501 line too long (94 > 79 characters)
                "features": ["progress_tracking", "difficulty_adjustment", "personalization"],
                                                                               ^
security/ai_agents/child_interface_manager.py:319:80: E501 line too long (98 > 79 characters)
                "features": ["threat_detection", "risk_assessment", "protection_recommendations"],
                                                                               ^
security/ai_agents/child_interface_manager.py:324:80: E501 line too long (97 > 79 characters)
                "features": ["interest_analysis", "motivation_tracking", "retention_prediction"],
                                                                               ^
security/ai_agents/child_interface_manager.py:338:80: E501 line too long (93 > 79 characters)
            age_score = self._calculate_age_score(interaction_pattern, preferences, behavior)
                                                                               ^
security/ai_agents/child_interface_manager.py:353:80: E501 line too long (88 > 79 characters)
            self.log_error("Ошибка определения возрастной категории: {}".format(str(e)))
                                                                               ^
security/ai_agents/child_interface_manager.py:410:80: E501 line too long (81 > 79 characters)
                modules = self.learning_modules["interactive_lessons"]["toddler"]
                                                                               ^
security/ai_agents/child_interface_manager.py:418:80: E501 line too long (85 > 79 characters)
                modules = self.learning_modules["interactive_lessons"]["young_adult"]
                                                                               ^
security/ai_agents/child_interface_manager.py:443:80: E501 line too long (81 > 79 characters)
            new_level = self._update_user_level(user_id, progress["total_score"])
                                                                               ^
security/ai_agents/child_interface_manager.py:475:80: E501 line too long (98 > 79 characters)
                "points": self.game_system["achievements"][AchievementType.DAILY_QUEST]["points"],
                                                                               ^
security/ai_agents/child_interface_manager.py:476:80: E501 line too long (107 > 79 characters)
                "description": self.game_system["achievements"][AchievementType.DAILY_QUEST]["description"]
                                                                               ^
security/ai_agents/child_interface_manager.py:482:80: E501 line too long (98 > 79 characters)
                "points": self.game_system["achievements"][AchievementType.SAFETY_RULE]["points"],
                                                                               ^
security/ai_agents/child_interface_manager.py:483:80: E501 line too long (107 > 79 characters)
                "description": self.game_system["achievements"][AchievementType.SAFETY_RULE]["description"]
                                                                               ^
security/ai_agents/child_interface_manager.py:523:80: E501 line too long (100 > 79 characters)
                    {"name": "Ребенок 1", "age_category": "7-9", "level": "Защитник", "score": 450},
                                                                               ^
security/ai_agents/child_interface_manager.py:524:80: E501 line too long (100 > 79 characters)
                    {"name": "Ребенок 2", "age_category": "10-13", "level": "Эксперт", "score": 750}
                                                                               ^
security/ai_agents/child_interface_manager.py:528:80: E501 line too long (86 > 79 characters)
                "notifications": ["Новый квест доступен", "Достижение разблокировано"]
                                                                               ^
security/ai_agents/child_interface_manager.py:575:80: E501 line too long (119 > 79 characters)
                protected_data["device_id"] = hashlib.sha256(str(protected_data["device_id"]).encode()).hexdigest()[:8]
                                                                               ^
security/ai_agents/child_interface_manager.py:593:80: E501 line too long (88 > 79 characters)
                        encrypted[key] = hashlib.sha256(str(value).encode()).hexdigest()
                                                                               ^
security/ai_agents/child_interface_manager.py:703:9: F841 local variable 'e' is assigned to but never used
        except Exception as e:
        ^
security/ai_agents/child_interface_manager.py:731:80: E501 line too long (104 > 79 characters)
            if age_category in self.color_scheme.get("child_colors", {}).get("age_specific_colors", {}):
                                                                               ^
security/ai_agents/child_interface_manager.py:732:80: E501 line too long (93 > 79 characters)
                return self.color_scheme["child_colors"]["age_specific_colors"][age_category]
                                                                               ^
security/ai_agents/child_interface_manager.py:734:80: E501 line too long (102 > 79 characters)
                return self.color_scheme["child_colors"]["age_specific_colors"]["7-9"]  # По умолчанию
                                                                               ^
security/ai_agents/child_interface_manager.py:735:9: F841 local variable 'e' is assigned to but never used
        except Exception as e:
        ^
security/ai_agents/child_interface_manager.py:759:80: E501 line too long (98 > 79 characters)
                    "shadow": self.color_scheme.get("shadows", {}).get("shadow_soft", "#3B82F620")
                                                                               ^
security/ai_agents/child_interface_manager.py:763:80: E501 line too long (93 > 79 characters)
                    "secondary": self._lighten_color(age_colors.get("text", "#1F2937"), 0.3),
                                                                               ^
security/ai_agents/child_interface_manager.py:767:80: E501 line too long (105 > 79 characters)
                    "success": self.color_scheme.get("child_colors", {}).get("success_green", "#10B981"),
                                                                               ^
security/ai_agents/child_interface_manager.py:768:80: E501 line too long (106 > 79 characters)
                    "warning": self.color_scheme.get("child_colors", {}).get("warning_orange", "#F59E0B"),
                                                                               ^
security/ai_agents/child_interface_manager.py:769:80: E501 line too long (99 > 79 characters)
                    "error": self.color_scheme.get("child_colors", {}).get("error_red", "#EF4444"),
                                                                               ^
security/ai_agents/child_interface_manager.py:770:80: E501 line too long (99 > 79 characters)
                    "info": self.color_scheme.get("child_colors", {}).get("info_purple", "#8B5CF6")
                                                                               ^
security/ai_agents/child_interface_manager.py:776:9: F841 local variable 'e' is assigned to but never used
        except Exception as e:
        ^
security/ai_agents/child_interface_manager.py:836:80: E501 line too long (92 > 79 characters)
        self.age_distribution[age_category] = self.age_distribution.get(age_category, 0) + 1
                                                                               ^
security/ai_agents/circuit_breaker_main.py:11:1: F401 'typing.List' imported but unused
from typing import Dict, Any, List, Optional, Callable
^
security/ai_agents/circuit_breaker_main.py:11:1: F401 'typing.Optional' imported but unused
from typing import Dict, Any, List, Optional, Callable
^
security/ai_agents/circuit_breaker_main.py:15:1: E302 expected 2 blank lines, found 1
class CircuitState(Enum):
^
security/ai_agents/circuit_breaker_main.py:21:1: E302 expected 2 blank lines, found 1
@dataclass
^
security/ai_agents/circuit_breaker_main.py:34:1: E302 expected 2 blank lines, found 1
class CircuitBreakerMain:
^
security/ai_agents/circuit_breaker_main.py:36:1: W293 blank line contains whitespace
    
^
security/ai_agents/circuit_breaker_main.py:38:80: E501 line too long (92 > 79 characters)
        self.logger = logging.getLogger(f"ALADDIN.CircuitBreakerMain.{config.service_name}")
                                                                               ^
security/ai_agents/circuit_breaker_main.py:55:1: W293 blank line contains whitespace
    
^
security/ai_agents/circuit_breaker_main.py:68:1: W293 blank line contains whitespace
    
^
security/ai_agents/circuit_breaker_main.py:74:1: W293 blank line contains whitespace
                
^
security/ai_agents/circuit_breaker_main.py:80:80: E501 line too long (109 > 79 characters)
                        self.logger.info(f"Circuit Breaker {self.config.service_name} переходит в HALF_OPEN")
                                                                               ^
security/ai_agents/circuit_breaker_main.py:82:80: E501 line too long (94 > 79 characters)
                        raise Exception(f"Circuit Breaker {self.config.service_name} is OPEN")
                                                                               ^
security/ai_agents/circuit_breaker_main.py:83:1: W293 blank line contains whitespace
                
^
security/ai_agents/circuit_breaker_main.py:86:80: E501 line too long (116 > 79 characters)
                        raise Exception(f"Circuit Breaker {self.config.service_name} HALF_OPEN call limit exceeded")
                                                                               ^
security/ai_agents/circuit_breaker_main.py:88:1: W293 blank line contains whitespace
                
^
security/ai_agents/circuit_breaker_main.py:93:1: W293 blank line contains whitespace
                
^
security/ai_agents/circuit_breaker_main.py:96:1: W293 blank line contains whitespace
                
^
security/ai_agents/circuit_breaker_main.py:98:1: W293 blank line contains whitespace
                
^
security/ai_agents/circuit_breaker_main.py:103:1: W293 blank line contains whitespace
    
^
security/ai_agents/circuit_breaker_main.py:109:1: W293 blank line contains whitespace
            
^
security/ai_agents/circuit_breaker_main.py:110:80: E501 line too long (90 > 79 characters)
            time_since_failure = (datetime.now() - self.last_failure_time).total_seconds()
                                                                               ^
security/ai_agents/circuit_breaker_main.py:112:1: W293 blank line contains whitespace
            
^
security/ai_agents/circuit_breaker_main.py:116:1: W293 blank line contains whitespace
    
^
security/ai_agents/circuit_breaker_main.py:122:1: W293 blank line contains whitespace
            
^
security/ai_agents/circuit_breaker_main.py:126:1: W293 blank line contains whitespace
            
^
security/ai_agents/circuit_breaker_main.py:129:1: W293 blank line contains whitespace
            
^
security/ai_agents/circuit_breaker_main.py:137:80: E501 line too long (102 > 79 characters)
                    self.logger.info(f"Circuit Breaker {self.config.service_name} переходит в CLOSED")
                                                                               ^
security/ai_agents/circuit_breaker_main.py:138:1: W293 blank line contains whitespace
            
^
security/ai_agents/circuit_breaker_main.py:142:1: W293 blank line contains whitespace
            
^
security/ai_agents/circuit_breaker_main.py:145:1: W293 blank line contains whitespace
    
^
security/ai_agents/circuit_breaker_main.py:151:1: W293 blank line contains whitespace
            
^
security/ai_agents/circuit_breaker_main.py:155:1: W293 blank line contains whitespace
            
^
security/ai_agents/circuit_breaker_main.py:158:1: W293 blank line contains whitespace
            
^
security/ai_agents/circuit_breaker_main.py:163:80: E501 line too long (99 > 79 characters)
                self.logger.warning(f"Circuit Breaker {self.config.service_name} переходит в OPEN")
                                                                               ^
security/ai_agents/circuit_breaker_main.py:164:1: W293 blank line contains whitespace
            
^
security/ai_agents/circuit_breaker_main.py:167:1: W293 blank line contains whitespace
    
^
security/ai_agents/circuit_breaker_main.py:173:80: E501 line too long (90 > 79 characters)
            self.logger.debug(f"ML анализ успеха: время выполнения {execution_time:.3f}s")
                                                                               ^
security/ai_agents/circuit_breaker_main.py:174:1: W293 blank line contains whitespace
            
^
security/ai_agents/circuit_breaker_main.py:177:1: W293 blank line contains whitespace
    
^
security/ai_agents/circuit_breaker_main.py:184:1: W293 blank line contains whitespace
            
^
security/ai_agents/circuit_breaker_main.py:187:1: W293 blank line contains whitespace
    
^
security/ai_agents/circuit_breaker_main.py:196:80: E501 line too long (108 > 79 characters)
                "last_failure_time": self.last_failure_time.isoformat() if self.last_failure_time else None,
                                                                               ^
security/ai_agents/circuit_breaker_main.py:197:80: E501 line too long (108 > 79 characters)
                "last_success_time": self.last_success_time.isoformat() if self.last_success_time else None,
                                                                               ^
security/ai_agents/circuit_breaker_main.py:204:1: W293 blank line contains whitespace
    
^
security/ai_agents/circuit_breaker_main.py:215:1: W293 blank line contains whitespace
                
^
security/ai_agents/circuit_breaker_main.py:216:80: E501 line too long (83 > 79 characters)
            self.logger.info(f"Circuit Breaker {self.config.service_name} сброшен")
                                                                               ^
security/ai_agents/circuit_breaker_main.py:217:1: W293 blank line contains whitespace
            
^
security/ai_agents/circuit_breaker_main.py:220:1: W293 blank line contains whitespace
    
^
security/ai_agents/circuit_breaker_main.py:226:1: W293 blank line contains whitespace
                
^
security/ai_agents/circuit_breaker_main.py:227:80: E501 line too long (98 > 79 characters)
            self.logger.info(f"Конфигурация Circuit Breaker {self.config.service_name} обновлена")
                                                                               ^
security/ai_agents/circuit_breaker_main.py:228:1: W293 blank line contains whitespace
            
^
security/ai_agents/circuit_breaker_main.py:231:1: W293 blank line contains whitespace
    
^
security/ai_agents/circuit_breaker_main.py:250:1: W293 blank line contains whitespace
    
^
security/ai_agents/circuit_breaker_main.py:272:1: E305 expected 2 blank lines after class or function definition, found 1
circuit_breaker_main = CircuitBreakerMain(
^
security/ai_agents/circuit_breaker_main.py:280:2: W292 no newline at end of file
) ^
security/ai_agents/compliance_agent.py:19:1: E402 module level import not at top of file
from core.base import SecurityBase
^
security/ai_agents/compliance_agent.py:62:80: E501 line too long (89 > 79 characters)
    def __init__(self, requirement_id, title, description, standard, category, priority):
                                                                               ^
security/ai_agents/compliance_agent.py:92:80: E501 line too long (91 > 79 characters)
    def add_control(self, control_id, control_name, implementation_status, description=""):
                                                                               ^
security/ai_agents/compliance_agent.py:112:80: E501 line too long (83 > 79 characters)
    def add_recommendation(self, recommendation, priority, implementation_date=""):
                                                                               ^
security/ai_agents/compliance_agent.py:152:80: E501 line too long (95 > 79 characters)
            "status": self.status.value if hasattr(self.status, 'value') else str(self.status),
                                                                               ^
security/ai_agents/compliance_agent.py:160:80: E501 line too long (82 > 79 characters)
                self.last_assessment.isoformat() if self.last_assessment else None
                                                                               ^
security/ai_agents/compliance_agent.py:163:80: E501 line too long (82 > 79 characters)
                self.next_assessment.isoformat() if self.next_assessment else None
                                                                               ^
security/ai_agents/compliance_agent.py:239:80: E501 line too long (82 > 79 characters)
            "business_continuity_compliance": self.business_continuity_compliance,
                                                                               ^
security/ai_agents/compliance_agent.py:243:80: E501 line too long (92 > 79 characters)
                self.last_assessment_time.isoformat() if self.last_assessment_time else None
                                                                               ^
security/ai_agents/compliance_agent.py:246:80: E501 line too long (92 > 79 characters)
                self.next_assessment_time.isoformat() if self.next_assessment_time else None
                                                                               ^
security/ai_agents/compliance_agent.py:323:80: E501 line too long (89 > 79 characters)
            self.log_activity(f"Ошибка инициализации ComplianceAgent: {str(e)}", "error")
                                                                               ^
security/ai_agents/compliance_agent.py:336:80: E501 line too long (84 > 79 characters)
                    "implementation_evidence", "control_effectiveness", "risk_level"
                                                                               ^
security/ai_agents/compliance_agent.py:347:80: E501 line too long (90 > 79 characters)
                    "requirement_complexity", "implementation_gaps", "control_weaknesses",
                                                                               ^
security/ai_agents/compliance_agent.py:348:80: E501 line too long (81 > 79 characters)
                    "historical_incidents", "external_threats", "business_impact"
                                                                               ^
security/ai_agents/compliance_agent.py:359:80: E501 line too long (81 > 79 characters)
                    "control_design", "implementation_status", "testing_results",
                                                                               ^
security/ai_agents/compliance_agent.py:360:80: E501 line too long (86 > 79 characters)
                    "effectiveness_metrics", "maintenance_frequency", "update_history"
                                                                               ^
security/ai_agents/compliance_agent.py:383:80: E501 line too long (82 > 79 characters)
                    "requirement_coverage", "implementation_gaps", "control_gaps",
                                                                               ^
security/ai_agents/compliance_agent.py:402:80: E501 line too long (84 > 79 characters)
            self.log_activity(f"Ошибка инициализации AI моделей: {str(e)}", "error")
                                                                               ^
security/ai_agents/compliance_agent.py:412:80: E501 line too long (81 > 79 characters)
                "description": "Система управления информационной безопасностью",
                                                                               ^
security/ai_agents/compliance_agent.py:450:80: E501 line too long (87 > 79 characters)
                "description": "Стандарт безопасности данных индустрии платежных карт",
                                                                               ^
security/ai_agents/compliance_agent.py:483:80: E501 line too long (96 > 79 characters)
                "description": "Закон о переносимости и подотчетности медицинского страхования",
                                                                               ^
security/ai_agents/compliance_agent.py:498:80: E501 line too long (87 > 79 characters)
            self.log_activity("Ошибка загрузки стандартов: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/compliance_agent.py:512:80: E501 line too long (92 > 79 characters)
            self.log_activity("Ошибка инициализации требований: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/compliance_agent.py:528:80: E501 line too long (87 > 79 characters)
                    description="Требование соответствия для {} в категории {}".format(
                                                                               ^
security/ai_agents/compliance_agent.py:551:80: E501 line too long (87 > 79 characters)
            self.log_activity("Ошибка создания требований для стандарта {}: {}".format(
                                                                               ^
security/ai_agents/compliance_agent.py:568:80: E501 line too long (83 > 79 characters)
            "Управление уязвимостями": ComplianceCategory.VULNERABILITY_MANAGEMENT,
                                                                               ^
security/ai_agents/compliance_agent.py:594:80: E501 line too long (81 > 79 characters)
        if "критическ" in category.lower() or "безопасность" in category.lower():
                                                                               ^
security/ai_agents/compliance_agent.py:637:80: E501 line too long (89 > 79 characters)
            self.log_activity("Ошибка настройки мониторинга: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/compliance_agent.py:650:80: E501 line too long (93 > 79 characters)
            self.log_activity("Ошибка запуска фоновых процессов: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/compliance_agent.py:652:80: E501 line too long (85 > 79 characters)
    def create_requirement(self, title, description, standard, category, priority=1):
                                                                               ^
security/ai_agents/compliance_agent.py:656:80: E501 line too long (91 > 79 characters)
            if not self._validate_requirement_data(title, description, standard, category):
                                                                               ^
security/ai_agents/compliance_agent.py:657:80: E501 line too long (80 > 79 characters)
                self.log_activity("Ошибка валидации данных требования", "error")
                                                                               ^
security/ai_agents/compliance_agent.py:688:80: E501 line too long (87 > 79 characters)
            self.log_activity("Ошибка создания требования: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/compliance_agent.py:691:80: E501 line too long (81 > 79 characters)
    def _validate_requirement_data(self, title, description, standard, category):
                                                                               ^
security/ai_agents/compliance_agent.py:695:80: E501 line too long (82 > 79 characters)
            if not title or not isinstance(title, str) or len(title.strip()) == 0:
                                                                               ^
security/ai_agents/compliance_agent.py:699:80: E501 line too long (100 > 79 characters)
            if not description or not isinstance(description, str) or len(description.strip()) == 0:
                                                                               ^
security/ai_agents/compliance_agent.py:705:80: E501 line too long (80 > 79 characters)
                self.log_activity("Некорректный стандарт соответствия", "error")
                                                                               ^
security/ai_agents/compliance_agent.py:715:80: E501 line too long (81 > 79 characters)
                self.log_activity("Название требования слишком длинное", "error")
                                                                               ^
security/ai_agents/compliance_agent.py:719:80: E501 line too long (81 > 79 characters)
                self.log_activity("Описание требования слишком длинное", "error")
                                                                               ^
security/ai_agents/compliance_agent.py:725:80: E501 line too long (95 > 79 characters)
            self.log_activity("Ошибка валидации данных требования: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/compliance_agent.py:728:80: E501 line too long (89 > 79 characters)
    def assess_requirement(self, requirement_id, assessor, evidence=None, controls=None):
                                                                               ^
security/ai_agents/compliance_agent.py:732:80: E501 line too long (94 > 79 characters)
                self.log_activity("Требование не найдено: {}".format(requirement_id), "error")
                                                                               ^
security/ai_agents/compliance_agent.py:738:80: E501 line too long (91 > 79 characters)
            compliance_analysis = self._analyze_compliance(requirement, evidence, controls)
                                                                               ^
security/ai_agents/compliance_agent.py:762:80: E501 line too long (80 > 79 characters)
                        control.get("implementation_status", "not_implemented"),
                                                                               ^
security/ai_agents/compliance_agent.py:773:80: E501 line too long (85 > 79 characters)
            self.log_activity("Ошибка оценки требования: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/compliance_agent.py:789:80: E501 line too long (85 > 79 characters)
                control_effectiveness = self._analyze_control_effectiveness(controls)
                                                                               ^
security/ai_agents/compliance_agent.py:807:80: E501 line too long (97 > 79 characters)
                "notes": "AI анализ завершен. Балл соответствия: {:.2f}".format(compliance_score)
                                                                               ^
security/ai_agents/compliance_agent.py:811:80: E501 line too long (91 > 79 characters)
            self.log_activity("Ошибка AI анализа соответствия: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/compliance_agent.py:833:80: E501 line too long (81 > 79 characters)
                if ev.get("description") and len(ev.get("description", "")) > 10:
                                                                               ^
security/ai_agents/compliance_agent.py:845:80: E501 line too long (98 > 79 characters)
            self.log_activity("Ошибка анализа качества доказательств: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/compliance_agent.py:859:80: E501 line too long (80 > 79 characters)
                status = control.get("implementation_status", "not_implemented")
                                                                               ^
security/ai_agents/compliance_agent.py:866:80: E501 line too long (91 > 79 characters)
                if control.get("description") and len(control.get("description", "")) > 20:
                                                                               ^
security/ai_agents/compliance_agent.py:870:80: E501 line too long (88 > 79 characters)
                if control.get("control_id") and len(control.get("control_id", "")) > 0:
                                                                               ^
security/ai_agents/compliance_agent.py:878:80: E501 line too long (99 > 79 characters)
            self.log_activity("Ошибка анализа эффективности контролей: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/compliance_agent.py:895:80: E501 line too long (93 > 79 characters)
            if requirement.standard in [ComplianceStandard.PCI_DSS, ComplianceStandard.GDPR]:
                                                                               ^
security/ai_agents/compliance_agent.py:900:52: W291 trailing whitespace
                ComplianceCategory.DATA_PROTECTION, 
                                                   ^
security/ai_agents/compliance_agent.py:908:80: E501 line too long (88 > 79 characters)
            self.log_activity("Ошибка анализа уровня риска: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/compliance_agent.py:921:80: E501 line too long (108 > 79 characters)
                self.metrics.requirements_by_standard[standard] = self.metrics.requirements_by_standard.get(
                                                                               ^
security/ai_agents/compliance_agent.py:928:80: E501 line too long (108 > 79 characters)
                self.metrics.requirements_by_category[category] = self.metrics.requirements_by_category.get(
                                                                               ^
security/ai_agents/compliance_agent.py:933:80: E501 line too long (118 > 79 characters)
                status = requirement.status.value if hasattr(requirement.status, 'value') else str(requirement.status)
                                                                               ^
security/ai_agents/compliance_agent.py:934:80: E501 line too long (116 > 79 characters)
                self.metrics.requirements_by_status[status] = self.metrics.requirements_by_status.get(status, 0) + 1
                                                                               ^
security/ai_agents/compliance_agent.py:940:80: E501 line too long (85 > 79 characters)
            self.log_activity("Ошибка обновления метрик: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/compliance_agent.py:950:80: E501 line too long (85 > 79 characters)
            compliant_count = self.metrics.requirements_by_status.get("compliant", 0)
                                                                               ^
security/ai_agents/compliance_agent.py:951:80: E501 line too long (93 > 79 characters)
            partial_count = self.metrics.requirements_by_status.get("partially_compliant", 0)
                                                                               ^
security/ai_agents/compliance_agent.py:952:80: E501 line too long (93 > 79 characters)
            non_compliant_count = self.metrics.requirements_by_status.get("non_compliant", 0)
                                                                               ^
security/ai_agents/compliance_agent.py:955:80: E501 line too long (85 > 79 characters)
            self.metrics.partial_compliance_rate = partial_count / total_requirements
                                                                               ^
security/ai_agents/compliance_agent.py:956:80: E501 line too long (87 > 79 characters)
            self.metrics.non_compliance_rate = non_compliant_count / total_requirements
                                                                               ^
security/ai_agents/compliance_agent.py:959:80: E501 line too long (82 > 79 characters)
            assessed_count = compliant_count + partial_count + non_compliant_count
                                                                               ^
security/ai_agents/compliance_agent.py:960:80: E501 line too long (89 > 79 characters)
            self.metrics.assessment_completion_rate = assessed_count / total_requirements
                                                                               ^
security/ai_agents/compliance_agent.py:963:80: E501 line too long (97 > 79 characters)
            self.log_activity("Ошибка пересчета метрик соответствия: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/compliance_agent.py:977:80: E501 line too long (84 > 79 characters)
                    "partial_compliance_rate": self.metrics.partial_compliance_rate,
                                                                               ^
security/ai_agents/compliance_agent.py:979:80: E501 line too long (89 > 79 characters)
                    "assessment_completion_rate": self.metrics.assessment_completion_rate
                                                                               ^
security/ai_agents/compliance_agent.py:991:80: E501 line too long (81 > 79 characters)
                    "network_security": self.metrics.network_security_compliance,
                                                                               ^
security/ai_agents/compliance_agent.py:992:80: E501 line too long (83 > 79 characters)
                    "incident_response": self.metrics.incident_response_compliance,
                                                                               ^
security/ai_agents/compliance_agent.py:993:80: E501 line too long (86 > 79 characters)
                    "business_continuity": self.metrics.business_continuity_compliance
                                                                               ^
security/ai_agents/compliance_agent.py:995:80: E501 line too long (86 > 79 characters)
                "requirements": [req.to_dict() for req in self.requirements.values()],
                                                                               ^
security/ai_agents/compliance_agent.py:1005:80: E501 line too long (104 > 79 characters)
            report_file = os.path.join(report_dir, "compliance_report_{}.json".format(int(time.time())))
                                                                               ^
security/ai_agents/compliance_agent.py:1013:80: E501 line too long (84 > 79 characters)
            self.log_activity("Ошибка генерации отчета: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/compliance_agent.py:1026:80: E501 line too long (86 > 79 characters)
                    "description": "Низкий уровень соответствия, требуется улучшение",
                                                                               ^
security/ai_agents/compliance_agent.py:1049:80: E501 line too long (90 > 79 characters)
            self.log_activity("Ошибка генерации рекомендаций: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/compliance_agent.py:1066:80: E501 line too long (93 > 79 characters)
            self.log_activity("Ошибка остановки ComplianceAgent: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/compliance_agent.py:1079:80: E501 line too long (102 > 79 characters)
                          for rid, req in self.requirements.items()}, f, indent=2, ensure_ascii=False)
                                                                               ^
security/ai_agents/compliance_agent.py:1084:80: E501 line too long (82 > 79 characters)
                json.dump(self.metrics.to_dict(), f, indent=2, ensure_ascii=False)
                                                                               ^
security/ai_agents/compliance_agent.py:1089:80: E501 line too long (85 > 79 characters)
            self.log_activity("Ошибка сохранения данных: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/compliance_agent.py:1115:80: E501 line too long (105 > 79 characters)
                evidence=[{"type": "document", "data": "test_evidence", "description": "Test evidence"}],
                                                                               ^
security/ai_agents/compliance_agent.py:1116:80: E501 line too long (130 > 79 characters)
                controls=[{"control_id": "CTRL001", "control_name": "Test Control", "implementation_status": "fully_implemented"}]
                                                                               ^
security/ai_agents/contextual_alert_system.py:19:1: F401 'typing.Callable' imported but unused
from typing import Dict, List, Optional, Any, Tuple, Callable
^
security/ai_agents/contextual_alert_system.py:29:5: F401 'config.color_scheme.MatrixAIColorScheme' imported but unused
    from config.color_scheme import MatrixAIColorScheme, ColorTheme
    ^
security/ai_agents/contextual_alert_system.py:29:5: F401 'config.color_scheme.ColorTheme' imported but unused
    from config.color_scheme import MatrixAIColorScheme, ColorTheme
    ^
security/ai_agents/contextual_alert_system.py:113:80: E501 line too long (92 > 79 characters)
            description="AI-система контекстных оповещений на основе поведения пользователя"
                                                                               ^
security/ai_agents/contextual_alert_system.py:161:80: E501 line too long (93 > 79 characters)
                    "triggers": [AlertTrigger.BEHAVIOR_CHANGE, AlertTrigger.ANOMALY_DETECTED]
                                                                               ^
security/ai_agents/contextual_alert_system.py:167:80: E501 line too long (96 > 79 characters)
                    "triggers": [AlertTrigger.ANOMALY_DETECTED, AlertTrigger.THRESHOLD_EXCEEDED]
                                                                               ^
security/ai_agents/contextual_alert_system.py:171:80: E501 line too long (81 > 79 characters)
                    "message": "Семейная ситуация требует внимания: {situation}",
                                                                               ^
security/ai_agents/contextual_alert_system.py:173:80: E501 line too long (85 > 79 characters)
                    "triggers": [AlertTrigger.CONTEXT_BASED, AlertTrigger.TIME_BASED]
                                                                               ^
security/ai_agents/contextual_alert_system.py:179:80: E501 line too long (94 > 79 characters)
                    "triggers": [AlertTrigger.THRESHOLD_EXCEEDED, AlertTrigger.LOCATION_BASED]
                                                                               ^
security/ai_agents/contextual_alert_system.py:185:80: E501 line too long (82 > 79 characters)
                    "triggers": [AlertTrigger.PREDICTIVE, AlertTrigger.TIME_BASED]
                                                                               ^
security/ai_agents/contextual_alert_system.py:191:80: E501 line too long (89 > 79 characters)
                    "triggers": [AlertTrigger.CONTEXT_BASED, AlertTrigger.LOCATION_BASED]
                                                                               ^
security/ai_agents/contextual_alert_system.py:197:80: E501 line too long (85 > 79 characters)
                    "triggers": [AlertTrigger.TIME_BASED, AlertTrigger.PATTERN_BREAK]
                                                                               ^
security/ai_agents/contextual_alert_system.py:203:80: E501 line too long (89 > 79 characters)
                    "triggers": [AlertTrigger.LOCATION_BASED, AlertTrigger.CONTEXT_BASED]
                                                                               ^
security/ai_agents/contextual_alert_system.py:257:80: E501 line too long (81 > 79 characters)
            self.logger.info("Компоненты ContextualAlertSystem инициализированы")
                                                                               ^
security/ai_agents/contextual_alert_system.py:336:80: E501 line too long (83 > 79 characters)
            predictive_analysis = await self.predictive_engine.analyze_predictions(
                                                                               ^
security/ai_agents/contextual_alert_system.py:345:80: E501 line too long (92 > 79 characters)
                "confidence": self._calculate_confidence(behavioral_data, context_analysis),
                                                                               ^
security/ai_agents/contextual_alert_system.py:346:68: F821 undefined name 'ai_analysis'
                "risk_level": self._calculate_risk_level(severity, ai_analysis)
                                                                   ^
security/ai_agents/contextual_alert_system.py:350:80: E501 line too long (97 > 79 characters)
            timing = await self._optimize_timing(alert_type, severity, target_users, ai_analysis)
                                                                               ^
security/ai_agents/contextual_alert_system.py:391:80: E501 line too long (89 > 79 characters)
        random_part = hashlib.md5(f"{timestamp}{os.urandom(8)}".encode()).hexdigest()[:8]
                                                                               ^
security/ai_agents/contextual_alert_system.py:416:80: E501 line too long (81 > 79 characters)
            confidence = (behavioral_confidence * 0.6 + context_confidence * 0.4)
                                                                               ^
security/ai_agents/contextual_alert_system.py:443:80: E501 line too long (84 > 79 characters)
    async def _optimize_timing(self, alert_type: AlertType, severity: AlertSeverity,
                                                                               ^
security/ai_agents/contextual_alert_system.py:444:80: E501 line too long (103 > 79 characters)
                               target_users: List[str], ai_analysis: Dict[str, Any]) -> Dict[str, Any]:
                                                                               ^
security/ai_agents/contextual_alert_system.py:511:80: E501 line too long (82 > 79 characters)
            self.processing_thread = threading.Thread(target=self._process_alerts)
                                                                               ^
security/ai_agents/contextual_alert_system.py:548:80: E501 line too long (98 > 79 characters)
            if alert.timing.get("scheduled_at") and alert.timing["scheduled_at"] > datetime.now():
                                                                               ^
security/ai_agents/contextual_alert_system.py:567:80: E501 line too long (88 > 79 characters)
                if not await self.condition_system.evaluate_condition(condition, alert):
                                                                               ^
security/ai_agents/contextual_alert_system.py:627:80: E501 line too long (95 > 79 characters)
                "triggered_at": alert.triggered_at.isoformat() if alert.triggered_at else None,
                                                                               ^
security/ai_agents/contextual_alert_system.py:628:80: E501 line too long (92 > 79 characters)
                "resolved_at": alert.resolved_at.isoformat() if alert.resolved_at else None,
                                                                               ^
security/ai_agents/contextual_alert_system.py:629:80: E501 line too long (89 > 79 characters)
                "expires_at": alert.expires_at.isoformat() if alert.expires_at else None,
                                                                               ^
security/ai_agents/contextual_alert_system.py:646:80: E501 line too long (104 > 79 characters)
            active_rate = (self.active_alerts / self.total_alerts * 100) if self.total_alerts > 0 else 0
                                                                               ^
security/ai_agents/contextual_alert_system.py:647:80: E501 line too long (108 > 79 characters)
            trigger_rate = (self.triggered_alerts / self.total_alerts * 100) if self.total_alerts > 0 else 0
                                                                               ^
security/ai_agents/contextual_alert_system.py:648:80: E501 line too long (115 > 79 characters)
            resolve_rate = (self.resolved_alerts / self.triggered_alerts * 100) if self.triggered_alerts > 0 else 0
                                                                               ^
security/ai_agents/contextual_alert_system.py:874:80: E501 line too long (108 > 79 characters)
            total_checks = len(architectural_principles) + len(functionality) + len(security) + len(testing)
                                                                               ^
security/ai_agents/contextual_alert_system.py:888:80: E501 line too long (102 > 79 characters)
                "quality_grade": "A+" if quality_score >= 95 else "A" if quality_score >= 90 else "B",
                                                                               ^
security/ai_agents/contextual_alert_system.py:993:80: E501 line too long (81 > 79 characters)
        return f"[{alert.severity.value.upper()}] {alert.title}: {alert.message}"
                                                                               ^
security/ai_agents/contextual_alert_system.py:1059:80: E501 line too long (90 > 79 characters)
                resolution_time = (alert.resolved_at - alert.triggered_at).total_seconds()
                                                                               ^
security/ai_agents/contextual_alert_system.py:1061:80: E501 line too long (118 > 79 characters)
                    (self.metrics["average_resolution_time"] * (self.metrics["total_resolved"] - 1) + resolution_time)
                                                                               ^
security/ai_agents/contextual_alert_system.py:1096:80: E501 line too long (82 > 79 characters)
            errors.append("Время истечения не может быть раньше времени создания")
                                                                               ^
security/ai_agents/contextual_alert_system.py:1099:80: E501 line too long (85 > 79 characters)
            errors.append("Время срабатывания не может быть раньше времени создания")
                                                                               ^
security/ai_agents/contextual_alert_system.py:1102:80: E501 line too long (84 > 79 characters)
            errors.append("Время решения не может быть раньше времени срабатывания")
                                                                               ^
security/ai_agents/contextual_alert_system.py:1107:80: E501 line too long (94 > 79 characters)
    def validate_alert_conditions(conditions: List[Dict[str, Any]]) -> Tuple[bool, List[str]]:
                                                                               ^
security/ai_agents/contextual_alert_system.py:1131:80: E501 line too long (90 > 79 characters)
    print(f"Тесты пройдены: {test_results['tests_passed']}/{test_results['total_tests']}")
                                                                               ^
security/ai_agents/contextual_alert_system.py:1135:80: E501 line too long (101 > 79 characters)
    print(f"Качество: {quality_report['quality_score']:.1f}/100 ({quality_report['quality_grade']})")
                                                                               ^
security/ai_agents/dashboard_manager.py:7:80: E501 line too long (93 > 79 characters)
"""
DashboardManager - Расширенный менеджер панели управления
Единая панель управления всей системой безопасности

Этот модуль предоставляет комплексную систему управления панелью для AI системы безопасности,
включающую интеллектуальную адаптивную панель управления с персонализацией,
динамические виджеты с реальным временем обновления и продвинутую визуализацию данных.

Автор: ALADDIN Security System
Версия: 3.0
Дата: 2025-01-06
Лицензия: MIT
"""
   
                                                         
                 ^
security/ai_agents/dashboard_manager.py:9:80: E501 line too long (86 > 79 characters)
"""
DashboardManager - Расширенный менеджер панели управления
Единая панель управления всей системой безопасности

Этот модуль предоставляет комплексную систему управления панелью для AI системы безопасности,
включающую интеллектуальную адаптивную панель управления с персонализацией,
динамические виджеты с реальным временем обновления и продвинутую визуализацию данных.

Автор: ALADDIN Security System
Версия: 3.0
Дата: 2025-01-06
Лицензия: MIT
"""
   
                                                         
                 ^
security/ai_agents/dashboard_manager.py:130:80: E501 line too long (103 > 79 characters)
    async def render_widget(self, widget_config: WidgetConfig, data: Dict[str, Any]) -> Dict[str, Any]:
                                                                               ^
security/ai_agents/dashboard_manager.py:169:80: E501 line too long (94 > 79 characters)
    async def calculate_trends(self, historical_data: List[Dict[str, Any]]) -> Dict[str, Any]:
                                                                               ^
security/ai_agents/dashboard_manager.py:203:80: E501 line too long (103 > 79 characters)
    async def render_widget(self, widget_config: WidgetConfig, data: Dict[str, Any]) -> Dict[str, Any]:
                                                                               ^
security/ai_agents/dashboard_manager.py:219:80: E501 line too long (103 > 79 characters)
    async def _render_chart(self, widget_config: WidgetConfig, data: Dict[str, Any]) -> Dict[str, Any]:
                                                                               ^
security/ai_agents/dashboard_manager.py:228:80: E501 line too long (104 > 79 characters)
    async def _render_metric(self, widget_config: WidgetConfig, data: Dict[str, Any]) -> Dict[str, Any]:
                                                                               ^
security/ai_agents/dashboard_manager.py:238:80: E501 line too long (103 > 79 characters)
    async def _render_gauge(self, widget_config: WidgetConfig, data: Dict[str, Any]) -> Dict[str, Any]:
                                                                               ^
security/ai_agents/dashboard_manager.py:270:80: E501 line too long (84 > 79 characters)
            self.logger.info(f"Инициализация панели управления: {self.config.name}")
                                                                               ^
security/ai_agents/dashboard_manager.py:400:80: E501 line too long (84 > 79 characters)
                    rendered_widget = await self.visualization_engine.render_widget(
                                                                               ^
security/ai_agents/dashboard_manager.py:411:80: E501 line too long (84 > 79 characters)
    async def _get_widget_data(self, widget_config: WidgetConfig) -> Dict[str, Any]:
                                                                               ^
security/ai_agents/dashboard_manager.py:427:80: E501 line too long (82 > 79 characters)
                    'value': self.current_data.metrics.get('threats_detected', 0),
                                                                               ^
security/ai_agents/dashboard_manager.py:432:80: E501 line too long (83 > 79 characters)
                security_score = self.current_data.metrics.get('security_score', 0)
                                                                               ^
security/ai_agents/dashboard_manager.py:460:47: W291 trailing whitespace
                w for w in self.config.widgets 
                                              ^
security/ai_agents/dashboard_manager_new.py:7:80: E501 line too long (93 > 79 characters)
"""
DashboardManager - Расширенный менеджер панели управления
Единая панель управления всей системой безопасности

Этот модуль предоставляет комплексную систему управления панелью для AI системы безопасности,
включающую интеллектуальную адаптивную панель управления с персонализацией,
динамические виджеты с реальным временем обновления и продвинутую визуализацию данных.

Автор: ALADDIN Security System
Версия: 3.0
Дата: 2025-01-06
Лицензия: MIT
"""
   
                                                         
                 ^
security/ai_agents/dashboard_manager_new.py:9:80: E501 line too long (86 > 79 characters)
"""
DashboardManager - Расширенный менеджер панели управления
Единая панель управления всей системой безопасности

Этот модуль предоставляет комплексную систему управления панелью для AI системы безопасности,
включающую интеллектуальную адаптивную панель управления с персонализацией,
динамические виджеты с реальным временем обновления и продвинутую визуализацию данных.

Автор: ALADDIN Security System
Версия: 3.0
Дата: 2025-01-06
Лицензия: MIT
"""
   
                                                         
                 ^
security/ai_agents/dashboard_manager_new.py:130:80: E501 line too long (103 > 79 characters)
    async def render_widget(self, widget_config: WidgetConfig, data: Dict[str, Any]) -> Dict[str, Any]:
                                                                               ^
security/ai_agents/dashboard_manager_new.py:169:80: E501 line too long (94 > 79 characters)
    async def calculate_trends(self, historical_data: List[Dict[str, Any]]) -> Dict[str, Any]:
                                                                               ^
security/ai_agents/dashboard_manager_new.py:203:80: E501 line too long (103 > 79 characters)
    async def render_widget(self, widget_config: WidgetConfig, data: Dict[str, Any]) -> Dict[str, Any]:
                                                                               ^
security/ai_agents/dashboard_manager_new.py:219:80: E501 line too long (103 > 79 characters)
    async def _render_chart(self, widget_config: WidgetConfig, data: Dict[str, Any]) -> Dict[str, Any]:
                                                                               ^
security/ai_agents/dashboard_manager_new.py:228:80: E501 line too long (104 > 79 characters)
    async def _render_metric(self, widget_config: WidgetConfig, data: Dict[str, Any]) -> Dict[str, Any]:
                                                                               ^
security/ai_agents/dashboard_manager_new.py:238:80: E501 line too long (103 > 79 characters)
    async def _render_gauge(self, widget_config: WidgetConfig, data: Dict[str, Any]) -> Dict[str, Any]:
                                                                               ^
security/ai_agents/dashboard_manager_new.py:270:80: E501 line too long (84 > 79 characters)
            self.logger.info(f"Инициализация панели управления: {self.config.name}")
                                                                               ^
security/ai_agents/dashboard_manager_new.py:400:80: E501 line too long (84 > 79 characters)
                    rendered_widget = await self.visualization_engine.render_widget(
                                                                               ^
security/ai_agents/dashboard_manager_new.py:411:80: E501 line too long (84 > 79 characters)
    async def _get_widget_data(self, widget_config: WidgetConfig) -> Dict[str, Any]:
                                                                               ^
security/ai_agents/dashboard_manager_new.py:427:80: E501 line too long (82 > 79 characters)
                    'value': self.current_data.metrics.get('threats_detected', 0),
                                                                               ^
security/ai_agents/dashboard_manager_new.py:432:80: E501 line too long (83 > 79 characters)
                security_score = self.current_data.metrics.get('security_score', 0)
                                                                               ^
security/ai_agents/dashboard_manager_new.py:460:47: W291 trailing whitespace
                w for w in self.config.widgets 
                                              ^
security/ai_agents/data_protection_agent.py:18:1: F401 'typing.Tuple' imported but unused
from typing import Any, Dict, List, Optional, Tuple, Union
^
security/ai_agents/data_protection_agent.py:18:1: F401 'typing.Union' imported but unused
from typing import Any, Dict, List, Optional, Tuple, Union
^
security/ai_agents/data_protection_agent.py:20:1: F401 'core.base.SecurityLevel' imported but unused
from core.base import ComponentStatus, SecurityBase, SecurityLevel
^
security/ai_agents/data_protection_agent.py:118:80: E501 line too long (98 > 79 characters)
            "encryption_method": self.encryption_method.value if self.encryption_method else None,
                                                                               ^
security/ai_agents/data_protection_agent.py:164:80: E501 line too long (99 > 79 characters)
    def __init__(self, name: str = "DataProtectionAgent", config: Optional[Dict[str, Any]] = None):
                                                                               ^
security/ai_agents/data_protection_agent.py:168:80: E501 line too long (92 > 79 characters)
        self.encryption_enabled = config.get("encryption_enabled", True) if config else True
                                                                               ^
security/ai_agents/data_protection_agent.py:169:80: E501 line too long (98 > 79 characters)
        self.anonymization_enabled = config.get("anonymization_enabled", True) if config else True
                                                                               ^
security/ai_agents/data_protection_agent.py:170:80: E501 line too long (84 > 79 characters)
        self.backup_enabled = config.get("backup_enabled", True) if config else True
                                                                               ^
security/ai_agents/data_protection_agent.py:171:80: E501 line too long (104 > 79 characters)
        self.compliance_check_enabled = config.get("compliance_check_enabled", True) if config else True
                                                                               ^
security/ai_agents/data_protection_agent.py:172:80: E501 line too long (102 > 79 characters)
        self.risk_assessment_enabled = config.get("risk_assessment_enabled", True) if config else True
                                                                               ^
security/ai_agents/data_protection_agent.py:177:80: E501 line too long (105 > 79 characters)
        self.auto_backup_interval = config.get("auto_backup_interval", 3600) if config else 3600  # 1 час
                                                                               ^
security/ai_agents/data_protection_agent.py:178:80: E501 line too long (95 > 79 characters)
        self.retention_period = config.get("retention_period", 30) if config else 30  # 30 дней
                                                                               ^
security/ai_agents/data_protection_agent.py:215:80: E501 line too long (96 > 79 characters)
            self.log_activity("Ошибка инициализации DataProtectionAgent: {}".format(e), "error")
                                                                               ^
security/ai_agents/data_protection_agent.py:254:80: E501 line too long (105 > 79 characters)
        backup_dir = os.path.join(self.config.get("backup_directory", "data/backups"), "data_protection")
                                                                               ^
security/ai_agents/data_protection_agent.py:290:80: E501 line too long (82 > 79 characters)
            risk_level = self._assess_data_risk(data, data_type, protection_level)
                                                                               ^
security/ai_agents/data_protection_agent.py:296:80: E501 line too long (112 > 79 characters)
            if self.encryption_enabled and protection_level in [ProtectionLevel.HIGH, ProtectionLevel.CRITICAL]:
                                                                               ^
security/ai_agents/data_protection_agent.py:297:17: F841 local variable 'encrypted_data' is assigned to but never used
                encrypted_data = self._encrypt_data(data, data_id)
                ^
security/ai_agents/data_protection_agent.py:302:17: F841 local variable 'anonymized_data' is assigned to but never used
                anonymized_data = self._anonymize_data(data)
                ^
security/ai_agents/data_protection_agent.py:319:80: E501 line too long (92 > 79 characters)
                "encryption_method": encryption_method.value if encryption_method else None,
                                                                               ^
security/ai_agents/data_protection_agent.py:346:80: E501 line too long (101 > 79 characters)
            recommendations = self._generate_recommendations(data_type, protection_level, risk_level)
                                                                               ^
security/ai_agents/data_protection_agent.py:352:80: E501 line too long (97 > 79 characters)
                protection_score=self._calculate_protection_score(protection_status, risk_level),
                                                                               ^
security/ai_agents/data_protection_agent.py:362:80: E501 line too long (88 > 79 characters)
            self.log_activity("Ошибка защиты данных {}: {}".format(data_id, e), "error")
                                                                               ^
security/ai_agents/data_protection_agent.py:370:80: E501 line too long (108 > 79 characters)
    def _assess_data_risk(self, data: Any, data_type: DataType, protection_level: ProtectionLevel) -> float:
                                                                               ^
security/ai_agents/data_protection_agent.py:400:80: E501 line too long (85 > 79 characters)
            key = self.encryption_keys.get("master", self._generate_encryption_key())
                                                                               ^
security/ai_agents/data_protection_agent.py:401:1: W293 blank line contains whitespace
            
^
security/ai_agents/data_protection_agent.py:407:1: W293 blank line contains whitespace
            
^
security/ai_agents/data_protection_agent.py:412:80: E501 line too long (92 > 79 characters)
            self.log_activity("Ошибка шифрования данных {}: {}".format(data_id, e), "error")
                                                                               ^
security/ai_agents/data_protection_agent.py:432:80: E501 line too long (82 > 79 characters)
            self.log_activity("Ошибка анонимизации данных: {}".format(e), "error")
                                                                               ^
security/ai_agents/data_protection_agent.py:466:80: E501 line too long (89 > 79 characters)
            return (compliance_score / total_checks) >= 0.8 if total_checks > 0 else True
                                                                               ^
security/ai_agents/data_protection_agent.py:469:80: E501 line too long (84 > 79 characters)
            self.log_activity("Ошибка проверки соответствия: {}".format(e), "error")
                                                                               ^
security/ai_agents/data_protection_agent.py:506:80: E501 line too long (82 > 79 characters)
            self.log_activity("Резервная копия данных {} создана".format(data_id))
                                                                               ^
security/ai_agents/data_protection_agent.py:509:80: E501 line too long (104 > 79 characters)
            self.log_activity("Ошибка резервного копирования данных {}: {}".format(data_id, e), "error")
                                                                               ^
security/ai_agents/data_protection_agent.py:530:80: E501 line too long (101 > 79 characters)
    def _calculate_protection_score(self, protection_status: DataStatus, risk_level: float) -> float:
                                                                               ^
security/ai_agents/data_protection_agent.py:557:80: E501 line too long (84 > 79 characters)
            recommendations.append("Высокий риск - требуется дополнительная защита")
                                                                               ^
security/ai_agents/data_protection_agent.py:573:80: E501 line too long (84 > 79 characters)
    def get_protection_status(self, data_id: str) -> Optional[DataProtectionResult]:
                                                                               ^
security/ai_agents/data_protection_agent.py:585:80: E501 line too long (127 > 79 characters)
                encryption_method=EncryptionMethod(data_info["encryption_method"]) if data_info["encryption_method"] else None,
                                                                               ^
security/ai_agents/data_protection_agent.py:595:80: E501 line too long (99 > 79 characters)
            self.log_activity("Ошибка получения статуса защиты {}: {}".format(data_id, e), "error")
                                                                               ^
security/ai_agents/data_protection_agent.py:602:80: E501 line too long (83 > 79 characters)
    def get_protection_events(self, limit: int = 100) -> List[DataProtectionEvent]:
                                                                               ^
security/ai_agents/data_protection_agent.py:604:80: E501 line too long (87 > 79 characters)
        return self.protection_events[-limit:] if limit > 0 else self.protection_events
                                                                               ^
security/ai_agents/data_protection_agent.py:627:80: E501 line too long (87 > 79 characters)
            self.log_activity("Очищено {} старых записей данных".format(removed_count))
                                                                               ^
security/ai_agents/data_protection_agent.py:630:80: E501 line too long (84 > 79 characters)
            self.log_activity("Ошибка очистки старых данных: {}".format(e), "error")
                                                                               ^
security/ai_agents/data_protection_agent.py:644:80: E501 line too long (92 > 79 characters)
            self.log_activity("Ошибка остановки DataProtectionAgent: {}".format(e), "error")
                                                                               ^
security/ai_agents/data_protection_agent.py:652:80: E501 line too long (98 > 79 characters)
                "protection_events": [event.to_dict() for event in self.protection_events[-100:]],
                                                                               ^
security/ai_agents/data_protection_agent.py:675:80: E501 line too long (103 > 79 characters)
            self.log_activity("Ошибка сохранения состояния DataProtectionAgent: {}".format(e), "error")                                                                               ^
security/ai_agents/data_protection_agent.py:675:104: W292 no newline at end of file
            self.log_activity("Ошибка сохранения состояния DataProtectionAgent: {}".format(e), "error")                                                                                                       ^
security/ai_agents/deepfake_protection_system.py:30:1: F401 'time' imported but unused
import time
^
security/ai_agents/deepfake_protection_system.py:40:1: F401 'json' imported but unused
import json
^
security/ai_agents/deepfake_protection_system.py:42:1: F401 'hashlib' imported but unused
import hashlib
^
security/ai_agents/deepfake_protection_system.py:123:1: W293 blank line contains whitespace
    
^
security/ai_agents/deepfake_protection_system.py:126:80: E501 line too long (97 > 79 characters)
        self.logger = logging.getLogger(f"{self.__class__.__module__}.{self.__class__.__name__}")
                                                                               ^
security/ai_agents/deepfake_protection_system.py:127:1: W293 blank line contains whitespace
        
^
security/ai_agents/deepfake_protection_system.py:133:1: W293 blank line contains whitespace
        
^
security/ai_agents/deepfake_protection_system.py:139:1: W293 blank line contains whitespace
        
^
security/ai_agents/deepfake_protection_system.py:142:1: W293 blank line contains whitespace
        
^
security/ai_agents/deepfake_protection_system.py:148:1: W293 blank line contains whitespace
        
^
security/ai_agents/deepfake_protection_system.py:185:14: W291 trailing whitespace
        self, 
             ^
security/ai_agents/deepfake_protection_system.py:186:29: W291 trailing whitespace
        video_stream: bytes, 
                            ^
security/ai_agents/deepfake_protection_system.py:187:29: W291 trailing whitespace
        audio_stream: bytes, 
                            ^
security/ai_agents/deepfake_protection_system.py:192:1: W293 blank line contains whitespace
        """
        Анализ видеозвонка на deepfake
        
        Args:
            video_stream: Видеопоток
            audio_stream: Аудиопоток
            caller_name: Имя звонящего
            
        Returns:
            Dict[str, Any]: Результат анализа
        """
^
security/ai_agents/deepfake_protection_system.py:197:1: W293 blank line contains whitespace
        """
        Анализ видеозвонка на deepfake
        
        Args:
            video_stream: Видеопоток
            audio_stream: Аудиопоток
            caller_name: Имя звонящего
            
        Returns:
            Dict[str, Any]: Результат анализа
        """
^
security/ai_agents/deepfake_protection_system.py:202:80: E501 line too long (81 > 79 characters)
            self.logger.info(f"Анализ видеозвонка на deepfake для {caller_name}")
                                                                               ^
security/ai_agents/deepfake_protection_system.py:203:1: W293 blank line contains whitespace
            
^
security/ai_agents/deepfake_protection_system.py:206:1: W293 blank line contains whitespace
            
^
security/ai_agents/deepfake_protection_system.py:209:1: W293 blank line contains whitespace
            
^
security/ai_agents/deepfake_protection_system.py:212:1: W293 blank line contains whitespace
            
^
security/ai_agents/deepfake_protection_system.py:214:80: E501 line too long (91 > 79 characters)
            sync_analysis = await self._analyze_synchronization(video_stream, audio_stream)
                                                                               ^
security/ai_agents/deepfake_protection_system.py:215:1: W293 blank line contains whitespace
            
^
security/ai_agents/deepfake_protection_system.py:218:31: W291 trailing whitespace
                face_analysis, 
                              ^
security/ai_agents/deepfake_protection_system.py:219:32: W291 trailing whitespace
                video_analysis, 
                               ^
security/ai_agents/deepfake_protection_system.py:220:32: W291 trailing whitespace
                audio_analysis, 
                               ^
security/ai_agents/deepfake_protection_system.py:223:1: W293 blank line contains whitespace
            
^
security/ai_agents/deepfake_protection_system.py:232:1: W293 blank line contains whitespace
            
^
security/ai_agents/deepfake_protection_system.py:237:1: W293 blank line contains whitespace
            
^
security/ai_agents/deepfake_protection_system.py:240:1: W293 blank line contains whitespace
            
^
security/ai_agents/deepfake_protection_system.py:251:1: W293 blank line contains whitespace
            
^
security/ai_agents/deepfake_protection_system.py:265:1: W293 blank line contains whitespace
            
^
security/ai_agents/deepfake_protection_system.py:277:1: W293 blank line contains whitespace
            
^
security/ai_agents/deepfake_protection_system.py:280:1: W293 blank line contains whitespace
            
^
security/ai_agents/deepfake_protection_system.py:284:80: E501 line too long (89 > 79 characters)
            face_landmarks = [(100, 100), (200, 100), (150, 150), (120, 180), (180, 180)]
                                                                               ^
security/ai_agents/deepfake_protection_system.py:285:1: W293 blank line contains whitespace
            
^
security/ai_agents/deepfake_protection_system.py:288:1: W293 blank line contains whitespace
            
^
security/ai_agents/deepfake_protection_system.py:291:1: W293 blank line contains whitespace
            
^
security/ai_agents/deepfake_protection_system.py:294:1: W293 blank line contains whitespace
            
^
security/ai_agents/deepfake_protection_system.py:297:1: W293 blank line contains whitespace
            
^
security/ai_agents/deepfake_protection_system.py:300:1: W293 blank line contains whitespace
            
^
security/ai_agents/deepfake_protection_system.py:311:1: W293 blank line contains whitespace
            
^
security/ai_agents/deepfake_protection_system.py:330:1: W293 blank line contains whitespace
            
^
security/ai_agents/deepfake_protection_system.py:342:1: W293 blank line contains whitespace
            
^
security/ai_agents/deepfake_protection_system.py:347:1: W293 blank line contains whitespace
            
^
security/ai_agents/deepfake_protection_system.py:350:1: W293 blank line contains whitespace
            
^
security/ai_agents/deepfake_protection_system.py:353:1: W293 blank line contains whitespace
            
^
security/ai_agents/deepfake_protection_system.py:356:1: W293 blank line contains whitespace
            
^
security/ai_agents/deepfake_protection_system.py:359:1: W293 blank line contains whitespace
            
^
security/ai_agents/deepfake_protection_system.py:362:1: W293 blank line contains whitespace
            
^
security/ai_agents/deepfake_protection_system.py:373:1: W293 blank line contains whitespace
            
^
security/ai_agents/deepfake_protection_system.py:392:1: W293 blank line contains whitespace
            
^
security/ai_agents/deepfake_protection_system.py:404:1: W293 blank line contains whitespace
            
^
security/ai_agents/deepfake_protection_system.py:408:1: W293 blank line contains whitespace
            
^
security/ai_agents/deepfake_protection_system.py:411:1: W293 blank line contains whitespace
            
^
security/ai_agents/deepfake_protection_system.py:414:1: W293 blank line contains whitespace
            
^
security/ai_agents/deepfake_protection_system.py:417:1: W293 blank line contains whitespace
            
^
security/ai_agents/deepfake_protection_system.py:420:1: W293 blank line contains whitespace
            
^
security/ai_agents/deepfake_protection_system.py:423:1: W293 blank line contains whitespace
            
^
security/ai_agents/deepfake_protection_system.py:425:80: E501 line too long (93 > 79 characters)
            synthetic_voice_indicators = self._detect_synthetic_voice_indicators(audio_array)
                                                                               ^
security/ai_agents/deepfake_protection_system.py:426:1: W293 blank line contains whitespace
            
^
security/ai_agents/deepfake_protection_system.py:437:1: W293 blank line contains whitespace
            
^
security/ai_agents/deepfake_protection_system.py:452:14: W291 trailing whitespace
        self, 
             ^
security/ai_agents/deepfake_protection_system.py:453:29: W291 trailing whitespace
        video_stream: bytes, 
                            ^
security/ai_agents/deepfake_protection_system.py:461:1: W293 blank line contains whitespace
            
^
security/ai_agents/deepfake_protection_system.py:470:1: W293 blank line contains whitespace
            
^
security/ai_agents/deepfake_protection_system.py:472:80: E501 line too long (83 > 79 characters)
            lip_sync_accuracy = self._assess_lip_sync_accuracy(frames, audio_array)
                                                                               ^
security/ai_agents/deepfake_protection_system.py:473:1: W293 blank line contains whitespace
            
^
security/ai_agents/deepfake_protection_system.py:475:80: E501 line too long (83 > 79 characters)
            audio_video_delay = self._assess_audio_video_delay(frames, audio_array)
                                                                               ^
security/ai_agents/deepfake_protection_system.py:476:1: W293 blank line contains whitespace
            
^
security/ai_agents/deepfake_protection_system.py:478:80: E501 line too long (94 > 79 characters)
            temporal_consistency = self._assess_temporal_consistency_sync(frames, audio_array)
                                                                               ^
security/ai_agents/deepfake_protection_system.py:479:1: W293 blank line contains whitespace
            
^
security/ai_agents/deepfake_protection_system.py:486:1: W293 blank line contains whitespace
            
^
security/ai_agents/deepfake_protection_system.py:489:1: W293 blank line contains whitespace
            
^
security/ai_agents/deepfake_protection_system.py:497:1: W293 blank line contains whitespace
            
^
security/ai_agents/deepfake_protection_system.py:519:1: W293 blank line contains whitespace
            
^
security/ai_agents/deepfake_protection_system.py:521:80: E501 line too long (81 > 79 characters)
            if face_analysis.face_authenticity < self.min_authenticity_threshold:
                                                                               ^
security/ai_agents/deepfake_protection_system.py:524:1: W293 blank line contains whitespace
            
^
security/ai_agents/deepfake_protection_system.py:529:1: W293 blank line contains whitespace
            
^
security/ai_agents/deepfake_protection_system.py:533:1: W293 blank line contains whitespace
            
^
security/ai_agents/deepfake_protection_system.py:536:80: E501 line too long (85 > 79 characters)
                deepfake_indicators.append("Высокая вероятность клонирования голоса")
                                                                               ^
security/ai_agents/deepfake_protection_system.py:538:1: W293 blank line contains whitespace
            
^
security/ai_agents/deepfake_protection_system.py:542:1: W293 blank line contains whitespace
            
^
security/ai_agents/deepfake_protection_system.py:547:1: W293 blank line contains whitespace
            
^
security/ai_agents/deepfake_protection_system.py:551:1: W293 blank line contains whitespace
            
^
security/ai_agents/deepfake_protection_system.py:556:1: W293 blank line contains whitespace
            
^
security/ai_agents/deepfake_protection_system.py:559:80: E501 line too long (102 > 79 characters)
            confidence = sum(confidence_scores) / len(confidence_scores) if confidence_scores else 0.0
                                                                               ^
security/ai_agents/deepfake_protection_system.py:560:1: W293 blank line contains whitespace
            
^
security/ai_agents/deepfake_protection_system.py:563:80: E501 line too long (80 > 79 characters)
                "deepfake_type": deepfake_type.value if deepfake_type else None,
                                                                               ^
security/ai_agents/deepfake_protection_system.py:568:1: W293 blank line contains whitespace
            
^
security/ai_agents/deepfake_protection_system.py:590:1: W293 blank line contains whitespace
            
^
security/ai_agents/deepfake_protection_system.py:594:1: W293 blank line contains whitespace
            
^
security/ai_agents/deepfake_protection_system.py:598:1: W293 blank line contains whitespace
            
^
security/ai_agents/deepfake_protection_system.py:601:1: W293 blank line contains whitespace
            
^
security/ai_agents/deepfake_protection_system.py:605:1: W293 blank line contains whitespace
            
^
security/ai_agents/deepfake_protection_system.py:608:1: W293 blank line contains whitespace
            
^
security/ai_agents/deepfake_protection_system.py:612:1: W293 blank line contains whitespace
            
^
security/ai_agents/deepfake_protection_system.py:615:1: W293 blank line contains whitespace
            
^
security/ai_agents/deepfake_protection_system.py:621:1: W293 blank line contains whitespace
            
^
security/ai_agents/deepfake_protection_system.py:623:1: W293 blank line contains whitespace
            
^
security/ai_agents/deepfake_protection_system.py:635:80: E501 line too long (89 > 79 characters)
                frame = [[[0, 0, 0] for _ in range(640)] for _ in range(480)]  # Заглушка
                                                                               ^
security/ai_agents/deepfake_protection_system.py:652:80: E501 line too long (81 > 79 characters)
    def _analyze_eye_movements(self, frames: List[list]) -> List[Dict[str, Any]]:
                                                                               ^
security/ai_agents/deepfake_protection_system.py:655:80: E501 line too long (83 > 79 characters)
        return [{"frame": i, "eye_movement": "normal"} for i in range(len(frames))]
                                                                               ^
security/ai_agents/deepfake_protection_system.py:657:80: E501 line too long (81 > 79 characters)
    def _analyze_lip_movements(self, frames: List[list]) -> List[Dict[str, Any]]:
                                                                               ^
security/ai_agents/deepfake_protection_system.py:660:80: E501 line too long (83 > 79 characters)
        return [{"frame": i, "lip_movement": "normal"} for i in range(len(frames))]
                                                                               ^
security/ai_agents/deepfake_protection_system.py:662:80: E501 line too long (82 > 79 characters)
    def _analyze_facial_expressions(self, frames: List[list]) -> Dict[str, float]:
                                                                               ^
security/ai_agents/deepfake_protection_system.py:717:80: E501 line too long (81 > 79 characters)
    def _detect_synthetic_voice_indicators(self, audio_array: list) -> List[str]:
                                                                               ^
security/ai_agents/deepfake_protection_system.py:722:80: E501 line too long (88 > 79 characters)
    def _assess_lip_sync_accuracy(self, frames: List[list], audio_array: list) -> float:
                                                                               ^
security/ai_agents/deepfake_protection_system.py:727:80: E501 line too long (88 > 79 characters)
    def _assess_audio_video_delay(self, frames: List[list], audio_array: list) -> float:
                                                                               ^
security/ai_agents/deepfake_protection_system.py:732:80: E501 line too long (96 > 79 characters)
    def _assess_temporal_consistency_sync(self, frames: List[list], audio_array: list) -> float:
                                                                               ^
security/ai_agents/deepfake_protection_system.py:737:80: E501 line too long (99 > 79 characters)
    def _detect_desync_events(self, frames: List[list], audio_array: list) -> List[Dict[str, Any]]:
                                                                               ^
security/ai_agents/deepfake_protection_system.py:776:80: E501 line too long (82 > 79 characters)
                "voice_cloning_detector": self.voice_cloning_detector is not None,
                                                                               ^
security/ai_agents/deepfake_protection_system.py:786:1: W293 blank line contains whitespace
        
^
security/ai_agents/deepfake_protection_system.py:790:80: E501 line too long (93 > 79 characters)
        result = await system.analyze_video_call(test_video, test_audio, "Тестовый звонящий")
                                                                               ^
security/ai_agents/deepfake_protection_system.py:791:1: W293 blank line contains whitespace
        
^
security/ai_agents/deepfake_protection_system.py:793:1: W293 blank line contains whitespace
        
^
security/ai_agents/deepfake_protection_system.py:797:1: W293 blank line contains whitespace
    
^
security/ai_agents/deepfake_protection_system.py:799:51: W292 no newline at end of file
    asyncio.run(test_deepfake_protection_system())                                                  ^
security/ai_agents/elderly_interface_manager.py:16:1: F401 'typing.Tuple' imported but unused
from typing import Dict, List, Optional, Any, Tuple
^
security/ai_agents/elderly_interface_manager.py:87:80: E501 line too long (95 > 79 characters)
        super().__init__("ElderlyInterfaceManager", "Управление интерфейсом для пожилых людей")
                                                                               ^
security/ai_agents/elderly_interface_manager.py:111:80: E501 line too long (80 > 79 characters)
            "age_classifier": {"model": "AgeClassifier_v1.0", "accuracy": 0.95},
                                                                               ^
security/ai_agents/elderly_interface_manager.py:112:80: E501 line too long (98 > 79 characters)
            "accessibility_optimizer": {"model": "AccessibilityOptimizer_v1.0", "accuracy": 0.90},
                                                                               ^
security/ai_agents/elderly_interface_manager.py:113:80: E501 line too long (80 > 79 characters)
            "safety_monitor": {"model": "SafetyMonitor_v1.0", "accuracy": 0.98},
                                                                               ^
security/ai_agents/elderly_interface_manager.py:114:80: E501 line too long (83 > 79 characters)
            "family_connector": {"model": "FamilyConnector_v1.0", "accuracy": 0.85}
                                                                               ^
security/ai_agents/elderly_interface_manager.py:158:80: E501 line too long (86 > 79 characters)
                    "81+": {      # Пожилые с ограничениями - максимальная доступность
                                                                               ^
security/ai_agents/elderly_interface_manager.py:209:9: F841 local variable 'e' is assigned to but never used
        except Exception as e:
        ^
security/ai_agents/elderly_interface_manager.py:235:80: E501 line too long (106 > 79 characters)
            if age_category in self.color_scheme.get("elderly_colors", {}).get("age_specific_colors", {}):
                                                                               ^
security/ai_agents/elderly_interface_manager.py:236:80: E501 line too long (95 > 79 characters)
                return self.color_scheme["elderly_colors"]["age_specific_colors"][age_category]
                                                                               ^
security/ai_agents/elderly_interface_manager.py:238:80: E501 line too long (106 > 79 characters)
                return self.color_scheme["elderly_colors"]["age_specific_colors"]["71-80"]  # По умолчанию
                                                                               ^
security/ai_agents/elderly_interface_manager.py:239:9: F841 local variable 'e' is assigned to but never used
        except Exception as e:
        ^
security/ai_agents/elderly_interface_manager.py:248:80: E501 line too long (101 > 79 characters)
    def generate_ui_colors(self, age_category, element_type="button", accessibility_mode="standard"):
                                                                               ^
security/ai_agents/elderly_interface_manager.py:293:80: E501 line too long (107 > 79 characters)
                    "shadow": self.color_scheme.get("shadows", {}).get("shadow_high_contrast", "#00000040")
                                                                               ^
security/ai_agents/elderly_interface_manager.py:297:80: E501 line too long (89 > 79 characters)
                    "secondary": self._lighten_color(colors.get("text", "#000000"), 0.3),
                                                                               ^
security/ai_agents/elderly_interface_manager.py:311:9: F841 local variable 'e' is assigned to but never used
        except Exception as e:
        ^
security/ai_agents/elderly_interface_manager.py:355:80: E501 line too long (102 > 79 characters)
        log_file = os.path.join(log_dir, f"elderly_interface_{datetime.now().strftime('%Y%m%d')}.log")
                                                                               ^
security/ai_agents/elderly_interface_manager.py:360:80: E501 line too long (95 > 79 characters)
            handlers=[logging.FileHandler(log_file, encoding='utf-8'), logging.StreamHandler()]
                                                                               ^
security/ai_agents/elderly_interface_manager.py:371:21: F841 local variable 'config' is assigned to but never used
                    config = json.load(f)
                    ^
security/ai_agents/elderly_interface_manager.py:374:80: E501 line too long (96 > 79 characters)
                self.logger.info("Конфигурация не найдена, используются настройки по умолчанию")
                                                                               ^
security/ai_agents/elderly_interface_manager.py:382:80: E501 line too long (86 > 79 characters)
            if not isinstance(data.get('age'), int) or not (60 <= data['age'] <= 100):
                                                                               ^
security/ai_agents/elderly_interface_manager.py:392:80: E501 line too long (84 > 79 characters)
            if not isinstance(data.get('user_id'), str) or len(data['user_id']) < 3:
                                                                               ^
security/ai_agents/elderly_interface_manager.py:393:80: E501 line too long (90 > 79 characters)
                self.logger.error("ID пользователя должен быть строкой минимум 3 символа")
                                                                               ^
security/ai_agents/elderly_interface_manager.py:425:80: E501 line too long (97 > 79 characters)
            self.logger.info(f"Профиль пользователя {profile.user_id} сохранен в {profile_file}")
                                                                               ^
security/ai_agents/elderly_interface_manager.py:435:80: E501 line too long (91 > 79 characters)
                # Простое шифрование для демонстрации (в реальной системе использовать AES)
                                                                               ^
security/ai_agents/elderly_interface_manager.py:442:80: E501 line too long (88 > 79 characters)
                    if key in ['phone', 'email', 'medical_info']:  # Чувствительные поля
                                                                               ^
security/ai_agents/elderly_interface_manager.py:443:80: E501 line too long (80 > 79 characters)
                        encrypted[key] = self.encrypt_sensitive_data(str(value))
                                                                               ^
security/ai_agents/elderly_interface_manager.py:452:80: E501 line too long (89 > 79 characters)
    def protect_privacy_data(self, user_id: str, data: Dict[str, Any]) -> Dict[str, Any]:
                                                                               ^
security/ai_agents/elderly_interface_manager.py:459:80: E501 line too long (83 > 79 characters)
            self.logger.info(f"Защита приватных данных для пользователя {user_id}")
                                                                               ^
security/ai_agents/elderly_interface_manager.py:469:80: E501 line too long (84 > 79 characters)
            required_fields = ['data_sharing', 'location_tracking', 'family_access']
                                                                               ^
security/ai_agents/elderly_interface_manager.py:472:80: E501 line too long (86 > 79 characters)
                    self.logger.warning(f"Отсутствует настройка приватности: {field}")
                                                                               ^
security/ai_agents/elderly_interface_manager.py:481:80: E501 line too long (81 > 79 characters)
    def authenticate_data_source(self, source_id: str, source_type: str) -> bool:
                                                                               ^
security/ai_agents/elderly_interface_manager.py:491:80: E501 line too long (92 > 79 characters)
            if source_type in trusted_sources and source_id in trusted_sources[source_type]:
                                                                               ^
security/ai_agents/elderly_interface_manager.py:492:80: E501 line too long (90 > 79 characters)
                self.logger.info(f"Источник {source_id} ({source_type}) аутентифицирован")
                                                                               ^
security/ai_agents/elderly_interface_manager.py:495:80: E501 line too long (96 > 79 characters)
                self.logger.warning(f"Неизвестный источник данных: {source_id} ({source_type})")
                                                                               ^
security/ai_agents/elderly_interface_manager.py:509:80: E501 line too long (85 > 79 characters)
                self.logger.info(f"Профиль пользователя {user_id} загружен из файла")
                                                                               ^
security/ai_agents/elderly_interface_manager.py:518:80: E501 line too long (81 > 79 characters)
    def update_user_profile(self, user_id: str, updates: Dict[str, Any]) -> bool:
                                                                               ^
security/ai_agents/elderly_interface_manager.py:524:80: E501 line too long (93 > 79 characters)
                self.logger.error(f"Профиль пользователя {user_id} не найден для обновления")
                                                                               ^
security/ai_agents/elderly_interface_manager.py:534:80: E501 line too long (84 > 79 characters)
                self.logger.info(f"Профиль пользователя {user_id} обновлен успешно")
                                                                               ^
security/ai_agents/elderly_interface_manager.py:537:80: E501 line too long (86 > 79 characters)
                self.logger.error(f"Ошибка сохранения обновленного профиля {user_id}")
                                                                               ^
security/ai_agents/elderly_interface_manager.py:556:80: E501 line too long (89 > 79 characters)
                "accessibility_features": len(profile.get("accessibility_features", {})),
                                                                               ^
security/ai_agents/elderly_interface_manager.py:557:80: E501 line too long (105 > 79 characters)
                "family_contacts": len(profile.get("family_integration", {}).get("family_contacts", [])),
                                                                               ^
security/ai_agents/elderly_interface_manager.py:572:80: E501 line too long (81 > 79 characters)
            if user_id in self.user_profiles and self.user_profiles[user_id].get(
                                                                               ^
security/ai_agents/elderly_interface_manager.py:584:80: E501 line too long (81 > 79 characters)
            if user_id in self.user_profiles and self.user_profiles[user_id].get(
                                                                               ^
security/ai_agents/elderly_interface_manager.py:585:80: E501 line too long (80 > 79 characters)
                    "emergency_systems", {}).get("panic_button_enabled", False):
                                                                               ^
security/ai_agents/elderly_interface_manager.py:586:80: E501 line too long (89 > 79 characters)
                self.logger.critical(f"Обработана экстренная ситуация: {emergency_type}")
                                                                               ^
security/ai_agents/elderly_interface_manager.py:587:80: E501 line too long (96 > 79 characters)
                self.send_family_notification(user_id, f"ЭКСТРЕННАЯ СИТУАЦИЯ: {emergency_type}")
                                                                               ^
security/ai_agents/elderly_interface_manager.py:594:80: E501 line too long (94 > 79 characters)
    def generate_interface_template(self, age_category: ElderlyAgeCategory) -> Dict[str, Any]:
                                                                               ^
security/ai_agents/elderly_interface_manager.py:621:80: E501 line too long (96 > 79 characters)
            template = templates.get(age_category, templates[ElderlyAgeCategory.MIDDLE_ELDERLY])
                                                                               ^
security/ai_agents/elderly_interface_manager.py:622:80: E501 line too long (88 > 79 characters)
            self.logger.info(f"Сгенерирован шаблон интерфейса для {age_category.value}")
                                                                               ^
security/ai_agents/elderly_interface_manager.py:629:80: E501 line too long (106 > 79 characters)
                            preferences: Optional[Dict[str, Any]] = None) -> Optional[ElderlyUserProfile]:
                                                                               ^
security/ai_agents/elderly_interface_manager.py:633:80: E501 line too long (85 > 79 characters)
            interface_complexity = self._determine_interface_complexity(age_category)
                                                                               ^
security/ai_agents/elderly_interface_manager.py:634:80: E501 line too long (83 > 79 characters)
            accessibility_level = self._determine_accessibility_level(age_category)
                                                                               ^
security/ai_agents/elderly_interface_manager.py:646:80: E501 line too long (116 > 79 characters)
            self.logger.info(f"Создан профиль пользователя {user_id} для возрастной категории {age_category.value}")
                                                                               ^
security/ai_agents/elderly_interface_manager.py:652:80: E501 line too long (102 > 79 characters)
    def generate_interface_settings(self, profile: ElderlyUserProfile) -> Optional[InterfaceSettings]:
                                                                               ^
security/ai_agents/elderly_interface_manager.py:657:80: E501 line too long (90 > 79 characters)
                    font_size=18, button_size=48, contrast_ratio=5.0, animation_speed=1.0,
                                                                               ^
security/ai_agents/elderly_interface_manager.py:658:80: E501 line too long (97 > 79 characters)
                    voice_enabled=True, voice_speed=1.0, voice_volume=1.0, color_scheme='modern',
                                                                               ^
security/ai_agents/elderly_interface_manager.py:663:80: E501 line too long (90 > 79 characters)
                    font_size=20, button_size=56, contrast_ratio=7.0, animation_speed=0.5,
                                                                               ^
security/ai_agents/elderly_interface_manager.py:664:80: E501 line too long (102 > 79 characters)
                    voice_enabled=True, voice_speed=0.8, voice_volume=0.8, color_scheme='traditional',
                                                                               ^
security/ai_agents/elderly_interface_manager.py:669:80: E501 line too long (90 > 79 characters)
                    font_size=24, button_size=64, contrast_ratio=9.0, animation_speed=0.2,
                                                                               ^
security/ai_agents/elderly_interface_manager.py:670:80: E501 line too long (101 > 79 characters)
                    voice_enabled=True, voice_speed=0.6, voice_volume=0.9, color_scheme='simplified',
                                                                               ^
security/ai_agents/elderly_interface_manager.py:673:80: E501 line too long (90 > 79 characters)
            return InterfaceSettings(18, 48, 5.0, 1.0, True, 1.0, 1.0, 'standard', 28, 12)
                                                                               ^
security/ai_agents/elderly_interface_manager.py:678:80: E501 line too long (85 > 79 characters)
    def generate_voice_commands(self, age_category: ElderlyAgeCategory) -> List[str]:
                                                                               ^
security/ai_agents/elderly_interface_manager.py:683:80: E501 line too long (94 > 79 characters)
                return base_commands + ["Показать новости", "Открыть галерею", "Найти рецепт"]
                                                                               ^
security/ai_agents/elderly_interface_manager.py:685:80: E501 line too long (107 > 79 characters)
                return base_commands + ["Позвонить семье", "Показать инструкции", "Повторить", "Медленнее"]
                                                                               ^
security/ai_agents/elderly_interface_manager.py:687:80: E501 line too long (103 > 79 characters)
                return base_commands + ["Позвонить семье", "Помощь", "Где я?", "Что это?", "Объяснить"]
                                                                               ^
security/ai_agents/elderly_interface_manager.py:693:80: E501 line too long (96 > 79 characters)
    def create_learning_modules(self, age_category: ElderlyAgeCategory) -> List[Dict[str, Any]]:
                                                                               ^
security/ai_agents/elderly_interface_manager.py:698:80: E501 line too long (106 > 79 characters)
                    {"name": "Продвинутая безопасность онлайн", "duration": 30, "difficulty": "advanced"},
                                                                               ^
security/ai_agents/elderly_interface_manager.py:699:80: E501 line too long (99 > 79 characters)
                    {"name": "Управление финансами", "duration": 25, "difficulty": "intermediate"},
                                                                               ^
security/ai_agents/elderly_interface_manager.py:700:80: E501 line too long (93 > 79 characters)
                    {"name": "Социальные сети", "duration": 20, "difficulty": "intermediate"}
                                                                               ^
security/ai_agents/elderly_interface_manager.py:704:80: E501 line too long (100 > 79 characters)
                    {"name": "Простые шаги безопасности", "duration": 15, "difficulty": "beginner"},
                                                                               ^
security/ai_agents/elderly_interface_manager.py:705:80: E501 line too long (99 > 79 characters)
                    {"name": "Безопасность в интернете", "duration": 20, "difficulty": "beginner"},
                                                                               ^
security/ai_agents/elderly_interface_manager.py:706:80: E501 line too long (88 > 79 characters)
                    {"name": "Связь с семьей", "duration": 25, "difficulty": "beginner"}
                                                                               ^
security/ai_agents/elderly_interface_manager.py:710:80: E501 line too long (103 > 79 characters)
                    {"name": "Как пользоваться кнопкой помощи", "duration": 10, "difficulty": "basic"},
                                                                               ^
security/ai_agents/elderly_interface_manager.py:711:80: E501 line too long (86 > 79 characters)
                    {"name": "Основы общения", "duration": 15, "difficulty": "basic"},
                                                                               ^
security/ai_agents/elderly_interface_manager.py:712:80: E501 line too long (83 > 79 characters)
                    {"name": "Простые игры", "duration": 20, "difficulty": "basic"}
                                                                               ^
security/ai_agents/elderly_interface_manager.py:724:80: E501 line too long (81 > 79 characters)
                "age_distribution": {cat.value: 0 for cat in ElderlyAgeCategory},
                                                                               ^
security/ai_agents/elderly_interface_manager.py:741:80: E501 line too long (101 > 79 characters)
            return {cat.value: self.age_categories[cat]["description"] for cat in ElderlyAgeCategory}
                                                                               ^
security/ai_agents/elderly_interface_manager.py:771:80: E501 line too long (84 > 79 characters)
            return self.classify_age_group(age) or ElderlyAgeCategory.MIDDLE_ELDERLY
                                                                               ^
security/ai_agents/elderly_interface_manager.py:776:80: E501 line too long (103 > 79 characters)
    def _determine_interface_complexity(self, age_category: ElderlyAgeCategory) -> InterfaceComplexity:
                                                                               ^
security/ai_agents/elderly_interface_manager.py:790:80: E501 line too long (101 > 79 characters)
    def _determine_accessibility_level(self, age_category: ElderlyAgeCategory) -> AccessibilityLevel:
                                                                               ^
security/ai_agents/elderly_interface_manager.py:821:80: E501 line too long (90 > 79 characters)
    print(f"✅ Создан профиль для возрастной категории: {test_profile.age_category.value}")
                                                                               ^
security/ai_agents/elderly_interface_manager.py:822:80: E501 line too long (89 > 79 characters)
    print(f"✅ Настройки интерфейса: {manager.generate_interface_settings(test_profile)}")
                                                                               ^
security/ai_agents/elderly_interface_manager.py:823:80: E501 line too long (95 > 79 characters)
    print(f"✅ Голосовые команды: {manager.generate_voice_commands(test_profile.age_category)}")
                                                                               ^
security/ai_agents/elderly_interface_manager.py:824:80: E501 line too long (99 > 79 characters)
    print(f"✅ Обучающие модули: {len(manager.create_learning_modules(test_profile.age_category))}")
                                                                               ^
security/ai_agents/elderly_interface_manager_backup.py:12:1: F401 'time' imported but unused
import time
^
security/ai_agents/elderly_interface_manager_backup.py:16:1: F401 'typing.Optional' imported but unused
from typing import Dict, List, Optional, Any, Tuple
^
security/ai_agents/elderly_interface_manager_backup.py:16:1: F401 'typing.Tuple' imported but unused
from typing import Dict, List, Optional, Any, Tuple
^
security/ai_agents/elderly_interface_manager_backup.py:19:1: E302 expected 2 blank lines, found 1
class ComponentStatus(Enum):
^
security/ai_agents/elderly_interface_manager_backup.py:26:1: E302 expected 2 blank lines, found 1
class ElderlyAgeCategory(Enum):
^
security/ai_agents/elderly_interface_manager_backup.py:32:1: E302 expected 2 blank lines, found 1
class InterfaceComplexity(Enum):
^
security/ai_agents/elderly_interface_manager_backup.py:38:1: E302 expected 2 blank lines, found 1
class AccessibilityLevel(Enum):
^
security/ai_agents/elderly_interface_manager_backup.py:44:1: E302 expected 2 blank lines, found 1
@dataclass
^
security/ai_agents/elderly_interface_manager_backup.py:58:1: E302 expected 2 blank lines, found 1
@dataclass
^
security/ai_agents/elderly_interface_manager_backup.py:72:1: E302 expected 2 blank lines, found 1
class ElderlyInterfaceManager:
^
security/ai_agents/elderly_interface_manager_backup.py:74:1: W293 blank line contains whitespace
    
^
security/ai_agents/elderly_interface_manager_backup.py:80:1: W293 blank line contains whitespace
        
^
security/ai_agents/elderly_interface_manager_backup.py:83:1: W293 blank line contains whitespace
        
^
security/ai_agents/elderly_interface_manager_backup.py:90:80: E501 line too long (92 > 79 characters)
                "features": ["современный_дизайн", "быстрые_действия", "социальные_функции"]
                                                                               ^
security/ai_agents/elderly_interface_manager_backup.py:97:80: E501 line too long (96 > 79 characters)
                "features": ["пошаговые_инструкции", "семейная_поддержка", "медленные_переходы"]
                                                                               ^
security/ai_agents/elderly_interface_manager_backup.py:104:80: E501 line too long (91 > 79 characters)
                "features": ["крупные_кнопки", "голосовое_управление", "экстренная_помощь"]
                                                                               ^
security/ai_agents/elderly_interface_manager_backup.py:107:1: W293 blank line contains whitespace
        
^
security/ai_agents/elderly_interface_manager_backup.py:113:1: W293 blank line contains whitespace
        
^
security/ai_agents/elderly_interface_manager_backup.py:115:1: W293 blank line contains whitespace
        
^
security/ai_agents/elderly_interface_manager_backup.py:118:1: W293 blank line contains whitespace
    
^
security/ai_agents/elderly_interface_manager_backup.py:123:1: W293 blank line contains whitespace
        
^
security/ai_agents/elderly_interface_manager_backup.py:124:80: E501 line too long (102 > 79 characters)
        log_file = os.path.join(log_dir, f"elderly_interface_{datetime.now().strftime('%Y%m%d')}.log")
                                                                               ^
security/ai_agents/elderly_interface_manager_backup.py:125:1: W293 blank line contains whitespace
        
^
security/ai_agents/elderly_interface_manager_backup.py:129:80: E501 line too long (95 > 79 characters)
            handlers=[logging.FileHandler(log_file, encoding='utf-8'), logging.StreamHandler()]
                                                                               ^
security/ai_agents/elderly_interface_manager_backup.py:131:1: W293 blank line contains whitespace
        
^
security/ai_agents/elderly_interface_manager_backup.py:133:1: W293 blank line contains whitespace
    
^
security/ai_agents/elderly_interface_manager_backup.py:159:1: W293 blank line contains whitespace
    
^
security/ai_agents/elderly_interface_manager_backup.py:188:1: W293 blank line contains whitespace
    
^
security/ai_agents/elderly_interface_manager_backup.py:200:1: W293 blank line contains whitespace
    
^
security/ai_agents/elderly_interface_manager_backup.py:212:1: W293 blank line contains whitespace
    
^
security/ai_agents/elderly_interface_manager_backup.py:219:80: E501 line too long (81 > 79 characters)
                "features": ["typing_speed", "interaction_pattern", "error_rate"]
                                                                               ^
security/ai_agents/elderly_interface_manager_backup.py:224:80: E501 line too long (86 > 79 characters)
                "features": ["usage_pattern", "error_frequency", "preference_history"]
                                                                               ^
security/ai_agents/elderly_interface_manager_backup.py:229:80: E501 line too long (89 > 79 characters)
                "features": ["behavior_analysis", "risk_assessment", "anomaly_detection"]
                                                                               ^
security/ai_agents/elderly_interface_manager_backup.py:234:80: E501 line too long (95 > 79 characters)
                "features": ["communication_pattern", "family_dynamics", "preference_matching"]
                                                                               ^
security/ai_agents/elderly_interface_manager_backup.py:237:1: W293 blank line contains whitespace
    
^
security/ai_agents/elderly_interface_manager_backup.py:246:1: W293 blank line contains whitespace
    
^
security/ai_agents/elderly_interface_manager_backup.py:247:80: E501 line too long (109 > 79 characters)
    def create_user_profile(self, user_id: str, age: int, preferences: Dict[str, Any]) -> ElderlyUserProfile:
                                                                               ^
security/ai_agents/elderly_interface_manager_backup.py:250:1: W293 blank line contains whitespace
        
^
security/ai_agents/elderly_interface_manager_backup.py:255:80: E501 line too long (81 > 79 characters)
            interface_complexity=self.age_categories[age_category]["complexity"],
                                                                               ^
security/ai_agents/elderly_interface_manager_backup.py:256:80: E501 line too long (83 > 79 characters)
            accessibility_level=self.age_categories[age_category]["accessibility"],
                                                                               ^
security/ai_agents/elderly_interface_manager_backup.py:263:1: W293 blank line contains whitespace
        
^
security/ai_agents/elderly_interface_manager_backup.py:264:80: E501 line too long (112 > 79 characters)
        self.logger.info(f"Создан профиль пользователя {user_id} для возрастной категории {age_category.value}")
                                                                               ^
security/ai_agents/elderly_interface_manager_backup.py:266:1: W293 blank line contains whitespace
    
^
security/ai_agents/elderly_interface_manager_backup.py:267:80: E501 line too long (92 > 79 characters)
    def generate_interface_settings(self, profile: ElderlyUserProfile) -> InterfaceSettings:
                                                                               ^
security/ai_agents/elderly_interface_manager_backup.py:270:1: W293 blank line contains whitespace
        
^
security/ai_agents/elderly_interface_manager_backup.py:273:80: E501 line too long (86 > 79 characters)
                font_size=16, button_size=44, contrast_ratio=4.5, animation_speed=0.3,
                                                                               ^
security/ai_agents/elderly_interface_manager_backup.py:279:80: E501 line too long (86 > 79 characters)
                font_size=20, button_size=56, contrast_ratio=7.0, animation_speed=0.5,
                                                                               ^
security/ai_agents/elderly_interface_manager_backup.py:285:80: E501 line too long (87 > 79 characters)
                font_size=24, button_size=72, contrast_ratio=10.0, animation_speed=0.8,
                                                                               ^
security/ai_agents/elderly_interface_manager_backup.py:289:1: W293 blank line contains whitespace
    
^
security/ai_agents/elderly_interface_manager_backup.py:290:80: E501 line too long (89 > 79 characters)
    def get_interface_template(self, age_category: ElderlyAgeCategory) -> Dict[str, Any]:
                                                                               ^
security/ai_agents/elderly_interface_manager_backup.py:298:1: W293 blank line contains whitespace
    
^
security/ai_agents/elderly_interface_manager_backup.py:299:80: E501 line too long (85 > 79 characters)
    def generate_voice_commands(self, age_category: ElderlyAgeCategory) -> List[str]:
                                                                               ^
security/ai_agents/elderly_interface_manager_backup.py:301:80: E501 line too long (89 > 79 characters)
        base_commands = ["Помощь", "Закрыть", "Назад", "Главное меню", "Позвонить семье"]
                                                                               ^
security/ai_agents/elderly_interface_manager_backup.py:302:1: W293 blank line contains whitespace
        
^
security/ai_agents/elderly_interface_manager_backup.py:304:80: E501 line too long (112 > 79 characters)
            return base_commands + ["Отправить сообщение", "Поделиться фото", "Показать календарь", "Настройки"]
                                                                               ^
security/ai_agents/elderly_interface_manager_backup.py:306:80: E501 line too long (97 > 79 characters)
            return base_commands + ["Показать инструкции", "Повторить", "Медленнее", "Объяснить"]
                                                                               ^
security/ai_agents/elderly_interface_manager_backup.py:308:80: E501 line too long (94 > 79 characters)
            return base_commands + ["Экстренная помощь", "Позвонить врачу", "Громче", "Проще"]
                                                                               ^
security/ai_agents/elderly_interface_manager_backup.py:309:1: W293 blank line contains whitespace
    
^
security/ai_agents/elderly_interface_manager_backup.py:310:80: E501 line too long (86 > 79 characters)
    def setup_family_integration(self, profile: ElderlyUserProfile) -> Dict[str, Any]:
                                                                               ^
security/ai_agents/elderly_interface_manager_backup.py:322:80: E501 line too long (99 > 79 characters)
            "communication_channels": ["voice_call", "video_call", "text_message", "photo_sharing"]
                                                                               ^
security/ai_agents/elderly_interface_manager_backup.py:324:1: W293 blank line contains whitespace
        
^
security/ai_agents/elderly_interface_manager_backup.py:326:80: E501 line too long (93 > 79 characters)
        self.logger.info(f"Настроена семейная интеграция для пользователя {profile.user_id}")
                                                                               ^
security/ai_agents/elderly_interface_manager_backup.py:328:1: W293 blank line contains whitespace
    
^
security/ai_agents/elderly_interface_manager_backup.py:329:80: E501 line too long (85 > 79 characters)
    def setup_emergency_systems(self, profile: ElderlyUserProfile) -> Dict[str, Any]:
                                                                               ^
security/ai_agents/elderly_interface_manager_backup.py:332:80: E501 line too long (127 > 79 characters)
            "panic_button": {"enabled": True, "auto_call_family": True, "auto_call_emergency": True, "location_sharing": True},
                                                                               ^
security/ai_agents/elderly_interface_manager_backup.py:333:80: E501 line too long (179 > 79 characters)
            "fall_detection": {"enabled": profile.age_category == ElderlyAgeCategory.SENIOR_ELDERLY, "sensitivity": "high" if profile.age >= 80 else "medium", "auto_alert": True},
                                                                               ^
security/ai_agents/elderly_interface_manager_backup.py:334:80: E501 line too long (233 > 79 characters)
            "medical_alert": {"enabled": True, "medical_conditions": profile.preferences.get("medical_conditions", []), "medications": profile.preferences.get("medications", []), "allergies": profile.preferences.get("allergies", [])}
                                                                               ^
security/ai_agents/elderly_interface_manager_backup.py:336:1: W293 blank line contains whitespace
        
^
security/ai_agents/elderly_interface_manager_backup.py:338:80: E501 line too long (92 > 79 characters)
        self.logger.info(f"Настроены экстренные системы для пользователя {profile.user_id}")
                                                                               ^
security/ai_agents/elderly_interface_manager_backup.py:340:1: W293 blank line contains whitespace
    
^
security/ai_agents/elderly_interface_manager_backup.py:341:80: E501 line too long (93 > 79 characters)
    def generate_accessibility_features(self, profile: ElderlyUserProfile) -> Dict[str, Any]:
                                                                               ^
security/ai_agents/elderly_interface_manager_backup.py:344:80: E501 line too long (181 > 79 characters)
            "visual": {"font_size": "large" if profile.age >= 75 else "medium", "high_contrast": profile.age >= 70, "color_blind_support": True, "screen_reader": profile.age >= 80},
                                                                               ^
security/ai_agents/elderly_interface_manager_backup.py:345:80: E501 line too long (180 > 79 characters)
            "motor": {"large_touch_targets": profile.age >= 70, "gesture_alternatives": profile.age >= 75, "voice_control": profile.age >= 75, "switch_control": profile.age >= 80},
                                                                               ^
security/ai_agents/elderly_interface_manager_backup.py:346:80: E501 line too long (158 > 79 characters)
            "cognitive": {"simple_language": profile.age >= 70, "step_by_step": profile.age >= 75, "memory_aids": profile.age >= 80, "error_prevention": True}
                                                                               ^
security/ai_agents/elderly_interface_manager_backup.py:349:1: W293 blank line contains whitespace
    
^
security/ai_agents/elderly_interface_manager_backup.py:350:80: E501 line too long (96 > 79 characters)
    def create_learning_modules(self, age_category: ElderlyAgeCategory) -> List[Dict[str, Any]]:
                                                                               ^
security/ai_agents/elderly_interface_manager_backup.py:353:80: E501 line too long (335 > 79 characters)
            return [{"title": "Основы безопасности", "duration": "10 минут", "type": "interactive", "difficulty": "beginner"}, {"title": "Семейное общение", "duration": "15 минут", "type": "tutorial", "difficulty": "intermediate"}, {"title": "Продвинутые функции", "duration": "20 минут", "type": "hands_on", "difficulty": "advanced"}]
                                                                               ^
security/ai_agents/elderly_interface_manager_backup.py:355:80: E501 line too long (331 > 79 characters)
            return [{"title": "Простые шаги", "duration": "15 минут", "type": "step_by_step", "difficulty": "beginner"}, {"title": "Безопасность в интернете", "duration": "20 минут", "type": "guided", "difficulty": "beginner"}, {"title": "Связь с семьей", "duration": "25 минут", "type": "practical", "difficulty": "intermediate"}]
                                                                               ^
security/ai_agents/elderly_interface_manager_backup.py:357:80: E501 line too long (317 > 79 characters)
            return [{"title": "Основы", "duration": "20 минут", "type": "voice_guided", "difficulty": "beginner"}, {"title": "Экстренная помощь", "duration": "15 минут", "type": "repetitive", "difficulty": "beginner"}, {"title": "Семейная связь", "duration": "30 минут", "type": "assisted", "difficulty": "beginner"}]
                                                                               ^
security/ai_agents/elderly_interface_manager_backup.py:358:1: W293 blank line contains whitespace
    
^
security/ai_agents/elderly_interface_manager_backup.py:359:80: E501 line too long (114 > 79 characters)
    def monitor_user_behavior(self, profile: ElderlyUserProfile, behavior_data: Dict[str, Any]) -> Dict[str, Any]:
                                                                               ^
security/ai_agents/elderly_interface_manager_backup.py:370:1: W293 blank line contains whitespace
        
^
security/ai_agents/elderly_interface_manager_backup.py:374:1: W293 blank line contains whitespace
        
^
security/ai_agents/elderly_interface_manager_backup.py:378:1: W293 blank line contains whitespace
        
^
security/ai_agents/elderly_interface_manager_backup.py:380:80: E501 line too long (84 > 79 characters)
            analysis["accessibility_needs"].append("расширить_голосовое_управление")
                                                                               ^
security/ai_agents/elderly_interface_manager_backup.py:381:80: E501 line too long (82 > 79 characters)
            analysis["recommendations"].append("Добавить больше голосовых команд")
                                                                               ^
security/ai_agents/elderly_interface_manager_backup.py:382:1: W293 blank line contains whitespace
        
^
security/ai_agents/elderly_interface_manager_backup.py:383:80: E501 line too long (86 > 79 characters)
        self.logger.info(f"Проанализировано поведение пользователя {profile.user_id}")
                                                                               ^
security/ai_agents/elderly_interface_manager_backup.py:385:1: W293 blank line contains whitespace
    
^
security/ai_agents/elderly_interface_manager_backup.py:386:80: E501 line too long (115 > 79 characters)
    def send_family_notification(self, profile: ElderlyUserProfile, message: str, urgency: str = "normal") -> bool:
                                                                               ^
security/ai_agents/elderly_interface_manager_backup.py:389:13: F841 local variable 'notification' is assigned to but never used
            notification = {"user_id": profile.user_id, "message": message, "urgency": urgency, "timestamp": datetime.now(), "family_contacts": profile.family_contacts}
            ^
security/ai_agents/elderly_interface_manager_backup.py:389:80: E501 line too long (168 > 79 characters)
            notification = {"user_id": profile.user_id, "message": message, "urgency": urgency, "timestamp": datetime.now(), "family_contacts": profile.family_contacts}
                                                                               ^
security/ai_agents/elderly_interface_manager_backup.py:395:1: W293 blank line contains whitespace
    
^
security/ai_agents/elderly_interface_manager_backup.py:396:80: E501 line too long (89 > 79 characters)
    def handle_emergency(self, profile: ElderlyUserProfile, emergency_type: str) -> bool:
                                                                               ^
security/ai_agents/elderly_interface_manager_backup.py:399:13: F841 local variable 'emergency_data' is assigned to but never used
            emergency_data = {"user_id": profile.user_id, "emergency_type": emergency_type, "timestamp": datetime.now(), "location": "current_location", "contacts_notified": profile.emergency_contacts}
            ^
security/ai_agents/elderly_interface_manager_backup.py:399:80: E501 line too long (201 > 79 characters)
            emergency_data = {"user_id": profile.user_id, "emergency_type": emergency_type, "timestamp": datetime.now(), "location": "current_location", "contacts_notified": profile.emergency_contacts}
                                                                               ^
security/ai_agents/elderly_interface_manager_backup.py:400:80: E501 line too long (102 > 79 characters)
            self.send_family_notification(profile, f"ЭКСТРЕННАЯ СИТУАЦИЯ: {emergency_type}", "urgent")
                                                                               ^
security/ai_agents/elderly_interface_manager_backup.py:401:80: E501 line too long (85 > 79 characters)
            self.logger.critical(f"Обработана экстренная ситуация: {emergency_type}")
                                                                               ^
security/ai_agents/elderly_interface_manager_backup.py:406:1: W293 blank line contains whitespace
    
^
security/ai_agents/elderly_interface_manager_backup.py:410:80: E501 line too long (83 > 79 characters)
            "total_users": len(self.family_integration.get("family_contacts", [])),
                                                                               ^
security/ai_agents/elderly_interface_manager_backup.py:412:80: E501 line too long (122 > 79 characters)
            "accessibility_usage": {"voice_control": 0.0, "large_fonts": 0.0, "high_contrast": 0.0, "screen_reader": 0.0},
                                                                               ^
security/ai_agents/elderly_interface_manager_backup.py:416:1: W293 blank line contains whitespace
    
^
security/ai_agents/elderly_interface_manager_backup.py:422:21: F841 local variable 'config' is assigned to but never used
                    config = json.load(f)
                    ^
security/ai_agents/elderly_interface_manager_backup.py:425:80: E501 line too long (96 > 79 characters)
                self.logger.info("Конфигурация не найдена, используются настройки по умолчанию")
                                                                               ^
security/ai_agents/elderly_interface_manager_backup.py:429:1: E305 expected 2 blank lines after class or function definition, found 1
if __name__ == "__main__":
^
security/ai_agents/elderly_interface_manager_backup.py:432:1: W293 blank line contains whitespace
    
^
security/ai_agents/elderly_interface_manager_backup.py:444:1: W293 blank line contains whitespace
    
^
security/ai_agents/elderly_interface_manager_backup.py:445:80: E501 line too long (90 > 79 characters)
    print(f"✅ Создан профиль для возрастной категории: {test_profile.age_category.value}")
                                                                               ^
security/ai_agents/elderly_interface_manager_backup.py:446:80: E501 line too long (89 > 79 characters)
    print(f"✅ Настройки интерфейса: {manager.generate_interface_settings(test_profile)}")
                                                                               ^
security/ai_agents/elderly_interface_manager_backup.py:447:80: E501 line too long (95 > 79 characters)
    print(f"✅ Голосовые команды: {manager.generate_voice_commands(test_profile.age_category)}")
                                                                               ^
security/ai_agents/elderly_interface_manager_backup.py:448:80: E501 line too long (99 > 79 characters)
    print(f"✅ Обучающие модули: {len(manager.create_learning_modules(test_profile.age_category))}")
                                                                               ^
security/ai_agents/elderly_protection_interface.py:30:1: F401 'time' imported but unused
import time
^
security/ai_agents/elderly_protection_interface.py:32:1: F401 'json' imported but unused
import json
^
security/ai_agents/elderly_protection_interface.py:36:1: F401 'datetime.timedelta' imported but unused
from datetime import datetime, timedelta
^
security/ai_agents/elderly_protection_interface.py:37:1: F401 'hashlib' imported but unused
import hashlib
^
security/ai_agents/elderly_protection_interface.py:118:1: W293 blank line contains whitespace
    
^
security/ai_agents/elderly_protection_interface.py:121:80: E501 line too long (97 > 79 characters)
        self.logger = logging.getLogger(f"{self.__class__.__module__}.{self.__class__.__name__}")
                                                                               ^
security/ai_agents/elderly_protection_interface.py:122:1: W293 blank line contains whitespace
        
^
security/ai_agents/elderly_protection_interface.py:125:1: W293 blank line contains whitespace
        
^
security/ai_agents/elderly_protection_interface.py:128:1: W293 blank line contains whitespace
        
^
security/ai_agents/elderly_protection_interface.py:131:1: W293 blank line contains whitespace
        
^
security/ai_agents/elderly_protection_interface.py:137:1: W293 blank line contains whitespace
        
^
security/ai_agents/elderly_protection_interface.py:143:1: W293 blank line contains whitespace
        
^
security/ai_agents/elderly_protection_interface.py:153:80: E501 line too long (237 > 79 characters)
                content="Телефонные мошенники часто представляются сотрудниками банков, ФСБ, прокуратуры. Они просят срочно перевести деньги или сообщить данные карты. Помните: настоящие сотрудники никогда не просят деньги по телефону!",
                                                                               ^
security/ai_agents/elderly_protection_interface.py:162:80: E501 line too long (185 > 79 characters)
                content="Мошенники могут использовать поддельные видео с лицами ваших знакомых. Если кто-то звонит по видео и просит деньги, всегда проверьте через другой канал связи!",
                                                                               ^
security/ai_agents/elderly_protection_interface.py:171:80: E501 line too long (145 > 79 characters)
                content="Никогда не переводите деньги незнакомым людям. Всегда проверяйте получателя. При сомнениях - звоните семье или в банк!",
                                                                               ^
security/ai_agents/elderly_protection_interface.py:180:80: E501 line too long (173 > 79 characters)
                content="Если вы подозреваете мошенничество, нажмите кнопку 'Экстренная помощь' или скажите 'Экстренная помощь'. Система автоматически уведомит вашу семью!",
                                                                               ^
security/ai_agents/elderly_protection_interface.py:243:14: W291 trailing whitespace
        self, 
             ^
security/ai_agents/elderly_protection_interface.py:244:22: W291 trailing whitespace
        user_id: str, 
                     ^
security/ai_agents/elderly_protection_interface.py:245:19: W291 trailing whitespace
        name: str, 
                  ^
security/ai_agents/elderly_protection_interface.py:251:1: W293 blank line contains whitespace
        """
        Создание профиля пользователя
        
        Args:
            user_id: ID пользователя
            name: Имя пользователя
            age: Возраст
            tech_level: Уровень технических навыков
            
        Returns:
            UserProfile: Профиль пользователя
        """
^
security/ai_agents/elderly_protection_interface.py:257:1: W293 blank line contains whitespace
        """
        Создание профиля пользователя
        
        Args:
            user_id: ID пользователя
            name: Имя пользователя
            age: Возраст
            tech_level: Уровень технических навыков
            
        Returns:
            UserProfile: Профиль пользователя
        """
^
security/ai_agents/elderly_protection_interface.py:263:1: W293 blank line contains whitespace
            
^
security/ai_agents/elderly_protection_interface.py:274:1: W293 blank line contains whitespace
            
^
security/ai_agents/elderly_protection_interface.py:289:1: W293 blank line contains whitespace
            
^
security/ai_agents/elderly_protection_interface.py:292:1: W293 blank line contains whitespace
            
^
security/ai_agents/elderly_protection_interface.py:295:1: W293 blank line contains whitespace
            
^
security/ai_agents/elderly_protection_interface.py:303:1: W293 blank line contains whitespace
        """
        Получение интерфейса для пользователя
        
        Args:
            user_id: ID пользователя
            
        Returns:
            Dict[str, Any]: Настройки интерфейса
        """
^
security/ai_agents/elderly_protection_interface.py:306:1: W293 blank line contains whitespace
        """
        Получение интерфейса для пользователя
        
        Args:
            user_id: ID пользователя
            
        Returns:
            Dict[str, Any]: Настройки интерфейса
        """
^
security/ai_agents/elderly_protection_interface.py:313:1: W293 blank line contains whitespace
            
^
security/ai_agents/elderly_protection_interface.py:315:1: W293 blank line contains whitespace
            
^
security/ai_agents/elderly_protection_interface.py:327:1: W293 blank line contains whitespace
            
^
security/ai_agents/elderly_protection_interface.py:329:1: W293 blank line contains whitespace
            
^
security/ai_agents/elderly_protection_interface.py:343:80: E501 line too long (83 > 79 characters)
    def _get_elements_for_user(self, profile: UserProfile) -> List[Dict[str, Any]]:
                                                                               ^
security/ai_agents/elderly_protection_interface.py:346:1: W293 blank line contains whitespace
        
^
security/ai_agents/elderly_protection_interface.py:355:1: W293 blank line contains whitespace
            
^
security/ai_agents/elderly_protection_interface.py:367:1: W293 blank line contains whitespace
        
^
security/ai_agents/elderly_protection_interface.py:370:80: E501 line too long (89 > 79 characters)
    def _get_voice_commands_for_user(self, profile: UserProfile) -> List[Dict[str, Any]]:
                                                                               ^
security/ai_agents/elderly_protection_interface.py:374:1: W293 blank line contains whitespace
        
^
security/ai_agents/elderly_protection_interface.py:382:1: W293 blank line contains whitespace
        
^
security/ai_agents/elderly_protection_interface.py:409:80: E501 line too long (82 > 79 characters)
    def _get_lessons_for_user(self, profile: UserProfile) -> List[Dict[str, Any]]:
                                                                               ^
security/ai_agents/elderly_protection_interface.py:413:1: W293 blank line contains whitespace
        
^
security/ai_agents/elderly_protection_interface.py:417:80: E501 line too long (84 > 79 characters)
            if profile.tech_level == "beginner" and lesson.difficulty != "beginner":
                                                                               ^
security/ai_agents/elderly_protection_interface.py:419:80: E501 line too long (90 > 79 characters)
            elif profile.tech_level == "intermediate" and lesson.difficulty == "advanced":
                                                                               ^
security/ai_agents/elderly_protection_interface.py:421:1: W293 blank line contains whitespace
            
^
security/ai_agents/elderly_protection_interface.py:430:1: W293 blank line contains whitespace
        
^
security/ai_agents/elderly_protection_interface.py:434:14: W291 trailing whitespace
        self, 
             ^
security/ai_agents/elderly_protection_interface.py:435:22: W291 trailing whitespace
        user_id: str, 
                     ^
security/ai_agents/elderly_protection_interface.py:440:1: W293 blank line contains whitespace
        """
        Обработка голосовой команды
        
        Args:
            user_id: ID пользователя
            command: Голосовая команда
            
        Returns:
            Dict[str, Any]: Результат обработки
        """
^
security/ai_agents/elderly_protection_interface.py:444:1: W293 blank line contains whitespace
        """
        Обработка голосовой команды
        
        Args:
            user_id: ID пользователя
            command: Голосовая команда
            
        Returns:
            Dict[str, Any]: Результат обработки
        """
^
security/ai_agents/elderly_protection_interface.py:449:80: E501 line too long (85 > 79 characters)
            self.logger.info(f"Обработка голосовой команды для {user_id}: {command}")
                                                                               ^
security/ai_agents/elderly_protection_interface.py:450:1: W293 blank line contains whitespace
            
^
security/ai_agents/elderly_protection_interface.py:453:1: W293 blank line contains whitespace
            
^
security/ai_agents/elderly_protection_interface.py:455:1: W293 blank line contains whitespace
            
^
security/ai_agents/elderly_protection_interface.py:458:1: W293 blank line contains whitespace
            
^
security/ai_agents/elderly_protection_interface.py:461:1: W293 blank line contains whitespace
            
^
security/ai_agents/elderly_protection_interface.py:475:80: E501 line too long (109 > 79 characters)
                return {"error": "Команда не распознана", "suggestion": "Скажите 'помощь' для списка команд"}
                                                                               ^
security/ai_agents/elderly_protection_interface.py:476:1: W293 blank line contains whitespace
            
^
security/ai_agents/elderly_protection_interface.py:485:80: E501 line too long (147 > 79 characters)
            "message": "Доступные команды: экстренная помощь, позвонить семье, заблокировать звонок, проверить безопасность, изучить безопасность",
                                                                               ^
security/ai_agents/elderly_protection_interface.py:486:80: E501 line too long (153 > 79 characters)
            "voice_response": "Я могу помочь вам с безопасностью. Скажите 'экстренная помощь' для срочной помощи, 'позвонить семье' для связи с родными."
                                                                               ^
security/ai_agents/elderly_protection_interface.py:494:80: E501 line too long (80 > 79 characters)
            "message": "Экстренная помощь активирована! Ваша семья уведомлена.",
                                                                               ^
security/ai_agents/elderly_protection_interface.py:495:80: E501 line too long (137 > 79 characters)
            "voice_response": "Экстренная помощь активирована! Ваша семья получила уведомление. Оставайтесь спокойны, помощь уже в пути."
                                                                               ^
security/ai_agents/elderly_protection_interface.py:498:80: E501 line too long (80 > 79 characters)
    async def _handle_call_family_command(self, user_id: str) -> Dict[str, Any]:
                                                                               ^
security/ai_agents/elderly_protection_interface.py:503:80: E501 line too long (81 > 79 characters)
            "voice_response": "Сейчас свяжу вас с семьей. Пожалуйста, подождите."
                                                                               ^
security/ai_agents/elderly_protection_interface.py:511:80: E501 line too long (98 > 79 characters)
            "voice_response": "Звонок заблокирован. Если это был мошенник, ваша семья уведомлена."
                                                                               ^
security/ai_agents/elderly_protection_interface.py:514:80: E501 line too long (83 > 79 characters)
    async def _handle_check_security_command(self, user_id: str) -> Dict[str, Any]:
                                                                               ^
security/ai_agents/elderly_protection_interface.py:518:80: E501 line too long (90 > 79 characters)
            "message": "Проверка безопасности завершена. Все системы работают нормально.",
                                                                               ^
security/ai_agents/elderly_protection_interface.py:519:80: E501 line too long (113 > 79 characters)
            "voice_response": "Проверка безопасности завершена. Все системы защиты активны и работают нормально."
                                                                               ^
security/ai_agents/elderly_protection_interface.py:522:80: E501 line too long (81 > 79 characters)
    async def _handle_learn_safety_command(self, user_id: str) -> Dict[str, Any]:
                                                                               ^
security/ai_agents/elderly_protection_interface.py:527:80: E501 line too long (88 > 79 characters)
            "voice_response": "Открываю уроки безопасности. Выберите урок для изучения."
                                                                               ^
security/ai_agents/elderly_protection_interface.py:531:14: W291 trailing whitespace
        self, 
             ^
security/ai_agents/elderly_protection_interface.py:532:22: W291 trailing whitespace
        user_id: str, 
                     ^
security/ai_agents/elderly_protection_interface.py:537:1: W293 blank line contains whitespace
        """
        Завершение урока безопасности
        
        Args:
            user_id: ID пользователя
            lesson_id: ID урока
            
        Returns:
            bool: Успешность завершения
        """
^
security/ai_agents/elderly_protection_interface.py:541:1: W293 blank line contains whitespace
        """
        Завершение урока безопасности
        
        Args:
            user_id: ID пользователя
            lesson_id: ID урока
            
        Returns:
            bool: Успешность завершения
        """
^
security/ai_agents/elderly_protection_interface.py:550:1: W293 blank line contains whitespace
                
^
security/ai_agents/elderly_protection_interface.py:551:80: E501 line too long (86 > 79 characters)
                self.logger.info(f"Урок {lesson_id} завершен пользователем {user_id}")
                                                                               ^
security/ai_agents/elderly_protection_interface.py:553:1: W293 blank line contains whitespace
            
^
security/ai_agents/elderly_protection_interface.py:555:1: W293 blank line contains whitespace
            
^
security/ai_agents/elderly_protection_interface.py:564:1: W293 blank line contains whitespace
        
^
security/ai_agents/elderly_protection_interface.py:566:80: E501 line too long (97 > 79 characters)
        completed_lessons = sum(1 for lesson in self.safety_lessons.values() if lesson.completed)
                                                                               ^
security/ai_agents/elderly_protection_interface.py:567:1: W293 blank line contains whitespace
        
^
security/ai_agents/elderly_protection_interface.py:607:1: W293 blank line contains whitespace
        
^
security/ai_agents/elderly_protection_interface.py:610:27: W291 trailing whitespace
            "elderly_001", 
                          ^
security/ai_agents/elderly_protection_interface.py:611:29: W291 trailing whitespace
            "Анна Ивановна", 
                            ^
security/ai_agents/elderly_protection_interface.py:612:16: W291 trailing whitespace
            75, 
               ^
security/ai_agents/elderly_protection_interface.py:616:1: W293 blank line contains whitespace
        
^
security/ai_agents/elderly_protection_interface.py:620:1: W293 blank line contains whitespace
        
^
security/ai_agents/elderly_protection_interface.py:622:80: E501 line too long (90 > 79 characters)
        result = await interface.process_voice_command("elderly_001", "экстренная помощь")
                                                                               ^
security/ai_agents/elderly_protection_interface.py:624:1: W293 blank line contains whitespace
        
^
security/ai_agents/elderly_protection_interface.py:626:80: E501 line too long (92 > 79 characters)
        success = await interface.complete_safety_lesson("elderly_001", "phone_scam_lesson")
                                                                               ^
security/ai_agents/elderly_protection_interface.py:628:1: W293 blank line contains whitespace
        
^
security/ai_agents/elderly_protection_interface.py:632:1: W293 blank line contains whitespace
    
^
security/ai_agents/elderly_protection_interface.py:634:53: W292 no newline at end of file
    asyncio.run(test_elderly_protection_interface())                                                    ^
security/ai_agents/emergency_base_models.py:110:80: E501 line too long (85 > 79 characters)
    notification_channels: List[str] = field(default_factory=lambda: ["sms", "push"])
                                                                               ^
security/ai_agents/emergency_base_models.py:127:61: W292 no newline at end of file
    specializations: List[str] = field(default_factory=list)                                                            ^
security/ai_agents/emergency_base_models_refactored.py:21:33: E261 at least two spaces before inline comment
    NATURAL_DISASTER = "natural" # Стихийное бедствие
                                ^
security/ai_agents/emergency_base_models_refactored.py:51:34: E261 at least two spaces before inline comment
    ELECTRIC_SERVICE = "electric" # Аварийная электрослужба
                                 ^
security/ai_agents/emergency_base_models_refactored.py:111:25: W291 trailing whitespace
    'EmergencySeverity', 
                        ^
security/ai_agents/emergency_base_models_refactored.py:118:2: W292 no newline at end of file
] ^
security/ai_agents/emergency_contact_manager.py:18:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_contact_manager.py:23:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_contact_manager.py:25:20: E128 continuation line under-indented for visual indent
                   relationship: str = "family", priority: int = 1,
                   ^
security/ai_agents/emergency_contact_manager.py:26:20: E128 continuation line under-indented for visual indent
                   is_available: bool = True) -> EmergencyContact:
                   ^
security/ai_agents/emergency_contact_manager.py:29:1: W293 blank line contains whitespace
        """
        Добавить новый контакт
        
        Args:
            name: Имя контакта
            phone: Номер телефона
            email: Email адрес
            relationship: Отношение к пользователю
            priority: Приоритет (1-5)
            is_available: Доступность контакта
            
        Returns:
            EmergencyContact: Созданный контакт
        """
^
security/ai_agents/emergency_contact_manager.py:37:1: W293 blank line contains whitespace
        """
        Добавить новый контакт
        
        Args:
            name: Имя контакта
            phone: Номер телефона
            email: Email адрес
            relationship: Отношение к пользователю
            priority: Приоритет (1-5)
            is_available: Доступность контакта
            
        Returns:
            EmergencyContact: Созданный контакт
        """
^
security/ai_agents/emergency_contact_manager.py:45:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_contact_manager.py:48:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_contact_manager.py:59:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_contact_manager.py:62:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_contact_manager.py:65:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_contact_manager.py:69:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_contact_manager.py:73:1: W293 blank line contains whitespace
        """
        Получить контакт по ID
        
        Args:
            contact_id: ID контакта
            
        Returns:
            Optional[EmergencyContact]: Контакт или None
        """
^
security/ai_agents/emergency_contact_manager.py:76:1: W293 blank line contains whitespace
        """
        Получить контакт по ID
        
        Args:
            contact_id: ID контакта
            
        Returns:
            Optional[EmergencyContact]: Контакт или None
        """
^
security/ai_agents/emergency_contact_manager.py:81:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_contact_manager.py:85:1: W293 blank line contains whitespace
        """
        Обновить контакт
        
        Args:
            contact_id: ID контакта
            **kwargs: Поля для обновления
            
        Returns:
            bool: True если обновлено успешно
        """
^
security/ai_agents/emergency_contact_manager.py:89:1: W293 blank line contains whitespace
        """
        Обновить контакт
        
        Args:
            contact_id: ID контакта
            **kwargs: Поля для обновления
            
        Returns:
            bool: True если обновлено успешно
        """
^
security/ai_agents/emergency_contact_manager.py:97:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_contact_manager.py:99:80: E501 line too long (82 > 79 characters)
            if 'phone' in kwargs and not PhoneValidator.validate(kwargs['phone']):
                                                                               ^
security/ai_agents/emergency_contact_manager.py:101:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_contact_manager.py:102:80: E501 line too long (102 > 79 characters)
            if 'email' in kwargs and kwargs['email'] and not EmailValidator.validate(kwargs['email']):
                                                                               ^
security/ai_agents/emergency_contact_manager.py:104:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_contact_manager.py:109:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_contact_manager.py:112:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_contact_manager.py:116:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_contact_manager.py:120:1: W293 blank line contains whitespace
        """
        Удалить контакт
        
        Args:
            contact_id: ID контакта
            
        Returns:
            bool: True если удалено успешно
        """
^
security/ai_agents/emergency_contact_manager.py:123:1: W293 blank line contains whitespace
        """
        Удалить контакт
        
        Args:
            contact_id: ID контакта
            
        Returns:
            bool: True если удалено успешно
        """
^
security/ai_agents/emergency_contact_manager.py:130:1: W293 blank line contains whitespace
                
^
security/ai_agents/emergency_contact_manager.py:135:1: W293 blank line contains whitespace
                
^
security/ai_agents/emergency_contact_manager.py:142:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_contact_manager.py:143:80: E501 line too long (80 > 79 characters)
    def get_contacts_by_priority(self, priority: int) -> List[EmergencyContact]:
                                                                               ^
security/ai_agents/emergency_contact_manager.py:146:1: W293 blank line contains whitespace
        """
        Получить контакты по приоритету
        
        Args:
            priority: Приоритет контактов
            
        Returns:
            List[EmergencyContact]: Список контактов
        """
^
security/ai_agents/emergency_contact_manager.py:149:1: W293 blank line contains whitespace
        """
        Получить контакты по приоритету
        
        Args:
            priority: Приоритет контактов
            
        Returns:
            List[EmergencyContact]: Список контактов
        """
^
security/ai_agents/emergency_contact_manager.py:153:62: W291 trailing whitespace
        return [contact for contact in self.contacts.values() 
                                                             ^
security/ai_agents/emergency_contact_manager.py:155:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_contact_manager.py:159:1: W293 blank line contains whitespace
        """
        Получить доступные контакты
        
        Returns:
            List[EmergencyContact]: Список доступных контактов
        """
^
security/ai_agents/emergency_contact_manager.py:163:62: W291 trailing whitespace
        return [contact for contact in self.contacts.values() 
                                                             ^
security/ai_agents/emergency_contact_manager.py:165:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_contact_manager.py:166:80: E501 line too long (88 > 79 characters)
    def get_contacts_by_relationship(self, relationship: str) -> List[EmergencyContact]:
                                                                               ^
security/ai_agents/emergency_contact_manager.py:169:1: W293 blank line contains whitespace
        """
        Получить контакты по отношению
        
        Args:
            relationship: Отношение к пользователю
            
        Returns:
            List[EmergencyContact]: Список контактов
        """
^
security/ai_agents/emergency_contact_manager.py:172:1: W293 blank line contains whitespace
        """
        Получить контакты по отношению
        
        Args:
            relationship: Отношение к пользователю
            
        Returns:
            List[EmergencyContact]: Список контактов
        """
^
security/ai_agents/emergency_contact_manager.py:176:62: W291 trailing whitespace
        return [contact for contact in self.contacts.values() 
                                                             ^
security/ai_agents/emergency_contact_manager.py:178:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_contact_manager.py:179:52: W291 trailing whitespace
    def create_contact_group(self, group_name: str, 
                                                   ^
security/ai_agents/emergency_contact_manager.py:180:28: E128 continuation line under-indented for visual indent
                           contact_ids: List[str]) -> bool:
                           ^
security/ai_agents/emergency_contact_manager.py:183:1: W293 blank line contains whitespace
        """
        Создать группу контактов
        
        Args:
            group_name: Название группы
            contact_ids: Список ID контактов
            
        Returns:
            bool: True если группа создана успешно
        """
^
security/ai_agents/emergency_contact_manager.py:187:1: W293 blank line contains whitespace
        """
        Создать группу контактов
        
        Args:
            group_name: Название группы
            contact_ids: Список ID контактов
            
        Returns:
            bool: True если группа создана успешно
        """
^
security/ai_agents/emergency_contact_manager.py:193:57: W291 trailing whitespace
            valid_contacts = [cid for cid in contact_ids 
                                                        ^
security/ai_agents/emergency_contact_manager.py:194:29: E128 continuation line under-indented for visual indent
                            if cid in self.contacts]
                            ^
security/ai_agents/emergency_contact_manager.py:195:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_contact_manager.py:198:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_contact_manager.py:202:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_contact_manager.py:206:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_contact_manager.py:210:1: W293 blank line contains whitespace
        """
        Получить контакты группы
        
        Args:
            group_name: Название группы
            
        Returns:
            List[EmergencyContact]: Список контактов группы
        """
^
security/ai_agents/emergency_contact_manager.py:213:1: W293 blank line contains whitespace
        """
        Получить контакты группы
        
        Args:
            group_name: Название группы
            
        Returns:
            List[EmergencyContact]: Список контактов группы
        """
^
security/ai_agents/emergency_contact_manager.py:218:58: W291 trailing whitespace
        return [self.contacts[cid] for cid in contact_ids 
                                                         ^
security/ai_agents/emergency_contact_manager.py:220:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_contact_manager.py:221:80: E501 line too long (86 > 79 characters)
    def get_emergency_contacts(self, event: EmergencyEvent) -> List[EmergencyContact]:
                                                                               ^
security/ai_agents/emergency_contact_manager.py:224:1: W293 blank line contains whitespace
        """
        Получить контакты для экстренной ситуации
        
        Args:
            event: Экстренное событие
            
        Returns:
            List[EmergencyContact]: Список контактов для уведомления
        """
^
security/ai_agents/emergency_contact_manager.py:227:1: W293 blank line contains whitespace
        """
        Получить контакты для экстренной ситуации
        
        Args:
            event: Экстренное событие
            
        Returns:
            List[EmergencyContact]: Список контактов для уведомления
        """
^
security/ai_agents/emergency_contact_manager.py:235:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_contact_manager.py:239:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_contact_manager.py:242:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_contact_manager.py:246:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_contact_manager.py:250:1: W293 blank line contains whitespace
        """
        Получить статистику контактов
        
        Returns:
            Dict[str, Any]: Статистика контактов
        """
^
security/ai_agents/emergency_contact_manager.py:257:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_contact_manager.py:263:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_contact_manager.py:269:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_contact_manager.py:280:22: W292 no newline at end of file
            return {}                     ^
security/ai_agents/emergency_event_manager.py:19:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_event_manager.py:24:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_event_manager.py:25:58: W291 trailing whitespace
    def create_event(self, emergency_type: EmergencyType, 
                                                         ^
security/ai_agents/emergency_event_manager.py:26:21: E128 continuation line under-indented for visual indent
                    severity: EmergencySeverity,
                    ^
security/ai_agents/emergency_event_manager.py:27:21: E128 continuation line under-indented for visual indent
                    location: Dict[str, Any],
                    ^
security/ai_agents/emergency_event_manager.py:28:21: E128 continuation line under-indented for visual indent
                    description: str,
                    ^
security/ai_agents/emergency_event_manager.py:29:21: E128 continuation line under-indented for visual indent
                    user_id: Optional[str] = None) -> EmergencyEvent:
                    ^
security/ai_agents/emergency_event_manager.py:32:1: W293 blank line contains whitespace
        """
        Создать новое экстренное событие
        
        Args:
            emergency_type: Тип экстренной ситуации
            severity: Серьезность ситуации
            location: Местоположение
            description: Описание ситуации
            user_id: ID пользователя
            
        Returns:
            EmergencyEvent: Созданное событие
        """
^
security/ai_agents/emergency_event_manager.py:39:1: W293 blank line contains whitespace
        """
        Создать новое экстренное событие
        
        Args:
            emergency_type: Тип экстренной ситуации
            severity: Серьезность ситуации
            location: Местоположение
            description: Описание ситуации
            user_id: ID пользователя
            
        Returns:
            EmergencyEvent: Созданное событие
        """
^
security/ai_agents/emergency_event_manager.py:51:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_event_manager.py:61:24: F821 undefined name 'ResponseStatus'
                status=ResponseStatus.PENDING
                       ^
security/ai_agents/emergency_event_manager.py:63:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_event_manager.py:67:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_event_manager.py:70:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_event_manager.py:74:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_event_manager.py:78:1: W293 blank line contains whitespace
        """
        Получить событие по ID
        
        Args:
            event_id: ID события
            
        Returns:
            Optional[EmergencyEvent]: Событие или None
        """
^
security/ai_agents/emergency_event_manager.py:81:1: W293 blank line contains whitespace
        """
        Получить событие по ID
        
        Args:
            event_id: ID события
            
        Returns:
            Optional[EmergencyEvent]: Событие или None
        """
^
security/ai_agents/emergency_event_manager.py:86:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_event_manager.py:87:49: W291 trailing whitespace
    def update_event_status(self, event_id: str, 
                                                ^
security/ai_agents/emergency_event_manager.py:88:27: E128 continuation line under-indented for visual indent
                          status: ResponseStatus) -> bool:
                          ^
security/ai_agents/emergency_event_manager.py:88:35: F821 undefined name 'ResponseStatus'
                          status: ResponseStatus) -> bool:
                                  ^
security/ai_agents/emergency_event_manager.py:91:1: W293 blank line contains whitespace
        """
        Обновить статус события
        
        Args:
            event_id: ID события
            status: Новый статус
            
        Returns:
            bool: True если обновлено успешно
        """
^
security/ai_agents/emergency_event_manager.py:95:1: W293 blank line contains whitespace
        """
        Обновить статус события
        
        Args:
            event_id: ID события
            status: Новый статус
            
        Returns:
            bool: True если обновлено успешно
        """
^
security/ai_agents/emergency_event_manager.py:103:30: F821 undefined name 'ResponseStatus'
                if status == ResponseStatus.RESOLVED:
                             ^
security/ai_agents/emergency_event_manager.py:105:80: E501 line too long (83 > 79 characters)
                self.logger.info(f"Статус события {event_id} обновлен на {status}")
                                                                               ^
security/ai_agents/emergency_event_manager.py:111:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_event_manager.py:112:80: E501 line too long (88 > 79 characters)
    def get_events_by_type(self, emergency_type: EmergencyType) -> List[EmergencyEvent]:
                                                                               ^
security/ai_agents/emergency_event_manager.py:115:1: W293 blank line contains whitespace
        """
        Получить события по типу
        
        Args:
            emergency_type: Тип события
            
        Returns:
            List[EmergencyEvent]: Список событий
        """
^
security/ai_agents/emergency_event_manager.py:118:1: W293 blank line contains whitespace
        """
        Получить события по типу
        
        Args:
            emergency_type: Тип события
            
        Returns:
            List[EmergencyEvent]: Список событий
        """
^
security/ai_agents/emergency_event_manager.py:122:56: W291 trailing whitespace
        return [event for event in self.events.values() 
                                                       ^
security/ai_agents/emergency_event_manager.py:124:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_event_manager.py:125:80: E501 line too long (90 > 79 characters)
    def get_events_by_severity(self, severity: EmergencySeverity) -> List[EmergencyEvent]:
                                                                               ^
security/ai_agents/emergency_event_manager.py:128:1: W293 blank line contains whitespace
        """
        Получить события по серьезности
        
        Args:
            severity: Серьезность события
            
        Returns:
            List[EmergencyEvent]: Список событий
        """
^
security/ai_agents/emergency_event_manager.py:131:1: W293 blank line contains whitespace
        """
        Получить события по серьезности
        
        Args:
            severity: Серьезность события
            
        Returns:
            List[EmergencyEvent]: Список событий
        """
^
security/ai_agents/emergency_event_manager.py:135:56: W291 trailing whitespace
        return [event for event in self.events.values() 
                                                       ^
security/ai_agents/emergency_event_manager.py:137:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_event_manager.py:141:1: W293 blank line contains whitespace
        """
        Получить недавние события
        
        Args:
            hours: Количество часов назад
            
        Returns:
            List[EmergencyEvent]: Список событий
        """
^
security/ai_agents/emergency_event_manager.py:144:1: W293 blank line contains whitespace
        """
        Получить недавние события
        
        Args:
            hours: Количество часов назад
            
        Returns:
            List[EmergencyEvent]: Список событий
        """
^
security/ai_agents/emergency_event_manager.py:149:56: W291 trailing whitespace
        return [event for event in self.events.values() 
                                                       ^
security/ai_agents/emergency_event_manager.py:151:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_event_manager.py:155:1: W293 blank line contains whitespace
        """
        Получить статистику событий
        
        Returns:
            Dict[str, Any]: Статистика
        """
^
security/ai_agents/emergency_event_manager.py:161:67: W291 trailing whitespace
            resolved_events = len([e for e in self.events.values() 
                                                                  ^
security/ai_agents/emergency_event_manager.py:162:34: E128 continuation line under-indented for visual indent
                                 if e.status == ResponseStatus.RESOLVED])
                                 ^
security/ai_agents/emergency_event_manager.py:162:49: F821 undefined name 'ResponseStatus'
                                 if e.status == ResponseStatus.RESOLVED])
                                                ^
security/ai_agents/emergency_event_manager.py:163:66: W291 trailing whitespace
            pending_events = len([e for e in self.events.values() 
                                                                 ^
security/ai_agents/emergency_event_manager.py:164:33: E128 continuation line under-indented for visual indent
                                if e.status == ResponseStatus.PENDING])
                                ^
security/ai_agents/emergency_event_manager.py:164:48: F821 undefined name 'ResponseStatus'
                                if e.status == ResponseStatus.PENDING])
                                               ^
security/ai_agents/emergency_event_manager.py:165:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_event_manager.py:171:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_event_manager.py:177:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_event_manager.py:182:80: E501 line too long (82 > 79 characters)
                'resolution_rate': (resolved_events / max(total_events, 1)) * 100,
                                                                               ^
security/ai_agents/emergency_event_manager.py:189:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_event_manager.py:193:1: W293 blank line contains whitespace
        """
        Очистить старые события
        
        Args:
            days: Количество дней для хранения
            
        Returns:
            int: Количество удаленных событий
        """
^
security/ai_agents/emergency_event_manager.py:196:1: W293 blank line contains whitespace
        """
        Очистить старые события
        
        Args:
            days: Количество дней для хранения
            
        Returns:
            int: Количество удаленных событий
        """
^
security/ai_agents/emergency_event_manager.py:202:78: W291 trailing whitespace
            old_events = [event_id for event_id, event in self.events.items() 
                                                                             ^
security/ai_agents/emergency_event_manager.py:203:26: E128 continuation line under-indented for visual indent
                         if event.timestamp < cutoff_time]
                         ^
security/ai_agents/emergency_event_manager.py:204:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_event_manager.py:207:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_event_manager.py:212:21: W292 no newline at end of file
            return 0                    ^
security/ai_agents/emergency_formatters.py:8:1: F401 'datetime.datetime' imported but unused
from datetime import datetime
^
security/ai_agents/emergency_formatters.py:9:1: F401 'typing.Optional' imported but unused
from typing import Optional
^
security/ai_agents/emergency_formatters.py:16:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_formatters.py:19:23: W291 trailing whitespace
        'medium': "🟠", 
                      ^
security/ai_agents/emergency_formatters.py:24:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_formatters.py:29:1: W293 blank line contains whitespace
        """
        Форматировать сообщение об экстренной ситуации
        
        Args:
            event: Экстренное событие
            
        Returns:
            str: Отформатированное сообщение
        """
^
security/ai_agents/emergency_formatters.py:32:1: W293 blank line contains whitespace
        """
        Форматировать сообщение об экстренной ситуации
        
        Args:
            event: Экстренное событие
            
        Returns:
            str: Отформатированное сообщение
        """
^
security/ai_agents/emergency_formatters.py:39:1: W293 blank line contains whitespace
        
^
security/ai_agents/emergency_formatters.py:46:1: W293 blank line contains whitespace
        
^
security/ai_agents/emergency_formatters.py:48:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_formatters.py:50:63: W291 trailing whitespace
    def format_contact_notification(contact: EmergencyContact, 
                                                              ^
security/ai_agents/emergency_formatters.py:51:35: E128 continuation line under-indented for visual indent
                                  event: EmergencyEvent) -> str:
                                  ^
security/ai_agents/emergency_formatters.py:54:1: W293 blank line contains whitespace
        """
        Форматировать уведомление для контакта
        
        Args:
            contact: Контакт для уведомления
            event: Экстренное событие
            
        Returns:
            str: Отформатированное уведомление
        """
^
security/ai_agents/emergency_formatters.py:58:1: W293 blank line contains whitespace
        """
        Форматировать уведомление для контакта
        
        Args:
            contact: Контакт для уведомления
            event: Экстренное событие
            
        Returns:
            str: Отформатированное уведомление
        """
^
security/ai_agents/emergency_formatters.py:64:80: E501 line too long (81 > 79 characters)
        message += f"\n\nСвяжитесь с {contact.name} по телефону: {contact.phone}"
                                                                               ^
security/ai_agents/emergency_formatters.py:65:1: W293 blank line contains whitespace
        
^
security/ai_agents/emergency_formatters.py:67:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_formatters.py:69:80: E501 line too long (80 > 79 characters)
    def format_service_call_message(service: str, event: EmergencyEvent) -> str:
                                                                               ^
security/ai_agents/emergency_formatters.py:72:1: W293 blank line contains whitespace
        """
        Форматировать сообщение для вызова службы
        
        Args:
            service: Название службы
            event: Экстренное событие
            
        Returns:
            str: Отформатированное сообщение
        """
^
security/ai_agents/emergency_formatters.py:76:1: W293 blank line contains whitespace
        """
        Форматировать сообщение для вызова службы
        
        Args:
            service: Название службы
            event: Экстренное событие
            
        Returns:
            str: Отформатированное сообщение
        """
^
security/ai_agents/emergency_formatters.py:87:1: W293 blank line contains whitespace
        
^
security/ai_agents/emergency_formatters.py:93:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_formatters.py:98:1: W293 blank line contains whitespace
        """
        Форматировать события для JSON экспорта
        
        Args:
            events: Список событий
            
        Returns:
            str: JSON строка
        """
^
security/ai_agents/emergency_formatters.py:101:1: W293 blank line contains whitespace
        """
        Форматировать события для JSON экспорта
        
        Args:
            events: Список событий
            
        Returns:
            str: JSON строка
        """
^
security/ai_agents/emergency_formatters.py:106:1: W293 blank line contains whitespace
        
^
security/ai_agents/emergency_formatters.py:122:80: E501 line too long (95 > 79 characters)
                    'resolved_at': event.resolved_at.isoformat() if event.resolved_at else None
                                                                               ^
security/ai_agents/emergency_formatters.py:125:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_formatters.py:129:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_formatters.py:134:1: W293 blank line contains whitespace
        """
        Форматировать контакты для CSV экспорта
        
        Args:
            contacts: Список контактов
            
        Returns:
            str: CSV строка
        """
^
security/ai_agents/emergency_formatters.py:137:1: W293 blank line contains whitespace
        """
        Форматировать контакты для CSV экспорта
        
        Args:
            contacts: Список контактов
            
        Returns:
            str: CSV строка
        """
^
security/ai_agents/emergency_formatters.py:142:80: E501 line too long (90 > 79 characters)
            csv_lines = ["contact_id,name,phone,email,relationship,priority,is_available"]
                                                                               ^
security/ai_agents/emergency_formatters.py:143:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_formatters.py:149:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_formatters.py:152:48: W292 no newline at end of file
            return f"Ошибка экспорта: {str(e)}"                                               ^
security/ai_agents/emergency_id_generator.py:16:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_id_generator.py:21:1: W293 blank line contains whitespace
        """
        Создать уникальный ID события
        
        Returns:
            str: Уникальный ID события
        """
^
security/ai_agents/emergency_id_generator.py:27:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_id_generator.py:32:1: W293 blank line contains whitespace
        """
        Создать уникальный ID ответа
        
        Returns:
            str: Уникальный ID ответа
        """
^
security/ai_agents/emergency_id_generator.py:38:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_id_generator.py:43:1: W293 blank line contains whitespace
        """
        Создать уникальный ID местоположения
        
        Returns:
            str: Уникальный ID местоположения
        """
^
security/ai_agents/emergency_id_generator.py:49:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_id_generator.py:54:1: W293 blank line contains whitespace
        """
        Создать уникальный ID контакта
        
        Returns:
            str: Уникальный ID контакта
        """
^
security/ai_agents/emergency_id_generator.py:60:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_id_generator.py:65:1: W293 blank line contains whitespace
        """
        Создать UUID
        
        Returns:
            str: UUID строка
        """
^
security/ai_agents/emergency_id_generator.py:70:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_id_generator.py:75:1: W293 blank line contains whitespace
        """
        Создать ID с временной меткой
        
        Args:
            prefix: Префикс для ID
            
        Returns:
            str: ID с временной меткой
        """
^
security/ai_agents/emergency_id_generator.py:78:1: W293 blank line contains whitespace
        """
        Создать ID с временной меткой
        
        Args:
            prefix: Префикс для ID
            
        Returns:
            str: ID с временной меткой
        """
^
security/ai_agents/emergency_id_generator.py:84:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_id_generator.py:89:1: W293 blank line contains whitespace
        """
        Создать короткий ID
        
        Args:
            length: Длина ID
            
        Returns:
            str: Короткий ID
        """
^
security/ai_agents/emergency_id_generator.py:92:1: W293 blank line contains whitespace
        """
        Создать короткий ID
        
        Args:
            length: Длина ID
            
        Returns:
            str: Короткий ID
        """
^
security/ai_agents/emergency_id_generator.py:98:1: W293 blank line contains whitespace
        
^
security/ai_agents/emergency_id_generator.py:101:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_id_generator.py:106:1: W293 blank line contains whitespace
        """
        Проверить формат ID
        
        Args:
            id_string: ID для проверки
            expected_prefix: Ожидаемый префикс
            
        Returns:
            bool: True если формат корректный
        """
^
security/ai_agents/emergency_id_generator.py:110:1: W293 blank line contains whitespace
        """
        Проверить формат ID
        
        Args:
            id_string: ID для проверки
            expected_prefix: Ожидаемый префикс
            
        Returns:
            bool: True если формат корректный
        """
^
security/ai_agents/emergency_id_generator.py:116:1: W293 blank line contains whitespace
        
^
security/ai_agents/emergency_id_generator.py:118:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_id_generator.py:123:1: W293 blank line contains whitespace
        """
        Извлечь временную метку из ID
        
        Args:
            id_string: ID для анализа
            
        Returns:
            Optional[datetime]: Временная метка или None
        """
^
security/ai_agents/emergency_id_generator.py:126:1: W293 blank line contains whitespace
        """
        Извлечь временную метку из ID
        
        Args:
            id_string: ID для анализа
            
        Returns:
            Optional[datetime]: Временная метка или None
        """
^
security/ai_agents/emergency_id_generator.py:140:1: W293 blank line contains whitespace
        
^
security/ai_agents/emergency_id_generator.py:141:20: W292 no newline at end of file
        return None                   ^
security/ai_agents/emergency_interfaces.py:10:1: F401 'datetime.datetime' imported but unused
from datetime import datetime
^
security/ai_agents/emergency_interfaces.py:56:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_interfaces.py:61:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_interfaces.py:63:58: W291 trailing whitespace
    def predict_risk(self, location: Tuple[float, float], 
                                                         ^
security/ai_agents/emergency_interfaces.py:64:21: E128 continuation line under-indented for visual indent
                    time_of_day: int) -> Dict[str, Any]:
                    ^
security/ai_agents/emergency_interfaces.py:71:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_interfaces.py:76:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_interfaces.py:85:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_interfaces.py:87:54: W291 trailing whitespace
    def call_service(self, service: EmergencyService, 
                                                     ^
security/ai_agents/emergency_interfaces.py:88:21: E128 continuation line under-indented for visual indent
                    location: Tuple[float, float]) -> bool:
                    ^
security/ai_agents/emergency_interfaces.py:91:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_interfaces.py:100:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_interfaces.py:105:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_interfaces.py:110:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_interfaces.py:112:49: W291 trailing whitespace
    def update_event_status(self, event_id: str, 
                                                ^
security/ai_agents/emergency_interfaces.py:113:27: E128 continuation line under-indented for visual indent
                          status: ResponseStatus) -> bool:
                          ^
security/ai_agents/emergency_interfaces.py:120:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_interfaces.py:125:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_interfaces.py:134:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_interfaces.py:139:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_interfaces.py:144:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_interfaces.py:146:80: E501 line too long (85 > 79 characters)
    def detect_anomalies(self, events: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
                                                                               ^
security/ai_agents/emergency_interfaces.py:153:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_interfaces.py:156:27: E128 continuation line under-indented for visual indent
                          predicted_demand: Dict[str, int]) -> Dict[str, Any]:
                          ^
security/ai_agents/emergency_interfaces.py:159:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_interfaces.py:161:80: E501 line too long (86 > 79 characters)
    def predict_demand(self, historical_data: List[Dict[str, Any]]) -> Dict[str, int]:
                                                                               ^
security/ai_agents/emergency_interfaces.py:168:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_interfaces.py:173:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_interfaces.py:177:13: W292 no newline at end of file
        pass            ^
security/ai_agents/emergency_location_utils.py:9:1: F401 'typing.Optional' imported but unused
from typing import List, Dict, Any, Tuple, Optional
^
security/ai_agents/emergency_location_utils.py:14:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_location_utils.py:16:56: W291 trailing whitespace
    def calculate_distance(coord1: Tuple[float, float], 
                                                       ^
security/ai_agents/emergency_location_utils.py:17:27: E128 continuation line under-indented for visual indent
                          coord2: Tuple[float, float]) -> float:
                          ^
security/ai_agents/emergency_location_utils.py:20:1: W293 blank line contains whitespace
        """
        Рассчитать расстояние между двумя точками в километрах
        
        Args:
            coord1: Первая точка (широта, долгота)
            coord2: Вторая точка (широта, долгота)
            
        Returns:
            float: Расстояние в километрах
        """
^
security/ai_agents/emergency_location_utils.py:24:1: W293 blank line contains whitespace
        """
        Рассчитать расстояние между двумя точками в километрах
        
        Args:
            coord1: Первая точка (широта, долгота)
            coord2: Вторая точка (широта, долгота)
            
        Returns:
            float: Расстояние в километрах
        """
^
security/ai_agents/emergency_location_utils.py:32:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_location_utils.py:34:59: W291 trailing whitespace
    def is_location_in_radius(center: Tuple[float, float], 
                                                          ^
security/ai_agents/emergency_location_utils.py:35:29: E128 continuation line under-indented for visual indent
                            point: Tuple[float, float], 
                            ^
security/ai_agents/emergency_location_utils.py:35:56: W291 trailing whitespace
                            point: Tuple[float, float], 
                                                       ^
security/ai_agents/emergency_location_utils.py:36:29: E128 continuation line under-indented for visual indent
                            radius_km: float) -> bool:
                            ^
security/ai_agents/emergency_location_utils.py:39:1: W293 blank line contains whitespace
        """
        Проверить, находится ли точка в радиусе от центра
        
        Args:
            center: Центральная точка
            point: Проверяемая точка
            radius_km: Радиус в километрах
            
        Returns:
            bool: True если точка в радиусе
        """
^
security/ai_agents/emergency_location_utils.py:44:1: W293 blank line contains whitespace
        """
        Проверить, находится ли точка в радиусе от центра
        
        Args:
            center: Центральная точка
            point: Проверяемая точка
            radius_km: Радиус в километрах
            
        Returns:
            bool: True если точка в радиусе
        """
^
security/ai_agents/emergency_location_utils.py:54:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_location_utils.py:56:61: W291 trailing whitespace
    def find_nearest_services(location: Tuple[float, float], 
                                                            ^
security/ai_agents/emergency_location_utils.py:57:29: E128 continuation line under-indented for visual indent
                            services: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
                            ^
security/ai_agents/emergency_location_utils.py:57:80: E501 line too long (84 > 79 characters)
                            services: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
                                                                               ^
security/ai_agents/emergency_location_utils.py:60:1: W293 blank line contains whitespace
        """
        Найти ближайшие службы к местоположению
        
        Args:
            location: Координаты местоположения
            services: Список служб с координатами
            
        Returns:
            List[Dict]: Список служб, отсортированный по расстоянию
        """
^
security/ai_agents/emergency_location_utils.py:64:1: W293 blank line contains whitespace
        """
        Найти ближайшие службы к местоположению
        
        Args:
            location: Координаты местоположения
            services: Список служб с координатами
            
        Returns:
            List[Dict]: Список служб, отсортированный по расстоянию
        """
^
security/ai_agents/emergency_location_utils.py:80:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_location_utils.py:84:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_location_utils.py:87:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_location_utils.py:89:62: W291 trailing whitespace
    def get_services_in_radius(location: Tuple[float, float], 
                                                             ^
security/ai_agents/emergency_location_utils.py:90:30: E128 continuation line under-indented for visual indent
                             services: List[Dict[str, Any]], 
                             ^
security/ai_agents/emergency_location_utils.py:90:61: W291 trailing whitespace
                             services: List[Dict[str, Any]], 
                                                            ^
security/ai_agents/emergency_location_utils.py:91:30: E128 continuation line under-indented for visual indent
                             radius_km: float) -> List[Dict[str, Any]]:
                             ^
security/ai_agents/emergency_location_utils.py:94:1: W293 blank line contains whitespace
        """
        Получить службы в радиусе от местоположения
        
        Args:
            location: Координаты местоположения
            services: Список служб
            radius_km: Радиус в километрах
            
        Returns:
            List[Dict]: Службы в радиусе
        """
^
security/ai_agents/emergency_location_utils.py:99:1: W293 blank line contains whitespace
        """
        Получить службы в радиусе от местоположения
        
        Args:
            location: Координаты местоположения
            services: Список служб
            radius_km: Радиус в километрах
            
        Returns:
            List[Dict]: Службы в радиусе
        """
^
security/ai_agents/emergency_location_utils.py:112:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_location_utils.py:120:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_location_utils.py:125:1: W293 blank line contains whitespace
        """
        Проверить валидность координат
        
        Args:
            lat: Широта
            lon: Долгота
            
        Returns:
            bool: True если координаты валидны
        """
^
security/ai_agents/emergency_location_utils.py:129:1: W293 blank line contains whitespace
        """
        Проверить валидность координат
        
        Args:
            lat: Широта
            lon: Долгота
            
        Returns:
            bool: True если координаты валидны
        """
^
security/ai_agents/emergency_location_utils.py:134:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_location_utils.py:139:1: W293 blank line contains whitespace
        """
        Проверить точность определения местоположения
        
        Args:
            accuracy: Точность в метрах
            
        Returns:
            bool: True если точность приемлема
        """
^
security/ai_agents/emergency_location_utils.py:142:1: W293 blank line contains whitespace
        """
        Проверить точность определения местоположения
        
        Args:
            accuracy: Точность в метрах
            
        Returns:
            bool: True если точность приемлема
        """
^
security/ai_agents/emergency_location_utils.py:147:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_location_utils.py:152:1: W293 blank line contains whitespace
        """
        Проверить, верифицировано ли местоположение
        
        Args:
            location_data: Данные местоположения
            
        Returns:
            bool: True если местоположение верифицировано
        """
^
security/ai_agents/emergency_location_utils.py:155:1: W293 blank line contains whitespace
        """
        Проверить, верифицировано ли местоположение
        
        Args:
            location_data: Данные местоположения
            
        Returns:
            bool: True если местоположение верифицировано
        """
^
security/ai_agents/emergency_location_utils.py:164:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_location_utils.py:166:80: E501 line too long (91 > 79 characters)
    def calculate_cluster_center(points: List[Tuple[float, float]]) -> Tuple[float, float]:
                                                                               ^
security/ai_agents/emergency_location_utils.py:169:1: W293 blank line contains whitespace
        """
        Рассчитать центр кластера
        
        Args:
            points: Список точек
            
        Returns:
            Tuple[float, float]: Центр кластера
        """
^
security/ai_agents/emergency_location_utils.py:172:1: W293 blank line contains whitespace
        """
        Рассчитать центр кластера
        
        Args:
            points: Список точек
            
        Returns:
            Tuple[float, float]: Центр кластера
        """
^
security/ai_agents/emergency_location_utils.py:179:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_location_utils.py:182:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_location_utils.py:186:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_location_utils.py:188:68: W291 trailing whitespace
    def calculate_cluster_radius(points: List[Tuple[float, float]], 
                                                                   ^
security/ai_agents/emergency_location_utils.py:189:32: E128 continuation line under-indented for visual indent
                               center: Tuple[float, float]) -> float:
                               ^
security/ai_agents/emergency_location_utils.py:192:1: W293 blank line contains whitespace
        """
        Рассчитать радиус кластера
        
        Args:
            points: Список точек
            center: Центр кластера
            
        Returns:
            float: Радиус в километрах
        """
^
security/ai_agents/emergency_location_utils.py:196:1: W293 blank line contains whitespace
        """
        Рассчитать радиус кластера
        
        Args:
            points: Список точек
            center: Центр кластера
            
        Returns:
            float: Радиус в километрах
        """
^
security/ai_agents/emergency_location_utils.py:203:80: E501 line too long (87 > 79 characters)
                distance = LocationDistanceCalculator.calculate_distance(center, point)
                                                                               ^
security/ai_agents/emergency_location_utils.py:207:23: W292 no newline at end of file
            return 0.0                      ^
security/ai_agents/emergency_ml_analyzer.py:10:1: F401 'typing.Optional' imported but unused
from typing import Dict, List, Optional, Any, Tuple
^
security/ai_agents/emergency_ml_analyzer.py:10:1: F401 'typing.Tuple' imported but unused
from typing import Dict, List, Optional, Any, Tuple
^
security/ai_agents/emergency_ml_analyzer.py:15:80: E501 line too long (82 > 79 characters)
    EmergencyAnomalyDetector, EmergencyClusterAnalyzer, EmergencyPatternRecognizer
                                                                               ^
security/ai_agents/emergency_ml_analyzer.py:19:1: F401 '.emergency_security_utils.EmergencySecurityUtils' imported but unused
from .emergency_security_utils import EmergencySecurityUtils
^
security/ai_agents/emergency_ml_analyzer.py:25:1: W293 blank line contains whitespace
    """
    Координатор ML анализа экстренных ситуаций
    
    Применяет принципы SOLID:
    - Single Responsibility: координация ML анализа
    - Open/Closed: открыт для расширения через специализированные анализаторы
    - Liskov Substitution: использует абстракции
    - Interface Segregation: разделенные интерфейсы
    - Dependency Inversion: зависит от абстракций
    """
^
security/ai_agents/emergency_ml_analyzer.py:33:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_ml_analyzer.py:37:1: W293 blank line contains whitespace
        """
        Инициализация ML анализатора
        
        Args:
            name: Имя анализатора
        """
^
security/ai_agents/emergency_ml_analyzer.py:43:1: W293 blank line contains whitespace
        
^
security/ai_agents/emergency_ml_analyzer.py:50:1: W293 blank line contains whitespace
        
^
security/ai_agents/emergency_ml_analyzer.py:53:1: W293 blank line contains whitespace
        
^
security/ai_agents/emergency_ml_analyzer.py:55:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_ml_analyzer.py:59:1: W293 blank line contains whitespace
        """
        Обучить все ML модели
        
        Args:
            training_data: Данные для обучения
            
        Returns:
            bool: True если обучение успешно
        """
^
security/ai_agents/emergency_ml_analyzer.py:62:1: W293 blank line contains whitespace
        """
        Обучить все ML модели
        
        Args:
            training_data: Данные для обучения
            
        Returns:
            bool: True если обучение успешно
        """
^
security/ai_agents/emergency_ml_analyzer.py:70:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_ml_analyzer.py:75:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_ml_analyzer.py:80:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_ml_analyzer.py:90:1: W293 blank line contains whitespace
                
^
security/ai_agents/emergency_ml_analyzer.py:94:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_ml_analyzer.py:95:80: E501 line too long (90 > 79 characters)
    def _validate_training_data(self, data: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
                                                                               ^
security/ai_agents/emergency_ml_analyzer.py:98:1: W293 blank line contains whitespace
        """
        Валидировать данные обучения
        
        Args:
            data: Исходные данные
            
        Returns:
            List[Dict[str, Any]]: Валидированные данные
        """
^
security/ai_agents/emergency_ml_analyzer.py:101:1: W293 blank line contains whitespace
        """
        Валидировать данные обучения
        
        Args:
            data: Исходные данные
            
        Returns:
            List[Dict[str, Any]]: Валидированные данные
        """
^
security/ai_agents/emergency_ml_analyzer.py:107:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_ml_analyzer.py:110:80: E501 line too long (116 > 79 characters)
                if not all(key in item for key in ['severity_score', 'time_score', 'location_score', 'type_score']):
                                                                               ^
security/ai_agents/emergency_ml_analyzer.py:112:1: W293 blank line contains whitespace
                
^
security/ai_agents/emergency_ml_analyzer.py:114:80: E501 line too long (140 > 79 characters)
                if not all(isinstance(item[key], (int, float)) for key in ['severity_score', 'time_score', 'location_score', 'type_score']):
                                                                               ^
security/ai_agents/emergency_ml_analyzer.py:116:1: W293 blank line contains whitespace
                
^
security/ai_agents/emergency_ml_analyzer.py:118:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_ml_analyzer.py:119:80: E501 line too long (90 > 79 characters)
            self.logger.info(f"Валидировано {len(validated_data)} из {len(data)} записей")
                                                                               ^
security/ai_agents/emergency_ml_analyzer.py:121:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_ml_analyzer.py:125:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_ml_analyzer.py:129:1: W293 blank line contains whitespace
        """
        Проанализировать экстренное событие
        
        Args:
            event: Событие для анализа
            
        Returns:
            Dict[str, Any]: Результаты анализа
        """
^
security/ai_agents/emergency_ml_analyzer.py:132:1: W293 blank line contains whitespace
        """
        Проанализировать экстренное событие
        
        Args:
            event: Событие для анализа
            
        Returns:
            Dict[str, Any]: Результаты анализа
        """
^
security/ai_agents/emergency_ml_analyzer.py:140:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_ml_analyzer.py:143:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_ml_analyzer.py:146:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_ml_analyzer.py:149:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_ml_analyzer.py:152:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_ml_analyzer.py:156:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_ml_analyzer.py:165:80: E501 line too long (96 > 79 characters)
                'risk_recommendations': self.risk_analyzer.get_risk_recommendations(risk_score),
                                                                               ^
security/ai_agents/emergency_ml_analyzer.py:168:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_ml_analyzer.py:171:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_ml_analyzer.py:175:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_ml_analyzer.py:179:1: W293 blank line contains whitespace
        """
        Подготовить данные события для анализа
        
        Args:
            event: Событие для подготовки
            
        Returns:
            Dict[str, Any]: Подготовленные данные
        """
^
security/ai_agents/emergency_ml_analyzer.py:182:1: W293 blank line contains whitespace
        """
        Подготовить данные события для анализа
        
        Args:
            event: Событие для подготовки
            
        Returns:
            Dict[str, Any]: Подготовленные данные
        """
^
security/ai_agents/emergency_ml_analyzer.py:189:80: E501 line too long (112 > 79 characters)
            latitude = coordinates[0] if isinstance(coordinates, (list, tuple)) and len(coordinates) >= 2 else 0
                                                                               ^
security/ai_agents/emergency_ml_analyzer.py:190:80: E501 line too long (113 > 79 characters)
            longitude = coordinates[1] if isinstance(coordinates, (list, tuple)) and len(coordinates) >= 2 else 0
                                                                               ^
security/ai_agents/emergency_ml_analyzer.py:191:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_ml_analyzer.py:194:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_ml_analyzer.py:206:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_ml_analyzer.py:214:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_ml_analyzer.py:218:80: E501 line too long (85 > 79 characters)
                'location_score': (latitude + longitude) / 2,  # Простая нормализация
                                                                               ^
security/ai_agents/emergency_ml_analyzer.py:226:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_ml_analyzer.py:230:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_ml_analyzer.py:231:80: E501 line too long (89 > 79 characters)
    def analyze_events_batch(self, events: List[EmergencyEvent]) -> List[Dict[str, Any]]:
                                                                               ^
security/ai_agents/emergency_ml_analyzer.py:234:1: W293 blank line contains whitespace
        """
        Проанализировать пакет событий
        
        Args:
            events: Список событий для анализа
            
        Returns:
            List[Dict[str, Any]]: Результаты анализа
        """
^
security/ai_agents/emergency_ml_analyzer.py:237:1: W293 blank line contains whitespace
        """
        Проанализировать пакет событий
        
        Args:
            events: Список событий для анализа
            
        Returns:
            List[Dict[str, Any]]: Результаты анализа
        """
^
security/ai_agents/emergency_ml_analyzer.py:244:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_ml_analyzer.py:246:80: E501 line too long (86 > 79 characters)
            result, processing_time = self.performance_analyzer.measure_response_time(
                                                                               ^
security/ai_agents/emergency_ml_analyzer.py:249:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_ml_analyzer.py:251:80: E501 line too long (86 > 79 characters)
            self.performance_analyzer.record_metrics(processing_time, processing_time)
                                                                               ^
security/ai_agents/emergency_ml_analyzer.py:252:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_ml_analyzer.py:254:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_ml_analyzer.py:258:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_ml_analyzer.py:259:80: E501 line too long (99 > 79 characters)
    def _analyze_events_batch_internal(self, events: List[EmergencyEvent]) -> List[Dict[str, Any]]:
                                                                               ^
security/ai_agents/emergency_ml_analyzer.py:263:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_ml_analyzer.py:267:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_ml_analyzer.py:269:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_ml_analyzer.py:273:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_ml_analyzer.py:277:1: W293 blank line contains whitespace
        """
        Получить статистику анализа
        
        Returns:
            Dict[str, Any]: Статистика анализа
        """
^
security/ai_agents/emergency_ml_analyzer.py:282:80: E501 line too long (86 > 79 characters)
            performance_stats = self.performance_analyzer.get_performance_statistics()
                                                                               ^
security/ai_agents/emergency_ml_analyzer.py:283:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_ml_analyzer.py:290:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_ml_analyzer.py:294:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_ml_analyzer.py:298:1: W293 blank line contains whitespace
        """
        Получить проблемы производительности
        
        Returns:
            List[str]: Список проблем
        """
^
security/ai_agents/emergency_ml_analyzer.py:303:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_ml_analyzer.py:307:1: W293 blank line contains whitespace
        """
        Получить рекомендации по производительности
        
        Returns:
            List[str]: Список рекомендаций
        """
^
security/ai_agents/emergency_ml_analyzer.py:312:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_ml_analyzer.py:316:1: W293 blank line contains whitespace
        """
        Очистить старые данные
        
        Args:
            days: Количество дней для хранения
            
        Returns:
            int: Количество удаленных записей
        """
^
security/ai_agents/emergency_ml_analyzer.py:319:1: W293 blank line contains whitespace
        """
        Очистить старые данные
        
        Args:
            days: Количество дней для хранения
            
        Returns:
            int: Количество удаленных записей
        """
^
security/ai_agents/emergency_ml_analyzer.py:325:80: E501 line too long (81 > 79 characters)
            cleaned_metrics = self.performance_analyzer.cleanup_old_metrics(days)
                                                                               ^
security/ai_agents/emergency_ml_analyzer.py:326:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_ml_analyzer.py:334:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_ml_analyzer.py:338:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_ml_analyzer.py:341:21: W292 no newline at end of file
            return 0                    ^
security/ai_agents/emergency_ml_models.py:12:1: F401 'typing.Tuple' imported but unused
from typing import List, Tuple, Dict, Any
^
security/ai_agents/emergency_ml_models.py:17:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_ml_models.py:21:1: W293 blank line contains whitespace
        """
        Инициализация детектора аномалий
        
        Args:
            contamination: Доля аномалий в данных
        """
^
security/ai_agents/emergency_ml_models.py:27:41: W291 trailing whitespace
            contamination=contamination, 
                                        ^
security/ai_agents/emergency_ml_models.py:31:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_ml_models.py:35:1: W293 blank line contains whitespace
        """
        Обучить детектор аномалий
        
        Args:
            data: Данные для обучения
            
        Returns:
            bool: True если обучение успешно
        """
^
security/ai_agents/emergency_ml_models.py:38:1: W293 blank line contains whitespace
        """
        Обучить детектор аномалий
        
        Args:
            data: Данные для обучения
            
        Returns:
            bool: True если обучение успешно
        """
^
security/ai_agents/emergency_ml_models.py:45:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_ml_models.py:50:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_ml_models.py:55:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_ml_models.py:58:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_ml_models.py:62:1: W293 blank line contains whitespace
        """
        Обнаружить аномалии в данных
        
        Args:
            data: Данные для анализа
            
        Returns:
            List[bool]: Список аномалий (True = аномалия)
        """
^
security/ai_agents/emergency_ml_models.py:65:1: W293 blank line contains whitespace
        """
        Обнаружить аномалии в данных
        
        Args:
            data: Данные для анализа
            
        Returns:
            List[bool]: Список аномалий (True = аномалия)
        """
^
security/ai_agents/emergency_ml_models.py:72:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_ml_models.py:76:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_ml_models.py:79:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_ml_models.py:82:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_ml_models.py:86:1: W293 blank line contains whitespace
        """
        Извлечь признаки из данных
        
        Args:
            data: Исходные данные
            
        Returns:
            np.ndarray: Матрица признаков
        """
^
security/ai_agents/emergency_ml_models.py:89:1: W293 blank line contains whitespace
        """
        Извлечь признаки из данных
        
        Args:
            data: Исходные данные
            
        Returns:
            np.ndarray: Матрица признаков
        """
^
security/ai_agents/emergency_ml_models.py:103:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_ml_models.py:111:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_ml_models.py:115:1: W293 blank line contains whitespace
        """
        Инициализация анализатора кластеров
        
        Args:
            eps: Максимальное расстояние между точками
            min_samples: Минимальное количество точек в кластере
        """
^
security/ai_agents/emergency_ml_models.py:125:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_ml_models.py:129:1: W293 blank line contains whitespace
        """
        Обучить анализатор кластеров
        
        Args:
            data: Данные для обучения
            
        Returns:
            bool: True если обучение успешно
        """
^
security/ai_agents/emergency_ml_models.py:132:1: W293 blank line contains whitespace
        """
        Обучить анализатор кластеров
        
        Args:
            data: Данные для обучения
            
        Returns:
            bool: True если обучение успешно
        """
^
security/ai_agents/emergency_ml_models.py:139:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_ml_models.py:144:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_ml_models.py:147:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_ml_models.py:152:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_ml_models.py:155:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_ml_models.py:159:1: W293 blank line contains whitespace
        """
        Проанализировать кластеры в данных
        
        Args:
            data: Данные для анализа
            
        Returns:
            List[int]: Метки кластеров
        """
^
security/ai_agents/emergency_ml_models.py:162:1: W293 blank line contains whitespace
        """
        Проанализировать кластеры в данных
        
        Args:
            data: Данные для анализа
            
        Returns:
            List[int]: Метки кластеров
        """
^
security/ai_agents/emergency_ml_models.py:169:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_ml_models.py:173:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_ml_models.py:176:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_ml_models.py:179:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_ml_models.py:183:1: W293 blank line contains whitespace
        """
        Извлечь признаки из данных
        
        Args:
            data: Исходные данные
            
        Returns:
            np.ndarray: Матрица признаков
        """
^
security/ai_agents/emergency_ml_models.py:186:1: W293 blank line contains whitespace
        """
        Извлечь признаки из данных
        
        Args:
            data: Исходные данные
            
        Returns:
            np.ndarray: Матрица признаков
        """
^
security/ai_agents/emergency_ml_models.py:200:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_ml_models.py:208:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_ml_models.py:212:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_ml_models.py:216:1: W293 blank line contains whitespace
        """
        Обучить распознаватель паттернов
        
        Args:
            data: Данные для обучения
            
        Returns:
            bool: True если обучение успешно
        """
^
security/ai_agents/emergency_ml_models.py:219:1: W293 blank line contains whitespace
        """
        Обучить распознаватель паттернов
        
        Args:
            data: Данные для обучения
            
        Returns:
            bool: True если обучение успешно
        """
^
security/ai_agents/emergency_ml_models.py:226:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_ml_models.py:231:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_ml_models.py:234:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_ml_models.py:238:1: W293 blank line contains whitespace
        """
        Распознать паттерны в данных
        
        Args:
            data: Данные для анализа
            
        Returns:
            Dict[str, Any]: Распознанные паттерны
        """
^
security/ai_agents/emergency_ml_models.py:241:1: W293 blank line contains whitespace
        """
        Распознать паттерны в данных
        
        Args:
            data: Данные для анализа
            
        Returns:
            Dict[str, Any]: Распознанные паттерны
        """
^
security/ai_agents/emergency_ml_models.py:248:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_ml_models.py:250:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_ml_models.py:253:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_ml_models.py:256:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_ml_models.py:259:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_ml_models.py:261:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_ml_models.py:264:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_ml_models.py:276:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_ml_models.py:277:80: E501 line too long (87 > 79 characters)
    def _analyze_temporal_patterns(self, data: List[Dict[str, Any]]) -> Dict[str, Any]:
                                                                               ^
security/ai_agents/emergency_ml_models.py:283:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_ml_models.py:289:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_ml_models.py:291:80: E501 line too long (90 > 79 characters)
            peak_hours = sorted(hour_counts.items(), key=lambda x: x[1], reverse=True)[:3]
                                                                               ^
security/ai_agents/emergency_ml_models.py:292:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_ml_models.py:296:80: E501 line too long (83 > 79 characters)
                'time_span': max(timestamps) - min(timestamps) if timestamps else 0
                                                                               ^
security/ai_agents/emergency_ml_models.py:300:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_ml_models.py:301:80: E501 line too long (86 > 79 characters)
    def _analyze_spatial_patterns(self, data: List[Dict[str, Any]]) -> Dict[str, Any]:
                                                                               ^
security/ai_agents/emergency_ml_models.py:304:77: W291 trailing whitespace
            locations = [(item.get('latitude', 0), item.get('longitude', 0)) 
                                                                            ^
security/ai_agents/emergency_ml_models.py:305:25: E128 continuation line under-indented for visual indent
                        for item in data if item.get('latitude') and item.get('longitude')]
                        ^
security/ai_agents/emergency_ml_models.py:305:80: E501 line too long (91 > 79 characters)
                        for item in data if item.get('latitude') and item.get('longitude')]
                                                                               ^
security/ai_agents/emergency_ml_models.py:306:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_ml_models.py:309:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_ml_models.py:313:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_ml_models.py:315:80: E501 line too long (85 > 79 characters)
            distances = [np.sqrt((loc[0] - center_lat)**2 + (loc[1] - center_lon)**2) 
                                                                               ^
security/ai_agents/emergency_ml_models.py:315:86: W291 trailing whitespace
            distances = [np.sqrt((loc[0] - center_lat)**2 + (loc[1] - center_lon)**2) 
                                                                                     ^
security/ai_agents/emergency_ml_models.py:316:25: E128 continuation line under-indented for visual indent
                        for loc in locations]
                        ^
security/ai_agents/emergency_ml_models.py:318:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_ml_models.py:326:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_ml_models.py:327:80: E501 line too long (83 > 79 characters)
    def _analyze_type_patterns(self, data: List[Dict[str, Any]]) -> Dict[str, Any]:
                                                                               ^
security/ai_agents/emergency_ml_models.py:334:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_ml_models.py:336:80: E501 line too long (88 > 79 characters)
            common_types = sorted(type_counts.items(), key=lambda x: x[1], reverse=True)
                                                                               ^
security/ai_agents/emergency_ml_models.py:337:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_ml_models.py:344:22: W292 no newline at end of file
            return {}                     ^
security/ai_agents/emergency_models.py:18:80: E501 line too long (80 > 79 characters)
    EmergencyRiskMetrics, EmergencyNotificationMetrics, EmergencyServiceMetrics,
                                                                               ^
security/ai_agents/emergency_models.py:35:25: W291 trailing whitespace
    'EmergencySeverity', 
                        ^
security/ai_agents/emergency_models.py:44:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_models.py:55:2: W292 no newline at end of file
] ^
security/ai_agents/emergency_notification_manager.py:10:1: F401 'typing.Optional' imported but unused
from typing import Dict, List, Optional, Any
^
security/ai_agents/emergency_notification_manager.py:12:1: F401 '.emergency_models.EmergencyResponse' imported but unused
from .emergency_models import EmergencyEvent, EmergencyContact, EmergencyResponse
^
security/ai_agents/emergency_notification_manager.py:12:80: E501 line too long (81 > 79 characters)
from .emergency_models import EmergencyEvent, EmergencyContact, EmergencyResponse
                                                                               ^
security/ai_agents/emergency_notification_manager.py:14:1: F401 '.emergency_time_utils.EmergencyTimeUtils' imported but unused
from .emergency_time_utils import EmergencyTimeUtils
^
security/ai_agents/emergency_notification_manager.py:19:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_notification_manager.py:29:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_notification_manager.py:30:65: W291 trailing whitespace
    def send_emergency_notification(self, event: EmergencyEvent, 
                                                                ^
security/ai_agents/emergency_notification_manager.py:31:35: E128 continuation line under-indented for visual indent
                                  contacts: List[EmergencyContact],
                                  ^
security/ai_agents/emergency_notification_manager.py:32:35: E128 continuation line under-indented for visual indent
                                  channels: List[str] = None) -> Dict[str, Any]:
                                  ^
security/ai_agents/emergency_notification_manager.py:32:80: E501 line too long (80 > 79 characters)
                                  channels: List[str] = None) -> Dict[str, Any]:
                                                                               ^
security/ai_agents/emergency_notification_manager.py:35:1: W293 blank line contains whitespace
        """
        Отправить уведомление об экстренной ситуации
        
        Args:
            event: Экстренное событие
            contacts: Список контактов для уведомления
            channels: Каналы уведомления
            
        Returns:
            Dict[str, Any]: Результат отправки уведомлений
        """
^
security/ai_agents/emergency_notification_manager.py:40:1: W293 blank line contains whitespace
        """
        Отправить уведомление об экстренной ситуации
        
        Args:
            event: Экстренное событие
            contacts: Список контактов для уведомления
            channels: Каналы уведомления
            
        Returns:
            Dict[str, Any]: Результат отправки уведомлений
        """
^
security/ai_agents/emergency_notification_manager.py:47:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_notification_manager.py:56:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_notification_manager.py:59:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_notification_manager.py:67:1: W293 blank line contains whitespace
                        
^
security/ai_agents/emergency_notification_manager.py:72:1: W293 blank line contains whitespace
                        
^
security/ai_agents/emergency_notification_manager.py:81:1: W293 blank line contains whitespace
                        
^
security/ai_agents/emergency_notification_manager.py:85:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_notification_manager.py:88:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_notification_manager.py:89:80: E501 line too long (94 > 79 characters)
            self.logger.info(f"Отправлено уведомлений: {results['successful_notifications']}")
                                                                               ^
security/ai_agents/emergency_notification_manager.py:91:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_notification_manager.py:95:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_notification_manager.py:97:37: E128 continuation line under-indented for visual indent
                                    message: str, channel: str,
                                    ^
security/ai_agents/emergency_notification_manager.py:98:37: E128 continuation line under-indented for visual indent
                                    event: EmergencyEvent) -> bool:
                                    ^
security/ai_agents/emergency_notification_manager.py:101:1: W293 blank line contains whitespace
        """
        Отправить уведомление конкретному контакту
        
        Args:
            contact: Контакт
            message: Сообщение
            channel: Канал уведомления
            event: Событие
            
        Returns:
            bool: True если отправлено успешно
        """
^
security/ai_agents/emergency_notification_manager.py:107:1: W293 blank line contains whitespace
        """
        Отправить уведомление конкретному контакту
        
        Args:
            contact: Контакт
            message: Сообщение
            channel: Канал уведомления
            event: Событие
            
        Returns:
            bool: True если отправлено успешно
        """
^
security/ai_agents/emergency_notification_manager.py:113:80: E501 line too long (80 > 79 characters)
                self.logger.warning(f"Неизвестный канал уведомления: {channel}")
                                                                               ^
security/ai_agents/emergency_notification_manager.py:115:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_notification_manager.py:118:80: E501 line too long (94 > 79 characters)
                self.logger.warning(f"Контакт {contact.name} недоступен для канала {channel}")
                                                                               ^
security/ai_agents/emergency_notification_manager.py:120:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_notification_manager.py:123:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_notification_manager.py:127:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_notification_manager.py:129:41: E128 continuation line under-indented for visual indent
                                        channel: str) -> bool:
                                        ^
security/ai_agents/emergency_notification_manager.py:132:1: W293 blank line contains whitespace
        """
        Проверить доступность контакта для канала
        
        Args:
            contact: Контакт
            channel: Канал уведомления
            
        Returns:
            bool: True если контакт доступен
        """
^
security/ai_agents/emergency_notification_manager.py:136:1: W293 blank line contains whitespace
        """
        Проверить доступность контакта для канала
        
        Args:
            contact: Контакт
            channel: Канал уведомления
            
        Returns:
            bool: True если контакт доступен
        """
^
security/ai_agents/emergency_notification_manager.py:142:1: W293 blank line contains whitespace
        
^
security/ai_agents/emergency_notification_manager.py:145:1: W293 blank line contains whitespace
        
^
security/ai_agents/emergency_notification_manager.py:148:1: W293 blank line contains whitespace
        
^
security/ai_agents/emergency_notification_manager.py:150:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_notification_manager.py:152:30: E128 continuation line under-indented for visual indent
                             message: str, event: EmergencyEvent) -> bool:
                             ^
security/ai_agents/emergency_notification_manager.py:155:1: W293 blank line contains whitespace
        """
        Отправить SMS уведомление
        
        Args:
            contact: Контакт
            message: Сообщение
            event: Событие
            
        Returns:
            bool: True если отправлено успешно
        """
^
security/ai_agents/emergency_notification_manager.py:160:1: W293 blank line contains whitespace
        """
        Отправить SMS уведомление
        
        Args:
            contact: Контакт
            message: Сообщение
            event: Событие
            
        Returns:
            bool: True если отправлено успешно
        """
^
security/ai_agents/emergency_notification_manager.py:166:80: E501 line too long (99 > 79 characters)
            self.logger.info(f"SMS отправлено {contact.name} ({contact.phone}): {message[:50]}...")
                                                                               ^
security/ai_agents/emergency_notification_manager.py:171:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_notification_manager.py:173:32: E128 continuation line under-indented for visual indent
                               message: str, event: EmergencyEvent) -> bool:
                               ^
security/ai_agents/emergency_notification_manager.py:176:1: W293 blank line contains whitespace
        """
        Отправить email уведомление
        
        Args:
            contact: Контакт
            message: Сообщение
            event: Событие
            
        Returns:
            bool: True если отправлено успешно
        """
^
security/ai_agents/emergency_notification_manager.py:181:1: W293 blank line contains whitespace
        """
        Отправить email уведомление
        
        Args:
            contact: Контакт
            message: Сообщение
            event: Событие
            
        Returns:
            bool: True если отправлено успешно
        """
^
security/ai_agents/emergency_notification_manager.py:187:80: E501 line too long (100 > 79 characters)
            self.logger.info(f"Email отправлен {contact.name} ({contact.email}): {message[:50]}...")
                                                                               ^
security/ai_agents/emergency_notification_manager.py:192:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_notification_manager.py:194:31: E128 continuation line under-indented for visual indent
                              message: str, event: EmergencyEvent) -> bool:
                              ^
security/ai_agents/emergency_notification_manager.py:197:1: W293 blank line contains whitespace
        """
        Отправить push уведомление
        
        Args:
            contact: Контакт
            message: Сообщение
            event: Событие
            
        Returns:
            bool: True если отправлено успешно
        """
^
security/ai_agents/emergency_notification_manager.py:202:1: W293 blank line contains whitespace
        """
        Отправить push уведомление
        
        Args:
            contact: Контакт
            message: Сообщение
            event: Событие
            
        Returns:
            bool: True если отправлено успешно
        """
^
security/ai_agents/emergency_notification_manager.py:208:80: E501 line too long (94 > 79 characters)
            self.logger.info(f"Push уведомление отправлено {contact.name}: {message[:50]}...")
                                                                               ^
security/ai_agents/emergency_notification_manager.py:213:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_notification_manager.py:215:31: E128 continuation line under-indented for visual indent
                              message: str, event: EmergencyEvent) -> bool:
                              ^
security/ai_agents/emergency_notification_manager.py:218:1: W293 blank line contains whitespace
        """
        Отправить голосовое уведомление
        
        Args:
            contact: Контакт
            message: Сообщение
            event: Событие
            
        Returns:
            bool: True если отправлено успешно
        """
^
security/ai_agents/emergency_notification_manager.py:223:1: W293 blank line contains whitespace
        """
        Отправить голосовое уведомление
        
        Args:
            contact: Контакт
            message: Сообщение
            event: Событие
            
        Returns:
            bool: True если отправлено успешно
        """
^
security/ai_agents/emergency_notification_manager.py:229:80: E501 line too long (98 > 79 characters)
            self.logger.info(f"Голосовое уведомление отправлено {contact.name} ({contact.phone})")
                                                                               ^
security/ai_agents/emergency_notification_manager.py:234:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_notification_manager.py:235:80: E501 line too long (80 > 79 characters)
    def get_notification_history(self, hours: int = 24) -> List[Dict[str, Any]]:
                                                                               ^
security/ai_agents/emergency_notification_manager.py:238:1: W293 blank line contains whitespace
        """
        Получить историю уведомлений
        
        Args:
            hours: Количество часов назад
            
        Returns:
            List[Dict[str, Any]]: История уведомлений
        """
^
security/ai_agents/emergency_notification_manager.py:241:1: W293 blank line contains whitespace
        """
        Получить историю уведомлений
        
        Args:
            hours: Количество часов назад
            
        Returns:
            List[Dict[str, Any]]: История уведомлений
        """
^
security/ai_agents/emergency_notification_manager.py:247:65: W291 trailing whitespace
            return [notif for notif in self.notification_history 
                                                                ^
security/ai_agents/emergency_notification_manager.py:248:20: E128 continuation line under-indented for visual indent
                   if datetime.fromisoformat(notif['notification_details'][0]['timestamp']).timestamp() >= cutoff_time]
                   ^
security/ai_agents/emergency_notification_manager.py:248:80: E501 line too long (119 > 79 characters)
                   if datetime.fromisoformat(notif['notification_details'][0]['timestamp']).timestamp() >= cutoff_time]
                                                                               ^
security/ai_agents/emergency_notification_manager.py:252:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_notification_manager.py:256:1: W293 blank line contains whitespace
        """
        Получить статистику уведомлений
        
        Returns:
            Dict[str, Any]: Статистика уведомлений
        """
^
security/ai_agents/emergency_notification_manager.py:261:73: W291 trailing whitespace
            total_notifications = sum(len(notif['notification_details']) 
                                                                        ^
security/ai_agents/emergency_notification_manager.py:262:37: E128 continuation line under-indented for visual indent
                                    for notif in self.notification_history)
                                    ^
security/ai_agents/emergency_notification_manager.py:263:77: W291 trailing whitespace
            successful_notifications = sum(notif['successful_notifications'] 
                                                                            ^
security/ai_agents/emergency_notification_manager.py:264:42: E128 continuation line under-indented for visual indent
                                         for notif in self.notification_history)
                                         ^
security/ai_agents/emergency_notification_manager.py:264:80: E501 line too long (80 > 79 characters)
                                         for notif in self.notification_history)
                                                                               ^
security/ai_agents/emergency_notification_manager.py:265:69: W291 trailing whitespace
            failed_notifications = sum(notif['failed_notifications'] 
                                                                    ^
security/ai_agents/emergency_notification_manager.py:266:37: E128 continuation line under-indented for visual indent
                                    for notif in self.notification_history)
                                    ^
security/ai_agents/emergency_notification_manager.py:267:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_notification_manager.py:275:1: W293 blank line contains whitespace
                    
^
security/ai_agents/emergency_notification_manager.py:280:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_notification_manager.py:285:80: E501 line too long (95 > 79 characters)
                'success_rate': (successful_notifications / max(total_notifications, 1)) * 100,
                                                                               ^
security/ai_agents/emergency_notification_manager.py:290:22: W292 no newline at end of file
            return {}                     ^
security/ai_agents/emergency_performance_analyzer.py:11:1: F401 'typing.Optional' imported but unused
from typing import Dict, List, Any, Optional
^
security/ai_agents/emergency_performance_analyzer.py:29:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_performance_analyzer.py:39:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_performance_analyzer.py:43:1: W293 blank line contains whitespace
        """
        Измерить время отклика функции
        
        Args:
            func: Функция для измерения
            *args: Аргументы функции
            **kwargs: Именованные аргументы функции
            
        Returns:
            tuple: (результат функции, время выполнения)
        """
^
security/ai_agents/emergency_performance_analyzer.py:48:1: W293 blank line contains whitespace
        """
        Измерить время отклика функции
        
        Args:
            func: Функция для измерения
            *args: Аргументы функции
            **kwargs: Именованные аргументы функции
            
        Returns:
            tuple: (результат функции, время выполнения)
        """
^
security/ai_agents/emergency_performance_analyzer.py:56:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_performance_analyzer.py:58:80: E501 line too long (91 > 79 characters)
            self.logger.debug(f"Функция {func.__name__} выполнена за {response_time:.4f}с")
                                                                               ^
security/ai_agents/emergency_performance_analyzer.py:59:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_performance_analyzer.py:61:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_performance_analyzer.py:65:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_performance_analyzer.py:69:1: W293 blank line contains whitespace
        """
        Измерить время обработки событий
        
        Args:
            events: Список событий для обработки
            
        Returns:
            float: Время обработки в секундах
        """
^
security/ai_agents/emergency_performance_analyzer.py:72:1: W293 blank line contains whitespace
        """
        Измерить время обработки событий
        
        Args:
            events: Список событий для обработки
            
        Returns:
            float: Время обработки в секундах
        """
^
security/ai_agents/emergency_performance_analyzer.py:78:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_performance_analyzer.py:82:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_performance_analyzer.py:85:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_performance_analyzer.py:86:80: E501 line too long (92 > 79 characters)
            self.logger.debug(f"Обработано {len(events)} событий за {processing_time:.4f}с")
                                                                               ^
security/ai_agents/emergency_performance_analyzer.py:88:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_performance_analyzer.py:92:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_performance_analyzer.py:100:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_performance_analyzer.py:104:1: W293 blank line contains whitespace
        """
        Получить использование памяти
        
        Returns:
            float: Использование памяти в MB
        """
^
security/ai_agents/emergency_performance_analyzer.py:118:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_performance_analyzer.py:122:1: W293 blank line contains whitespace
        """
        Получить использование CPU
        
        Returns:
            float: Использование CPU в %
        """
^
security/ai_agents/emergency_performance_analyzer.py:134:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_performance_analyzer.py:135:51: W291 trailing whitespace
    def record_metrics(self, response_time: float, 
                                                  ^
security/ai_agents/emergency_performance_analyzer.py:136:23: E128 continuation line under-indented for visual indent
                      processing_time: float) -> None:
                      ^
security/ai_agents/emergency_performance_analyzer.py:139:1: W293 blank line contains whitespace
        """
        Записать метрики производительности
        
        Args:
            response_time: Время отклика
            processing_time: Время обработки
        """
^
security/ai_agents/emergency_performance_analyzer.py:152:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_performance_analyzer.py:154:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_performance_analyzer.py:158:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_performance_analyzer.py:161:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_performance_analyzer.py:165:1: W293 blank line contains whitespace
        """
        Получить статистику производительности
        
        Args:
            hours: Количество часов для анализа
            
        Returns:
            Dict[str, Any]: Статистика производительности
        """
^
security/ai_agents/emergency_performance_analyzer.py:168:1: W293 blank line contains whitespace
        """
        Получить статистику производительности
        
        Args:
            hours: Количество часов для анализа
            
        Returns:
            Dict[str, Any]: Статистика производительности
        """
^
security/ai_agents/emergency_performance_analyzer.py:175:48: W291 trailing whitespace
                m for m in self.metrics_history 
                                               ^
security/ai_agents/emergency_performance_analyzer.py:178:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_performance_analyzer.py:181:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_performance_analyzer.py:187:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_performance_analyzer.py:215:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_performance_analyzer.py:217:80: E501 line too long (85 > 79 characters)
            self.logger.error(f"Ошибка получения статистики производительности: {e}")
                                                                               ^
security/ai_agents/emergency_performance_analyzer.py:219:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_performance_analyzer.py:223:1: W293 blank line contains whitespace
        """
        Проверить проблемы производительности
        
        Returns:
            List[str]: Список проблем
        """
^
security/ai_agents/emergency_performance_analyzer.py:230:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_performance_analyzer.py:233:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_performance_analyzer.py:235:80: E501 line too long (92 > 79 characters)
            if stats['response_time']['avg'] > self.performance_thresholds['response_time']:
                                                                               ^
security/ai_agents/emergency_performance_analyzer.py:236:80: E501 line too long (93 > 79 characters)
                issues.append(f"Высокое время отклика: {stats['response_time']['avg']:.2f}с")
                                                                               ^
security/ai_agents/emergency_performance_analyzer.py:237:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_performance_analyzer.py:239:80: E501 line too long (96 > 79 characters)
            if stats['processing_time']['avg'] > self.performance_thresholds['processing_time']:
                                                                               ^
security/ai_agents/emergency_performance_analyzer.py:240:80: E501 line too long (97 > 79 characters)
                issues.append(f"Высокое время обработки: {stats['processing_time']['avg']:.2f}с")
                                                                               ^
security/ai_agents/emergency_performance_analyzer.py:241:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_performance_analyzer.py:243:80: E501 line too long (90 > 79 characters)
            if stats['memory_usage']['avg'] > self.performance_thresholds['memory_usage']:
                                                                               ^
security/ai_agents/emergency_performance_analyzer.py:244:80: E501 line too long (100 > 79 characters)
                issues.append(f"Высокое использование памяти: {stats['memory_usage']['avg']:.2f}MB")
                                                                               ^
security/ai_agents/emergency_performance_analyzer.py:245:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_performance_analyzer.py:247:80: E501 line too long (84 > 79 characters)
            if stats['cpu_usage']['avg'] > self.performance_thresholds['cpu_usage']:
                                                                               ^
security/ai_agents/emergency_performance_analyzer.py:248:80: E501 line too long (93 > 79 characters)
                issues.append(f"Высокое использование CPU: {stats['cpu_usage']['avg']:.2f}%")
                                                                               ^
security/ai_agents/emergency_performance_analyzer.py:249:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_performance_analyzer.py:251:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_performance_analyzer.py:253:80: E501 line too long (81 > 79 characters)
            self.logger.error(f"Ошибка проверки проблем производительности: {e}")
                                                                               ^
security/ai_agents/emergency_performance_analyzer.py:255:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_performance_analyzer.py:259:1: W293 blank line contains whitespace
        """
        Получить рекомендации по улучшению производительности
        
        Returns:
            List[str]: Список рекомендаций
        """
^
security/ai_agents/emergency_performance_analyzer.py:266:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_performance_analyzer.py:270:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_performance_analyzer.py:278:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_performance_analyzer.py:285:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_performance_analyzer.py:292:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_performance_analyzer.py:299:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_performance_analyzer.py:301:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_performance_analyzer.py:305:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_performance_analyzer.py:309:1: W293 blank line contains whitespace
        """
        Очистить старые метрики
        
        Args:
            days: Количество дней для хранения
            
        Returns:
            int: Количество удаленных записей
        """
^
security/ai_agents/emergency_performance_analyzer.py:312:1: W293 blank line contains whitespace
        """
        Очистить старые метрики
        
        Args:
            days: Количество дней для хранения
            
        Returns:
            int: Количество удаленных записей
        """
^
security/ai_agents/emergency_performance_analyzer.py:319:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_performance_analyzer.py:321:48: W291 trailing whitespace
                m for m in self.metrics_history 
                                               ^
security/ai_agents/emergency_performance_analyzer.py:324:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_performance_analyzer.py:328:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_performance_analyzer.py:331:21: W292 no newline at end of file
            return 0                    ^
security/ai_agents/emergency_response_system.py:32:1: F401 'json' imported but unused
import json
^
security/ai_agents/emergency_response_system.py:33:1: F401 'smtplib' imported but unused
import smtplib
^
security/ai_agents/emergency_response_system.py:34:1: F401 'requests' imported but unused
import requests
^
security/ai_agents/emergency_response_system.py:35:1: F401 'typing.Tuple' imported but unused
from typing import Dict, List, Optional, Any, Tuple
^
security/ai_agents/emergency_response_system.py:38:1: F401 'datetime.timedelta' imported but unused
from datetime import datetime, timedelta
^
security/ai_agents/emergency_response_system.py:39:1: F401 'hashlib' imported but unused
import hashlib
^
security/ai_agents/emergency_response_system.py:125:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_response_system.py:128:80: E501 line too long (97 > 79 characters)
        self.logger = logging.getLogger(f"{self.__class__.__module__}.{self.__class__.__name__}")
                                                                               ^
security/ai_agents/emergency_response_system.py:129:1: W293 blank line contains whitespace
        
^
security/ai_agents/emergency_response_system.py:132:1: W293 blank line contains whitespace
        
^
security/ai_agents/emergency_response_system.py:135:1: W293 blank line contains whitespace
        
^
security/ai_agents/emergency_response_system.py:142:1: W293 blank line contains whitespace
        
^
security/ai_agents/emergency_response_system.py:145:1: W293 blank line contains whitespace
        
^
security/ai_agents/emergency_response_system.py:148:1: W293 blank line contains whitespace
        
^
security/ai_agents/emergency_response_system.py:161:80: E501 line too long (122 > 79 characters)
                notification_channels=[NotificationChannel.PUSH, NotificationChannel.SMS, NotificationChannel.PHONE_CALL],
                                                                               ^
security/ai_agents/emergency_response_system.py:171:80: E501 line too long (103 > 79 characters)
                notification_channels=[NotificationChannel.PUSH, NotificationChannel.APP_NOTIFICATION],
                                                                               ^
security/ai_agents/emergency_response_system.py:181:80: E501 line too long (96 > 79 characters)
                notification_channels=[NotificationChannel.PHONE_CALL, NotificationChannel.SMS],
                                                                               ^
security/ai_agents/emergency_response_system.py:214:14: W291 trailing whitespace
        self, 
             ^
security/ai_agents/emergency_response_system.py:215:25: W291 trailing whitespace
        elderly_id: str, 
                        ^
security/ai_agents/emergency_response_system.py:220:1: W293 blank line contains whitespace
        """
        Активация экстренного режима
        
        Args:
            elderly_id: ID пожилого человека
            alert: Экстренное уведомление
            
        Returns:
            bool: Успешность активации
        """
^
security/ai_agents/emergency_response_system.py:224:1: W293 blank line contains whitespace
        """
        Активация экстренного режима
        
        Args:
            elderly_id: ID пожилого человека
            alert: Экстренное уведомление
            
        Returns:
            bool: Успешность активации
        """
^
security/ai_agents/emergency_response_system.py:229:80: E501 line too long (81 > 79 characters)
            self.logger.warning(f"Активация экстренного режима для {elderly_id}")
                                                                               ^
security/ai_agents/emergency_response_system.py:230:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_response_system.py:237:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_response_system.py:240:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_response_system.py:244:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_response_system.py:246:80: E501 line too long (99 > 79 characters)
            if alert.emergency_type in [EmergencyType.FINANCIAL_THEFT, EmergencyType.BANKING_SCAM]:
                                                                               ^
security/ai_agents/emergency_response_system.py:248:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_response_system.py:251:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_response_system.py:255:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_response_system.py:256:80: E501 line too long (81 > 79 characters)
            self.logger.warning(f"Экстренный режим активирован для {elderly_id}")
                                                                               ^
security/ai_agents/emergency_response_system.py:258:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_response_system.py:264:14: W291 trailing whitespace
        self, 
             ^
security/ai_agents/emergency_response_system.py:265:25: W291 trailing whitespace
        elderly_id: str, 
                        ^
security/ai_agents/emergency_response_system.py:266:22: W291 trailing whitespace
        message: str, 
                     ^
security/ai_agents/emergency_response_system.py:271:1: W293 blank line contains whitespace
        """
        Уведомление семьи
        
        Args:
            elderly_id: ID пожилого человека
            message: Сообщение
            priority: Приоритет уведомления
            
        Returns:
            bool: Успешность уведомления
        """
^
security/ai_agents/emergency_response_system.py:276:1: W293 blank line contains whitespace
        """
        Уведомление семьи
        
        Args:
            elderly_id: ID пожилого человека
            message: Сообщение
            priority: Приоритет уведомления
            
        Returns:
            bool: Успешность уведомления
        """
^
security/ai_agents/emergency_response_system.py:282:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_response_system.py:293:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_response_system.py:296:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_response_system.py:299:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_response_system.py:301:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_response_system.py:309:1: W293 blank line contains whitespace
        """
        Блокировка номера телефона
        
        Args:
            phone_number: Номер телефона
            
        Returns:
            bool: Успешность блокировки
        """
^
security/ai_agents/emergency_response_system.py:312:1: W293 blank line contains whitespace
        """
        Блокировка номера телефона
        
        Args:
            phone_number: Номер телефона
            
        Returns:
            bool: Успешность блокировки
        """
^
security/ai_agents/emergency_response_system.py:318:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_response_system.py:321:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_response_system.py:324:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_response_system.py:327:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_response_system.py:330:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_response_system.py:335:80: E501 line too long (85 > 79 characters)
    async def _notify_family_emergency(self, elderly_id: str, alert: EmergencyAlert):
                                                                               ^
security/ai_agents/emergency_response_system.py:342:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_response_system.py:344:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_response_system.py:346:80: E501 line too long (86 > 79 characters)
            self.logger.error(f"Ошибка уведомления семьи об экстренной ситуации: {e}")
                                                                               ^
security/ai_agents/emergency_response_system.py:352:13: F841 local variable 'total_contacts' is assigned to but never used
            total_contacts = len([c for c in self.family_contacts.values() if c.is_active])
            ^
security/ai_agents/emergency_response_system.py:352:80: E501 line too long (91 > 79 characters)
            total_contacts = len([c for c in self.family_contacts.values() if c.is_active])
                                                                               ^
security/ai_agents/emergency_response_system.py:353:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_response_system.py:358:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_response_system.py:360:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_response_system.py:366:14: W291 trailing whitespace
        self, 
             ^
security/ai_agents/emergency_response_system.py:367:32: W291 trailing whitespace
        contact: FamilyContact, 
                               ^
security/ai_agents/emergency_response_system.py:373:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_response_system.py:377:80: E501 line too long (81 > 79 characters)
                    success |= await self._send_push_notification(contact, alert)
                                                                               ^
security/ai_agents/emergency_response_system.py:379:80: E501 line too long (80 > 79 characters)
                    success |= await self._send_sms_notification(contact, alert)
                                                                               ^
security/ai_agents/emergency_response_system.py:381:80: E501 line too long (82 > 79 characters)
                    success |= await self._send_email_notification(contact, alert)
                                                                               ^
security/ai_agents/emergency_response_system.py:383:80: E501 line too long (82 > 79 characters)
                    success |= await self._send_phone_notification(contact, alert)
                                                                               ^
security/ai_agents/emergency_response_system.py:385:80: E501 line too long (80 > 79 characters)
                    success |= await self._send_app_notification(contact, alert)
                                                                               ^
security/ai_agents/emergency_response_system.py:386:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_response_system.py:388:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_response_system.py:393:80: E501 line too long (99 > 79 characters)
    async def _send_push_notification(self, contact: FamilyContact, alert: EmergencyAlert) -> bool:
                                                                               ^
security/ai_agents/emergency_response_system.py:397:80: E501 line too long (90 > 79 characters)
            self.logger.info(f"Push-уведомление отправлено {contact.name}: {alert.title}")
                                                                               ^
security/ai_agents/emergency_response_system.py:403:80: E501 line too long (98 > 79 characters)
    async def _send_sms_notification(self, contact: FamilyContact, alert: EmergencyAlert) -> bool:
                                                                               ^
security/ai_agents/emergency_response_system.py:413:80: E501 line too long (100 > 79 characters)
    async def _send_email_notification(self, contact: FamilyContact, alert: EmergencyAlert) -> bool:
                                                                               ^
security/ai_agents/emergency_response_system.py:423:80: E501 line too long (100 > 79 characters)
    async def _send_phone_notification(self, contact: FamilyContact, alert: EmergencyAlert) -> bool:
                                                                               ^
security/ai_agents/emergency_response_system.py:433:80: E501 line too long (98 > 79 characters)
    async def _send_app_notification(self, contact: FamilyContact, alert: EmergencyAlert) -> bool:
                                                                               ^
security/ai_agents/emergency_response_system.py:437:80: E501 line too long (87 > 79 characters)
            self.logger.info(f"Уведомление в приложение {contact.name}: {alert.title}")
                                                                               ^
security/ai_agents/emergency_response_system.py:447:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_response_system.py:450:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_response_system.py:453:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_response_system.py:457:80: E501 line too long (90 > 79 characters)
    async def _activate_protective_measures(self, elderly_id: str, alert: EmergencyAlert):
                                                                               ^
security/ai_agents/emergency_response_system.py:461:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_response_system.py:469:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_response_system.py:471:80: E501 line too long (80 > 79 characters)
                await self._execute_protective_action(elderly_id, action, alert)
                                                                               ^
security/ai_agents/emergency_response_system.py:472:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_response_system.py:477:14: W291 trailing whitespace
        self, 
             ^
security/ai_agents/emergency_response_system.py:478:25: W291 trailing whitespace
        elderly_id: str, 
                        ^
security/ai_agents/emergency_response_system.py:479:21: W291 trailing whitespace
        action: str, 
                    ^
security/ai_agents/emergency_response_system.py:485:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_response_system.py:488:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_response_system.py:495:80: E501 line too long (84 > 79 characters)
            self.logger.info(f"Интеграция с системой блокировки для {phone_number}")
                                                                               ^
security/ai_agents/emergency_response_system.py:496:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_response_system.py:499:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_response_system.py:508:80: E501 line too long (84 > 79 characters)
                self.logger.info(f"Экстренный режим деактивирован для {elderly_id}")
                                                                               ^
security/ai_agents/emergency_response_system.py:564:1: W293 blank line contains whitespace
        
^
security/ai_agents/emergency_response_system.py:567:27: W291 trailing whitespace
            "elderly_001", 
                          ^
security/ai_agents/emergency_response_system.py:568:52: W291 trailing whitespace
            "Обнаружена подозрительная активность", 
                                                   ^
security/ai_agents/emergency_response_system.py:572:1: W293 blank line contains whitespace
        
^
security/ai_agents/emergency_response_system.py:576:1: W293 blank line contains whitespace
        
^
security/ai_agents/emergency_response_system.py:587:1: W293 blank line contains whitespace
        
^
security/ai_agents/emergency_response_system.py:590:1: W293 blank line contains whitespace
        
^
security/ai_agents/emergency_response_system.py:594:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_response_system.py:596:50: W292 no newline at end of file
    asyncio.run(test_emergency_response_system())                                                 ^
security/ai_agents/emergency_risk_analyzer.py:10:1: F401 'typing.Optional' imported but unused
from typing import Dict, List, Any, Tuple, Optional
^
security/ai_agents/emergency_risk_analyzer.py:13:1: F401 '.emergency_time_utils.TimePeriodAnalyzer' imported but unused
from .emergency_time_utils import TimeBasedRiskAnalyzer, TimePeriodAnalyzer
^
security/ai_agents/emergency_risk_analyzer.py:18:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_risk_analyzer.py:26:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_risk_analyzer.py:30:1: W293 blank line contains whitespace
        """
        Рассчитать оценку риска для события
        
        Args:
            event: Экстренное событие
            
        Returns:
            float: Оценка риска (0.0-1.0)
        """
^
security/ai_agents/emergency_risk_analyzer.py:33:1: W293 blank line contains whitespace
        """
        Рассчитать оценку риска для события
        
        Args:
            event: Экстренное событие
            
        Returns:
            float: Оценка риска (0.0-1.0)
        """
^
security/ai_agents/emergency_risk_analyzer.py:39:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_risk_analyzer.py:43:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_risk_analyzer.py:47:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_risk_analyzer.py:51:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_risk_analyzer.py:55:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_risk_analyzer.py:57:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_risk_analyzer.py:60:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_risk_analyzer.py:67:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_risk_analyzer.py:69:80: E501 line too long (82 > 79 characters)
            return TimeBasedRiskAnalyzer.calculate_time_risk_factor(hour, weekday)
                                                                               ^
security/ai_agents/emergency_risk_analyzer.py:72:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_risk_analyzer.py:79:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_risk_analyzer.py:83:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_risk_analyzer.py:85:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_risk_analyzer.py:89:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_risk_analyzer.py:96:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_risk_analyzer.py:106:1: W293 blank line contains whitespace
                
^
security/ai_agents/emergency_risk_analyzer.py:109:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_risk_analyzer.py:123:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_risk_analyzer.py:127:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_risk_analyzer.py:138:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_risk_analyzer.py:142:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_risk_analyzer.py:146:80: E501 line too long (87 > 79 characters)
            {'name': 'Аэропорт', 'coordinates': (55.7558, 37.6176), 'risk_level': 0.8},
                                                                               ^
security/ai_agents/emergency_risk_analyzer.py:147:80: E501 line too long (85 > 79 characters)
            {'name': 'Вокзал', 'coordinates': (55.7558, 37.6176), 'risk_level': 0.7},
                                                                               ^
security/ai_agents/emergency_risk_analyzer.py:148:80: E501 line too long (84 > 79 characters)
            {'name': 'Метро', 'coordinates': (55.7558, 37.6176), 'risk_level': 0.6},
                                                                               ^
security/ai_agents/emergency_risk_analyzer.py:149:80: E501 line too long (92 > 79 characters)
            {'name': 'Торговый центр', 'coordinates': (55.7558, 37.6176), 'risk_level': 0.5}
                                                                               ^
security/ai_agents/emergency_risk_analyzer.py:151:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_risk_analyzer.py:152:63: W291 trailing whitespace
    def _calculate_distance(self, coord1: Tuple[float, float], 
                                                              ^
security/ai_agents/emergency_risk_analyzer.py:153:27: E128 continuation line under-indented for visual indent
                          coord2: Tuple[float, float]) -> float:
                          ^
security/ai_agents/emergency_risk_analyzer.py:162:80: E501 line too long (98 > 79 characters)
            return np.sqrt((lat2 - lat1)**2 + (lon2 - lon1)**2) * 111  # Примерно 111 км на градус
                                                                               ^
security/ai_agents/emergency_risk_analyzer.py:163:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_risk_analyzer.py:167:1: W293 blank line contains whitespace
        """
        Получить уровень риска по оценке
        
        Args:
            risk_score: Оценка риска (0.0-1.0)
            
        Returns:
            str: Уровень риска
        """
^
security/ai_agents/emergency_risk_analyzer.py:170:1: W293 blank line contains whitespace
        """
        Получить уровень риска по оценке
        
        Args:
            risk_score: Оценка риска (0.0-1.0)
            
        Returns:
            str: Уровень риска
        """
^
security/ai_agents/emergency_risk_analyzer.py:182:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_risk_analyzer.py:183:64: W291 trailing whitespace
    def analyze_risk_trends(self, events: List[EmergencyEvent], 
                                                               ^
security/ai_agents/emergency_risk_analyzer.py:184:27: E128 continuation line under-indented for visual indent
                          days: int = 7) -> Dict[str, Any]:
                          ^
security/ai_agents/emergency_risk_analyzer.py:187:1: W293 blank line contains whitespace
        """
        Анализировать тренды рисков
        
        Args:
            events: Список событий
            days: Количество дней для анализа
            
        Returns:
            Dict[str, Any]: Анализ трендов
        """
^
security/ai_agents/emergency_risk_analyzer.py:191:1: W293 blank line contains whitespace
        """
        Анализировать тренды рисков
        
        Args:
            events: Список событий
            days: Количество дней для анализа
            
        Returns:
            Dict[str, Any]: Анализ трендов
        """
^
security/ai_agents/emergency_risk_analyzer.py:198:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_risk_analyzer.py:202:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_risk_analyzer.py:205:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_risk_analyzer.py:207:80: E501 line too long (87 > 79 characters)
            risk_scores = [self.calculate_risk_score(event) for event in recent_events]
                                                                               ^
security/ai_agents/emergency_risk_analyzer.py:208:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_risk_analyzer.py:213:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_risk_analyzer.py:221:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_risk_analyzer.py:224:41: W291 trailing whitespace
                str(day): np.mean(risks) 
                                        ^
security/ai_agents/emergency_risk_analyzer.py:227:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_risk_analyzer.py:234:80: E501 line too long (88 > 79 characters)
                'risk_trend': self._calculate_risk_trend(list(daily_avg_risks.values()))
                                                                               ^
security/ai_agents/emergency_risk_analyzer.py:236:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_risk_analyzer.py:239:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_risk_analyzer.py:245:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_risk_analyzer.py:249:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_risk_analyzer.py:252:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_risk_analyzer.py:259:1: W293 blank line contains whitespace
                
^
security/ai_agents/emergency_risk_analyzer.py:262:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_risk_analyzer.py:266:1: W293 blank line contains whitespace
        """
        Получить рекомендации по снижению риска
        
        Args:
            risk_score: Оценка риска
            
        Returns:
            List[str]: Список рекомендаций
        """
^
security/ai_agents/emergency_risk_analyzer.py:269:1: W293 blank line contains whitespace
        """
        Получить рекомендации по снижению риска
        
        Args:
            risk_score: Оценка риска
            
        Returns:
            List[str]: Список рекомендаций
        """
^
security/ai_agents/emergency_risk_analyzer.py:274:1: W293 blank line contains whitespace
        
^
security/ai_agents/emergency_risk_analyzer.py:298:1: W293 blank line contains whitespace
        
^
security/ai_agents/emergency_risk_analyzer.py:299:31: W292 no newline at end of file
        return recommendations                              ^
security/ai_agents/emergency_security_utils.py:10:1: F401 'typing.List' imported but unused
from typing import Dict, Any, List
^
security/ai_agents/emergency_security_utils.py:15:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_security_utils.py:20:1: W293 blank line contains whitespace
        """
        Очистить текст от потенциально опасных символов
        
        Args:
            text: Исходный текст
            
        Returns:
            str: Очищенный текст
        """
^
security/ai_agents/emergency_security_utils.py:23:1: W293 blank line contains whitespace
        """
        Очистить текст от потенциально опасных символов
        
        Args:
            text: Исходный текст
            
        Returns:
            str: Очищенный текст
        """
^
security/ai_agents/emergency_security_utils.py:29:1: W293 blank line contains whitespace
        
^
security/ai_agents/emergency_security_utils.py:32:1: W293 blank line contains whitespace
        
^
security/ai_agents/emergency_security_utils.py:35:1: W293 blank line contains whitespace
        
^
security/ai_agents/emergency_security_utils.py:38:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_security_utils.py:43:1: W293 blank line contains whitespace
        """
        Очистить номер телефона
        
        Args:
            phone: Исходный номер
            
        Returns:
            str: Очищенный номер
        """
^
security/ai_agents/emergency_security_utils.py:46:1: W293 blank line contains whitespace
        """
        Очистить номер телефона
        
        Args:
            phone: Исходный номер
            
        Returns:
            str: Очищенный номер
        """
^
security/ai_agents/emergency_security_utils.py:52:1: W293 blank line contains whitespace
        
^
security/ai_agents/emergency_security_utils.py:55:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_security_utils.py:60:1: W293 blank line contains whitespace
        """
        Очистить email адрес
        
        Args:
            email: Исходный email
            
        Returns:
            str: Очищенный email
        """
^
security/ai_agents/emergency_security_utils.py:63:1: W293 blank line contains whitespace
        """
        Очистить email адрес
        
        Args:
            email: Исходный email
            
        Returns:
            str: Очищенный email
        """
^
security/ai_agents/emergency_security_utils.py:69:1: W293 blank line contains whitespace
        
^
security/ai_agents/emergency_security_utils.py:76:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_security_utils.py:81:1: W293 blank line contains whitespace
        """
        Валидировать описание экстренной ситуации
        
        Args:
            description: Описание для проверки
            
        Returns:
            bool: True если описание безопасно
        """
^
security/ai_agents/emergency_security_utils.py:84:1: W293 blank line contains whitespace
        """
        Валидировать описание экстренной ситуации
        
        Args:
            description: Описание для проверки
            
        Returns:
            bool: True если описание безопасно
        """
^
security/ai_agents/emergency_security_utils.py:90:1: W293 blank line contains whitespace
        
^
security/ai_agents/emergency_security_utils.py:94:1: W293 blank line contains whitespace
        
^
security/ai_agents/emergency_security_utils.py:98:80: E501 line too long (80 > 79 characters)
        if any(indicator in description_lower for indicator in spam_indicators):
                                                                               ^
security/ai_agents/emergency_security_utils.py:100:1: W293 blank line contains whitespace
        
^
security/ai_agents/emergency_security_utils.py:102:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_security_utils.py:104:62: W291 trailing whitespace
    def validate_input_length(text: str, min_length: int = 1, 
                                                             ^
security/ai_agents/emergency_security_utils.py:105:29: E128 continuation line under-indented for visual indent
                            max_length: int = 1000) -> bool:
                            ^
security/ai_agents/emergency_security_utils.py:108:1: W293 blank line contains whitespace
        """
        Проверить длину входных данных
        
        Args:
            text: Текст для проверки
            min_length: Минимальная длина
            max_length: Максимальная длина
            
        Returns:
            bool: True если длина приемлема
        """
^
security/ai_agents/emergency_security_utils.py:113:1: W293 blank line contains whitespace
        """
        Проверить длину входных данных
        
        Args:
            text: Текст для проверки
            min_length: Минимальная длина
            max_length: Максимальная длина
            
        Returns:
            bool: True если длина приемлема
        """
^
security/ai_agents/emergency_security_utils.py:119:1: W293 blank line contains whitespace
        
^
security/ai_agents/emergency_security_utils.py:121:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_security_utils.py:126:1: W293 blank line contains whitespace
        """
        Проверить на подозрительное содержимое
        
        Args:
            text: Текст для проверки
            
        Returns:
            bool: True если содержимое подозрительное
        """
^
security/ai_agents/emergency_security_utils.py:129:1: W293 blank line contains whitespace
        """
        Проверить на подозрительное содержимое
        
        Args:
            text: Текст для проверки
            
        Returns:
            bool: True если содержимое подозрительное
        """
^
security/ai_agents/emergency_security_utils.py:135:1: W293 blank line contains whitespace
        
^
security/ai_agents/emergency_security_utils.py:144:1: W293 blank line contains whitespace
        
^
security/ai_agents/emergency_security_utils.py:149:1: W293 blank line contains whitespace
        
^
security/ai_agents/emergency_security_utils.py:155:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_security_utils.py:160:1: W293 blank line contains whitespace
        """
        Сгенерировать хеш для события (для дедупликации)
        
        Args:
            event_data: Данные события
            
        Returns:
            str: Хеш события
        """
^
security/ai_agents/emergency_security_utils.py:163:1: W293 blank line contains whitespace
        """
        Сгенерировать хеш для события (для дедупликации)
        
        Args:
            event_data: Данные события
            
        Returns:
            str: Хеш события
        """
^
security/ai_agents/emergency_security_utils.py:173:80: E501 line too long (83 > 79 characters)
                str(event_data.get('description', ''))[:100]  # Первые 100 символов
                                                                               ^
security/ai_agents/emergency_security_utils.py:175:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_security_utils.py:180:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_security_utils.py:185:1: W293 blank line contains whitespace
        """
        Сгенерировать хеш для контакта
        
        Args:
            contact_data: Данные контакта
            
        Returns:
            str: Хеш контакта
        """
^
security/ai_agents/emergency_security_utils.py:188:1: W293 blank line contains whitespace
        """
        Сгенерировать хеш для контакта
        
        Args:
            contact_data: Данные контакта
            
        Returns:
            str: Хеш контакта
        """
^
security/ai_agents/emergency_security_utils.py:198:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_security_utils.py:207:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_security_utils.py:209:58: W291 trailing whitespace
    def log_security_event(event_type: str, details: str, 
                                                         ^
security/ai_agents/emergency_security_utils.py:210:27: E128 continuation line under-indented for visual indent
                          severity: str = "medium") -> None:
                          ^
security/ai_agents/emergency_security_utils.py:213:1: W293 blank line contains whitespace
        """
        Записать событие безопасности в лог
        
        Args:
            event_type: Тип события
            details: Детали события
            severity: Серьезность (low, medium, high, critical)
        """
^
security/ai_agents/emergency_security_utils.py:220:25: F821 undefined name 'datetime'
            timestamp = datetime.now().isoformat()
                        ^
security/ai_agents/emergency_security_utils.py:221:80: E501 line too long (94 > 79 characters)
            log_entry = f"[{timestamp}] SECURITY_{severity.upper()}: {event_type} - {details}"
                                                                               ^
security/ai_agents/emergency_security_utils.py:222:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_security_utils.py:227:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_security_utils.py:232:1: W293 blank line contains whitespace
        """
        Записать неудачную валидацию
        
        Args:
            field: Поле, которое не прошло валидацию
            value: Значение поля
            reason: Причина неудачи
        """
^
security/ai_agents/emergency_security_utils.py:243:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_security_utils.py:248:1: W293 blank line contains whitespace
        """
        Записать подозрительную активность
        
        Args:
            activity: Тип активности
            details: Детали активности
        """
^
security/ai_agents/emergency_security_utils.py:262:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_security_utils.py:267:1: W293 blank line contains whitespace
        """
        Обезопасить данные экстренной ситуации
        
        Args:
            data: Исходные данные
            
        Returns:
            Dict: Обезопасенные данные
        """
^
security/ai_agents/emergency_security_utils.py:270:1: W293 blank line contains whitespace
        """
        Обезопасить данные экстренной ситуации
        
        Args:
            data: Исходные данные
            
        Returns:
            Dict: Обезопасенные данные
        """
^
security/ai_agents/emergency_security_utils.py:276:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_security_utils.py:283:80: E501 line too long (91 > 79 characters)
                    secured_data[key] = EmergencySecurityUtils.secure_emergency_data(value)
                                                                               ^
security/ai_agents/emergency_security_utils.py:286:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_security_utils.py:295:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_security_utils.py:300:1: W293 blank line contains whitespace
        """
        Валидировать запрос экстренной ситуации
        
        Args:
            request_data: Данные запроса
            
        Returns:
            bool: True если запрос валиден
        """
^
security/ai_agents/emergency_security_utils.py:303:1: W293 blank line contains whitespace
        """
        Валидировать запрос экстренной ситуации
        
        Args:
            request_data: Данные запроса
            
        Returns:
            bool: True если запрос валиден
        """
^
security/ai_agents/emergency_security_utils.py:316:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_security_utils.py:319:80: E501 line too long (81 > 79 characters)
            if not SecurityValidator.validate_emergency_description(description):
                                                                               ^
security/ai_agents/emergency_security_utils.py:324:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_security_utils.py:328:80: E501 line too long (85 > 79 characters)
                    if SecurityValidator.validate_contains_suspicious_content(value):
                                                                               ^
security/ai_agents/emergency_security_utils.py:330:80: E501 line too long (84 > 79 characters)
                            "SUSPICIOUS_INPUT", f"Field: {key}, Value: {value[:50]}"
                                                                               ^
security/ai_agents/emergency_security_utils.py:333:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_security_utils.py:341:25: W292 no newline at end of file
            return False                        ^
security/ai_agents/emergency_service.py:21:1: F401 '.emergency_security_utils.EmergencySecurityUtils' imported but unused
from .emergency_security_utils import EmergencySecurityUtils
^
security/ai_agents/emergency_service.py:27:1: W293 blank line contains whitespace
    """
    Координатор системы экстренного реагирования
    
    Применяет принципы SOLID:
    - Single Responsibility: координация экстренного реагирования
    - Open/Closed: открыт для расширения через менеджеры
    - Liskov Substitution: использует абстракции
    - Interface Segregation: разделенные интерфейсы
    - Dependency Inversion: зависит от абстракций
    """
^
security/ai_agents/emergency_service.py:35:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_service.py:36:55: W291 trailing whitespace
    def __init__(self, name: str = "EmergencyService", 
                                                      ^
security/ai_agents/emergency_service.py:40:1: W293 blank line contains whitespace
        """
        Инициализация сервиса экстренного реагирования
        
        Args:
            name: Имя сервиса
            config: Конфигурация сервиса
        """
^
security/ai_agents/emergency_service.py:48:1: W293 blank line contains whitespace
        
^
security/ai_agents/emergency_service.py:54:1: W293 blank line contains whitespace
        
^
security/ai_agents/emergency_service.py:56:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_service.py:58:30: E128 continuation line under-indented for visual indent
                             severity: EmergencySeverity,
                             ^
security/ai_agents/emergency_service.py:59:30: E128 continuation line under-indented for visual indent
                             location: Dict[str, Any],
                             ^
security/ai_agents/emergency_service.py:60:30: E128 continuation line under-indented for visual indent
                             description: str,
                             ^
security/ai_agents/emergency_service.py:61:30: E128 continuation line under-indented for visual indent
                             user_id: Optional[str] = None) -> EmergencyEvent:
                             ^
security/ai_agents/emergency_service.py:64:1: W293 blank line contains whitespace
        """
        Создать экстренное событие
        
        Args:
            emergency_type: Тип экстренной ситуации
            severity: Серьезность ситуации
            location: Местоположение
            description: Описание ситуации
            user_id: ID пользователя
            
        Returns:
            EmergencyEvent: Созданное событие
        """
^
security/ai_agents/emergency_service.py:71:1: W293 blank line contains whitespace
        """
        Создать экстренное событие
        
        Args:
            emergency_type: Тип экстренной ситуации
            severity: Серьезность ситуации
            location: Местоположение
            description: Описание ситуации
            user_id: ID пользователя
            
        Returns:
            EmergencyEvent: Созданное событие
        """
^
security/ai_agents/emergency_service.py:80:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_service.py:83:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_service.py:89:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_service.py:92:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_service.py:95:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_service.py:99:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_service.py:100:80: E501 line too long (89 > 79 characters)
    def _call_emergency_services(self, event: EmergencyEvent) -> List[EmergencyResponse]:
                                                                               ^
security/ai_agents/emergency_service.py:103:1: W293 blank line contains whitespace
        """
        Вызвать службы экстренного реагирования
        
        Args:
            event: Экстренное событие
            
        Returns:
            List[EmergencyResponse]: Список ответов служб
        """
^
security/ai_agents/emergency_service.py:106:1: W293 blank line contains whitespace
        """
        Вызвать службы экстренного реагирования
        
        Args:
            event: Экстренное событие
            
        Returns:
            List[EmergencyResponse]: Список ответов служб
        """
^
security/ai_agents/emergency_service.py:112:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_service.py:120:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_service.py:124:80: E501 line too long (82 > 79 characters)
                nearest_services = self.service_caller.get_nearest_services(event)
                                                                               ^
security/ai_agents/emergency_service.py:125:1: W293 blank line contains whitespace
                
^
security/ai_agents/emergency_service.py:133:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_service.py:135:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_service.py:139:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_service.py:141:29: E128 continuation line under-indented for visual indent
                            email: Optional[str] = None,
                            ^
security/ai_agents/emergency_service.py:142:29: E128 continuation line under-indented for visual indent
                            relationship: str = "family",
                            ^
security/ai_agents/emergency_service.py:143:29: E128 continuation line under-indented for visual indent
                            priority: int = 1) -> EmergencyContact:
                            ^
security/ai_agents/emergency_service.py:146:1: W293 blank line contains whitespace
        """
        Добавить контакт экстренного реагирования
        
        Args:
            name: Имя контакта
            phone: Номер телефона
            email: Email адрес
            relationship: Отношение к пользователю
            priority: Приоритет (1-5)
            
        Returns:
            EmergencyContact: Созданный контакт
        """
^
security/ai_agents/emergency_service.py:153:1: W293 blank line contains whitespace
        """
        Добавить контакт экстренного реагирования
        
        Args:
            name: Имя контакта
            phone: Номер телефона
            email: Email адрес
            relationship: Отношение к пользователю
            priority: Приоритет (1-5)
            
        Returns:
            EmergencyContact: Созданный контакт
        """
^
security/ai_agents/emergency_service.py:160:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_service.py:164:1: W293 blank line contains whitespace
        """
        Получить экстренные события за период
        
        Args:
            hours: Количество часов назад
            
        Returns:
            List[EmergencyEvent]: Список событий
        """
^
security/ai_agents/emergency_service.py:167:1: W293 blank line contains whitespace
        """
        Получить экстренные события за период
        
        Args:
            hours: Количество часов назад
            
        Returns:
            List[EmergencyEvent]: Список событий
        """
^
security/ai_agents/emergency_service.py:172:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_service.py:176:1: W293 blank line contains whitespace
        """
        Получить статистику экстренного реагирования
        
        Returns:
            Dict[str, Any]: Статистика
        """
^
security/ai_agents/emergency_service.py:183:80: E501 line too long (88 > 79 characters)
            notification_stats = self.notification_manager.get_notification_statistics()
                                                                               ^
security/ai_agents/emergency_service.py:185:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_service.py:196:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_service.py:200:1: W293 blank line contains whitespace
        """
        Обновить статус события
        
        Args:
            event_id: ID события
            status: Новый статус
            
        Returns:
            bool: True если обновлено успешно
        """
^
security/ai_agents/emergency_service.py:204:1: W293 blank line contains whitespace
        """
        Обновить статус события
        
        Args:
            event_id: ID события
            status: Новый статус
            
        Returns:
            bool: True если обновлено успешно
        """
^
security/ai_agents/emergency_service.py:209:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_service.py:213:1: W293 blank line contains whitespace
        """
        Получить контакты экстренного реагирования
        
        Returns:
            List[EmergencyContact]: Список контактов
        """
^
security/ai_agents/emergency_service.py:218:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_service.py:222:1: W293 blank line contains whitespace
        """
        Очистить старые данные
        
        Args:
            days: Количество дней для хранения
            
        Returns:
            Dict[str, int]: Результат очистки
        """
^
security/ai_agents/emergency_service.py:225:1: W293 blank line contains whitespace
        """
        Очистить старые данные
        
        Args:
            days: Количество дней для хранения
            
        Returns:
            Dict[str, int]: Результат очистки
        """
^
security/ai_agents/emergency_service.py:231:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_service.py:239:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_service.py:243:1: W293 blank line contains whitespace
        """
        Получить состояние системы
        
        Returns:
            Dict[str, Any]: Состояние системы
        """
^
security/ai_agents/emergency_service.py:249:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_service.py:253:80: E501 line too long (93 > 79 characters)
            notification_success_rate = stats.get('notifications', {}).get('success_rate', 0)
                                                                               ^
security/ai_agents/emergency_service.py:254:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_service.py:263:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_service.py:273:63: W292 no newline at end of file
            return {'health_status': 'error', 'error': str(e)}                                                              ^
security/ai_agents/emergency_service_caller.py:10:1: F401 'typing.Tuple' imported but unused
from typing import Dict, List, Optional, Any, Tuple
^
security/ai_agents/emergency_service_caller.py:12:80: E501 line too long (85 > 79 characters)
from .emergency_models import EmergencyEvent, EmergencyResponse, EmergencyServiceEnum
                                                                               ^
security/ai_agents/emergency_service_caller.py:19:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_service_caller.py:24:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_service_caller.py:25:80: E501 line too long (91 > 79 characters)
    def _initialize_emergency_services(self) -> Dict[EmergencyServiceEnum, Dict[str, Any]]:
                                                                               ^
security/ai_agents/emergency_service_caller.py:28:1: W293 blank line contains whitespace
        """
        Инициализировать службы экстренного реагирования
        
        Returns:
            Dict: Конфигурация служб
        """
^
security/ai_agents/emergency_service_caller.py:62:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_service_caller.py:64:30: E128 continuation line under-indented for visual indent
                             service_type: EmergencyServiceEnum) -> EmergencyResponse:
                             ^
security/ai_agents/emergency_service_caller.py:64:80: E501 line too long (86 > 79 characters)
                             service_type: EmergencyServiceEnum) -> EmergencyResponse:
                                                                               ^
security/ai_agents/emergency_service_caller.py:67:1: W293 blank line contains whitespace
        """
        Вызвать службу экстренного реагирования
        
        Args:
            event: Экстренное событие
            service_type: Тип службы
            
        Returns:
            EmergencyResponse: Ответ службы
        """
^
security/ai_agents/emergency_service_caller.py:71:1: W293 blank line contains whitespace
        """
        Вызвать службу экстренного реагирования
        
        Args:
            event: Экстренное событие
            service_type: Тип службы
            
        Returns:
            EmergencyResponse: Ответ службы
        """
^
security/ai_agents/emergency_service_caller.py:79:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_service_caller.py:82:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_service_caller.py:87:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_service_caller.py:98:80: E501 line too long (109 > 79 characters)
                estimated_arrival=datetime.now().timestamp() + (service_config['response_time_minutes'] * 60)
                                                                               ^
security/ai_agents/emergency_service_caller.py:100:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_service_caller.py:103:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_service_caller.py:106:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_service_caller.py:107:80: E501 line too long (101 > 79 characters)
            self.logger.info(f"Вызвана служба {service_config['name']} для события {event.event_id}")
                                                                               ^
security/ai_agents/emergency_service_caller.py:109:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_service_caller.py:113:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_service_caller.py:115:29: E128 continuation line under-indented for visual indent
                            message: str, event: EmergencyEvent) -> bool:
                            ^
security/ai_agents/emergency_service_caller.py:118:1: W293 blank line contains whitespace
        """
        Отправить запрос в службу
        
        Args:
            service_config: Конфигурация службы
            message: Сообщение
            event: Событие
            
        Returns:
            bool: True если запрос отправлен успешно
        """
^
security/ai_agents/emergency_service_caller.py:123:1: W293 blank line contains whitespace
        """
        Отправить запрос в службу
        
        Args:
            service_config: Конфигурация службы
            message: Сообщение
            event: Событие
            
        Returns:
            bool: True если запрос отправлен успешно
        """
^
security/ai_agents/emergency_service_caller.py:129:80: E501 line too long (96 > 79 characters)
            self.logger.info(f"Запрос отправлен в {service_config['name']}: {message[:100]}...")
                                                                               ^
security/ai_agents/emergency_service_caller.py:134:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_service_caller.py:136:28: E128 continuation line under-indented for visual indent
                           max_distance_km: float = 10.0) -> List[Dict[str, Any]]:
                           ^
security/ai_agents/emergency_service_caller.py:136:80: E501 line too long (82 > 79 characters)
                           max_distance_km: float = 10.0) -> List[Dict[str, Any]]:
                                                                               ^
security/ai_agents/emergency_service_caller.py:139:1: W293 blank line contains whitespace
        """
        Получить ближайшие службы к событию
        
        Args:
            event: Экстренное событие
            max_distance_km: Максимальное расстояние в км
            
        Returns:
            List[Dict[str, Any]]: Список ближайших служб
        """
^
security/ai_agents/emergency_service_caller.py:143:1: W293 blank line contains whitespace
        """
        Получить ближайшие службы к событию
        
        Args:
            event: Экстренное событие
            max_distance_km: Максимальное расстояние в км
            
        Returns:
            List[Dict[str, Any]]: Список ближайших служб
        """
^
security/ai_agents/emergency_service_caller.py:151:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_service_caller.py:161:80: E501 line too long (80 > 79 characters)
                        'response_time_minutes': config['response_time_minutes']
                                                                               ^
security/ai_agents/emergency_service_caller.py:163:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_service_caller.py:168:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_service_caller.py:174:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_service_caller.py:176:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_service_caller.py:180:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_service_caller.py:182:30: E128 continuation line under-indented for visual indent
                             additional_info: Optional[str] = None) -> bool:
                             ^
security/ai_agents/emergency_service_caller.py:185:1: W293 blank line contains whitespace
        """
        Обновить статус ответа службы
        
        Args:
            response_id: ID ответа
            status: Новый статус
            additional_info: Дополнительная информация
            
        Returns:
            bool: True если обновлено успешно
        """
^
security/ai_agents/emergency_service_caller.py:190:1: W293 blank line contains whitespace
        """
        Обновить статус ответа службы
        
        Args:
            response_id: ID ответа
            status: Новый статус
            additional_info: Дополнительная информация
            
        Returns:
            bool: True если обновлено успешно
        """
^
security/ai_agents/emergency_service_caller.py:198:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_service_caller.py:202:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_service_caller.py:207:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_service_caller.py:208:80: E501 line too long (81 > 79 characters)
            self.logger.info(f"Статус ответа {response_id} обновлен на {status}")
                                                                               ^
security/ai_agents/emergency_service_caller.py:210:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_service_caller.py:214:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_service_caller.py:218:1: W293 blank line contains whitespace
        """
        Получить ответ службы по ID
        
        Args:
            response_id: ID ответа
            
        Returns:
            Optional[EmergencyResponse]: Ответ службы или None
        """
^
security/ai_agents/emergency_service_caller.py:221:1: W293 blank line contains whitespace
        """
        Получить ответ службы по ID
        
        Args:
            response_id: ID ответа
            
        Returns:
            Optional[EmergencyResponse]: Ответ службы или None
        """
^
security/ai_agents/emergency_service_caller.py:226:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_service_caller.py:227:80: E501 line too long (80 > 79 characters)
    def get_responses_for_event(self, event_id: str) -> List[EmergencyResponse]:
                                                                               ^
security/ai_agents/emergency_service_caller.py:230:1: W293 blank line contains whitespace
        """
        Получить все ответы для события
        
        Args:
            event_id: ID события
            
        Returns:
            List[EmergencyResponse]: Список ответов
        """
^
security/ai_agents/emergency_service_caller.py:233:1: W293 blank line contains whitespace
        """
        Получить все ответы для события
        
        Args:
            event_id: ID события
            
        Returns:
            List[EmergencyResponse]: Список ответов
        """
^
security/ai_agents/emergency_service_caller.py:239:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_service_caller.py:243:1: W293 blank line contains whitespace
        """
        Получить статистику вызовов служб
        
        Returns:
            Dict[str, Any]: Статистика
        """
^
security/ai_agents/emergency_service_caller.py:250:34: E128 continuation line under-indented for visual indent
                                 if r.status == 'dispatched'])
                                 ^
security/ai_agents/emergency_service_caller.py:252:32: E128 continuation line under-indented for visual indent
                               if r.status == 'arrived'])
                               ^
security/ai_agents/emergency_service_caller.py:254:34: E128 continuation line under-indented for visual indent
                                 if r.status == 'completed'])
                                 ^
security/ai_agents/emergency_service_caller.py:255:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_service_caller.py:263:1: W293 blank line contains whitespace
            
^
security/ai_agents/emergency_service_caller.py:269:80: E501 line too long (81 > 79 characters)
                'completion_rate': (completed_calls / max(total_calls, 1)) * 100,
                                                                               ^
security/ai_agents/emergency_service_caller.py:275:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_service_caller.py:279:1: W293 blank line contains whitespace
        """
        Получить доступные службы
        
        Returns:
            List[Dict[str, Any]]: Список доступных служб
        """
^
security/ai_agents/emergency_service_caller.py:292:10: W292 no newline at end of file
        ]         ^
security/ai_agents/emergency_statistics_models.py:9:1: F401 'datetime.timedelta' imported but unused
from datetime import datetime, timedelta
^
security/ai_agents/emergency_statistics_models.py:11:1: F401 '.emergency_base_models.EmergencyType' imported but unused
from .emergency_base_models import EmergencyType, EmergencySeverity, ResponseStatus
^
security/ai_agents/emergency_statistics_models.py:11:1: F401 '.emergency_base_models.EmergencySeverity' imported but unused
from .emergency_base_models import EmergencyType, EmergencySeverity, ResponseStatus
^
security/ai_agents/emergency_statistics_models.py:11:1: F401 '.emergency_base_models.ResponseStatus' imported but unused
from .emergency_base_models import EmergencyType, EmergencySeverity, ResponseStatus
^
security/ai_agents/emergency_statistics_models.py:11:80: E501 line too long (83 > 79 characters)
from .emergency_base_models import EmergencyType, EmergencySeverity, ResponseStatus
                                                                               ^
security/ai_agents/emergency_statistics_models.py:140:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_statistics_models.py:147:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_statistics_models.py:154:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_statistics_models.py:161:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_statistics_models.py:163:80: E501 line too long (90 > 79 characters)
    def calculate_trend(current_values: List[float], previous_values: List[float]) -> str:
                                                                               ^
security/ai_agents/emergency_statistics_models.py:167:1: W293 blank line contains whitespace
        
^
security/ai_agents/emergency_statistics_models.py:170:1: W293 blank line contains whitespace
        
^
security/ai_agents/emergency_statistics_models.py:172:1: W293 blank line contains whitespace
        
^
security/ai_agents/emergency_statistics_models.py:179:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_statistics_models.py:185:80: E501 line too long (81 > 79 characters)
        elif metrics.success_rate >= 95 and metrics.average_response_time <= 2.0:
                                                                               ^
security/ai_agents/emergency_statistics_models.py:187:80: E501 line too long (81 > 79 characters)
        elif metrics.success_rate >= 90 and metrics.average_response_time <= 5.0:
                                                                               ^
security/ai_agents/emergency_statistics_models.py:189:80: E501 line too long (82 > 79 characters)
        elif metrics.success_rate >= 80 and metrics.average_response_time <= 10.0:
                                                                               ^
security/ai_agents/emergency_statistics_models.py:192:30: W292 no newline at end of file
            return "critical"                             ^
security/ai_agents/emergency_time_utils.py:8:1: F401 'datetime.timedelta' imported but unused
from datetime import datetime, timedelta
^
security/ai_agents/emergency_time_utils.py:9:1: F401 'typing.Optional' imported but unused
from typing import Optional
^
security/ai_agents/emergency_time_utils.py:14:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_time_utils.py:18:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_time_utils.py:23:1: W293 blank line contains whitespace
        """
        Проверить, являются ли часы пиковыми
        
        Args:
            hour: Час дня (0-23)
            
        Returns:
            bool: True если часы пиковые
        """
^
security/ai_agents/emergency_time_utils.py:26:1: W293 blank line contains whitespace
        """
        Проверить, являются ли часы пиковыми
        
        Args:
            hour: Час дня (0-23)
            
        Returns:
            bool: True если часы пиковые
        """
^
security/ai_agents/emergency_time_utils.py:31:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_time_utils.py:36:1: W293 blank line contains whitespace
        """
        Проверить, является ли время ночным
        
        Args:
            hour: Час дня (0-23)
            
        Returns:
            bool: True если время ночное
        """
^
security/ai_agents/emergency_time_utils.py:39:1: W293 blank line contains whitespace
        """
        Проверить, является ли время ночным
        
        Args:
            hour: Час дня (0-23)
            
        Returns:
            bool: True если время ночное
        """
^
security/ai_agents/emergency_time_utils.py:44:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_time_utils.py:49:1: W293 blank line contains whitespace
        """
        Проверить, является ли день выходным
        
        Args:
            weekday: День недели (0-6)
            
        Returns:
            bool: True если день выходной
        """
^
security/ai_agents/emergency_time_utils.py:52:1: W293 blank line contains whitespace
        """
        Проверить, является ли день выходным
        
        Args:
            weekday: День недели (0-6)
            
        Returns:
            bool: True если день выходной
        """
^
security/ai_agents/emergency_time_utils.py:57:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_time_utils.py:62:1: W293 blank line contains whitespace
        """
        Получить период времени
        
        Args:
            hour: Час дня (0-23)
            
        Returns:
            str: Период времени
        """
^
security/ai_agents/emergency_time_utils.py:65:1: W293 blank line contains whitespace
        """
        Получить период времени
        
        Args:
            hour: Час дня (0-23)
            
        Returns:
            str: Период времени
        """
^
security/ai_agents/emergency_time_utils.py:81:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_time_utils.py:83:54: W291 trailing whitespace
    def calculate_response_time(start_time: datetime, 
                                                     ^
security/ai_agents/emergency_time_utils.py:84:31: E128 continuation line under-indented for visual indent
                              end_time: datetime) -> float:
                              ^
security/ai_agents/emergency_time_utils.py:87:1: W293 blank line contains whitespace
        """
        Рассчитать время реагирования в минутах
        
        Args:
            start_time: Время начала
            end_time: Время окончания
            
        Returns:
            float: Время в минутах
        """
^
security/ai_agents/emergency_time_utils.py:91:1: W293 blank line contains whitespace
        """
        Рассчитать время реагирования в минутах
        
        Args:
            start_time: Время начала
            end_time: Время окончания
            
        Returns:
            float: Время в минутах
        """
^
security/ai_agents/emergency_time_utils.py:100:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_time_utils.py:105:1: W293 blank line contains whitespace
        """
        Рассчитать среднее время реагирования
        
        Args:
            times: Список времен в минутах
            
        Returns:
            float: Среднее время
        """
^
security/ai_agents/emergency_time_utils.py:108:1: W293 blank line contains whitespace
        """
        Рассчитать среднее время реагирования
        
        Args:
            times: Список времен в минутах
            
        Returns:
            float: Среднее время
        """
^
security/ai_agents/emergency_time_utils.py:118:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_time_utils.py:120:58: W291 trailing whitespace
    def is_response_time_acceptable(response_time: float, 
                                                         ^
security/ai_agents/emergency_time_utils.py:121:35: E128 continuation line under-indented for visual indent
                                  max_acceptable: float = 30.0) -> bool:
                                  ^
security/ai_agents/emergency_time_utils.py:124:1: W293 blank line contains whitespace
        """
        Проверить, приемлемо ли время реагирования
        
        Args:
            response_time: Время реагирования в минутах
            max_acceptable: Максимально приемлемое время
            
        Returns:
            bool: True если время приемлемо
        """
^
security/ai_agents/emergency_time_utils.py:128:1: W293 blank line contains whitespace
        """
        Проверить, приемлемо ли время реагирования
        
        Args:
            response_time: Время реагирования в минутах
            max_acceptable: Максимально приемлемое время
            
        Returns:
            bool: True если время приемлемо
        """
^
security/ai_agents/emergency_time_utils.py:137:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_time_utils.py:142:1: W293 blank line contains whitespace
        """
        Рассчитать фактор риска на основе времени
        
        Args:
            hour: Час дня (0-23)
            weekday: День недели (0-6)
            
        Returns:
            float: Фактор риска (0.0-1.0)
        """
^
security/ai_agents/emergency_time_utils.py:146:1: W293 blank line contains whitespace
        """
        Рассчитать фактор риска на основе времени
        
        Args:
            hour: Час дня (0-23)
            weekday: День недели (0-6)
            
        Returns:
            float: Фактор риска (0.0-1.0)
        """
^
security/ai_agents/emergency_time_utils.py:151:1: W293 blank line contains whitespace
        
^
security/ai_agents/emergency_time_utils.py:155:1: W293 blank line contains whitespace
        
^
security/ai_agents/emergency_time_utils.py:159:1: W293 blank line contains whitespace
        
^
security/ai_agents/emergency_time_utils.py:163:1: W293 blank line contains whitespace
        
^
security/ai_agents/emergency_time_utils.py:165:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_time_utils.py:170:1: W293 blank line contains whitespace
        """
        Получить уровень риска
        
        Args:
            risk_factor: Фактор риска (0.0-1.0)
            
        Returns:
            str: Уровень риска
        """
^
security/ai_agents/emergency_time_utils.py:173:1: W293 blank line contains whitespace
        """
        Получить уровень риска
        
        Args:
            risk_factor: Фактор риска (0.0-1.0)
            
        Returns:
            str: Уровень риска
        """
^
security/ai_agents/emergency_time_utils.py:187:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_time_utils.py:189:36: F821 undefined name 'Dict'
    def get_current_time_info() -> Dict[str, Any]:
                                   ^
security/ai_agents/emergency_time_utils.py:189:46: F821 undefined name 'Any'
    def get_current_time_info() -> Dict[str, Any]:
                                             ^
security/ai_agents/emergency_time_utils.py:192:1: W293 blank line contains whitespace
        """
        Получить информацию о текущем времени
        
        Returns:
            Dict: Информация о времени
        """
^
security/ai_agents/emergency_time_utils.py:197:1: W293 blank line contains whitespace
        
^
security/ai_agents/emergency_time_utils.py:209:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_time_utils.py:211:46: W291 trailing whitespace
    def format_timestamp(timestamp: datetime, 
                                             ^
security/ai_agents/emergency_time_utils.py:212:25: E128 continuation line under-indented for visual indent
                        format_str: str = "%H:%M:%S %d.%m.%Y") -> str:
                        ^
security/ai_agents/emergency_time_utils.py:215:1: W293 blank line contains whitespace
        """
        Форматировать временную метку
        
        Args:
            timestamp: Временная метка
            format_str: Формат строки
            
        Returns:
            str: Отформатированная строка
        """
^
security/ai_agents/emergency_time_utils.py:219:1: W293 blank line contains whitespace
        """
        Форматировать временную метку
        
        Args:
            timestamp: Временная метка
            format_str: Формат строки
            
        Returns:
            str: Отформатированная строка
        """
^
security/ai_agents/emergency_time_utils.py:226:34: W292 no newline at end of file
            return str(timestamp)                                 ^
security/ai_agents/emergency_utils.py:42:80: E501 line too long (81 > 79 characters)
    'validate_emergency_description': staticmethod(DescriptionValidator.validate)
                                                                               ^
security/ai_agents/emergency_utils.py:47:80: E501 line too long (86 > 79 characters)
    'calculate_distance': staticmethod(LocationDistanceCalculator.calculate_distance),
                                                                               ^
security/ai_agents/emergency_utils.py:48:80: E501 line too long (92 > 79 characters)
    'is_location_in_radius': staticmethod(LocationDistanceCalculator.is_location_in_radius),
                                                                               ^
security/ai_agents/emergency_utils.py:49:80: E501 line too long (87 > 79 characters)
    'find_nearest_services': staticmethod(LocationServiceFinder.find_nearest_services),
                                                                               ^
security/ai_agents/emergency_utils.py:50:80: E501 line too long (92 > 79 characters)
    'validate_location_accuracy': staticmethod(LocationValidator.validate_location_accuracy)
                                                                               ^
security/ai_agents/emergency_utils.py:61:33: W291 trailing whitespace
    'EmergencyMessageFormatter', 
                                ^
security/ai_agents/emergency_utils.py:84:2: W292 no newline at end of file
] ^
security/ai_agents/emergency_validators.py:9:1: F401 'typing.Optional' imported but unused
from typing import Optional
^
security/ai_agents/emergency_validators.py:14:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_validators.py:19:1: W293 blank line contains whitespace
        """
        Валидация номера телефона
        
        Args:
            phone: Номер телефона для проверки
            
        Returns:
            bool: True если номер валиден
        """
^
security/ai_agents/emergency_validators.py:22:1: W293 blank line contains whitespace
        """
        Валидация номера телефона
        
        Args:
            phone: Номер телефона для проверки
            
        Returns:
            bool: True если номер валиден
        """
^
security/ai_agents/emergency_validators.py:28:1: W293 blank line contains whitespace
        
^
security/ai_agents/emergency_validators.py:31:1: W293 blank line contains whitespace
        
^
security/ai_agents/emergency_validators.py:43:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_validators.py:48:1: W293 blank line contains whitespace
        """
        Валидация email адреса
        
        Args:
            email: Email для проверки
            
        Returns:
            bool: True если email валиден
        """
^
security/ai_agents/emergency_validators.py:51:1: W293 blank line contains whitespace
        """
        Валидация email адреса
        
        Args:
            email: Email для проверки
            
        Returns:
            bool: True если email валиден
        """
^
security/ai_agents/emergency_validators.py:57:1: W293 blank line contains whitespace
        
^
security/ai_agents/emergency_validators.py:64:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_validators.py:69:1: W293 blank line contains whitespace
        """
        Валидация географических координат
        
        Args:
            lat: Широта
            lon: Долгота
            
        Returns:
            bool: True если координаты валидны
        """
^
security/ai_agents/emergency_validators.py:73:1: W293 blank line contains whitespace
        """
        Валидация географических координат
        
        Args:
            lat: Широта
            lon: Долгота
            
        Returns:
            bool: True если координаты валидны
        """
^
security/ai_agents/emergency_validators.py:82:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_validators.py:87:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_validators.py:92:1: W293 blank line contains whitespace
        """
        Валидация типа экстренной ситуации
        
        Args:
            emergency_type: Тип для проверки
            
        Returns:
            bool: True если тип валиден
        """
^
security/ai_agents/emergency_validators.py:95:1: W293 blank line contains whitespace
        """
        Валидация типа экстренной ситуации
        
        Args:
            emergency_type: Тип для проверки
            
        Returns:
            bool: True если тип валиден
        """
^
security/ai_agents/emergency_validators.py:104:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_validators.py:106:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_validators.py:111:1: W293 blank line contains whitespace
        """
        Валидация уровня серьезности
        
        Args:
            severity: Уровень для проверки
            
        Returns:
            bool: True если уровень валиден
        """
^
security/ai_agents/emergency_validators.py:114:1: W293 blank line contains whitespace
        """
        Валидация уровня серьезности
        
        Args:
            severity: Уровень для проверки
            
        Returns:
            bool: True если уровень валиден
        """
^
security/ai_agents/emergency_validators.py:123:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_validators.py:126:1: W293 blank line contains whitespace
    
^
security/ai_agents/emergency_validators.py:131:1: W293 blank line contains whitespace
        """
        Валидация описания экстренной ситуации
        
        Args:
            description: Описание для проверки
            
        Returns:
            bool: True если описание валидно
        """
^
security/ai_agents/emergency_validators.py:134:1: W293 blank line contains whitespace
        """
        Валидация описания экстренной ситуации
        
        Args:
            description: Описание для проверки
            
        Returns:
            bool: True если описание валидно
        """
^
security/ai_agents/emergency_validators.py:140:1: W293 blank line contains whitespace
        
^
security/ai_agents/emergency_validators.py:144:1: W293 blank line contains whitespace
        
^
security/ai_agents/emergency_validators.py:147:46: W291 trailing whitespace
        if any(indicator in description_lower 
                                             ^
security/ai_agents/emergency_validators.py:150:1: W293 blank line contains whitespace
        
^
security/ai_agents/emergency_validators.py:151:20: W292 no newline at end of file
        return True                   ^
security/ai_agents/family_communication_hub.py:11:1: F401 'hashlib' imported but unused
import hashlib
^
security/ai_agents/family_communication_hub.py:12:1: F401 'time' imported but unused
import time
^
security/ai_agents/family_communication_hub.py:15:1: F401 'math' imported but unused
import math
^
security/ai_agents/family_communication_hub.py:16:1: F401 'datetime.timedelta' imported but unused
from datetime import datetime, timedelta
^
security/ai_agents/family_communication_hub.py:17:1: F401 'typing.Union' imported but unused
from typing import Dict, List, Any, Optional, Union, Tuple, Set, Callable, Awaitable
^
security/ai_agents/family_communication_hub.py:17:1: F401 'typing.Set' imported but unused
from typing import Dict, List, Any, Optional, Union, Tuple, Set, Callable, Awaitable
^
security/ai_agents/family_communication_hub.py:17:1: F401 'typing.Callable' imported but unused
from typing import Dict, List, Any, Optional, Union, Tuple, Set, Callable, Awaitable
^
security/ai_agents/family_communication_hub.py:17:1: F401 'typing.Awaitable' imported but unused
from typing import Dict, List, Any, Optional, Union, Tuple, Set, Callable, Awaitable
^
security/ai_agents/family_communication_hub.py:17:80: E501 line too long (84 > 79 characters)
from typing import Dict, List, Any, Optional, Union, Tuple, Set, Callable, Awaitable
                                                                               ^
security/ai_agents/family_communication_hub.py:83:1: W293 blank line contains whitespace
    
^
security/ai_agents/family_communication_hub.py:87:72: W291 trailing whitespace
            'хорошо', 'отлично', 'спасибо', 'люблю', 'рад', 'счастлив', 
                                                                       ^
security/ai_agents/family_communication_hub.py:104:1: W293 blank line contains whitespace
        
^
security/ai_agents/family_communication_hub.py:108:1: W293 blank line contains whitespace
        """
        Анализ сообщения с помощью AI алгоритмов
        
        Args:
            content: Текст сообщения для анализа
            
        Returns:
            Dict с результатами анализа: sentiment, urgency, emotions, confidence
        """
^
security/ai_agents/family_communication_hub.py:111:1: W293 blank line contains whitespace
        """
        Анализ сообщения с помощью AI алгоритмов
        
        Args:
            content: Текст сообщения для анализа
            
        Returns:
            Dict с результатами анализа: sentiment, urgency, emotions, confidence
        """
^
security/ai_agents/family_communication_hub.py:113:80: E501 line too long (81 > 79 characters)
        """
        Анализ сообщения с помощью AI алгоритмов
        
        Args:
            content: Текст сообщения для анализа
            
        Returns:
            Dict с результатами анализа: sentiment, urgency, emotions, confidence
        """
           
                                                
        
         ^
security/ai_agents/family_communication_hub.py:118:1: W293 blank line contains whitespace
            
^
security/ai_agents/family_communication_hub.py:122:1: W293 blank line contains whitespace
            
^
security/ai_agents/family_communication_hub.py:125:80: E501 line too long (88 > 79 characters)
                sentiment_score = positive_count / (positive_count + negative_count + 1)
                                                                               ^
security/ai_agents/family_communication_hub.py:128:80: E501 line too long (88 > 79 characters)
                sentiment_score = negative_count / (positive_count + negative_count + 1)
                                                                               ^
security/ai_agents/family_communication_hub.py:132:1: W293 blank line contains whitespace
            
^
security/ai_agents/family_communication_hub.py:136:80: E501 line too long (80 > 79 characters)
            urgency_score = min(urgency_count / 3.0, 1.0)  # Нормализация до 0-1
                                                                               ^
security/ai_agents/family_communication_hub.py:137:1: W293 blank line contains whitespace
            
^
security/ai_agents/family_communication_hub.py:144:1: W293 blank line contains whitespace
            
^
security/ai_agents/family_communication_hub.py:146:80: E501 line too long (102 > 79 characters)
            dominant_emotion = max(emotions.items(), key=lambda x: x[1])[0] if emotions else "neutral"
                                                                               ^
security/ai_agents/family_communication_hub.py:147:1: W293 blank line contains whitespace
            
^
security/ai_agents/family_communication_hub.py:150:13: F841 local variable 'char_count' is assigned to but never used
            char_count = len(content)
            ^
security/ai_agents/family_communication_hub.py:152:1: W293 blank line contains whitespace
            
^
security/ai_agents/family_communication_hub.py:154:80: E501 line too long (89 > 79 characters)
            confidence = min(0.7 + (sentiment_score * 0.2) + (urgency_score * 0.1), 0.95)
                                                                               ^
security/ai_agents/family_communication_hub.py:155:1: W293 blank line contains whitespace
            
^
security/ai_agents/family_communication_hub.py:167:1: W293 blank line contains whitespace
            
^
security/ai_agents/family_communication_hub.py:185:1: W293 blank line contains whitespace
    
^
security/ai_agents/family_communication_hub.py:186:80: E501 line too long (83 > 79 characters)
    def __init__(self, family_id: str, secret_key: str = "default_secret") -> None:
                                                                               ^
security/ai_agents/family_communication_hub.py:189:1: W293 blank line contains whitespace
        """
        Инициализация семейного коммуникационного центра
        
        Args:
            family_id: Уникальный идентификатор семьи
            secret_key: Секретный ключ для шифрования
        """
^
security/ai_agents/family_communication_hub.py:206:1: W293 blank line contains whitespace
        
^
security/ai_agents/family_communication_hub.py:210:1: W293 blank line contains whitespace
        """
        Добавление члена семьи
        
        Args:
            member: Член семьи для добавления
            
        Returns:
            True если успешно добавлен
        """
^
security/ai_agents/family_communication_hub.py:213:1: W293 blank line contains whitespace
        """
        Добавление члена семьи
        
        Args:
            member: Член семьи для добавления
            
        Returns:
            True если успешно добавлен
        """
^
security/ai_agents/family_communication_hub.py:221:1: W293 blank line contains whitespace
            
^
security/ai_agents/family_communication_hub.py:224:80: E501 line too long (89 > 79 characters)
            self.logger.info(f"Добавлен член семьи: {member.name} ({member.role.value})")
                                                                               ^
security/ai_agents/family_communication_hub.py:226:1: W293 blank line contains whitespace
            
^
security/ai_agents/family_communication_hub.py:230:1: W293 blank line contains whitespace
    
^
security/ai_agents/family_communication_hub.py:234:1: W293 blank line contains whitespace
        """
        Отправка сообщения с AI-анализом
        
        Args:
            message: Сообщение для отправки
            
        Returns:
            True если успешно отправлено
        """
^
security/ai_agents/family_communication_hub.py:237:1: W293 blank line contains whitespace
        """
        Отправка сообщения с AI-анализом
        
        Args:
            message: Сообщение для отправки
            
        Returns:
            True если успешно отправлено
        """
^
security/ai_agents/family_communication_hub.py:245:1: W293 blank line contains whitespace
            
^
security/ai_agents/family_communication_hub.py:255:1: W293 blank line contains whitespace
            
^
security/ai_agents/family_communication_hub.py:261:1: W293 blank line contains whitespace
            
^
security/ai_agents/family_communication_hub.py:267:1: W293 blank line contains whitespace
            
^
security/ai_agents/family_communication_hub.py:270:1: W293 blank line contains whitespace
            
^
security/ai_agents/family_communication_hub.py:274:1: W293 blank line contains whitespace
    
^
security/ai_agents/family_communication_hub.py:278:1: W293 blank line contains whitespace
        """
        Получение статистики семьи
        
        Returns:
            Словарь со статистикой
        """
^
security/ai_agents/family_communication_hub.py:286:80: E501 line too long (94 > 79 characters)
                    sentiments.append(msg.metadata['ai_analysis'].get('sentiment', 'neutral'))
                                                                               ^
security/ai_agents/family_communication_hub.py:287:1: W293 blank line contains whitespace
            
^
security/ai_agents/family_communication_hub.py:290:80: E501 line too long (84 > 79 characters)
                sentiment_counts[sentiment] = sentiment_counts.get(sentiment, 0) + 1
                                                                               ^
security/ai_agents/family_communication_hub.py:291:1: W293 blank line contains whitespace
            
^
security/ai_agents/family_communication_hub.py:302:1: W293 blank line contains whitespace
            
^
security/ai_agents/family_communication_hub.py:306:1: W293 blank line contains whitespace
    
^
security/ai_agents/family_communication_hub.py:311:1: W293 blank line contains whitespace
    
^
security/ai_agents/family_communication_hub.py:322:1: W293 blank line contains whitespace
    
^
security/ai_agents/family_communication_hub.py:325:1: W293 blank line contains whitespace
    
^
security/ai_agents/family_communication_hub.py:332:1: W293 blank line contains whitespace
    
^
security/ai_agents/family_communication_hub.py:338:1: W293 blank line contains whitespace
    
^
security/ai_agents/family_communication_hub.py:341:1: W293 blank line contains whitespace
    
^
security/ai_agents/family_communication_hub.py:352:1: W293 blank line contains whitespace
    
^
security/ai_agents/family_communication_hub.py:354:1: W293 blank line contains whitespace
    
^
security/ai_agents/family_communication_hub.py:358:1: W293 blank line contains whitespace
    
^
security/ai_agents/family_communication_hub_a_plus.py:9:1: F401 'json' imported but unused
import json
^
security/ai_agents/family_communication_hub_a_plus.py:10:1: F401 'hashlib' imported but unused
import hashlib
^
security/ai_agents/family_communication_hub_a_plus.py:11:1: F401 'time' imported but unused
import time
^
security/ai_agents/family_communication_hub_a_plus.py:13:1: F401 'typing.Union' imported but unused
from typing import Dict, List, Any, Optional, Union, Callable, Protocol, Tuple, Set, FrozenSet, Sequence, Iterable, Iterator, Generator, Awaitable, Coroutine
^
security/ai_agents/family_communication_hub_a_plus.py:13:1: F401 'typing.Callable' imported but unused
from typing import Dict, List, Any, Optional, Union, Callable, Protocol, Tuple, Set, FrozenSet, Sequence, Iterable, Iterator, Generator, Awaitable, Coroutine
^
security/ai_agents/family_communication_hub_a_plus.py:13:1: F401 'typing.Protocol' imported but unused
from typing import Dict, List, Any, Optional, Union, Callable, Protocol, Tuple, Set, FrozenSet, Sequence, Iterable, Iterator, Generator, Awaitable, Coroutine
^
security/ai_agents/family_communication_hub_a_plus.py:13:1: F401 'typing.Set' imported but unused
from typing import Dict, List, Any, Optional, Union, Callable, Protocol, Tuple, Set, FrozenSet, Sequence, Iterable, Iterator, Generator, Awaitable, Coroutine
^
security/ai_agents/family_communication_hub_a_plus.py:13:1: F401 'typing.FrozenSet' imported but unused
from typing import Dict, List, Any, Optional, Union, Callable, Protocol, Tuple, Set, FrozenSet, Sequence, Iterable, Iterator, Generator, Awaitable, Coroutine
^
security/ai_agents/family_communication_hub_a_plus.py:13:1: F401 'typing.Sequence' imported but unused
from typing import Dict, List, Any, Optional, Union, Callable, Protocol, Tuple, Set, FrozenSet, Sequence, Iterable, Iterator, Generator, Awaitable, Coroutine
^
security/ai_agents/family_communication_hub_a_plus.py:13:1: F401 'typing.Iterable' imported but unused
from typing import Dict, List, Any, Optional, Union, Callable, Protocol, Tuple, Set, FrozenSet, Sequence, Iterable, Iterator, Generator, Awaitable, Coroutine
^
security/ai_agents/family_communication_hub_a_plus.py:13:1: F401 'typing.Iterator' imported but unused
from typing import Dict, List, Any, Optional, Union, Callable, Protocol, Tuple, Set, FrozenSet, Sequence, Iterable, Iterator, Generator, Awaitable, Coroutine
^
security/ai_agents/family_communication_hub_a_plus.py:13:1: F401 'typing.Generator' imported but unused
from typing import Dict, List, Any, Optional, Union, Callable, Protocol, Tuple, Set, FrozenSet, Sequence, Iterable, Iterator, Generator, Awaitable, Coroutine
^
security/ai_agents/family_communication_hub_a_plus.py:13:1: F401 'typing.Awaitable' imported but unused
from typing import Dict, List, Any, Optional, Union, Callable, Protocol, Tuple, Set, FrozenSet, Sequence, Iterable, Iterator, Generator, Awaitable, Coroutine
^
security/ai_agents/family_communication_hub_a_plus.py:13:1: F401 'typing.Coroutine' imported but unused
from typing import Dict, List, Any, Optional, Union, Callable, Protocol, Tuple, Set, FrozenSet, Sequence, Iterable, Iterator, Generator, Awaitable, Coroutine
^
security/ai_agents/family_communication_hub_a_plus.py:13:80: E501 line too long (157 > 79 characters)
from typing import Dict, List, Any, Optional, Union, Callable, Protocol, Tuple, Set, FrozenSet, Sequence, Iterable, Iterator, Generator, Awaitable, Coroutine
                                                                               ^
security/ai_agents/family_communication_hub_a_plus.py:17:1: F401 'sklearn.cluster.DBSCAN' imported but unused
from sklearn.cluster import KMeans, DBSCAN
^
security/ai_agents/family_communication_hub_a_plus.py:18:1: F401 'sklearn.ensemble.RandomForestClassifier' imported but unused
from sklearn.ensemble import IsolationForest, RandomForestClassifier
^
security/ai_agents/family_communication_hub_a_plus.py:21:1: F401 'pandas as pd' imported but unused
import pandas as pd
^
security/ai_agents/family_communication_hub_a_plus.py:22:1: F401 'scipy.stats' imported but unused
from scipy import stats
^
security/ai_agents/family_communication_hub_a_plus.py:23:1: F401 'scipy.optimize.minimize' imported but unused
from scipy.optimize import minimize
^
security/ai_agents/family_communication_hub_a_plus.py:24:1: F401 'scipy.signal.welch' imported but unused
from scipy.signal import welch
^
security/ai_agents/family_communication_hub_a_plus.py:25:1: F401 'networkx as nx' imported but unused
import networkx as nx
^
security/ai_agents/family_communication_hub_a_plus.py:26:1: F401 'collections.defaultdict' imported but unused
from collections import defaultdict, Counter
^
security/ai_agents/family_communication_hub_a_plus.py:26:1: F401 'collections.Counter' imported but unused
from collections import defaultdict, Counter
^
security/ai_agents/family_communication_hub_a_plus.py:27:1: F401 'threading' imported but unused
import threading
^
security/ai_agents/family_communication_hub_a_plus.py:28:1: F401 'queue' imported but unused
import queue
^
security/ai_agents/family_communication_hub_a_plus.py:119:1: W293 blank line contains whitespace
    
^
security/ai_agents/family_communication_hub_a_plus.py:126:1: W293 blank line contains whitespace
        
^
security/ai_agents/family_communication_hub_a_plus.py:127:80: E501 line too long (81 > 79 characters)
    async def train_models(self, data: List[Dict[str, Any]]) -> Dict[str, float]:
                                                                               ^
security/ai_agents/family_communication_hub_a_plus.py:130:1: W293 blank line contains whitespace
        """
        Обучение ML моделей
        
        Args:
            data: Данные для обучения
            
        Returns:
            Dict с метриками качества моделей
        """
^
security/ai_agents/family_communication_hub_a_plus.py:133:1: W293 blank line contains whitespace
        """
        Обучение ML моделей
        
        Args:
            data: Данные для обучения
            
        Returns:
            Dict с метриками качества моделей
        """
^
security/ai_agents/family_communication_hub_a_plus.py:140:1: W293 blank line contains whitespace
            
^
security/ai_agents/family_communication_hub_a_plus.py:144:80: E501 line too long (85 > 79 characters)
            self.models['anomaly_detection'] = self._train_anomaly_detection_model(X)
                                                                               ^
security/ai_agents/family_communication_hub_a_plus.py:145:1: W293 blank line contains whitespace
            
^
security/ai_agents/family_communication_hub_a_plus.py:148:1: W293 blank line contains whitespace
            
^
security/ai_agents/family_communication_hub_a_plus.py:151:1: W293 blank line contains whitespace
            
^
security/ai_agents/family_communication_hub_a_plus.py:155:1: W293 blank line contains whitespace
    
^
security/ai_agents/family_communication_hub_a_plus.py:156:80: E501 line too long (98 > 79 characters)
    def _prepare_training_data(self, data: List[Dict[str, Any]]) -> Tuple[np.ndarray, np.ndarray]:
                                                                               ^
security/ai_agents/family_communication_hub_a_plus.py:159:1: W293 blank line contains whitespace
        """
        Подготовка данных для обучения
        
        Args:
            data: Исходные данные
            
        Returns:
            Tuple с признаками и метками
        """
^
security/ai_agents/family_communication_hub_a_plus.py:162:1: W293 blank line contains whitespace
        """
        Подготовка данных для обучения
        
        Args:
            data: Исходные данные
            
        Returns:
            Tuple с признаками и метками
        """
^
security/ai_agents/family_communication_hub_a_plus.py:168:1: W293 blank line contains whitespace
        
^
security/ai_agents/family_communication_hub_a_plus.py:173:1: W293 blank line contains whitespace
            
^
security/ai_agents/family_communication_hub_a_plus.py:177:1: W293 blank line contains whitespace
        
^
security/ai_agents/family_communication_hub_a_plus.py:179:1: W293 blank line contains whitespace
    
^
security/ai_agents/family_communication_hub_a_plus.py:183:1: W293 blank line contains whitespace
        """
        Извлечение признаков из элемента данных
        
        Args:
            item: Элемент данных
            
        Returns:
            List с признаками
        """
^
security/ai_agents/family_communication_hub_a_plus.py:186:1: W293 blank line contains whitespace
        """
        Извлечение признаков из элемента данных
        
        Args:
            item: Элемент данных
            
        Returns:
            List с признаками
        """
^
security/ai_agents/family_communication_hub_a_plus.py:191:1: W293 blank line contains whitespace
        
^
security/ai_agents/family_communication_hub_a_plus.py:202:1: W293 blank line contains whitespace
        
^
security/ai_agents/family_communication_hub_a_plus.py:212:1: W293 blank line contains whitespace
        
^
security/ai_agents/family_communication_hub_a_plus.py:222:1: W293 blank line contains whitespace
        
^
security/ai_agents/family_communication_hub_a_plus.py:224:1: W293 blank line contains whitespace
    
^
security/ai_agents/family_communication_hub_a_plus.py:228:1: W293 blank line contains whitespace
        """
        Извлечение метки из элемента данных
        
        Args:
            item: Элемент данных
            
        Returns:
            int с меткой
        """
^
security/ai_agents/family_communication_hub_a_plus.py:231:1: W293 blank line contains whitespace
        """
        Извлечение метки из элемента данных
        
        Args:
            item: Элемент данных
            
        Returns:
            int с меткой
        """
^
security/ai_agents/family_communication_hub_a_plus.py:242:1: W293 blank line contains whitespace
    
^
security/ai_agents/family_communication_hub_a_plus.py:246:1: W293 blank line contains whitespace
        """
        Обучение модели анализа тональности
        
        Args:
            X: Признаки
            y: Метки
            
        Returns:
            Обученная модель
        """
^
security/ai_agents/family_communication_hub_a_plus.py:250:1: W293 blank line contains whitespace
        """
        Обучение модели анализа тональности
        
        Args:
            X: Признаки
            y: Метки
            
        Returns:
            Обученная модель
        """
^
security/ai_agents/family_communication_hub_a_plus.py:254:9: F811 redefinition of unused 'RandomForestClassifier' from line 18
        from sklearn.ensemble import RandomForestClassifier
        ^
security/ai_agents/family_communication_hub_a_plus.py:255:1: W293 blank line contains whitespace
        
^
security/ai_agents/family_communication_hub_a_plus.py:259:1: W293 blank line contains whitespace
    
^
security/ai_agents/family_communication_hub_a_plus.py:263:1: W293 blank line contains whitespace
        """
        Обучение модели кластеризации
        
        Args:
            X: Признаки
            
        Returns:
            Обученная модель
        """
^
security/ai_agents/family_communication_hub_a_plus.py:266:1: W293 blank line contains whitespace
        """
        Обучение модели кластеризации
        
        Args:
            X: Признаки
            
        Returns:
            Обученная модель
        """
^
security/ai_agents/family_communication_hub_a_plus.py:273:1: W293 blank line contains whitespace
    
^
security/ai_agents/family_communication_hub_a_plus.py:277:1: W293 blank line contains whitespace
        """
        Обучение модели обнаружения аномалий
        
        Args:
            X: Признаки
            
        Returns:
            Обученная модель
        """
^
security/ai_agents/family_communication_hub_a_plus.py:280:1: W293 blank line contains whitespace
        """
        Обучение модели обнаружения аномалий
        
        Args:
            X: Признаки
            
        Returns:
            Обученная модель
        """
^
security/ai_agents/family_communication_hub_a_plus.py:287:1: W293 blank line contains whitespace
    
^
security/ai_agents/family_communication_hub_a_plus.py:288:80: E501 line too long (81 > 79 characters)
    def _validate_models(self, X: np.ndarray, y: np.ndarray) -> Dict[str, float]:
                                                                               ^
security/ai_agents/family_communication_hub_a_plus.py:291:1: W293 blank line contains whitespace
        """
        Валидация моделей
        
        Args:
            X: Признаки
            y: Метки
            
        Returns:
            Dict с метриками качества
        """
^
security/ai_agents/family_communication_hub_a_plus.py:295:1: W293 blank line contains whitespace
        """
        Валидация моделей
        
        Args:
            X: Признаки
            y: Метки
            
        Returns:
            Dict с метриками качества
        """
^
security/ai_agents/family_communication_hub_a_plus.py:300:1: W293 blank line contains whitespace
        
^
security/ai_agents/family_communication_hub_a_plus.py:305:1: W293 blank line contains whitespace
        
^
security/ai_agents/family_communication_hub_a_plus.py:311:1: W293 blank line contains whitespace
        
^
security/ai_agents/family_communication_hub_a_plus.py:316:1: W293 blank line contains whitespace
        
^
security/ai_agents/family_communication_hub_a_plus.py:322:1: W293 blank line contains whitespace
    
^
security/ai_agents/family_communication_hub_a_plus.py:326:1: W293 blank line contains whitespace
        """
        Инициализация семейного коммуникационного центра
        
        Args:
            family_id: Уникальный идентификатор семьи
        """
^
security/ai_agents/family_communication_hub_a_plus.py:343:1: W293 blank line contains whitespace
        
^
security/ai_agents/family_communication_hub_a_plus.py:346:1: W293 blank line contains whitespace
        
^
security/ai_agents/family_communication_hub_a_plus.py:349:1: W293 blank line contains whitespace
    
^
security/ai_agents/family_communication_hub_a_plus.py:357:80: E501 line too long (83 > 79 characters)
            sender_roles=[FamilyRole.PARENT, FamilyRole.CHILD, FamilyRole.ELDERLY],
                                                                               ^
security/ai_agents/family_communication_hub_a_plus.py:358:80: E501 line too long (86 > 79 characters)
            recipient_roles=[FamilyRole.PARENT, FamilyRole.CHILD, FamilyRole.ELDERLY],
                                                                               ^
security/ai_agents/family_communication_hub_a_plus.py:359:80: E501 line too long (95 > 79 characters)
            allowed_message_types=[MessageType.EMERGENCY, MessageType.TEXT, MessageType.VOICE],
                                                                               ^
security/ai_agents/family_communication_hub_a_plus.py:360:80: E501 line too long (120 > 79 characters)
            allowed_channels=[CommunicationChannel.INTERNAL, CommunicationChannel.SMS, CommunicationChannel.VOICE_CALL],
                                                                               ^
security/ai_agents/family_communication_hub_a_plus.py:363:1: W293 blank line contains whitespace
        
^
security/ai_agents/family_communication_hub_a_plus.py:369:80: E501 line too long (83 > 79 characters)
            sender_roles=[FamilyRole.PARENT, FamilyRole.CHILD, FamilyRole.ELDERLY],
                                                                               ^
security/ai_agents/family_communication_hub_a_plus.py:370:80: E501 line too long (86 > 79 characters)
            recipient_roles=[FamilyRole.PARENT, FamilyRole.CHILD, FamilyRole.ELDERLY],
                                                                               ^
security/ai_agents/family_communication_hub_a_plus.py:371:80: E501 line too long (91 > 79 characters)
            allowed_message_types=[MessageType.TEXT, MessageType.IMAGE, MessageType.VIDEO],
                                                                               ^
security/ai_agents/family_communication_hub_a_plus.py:372:80: E501 line too long (89 > 79 characters)
            allowed_channels=[CommunicationChannel.INTERNAL, CommunicationChannel.EMAIL],
                                                                               ^
security/ai_agents/family_communication_hub_a_plus.py:375:1: W293 blank line contains whitespace
    
^
security/ai_agents/family_communication_hub_a_plus.py:379:1: W293 blank line contains whitespace
        
^
security/ai_agents/family_communication_hub_a_plus.py:382:1: W293 blank line contains whitespace
        
^
security/ai_agents/family_communication_hub_a_plus.py:385:1: W293 blank line contains whitespace
    
^
security/ai_agents/family_communication_hub_a_plus.py:389:1: W293 blank line contains whitespace
        """
        Добавление члена семьи
        
        Args:
            member: Член семьи
            
        Returns:
            bool: True если успешно добавлен
        """
^
security/ai_agents/family_communication_hub_a_plus.py:392:1: W293 blank line contains whitespace
        """
        Добавление члена семьи
        
        Args:
            member: Член семьи
            
        Returns:
            bool: True если успешно добавлен
        """
^
security/ai_agents/family_communication_hub_a_plus.py:404:1: W293 blank line contains whitespace
    
^
security/ai_agents/family_communication_hub_a_plus.py:408:1: W293 blank line contains whitespace
        """
        Отправка сообщения
        
        Args:
            message: Сообщение для отправки
            
        Returns:
            bool: True если успешно отправлено
        """
^
security/ai_agents/family_communication_hub_a_plus.py:411:1: W293 blank line contains whitespace
        """
        Отправка сообщения
        
        Args:
            message: Сообщение для отправки
            
        Returns:
            bool: True если успешно отправлено
        """
^
security/ai_agents/family_communication_hub_a_plus.py:418:80: E501 line too long (87 > 79 characters)
                self.logger.warning(f"Сообщение заблокировано правилами: {message.id}")
                                                                               ^
security/ai_agents/family_communication_hub_a_plus.py:420:1: W293 blank line contains whitespace
            
^
security/ai_agents/family_communication_hub_a_plus.py:425:1: W293 blank line contains whitespace
            
^
security/ai_agents/family_communication_hub_a_plus.py:428:1: W293 blank line contains whitespace
            
^
security/ai_agents/family_communication_hub_a_plus.py:431:1: W293 blank line contains whitespace
            
^
security/ai_agents/family_communication_hub_a_plus.py:435:1: W293 blank line contains whitespace
    
^
security/ai_agents/family_communication_hub_a_plus.py:439:1: W293 blank line contains whitespace
        """
        Проверка правил коммуникации
        
        Args:
            message: Сообщение для проверки
            
        Returns:
            bool: True если правила соблюдены
        """
^
security/ai_agents/family_communication_hub_a_plus.py:442:1: W293 blank line contains whitespace
        """
        Проверка правил коммуникации
        
        Args:
            message: Сообщение для проверки
            
        Returns:
            bool: True если правила соблюдены
        """
^
security/ai_agents/family_communication_hub_a_plus.py:449:1: W293 blank line contains whitespace
        
^
security/ai_agents/family_communication_hub_a_plus.py:453:1: W293 blank line contains whitespace
            
^
security/ai_agents/family_communication_hub_a_plus.py:457:1: W293 blank line contains whitespace
            
^
security/ai_agents/family_communication_hub_a_plus.py:459:80: E501 line too long (110 > 79 characters)
            recipient_roles = [self.members[rid].role for rid in message.recipient_ids if rid in self.members]
                                                                               ^
security/ai_agents/family_communication_hub_a_plus.py:460:80: E501 line too long (81 > 79 characters)
            if not any(role in rule.recipient_roles for role in recipient_roles):
                                                                               ^
security/ai_agents/family_communication_hub_a_plus.py:462:1: W293 blank line contains whitespace
            
^
security/ai_agents/family_communication_hub_a_plus.py:466:1: W293 blank line contains whitespace
            
^
security/ai_agents/family_communication_hub_a_plus.py:470:1: W293 blank line contains whitespace
            
^
security/ai_agents/family_communication_hub_a_plus.py:472:1: W293 blank line contains whitespace
        
^
security/ai_agents/family_communication_hub_a_plus.py:474:1: W293 blank line contains whitespace
    
^
security/ai_agents/family_communication_hub_a_plus.py:478:1: W293 blank line contains whitespace
        """
        Анализ сообщения с помощью ML
        
        Args:
            message: Сообщение для анализа
        """
^
security/ai_agents/family_communication_hub_a_plus.py:485:1: W293 blank line contains whitespace
            
^
security/ai_agents/family_communication_hub_a_plus.py:494:1: W293 blank line contains whitespace
            
^
security/ai_agents/family_communication_hub_a_plus.py:498:80: E501 line too long (87 > 79 characters)
                sentiment = self.ml_analyzer.models['sentiment'].predict([features])[0]
                                                                               ^
security/ai_agents/family_communication_hub_a_plus.py:500:1: W293 blank line contains whitespace
            
^
security/ai_agents/family_communication_hub_a_plus.py:504:80: E501 line too long (109 > 79 characters)
                anomaly_score = self.ml_analyzer.models['anomaly_detection'].decision_function([features])[0]
                                                                               ^
security/ai_agents/family_communication_hub_a_plus.py:506:1: W293 blank line contains whitespace
                
^
security/ai_agents/family_communication_hub_a_plus.py:509:80: E501 line too long (89 > 79 characters)
                    self.logger.warning(f"Обнаружена аномалия в сообщении: {message.id}")
                                                                               ^
security/ai_agents/family_communication_hub_a_plus.py:510:1: W293 blank line contains whitespace
            
^
security/ai_agents/family_communication_hub_a_plus.py:513:1: W293 blank line contains whitespace
    
^
security/ai_agents/family_communication_hub_a_plus.py:519:80: E501 line too long (119 > 79 characters)
                recent_messages = [msg for msg in self.messages if msg.timestamp > datetime.now() - timedelta(hours=1)]
                                                                               ^
security/ai_agents/family_communication_hub_a_plus.py:520:1: W293 blank line contains whitespace
                
^
security/ai_agents/family_communication_hub_a_plus.py:532:1: W293 blank line contains whitespace
                    
^
security/ai_agents/family_communication_hub_a_plus.py:535:1: W293 blank line contains whitespace
                
^
security/ai_agents/family_communication_hub_a_plus.py:537:1: W293 blank line contains whitespace
                
^
security/ai_agents/family_communication_hub_a_plus.py:541:1: W293 blank line contains whitespace
    
^
security/ai_agents/family_communication_hub_a_plus.py:550:1: W293 blank line contains whitespace
                
^
security/ai_agents/family_communication_hub_a_plus.py:552:1: W293 blank line contains whitespace
                
^
security/ai_agents/family_communication_hub_a_plus.py:554:80: E501 line too long (80 > 79 characters)
                self.logger.error(f"Ошибка в задаче обновления статистики: {e}")
                                                                               ^
security/ai_agents/family_communication_hub_a_plus.py:556:1: W293 blank line contains whitespace
    
^
security/ai_agents/family_communication_hub_a_plus.py:560:1: W293 blank line contains whitespace
        """
        Получение статистики семьи
        
        Returns:
            Dict с статистикой
        """
^
security/ai_agents/family_communication_hub_a_plus.py:574:1: W293 blank line contains whitespace
    
^
security/ai_agents/family_communication_hub_a_plus.py:575:80: E501 line too long (84 > 79 characters)
    async def train_ml_models(self, data: List[Dict[str, Any]]) -> Dict[str, float]:
                                                                               ^
security/ai_agents/family_communication_hub_a_plus.py:578:1: W293 blank line contains whitespace
        """
        Обучение ML моделей
        
        Args:
            data: Данные для обучения
            
        Returns:
            Dict с метриками качества
        """
^
security/ai_agents/family_communication_hub_a_plus.py:581:1: W293 blank line contains whitespace
        """
        Обучение ML моделей
        
        Args:
            data: Данные для обучения
            
        Returns:
            Dict с метриками качества
        """
^
security/ai_agents/family_communication_hub_a_plus.py:586:1: W293 blank line contains whitespace
    
^
security/ai_agents/family_communication_hub_a_plus.py:598:1: W293 blank line contains whitespace
    
^
security/ai_agents/family_communication_hub_a_plus.py:607:1: W293 blank line contains whitespace
    
^
security/ai_agents/family_communication_hub_a_plus.py:614:1: W293 blank line contains whitespace
    
^
security/ai_agents/family_communication_hub_a_plus.py:617:1: W293 blank line contains whitespace
    
^
security/ai_agents/family_communication_hub_a_plus.py:629:1: W293 blank line contains whitespace
    
^
security/ai_agents/family_communication_hub_a_plus.py:631:1: W293 blank line contains whitespace
    
^
security/ai_agents/family_communication_hub_a_plus.py:633:5: F811 redefinition of unused 'stats' from line 22
    stats = await hub.get_family_statistics()
    ^
security/ai_agents/family_communication_hub_a_plus.py:635:1: W293 blank line contains whitespace
    
^
security/ai_agents/family_communication_hub_a_plus.py:641:24: W292 no newline at end of file
    asyncio.run(main())                       ^
security/ai_agents/family_communication_replacement.py:9:1: F401 'json' imported but unused
import json
^
security/ai_agents/family_communication_replacement.py:10:1: F401 'hashlib' imported but unused
import hashlib
^
security/ai_agents/family_communication_replacement.py:11:1: F401 'time' imported but unused
import time
^
security/ai_agents/family_communication_replacement.py:12:1: F401 'datetime.timedelta' imported but unused
from datetime import datetime, timedelta
^
security/ai_agents/family_communication_replacement.py:13:1: F401 'typing.Union' imported but unused
from typing import Dict, List, Any, Optional, Union, Callable, Protocol, Tuple, Set, FrozenSet, Sequence, Iterable, Iterator, Generator, Awaitable, Coroutine
^
security/ai_agents/family_communication_replacement.py:13:1: F401 'typing.Callable' imported but unused
from typing import Dict, List, Any, Optional, Union, Callable, Protocol, Tuple, Set, FrozenSet, Sequence, Iterable, Iterator, Generator, Awaitable, Coroutine
^
security/ai_agents/family_communication_replacement.py:13:1: F401 'typing.Protocol' imported but unused
from typing import Dict, List, Any, Optional, Union, Callable, Protocol, Tuple, Set, FrozenSet, Sequence, Iterable, Iterator, Generator, Awaitable, Coroutine
^
security/ai_agents/family_communication_replacement.py:13:1: F401 'typing.Set' imported but unused
from typing import Dict, List, Any, Optional, Union, Callable, Protocol, Tuple, Set, FrozenSet, Sequence, Iterable, Iterator, Generator, Awaitable, Coroutine
^
security/ai_agents/family_communication_replacement.py:13:1: F401 'typing.FrozenSet' imported but unused
from typing import Dict, List, Any, Optional, Union, Callable, Protocol, Tuple, Set, FrozenSet, Sequence, Iterable, Iterator, Generator, Awaitable, Coroutine
^
security/ai_agents/family_communication_replacement.py:13:1: F401 'typing.Sequence' imported but unused
from typing import Dict, List, Any, Optional, Union, Callable, Protocol, Tuple, Set, FrozenSet, Sequence, Iterable, Iterator, Generator, Awaitable, Coroutine
^
security/ai_agents/family_communication_replacement.py:13:1: F401 'typing.Iterable' imported but unused
from typing import Dict, List, Any, Optional, Union, Callable, Protocol, Tuple, Set, FrozenSet, Sequence, Iterable, Iterator, Generator, Awaitable, Coroutine
^
security/ai_agents/family_communication_replacement.py:13:1: F401 'typing.Iterator' imported but unused
from typing import Dict, List, Any, Optional, Union, Callable, Protocol, Tuple, Set, FrozenSet, Sequence, Iterable, Iterator, Generator, Awaitable, Coroutine
^
security/ai_agents/family_communication_replacement.py:13:1: F401 'typing.Generator' imported but unused
from typing import Dict, List, Any, Optional, Union, Callable, Protocol, Tuple, Set, FrozenSet, Sequence, Iterable, Iterator, Generator, Awaitable, Coroutine
^
security/ai_agents/family_communication_replacement.py:13:1: F401 'typing.Awaitable' imported but unused
from typing import Dict, List, Any, Optional, Union, Callable, Protocol, Tuple, Set, FrozenSet, Sequence, Iterable, Iterator, Generator, Awaitable, Coroutine
^
security/ai_agents/family_communication_replacement.py:13:1: F401 'typing.Coroutine' imported but unused
from typing import Dict, List, Any, Optional, Union, Callable, Protocol, Tuple, Set, FrozenSet, Sequence, Iterable, Iterator, Generator, Awaitable, Coroutine
^
security/ai_agents/family_communication_replacement.py:13:80: E501 line too long (157 > 79 characters)
from typing import Dict, List, Any, Optional, Union, Callable, Protocol, Tuple, Set, FrozenSet, Sequence, Iterable, Iterator, Generator, Awaitable, Coroutine
                                                                               ^
security/ai_agents/family_communication_replacement.py:17:1: F401 'requests' imported but unused
import requests
^
security/ai_agents/family_communication_replacement.py:97:1: W293 blank line contains whitespace
    
^
security/ai_agents/family_communication_replacement.py:101:1: W293 blank line contains whitespace
        """
        Инициализация обработчика внешних API
        
        Args:
            config: Конфигурация API
        """
^
security/ai_agents/family_communication_replacement.py:111:1: W293 blank line contains whitespace
        
^
security/ai_agents/family_communication_replacement.py:112:80: E501 line too long (101 > 79 characters)
    async def send_telegram_message(self, chat_id: str, text: str, parse_mode: str = "HTML") -> bool:
                                                                               ^
security/ai_agents/family_communication_replacement.py:115:1: W293 blank line contains whitespace
        """
        Отправка сообщения в Telegram
        
        Args:
            chat_id: ID чата
            text: Текст сообщения
            parse_mode: Режим парсинга
            
        Returns:
            bool: True если успешно отправлено
        """
^
security/ai_agents/family_communication_replacement.py:120:1: W293 blank line contains whitespace
        """
        Отправка сообщения в Telegram
        
        Args:
            chat_id: ID чата
            text: Текст сообщения
            parse_mode: Режим парсинга
            
        Returns:
            bool: True если успешно отправлено
        """
^
security/ai_agents/family_communication_replacement.py:128:1: W293 blank line contains whitespace
                
^
security/ai_agents/family_communication_replacement.py:129:80: E501 line too long (82 > 79 characters)
            url = f"https://api.telegram.org/bot{self.telegram_token}/sendMessage"
                                                                               ^
security/ai_agents/family_communication_replacement.py:135:1: W293 blank line contains whitespace
            
^
security/ai_agents/family_communication_replacement.py:139:80: E501 line too long (86 > 79 characters)
                        self.logger.info(f"Telegram сообщение отправлено в {chat_id}")
                                                                               ^
security/ai_agents/family_communication_replacement.py:142:80: E501 line too long (89 > 79 characters)
                        self.logger.error(f"Ошибка отправки Telegram: {response.status}")
                                                                               ^
security/ai_agents/family_communication_replacement.py:144:1: W293 blank line contains whitespace
                        
^
security/ai_agents/family_communication_replacement.py:148:1: W293 blank line contains whitespace
    
^
security/ai_agents/family_communication_replacement.py:149:80: E501 line too long (110 > 79 characters)
    async def send_discord_message(self, channel_id: str, content: str, embed: Optional[Dict] = None) -> bool:
                                                                               ^
security/ai_agents/family_communication_replacement.py:152:1: W293 blank line contains whitespace
        """
        Отправка сообщения в Discord
        
        Args:
            channel_id: ID канала
            content: Содержимое сообщения
            embed: Вложение (опционально)
            
        Returns:
            bool: True если успешно отправлено
        """
^
security/ai_agents/family_communication_replacement.py:157:1: W293 blank line contains whitespace
        """
        Отправка сообщения в Discord
        
        Args:
            channel_id: ID канала
            content: Содержимое сообщения
            embed: Вложение (опционально)
            
        Returns:
            bool: True если успешно отправлено
        """
^
security/ai_agents/family_communication_replacement.py:165:1: W293 blank line contains whitespace
                
^
security/ai_agents/family_communication_replacement.py:171:1: W293 blank line contains whitespace
            
^
security/ai_agents/family_communication_replacement.py:175:1: W293 blank line contains whitespace
            
^
security/ai_agents/family_communication_replacement.py:177:80: E501 line too long (85 > 79 characters)
                async with session.post(url, json=data, headers=headers) as response:
                                                                               ^
security/ai_agents/family_communication_replacement.py:179:80: E501 line too long (88 > 79 characters)
                        self.logger.info(f"Discord сообщение отправлено в {channel_id}")
                                                                               ^
security/ai_agents/family_communication_replacement.py:182:80: E501 line too long (88 > 79 characters)
                        self.logger.error(f"Ошибка отправки Discord: {response.status}")
                                                                               ^
security/ai_agents/family_communication_replacement.py:184:1: W293 blank line contains whitespace
                        
^
security/ai_agents/family_communication_replacement.py:188:1: W293 blank line contains whitespace
    
^
security/ai_agents/family_communication_replacement.py:192:1: W293 blank line contains whitespace
        """
        Отправка SMS через Twilio
        
        Args:
            phone: Номер телефона
            message: Текст сообщения
            
        Returns:
            bool: True если успешно отправлено
        """
^
security/ai_agents/family_communication_replacement.py:196:1: W293 blank line contains whitespace
        """
        Отправка SMS через Twilio
        
        Args:
            phone: Номер телефона
            message: Текст сообщения
            
        Returns:
            bool: True если успешно отправлено
        """
^
security/ai_agents/family_communication_replacement.py:204:1: W293 blank line contains whitespace
                
^
security/ai_agents/family_communication_replacement.py:205:80: E501 line too long (95 > 79 characters)
            url = f"https://api.twilio.com/2010-04-01/Accounts/{self.twilio_sid}/Messages.json"
                                                                               ^
security/ai_agents/family_communication_replacement.py:212:1: W293 blank line contains whitespace
            
^
security/ai_agents/family_communication_replacement.py:219:80: E501 line too long (84 > 79 characters)
                        self.logger.error(f"Ошибка отправки SMS: {response.status}")
                                                                               ^
security/ai_agents/family_communication_replacement.py:221:1: W293 blank line contains whitespace
                        
^
security/ai_agents/family_communication_replacement.py:228:80: E501 line too long (95 > 79 characters)
    """Замена FamilyCommunicationHub с использованием SmartNotificationManager + внешние API"""
                                                                               ^
security/ai_agents/family_communication_replacement.py:229:1: W293 blank line contains whitespace
    
^
security/ai_agents/family_communication_replacement.py:233:1: W293 blank line contains whitespace
        """
        Инициализация замены семейного коммуникационного центра
        
        Args:
            family_id: Уникальный идентификатор семьи
            config: Конфигурация внешних API
        """
^
security/ai_agents/family_communication_replacement.py:250:1: W293 blank line contains whitespace
        
^
security/ai_agents/family_communication_replacement.py:253:80: E501 line too long (94 > 79 characters)
            from security.ai_agents.smart_notification_manager import SmartNotificationManager
                                                                               ^
security/ai_agents/family_communication_replacement.py:259:1: W293 blank line contains whitespace
        
^
security/ai_agents/family_communication_replacement.py:262:80: E501 line too long (88 > 79 characters)
            from security.ai_agents.contextual_alert_system import ContextualAlertSystem
                                                                               ^
security/ai_agents/family_communication_replacement.py:268:1: W293 blank line contains whitespace
    
^
security/ai_agents/family_communication_replacement.py:272:1: W293 blank line contains whitespace
        """
        Добавление члена семьи
        
        Args:
            member: Член семьи
            
        Returns:
            bool: True если успешно добавлен
        """
^
security/ai_agents/family_communication_replacement.py:275:1: W293 blank line contains whitespace
        """
        Добавление члена семьи
        
        Args:
            member: Член семьи
            
        Returns:
            bool: True если успешно добавлен
        """
^
security/ai_agents/family_communication_replacement.py:287:1: W293 blank line contains whitespace
    
^
security/ai_agents/family_communication_replacement.py:291:1: W293 blank line contains whitespace
        """
        Отправка сообщения через внешние API
        
        Args:
            message: Сообщение для отправки
            
        Returns:
            bool: True если успешно отправлено
        """
^
security/ai_agents/family_communication_replacement.py:294:1: W293 blank line contains whitespace
        """
        Отправка сообщения через внешние API
        
        Args:
            message: Сообщение для отправки
            
        Returns:
            bool: True если успешно отправлено
        """
^
security/ai_agents/family_communication_replacement.py:301:1: W293 blank line contains whitespace
            
^
security/ai_agents/family_communication_replacement.py:315:1: W293 blank line contains whitespace
            
^
security/ai_agents/family_communication_replacement.py:317:80: E501 line too long (83 > 79 characters)
            if message.priority == MessagePriority.EMERGENCY and self.alert_system:
                                                                               ^
security/ai_agents/family_communication_replacement.py:328:1: W293 blank line contains whitespace
            
^
security/ai_agents/family_communication_replacement.py:334:1: W293 blank line contains whitespace
                
^
security/ai_agents/family_communication_replacement.py:336:80: E501 line too long (94 > 79 characters)
                if message.channel == CommunicationChannel.TELEGRAM and recipient.telegram_id:
                                                                               ^
security/ai_agents/family_communication_replacement.py:337:80: E501 line too long (108 > 79 characters)
                    if await self.api_handler.send_telegram_message(recipient.telegram_id, message.content):
                                                                               ^
security/ai_agents/family_communication_replacement.py:340:1: W293 blank line contains whitespace
                
^
security/ai_agents/family_communication_replacement.py:342:80: E501 line too long (94 > 79 characters)
                elif message.channel == CommunicationChannel.DISCORD and recipient.discord_id:
                                                                               ^
security/ai_agents/family_communication_replacement.py:343:80: E501 line too long (106 > 79 characters)
                    if await self.api_handler.send_discord_message(recipient.discord_id, message.content):
                                                                               ^
security/ai_agents/family_communication_replacement.py:346:1: W293 blank line contains whitespace
                
^
security/ai_agents/family_communication_replacement.py:348:80: E501 line too long (85 > 79 characters)
                elif message.channel == CommunicationChannel.SMS and recipient.phone:
                                                                               ^
security/ai_agents/family_communication_replacement.py:349:80: E501 line too long (89 > 79 characters)
                    if await self.api_handler.send_sms(recipient.phone, message.content):
                                                                               ^
security/ai_agents/family_communication_replacement.py:352:1: W293 blank line contains whitespace
            
^
security/ai_agents/family_communication_replacement.py:357:80: E501 line too long (112 > 79 characters)
            self.stats['api_success_rate'] = (success_count / total_attempts) * 100 if total_attempts > 0 else 0
                                                                               ^
security/ai_agents/family_communication_replacement.py:358:1: W293 blank line contains whitespace
            
^
security/ai_agents/family_communication_replacement.py:360:80: E501 line too long (113 > 79 characters)
            self.logger.info(f"Сообщение {message.id} отправлено через {success_count}/{total_attempts} каналов")
                                                                               ^
security/ai_agents/family_communication_replacement.py:362:1: W293 blank line contains whitespace
            
^
security/ai_agents/family_communication_replacement.py:366:1: W293 blank line contains whitespace
    
^
security/ai_agents/family_communication_replacement.py:370:1: W293 blank line contains whitespace
        """
        Получение статистики семьи
        
        Returns:
            Dict с статистикой
        """
^
security/ai_agents/family_communication_replacement.py:382:80: E501 line too long (84 > 79 characters)
            'notification_manager_available': self.notification_manager is not None,
                                                                               ^
security/ai_agents/family_communication_replacement.py:385:1: W293 blank line contains whitespace
    
^
security/ai_agents/family_communication_replacement.py:390:1: W293 blank line contains whitespace
    
^
security/ai_agents/family_communication_replacement.py:408:1: W293 blank line contains whitespace
    
^
security/ai_agents/family_communication_replacement.py:412:1: W293 blank line contains whitespace
    
^
security/ai_agents/family_communication_replacement.py:423:1: W293 blank line contains whitespace
    
^
security/ai_agents/family_communication_replacement.py:431:1: W293 blank line contains whitespace
    
^
security/ai_agents/family_communication_replacement.py:434:1: W293 blank line contains whitespace
    
^
security/ai_agents/family_communication_replacement.py:446:1: W293 blank line contains whitespace
    
^
security/ai_agents/family_communication_replacement.py:448:1: W293 blank line contains whitespace
    
^
security/ai_agents/family_communication_replacement.py:452:1: W293 blank line contains whitespace
    
^
security/ai_agents/family_communication_replacement.py:458:24: W292 no newline at end of file
    asyncio.run(main())                       ^
security/ai_agents/financial_protection_hub.py:30:1: F401 'time' imported but unused
import time
^
security/ai_agents/financial_protection_hub.py:32:1: F401 'hashlib' imported but unused
import hashlib
^
security/ai_agents/financial_protection_hub.py:33:1: F401 'json' imported but unused
import json
^
security/ai_agents/financial_protection_hub.py:34:1: F401 'requests' imported but unused
import requests
^
security/ai_agents/financial_protection_hub.py:35:1: F401 'typing.Tuple' imported but unused
from typing import Dict, List, Optional, Any, Tuple
^
security/ai_agents/financial_protection_hub.py:38:1: F401 'datetime.timedelta' imported but unused
from datetime import datetime, timedelta
^
security/ai_agents/financial_protection_hub.py:126:1: W293 blank line contains whitespace
    
^
security/ai_agents/financial_protection_hub.py:129:80: E501 line too long (97 > 79 characters)
        self.logger = logging.getLogger(f"{self.__class__.__module__}.{self.__class__.__name__}")
                                                                               ^
security/ai_agents/financial_protection_hub.py:130:1: W293 blank line contains whitespace
        
^
security/ai_agents/financial_protection_hub.py:133:1: W293 blank line contains whitespace
        
^
security/ai_agents/financial_protection_hub.py:136:1: W293 blank line contains whitespace
        
^
security/ai_agents/financial_protection_hub.py:139:1: W293 blank line contains whitespace
        
^
security/ai_agents/financial_protection_hub.py:146:1: W293 blank line contains whitespace
        
^
security/ai_agents/financial_protection_hub.py:152:1: W293 blank line contains whitespace
        
^
security/ai_agents/financial_protection_hub.py:254:14: W291 trailing whitespace
        self, 
             ^
security/ai_agents/financial_protection_hub.py:255:25: W291 trailing whitespace
        elderly_id: str, 
                        ^
security/ai_agents/financial_protection_hub.py:260:1: W293 blank line contains whitespace
        """
        Анализ транзакции на мошенничество
        
        Args:
            elderly_id: ID пожилого человека
            transaction_data: Данные транзакции
            
        Returns:
            RiskAssessment: Оценка риска
        """
^
security/ai_agents/financial_protection_hub.py:264:1: W293 blank line contains whitespace
        """
        Анализ транзакции на мошенничество
        
        Args:
            elderly_id: ID пожилого человека
            transaction_data: Данные транзакции
            
        Returns:
            RiskAssessment: Оценка риска
        """
^
security/ai_agents/financial_protection_hub.py:269:80: E501 line too long (101 > 79 characters)
            self.logger.info(f"Анализ транзакции {transaction_data.transaction_id} для {elderly_id}")
                                                                               ^
security/ai_agents/financial_protection_hub.py:270:1: W293 blank line contains whitespace
            
^
security/ai_agents/financial_protection_hub.py:273:1: W293 blank line contains whitespace
            
^
security/ai_agents/financial_protection_hub.py:276:1: W293 blank line contains whitespace
            
^
security/ai_agents/financial_protection_hub.py:278:80: E501 line too long (89 > 79 characters)
            risk_score = await self._calculate_risk_score(risk_factors, transaction_data)
                                                                               ^
security/ai_agents/financial_protection_hub.py:279:1: W293 blank line contains whitespace
            
^
security/ai_agents/financial_protection_hub.py:282:1: W293 blank line contains whitespace
            
^
security/ai_agents/financial_protection_hub.py:284:80: E501 line too long (93 > 79 characters)
            recommended_action = self._determine_recommended_action(risk_score, risk_factors)
                                                                               ^
security/ai_agents/financial_protection_hub.py:285:1: W293 blank line contains whitespace
            
^
security/ai_agents/financial_protection_hub.py:288:1: W293 blank line contains whitespace
            
^
security/ai_agents/financial_protection_hub.py:291:1: W293 blank line contains whitespace
            
^
security/ai_agents/financial_protection_hub.py:293:80: E501 line too long (85 > 79 characters)
            additional_checks = await self._determine_additional_checks(risk_factors)
                                                                               ^
security/ai_agents/financial_protection_hub.py:294:1: W293 blank line contains whitespace
            
^
security/ai_agents/financial_protection_hub.py:307:1: W293 blank line contains whitespace
            
^
security/ai_agents/financial_protection_hub.py:313:1: W293 blank line contains whitespace
            
^
security/ai_agents/financial_protection_hub.py:316:80: E501 line too long (106 > 79 characters)
                await self._notify_family_about_transaction(elderly_id, transaction_data, risk_assessment)
                                                                               ^
security/ai_agents/financial_protection_hub.py:318:1: W293 blank line contains whitespace
            
^
security/ai_agents/financial_protection_hub.py:322:1: W293 blank line contains whitespace
            
^
security/ai_agents/financial_protection_hub.py:324:1: W293 blank line contains whitespace
            
^
security/ai_agents/financial_protection_hub.py:339:80: E501 line too long (97 > 79 characters)
    async def _analyze_risk_factors(self, transaction_data: TransactionData) -> List[RiskFactor]:
                                                                               ^
security/ai_agents/financial_protection_hub.py:342:1: W293 blank line contains whitespace
        
^
security/ai_agents/financial_protection_hub.py:348:1: W293 blank line contains whitespace
        
^
security/ai_agents/financial_protection_hub.py:351:80: E501 line too long (83 > 79 characters)
        if current_hour in self.security_rules["time_restrictions"]["night_hours"]:
                                                                               ^
security/ai_agents/financial_protection_hub.py:353:1: W293 blank line contains whitespace
        
^
security/ai_agents/financial_protection_hub.py:357:1: W293 blank line contains whitespace
        
^
security/ai_agents/financial_protection_hub.py:361:1: W293 blank line contains whitespace
        
^
security/ai_agents/financial_protection_hub.py:365:1: W293 blank line contains whitespace
        
^
security/ai_agents/financial_protection_hub.py:369:1: W293 blank line contains whitespace
        
^
security/ai_agents/financial_protection_hub.py:373:1: W293 blank line contains whitespace
        
^
security/ai_agents/financial_protection_hub.py:377:14: W291 trailing whitespace
        self, 
             ^
security/ai_agents/financial_protection_hub.py:378:40: W291 trailing whitespace
        risk_factors: List[RiskFactor], 
                                       ^
security/ai_agents/financial_protection_hub.py:384:1: W293 blank line contains whitespace
            
^
security/ai_agents/financial_protection_hub.py:396:1: W293 blank line contains whitespace
            
^
security/ai_agents/financial_protection_hub.py:400:1: W293 blank line contains whitespace
            
^
security/ai_agents/financial_protection_hub.py:404:1: W293 blank line contains whitespace
            
^
security/ai_agents/financial_protection_hub.py:405:80: E501 line too long (87 > 79 characters)
            if transaction_data.transaction_type == TransactionType.CRYPTO_TRANSACTION:
                                                                               ^
security/ai_agents/financial_protection_hub.py:407:1: W293 blank line contains whitespace
            
^
security/ai_agents/financial_protection_hub.py:410:1: W293 blank line contains whitespace
            
^
security/ai_agents/financial_protection_hub.py:412:1: W293 blank line contains whitespace
            
^
security/ai_agents/financial_protection_hub.py:428:80: E501 line too long (102 > 79 characters)
    def _determine_recommended_action(self, risk_score: float, risk_factors: List[RiskFactor]) -> str:
                                                                               ^
security/ai_agents/financial_protection_hub.py:439:80: E501 line too long (94 > 79 characters)
    async def _determine_additional_checks(self, risk_factors: List[RiskFactor]) -> List[str]:
                                                                               ^
security/ai_agents/financial_protection_hub.py:442:1: W293 blank line contains whitespace
        
^
security/ai_agents/financial_protection_hub.py:445:1: W293 blank line contains whitespace
        
^
security/ai_agents/financial_protection_hub.py:448:1: W293 blank line contains whitespace
        
^
security/ai_agents/financial_protection_hub.py:451:1: W293 blank line contains whitespace
        
^
security/ai_agents/financial_protection_hub.py:454:1: W293 blank line contains whitespace
        
^
security/ai_agents/financial_protection_hub.py:460:80: E501 line too long (91 > 79 characters)
        return any(suspicious in recipient.lower() for suspicious in suspicious_recipients)
                                                                               ^
security/ai_agents/financial_protection_hub.py:462:80: E501 line too long (81 > 79 characters)
    def _is_foreign_transaction(self, transaction_data: TransactionData) -> bool:
                                                                               ^
security/ai_agents/financial_protection_hub.py:465:80: E501 line too long (86 > 79 characters)
        return transaction_data.location in self.fraud_patterns["high_risk_countries"]
                                                                               ^
security/ai_agents/financial_protection_hub.py:467:80: E501 line too long (80 > 79 characters)
    def _is_crypto_transaction(self, transaction_data: TransactionData) -> bool:
                                                                               ^
security/ai_agents/financial_protection_hub.py:471:80: E501 line too long (85 > 79 characters)
        return any(indicator in description_lower for indicator in crypto_indicators)
                                                                               ^
security/ai_agents/financial_protection_hub.py:473:80: E501 line too long (81 > 79 characters)
    def _has_suspicious_pattern(self, transaction_data: TransactionData) -> bool:
                                                                               ^
security/ai_agents/financial_protection_hub.py:476:80: E501 line too long (80 > 79 characters)
        suspicious_descriptions = self.fraud_patterns["suspicious_descriptions"]
                                                                               ^
security/ai_agents/financial_protection_hub.py:477:80: E501 line too long (93 > 79 characters)
        return any(suspicious in description_lower for suspicious in suspicious_descriptions)
                                                                               ^
security/ai_agents/financial_protection_hub.py:479:80: E501 line too long (88 > 79 characters)
    def _is_high_frequency_transaction(self, transaction_data: TransactionData) -> bool:
                                                                               ^
security/ai_agents/financial_protection_hub.py:487:80: E501 line too long (91 > 79 characters)
            self.logger.warning(f"Блокировка транзакции {transaction_data.transaction_id}")
                                                                               ^
security/ai_agents/financial_protection_hub.py:488:1: W293 blank line contains whitespace
            
^
security/ai_agents/financial_protection_hub.py:491:1: W293 blank line contains whitespace
            
^
security/ai_agents/financial_protection_hub.py:496:14: W291 trailing whitespace
        self, 
             ^
security/ai_agents/financial_protection_hub.py:497:25: W291 trailing whitespace
        elderly_id: str, 
                        ^
security/ai_agents/financial_protection_hub.py:498:43: W291 trailing whitespace
        transaction_data: TransactionData, 
                                          ^
security/ai_agents/financial_protection_hub.py:503:80: E501 line too long (97 > 79 characters)
            self.logger.info(f"Уведомление семьи о транзакции {transaction_data.transaction_id}")
                                                                               ^
security/ai_agents/financial_protection_hub.py:504:1: W293 blank line contains whitespace
            
^
security/ai_agents/financial_protection_hub.py:507:1: W293 blank line contains whitespace
            
^
security/ai_agents/financial_protection_hub.py:512:14: W291 trailing whitespace
        self, 
             ^
security/ai_agents/financial_protection_hub.py:513:24: W291 trailing whitespace
        bank: BankType, 
                       ^
security/ai_agents/financial_protection_hub.py:519:1: W293 blank line contains whitespace
            
^
security/ai_agents/financial_protection_hub.py:522:1: W293 blank line contains whitespace
            
^
security/ai_agents/financial_protection_hub.py:525:1: W293 blank line contains whitespace
            
^
security/ai_agents/financial_protection_hub.py:527:1: W293 blank line contains whitespace
            
^
security/ai_agents/financial_protection_hub.py:540:80: E501 line too long (116 > 79 characters)
            "success_rate": (self.total_transactions - self.blocked_transactions) / max(self.total_transactions, 1),
                                                                               ^
security/ai_agents/financial_protection_hub.py:573:1: W293 blank line contains whitespace
        
^
security/ai_agents/financial_protection_hub.py:587:1: W293 blank line contains whitespace
        
^
security/ai_agents/financial_protection_hub.py:588:80: E501 line too long (88 > 79 characters)
        risk_assessment = await hub.analyze_transaction("elderly_001", transaction_data)
                                                                               ^
security/ai_agents/financial_protection_hub.py:590:1: W293 blank line contains whitespace
        
^
security/ai_agents/financial_protection_hub.py:594:1: W293 blank line contains whitespace
    
^
security/ai_agents/financial_protection_hub.py:596:49: W292 no newline at end of file
    asyncio.run(test_financial_protection_hub())                                                ^
security/ai_agents/incident_response_agent.py:13:1: F401 'datetime.timedelta' imported but unused
from datetime import datetime, timedelta
^
security/ai_agents/incident_response_agent.py:84:80: E501 line too long (81 > 79 characters)
    def __init__(self, incident_id, title, description, incident_type, severity):
                                                                               ^
security/ai_agents/incident_response_agent.py:259:80: E501 line too long (107 > 79 characters)
            "last_incident_time": self.last_incident_time.isoformat() if self.last_incident_time else None,
                                                                               ^
security/ai_agents/incident_response_agent.py:260:80: E501 line too long (107 > 79 characters)
            "last_response_time": self.last_response_time.isoformat() if self.last_response_time else None,
                                                                               ^
security/ai_agents/incident_response_agent.py:336:80: E501 line too long (103 > 79 characters)
            self.log_activity("Ошибка инициализации IncidentResponseAgent: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/incident_response_agent.py:342:80: E501 line too long (90 > 79 characters)
            self.log_activity("Инициализация AI моделей для реагирования на инциденты...")
                                                                               ^
security/ai_agents/incident_response_agent.py:349:80: E501 line too long (81 > 79 characters)
                    "temporal_features", "severity_indicators", "attack_patterns"
                                                                               ^
security/ai_agents/incident_response_agent.py:360:80: E501 line too long (82 > 79 characters)
                    "incident_type", "affected_systems_count", "indicators_count",
                                                                               ^
security/ai_agents/incident_response_agent.py:373:80: E501 line too long (83 > 79 characters)
                    "available_resources", "historical_success", "time_constraints"
                                                                               ^
security/ai_agents/incident_response_agent.py:415:80: E501 line too long (92 > 79 characters)
            self.log_activity("Ошибка инициализации AI моделей: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/incident_response_agent.py:426:80: E501 line too long (91 > 79 characters)
                    {"action": "ISOLATE", "description": "Изолировать зараженные системы"},
                                                                               ^
security/ai_agents/incident_response_agent.py:427:80: E501 line too long (105 > 79 characters)
                    {"action": "QUARANTINE", "description": "Поместить в карантин подозрительные файлы"},
                                                                               ^
security/ai_agents/incident_response_agent.py:428:80: E501 line too long (97 > 79 characters)
                    {"action": "INVESTIGATE", "description": "Провести расследование инцидента"},
                                                                               ^
security/ai_agents/incident_response_agent.py:429:80: E501 line too long (94 > 79 characters)
                    {"action": "PATCH", "description": "Установить исправления безопасности"},
                                                                               ^
security/ai_agents/incident_response_agent.py:430:80: E501 line too long (99 > 79 characters)
                    {"action": "RESTORE", "description": "Восстановить системы из резервных копий"}
                                                                               ^
security/ai_agents/incident_response_agent.py:440:80: E501 line too long (99 > 79 characters)
                    {"action": "BLOCK", "description": "Заблокировать подозрительные URL и email"},
                                                                               ^
security/ai_agents/incident_response_agent.py:441:80: E501 line too long (102 > 79 characters)
                    {"action": "NOTIFY", "description": "Уведомить пользователей о фишинговой атаке"},
                                                                               ^
security/ai_agents/incident_response_agent.py:442:80: E501 line too long (97 > 79 characters)
                    {"action": "INVESTIGATE", "description": "Провести расследование источника"},
                                                                               ^
security/ai_agents/incident_response_agent.py:443:80: E501 line too long (92 > 79 characters)
                    {"action": "PATCH", "description": "Обновить системы защиты от фишинга"}
                                                                               ^
security/ai_agents/incident_response_agent.py:453:80: E501 line too long (89 > 79 characters)
                    {"action": "BLOCK", "description": "Заблокировать атакующий трафик"},
                                                                               ^
security/ai_agents/incident_response_agent.py:454:80: E501 line too long (105 > 79 characters)
                    {"action": "ESCALATE", "description": "Эскалировать в команду сетевой безопасности"},
                                                                               ^
security/ai_agents/incident_response_agent.py:455:80: E501 line too long (89 > 79 characters)
                    {"action": "MONITOR", "description": "Мониторить состояние системы"},
                                                                               ^
security/ai_agents/incident_response_agent.py:456:80: E501 line too long (90 > 79 characters)
                    {"action": "RESTORE", "description": "Восстановить нормальную работу"}
                                                                               ^
security/ai_agents/incident_response_agent.py:466:80: E501 line too long (91 > 79 characters)
                    {"action": "ISOLATE", "description": "Изолировать затронутые системы"},
                                                                               ^
security/ai_agents/incident_response_agent.py:467:80: E501 line too long (103 > 79 characters)
                    {"action": "INVESTIGATE", "description": "Провести расследование масштаба утечки"},
                                                                               ^
security/ai_agents/incident_response_agent.py:468:80: E501 line too long (94 > 79 characters)
                    {"action": "NOTIFY", "description": "Уведомить затронутых пользователей"},
                                                                               ^
security/ai_agents/incident_response_agent.py:469:80: E501 line too long (101 > 79 characters)
                    {"action": "ESCALATE", "description": "Эскалировать в руководство и регуляторы"},
                                                                               ^
security/ai_agents/incident_response_agent.py:479:80: E501 line too long (96 > 79 characters)
            self.log_activity("Ошибка загрузки планов реагирования: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/incident_response_agent.py:490:80: E501 line too long (80 > 79 characters)
                "escalation_contacts": ["security_team", "management", "legal"],
                                                                               ^
security/ai_agents/incident_response_agent.py:518:80: E501 line too long (98 > 79 characters)
            self.log_activity("Ошибка инициализации правил эскалации: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/incident_response_agent.py:566:80: E501 line too long (89 > 79 characters)
            self.log_activity("Ошибка настройки уведомлений: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/incident_response_agent.py:579:80: E501 line too long (93 > 79 characters)
            self.log_activity("Ошибка запуска фоновых процессов: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/incident_response_agent.py:581:80: E501 line too long (83 > 79 characters)
    def _validate_incident_data(self, title, description, incident_type, severity):
                                                                               ^
security/ai_agents/incident_response_agent.py:585:80: E501 line too long (82 > 79 characters)
            if not title or not isinstance(title, str) or len(title.strip()) == 0:
                                                                               ^
security/ai_agents/incident_response_agent.py:589:80: E501 line too long (100 > 79 characters)
            if not description or not isinstance(description, str) or len(description.strip()) == 0:
                                                                               ^
security/ai_agents/incident_response_agent.py:600:80: E501 line too long (80 > 79 characters)
                self.log_activity("Некорректная серьезность инцидента", "error")
                                                                               ^
security/ai_agents/incident_response_agent.py:605:80: E501 line too long (80 > 79 characters)
                self.log_activity("Название инцидента слишком длинное", "error")
                                                                               ^
security/ai_agents/incident_response_agent.py:609:80: E501 line too long (80 > 79 characters)
                self.log_activity("Описание инцидента слишком длинное", "error")
                                                                               ^
security/ai_agents/incident_response_agent.py:615:80: E501 line too long (94 > 79 characters)
            self.log_activity("Ошибка валидации данных инцидента: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/incident_response_agent.py:618:80: E501 line too long (98 > 79 characters)
    def create_incident(self, title, description, incident_type, severity, affected_systems=None):
                                                                               ^
security/ai_agents/incident_response_agent.py:622:80: E501 line too long (93 > 79 characters)
            if not self._validate_incident_data(title, description, incident_type, severity):
                                                                               ^
security/ai_agents/incident_response_agent.py:629:80: E501 line too long (107 > 79 characters)
            incident_id = "INC_{}_{}".format(int(time.time()), hashlib.md5(title.encode()).hexdigest()[:8])
                                                                               ^
security/ai_agents/incident_response_agent.py:632:80: E501 line too long (89 > 79 characters)
            incident = Incident(incident_id, title, description, incident_type, severity)
                                                                               ^
security/ai_agents/incident_response_agent.py:667:80: E501 line too long (86 > 79 characters)
            self.log_activity("Ошибка создания инцидента: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/incident_response_agent.py:683:80: E501 line too long (91 > 79 characters)
            self.log_activity("Ошибка классификации инцидента: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/incident_response_agent.py:699:80: E501 line too long (92 > 79 characters)
            self.log_activity("Ошибка предсказания серьезности: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/incident_response_agent.py:727:80: E501 line too long (86 > 79 characters)
            self.log_activity("Ошибка расчета приоритета: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/incident_response_agent.py:739:80: E501 line too long (85 > 79 characters)
                    incident.incident_type, 'value') else str(incident.incident_type)
                                                                               ^
security/ai_agents/incident_response_agent.py:740:80: E501 line too long (120 > 79 characters)
                self.metrics.incidents_by_type[incident_type] = self.metrics.incidents_by_type.get(incident_type, 0) + 1
                                                                               ^
security/ai_agents/incident_response_agent.py:743:80: E501 line too long (117 > 79 characters)
                severity = incident.severity.value if hasattr(incident.severity, 'value') else str(incident.severity)
                                                                               ^
security/ai_agents/incident_response_agent.py:744:80: E501 line too long (118 > 79 characters)
                self.metrics.incidents_by_severity[severity] = self.metrics.incidents_by_severity.get(severity, 0) + 1
                                                                               ^
security/ai_agents/incident_response_agent.py:747:80: E501 line too long (109 > 79 characters)
                status = incident.status.value if hasattr(incident.status, 'value') else str(incident.status)
                                                                               ^
security/ai_agents/incident_response_agent.py:748:80: E501 line too long (110 > 79 characters)
                self.metrics.incidents_by_status[status] = self.metrics.incidents_by_status.get(status, 0) + 1
                                                                               ^
security/ai_agents/incident_response_agent.py:751:80: E501 line too long (85 > 79 characters)
            self.log_activity("Ошибка обновления метрик: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/incident_response_agent.py:756:80: E501 line too long (105 > 79 characters)
            self.log_activity("Автоматическое реагирование на инцидент: {}".format(incident.incident_id))
                                                                               ^
security/ai_agents/incident_response_agent.py:765:80: E501 line too long (91 > 79 characters)
                        self._execute_action(incident, step["action"], step["description"])
                                                                               ^
security/ai_agents/incident_response_agent.py:772:80: E501 line too long (96 > 79 characters)
            self.log_activity("Ошибка автоматического реагирования: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/incident_response_agent.py:777:80: E501 line too long (110 > 79 characters)
            incident_type_str = incident_type.value if hasattr(incident_type, 'value') else str(incident_type)
                                                                               ^
security/ai_agents/incident_response_agent.py:780:80: E501 line too long (96 > 79 characters)
            self.log_activity("Ошибка получения плана реагирования: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/incident_response_agent.py:791:80: E501 line too long (83 > 79 characters)
            self.log_activity("Выполнение действия {} для инцидента {}: {}".format(
                                                                               ^
security/ai_agents/incident_response_agent.py:803:80: E501 line too long (98 > 79 characters)
            self.metrics.actions_by_type[action] = self.metrics.actions_by_type.get(action, 0) + 1
                                                                               ^
security/ai_agents/incident_response_agent.py:806:80: E501 line too long (87 > 79 characters)
            self.log_activity("Ошибка выполнения действия: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/incident_response_agent.py:812:80: E501 line too long (113 > 79 characters)
            severity = incident.severity.value if hasattr(incident.severity, 'value') else str(incident.severity)
                                                                               ^
security/ai_agents/incident_response_agent.py:815:80: E501 line too long (88 > 79 characters)
            if escalation_rules and escalation_rules.get("immediate_escalation", False):
                                                                               ^
security/ai_agents/incident_response_agent.py:820:80: E501 line too long (105 > 79 characters)
            escalation_time = escalation_rules.get("escalation_time", 1440) if escalation_rules else 1440
                                                                               ^
security/ai_agents/incident_response_agent.py:825:80: E501 line too long (86 > 79 characters)
            self.log_activity("Ошибка проверки эскалации: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/incident_response_agent.py:831:80: E501 line too long (85 > 79 characters)
            self.log_activity("Эскалация инцидента: {}".format(incident.incident_id))
                                                                               ^
security/ai_agents/incident_response_agent.py:834:80: E501 line too long (88 > 79 characters)
            incident.update_status(IncidentStatus.ESCALATED, "Автоматическая эскалация")
                                                                               ^
security/ai_agents/incident_response_agent.py:843:80: E501 line too long (87 > 79 characters)
            self.log_activity("Ошибка эскалации инцидента: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/incident_response_agent.py:848:80: E501 line too long (113 > 79 characters)
            severity = incident.severity.value if hasattr(incident.severity, 'value') else str(incident.severity)
                                                                               ^
security/ai_agents/incident_response_agent.py:860:80: E501 line too long (89 > 79 characters)
                        self._send_notification(incident, contact_info[channel], channel)
                                                                               ^
security/ai_agents/incident_response_agent.py:863:80: E501 line too long (88 > 79 characters)
            self.log_activity("Ошибка отправки уведомлений: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/incident_response_agent.py:873:80: E501 line too long (84 > 79 characters)
            # В реальной реализации здесь будет отправка через соответствующий канал
                                                                               ^
security/ai_agents/incident_response_agent.py:876:80: E501 line too long (88 > 79 characters)
            self.log_activity("Ошибка отправки уведомления: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/incident_response_agent.py:882:80: E501 line too long (88 > 79 characters)
                self.log_activity("Инцидент не найден: {}".format(incident_id), "error")
                                                                               ^
security/ai_agents/incident_response_agent.py:892:80: E501 line too long (80 > 79 characters)
            incident.update_status(IncidentStatus.RESOLVED, "Инцидент разрешен")
                                                                               ^
security/ai_agents/incident_response_agent.py:901:80: E501 line too long (88 > 79 characters)
            self.log_activity("Ошибка разрешения инцидента: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/incident_response_agent.py:913:80: E501 line too long (104 > 79 characters)
                total_time = self.metrics.avg_resolution_time * self.metrics.manually_resolved_incidents
                                                                               ^
security/ai_agents/incident_response_agent.py:914:80: E501 line too long (86 > 79 characters)
                self.metrics.avg_resolution_time = (total_time + resolution_hours) / \
                    (self.metrics.manually_resolved_incidents + 1)
                                                                               ^
security/ai_agents/incident_response_agent.py:922:80: E501 line too long (96 > 79 characters)
            self.log_activity("Ошибка обновления метрик разрешения: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/incident_response_agent.py:927:80: E501 line too long (80 > 79 characters)
            self.log_activity("Генерация отчета о реагировании на инциденты...")
                                                                               ^
security/ai_agents/incident_response_agent.py:936:80: E501 line too long (80 > 79 characters)
                    "incidents_by_severity": self.metrics.incidents_by_severity,
                                                                               ^
security/ai_agents/incident_response_agent.py:942:80: E501 line too long (90 > 79 characters)
                "incidents": [incident.to_dict() for incident in self.incidents.values()],
                                                                               ^
security/ai_agents/incident_response_agent.py:952:80: E501 line too long (111 > 79 characters)
            report_file = os.path.join(report_dir, "incident_response_report_{}.json".format(int(time.time())))
                                                                               ^
security/ai_agents/incident_response_agent.py:960:80: E501 line too long (84 > 79 characters)
            self.log_activity("Ошибка генерации отчета: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/incident_response_agent.py:973:80: E501 line too long (103 > 79 characters)
                    "description": "Высокое время реагирования, рекомендуется оптимизировать процессы",
                                                                               ^
security/ai_agents/incident_response_agent.py:974:80: E501 line too long (86 > 79 characters)
                    "action": "Автоматизировать больше действий и улучшить мониторинг"
                                                                               ^
security/ai_agents/incident_response_agent.py:981:80: E501 line too long (90 > 79 characters)
                    "description": "Низкое соблюдение SLA, требуется улучшение процессов",
                                                                               ^
security/ai_agents/incident_response_agent.py:985:80: E501 line too long (81 > 79 characters)
            if self.metrics.false_positives > self.metrics.total_incidents * 0.1:
                                                                               ^
security/ai_agents/incident_response_agent.py:996:80: E501 line too long (90 > 79 characters)
            self.log_activity("Ошибка генерации рекомендаций: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/incident_response_agent.py:1013:80: E501 line too long (99 > 79 characters)
            self.log_activity("Ошибка остановки IncidentResponseAgent: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/incident_response_agent.py:1026:80: E501 line too long (104 > 79 characters)
                          for iid, incident in self.incidents.items()}, f, indent=2, ensure_ascii=False)
                                                                               ^
security/ai_agents/incident_response_agent.py:1031:80: E501 line too long (82 > 79 characters)
                json.dump(self.metrics.to_dict(), f, indent=2, ensure_ascii=False)
                                                                               ^
security/ai_agents/incident_response_agent.py:1036:80: E501 line too long (85 > 79 characters)
            self.log_activity("Ошибка сохранения данных: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/incident_response_agent.py:1052:80: E501 line too long (99 > 79 characters)
            affected_systems=[{"id": "server1", "type": "web_server", "description": "Web server"}]
                                                                               ^
security/ai_agents/malware_detection_agent.py:16:1: F401 'subprocess' imported but unused
import subprocess
^
security/ai_agents/malware_detection_agent.py:17:1: F401 'tempfile' imported but unused
import tempfile
^
security/ai_agents/malware_detection_agent.py:18:1: F401 'typing.Tuple' imported but unused
from typing import List, Dict, Optional, Any, Tuple, Union
^
security/ai_agents/malware_detection_agent.py:18:1: F401 'typing.Union' imported but unused
from typing import List, Dict, Optional, Any, Tuple, Union
^
security/ai_agents/malware_detection_agent.py:22:1: E302 expected 2 blank lines, found 1
class MalwareType(Enum):
^
security/ai_agents/malware_detection_agent.py:36:1: E302 expected 2 blank lines, found 1
class ThreatLevel(Enum):
^
security/ai_agents/malware_detection_agent.py:43:1: E302 expected 2 blank lines, found 1
class DetectionMethod(Enum):
^
security/ai_agents/malware_detection_agent.py:53:1: E302 expected 2 blank lines, found 1
@dataclass
^
security/ai_agents/malware_detection_agent.py:63:80: E501 line too long (88 > 79 characters)
    created_at: str = field(default_factory=lambda: datetime.datetime.now().isoformat())
                                                                               ^
security/ai_agents/malware_detection_agent.py:64:80: E501 line too long (88 > 79 characters)
    updated_at: str = field(default_factory=lambda: datetime.datetime.now().isoformat())
                                                                               ^
security/ai_agents/malware_detection_agent.py:91:80: E501 line too long (83 > 79 characters)
            created_at=data.get("created_at", datetime.datetime.now().isoformat()),
                                                                               ^
security/ai_agents/malware_detection_agent.py:92:80: E501 line too long (83 > 79 characters)
            updated_at=data.get("updated_at", datetime.datetime.now().isoformat()),
                                                                               ^
security/ai_agents/malware_detection_agent.py:96:1: E302 expected 2 blank lines, found 1
@dataclass
^
security/ai_agents/malware_detection_agent.py:109:80: E501 line too long (89 > 79 characters)
    detected_at: str = field(default_factory=lambda: datetime.datetime.now().isoformat())
                                                                               ^
security/ai_agents/malware_detection_agent.py:145:80: E501 line too long (85 > 79 characters)
            detected_at=data.get("detected_at", datetime.datetime.now().isoformat()),
                                                                               ^
security/ai_agents/malware_detection_agent.py:151:1: E302 expected 2 blank lines, found 1
@dataclass
^
security/ai_agents/malware_detection_agent.py:190:80: E501 line too long (91 > 79 characters)
            detections=[MalwareDetection.from_dict(d) for d in data.get("detections", [])],
                                                                               ^
security/ai_agents/malware_detection_agent.py:194:1: E302 expected 2 blank lines, found 1
class MalwareDetectionAgent:
^
security/ai_agents/malware_detection_agent.py:198:1: W293 blank line contains whitespace
    
^
security/ai_agents/malware_detection_agent.py:209:1: W293 blank line contains whitespace
        
^
security/ai_agents/malware_detection_agent.py:212:1: W293 blank line contains whitespace
        
^
security/ai_agents/malware_detection_agent.py:229:40: W291 trailing whitespace
                signature_id="sig_002", 
                                       ^
security/ai_agents/malware_detection_agent.py:247:1: W293 blank line contains whitespace
        
^
security/ai_agents/malware_detection_agent.py:260:1: W293 blank line contains whitespace
            
^
security/ai_agents/malware_detection_agent.py:265:1: W293 blank line contains whitespace
            
^
security/ai_agents/malware_detection_agent.py:269:1: W293 blank line contains whitespace
            
^
security/ai_agents/malware_detection_agent.py:271:80: E501 line too long (81 > 79 characters)
            detection = self._scan_by_signatures(file_path, file_hash, file_size)
                                                                               ^
security/ai_agents/malware_detection_agent.py:274:1: W293 blank line contains whitespace
            
^
security/ai_agents/malware_detection_agent.py:276:80: E501 line too long (81 > 79 characters)
            detection = self._heuristic_analysis(file_path, file_hash, file_size)
                                                                               ^
security/ai_agents/malware_detection_agent.py:279:1: W293 blank line contains whitespace
                
^
security/ai_agents/malware_detection_agent.py:281:80: E501 line too long (82 > 79 characters)
            detection = self._behavioral_analysis(file_path, file_hash, file_size)
                                                                               ^
security/ai_agents/malware_detection_agent.py:284:1: W293 blank line contains whitespace
                
^
security/ai_agents/malware_detection_agent.py:287:1: W293 blank line contains whitespace
            
^
security/ai_agents/malware_detection_agent.py:298:9: E722 do not use bare 'except'
        except:
        ^
security/ai_agents/malware_detection_agent.py:308:80: E501 line too long (112 > 79 characters)
    def _scan_by_signatures(self, file_path: str, file_hash: str, file_size: int) -> Optional[MalwareDetection]:
                                                                               ^
security/ai_agents/malware_detection_agent.py:313:1: W293 blank line contains whitespace
                
^
security/ai_agents/malware_detection_agent.py:317:1: W293 blank line contains whitespace
                    
^
security/ai_agents/malware_detection_agent.py:321:80: E501 line too long (86 > 79 characters)
                            detection_id=f"det_{datetime.datetime.now().timestamp()}",
                                                                               ^
security/ai_agents/malware_detection_agent.py:332:9: E722 do not use bare 'except'
        except:
        ^
security/ai_agents/malware_detection_agent.py:336:80: E501 line too long (112 > 79 characters)
    def _heuristic_analysis(self, file_path: str, file_hash: str, file_size: int) -> Optional[MalwareDetection]:
                                                                               ^
security/ai_agents/malware_detection_agent.py:340:1: W293 blank line contains whitespace
        
^
security/ai_agents/malware_detection_agent.py:344:80: E501 line too long (99 > 79 characters)
            suspicious_extensions = ['.exe', '.scr', '.bat', '.cmd', '.com', '.pif', '.vbs', '.js']
                                                                               ^
security/ai_agents/malware_detection_agent.py:348:1: W293 blank line contains whitespace
            
^
security/ai_agents/malware_detection_agent.py:350:80: E501 line too long (86 > 79 characters)
            if file_size < 1024 or file_size > 100 * 1024 * 1024:  # < 1KB или > 100MB
                                                                               ^
security/ai_agents/malware_detection_agent.py:353:1: W293 blank line contains whitespace
            
^
security/ai_agents/malware_detection_agent.py:356:80: E501 line too long (86 > 79 characters)
            suspicious_names = ['virus', 'trojan', 'malware', 'backdoor', 'keylogger']
                                                                               ^
security/ai_agents/malware_detection_agent.py:362:1: W293 blank line contains whitespace
            
^
security/ai_agents/malware_detection_agent.py:376:9: E722 do not use bare 'except'
        except:
        ^
security/ai_agents/malware_detection_agent.py:380:80: E501 line too long (113 > 79 characters)
    def _behavioral_analysis(self, file_path: str, file_hash: str, file_size: int) -> Optional[MalwareDetection]:
                                                                               ^
security/ai_agents/malware_detection_agent.py:391:1: W293 blank line contains whitespace
            
^
security/ai_agents/malware_detection_agent.py:395:80: E501 line too long (82 > 79 characters)
                        detection_id=f"det_{datetime.datetime.now().timestamp()}",
                                                                               ^
security/ai_agents/malware_detection_agent.py:405:9: E722 do not use bare 'except'
        except:
        ^
security/ai_agents/malware_detection_agent.py:409:80: E501 line too long (84 > 79 characters)
    def scan_directory(self, directory: str, scan_type: str = "full") -> ScanResult:
                                                                               ^
security/ai_agents/malware_detection_agent.py:418:1: W293 blank line contains whitespace
        
^
security/ai_agents/malware_detection_agent.py:420:1: W293 blank line contains whitespace
        
^
security/ai_agents/malware_detection_agent.py:426:1: W293 blank line contains whitespace
                    
^
security/ai_agents/malware_detection_agent.py:431:1: W293 blank line contains whitespace
                        
^
security/ai_agents/malware_detection_agent.py:433:80: E501 line too long (94 > 79 characters)
                        if detection.threat_level in [ThreatLevel.HIGH, ThreatLevel.CRITICAL]:
                                                                               ^
security/ai_agents/malware_detection_agent.py:439:1: W293 blank line contains whitespace
                        
^
security/ai_agents/malware_detection_agent.py:440:80: E501 line too long (97 > 79 characters)
                        print(f"Обнаружена угроза: {file_path} - {detection.malware_type.value}")
                                                                               ^
security/ai_agents/malware_detection_agent.py:441:1: W293 blank line contains whitespace
                        
^
security/ai_agents/malware_detection_agent.py:446:1: W293 blank line contains whitespace
        
^
security/ai_agents/malware_detection_agent.py:448:69: W291 trailing whitespace
        scan_duration = (datetime.datetime.fromisoformat(end_time) - 
                                                                    ^
security/ai_agents/malware_detection_agent.py:449:25: E128 continuation line under-indented for visual indent
                        datetime.datetime.fromisoformat(start_time)).total_seconds()
                        ^
security/ai_agents/malware_detection_agent.py:449:80: E501 line too long (84 > 79 characters)
                        datetime.datetime.fromisoformat(start_time)).total_seconds()
                                                                               ^
security/ai_agents/malware_detection_agent.py:450:1: W293 blank line contains whitespace
        
^
security/ai_agents/malware_detection_agent.py:463:1: W293 blank line contains whitespace
        
^
security/ai_agents/malware_detection_agent.py:466:1: W293 blank line contains whitespace
        
^
security/ai_agents/malware_detection_agent.py:467:80: E501 line too long (87 > 79 characters)
        print(f"Сканирование завершено: {files_scanned} файлов, {threats_found} угроз")
                                                                               ^
security/ai_agents/malware_detection_agent.py:475:1: W293 blank line contains whitespace
            
^
security/ai_agents/malware_detection_agent.py:480:80: E501 line too long (95 > 79 characters)
                quarantine_path = os.path.join(self.quarantine_dir, f"{name}_{timestamp}{ext}")
                                                                               ^
security/ai_agents/malware_detection_agent.py:481:1: W293 blank line contains whitespace
            
^
security/ai_agents/malware_detection_agent.py:485:1: W293 blank line contains whitespace
            
^
security/ai_agents/malware_detection_agent.py:488:1: W293 blank line contains whitespace
            
^
security/ai_agents/malware_detection_agent.py:498:1: W293 blank line contains whitespace
        
^
security/ai_agents/malware_detection_agent.py:504:80: E501 line too long (86 > 79 characters)
            "false_positives": sum(1 for d in self.detections if d.is_false_positive),
                                                                               ^
security/ai_agents/malware_detection_agent.py:507:1: W293 blank line contains whitespace
        
^
security/ai_agents/malware_detection_agent.py:511:80: E501 line too long (86 > 79 characters)
            stats["by_type"][malware_type] = stats["by_type"].get(malware_type, 0) + 1
                                                                               ^
security/ai_agents/malware_detection_agent.py:512:1: W293 blank line contains whitespace
            
^
security/ai_agents/malware_detection_agent.py:515:80: E501 line too long (102 > 79 characters)
            stats["by_threat_level"][threat_level] = stats["by_threat_level"].get(threat_level, 0) + 1
                                                                               ^
security/ai_agents/malware_detection_agent.py:516:1: W293 blank line contains whitespace
            
^
security/ai_agents/malware_detection_agent.py:520:1: W293 blank line contains whitespace
        
^
security/ai_agents/malware_detection_agent.py:547:57: W291 trailing whitespace
            return [os.path.join(self.quarantine_dir, f) 
                                                        ^
security/ai_agents/malware_detection_agent.py:548:20: E128 continuation line under-indented for visual indent
                   for f in os.listdir(self.quarantine_dir) 
                   ^
security/ai_agents/malware_detection_agent.py:548:60: W291 trailing whitespace
                   for f in os.listdir(self.quarantine_dir) 
                                                           ^
security/ai_agents/malware_detection_agent.py:549:20: E128 continuation line under-indented for visual indent
                   if os.path.isfile(os.path.join(self.quarantine_dir, f))]
                   ^
security/ai_agents/malware_detection_agent.py:550:9: E722 do not use bare 'except'
        except:
        ^
security/ai_agents/malware_detection_agent.py:553:80: E501 line too long (87 > 79 characters)
    def restore_from_quarantine(self, quarantine_path: str, restore_path: str) -> bool:
                                                                               ^
security/ai_agents/malware_detection_agent.py:583:1: W293 blank line contains whitespace
            
^
security/ai_agents/malware_detection_agent.py:586:1: W293 blank line contains whitespace
            
^
security/ai_agents/malware_detection_agent.py:596:1: W293 blank line contains whitespace
            
^
security/ai_agents/malware_detection_agent.py:601:1: W293 blank line contains whitespace
            
^
security/ai_agents/malware_detection_agent.py:606:1: W293 blank line contains whitespace
            
^
security/ai_agents/malware_detection_agent.py:615:1: W293 blank line contains whitespace
        
^
security/ai_agents/malware_detection_agent.py:617:80: E501 line too long (82 > 79 characters)
            detected_time = datetime.datetime.fromisoformat(detection.detected_at)
                                                                               ^
security/ai_agents/malware_detection_agent.py:620:1: W293 blank line contains whitespace
        
^
security/ai_agents/malware_detection_agent.py:623:80: E501 line too long (83 > 79 characters)
    def simulate_malware_detection(self, file_path: str, malware_type: MalwareType, 
                                                                               ^
security/ai_agents/malware_detection_agent.py:623:84: W291 trailing whitespace
    def simulate_malware_detection(self, file_path: str, malware_type: MalwareType, 
                                                                                   ^
security/ai_agents/malware_detection_agent.py:624:34: E128 continuation line under-indented for visual indent
                                 threat_level: ThreatLevel, confidence: float = 0.9):
                                 ^
security/ai_agents/malware_detection_agent.py:624:80: E501 line too long (85 > 79 characters)
                                 threat_level: ThreatLevel, confidence: float = 0.9):
                                                                               ^
security/ai_agents/malware_detection_agent.py:626:80: E501 line too long (107 > 79 characters)
        file_hash = self._calculate_file_hash(file_path) if os.path.exists(file_path) else "simulated_hash"
                                                                               ^
security/ai_agents/malware_detection_agent.py:627:80: E501 line too long (85 > 79 characters)
        file_size = os.path.getsize(file_path) if os.path.exists(file_path) else 1024
                                                                               ^
security/ai_agents/malware_detection_agent.py:628:1: W293 blank line contains whitespace
        
^
security/ai_agents/malware_detection_agent.py:641:1: W293 blank line contains whitespace
        
^
security/ai_agents/malware_detection_agent.py:644:25: W292 no newline at end of file
        return detection                        ^
security/ai_agents/messenger_integration.py:13:1: F401 'time' imported but unused
import time
^
security/ai_agents/messenger_integration.py:19:1: F401 'typing.List' imported but unused
from typing import Dict, List, Optional, Any, Tuple
^
security/ai_agents/messenger_integration.py:19:1: F401 'typing.Optional' imported but unused
from typing import Dict, List, Optional, Any, Tuple
^
security/ai_agents/messenger_integration.py:19:1: F401 'typing.Tuple' imported but unused
from typing import Dict, List, Optional, Any, Tuple
^
security/ai_agents/messenger_integration.py:21:1: F401 'asyncio' imported but unused
import asyncio
^
security/ai_agents/messenger_integration.py:22:1: F401 'aiohttp' imported but unused
import aiohttp
^
security/ai_agents/messenger_integration.py:40:1: E302 expected 2 blank lines, found 1
class MessengerType(Enum):
^
security/ai_agents/messenger_integration.py:48:1: E302 expected 2 blank lines, found 1
class MessageType(Enum):
^
security/ai_agents/messenger_integration.py:58:1: E302 expected 2 blank lines, found 1
class MessagePriority(Enum):
^
security/ai_agents/messenger_integration.py:65:1: E302 expected 2 blank lines, found 1
@dataclass
^
security/ai_agents/messenger_integration.py:78:1: E302 expected 2 blank lines, found 1
@dataclass
^
security/ai_agents/messenger_integration.py:91:1: E302 expected 2 blank lines, found 1
class MessengerIntegration(SecurityBase):
^
security/ai_agents/messenger_integration.py:93:1: W293 blank line contains whitespace
    
^
security/ai_agents/messenger_integration.py:109:1: W293 blank line contains whitespace
            
^
security/ai_agents/messenger_integration.py:132:1: W293 blank line contains whitespace
            
^
security/ai_agents/messenger_integration.py:142:1: W293 blank line contains whitespace
            
^
security/ai_agents/messenger_integration.py:143:9: F841 local variable 'e' is assigned to but never used
        except Exception as e:
        ^
security/ai_agents/messenger_integration.py:225:1: W293 blank line contains whitespace
        
^
security/ai_agents/messenger_integration.py:226:80: E501 line too long (94 > 79 characters)
        log_file = os.path.join(log_dir, f"messenger_{datetime.now().strftime('%Y%m%d')}.log")
                                                                               ^
security/ai_agents/messenger_integration.py:227:1: W293 blank line contains whitespace
        
^
security/ai_agents/messenger_integration.py:231:80: E501 line too long (95 > 79 characters)
            handlers=[logging.FileHandler(log_file, encoding='utf-8'), logging.StreamHandler()]
                                                                               ^
security/ai_agents/messenger_integration.py:233:1: W293 blank line contains whitespace
        
^
security/ai_agents/messenger_integration.py:242:21: F841 local variable 'config' is assigned to but never used
                    config = json.load(f)
                    ^
security/ai_agents/messenger_integration.py:245:80: E501 line too long (96 > 79 characters)
                self.logger.info("Конфигурация не найдена, используются настройки по умолчанию")
                                                                               ^
security/ai_agents/messenger_integration.py:249:80: E501 line too long (87 > 79 characters)
    def send_message(self, text: str, recipient_id: str, messenger_type: MessengerType, 
                                                                               ^
security/ai_agents/messenger_integration.py:249:88: W291 trailing whitespace
    def send_message(self, text: str, recipient_id: str, messenger_type: MessengerType, 
                                                                                       ^
security/ai_agents/messenger_integration.py:250:21: E128 continuation line under-indented for visual indent
                    priority: MessagePriority = MessagePriority.NORMAL, 
                    ^
security/ai_agents/messenger_integration.py:250:72: W291 trailing whitespace
                    priority: MessagePriority = MessagePriority.NORMAL, 
                                                                       ^
security/ai_agents/messenger_integration.py:251:21: E128 continuation line under-indented for visual indent
                    message_type: MessageType = MessageType.TEXT) -> bool:
                    ^
security/ai_agents/messenger_integration.py:254:80: E501 line too long (103 > 79 characters)
            message_id = hashlib.md5(f"{text}{recipient_id}{datetime.now()}".encode()).hexdigest()[:12]
                                                                               ^
security/ai_agents/messenger_integration.py:255:1: W293 blank line contains whitespace
            
^
security/ai_agents/messenger_integration.py:266:1: W293 blank line contains whitespace
            
^
security/ai_agents/messenger_integration.py:268:1: W293 blank line contains whitespace
            
^
security/ai_agents/messenger_integration.py:271:1: W293 blank line contains whitespace
            
^
security/ai_agents/messenger_integration.py:276:80: E501 line too long (102 > 79 characters)
                self.logger.info(f"Сообщение отправлено через {messenger_type.value}: {text[:50]}...")
                                                                               ^
security/ai_agents/messenger_integration.py:279:80: E501 line too long (92 > 79 characters)
                self.logger.error(f"Ошибка отправки сообщения через {messenger_type.value}")
                                                                               ^
security/ai_agents/messenger_integration.py:280:1: W293 blank line contains whitespace
            
^
security/ai_agents/messenger_integration.py:282:1: W293 blank line contains whitespace
            
^
security/ai_agents/messenger_integration.py:287:80: E501 line too long (90 > 79 characters)
    def _send_to_messenger(self, message: Message, messenger_type: MessengerType) -> bool:
                                                                               ^
security/ai_agents/messenger_integration.py:312:1: W293 blank line contains whitespace
            
^
security/ai_agents/messenger_integration.py:319:1: W293 blank line contains whitespace
            
^
security/ai_agents/messenger_integration.py:322:1: W293 blank line contains whitespace
            
^
security/ai_agents/messenger_integration.py:333:1: W293 blank line contains whitespace
            
^
security/ai_agents/messenger_integration.py:341:1: W293 blank line contains whitespace
            
^
security/ai_agents/messenger_integration.py:344:1: W293 blank line contains whitespace
            
^
security/ai_agents/messenger_integration.py:355:1: W293 blank line contains whitespace
            
^
security/ai_agents/messenger_integration.py:356:19: F541 f-string is missing placeholders
            url = f"https://chatapi.viber.com/pa/send_message"
                  ^
security/ai_agents/messenger_integration.py:363:1: W293 blank line contains whitespace
            
^
security/ai_agents/messenger_integration.py:364:80: E501 line too long (81 > 79 characters)
            response = requests.post(url, json=data, headers=headers, timeout=10)
                                                                               ^
security/ai_agents/messenger_integration.py:366:1: W293 blank line contains whitespace
            
^
security/ai_agents/messenger_integration.py:377:1: W293 blank line contains whitespace
            
^
security/ai_agents/messenger_integration.py:378:80: E501 line too long (89 > 79 characters)
            url = f"https://discord.com/api/v10/channels/{message.recipient_id}/messages"
                                                                               ^
security/ai_agents/messenger_integration.py:381:1: W293 blank line contains whitespace
            
^
security/ai_agents/messenger_integration.py:382:80: E501 line too long (81 > 79 characters)
            response = requests.post(url, json=data, headers=headers, timeout=10)
                                                                               ^
security/ai_agents/messenger_integration.py:384:1: W293 blank line contains whitespace
            
^
security/ai_agents/messenger_integration.py:395:1: W293 blank line contains whitespace
            
^
security/ai_agents/messenger_integration.py:403:1: W293 blank line contains whitespace
            
^
security/ai_agents/messenger_integration.py:404:80: E501 line too long (81 > 79 characters)
            response = requests.post(url, json=data, headers=headers, timeout=10)
                                                                               ^
security/ai_agents/messenger_integration.py:406:1: W293 blank line contains whitespace
            
^
security/ai_agents/messenger_integration.py:411:80: E501 line too long (92 > 79 characters)
    def send_security_alert(self, alert_type: str, message: str, recipient_id: str) -> bool:
                                                                               ^
security/ai_agents/messenger_integration.py:414:33: F541 f-string is missing placeholders
            formatted_message = f"🚨 <b>ALADDIN Security Alert</b>\n\n"
                                ^
security/ai_agents/messenger_integration.py:417:80: E501 line too long (98 > 79 characters)
            formatted_message += f"<b>Время:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
                                                                               ^
security/ai_agents/messenger_integration.py:418:34: F541 f-string is missing placeholders
            formatted_message += f"<b>Статус:</b> Активно отслеживается"
                                 ^
security/ai_agents/messenger_integration.py:419:1: W293 blank line contains whitespace
            
^
security/ai_agents/messenger_integration.py:427:80: E501 line too long (81 > 79 characters)
            self.logger.error(f"Ошибка отправки уведомления о безопасности: {e}")
                                                                               ^
security/ai_agents/messenger_integration.py:430:80: E501 line too long (100 > 79 characters)
    def send_family_notification(self, family_member: str, message: str, recipient_id: str) -> bool:
                                                                               ^
security/ai_agents/messenger_integration.py:433:33: F541 f-string is missing placeholders
            formatted_message = f"👨‍👩‍👧‍👦 <b>ALADDIN Family Notification</b>\n\n"
                                ^
security/ai_agents/messenger_integration.py:433:80: E501 line too long (81 > 79 characters)
            formatted_message = f"👨‍👩‍👧‍👦 <b>ALADDIN Family Notification</b>\n\n"
                                                                               ^
security/ai_agents/messenger_integration.py:436:80: E501 line too long (96 > 79 characters)
            formatted_message += f"<b>Время:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
                                                                               ^
security/ai_agents/messenger_integration.py:437:1: W293 blank line contains whitespace
            
^
security/ai_agents/messenger_integration.py:448:80: E501 line too long (98 > 79 characters)
    def send_emergency_alert(self, emergency_type: str, location: str, recipient_id: str) -> bool:
                                                                               ^
security/ai_agents/messenger_integration.py:451:33: F541 f-string is missing placeholders
            formatted_message = f"🚨 <b>ЭКСТРЕННОЕ УВЕДОМЛЕНИЕ</b> 🚨\n\n"
                                ^
security/ai_agents/messenger_integration.py:452:80: E501 line too long (86 > 79 characters)
            formatted_message += f"<b>Тип экстренной ситуации:</b> {emergency_type}\n"
                                                                               ^
security/ai_agents/messenger_integration.py:454:80: E501 line too long (98 > 79 characters)
            formatted_message += f"<b>Время:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
                                                                               ^
security/ai_agents/messenger_integration.py:455:34: F541 f-string is missing placeholders
            formatted_message += f"<b>Статус:</b> Службы экстренного реагирования уведомлены"
                                 ^
security/ai_agents/messenger_integration.py:455:80: E501 line too long (93 > 79 characters)
            formatted_message += f"<b>Статус:</b> Службы экстренного реагирования уведомлены"
                                                                               ^
security/ai_agents/messenger_integration.py:456:1: W293 blank line contains whitespace
            
^
security/ai_agents/messenger_integration.py:472:80: E501 line too long (101 > 79 characters)
                "enabled_messengers": len([c for c in self.messenger_configs.values() if c.enabled]),
                                                                               ^
security/ai_agents/messenger_integration.py:475:80: E501 line too long (86 > 79 characters)
                "failed_messages": len([m for m in self.message_queue if not m.sent]),
                                                                               ^
security/ai_agents/messenger_integration.py:485:80: E501 line too long (92 > 79 characters)
                "color_scheme": self.color_scheme["messenger_colors"]["messenger_elements"],
                                                                               ^
security/ai_agents/messenger_integration.py:488:1: W293 blank line contains whitespace
            
^
security/ai_agents/messenger_integration.py:505:1: W293 blank line contains whitespace
            
^
security/ai_agents/messenger_integration.py:509:1: W293 blank line contains whitespace
            
^
security/ai_agents/messenger_integration.py:518:1: W293 blank line contains whitespace
            
^
security/ai_agents/messenger_integration.py:519:80: E501 line too long (123 > 79 characters)
            self.logger.info(f"Тестирование завершено: {passed_tests}/{total_tests} тестов пройдено ({success_rate:.1f}%)")
                                                                               ^
security/ai_agents/messenger_integration.py:521:1: W293 blank line contains whitespace
            
^
security/ai_agents/messenger_integration.py:533:1: W293 blank line contains whitespace
            
^
security/ai_agents/messenger_integration.py:537:1: W293 blank line contains whitespace
            
^
security/ai_agents/messenger_integration.py:539:9: E722 do not use bare 'except'
        except:
        ^
security/ai_agents/messenger_integration.py:552:9: E722 do not use bare 'except'
        except:
        ^
security/ai_agents/messenger_integration.py:564:9: E722 do not use bare 'except'
        except:
        ^
security/ai_agents/messenger_integration.py:576:9: E722 do not use bare 'except'
        except:
        ^
security/ai_agents/messenger_integration.py:588:9: E722 do not use bare 'except'
        except:
        ^
security/ai_agents/messenger_integration.py:595:80: E501 line too long (84 > 79 characters)
            result = self.send_message("", "test_recipient", MessengerType.TELEGRAM)
                                                                               ^
security/ai_agents/messenger_integration.py:598:1: W293 blank line contains whitespace
            
^
security/ai_agents/messenger_integration.py:603:1: W293 blank line contains whitespace
            
^
security/ai_agents/messenger_integration.py:605:9: E722 do not use bare 'except'
        except:
        ^
security/ai_agents/messenger_integration.py:614:80: E501 line too long (90 > 79 characters)
                    "methods_count": len([m for m in dir(self) if not m.startswith('_')]),
                                                                               ^
security/ai_agents/messenger_integration.py:641:1: W293 blank line contains whitespace
            
^
security/ai_agents/messenger_integration.py:651:1: W293 blank line contains whitespace
            
^
security/ai_agents/messenger_integration.py:655:1: W293 blank line contains whitespace
            
^
security/ai_agents/messenger_integration.py:660:1: W293 blank line contains whitespace
            
^
security/ai_agents/messenger_integration.py:663:80: E501 line too long (83 > 79 characters)
            if not isinstance(recipient_id, str) or len(recipient_id.strip()) == 0:
                                                                               ^
security/ai_agents/messenger_integration.py:665:1: W293 blank line contains whitespace
            
^
security/ai_agents/messenger_integration.py:668:80: E501 line too long (109 > 79 characters)
            if not isinstance(messenger_type, str) or messenger_type not in [t.value for t in MessengerType]:
                                                                               ^
security/ai_agents/messenger_integration.py:670:1: W293 blank line contains whitespace
            
^
security/ai_agents/messenger_integration.py:682:1: W293 blank line contains whitespace
            
^
security/ai_agents/messenger_integration.py:686:1: W293 blank line contains whitespace
            
^
security/ai_agents/messenger_integration.py:690:1: W293 blank line contains whitespace
            
^
security/ai_agents/messenger_integration.py:693:1: W293 blank line contains whitespace
            
^
security/ai_agents/messenger_integration.py:714:80: E501 line too long (80 > 79 characters)
            failed_messages = len([m for m in self.message_queue if not m.sent])
                                                                               ^
security/ai_agents/messenger_integration.py:715:1: W293 blank line contains whitespace
            
^
security/ai_agents/messenger_integration.py:722:80: E501 line too long (80 > 79 characters)
                        messenger_types[name] = messenger_types.get(name, 0) + 1
                                                                               ^
security/ai_agents/messenger_integration.py:724:1: W293 blank line contains whitespace
            
^
security/ai_agents/messenger_integration.py:730:1: W293 blank line contains whitespace
            
^
security/ai_agents/messenger_integration.py:733:80: E501 line too long (101 > 79 characters)
            today_messages = len([m for m in self.message_queue if m.timestamp.date() == now.date()])
                                                                               ^
security/ai_agents/messenger_integration.py:734:80: E501 line too long (106 > 79 characters)
            week_messages = len([m for m in self.message_queue if m.timestamp >= now - timedelta(days=7)])
                                                                               ^
security/ai_agents/messenger_integration.py:735:1: W293 blank line contains whitespace
            
^
security/ai_agents/messenger_integration.py:740:80: E501 line too long (100 > 79 characters)
                "success_rate": (sent_messages / total_messages * 100) if total_messages > 0 else 0,
                                                                               ^
security/ai_agents/messenger_integration.py:745:80: E501 line too long (101 > 79 characters)
                "enabled_messengers": len([c for c in self.messenger_configs.values() if c.enabled]),
                                                                               ^
security/ai_agents/messenger_integration.py:749:1: W293 blank line contains whitespace
            
^
security/ai_agents/messenger_integration.py:762:1: W293 blank line contains whitespace
            
^
security/ai_agents/messenger_integration.py:768:80: E501 line too long (88 > 79 characters)
                    "enabled_messengers": messenger_status.get("enabled_messengers", 0),
                                                                               ^
security/ai_agents/messenger_integration.py:769:80: E501 line too long (80 > 79 characters)
                    "total_messages": messenger_status.get("total_messages", 0),
                                                                               ^
security/ai_agents/messenger_integration.py:777:80: E501 line too long (102 > 79 characters)
                    "messenger_elements": self.color_scheme["messenger_colors"]["messenger_elements"],
                                                                               ^
security/ai_agents/messenger_integration.py:791:1: W293 blank line contains whitespace
            
^
security/ai_agents/messenger_integration.py:802:1: W293 blank line contains whitespace
            
^
security/ai_agents/messenger_integration.py:812:80: E501 line too long (102 > 79 characters)
                    "messenger_elements": self.color_scheme["messenger_colors"]["messenger_elements"],
                                                                               ^
security/ai_agents/messenger_integration.py:825:1: W293 blank line contains whitespace
            
^
security/ai_agents/messenger_integration.py:831:1: E305 expected 2 blank lines after class or function definition, found 1
if __name__ == "__main__":
^
security/ai_agents/messenger_integration.py:837:58: W292 no newline at end of file
    print(f"💬 Сообщения: {len(messenger.message_queue)}")                                                         ^
security/ai_agents/mobile_security_agent.py:11:1: F401 'core.base.SecurityLevel' imported but unused
from core.base import SecurityBase, ComponentStatus, SecurityLevel
^
security/ai_agents/mobile_security_agent.py:15:1: F401 'json' imported but unused
import json
^
security/ai_agents/mobile_security_agent.py:18:1: F401 'datetime.timedelta' imported but unused
from datetime import datetime, timedelta
^
security/ai_agents/mobile_security_agent.py:150:80: E501 line too long (89 > 79 characters)
            "last_updated": self.last_updated.isoformat() if self.last_updated else None,
                                                                               ^
security/ai_agents/mobile_security_agent.py:160:80: E501 line too long (94 > 79 characters)
    def __init__(self, threat_id, threat_type, severity, description, device_id, app_id=None):
                                                                               ^
security/ai_agents/mobile_security_agent.py:245:80: E501 line too long (95 > 79 characters)
            "last_scan_time": self.last_scan_time.isoformat() if self.last_scan_time else None,
                                                                               ^
security/ai_agents/mobile_security_agent.py:356:80: E501 line too long (101 > 79 characters)
            self.log_activity("Ошибка инициализации MobileSecurityAgent: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/mobile_security_agent.py:362:80: E501 line too long (87 > 79 characters)
            self.log_activity("Инициализация AI моделей для мобильной безопасности...")
                                                                               ^
security/ai_agents/mobile_security_agent.py:368:80: E501 line too long (98 > 79 characters)
                    "app_permissions", "network_behavior", "file_signatures", "behavior_patterns",
                                                                               ^
security/ai_agents/mobile_security_agent.py:369:80: E501 line too long (104 > 79 characters)
                    "code_analysis", "api_calls", "memory_usage", "cpu_patterns", "battery_consumption",
                                                                               ^
security/ai_agents/mobile_security_agent.py:370:80: E501 line too long (103 > 79 characters)
                    "user_interactions", "temporal_patterns", "spatial_patterns", "contextual_features"
                                                                               ^
security/ai_agents/mobile_security_agent.py:374:80: E501 line too long (100 > 79 characters)
                "validation_methods": ["cross_validation", "holdout_testing", "real_world_testing"],
                                                                               ^
security/ai_agents/mobile_security_agent.py:382:80: E501 line too long (87 > 79 characters)
                    "permissions", "code_signature", "network_requests", "file_access",
                                                                               ^
security/ai_agents/mobile_security_agent.py:383:80: E501 line too long (101 > 79 characters)
                    "api_usage", "resource_consumption", "security_headers", "certificate_validation"
                                                                               ^
security/ai_agents/mobile_security_agent.py:394:80: E501 line too long (90 > 79 characters)
                    "user_interactions", "app_usage", "network_patterns", "location_data",
                                                                               ^
security/ai_agents/mobile_security_agent.py:395:80: E501 line too long (101 > 79 characters)
                    "temporal_sequences", "anomaly_patterns", "context_switches", "resource_patterns"
                                                                               ^
security/ai_agents/mobile_security_agent.py:407:80: E501 line too long (80 > 79 characters)
                    "risk_assessment", "context_analysis", "historical_patterns"
                                                                               ^
security/ai_agents/mobile_security_agent.py:418:80: E501 line too long (95 > 79 characters)
                    "whitelist_status", "reputation_score", "user_feedback", "context_factors",
                                                                               ^
security/ai_agents/mobile_security_agent.py:419:80: E501 line too long (83 > 79 characters)
                    "historical_accuracy", "confidence_scores", "expert_validation"
                                                                               ^
security/ai_agents/mobile_security_agent.py:430:80: E501 line too long (87 > 79 characters)
                    "device_trust_level", "user_behavior_pattern", "app_usage_history",
                                                                               ^
security/ai_agents/mobile_security_agent.py:442:80: E501 line too long (83 > 79 characters)
                    "network_consensus", "global_intelligence", "expert_consensus",
                                                                               ^
security/ai_agents/mobile_security_agent.py:454:80: E501 line too long (86 > 79 characters)
                    "threat_trends", "emerging_patterns", "vulnerability_predictions",
                                                                               ^
security/ai_agents/mobile_security_agent.py:476:80: E501 line too long (92 > 79 characters)
            self.log_activity("Ошибка инициализации AI моделей: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/mobile_security_agent.py:530:80: E501 line too long (93 > 79 characters)
            self.log_activity("Ошибка загрузки баз данных угроз: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/mobile_security_agent.py:551:80: E501 line too long (82 > 79 characters)
            collective_score = self._collective_intelligence_analysis(threat_data)
                                                                               ^
security/ai_agents/mobile_security_agent.py:575:80: E501 line too long (95 > 79 characters)
            self.log_activity("Ошибка валидации обнаружения угроз: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/mobile_security_agent.py:598:80: E501 line too long (88 > 79 characters)
            self.log_activity("Ошибка статического анализа: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/mobile_security_agent.py:607:80: E501 line too long (81 > 79 characters)
            if threat_data.get("behavior_pattern") in self.behavioral_signatures:
                                                                               ^
security/ai_agents/mobile_security_agent.py:621:80: E501 line too long (90 > 79 characters)
            self.log_activity("Ошибка поведенческого анализа: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/mobile_security_agent.py:644:80: E501 line too long (84 > 79 characters)
            self.log_activity("Ошибка сетевого анализа: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/mobile_security_agent.py:651:80: E501 line too long (92 > 79 characters)
            if self.threat_classifier and self.threat_classifier.get("accuracy", 0) >= 0.99:
                                                                               ^
security/ai_agents/mobile_security_agent.py:657:80: E501 line too long (84 > 79 characters)
            self.log_activity("Ошибка AI классификации: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/mobile_security_agent.py:666:80: E501 line too long (83 > 79 characters)
            device_context = self._get_device_context(threat_data.get("device_id"))
                                                                               ^
security/ai_agents/mobile_security_agent.py:689:80: E501 line too long (88 > 79 characters)
            self.log_activity("Ошибка контекстного анализа: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/mobile_security_agent.py:712:80: E501 line too long (100 > 79 characters)
            self.log_activity("Ошибка анализа коллективного интеллекта: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/mobile_security_agent.py:735:80: E501 line too long (89 > 79 characters)
            self.log_activity("Ошибка предиктивного анализа: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/mobile_security_agent.py:762:80: E501 line too long (88 > 79 characters)
            return 1.0 - false_positive_score  # Инвертируем для получения оценки угрозы
                                                                               ^
security/ai_agents/mobile_security_agent.py:765:80: E501 line too long (96 > 79 characters)
            self.log_activity("Ошибка проверки ложных срабатываний: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/mobile_security_agent.py:780:80: E501 line too long (99 > 79 characters)
            suspicious_count = sum(1 for perm in suspicious_permissions if perm in app_permissions)
                                                                               ^
security/ai_agents/mobile_security_agent.py:786:80: E501 line too long (97 > 79 characters)
            self.log_activity("Ошибка проверки эвристических правил: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/mobile_security_agent.py:807:80: E501 line too long (89 > 79 characters)
            self.log_activity("Ошибка проверки ML признаков: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/mobile_security_agent.py:826:80: E501 line too long (102 > 79 characters)
            self.log_activity("Ошибка обнаружения поведенческих аномалий: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/mobile_security_agent.py:844:80: E501 line too long (95 > 79 characters)
            self.log_activity("Ошибка анализа временных паттернов: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/mobile_security_agent.py:863:80: E501 line too long (93 > 79 characters)
            self.log_activity("Ошибка анализа сетевых паттернов: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/mobile_security_agent.py:880:80: E501 line too long (98 > 79 characters)
            self.log_activity("Ошибка получения контекста устройства: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/mobile_security_agent.py:898:80: E501 line too long (90 > 79 characters)
            return sum(normal_patterns) / len(normal_patterns) if normal_patterns else 0.5
                                                                               ^
security/ai_agents/mobile_security_agent.py:901:80: E501 line too long (102 > 79 characters)
            self.log_activity("Ошибка анализа пользовательских паттернов: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/mobile_security_agent.py:913:80: E501 line too long (94 > 79 characters)
            self.log_activity("Ошибка анализа истории приложения: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/mobile_security_agent.py:931:80: E501 line too long (93 > 79 characters)
            return sum(security_factors) / len(security_factors) if security_factors else 0.5
                                                                               ^
security/ai_agents/mobile_security_agent.py:934:80: E501 line too long (94 > 79 characters)
            self.log_activity("Ошибка анализа сетевого контекста: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/mobile_security_agent.py:951:80: E501 line too long (96 > 79 characters)
            self.log_activity("Ошибка анализа временного контекста: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/mobile_security_agent.py:969:80: E501 line too long (97 > 79 characters)
            self.log_activity("Ошибка получения сетевого консенсуса: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/mobile_security_agent.py:987:80: E501 line too long (97 > 79 characters)
            self.log_activity("Ошибка получения глобальной разведки: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/mobile_security_agent.py:1005:80: E501 line too long (98 > 79 characters)
            self.log_activity("Ошибка получения консенсуса экспертов: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/mobile_security_agent.py:1023:80: E501 line too long (89 > 79 characters)
            self.log_activity("Ошибка анализа трендов угроз: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/mobile_security_agent.py:1039:80: E501 line too long (95 > 79 characters)
            self.log_activity("Ошибка прогнозирования новых угроз: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/mobile_security_agent.py:1054:80: E501 line too long (87 > 79 characters)
            self.log_activity("Ошибка анализа уязвимостей: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/mobile_security_agent.py:1066:80: E501 line too long (81 > 79 characters)
                "reputation_score": threat_data.get("reputation_score", 0) > 0.8,
                                                                               ^
security/ai_agents/mobile_security_agent.py:1078:80: E501 line too long (90 > 79 characters)
            self.log_activity("Ошибка проверки белых списков: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/mobile_security_agent.py:1094:80: E501 line too long (94 > 79 characters)
            self.log_activity("Ошибка получения оценки репутации: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/mobile_security_agent.py:1110:80: E501 line too long (106 > 79 characters)
            self.log_activity("Ошибка получения обратной связи пользователей: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/mobile_security_agent.py:1125:80: E501 line too long (99 > 79 characters)
            self.log_activity("Ошибка получения исторической точности: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/mobile_security_agent.py:1134:80: E501 line too long (88 > 79 characters)
            self.scan_thread = threading.Thread(target=self._periodic_scan, daemon=True)
                                                                               ^
security/ai_agents/mobile_security_agent.py:1138:80: E501 line too long (98 > 79 characters)
            self.deep_scan_thread = threading.Thread(target=self._periodic_deep_scan, daemon=True)
                                                                               ^
security/ai_agents/mobile_security_agent.py:1142:80: E501 line too long (101 > 79 characters)
            self.update_thread = threading.Thread(target=self._periodic_database_update, daemon=True)
                                                                               ^
security/ai_agents/mobile_security_agent.py:1148:80: E501 line too long (93 > 79 characters)
            self.log_activity("Ошибка запуска фоновых процессов: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/mobile_security_agent.py:1150:80: E501 line too long (83 > 79 characters)
    def register_device(self, device_id, platform, device_type, model, os_version):
                                                                               ^
security/ai_agents/mobile_security_agent.py:1155:80: E501 line too long (104 > 79 characters)
                    self.log_activity("Устройство {} уже зарегистрировано".format(device_id), "warning")
                                                                               ^
security/ai_agents/mobile_security_agent.py:1158:80: E501 line too long (90 > 79 characters)
                device = MobileDevice(device_id, platform, device_type, model, os_version)
                                                                               ^
security/ai_agents/mobile_security_agent.py:1162:80: E501 line too long (93 > 79 characters)
                self.log_activity("Устройство {} зарегистрировано успешно".format(device_id))
                                                                               ^
security/ai_agents/mobile_security_agent.py:1166:80: E501 line too long (104 > 79 characters)
            self.log_activity("Ошибка регистрации устройства {}: {}".format(device_id, str(e)), "error")
                                                                               ^
security/ai_agents/mobile_security_agent.py:1173:80: E501 line too long (88 > 79 characters)
                self.log_activity("Устройство {} не найдено".format(device_id), "error")
                                                                               ^
security/ai_agents/mobile_security_agent.py:1177:80: E501 line too long (84 > 79 characters)
            self.log_activity("Начало сканирования устройства {}".format(device_id))
                                                                               ^
security/ai_agents/mobile_security_agent.py:1211:80: E501 line too long (87 > 79 characters)
            self.log_activity("Сканирование устройства {} завершено".format(device_id))
                                                                               ^
security/ai_agents/mobile_security_agent.py:1215:80: E501 line too long (105 > 79 characters)
            self.log_activity("Ошибка сканирования устройства {}: {}".format(device_id, str(e)), "error")
                                                                               ^
security/ai_agents/mobile_security_agent.py:1222:80: E501 line too long (85 > 79 characters)
            device.is_encrypted = True  # В реальной системе здесь будет API проверки
                                                                               ^
security/ai_agents/mobile_security_agent.py:1227:80: E501 line too long (87 > 79 characters)
            self.log_activity("Ошибка проверки шифрования: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/mobile_security_agent.py:1233:80: E501 line too long (83 > 79 characters)
            device.is_rooted = False  # В реальной системе здесь будет API проверки
                                                                               ^
security/ai_agents/mobile_security_agent.py:1238:80: E501 line too long (88 > 79 characters)
                self._create_threat(device.device_id, ThreatType.ROOT_JAILBREAK, "high",
                                                                               ^
security/ai_agents/mobile_security_agent.py:1242:80: E501 line too long (91 > 79 characters)
            self.log_activity("Ошибка проверки root/jailbreak: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/mobile_security_agent.py:1249:80: E501 line too long (91 > 79 characters)
                {"name": "Safari", "package": "com.apple.mobilesafari", "version": "16.0"},
                                                                               ^
security/ai_agents/mobile_security_agent.py:1250:80: E501 line too long (87 > 79 characters)
                {"name": "Chrome", "package": "com.google.chrome", "version": "118.0"},
                                                                               ^
security/ai_agents/mobile_security_agent.py:1251:80: E501 line too long (93 > 79 characters)
                {"name": "Suspicious App", "package": "com.suspicious.app", "version": "1.0"}
                                                                               ^
security/ai_agents/mobile_security_agent.py:1274:80: E501 line too long (91 > 79 characters)
            self.log_activity("Ошибка сканирования приложений: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/mobile_security_agent.py:1288:80: E501 line too long (82 > 79 characters)
                self._create_threat(app.device_id, ThreatType.MALWARE, "critical",
                                                                               ^
security/ai_agents/mobile_security_agent.py:1289:80: E501 line too long (82 > 79 characters)
                                    "Malicious app detected: {}".format(app.name))
                                                                               ^
security/ai_agents/mobile_security_agent.py:1299:80: E501 line too long (106 > 79 characters)
                self.metrics.suspicious_apps_count = getattr(self.metrics, 'suspicious_apps_count', 0) + 1
                                                                               ^
security/ai_agents/mobile_security_agent.py:1305:80: E501 line too long (99 > 79 characters)
            self.log_activity("Ошибка анализа безопасности приложения: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/mobile_security_agent.py:1333:80: E501 line too long (97 > 79 characters)
            self.log_activity("Ошибка расчета рейтинга безопасности: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/mobile_security_agent.py:1345:80: E501 line too long (112 > 79 characters)
                high_risk_permissions = [AppPermission.CAMERA, AppPermission.MICROPHONE, AppPermission.LOCATION]
                                                                               ^
security/ai_agents/mobile_security_agent.py:1346:80: E501 line too long (90 > 79 characters)
                app_permissions = [AppPermission.CAMERA, AppPermission.LOCATION]  # Пример
                                                                               ^
security/ai_agents/mobile_security_agent.py:1351:80: E501 line too long (101 > 79 characters)
                high_risk_count = sum(1 for perm in app_permissions if perm in high_risk_permissions)
                                                                               ^
security/ai_agents/mobile_security_agent.py:1359:80: E501 line too long (86 > 79 characters)
            self.log_activity("Ошибка анализа разрешений: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/mobile_security_agent.py:1366:80: E501 line too long (89 > 79 characters)
                [AppPermission.CAMERA, AppPermission.MICROPHONE, AppPermission.LOCATION],
                                                                               ^
security/ai_agents/mobile_security_agent.py:1367:80: E501 line too long (83 > 79 characters)
                [AppPermission.CONTACTS, AppPermission.PHOTOS, AppPermission.FILES]
                                                                               ^
security/ai_agents/mobile_security_agent.py:1372:80: E501 line too long (96 > 79 characters)
                    self._create_threat(app.device_id, ThreatType.UNAUTHORIZED_ACCESS, "medium",
                                                                               ^
security/ai_agents/mobile_security_agent.py:1373:80: E501 line too long (113 > 79 characters)
                                        "Suspicious permission combination detected in app: {}".format(app.name))
                                                                               ^
security/ai_agents/mobile_security_agent.py:1377:80: E501 line too long (97 > 79 characters)
            self.log_activity("Ошибка анализа комбинаций разрешений: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/mobile_security_agent.py:1389:80: E501 line too long (90 > 79 characters)
                self._create_threat(device.device_id, ThreatType.NETWORK_ATTACK, "medium",
                                                                               ^
security/ai_agents/mobile_security_agent.py:1395:80: E501 line too long (83 > 79 characters)
                self._create_threat(device.device_id, ThreatType.DATA_LEAK, "high",
                                                                               ^
security/ai_agents/mobile_security_agent.py:1399:80: E501 line too long (94 > 79 characters)
            self.log_activity("Ошибка анализа сетевого поведения: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/mobile_security_agent.py:1409:80: E501 line too long (92 > 79 characters)
                self._create_threat(device.device_id, ThreatType.UNAUTHORIZED_ACCESS, "low",
                                                                               ^
security/ai_agents/mobile_security_agent.py:1413:80: E501 line too long (96 > 79 characters)
            self.log_activity("Ошибка анализа поведения устройства: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/mobile_security_agent.py:1440:80: E501 line too long (101 > 79 characters)
                                  if app_id in self.apps and self.apps[app_id].security_rating < 5.0)
                                                                               ^
security/ai_agents/mobile_security_agent.py:1446:80: E501 line too long (94 > 79 characters)
            self.log_activity("Ошибка расчета балла безопасности: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/mobile_security_agent.py:1462:80: E501 line too long (99 > 79 characters)
            self.log_activity("Ошибка обновления статуса безопасности: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/mobile_security_agent.py:1464:80: E501 line too long (89 > 79 characters)
    def _create_threat(self, device_id, threat_type, severity, description, app_id=None):
                                                                               ^
security/ai_agents/mobile_security_agent.py:1490:80: E501 line too long (113 > 79 characters)
            self.log_activity("Угроза обнаружена: {} на устройстве {}".format(description, device_id), "warning")
                                                                               ^
security/ai_agents/mobile_security_agent.py:1493:80: E501 line too long (93 > 79 characters)
            self.log_activity("Ошибка создания записи об угрозе: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/mobile_security_agent.py:1518:80: E501 line too long (99 > 79 characters)
                self.log_activity("Ошибка периодического сканирования: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/mobile_security_agent.py:1536:80: E501 line too long (94 > 79 characters)
                self.log_activity("Ошибка глубокого сканирования: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/mobile_security_agent.py:1551:80: E501 line too long (93 > 79 characters)
                self.log_activity("Ошибка обновления баз данных: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/mobile_security_agent.py:1564:80: E501 line too long (98 > 79 characters)
            self.log_activity("Ошибка глубокого анализа безопасности: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/mobile_security_agent.py:1589:80: E501 line too long (99 > 79 characters)
            self.log_activity("Ошибка проверки уязвимостей приложений: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/mobile_security_agent.py:1600:80: E501 line too long (99 > 79 characters)
                if app_id in self.apps and AppPermission.LOCATION in self.apps[app_id].permissions:
                                                                               ^
security/ai_agents/mobile_security_agent.py:1603:80: E501 line too long (86 > 79 characters)
            if len(location_apps) > 5:  # Много приложений с доступом к местоположению
                                                                               ^
security/ai_agents/mobile_security_agent.py:1605:80: E501 line too long (93 > 79 characters)
                self._create_threat(device.device_id, ThreatType.LOCATION_TRACKING, "medium",
                                                                               ^
security/ai_agents/mobile_security_agent.py:1609:80: E501 line too long (103 > 79 characters)
            self.log_activity("Ошибка анализа отслеживания местоположения: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/mobile_security_agent.py:1621:80: E501 line too long (82 > 79 characters)
                self._create_threat(device.device_id, ThreatType.DATA_LEAK, "low",
                                                                               ^
security/ai_agents/mobile_security_agent.py:1625:80: E501 line too long (94 > 79 characters)
            self.log_activity("Ошибка проверки шифрования данных: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/mobile_security_agent.py:1651:80: E501 line too long (92 > 79 characters)
                "security_recommendations": self._generate_security_recommendations(device),
                                                                               ^
security/ai_agents/mobile_security_agent.py:1658:80: E501 line too long (99 > 79 characters)
            self.log_activity("Ошибка получения отчета о безопасности: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/mobile_security_agent.py:1670:80: E501 line too long (83 > 79 characters)
                recommendations.append("Remove root/jailbreak for better security")
                                                                               ^
security/ai_agents/mobile_security_agent.py:1678:80: E501 line too long (97 > 79 characters)
                              if app_id in self.apps and self.apps[app_id].security_rating < 5.0]
                                                                               ^
security/ai_agents/mobile_security_agent.py:1685:80: E501 line too long (90 > 79 characters)
            self.log_activity("Ошибка генерации рекомендаций: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/mobile_security_agent.py:1693:80: E501 line too long (102 > 79 characters)
                device.security_score for device in self.devices.values()) / max(len(self.devices), 1)
                                                                               ^
security/ai_agents/mobile_security_agent.py:1698:80: E501 line too long (84 > 79 characters)
            self.log_activity("Ошибка получения метрик: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/mobile_security_agent.py:1715:80: E501 line too long (97 > 79 characters)
            self.log_activity("Ошибка остановки MobileSecurityAgent: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/mobile_security_agent.py:1736:80: E501 line too long (103 > 79 characters)
        if agent.register_device(device_id, MobilePlatform.IOS, DeviceType.PHONE, "iPhone 14", "16.0"):
                                                                               ^
security/ai_agents/mobile_security_agent.py:1747:80: E501 line too long (87 > 79 characters)
            print("📊 Балл безопасности: {}".format(report["device"]["security_score"]))
                                                                               ^
security/ai_agents/mobile_security_agent.py:1749:80: E501 line too long (80 > 79 characters)
            print("📱 Приложений просканировано: {}".format(len(report["apps"])))
                                                                               ^
security/ai_agents/mobile_security_agent.py:1756:80: E501 line too long (81 > 79 characters)
            print("🔒 Безопасных устройств: {}".format(metrics["secure_devices"]))
                                                                               ^
security/ai_agents/mobile_security_agent_extra.py:4:80: E501 line too long (82 > 79 characters)
"""
Mobile Security Agent Extra - Дополнительные функции агента мобильной безопасности
"""
   
                                                                           ^
security/ai_agents/mobile_security_agent_extra.py:7:1: F401 'asyncio' imported but unused
import asyncio
^
security/ai_agents/mobile_security_agent_extra.py:9:1: F401 'time' imported but unused
import time
^
security/ai_agents/mobile_security_agent_extra.py:12:1: F401 'typing.List' imported but unused
from typing import Dict, Any, List, Optional
^
security/ai_agents/mobile_security_agent_extra.py:12:1: F401 'typing.Optional' imported but unused
from typing import Dict, Any, List, Optional
^
security/ai_agents/mobile_security_agent_extra.py:15:1: E302 expected 2 blank lines, found 1
@dataclass
^
security/ai_agents/mobile_security_agent_extra.py:25:1: E302 expected 2 blank lines, found 1
class MobileSecurityAgentExtra:
^
security/ai_agents/mobile_security_agent_extra.py:27:1: W293 blank line contains whitespace
    
^
security/ai_agents/mobile_security_agent_extra.py:40:1: W293 blank line contains whitespace
    
^
security/ai_agents/mobile_security_agent_extra.py:53:80: E501 line too long (86 > 79 characters)
            self.logger.error(f"Ошибка инициализации базы доверенных приложений: {e}")
                                                                               ^
security/ai_agents/mobile_security_agent_extra.py:54:1: W293 blank line contains whitespace
    
^
security/ai_agents/mobile_security_agent_extra.py:60:1: W293 blank line contains whitespace
                
^
security/ai_agents/mobile_security_agent_extra.py:63:1: W293 blank line contains whitespace
                
^
security/ai_agents/mobile_security_agent_extra.py:66:1: W293 blank line contains whitespace
                
^
security/ai_agents/mobile_security_agent_extra.py:69:1: W293 blank line contains whitespace
                
^
security/ai_agents/mobile_security_agent_extra.py:72:80: E501 line too long (83 > 79 characters)
                    threat_data, trend_analysis, expert_consensus, whitelist_checks
                                                                               ^
security/ai_agents/mobile_security_agent_extra.py:74:1: W293 blank line contains whitespace
                
^
security/ai_agents/mobile_security_agent_extra.py:84:1: W293 blank line contains whitespace
                
^
security/ai_agents/mobile_security_agent_extra.py:88:1: W293 blank line contains whitespace
    
^
security/ai_agents/mobile_security_agent_extra.py:89:80: E501 line too long (80 > 79 characters)
    def _analyze_threat_trends(self, threat_data: ThreatData) -> Dict[str, Any]:
                                                                               ^
security/ai_agents/mobile_security_agent_extra.py:93:1: W293 blank line contains whitespace
            
^
security/ai_agents/mobile_security_agent_extra.py:98:80: E501 line too long (89 > 79 characters)
                "reputation_score": threat_data.details.get("reputation_score", 0) > 0.8,
                                                                               ^
security/ai_agents/mobile_security_agent_extra.py:100:1: W293 blank line contains whitespace
            
^
security/ai_agents/mobile_security_agent_extra.py:103:1: W293 blank line contains whitespace
            
^
security/ai_agents/mobile_security_agent_extra.py:107:80: E501 line too long (85 > 79 characters)
                "trend_score": sum(whitelist_checks.values()) / len(whitelist_checks)
                                                                               ^
security/ai_agents/mobile_security_agent_extra.py:109:1: W293 blank line contains whitespace
            
^
security/ai_agents/mobile_security_agent_extra.py:113:1: W293 blank line contains whitespace
    
^
security/ai_agents/mobile_security_agent_extra.py:120:1: W293 blank line contains whitespace
            
^
security/ai_agents/mobile_security_agent_extra.py:124:1: W293 blank line contains whitespace
    
^
security/ai_agents/mobile_security_agent_extra.py:129:1: W293 blank line contains whitespace
            
^
security/ai_agents/mobile_security_agent_extra.py:133:80: E501 line too long (89 > 79 characters)
                "reputation_score": threat_data.details.get("reputation_score", 0) > 0.8,
                                                                               ^
security/ai_agents/mobile_security_agent_extra.py:135:1: W293 blank line contains whitespace
            
^
security/ai_agents/mobile_security_agent_extra.py:138:80: E501 line too long (98 > 79 characters)
            return {"trusted_publishers": False, "code_signing": False, "reputation_score": False}
                                                                               ^
security/ai_agents/mobile_security_agent_extra.py:139:1: W293 blank line contains whitespace
    
^
security/ai_agents/mobile_security_agent_extra.py:140:80: E501 line too long (80 > 79 characters)
    def _check_threat_patterns(self, threat_data: ThreatData) -> Dict[str, Any]:
                                                                               ^
security/ai_agents/mobile_security_agent_extra.py:145:80: E501 line too long (88 > 79 characters)
                "suspicious_behavior": threat_data.threat_type in ["malware", "trojan"],
                                                                               ^
security/ai_agents/mobile_security_agent_extra.py:149:1: W293 blank line contains whitespace
            
^
security/ai_agents/mobile_security_agent_extra.py:151:1: W293 blank line contains whitespace
            
^
security/ai_agents/mobile_security_agent_extra.py:155:1: W293 blank line contains whitespace
    
^
security/ai_agents/mobile_security_agent_extra.py:156:80: E501 line too long (83 > 79 characters)
    def _calculate_final_score(self, threat_data: ThreatData, trend_analysis: Dict, 
                                                                               ^
security/ai_agents/mobile_security_agent_extra.py:156:84: W291 trailing whitespace
    def _calculate_final_score(self, threat_data: ThreatData, trend_analysis: Dict, 
                                                                                   ^
security/ai_agents/mobile_security_agent_extra.py:157:30: E128 continuation line under-indented for visual indent
                             expert_consensus: float, whitelist_checks: Dict) -> float:
                             ^
security/ai_agents/mobile_security_agent_extra.py:157:80: E501 line too long (87 > 79 characters)
                             expert_consensus: float, whitelist_checks: Dict) -> float:
                                                                               ^
security/ai_agents/mobile_security_agent_extra.py:162:1: W293 blank line contains whitespace
            
^
security/ai_agents/mobile_security_agent_extra.py:166:80: E501 line too long (87 > 79 characters)
            whitelist_modifier = sum(whitelist_checks.values()) / len(whitelist_checks)
                                                                               ^
security/ai_agents/mobile_security_agent_extra.py:167:1: W293 blank line contains whitespace
            
^
security/ai_agents/mobile_security_agent_extra.py:169:80: E501 line too long (98 > 79 characters)
            final_score = (base_score + trend_modifier + expert_modifier + whitelist_modifier) / 4
                                                                               ^
security/ai_agents/mobile_security_agent_extra.py:170:1: W293 blank line contains whitespace
            
^
security/ai_agents/mobile_security_agent_extra.py:172:1: W293 blank line contains whitespace
            
^
security/ai_agents/mobile_security_agent_extra.py:176:1: W293 blank line contains whitespace
    
^
security/ai_agents/mobile_security_agent_extra.py:187:1: W293 blank line contains whitespace
    
^
security/ai_agents/mobile_security_agent_extra.py:201:1: W293 blank line contains whitespace
    
^
security/ai_agents/mobile_security_agent_extra.py:218:1: E305 expected 2 blank lines after class or function definition, found 1
mobile_security_agent_extra = MobileSecurityAgentExtra()^
security/ai_agents/mobile_security_agent_extra.py:218:57: W292 no newline at end of file
mobile_security_agent_extra = MobileSecurityAgentExtra()                                                        ^
security/ai_agents/mobile_security_agent_main.py:8:1: F401 'time' imported but unused
import time
^
security/ai_agents/mobile_security_agent_main.py:10:1: F401 'typing.Optional' imported but unused
from typing import Dict, Any, List, Optional
^
security/ai_agents/mobile_security_agent_main.py:15:1: E302 expected 2 blank lines, found 1
class ThreatType(Enum):
^
security/ai_agents/mobile_security_agent_main.py:26:1: E302 expected 2 blank lines, found 1
@dataclass
^
security/ai_agents/mobile_security_agent_main.py:37:1: E302 expected 2 blank lines, found 1
class MobileSecurityAgentMain:
^
security/ai_agents/mobile_security_agent_main.py:39:1: W293 blank line contains whitespace
    
^
security/ai_agents/mobile_security_agent_main.py:52:1: W293 blank line contains whitespace
    
^
security/ai_agents/mobile_security_agent_main.py:80:80: E501 line too long (80 > 79 characters)
            self.logger.error(f"Ошибка инициализации политик безопасности: {e}")
                                                                               ^
security/ai_agents/mobile_security_agent_main.py:81:1: W293 blank line contains whitespace
    
^
security/ai_agents/mobile_security_agent_main.py:86:1: W293 blank line contains whitespace
            
^
security/ai_agents/mobile_security_agent_main.py:89:1: W293 blank line contains whitespace
            
^
security/ai_agents/mobile_security_agent_main.py:91:80: E501 line too long (87 > 79 characters)
            policy_action = self._apply_security_policies(threat_data, threat_analysis)
                                                                               ^
security/ai_agents/mobile_security_agent_main.py:92:1: W293 blank line contains whitespace
            
^
security/ai_agents/mobile_security_agent_main.py:94:80: E501 line too long (90 > 79 characters)
            recommendations = self._generate_recommendations(threat_data, threat_analysis)
                                                                               ^
security/ai_agents/mobile_security_agent_main.py:95:1: W293 blank line contains whitespace
            
^
security/ai_agents/mobile_security_agent_main.py:106:1: W293 blank line contains whitespace
            
^
security/ai_agents/mobile_security_agent_main.py:109:1: W293 blank line contains whitespace
            
^
security/ai_agents/mobile_security_agent_main.py:113:1: W293 blank line contains whitespace
            
^
security/ai_agents/mobile_security_agent_main.py:114:80: E501 line too long (107 > 79 characters)
            self.logger.info(f"Обнаружена угроза {threat_data.threat_id}: {threat_data.threat_type.value}")
                                                                               ^
security/ai_agents/mobile_security_agent_main.py:116:1: W293 blank line contains whitespace
            
^
security/ai_agents/mobile_security_agent_main.py:120:1: W293 blank line contains whitespace
    
^
security/ai_agents/mobile_security_agent_main.py:130:1: W293 blank line contains whitespace
            
^
security/ai_agents/mobile_security_agent_main.py:150:1: W293 blank line contains whitespace
            
^
security/ai_agents/mobile_security_agent_main.py:152:80: E501 line too long (87 > 79 characters)
            analysis["behavioral_patterns"] = self._analyze_behavioral_patterns(threat)
                                                                               ^
security/ai_agents/mobile_security_agent_main.py:153:1: W293 blank line contains whitespace
            
^
security/ai_agents/mobile_security_agent_main.py:156:1: W293 blank line contains whitespace
            
^
security/ai_agents/mobile_security_agent_main.py:158:1: W293 blank line contains whitespace
            
^
security/ai_agents/mobile_security_agent_main.py:162:1: W293 blank line contains whitespace
    
^
security/ai_agents/mobile_security_agent_main.py:163:80: E501 line too long (80 > 79 characters)
    def _analyze_behavioral_patterns(self, threat: SecurityThreat) -> List[str]:
                                                                               ^
security/ai_agents/mobile_security_agent_main.py:167:1: W293 blank line contains whitespace
            
^
security/ai_agents/mobile_security_agent_main.py:172:1: W293 blank line contains whitespace
            
^
security/ai_agents/mobile_security_agent_main.py:178:1: W293 blank line contains whitespace
            
^
security/ai_agents/mobile_security_agent_main.py:181:1: W293 blank line contains whitespace
            
^
security/ai_agents/mobile_security_agent_main.py:186:1: W293 blank line contains whitespace
            
^
security/ai_agents/mobile_security_agent_main.py:188:1: W293 blank line contains whitespace
            
^
security/ai_agents/mobile_security_agent_main.py:192:1: W293 blank line contains whitespace
    
^
security/ai_agents/mobile_security_agent_main.py:193:80: E501 line too long (80 > 79 characters)
    def _analyze_device_context(self, threat: SecurityThreat) -> Dict[str, Any]:
                                                                               ^
security/ai_agents/mobile_security_agent_main.py:197:1: W293 blank line contains whitespace
            
^
security/ai_agents/mobile_security_agent_main.py:205:1: W293 blank line contains whitespace
            
^
security/ai_agents/mobile_security_agent_main.py:209:1: W293 blank line contains whitespace
            
^
security/ai_agents/mobile_security_agent_main.py:216:1: W293 blank line contains whitespace
            
^
security/ai_agents/mobile_security_agent_main.py:220:1: W293 blank line contains whitespace
    
^
security/ai_agents/mobile_security_agent_main.py:221:80: E501 line too long (107 > 79 characters)
    def _apply_security_policies(self, threat: SecurityThreat, analysis: Dict[str, Any]) -> Dict[str, Any]:
                                                                               ^
security/ai_agents/mobile_security_agent_main.py:226:1: W293 blank line contains whitespace
            
^
security/ai_agents/mobile_security_agent_main.py:233:1: W293 blank line contains whitespace
            
^
security/ai_agents/mobile_security_agent_main.py:236:1: W293 blank line contains whitespace
            
^
security/ai_agents/mobile_security_agent_main.py:238:1: W293 blank line contains whitespace
            
^
security/ai_agents/mobile_security_agent_main.py:244:1: W293 blank line contains whitespace
            
^
security/ai_agents/mobile_security_agent_main.py:252:1: W293 blank line contains whitespace
            
^
security/ai_agents/mobile_security_agent_main.py:256:1: W293 blank line contains whitespace
    
^
security/ai_agents/mobile_security_agent_main.py:257:80: E501 line too long (103 > 79 characters)
    def _generate_recommendations(self, threat: SecurityThreat, analysis: Dict[str, Any]) -> List[str]:
                                                                               ^
security/ai_agents/mobile_security_agent_main.py:261:1: W293 blank line contains whitespace
            
^
security/ai_agents/mobile_security_agent_main.py:286:1: W293 blank line contains whitespace
            
^
security/ai_agents/mobile_security_agent_main.py:293:1: W293 blank line contains whitespace
            
^
security/ai_agents/mobile_security_agent_main.py:295:1: W293 blank line contains whitespace
            
^
security/ai_agents/mobile_security_agent_main.py:299:1: W293 blank line contains whitespace
    
^
security/ai_agents/mobile_security_agent_main.py:307:1: W293 blank line contains whitespace
            
^
security/ai_agents/mobile_security_agent_main.py:310:1: W293 blank line contains whitespace
            
^
security/ai_agents/mobile_security_agent_main.py:312:1: W293 blank line contains whitespace
            
^
security/ai_agents/mobile_security_agent_main.py:316:80: E501 line too long (128 > 79 characters)
                "last_threat": max(device_threats, key=lambda x: x.timestamp).timestamp.isoformat() if device_threats else None,
                                                                               ^
security/ai_agents/mobile_security_agent_main.py:319:80: E501 line too long (80 > 79 characters)
                "security_score": self._calculate_security_score(device_threats)
                                                                               ^
security/ai_agents/mobile_security_agent_main.py:321:1: W293 blank line contains whitespace
            
^
security/ai_agents/mobile_security_agent_main.py:325:1: W293 blank line contains whitespace
    
^
security/ai_agents/mobile_security_agent_main.py:326:80: E501 line too long (80 > 79 characters)
    def _calculate_security_score(self, threats: List[SecurityThreat]) -> float:
                                                                               ^
security/ai_agents/mobile_security_agent_main.py:331:1: W293 blank line contains whitespace
            
^
security/ai_agents/mobile_security_agent_main.py:334:1: W293 blank line contains whitespace
            
^
security/ai_agents/mobile_security_agent_main.py:345:1: W293 blank line contains whitespace
            
^
security/ai_agents/mobile_security_agent_main.py:347:1: W293 blank line contains whitespace
            
^
security/ai_agents/mobile_security_agent_main.py:351:1: W293 blank line contains whitespace
    
^
security/ai_agents/mobile_security_agent_main.py:366:1: W293 blank line contains whitespace
    
^
security/ai_agents/mobile_security_agent_main.py:383:1: E305 expected 2 blank lines after class or function definition, found 1
mobile_security_agent_main = MobileSecurityAgentMain()^
security/ai_agents/mobile_security_agent_main.py:383:55: W292 no newline at end of file
mobile_security_agent_main = MobileSecurityAgentMain()                                                      ^
security/ai_agents/mobile_user_ai_agent.py:21:1: F401 'json' imported but unused
import json
^
security/ai_agents/mobile_user_ai_agent.py:22:1: F401 'time' imported but unused
import time
^
security/ai_agents/mobile_user_ai_agent.py:24:1: F401 'hashlib' imported but unused
import hashlib
^
security/ai_agents/mobile_user_ai_agent.py:25:1: F401 'datetime.timedelta' imported but unused
from datetime import datetime, timedelta
^
security/ai_agents/mobile_user_ai_agent.py:27:1: F401 'typing.Tuple' imported but unused
from typing import Dict, List, Optional, Any, Tuple
^
security/ai_agents/mobile_user_ai_agent.py:29:1: F401 'collections.defaultdict' imported but unused
from collections import defaultdict, deque
^
security/ai_agents/mobile_user_ai_agent.py:29:1: F401 'collections.deque' imported but unused
from collections import defaultdict, deque
^
security/ai_agents/mobile_user_ai_agent.py:36:5: F401 'core.security_base.SecurityEvent' imported but unused
    from core.security_base import (
    ^
security/ai_agents/mobile_user_ai_agent.py:36:5: F401 'core.security_base.SecurityRule' imported but unused
    from core.security_base import (
    ^
security/ai_agents/mobile_user_ai_agent.py:36:5: F401 'core.security_base.IncidentSeverity' imported but unused
    from core.security_base import (
    ^
security/ai_agents/mobile_user_ai_agent.py:161:1: W293 blank line contains whitespace
        
^
security/ai_agents/mobile_user_ai_agent.py:172:1: W293 blank line contains whitespace
        
^
security/ai_agents/mobile_user_ai_agent.py:180:1: W293 blank line contains whitespace
        
^
security/ai_agents/mobile_user_ai_agent.py:306:80: E501 line too long (81 > 79 characters)
            what_protects="Кража аккаунтов, подозрительная активность, аномалии",
                                                                               ^
security/ai_agents/mobile_user_ai_agent.py:325:80: E501 line too long (88 > 79 characters)
            what_protects="Кража данных, утечки информации, несанкционированный доступ",
                                                                               ^
security/ai_agents/mobile_user_ai_agent.py:344:80: E501 line too long (83 > 79 characters)
            what_protects="Взломы сети, подозрительные подключения, утечки данных",
                                                                               ^
security/ai_agents/mobile_user_ai_agent.py:529:80: E501 line too long (89 > 79 characters)
            "помощь": "Конечно! Чем могу помочь? Выберите функцию или задайте вопрос! 🤝",
                                                                               ^
security/ai_agents/mobile_user_ai_agent.py:530:80: E501 line too long (84 > 79 characters)
            "функции": "У нас есть много крутых функций! Посмотрите список ниже! 📋",
                                                                               ^
security/ai_agents/mobile_user_ai_agent.py:531:80: E501 line too long (84 > 79 characters)
            "безопасность": "Безопасность - это важно! Давайте настроим защиту! 🛡️",
                                                                               ^
security/ai_agents/mobile_user_ai_agent.py:532:80: E501 line too long (84 > 79 characters)
            "семья": "Защита семьи - наш приоритет! Покажу, как настроить! 👨‍👩‍👧‍👦",
                                                                               ^
security/ai_agents/mobile_user_ai_agent.py:533:80: E501 line too long (82 > 79 characters)
            "спасибо": "Пожалуйста! Рад помочь! Если что-то еще - обращайтесь! 😊",
                                                                               ^
security/ai_agents/mobile_user_ai_agent.py:569:80: E501 line too long (253 > 79 characters)
            "temporal_analysis": f"🕐 {function.russian_name} - это как умные часы для вашего интернета! Он следит, когда вы обычно пользуетесь телефоном, и если заметит что-то странное (например, кто-то заходит в ваш аккаунт ночью), сразу предупредит!",
                                                                               ^
security/ai_agents/mobile_user_ai_agent.py:570:80: E501 line too long (181 > 79 characters)
            "threat_detection": f"🛡️ {function.russian_name} - это как охранник для вашего телефона! Он постоянно ищет вирусы и опасности, и если что-то найдет, сразу заблокирует!",
                                                                               ^
security/ai_agents/mobile_user_ai_agent.py:571:80: E501 line too long (180 > 79 characters)
            "family_protection": f"👨‍👩‍👧‍👦 {function.russian_name} - это как няня для всей семьи! Он следит, чтобы дети не попали на плохие сайты, а взрослые были в безопасности!",
                                                                               ^
security/ai_agents/mobile_user_ai_agent.py:572:80: E501 line too long (172 > 79 characters)
            "vpn_protection": f"🔒 {function.russian_name} - это как невидимый плащ для интернета! Он скрывает, что вы делаете в интернете, чтобы никто не мог подсмотреть!",
                                                                               ^
security/ai_agents/mobile_user_ai_agent.py:573:80: E501 line too long (138 > 79 characters)
            "antivirus": f"💊 {function.russian_name} - это как врач для телефона! Он лечит вирусы и не дает им заразить ваше устройство!"}
                                                                               ^
security/ai_agents/mobile_user_ai_agent.py:589:80: E501 line too long (101 > 79 characters)
        return f"🔬 **{function.russian_name}** (Техническое название: {function.english_name})\n\n" \
               f"**Описание:** {function.description}\n\n" \
               f"**Функциональность:** {function.what_it_does}\n\n" \
               f"**Защита от:** {function.what_protects}\n\n" \
               f"**Пользовательский интерфейс:** {function.for_users}\n\n" \
               f"**Возможности:**\n" + "\n".join([f"• {feature}" for feature in function.features])
                                                                               ^
security/ai_agents/mobile_user_ai_agent.py:594:80: E501 line too long (99 > 79 characters)
        return f"🔬 **{function.russian_name}** (Техническое название: {function.english_name})\n\n" \
               f"**Описание:** {function.description}\n\n" \
               f"**Функциональность:** {function.what_it_does}\n\n" \
               f"**Защита от:** {function.what_protects}\n\n" \
               f"**Пользовательский интерфейс:** {function.for_users}\n\n" \
               f"**Возможности:**\n" + "\n".join([f"• {feature}" for feature in function.features])
                                                                               ^
security/ai_agents/mobile_user_ai_agent.py:616:80: E501 line too long (92 > 79 characters)
            user_profile.current_emotion, self.emotional_responses[EmotionType.СПОКОЙСТВИЕ])
                                                                               ^
security/ai_agents/mobile_user_ai_agent.py:693:80: E501 line too long (82 > 79 characters)
        if profile.experience_points >= 500 and profile.level != UserLevel.МАСТЕР:
                                                                               ^
security/ai_agents/mobile_user_ai_agent.py:696:80: E501 line too long (85 > 79 characters)
        elif profile.experience_points >= 200 and profile.level != UserLevel.ЭКСПЕРТ:
                                                                               ^
security/ai_agents/mobile_user_ai_agent.py:699:80: E501 line too long (85 > 79 characters)
        elif profile.experience_points >= 100 and profile.level != UserLevel.ОПЫТНЫЙ:
                                                                               ^
security/ai_agents/mobile_user_ai_agent.py:701:80: E501 line too long (89 > 79 characters)
        elif profile.experience_points >= 50 and profile.level != UserLevel.ПОЛЬЗОВАТЕЛЬ:
                                                                               ^
security/ai_agents/mobile_user_ai_agent.py:706:80: E501 line too long (82 > 79 characters)
        if user_id in self.user_profiles and achievement_key in self.achievements:
                                                                               ^
security/ai_agents/mobile_user_ai_agent.py:712:80: E501 line too long (88 > 79 characters)
                return f"🎉 Поздравляем! Вы получили достижение '{achievement['name']}'!"
                                                                               ^
security/ai_agents/mobile_user_ai_agent.py:725:80: E501 line too long (120 > 79 characters)
        return "Не совсем понял, что вы имеете в виду. Попробуйте спросить по-другому или выберите функцию из списка! 🤔"
                                                                               ^
security/ai_agents/mobile_user_ai_agent.py:785:80: E501 line too long (84 > 79 characters)
            f"{func['icon']} {func['russian_name']} - {func['simple_description']}")
                                                                               ^
security/ai_agents/monitor_manager.py:7:80: E501 line too long (86 > 79 characters)
"""
MonitorManager - Менеджер мониторинга системы безопасности
Централизованный мониторинг всех компонентов системы

Этот модуль предоставляет комплексную систему мониторинга для AI системы безопасности,
включающую реальное время мониторинга всех компонентов системы,
автоматическое обнаружение аномалий с использованием машинного обучения
и генерацию метрик производительности и статистики.

Автор: ALADDIN Security System
Версия: 3.0
Дата: 2025-01-06
Лицензия: MIT
"""
   
                                                          
                ^
security/ai_agents/monitor_manager.py:223:80: E501 line too long (86 > 79 characters)
    async def detect_anomalies(self, current_data: List[float]) -> Tuple[bool, float]:
                                                                               ^
security/ai_agents/monitor_manager.py:234:80: E501 line too long (83 > 79 characters)
            anomaly_score = self.isolation_forest.decision_function(scaled_data)[0]
                                                                               ^
security/ai_agents/monitor_manager.py:270:80: E501 line too long (103 > 79 characters)
                    time_since_last = (datetime.now() - self.last_alert_time[rule_key]).total_seconds()
                                                                               ^
security/ai_agents/monitor_manager.py:275:80: E501 line too long (89 > 79 characters)
                if self._evaluate_condition(metric.value, rule.threshold, rule.operator):
                                                                               ^
security/ai_agents/monitor_manager.py:284:80: E501 line too long (106 > 79 characters)
                        message=f"Метрика {metric.name} = {metric.value} {rule.operator} {rule.threshold}"
                                                                               ^
security/ai_agents/monitor_manager.py:295:80: E501 line too long (89 > 79 characters)
    def _evaluate_condition(self, value: float, threshold: float, operator: str) -> bool:
                                                                               ^
security/ai_agents/monitor_manager.py:421:62: W291 trailing whitespace
                if (self.config.anomaly_detection_enabled and 
                                                             ^
security/ai_agents/monitor_manager.py:422:21: E129 visually indented line with same indent as next logical line
                    len(all_metrics) > 0):
                    ^
security/ai_agents/monitor_manager.py:444:57: W291 trailing whitespace
            if (not self.anomaly_detector.is_trained and 
                                                        ^
security/ai_agents/monitor_manager.py:445:17: E129 visually indented line with same indent as next logical line
                len(self.metrics_history) > 50):
                ^
security/ai_agents/monitor_manager.py:456:80: E501 line too long (81 > 79 characters)
                is_anomaly, score = await self.anomaly_detector.detect_anomalies(
                                                                               ^
security/ai_agents/monitor_manager.py:460:80: E501 line too long (83 > 79 characters)
                    self.logger.warning(f"Обнаружена аномалия! Score: {score:.3f}")
                                                                               ^
security/ai_agents/monitor_manager.py:485:80: E501 line too long (88 > 79 characters)
    async def get_alerts(self, severity: Optional[AlertSeverity] = None) -> List[Alert]:
                                                                               ^
security/ai_agents/monitor_manager.py:491:80: E501 line too long (82 > 79 characters)
                alerts = [alert for alert in alerts if alert.severity == severity]
                                                                               ^
security/ai_agents/monitor_manager.py:542:80: E501 line too long (80 > 79 characters)
        self.logger.info(f"Сборщик метрик добавлен: {type(collector).__name__}")
                                                                               ^
security/ai_agents/monitor_manager_new.py:7:80: E501 line too long (86 > 79 characters)
"""
MonitorManager - Менеджер мониторинга системы безопасности
Централизованный мониторинг всех компонентов системы

Этот модуль предоставляет комплексную систему мониторинга для AI системы безопасности,
включающую реальное время мониторинга всех компонентов системы,
автоматическое обнаружение аномалий с использованием машинного обучения
и генерацию метрик производительности и статистики.

Автор: ALADDIN Security System
Версия: 3.0
Дата: 2025-01-06
Лицензия: MIT
"""
   
                                                          
                ^
security/ai_agents/monitor_manager_new.py:223:80: E501 line too long (86 > 79 characters)
    async def detect_anomalies(self, current_data: List[float]) -> Tuple[bool, float]:
                                                                               ^
security/ai_agents/monitor_manager_new.py:234:80: E501 line too long (83 > 79 characters)
            anomaly_score = self.isolation_forest.decision_function(scaled_data)[0]
                                                                               ^
security/ai_agents/monitor_manager_new.py:270:80: E501 line too long (103 > 79 characters)
                    time_since_last = (datetime.now() - self.last_alert_time[rule_key]).total_seconds()
                                                                               ^
security/ai_agents/monitor_manager_new.py:275:80: E501 line too long (89 > 79 characters)
                if self._evaluate_condition(metric.value, rule.threshold, rule.operator):
                                                                               ^
security/ai_agents/monitor_manager_new.py:284:80: E501 line too long (106 > 79 characters)
                        message=f"Метрика {metric.name} = {metric.value} {rule.operator} {rule.threshold}"
                                                                               ^
security/ai_agents/monitor_manager_new.py:295:80: E501 line too long (89 > 79 characters)
    def _evaluate_condition(self, value: float, threshold: float, operator: str) -> bool:
                                                                               ^
security/ai_agents/monitor_manager_new.py:421:62: W291 trailing whitespace
                if (self.config.anomaly_detection_enabled and 
                                                             ^
security/ai_agents/monitor_manager_new.py:422:21: E129 visually indented line with same indent as next logical line
                    len(all_metrics) > 0):
                    ^
security/ai_agents/monitor_manager_new.py:444:57: W291 trailing whitespace
            if (not self.anomaly_detector.is_trained and 
                                                        ^
security/ai_agents/monitor_manager_new.py:445:17: E129 visually indented line with same indent as next logical line
                len(self.metrics_history) > 50):
                ^
security/ai_agents/monitor_manager_new.py:456:80: E501 line too long (81 > 79 characters)
                is_anomaly, score = await self.anomaly_detector.detect_anomalies(
                                                                               ^
security/ai_agents/monitor_manager_new.py:460:80: E501 line too long (83 > 79 characters)
                    self.logger.warning(f"Обнаружена аномалия! Score: {score:.3f}")
                                                                               ^
security/ai_agents/monitor_manager_new.py:485:80: E501 line too long (88 > 79 characters)
    async def get_alerts(self, severity: Optional[AlertSeverity] = None) -> List[Alert]:
                                                                               ^
security/ai_agents/monitor_manager_new.py:491:80: E501 line too long (82 > 79 characters)
                alerts = [alert for alert in alerts if alert.severity == severity]
                                                                               ^
security/ai_agents/monitor_manager_new.py:542:80: E501 line too long (80 > 79 characters)
        self.logger.info(f"Сборщик метрик добавлен: {type(collector).__name__}")
                                                                               ^
security/ai_agents/natural_language_processor.py:15:1: F401 'hashlib' imported but unused
import hashlib
^
security/ai_agents/natural_language_processor.py:16:1: F401 'asyncio' imported but unused
import asyncio
^
security/ai_agents/natural_language_processor.py:18:1: F401 'datetime.timedelta' imported but unused
from datetime import datetime, timedelta
^
security/ai_agents/natural_language_processor.py:20:1: F401 'typing.Tuple' imported but unused
from typing import Dict, List, Optional, Any, Tuple, Callable
^
security/ai_agents/natural_language_processor.py:20:1: F401 'typing.Callable' imported but unused
from typing import Dict, List, Optional, Any, Tuple, Callable
^
security/ai_agents/natural_language_processor.py:22:1: F401 'threading' imported but unused
import threading
^
security/ai_agents/natural_language_processor.py:30:5: F401 'config.color_scheme.MatrixAIColorScheme' imported but unused
    from config.color_scheme import MatrixAIColorScheme, ColorTheme
    ^
security/ai_agents/natural_language_processor.py:30:5: F401 'config.color_scheme.ColorTheme' imported but unused
    from config.color_scheme import MatrixAIColorScheme, ColorTheme
    ^
security/ai_agents/natural_language_processor.py:41:1: E302 expected 2 blank lines, found 1
class IntentType(Enum):
^
security/ai_agents/natural_language_processor.py:46:34: E261 at least two spaces before inline comment
    NOTIFICATION = "notification" # Уведомления
                                 ^
security/ai_agents/natural_language_processor.py:52:1: E302 expected 2 blank lines, found 1
class EntityType(Enum):
^
security/ai_agents/natural_language_processor.py:63:1: E302 expected 2 blank lines, found 1
class SentimentType(Enum):
^
security/ai_agents/natural_language_processor.py:70:1: E302 expected 2 blank lines, found 1
@dataclass
^
security/ai_agents/natural_language_processor.py:80:1: E302 expected 2 blank lines, found 1
@dataclass
^
security/ai_agents/natural_language_processor.py:90:1: E302 expected 2 blank lines, found 1
@dataclass
^
security/ai_agents/natural_language_processor.py:104:1: E302 expected 2 blank lines, found 1
class NaturalLanguageProcessor(SecurityBase):
^
security/ai_agents/natural_language_processor.py:106:1: W293 blank line contains whitespace
    
^
security/ai_agents/natural_language_processor.py:110:80: E501 line too long (93 > 79 characters)
            description="AI-процессор естественного языка для понимания команд пользователей"
                                                                               ^
security/ai_agents/natural_language_processor.py:112:1: W293 blank line contains whitespace
        
^
security/ai_agents/natural_language_processor.py:115:1: W293 blank line contains whitespace
        
^
security/ai_agents/natural_language_processor.py:119:1: W293 blank line contains whitespace
        
^
security/ai_agents/natural_language_processor.py:122:1: W293 blank line contains whitespace
        
^
security/ai_agents/natural_language_processor.py:129:1: W293 blank line contains whitespace
        
^
security/ai_agents/natural_language_processor.py:133:1: W293 blank line contains whitespace
        
^
security/ai_agents/natural_language_processor.py:137:1: W293 blank line contains whitespace
        
^
security/ai_agents/natural_language_processor.py:140:1: W293 blank line contains whitespace
        
^
security/ai_agents/natural_language_processor.py:142:1: W293 blank line contains whitespace
    
^
security/ai_agents/natural_language_processor.py:186:80: E501 line too long (104 > 79 characters)
                IntentType.SECURITY: ["безопасность", "защита", "мониторинг", "security", "protection"],
                                                                               ^
security/ai_agents/natural_language_processor.py:187:80: E501 line too long (87 > 79 characters)
                IntentType.FAMILY: ["семья", "дети", "родители", "family", "children"],
                                                                               ^
security/ai_agents/natural_language_processor.py:188:80: E501 line too long (91 > 79 characters)
                IntentType.EMERGENCY: ["помощь", "авария", "спасите", "help", "emergency"],
                                                                               ^
security/ai_agents/natural_language_processor.py:189:80: E501 line too long (97 > 79 characters)
                IntentType.NOTIFICATION: ["уведомление", "сообщение", "notification", "message"],
                                                                               ^
security/ai_agents/natural_language_processor.py:190:80: E501 line too long (84 > 79 characters)
                IntentType.CONTROL: ["управление", "контроль", "control", "manage"],
                                                                               ^
security/ai_agents/natural_language_processor.py:192:80: E501 line too long (97 > 79 characters)
                IntentType.QUERY: ["что", "как", "где", "когда", "what", "how", "where", "when"],
                                                                               ^
security/ai_agents/natural_language_processor.py:193:80: E501 line too long (88 > 79 characters)
                IntentType.SETTINGS: ["настройки", "конфигурация", "settings", "config"]
                                                                               ^
security/ai_agents/natural_language_processor.py:196:80: E501 line too long (126 > 79 characters)
                EntityType.PERSON: r"\b(мама|папа|бабушка|дедушка|сын|дочь|мама|папа|mom|dad|grandma|grandpa|son|daughter)\b",
                                                                               ^
security/ai_agents/natural_language_processor.py:197:80: E501 line too long (121 > 79 characters)
                EntityType.LOCATION: r"\b(дом|квартира|комната|кухня|спальня|дом|home|apartment|room|kitchen|bedroom)\b",
                                                                               ^
security/ai_agents/natural_language_processor.py:198:80: E501 line too long (141 > 79 characters)
                EntityType.TIME: r"\b(сейчас|сегодня|завтра|вчера|утром|вечером|ночью|now|today|tomorrow|yesterday|morning|evening|night)\b",
                                                                               ^
security/ai_agents/natural_language_processor.py:199:80: E501 line too long (120 > 79 characters)
                EntityType.DEVICE: r"\b(телефон|компьютер|планшет|камера|датчик|phone|computer|tablet|camera|sensor)\b",
                                                                               ^
security/ai_agents/natural_language_processor.py:200:80: E501 line too long (113 > 79 characters)
                EntityType.ACTION: r"\b(включи|выключи|проверь|покажи|отправь|включи|выключи|check|show|send)\b",
                                                                               ^
security/ai_agents/natural_language_processor.py:201:80: E501 line too long (92 > 79 characters)
                EntityType.OBJECT: r"\b(дверь|окно|свет|музыка|дверь|window|light|music)\b",
                                                                               ^
security/ai_agents/natural_language_processor.py:203:80: E501 line too long (92 > 79 characters)
                EntityType.KEYWORD: r"\b(важно|срочно|критично|important|urgent|critical)\b"
                                                                               ^
security/ai_agents/natural_language_processor.py:206:1: W293 blank line contains whitespace
    
^
security/ai_agents/natural_language_processor.py:212:1: W293 blank line contains whitespace
            
^
security/ai_agents/natural_language_processor.py:215:1: W293 blank line contains whitespace
            
^
security/ai_agents/natural_language_processor.py:218:1: W293 blank line contains whitespace
            
^
security/ai_agents/natural_language_processor.py:221:1: W293 blank line contains whitespace
            
^
security/ai_agents/natural_language_processor.py:224:1: W293 blank line contains whitespace
            
^
security/ai_agents/natural_language_processor.py:227:1: W293 blank line contains whitespace
            
^
security/ai_agents/natural_language_processor.py:230:1: W293 blank line contains whitespace
            
^
security/ai_agents/natural_language_processor.py:231:80: E501 line too long (84 > 79 characters)
            self.logger.info("Компоненты NaturalLanguageProcessor инициализированы")
                                                                               ^
security/ai_agents/natural_language_processor.py:235:1: W293 blank line contains whitespace
    
^
security/ai_agents/natural_language_processor.py:271:1: W293 blank line contains whitespace
    
^
security/ai_agents/natural_language_processor.py:272:80: E501 line too long (117 > 79 characters)
    async def process_text(self, text: str, user_id: str, session_id: str, language: str = "ru") -> ProcessingResult:
                                                                               ^
security/ai_agents/natural_language_processor.py:276:13: F841 local variable 'start_time' is assigned to but never used
            start_time = time.time()
            ^
security/ai_agents/natural_language_processor.py:277:1: W293 blank line contains whitespace
            
^
security/ai_agents/natural_language_processor.py:281:1: W293 blank line contains whitespace
            
^
security/ai_agents/natural_language_processor.py:284:1: W293 blank line contains whitespace
            
^
security/ai_agents/natural_language_processor.py:287:1: W293 blank line contains whitespace
            
^
security/ai_agents/natural_language_processor.py:289:80: E501 line too long (89 > 79 characters)
            intent = await self.intent_classifier.classify_intent(processed_text, tokens)
                                                                               ^
security/ai_agents/natural_language_processor.py:290:1: W293 blank line contains whitespace
            
^
security/ai_agents/natural_language_processor.py:292:80: E501 line too long (94 > 79 characters)
            entities = await self.entity_recognizer.recognize_entities(processed_text, tokens)
                                                                               ^
security/ai_agents/natural_language_processor.py:293:1: W293 blank line contains whitespace
            
^
security/ai_agents/natural_language_processor.py:295:80: E501 line too long (87 > 79 characters)
            sentiment = await self.sentiment_analyzer.analyze_sentiment(processed_text)
                                                                               ^
security/ai_agents/natural_language_processor.py:296:1: W293 blank line contains whitespace
            
^
security/ai_agents/natural_language_processor.py:298:13: F841 local variable 'context' is assigned to but never used
            context = await self.context_analyzer.analyze_context(processed_text, intent, entities)
            ^
security/ai_agents/natural_language_processor.py:298:80: E501 line too long (99 > 79 characters)
            context = await self.context_analyzer.analyze_context(processed_text, intent, entities)
                                                                               ^
security/ai_agents/natural_language_processor.py:299:1: W293 blank line contains whitespace
            
^
security/ai_agents/natural_language_processor.py:301:13: F841 local variable 'keywords' is assigned to but never used
            keywords = await self.keyword_extractor.extract_keywords(processed_text, tokens)
            ^
security/ai_agents/natural_language_processor.py:301:80: E501 line too long (92 > 79 characters)
            keywords = await self.keyword_extractor.extract_keywords(processed_text, tokens)
                                                                               ^
security/ai_agents/natural_language_processor.py:302:1: W293 blank line contains whitespace
            
^
security/ai_agents/natural_language_processor.py:304:13: F841 local variable 'emotions' is assigned to but never used
            emotions = await self.emotion_detector.detect_emotions(processed_text)
            ^
security/ai_agents/natural_language_processor.py:304:80: E501 line too long (82 > 79 characters)
            emotions = await self.emotion_detector.detect_emotions(processed_text)
                                                                               ^
security/ai_agents/natural_language_processor.py:305:1: W293 blank line contains whitespace
            
^
security/ai_agents/natural_language_processor.py:307:80: E501 line too long (80 > 79 characters)
            confidence = self._calculate_confidence(intent, entities, sentiment)
                                                                               ^
security/ai_agents/natural_language_processor.py:308:1: W293 blank line contains whitespace
            
^
security/ai_agents/natural_language_processor.py:322:1: W293 blank line contains whitespace
            
^
security/ai_agents/natural_language_processor.py:325:1: W293 blank line contains whitespace
            
^
security/ai_agents/natural_language_processor.py:328:1: W293 blank line contains whitespace
            
^
security/ai_agents/natural_language_processor.py:330:80: E501 line too long (82 > 79 characters)
            self.logger.info(f"Текст успешно обработан: {processed_text[:50]}...")
                                                                               ^
security/ai_agents/natural_language_processor.py:331:1: W293 blank line contains whitespace
            
^
security/ai_agents/natural_language_processor.py:333:1: W293 blank line contains whitespace
            
^
security/ai_agents/natural_language_processor.py:338:1: W293 blank line contains whitespace
    
^
security/ai_agents/natural_language_processor.py:345:1: W293 blank line contains whitespace
            
^
security/ai_agents/natural_language_processor.py:348:1: W293 blank line contains whitespace
            
^
security/ai_agents/natural_language_processor.py:351:1: W293 blank line contains whitespace
            
^
security/ai_agents/natural_language_processor.py:355:1: W293 blank line contains whitespace
            
^
security/ai_agents/natural_language_processor.py:357:1: W293 blank line contains whitespace
            
^
security/ai_agents/natural_language_processor.py:361:1: W293 blank line contains whitespace
    
^
security/ai_agents/natural_language_processor.py:367:1: W293 blank line contains whitespace
            
^
security/ai_agents/natural_language_processor.py:370:1: W293 blank line contains whitespace
            
^
security/ai_agents/natural_language_processor.py:373:1: W293 blank line contains whitespace
            
^
security/ai_agents/natural_language_processor.py:378:1: W293 blank line contains whitespace
            
^
security/ai_agents/natural_language_processor.py:380:1: W293 blank line contains whitespace
            
^
security/ai_agents/natural_language_processor.py:384:1: W293 blank line contains whitespace
    
^
security/ai_agents/natural_language_processor.py:385:80: E501 line too long (111 > 79 characters)
    def _calculate_confidence(self, intent: Intent, entities: List[Entity], sentiment: SentimentType) -> float:
                                                                               ^
security/ai_agents/natural_language_processor.py:390:1: W293 blank line contains whitespace
            
^
security/ai_agents/natural_language_processor.py:392:80: E501 line too long (114 > 79 characters)
            entity_confidence = sum(entity.confidence for entity in entities) / len(entities) if entities else 0.0
                                                                               ^
security/ai_agents/natural_language_processor.py:393:1: W293 blank line contains whitespace
            
^
security/ai_agents/natural_language_processor.py:396:1: W293 blank line contains whitespace
            
^
security/ai_agents/natural_language_processor.py:398:80: E501 line too long (106 > 79 characters)
            sentiment_bonus = 0.05 if sentiment in [SentimentType.POSITIVE, SentimentType.URGENT] else 0.0
                                                                               ^
security/ai_agents/natural_language_processor.py:399:1: W293 blank line contains whitespace
            
^
security/ai_agents/natural_language_processor.py:401:80: E501 line too long (111 > 79 characters)
            confidence = min(1.0, intent_confidence + entity_confidence * 0.3 + entity_bonus + sentiment_bonus)
                                                                               ^
security/ai_agents/natural_language_processor.py:402:1: W293 blank line contains whitespace
            
^
security/ai_agents/natural_language_processor.py:404:1: W293 blank line contains whitespace
            
^
security/ai_agents/natural_language_processor.py:408:1: W293 blank line contains whitespace
    
^
security/ai_agents/natural_language_processor.py:414:1: W293 blank line contains whitespace
            
^
security/ai_agents/natural_language_processor.py:418:1: W293 blank line contains whitespace
            
^
security/ai_agents/natural_language_processor.py:421:1: W293 blank line contains whitespace
            
^
security/ai_agents/natural_language_processor.py:428:80: E501 line too long (135 > 79 characters)
                    "entities": [{"type": e.type.value, "value": e.value, "confidence": e.confidence} for e in result.intent.entities],
                                                                               ^
security/ai_agents/natural_language_processor.py:431:80: E501 line too long (172 > 79 characters)
                "entities": [{"type": e.type.value, "value": e.value, "start_pos": e.start_pos, "end_pos": e.end_pos, "confidence": e.confidence} for e in result.entities],
                                                                               ^
security/ai_agents/natural_language_processor.py:439:1: W293 blank line contains whitespace
            
^
security/ai_agents/natural_language_processor.py:440:80: E501 line too long (123 > 79 characters)
            filename = f"data/nlp_processing/processing_{result.timestamp.strftime('%Y%m%d_%H%M%S')}_{result.user_id}.json"
                                                                               ^
security/ai_agents/natural_language_processor.py:441:1: W293 blank line contains whitespace
            
^
security/ai_agents/natural_language_processor.py:444:1: W293 blank line contains whitespace
            
^
security/ai_agents/natural_language_processor.py:446:1: W293 blank line contains whitespace
            
^
security/ai_agents/natural_language_processor.py:449:1: W293 blank line contains whitespace
    
^
security/ai_agents/natural_language_processor.py:454:80: E501 line too long (88 > 79 characters)
            total_confidence = self.average_confidence * (self.successful_processed - 1)
                                                                               ^
security/ai_agents/natural_language_processor.py:455:80: E501 line too long (104 > 79 characters)
            self.average_confidence = (total_confidence + result.confidence) / self.successful_processed
                                                                               ^
security/ai_agents/natural_language_processor.py:456:1: W293 blank line contains whitespace
            
^
security/ai_agents/natural_language_processor.py:457:80: E501 line too long (102 > 79 characters)
            self.logger.debug(f"Статистика обновлена: {self.successful_processed} успешных обработок")
                                                                               ^
security/ai_agents/natural_language_processor.py:458:1: W293 blank line contains whitespace
            
^
security/ai_agents/natural_language_processor.py:461:1: W293 blank line contains whitespace
    
^
security/ai_agents/natural_language_processor.py:465:80: E501 line too long (118 > 79 characters)
            success_rate = (self.successful_processed / self.total_processed * 100) if self.total_processed > 0 else 0
                                                                               ^
security/ai_agents/natural_language_processor.py:466:1: W293 blank line contains whitespace
            
^
security/ai_agents/natural_language_processor.py:477:80: E501 line too long (84 > 79 characters)
                "sentiment_types": [sentiment.value for sentiment in SentimentType],
                                                                               ^
security/ai_agents/natural_language_processor.py:481:1: W293 blank line contains whitespace
            
^
security/ai_agents/natural_language_processor.py:485:1: W293 blank line contains whitespace
    
^
security/ai_agents/natural_language_processor.py:497:1: W293 blank line contains whitespace
            
^
security/ai_agents/natural_language_processor.py:516:1: W293 blank line contains whitespace
            
^
security/ai_agents/natural_language_processor.py:536:1: W293 blank line contains whitespace
            
^
security/ai_agents/natural_language_processor.py:556:1: W293 blank line contains whitespace
            
^
security/ai_agents/natural_language_processor.py:576:1: W293 blank line contains whitespace
            
^
security/ai_agents/natural_language_processor.py:581:33: E712 comparison to True should be 'if cond is True:' or 'if cond:'
                assert is_valid == True
                                ^
security/ai_agents/natural_language_processor.py:595:1: W293 blank line contains whitespace
            
^
security/ai_agents/natural_language_processor.py:597:1: W293 blank line contains whitespace
            
^
security/ai_agents/natural_language_processor.py:612:1: W293 blank line contains whitespace
    
^
security/ai_agents/natural_language_processor.py:618:1: W293 blank line contains whitespace
            
^
security/ai_agents/natural_language_processor.py:632:1: W293 blank line contains whitespace
            
^
security/ai_agents/natural_language_processor.py:644:1: W293 blank line contains whitespace
            
^
security/ai_agents/natural_language_processor.py:663:1: W293 blank line contains whitespace
            
^
security/ai_agents/natural_language_processor.py:675:1: W293 blank line contains whitespace
            
^
security/ai_agents/natural_language_processor.py:686:1: W293 blank line contains whitespace
            
^
security/ai_agents/natural_language_processor.py:688:80: E501 line too long (108 > 79 characters)
            total_checks = len(architectural_principles) + len(functionality) + len(security) + len(testing)
                                                                               ^
security/ai_agents/natural_language_processor.py:695:1: W293 blank line contains whitespace
            
^
security/ai_agents/natural_language_processor.py:697:1: W293 blank line contains whitespace
            
^
security/ai_agents/natural_language_processor.py:702:80: E501 line too long (102 > 79 characters)
                "quality_grade": "A+" if quality_score >= 95 else "A" if quality_score >= 90 else "B",
                                                                               ^
security/ai_agents/natural_language_processor.py:713:1: W293 blank line contains whitespace
            
^
security/ai_agents/natural_language_processor.py:715:1: W293 blank line contains whitespace
            
^
security/ai_agents/natural_language_processor.py:726:1: W293 blank line contains whitespace
    
^
security/ai_agents/natural_language_processor.py:731:1: E302 expected 2 blank lines, found 1
class IntentClassifier:
^
security/ai_agents/natural_language_processor.py:735:1: W293 blank line contains whitespace
    
^
security/ai_agents/natural_language_processor.py:750:1: W293 blank line contains whitespace
        
^
security/ai_agents/natural_language_processor.py:760:1: E302 expected 2 blank lines, found 1
class EntityRecognizer:
^
security/ai_agents/natural_language_processor.py:764:1: W293 blank line contains whitespace
    
^
security/ai_agents/natural_language_processor.py:782:1: E302 expected 2 blank lines, found 1
class SentimentAnalyzer:
^
security/ai_agents/natural_language_processor.py:786:1: W293 blank line contains whitespace
    
^
security/ai_agents/natural_language_processor.py:789:80: E501 line too long (89 > 79 characters)
        positive_words = ["хорошо", "отлично", "прекрасно", "good", "excellent", "great"]
                                                                               ^
security/ai_agents/natural_language_processor.py:792:1: W293 blank line contains whitespace
        
^
security/ai_agents/natural_language_processor.py:794:1: W293 blank line contains whitespace
        
^
security/ai_agents/natural_language_processor.py:804:1: E302 expected 2 blank lines, found 1
class ContextAnalyzer:
^
security/ai_agents/natural_language_processor.py:808:1: W293 blank line contains whitespace
    
^
security/ai_agents/natural_language_processor.py:818:1: E302 expected 2 blank lines, found 1
class KeywordExtractor:
^
security/ai_agents/natural_language_processor.py:822:1: W293 blank line contains whitespace
    
^
security/ai_agents/natural_language_processor.py:826:80: E501 line too long (81 > 79 characters)
        for intent_type, keywords_list in self.config["intent_keywords"].items():
                                                                               ^
security/ai_agents/natural_language_processor.py:832:1: E302 expected 2 blank lines, found 1
class EmotionDetector:
^
security/ai_agents/natural_language_processor.py:836:1: W293 blank line contains whitespace
    
^
security/ai_agents/natural_language_processor.py:841:1: W293 blank line contains whitespace
        
^
security/ai_agents/natural_language_processor.py:850:1: W293 blank line contains whitespace
        
^
security/ai_agents/natural_language_processor.py:857:1: W293 blank line contains whitespace
    
^
security/ai_agents/natural_language_processor.py:860:80: E501 line too long (90 > 79 characters)
    print(f"Тесты пройдены: {test_results['tests_passed']}/{test_results['total_tests']}")
                                                                               ^
security/ai_agents/natural_language_processor.py:861:1: W293 blank line contains whitespace
    
^
security/ai_agents/natural_language_processor.py:864:80: E501 line too long (101 > 79 characters)
    print(f"Качество: {quality_report['quality_score']:.1f}/100 ({quality_report['quality_grade']})")
                                                                               ^
security/ai_agents/natural_language_processor.py:865:1: W293 blank line contains whitespace
    
^
security/ai_agents/natural_language_processor.py:868:63: W292 no newline at end of file
    print(f"Статистика: {stats['total_processed']} обработок")                                                              ^
security/ai_agents/network_security_agent.py:189:80: E501 line too long (89 > 79 characters)
        data['threats_detected'] = [threat.to_dict() for threat in self.threats_detected]
                                                                               ^
security/ai_agents/network_security_agent.py:190:80: E501 line too long (85 > 79 characters)
        data['suspicious_flows'] = [flow.to_dict() for flow in self.suspicious_flows]
                                                                               ^
security/ai_agents/network_security_agent.py:217:80: E501 line too long (94 > 79 characters)
        data['last_analysis'] = self.last_analysis.isoformat() if self.last_analysis else None
                                                                               ^
security/ai_agents/network_security_agent.py:293:80: E501 line too long (87 > 79 characters)
            self.log_activity("Network Security Agent успешно инициализирован", "info")
                                                                               ^
security/ai_agents/network_security_agent.py:297:80: E501 line too long (91 > 79 characters)
            self.log_activity(f"Ошибка инициализации Network Security Agent: {e}", "error")
                                                                               ^
security/ai_agents/network_security_agent.py:323:80: E501 line too long (87 > 79 characters)
            self.log_activity(f"Ошибка остановки Network Security Agent: {e}", "error")
                                                                               ^
security/ai_agents/network_security_agent.py:326:80: E501 line too long (85 > 79 characters)
    def analyze_packet(self, packet_data: Dict[str, Any]) -> Optional[NetworkThreat]:
                                                                               ^
security/ai_agents/network_security_agent.py:355:80: E501 line too long (80 > 79 characters)
                     analysis_time) / self.statistics["total_packets_processed"]
                                                                               ^
security/ai_agents/network_security_agent.py:364:80: E501 line too long (87 > 79 characters)
    def analyze_network_flow(self, flow_data: Dict[str, Any]) -> Optional[NetworkFlow]:
                                                                               ^
security/ai_agents/network_security_agent.py:393:80: E501 line too long (98 > 79 characters)
                active_flows = len([f for f in self.network_flows.values() if f.end_time is None])
                                                                               ^
security/ai_agents/network_security_agent.py:395:80: E501 line too long (83 > 79 characters)
                allowed_connections = len(self.network_flows) - blocked_connections
                                                                               ^
security/ai_agents/network_security_agent.py:418:80: E501 line too long (87 > 79 characters)
                    threats_detected=self.detected_threats[-10:],  # Последние 10 угроз
                                                                               ^
security/ai_agents/network_security_agent.py:419:80: E501 line too long (97 > 79 characters)
                    suspicious_flows=suspicious_flows[-5:],  # Последние 5 подозрительных потоков
                                                                               ^
security/ai_agents/network_security_agent.py:459:80: E501 line too long (84 > 79 characters)
                        "blocked_ips_count": len(self.network_rules["blocked_ips"]),
                                                                               ^
security/ai_agents/network_security_agent.py:460:80: E501 line too long (88 > 79 characters)
                        "blocked_ports_count": len(self.network_rules["blocked_ports"]),
                                                                               ^
security/ai_agents/network_security_agent.py:461:80: E501 line too long (90 > 79 characters)
                        "allowed_protocols": list(self.network_rules["allowed_protocols"])
                                                                               ^
security/ai_agents/network_security_agent.py:468:80: E501 line too long (81 > 79 characters)
    def block_ip(self, ip_address: str, reason: str = "Security threat") -> bool:
                                                                               ^
security/ai_agents/network_security_agent.py:473:80: E501 line too long (93 > 79 characters)
                self.log_activity(f"IP адрес {ip_address} заблокирован: {reason}", "warning")
                                                                               ^
security/ai_agents/network_security_agent.py:484:80: E501 line too long (81 > 79 characters)
                self.log_activity(f"IP адрес {ip_address} разблокирован", "info")
                                                                               ^
security/ai_agents/network_security_agent.py:494:80: E501 line too long (88 > 79 characters)
            self.log_activity("AI модели сетевой безопасности инициализированы", "info")
                                                                               ^
security/ai_agents/network_security_agent.py:545:80: E501 line too long (83 > 79 characters)
    def _create_network_packet(self, packet_data: Dict[str, Any]) -> NetworkPacket:
                                                                               ^
security/ai_agents/network_security_agent.py:549:80: E501 line too long (91 > 79 characters)
                packet_id=f"packet-{int(time.time() * 1000)}-{random.randint(1000, 9999)}",
                                                                               ^
security/ai_agents/network_security_agent.py:589:80: E501 line too long (87 > 79 characters)
            cutoff_time = datetime.now() - timedelta(hours=self.packet_retention_hours)
                                                                               ^
security/ai_agents/network_security_agent.py:598:80: E501 line too long (81 > 79 characters)
            self.log_activity(f"Ошибка добавления сетевого пакета: {e}", "error")
                                                                               ^
security/ai_agents/network_security_agent.py:600:80: E501 line too long (88 > 79 characters)
    def _analyze_packet_threats(self, packet: NetworkPacket) -> Optional[NetworkThreat]:
                                                                               ^
security/ai_agents/network_security_agent.py:622:80: E501 line too long (108 > 79 characters)
            if packet.protocol not in [NetworkProtocol(p) for p in self.network_rules["allowed_protocols"]]:
                                                                               ^
security/ai_agents/network_security_agent.py:659:80: E501 line too long (86 > 79 characters)
    def _create_threat(self, threat_type: NetworkThreatType, severity: ThreatSeverity,
                                                                               ^
security/ai_agents/network_security_agent.py:660:80: E501 line too long (81 > 79 characters)
                       packet: NetworkPacket, description: str) -> NetworkThreat:
                                                                               ^
security/ai_agents/network_security_agent.py:686:80: E501 line too long (83 > 79 characters)
    def _get_mitigation_actions(self, threat_type: NetworkThreatType) -> List[str]:
                                                                               ^
security/ai_agents/network_security_agent.py:717:80: E501 line too long (90 > 79 characters)
            return actions_map.get(threat_type, ["Провести дополнительное расследование"])
                                                                               ^
security/ai_agents/network_security_agent.py:720:80: E501 line too long (87 > 79 characters)
            self.log_activity(f"Ошибка получения действий по устранению: {e}", "error")
                                                                               ^
security/ai_agents/network_security_agent.py:735:80: E501 line too long (92 > 79 characters)
                self.block_ip(threat.source_ip, f"Критическая угроза: {threat.description}")
                                                                               ^
security/ai_agents/network_security_agent.py:738:80: E501 line too long (85 > 79 characters)
            self.log_activity(f"Ошибка добавления обнаруженной угрозы: {e}", "error")
                                                                               ^
security/ai_agents/network_security_agent.py:764:80: E501 line too long (87 > 79 characters)
                flow_id=f"flow-{int(time.time() * 1000)}-{random.randint(1000, 9999)}",
                                                                               ^
security/ai_agents/network_security_agent.py:807:80: E501 line too long (81 > 79 characters)
            self.log_activity(f"Ошибка добавления сетевого потока: {e}", "error")
                                                                               ^
security/ai_agents/network_security_agent.py:841:80: E501 line too long (86 > 79 characters)
            self.log_activity(f"Ошибка анализа подозрительности потока: {e}", "error")
                                                                               ^
security/ai_agents/network_security_agent.py:856:80: E501 line too long (99 > 79 characters)
            critical_threats = [t for t in recent_threats if t.severity == ThreatSeverity.CRITICAL]
                                                                               ^
security/ai_agents/network_security_agent.py:861:80: E501 line too long (91 > 79 characters)
            high_threats = [t for t in recent_threats if t.severity == ThreatSeverity.HIGH]
                                                                               ^
security/ai_agents/network_security_agent.py:892:80: E501 line too long (102 > 79 characters)
            critical_count = len([t for t in recent_threats if t.severity == ThreatSeverity.CRITICAL])
                                                                               ^
security/ai_agents/network_security_agent.py:893:80: E501 line too long (94 > 79 characters)
            high_count = len([t for t in recent_threats if t.severity == ThreatSeverity.HIGH])
                                                                               ^
security/ai_agents/network_security_agent.py:894:80: E501 line too long (98 > 79 characters)
            medium_count = len([t for t in recent_threats if t.severity == ThreatSeverity.MEDIUM])
                                                                               ^
security/ai_agents/network_security_agent.py:943:80: E501 line too long (105 > 79 characters)
                recommendations.append("Критический уровень угроз - требуется немедленное вмешательство")
                                                                               ^
security/ai_agents/network_security_agent.py:945:80: E501 line too long (80 > 79 characters)
                recommendations.append("Высокий уровень угроз - усилить защиту")
                                                                               ^
security/ai_agents/network_security_agent.py:989:80: E501 line too long (81 > 79 characters)
            self.log_activity(f"Ошибка анализа накопленных данных: {e}", "error")
                                                                               ^
security/ai_agents/network_security_agent.py:1000:80: E501 line too long (84 > 79 characters)
                ip_counts[packet.source_ip] = ip_counts.get(packet.source_ip, 0) + 1
                                                                               ^
security/ai_agents/network_security_agent.py:1006:80: E501 line too long (109 > 79 characters)
                        self.log_activity(f"Подозрительная активность с IP {ip}: {count} пакетов", "warning")
                                                                               ^
security/ai_agents/network_security_agent.py:1009:80: E501 line too long (80 > 79 characters)
            self.log_activity(f"Ошибка анализа паттернов пакетов: {e}", "error")
                                                                               ^
security/ai_agents/network_security_agent.py:1016:80: E501 line too long (83 > 79 characters)
                if flow.threat_score > 0.5 and flow.status == NetworkStatus.NORMAL:
                                                                               ^
security/ai_agents/network_security_agent.py:1018:80: E501 line too long (100 > 79 characters)
                    self.log_activity(f"Поток {flow.flow_id} помечен как подозрительный", "warning")
                                                                               ^
security/ai_agents/network_security_agent.py:1029:80: E501 line too long (88 > 79 characters)
            cutoff_packets = current_time - timedelta(hours=self.packet_retention_hours)
                                                                               ^
security/ai_agents/network_security_agent.py:1036:80: E501 line too long (84 > 79 characters)
            cutoff_flows = current_time - timedelta(hours=self.flow_retention_hours)
                                                                               ^
security/ai_agents/network_security_agent.py:1063:80: E501 line too long (89 > 79 characters)
                "threats": [threat.to_dict() for threat in self.detected_threats[-100:]],
                                                                               ^
security/ai_agents/network_security_agent.py:1064:80: E501 line too long (93 > 79 characters)
                "flows": {k: v.to_dict() for k, v in list(self.network_flows.items())[-50:]},
                                                                               ^
security/ai_agents/network_security_agent.py:1070:80: E501 line too long (86 > 79 characters)
                    "allowed_protocols": list(self.network_rules["allowed_protocols"])
                                                                               ^
security/ai_agents/network_security_agent.py:1075:80: E501 line too long (90 > 79 characters)
            with open("/tmp/aladdin_network/last_state.json", 'w', encoding='utf-8') as f:
                                                                               ^
security/ai_agents/network_security_agent.py:1078:80: E501 line too long (81 > 79 characters)
            self.log_activity("Состояние сетевой безопасности сохранено", "info")
                                                                               ^
security/ai_agents/network_security_agent.py:1080:80: E501 line too long (96 > 79 characters)
            self.log_activity(f"Ошибка сохранения состояния сетевой безопасности: {e}", "error")
                                                                               ^
security/ai_agents/notification_bot.py:20:1: F401 'asyncio' imported but unused
import asyncio
^
security/ai_agents/notification_bot.py:21:1: F401 'logging' imported but unused
import logging
^
security/ai_agents/notification_bot.py:23:1: F401 'hashlib' imported but unused
import hashlib
^
security/ai_agents/notification_bot.py:26:1: F401 're' imported but unused
import re
^
security/ai_agents/notification_bot.py:27:1: F401 'math' imported but unused
import math
^
security/ai_agents/notification_bot.py:31:1: F401 'typing.Set' imported but unused
from typing import Dict, List, Optional, Any, Set, Tuple, Union, Callable, Protocol
^
security/ai_agents/notification_bot.py:31:1: F401 'typing.Union' imported but unused
from typing import Dict, List, Optional, Any, Set, Tuple, Union, Callable, Protocol
^
security/ai_agents/notification_bot.py:31:1: F401 'typing.Callable' imported but unused
from typing import Dict, List, Optional, Any, Set, Tuple, Union, Callable, Protocol
^
security/ai_agents/notification_bot.py:31:1: F401 'typing.Protocol' imported but unused
from typing import Dict, List, Optional, Any, Set, Tuple, Union, Callable, Protocol
^
security/ai_agents/notification_bot.py:31:80: E501 line too long (83 > 79 characters)
from typing import Dict, List, Optional, Any, Set, Tuple, Union, Callable, Protocol
                                                                               ^
security/ai_agents/notification_bot.py:37:1: F401 'sklearn.metrics.pairwise.cosine_similarity' imported but unused
from sklearn.metrics.pairwise import cosine_similarity
^
security/ai_agents/notification_bot.py:40:1: F401 'requests' imported but unused
import requests
^
security/ai_agents/notification_bot.py:43:1: F401 'core.security_base.SecurityEvent' imported but unused
from core.security_base import SecurityEvent, SecurityRule, IncidentSeverity
^
security/ai_agents/notification_bot.py:43:1: F401 'core.security_base.SecurityRule' imported but unused
from core.security_base import SecurityEvent, SecurityRule, IncidentSeverity
^
security/ai_agents/notification_bot.py:43:1: F401 'core.security_base.IncidentSeverity' imported but unused
from core.security_base import SecurityEvent, SecurityRule, IncidentSeverity
^
security/ai_agents/notification_bot.py:159:1: W293 blank line contains whitespace
    """
    Машинное обучение для анализа уведомлений
    
    Использует продвинутые алгоритмы для:
    - Анализа эффективности уведомлений
    - Кластеризации пользователей по предпочтениям
    - Предсказания оптимального времени отправки
    - Обнаружения аномалий в поведении пользователей
    - Персонализации контента уведомлений
    """
^
security/ai_agents/notification_bot.py:167:1: W293 blank line contains whitespace
    
^
security/ai_agents/notification_bot.py:170:80: E501 line too long (82 > 79 characters)
        self.vectorizer = TfidfVectorizer(max_features=1000, stop_words='english')
                                                                               ^
security/ai_agents/notification_bot.py:172:80: E501 line too long (91 > 79 characters)
        self.content_classifier = RandomForestClassifier(n_estimators=100, random_state=42)
                                                                               ^
security/ai_agents/notification_bot.py:173:80: E501 line too long (88 > 79 characters)
        self.timing_predictor = RandomForestClassifier(n_estimators=50, random_state=42)
                                                                               ^
security/ai_agents/notification_bot.py:178:1: W293 blank line contains whitespace
        
^
security/ai_agents/notification_bot.py:182:1: W293 blank line contains whitespace
        """
        Обучение ML моделей на исторических данных уведомлений
        
        Args:
            notifications: Список исторических уведомлений
            
        Returns:
            bool: True если обучение успешно
        """
^
security/ai_agents/notification_bot.py:185:1: W293 blank line contains whitespace
        """
        Обучение ML моделей на исторических данных уведомлений
        
        Args:
            notifications: Список исторических уведомлений
            
        Returns:
            bool: True если обучение успешно
        """
^
security/ai_agents/notification_bot.py:191:80: E501 line too long (82 > 79 characters)
                self.logger.warning("Недостаточно данных для обучения ML моделей")
                                                                               ^
security/ai_agents/notification_bot.py:193:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:195:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:198:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:201:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:204:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:208:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:210:80: E501 line too long (82 > 79 characters)
            timing_labels = [self._extract_timing_label(n) for n in notifications]
                                                                               ^
security/ai_agents/notification_bot.py:212:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:215:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:217:80: E501 line too long (99 > 79 characters)
            self.logger.info(f"ML модели уведомлений обучены на {len(notifications)} уведомлениях")
                                                                               ^
security/ai_agents/notification_bot.py:219:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:223:1: W293 blank line contains whitespace
    
^
security/ai_agents/notification_bot.py:224:80: E501 line too long (117 > 79 characters)
    def _extract_training_features(self, notifications: List[Dict[str, Any]]) -> Tuple[List[List[float]], List[str]]:
                                                                               ^
security/ai_agents/notification_bot.py:227:1: W293 blank line contains whitespace
        """
        Извлечение признаков для обучения ML моделей
        
        Args:
            notifications: Список уведомлений
            
        Returns:
            Tuple с признаками и метками
        """
^
security/ai_agents/notification_bot.py:230:1: W293 blank line contains whitespace
        """
        Извлечение признаков для обучения ML моделей
        
        Args:
            notifications: Список уведомлений
            
        Returns:
            Tuple с признаками и метками
        """
^
security/ai_agents/notification_bot.py:236:1: W293 blank line contains whitespace
        
^
security/ai_agents/notification_bot.py:239:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:251:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:262:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:265:80: E501 line too long (93 > 79 characters)
            priority_mapping = {'low': 0, 'normal': 1, 'high': 2, 'urgent': 3, 'critical': 4}
                                                                               ^
security/ai_agents/notification_bot.py:267:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:279:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:284:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:287:1: W293 blank line contains whitespace
        
^
security/ai_agents/notification_bot.py:289:1: W293 blank line contains whitespace
    
^
security/ai_agents/notification_bot.py:294:1: W293 blank line contains whitespace
        
^
security/ai_agents/notification_bot.py:303:1: W293 blank line contains whitespace
    
^
security/ai_agents/notification_bot.py:308:1: W293 blank line contains whitespace
    
^
security/ai_agents/notification_bot.py:313:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:319:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:322:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:326:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:330:1: W293 blank line contains whitespace
                
^
security/ai_agents/notification_bot.py:335:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:338:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:342:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:347:80: E501 line too long (90 > 79 characters)
                    'preferences': self._extract_user_preferences(user_features[user_id]),
                                                                               ^
security/ai_agents/notification_bot.py:350:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:353:1: W293 blank line contains whitespace
    
^
security/ai_agents/notification_bot.py:354:80: E501 line too long (94 > 79 characters)
    def _extract_user_features(self, user_notifications: List[Dict[str, Any]]) -> List[float]:
                                                                               ^
security/ai_agents/notification_bot.py:357:1: W293 blank line contains whitespace
        
^
security/ai_agents/notification_bot.py:359:80: E501 line too long (98 > 79 characters)
        type_counts = Counter([n.get('notification_type', 'unknown') for n in user_notifications])
                                                                               ^
security/ai_agents/notification_bot.py:361:1: W293 blank line contains whitespace
        
^
security/ai_agents/notification_bot.py:362:80: E501 line too long (100 > 79 characters)
        for notification_type in ['security', 'family', 'system', 'emergency', 'reminder', 'alert']:
                                                                               ^
security/ai_agents/notification_bot.py:363:80: E501 line too long (88 > 79 characters)
            features.append(type_counts.get(notification_type, 0) / total_notifications)
                                                                               ^
security/ai_agents/notification_bot.py:364:1: W293 blank line contains whitespace
        
^
security/ai_agents/notification_bot.py:366:80: E501 line too long (92 > 79 characters)
        priority_counts = Counter([n.get('priority', 'normal') for n in user_notifications])
                                                                               ^
security/ai_agents/notification_bot.py:368:80: E501 line too long (83 > 79 characters)
            features.append(priority_counts.get(priority, 0) / total_notifications)
                                                                               ^
security/ai_agents/notification_bot.py:369:1: W293 blank line contains whitespace
        
^
security/ai_agents/notification_bot.py:375:1: W293 blank line contains whitespace
        
^
security/ai_agents/notification_bot.py:376:80: E501 line too long (101 > 79 characters)
        for channel in ['push', 'email', 'sms', 'telegram', 'whatsapp', 'viber', 'discord', 'slack']:
                                                                               ^
security/ai_agents/notification_bot.py:377:80: E501 line too long (81 > 79 characters)
            features.append(channel_counts.get(channel, 0) / total_notifications)
                                                                               ^
security/ai_agents/notification_bot.py:378:1: W293 blank line contains whitespace
        
^
security/ai_agents/notification_bot.py:380:80: E501 line too long (93 > 79 characters)
        hours = [datetime.fromisoformat(n.get('created_at', datetime.now().isoformat())).hour 
                                                                               ^
security/ai_agents/notification_bot.py:380:94: W291 trailing whitespace
        hours = [datetime.fromisoformat(n.get('created_at', datetime.now().isoformat())).hour 
                                                                                             ^
security/ai_agents/notification_bot.py:381:17: E128 continuation line under-indented for visual indent
                for n in user_notifications]
                ^
security/ai_agents/notification_bot.py:383:1: W293 blank line contains whitespace
        
^
security/ai_agents/notification_bot.py:385:80: E501 line too long (97 > 79 characters)
            count = sum(hour_distribution.get(h, 0) for h in range(hour_range[0], hour_range[1]))
                                                                               ^
security/ai_agents/notification_bot.py:387:1: W293 blank line contains whitespace
        
^
security/ai_agents/notification_bot.py:389:1: W293 blank line contains whitespace
    
^
security/ai_agents/notification_bot.py:390:80: E501 line too long (100 > 79 characters)
    def _extract_user_preferences(self, user_notifications: List[Dict[str, Any]]) -> Dict[str, Any]:
                                                                               ^
security/ai_agents/notification_bot.py:398:1: W293 blank line contains whitespace
        
^
security/ai_agents/notification_bot.py:401:80: E501 line too long (102 > 79 characters)
            type_counts = Counter([n.get('notification_type', 'unknown') for n in user_notifications])
                                                                               ^
security/ai_agents/notification_bot.py:402:80: E501 line too long (87 > 79 characters)
            preferences['preferred_types'] = [t for t, c in type_counts.most_common(3)]
                                                                               ^
security/ai_agents/notification_bot.py:403:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:409:80: E501 line too long (97 > 79 characters)
            preferences['preferred_channels'] = [c for c, count in channel_counts.most_common(3)]
                                                                               ^
security/ai_agents/notification_bot.py:410:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:412:80: E501 line too long (97 > 79 characters)
            hours = [datetime.fromisoformat(n.get('created_at', datetime.now().isoformat())).hour 
                                                                               ^
security/ai_agents/notification_bot.py:412:98: W291 trailing whitespace
            hours = [datetime.fromisoformat(n.get('created_at', datetime.now().isoformat())).hour 
                                                                                                 ^
security/ai_agents/notification_bot.py:413:21: E128 continuation line under-indented for visual indent
                    for n in user_notifications]
                    ^
security/ai_agents/notification_bot.py:415:80: E501 line too long (87 > 79 characters)
            preferences['preferred_times'] = [h for h, c in hour_counts.most_common(3)]
                                                                               ^
security/ai_agents/notification_bot.py:416:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:419:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:422:1: W293 blank line contains whitespace
        
^
security/ai_agents/notification_bot.py:424:1: W293 blank line contains whitespace
    
^
security/ai_agents/notification_bot.py:425:75: W291 trailing whitespace
    def predict_optimal_timing(self, user_id: str, notification_type: str, 
                                                                          ^
security/ai_agents/notification_bot.py:426:30: E128 continuation line under-indented for visual indent
                             priority: str) -> Dict[str, Any]:
                             ^
security/ai_agents/notification_bot.py:429:1: W293 blank line contains whitespace
        """
        Предсказание оптимального времени отправки уведомления
        
        Args:
            user_id: ID пользователя
            notification_type: Тип уведомления
            priority: Приоритет уведомления
            
        Returns:
            Dict с предсказанием оптимального времени
        """
^
security/ai_agents/notification_bot.py:434:1: W293 blank line contains whitespace
        """
        Предсказание оптимального времени отправки уведомления
        
        Args:
            user_id: ID пользователя
            notification_type: Тип уведомления
            priority: Приоритет уведомления
            
        Returns:
            Dict с предсказанием оптимального времени
        """
^
security/ai_agents/notification_bot.py:441:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:446:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:448:80: E501 line too long (80 > 79 characters)
            base_hour = self._get_base_optimal_hour(notification_type, priority)
                                                                               ^
security/ai_agents/notification_bot.py:449:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:457:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:459:80: E501 line too long (80 > 79 characters)
            cluster_adjustment = self._get_cluster_timing_adjustment(cluster_id)
                                                                               ^
security/ai_agents/notification_bot.py:461:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:463:80: E501 line too long (91 > 79 characters)
            confidence = self._calculate_timing_confidence(user_profile, notification_type)
                                                                               ^
security/ai_agents/notification_bot.py:464:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:475:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:479:1: W293 blank line contains whitespace
    
^
security/ai_agents/notification_bot.py:480:80: E501 line too long (83 > 79 characters)
    def _get_base_optimal_hour(self, notification_type: str, priority: str) -> int:
                                                                               ^
security/ai_agents/notification_bot.py:493:1: W293 blank line contains whitespace
    
^
security/ai_agents/notification_bot.py:499:1: W293 blank line contains whitespace
    
^
security/ai_agents/notification_bot.py:500:73: W291 trailing whitespace
    def _calculate_timing_confidence(self, user_profile: Dict[str, Any], 
                                                                        ^
security/ai_agents/notification_bot.py:501:36: E128 continuation line under-indented for visual indent
                                   notification_type: str) -> float:
                                   ^
security/ai_agents/notification_bot.py:505:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:509:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:515:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:517:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:521:1: W293 blank line contains whitespace
    
^
security/ai_agents/notification_bot.py:522:80: E501 line too long (97 > 79 characters)
    def analyze_notification_effectiveness(self, notification: Dict[str, Any]) -> Dict[str, Any]:
                                                                               ^
security/ai_agents/notification_bot.py:525:1: W293 blank line contains whitespace
        """
        Анализ эффективности уведомления
        
        Args:
            notification: Данные уведомления
            
        Returns:
            Dict с анализом эффективности
        """
^
security/ai_agents/notification_bot.py:528:1: W293 blank line contains whitespace
        """
        Анализ эффективности уведомления
        
        Args:
            notification: Данные уведомления
            
        Returns:
            Dict с анализом эффективности
        """
^
security/ai_agents/notification_bot.py:538:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:542:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:551:80: E501 line too long (83 > 79 characters)
                effectiveness['factors'].append("Отправлено в неоптимальное время")
                                                                               ^
security/ai_agents/notification_bot.py:552:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:557:80: E501 line too long (85 > 79 characters)
                effectiveness['factors'].append("Достаточно информативное сообщение")
                                                                               ^
security/ai_agents/notification_bot.py:559:80: E501 line too long (109 > 79 characters)
                effectiveness['factors'].append("Короткое сообщение - может быть недостаточно информативным")
                                                                               ^
security/ai_agents/notification_bot.py:560:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:565:80: E501 line too long (87 > 79 characters)
                effectiveness['factors'].append("Высокий приоритет - быстрое внимание")
                                                                               ^
security/ai_agents/notification_bot.py:569:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:575:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:578:80: E501 line too long (96 > 79 characters)
                effectiveness['recommendations'].append("Рекомендуется улучшить время отправки")
                                                                               ^
security/ai_agents/notification_bot.py:579:80: E501 line too long (92 > 79 characters)
                effectiveness['recommendations'].append("Рассмотрите увеличение приоритета")
                                                                               ^
security/ai_agents/notification_bot.py:580:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:582:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:591:1: W293 blank line contains whitespace
    """
    Продвинутый анализатор уведомлений
    
    Использует комплексные алгоритмы для:
    - Анализа паттернов взаимодействия пользователей
    - Оптимизации контента уведомлений
    - Предсказания отклика пользователей
    - Анализа трендов и аномалий
    """
^
security/ai_agents/notification_bot.py:598:1: W293 blank line contains whitespace
    
^
security/ai_agents/notification_bot.py:604:1: W293 blank line contains whitespace
        
^
security/ai_agents/notification_bot.py:605:80: E501 line too long (107 > 79 characters)
    def analyze_user_engagement_patterns(self, user_notifications: List[Dict[str, Any]]) -> Dict[str, Any]:
                                                                               ^
security/ai_agents/notification_bot.py:608:1: W293 blank line contains whitespace
        """
        Анализ паттернов вовлеченности пользователя
        
        Args:
            user_notifications: Список уведомлений пользователя
            
        Returns:
            Dict с анализом паттернов вовлеченности
        """
^
security/ai_agents/notification_bot.py:611:1: W293 blank line contains whitespace
        """
        Анализ паттернов вовлеченности пользователя
        
        Args:
            user_notifications: Список уведомлений пользователя
            
        Returns:
            Dict с анализом паттернов вовлеченности
        """
^
security/ai_agents/notification_bot.py:618:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:626:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:629:80: E501 line too long (98 > 79 characters)
            read_notifications = len([n for n in user_notifications if n.get('status') == 'read'])
                                                                               ^
security/ai_agents/notification_bot.py:630:80: E501 line too long (114 > 79 characters)
            patterns['response_rate'] = read_notifications / total_notifications if total_notifications > 0 else 0
                                                                               ^
security/ai_agents/notification_bot.py:631:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:637:80: E501 line too long (94 > 79 characters)
            patterns['preferred_channels'] = [c for c, count in channel_counts.most_common(3)]
                                                                               ^
security/ai_agents/notification_bot.py:638:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:646:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:648:80: E501 line too long (84 > 79 characters)
            patterns['preferred_times'] = [h for h, c in hour_counts.most_common(3)]
                                                                               ^
security/ai_agents/notification_bot.py:649:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:651:80: E501 line too long (85 > 79 characters)
            content_lengths = [len(n.get('message', '')) for n in user_notifications]
                                                                               ^
security/ai_agents/notification_bot.py:654:80: E501 line too long (126 > 79 characters)
                'preferred_priority': Counter([n.get('priority', 'normal') for n in user_notifications]).most_common(1)[0][0],
                                                                               ^
security/ai_agents/notification_bot.py:655:80: E501 line too long (131 > 79 characters)
                'preferred_type': Counter([n.get('notification_type', 'unknown') for n in user_notifications]).most_common(1)[0][0]
                                                                               ^
security/ai_agents/notification_bot.py:657:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:661:80: E501 line too long (134 > 79 characters)
                recent_response_rate = len([n for n in recent_notifications if n.get('status') == 'read']) / len(recent_notifications)
                                                                               ^
security/ai_agents/notification_bot.py:662:1: W293 blank line contains whitespace
                
^
security/ai_agents/notification_bot.py:667:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:673:80: E501 line too long (84 > 79 characters)
                (0.8 if patterns['engagement_trend'] == 'increasing' else 0.6) * 0.2
                                                                               ^
security/ai_agents/notification_bot.py:675:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:677:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:679:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:683:1: W293 blank line contains whitespace
    
^
security/ai_agents/notification_bot.py:684:74: W291 trailing whitespace
    def optimize_notification_content(self, notification: Dict[str, Any], 
                                                                         ^
security/ai_agents/notification_bot.py:685:37: E128 continuation line under-indented for visual indent
                                    user_profile: Dict[str, Any]) -> Dict[str, Any]:
                                    ^
security/ai_agents/notification_bot.py:685:80: E501 line too long (84 > 79 characters)
                                    user_profile: Dict[str, Any]) -> Dict[str, Any]:
                                                                               ^
security/ai_agents/notification_bot.py:688:1: W293 blank line contains whitespace
        """
        Оптимизация контента уведомления для пользователя
        
        Args:
            notification: Исходное уведомление
            user_profile: Профиль пользователя
            
        Returns:
            Dict с оптимизированным контентом
        """
^
security/ai_agents/notification_bot.py:692:1: W293 blank line contains whitespace
        """
        Оптимизация контента уведомления для пользователя
        
        Args:
            notification: Исходное уведомление
            user_profile: Профиль пользователя
            
        Returns:
            Dict с оптимизированным контентом
        """
^
security/ai_agents/notification_bot.py:699:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:704:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:708:80: E501 line too long (88 > 79 characters)
                optimized_content = self._expand_content(original_content, notification)
                                                                               ^
security/ai_agents/notification_bot.py:712:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:714:80: E501 line too long (88 > 79 characters)
            preferred_priority = content_preferences.get('preferred_priority', 'normal')
                                                                               ^
security/ai_agents/notification_bot.py:716:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:718:80: E501 line too long (92 > 79 characters)
                optimized_content = self._adjust_tone(optimized_content, preferred_priority)
                                                                               ^
security/ai_agents/notification_bot.py:719:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:721:80: E501 line too long (93 > 79 characters)
            personalized_content = self._add_personalization(optimized_content, user_profile)
                                                                               ^
security/ai_agents/notification_bot.py:722:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:727:80: E501 line too long (101 > 79 characters)
                    'length_adjustment' if len(optimized_content) != len(original_content) else None,
                                                                               ^
security/ai_agents/notification_bot.py:728:80: E501 line too long (90 > 79 characters)
                    'tone_adjustment' if preferred_priority != current_priority else None,
                                                                               ^
security/ai_agents/notification_bot.py:729:80: E501 line too long (92 > 79 characters)
                    'personalization' if personalized_content != optimized_content else None
                                                                               ^
security/ai_agents/notification_bot.py:733:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:736:80: E501 line too long (126 > 79 characters)
            return {'original_content': notification.get('message', ''), 'optimized_content': notification.get('message', '')}
                                                                               ^
security/ai_agents/notification_bot.py:737:1: W293 blank line contains whitespace
    
^
security/ai_agents/notification_bot.py:738:80: E501 line too long (81 > 79 characters)
    def _expand_content(self, content: str, notification: Dict[str, Any]) -> str:
                                                                               ^
security/ai_agents/notification_bot.py:742:1: W293 blank line contains whitespace
        
^
security/ai_agents/notification_bot.py:744:80: E501 line too long (101 > 79 characters)
            return f"🔒 Уведомление о безопасности: {content}. Рекомендуется немедленно принять меры."
                                                                               ^
security/ai_agents/notification_bot.py:746:80: E501 line too long (122 > 79 characters)
            return f"👨‍👩‍👧‍👦 Семейное уведомление: {content}. Свяжитесь с семьей для получения дополнительной информации."
                                                                               ^
security/ai_agents/notification_bot.py:748:80: E501 line too long (92 > 79 characters)
            return f"📢 {content}. Дополнительная информация будет предоставлена по запросу."
                                                                               ^
security/ai_agents/notification_bot.py:749:1: W293 blank line contains whitespace
    
^
security/ai_agents/notification_bot.py:758:1: W293 blank line contains whitespace
    
^
security/ai_agents/notification_bot.py:767:1: W293 blank line contains whitespace
    
^
security/ai_agents/notification_bot.py:768:80: E501 line too long (86 > 79 characters)
    def _add_personalization(self, content: str, user_profile: Dict[str, Any]) -> str:
                                                                               ^
security/ai_agents/notification_bot.py:778:1: W293 blank line contains whitespace
    
^
security/ai_agents/notification_bot.py:779:80: E501 line too long (98 > 79 characters)
    def predict_user_response(self, user_id: str, notification: Dict[str, Any]) -> Dict[str, Any]:
                                                                               ^
security/ai_agents/notification_bot.py:782:1: W293 blank line contains whitespace
        """
        Предсказание отклика пользователя на уведомление
        
        Args:
            user_id: ID пользователя
            notification: Данные уведомления
            
        Returns:
            Dict с предсказанием отклика
        """
^
security/ai_agents/notification_bot.py:786:1: W293 blank line contains whitespace
        """
        Предсказание отклика пользователя на уведомление
        
        Args:
            user_id: ID пользователя
            notification: Данные уведомления
            
        Returns:
            Dict с предсказанием отклика
        """
^
security/ai_agents/notification_bot.py:792:80: E501 line too long (80 > 79 characters)
            notification_type = notification.get('notification_type', 'unknown')
                                                                               ^
security/ai_agents/notification_bot.py:795:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:806:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:808:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:817:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:818:80: E501 line too long (84 > 79 characters)
            probability = base_probability * priority_multipliers.get(priority, 1.0)
                                                                               ^
security/ai_agents/notification_bot.py:819:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:823:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:828:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:831:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:841:80: E501 line too long (87 > 79 characters)
                'recommendations': self._generate_response_recommendations(probability)
                                                                               ^
security/ai_agents/notification_bot.py:843:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:847:1: W293 blank line contains whitespace
    
^
security/ai_agents/notification_bot.py:848:80: E501 line too long (82 > 79 characters)
    def _generate_response_recommendations(self, probability: float) -> List[str]:
                                                                               ^
security/ai_agents/notification_bot.py:851:1: W293 blank line contains whitespace
        
^
security/ai_agents/notification_bot.py:853:80: E501 line too long (90 > 79 characters)
            recommendations.append("Высокая вероятность отклика - уведомление эффективно")
                                                                               ^
security/ai_agents/notification_bot.py:855:80: E501 line too long (84 > 79 characters)
            recommendations.append("Умеренная вероятность отклика - можно улучшить")
                                                                               ^
security/ai_agents/notification_bot.py:862:1: W293 blank line contains whitespace
        
^
security/ai_agents/notification_bot.py:869:1: W293 blank line contains whitespace
    """
    Бот уведомлений с продвинутыми AI возможностями
    
    Основные функции:
    - Умные уведомления с AI-анализом контента
    - Персонализация по пользователям и предпочтениям
    - Интеграция с множественными каналами доставки
    - Приоритизация и оптимизация времени отправки
    - Адаптивные настройки и машинное обучение
    - Продвинутая аналитика и отчетность
    - Система шаблонов и автоматизация
    """
^
security/ai_agents/notification_bot.py:879:1: W293 blank line contains whitespace
    
^
security/ai_agents/notification_bot.py:882:1: W293 blank line contains whitespace
        
^
security/ai_agents/notification_bot.py:888:1: W293 blank line contains whitespace
        
^
security/ai_agents/notification_bot.py:895:1: W293 blank line contains whitespace
        
^
security/ai_agents/notification_bot.py:910:1: W293 blank line contains whitespace
        
^
security/ai_agents/notification_bot.py:925:1: W293 blank line contains whitespace
        
^
security/ai_agents/notification_bot.py:929:1: W293 blank line contains whitespace
        
^
security/ai_agents/notification_bot.py:930:80: E501 line too long (101 > 79 characters)
        self.logger.info(f"NotificationBot '{name}' инициализирован с продвинутыми AI возможностями")
                                                                               ^
security/ai_agents/notification_bot.py:931:1: W293 blank line contains whitespace
    
^
security/ai_agents/notification_bot.py:936:80: E501 line too long (94 > 79 characters)
            self.analysis_thread = threading.Thread(target=self._analysis_worker, daemon=True)
                                                                               ^
security/ai_agents/notification_bot.py:941:1: W293 blank line contains whitespace
    
^
security/ai_agents/notification_bot.py:956:1: W293 blank line contains whitespace
    
^
security/ai_agents/notification_bot.py:957:80: E501 line too long (88 > 79 characters)
    def _analyze_notification_advanced(self, notification_data: Dict[str, Any]) -> None:
                                                                               ^
security/ai_agents/notification_bot.py:963:80: E501 line too long (103 > 79 characters)
            self.logger.debug(f"Анализ уведомления завершен: {notification_data.get('id', 'unknown')}")
                                                                               ^
security/ai_agents/notification_bot.py:966:1: W293 blank line contains whitespace
    
^
security/ai_agents/notification_bot.py:976:80: E501 line too long (115 > 79 characters)
                message_template="Обнаружена угроза: {threat_description}\nВремя: {timestamp}\nДействие: {action}",
                                                                               ^
security/ai_agents/notification_bot.py:979:80: E501 line too long (85 > 79 characters)
                variables=["alert_type", "threat_description", "timestamp", "action"]
                                                                               ^
security/ai_agents/notification_bot.py:981:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:988:80: E501 line too long (111 > 79 characters)
                message_template="Событие в семье: {description}\nУчастник: {member_name}\nВремя: {timestamp}",
                                                                               ^
security/ai_agents/notification_bot.py:989:80: E501 line too long (82 > 79 characters)
                channels=[NotificationChannel.PUSH, NotificationChannel.TELEGRAM],
                                                                               ^
security/ai_agents/notification_bot.py:991:80: E501 line too long (85 > 79 characters)
                variables=["family_event", "description", "member_name", "timestamp"]
                                                                               ^
security/ai_agents/notification_bot.py:993:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:1000:80: E501 line too long (116 > 79 characters)
                message_template="Тип: {emergency_type}\nМесто: {location}\nВремя: {timestamp}\nДействие: {action}",
                                                                               ^
security/ai_agents/notification_bot.py:1001:80: E501 line too long (107 > 79 characters)
                channels=[NotificationChannel.PUSH, NotificationChannel.SMS, NotificationChannel.TELEGRAM],
                                                                               ^
security/ai_agents/notification_bot.py:1005:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:1009:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:1011:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:1014:1: W293 blank line contains whitespace
    
^
security/ai_agents/notification_bot.py:1020:80: E501 line too long (85 > 79 characters)
            self.logger.info(f"Добавлены настройки пользователя: {settings.user_id}")
                                                                               ^
security/ai_agents/notification_bot.py:1025:1: W293 blank line contains whitespace
    
^
security/ai_agents/notification_bot.py:1032:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:1036:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:1040:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:1044:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:1047:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:1048:80: E501 line too long (84 > 79 characters)
            self.logger.info(f"Создано уведомление: {notification.notification_id}")
                                                                               ^
security/ai_agents/notification_bot.py:1050:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:1054:1: W293 blank line contains whitespace
    
^
security/ai_agents/notification_bot.py:1055:80: E501 line too long (113 > 79 characters)
    def send_notification_from_template(self, template_id: str, user_id: str, variables: Dict[str, str]) -> bool:
                                                                               ^
security/ai_agents/notification_bot.py:1060:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:1062:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:1066:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:1078:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:1080:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:1084:1: W293 blank line contains whitespace
    
^
security/ai_agents/notification_bot.py:1085:80: E501 line too long (90 > 79 characters)
    def get_user_notifications(self, user_id: str, limit: int = 50) -> List[Notification]:
                                                                               ^
security/ai_agents/notification_bot.py:1092:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:1096:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:1100:1: W293 blank line contains whitespace
    
^
security/ai_agents/notification_bot.py:1115:1: W293 blank line contains whitespace
    
^
security/ai_agents/notification_bot.py:1122:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:1125:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:1139:1: W293 blank line contains whitespace
    
^
security/ai_agents/notification_bot.py:1140:80: E501 line too long (80 > 79 characters)
    def _analyze_notification_content(self, notification: Notification) -> None:
                                                                               ^
security/ai_agents/notification_bot.py:1145:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:1147:80: E501 line too long (103 > 79 characters)
            if any(word in content_lower for word in ['критично', 'срочно', 'экстренно', 'опасность']):
                                                                               ^
security/ai_agents/notification_bot.py:1149:80: E501 line too long (96 > 79 characters)
            elif any(word in content_lower for word in ['важно', 'внимание', 'предупреждение']):
                                                                               ^
security/ai_agents/notification_bot.py:1151:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:1153:80: E501 line too long (90 > 79 characters)
            if any(word in content_lower for word in ['безопасность', 'угроза', 'атака']):
                                                                               ^
security/ai_agents/notification_bot.py:1155:80: E501 line too long (89 > 79 characters)
            elif any(word in content_lower for word in ['семья', 'ребенок', 'родитель']):
                                                                               ^
security/ai_agents/notification_bot.py:1157:80: E501 line too long (91 > 79 characters)
            elif any(word in content_lower for word in ['экстренно', 'помощь', 'спасите']):
                                                                               ^
security/ai_agents/notification_bot.py:1159:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:1162:1: W293 blank line contains whitespace
    
^
security/ai_agents/notification_bot.py:1168:1: W293 blank line contains whitespace
                
^
security/ai_agents/notification_bot.py:1170:80: E501 line too long (119 > 79 characters)
                if settings.preferences.get(notification.notification_type, UserPreference.ALL) == UserPreference.NONE:
                                                                               ^
security/ai_agents/notification_bot.py:1173:1: W293 blank line contains whitespace
                
^
security/ai_agents/notification_bot.py:1180:1: W293 blank line contains whitespace
                
^
security/ai_agents/notification_bot.py:1183:80: E501 line too long (101 > 79 characters)
                if settings.quiet_hours[0] <= current_hour or current_hour < settings.quiet_hours[1]:
                                                                               ^
security/ai_agents/notification_bot.py:1184:80: E501 line too long (113 > 79 characters)
                    if notification.priority not in [NotificationPriority.CRITICAL, NotificationPriority.URGENT]:
                                                                               ^
security/ai_agents/notification_bot.py:1187:80: E501 line too long (114 > 79 characters)
                        notification.metadata['scheduled_for'] = (datetime.now() + timedelta(hours=8)).isoformat()
                                                                               ^
security/ai_agents/notification_bot.py:1188:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:1191:1: W293 blank line contains whitespace
    
^
security/ai_agents/notification_bot.py:1197:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:1199:80: E501 line too long (101 > 79 characters)
            if notification.priority in [NotificationPriority.CRITICAL, NotificationPriority.URGENT]:
                                                                               ^
security/ai_agents/notification_bot.py:1201:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:1204:80: E501 line too long (104 > 79 characters)
                notification.metadata['scheduled_for'] = (current_time + timedelta(hours=1)).isoformat()
                                                                               ^
security/ai_agents/notification_bot.py:1205:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:1208:1: W293 blank line contains whitespace
    
^
security/ai_agents/notification_bot.py:1220:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:1223:1: W293 blank line contains whitespace
    
^
security/ai_agents/notification_bot.py:1224:80: E501 line too long (97 > 79 characters)
    def _send_to_channel(self, notification: Notification, channel: NotificationChannel) -> bool:
                                                                               ^
security/ai_agents/notification_bot.py:1240:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:1242:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:1246:1: W293 blank line contains whitespace
    
^
security/ai_agents/notification_bot.py:1257:1: W293 blank line contains whitespace
    
^
security/ai_agents/notification_bot.py:1267:80: E501 line too long (107 > 79 characters)
                'last_notification': max([n.created_at for n in self.notifications.values()], default=None)
                                                                               ^
security/ai_agents/notification_bot.py:1272:1: W293 blank line contains whitespace
    
^
security/ai_agents/notification_bot.py:1273:80: E501 line too long (100 > 79 characters)
    def search_notifications(self, query: str, user_id: Optional[str] = None) -> List[Notification]:
                                                                               ^
security/ai_agents/notification_bot.py:1278:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:1282:1: W293 blank line contains whitespace
                
^
security/ai_agents/notification_bot.py:1283:65: W291 trailing whitespace
                if (query_lower in notification.title.lower() or 
                                                                ^
security/ai_agents/notification_bot.py:1284:21: E129 visually indented line with same indent as next logical line
                    query_lower in notification.message.lower()):
                    ^
security/ai_agents/notification_bot.py:1286:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:1291:1: W293 blank line contains whitespace
    
^
security/ai_agents/notification_bot.py:1292:80: E501 line too long (88 > 79 characters)
    def get_user_engagement_stats(self, user_id: str, days: int = 30) -> Dict[str, Any]:
                                                                               ^
security/ai_agents/notification_bot.py:1297:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:1299:56: W291 trailing whitespace
                if (notification.user_id == user_id and 
                                                       ^
security/ai_agents/notification_bot.py:1300:5: E129 visually indented line with same indent as next logical line
                    notification.created_at >= cutoff_date):
    ^
security/ai_agents/notification_bot.py:1302:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:1308:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:1313:80: E501 line too long (90 > 79 characters)
                    channel_stats[channel.value] = channel_stats.get(channel.value, 0) + 1
                                                                               ^
security/ai_agents/notification_bot.py:1314:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:1320:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:1326:80: E501 line too long (102 > 79 characters)
                    response_time = (notification.read_at - notification.sent_at).total_seconds() / 60
                                                                               ^
security/ai_agents/notification_bot.py:1328:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:1329:80: E501 line too long (98 > 79 characters)
            avg_response_time = sum(response_times) / len(response_times) if response_times else 0
                                                                               ^
security/ai_agents/notification_bot.py:1330:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:1334:80: E501 line too long (93 > 79 characters)
                'read_rate': len(read_notifications) / max(len(user_notifications), 1) * 100,
                                                                               ^
security/ai_agents/notification_bot.py:1339:80: E501 line too long (116 > 79 characters)
                'most_active_channel': max(channel_stats.items(), key=lambda x: x[1])[0] if channel_stats else None,
                                                                               ^
security/ai_agents/notification_bot.py:1340:80: E501 line too long (106 > 79 characters)
                'most_common_type': max(type_stats.items(), key=lambda x: x[1])[0] if type_stats else None
                                                                               ^
security/ai_agents/notification_bot.py:1343:80: E501 line too long (80 > 79 characters)
            self.logger.error(f"Ошибка получения статистики вовлеченности: {e}")
                                                                               ^
security/ai_agents/notification_bot.py:1345:1: W293 blank line contains whitespace
    
^
security/ai_agents/notification_bot.py:1350:80: E501 line too long (87 > 79 characters)
            self.logger.info(f"Создан пользовательский шаблон: {template.template_id}")
                                                                               ^
security/ai_agents/notification_bot.py:1355:1: W293 blank line contains whitespace
    
^
security/ai_agents/notification_bot.py:1367:1: W293 blank line contains whitespace
    
^
security/ai_agents/notification_bot.py:1368:80: E501 line too long (91 > 79 characters)
    def bulk_send_notifications(self, notifications: List[Notification]) -> Dict[str, int]:
                                                                               ^
security/ai_agents/notification_bot.py:1376:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:1382:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:1383:80: E501 line too long (106 > 79 characters)
            self.logger.info(f"Массовая отправка завершена: {results['sent']}/{results['total']} успешно")
                                                                               ^
security/ai_agents/notification_bot.py:1388:1: W293 blank line contains whitespace
    
^
security/ai_agents/notification_bot.py:1389:80: E501 line too long (99 > 79 characters)
    def export_notification_data(self, user_id: Optional[str] = None, format: str = 'json') -> str:
                                                                               ^
security/ai_agents/notification_bot.py:1393:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:1397:1: W293 blank line contains whitespace
                
^
security/ai_agents/notification_bot.py:1408:80: E501 line too long (98 > 79 characters)
                    'sent_at': notification.sent_at.isoformat() if notification.sent_at else None,
                                                                               ^
security/ai_agents/notification_bot.py:1409:80: E501 line too long (98 > 79 characters)
                    'read_at': notification.read_at.isoformat() if notification.read_at else None,
                                                                               ^
security/ai_agents/notification_bot.py:1412:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:1429:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:1437:1: W293 blank line contains whitespace
    
^
security/ai_agents/notification_bot.py:1442:80: E501 line too long (106 > 79 characters)
            recent_notifications = [n for n in self.notifications.values() if n.created_at >= cutoff_date]
                                                                               ^
security/ai_agents/notification_bot.py:1443:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:1455:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:1460:1: W293 blank line contains whitespace
                
^
security/ai_agents/notification_bot.py:1462:80: E501 line too long (92 > 79 characters)
                report['by_priority'][priority] = report['by_priority'].get(priority, 0) + 1
                                                                               ^
security/ai_agents/notification_bot.py:1463:1: W293 blank line contains whitespace
                
^
security/ai_agents/notification_bot.py:1467:80: E501 line too long (102 > 79 characters)
                    report['by_channel'][channel_name] = report['by_channel'].get(channel_name, 0) + 1
                                                                               ^
security/ai_agents/notification_bot.py:1468:1: W293 blank line contains whitespace
                
^
security/ai_agents/notification_bot.py:1471:80: E501 line too long (86 > 79 characters)
                report['top_users'][user_id] = report['top_users'].get(user_id, 0) + 1
                                                                               ^
security/ai_agents/notification_bot.py:1472:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:1474:80: E501 line too long (158 > 79 characters)
            delivered = len([n for n in recent_notifications if n.status in [NotificationStatus.SENT, NotificationStatus.DELIVERED, NotificationStatus.READ]])
                                                                               ^
security/ai_agents/notification_bot.py:1475:80: E501 line too long (96 > 79 characters)
            read = len([n for n in recent_notifications if n.status == NotificationStatus.READ])
                                                                               ^
security/ai_agents/notification_bot.py:1476:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:1478:80: E501 line too long (87 > 79 characters)
                report['delivery_rate'] = (delivered / len(recent_notifications)) * 100
                                                                               ^
security/ai_agents/notification_bot.py:1480:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:1483:80: E501 line too long (105 > 79 characters)
                report['recommendations'].append("Низкий процент доставки - проверьте настройки каналов")
                                                                               ^
security/ai_agents/notification_bot.py:1484:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:1486:80: E501 line too long (117 > 79 characters)
                report['recommendations'].append("Низкий процент прочтения - оптимизируйте контент и время отправки")
                                                                               ^
security/ai_agents/notification_bot.py:1487:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:1492:1: W293 blank line contains whitespace
    
^
security/ai_agents/notification_bot.py:1504:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:1509:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:1514:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:1522:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:1523:80: E501 line too long (94 > 79 characters)
            if self.send_notification_from_template('security_alert', 'test_user', test_vars):
                                                                               ^
security/ai_agents/notification_bot.py:1526:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:1536:1: W293 blank line contains whitespace
    
^
security/ai_agents/notification_bot.py:1540:80: E501 line too long (82 > 79 characters)
        return f"notif_{int(time.time() * 1000)}_{hash(str(time.time())) % 10000}"
                                                                               ^
security/ai_agents/notification_bot.py:1541:1: W293 blank line contains whitespace
    
^
security/ai_agents/notification_bot.py:1545:80: E501 line too long (108 > 79 characters)
        return f"[{notification.created_at.strftime('%H:%M')}] {notification.title}: {notification.message}"
                                                                               ^
security/ai_agents/notification_bot.py:1546:1: W293 blank line contains whitespace
    
^
security/ai_agents/notification_bot.py:1550:80: E501 line too long (100 > 79 characters)
        return notification.priority in [NotificationPriority.URGENT, NotificationPriority.CRITICAL]
                                                                               ^
security/ai_agents/notification_bot.py:1555:1: W293 blank line contains whitespace
    
^
security/ai_agents/notification_bot.py:1558:1: W293 blank line contains whitespace
    
^
security/ai_agents/notification_bot.py:1559:80: E501 line too long (93 > 79 characters)
    def schedule_notification(self, notification: Notification, send_time: datetime) -> bool:
                                                                               ^
security/ai_agents/notification_bot.py:1569:1: W293 blank line contains whitespace
    
^
security/ai_agents/notification_bot.py:1575:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:1577:74: W291 trailing whitespace
                if (notification.status == NotificationStatus.PENDING and 
                                                                         ^
security/ai_agents/notification_bot.py:1578:5: E129 visually indented line with same indent as next logical line
                    'scheduled_for' in notification.metadata):
    ^
security/ai_agents/notification_bot.py:1579:1: W293 blank line contains whitespace
                    
^
security/ai_agents/notification_bot.py:1580:80: E501 line too long (99 > 79 characters)
                    scheduled_time = datetime.fromisoformat(notification.metadata['scheduled_for'])
                                                                               ^
security/ai_agents/notification_bot.py:1584:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:1594:1: W293 blank line contains whitespace
    
^
security/ai_agents/notification_bot.py:1611:1: W293 blank line contains whitespace
    
^
security/ai_agents/notification_bot.py:1613:1: W293 blank line contains whitespace
    
^
security/ai_agents/notification_bot.py:1621:1: W293 blank line contains whitespace
    
^
security/ai_agents/notification_bot.py:1623:1: W293 blank line contains whitespace
    
^
security/ai_agents/notification_bot.py:1627:1: W293 blank line contains whitespace
    
^
security/ai_agents/notification_bot.py:1636:80: E501 line too long (90 > 79 characters)
        self.analysis_thread = threading.Thread(target=self._analysis_worker, daemon=True)
                                                                               ^
security/ai_agents/notification_bot.py:1642:1: E302 expected 2 blank lines, found 1
def _analysis_worker(self) -> None:
^
security/ai_agents/notification_bot.py:1657:1: E302 expected 2 blank lines, found 1
def _analyze_notification_advanced(self, notification_data: Dict[str, Any]) -> None:
^
security/ai_agents/notification_bot.py:1657:80: E501 line too long (84 > 79 characters)
def _analyze_notification_advanced(self, notification_data: Dict[str, Any]) -> None:
                                                                               ^
security/ai_agents/notification_bot.py:1660:1: W293 blank line contains whitespace
    """
    Продвинутый анализ уведомления с использованием ML
    
    Args:
        notification_data: Данные уведомления
    """
^
security/ai_agents/notification_bot.py:1667:80: E501 line too long (98 > 79 characters)
            effectiveness = self.ml_analyzer.analyze_notification_effectiveness(notification_data)
                                                                               ^
security/ai_agents/notification_bot.py:1670:1: W293 blank line contains whitespace
        
^
security/ai_agents/notification_bot.py:1676:80: E501 line too long (84 > 79 characters)
                optimization = self.advanced_analyzer.optimize_notification_content(
                                                                               ^
security/ai_agents/notification_bot.py:1681:1: W293 blank line contains whitespace
        
^
security/ai_agents/notification_bot.py:1685:80: E501 line too long (85 > 79 characters)
            notification_type = notification_data.get('notification_type', 'unknown')
                                                                               ^
security/ai_agents/notification_bot.py:1687:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:1693:1: W293 blank line contains whitespace
        
^
security/ai_agents/notification_bot.py:1696:1: W293 blank line contains whitespace
        
^
security/ai_agents/notification_bot.py:1700:1: E302 expected 2 blank lines, found 1
def _get_user_profile(self, user_id: str) -> Dict[str, Any]:
^
security/ai_agents/notification_bot.py:1705:1: W293 blank line contains whitespace
        
^
security/ai_agents/notification_bot.py:1707:80: E501 line too long (93 > 79 characters)
        user_notifications = [n for n in self.notifications.values() if n.user_id == user_id]
                                                                               ^
security/ai_agents/notification_bot.py:1709:80: E501 line too long (90 > 79 characters)
            engagement_patterns = self.advanced_analyzer.analyze_user_engagement_patterns(
                                                                               ^
security/ai_agents/notification_bot.py:1715:80: E501 line too long (82 > 79 characters)
                'activity_level': engagement_patterns.get('engagement_score', 0.5)
                                                                               ^
security/ai_agents/notification_bot.py:1717:1: W293 blank line contains whitespace
        
^
security/ai_agents/notification_bot.py:1719:1: W293 blank line contains whitespace
        
^
security/ai_agents/notification_bot.py:1724:1: E302 expected 2 blank lines, found 1
def _notification_to_dict(self, notification: Notification) -> Dict[str, Any]:
^
security/ai_agents/notification_bot.py:1735:80: E501 line too long (101 > 79 characters)
        'delivered_at': notification.delivered_at.isoformat() if notification.delivered_at else None,
                                                                               ^
security/ai_agents/notification_bot.py:1736:80: E501 line too long (85 > 79 characters)
        'read_at': notification.read_at.isoformat() if notification.read_at else None
                                                                               ^
security/ai_agents/notification_bot.py:1739:1: E302 expected 2 blank lines, found 1
def train_ml_models(self) -> bool:
^
security/ai_agents/notification_bot.py:1742:1: W293 blank line contains whitespace
    """
    Обучение ML моделей на исторических данных уведомлений
    
    Returns:
        bool: True если обучение успешно
    """
^
security/ai_agents/notification_bot.py:1750:1: W293 blank line contains whitespace
        
^
security/ai_agents/notification_bot.py:1756:1: W293 blank line contains whitespace
        
^
security/ai_agents/notification_bot.py:1759:1: W293 blank line contains whitespace
        
^
security/ai_agents/notification_bot.py:1766:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:1771:1: E302 expected 2 blank lines, found 1
def get_advanced_analytics(self) -> Dict[str, Any]:
^
security/ai_agents/notification_bot.py:1774:1: W293 blank line contains whitespace
    """
    Получение продвинутой аналитики уведомлений
    
    Returns:
        Dict с детальной аналитикой
    """
^
security/ai_agents/notification_bot.py:1788:1: W293 blank line contains whitespace
        
^
security/ai_agents/notification_bot.py:1793:1: W293 blank line contains whitespace
        
^
security/ai_agents/notification_bot.py:1798:1: W293 blank line contains whitespace
        
^
security/ai_agents/notification_bot.py:1802:1: W293 blank line contains whitespace
        
^
security/ai_agents/notification_bot.py:1804:1: W293 blank line contains whitespace
        
^
security/ai_agents/notification_bot.py:1809:1: E302 expected 2 blank lines, found 1
def _analyze_user_engagement(self) -> Dict[str, Any]:
^
security/ai_agents/notification_bot.py:1813:80: E501 line too long (84 > 79 characters)
            'total_users': len(set(n.user_id for n in self.notifications.values())),
                                                                               ^
security/ai_agents/notification_bot.py:1819:1: W293 blank line contains whitespace
        
^
security/ai_agents/notification_bot.py:1824:1: W293 blank line contains whitespace
        
^
security/ai_agents/notification_bot.py:1828:80: E501 line too long (82 > 79 characters)
                user_data = [self._notification_to_dict(n) for n in notifications]
                                                                               ^
security/ai_agents/notification_bot.py:1829:80: E501 line too long (93 > 79 characters)
                patterns = self.advanced_analyzer.analyze_user_engagement_patterns(user_data)
                                                                               ^
security/ai_agents/notification_bot.py:1831:1: W293 blank line contains whitespace
                
^
security/ai_agents/notification_bot.py:1834:1: W293 blank line contains whitespace
        
^
security/ai_agents/notification_bot.py:1841:1: W293 blank line contains whitespace
        
^
security/ai_agents/notification_bot.py:1844:80: E501 line too long (85 > 79 characters)
                'response_rate': sum(responses) / len(responses) if responses else 0,
                                                                               ^
security/ai_agents/notification_bot.py:1847:1: W293 blank line contains whitespace
        
^
security/ai_agents/notification_bot.py:1855:1: W293 blank line contains whitespace
        
^
security/ai_agents/notification_bot.py:1858:80: E501 line too long (85 > 79 characters)
                'response_rate': sum(responses) / len(responses) if responses else 0,
                                                                               ^
security/ai_agents/notification_bot.py:1861:1: W293 blank line contains whitespace
        
^
security/ai_agents/notification_bot.py:1864:80: E501 line too long (90 > 79 characters)
            user_engagement['avg_engagement_score'] = round(np.mean(engagement_scores), 3)
                                                                               ^
security/ai_agents/notification_bot.py:1865:1: W293 blank line contains whitespace
        
^
security/ai_agents/notification_bot.py:1867:1: W293 blank line contains whitespace
        
^
security/ai_agents/notification_bot.py:1872:1: E302 expected 2 blank lines, found 1
def _analyze_content_effectiveness(self) -> Dict[str, Any]:
^
security/ai_agents/notification_bot.py:1882:1: W293 blank line contains whitespace
        
^
security/ai_agents/notification_bot.py:1887:1: W293 blank line contains whitespace
        
^
security/ai_agents/notification_bot.py:1890:80: E501 line too long (98 > 79 characters)
            effectiveness = self.ml_analyzer.analyze_notification_effectiveness(notification_dict)
                                                                               ^
security/ai_agents/notification_bot.py:1893:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:1902:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:1905:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:1908:1: W293 blank line contains whitespace
        
^
security/ai_agents/notification_bot.py:1911:80: E501 line too long (99 > 79 characters)
            effectiveness_data['avg_effectiveness_score'] = round(np.mean(effectiveness_scores), 3)
                                                                               ^
security/ai_agents/notification_bot.py:1912:1: W293 blank line contains whitespace
        
^
security/ai_agents/notification_bot.py:1920:1: W293 blank line contains whitespace
        
^
security/ai_agents/notification_bot.py:1928:1: W293 blank line contains whitespace
        
^
security/ai_agents/notification_bot.py:1932:80: E501 line too long (82 > 79 characters)
                effectiveness_data['effectiveness_by_type'][notification_type] = {
                                                                               ^
security/ai_agents/notification_bot.py:1936:1: W293 blank line contains whitespace
        
^
security/ai_agents/notification_bot.py:1939:80: E501 line too long (110 > 79 characters)
            effectiveness_data['recommendations'].append("Общая эффективность низкая - требуется оптимизация")
                                                                               ^
security/ai_agents/notification_bot.py:1940:1: W293 blank line contains whitespace
        
^
security/ai_agents/notification_bot.py:1943:80: E501 line too long (93 > 79 characters)
            short_score = effectiveness_data['effectiveness_by_length']['short']['avg_score']
                                                                               ^
security/ai_agents/notification_bot.py:1945:80: E501 line too long (113 > 79 characters)
                effectiveness_data['recommendations'].append("Короткие сообщения неэффективны - добавьте детали")
                                                                               ^
security/ai_agents/notification_bot.py:1946:1: W293 blank line contains whitespace
        
^
security/ai_agents/notification_bot.py:1948:1: W293 blank line contains whitespace
        
^
security/ai_agents/notification_bot.py:1953:1: E302 expected 2 blank lines, found 1
def _analyze_notification_trends(self) -> Dict[str, Any]:
^
security/ai_agents/notification_bot.py:1963:1: W293 blank line contains whitespace
        
^
security/ai_agents/notification_bot.py:1967:80: E501 line too long (80 > 79 characters)
            trends['daily_distribution'][notification.created_at.weekday()] += 1
                                                                               ^
security/ai_agents/notification_bot.py:1970:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot.py:1973:1: W293 blank line contains whitespace
        
^
security/ai_agents/notification_bot.py:1980:1: W293 blank line contains whitespace
        
^
security/ai_agents/notification_bot.py:1983:80: E501 line too long (86 > 79 characters)
            peak_hour = max(trends['hourly_distribution'].items(), key=lambda x: x[1])
                                                                               ^
security/ai_agents/notification_bot.py:1986:1: W293 blank line contains whitespace
        
^
security/ai_agents/notification_bot.py:1989:80: E501 line too long (81 > 79 characters)
            popular_type = max(trends['type_trends'].items(), key=lambda x: x[1])
                                                                               ^
security/ai_agents/notification_bot.py:1992:1: W293 blank line contains whitespace
        
^
security/ai_agents/notification_bot.py:1994:1: W293 blank line contains whitespace
        
^
security/ai_agents/notification_bot.py:1999:1: E302 expected 2 blank lines, found 1
def predict_user_response(self, user_id: str, notification: Dict[str, Any]) -> Dict[str, Any]:
^
security/ai_agents/notification_bot.py:1999:80: E501 line too long (94 > 79 characters)
def predict_user_response(self, user_id: str, notification: Dict[str, Any]) -> Dict[str, Any]:
                                                                               ^
security/ai_agents/notification_bot.py:2002:1: W293 blank line contains whitespace
    """
    Предсказание отклика пользователя на уведомление
    
    Args:
        user_id: ID пользователя
        notification: Данные уведомления
        
    Returns:
        Dict с предсказанием отклика
    """
^
security/ai_agents/notification_bot.py:2006:1: W293 blank line contains whitespace
    """
    Предсказание отклика пользователя на уведомление
    
    Args:
        user_id: ID пользователя
        notification: Данные уведомления
        
    Returns:
        Dict с предсказанием отклика
    """
^
security/ai_agents/notification_bot.py:2013:1: W293 blank line contains whitespace
        
^
security/ai_agents/notification_bot.py:2015:80: E501 line too long (88 > 79 characters)
        prediction = self.advanced_analyzer.predict_user_response(user_id, notification)
                                                                               ^
security/ai_agents/notification_bot.py:2016:1: W293 blank line contains whitespace
        
^
security/ai_agents/notification_bot.py:2019:1: W293 blank line contains whitespace
        
^
security/ai_agents/notification_bot.py:2021:1: W293 blank line contains whitespace
        
^
security/ai_agents/notification_bot.py:2026:1: E302 expected 2 blank lines, found 1
def optimize_notification_timing(self, user_id: str, notification_type: str, 
^
security/ai_agents/notification_bot.py:2026:77: W291 trailing whitespace
def optimize_notification_timing(self, user_id: str, notification_type: str, 
                                                                            ^
security/ai_agents/notification_bot.py:2027:32: E128 continuation line under-indented for visual indent
                               priority: str) -> Dict[str, Any]:
                               ^
security/ai_agents/notification_bot.py:2030:1: W293 blank line contains whitespace
    """
    Оптимизация времени отправки уведомления
    
    Args:
        user_id: ID пользователя
        notification_type: Тип уведомления
        priority: Приоритет уведомления
        
    Returns:
        Dict с рекомендациями по времени
    """
^
security/ai_agents/notification_bot.py:2035:1: W293 blank line contains whitespace
    """
    Оптимизация времени отправки уведомления
    
    Args:
        user_id: ID пользователя
        notification_type: Тип уведомления
        priority: Приоритет уведомления
        
    Returns:
        Dict с рекомендациями по времени
    """
^
security/ai_agents/notification_bot.py:2042:1: W293 blank line contains whitespace
        
^
security/ai_agents/notification_bot.py:2047:1: W293 blank line contains whitespace
        
^
security/ai_agents/notification_bot.py:2049:80: E501 line too long (82 > 79 characters)
        recommendations = self._generate_timing_recommendations(timing_prediction)
                                                                               ^
security/ai_agents/notification_bot.py:2051:1: W293 blank line contains whitespace
        
^
security/ai_agents/notification_bot.py:2054:1: W293 blank line contains whitespace
        
^
security/ai_agents/notification_bot.py:2056:1: W293 blank line contains whitespace
        
^
security/ai_agents/notification_bot.py:2061:1: E302 expected 2 blank lines, found 1
def _generate_timing_recommendations(self, timing_prediction: Dict[str, Any]) -> List[str]:
^
security/ai_agents/notification_bot.py:2061:80: E501 line too long (91 > 79 characters)
def _generate_timing_recommendations(self, timing_prediction: Dict[str, Any]) -> List[str]:
                                                                               ^
security/ai_agents/notification_bot.py:2064:1: W293 blank line contains whitespace
    
^
security/ai_agents/notification_bot.py:2067:1: W293 blank line contains whitespace
    
^
security/ai_agents/notification_bot.py:2069:80: E501 line too long (93 > 79 characters)
        recommendations.append(f"Оптимальное время: {optimal_hour}:00 (высокая уверенность)")
                                                                               ^
security/ai_agents/notification_bot.py:2071:80: E501 line too long (97 > 79 characters)
        recommendations.append(f"Рекомендуемое время: {optimal_hour}:00 (умеренная уверенность)")
                                                                               ^
security/ai_agents/notification_bot.py:2073:80: E501 line too long (93 > 79 characters)
        recommendations.append(f"Предлагаемое время: {optimal_hour}:00 (низкая уверенность)")
                                                                               ^
security/ai_agents/notification_bot.py:2074:1: W293 blank line contains whitespace
    
^
security/ai_agents/notification_bot.py:2077:80: E501 line too long (87 > 79 characters)
        recommendations.append("Утреннее время - хорошее время для важных уведомлений")
                                                                               ^
security/ai_agents/notification_bot.py:2079:80: E501 line too long (84 > 79 characters)
        recommendations.append("Рабочее время - оптимально для деловых уведомлений")
                                                                               ^
security/ai_agents/notification_bot.py:2081:80: E501 line too long (82 > 79 characters)
        recommendations.append("Вечернее время - подходит для личных уведомлений")
                                                                               ^
security/ai_agents/notification_bot.py:2083:80: E501 line too long (95 > 79 characters)
        recommendations.append("Ночное время - используйте только для критических уведомлений")
                                                                               ^
security/ai_agents/notification_bot.py:2084:1: W293 blank line contains whitespace
    
^
security/ai_agents/notification_bot.py:2085:27: W292 no newline at end of file
    return recommendations                          ^
security/ai_agents/notification_bot_main.py:7:1: F401 'numpy as np' imported but unused
import numpy as np
^
security/ai_agents/notification_bot_main.py:9:1: F401 'time' imported but unused
import time
^
security/ai_agents/notification_bot_main.py:16:1: E302 expected 2 blank lines, found 1
class NotificationChannel(Enum):
^
security/ai_agents/notification_bot_main.py:27:1: E302 expected 2 blank lines, found 1
class NotificationPriority(Enum):
^
security/ai_agents/notification_bot_main.py:34:1: E302 expected 2 blank lines, found 1
@dataclass
^
security/ai_agents/notification_bot_main.py:46:1: W293 blank line contains whitespace
    
^
security/ai_agents/notification_bot_main.py:51:1: E302 expected 2 blank lines, found 1
class NotificationBotMain:
^
security/ai_agents/notification_bot_main.py:53:1: W293 blank line contains whitespace
    
^
security/ai_agents/notification_bot_main.py:68:1: W293 blank line contains whitespace
    
^
security/ai_agents/notification_bot_main.py:76:80: E501 line too long (81 > 79 characters)
                NotificationChannel.TELEGRAM: self._handle_telegram_notification,
                                                                               ^
security/ai_agents/notification_bot_main.py:77:80: E501 line too long (81 > 79 characters)
                NotificationChannel.WHATSAPP: self._handle_whatsapp_notification,
                                                                               ^
security/ai_agents/notification_bot_main.py:84:80: E501 line too long (80 > 79 characters)
            self.logger.error(f"Ошибка инициализации обработчиков каналов: {e}")
                                                                               ^
security/ai_agents/notification_bot_main.py:85:1: W293 blank line contains whitespace
    
^
security/ai_agents/notification_bot_main.py:92:1: W293 blank line contains whitespace
                
^
security/ai_agents/notification_bot_main.py:95:1: W293 blank line contains whitespace
                
^
security/ai_agents/notification_bot_main.py:98:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot_main.py:99:80: E501 line too long (82 > 79 characters)
            self.logger.info(f"Уведомление {notification.id} добавлено в очередь")
                                                                               ^
security/ai_agents/notification_bot_main.py:101:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot_main.py:105:1: W293 blank line contains whitespace
    
^
security/ai_agents/notification_bot_main.py:110:80: E501 line too long (90 > 79 characters)
            if notification.scheduled_for and notification.scheduled_for > datetime.now():
                                                                               ^
security/ai_agents/notification_bot_main.py:112:80: E501 line too long (112 > 79 characters)
                self.logger.info(f"Уведомление {notification.id} запланировано на {notification.scheduled_for}")
                                                                               ^
security/ai_agents/notification_bot_main.py:114:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot_main.py:117:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot_main.py:119:80: E501 line too long (106 > 79 characters)
            if self._is_quiet_time(user_prefs) and notification.priority != NotificationPriority.CRITICAL:
                                                                               ^
security/ai_agents/notification_bot_main.py:120:80: E501 line too long (88 > 79 characters)
                self.logger.info(f"Уведомление {notification.id} отложено (тихие часы)")
                                                                               ^
security/ai_agents/notification_bot_main.py:122:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot_main.py:125:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot_main.py:128:1: W293 blank line contains whitespace
    
^
security/ai_agents/notification_bot_main.py:135:80: E501 line too long (94 > 79 characters)
                    "enabled_channels": [NotificationChannel.PUSH, NotificationChannel.EMAIL],
                                                                               ^
security/ai_agents/notification_bot_main.py:140:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot_main.py:142:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot_main.py:144:80: E501 line too long (81 > 79 characters)
            self.logger.error(f"Ошибка получения предпочтений пользователя: {e}")
                                                                               ^
security/ai_agents/notification_bot_main.py:146:1: W293 blank line contains whitespace
    
^
security/ai_agents/notification_bot_main.py:150:80: E501 line too long (80 > 79 characters)
            quiet_hours = user_prefs.get("quiet_hours", {"start": 22, "end": 8})
                                                                               ^
security/ai_agents/notification_bot_main.py:154:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot_main.py:159:1: W293 blank line contains whitespace
                
^
security/ai_agents/notification_bot_main.py:163:1: W293 blank line contains whitespace
    
^
security/ai_agents/notification_bot_main.py:164:80: E501 line too long (100 > 79 characters)
    def _deliver_notification(self, notification: Notification, user_prefs: Dict[str, Any]) -> bool:
                                                                               ^
security/ai_agents/notification_bot_main.py:170:80: E501 line too long (123 > 79 characters)
                self.logger.warning(f"Канал {notification.channel.value} отключен для пользователя {notification.user_id}")
                                                                               ^
security/ai_agents/notification_bot_main.py:172:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot_main.py:176:80: E501 line too long (98 > 79 characters)
                self.logger.error(f"Обработчик для канала {notification.channel.value} не найден")
                                                                               ^
security/ai_agents/notification_bot_main.py:178:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot_main.py:181:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot_main.py:184:80: E501 line too long (112 > 79 characters)
                self.logger.info(f"Уведомление {notification.id} доставлено через {notification.channel.value}")
                                                                               ^
security/ai_agents/notification_bot_main.py:187:80: E501 line too long (83 > 79 characters)
                self.logger.error(f"Ошибка доставки уведомления {notification.id}")
                                                                               ^
security/ai_agents/notification_bot_main.py:188:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot_main.py:190:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot_main.py:195:1: W293 blank line contains whitespace
    
^
security/ai_agents/notification_bot_main.py:196:80: E501 line too long (104 > 79 characters)
    def _handle_push_notification(self, notification: Notification, user_prefs: Dict[str, Any]) -> bool:
                                                                               ^
security/ai_agents/notification_bot_main.py:205:1: W293 blank line contains whitespace
    
^
security/ai_agents/notification_bot_main.py:206:80: E501 line too long (105 > 79 characters)
    def _handle_email_notification(self, notification: Notification, user_prefs: Dict[str, Any]) -> bool:
                                                                               ^
security/ai_agents/notification_bot_main.py:215:1: W293 blank line contains whitespace
    
^
security/ai_agents/notification_bot_main.py:216:80: E501 line too long (103 > 79 characters)
    def _handle_sms_notification(self, notification: Notification, user_prefs: Dict[str, Any]) -> bool:
                                                                               ^
security/ai_agents/notification_bot_main.py:225:1: W293 blank line contains whitespace
    
^
security/ai_agents/notification_bot_main.py:226:80: E501 line too long (108 > 79 characters)
    def _handle_telegram_notification(self, notification: Notification, user_prefs: Dict[str, Any]) -> bool:
                                                                               ^
security/ai_agents/notification_bot_main.py:235:1: W293 blank line contains whitespace
    
^
security/ai_agents/notification_bot_main.py:236:80: E501 line too long (108 > 79 characters)
    def _handle_whatsapp_notification(self, notification: Notification, user_prefs: Dict[str, Any]) -> bool:
                                                                               ^
security/ai_agents/notification_bot_main.py:245:1: W293 blank line contains whitespace
    
^
security/ai_agents/notification_bot_main.py:246:80: E501 line too long (105 > 79 characters)
    def _handle_viber_notification(self, notification: Notification, user_prefs: Dict[str, Any]) -> bool:
                                                                               ^
security/ai_agents/notification_bot_main.py:255:1: W293 blank line contains whitespace
    
^
security/ai_agents/notification_bot_main.py:256:80: E501 line too long (107 > 79 characters)
    def _handle_discord_notification(self, notification: Notification, user_prefs: Dict[str, Any]) -> bool:
                                                                               ^
security/ai_agents/notification_bot_main.py:265:1: W293 blank line contains whitespace
    
^
security/ai_agents/notification_bot_main.py:266:80: E501 line too long (105 > 79 characters)
    def _handle_slack_notification(self, notification: Notification, user_prefs: Dict[str, Any]) -> bool:
                                                                               ^
security/ai_agents/notification_bot_main.py:275:1: W293 blank line contains whitespace
    
^
security/ai_agents/notification_bot_main.py:276:80: E501 line too long (89 > 79 characters)
    def update_user_preferences(self, user_id: str, preferences: Dict[str, Any]) -> bool:
                                                                               ^
security/ai_agents/notification_bot_main.py:282:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot_main.py:285:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot_main.py:289:1: W293 blank line contains whitespace
    
^
security/ai_agents/notification_bot_main.py:290:80: E501 line too long (92 > 79 characters)
    def get_user_notifications(self, user_id: str, limit: int = 50) -> List[Dict[str, Any]]:
                                                                               ^
security/ai_agents/notification_bot_main.py:301:80: E501 line too long (102 > 79 characters)
                    "scheduled_for": notif.scheduled_for.isoformat() if notif.scheduled_for else None,
                                                                               ^
security/ai_agents/notification_bot_main.py:307:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot_main.py:309:80: E501 line too long (80 > 79 characters)
            user_notifications.sort(key=lambda x: x["created_at"], reverse=True)
                                                                               ^
security/ai_agents/notification_bot_main.py:310:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot_main.py:312:1: W293 blank line contains whitespace
            
^
security/ai_agents/notification_bot_main.py:314:80: E501 line too long (80 > 79 characters)
            self.logger.error(f"Ошибка получения уведомлений пользователя: {e}")
                                                                               ^
security/ai_agents/notification_bot_main.py:316:1: W293 blank line contains whitespace
    
^
security/ai_agents/notification_bot_main.py:322:80: E501 line too long (81 > 79 characters)
                "notifications_delivered": self.stats["notifications_delivered"],
                                                                               ^
security/ai_agents/notification_bot_main.py:332:1: W293 blank line contains whitespace
    
^
security/ai_agents/notification_bot_main.py:350:1: E305 expected 2 blank lines after class or function definition, found 1
notification_bot_main = NotificationBotMain()^
security/ai_agents/notification_bot_main.py:350:46: W292 no newline at end of file
notification_bot_main = NotificationBotMain()                                             ^
security/ai_agents/parent_control_panel.py:13:1: F401 'time' imported but unused
import time
^
security/ai_agents/parent_control_panel.py:18:1: F401 'typing.Optional' imported but unused
from typing import Dict, List, Optional, Any, Tuple
^
security/ai_agents/parent_control_panel.py:18:1: F401 'typing.Tuple' imported but unused
from typing import Dict, List, Optional, Any, Tuple
^
security/ai_agents/parent_control_panel.py:164:9: F841 local variable 'e' is assigned to but never used
        except Exception as e:
        ^
security/ai_agents/parent_control_panel.py:198:80: E501 line too long (84 > 79 characters)
            "content_analyzer": {"model": "ContentAnalyzer_v1.0", "accuracy": 0.95},
                                                                               ^
security/ai_agents/parent_control_panel.py:199:80: E501 line too long (84 > 79 characters)
            "behavior_monitor": {"model": "BehaviorMonitor_v1.0", "accuracy": 0.92},
                                                                               ^
security/ai_agents/parent_control_panel.py:200:80: E501 line too long (82 > 79 characters)
            "threat_detector": {"model": "ThreatDetector_v1.0", "accuracy": 0.98},
                                                                               ^
security/ai_agents/parent_control_panel.py:201:80: E501 line too long (93 > 79 characters)
            "recommendation_engine": {"model": "RecommendationEngine_v1.0", "accuracy": 0.88}
                                                                               ^
security/ai_agents/parent_control_panel.py:209:80: E501 line too long (99 > 79 characters)
        log_file = os.path.join(log_dir, f"parent_control_{datetime.now().strftime('%Y%m%d')}.log")
                                                                               ^
security/ai_agents/parent_control_panel.py:214:80: E501 line too long (95 > 79 characters)
            handlers=[logging.FileHandler(log_file, encoding='utf-8'), logging.StreamHandler()]
                                                                               ^
security/ai_agents/parent_control_panel.py:225:21: F841 local variable 'config' is assigned to but never used
                    config = json.load(f)
                    ^
security/ai_agents/parent_control_panel.py:228:80: E501 line too long (96 > 79 characters)
                self.logger.info("Конфигурация не найдена, используются настройки по умолчанию")
                                                                               ^
security/ai_agents/parent_control_panel.py:232:80: E501 line too long (84 > 79 characters)
    def create_parent_profile(self, name: str, email: str, role: ParentRole) -> str:
                                                                               ^
security/ai_agents/parent_control_panel.py:235:80: E501 line too long (89 > 79 characters)
            parent_id = hashlib.md5(f"{email}{datetime.now()}".encode()).hexdigest()[:12]
                                                                               ^
security/ai_agents/parent_control_panel.py:265:80: E501 line too long (98 > 79 characters)
            child_id = hashlib.md5(f"{name}{parent_id}{datetime.now()}".encode()).hexdigest()[:12]
                                                                               ^
security/ai_agents/parent_control_panel.py:303:80: E501 line too long (85 > 79 characters)
    def set_time_limits(self, child_id: str, daily_limit: int, bedtime: str) -> bool:
                                                                               ^
security/ai_agents/parent_control_panel.py:315:80: E501 line too long (114 > 79 characters)
            self.logger.info(f"Установлены ограничения для {child.name}: {daily_limit} мин/день, сон в {bedtime}")
                                                                               ^
security/ai_agents/parent_control_panel.py:321:80: E501 line too long (84 > 79 characters)
    def block_content(self, child_id: str, content_type: str, content: str) -> bool:
                                                                               ^
security/ai_agents/parent_control_panel.py:336:80: E501 line too long (98 > 79 characters)
            self.logger.info(f"Заблокирован контент для {child.name}: {content_type} - {content}")
                                                                               ^
security/ai_agents/parent_control_panel.py:342:80: E501 line too long (87 > 79 characters)
    def track_location(self, child_id: str, latitude: float, longitude: float) -> bool:
                                                                               ^
security/ai_agents/parent_control_panel.py:362:80: E501 line too long (99 > 79 characters)
            self.logger.info(f"Обновлено местоположение для {child.name}: {latitude}, {longitude}")
                                                                               ^
security/ai_agents/parent_control_panel.py:380:80: E501 line too long (92 > 79 characters)
                "id": hashlib.md5(f"{parent_id}{datetime.now()}".encode()).hexdigest()[:12],
                                                                               ^
security/ai_agents/parent_control_panel.py:387:80: E501 line too long (99 > 79 characters)
                "priority": "high" if notification_type == NotificationType.EMERGENCY else "normal"
                                                                               ^
security/ai_agents/parent_control_panel.py:396:80: E501 line too long (87 > 79 characters)
            self.logger.info(f"Отправлено уведомление родителю {parent_id}: {message}")
                                                                               ^
security/ai_agents/parent_control_panel.py:442:80: E501 line too long (82 > 79 characters)
                    "content_filtering": self.security_settings.content_filtering,
                                                                               ^
security/ai_agents/parent_control_panel.py:443:80: E501 line too long (82 > 79 characters)
                    "time_restrictions": self.security_settings.time_restrictions,
                                                                               ^
security/ai_agents/parent_control_panel.py:444:80: E501 line too long (82 > 79 characters)
                    "location_tracking": self.security_settings.location_tracking,
                                                                               ^
security/ai_agents/parent_control_panel.py:447:80: E501 line too long (94 > 79 characters)
                    "social_media_monitoring": self.security_settings.social_media_monitoring,
                                                                               ^
security/ai_agents/parent_control_panel.py:448:80: E501 line too long (80 > 79 characters)
                    "emergency_alerts": self.security_settings.emergency_alerts,
                                                                               ^
security/ai_agents/parent_control_panel.py:451:80: E501 line too long (81 > 79 characters)
                "color_scheme": self.color_scheme["parent_colors"]["ui_elements"]
                                                                               ^
security/ai_agents/parent_control_panel.py:472:80: E501 line too long (88 > 79 characters)
    def get_child_activity_report(self, child_id: str, days: int = 7) -> Dict[str, Any]:
                                                                               ^
security/ai_agents/parent_control_panel.py:493:80: E501 line too long (96 > 79 characters)
                "time_limits_used": child.time_limits["daily"] - child.time_limits["remaining"],
                                                                               ^
security/ai_agents/parent_control_panel.py:499:80: E501 line too long (113 > 79 characters)
                    "unique_locations": len(set((loc["latitude"], loc["longitude"]) for loc in recent_activity)),
                                                                               ^
security/ai_agents/parent_control_panel.py:500:80: E501 line too long (85 > 79 characters)
                    "most_visited": self._get_most_visited_location(recent_activity),
                                                                               ^
security/ai_agents/parent_control_panel.py:501:80: E501 line too long (136 > 79 characters)
                    "average_accuracy": sum(loc["accuracy"] for loc in recent_activity) / len(recent_activity) if recent_activity else 0
                                                                               ^
security/ai_agents/parent_control_panel.py:510:80: E501 line too long (82 > 79 characters)
    def _get_most_visited_location(self, locations: List[Dict]) -> Dict[str, Any]:
                                                                               ^
security/ai_agents/parent_control_panel.py:527:80: E501 line too long (84 > 79 characters)
    def emergency_alert(self, child_id: str, alert_type: str, message: str) -> bool:
                                                                               ^
security/ai_agents/parent_control_panel.py:545:80: E501 line too long (101 > 79 characters)
            self.logger.warning(f"ЭКСТРЕННОЕ УВЕДОМЛЕНИЕ для {child.name}: {alert_type} - {message}")
                                                                               ^
security/ai_agents/parent_control_panel.py:555:80: E501 line too long (80 > 79 characters)
            required_fields = ["name", "email"] if "email" in data else ["name"]
                                                                               ^
security/ai_agents/parent_control_panel.py:587:80: E501 line too long (91 > 79 characters)
                profile_data["email"] = self._encrypt_sensitive_data(profile_data["email"])
                                                                               ^
security/ai_agents/parent_control_panel.py:594:80: E501 line too long (85 > 79 characters)
                json.dump(profile_data, f, ensure_ascii=False, indent=2, default=str)
                                                                               ^
security/ai_agents/parent_control_panel.py:611:80: E501 line too long (89 > 79 characters)
    def get_color_scheme_for_ui(self, element_type: str = "dashboard") -> Dict[str, str]:
                                                                               ^
security/ai_agents/parent_control_panel.py:630:80: E501 line too long (81 > 79 characters)
                    "hover": self._darken_color(ui_colors["button_primary"], 0.1)
                                                                               ^
security/ai_agents/parent_control_panel.py:633:80: E501 line too long (83 > 79 characters)
                    "success": self.color_scheme["parent_colors"]["success_green"],
                                                                               ^
security/ai_agents/parent_control_panel.py:634:80: E501 line too long (84 > 79 characters)
                    "warning": self.color_scheme["parent_colors"]["warning_orange"],
                                                                               ^
security/ai_agents/parent_control_panel.py:636:80: E501 line too long (82 > 79 characters)
                    "info": self.color_scheme["parent_colors"]["info_light_green"]
                                                                               ^
security/ai_agents/parent_control_panel.py:685:80: E501 line too long (104 > 79 characters)
                    "total_alerts": len([n for n in self.notifications if n["parent_id"] == parent_id]),
                                                                               ^
security/ai_agents/parent_control_panel.py:687:80: E501 line too long (82 > 79 characters)
                    "content_filtering": self.security_settings.content_filtering,
                                                                               ^
security/ai_agents/parent_control_panel.py:688:80: E501 line too long (81 > 79 characters)
                    "location_tracking": self.security_settings.location_tracking
                                                                               ^
security/ai_agents/parent_control_panel.py:726:80: E501 line too long (110 > 79 characters)
                f"Тестирование завершено: {passed_tests}/{total_tests} тестов пройдено ({success_rate:.1f}%)")
                                                                               ^
security/ai_agents/parent_control_panel.py:737:80: E501 line too long (105 > 79 characters)
            parent_id = self.create_parent_profile("Test Parent", "test@example.com", ParentRole.PRIMARY)
                                                                               ^
security/ai_agents/parent_control_panel.py:759:80: E501 line too long (110 > 79 characters)
            parent_id = self.create_parent_profile("Test Parent 2", "test2@example.com", ParentRole.SECONDARY)
                                                                               ^
security/ai_agents/parent_control_panel.py:768:80: E501 line too long (81 > 79 characters)
            block_result = self.block_content(child_id, "website", "example.com")
                                                                               ^
security/ai_agents/parent_control_panel.py:780:80: E501 line too long (81 > 79 characters)
            valid_data = {"name": "Test", "email": "test@example.com", "age": 15}
                                                                               ^
security/ai_agents/parent_control_panel.py:823:80: E501 line too long (108 > 79 characters)
            parent_id = self.create_parent_profile("Test Parent 3", "test3@example.com", ParentRole.PRIMARY)
                                                                               ^
security/ai_agents/parent_control_panel.py:837:80: E501 line too long (93 > 79 characters)
            emergency_result = self.emergency_alert(child_id, "test_alert", "Test emergency")
                                                                               ^
security/ai_agents/parent_control_panel.py:848:80: E501 line too long (108 > 79 characters)
            parent_id = self.create_parent_profile("Test Parent 4", "test4@example.com", ParentRole.PRIMARY)
                                                                               ^
security/ai_agents/parent_control_panel.py:857:80: E501 line too long (80 > 79 characters)
            comprehensive_report = self.generate_comprehensive_report(parent_id)
                                                                               ^
security/ai_agents/parent_control_panel.py:891:80: E501 line too long (90 > 79 characters)
                    "methods_count": len([m for m in dir(self) if not m.startswith('_')]),
                                                                               ^
security/ai_agents/parent_control_panel.py:892:80: E501 line too long (80 > 79 characters)
                    "documentation_coverage": 100,  # Все методы документированы
                                                                               ^
security/ai_agents/parent_control_panel.py:939:80: E501 line too long (85 > 79 characters)
                    "ui_elements": self.color_scheme["parent_colors"]["ui_elements"],
                                                                               ^
security/ai_agents/password_security_agent.py:15:1: F401 'datetime.timedelta' imported but unused
from datetime import datetime, timedelta
^
security/ai_agents/password_security_agent.py:54:80: E501 line too long (85 > 79 characters)
    def __init__(self, min_length=12, require_uppercase=True, require_lowercase=True,
                                                                               ^
security/ai_agents/password_security_agent.py:112:80: E501 line too long (82 > 79 characters)
            "password_strength_distribution": self.password_strength_distribution,
                                                                               ^
security/ai_agents/password_security_agent.py:117:80: E501 line too long (104 > 79 characters)
            "last_breach_check": self.last_breach_check.isoformat() if self.last_breach_check else None,
                                                                               ^
security/ai_agents/password_security_agent.py:170:80: E501 line too long (103 > 79 characters)
            self.log_activity("Ошибка инициализации PasswordSecurityAgent: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/password_security_agent.py:176:80: E501 line too long (85 > 79 characters)
            self.log_activity("Инициализация AI моделей для безопасности паролей...")
                                                                               ^
security/ai_agents/password_security_agent.py:181:80: E501 line too long (95 > 79 characters)
                "features": ["length", "character_diversity", "pattern_complexity", "entropy"],
                                                                               ^
security/ai_agents/password_security_agent.py:190:80: E501 line too long (85 > 79 characters)
                "features": ["password_hash", "breach_database", "similarity_score"],
                                                                               ^
security/ai_agents/password_security_agent.py:199:80: E501 line too long (83 > 79 characters)
                "features": ["keyboard_patterns", "common_words", "personal_info"],
                                                                               ^
security/ai_agents/password_security_agent.py:208:80: E501 line too long (84 > 79 characters)
                "features": ["character_set_size", "password_length", "randomness"],
                                                                               ^
security/ai_agents/password_security_agent.py:224:80: E501 line too long (92 > 79 characters)
            self.log_activity("Ошибка инициализации AI моделей: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/password_security_agent.py:239:80: E501 line too long (87 > 79 characters)
                self.breach_database.add(hashlib.sha256(password.encode()).hexdigest())
                                                                               ^
security/ai_agents/password_security_agent.py:241:80: E501 line too long (107 > 79 characters)
            self.log_activity("База данных утечек загружена: {} записей".format(len(self.breach_database)))
                                                                               ^
security/ai_agents/password_security_agent.py:244:80: E501 line too long (95 > 79 characters)
            self.log_activity("Ошибка загрузки базы данных утечек: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/password_security_agent.py:262:80: E501 line too long (97 > 79 characters)
            self.log_activity("Ошибка настройки систем безопасности: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/password_security_agent.py:264:80: E501 line too long (90 > 79 characters)
    def generate_password(self, length=16, include_uppercase=True, include_lowercase=True,
                                                                               ^
security/ai_agents/password_security_agent.py:265:80: E501 line too long (91 > 79 characters)
                          include_digits=True, include_special=True, exclude_similar=True):
                                                                               ^
security/ai_agents/password_security_agent.py:271:80: E501 line too long (95 > 79 characters)
            if not self._validate_password_params(length, include_uppercase, include_lowercase,
                                                                               ^
security/ai_agents/password_security_agent.py:272:80: E501 line too long (83 > 79 characters)
                                                  include_digits, include_special):
                                                                               ^
security/ai_agents/password_security_agent.py:287:80: E501 line too long (101 > 79 characters)
                charset = charset.replace("0", "").replace("O", "").replace("l", "").replace("I", "")
                                                                               ^
security/ai_agents/password_security_agent.py:309:80: E501 line too long (84 > 79 characters)
            self.log_activity("Ошибка генерации пароля: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/password_security_agent.py:312:80: E501 line too long (85 > 79 characters)
    def _validate_password_params(self, length, include_uppercase, include_lowercase,
                                                                               ^
security/ai_agents/password_security_agent.py:320:80: E501 line too long (97 > 79 characters)
            if not (include_uppercase or include_lowercase or include_digits or include_special):
                                                                               ^
security/ai_agents/password_security_agent.py:321:80: E501 line too long (90 > 79 characters)
                self.log_activity("Должен быть выбран хотя бы один тип символов", "error")
                                                                               ^
security/ai_agents/password_security_agent.py:327:80: E501 line too long (88 > 79 characters)
            self.log_activity("Ошибка валидации параметров: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/password_security_agent.py:357:80: E501 line too long (93 > 79 characters)
            self.log_activity("Ошибка генерации сильного пароля: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/password_security_agent.py:381:80: E501 line too long (82 > 79 characters)
            has_special = any(c in "!@#$%^&*()_+-=[]{}|;:,.<>?" for c in password)
                                                                               ^
security/ai_agents/password_security_agent.py:408:80: E501 line too long (92 > 79 characters)
            self.log_activity("Ошибка анализа сложности пароля: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/password_security_agent.py:422:80: E501 line too long (93 > 79 characters)
            entropy = total_chars * (unique_chars / total_chars) * 3.32  # log2 approximation
                                                                               ^
security/ai_agents/password_security_agent.py:427:80: E501 line too long (84 > 79 characters)
            self.log_activity("Ошибка расчета энтропии: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/password_security_agent.py:448:80: E501 line too long (86 > 79 characters)
            self.log_activity("Ошибка проверки паттернов: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/password_security_agent.py:479:80: E501 line too long (86 > 79 characters)
            self.log_activity("Ошибка хеширования пароля: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/password_security_agent.py:505:80: E501 line too long (83 > 79 characters)
            self.log_activity("Ошибка проверки пароля: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/password_security_agent.py:527:80: E501 line too long (90 > 79 characters)
            self.log_activity("Ошибка проверки утечки пароля: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/password_security_agent.py:541:80: E501 line too long (103 > 79 characters)
                return False, "Пароль слишком короткий (минимум {} символов)".format(policy.min_length)
                                                                               ^
security/ai_agents/password_security_agent.py:544:80: E501 line too long (83 > 79 characters)
            if policy.require_uppercase and not any(c.isupper() for c in password):
                                                                               ^
security/ai_agents/password_security_agent.py:548:80: E501 line too long (83 > 79 characters)
            if policy.require_lowercase and not any(c.islower() for c in password):
                                                                               ^
security/ai_agents/password_security_agent.py:552:80: E501 line too long (80 > 79 characters)
            if policy.require_digits and not any(c.isdigit() for c in password):
                                                                               ^
security/ai_agents/password_security_agent.py:556:80: E501 line too long (103 > 79 characters)
            if policy.require_special and not any(c in "!@#$%^&*()_+-=[]{}|;:,.<>?" for c in password):
                                                                               ^
security/ai_agents/password_security_agent.py:562:80: E501 line too long (93 > 79 characters)
            self.log_activity("Ошибка валидации политики пароля: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/password_security_agent.py:578:80: E501 line too long (80 > 79 characters)
                    "compromised_passwords": self.metrics.compromised_passwords,
                                                                               ^
security/ai_agents/password_security_agent.py:581:80: E501 line too long (80 > 79 characters)
                    "breach_detection_rate": self.metrics.breach_detection_rate,
                                                                               ^
security/ai_agents/password_security_agent.py:582:80: E501 line too long (81 > 79 characters)
                    "policy_compliance_rate": self.metrics.policy_compliance_rate
                                                                               ^
security/ai_agents/password_security_agent.py:593:80: E501 line too long (111 > 79 characters)
            report_file = os.path.join(report_dir, "password_security_report_{}.json".format(int(time.time())))
                                                                               ^
security/ai_agents/password_security_agent.py:601:80: E501 line too long (84 > 79 characters)
            self.log_activity("Ошибка генерации отчета: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/password_security_agent.py:610:80: E501 line too long (80 > 79 characters)
            if self.metrics.weak_passwords > self.metrics.total_passwords * 0.2:
                                                                               ^
security/ai_agents/password_security_agent.py:623:80: E501 line too long (81 > 79 characters)
                    "action": "Немедленно сменить все скомпрометированные пароли"
                                                                               ^
security/ai_agents/password_security_agent.py:631:80: E501 line too long (88 > 79 characters)
                    "action": "Улучшить обучение пользователей и автоматизацию проверок"
                                                                               ^
security/ai_agents/password_security_agent.py:637:80: E501 line too long (90 > 79 characters)
            self.log_activity("Ошибка генерации рекомендаций: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/password_security_agent.py:651:80: E501 line too long (99 > 79 characters)
            self.log_activity("Ошибка остановки PasswordSecurityAgent: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/password_security_agent.py:663:80: E501 line too long (82 > 79 characters)
                json.dump(self.metrics.to_dict(), f, indent=2, ensure_ascii=False)
                                                                               ^
security/ai_agents/password_security_agent.py:668:80: E501 line too long (85 > 79 characters)
            self.log_activity("Ошибка сохранения данных: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/password_security_agent.py:693:80: E501 line too long (100 > 79 characters)
                is_valid = agent.verify_password(password, hash_result["hash"], hash_result["salt"])
                                                                               ^
security/ai_agents/performance_optimization_agent.py:78:80: E501 line too long (82 > 79 characters)
        data['timestamp'] = self.timestamp.isoformat() if self.timestamp else None
                                                                               ^
security/ai_agents/performance_optimization_agent.py:132:80: E501 line too long (82 > 79 characters)
        data['timestamp'] = self.timestamp.isoformat() if self.timestamp else None
                                                                               ^
security/ai_agents/performance_optimization_agent.py:159:80: E501 line too long (106 > 79 characters)
        data['last_optimization'] = self.last_optimization.isoformat() if self.last_optimization else None
                                                                               ^
security/ai_agents/performance_optimization_agent.py:174:80: E501 line too long (98 > 79 characters)
            self.optimizations_by_type[opt_type] = self.optimizations_by_type.get(opt_type, 0) + 1
                                                                               ^
security/ai_agents/performance_optimization_agent.py:179:80: E501 line too long (109 > 79 characters)
                (self.average_improvement * (self.total_optimizations - 1) + result.improvement_percentage) /
                                                                               ^
security/ai_agents/performance_optimization_agent.py:198:80: E501 line too long (83 > 79 characters)
        self.max_concurrent_optimizations = 3  # максимум одновременных оптимизаций
                                                                               ^
security/ai_agents/performance_optimization_agent.py:242:80: E501 line too long (85 > 79 characters)
            self.log_activity("Инициализация Performance Optimization Agent", "info")
                                                                               ^
security/ai_agents/performance_optimization_agent.py:258:80: E501 line too long (95 > 79 characters)
            self.log_activity("Performance Optimization Agent успешно инициализирован", "info")
                                                                               ^
security/ai_agents/performance_optimization_agent.py:262:80: E501 line too long (99 > 79 characters)
            self.log_activity(f"Ошибка инициализации Performance Optimization Agent: {e}", "error")
                                                                               ^
security/ai_agents/performance_optimization_agent.py:269:80: E501 line too long (81 > 79 characters)
            self.log_activity("Остановка Performance Optimization Agent", "info")
                                                                               ^
security/ai_agents/performance_optimization_agent.py:284:80: E501 line too long (82 > 79 characters)
            self.log_activity("Performance Optimization Agent остановлен", "info")
                                                                               ^
security/ai_agents/performance_optimization_agent.py:288:80: E501 line too long (95 > 79 characters)
            self.log_activity(f"Ошибка остановки Performance Optimization Agent: {e}", "error")
                                                                               ^
security/ai_agents/performance_optimization_agent.py:307:80: E501 line too long (102 > 79 characters)
                final_recommendations = self._combine_recommendations(recommendations, trend_analysis)
                                                                               ^
security/ai_agents/performance_optimization_agent.py:314:80: E501 line too long (109 > 79 characters)
                    f"Анализ производительности завершен. Найдено {len(final_recommendations)} рекомендаций",
                                                                               ^
security/ai_agents/performance_optimization_agent.py:321:80: E501 line too long (81 > 79 characters)
            self.log_activity(f"Ошибка анализа производительности: {e}", "error")
                                                                               ^
security/ai_agents/performance_optimization_agent.py:324:80: E501 line too long (86 > 79 characters)
    def optimize_system(self, recommendation_id: str) -> Optional[OptimizationResult]:
                                                                               ^
security/ai_agents/performance_optimization_agent.py:329:80: E501 line too long (96 > 79 characters)
                    self.log_activity(f"Рекомендация {recommendation_id} не найдена", "warning")
                                                                               ^
security/ai_agents/performance_optimization_agent.py:337:80: E501 line too long (86 > 79 characters)
                        f"Рекомендация {recommendation_id} требует ручной реализации",
                                                                               ^
security/ai_agents/performance_optimization_agent.py:357:80: E501 line too long (98 > 79 characters)
                    status=OptimizationStatus.COMPLETED if success else OptimizationStatus.FAILED,
                                                                               ^
security/ai_agents/performance_optimization_agent.py:358:80: E501 line too long (112 > 79 characters)
                    before_value=self._calculate_metric_value(before_metrics, recommendation.optimization_type),
                                                                               ^
security/ai_agents/performance_optimization_agent.py:359:80: E501 line too long (110 > 79 characters)
                    after_value=self._calculate_metric_value(after_metrics, recommendation.optimization_type),
                                                                               ^
security/ai_agents/performance_optimization_agent.py:361:80: E501 line too long (87 > 79 characters)
                        before_metrics, after_metrics, recommendation.optimization_type
                                                                               ^
security/ai_agents/performance_optimization_agent.py:381:80: E501 line too long (87 > 79 characters)
                    f"Оптимизация {recommendation.optimization_type.value} завершена. "
                                                                               ^
security/ai_agents/performance_optimization_agent.py:398:80: E501 line too long (90 > 79 characters)
            self.log_activity(f"Ошибка получения метрик производительности: {e}", "error")
                                                                               ^
security/ai_agents/performance_optimization_agent.py:401:80: E501 line too long (83 > 79 characters)
    def get_optimization_recommendations(self) -> List[OptimizationRecommendation]:
                                                                               ^
security/ai_agents/performance_optimization_agent.py:416:80: E501 line too long (88 > 79 characters)
            self.log_activity(f"Ошибка получения результатов оптимизации: {e}", "error")
                                                                               ^
security/ai_agents/performance_optimization_agent.py:428:80: E501 line too long (80 > 79 characters)
                    "optimization_metrics": self.optimization_metrics.to_dict(),
                                                                               ^
security/ai_agents/performance_optimization_agent.py:466:80: E501 line too long (91 > 79 characters)
            self.log_activity(f"Ошибка инициализации алгоритмов оптимизации: {e}", "error")
                                                                               ^
security/ai_agents/performance_optimization_agent.py:490:80: E501 line too long (90 > 79 characters)
            self.log_activity(f"Ошибка загрузки моделей производительности: {e}", "error")
                                                                               ^
security/ai_agents/performance_optimization_agent.py:514:80: E501 line too long (89 > 79 characters)
            self.log_activity(f"Ошибка инициализации предиктивных моделей: {e}", "error")
                                                                               ^
security/ai_agents/performance_optimization_agent.py:560:80: E501 line too long (81 > 79 characters)
                    is_critical=cpu_percent > self.agent_config["cpu_threshold"],
                                                                               ^
security/ai_agents/performance_optimization_agent.py:574:80: E501 line too long (87 > 79 characters)
                    is_critical=memory.percent > self.agent_config["memory_threshold"],
                                                                               ^
security/ai_agents/performance_optimization_agent.py:602:80: E501 line too long (83 > 79 characters)
                    is_critical=disk.percent > self.agent_config["disk_threshold"],
                                                                               ^
security/ai_agents/performance_optimization_agent.py:614:80: E501 line too long (86 > 79 characters)
            self.log_activity(f"Ошибка сбора метрик производительности: {e}", "error")
                                                                               ^
security/ai_agents/performance_optimization_agent.py:617:80: E501 line too long (101 > 79 characters)
    def _analyze_with_ai(self, metrics: List[PerformanceMetric]) -> List[OptimizationRecommendation]:
                                                                               ^
security/ai_agents/performance_optimization_agent.py:635:80: E501 line too long (100 > 79 characters)
    def _analyze_trends(self, metrics: List[PerformanceMetric]) -> List[OptimizationRecommendation]:
                                                                               ^
security/ai_agents/performance_optimization_agent.py:642:80: E501 line too long (80 > 79 characters)
                type_metrics = [m for m in metrics if m.metric_type == opt_type]
                                                                               ^
security/ai_agents/performance_optimization_agent.py:645:80: E501 line too long (107 > 79 characters)
                    if trend == "increasing" and type_metrics[-1].value > type_metrics[-1].threshold * 0.8:
                                                                               ^
security/ai_agents/performance_optimization_agent.py:646:80: E501 line too long (93 > 79 characters)
                        recommendation = self._generate_trend_recommendation(opt_type, trend)
                                                                               ^
security/ai_agents/performance_optimization_agent.py:656:80: E501 line too long (92 > 79 characters)
    def _combine_recommendations(self, ai_recommendations: List[OptimizationRecommendation],
                                                                               ^
security/ai_agents/performance_optimization_agent.py:657:80: E501 line too long (88 > 79 characters)
                                 trend_recommendations: List[OptimizationRecommendation]
                                                                               ^
security/ai_agents/performance_optimization_agent.py:666:80: E501 line too long (85 > 79 characters)
                key = f"{rec.optimization_type.value}_{rec.optimization_level.value}"
                                                                               ^
security/ai_agents/performance_optimization_agent.py:667:80: E501 line too long (112 > 79 characters)
                if key not in unique_recommendations or rec.confidence > unique_recommendations[key].confidence:
                                                                               ^
security/ai_agents/performance_optimization_agent.py:676:80: E501 line too long (109 > 79 characters)
    def _generate_ai_recommendation(self, metric: PerformanceMetric) -> Optional[OptimizationRecommendation]:
                                                                               ^
security/ai_agents/performance_optimization_agent.py:697:80: E501 line too long (85 > 79 characters)
                description=f"AI рекомендует оптимизацию {metric.metric_type.value}",
                                                                               ^
security/ai_agents/performance_optimization_agent.py:709:80: E501 line too long (80 > 79 characters)
            self.log_activity(f"Ошибка генерации AI рекомендации: {e}", "error")
                                                                               ^
security/ai_agents/performance_optimization_agent.py:713:80: E501 line too long (91 > 79 characters)
                                       trend: str) -> Optional[OptimizationRecommendation]:
                                                                               ^
security/ai_agents/performance_optimization_agent.py:720:80: E501 line too long (97 > 79 characters)
                description=f"Проактивная оптимизация {opt_type.value} на основе тренда {trend}",
                                                                               ^
security/ai_agents/performance_optimization_agent.py:732:80: E501 line too long (87 > 79 characters)
            self.log_activity(f"Ошибка генерации рекомендации по тренду: {e}", "error")
                                                                               ^
security/ai_agents/performance_optimization_agent.py:753:80: E501 line too long (90 > 79 characters)
    def _implement_optimization(self, recommendation: OptimizationRecommendation) -> bool:
                                                                               ^
security/ai_agents/performance_optimization_agent.py:757:80: E501 line too long (80 > 79 characters)
            time.sleep(random.uniform(0.1, 0.5))  # Симуляция времени выполнения
                                                                               ^
security/ai_agents/performance_optimization_agent.py:768:80: E501 line too long (109 > 79 characters)
    def _calculate_metric_value(self, metrics: List[PerformanceMetric], opt_type: OptimizationType) -> float:
                                                                               ^
security/ai_agents/performance_optimization_agent.py:785:80: E501 line too long (81 > 79 characters)
            before_value = self._calculate_metric_value(before_metrics, opt_type)
                                                                               ^
security/ai_agents/performance_optimization_agent.py:811:80: E501 line too long (83 > 79 characters)
                        f"Обнаружены критические метрики: {len(critical_metrics)}",
                                                                               ^
security/ai_agents/performance_optimization_agent.py:830:80: E501 line too long (110 > 79 characters)
                            rec.optimization_level in [OptimizationLevel.HIGH, OptimizationLevel.CRITICAL] and
                                                                               ^
security/ai_agents/performance_optimization_agent.py:835:80: E501 line too long (88 > 79 characters)
            self.log_activity(f"Ошибка задачи автоматической оптимизации: {e}", "error")
                                                                               ^
security/ai_agents/performance_optimization_agent.py:845:80: E501 line too long (93 > 79 characters)
                "recommendations": {k: v.to_dict() for k, v in self.recommendations.items()},
                                                                               ^
security/ai_agents/performance_optimization_agent.py:852:80: E501 line too long (104 > 79 characters)
            with open("/tmp/aladdin_optimizations/last_optimizations.json", 'w', encoding='utf-8') as f:
                                                                               ^
security/ai_agents/performance_optimization_agent.py:857:80: E501 line too long (84 > 79 characters)
            self.log_activity(f"Ошибка сохранения данных оптимизации: {e}", "error")
                                                                               ^
security/ai_agents/phishing_protection_agent.py:14:1: F401 'typing.Tuple' imported but unused
from typing import List, Dict, Optional, Any, Tuple
^
security/ai_agents/phishing_protection_agent.py:18:1: E302 expected 2 blank lines, found 1
class PhishingType(Enum):
^
security/ai_agents/phishing_protection_agent.py:28:1: E302 expected 2 blank lines, found 1
class ThreatLevel(Enum):
^
security/ai_agents/phishing_protection_agent.py:35:1: E302 expected 2 blank lines, found 1
class DetectionMethod(Enum):
^
security/ai_agents/phishing_protection_agent.py:45:1: E302 expected 2 blank lines, found 1
@dataclass
^
security/ai_agents/phishing_protection_agent.py:56:80: E501 line too long (88 > 79 characters)
    created_at: str = field(default_factory=lambda: datetime.datetime.now().isoformat())
                                                                               ^
security/ai_agents/phishing_protection_agent.py:84:80: E501 line too long (83 > 79 characters)
            created_at=data.get("created_at", datetime.datetime.now().isoformat()),
                                                                               ^
security/ai_agents/phishing_protection_agent.py:88:1: E302 expected 2 blank lines, found 1
@dataclass
^
security/ai_agents/phishing_protection_agent.py:99:80: E501 line too long (89 > 79 characters)
    detected_at: str = field(default_factory=lambda: datetime.datetime.now().isoformat())
                                                                               ^
security/ai_agents/phishing_protection_agent.py:131:80: E501 line too long (85 > 79 characters)
            detected_at=data.get("detected_at", datetime.datetime.now().isoformat()),
                                                                               ^
security/ai_agents/phishing_protection_agent.py:137:1: E302 expected 2 blank lines, found 1
@dataclass
^
security/ai_agents/phishing_protection_agent.py:146:80: E501 line too long (89 > 79 characters)
    reported_at: str = field(default_factory=lambda: datetime.datetime.now().isoformat())
                                                                               ^
security/ai_agents/phishing_protection_agent.py:174:80: E501 line too long (85 > 79 characters)
            reported_at=data.get("reported_at", datetime.datetime.now().isoformat()),
                                                                               ^
security/ai_agents/phishing_protection_agent.py:180:1: E302 expected 2 blank lines, found 1
class PhishingProtectionAgent:
^
security/ai_agents/phishing_protection_agent.py:182:80: E501 line too long (87 > 79 characters)
    """
    Агент защиты от фишинговых атак с использованием множественных методов обнаружения.
    """
       
                                                                       ^
security/ai_agents/phishing_protection_agent.py:184:1: W293 blank line contains whitespace
    
^
security/ai_agents/phishing_protection_agent.py:193:1: W293 blank line contains whitespace
        
^
security/ai_agents/phishing_protection_agent.py:206:80: E501 line too long (85 > 79 characters)
                description="Короткие URL сервисы часто используются для маскировки",
                                                                               ^
security/ai_agents/phishing_protection_agent.py:215:80: E501 line too long (82 > 79 characters)
                pattern=r"(sberbank|vtb|gazprombank|alfabank|tinkoff|raiffeisen)",
                                                                               ^
security/ai_agents/phishing_protection_agent.py:225:80: E501 line too long (93 > 79 characters)
                pattern=r"(срочно|немедленно|блокировка|заблокирован|подтвердите|проверьте)",
                                                                               ^
security/ai_agents/phishing_protection_agent.py:245:80: E501 line too long (83 > 79 characters)
                pattern=r"(пароль|логин|аккаунт|карта|счет|деньги|перевод|платеж)",
                                                                               ^
security/ai_agents/phishing_protection_agent.py:246:80: E501 line too long (81 > 79 characters)
                description="Ключевые слова, связанные с финансовой информацией",
                                                                               ^
security/ai_agents/phishing_protection_agent.py:251:1: W293 blank line contains whitespace
        
^
security/ai_agents/phishing_protection_agent.py:253:80: E501 line too long (81 > 79 characters)
        print(f"Загружено {len(default_indicators)} базовых индикаторов фишинга")
                                                                               ^
security/ai_agents/phishing_protection_agent.py:265:1: W293 blank line contains whitespace
            
^
security/ai_agents/phishing_protection_agent.py:276:1: W293 blank line contains whitespace
            
^
security/ai_agents/phishing_protection_agent.py:280:1: W293 blank line contains whitespace
            
^
security/ai_agents/phishing_protection_agent.py:285:1: W293 blank line contains whitespace
            
^
security/ai_agents/phishing_protection_agent.py:287:80: E501 line too long (94 > 79 characters)
                if not indicator.is_active or indicator.phishing_type != PhishingType.WEBSITE:
                                                                               ^
security/ai_agents/phishing_protection_agent.py:289:1: W293 blank line contains whitespace
                
^
security/ai_agents/phishing_protection_agent.py:295:1: W293 blank line contains whitespace
            
^
security/ai_agents/phishing_protection_agent.py:304:80: E501 line too long (91 > 79 characters)
                    description=f"Обнаружено {len(matched_indicators)} индикаторов фишинга"
                                                                               ^
security/ai_agents/phishing_protection_agent.py:306:1: W293 blank line contains whitespace
            
^
security/ai_agents/phishing_protection_agent.py:311:1: W293 blank line contains whitespace
                
^
security/ai_agents/phishing_protection_agent.py:314:1: W293 blank line contains whitespace
            
^
security/ai_agents/phishing_protection_agent.py:317:80: E501 line too long (105 > 79 characters)
    def analyze_email(self, subject: str, content: str, sender: str = "") -> Optional[PhishingDetection]:
                                                                               ^
security/ai_agents/phishing_protection_agent.py:324:1: W293 blank line contains whitespace
            
^
security/ai_agents/phishing_protection_agent.py:326:80: E501 line too long (92 > 79 characters)
                if not indicator.is_active or indicator.phishing_type != PhishingType.EMAIL:
                                                                               ^
security/ai_agents/phishing_protection_agent.py:328:1: W293 blank line contains whitespace
                
^
security/ai_agents/phishing_protection_agent.py:329:80: E501 line too long (80 > 79 characters)
                if re.search(indicator.pattern, text_to_analyze, re.IGNORECASE):
                                                                               ^
security/ai_agents/phishing_protection_agent.py:334:1: W293 blank line contains whitespace
            
^
security/ai_agents/phishing_protection_agent.py:343:80: E501 line too long (99 > 79 characters)
                    description=f"Обнаружено {len(matched_indicators)} индикаторов фишинга в email"
                                                                               ^
security/ai_agents/phishing_protection_agent.py:345:1: W293 blank line contains whitespace
            
^
security/ai_agents/phishing_protection_agent.py:350:1: W293 blank line contains whitespace
                
^
security/ai_agents/phishing_protection_agent.py:353:1: W293 blank line contains whitespace
            
^
security/ai_agents/phishing_protection_agent.py:356:80: E501 line too long (89 > 79 characters)
    def analyze_sms(self, content: str, sender: str = "") -> Optional[PhishingDetection]:
                                                                               ^
security/ai_agents/phishing_protection_agent.py:363:1: W293 blank line contains whitespace
            
^
security/ai_agents/phishing_protection_agent.py:365:80: E501 line too long (90 > 79 characters)
                if not indicator.is_active or indicator.phishing_type != PhishingType.SMS:
                                                                               ^
security/ai_agents/phishing_protection_agent.py:367:1: W293 blank line contains whitespace
                
^
security/ai_agents/phishing_protection_agent.py:368:80: E501 line too long (80 > 79 characters)
                if re.search(indicator.pattern, text_to_analyze, re.IGNORECASE):
                                                                               ^
security/ai_agents/phishing_protection_agent.py:373:1: W293 blank line contains whitespace
            
^
security/ai_agents/phishing_protection_agent.py:382:80: E501 line too long (97 > 79 characters)
                    description=f"Обнаружено {len(matched_indicators)} индикаторов фишинга в SMS"
                                                                               ^
security/ai_agents/phishing_protection_agent.py:384:1: W293 blank line contains whitespace
                
^
security/ai_agents/phishing_protection_agent.py:387:1: W293 blank line contains whitespace
            
^
security/ai_agents/phishing_protection_agent.py:390:80: E501 line too long (91 > 79 characters)
    def _additional_url_checks(self, url: str, domain: str) -> Optional[PhishingDetection]:
                                                                               ^
security/ai_agents/phishing_protection_agent.py:398:1: W293 blank line contains whitespace
        
^
security/ai_agents/phishing_protection_agent.py:409:1: W293 blank line contains whitespace
        
^
security/ai_agents/phishing_protection_agent.py:412:80: E501 line too long (111 > 79 characters)
    def _additional_email_checks(self, subject: str, content: str, sender: str) -> Optional[PhishingDetection]:
                                                                               ^
security/ai_agents/phishing_protection_agent.py:422:1: W293 blank line contains whitespace
        
^
security/ai_agents/phishing_protection_agent.py:433:1: W293 blank line contains whitespace
        
^
security/ai_agents/phishing_protection_agent.py:436:74: W291 trailing whitespace
    def _create_detection(self, source: str, phishing_type: PhishingType, 
                                                                         ^
security/ai_agents/phishing_protection_agent.py:437:26: E128 continuation line under-indented for visual indent
                         threat_level: ThreatLevel, confidence: float,
                         ^
security/ai_agents/phishing_protection_agent.py:438:26: E128 continuation line under-indented for visual indent
                         detection_method: DetectionMethod, indicators_matched: List[str] = None,
                         ^
security/ai_agents/phishing_protection_agent.py:438:80: E501 line too long (97 > 79 characters)
                         detection_method: DetectionMethod, indicators_matched: List[str] = None,
                                                                               ^
security/ai_agents/phishing_protection_agent.py:439:26: E128 continuation line under-indented for visual indent
                         description: str = "") -> PhishingDetection:
                         ^
security/ai_agents/phishing_protection_agent.py:462:75: W291 trailing whitespace
    def report_phishing(self, user_id: str, source: str, description: str, 
                                                                          ^
security/ai_agents/phishing_protection_agent.py:463:24: E128 continuation line under-indented for visual indent
                       phishing_type: PhishingType = PhishingType.UNKNOWN) -> PhishingReport:
                       ^
security/ai_agents/phishing_protection_agent.py:463:80: E501 line too long (93 > 79 characters)
                       phishing_type: PhishingType = PhishingType.UNKNOWN) -> PhishingReport:
                                                                               ^
security/ai_agents/phishing_protection_agent.py:473:1: W293 blank line contains whitespace
        
^
security/ai_agents/phishing_protection_agent.py:482:1: W293 blank line contains whitespace
        
^
security/ai_agents/phishing_protection_agent.py:491:1: W293 blank line contains whitespace
        
^
security/ai_agents/phishing_protection_agent.py:495:80: E501 line too long (88 > 79 characters)
            stats["by_type"][phishing_type] = stats["by_type"].get(phishing_type, 0) + 1
                                                                               ^
security/ai_agents/phishing_protection_agent.py:496:1: W293 blank line contains whitespace
            
^
security/ai_agents/phishing_protection_agent.py:499:80: E501 line too long (102 > 79 characters)
            stats["by_threat_level"][threat_level] = stats["by_threat_level"].get(threat_level, 0) + 1
                                                                               ^
security/ai_agents/phishing_protection_agent.py:500:1: W293 blank line contains whitespace
            
^
security/ai_agents/phishing_protection_agent.py:504:1: W293 blank line contains whitespace
        
^
security/ai_agents/phishing_protection_agent.py:507:80: E501 line too long (80 > 79 characters)
    def get_recent_detections(self, hours: int = 24) -> List[PhishingDetection]:
                                                                               ^
security/ai_agents/phishing_protection_agent.py:511:1: W293 blank line contains whitespace
        
^
security/ai_agents/phishing_protection_agent.py:513:80: E501 line too long (82 > 79 characters)
            detected_time = datetime.datetime.fromisoformat(detection.detected_at)
                                                                               ^
security/ai_agents/phishing_protection_agent.py:516:1: W293 blank line contains whitespace
        
^
security/ai_agents/phishing_protection_agent.py:519:80: E501 line too long (83 > 79 characters)
    def simulate_phishing_detection(self, source: str, phishing_type: PhishingType, 
                                                                               ^
security/ai_agents/phishing_protection_agent.py:519:84: W291 trailing whitespace
    def simulate_phishing_detection(self, source: str, phishing_type: PhishingType, 
                                                                                   ^
security/ai_agents/phishing_protection_agent.py:520:35: E128 continuation line under-indented for visual indent
                                  threat_level: ThreatLevel, confidence: float = 0.8):
                                  ^
security/ai_agents/phishing_protection_agent.py:520:80: E501 line too long (86 > 79 characters)
                                  threat_level: ThreatLevel, confidence: float = 0.8):
                                                                               ^
security/ai_agents/phishing_protection_agent.py:532:1: W293 blank line contains whitespace
        
^
security/ai_agents/phishing_protection_agent.py:534:80: E501 line too long (84 > 79 characters)
        print(f"Симулировано обнаружение фишинга: {source} - {phishing_type.value}")
                                                                               ^
security/ai_agents/phishing_protection_agent.py:555:21: W292 no newline at end of file
        return False                    ^
security/ai_agents/report_manager.py:15:1: F401 'typing.Union' imported but unused
from typing import Dict, List, Optional, Any, Union
^
security/ai_agents/report_manager.py:20:1: F401 'numpy as np' imported but unused
import numpy as np
^
security/ai_agents/report_manager.py:22:1: F401 'matplotlib.pyplot as plt' imported but unused
import matplotlib.pyplot as plt
^
security/ai_agents/report_manager.py:23:1: F401 'seaborn as sns' imported but unused
import seaborn as sns
^
security/ai_agents/report_manager.py:24:1: F401 'plotly.graph_objects as go' imported but unused
import plotly.graph_objects as go
^
security/ai_agents/report_manager.py:25:1: F401 'plotly.express as px' imported but unused
import plotly.express as px
^
security/ai_agents/report_manager.py:26:1: F401 'plotly.subplots.make_subplots' imported but unused
from plotly.subplots import make_subplots
^
security/ai_agents/report_manager.py:29:1: F401 'core.security_base.SecurityEvent' imported but unused
from core.security_base import SecurityEvent, IncidentSeverity
^
security/ai_agents/report_manager.py:29:1: F401 'core.security_base.IncidentSeverity' imported but unused
from core.security_base import SecurityEvent, IncidentSeverity
^
security/ai_agents/report_manager.py:296:80: E501 line too long (80 > 79 characters)
    def _generate_summary_section(self, data: Dict[str, Any]) -> Dict[str, Any]:
                                                                               ^
security/ai_agents/report_manager.py:306:80: E501 line too long (82 > 79 characters)
    def _generate_incidents_section(self, data: Dict[str, Any]) -> Dict[str, Any]:
                                                                               ^
security/ai_agents/report_manager.py:316:80: E501 line too long (80 > 79 characters)
    def _generate_threats_section(self, data: Dict[str, Any]) -> Dict[str, Any]:
                                                                               ^
security/ai_agents/report_manager.py:326:80: E501 line too long (84 > 79 characters)
    def _generate_performance_section(self, data: Dict[str, Any]) -> Dict[str, Any]:
                                                                               ^
security/ai_agents/report_manager.py:345:80: E501 line too long (82 > 79 characters)
    def _generate_anomalies_section(self, data: Dict[str, Any]) -> Dict[str, Any]:
                                                                               ^
security/ai_agents/report_manager.py:355:80: E501 line too long (88 > 79 characters)
    def _generate_recommendations_section(self, data: Dict[str, Any]) -> Dict[str, Any]:
                                                                               ^
security/ai_agents/report_manager.py:361:80: E501 line too long (85 > 79 characters)
            "implemented": len([r for r in recommendations if r.get("implemented")]),
                                                                               ^
security/ai_agents/report_manager.py:362:80: E501 line too long (84 > 79 characters)
            "pending": len([r for r in recommendations if not r.get("implemented")])
                                                                               ^
security/ai_agents/report_manager.py:365:80: E501 line too long (83 > 79 characters)
    def _generate_compliance_section(self, data: Dict[str, Any]) -> Dict[str, Any]:
                                                                               ^
security/ai_agents/report_manager.py:375:80: E501 line too long (83 > 79 characters)
    def _generate_violations_section(self, data: Dict[str, Any]) -> Dict[str, Any]:
                                                                               ^
security/ai_agents/report_manager.py:385:80: E501 line too long (85 > 79 characters)
    def _generate_improvements_section(self, data: Dict[str, Any]) -> Dict[str, Any]:
                                                                               ^
security/ai_agents/report_manager.py:390:80: E501 line too long (82 > 79 characters)
            "implemented": len([i for i in improvements if i.get("implemented")]),
                                                                               ^
security/ai_agents/report_manager.py:391:80: E501 line too long (82 > 79 characters)
            "in_progress": len([i for i in improvements if i.get("in_progress")]),
                                                                               ^
security/ai_agents/report_manager.py:395:80: E501 line too long (89 > 79 characters)
    def _generate_incident_details_section(self, data: Dict[str, Any]) -> Dict[str, Any]:
                                                                               ^
security/ai_agents/report_manager.py:408:80: E501 line too long (81 > 79 characters)
    def _generate_timeline_section(self, data: Dict[str, Any]) -> Dict[str, Any]:
                                                                               ^
security/ai_agents/report_manager.py:427:80: E501 line too long (83 > 79 characters)
    def _generate_resolution_section(self, data: Dict[str, Any]) -> Dict[str, Any]:
                                                                               ^
security/ai_agents/report_manager.py:610:80: E501 line too long (80 > 79 characters)
    def _count_by_severity(self, items: List[Dict[str, Any]]) -> Dict[str, int]:
                                                                               ^
security/ai_agents/report_manager.py:626:80: E501 line too long (80 > 79 characters)
    def _count_by_category(self, items: List[Dict[str, Any]]) -> Dict[str, int]:
                                                                               ^
security/ai_agents/report_manager.py:634:80: E501 line too long (82 > 79 characters)
    def _count_by_risk_level(self, items: List[Dict[str, Any]]) -> Dict[str, int]:
                                                                               ^
security/ai_agents/report_manager.py:642:80: E501 line too long (80 > 79 characters)
    def _count_by_priority(self, items: List[Dict[str, Any]]) -> Dict[str, int]:
                                                                               ^
security/ai_agents/report_manager.py:665:80: E501 line too long (90 > 79 characters)
    def _extract_milestones(self, timeline: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
                                                                               ^
security/ai_agents/report_manager.py:719:1: W293 blank line contains whitespace
        
^
security/ai_agents/report_manager.py:729:1: W293 blank line contains whitespace
        
^
security/ai_agents/report_manager.py:741:80: E501 line too long (86 > 79 characters)
    def _flatten_data(self, data: Dict[str, Any], prefix: str = "") -> Dict[str, Any]:
                                                                               ^
security/ai_agents/report_manager.py:768:80: E501 line too long (84 > 79 characters)
        html = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <title>{report.title}</title>
            <meta charset="utf-8">
            <style>
                body {{ font-family: Arial, sans-serif; margin: 20px; }}
                .header {{ background-color: #f0f0f0; padding: 20px; }}
                .section {{ margin: 20px 0; }}
                .chart {{ margin: 20px 0; }}
                table {{ border-collapse: collapse; width: 100%; }}
                th, td {{ border: 1px solid #ddd; padding: 8px; text-align: left; }}
                th {{ background-color: #f2f2f2; }}
            </style>
        </head>
        <body>
            <div class="header">
                <h1>{report.title}</h1>
                <p>Тип: {report.report_type.value}</p>
                <p>Создан: {report.created_at.strftime('%Y-%m-%d %H:%M:%S')}</p>
            </div>
            
            <div class="section">
                <h2>Сводка</h2>
                <p>{report.summary}</p>
            </div>
            
            <div class="section">
                <h2>Данные</h2>
                <pre>{json.dumps(report.data, ensure_ascii=False, indent=2)}</pre>
            </div>
        </body>
        </html>
        """
                   
                       
              
              
     ^
security/ai_agents/report_manager.py:776:80: E501 line too long (80 > 79 characters)
        html = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <title>{report.title}</title>
            <meta charset="utf-8">
            <style>
                body {{ font-family: Arial, sans-serif; margin: 20px; }}
                .header {{ background-color: #f0f0f0; padding: 20px; }}
                .section {{ margin: 20px 0; }}
                .chart {{ margin: 20px 0; }}
                table {{ border-collapse: collapse; width: 100%; }}
                th, td {{ border: 1px solid #ddd; padding: 8px; text-align: left; }}
                th {{ background-color: #f2f2f2; }}
            </style>
        </head>
        <body>
            <div class="header">
                <h1>{report.title}</h1>
                <p>Тип: {report.report_type.value}</p>
                <p>Создан: {report.created_at.strftime('%Y-%m-%d %H:%M:%S')}</p>
            </div>
            
            <div class="section">
                <h2>Сводка</h2>
                <p>{report.summary}</p>
            </div>
            
            <div class="section">
                <h2>Данные</h2>
                <pre>{json.dumps(report.data, ensure_ascii=False, indent=2)}</pre>
            </div>
        </body>
        </html>
        """
                   
                       
              
              
     ^
security/ai_agents/report_manager.py:778:1: W293 blank line contains whitespace
        html = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <title>{report.title}</title>
            <meta charset="utf-8">
            <style>
                body {{ font-family: Arial, sans-serif; margin: 20px; }}
                .header {{ background-color: #f0f0f0; padding: 20px; }}
                .section {{ margin: 20px 0; }}
                .chart {{ margin: 20px 0; }}
                table {{ border-collapse: collapse; width: 100%; }}
                th, td {{ border: 1px solid #ddd; padding: 8px; text-align: left; }}
                th {{ background-color: #f2f2f2; }}
            </style>
        </head>
        <body>
            <div class="header">
                <h1>{report.title}</h1>
                <p>Тип: {report.report_type.value}</p>
                <p>Создан: {report.created_at.strftime('%Y-%m-%d %H:%M:%S')}</p>
            </div>
            
            <div class="section">
                <h2>Сводка</h2>
                <p>{report.summary}</p>
            </div>
            
            <div class="section">
                <h2>Данные</h2>
                <pre>{json.dumps(report.data, ensure_ascii=False, indent=2)}</pre>
            </div>
        </body>
        </html>
        """
^
security/ai_agents/report_manager.py:783:1: W293 blank line contains whitespace
        html = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <title>{report.title}</title>
            <meta charset="utf-8">
            <style>
                body {{ font-family: Arial, sans-serif; margin: 20px; }}
                .header {{ background-color: #f0f0f0; padding: 20px; }}
                .section {{ margin: 20px 0; }}
                .chart {{ margin: 20px 0; }}
                table {{ border-collapse: collapse; width: 100%; }}
                th, td {{ border: 1px solid #ddd; padding: 8px; text-align: left; }}
                th {{ background-color: #f2f2f2; }}
            </style>
        </head>
        <body>
            <div class="header">
                <h1>{report.title}</h1>
                <p>Тип: {report.report_type.value}</p>
                <p>Создан: {report.created_at.strftime('%Y-%m-%d %H:%M:%S')}</p>
            </div>
            
            <div class="section">
                <h2>Сводка</h2>
                <p>{report.summary}</p>
            </div>
            
            <div class="section">
                <h2>Данные</h2>
                <pre>{json.dumps(report.data, ensure_ascii=False, indent=2)}</pre>
            </div>
        </body>
        </html>
        """
^
security/ai_agents/report_manager.py:786:80: E501 line too long (82 > 79 characters)
        html = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <title>{report.title}</title>
            <meta charset="utf-8">
            <style>
                body {{ font-family: Arial, sans-serif; margin: 20px; }}
                .header {{ background-color: #f0f0f0; padding: 20px; }}
                .section {{ margin: 20px 0; }}
                .chart {{ margin: 20px 0; }}
                table {{ border-collapse: collapse; width: 100%; }}
                th, td {{ border: 1px solid #ddd; padding: 8px; text-align: left; }}
                th {{ background-color: #f2f2f2; }}
            </style>
        </head>
        <body>
            <div class="header">
                <h1>{report.title}</h1>
                <p>Тип: {report.report_type.value}</p>
                <p>Создан: {report.created_at.strftime('%Y-%m-%d %H:%M:%S')}</p>
            </div>
            
            <div class="section">
                <h2>Сводка</h2>
                <p>{report.summary}</p>
            </div>
            
            <div class="section">
                <h2>Данные</h2>
                <pre>{json.dumps(report.data, ensure_ascii=False, indent=2)}</pre>
            </div>
        </body>
        </html>
        """
                   
                       
              
              
     ^
security/ai_agents/report_manager.py:804:1: W293 blank line contains whitespace
        
^
security/ai_agents/report_manager.py:807:1: W293 blank line contains whitespace
        
^
security/ai_agents/report_manager.py:810:1: W293 blank line contains whitespace
        
^
security/ai_agents/report_manager.py:829:1: W293 blank line contains whitespace
        
^
security/ai_agents/report_manager.py:832:1: W293 blank line contains whitespace
        
^
security/ai_agents/report_manager.py:851:1: W293 blank line contains whitespace
        
^
security/ai_agents/report_manager.py:854:1: W293 blank line contains whitespace
        
^
security/ai_agents/report_manager.py:860:1: W293 blank line contains whitespace
        
^
security/ai_agents/report_manager.py:866:1: W293 blank line contains whitespace
        
^
security/ai_agents/report_manager.py:872:1: W293 blank line contains whitespace
        
^
security/ai_agents/report_manager.py:880:10: W292 no newline at end of file
        }         ^
security/ai_agents/report_manager_new.py:15:1: F401 'typing.Union' imported but unused
from typing import Dict, List, Optional, Any, Union
^
security/ai_agents/report_manager_new.py:20:1: F401 'numpy as np' imported but unused
import numpy as np
^
security/ai_agents/report_manager_new.py:22:1: F401 'matplotlib.pyplot as plt' imported but unused
import matplotlib.pyplot as plt
^
security/ai_agents/report_manager_new.py:23:1: F401 'seaborn as sns' imported but unused
import seaborn as sns
^
security/ai_agents/report_manager_new.py:24:1: F401 'plotly.graph_objects as go' imported but unused
import plotly.graph_objects as go
^
security/ai_agents/report_manager_new.py:25:1: F401 'plotly.express as px' imported but unused
import plotly.express as px
^
security/ai_agents/report_manager_new.py:26:1: F401 'plotly.subplots.make_subplots' imported but unused
from plotly.subplots import make_subplots
^
security/ai_agents/report_manager_new.py:29:1: F401 'core.security_base.SecurityEvent' imported but unused
from core.security_base import SecurityEvent, IncidentSeverity
^
security/ai_agents/report_manager_new.py:29:1: F401 'core.security_base.IncidentSeverity' imported but unused
from core.security_base import SecurityEvent, IncidentSeverity
^
security/ai_agents/report_manager_new.py:296:80: E501 line too long (80 > 79 characters)
    def _generate_summary_section(self, data: Dict[str, Any]) -> Dict[str, Any]:
                                                                               ^
security/ai_agents/report_manager_new.py:306:80: E501 line too long (82 > 79 characters)
    def _generate_incidents_section(self, data: Dict[str, Any]) -> Dict[str, Any]:
                                                                               ^
security/ai_agents/report_manager_new.py:316:80: E501 line too long (80 > 79 characters)
    def _generate_threats_section(self, data: Dict[str, Any]) -> Dict[str, Any]:
                                                                               ^
security/ai_agents/report_manager_new.py:326:80: E501 line too long (84 > 79 characters)
    def _generate_performance_section(self, data: Dict[str, Any]) -> Dict[str, Any]:
                                                                               ^
security/ai_agents/report_manager_new.py:345:80: E501 line too long (82 > 79 characters)
    def _generate_anomalies_section(self, data: Dict[str, Any]) -> Dict[str, Any]:
                                                                               ^
security/ai_agents/report_manager_new.py:355:80: E501 line too long (88 > 79 characters)
    def _generate_recommendations_section(self, data: Dict[str, Any]) -> Dict[str, Any]:
                                                                               ^
security/ai_agents/report_manager_new.py:361:80: E501 line too long (85 > 79 characters)
            "implemented": len([r for r in recommendations if r.get("implemented")]),
                                                                               ^
security/ai_agents/report_manager_new.py:362:80: E501 line too long (84 > 79 characters)
            "pending": len([r for r in recommendations if not r.get("implemented")])
                                                                               ^
security/ai_agents/report_manager_new.py:365:80: E501 line too long (83 > 79 characters)
    def _generate_compliance_section(self, data: Dict[str, Any]) -> Dict[str, Any]:
                                                                               ^
security/ai_agents/report_manager_new.py:375:80: E501 line too long (83 > 79 characters)
    def _generate_violations_section(self, data: Dict[str, Any]) -> Dict[str, Any]:
                                                                               ^
security/ai_agents/report_manager_new.py:385:80: E501 line too long (85 > 79 characters)
    def _generate_improvements_section(self, data: Dict[str, Any]) -> Dict[str, Any]:
                                                                               ^
security/ai_agents/report_manager_new.py:390:80: E501 line too long (82 > 79 characters)
            "implemented": len([i for i in improvements if i.get("implemented")]),
                                                                               ^
security/ai_agents/report_manager_new.py:391:80: E501 line too long (82 > 79 characters)
            "in_progress": len([i for i in improvements if i.get("in_progress")]),
                                                                               ^
security/ai_agents/report_manager_new.py:395:80: E501 line too long (89 > 79 characters)
    def _generate_incident_details_section(self, data: Dict[str, Any]) -> Dict[str, Any]:
                                                                               ^
security/ai_agents/report_manager_new.py:408:80: E501 line too long (81 > 79 characters)
    def _generate_timeline_section(self, data: Dict[str, Any]) -> Dict[str, Any]:
                                                                               ^
security/ai_agents/report_manager_new.py:427:80: E501 line too long (83 > 79 characters)
    def _generate_resolution_section(self, data: Dict[str, Any]) -> Dict[str, Any]:
                                                                               ^
security/ai_agents/report_manager_new.py:610:80: E501 line too long (80 > 79 characters)
    def _count_by_severity(self, items: List[Dict[str, Any]]) -> Dict[str, int]:
                                                                               ^
security/ai_agents/report_manager_new.py:626:80: E501 line too long (80 > 79 characters)
    def _count_by_category(self, items: List[Dict[str, Any]]) -> Dict[str, int]:
                                                                               ^
security/ai_agents/report_manager_new.py:634:80: E501 line too long (82 > 79 characters)
    def _count_by_risk_level(self, items: List[Dict[str, Any]]) -> Dict[str, int]:
                                                                               ^
security/ai_agents/report_manager_new.py:642:80: E501 line too long (80 > 79 characters)
    def _count_by_priority(self, items: List[Dict[str, Any]]) -> Dict[str, int]:
                                                                               ^
security/ai_agents/report_manager_new.py:665:80: E501 line too long (90 > 79 characters)
    def _extract_milestones(self, timeline: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
                                                                               ^
security/ai_agents/report_manager_new.py:719:1: W293 blank line contains whitespace
        
^
security/ai_agents/report_manager_new.py:729:1: W293 blank line contains whitespace
        
^
security/ai_agents/report_manager_new.py:741:80: E501 line too long (86 > 79 characters)
    def _flatten_data(self, data: Dict[str, Any], prefix: str = "") -> Dict[str, Any]:
                                                                               ^
security/ai_agents/report_manager_new.py:768:80: E501 line too long (84 > 79 characters)
        html = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <title>{report.title}</title>
            <meta charset="utf-8">
            <style>
                body {{ font-family: Arial, sans-serif; margin: 20px; }}
                .header {{ background-color: #f0f0f0; padding: 20px; }}
                .section {{ margin: 20px 0; }}
                .chart {{ margin: 20px 0; }}
                table {{ border-collapse: collapse; width: 100%; }}
                th, td {{ border: 1px solid #ddd; padding: 8px; text-align: left; }}
                th {{ background-color: #f2f2f2; }}
            </style>
        </head>
        <body>
            <div class="header">
                <h1>{report.title}</h1>
                <p>Тип: {report.report_type.value}</p>
                <p>Создан: {report.created_at.strftime('%Y-%m-%d %H:%M:%S')}</p>
            </div>
            
            <div class="section">
                <h2>Сводка</h2>
                <p>{report.summary}</p>
            </div>
            
            <div class="section">
                <h2>Данные</h2>
                <pre>{json.dumps(report.data, ensure_ascii=False, indent=2)}</pre>
            </div>
        </body>
        </html>
        """
                   
                       
              
              
     ^
security/ai_agents/report_manager_new.py:776:80: E501 line too long (80 > 79 characters)
        html = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <title>{report.title}</title>
            <meta charset="utf-8">
            <style>
                body {{ font-family: Arial, sans-serif; margin: 20px; }}
                .header {{ background-color: #f0f0f0; padding: 20px; }}
                .section {{ margin: 20px 0; }}
                .chart {{ margin: 20px 0; }}
                table {{ border-collapse: collapse; width: 100%; }}
                th, td {{ border: 1px solid #ddd; padding: 8px; text-align: left; }}
                th {{ background-color: #f2f2f2; }}
            </style>
        </head>
        <body>
            <div class="header">
                <h1>{report.title}</h1>
                <p>Тип: {report.report_type.value}</p>
                <p>Создан: {report.created_at.strftime('%Y-%m-%d %H:%M:%S')}</p>
            </div>
            
            <div class="section">
                <h2>Сводка</h2>
                <p>{report.summary}</p>
            </div>
            
            <div class="section">
                <h2>Данные</h2>
                <pre>{json.dumps(report.data, ensure_ascii=False, indent=2)}</pre>
            </div>
        </body>
        </html>
        """
                   
                       
              
              
     ^
security/ai_agents/report_manager_new.py:778:1: W293 blank line contains whitespace
        html = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <title>{report.title}</title>
            <meta charset="utf-8">
            <style>
                body {{ font-family: Arial, sans-serif; margin: 20px; }}
                .header {{ background-color: #f0f0f0; padding: 20px; }}
                .section {{ margin: 20px 0; }}
                .chart {{ margin: 20px 0; }}
                table {{ border-collapse: collapse; width: 100%; }}
                th, td {{ border: 1px solid #ddd; padding: 8px; text-align: left; }}
                th {{ background-color: #f2f2f2; }}
            </style>
        </head>
        <body>
            <div class="header">
                <h1>{report.title}</h1>
                <p>Тип: {report.report_type.value}</p>
                <p>Создан: {report.created_at.strftime('%Y-%m-%d %H:%M:%S')}</p>
            </div>
            
            <div class="section">
                <h2>Сводка</h2>
                <p>{report.summary}</p>
            </div>
            
            <div class="section">
                <h2>Данные</h2>
                <pre>{json.dumps(report.data, ensure_ascii=False, indent=2)}</pre>
            </div>
        </body>
        </html>
        """
^
security/ai_agents/report_manager_new.py:783:1: W293 blank line contains whitespace
        html = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <title>{report.title}</title>
            <meta charset="utf-8">
            <style>
                body {{ font-family: Arial, sans-serif; margin: 20px; }}
                .header {{ background-color: #f0f0f0; padding: 20px; }}
                .section {{ margin: 20px 0; }}
                .chart {{ margin: 20px 0; }}
                table {{ border-collapse: collapse; width: 100%; }}
                th, td {{ border: 1px solid #ddd; padding: 8px; text-align: left; }}
                th {{ background-color: #f2f2f2; }}
            </style>
        </head>
        <body>
            <div class="header">
                <h1>{report.title}</h1>
                <p>Тип: {report.report_type.value}</p>
                <p>Создан: {report.created_at.strftime('%Y-%m-%d %H:%M:%S')}</p>
            </div>
            
            <div class="section">
                <h2>Сводка</h2>
                <p>{report.summary}</p>
            </div>
            
            <div class="section">
                <h2>Данные</h2>
                <pre>{json.dumps(report.data, ensure_ascii=False, indent=2)}</pre>
            </div>
        </body>
        </html>
        """
^
security/ai_agents/report_manager_new.py:786:80: E501 line too long (82 > 79 characters)
        html = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <title>{report.title}</title>
            <meta charset="utf-8">
            <style>
                body {{ font-family: Arial, sans-serif; margin: 20px; }}
                .header {{ background-color: #f0f0f0; padding: 20px; }}
                .section {{ margin: 20px 0; }}
                .chart {{ margin: 20px 0; }}
                table {{ border-collapse: collapse; width: 100%; }}
                th, td {{ border: 1px solid #ddd; padding: 8px; text-align: left; }}
                th {{ background-color: #f2f2f2; }}
            </style>
        </head>
        <body>
            <div class="header">
                <h1>{report.title}</h1>
                <p>Тип: {report.report_type.value}</p>
                <p>Создан: {report.created_at.strftime('%Y-%m-%d %H:%M:%S')}</p>
            </div>
            
            <div class="section">
                <h2>Сводка</h2>
                <p>{report.summary}</p>
            </div>
            
            <div class="section">
                <h2>Данные</h2>
                <pre>{json.dumps(report.data, ensure_ascii=False, indent=2)}</pre>
            </div>
        </body>
        </html>
        """
                   
                       
              
              
     ^
security/ai_agents/report_manager_new.py:804:1: W293 blank line contains whitespace
        
^
security/ai_agents/report_manager_new.py:807:1: W293 blank line contains whitespace
        
^
security/ai_agents/report_manager_new.py:810:1: W293 blank line contains whitespace
        
^
security/ai_agents/report_manager_new.py:829:1: W293 blank line contains whitespace
        
^
security/ai_agents/report_manager_new.py:832:1: W293 blank line contains whitespace
        
^
security/ai_agents/report_manager_new.py:851:1: W293 blank line contains whitespace
        
^
security/ai_agents/report_manager_new.py:854:1: W293 blank line contains whitespace
        
^
security/ai_agents/report_manager_new.py:860:1: W293 blank line contains whitespace
        
^
security/ai_agents/report_manager_new.py:866:1: W293 blank line contains whitespace
        
^
security/ai_agents/report_manager_new.py:872:1: W293 blank line contains whitespace
        
^
security/ai_agents/report_manager_new.py:880:10: W292 no newline at end of file
        }         ^
security/ai_agents/smart_notification_manager.py:19:1: F401 'typing.Tuple' imported but unused
from typing import Dict, List, Optional, Any, Tuple, Callable
^
security/ai_agents/smart_notification_manager.py:19:1: F401 'typing.Callable' imported but unused
from typing import Dict, List, Optional, Any, Tuple, Callable
^
security/ai_agents/smart_notification_manager.py:29:5: F401 'config.color_scheme.MatrixAIColorScheme' imported but unused
    from config.color_scheme import MatrixAIColorScheme, ColorTheme
    ^
security/ai_agents/smart_notification_manager.py:29:5: F401 'config.color_scheme.ColorTheme' imported but unused
    from config.color_scheme import MatrixAIColorScheme, ColorTheme
    ^
security/ai_agents/smart_notification_manager.py:111:80: E501 line too long (94 > 79 characters)
            description="AI-менеджер умных уведомлений с анализом контекста и персонализацией"
                                                                               ^
security/ai_agents/smart_notification_manager.py:160:80: E501 line too long (85 > 79 characters)
                    "channels": [NotificationChannel.PUSH, NotificationChannel.EMAIL]
                                                                               ^
security/ai_agents/smart_notification_manager.py:166:80: E501 line too long (89 > 79 characters)
                    "channels": [NotificationChannel.PUSH, NotificationChannel.MESSENGER]
                                                                               ^
security/ai_agents/smart_notification_manager.py:172:80: E501 line too long (110 > 79 characters)
                    "channels": [NotificationChannel.PUSH, NotificationChannel.SMS, NotificationChannel.VOICE]
                                                                               ^
security/ai_agents/smart_notification_manager.py:178:80: E501 line too long (91 > 79 characters)
                    "channels": [NotificationChannel.IN_APP, NotificationChannel.DASHBOARD]
                                                                               ^
security/ai_agents/smart_notification_manager.py:184:80: E501 line too long (86 > 79 characters)
                    "channels": [NotificationChannel.PUSH, NotificationChannel.IN_APP]
                                                                               ^
security/ai_agents/smart_notification_manager.py:190:80: E501 line too long (85 > 79 characters)
                    "channels": [NotificationChannel.PUSH, NotificationChannel.EMAIL]
                                                                               ^
security/ai_agents/smart_notification_manager.py:202:80: E501 line too long (86 > 79 characters)
                    "channels": [NotificationChannel.IN_APP, NotificationChannel.PUSH]
                                                                               ^
security/ai_agents/smart_notification_manager.py:295:80: E501 line too long (84 > 79 characters)
            self.logger.info("Компоненты SmartNotificationManager инициализированы")
                                                                               ^
security/ai_agents/smart_notification_manager.py:348:80: E501 line too long (82 > 79 characters)
                                  priority: Optional[NotificationPriority] = None,
                                                                               ^
security/ai_agents/smart_notification_manager.py:349:80: E501 line too long (87 > 79 characters)
                                  channels: Optional[List[NotificationChannel]] = None,
                                                                               ^
security/ai_agents/smart_notification_manager.py:350:80: E501 line too long (97 > 79 characters)
                                  context: Optional[Dict[str, Any]] = None) -> SmartNotification:
                                                                               ^
security/ai_agents/smart_notification_manager.py:359:80: E501 line too long (80 > 79 characters)
            priority = priority or self._get_default_priority(notification_type)
                                                                               ^
security/ai_agents/smart_notification_manager.py:360:80: E501 line too long (80 > 79 characters)
            channels = channels or self._get_default_channels(notification_type)
                                                                               ^
security/ai_agents/smart_notification_manager.py:363:80: E501 line too long (87 > 79 characters)
            template = self.config["notification_templates"].get(notification_type, {})
                                                                               ^
security/ai_agents/smart_notification_manager.py:371:80: E501 line too long (89 > 79 characters)
            personalization = await self.personalization_engine.personalize_notification(
                                                                               ^
security/ai_agents/smart_notification_manager.py:381:80: E501 line too long (89 > 79 characters)
            title, personalized_message = await self.template_generator.generate_content(
                                                                               ^
security/ai_agents/smart_notification_manager.py:424:80: E501 line too long (89 > 79 characters)
        random_part = hashlib.md5(f"{timestamp}{os.urandom(8)}".encode()).hexdigest()[:8]
                                                                               ^
security/ai_agents/smart_notification_manager.py:427:80: E501 line too long (97 > 79 characters)
    def _get_default_priority(self, notification_type: NotificationType) -> NotificationPriority:
                                                                               ^
security/ai_agents/smart_notification_manager.py:441:80: E501 line too long (102 > 79 characters)
    def _get_default_channels(self, notification_type: NotificationType) -> List[NotificationChannel]:
                                                                               ^
security/ai_agents/smart_notification_manager.py:443:80: E501 line too long (83 > 79 characters)
        template = self.config["notification_templates"].get(notification_type, {})
                                                                               ^
security/ai_agents/smart_notification_manager.py:446:80: E501 line too long (81 > 79 characters)
    async def _queue_notification(self, notification: SmartNotification) -> None:
                                                                               ^
security/ai_agents/smart_notification_manager.py:455:80: E501 line too long (84 > 79 characters)
            self.logger.debug(f"Уведомление добавлено в очередь: {notification.id}")
                                                                               ^
security/ai_agents/smart_notification_manager.py:468:80: E501 line too long (89 > 79 characters)
            self.processing_thread = threading.Thread(target=self._process_notifications)
                                                                               ^
security/ai_agents/smart_notification_manager.py:486:80: E501 line too long (80 > 79 characters)
                    asyncio.run(self._process_single_notification(notification))
                                                                               ^
security/ai_agents/smart_notification_manager.py:501:80: E501 line too long (90 > 79 characters)
    async def _process_single_notification(self, notification: SmartNotification) -> None:
                                                                               ^
security/ai_agents/smart_notification_manager.py:505:80: E501 line too long (88 > 79 characters)
            if notification.scheduled_at and notification.scheduled_at > datetime.now():
                                                                               ^
security/ai_agents/smart_notification_manager.py:515:80: E501 line too long (85 > 79 characters)
            self.logger.error(f"Ошибка обработки уведомления {notification.id}: {e}")
                                                                               ^
security/ai_agents/smart_notification_manager.py:519:80: E501 line too long (80 > 79 characters)
    async def _send_notification(self, notification: SmartNotification) -> None:
                                                                               ^
security/ai_agents/smart_notification_manager.py:525:80: E501 line too long (87 > 79 characters)
                    await self.channel_manager.send_notification(notification, channel)
                                                                               ^
security/ai_agents/smart_notification_manager.py:526:80: E501 line too long (105 > 79 characters)
                    self.logger.debug(f"Уведомление отправлено через {channel.value}: {notification.id}")
                                                                               ^
security/ai_agents/smart_notification_manager.py:528:80: E501 line too long (84 > 79 characters)
                    self.logger.error(f"Ошибка отправки через {channel.value}: {e}")
                                                                               ^
security/ai_agents/smart_notification_manager.py:543:80: E501 line too long (80 > 79 characters)
    async def _save_notification(self, notification: SmartNotification) -> None:
                                                                               ^
security/ai_agents/smart_notification_manager.py:570:80: E501 line too long (109 > 79 characters)
                "scheduled_at": notification.scheduled_at.isoformat() if notification.scheduled_at else None,
                                                                               ^
security/ai_agents/smart_notification_manager.py:571:80: E501 line too long (94 > 79 characters)
                "sent_at": notification.sent_at.isoformat() if notification.sent_at else None,
                                                                               ^
security/ai_agents/smart_notification_manager.py:572:80: E501 line too long (94 > 79 characters)
                "read_at": notification.read_at.isoformat() if notification.read_at else None,
                                                                               ^
security/ai_agents/smart_notification_manager.py:573:80: E501 line too long (102 > 79 characters)
                "expires_at": notification.expires_at.isoformat() if notification.expires_at else None
                                                                               ^
security/ai_agents/smart_notification_manager.py:576:80: E501 line too long (80 > 79 characters)
            filename = f"data/notifications/notification_{notification.id}.json"
                                                                               ^
security/ai_agents/smart_notification_manager.py:826:80: E501 line too long (108 > 79 characters)
            total_checks = len(architectural_principles) + len(functionality) + len(security) + len(testing)
                                                                               ^
security/ai_agents/smart_notification_manager.py:840:80: E501 line too long (102 > 79 characters)
                "quality_grade": "A+" if quality_score >= 95 else "A" if quality_score >= 90 else "B",
                                                                               ^
security/ai_agents/smart_notification_manager.py:858:5: F811 redefinition of unused '_start_processing' from line 461
    async def _start_processing(self):
    ^
security/ai_agents/smart_notification_manager.py:865:80: E501 line too long (89 > 79 characters)
            self.processing_thread = threading.Thread(target=self._process_notifications)
                                                                               ^
security/ai_agents/smart_notification_manager.py:874:5: F811 redefinition of unused '_process_notifications' from line 477
    def _process_notifications(self):
    ^
security/ai_agents/smart_notification_manager.py:883:80: E501 line too long (80 > 79 characters)
                    asyncio.run(self._process_single_notification(notification))
                                                                               ^
security/ai_agents/smart_notification_manager.py:898:5: F811 redefinition of unused '_process_single_notification' from line 501
    async def _process_single_notification(self, notification: SmartNotification):
    ^
security/ai_agents/smart_notification_manager.py:898:80: E501 line too long (82 > 79 characters)
    async def _process_single_notification(self, notification: SmartNotification):
                                                                               ^
security/ai_agents/smart_notification_manager.py:902:80: E501 line too long (88 > 79 characters)
            if notification.scheduled_at and notification.scheduled_at > datetime.now():
                                                                               ^
security/ai_agents/smart_notification_manager.py:912:80: E501 line too long (85 > 79 characters)
            self.logger.error(f"Ошибка обработки уведомления {notification.id}: {e}")
                                                                               ^
security/ai_agents/smart_notification_manager.py:916:5: F811 redefinition of unused '_send_notification' from line 519
    async def _send_notification(self, notification: SmartNotification):
    ^
security/ai_agents/smart_notification_manager.py:922:80: E501 line too long (87 > 79 characters)
                    await self.channel_manager.send_notification(notification, channel)
                                                                               ^
security/ai_agents/smart_notification_manager.py:923:80: E501 line too long (105 > 79 characters)
                    self.logger.debug(f"Уведомление отправлено через {channel.value}: {notification.id}")
                                                                               ^
security/ai_agents/smart_notification_manager.py:925:80: E501 line too long (84 > 79 characters)
                    self.logger.error(f"Ошибка отправки через {channel.value}: {e}")
                                                                               ^
security/ai_agents/smart_notification_manager.py:940:5: F811 redefinition of unused '_save_notification' from line 543
    async def _save_notification(self, notification: SmartNotification):
    ^
security/ai_agents/smart_notification_manager.py:967:80: E501 line too long (109 > 79 characters)
                "scheduled_at": notification.scheduled_at.isoformat() if notification.scheduled_at else None,
                                                                               ^
security/ai_agents/smart_notification_manager.py:968:80: E501 line too long (94 > 79 characters)
                "sent_at": notification.sent_at.isoformat() if notification.sent_at else None,
                                                                               ^
security/ai_agents/smart_notification_manager.py:969:80: E501 line too long (94 > 79 characters)
                "read_at": notification.read_at.isoformat() if notification.read_at else None,
                                                                               ^
security/ai_agents/smart_notification_manager.py:970:80: E501 line too long (102 > 79 characters)
                "expires_at": notification.expires_at.isoformat() if notification.expires_at else None
                                                                               ^
security/ai_agents/smart_notification_manager.py:973:80: E501 line too long (80 > 79 characters)
            filename = f"data/notifications/notification_{notification.id}.json"
                                                                               ^
security/ai_agents/smart_notification_manager.py:983:5: F811 redefinition of unused 'get_notification_statistics' from line 586
    def get_notification_statistics(self) -> Dict[str, Any]:
    ^
security/ai_agents/smart_notification_manager.py:1021:5: F811 redefinition of unused 'test_smart_notification_manager' from line 624
    def test_smart_notification_manager(self) -> Dict[str, Any]:
    ^
security/ai_agents/smart_notification_manager.py:1149:5: F811 redefinition of unused 'generate_quality_report' from line 752
    def generate_quality_report(self) -> Dict[str, Any]:
    ^
security/ai_agents/smart_notification_manager.py:1223:80: E501 line too long (108 > 79 characters)
            total_checks = len(architectural_principles) + len(functionality) + len(security) + len(testing)
                                                                               ^
security/ai_agents/smart_notification_manager.py:1237:80: E501 line too long (102 > 79 characters)
                "quality_grade": "A+" if quality_score >= 95 else "A" if quality_score >= 90 else "B",
                                                                               ^
security/ai_agents/smart_notification_manager.py:1263:80: E501 line too long (87 > 79 characters)
    async def analyze_context(self, notification_type, message, target_users, context):
                                                                               ^
security/ai_agents/smart_notification_manager.py:1280:80: E501 line too long (100 > 79 characters)
    async def personalize_notification(self, notification_type, message, target_users, ai_analysis):
                                                                               ^
security/ai_agents/smart_notification_manager.py:1297:80: E501 line too long (92 > 79 characters)
    async def optimize_timing(self, target_users, notification_type, priority, ai_analysis):
                                                                               ^
security/ai_agents/smart_notification_manager.py:1324:80: E501 line too long (86 > 79 characters)
    async def generate_content(self, template, message, personalization, ai_analysis):
                                                                               ^
security/ai_agents/smart_notification_manager.py:1344:80: E501 line too long (90 > 79 characters)
    print(f"Тесты пройдены: {test_results['tests_passed']}/{test_results['total_tests']}")
                                                                               ^
security/ai_agents/smart_notification_manager.py:1348:80: E501 line too long (101 > 79 characters)
    print(f"Качество: {quality_report['quality_score']:.1f}/100 ({quality_report['quality_grade']})")
                                                                               ^
security/ai_agents/smart_notification_manager_extra.py:4:80: E501 line too long (86 > 79 characters)
"""
Smart Notification Manager Extra - Дополнительные функции умного менеджера уведомлений
"""
   
                                                                           ^
security/ai_agents/smart_notification_manager_extra.py:7:1: F401 'numpy as np' imported but unused
import numpy as np
^
security/ai_agents/smart_notification_manager_extra.py:9:1: F401 'time' imported but unused
import time
^
security/ai_agents/smart_notification_manager_extra.py:11:1: F401 'typing.Optional' imported but unused
from typing import Dict, Any, List, Optional
^
security/ai_agents/smart_notification_manager_extra.py:15:1: E302 expected 2 blank lines, found 1
class NotificationType(Enum):
^
security/ai_agents/smart_notification_manager_extra.py:23:1: E302 expected 2 blank lines, found 1
class NotificationPriority(Enum):
^
security/ai_agents/smart_notification_manager_extra.py:30:1: E302 expected 2 blank lines, found 1
class NotificationChannel(Enum):
^
security/ai_agents/smart_notification_manager_extra.py:38:1: E302 expected 2 blank lines, found 1
class NotificationStatus(Enum):
^
security/ai_agents/smart_notification_manager_extra.py:46:1: E302 expected 2 blank lines, found 1
@dataclass
^
security/ai_agents/smart_notification_manager_extra.py:54:1: E302 expected 2 blank lines, found 1
class SmartNotificationManagerExtra:
^
security/ai_agents/smart_notification_manager_extra.py:56:1: W293 blank line contains whitespace
    
^
security/ai_agents/smart_notification_manager_extra.py:58:80: E501 line too long (80 > 79 characters)
        self.logger = logging.getLogger("ALADDIN.SmartNotificationManagerExtra")
                                                                               ^
security/ai_agents/smart_notification_manager_extra.py:77:1: W293 blank line contains whitespace
    
^
security/ai_agents/smart_notification_manager_extra.py:94:1: W293 blank line contains whitespace
    
^
security/ai_agents/smart_notification_manager_extra.py:102:1: W293 blank line contains whitespace
            
^
security/ai_agents/smart_notification_manager_extra.py:104:80: E501 line too long (80 > 79 characters)
                "delivered_notifications": self.metrics.delivered_notifications,
                                                                               ^
security/ai_agents/smart_notification_manager_extra.py:112:45: F811 redefinition of unused 'np' from line 7
                "priorities": [np.value for np in NotificationPriority],
                                            ^
security/ai_agents/smart_notification_manager_extra.py:121:1: W293 blank line contains whitespace
    
^
security/ai_agents/smart_notification_manager_extra.py:127:80: E501 line too long (90 > 79 characters)
            return self.metrics.delivered_notifications / self.metrics.total_notifications
                                                                               ^
security/ai_agents/smart_notification_manager_extra.py:131:1: W293 blank line contains whitespace
    
^
security/ai_agents/smart_notification_manager_extra.py:137:80: E501 line too long (89 > 79 characters)
            return self.metrics.read_notifications / self.metrics.delivered_notifications
                                                                               ^
security/ai_agents/smart_notification_manager_extra.py:141:1: W293 blank line contains whitespace
    
^
security/ai_agents/smart_notification_manager_extra.py:147:80: E501 line too long (85 > 79 characters)
            return self.metrics.read_notifications / self.metrics.total_notifications
                                                                               ^
security/ai_agents/smart_notification_manager_extra.py:151:1: W293 blank line contains whitespace
    
^
security/ai_agents/smart_notification_manager_extra.py:152:80: E501 line too long (101 > 79 characters)
    def smart_route_notification(self, notification: Dict[str, Any], user_id: str) -> Dict[str, Any]:
                                                                               ^
security/ai_agents/smart_notification_manager_extra.py:156:1: W293 blank line contains whitespace
            
^
security/ai_agents/smart_notification_manager_extra.py:159:1: W293 blank line contains whitespace
            
^
security/ai_agents/smart_notification_manager_extra.py:162:1: W293 blank line contains whitespace
            
^
security/ai_agents/smart_notification_manager_extra.py:164:80: E501 line too long (93 > 79 characters)
            optimal_channel = self._select_optimal_channel(notification, user_prefs, context)
                                                                               ^
security/ai_agents/smart_notification_manager_extra.py:165:1: W293 blank line contains whitespace
            
^
security/ai_agents/smart_notification_manager_extra.py:168:1: W293 blank line contains whitespace
            
^
security/ai_agents/smart_notification_manager_extra.py:171:80: E501 line too long (80 > 79 characters)
                notification, user_prefs, context, optimal_channel, optimal_time
                                                                               ^
security/ai_agents/smart_notification_manager_extra.py:173:1: W293 blank line contains whitespace
            
^
security/ai_agents/smart_notification_manager_extra.py:185:1: W293 blank line contains whitespace
            
^
security/ai_agents/smart_notification_manager_extra.py:189:1: W293 blank line contains whitespace
    
^
security/ai_agents/smart_notification_manager_extra.py:196:80: E501 line too long (97 > 79 characters)
                    "preferred_channels": [NotificationChannel.PUSH, NotificationChannel.IN_APP],
                                                                               ^
security/ai_agents/smart_notification_manager_extra.py:202:1: W293 blank line contains whitespace
            
^
security/ai_agents/smart_notification_manager_extra.py:205:80: E501 line too long (81 > 79 characters)
            self.logger.error(f"Ошибка получения предпочтений пользователя: {e}")
                                                                               ^
security/ai_agents/smart_notification_manager_extra.py:207:1: W293 blank line contains whitespace
    
^
security/ai_agents/smart_notification_manager_extra.py:208:80: E501 line too long (92 > 79 characters)
    def _analyze_notification_context(self, notification: Dict[str, Any]) -> Dict[str, Any]:
                                                                               ^
security/ai_agents/smart_notification_manager_extra.py:214:80: E501 line too long (80 > 79 characters)
                "time_sensitivity": self._assess_time_sensitivity(notification),
                                                                               ^
security/ai_agents/smart_notification_manager_extra.py:217:1: W293 blank line contains whitespace
            
^
security/ai_agents/smart_notification_manager_extra.py:222:1: W293 blank line contains whitespace
    
^
security/ai_agents/smart_notification_manager_extra.py:228:1: W293 blank line contains whitespace
            
^
security/ai_agents/smart_notification_manager_extra.py:229:80: E501 line too long (87 > 79 characters)
            if priority == "critical" or "urgent" in content or "immediate" in content:
                                                                               ^
security/ai_agents/smart_notification_manager_extra.py:238:1: W293 blank line contains whitespace
    
^
security/ai_agents/smart_notification_manager_extra.py:243:1: W293 blank line contains whitespace
            
^
security/ai_agents/smart_notification_manager_extra.py:257:1: W293 blank line contains whitespace
    
^
security/ai_agents/smart_notification_manager_extra.py:262:1: W293 blank line contains whitespace
            
^
security/ai_agents/smart_notification_manager_extra.py:272:1: W293 blank line contains whitespace
    
^
security/ai_agents/smart_notification_manager_extra.py:273:68: W291 trailing whitespace
    def _select_optimal_channel(self, notification: Dict[str, Any], 
                                                                   ^
security/ai_agents/smart_notification_manager_extra.py:274:32: E128 continuation line under-indented for visual indent
                               user_prefs: Dict[str, Any], context: Dict[str, Any]) -> str:
                               ^
security/ai_agents/smart_notification_manager_extra.py:274:80: E501 line too long (91 > 79 characters)
                               user_prefs: Dict[str, Any], context: Dict[str, Any]) -> str:
                                                                               ^
security/ai_agents/smart_notification_manager_extra.py:279:1: W293 blank line contains whitespace
            
^
security/ai_agents/smart_notification_manager_extra.py:289:1: W293 blank line contains whitespace
                
^
security/ai_agents/smart_notification_manager_extra.py:293:1: W293 blank line contains whitespace
    
^
security/ai_agents/smart_notification_manager_extra.py:294:80: E501 line too long (95 > 79 characters)
    def _select_optimal_time(self, user_prefs: Dict[str, Any], context: Dict[str, Any]) -> str:
                                                                               ^
security/ai_agents/smart_notification_manager_extra.py:299:1: W293 blank line contains whitespace
            
^
security/ai_agents/smart_notification_manager_extra.py:304:80: E501 line too long (84 > 79 characters)
                quiet_hours = user_prefs.get("quiet_hours", {"start": 22, "end": 8})
                                                                               ^
security/ai_agents/smart_notification_manager_extra.py:306:1: W293 blank line contains whitespace
                
^
security/ai_agents/smart_notification_manager_extra.py:307:80: E501 line too long (93 > 79 characters)
                if quiet_hours["start"] <= current_hour or current_hour < quiet_hours["end"]:
                                                                               ^
security/ai_agents/smart_notification_manager_extra.py:311:1: W293 blank line contains whitespace
                    
^
security/ai_agents/smart_notification_manager_extra.py:315:1: W293 blank line contains whitespace
    
^
security/ai_agents/smart_notification_manager_extra.py:316:78: W291 trailing whitespace
    def _generate_routing_recommendations(self, notification: Dict[str, Any], 
                                                                             ^
security/ai_agents/smart_notification_manager_extra.py:317:41: E128 continuation line under-indented for visual indent
                                        user_prefs: Dict[str, Any], context: Dict[str, Any],
                                        ^
security/ai_agents/smart_notification_manager_extra.py:317:80: E501 line too long (92 > 79 characters)
                                        user_prefs: Dict[str, Any], context: Dict[str, Any],
                                                                               ^
security/ai_agents/smart_notification_manager_extra.py:318:41: E128 continuation line under-indented for visual indent
                                        optimal_channel: str, optimal_time: str) -> List[str]:
                                        ^
security/ai_agents/smart_notification_manager_extra.py:318:80: E501 line too long (94 > 79 characters)
                                        optimal_channel: str, optimal_time: str) -> List[str]:
                                                                               ^
security/ai_agents/smart_notification_manager_extra.py:322:1: W293 blank line contains whitespace
            
^
security/ai_agents/smart_notification_manager_extra.py:325:1: W293 blank line contains whitespace
            
^
security/ai_agents/smart_notification_manager_extra.py:327:80: E501 line too long (80 > 79 characters)
                recommendations.append("Дублировать через email для надежности")
                                                                               ^
security/ai_agents/smart_notification_manager_extra.py:328:1: W293 blank line contains whitespace
            
^
security/ai_agents/smart_notification_manager_extra.py:330:80: E501 line too long (91 > 79 characters)
                recommendations.append("Игнорировать тихие часы - критическое уведомление")
                                                                               ^
security/ai_agents/smart_notification_manager_extra.py:331:1: W293 blank line contains whitespace
            
^
security/ai_agents/smart_notification_manager_extra.py:334:1: W293 blank line contains whitespace
            
^
security/ai_agents/smart_notification_manager_extra.py:336:1: W293 blank line contains whitespace
            
^
security/ai_agents/smart_notification_manager_extra.py:340:1: W293 blank line contains whitespace
    
^
security/ai_agents/smart_notification_manager_extra.py:345:1: W293 blank line contains whitespace
            
^
security/ai_agents/smart_notification_manager_extra.py:348:1: W293 blank line contains whitespace
            
^
security/ai_agents/smart_notification_manager_extra.py:350:80: E501 line too long (87 > 79 characters)
            engagement_analysis = self._analyze_engagement_patterns(engagement_history)
                                                                               ^
security/ai_agents/smart_notification_manager_extra.py:351:1: W293 blank line contains whitespace
            
^
security/ai_agents/smart_notification_manager_extra.py:353:80: E501 line too long (85 > 79 characters)
            optimization_recommendations = self._generate_engagement_recommendations(
                                                                               ^
security/ai_agents/smart_notification_manager_extra.py:356:1: W293 blank line contains whitespace
            
^
security/ai_agents/smart_notification_manager_extra.py:366:1: W293 blank line contains whitespace
            
^
security/ai_agents/smart_notification_manager_extra.py:370:1: W293 blank line contains whitespace
    
^
security/ai_agents/smart_notification_manager_extra.py:371:80: E501 line too long (103 > 79 characters)
    def _analyze_engagement_patterns(self, engagement_history: List[Dict[str, Any]]) -> Dict[str, Any]:
                                                                               ^
security/ai_agents/smart_notification_manager_extra.py:376:1: W293 blank line contains whitespace
            
^
security/ai_agents/smart_notification_manager_extra.py:380:46: W291 trailing whitespace
                h for h in engagement_history 
                                             ^
security/ai_agents/smart_notification_manager_extra.py:381:80: E501 line too long (104 > 79 characters)
                if (datetime.now() - datetime.fromisoformat(h.get("timestamp", "2023-01-01"))).days <= 7
                                                                               ^
security/ai_agents/smart_notification_manager_extra.py:383:1: W293 blank line contains whitespace
            
^
security/ai_agents/smart_notification_manager_extra.py:384:80: E501 line too long (82 > 79 characters)
            score = min(1.0, recent_interactions / max(1, total_interactions) * 2)
                                                                               ^
security/ai_agents/smart_notification_manager_extra.py:385:1: W293 blank line contains whitespace
            
^
security/ai_agents/smart_notification_manager_extra.py:390:80: E501 line too long (82 > 79 characters)
                "patterns": ["regular_user" if score > 0.7 else "occasional_user"]
                                                                               ^
security/ai_agents/smart_notification_manager_extra.py:392:1: W293 blank line contains whitespace
            
^
security/ai_agents/smart_notification_manager_extra.py:396:1: W293 blank line contains whitespace
    
^
security/ai_agents/smart_notification_manager_extra.py:397:65: W291 trailing whitespace
    def _generate_engagement_recommendations(self, user_id: str, 
                                                                ^
security/ai_agents/smart_notification_manager_extra.py:398:44: E128 continuation line under-indented for visual indent
                                           engagement_analysis: Dict[str, Any]) -> List[str]:
                                           ^
security/ai_agents/smart_notification_manager_extra.py:398:80: E501 line too long (93 > 79 characters)
                                           engagement_analysis: Dict[str, Any]) -> List[str]:
                                                                               ^
security/ai_agents/smart_notification_manager_extra.py:403:1: W293 blank line contains whitespace
            
^
security/ai_agents/smart_notification_manager_extra.py:417:80: E501 line too long (102 > 79 characters)
                recommendations.append("Пользователь активно вовлечен - поддерживать текущий уровень")
                                                                               ^
security/ai_agents/smart_notification_manager_extra.py:418:1: W293 blank line contains whitespace
            
^
security/ai_agents/smart_notification_manager_extra.py:420:1: W293 blank line contains whitespace
            
^
security/ai_agents/smart_notification_manager_extra.py:422:80: E501 line too long (85 > 79 characters)
            self.logger.error(f"Ошибка генерации рекомендаций по вовлеченности: {e}")
                                                                               ^
security/ai_agents/smart_notification_manager_extra.py:424:1: W293 blank line contains whitespace
    
^
security/ai_agents/smart_notification_manager_extra.py:429:80: E501 line too long (81 > 79 characters)
                "notifications_processed": self.stats["notifications_processed"],
                                                                               ^
security/ai_agents/smart_notification_manager_extra.py:430:80: E501 line too long (81 > 79 characters)
                "smart_routing_decisions": self.stats["smart_routing_decisions"],
                                                                               ^
security/ai_agents/smart_notification_manager_extra.py:431:80: E501 line too long (91 > 79 characters)
                "user_engagement_improvements": self.stats["user_engagement_improvements"],
                                                                               ^
security/ai_agents/smart_notification_manager_extra.py:433:80: E501 line too long (91 > 79 characters)
                "engagement_optimization_enabled": self.engagement_optimization["enabled"],
                                                                               ^
security/ai_agents/smart_notification_manager_extra.py:440:1: W293 blank line contains whitespace
    
^
security/ai_agents/smart_notification_manager_extra.py:456:1: E305 expected 2 blank lines after class or function definition, found 1
smart_notification_manager_extra = SmartNotificationManagerExtra()^
security/ai_agents/smart_notification_manager_extra.py:456:67: W292 no newline at end of file
smart_notification_manager_extra = SmartNotificationManagerExtra()                                                                  ^
security/ai_agents/smart_notification_manager_main.py:7:1: F401 'numpy as np' imported but unused
import numpy as np
^
security/ai_agents/smart_notification_manager_main.py:10:1: F401 'os' imported but unused
import os
^
security/ai_agents/smart_notification_manager_main.py:18:1: E302 expected 2 blank lines, found 1
class NotificationType(Enum):
^
security/ai_agents/smart_notification_manager_main.py:27:1: E302 expected 2 blank lines, found 1
@dataclass
^
security/ai_agents/smart_notification_manager_main.py:39:1: E302 expected 2 blank lines, found 1
class SmartNotificationManagerMain:
^
security/ai_agents/smart_notification_manager_main.py:41:1: W293 blank line contains whitespace
    
^
security/ai_agents/smart_notification_manager_main.py:55:1: W293 blank line contains whitespace
    
^
security/ai_agents/smart_notification_manager_main.py:99:1: W293 blank line contains whitespace
    
^
security/ai_agents/smart_notification_manager_main.py:100:74: W291 trailing whitespace
    def create_notification(self, user_id: str, title: str, message: str, 
                                                                         ^
security/ai_agents/smart_notification_manager_main.py:101:27: E128 continuation line under-indented for visual indent
                          notification_type: NotificationType, priority: str = "normal",
                          ^
security/ai_agents/smart_notification_manager_main.py:101:80: E501 line too long (88 > 79 characters)
                          notification_type: NotificationType, priority: str = "normal",
                                                                               ^
security/ai_agents/smart_notification_manager_main.py:102:27: E128 continuation line under-indented for visual indent
                          metadata: Dict[str, Any] = None) -> str:
                          ^
security/ai_agents/smart_notification_manager_main.py:106:1: W293 blank line contains whitespace
            
^
security/ai_agents/smart_notification_manager_main.py:117:1: W293 blank line contains whitespace
            
^
security/ai_agents/smart_notification_manager_main.py:121:1: W293 blank line contains whitespace
            
^
security/ai_agents/smart_notification_manager_main.py:124:1: W293 blank line contains whitespace
            
^
security/ai_agents/smart_notification_manager_main.py:125:80: E501 line too long (97 > 79 characters)
            self.logger.info(f"Создано уведомление {notification_id} для пользователя {user_id}")
                                                                               ^
security/ai_agents/smart_notification_manager_main.py:127:1: W293 blank line contains whitespace
            
^
security/ai_agents/smart_notification_manager_main.py:131:1: W293 blank line contains whitespace
    
^
security/ai_agents/smart_notification_manager_main.py:137:1: W293 blank line contains whitespace
            
^
security/ai_agents/smart_notification_manager_main.py:139:80: E501 line too long (86 > 79 characters)
            delivery_channel = self._select_delivery_channel(notification, user_prefs)
                                                                               ^
security/ai_agents/smart_notification_manager_main.py:140:1: W293 blank line contains whitespace
            
^
security/ai_agents/smart_notification_manager_main.py:145:80: E501 line too long (107 > 79 characters)
                self.logger.warning(f"Не удалось выбрать канал доставки для уведомления {notification.id}")
                                                                               ^
security/ai_agents/smart_notification_manager_main.py:146:1: W293 blank line contains whitespace
                
^
security/ai_agents/smart_notification_manager_main.py:149:1: W293 blank line contains whitespace
    
^
security/ai_agents/smart_notification_manager_main.py:156:80: E501 line too long (89 > 79 characters)
                    "enabled_channels": [NotificationType.PUSH, NotificationType.IN_APP],
                                                                               ^
security/ai_agents/smart_notification_manager_main.py:160:1: W293 blank line contains whitespace
            
^
security/ai_agents/smart_notification_manager_main.py:162:1: W293 blank line contains whitespace
            
^
security/ai_agents/smart_notification_manager_main.py:164:80: E501 line too long (81 > 79 characters)
            self.logger.error(f"Ошибка получения предпочтений пользователя: {e}")
                                                                               ^
security/ai_agents/smart_notification_manager_main.py:166:1: W293 blank line contains whitespace
    
^
security/ai_agents/smart_notification_manager_main.py:167:80: E501 line too long (125 > 79 characters)
    def _select_delivery_channel(self, notification: Notification, user_prefs: Dict[str, Any]) -> Optional[NotificationType]:
                                                                               ^
security/ai_agents/smart_notification_manager_main.py:171:1: W293 blank line contains whitespace
            
^
security/ai_agents/smart_notification_manager_main.py:177:1: W293 blank line contains whitespace
            
^
security/ai_agents/smart_notification_manager_main.py:180:1: W293 blank line contains whitespace
            
^
security/ai_agents/smart_notification_manager_main.py:182:80: E501 line too long (88 > 79 characters)
            available_channels.sort(key=lambda x: self.delivery_channels[x]["priority"])
                                                                               ^
security/ai_agents/smart_notification_manager_main.py:183:1: W293 blank line contains whitespace
            
^
security/ai_agents/smart_notification_manager_main.py:185:1: W293 blank line contains whitespace
            
^
security/ai_agents/smart_notification_manager_main.py:189:1: W293 blank line contains whitespace
    
^
security/ai_agents/smart_notification_manager_main.py:190:80: E501 line too long (99 > 79 characters)
    def _deliver_notification(self, notification: Notification, channel: NotificationType) -> bool:
                                                                               ^
security/ai_agents/smart_notification_manager_main.py:196:80: E501 line too long (93 > 79 characters)
                    self.logger.info(f"Уведомление отложено (тихие часы): {notification.id}")
                                                                               ^
security/ai_agents/smart_notification_manager_main.py:198:1: W293 blank line contains whitespace
            
^
security/ai_agents/smart_notification_manager_main.py:201:1: W293 blank line contains whitespace
            
^
security/ai_agents/smart_notification_manager_main.py:204:80: E501 line too long (99 > 79 characters)
                self.logger.info(f"Уведомление {notification.id} доставлено через {channel.value}")
                                                                               ^
security/ai_agents/smart_notification_manager_main.py:207:80: E501 line too long (83 > 79 characters)
                self.logger.error(f"Ошибка доставки уведомления {notification.id}")
                                                                               ^
security/ai_agents/smart_notification_manager_main.py:208:1: W293 blank line contains whitespace
            
^
security/ai_agents/smart_notification_manager_main.py:210:1: W293 blank line contains whitespace
            
^
security/ai_agents/smart_notification_manager_main.py:215:1: W293 blank line contains whitespace
    
^
security/ai_agents/smart_notification_manager_main.py:220:80: E501 line too long (80 > 79 characters)
            quiet_hours = user_prefs.get("quiet_hours", {"start": 22, "end": 8})
                                                                               ^
security/ai_agents/smart_notification_manager_main.py:221:1: W293 blank line contains whitespace
            
^
security/ai_agents/smart_notification_manager_main.py:225:1: W293 blank line contains whitespace
            
^
security/ai_agents/smart_notification_manager_main.py:230:1: W293 blank line contains whitespace
                
^
security/ai_agents/smart_notification_manager_main.py:234:1: W293 blank line contains whitespace
    
^
security/ai_agents/smart_notification_manager_main.py:235:80: E501 line too long (98 > 79 characters)
    def _deliver_via_channel(self, notification: Notification, channel: NotificationType) -> bool:
                                                                               ^
security/ai_agents/smart_notification_manager_main.py:249:80: E501 line too long (82 > 79 characters)
                self.logger.warning(f"Неподдерживаемый канал доставки: {channel}")
                                                                               ^
security/ai_agents/smart_notification_manager_main.py:251:1: W293 blank line contains whitespace
                
^
security/ai_agents/smart_notification_manager_main.py:255:1: W293 blank line contains whitespace
    
^
security/ai_agents/smart_notification_manager_main.py:260:1: W293 blank line contains whitespace
    
^
security/ai_agents/smart_notification_manager_main.py:265:1: W293 blank line contains whitespace
    
^
security/ai_agents/smart_notification_manager_main.py:270:1: W293 blank line contains whitespace
    
^
security/ai_agents/smart_notification_manager_main.py:275:1: W293 blank line contains whitespace
    
^
security/ai_agents/smart_notification_manager_main.py:280:1: W293 blank line contains whitespace
    
^
security/ai_agents/smart_notification_manager_main.py:281:80: E501 line too long (92 > 79 characters)
    def get_user_notifications(self, user_id: str, limit: int = 50) -> List[Dict[str, Any]]:
                                                                               ^
security/ai_agents/smart_notification_manager_main.py:297:1: W293 blank line contains whitespace
            
^
security/ai_agents/smart_notification_manager_main.py:299:80: E501 line too long (80 > 79 characters)
            user_notifications.sort(key=lambda x: x["created_at"], reverse=True)
                                                                               ^
security/ai_agents/smart_notification_manager_main.py:300:1: W293 blank line contains whitespace
            
^
security/ai_agents/smart_notification_manager_main.py:302:1: W293 blank line contains whitespace
            
^
security/ai_agents/smart_notification_manager_main.py:304:80: E501 line too long (80 > 79 characters)
            self.logger.error(f"Ошибка получения уведомлений пользователя: {e}")
                                                                               ^
security/ai_agents/smart_notification_manager_main.py:306:1: W293 blank line contains whitespace
    
^
security/ai_agents/smart_notification_manager_main.py:307:80: E501 line too long (89 > 79 characters)
    def update_user_preferences(self, user_id: str, preferences: Dict[str, Any]) -> bool:
                                                                               ^
security/ai_agents/smart_notification_manager_main.py:313:1: W293 blank line contains whitespace
            
^
security/ai_agents/smart_notification_manager_main.py:316:1: W293 blank line contains whitespace
            
^
security/ai_agents/smart_notification_manager_main.py:320:1: W293 blank line contains whitespace
    
^
security/ai_agents/smart_notification_manager_main.py:326:80: E501 line too long (81 > 79 characters)
                "notifications_delivered": self.stats["notifications_delivered"],
                                                                               ^
security/ai_agents/smart_notification_manager_main.py:335:1: W293 blank line contains whitespace
    
^
security/ai_agents/smart_notification_manager_main.py:353:1: E305 expected 2 blank lines after class or function definition, found 1
smart_notification_manager_main = SmartNotificationManagerMain()^
security/ai_agents/smart_notification_manager_main.py:353:65: W292 no newline at end of file
smart_notification_manager_main = SmartNotificationManagerMain()                                                                ^
security/ai_agents/speech_recognition_engine.py:15:1: F401 'hashlib' imported but unused
import hashlib
^
security/ai_agents/speech_recognition_engine.py:16:1: F401 'asyncio' imported but unused
import asyncio
^
security/ai_agents/speech_recognition_engine.py:17:1: F401 'wave' imported but unused
import wave
^
security/ai_agents/speech_recognition_engine.py:19:1: F401 'datetime.timedelta' imported but unused
from datetime import datetime, timedelta
^
security/ai_agents/speech_recognition_engine.py:21:1: F401 'typing.Tuple' imported but unused
from typing import Dict, List, Optional, Any, Tuple, Callable
^
security/ai_agents/speech_recognition_engine.py:21:1: F401 'typing.Callable' imported but unused
from typing import Dict, List, Optional, Any, Tuple, Callable
^
security/ai_agents/speech_recognition_engine.py:23:1: F401 'threading' imported but unused
import threading
^
security/ai_agents/speech_recognition_engine.py:25:1: F401 'numpy as np' imported but unused
import numpy as np
^
security/ai_agents/speech_recognition_engine.py:32:5: F401 'config.color_scheme.MatrixAIColorScheme' imported but unused
    from config.color_scheme import MatrixAIColorScheme, ColorTheme
    ^
security/ai_agents/speech_recognition_engine.py:32:5: F401 'config.color_scheme.ColorTheme' imported but unused
    from config.color_scheme import MatrixAIColorScheme, ColorTheme
    ^
security/ai_agents/speech_recognition_engine.py:107:80: E501 line too long (102 > 79 characters)
            description="AI-движок распознавания речи для голосового управления системой безопасности"
                                                                               ^
security/ai_agents/speech_recognition_engine.py:143:80: E501 line too long (94 > 79 characters)
            "supported_languages": [RecognitionLanguage.RUSSIAN, RecognitionLanguage.ENGLISH],
                                                                               ^
security/ai_agents/speech_recognition_engine.py:197:80: E501 line too long (83 > 79 characters)
            self.logger.info("Компоненты SpeechRecognitionEngine инициализированы")
                                                                               ^
security/ai_agents/speech_recognition_engine.py:238:80: E501 line too long (83 > 79 characters)
    async def recognize_speech(self, audio_input: AudioInput) -> RecognitionResult:
                                                                               ^
security/ai_agents/speech_recognition_engine.py:262:80: E501 line too long (85 > 79 characters)
            words = await self._analyze_words(recognition_text, audio_input.language)
                                                                               ^
security/ai_agents/speech_recognition_engine.py:265:13: F841 local variable 'emotions' is assigned to but never used
            emotions = await self.emotion_detector.detect_emotions(processed_audio)
            ^
security/ai_agents/speech_recognition_engine.py:265:80: E501 line too long (83 > 79 characters)
            emotions = await self.emotion_detector.detect_emotions(processed_audio)
                                                                               ^
security/ai_agents/speech_recognition_engine.py:268:13: F841 local variable 'sentiment' is assigned to but never used
            sentiment = await self.sentiment_analyzer.analyze_sentiment(recognition_text)
            ^
security/ai_agents/speech_recognition_engine.py:268:80: E501 line too long (89 > 79 characters)
            sentiment = await self.sentiment_analyzer.analyze_sentiment(recognition_text)
                                                                               ^
security/ai_agents/speech_recognition_engine.py:271:13: F841 local variable 'keywords' is assigned to but never used
            keywords = await self.keyword_detector.detect_keywords(recognition_text)
            ^
security/ai_agents/speech_recognition_engine.py:271:80: E501 line too long (84 > 79 characters)
            keywords = await self.keyword_detector.detect_keywords(recognition_text)
                                                                               ^
security/ai_agents/speech_recognition_engine.py:274:80: E501 line too long (90 > 79 characters)
            confidence = self._calculate_confidence(recognition_text, words, alternatives)
                                                                               ^
security/ai_agents/speech_recognition_engine.py:297:80: E501 line too long (84 > 79 characters)
            self.logger.info(f"Речь успешно распознана: {recognition_text[:50]}...")
                                                                               ^
security/ai_agents/speech_recognition_engine.py:313:80: E501 line too long (81 > 79 characters)
            if audio_input.sample_rate < 8000 or audio_input.sample_rate > 48000:
                                                                               ^
security/ai_agents/speech_recognition_engine.py:343:80: E501 line too long (88 > 79 characters)
                denoised_data = await self.audio_processor.reduce_noise(normalized_data)
                                                                               ^
security/ai_agents/speech_recognition_engine.py:420:80: E501 line too long (101 > 79 characters)
    async def _analyze_words(self, text: str, language: RecognitionLanguage) -> List[Dict[str, Any]]:
                                                                               ^
security/ai_agents/speech_recognition_engine.py:449:80: E501 line too long (110 > 79 characters)
    def _calculate_confidence(self, text: str, words: List[Dict[str, Any]], alternatives: List[str]) -> float:
                                                                               ^
security/ai_agents/speech_recognition_engine.py:456:80: E501 line too long (84 > 79 characters)
            word_confidence = sum(word["confidence"] for word in words) / len(words)
                                                                               ^
security/ai_agents/speech_recognition_engine.py:462:80: E501 line too long (85 > 79 characters)
            keyword_bonus = 0.1 if any(word["is_keyword"] for word in words) else 0.0
                                                                               ^
security/ai_agents/speech_recognition_engine.py:465:80: E501 line too long (81 > 79 characters)
            confidence = min(1.0, word_confidence + length_bonus + keyword_bonus)
                                                                               ^
security/ai_agents/speech_recognition_engine.py:499:80: E501 line too long (128 > 79 characters)
            filename = f"data/speech_recognition/recognition_{result.timestamp.strftime('%Y%m%d_%H%M%S')}_{result.user_id}.json"
                                                                               ^
security/ai_agents/speech_recognition_engine.py:513:80: E501 line too long (91 > 79 characters)
            total_confidence = self.average_confidence * (self.successful_recognitions - 1)
                                                                               ^
security/ai_agents/speech_recognition_engine.py:514:80: E501 line too long (107 > 79 characters)
            self.average_confidence = (total_confidence + result.confidence) / self.successful_recognitions
                                                                               ^
security/ai_agents/speech_recognition_engine.py:516:80: E501 line too long (109 > 79 characters)
            self.logger.debug(f"Статистика обновлена: {self.successful_recognitions} успешных распознаваний")
                                                                               ^
security/ai_agents/speech_recognition_engine.py:536:80: E501 line too long (99 > 79 characters)
                "supported_languages": [lang.value for lang in self.config["supported_languages"]],
                                                                               ^
security/ai_agents/speech_recognition_engine.py:537:80: E501 line too long (85 > 79 characters)
                "audio_formats": [fmt.value for fmt in self.config["audio_formats"]],
                                                                               ^
security/ai_agents/speech_recognition_engine.py:762:80: E501 line too long (108 > 79 characters)
            total_checks = len(architectural_principles) + len(functionality) + len(security) + len(testing)
                                                                               ^
security/ai_agents/speech_recognition_engine.py:776:80: E501 line too long (102 > 79 characters)
                "quality_grade": "A+" if quality_score >= 95 else "A" if quality_score >= 90 else "B",
                                                                               ^
security/ai_agents/speech_recognition_engine.py:858:80: E501 line too long (83 > 79 characters)
        for keyword in self.config["security_keywords"] + \
                self.config["family_keywords"] + self.config["emergency_keywords"]:
                                                           
                   ^
security/ai_agents/speech_recognition_engine.py:870:80: E501 line too long (90 > 79 characters)
    print(f"Тесты пройдены: {test_results['tests_passed']}/{test_results['total_tests']}")
                                                                               ^
security/ai_agents/speech_recognition_engine.py:874:80: E501 line too long (101 > 79 characters)
    print(f"Качество: {quality_report['quality_score']:.1f}/100 ({quality_report['quality_grade']})")
                                                                               ^
security/ai_agents/threat_detection_agent.py:81:80: E501 line too long (85 > 79 characters)
        data['first_seen'] = self.first_seen.isoformat() if self.first_seen else None
                                                                               ^
security/ai_agents/threat_detection_agent.py:82:80: E501 line too long (82 > 79 characters)
        data['last_seen'] = self.last_seen.isoformat() if self.last_seen else None
                                                                               ^
security/ai_agents/threat_detection_agent.py:120:80: E501 line too long (82 > 79 characters)
        data['timestamp'] = self.timestamp.isoformat() if self.timestamp else None
                                                                               ^
security/ai_agents/threat_detection_agent.py:121:80: E501 line too long (83 > 79 characters)
        data['indicators'] = [indicator.to_dict() for indicator in self.indicators]
                                                                               ^
security/ai_agents/threat_detection_agent.py:149:80: E501 line too long (91 > 79 characters)
        data['last_updated'] = self.last_updated.isoformat() if self.last_updated else None
                                                                               ^
security/ai_agents/threat_detection_agent.py:164:80: E501 line too long (92 > 79 characters)
            self.threats_by_type[threat_type] = self.threats_by_type.get(threat_type, 0) + 1
                                                                               ^
security/ai_agents/threat_detection_agent.py:169:80: E501 line too long (96 > 79 characters)
            self.threats_by_level[threat_level] = self.threats_by_level.get(threat_level, 0) + 1
                                                                               ^
security/ai_agents/threat_detection_agent.py:174:80: E501 line too long (96 > 79 characters)
                (self.average_confidence * (self.total_detections - 1) + detection.confidence) /
                                                                               ^
security/ai_agents/threat_detection_agent.py:180:80: E501 line too long (80 > 79 characters)
            self.detection_rate = self.confirmed_threats / self.total_detections
                                                                               ^
security/ai_agents/threat_detection_agent.py:195:80: E501 line too long (85 > 79 characters)
        self.max_indicators_per_detection = 10  # максимум индикаторов на обнаружение
                                                                               ^
security/ai_agents/threat_detection_agent.py:251:80: E501 line too long (87 > 79 characters)
            self.log_activity("Threat Detection Agent успешно инициализирован", "info")
                                                                               ^
security/ai_agents/threat_detection_agent.py:255:80: E501 line too long (91 > 79 characters)
            self.log_activity(f"Ошибка инициализации Threat Detection Agent: {e}", "error")
                                                                               ^
security/ai_agents/threat_detection_agent.py:280:80: E501 line too long (87 > 79 characters)
            self.log_activity(f"Ошибка остановки Threat Detection Agent: {e}", "error")
                                                                               ^
security/ai_agents/threat_detection_agent.py:283:80: E501 line too long (80 > 79 characters)
    def analyze_threat(self, data: Dict[str, Any]) -> Optional[ThreatDetection]:
                                                                               ^
security/ai_agents/threat_detection_agent.py:307:80: E501 line too long (83 > 79 characters)
                    behavioral_detection = self._analyze_behavior(data, indicators)
                                                                               ^
security/ai_agents/threat_detection_agent.py:316:80: E501 line too long (83 > 79 characters)
                    self.detections[final_detection.detection_id] = final_detection
                                                                               ^
security/ai_agents/threat_detection_agent.py:326:80: E501 line too long (82 > 79 characters)
                        f"Обнаружена угроза: {final_detection.threat_type.value} "
                                                                               ^
security/ai_agents/threat_detection_agent.py:345:80: E501 line too long (91 > 79 characters)
            self.log_activity(f"Ошибка получения обнаружения {detection_id}: {e}", "error")
                                                                               ^
security/ai_agents/threat_detection_agent.py:348:80: E501 line too long (87 > 79 characters)
    def get_detections_by_type(self, threat_type: ThreatType) -> List[ThreatDetection]:
                                                                               ^
security/ai_agents/threat_detection_agent.py:357:80: E501 line too long (98 > 79 characters)
            self.log_activity(f"Ошибка получения обнаружений по типу {threat_type}: {e}", "error")
                                                                               ^
security/ai_agents/threat_detection_agent.py:360:80: E501 line too long (90 > 79 characters)
    def get_detections_by_level(self, threat_level: ThreatLevel) -> List[ThreatDetection]:
                                                                               ^
security/ai_agents/threat_detection_agent.py:369:80: E501 line too long (101 > 79 characters)
            self.log_activity(f"Ошибка получения обнаружений по уровню {threat_level}: {e}", "error")
                                                                               ^
security/ai_agents/threat_detection_agent.py:372:80: E501 line too long (90 > 79 characters)
    def update_detection_status(self, detection_id: str, status: DetectionStatus) -> bool:
                                                                               ^
security/ai_agents/threat_detection_agent.py:378:80: E501 line too long (110 > 79 characters)
                    self.log_activity(f"Статус обнаружения {detection_id} обновлен на {status.value}", "info")
                                                                               ^
security/ai_agents/threat_detection_agent.py:382:80: E501 line too long (100 > 79 characters)
            self.log_activity(f"Ошибка обновления статуса обнаружения {detection_id}: {e}", "error")
                                                                               ^
security/ai_agents/threat_detection_agent.py:438:80: E501 line too long (88 > 79 characters)
                        {"field": "failed_login_attempts", "operator": ">", "value": 5},
                                                                               ^
security/ai_agents/threat_detection_agent.py:449:80: E501 line too long (94 > 79 characters)
                        {"field": "query_contains", "operator": "contains", "value": "union"},
                                                                               ^
security/ai_agents/threat_detection_agent.py:450:80: E501 line too long (94 > 79 characters)
                        {"field": "query_contains", "operator": "contains", "value": "select"}
                                                                               ^
security/ai_agents/threat_detection_agent.py:460:80: E501 line too long (82 > 79 characters)
                        {"field": "request_rate", "operator": ">", "value": 1000},
                                                                               ^
security/ai_agents/threat_detection_agent.py:468:80: E501 line too long (98 > 79 characters)
            self.log_activity(f"Загружено {len(self.detection_rules)} правил обнаружения", "info")
                                                                               ^
security/ai_agents/threat_detection_agent.py:470:80: E501 line too long (82 > 79 characters)
            self.log_activity(f"Ошибка загрузки правил обнаружения: {e}", "error")
                                                                               ^
security/ai_agents/threat_detection_agent.py:477:80: E501 line too long (84 > 79 characters)
                    {"action": "login", "frequency": "daily", "time_range": "9-17"},
                                                                               ^
security/ai_agents/threat_detection_agent.py:478:80: E501 line too long (98 > 79 characters)
                    {"action": "browse", "frequency": "continuous", "session_length": "30-120min"}
                                                                               ^
security/ai_agents/threat_detection_agent.py:481:80: E501 line too long (92 > 79 characters)
                    {"action": "login", "frequency": "multiple_daily", "time_range": "any"},
                                                                               ^
security/ai_agents/threat_detection_agent.py:482:80: E501 line too long (89 > 79 characters)
                    {"action": "data_access", "frequency": "high", "unusual_hours": True}
                                                                               ^
security/ai_agents/threat_detection_agent.py:485:80: E501 line too long (81 > 79 characters)
                    {"action": "privilege_escalation", "frequency": "attempted"},
                                                                               ^
security/ai_agents/threat_detection_agent.py:489:80: E501 line too long (80 > 79 characters)
            self.log_activity("Поведенческие паттерны инициализированы", "info")
                                                                               ^
security/ai_agents/threat_detection_agent.py:491:80: E501 line too long (92 > 79 characters)
            self.log_activity(f"Ошибка инициализации поведенческих паттернов: {e}", "error")
                                                                               ^
security/ai_agents/threat_detection_agent.py:515:80: E501 line too long (81 > 79 characters)
    def _extract_indicators(self, data: Dict[str, Any]) -> List[ThreatIndicator]:
                                                                               ^
security/ai_agents/threat_detection_agent.py:523:80: E501 line too long (97 > 79 characters)
                    indicator_id=f"ip_{hashlib.md5(data['source_ip'].encode()).hexdigest()[:8]}",
                                                                               ^
security/ai_agents/threat_detection_agent.py:534:80: E501 line too long (98 > 79 characters)
                    indicator_id=f"ua_{hashlib.md5(data['user_agent'].encode()).hexdigest()[:8]}",
                                                                               ^
security/ai_agents/threat_detection_agent.py:545:80: E501 line too long (92 > 79 characters)
                    indicator_id=f"url_{hashlib.md5(data['url'].encode()).hexdigest()[:8]}",
                                                                               ^
security/ai_agents/threat_detection_agent.py:559:80: E501 line too long (120 > 79 characters)
    def _analyze_with_rules(self, data: Dict[str, Any], indicators: List[ThreatIndicator]) -> Optional[ThreatDetection]:
                                                                               ^
security/ai_agents/threat_detection_agent.py:565:80: E501 line too long (82 > 79 characters)
                        detection_id=f"rule_{rule['rule_id']}_{int(time.time())}",
                                                                               ^
security/ai_agents/threat_detection_agent.py:582:80: E501 line too long (117 > 79 characters)
    def _analyze_with_ml(self, data: Dict[str, Any], indicators: List[ThreatIndicator]) -> Optional[ThreatDetection]:
                                                                               ^
security/ai_agents/threat_detection_agent.py:612:80: E501 line too long (81 > 79 characters)
                    description=f"Обнаружено ML моделью: {predicted_type.value}",
                                                                               ^
security/ai_agents/threat_detection_agent.py:625:80: E501 line too long (118 > 79 characters)
    def _analyze_behavior(self, data: Dict[str, Any], indicators: List[ThreatIndicator]) -> Optional[ThreatDetection]:
                                                                               ^
security/ai_agents/threat_detection_agent.py:660:80: E501 line too long (107 > 79 characters)
            detections = [d for d in [rule_detection, ml_detection, behavioral_detection] if d is not None]
                                                                               ^
security/ai_agents/threat_detection_agent.py:673:80: E501 line too long (85 > 79 characters)
                best_detection.confidence = min(1.0, best_detection.confidence + 0.1)
                                                                               ^
security/ai_agents/threat_detection_agent.py:681:80: E501 line too long (81 > 79 characters)
    def _evaluate_rule(self, rule: Dict[str, Any], data: Dict[str, Any]) -> bool:
                                                                               ^
security/ai_agents/threat_detection_agent.py:695:80: E501 line too long (87 > 79 characters)
                    if not isinstance(data_value, (int, float)) or data_value <= value:
                                                                               ^
security/ai_agents/threat_detection_agent.py:698:80: E501 line too long (87 > 79 characters)
                    if not isinstance(data_value, (int, float)) or data_value >= value:
                                                                               ^
security/ai_agents/threat_detection_agent.py:701:80: E501 line too long (82 > 79 characters)
                    if not isinstance(data_value, str) or value not in data_value:
                                                                               ^
security/ai_agents/threat_detection_agent.py:731:80: E501 line too long (91 > 79 characters)
                        detection_id for detection_id, detection in self.detections.items()
                                                                               ^
security/ai_agents/threat_detection_agent.py:732:80: E501 line too long (84 > 79 characters)
                        if detection.timestamp and detection.timestamp < cutoff_time
                                                                               ^
security/ai_agents/threat_detection_agent.py:739:80: E501 line too long (102 > 79 characters)
                        self.log_activity(f"Удалено {len(old_detections)} старых обнаружений", "info")
                                                                               ^
security/ai_agents/threat_detection_agent.py:752:80: E501 line too long (83 > 79 characters)
                "detections": {k: v.to_dict() for k, v in self.detections.items()},
                                                                               ^
security/ai_agents/threat_detection_agent.py:758:80: E501 line too long (98 > 79 characters)
            with open("/tmp/aladdin_detections/last_detections.json", 'w', encoding='utf-8') as f:
                                                                               ^
security/ai_agents/threat_detection_agent.py:763:80: E501 line too long (84 > 79 characters)
            self.log_activity(f"Ошибка сохранения данных обнаружений: {e}", "error")
                                                                               ^
security/ai_agents/threat_intelligence_agent.py:13:1: F401 'requests' imported but unused
import requests
^
security/ai_agents/threat_intelligence_agent.py:14:1: F401 'datetime.timedelta' imported but unused
from datetime import datetime, timedelta
^
security/ai_agents/threat_intelligence_agent.py:132:80: E501 line too long (115 > 79 characters)
            "threat_type": self.threat_type.value if hasattr(self.threat_type, 'value') else str(self.threat_type),
                                                                               ^
security/ai_agents/threat_intelligence_agent.py:133:80: E501 line too long (103 > 79 characters)
            "severity": self.severity.value if hasattr(self.severity, 'value') else str(self.severity),
                                                                               ^
security/ai_agents/threat_intelligence_agent.py:138:80: E501 line too long (83 > 79 characters)
            "first_seen": self.first_seen.isoformat() if self.first_seen else None,
                                                                               ^
security/ai_agents/threat_intelligence_agent.py:139:80: E501 line too long (80 > 79 characters)
            "last_seen": self.last_seen.isoformat() if self.last_seen else None,
                                                                               ^
security/ai_agents/threat_intelligence_agent.py:213:80: E501 line too long (113 > 79 characters)
            "last_collection_time": self.last_collection_time.isoformat() if self.last_collection_time else None,
                                                                               ^
security/ai_agents/threat_intelligence_agent.py:215:80: E501 line too long (101 > 79 characters)
            "last_update_time": self.last_update_time.isoformat() if self.last_update_time else None,
                                                                               ^
security/ai_agents/threat_intelligence_agent.py:281:80: E501 line too long (80 > 79 characters)
            self.log_activity("ThreatIntelligenceAgent инициализирован успешно")
                                                                               ^
security/ai_agents/threat_intelligence_agent.py:285:80: E501 line too long (105 > 79 characters)
            self.log_activity("Ошибка инициализации ThreatIntelligenceAgent: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/threat_intelligence_agent.py:298:80: E501 line too long (80 > 79 characters)
                    "temporal_features", "severity_indicators", "attack_vectors"
                                                                               ^
security/ai_agents/threat_intelligence_agent.py:334:80: E501 line too long (80 > 79 characters)
                    "false_positive_rate", "update_frequency", "peer_validation"
                                                                               ^
security/ai_agents/threat_intelligence_agent.py:345:80: E501 line too long (85 > 79 characters)
                    "threat_frequency", "severity_trends", "geographic_distribution",
                                                                               ^
security/ai_agents/threat_intelligence_agent.py:357:80: E501 line too long (80 > 79 characters)
                "source_reliability_analyzer": self.source_reliability_analyzer,
                                                                               ^
security/ai_agents/threat_intelligence_agent.py:364:80: E501 line too long (92 > 79 characters)
            self.log_activity("Ошибка инициализации AI моделей: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/threat_intelligence_agent.py:426:80: E501 line too long (93 > 79 characters)
            self.log_activity("Ошибка загрузки источников угроз: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/threat_intelligence_agent.py:465:80: E501 line too long (92 > 79 characters)
            self.log_activity("Ошибка инициализации баз данных: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/threat_intelligence_agent.py:478:80: E501 line too long (93 > 79 characters)
            self.log_activity("Ошибка запуска фоновых процессов: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/threat_intelligence_agent.py:490:80: E501 line too long (83 > 79 characters)
                    threats = self._collect_from_source(source_name, source_config)
                                                                               ^
security/ai_agents/threat_intelligence_agent.py:503:80: E501 line too long (102 > 79 characters)
            self.metrics.collection_speed = collected_threats / \
                (self.metrics.collection_duration / 60) if self.metrics.collection_duration > 0 else 0
                                                                 
             ^
security/ai_agents/threat_intelligence_agent.py:505:80: E501 line too long (91 > 79 characters)
            self.log_activity("Сбор угроз завершен. Собрано: {}".format(collected_threats))
                                                                               ^
security/ai_agents/threat_intelligence_agent.py:529:80: E501 line too long (102 > 79 characters)
            self.log_activity("Ошибка сбора из источника {}: {}".format(source_name, str(e)), "error")
                                                                               ^
security/ai_agents/threat_intelligence_agent.py:557:80: E501 line too long (85 > 79 characters)
            self.log_activity("Ошибка сбора из RSS лент: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/threat_intelligence_agent.py:577:80: E501 line too long (107 > 79 characters)
                threat.add_ioc(IOCType.FILE_HASH, hashlib.md5("malware_{}".format(i).encode()).hexdigest())
                                                                               ^
security/ai_agents/threat_intelligence_agent.py:586:80: E501 line too long (80 > 79 characters)
            self.log_activity("Ошибка сбора из API: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/threat_intelligence_agent.py:614:80: E501 line too long (105 > 79 characters)
            self.log_activity("Ошибка сбора из правительственных источников: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/threat_intelligence_agent.py:625:80: E501 line too long (82 > 79 characters)
                    threat_id="academic_threat_{}_{}".format(int(time.time()), i),
                                                                               ^
security/ai_agents/threat_intelligence_agent.py:642:80: E501 line too long (101 > 79 characters)
            self.log_activity("Ошибка сбора из академических источников: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/threat_intelligence_agent.py:662:80: E501 line too long (99 > 79 characters)
            self.log_activity("Анализ угроз завершен. Проанализировано: {}".format(analyzed_count))
                                                                               ^
security/ai_agents/threat_intelligence_agent.py:666:80: E501 line too long (81 > 79 characters)
            self.log_activity("Ошибка анализа угроз: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/threat_intelligence_agent.py:674:80: E501 line too long (86 > 79 characters)
            threat.threat_type = threat_classification.get("type", threat.threat_type)
                                                                               ^
security/ai_agents/threat_intelligence_agent.py:678:80: E501 line too long (81 > 79 characters)
            threat.severity = predicted_severity.get("severity", threat.severity)
                                                                               ^
security/ai_agents/threat_intelligence_agent.py:682:80: E501 line too long (81 > 79 characters)
            threat.confidence = ioc_analysis.get("confidence", threat.confidence)
                                                                               ^
security/ai_agents/threat_intelligence_agent.py:690:80: E501 line too long (103 > 79 characters)
            self.log_activity("Ошибка анализа угрозы {}: {}".format(threat.threat_id, str(e)), "error")
                                                                               ^
security/ai_agents/threat_intelligence_agent.py:705:80: E501 line too long (88 > 79 characters)
            self.log_activity("Ошибка классификации угрозы: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/threat_intelligence_agent.py:721:80: E501 line too long (92 > 79 characters)
            self.log_activity("Ошибка предсказания серьезности: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/threat_intelligence_agent.py:737:80: E501 line too long (80 > 79 characters)
            self.log_activity("Ошибка анализа IOCs: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/threat_intelligence_agent.py:772:80: E501 line too long (90 > 79 characters)
            return sum(quality_factors) / len(quality_factors) if quality_factors else 0.0
                                                                               ^
security/ai_agents/threat_intelligence_agent.py:775:80: E501 line too long (91 > 79 characters)
            self.log_activity("Ошибка расчета качества данных: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/threat_intelligence_agent.py:791:80: E501 line too long (92 > 79 characters)
                    "total_iocs": sum(len(threat.iocs) for threat in self.threats.values()),
                                                                               ^
security/ai_agents/threat_intelligence_agent.py:794:80: E501 line too long (82 > 79 characters)
                "threats": [threat.to_dict() for threat in self.threats.values()],
                                                                               ^
security/ai_agents/threat_intelligence_agent.py:804:80: E501 line too long (106 > 79 characters)
            report_file = os.path.join(report_dir, "threat_intel_report_{}.json".format(int(time.time())))
                                                                               ^
security/ai_agents/threat_intelligence_agent.py:812:80: E501 line too long (84 > 79 characters)
            self.log_activity("Ошибка генерации отчета: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/threat_intelligence_agent.py:822:80: E501 line too long (86 > 79 characters)
                threats_by_type[threat_type] = threats_by_type.get(threat_type, 0) + 1
                                                                               ^
security/ai_agents/threat_intelligence_agent.py:825:80: E501 line too long (92 > 79 characters)
            self.log_activity("Ошибка получения угроз по типам: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/threat_intelligence_agent.py:833:80: E501 line too long (111 > 79 characters)
                severity = threat.severity.value if hasattr(threat.severity, 'value') else str(threat.severity)
                                                                               ^
security/ai_agents/threat_intelligence_agent.py:834:80: E501 line too long (88 > 79 characters)
                threats_by_severity[severity] = threats_by_severity.get(severity, 0) + 1
                                                                               ^
security/ai_agents/threat_intelligence_agent.py:837:80: E501 line too long (98 > 79 characters)
            self.log_activity("Ошибка получения угроз по серьезности: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/threat_intelligence_agent.py:850:80: E501 line too long (100 > 79 characters)
                    "description": "Обнаружены новые угрозы, рекомендуется обновить системы защиты",
                                                                               ^
security/ai_agents/threat_intelligence_agent.py:851:80: E501 line too long (80 > 79 characters)
                    "action": "Обновить сигнатуры антивируса и правила файрвола"
                                                                               ^
security/ai_agents/threat_intelligence_agent.py:859:80: E501 line too long (94 > 79 characters)
                    "description": "Низкое качество данных, рекомендуется улучшить источники",
                                                                               ^
security/ai_agents/threat_intelligence_agent.py:875:80: E501 line too long (90 > 79 characters)
            self.log_activity("Ошибка генерации рекомендаций: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/threat_intelligence_agent.py:892:80: E501 line too long (101 > 79 characters)
            self.log_activity("Ошибка остановки ThreatIntelligenceAgent: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/threat_intelligence_agent.py:905:80: E501 line too long (100 > 79 characters)
                          for tid, threat in self.threats.items()}, f, indent=2, ensure_ascii=False)
                                                                               ^
security/ai_agents/threat_intelligence_agent.py:910:80: E501 line too long (82 > 79 characters)
                json.dump(self.metrics.to_dict(), f, indent=2, ensure_ascii=False)
                                                                               ^
security/ai_agents/threat_intelligence_agent.py:915:80: E501 line too long (85 > 79 characters)
            self.log_activity("Ошибка сохранения данных: {}".format(str(e)), "error")
                                                                               ^
security/ai_agents/user_interface_manager_main.py:8:1: F401 'time' imported but unused
import time
^
security/ai_agents/user_interface_manager_main.py:11:1: F401 'typing.List' imported but unused
from typing import Dict, Any, List, Optional
^
security/ai_agents/user_interface_manager_main.py:15:1: E302 expected 2 blank lines, found 1
class InterfaceType(Enum):
^
security/ai_agents/user_interface_manager_main.py:23:1: E302 expected 2 blank lines, found 1
class EventType(Enum):
^
security/ai_agents/user_interface_manager_main.py:32:1: E302 expected 2 blank lines, found 1
@dataclass
^
security/ai_agents/user_interface_manager_main.py:43:1: W293 blank line contains whitespace
    
^
security/ai_agents/user_interface_manager_main.py:48:1: E302 expected 2 blank lines, found 1
class UserInterfaceManagerMain:
^
security/ai_agents/user_interface_manager_main.py:50:1: W293 blank line contains whitespace
    
^
security/ai_agents/user_interface_manager_main.py:64:1: W293 blank line contains whitespace
    
^
security/ai_agents/user_interface_manager_main.py:77:1: W293 blank line contains whitespace
    
^
security/ai_agents/user_interface_manager_main.py:84:1: W293 blank line contains whitespace
                
^
security/ai_agents/user_interface_manager_main.py:87:1: W293 blank line contains whitespace
                
^
security/ai_agents/user_interface_manager_main.py:90:1: W293 blank line contains whitespace
                
^
security/ai_agents/user_interface_manager_main.py:95:1: W293 blank line contains whitespace
                
^
security/ai_agents/user_interface_manager_main.py:100:1: W293 blank line contains whitespace
            
^
security/ai_agents/user_interface_manager_main.py:101:80: E501 line too long (111 > 79 characters)
            self.logger.info(f"Событие {event.event_type.value} залогировано для пользователя {event.user_id}")
                                                                               ^
security/ai_agents/user_interface_manager_main.py:103:1: W293 blank line contains whitespace
            
^
security/ai_agents/user_interface_manager_main.py:107:1: W293 blank line contains whitespace
    
^
security/ai_agents/user_interface_manager_main.py:112:80: E501 line too long (80 > 79 characters)
            event_key = f"{event.interface_type.value}_{event.event_type.value}"
                                                                               ^
security/ai_agents/user_interface_manager_main.py:116:1: W293 blank line contains whitespace
            
^
security/ai_agents/user_interface_manager_main.py:124:1: W293 blank line contains whitespace
            
^
security/ai_agents/user_interface_manager_main.py:125:80: E501 line too long (84 > 79 characters)
            user_activity = self.interface_analytics["user_activity"][event.user_id]
                                                                               ^
security/ai_agents/user_interface_manager_main.py:129:1: W293 blank line contains whitespace
            
^
security/ai_agents/user_interface_manager_main.py:132:1: W293 blank line contains whitespace
    
^
security/ai_agents/user_interface_manager_main.py:145:1: W293 blank line contains whitespace
                
^
security/ai_agents/user_interface_manager_main.py:149:1: W293 blank line contains whitespace
                
^
security/ai_agents/user_interface_manager_main.py:153:1: W293 blank line contains whitespace
                
^
security/ai_agents/user_interface_manager_main.py:155:1: W293 blank line contains whitespace
            
^
security/ai_agents/user_interface_manager_main.py:158:1: W293 blank line contains whitespace
    
^
security/ai_agents/user_interface_manager_main.py:164:1: W293 blank line contains whitespace
            
^
security/ai_agents/user_interface_manager_main.py:171:1: W293 blank line contains whitespace
            
^
security/ai_agents/user_interface_manager_main.py:172:80: E501 line too long (82 > 79 characters)
            error_pattern = self.interface_analytics["error_patterns"][error_type]
                                                                               ^
security/ai_agents/user_interface_manager_main.py:176:1: W293 blank line contains whitespace
            
^
security/ai_agents/user_interface_manager_main.py:177:80: E501 line too long (100 > 79 characters)
            self.logger.warning(f"Ошибка интерфейса: {error_type} для пользователя {event.user_id}")
                                                                               ^
security/ai_agents/user_interface_manager_main.py:178:1: W293 blank line contains whitespace
            
^
security/ai_agents/user_interface_manager_main.py:181:1: W293 blank line contains whitespace
    
^
security/ai_agents/user_interface_manager_main.py:187:1: W293 blank line contains whitespace
            
^
security/ai_agents/user_interface_manager_main.py:188:80: E501 line too long (105 > 79 characters)
            self.logger.warning(f"Событие безопасности: {threat_level} для пользователя {event.user_id}")
                                                                               ^
security/ai_agents/user_interface_manager_main.py:189:1: W293 blank line contains whitespace
            
^
security/ai_agents/user_interface_manager_main.py:191:1: W293 blank line contains whitespace
            
^
security/ai_agents/user_interface_manager_main.py:194:1: W293 blank line contains whitespace
    
^
security/ai_agents/user_interface_manager_main.py:200:1: W293 blank line contains whitespace
            
^
security/ai_agents/user_interface_manager_main.py:202:1: W293 blank line contains whitespace
            
^
security/ai_agents/user_interface_manager_main.py:208:1: W293 blank line contains whitespace
            
^
security/ai_agents/user_interface_manager_main.py:226:1: W293 blank line contains whitespace
            
^
security/ai_agents/user_interface_manager_main.py:230:1: W293 blank line contains whitespace
    
^
security/ai_agents/user_interface_manager_main.py:243:80: E501 line too long (97 > 79 characters)
                    for error_type, pattern in self.interface_analytics["error_patterns"].items()
                                                                               ^
security/ai_agents/user_interface_manager_main.py:247:1: W293 blank line contains whitespace
            
^
security/ai_agents/user_interface_manager_main.py:251:1: W293 blank line contains whitespace
    
^
security/ai_agents/user_interface_manager_main.py:257:1: W293 blank line contains whitespace
            
^
security/ai_agents/user_interface_manager_main.py:262:1: W293 blank line contains whitespace
                
^
security/ai_agents/user_interface_manager_main.py:265:1: W293 blank line contains whitespace
            
^
security/ai_agents/user_interface_manager_main.py:268:1: W293 blank line contains whitespace
            
^
security/ai_agents/user_interface_manager_main.py:272:1: W293 blank line contains whitespace
    
^
security/ai_agents/user_interface_manager_main.py:287:1: W293 blank line contains whitespace
    
^
security/ai_agents/user_interface_manager_main.py:310:1: E305 expected 2 blank lines after class or function definition, found 1
user_interface_manager_main = UserInterfaceManagerMain()^
security/ai_agents/user_interface_manager_main.py:310:57: W292 no newline at end of file
user_interface_manager_main = UserInterfaceManagerMain()                                                        ^
security/ai_agents/voice_analysis_engine.py:29:1: F401 're' imported but unused
import re
^
security/ai_agents/voice_analysis_engine.py:30:1: F401 'time' imported but unused
import time
^
security/ai_agents/voice_analysis_engine.py:36:1: F401 'typing.Tuple' imported but unused
from typing import Dict, List, Optional, Any, Tuple
^
security/ai_agents/voice_analysis_engine.py:39:1: F401 'json' imported but unused
import json
^
security/ai_agents/voice_analysis_engine.py:118:1: W293 blank line contains whitespace
    
^
security/ai_agents/voice_analysis_engine.py:121:80: E501 line too long (97 > 79 characters)
        self.logger = logging.getLogger(f"{self.__class__.__module__}.{self.__class__.__name__}")
                                                                               ^
security/ai_agents/voice_analysis_engine.py:122:1: W293 blank line contains whitespace
        
^
security/ai_agents/voice_analysis_engine.py:127:1: W293 blank line contains whitespace
        
^
security/ai_agents/voice_analysis_engine.py:130:1: W293 blank line contains whitespace
        
^
security/ai_agents/voice_analysis_engine.py:133:1: W293 blank line contains whitespace
        
^
security/ai_agents/voice_analysis_engine.py:138:1: W293 blank line contains whitespace
        
^
security/ai_agents/voice_analysis_engine.py:208:14: W291 trailing whitespace
        self, 
             ^
security/ai_agents/voice_analysis_engine.py:209:27: W291 trailing whitespace
        audio_data: bytes, 
                          ^
security/ai_agents/voice_analysis_engine.py:210:32: W291 trailing whitespace
        phone_number: str = "", 
                               ^
security/ai_agents/voice_analysis_engine.py:215:1: W293 blank line contains whitespace
        """
        Анализ голоса на мошенничество
        
        Args:
            audio_data: Аудиоданные
            phone_number: Номер телефона
            caller_name: Имя звонящего
            
        Returns:
            Dict[str, Any]: Результат анализа
        """
^
security/ai_agents/voice_analysis_engine.py:220:1: W293 blank line contains whitespace
        """
        Анализ голоса на мошенничество
        
        Args:
            audio_data: Аудиоданные
            phone_number: Номер телефона
            caller_name: Имя звонящего
            
        Returns:
            Dict[str, Any]: Результат анализа
        """
^
security/ai_agents/voice_analysis_engine.py:225:80: E501 line too long (81 > 79 characters)
            self.logger.info(f"Анализ голоса для {caller_name} ({phone_number})")
                                                                               ^
security/ai_agents/voice_analysis_engine.py:226:1: W293 blank line contains whitespace
            
^
security/ai_agents/voice_analysis_engine.py:229:1: W293 blank line contains whitespace
            
^
security/ai_agents/voice_analysis_engine.py:232:1: W293 blank line contains whitespace
            
^
security/ai_agents/voice_analysis_engine.py:235:1: W293 blank line contains whitespace
            
^
security/ai_agents/voice_analysis_engine.py:237:80: E501 line too long (85 > 79 characters)
            manipulation_indicators = await self._detect_manipulation(voice_features)
                                                                               ^
security/ai_agents/voice_analysis_engine.py:238:1: W293 blank line contains whitespace
            
^
security/ai_agents/voice_analysis_engine.py:240:80: E501 line too long (82 > 79 characters)
            suspicious_phrases = await self._detect_suspicious_phrases(audio_data)
                                                                               ^
security/ai_agents/voice_analysis_engine.py:241:1: W293 blank line contains whitespace
            
^
security/ai_agents/voice_analysis_engine.py:243:80: E501 line too long (92 > 79 characters)
            synthetic_voice_probability = await self._detect_synthetic_voice(voice_features)
                                                                               ^
security/ai_agents/voice_analysis_engine.py:244:1: W293 blank line contains whitespace
            
^
security/ai_agents/voice_analysis_engine.py:253:1: W293 blank line contains whitespace
            
^
security/ai_agents/voice_analysis_engine.py:265:1: W293 blank line contains whitespace
            
^
security/ai_agents/voice_analysis_engine.py:274:80: E501 line too long (80 > 79 characters)
    async def _extract_voice_features(self, audio_data: bytes) -> VoiceFeatures:
                                                                               ^
security/ai_agents/voice_analysis_engine.py:278:13: F841 local variable 'audio_array' is assigned to but never used
            audio_array = list(audio_data)  # Упрощенная версия без numpy
            ^
security/ai_agents/voice_analysis_engine.py:279:1: W293 blank line contains whitespace
            
^
security/ai_agents/voice_analysis_engine.py:283:13: F841 local variable 'mfcc' is assigned to but never used
            mfcc = [[0.1] * self.n_mfcc]  # Заглушка
            ^
security/ai_agents/voice_analysis_engine.py:289:1: W293 blank line contains whitespace
            
^
security/ai_agents/voice_analysis_engine.py:291:80: E501 line too long (88 > 79 characters)
                pitch_mean=sum(pitch_values) / len(pitch_values) if pitch_values else 0,
                                                                               ^
security/ai_agents/voice_analysis_engine.py:293:80: E501 line too long (89 > 79 characters)
                pitch_range=max(pitch_values) - min(pitch_values) if pitch_values else 0,
                                                                               ^
security/ai_agents/voice_analysis_engine.py:298:80: E501 line too long (110 > 79 characters)
                spectral_centroid=sum(spectral_centroid) / len(spectral_centroid) if spectral_centroid else 0,
                                                                               ^
security/ai_agents/voice_analysis_engine.py:299:80: E501 line too long (106 > 79 characters)
                spectral_rolloff=sum(spectral_rolloff) / len(spectral_rolloff) if spectral_rolloff else 0,
                                                                               ^
security/ai_agents/voice_analysis_engine.py:300:80: E501 line too long (114 > 79 characters)
                spectral_bandwidth=sum(spectral_bandwidth) / len(spectral_bandwidth) if spectral_bandwidth else 0,
                                                                               ^
security/ai_agents/voice_analysis_engine.py:304:1: W293 blank line contains whitespace
            
^
security/ai_agents/voice_analysis_engine.py:315:80: E501 line too long (90 > 79 characters)
    async def _analyze_emotions(self, voice_features: VoiceFeatures) -> EmotionalAnalysis:
                                                                               ^
security/ai_agents/voice_analysis_engine.py:328:1: W293 blank line contains whitespace
            
^
security/ai_agents/voice_analysis_engine.py:333:1: W293 blank line contains whitespace
            
^
security/ai_agents/voice_analysis_engine.py:338:1: W293 blank line contains whitespace
            
^
security/ai_agents/voice_analysis_engine.py:342:1: W293 blank line contains whitespace
            
^
security/ai_agents/voice_analysis_engine.py:346:1: W293 blank line contains whitespace
            
^
security/ai_agents/voice_analysis_engine.py:349:1: W293 blank line contains whitespace
            
^
security/ai_agents/voice_analysis_engine.py:351:80: E501 line too long (90 > 79 characters)
            stress_level = emotion_scores.get("stress", 0) + emotion_scores.get("fear", 0)
                                                                               ^
security/ai_agents/voice_analysis_engine.py:352:1: W293 blank line contains whitespace
            
^
security/ai_agents/voice_analysis_engine.py:354:80: E501 line too long (83 > 79 characters)
            valence = emotion_scores.get("happy", 0) - emotion_scores.get("sad", 0)
                                                                               ^
security/ai_agents/voice_analysis_engine.py:355:80: E501 line too long (118 > 79 characters)
            arousal = emotion_scores.get("angry", 0) + emotion_scores.get("fear", 0) + emotion_scores.get("stress", 0)
                                                                               ^
security/ai_agents/voice_analysis_engine.py:356:80: E501 line too long (94 > 79 characters)
            dominance = emotion_scores.get("angry", 0) + emotion_scores.get("manipulative", 0)
                                                                               ^
security/ai_agents/voice_analysis_engine.py:357:1: W293 blank line contains whitespace
            
^
security/ai_agents/voice_analysis_engine.py:367:1: W293 blank line contains whitespace
            
^
security/ai_agents/voice_analysis_engine.py:380:80: E501 line too long (85 > 79 characters)
    async def _analyze_tone(self, voice_features: VoiceFeatures) -> Dict[str, float]:
                                                                               ^
security/ai_agents/voice_analysis_engine.py:391:1: W293 blank line contains whitespace
            
^
security/ai_agents/voice_analysis_engine.py:393:80: E501 line too long (85 > 79 characters)
            if voice_features.energy_mean > 0.08 and voice_features.pitch_mean > 200:
                                                                               ^
security/ai_agents/voice_analysis_engine.py:396:1: W293 blank line contains whitespace
            
^
security/ai_agents/voice_analysis_engine.py:400:1: W293 blank line contains whitespace
            
^
security/ai_agents/voice_analysis_engine.py:405:1: W293 blank line contains whitespace
            
^
security/ai_agents/voice_analysis_engine.py:409:1: W293 blank line contains whitespace
            
^
security/ai_agents/voice_analysis_engine.py:411:1: W293 blank line contains whitespace
            
^
security/ai_agents/voice_analysis_engine.py:416:80: E501 line too long (98 > 79 characters)
    async def _detect_manipulation(self, voice_features: VoiceFeatures) -> ManipulationIndicators:
                                                                               ^
security/ai_agents/voice_analysis_engine.py:430:1: W293 blank line contains whitespace
            
^
security/ai_agents/voice_analysis_engine.py:434:1: W293 blank line contains whitespace
            
^
security/ai_agents/voice_analysis_engine.py:437:1: W293 blank line contains whitespace
            
^
security/ai_agents/voice_analysis_engine.py:440:1: W293 blank line contains whitespace
            
^
security/ai_agents/voice_analysis_engine.py:444:1: W293 blank line contains whitespace
            
^
security/ai_agents/voice_analysis_engine.py:445:80: E501 line too long (81 > 79 characters)
            total_manipulation_score = sum(indicators.values()) / len(indicators)
                                                                               ^
security/ai_agents/voice_analysis_engine.py:446:1: W293 blank line contains whitespace
            
^
security/ai_agents/voice_analysis_engine.py:458:1: W293 blank line contains whitespace
            
^
security/ai_agents/voice_analysis_engine.py:473:1: W293 blank line contains whitespace
            
^
security/ai_agents/voice_analysis_engine.py:481:1: W293 blank line contains whitespace
            
^
security/ai_agents/voice_analysis_engine.py:483:1: W293 blank line contains whitespace
            
^
security/ai_agents/voice_analysis_engine.py:488:80: E501 line too long (84 > 79 characters)
    async def _detect_synthetic_voice(self, voice_features: VoiceFeatures) -> float:
                                                                               ^
security/ai_agents/voice_analysis_engine.py:492:1: W293 blank line contains whitespace
            
^
security/ai_agents/voice_analysis_engine.py:496:1: W293 blank line contains whitespace
            
^
security/ai_agents/voice_analysis_engine.py:497:80: E501 line too long (81 > 79 characters)
            if voice_features.zero_crossing_rate < 0.01:  # Слишком чистый сигнал
                                                                               ^
security/ai_agents/voice_analysis_engine.py:499:1: W293 blank line contains whitespace
            
^
security/ai_agents/voice_analysis_engine.py:500:80: E501 line too long (101 > 79 characters)
            if voice_features.spectral_centroid < 1000:  # Неестественные спектральные характеристики
                                                                               ^
security/ai_agents/voice_analysis_engine.py:502:1: W293 blank line contains whitespace
            
^
security/ai_agents/voice_analysis_engine.py:504:1: W293 blank line contains whitespace
            
^
security/ai_agents/voice_analysis_engine.py:520:1: W293 blank line contains whitespace
            
^
security/ai_agents/voice_analysis_engine.py:524:1: W293 blank line contains whitespace
            
^
security/ai_agents/voice_analysis_engine.py:525:80: E501 line too long (91 > 79 characters)
            if emotional_analysis.primary_emotion in [EmotionType.FEAR, EmotionType.PANIC]:
                                                                               ^
security/ai_agents/voice_analysis_engine.py:527:1: W293 blank line contains whitespace
            
^
security/ai_agents/voice_analysis_engine.py:531:1: W293 blank line contains whitespace
            
^
security/ai_agents/voice_analysis_engine.py:534:1: W293 blank line contains whitespace
            
^
security/ai_agents/voice_analysis_engine.py:538:1: W293 blank line contains whitespace
            
^
security/ai_agents/voice_analysis_engine.py:542:1: W293 blank line contains whitespace
            
^
security/ai_agents/voice_analysis_engine.py:546:1: W293 blank line contains whitespace
            
^
security/ai_agents/voice_analysis_engine.py:552:1: W293 blank line contains whitespace
            
^
security/ai_agents/voice_analysis_engine.py:554:1: W293 blank line contains whitespace
            
^
security/ai_agents/voice_analysis_engine.py:585:1: W293 blank line contains whitespace
        
^
security/ai_agents/voice_analysis_engine.py:588:80: E501 line too long (96 > 79 characters)
        result = await engine.analyze_voice(test_audio, "+7-999-888-77-66", "Тестовый звонящий")
                                                                               ^
security/ai_agents/voice_analysis_engine.py:589:1: W293 blank line contains whitespace
        
^
security/ai_agents/voice_analysis_engine.py:591:1: W293 blank line contains whitespace
        
^
security/ai_agents/voice_analysis_engine.py:595:1: W293 blank line contains whitespace
    
^
security/ai_agents/voice_analysis_engine.py:597:46: W292 no newline at end of file
    asyncio.run(test_voice_analysis_engine())                                             ^
security/ai_agents/voice_control_manager.py:13:1: F401 'time' imported but unused
import time
^
security/ai_agents/voice_control_manager.py:16:1: F401 'asyncio' imported but unused
import asyncio
^
security/ai_agents/voice_control_manager.py:19:1: F401 'typing.Tuple' imported but unused
from typing import Dict, List, Optional, Any, Tuple, Callable
^
security/ai_agents/voice_control_manager.py:19:1: F401 'typing.Callable' imported but unused
from typing import Dict, List, Optional, Any, Tuple, Callable
^
security/ai_agents/voice_control_manager.py:21:1: F401 'threading' imported but unused
import threading
^
security/ai_agents/voice_control_manager.py:109:80: E501 line too long (93 > 79 characters)
        super().__init__("VoiceControlManager", "Голосовое управление системой безопасности")
                                                                               ^
security/ai_agents/voice_control_manager.py:156:9: F841 local variable 'e' is assigned to but never used
        except Exception as e:
        ^
security/ai_agents/voice_control_manager.py:183:80: E501 line too long (81 > 79 characters)
                responses=["Команда получена", "Обрабатываю", "Готово", "Ошибка"]
                                                                               ^
security/ai_agents/voice_control_manager.py:199:80: E501 line too long (81 > 79 characters)
                responses=["Команда получена", "Обрабатываю", "Готово", "Ошибка"]
                                                                               ^
security/ai_agents/voice_control_manager.py:208:80: E501 line too long (98 > 79 characters)
        log_file = os.path.join(log_dir, f"voice_control_{datetime.now().strftime('%Y%m%d')}.log")
                                                                               ^
security/ai_agents/voice_control_manager.py:213:80: E501 line too long (95 > 79 characters)
            handlers=[logging.FileHandler(log_file, encoding='utf-8'), logging.StreamHandler()]
                                                                               ^
security/ai_agents/voice_control_manager.py:224:21: F841 local variable 'config' is assigned to but never used
                    config = json.load(f)
                    ^
security/ai_agents/voice_control_manager.py:225:80: E501 line too long (84 > 79 characters)
                    self.logger.info("Конфигурация голосового управления загружена")
                                                                               ^
security/ai_agents/voice_control_manager.py:227:80: E501 line too long (96 > 79 characters)
                self.logger.info("Конфигурация не найдена, используются настройки по умолчанию")
                                                                               ^
security/ai_agents/voice_control_manager.py:231:80: E501 line too long (117 > 79 characters)
    def process_voice_command(self, text: str, user_id: str, language: VoiceLanguage = VoiceLanguage.RUSSIAN) -> str:
                                                                               ^
security/ai_agents/voice_control_manager.py:234:80: E501 line too long (98 > 79 characters)
            command_id = hashlib.md5(f"{text}{user_id}{datetime.now()}".encode()).hexdigest()[:12]
                                                                               ^
security/ai_agents/voice_control_manager.py:254:80: E501 line too long (90 > 79 characters)
                id=hashlib.md5(f"{command_id}{datetime.now()}".encode()).hexdigest()[:12],
                                                                               ^
security/ai_agents/voice_control_manager.py:268:80: E501 line too long (88 > 79 characters)
            self.logger.info(f"Обработана голосовая команда: {text} -> {response_text}")
                                                                               ^
security/ai_agents/voice_control_manager.py:280:80: E501 line too long (87 > 79 characters)
        security_keywords = ["безопасность", "защита", "блокировка", "угроза", "вирус"]
                                                                               ^
security/ai_agents/voice_control_manager.py:282:80: E501 line too long (82 > 79 characters)
        emergency_keywords = ["помощь", "экстренно", "скорая", "полиция", "пожар"]
                                                                               ^
security/ai_agents/voice_control_manager.py:329:80: E501 line too long (87 > 79 characters)
            return "Система безопасности активирована. Все угрозы будут заблокированы."
                                                                               ^
security/ai_agents/voice_control_manager.py:331:80: E501 line too long (99 > 79 characters)
            return "Запускаю полное сканирование системы безопасности. Это займет несколько минут."
                                                                               ^
security/ai_agents/voice_control_manager.py:333:80: E501 line too long (102 > 79 characters)
            return "Статус системы безопасности: все системы работают нормально. Угроз не обнаружено."
                                                                               ^
security/ai_agents/voice_control_manager.py:342:80: E501 line too long (93 > 79 characters)
            return "Проверяю статус детей. Все в безопасности. Местоположение отслеживается."
                                                                               ^
security/ai_agents/voice_control_manager.py:344:80: E501 line too long (85 > 79 characters)
            return "Уведомляю родителей о вашем запросе. Они будут проинформированы."
                                                                               ^
security/ai_agents/voice_control_manager.py:348:80: E501 line too long (80 > 79 characters)
            return "Семейная команда выполнена. Все члены семьи в безопасности."
                                                                               ^
security/ai_agents/voice_control_manager.py:355:80: E501 line too long (114 > 79 characters)
            return "🚨 ЭКСТРЕННАЯ СИТУАЦИЯ! Вызываю службы экстренного реагирования. Ваше местоположение передано."
                                                                               ^
security/ai_agents/voice_control_manager.py:357:80: E501 line too long (96 > 79 characters)
            return "🚑 Вызываю скорую помощь. Ваше местоположение и медицинские данные переданы."
                                                                               ^
security/ai_agents/voice_control_manager.py:359:80: E501 line too long (91 > 79 characters)
            return "🚔 Вызываю полицию. Ваше местоположение передано. Оставайтесь на месте."
                                                                               ^
security/ai_agents/voice_control_manager.py:361:80: E501 line too long (97 > 79 characters)
            return "🔥 Вызываю пожарную службу. Ваше местоположение передано. Покиньте помещение."
                                                                               ^
security/ai_agents/voice_control_manager.py:363:80: E501 line too long (94 > 79 characters)
            return "Экстренная команда выполнена. Службы экстренного реагирования уведомлены."
                                                                               ^
security/ai_agents/voice_control_manager.py:372:80: E501 line too long (82 > 79 characters)
            return "Проверяю входящие звонки. Последний звонок был 5 минут назад."
                                                                               ^
security/ai_agents/voice_control_manager.py:397:80: E501 line too long (83 > 79 characters)
        return """Доступные голосовые команды:

🔒 Безопасность: "включить защиту", "заблокировать угрозы", "проверить безопасность"
👨‍👩‍👧‍👦 Семья: "статус детей", "уведомления родителей", "проверить бабушку"
🚨 Экстренно: "помощь", "скорая помощь", "вызвать полицию"
📱 Уведомления: "новые сообщения", "проверить звонки", "SMS"
⚙️ Управление: "включить систему", "настроить", "изменить параметры"
❓ Помощь: "что умеешь", "как пользоваться", "команды"

Просто скажите команду, и я выполню её!"""
                                              

                               ^
security/ai_agents/voice_control_manager.py:406:80: E501 line too long (80 > 79 characters)
    def _determine_response_type(self, response_text: str) -> VoiceResponseType:
                                                                               ^
security/ai_agents/voice_control_manager.py:408:80: E501 line too long (86 > 79 characters)
        if "ошибка" in response_text.lower() or "не удалось" in response_text.lower():
                                                                               ^
security/ai_agents/voice_control_manager.py:422:80: E501 line too long (83 > 79 characters)
            for messenger_name, integration in self.messenger_integrations.items():
                                                                               ^
security/ai_agents/voice_control_manager.py:428:80: E501 line too long (93 > 79 characters)
    def _send_to_messenger(self, integration: MessengerIntegration, response: VoiceResponse):
                                                                               ^
security/ai_agents/voice_control_manager.py:443:80: E501 line too long (91 > 79 characters)
                "processed_commands": len([c for c in self.voice_commands if c.processed]),
                                                                               ^
security/ai_agents/voice_control_manager.py:444:80: E501 line too long (93 > 79 characters)
                "pending_commands": len([c for c in self.voice_commands if not c.processed]),
                                                                               ^
security/ai_agents/voice_control_manager.py:446:80: E501 line too long (83 > 79 characters)
                "sent_responses": len([r for r in self.voice_responses if r.sent]),
                                                                               ^
security/ai_agents/voice_control_manager.py:453:80: E501 line too long (80 > 79 characters)
                    for name, integration in self.messenger_integrations.items()
                                                                               ^
security/ai_agents/voice_control_manager.py:455:80: E501 line too long (84 > 79 characters)
                "color_scheme": self.color_scheme["voice_colors"]["voice_elements"],
                                                                               ^
security/ai_agents/voice_control_manager.py:489:80: E501 line too long (110 > 79 characters)
                f"Тестирование завершено: {passed_tests}/{total_tests} тестов пройдено ({success_rate:.1f}%)")
                                                                               ^
security/ai_agents/voice_control_manager.py:565:80: E501 line too long (92 > 79 characters)
            family_commands = ["статус детей", "уведомления родителей", "проверить бабушку"]
                                                                               ^
security/ai_agents/voice_control_manager.py:579:80: E501 line too long (101 > 79 characters)
            security_commands = ["включить защиту", "заблокировать угрозы", "проверить безопасность"]
                                                                               ^
security/ai_agents/voice_control_manager.py:613:80: E501 line too long (90 > 79 characters)
                    "methods_count": len([m for m in dir(self) if not m.startswith('_')]),
                                                                               ^
security/ai_agents/voice_control_manager.py:668:80: E501 line too long (107 > 79 characters)
                if not isinstance(language, str) or language not in [lang.value for lang in VoiceLanguage]:
                                                                               ^
security/ai_agents/voice_control_manager.py:713:80: E501 line too long (85 > 79 characters)
            processed_commands = len([c for c in self.voice_commands if c.processed])
                                                                               ^
security/ai_agents/voice_control_manager.py:729:80: E501 line too long (102 > 79 characters)
            today_commands = len([c for c in self.voice_commands if c.timestamp.date() == now.date()])
                                                                               ^
security/ai_agents/voice_control_manager.py:730:80: E501 line too long (107 > 79 characters)
            week_commands = len([c for c in self.voice_commands if c.timestamp >= now - timedelta(days=7)])
                                                                               ^
security/ai_agents/voice_control_manager.py:735:80: E501 line too long (108 > 79 characters)
                "processing_rate": (processed_commands / total_commands * 100) if total_commands > 0 else 0,
                                                                               ^
security/ai_agents/voice_control_manager.py:740:80: E501 line too long (131 > 79 characters)
                "average_confidence": sum(c.confidence for c in self.voice_commands) / total_commands if total_commands > 0 else 0,
                                                                               ^
security/ai_agents/voice_control_manager.py:744:80: E501 line too long (90 > 79 characters)
                        "commands_sent": len([r for r in self.voice_responses if r.sent]),
                                                                               ^
security/ai_agents/voice_control_manager.py:747:80: E501 line too long (80 > 79 characters)
                    for name, integration in self.messenger_integrations.items()
                                                                               ^
security/ai_agents/voice_control_manager.py:771:80: E501 line too long (84 > 79 characters)
                    "processed_commands": voice_status.get("processed_commands", 0),
                                                                               ^
security/ai_agents/voice_control_manager.py:772:80: E501 line too long (97 > 79 characters)
                    "messenger_integrations": len(voice_status.get("messenger_integrations", {}))
                                                                               ^
security/ai_agents/voice_control_manager.py:779:80: E501 line too long (90 > 79 characters)
                    "voice_elements": self.color_scheme["voice_colors"]["voice_elements"],
                                                                               ^
security/ai_agents/voice_control_manager.py:814:80: E501 line too long (90 > 79 characters)
                    "voice_elements": self.color_scheme["voice_colors"]["voice_elements"],
                                                                               ^
security/ai_agents/voice_control_manager.py:838:80: E501 line too long (80 > 79 characters)
    print(f"📊 Цветовая схема: {voice_manager.color_scheme['base_scheme'].name}")
                                                                               ^
security/ai_agents/voice_response_generator.py:15:1: F401 'hashlib' imported but unused
import hashlib
^
security/ai_agents/voice_response_generator.py:16:1: F401 'asyncio' imported but unused
import asyncio
^
security/ai_agents/voice_response_generator.py:17:1: F401 'wave' imported but unused
import wave
^
security/ai_agents/voice_response_generator.py:18:1: F401 'audioop' imported but unused
import audioop
^
security/ai_agents/voice_response_generator.py:19:1: F401 'datetime.timedelta' imported but unused
from datetime import datetime, timedelta
^
security/ai_agents/voice_response_generator.py:21:1: F401 'typing.List' imported but unused
from typing import Dict, List, Optional, Any, Tuple, Callable
^
security/ai_agents/voice_response_generator.py:21:1: F401 'typing.Tuple' imported but unused
from typing import Dict, List, Optional, Any, Tuple, Callable
^
security/ai_agents/voice_response_generator.py:21:1: F401 'typing.Callable' imported but unused
from typing import Dict, List, Optional, Any, Tuple, Callable
^
security/ai_agents/voice_response_generator.py:23:1: F401 'threading' imported but unused
import threading
^
security/ai_agents/voice_response_generator.py:25:1: F401 'numpy as np' imported but unused
import numpy as np
^
security/ai_agents/voice_response_generator.py:32:5: F401 'config.color_scheme.MatrixAIColorScheme' imported but unused
    from config.color_scheme import MatrixAIColorScheme, ColorTheme
    ^
security/ai_agents/voice_response_generator.py:32:5: F401 'config.color_scheme.ColorTheme' imported but unused
    from config.color_scheme import MatrixAIColorScheme, ColorTheme
    ^
security/ai_agents/voice_response_generator.py:103:80: E501 line too long (81 > 79 characters)
            description="AI-генератор голосовых ответов для системы безопасности"
                                                                               ^
security/ai_agents/voice_response_generator.py:141:80: E501 line too long (86 > 79 characters)
            "supported_voices": [VoiceType.MALE, VoiceType.FEMALE, VoiceType.NATURAL],
                                                                               ^
security/ai_agents/voice_response_generator.py:254:80: E501 line too long (82 > 79 characters)
            self.logger.info("Компоненты VoiceResponseGenerator инициализированы")
                                                                               ^
security/ai_agents/voice_response_generator.py:296:80: E501 line too long (83 > 79 characters)
                                voice_type: VoiceType = None, language: str = "ru",
                                                                               ^
security/ai_agents/voice_response_generator.py:297:80: E501 line too long (85 > 79 characters)
                                user_id: str = "system", session_id: str = "default",
                                                                               ^
security/ai_agents/voice_response_generator.py:298:80: E501 line too long (85 > 79 characters)
                                emotion: str = "neutral", **kwargs) -> VoiceResponse:
                                                                               ^
security/ai_agents/voice_response_generator.py:312:80: E501 line too long (87 > 79 characters)
            processed_text = await self._preprocess_text(text, response_type, language)
                                                                               ^
security/ai_agents/voice_response_generator.py:315:80: E501 line too long (98 > 79 characters)
            detected_emotion = await self.emotion_detector.detect_emotion(processed_text, emotion)
                                                                               ^
security/ai_agents/voice_response_generator.py:318:80: E501 line too long (83 > 79 characters)
            voice_settings = self._get_voice_settings(voice_type, detected_emotion)
                                                                               ^
security/ai_agents/voice_response_generator.py:341:80: E501 line too long (94 > 79 characters)
            quality = self._calculate_quality(processed_text, optimized_audio, voice_settings)
                                                                               ^
security/ai_agents/voice_response_generator.py:371:80: E501 line too long (95 > 79 characters)
            self.logger.info(f"Голосовой ответ успешно сгенерирован: {processed_text[:50]}...")
                                                                               ^
security/ai_agents/voice_response_generator.py:403:80: E501 line too long (99 > 79 characters)
    async def _preprocess_text(self, text: str, response_type: ResponseType, language: str) -> str:
                                                                               ^
security/ai_agents/voice_response_generator.py:410:80: E501 line too long (93 > 79 characters)
            processed_text = template.format(**{"text": text, "message": text, "info": text})
                                                                               ^
security/ai_agents/voice_response_generator.py:413:80: E501 line too long (89 > 79 characters)
            processed_text = self.text_processor.normalize_text(processed_text, language)
                                                                               ^
security/ai_agents/voice_response_generator.py:417:80: E501 line too long (106 > 79 characters)
                processed_text = await self.text_processor.correct_pronunciation(processed_text, language)
                                                                               ^
security/ai_agents/voice_response_generator.py:425:80: E501 line too long (88 > 79 characters)
    def _get_response_template(self, response_type: ResponseType, language: str) -> str:
                                                                               ^
security/ai_agents/voice_response_generator.py:428:80: E501 line too long (80 > 79 characters)
            templates = self.config["response_templates"].get(response_type, [])
                                                                               ^
security/ai_agents/voice_response_generator.py:440:80: E501 line too long (89 > 79 characters)
    def _get_voice_settings(self, voice_type: VoiceType, emotion: str) -> Dict[str, Any]:
                                                                               ^
security/ai_agents/voice_response_generator.py:451:80: E501 line too long (95 > 79 characters)
                "speed": voice_settings.get("speed", 1.0) * emotion_settings.get("speed", 1.0),
                                                                               ^
security/ai_agents/voice_response_generator.py:452:80: E501 line too long (95 > 79 characters)
                "pitch": voice_settings.get("pitch", 1.0) * emotion_settings.get("pitch", 1.0),
                                                                               ^
security/ai_agents/voice_response_generator.py:453:80: E501 line too long (97 > 79 characters)
                "volume": voice_settings.get("volume", 0.8) * emotion_settings.get("volume", 1.0)
                                                                               ^
security/ai_agents/voice_response_generator.py:462:80: E501 line too long (104 > 79 characters)
    def _calculate_quality(self, text: str, audio_data: bytes, voice_settings: Dict[str, Any]) -> float:
                                                                               ^
security/ai_agents/voice_response_generator.py:475:80: E501 line too long (98 > 79 characters)
            voice_quality = 0.05 if all(0.5 <= v <= 2.0 for v in voice_settings.values()) else 0.0
                                                                               ^
security/ai_agents/voice_response_generator.py:478:80: E501 line too long (91 > 79 characters)
            quality = min(1.0, base_quality + length_bonus + audio_quality + voice_quality)
                                                                               ^
security/ai_agents/voice_response_generator.py:516:80: E501 line too long (126 > 79 characters)
            filename = f"data/voice_responses/response_{response.timestamp.strftime('%Y%m%d_%H%M%S')}_{response.user_id}.json"
                                                                               ^
security/ai_agents/voice_response_generator.py:522:80: E501 line too long (148 > 79 characters)
            audio_filename = f"data/voice_responses/audio_{response.timestamp.strftime('%Y%m%d_%H%M%S')}_{response.user_id}.{response.format.value}"
                                                                               ^
security/ai_agents/voice_response_generator.py:536:80: E501 line too long (82 > 79 characters)
            total_quality = self.average_quality * (self.successful_generated - 1)
                                                                               ^
security/ai_agents/voice_response_generator.py:537:80: E501 line too long (100 > 79 characters)
            self.average_quality = (total_quality + response.confidence) / self.successful_generated
                                                                               ^
security/ai_agents/voice_response_generator.py:539:80: E501 line too long (102 > 79 characters)
            self.logger.debug(f"Статистика обновлена: {self.successful_generated} успешных генераций")
                                                                               ^
security/ai_agents/voice_response_generator.py:547:80: E501 line too long (118 > 79 characters)
            success_rate = (self.successful_generated / self.total_generated * 100) if self.total_generated > 0 else 0
                                                                               ^
security/ai_agents/voice_response_generator.py:557:80: E501 line too long (95 > 79 characters)
                "supported_voices": [voice.value for voice in self.config["supported_voices"]],
                                                                               ^
security/ai_agents/voice_response_generator.py:558:80: E501 line too long (90 > 79 characters)
                "response_types": [response_type.value for response_type in ResponseType],
                                                                               ^
security/ai_agents/voice_response_generator.py:559:80: E501 line too long (101 > 79 characters)
                "audio_formats": [format_type.value for format_type in self.config["audio_formats"]],
                                                                               ^
security/ai_agents/voice_response_generator.py:771:80: E501 line too long (108 > 79 characters)
            total_checks = len(architectural_principles) + len(functionality) + len(security) + len(testing)
                                                                               ^
security/ai_agents/voice_response_generator.py:785:80: E501 line too long (102 > 79 characters)
                "quality_grade": "A+" if quality_score >= 95 else "A" if quality_score >= 90 else "B",
                                                                               ^
security/ai_agents/voice_response_generator.py:882:80: E501 line too long (90 > 79 characters)
    print(f"Тесты пройдены: {test_results['tests_passed']}/{test_results['total_tests']}")
                                                                               ^
security/ai_agents/voice_response_generator.py:886:80: E501 line too long (101 > 79 characters)
    print(f"Качество: {quality_report['quality_score']:.1f}/100 ({quality_report['quality_grade']})")
                                                                               ^
security/ai_agents/voice_security_validator.py:15:1: F401 'hashlib' imported but unused
import hashlib
^
security/ai_agents/voice_security_validator.py:16:1: F401 'asyncio' imported but unused
import asyncio
^
security/ai_agents/voice_security_validator.py:18:1: F401 'datetime.timedelta' imported but unused
from datetime import datetime, timedelta
^
security/ai_agents/voice_security_validator.py:20:1: F401 'typing.Tuple' imported but unused
from typing import Dict, List, Optional, Any, Tuple, Callable
^
security/ai_agents/voice_security_validator.py:20:1: F401 'typing.Callable' imported but unused
from typing import Dict, List, Optional, Any, Tuple, Callable
^
security/ai_agents/voice_security_validator.py:22:1: F401 'threading' imported but unused
import threading
^
security/ai_agents/voice_security_validator.py:30:5: F401 'config.color_scheme.MatrixAIColorScheme' imported but unused
    from config.color_scheme import MatrixAIColorScheme, ColorTheme
    ^
security/ai_agents/voice_security_validator.py:30:5: F401 'config.color_scheme.ColorTheme' imported but unused
    from config.color_scheme import MatrixAIColorScheme, ColorTheme
    ^
security/ai_agents/voice_security_validator.py:103:80: E501 line too long (89 > 79 characters)
            description="AI-валидатор безопасности голосовых команд системы безопасности"
                                                                               ^
security/ai_agents/voice_security_validator.py:145:80: E501 line too long (89 > 79 characters)
                SecurityLevel.CRITICAL: {"threshold": 0.9, "action": "block_immediately"}
                                                                               ^
security/ai_agents/voice_security_validator.py:213:80: E501 line too long (80 > 79 characters)
                "удалить", "delete", "уничтожить", "destroy", "стереть", "wipe",
                                                                               ^
security/ai_agents/voice_security_validator.py:214:80: E501 line too long (85 > 79 characters)
                "отключить", "disable", "выключить", "turn off", "остановить", "stop"
                                                                               ^
security/ai_agents/voice_security_validator.py:256:80: E501 line too long (82 > 79 characters)
            self.logger.info("Компоненты VoiceSecurityValidator инициализированы")
                                                                               ^
security/ai_agents/voice_security_validator.py:298:80: E501 line too long (81 > 79 characters)
    async def validate_command(self, command: str, user_id: str, session_id: str,
                                                                               ^
security/ai_agents/voice_security_validator.py:299:80: E501 line too long (93 > 79 characters)
                               context: Optional[Dict[str, Any]] = None) -> ValidationReport:
                                                                               ^
security/ai_agents/voice_security_validator.py:310:80: E501 line too long (83 > 79 characters)
            threat_patterns = await self.pattern_analyzer.analyze_patterns(command)
                                                                               ^
security/ai_agents/voice_security_validator.py:313:80: E501 line too long (84 > 79 characters)
            keyword_analysis = await self.keyword_analyzer.analyze_keywords(command)
                                                                               ^
security/ai_agents/voice_security_validator.py:316:80: E501 line too long (98 > 79 characters)
            context_analysis = await self.context_analyzer.analyze_context(command, context or {})
                                                                               ^
security/ai_agents/voice_security_validator.py:319:80: E501 line too long (87 > 79 characters)
            ml_threats = await self.ml_threat_detector.detect_threats(command, context)
                                                                               ^
security/ai_agents/voice_security_validator.py:322:80: E501 line too long (104 > 79 characters)
            behavior_analysis = await self.behavior_analyzer.analyze_behavior(user_id, command, context)
                                                                               ^
security/ai_agents/voice_security_validator.py:325:80: E501 line too long (93 > 79 characters)
            all_threats = threat_patterns + keyword_analysis + ml_threats + behavior_analysis
                                                                               ^
security/ai_agents/voice_security_validator.py:331:80: E501 line too long (94 > 79 characters)
            validation_result = self._determine_validation_result(security_level, all_threats)
                                                                               ^
security/ai_agents/voice_security_validator.py:334:80: E501 line too long (92 > 79 characters)
            recommendations = self._generate_recommendations(validation_result, all_threats)
                                                                               ^
security/ai_agents/voice_security_validator.py:337:80: E501 line too long (82 > 79 characters)
            confidence = self._calculate_confidence(all_threats, context_analysis)
                                                                               ^
security/ai_agents/voice_security_validator.py:360:80: E501 line too long (91 > 79 characters)
            if validation_result in [ValidationResult.DANGEROUS, ValidationResult.BLOCKED]:
                                                                               ^
security/ai_agents/voice_security_validator.py:361:80: E501 line too long (82 > 79 characters)
                await self.blocking_system.block_command(command, user_id, report)
                                                                               ^
security/ai_agents/voice_security_validator.py:363:80: E501 line too long (100 > 79 characters)
            self.logger.info(f"Команда валидирована: {command[:50]}... - {validation_result.value}")
                                                                               ^
security/ai_agents/voice_security_validator.py:382:80: E501 line too long (84 > 79 characters)
            if len(command) > self.config["validation_rules"]["max_command_length"]:
                                                                               ^
security/ai_agents/voice_security_validator.py:391:80: E501 line too long (88 > 79 characters)
    def _determine_security_level(self, threats: List[SecurityThreat]) -> SecurityLevel:
                                                                               ^
security/ai_agents/voice_security_validator.py:423:80: E501 line too long (88 > 79 characters)
                                     threats: List[SecurityThreat]) -> ValidationResult:
                                                                               ^
security/ai_agents/voice_security_validator.py:427:13: F841 local variable 'thresholds' is assigned to but never used
            thresholds = self.config["security_levels"]
            ^
security/ai_agents/voice_security_validator.py:442:80: E501 line too long (110 > 79 characters)
    def _generate_recommendations(self, result: ValidationResult, threats: List[SecurityThreat]) -> List[str]:
                                                                               ^
security/ai_agents/voice_security_validator.py:479:80: E501 line too long (110 > 79 characters)
    def _calculate_confidence(self, threats: List[SecurityThreat], context_analysis: Dict[str, Any]) -> float:
                                                                               ^
security/ai_agents/voice_security_validator.py:486:80: E501 line too long (91 > 79 characters)
            threat_confidence = sum(threat.confidence for threat in threats) / len(threats)
                                                                               ^
security/ai_agents/voice_security_validator.py:489:80: E501 line too long (83 > 79 characters)
            context_bonus = 0.1 if context_analysis.get("reliable", False) else 0.0
                                                                               ^
security/ai_agents/voice_security_validator.py:536:80: E501 line too long (128 > 79 characters)
            filename = f"data/security_validation/validation_{report.timestamp.strftime('%Y%m%d_%H%M%S')}_{report.user_id}.json"
                                                                               ^
security/ai_agents/voice_security_validator.py:560:80: E501 line too long (88 > 79 characters)
            self.logger.debug(f"Статистика обновлена: {self.total_validated} валидаций")
                                                                               ^
security/ai_agents/voice_security_validator.py:568:80: E501 line too long (108 > 79 characters)
            safe_rate = (self.safe_commands / self.total_validated * 100) if self.total_validated > 0 else 0
                                                                               ^
security/ai_agents/voice_security_validator.py:569:80: E501 line too long (107 > 79 characters)
            threat_rate = (self.threats_detected / self.total_validated) if self.total_validated > 0 else 0
                                                                               ^
security/ai_agents/voice_security_validator.py:583:80: E501 line too long (84 > 79 characters)
                "validation_results": [result.value for result in ValidationResult],
                                                                               ^
security/ai_agents/voice_security_validator.py:795:80: E501 line too long (108 > 79 characters)
            total_checks = len(architectural_principles) + len(functionality) + len(security) + len(testing)
                                                                               ^
security/ai_agents/voice_security_validator.py:809:80: E501 line too long (102 > 79 characters)
                "quality_grade": "A+" if quality_score >= 95 else "A" if quality_score >= 90 else "B",
                                                                               ^
security/ai_agents/voice_security_validator.py:870:80: E501 line too long (84 > 79 characters)
                    description=f"Обнаружено критическое ключевое слово: {keyword}",
                                                                               ^
security/ai_agents/voice_security_validator.py:938:80: E501 line too long (90 > 79 characters)
    print(f"Тесты пройдены: {test_results['tests_passed']}/{test_results['total_tests']}")
                                                                               ^
security/ai_agents/voice_security_validator.py:942:80: E501 line too long (101 > 79 characters)
    print(f"Качество: {quality_report['quality_score']:.1f}/100 ({quality_report['quality_grade']})")
                                                                               ^
security/antivirus/antivirus_security_system.py:17:1: F401 'typing.Tuple' imported but unused
from typing import Dict, List, Optional, Any, Tuple
^
security/antivirus/antivirus_security_system.py:21:1: F401 '.core.antivirus_core.ThreatLevel' imported but unused
from .core.antivirus_core import AntivirusCore, ThreatLevel, ScanStatus, ThreatType
^
security/antivirus/antivirus_security_system.py:21:1: F401 '.core.antivirus_core.ScanStatus' imported but unused
from .core.antivirus_core import AntivirusCore, ThreatLevel, ScanStatus, ThreatType
^
security/antivirus/antivirus_security_system.py:21:1: F401 '.core.antivirus_core.ThreatType' imported but unused
from .core.antivirus_core import AntivirusCore, ThreatLevel, ScanStatus, ThreatType
^
security/antivirus/antivirus_security_system.py:21:80: E501 line too long (83 > 79 characters)
from .core.antivirus_core import AntivirusCore, ThreatLevel, ScanStatus, ThreatType
                                                                               ^
security/antivirus/antivirus_security_system.py:22:1: F401 '.engines.clamav_engine.ClamAVResult' imported but unused
from .engines.clamav_engine import ClamAVEngine, ClamAVResult
^
security/antivirus/antivirus_security_system.py:23:1: F401 '.scanners.malware_scanner.MalwareScanResult' imported but unused
from .scanners.malware_scanner import MalwareScanner, MalwareScanResult, MalwareType
^
security/antivirus/antivirus_security_system.py:23:1: F401 '.scanners.malware_scanner.MalwareType' imported but unused
from .scanners.malware_scanner import MalwareScanner, MalwareScanResult, MalwareType
^
security/antivirus/antivirus_security_system.py:23:80: E501 line too long (84 > 79 characters)
from .scanners.malware_scanner import MalwareScanner, MalwareScanResult, MalwareType
                                                                               ^
security/antivirus/antivirus_security_system.py:96:80: E501 line too long (83 > 79 characters)
                        engine: AntivirusEngine = AntivirusEngine.ALL) -> Dict[str,
                                                                               ^
security/antivirus/antivirus_security_system.py:97:80: E501 line too long (84 > 79 characters)
                                                                               Any]:
                                                                               ^
security/antivirus/antivirus_security_system.py:108:80: E501 line too long (87 > 79 characters)
                    result = await self.antivirus_core.scan_file(file_path, "internal")
                                                                               ^
security/antivirus/antivirus_security_system.py:115:80: E501 line too long (88 > 79 characters)
                                'level': t.threat_level.value} for t in result.threats],
                                                                               ^
security/antivirus/antivirus_security_system.py:136:80: E501 line too long (92 > 79 characters)
                            {'name': result.threat_name, 'type': 'clamav', 'level': 'high'})
                                                                               ^
security/antivirus/antivirus_security_system.py:153:80: E501 line too long (87 > 79 characters)
                                'severity': t.severity} for t in result.threats_found],
                                                                               ^
security/antivirus/antivirus_security_system.py:167:80: E501 line too long (85 > 79 characters)
            if threats_found and self.config.auto_quarantine and self.antivirus_core:
                                                                               ^
security/antivirus/antivirus_security_system.py:169:80: E501 line too long (87 > 79 characters)
                    await self.antivirus_core.quarantine_file(file_path, threats_found)
                                                                               ^
security/antivirus/antivirus_security_system.py:189:80: E501 line too long (80 > 79 characters)
                    f"Найдены угрозы в файле {file_path}: {len(threats_found)}")
                                                                               ^
security/antivirus/antivirus_security_system.py:207:80: E501 line too long (88 > 79 characters)
                             engine: AntivirusEngine = AntivirusEngine.ALL) -> Dict[str,
                                                                               ^
security/antivirus/antivirus_security_system.py:208:80: E501 line too long (89 > 79 characters)
                                                                                    Any]:
                                                                               ^
security/antivirus/antivirus_security_system.py:249:80: E501 line too long (84 > 79 characters)
                f"Сканирование директории завершено: {total_threats} угроз найдено")
                                                                               ^
security/antivirus/antivirus_security_system.py:273:80: E501 line too long (92 > 79 characters)
                              'type': t.threat_type.value} for t in item.threat_signatures],
                                                                               ^
security/antivirus/antivirus_security_system.py:297:80: E501 line too long (90 > 79 characters)
                'clamav': self.clamav_engine is not None and self.clamav_engine.available,
                                                                               ^
security/antivirus/core/antivirus_core.py:15:1: F401 'json' imported but unused
import json
^
security/antivirus/core/antivirus_core.py:20:1: F401 'sys' imported but unused
import sys
^
security/antivirus/core/antivirus_core.py:21:1: F401 'subprocess' imported but unused
import subprocess
^
security/antivirus/core/antivirus_core.py:23:1: F401 'typing.Tuple' imported but unused
from typing import Dict, List, Optional, Any, Tuple
^
security/antivirus/core/antivirus_core.py:28:1: F401 'tempfile' imported but unused
import tempfile
^
security/antivirus/core/antivirus_core.py:157:80: E501 line too long (114 > 79 characters)
                             'signature': 'X5O!P%@AP[4\\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*',
                                                                               ^
security/antivirus/core/antivirus_core.py:158:80: E501 line too long (93 > 79 characters)
                             'description': 'Тестовая строка EICAR для проверки антивируса'},
                                                                               ^
security/antivirus/core/antivirus_core.py:164:80: E501 line too long (96 > 79 characters)
                             'description': 'Подозрительная команда PowerShell с кодированием'},
                                                                               ^
security/antivirus/core/antivirus_core.py:170:80: E501 line too long (93 > 79 characters)
                             'description': 'Расширения файлов, характерные для ransomware'},
                                                                               ^
security/antivirus/core/antivirus_core.py:175:80: E501 line too long (89 > 79 characters)
                             'signature': 'bitcoin.*wallet|paypal.*login|bank.*security',
                                                                               ^
security/antivirus/core/antivirus_core.py:230:80: E501 line too long (84 > 79 characters)
                r for r in self.scan_results.values() if r.scanned_at < cutoff_time]
                                                                               ^
security/antivirus/core/antivirus_core.py:237:80: E501 line too long (82 > 79 characters)
                    f"Очищено {len(old_results)} старых результатов сканирования")
                                                                               ^
security/antivirus/core/antivirus_core.py:317:80: E501 line too long (87 > 79 characters)
                    f"Найдены угрозы в файле {file_path}: {[t.name for t in threats]}")
                                                                               ^
security/antivirus/core/antivirus_core.py:450:80: E501 line too long (82 > 79 characters)
                            for r in self.scan_results.values() if r.threat_found)
                                                                               ^
security/antivirus/core/antivirus_core.py:458:80: E501 line too long (95 > 79 characters)
            'active_signatures': len([s for s in self.threat_signatures.values() if s.active]),
                                                                               ^
security/antivirus/core/antivirus_core.py:489:80: E501 line too long (88 > 79 characters)
                "X5O!P%@AP[4\\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*")
                                                                               ^
security/antivirus/engines/clamav_engine.py:11:1: F401 'tempfile' imported but unused
import tempfile
^
security/antivirus/engines/clamav_engine.py:12:1: F401 'typing.List' imported but unused
from typing import Dict, List, Optional, Any, Tuple
^
security/antivirus/engines/clamav_engine.py:12:1: F401 'typing.Tuple' imported but unused
from typing import Dict, List, Optional, Any, Tuple
^
security/antivirus/engines/clamav_engine.py:134:80: E501 line too long (80 > 79 characters)
                                    capture_output=True, text=True, timeout=600)
                                                                               ^
security/antivirus/scanners/malware_scanner.py:12:1: F401 'json' imported but unused
import json
^
security/antivirus/scanners/malware_scanner.py:14:1: F401 'typing.Tuple' imported but unused
from typing import Dict, List, Optional, Any, Tuple
^
security/antivirus/scanners/malware_scanner.py:106:80: E501 line too long (87 > 79 characters)
                pattern=r"(?i)(download|wget|curl).*http[s]?://.*\.(exe|bat|cmd|ps1)$",
                                                                               ^
security/antivirus/scanners/malware_scanner.py:142:80: E501 line too long (81 > 79 characters)
                pattern=r"(?i)(connect.*to.*\d+\.\d+\.\d+\.\d+|socket.*connect)",
                                                                               ^
security/antivirus/scanners/malware_scanner.py:215:80: E501 line too long (81 > 79 characters)
                            f"Найден паттерн {pattern.name} в файле {file_path}")
                                                                               ^
security/antivirus/scanners/malware_scanner.py:218:80: E501 line too long (80 > 79 characters)
                        f"Ошибка в регулярном выражении {pattern.pattern}: {e}")
                                                                               ^
security/antivirus/scanners/malware_scanner.py:368:80: E501 line too long (131 > 79 characters)
                "This is a test file with suspicious PowerShell command: powershell -enc UwB0AGEAcgB0AC0AUwBsAGUAZQBwACAAMQAwAA==")
                                                                               ^
security/audit_system.py:77:80: E501 line too long (91 > 79 characters)
    def __init__(self, name: str = "AuditSystem", config: Optional[Dict[str, Any]] = None):
                                                                               ^
security/audit_system.py:81:80: E501 line too long (94 > 79 characters)
        self.audit_retention_days = config.get("audit_retention_days", 365) if config else 365
                                                                               ^
security/audit_system.py:82:80: E501 line too long (98 > 79 characters)
        self.max_events_in_memory = config.get("max_events_in_memory", 10000) if config else 10000
                                                                               ^
security/audit_system.py:83:80: E501 line too long (100 > 79 characters)
        self.enable_real_time_audit = config.get("enable_real_time_audit", True) if config else True
                                                                               ^
security/audit_system.py:84:80: E501 line too long (98 > 79 characters)
        self.audit_sensitive_data = config.get("audit_sensitive_data", False) if config else False
                                                                               ^
security/audit_system.py:126:80: E501 line too long (85 > 79 characters)
            self.log_activity(f"Система аудита {self.name} успешно инициализирована")
                                                                               ^
security/audit_system.py:130:80: E501 line too long (83 > 79 characters)
            self.log_activity(f"Ошибка инициализации системы аудита: {e}", "error")
                                                                               ^
security/audit_system.py:176:80: E501 line too long (92 > 79 characters)
        self.cleanup_thread = threading.Thread(target=self._cleanup_old_events, daemon=True)
                                                                               ^
security/audit_system.py:184:80: E501 line too long (86 > 79 characters)
                cutoff_time = current_time - timedelta(days=self.audit_retention_days)
                                                                               ^
security/audit_system.py:200:80: E501 line too long (89 > 79 characters)
                        if event.get("timestamp", datetime.min) > cutoff_time.isoformat()
                                                                               ^
security/audit_system.py:204:80: E501 line too long (95 > 79 characters)
                    self.log_activity(f"Очищено {len(events_to_remove)} старых событий аудита")
                                                                               ^
security/audit_system.py:210:80: E501 line too long (81 > 79 characters)
                self.log_activity(f"Ошибка очистки событий аудита: {e}", "error")
                                                                               ^
security/audit_system.py:241:80: E501 line too long (85 > 79 characters)
                event_id = self._generate_audit_event_id(event_type, user, operation)
                                                                               ^
security/audit_system.py:270:80: E501 line too long (81 > 79 characters)
            self.log_activity(f"Ошибка логирования события аудита: {e}", "error")
                                                                               ^
security/audit_system.py:273:80: E501 line too long (90 > 79 characters)
    def _generate_audit_event_id(self, event_type: str, user: str, operation: str) -> str:
                                                                               ^
security/audit_system.py:341:80: E501 line too long (119 > 79 characters)
        alert_message = f"Событие аудита: {event.event_type} - {event.operation} by {event.user} ({event.level.value})"
                                                                               ^
security/audit_system.py:346:80: E501 line too long (101 > 79 characters)
        notification = f"КРИТИЧЕСКОЕ СОБЫТИЕ: {event.event_type} - {event.operation} by {event.user}"
                                                                               ^
security/audit_system.py:347:80: E501 line too long (80 > 79 characters)
        self.log_activity(f"IMMEDIATE NOTIFICATION: {notification}", "critical")
                                                                               ^
security/audit_system.py:351:80: E501 line too long (111 > 79 characters)
        security_notification = f"СОБЫТИЕ БЕЗОПАСНОСТИ: {event.event_type} - {event.operation} by {event.user}"
                                                                               ^
security/audit_system.py:352:80: E501 line too long (93 > 79 characters)
        self.log_activity(f"SECURITY TEAM NOTIFICATION: {security_notification}", "security")
                                                                               ^
security/audit_system.py:358:80: E501 line too long (91 > 79 characters)
            sorted_events = sorted(self.audit_events.items(), key=lambda x: x[1].timestamp)
                                                                               ^
security/audit_system.py:359:80: E501 line too long (81 > 79 characters)
            events_to_remove = len(self.audit_events) - self.max_events_in_memory
                                                                               ^
security/audit_system.py:405:80: E501 line too long (88 > 79 characters)
    def get_user_audit_trail(self, user: str, limit: int = 100) -> List[Dict[str, Any]]:
                                                                               ^
security/audit_system.py:409:80: E501 line too long (98 > 79 characters)
    def get_operation_audit_trail(self, operation: str, limit: int = 100) -> List[Dict[str, Any]]:
                                                                               ^
security/audit_system.py:422:80: E501 line too long (117 > 79 characters)
            "success_rate": ((self.successful_operations / self.total_events * 100) if self.total_events > 0 else 0),
                                                                               ^
security/audit_system.py:428:80: E501 line too long (88 > 79 characters)
        self, start_date: Optional[datetime] = None, end_date: Optional[datetime] = None
                                                                               ^
security/audit_system.py:494:80: E501 line too long (81 > 79 characters)
            self.log_activity(f"Ошибка генерации отчета по аудиту: {e}", "error")
                                                                               ^
security/authentication.py:11:1: F401 'os' imported but unused
import os
^
security/authentication.py:14:1: F401 'json' imported but unused
import json
^
security/authentication.py:17:1: F401 'typing.List' imported but unused
from typing import Dict, List, Any, Optional
^
security/authentication.py:18:1: F401 'pathlib.Path' imported but unused
from pathlib import Path
^
security/authentication.py:23:1: E402 module level import not at top of file
from core.base import ComponentStatus, SecurityBase, SecurityLevel
^
security/authentication.py:25:1: E302 expected 2 blank lines, found 1
class Authentication(SecurityBase):
^
security/authentication.py:28:1: W293 blank line contains whitespace
    """
    Аутентификация
    
    Критический компонент системы безопасности ALADDIN
    """
^
security/authentication.py:31:1: W293 blank line contains whitespace
    
^
security/authentication.py:39:1: W293 blank line contains whitespace
        
^
security/authentication.py:42:1: W293 blank line contains whitespace
        
^
security/authentication.py:44:1: W293 blank line contains whitespace
    
^
security/authentication.py:50:1: W293 blank line contains whitespace
            
^
security/authentication.py:53:1: W293 blank line contains whitespace
            
^
security/authentication.py:55:80: E501 line too long (80 > 79 characters)
            self.log_activity(f"Ошибка инициализации {self.name}: {e}", "error")
                                                                               ^
security/authentication.py:57:1: W293 blank line contains whitespace
    
^
security/authentication.py:62:1: W293 blank line contains whitespace
    
^
security/authentication.py:66:1: W293 blank line contains whitespace
        """
        Выполнение основной функции компонента
        
        Args:
            params: Параметры выполнения
            
        Returns:
            Dict с результатами выполнения
        """
^
security/authentication.py:69:1: W293 blank line contains whitespace
        """
        Выполнение основной функции компонента
        
        Args:
            params: Параметры выполнения
            
        Returns:
            Dict с результатами выполнения
        """
^
security/authentication.py:74:80: E501 line too long (88 > 79 characters)
            self.log_activity(f"Выполнение {self.name} с параметрами: {params}", "info")
                                                                               ^
security/authentication.py:75:1: W293 blank line contains whitespace
            
^
security/authentication.py:78:1: W293 blank line contains whitespace
            
^
security/authentication.py:86:1: W293 blank line contains whitespace
            
^
security/authentication.py:95:1: W293 blank line contains whitespace
    
^
security/authentication.py:102:1: W293 blank line contains whitespace
    
^
security/authentication.py:106:1: W293 blank line contains whitespace
        """
        Получение статуса компонента
        
        Returns:
            Dict с информацией о статусе
        """
^
security/authentication.py:118:1: W293 blank line contains whitespace
    
^
security/authentication.py:128:1: W293 blank line contains whitespace
    
^
security/authentication.py:138:1: W293 blank line contains whitespace
    
^
security/authentication.py:156:1: W293 blank line contains whitespace
    
^
security/authentication.py:160:1: W293 blank line contains whitespace
    
^
security/authentication_manager.py:6:1: F401 'asyncio' imported but unused
import asyncio
^
security/authentication_manager.py:9:1: F401 'time' imported but unused
import time
^
security/authentication_manager.py:12:1: F401 'typing.Union' imported but unused
from typing import Dict, List, Optional, Any, Union
^
security/authentication_manager.py:113:80: E501 line too long (119 > 79 characters)
    allowed_auth_methods: List[AuthMethod] = field(default_factory=lambda: [AuthMethod.PASSWORD, AuthMethod.BIOMETRIC])
                                                                               ^
security/authentication_manager.py:120:1: W293 blank line contains whitespace
    
^
security/authentication_manager.py:129:1: W293 blank line contains whitespace
        
^
security/authentication_manager.py:131:1: W293 blank line contains whitespace
    
^
security/authentication_manager.py:132:64: W291 trailing whitespace
    async def register_user(self, username: str, password: str, 
                                                               ^
security/authentication_manager.py:133:27: E128 continuation line under-indented for visual indent
                          auth_methods: List[AuthMethod] = None,
                          ^
security/authentication_manager.py:134:27: E128 continuation line under-indented for visual indent
                          security_level: SecurityLevel = SecurityLevel.MEDIUM) -> bool:
                          ^
security/authentication_manager.py:134:80: E501 line too long (88 > 79 characters)
                          security_level: SecurityLevel = SecurityLevel.MEDIUM) -> bool:
                                                                               ^
security/authentication_manager.py:140:1: W293 blank line contains whitespace
            
^
security/authentication_manager.py:143:32: F541 f-string is missing placeholders
                logger.warning(f"Пароль не соответствует политике безопасности")
                               ^
security/authentication_manager.py:143:80: E501 line too long (80 > 79 characters)
                logger.warning(f"Пароль не соответствует политике безопасности")
                                                                               ^
security/authentication_manager.py:145:1: W293 blank line contains whitespace
            
^
security/authentication_manager.py:149:1: W293 blank line contains whitespace
            
^
security/authentication_manager.py:160:1: W293 blank line contains whitespace
            
^
security/authentication_manager.py:163:1: W293 blank line contains whitespace
            
^
security/authentication_manager.py:170:1: W293 blank line contains whitespace
            
^
security/authentication_manager.py:173:1: W293 blank line contains whitespace
            
^
security/authentication_manager.py:177:1: W293 blank line contains whitespace
    
^
security/authentication_manager.py:178:63: W291 trailing whitespace
    async def authenticate(self, username: str, password: str, 
                                                              ^
security/authentication_manager.py:179:26: E128 continuation line under-indented for visual indent
                         auth_method: AuthMethod = AuthMethod.PASSWORD,
                         ^
security/authentication_manager.py:180:26: E128 continuation line under-indented for visual indent
                         ip_address: str = "unknown",
                         ^
security/authentication_manager.py:181:26: E128 continuation line under-indented for visual indent
                         user_agent: str = "unknown") -> AuthResult:
                         ^
security/authentication_manager.py:195:1: W293 blank line contains whitespace
            
^
security/authentication_manager.py:197:1: W293 blank line contains whitespace
            
^
security/authentication_manager.py:199:80: E501 line too long (93 > 79 characters)
            if user.is_locked and user.lockout_until and datetime.now() < user.lockout_until:
                                                                               ^
security/authentication_manager.py:209:1: W293 blank line contains whitespace
            
^
security/authentication_manager.py:221:1: W293 blank line contains whitespace
            
^
security/authentication_manager.py:233:1: W293 blank line contains whitespace
            
^
security/authentication_manager.py:236:80: E501 line too long (86 > 79 characters)
                if not self._verify_password(password, user.password_hash, user.salt):
                                                                               ^
security/authentication_manager.py:247:1: W293 blank line contains whitespace
            
^
security/authentication_manager.py:253:1: W293 blank line contains whitespace
            
^
security/authentication_manager.py:255:80: E501 line too long (95 > 79 characters)
            session = await self._create_session(username, auth_method, ip_address, user_agent)
                                                                               ^
security/authentication_manager.py:256:1: W293 blank line contains whitespace
            
^
security/authentication_manager.py:258:48: W291 trailing whitespace
            requires_mfa = (user.mfa_enabled or 
                                               ^
security/authentication_manager.py:259:27: E128 continuation line under-indented for visual indent
                          (user.security_level in [SecurityLevel.HIGH, SecurityLevel.CRITICAL] and 
                          ^
security/authentication_manager.py:259:80: E501 line too long (98 > 79 characters)
                          (user.security_level in [SecurityLevel.HIGH, SecurityLevel.CRITICAL] and 
                                                                               ^
security/authentication_manager.py:259:99: W291 trailing whitespace
                          (user.security_level in [SecurityLevel.HIGH, SecurityLevel.CRITICAL] and 
                                                                                                  ^
security/authentication_manager.py:261:1: W293 blank line contains whitespace
            
^
security/authentication_manager.py:276:1: W293 blank line contains whitespace
            
^
security/authentication_manager.py:283:1: W293 blank line contains whitespace
            
^
security/authentication_manager.py:290:1: W293 blank line contains whitespace
            
^
security/authentication_manager.py:298:1: W293 blank line contains whitespace
    
^
security/authentication_manager.py:304:1: W293 blank line contains whitespace
            
^
security/authentication_manager.py:306:1: W293 blank line contains whitespace
            
^
security/authentication_manager.py:310:1: W293 blank line contains whitespace
            
^
security/authentication_manager.py:318:1: W293 blank line contains whitespace
            
^
security/authentication_manager.py:321:1: W293 blank line contains whitespace
            
^
security/authentication_manager.py:323:1: W293 blank line contains whitespace
            
^
security/authentication_manager.py:327:1: W293 blank line contains whitespace
    
^
security/authentication_manager.py:334:1: W293 blank line contains whitespace
                
^
security/authentication_manager.py:338:1: W293 blank line contains whitespace
                
^
security/authentication_manager.py:341:1: W293 blank line contains whitespace
            
^
security/authentication_manager.py:343:1: W293 blank line contains whitespace
            
^
security/authentication_manager.py:347:1: W293 blank line contains whitespace
    
^
security/authentication_manager.py:348:80: E501 line too long (97 > 79 characters)
    async def change_password(self, username: str, old_password: str, new_password: str) -> bool:
                                                                               ^
security/authentication_manager.py:353:1: W293 blank line contains whitespace
            
^
security/authentication_manager.py:355:1: W293 blank line contains whitespace
            
^
security/authentication_manager.py:357:80: E501 line too long (86 > 79 characters)
            if not self._verify_password(old_password, user.password_hash, user.salt):
                                                                               ^
security/authentication_manager.py:362:1: W293 blank line contains whitespace
            
^
security/authentication_manager.py:369:1: W293 blank line contains whitespace
            
^
security/authentication_manager.py:377:1: W293 blank line contains whitespace
            
^
security/authentication_manager.py:382:1: W293 blank line contains whitespace
            
^
security/authentication_manager.py:385:80: E501 line too long (89 > 79 characters)
            if len(self.password_history[username]) > self.policy.password_history_count:
                                                                               ^
security/authentication_manager.py:387:1: W293 blank line contains whitespace
            
^
security/authentication_manager.py:391:1: W293 blank line contains whitespace
            
^
security/authentication_manager.py:395:1: W293 blank line contains whitespace
    
^
security/authentication_manager.py:398:80: E501 line too long (92 > 79 characters)
        return hashlib.pbkdf2_hmac('sha256', password.encode(), salt.encode(), 100000).hex()
                                                                               ^
security/authentication_manager.py:399:1: W293 blank line contains whitespace
    
^
security/authentication_manager.py:400:80: E501 line too long (83 > 79 characters)
    def _verify_password(self, password: str, stored_hash: str, salt: str) -> bool:
                                                                               ^
security/authentication_manager.py:403:1: W293 blank line contains whitespace
    
^
security/authentication_manager.py:408:1: W293 blank line contains whitespace
        
^
security/authentication_manager.py:409:80: E501 line too long (84 > 79 characters)
        if self.policy.require_uppercase and not any(c.isupper() for c in password):
                                                                               ^
security/authentication_manager.py:411:1: W293 blank line contains whitespace
        
^
security/authentication_manager.py:412:80: E501 line too long (84 > 79 characters)
        if self.policy.require_lowercase and not any(c.islower() for c in password):
                                                                               ^
security/authentication_manager.py:414:1: W293 blank line contains whitespace
        
^
security/authentication_manager.py:415:80: E501 line too long (82 > 79 characters)
        if self.policy.require_numbers and not any(c.isdigit() for c in password):
                                                                               ^
security/authentication_manager.py:417:1: W293 blank line contains whitespace
        
^
security/authentication_manager.py:418:80: E501 line too long (110 > 79 characters)
        if self.policy.require_special_chars and not any(c in "!@#$%^&*()_+-=[]{}|;:,.<>?" for c in password):
                                                                               ^
security/authentication_manager.py:420:1: W293 blank line contains whitespace
        
^
security/authentication_manager.py:422:1: W293 blank line contains whitespace
    
^
security/authentication_manager.py:427:1: W293 blank line contains whitespace
        
^
security/authentication_manager.py:430:80: E501 line too long (105 > 79 characters)
            user.lockout_until = datetime.now() + timedelta(minutes=self.policy.lockout_duration_minutes)
                                                                               ^
security/authentication_manager.py:431:1: W293 blank line contains whitespace
            
^
security/authentication_manager.py:436:1: W293 blank line contains whitespace
            
^
security/authentication_manager.py:437:80: E501 line too long (104 > 79 characters)
            logger.warning(f"Аккаунт {username} заблокирован из-за превышения лимита неудачных попыток")
                                                                               ^
security/authentication_manager.py:438:1: W293 blank line contains whitespace
    
^
security/authentication_manager.py:439:76: W291 trailing whitespace
    async def _create_session(self, username: str, auth_method: AuthMethod, 
                                                                           ^
security/authentication_manager.py:440:29: E128 continuation line under-indented for visual indent
                            ip_address: str, user_agent: str) -> AuthSession:
                            ^
security/authentication_manager.py:444:1: W293 blank line contains whitespace
        
^
security/authentication_manager.py:451:80: E501 line too long (95 > 79 characters)
            expires_at=datetime.now() + timedelta(minutes=self.policy.session_timeout_minutes),
                                                                               ^
security/authentication_manager.py:455:1: W293 blank line contains whitespace
        
^
security/authentication_manager.py:458:1: W293 blank line contains whitespace
    
^
security/authentication_manager.py:461:80: E501 line too long (91 > 79 characters)
        # Простая реализация - в реальной системе здесь будет интеграция с MFA провайдерами
                                                                               ^
security/authentication_manager.py:465:1: W293 blank line contains whitespace
    
^
security/authentication_manager.py:466:80: E501 line too long (88 > 79 characters)
    def _log_auth_event(self, event_type: str, username: str, metadata: Dict[str, Any]):
                                                                               ^
security/authentication_manager.py:476:1: W293 blank line contains whitespace
    
^
security/authentication_manager.py:482:1: W293 blank line contains whitespace
            
^
security/authentication_manager.py:486:1: W293 blank line contains whitespace
            
^
security/authentication_manager.py:493:1: W293 blank line contains whitespace
            
^
security/authentication_manager.py:496:1: W293 blank line contains whitespace
            
^
security/authentication_manager.py:502:80: E501 line too long (87 > 79 characters)
                "last_login": user.last_login.isoformat() if user.last_login else None,
                                                                               ^
security/authentication_manager.py:507:1: W293 blank line contains whitespace
            
^
security/authentication_manager.py:511:1: W293 blank line contains whitespace
    
^
security/authentication_manager.py:518:80: E501 line too long (87 > 79 characters)
            "active_sessions": len([s for s in self.sessions.values() if s.is_active]),
                                                                               ^
security/authentication_manager.py:524:80: E501 line too long (90 > 79 characters)
                "require_mfa_for_high_security": self.policy.require_mfa_for_high_security
                                                                               ^
security/authentication_manager.py:532:49: W292 no newline at end of file
authentication_manager = AuthenticationManager()                                                ^
security/base.py:10:1: W293 blank line contains whitespace
    
^
security/base.py:14:1: W293 blank line contains whitespace
    
^
security/base.py:18:1: W293 blank line contains whitespace
    
^
security/bots/analytics_bot.py:50:1: F401 'core.base.ComponentStatus' imported but unused
from core.base import ComponentStatus, SecurityBase, SecurityLevel
^
security/bots/analytics_bot.py:50:1: F401 'core.base.SecurityLevel' imported but unused
from core.base import ComponentStatus, SecurityBase, SecurityLevel
^
security/bots/analytics_bot.py:53:1: F401 'json' imported but unused
import json
^
security/bots/analytics_bot.py:58:1: F401 'typing.Tuple' imported but unused
from typing import Dict, List, Optional, Any, Tuple
^
security/bots/analytics_bot.py:59:1: F401 'dataclasses.dataclass' imported but unused
from dataclasses import dataclass, field
^
security/bots/analytics_bot.py:59:1: F401 'dataclasses.field' imported but unused
from dataclasses import dataclass, field
^
security/bots/analytics_bot.py:66:1: F401 'sqlalchemy.Integer' imported but unused
from sqlalchemy import create_engine, Column, String, Integer, DateTime, Boolean, JSON, Text, Float
^
security/bots/analytics_bot.py:66:80: E501 line too long (99 > 79 characters)
from sqlalchemy import create_engine, Column, String, Integer, DateTime, Boolean, JSON, Text, Float
                                                                               ^
security/bots/analytics_bot.py:69:1: F401 'pydantic.validator' imported but unused
from pydantic import BaseModel, Field, validator
^
security/bots/analytics_bot.py:70:1: F401 'prometheus_client.Histogram' imported but unused
from prometheus_client import Counter, Histogram, Gauge
^
security/bots/analytics_bot.py:74:1: F401 'sklearn.cluster.DBSCAN' imported but unused
from sklearn.cluster import DBSCAN
^
security/bots/analytics_bot.py:346:80: E501 line too long (80 > 79 characters)
                if self.monitoring_thread and self.monitoring_thread.is_alive():
                                                                               ^
security/bots/analytics_bot.py:606:80: E501 line too long (81 > 79 characters)
                                               List[float]]) -> ThreatPrediction:
                                                                               ^
security/bots/analytics_bot.py:718:80: E501 line too long (86 > 79 characters)
                    [a for a in alerts if a.alert_level == AlertLevel.CRITICAL.value])
                                                                               ^
security/bots/analytics_bot.py:727:80: E501 line too long (86 > 79 characters)
                    "metrics_by_component": self._group_metrics_by_component(metrics),
                                                                               ^
security/bots/analytics_bot.py:742:80: E501 line too long (91 > 79 characters)
                    summary=f"Отчет за период {period_start.date()} - {period_end.date()}",
                                                                               ^
security/bots/analytics_bot.py:776:80: E501 line too long (90 > 79 characters)
            self, metrics: List[SecurityMetric], limit: int = 10) -> List[Dict[str, Any]]:
                                                                               ^
security/bots/analytics_bot.py:824:80: E501 line too long (87 > 79 characters)
                    SecurityMetric.timestamp >= datetime.utcnow() - timedelta(hours=24)
                                                                               ^
security/bots/analytics_bot.py:828:80: E501 line too long (87 > 79 characters)
                    SecurityAlert.created_at >= datetime.utcnow() - timedelta(hours=24)
                                                                               ^
security/bots/analytics_bot.py:842:80: E501 line too long (117 > 79 characters)
                    "critical_alerts": len([a for a in recent_alerts if a.alert_level == AlertLevel.CRITICAL.value]),
                                                                               ^
security/bots/analytics_bot.py:903:80: E501 line too long (100 > 79 characters)
        await bot.collect_metric("cpu_usage", 0.75, MetricType.GAUGE, {"host": "server1"}, "system")
                                                                               ^
security/bots/analytics_bot.py:904:80: E501 line too long (103 > 79 characters)
        await bot.collect_metric("memory_usage", 0.60, MetricType.GAUGE, {"host": "server1"}, "system")
                                                                               ^
security/bots/analytics_bot.py:905:80: E501 line too long (106 > 79 characters)
        await bot.collect_metric("security_events", 15, MetricType.COUNTER, {"type": "login"}, "security")
                                                                               ^
security/bots/analytics_bot.py:909:80: E501 line too long (117 > 79 characters)
        anomaly_result = await bot.detect_anomaly("cpu_usage", [0.5, 0.6, 0.7, 0.8, 0.9, 0.95, 0.98, 0.99, 1.0, 1.1])
                                                                               ^
security/bots/analytics_bot.py:936:80: E501 line too long (97 > 79 characters)
            f"✅ Дашборд получен: {dashboard.get('overview', {}).get('total_metrics', 0)} метрик")
                                                                               ^
security/bots/browser_security_bot.py:12:1: F401 'datetime.timedelta' imported but unused
from datetime import datetime, timedelta
^
security/bots/browser_security_bot.py:13:1: F401 'typing.Union' imported but unused
from typing import Dict, List, Any, Optional, Union, Tuple
^
security/bots/browser_security_bot.py:20:1: F401 'pathlib.Path' imported but unused
from pathlib import Path
^
security/bots/browser_security_bot.py:291:80: E501 line too long (81 > 79 characters)
                security_recommendations=self._generate_recommendations(threats),
                                                                               ^
security/bots/browser_security_bot.py:312:80: E501 line too long (84 > 79 characters)
            self, url: str, domain: str) -> Tuple[ThreatLevel, List[BrowserThreat]]:
                                                                               ^
security/bots/browser_security_bot.py:320:80: E501 line too long (81 > 79 characters)
                threat_id=f"malware_{hashlib.md5(url.encode()).hexdigest()[:8]}",
                                                                               ^
security/bots/browser_security_bot.py:337:80: E501 line too long (86 > 79 characters)
                    threat_id=f"phishing_{hashlib.md5(url.encode()).hexdigest()[:8]}",
                                                                               ^
security/bots/browser_security_bot.py:355:80: E501 line too long (88 > 79 characters)
                    threat_id=f"suspicious_{hashlib.md5(url.encode()).hexdigest()[:8]}",
                                                                               ^
security/bots/browser_security_bot.py:392:80: E501 line too long (88 > 79 characters)
            return f"🚫 Доступ заблокирован: {threat_level.value.upper()} уровень угрозы"
                                                                               ^
security/bots/browser_security_bot.py:394:80: E501 line too long (84 > 79 characters)
            return f"⚠️ Предупреждение: {threat_level.value.upper()} уровень угрозы"
                                                                               ^
security/bots/browser_security_bot.py:517:80: E501 line too long (81 > 79 characters)
            1 for enabled in self.config["privacy_settings"].values() if enabled)
                                                                               ^
security/bots/browser_security_bot.py:518:80: E501 line too long (83 > 79 characters)
        return enabled_features / privacy_features if privacy_features > 0 else 0.0
                                                                               ^
security/bots/browser_security_bot.py:543:80: E501 line too long (84 > 79 characters)
            cursor.execute("""
                INSERT OR REPLACE INTO browser_sessions
                (session_id, user_id, start_time, end_time, pages_visited,
                 threats_detected, security_score, privacy_score, performance_score)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                              
                                                ^
security/bots/check_and_sleep_bots.py:11:1: F401 'time' imported but unused
import time
^
security/bots/check_and_sleep_bots.py:14:1: F401 'typing.List' imported but unused
from typing import Dict, List, Any
^
security/bots/check_and_sleep_bots.py:23:1: W293 blank line contains whitespace
    
^
security/bots/check_and_sleep_bots.py:29:1: W293 blank line contains whitespace
        
^
security/bots/check_and_sleep_bots.py:40:50: W291 trailing whitespace
                "file": "gaming_security_bot.py", 
                                                 ^
security/bots/check_and_sleep_bots.py:47:49: W291 trailing whitespace
                "class": "EmergencyResponseBot", 
                                                ^
security/bots/check_and_sleep_bots.py:54:43: W291 trailing whitespace
                "function": "function_89", 
                                          ^
security/bots/check_and_sleep_bots.py:72:48: W291 trailing whitespace
                "class": "TelegramSecurityBot", 
                                               ^
security/bots/check_and_sleep_bots.py:101:1: W293 blank line contains whitespace
    
^
security/bots/check_and_sleep_bots.py:111:1: W293 blank line contains whitespace
        
^
security/bots/check_and_sleep_bots.py:122:1: W293 blank line contains whitespace
    
^
security/bots/check_and_sleep_bots.py:130:1: W293 blank line contains whitespace
    
^
security/bots/check_and_sleep_bots.py:134:1: W293 blank line contains whitespace
        
^
security/bots/check_and_sleep_bots.py:140:1: W293 blank line contains whitespace
            
^
security/bots/check_and_sleep_bots.py:142:80: E501 line too long (95 > 79 characters)
            print(f"  {status_icon} {bot_info['file']}: {'Найден' if exists else 'Не найден'}")
                                                                               ^
security/bots/check_and_sleep_bots.py:143:1: W293 blank line contains whitespace
        
^
security/bots/check_and_sleep_bots.py:145:1: W293 blank line contains whitespace
    
^
security/bots/check_and_sleep_bots.py:149:1: W293 blank line contains whitespace
        
^
security/bots/check_and_sleep_bots.py:155:1: W293 blank line contains whitespace
            
^
security/bots/check_and_sleep_bots.py:157:80: E501 line too long (96 > 79 characters)
            print(f"  {status_icon} {sleep_file}: {'В спящем режиме' if exists else 'Активен'}")
                                                                               ^
security/bots/check_and_sleep_bots.py:158:1: W293 blank line contains whitespace
        
^
security/bots/check_and_sleep_bots.py:160:1: W293 blank line contains whitespace
    
^
security/bots/check_and_sleep_bots.py:164:1: W293 blank line contains whitespace
        
^
security/bots/check_and_sleep_bots.py:172:1: W293 blank line contains whitespace
            
^
security/bots/check_and_sleep_bots.py:176:1: W293 blank line contains whitespace
            
^
security/bots/check_and_sleep_bots.py:180:1: W293 blank line contains whitespace
            
^
security/bots/check_and_sleep_bots.py:187:1: W293 blank line contains whitespace
        
^
security/bots/check_and_sleep_bots.py:193:1: W293 blank line contains whitespace
        
^
security/bots/check_and_sleep_bots.py:195:1: W293 blank line contains whitespace
    
^
security/bots/check_and_sleep_bots.py:202:1: W293 blank line contains whitespace
            
^
security/bots/check_and_sleep_bots.py:212:1: W293 blank line contains whitespace
            
^
security/bots/check_and_sleep_bots.py:217:1: W293 blank line contains whitespace
            
^
security/bots/check_and_sleep_bots.py:220:1: W293 blank line contains whitespace
            
^
security/bots/check_and_sleep_bots.py:222:80: E501 line too long (80 > 79 characters)
            logger.error(f"Ошибка перевода бота {bot_name} в спящий режим: {e}")
                                                                               ^
security/bots/check_and_sleep_bots.py:224:1: W293 blank line contains whitespace
    
^
security/bots/check_and_sleep_bots.py:229:1: W293 blank line contains whitespace
        
^
security/bots/check_and_sleep_bots.py:232:80: E501 line too long (80 > 79 characters)
        existing_bots = [name for name, exists in file_status.items() if exists]
                                                                               ^
security/bots/check_and_sleep_bots.py:233:1: W293 blank line contains whitespace
        
^
security/bots/check_and_sleep_bots.py:236:80: E501 line too long (85 > 79 characters)
        sleeping_bots = [name for name, sleeping in sleep_status.items() if sleeping]
                                                                               ^
security/bots/check_and_sleep_bots.py:237:80: E501 line too long (87 > 79 characters)
        active_bots = [name for name, sleeping in sleep_status.items() if not sleeping]
                                                                               ^
security/bots/check_and_sleep_bots.py:238:1: W293 blank line contains whitespace
        
^
security/bots/check_and_sleep_bots.py:239:15: F541 f-string is missing placeholders
        print(f"\n📊 СТАТИСТИКА:")
              ^
security/bots/check_and_sleep_bots.py:244:1: W293 blank line contains whitespace
        
^
security/bots/check_and_sleep_bots.py:248:1: W293 blank line contains whitespace
        
^
security/bots/check_and_sleep_bots.py:250:80: E501 line too long (80 > 79 characters)
        print(f"\n🤖 Создание заглушек для {len(active_bots)} активных ботов...")
                                                                               ^
security/bots/check_and_sleep_bots.py:252:1: W293 blank line contains whitespace
        
^
security/bots/check_and_sleep_bots.py:254:80: E501 line too long (81 > 79 characters)
        print(f"\n😴 Перевод {len(active_bots)} активных ботов в спящий режим...")
                                                                               ^
security/bots/check_and_sleep_bots.py:255:1: W293 blank line contains whitespace
        
^
security/bots/check_and_sleep_bots.py:259:80: E501 line too long (84 > 79 characters)
                success = await self.put_bot_to_sleep(bot_name, mock_bots[bot_name])
                                                                               ^
security/bots/check_and_sleep_bots.py:261:1: W293 blank line contains whitespace
                
^
security/bots/check_and_sleep_bots.py:264:80: E501 line too long (91 > 79 characters)
                print(f"  {status_icon} {bot_info['function']}: {bot_info['description']}")
                                                                               ^
security/bots/check_and_sleep_bots.py:265:1: W293 blank line contains whitespace
        
^
security/bots/check_and_sleep_bots.py:267:80: E501 line too long (83 > 79 characters)
        successful_sleeps = sum(1 for success in sleep_results.values() if success)
                                                                               ^
security/bots/check_and_sleep_bots.py:269:1: W293 blank line contains whitespace
        
^
security/bots/check_and_sleep_bots.py:270:15: F541 f-string is missing placeholders
        print(f"\n📊 РЕЗУЛЬТАТЫ:")
              ^
security/bots/check_and_sleep_bots.py:271:80: E501 line too long (91 > 79 characters)
        print(f"  😴 Успешно переведено в спящий режим: {successful_sleeps}/{total_active}")
                                                                               ^
security/bots/check_and_sleep_bots.py:272:80: E501 line too long (102 > 79 characters)
        print(f"  📁 Всего файлов состояния: {len([f for f in Path('.').glob('sleep_state_*.json')])}")
                                                                               ^
security/bots/check_and_sleep_bots.py:273:1: W293 blank line contains whitespace
        
^
security/bots/check_and_sleep_bots.py:275:15: F541 f-string is missing placeholders
        print(f"\n🔍 ФИНАЛЬНАЯ ПРОВЕРКА:")
              ^
security/bots/check_and_sleep_bots.py:277:80: E501 line too long (87 > 79 characters)
        final_sleeping = sum(1 for sleeping in final_sleep_status.values() if sleeping)
                                                                               ^
security/bots/check_and_sleep_bots.py:279:1: W293 blank line contains whitespace
        
^
security/bots/check_and_sleep_bots.py:282:1: W293 blank line contains whitespace
        
^
security/bots/check_and_sleep_bots.py:289:1: W293 blank line contains whitespace
    
^
security/bots/check_and_sleep_bots.py:293:1: W293 blank line contains whitespace
        
^
security/bots/check_and_sleep_bots.py:296:80: E501 line too long (81 > 79 characters)
        sleeping_bots = [f.stem.replace('sleep_state_', '') for f in sleep_files]
                                                                               ^
security/bots/check_and_sleep_bots.py:297:1: W293 blank line contains whitespace
        
^
security/bots/check_and_sleep_bots.py:307:1: W293 blank line contains whitespace
        
^
security/bots/check_and_sleep_bots.py:309:80: E501 line too long (81 > 79 characters)
        with open("comprehensive_sleep_report.json", "w", encoding="utf-8") as f:
                                                                               ^
security/bots/check_and_sleep_bots.py:311:1: W293 blank line contains whitespace
        
^
security/bots/check_and_sleep_bots.py:312:15: F541 f-string is missing placeholders
        print(f"✅ Отчет сохранен: comprehensive_sleep_report.json")
              ^
security/bots/check_and_sleep_bots.py:319:1: W293 blank line contains whitespace
    
^
security/bots/check_and_sleep_bots.py:322:1: W293 blank line contains whitespace
    
^
security/bots/check_and_sleep_bots.py:324:5: F841 local variable 'report' is assigned to but never used
    report = sleep_manager.generate_sleep_report()
    ^
security/bots/check_and_sleep_bots.py:325:1: W293 blank line contains whitespace
    
^
security/bots/check_and_sleep_bots.py:337:20: W292 no newline at end of file
    exit(exit_code)                   ^
security/bots/cloud_storage_security_bot.py:12:1: F401 'datetime.timedelta' imported but unused
from datetime import datetime, timedelta
^
security/bots/cloud_storage_security_bot.py:13:1: F401 'typing.Union' imported but unused
from typing import Dict, List, Any, Optional, Union, Tuple
^
security/bots/cloud_storage_security_bot.py:19:1: F401 'mimetypes' imported but unused
import mimetypes
^
security/bots/cloud_storage_security_bot.py:146:80: E501 line too long (94 > 79 characters)
                "blocked_extensions": [".exe", ".bat", ".cmd", ".scr", ".pif", ".vbs", ".js"],
                                                                               ^
security/bots/cloud_storage_security_bot.py:310:80: E501 line too long (90 > 79 characters)
                await self._block_file(file_path, file_name, file_type, "Threat detected")
                                                                               ^
security/bots/cloud_storage_security_bot.py:329:80: E501 line too long (83 > 79 characters)
                blocked_files=[file_path] if action == StorageAction.BLOCK else [],
                                                                               ^
security/bots/cloud_storage_security_bot.py:330:80: E501 line too long (83 > 79 characters)
                allowed_files=[file_path] if action == StorageAction.ALLOW else [],
                                                                               ^
security/bots/cloud_storage_security_bot.py:331:80: E501 line too long (87 > 79 characters)
                encrypted_files=[file_path] if action == StorageAction.ENCRYPT else [],
                                                                               ^
security/bots/cloud_storage_security_bot.py:390:80: E501 line too long (84 > 79 characters)
        if file_extension in self.config["file_restrictions"]["blocked_extensions"]:
                                                                               ^
security/bots/cloud_storage_security_bot.py:392:80: E501 line too long (91 > 79 characters)
                threat_id=f"blocked_ext_{hashlib.md5(file_path.encode()).hexdigest()[:8]}",
                                                                               ^
security/bots/cloud_storage_security_bot.py:411:80: E501 line too long (89 > 79 characters)
                threat_id=f"oversized_{hashlib.md5(file_path.encode()).hexdigest()[:8]}",
                                                                               ^
security/bots/cloud_storage_security_bot.py:417:80: E501 line too long (92 > 79 characters)
                description=f"Файл слишком большой: {file_size_mb:.2f}MB > {max_size_mb}MB",
                                                                               ^
security/bots/cloud_storage_security_bot.py:431:80: E501 line too long (91 > 79 characters)
                    threat_id=f"malware_{hashlib.md5(file_path.encode()).hexdigest()[:8]}",
                                                                               ^
security/bots/cloud_storage_security_bot.py:450:80: E501 line too long (93 > 79 characters)
                    threat_id=f"sensitive_{hashlib.md5(file_path.encode()).hexdigest()[:8]}",
                                                                               ^
security/bots/cloud_storage_security_bot.py:469:80: E501 line too long (94 > 79 characters)
                    threat_id=f"suspicious_{hashlib.md5(file_path.encode()).hexdigest()[:8]}",
                                                                               ^
security/bots/cloud_storage_security_bot.py:511:80: E501 line too long (86 > 79 characters)
            return f"🚫 Файл заблокирован: {threat_level.value.upper()} уровень угрозы"
                                                                               ^
security/bots/cloud_storage_security_bot.py:513:80: E501 line too long (84 > 79 characters)
            return f"🔒 Файл зашифрован: {threat_level.value.upper()} уровень угрозы"
                                                                               ^
security/bots/cloud_storage_security_bot.py:515:80: E501 line too long (93 > 79 characters)
            return f"⚠️ Файл помещен в карантин: {threat_level.value.upper()} уровень угрозы"
                                                                               ^
security/bots/cloud_storage_security_bot.py:583:80: E501 line too long (83 > 79 characters)
            cursor.execute("""
                INSERT OR REPLACE INTO blocked_files
                (file_path, file_name, file_type, reason, block_time, threat_level)
                VALUES (?, ?, ?, ?, ?, ?)
            """, (file_path, file_name, file_type.value, reason, datetime.utcnow().isoformat(), "high"))
                              
                                                ^
security/bots/cloud_storage_security_bot.py:585:80: E501 line too long (104 > 79 characters)
            cursor.execute("""
                INSERT OR REPLACE INTO blocked_files
                (file_path, file_name, file_type, reason, block_time, threat_level)
                VALUES (?, ?, ?, ?, ?, ?)
            """, (file_path, file_name, file_type.value, reason, datetime.utcnow().isoformat(), "high"))
                              
                                                ^
security/bots/cloud_storage_security_bot.py:678:80: E501 line too long (101 > 79 characters)
            (self.stats["security_score_avg"] * len(self.active_sessions) + session.security_score) /
                                                                               ^
security/bots/cloud_storage_security_bot.py:705:80: E501 line too long (82 > 79 characters)
            1 for enabled in self.config["security_policies"].values() if enabled)
                                                                               ^
security/bots/cloud_storage_security_bot.py:706:80: E501 line too long (83 > 79 characters)
        return enabled_features / privacy_features if privacy_features > 0 else 0.0
                                                                               ^
security/bots/cloud_storage_security_bot.py:712:80: E501 line too long (84 > 79 characters)
            1 for enabled in self.config["compliance_settings"].values() if enabled)
                                                                               ^
security/bots/cloud_storage_security_bot.py:713:80: E501 line too long (89 > 79 characters)
        return enabled_features / compliance_features if compliance_features > 0 else 0.0
                                                                               ^
security/bots/cloud_storage_security_bot.py:723:80: E501 line too long (85 > 79 characters)
            cursor.execute("""
                INSERT OR REPLACE INTO storage_sessions
                (session_id, user_id, provider, start_time, end_time, files_uploaded,
                 files_downloaded, files_shared, threats_detected, security_score,
                 privacy_score, compliance_score)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                              
                                                ^
security/bots/cloud_storage_security_bot.py:724:80: E501 line too long (82 > 79 characters)
            cursor.execute("""
                INSERT OR REPLACE INTO storage_sessions
                (session_id, user_id, provider, start_time, end_time, files_uploaded,
                 files_downloaded, files_shared, threats_detected, security_score,
                 privacy_score, compliance_score)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                              
                                                ^
security/bots/cloud_storage_security_bot.py:780:80: E501 line too long (102 > 79 characters)
    response = await bot.analyze_file("test.txt", test_content, "user123", CloudProvider.GOOGLE_DRIVE)
                                                                               ^
security/bots/cloud_storage_security_bot.py:784:80: E501 line too long (87 > 79 characters)
    session_id = await bot.start_storage_session("user123", CloudProvider.GOOGLE_DRIVE)
                                                                               ^
security/bots/device_security_bot.py:12:1: F401 'datetime.timedelta' imported but unused
from datetime import datetime, timedelta
^
security/bots/device_security_bot.py:13:1: F401 'typing.Union' imported but unused
from typing import Dict, List, Any, Optional, Union
^
security/bots/device_security_bot.py:17:1: F401 'hashlib' imported but unused
import hashlib
^
security/bots/device_security_bot.py:18:1: F401 're' imported but unused
import re
^
security/bots/device_security_bot.py:21:1: F401 'subprocess' imported but unused
import subprocess
^
security/bots/device_security_bot.py:175:80: E501 line too long (91 > 79 characters)
                    "HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run",
                                                                               ^
security/bots/device_security_bot.py:176:80: E501 line too long (91 > 79 characters)
                    "HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run"
                                                                               ^
security/bots/device_security_bot.py:352:80: E501 line too long (84 > 79 characters)
                    if process_name in self.threat_database["suspicious_processes"]:
                                                                               ^
security/bots/device_security_bot.py:424:80: E501 line too long (103 > 79 characters)
            ThreatType.RANSOMWARE: "Немедленно отключить устройство и восстановить из резервной копии",
                                                                               ^
security/bots/device_security_bot.py:442:80: E501 line too long (91 > 79 characters)
            cursor.execute("""
                INSERT OR REPLACE INTO device_threats
                (threat_id, threat_type, device_id, file_path, threat_level,
                 description, detection_time, file_size, file_hash, process_id, mitigation)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                              
                                                ^
security/bots/device_security_bot.py:543:80: E501 line too long (117 > 79 characters)
                "disk_usage": psutil.disk_usage('/').total if os_name != "Windows" else psutil.disk_usage('C:').total
                                                                               ^
security/bots/device_security_bot.py:661:80: E501 line too long (90 > 79 characters)
                security_recommendations=self._generate_device_recommendations(device_id),
                                                                               ^
security/bots/device_security_bot.py:687:80: E501 line too long (83 > 79 characters)
            cursor.execute("""
                SELECT threat_level FROM device_threats
                WHERE device_id = ? AND detection_time > datetime('now', '-1 hour')
                ORDER BY detection_time DESC
            """, (device_id,))
                              
                                                ^
security/bots/device_security_bot.py:728:80: E501 line too long (100 > 79 characters)
            return f"🔄 Устройство требует перезагрузки: {threat_level.value.upper()} уровень угрозы"
                                                                               ^
security/bots/device_security_bot.py:730:80: E501 line too long (100 > 79 characters)
            return f"⚠️ Устройство помещено в карантин: {threat_level.value.upper()} уровень угрозы"
                                                                               ^
security/bots/device_security_bot.py:732:80: E501 line too long (89 > 79 characters)
            return f"📦 Требуется обновление: {threat_level.value.upper()} уровень угрозы"
                                                                               ^
security/bots/device_security_bot.py:811:80: E501 line too long (133 > 79 characters)
                    "disk_usage": psutil.disk_usage('/').percent if device.os_name != "Windows" else psutil.disk_usage('C:').percent,
                                                                               ^
security/bots/device_security_bot.py:854:80: E501 line too long (83 > 79 characters)
    device_registered = await bot.register_device("device_123", DeviceType.DESKTOP)
                                                                               ^
security/bots/emergency_response_bot.py:48:1: F401 'core.base.ComponentStatus' imported but unused
from core.base import ComponentStatus, SecurityBase, SecurityLevel
^
security/bots/emergency_response_bot.py:48:1: F401 'core.base.SecurityLevel' imported but unused
from core.base import ComponentStatus, SecurityBase, SecurityLevel
^
security/bots/emergency_response_bot.py:54:1: F401 'datetime.timedelta' imported but unused
from datetime import datetime, timedelta
^
security/bots/emergency_response_bot.py:56:1: F401 'typing.Tuple' imported but unused
from typing import Dict, List, Optional, Any, Tuple
^
security/bots/emergency_response_bot.py:57:1: F401 'dataclasses.dataclass' imported but unused
from dataclasses import dataclass, field
^
security/bots/emergency_response_bot.py:57:1: F401 'dataclasses.field' imported but unused
from dataclasses import dataclass, field
^
security/bots/emergency_response_bot.py:59:1: F401 'collections.defaultdict' imported but unused
from collections import defaultdict
^
security/bots/emergency_response_bot.py:64:80: E501 line too long (92 > 79 characters)
from sqlalchemy import create_engine, Column, String, Integer, DateTime, Boolean, JSON, Text
                                                                               ^
security/bots/emergency_response_bot.py:67:1: F401 'pydantic.validator' imported but unused
from pydantic import BaseModel, Field, validator
^
security/bots/emergency_response_bot.py:69:1: F401 'numpy as np' imported but unused
import numpy as np
^
security/bots/emergency_response_bot.py:76:80: E501 line too long (93 > 79 characters)
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))
                                                                               ^
security/bots/emergency_response_bot.py:131:80: E501 line too long (84 > 79 characters)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
                                                                               ^
security/bots/emergency_response_bot.py:151:80: E501 line too long (84 > 79 characters)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
                                                                               ^
security/bots/emergency_response_bot.py:190:80: E501 line too long (80 > 79 characters)
    emergency_contacts: List[EmergencyContactInfo] = Field(default_factory=list)
                                                                               ^
security/bots/emergency_response_bot.py:224:80: E501 line too long (100 > 79 characters)
    def __init__(self, name: str = "EmergencyResponseBot", config: Optional[Dict[str, Any]] = None):
                                                                               ^
security/bots/emergency_response_bot.py:310:80: E501 line too long (89 > 79 characters)
                self.monitoring_thread = threading.Thread(target=self._monitoring_worker)
                                                                               ^
security/bots/emergency_response_bot.py:332:80: E501 line too long (80 > 79 characters)
                if self.monitoring_thread and self.monitoring_thread.is_alive():
                                                                               ^
security/bots/emergency_response_bot.py:352:80: E501 line too long (97 > 79 characters)
            database_url = self.config.get("database_url", "sqlite:///emergency_response_bot.db")
                                                                               ^
security/bots/emergency_response_bot.py:368:80: E501 line too long (80 > 79 characters)
            redis_url = self.config.get("redis_url", "redis://localhost:6379/0")
                                                                               ^
security/bots/emergency_response_bot.py:369:80: E501 line too long (80 > 79 characters)
            self.redis_client = redis.from_url(redis_url, decode_responses=True)
                                                                               ^
security/bots/emergency_response_bot.py:414:80: E501 line too long (104 > 79 characters)
                self.logger.info(f"Загружено {len(self.emergency_contacts)} контактов экстренных служб")
                                                                               ^
security/bots/emergency_response_bot.py:442:80: E501 line too long (88 > 79 characters)
                        self.stats["resolved_incidents"] / self.stats["total_incidents"]
                                                                               ^
security/bots/emergency_response_bot.py:455:80: E501 line too long (112 > 79 characters)
                if (current_time - incident.timestamp.timestamp()) > self.config.get("escalation_timeout", 300):
                                                                               ^
security/bots/emergency_response_bot.py:478:80: E501 line too long (94 > 79 characters)
                emergency_data.priority_score = self._calculate_priority_score(emergency_data)
                                                                               ^
security/bots/emergency_response_bot.py:496:80: E501 line too long (88 > 79 characters)
                self.logger.info(f"Экстренная ситуация зарегистрирована: {incident_id}")
                                                                               ^
security/bots/emergency_response_bot.py:506:80: E501 line too long (87 > 79 characters)
        random_part = hashlib.md5(f"{timestamp}{time.time()}".encode()).hexdigest()[:8]
                                                                               ^
security/bots/emergency_response_bot.py:540:80: E501 line too long (95 > 79 characters)
            time_factor = 1.0 - (time.time() - emergency.timestamp.timestamp()) / 3600  # 1 час
                                                                               ^
security/bots/emergency_response_bot.py:562:80: E501 line too long (85 > 79 characters)
            await self._send_emergency_notifications(incident_id, contacts_to_notify)
                                                                               ^
security/bots/emergency_response_bot.py:572:80: E501 line too long (108 > 79 characters)
            emergency_response_time.labels(type=incident.emergency_type.value).observe(response_time / 1000)
                                                                               ^
security/bots/emergency_response_bot.py:574:80: E501 line too long (102 > 79 characters)
            self.logger.info(f"Реагирование на инцидент {incident_id} завершено за {response_time}мс")
                                                                               ^
security/bots/emergency_response_bot.py:577:80: E501 line too long (81 > 79 characters)
            self.logger.error(f"Ошибка реагирования на экстренную ситуацию: {e}")
                                                                               ^
security/bots/emergency_response_bot.py:579:80: E501 line too long (84 > 79 characters)
    def _get_contacts_for_emergency(self, incident: EmergencyResponse) -> List[str]:
                                                                               ^
security/bots/emergency_response_bot.py:594:80: E501 line too long (80 > 79 characters)
            contacts.sort(key=lambda cid: self.emergency_contacts[cid].priority)
                                                                               ^
security/bots/emergency_response_bot.py:602:80: E501 line too long (105 > 79 characters)
    def _is_contact_relevant(self, contact: EmergencyContactInfo, emergency_type: EmergencyType) -> bool:
                                                                               ^
security/bots/emergency_response_bot.py:606:80: E501 line too long (86 > 79 characters)
                EmergencyType.MEDICAL: ["medical", "ambulance", "hospital", "doctor"],
                                                                               ^
security/bots/emergency_response_bot.py:610:80: E501 line too long (84 > 79 characters)
                EmergencyType.NATURAL_DISASTER: ["emergency", "rescue", "disaster"],
                                                                               ^
security/bots/emergency_response_bot.py:613:80: E501 line too long (88 > 79 characters)
                EmergencyType.CHILD_SAFETY: ["child", "family", "emergency", "medical"],
                                                                               ^
security/bots/emergency_response_bot.py:614:80: E501 line too long (85 > 79 characters)
                EmergencyType.ELDERLY_CARE: ["elderly", "medical", "family", "care"],
                                                                               ^
security/bots/emergency_response_bot.py:619:80: E501 line too long (103 > 79 characters)
            return any(service_type in contact.service_type.lower() for service_type in relevant_types)
                                                                               ^
security/bots/emergency_response_bot.py:625:80: E501 line too long (97 > 79 characters)
    async def _send_emergency_notifications(self, incident_id: str, contacts: List[str]) -> None:
                                                                               ^
security/bots/emergency_response_bot.py:648:80: E501 line too long (82 > 79 characters)
            self.logger.info(f"Уведомления об инциденте {incident_id} отправлены")
                                                                               ^
security/bots/emergency_response_bot.py:653:80: E501 line too long (110 > 79 characters)
    async def _send_emergency_alert(self, contact: EmergencyContactInfo, incident: EmergencyResponse) -> None:
                                                                               ^
security/bots/emergency_response_bot.py:658:80: E501 line too long (102 > 79 characters)
            self.logger.info(f"Отправка экстренного оповещения на {contact.phone} для {contact.name}")
                                                                               ^
security/bots/emergency_response_bot.py:669:80: E501 line too long (83 > 79 characters)
                self.redis_client.lpush("emergency_alerts", json.dumps(alert_data))
                                                                               ^
security/bots/emergency_response_bot.py:674:80: E501 line too long (110 > 79 characters)
    async def _send_emergency_email(self, contact: EmergencyContactInfo, incident: EmergencyResponse) -> None:
                                                                               ^
security/bots/emergency_response_bot.py:679:80: E501 line too long (97 > 79 characters)
            self.logger.info(f"Отправка экстренного email на {contact.email} для {contact.name}")
                                                                               ^
security/bots/emergency_response_bot.py:689:80: E501 line too long (86 > 79 characters)
            self.logger.info(f"Уведомление семьи об инциденте {incident.incident_id}")
                                                                               ^
security/bots/emergency_response_bot.py:740:80: E501 line too long (89 > 79 characters)
            self.logger.info(f"Выполнение действия {action} для инцидента {incident_id}")
                                                                               ^
security/bots/emergency_response_bot.py:750:80: E501 line too long (85 > 79 characters)
                self.redis_client.lpush("emergency_actions", json.dumps(action_data))
                                                                               ^
security/bots/emergency_response_bot.py:800:80: E501 line too long (86 > 79 characters)
    async def get_incident_status(self, incident_id: str) -> Optional[Dict[str, Any]]:
                                                                               ^
security/bots/emergency_response_bot.py:811:80: E501 line too long (113 > 79 characters)
                "status": incident.status.value if hasattr(incident, 'status') else ResponseStatus.PENDING.value,
                                                                               ^
security/bots/emergency_response_bot.py:824:80: E501 line too long (91 > 79 characters)
    async def resolve_incident(self, incident_id: str, resolution_notes: str = "") -> bool:
                                                                               ^
security/bots/emergency_response_bot.py:895:80: E501 line too long (98 > 79 characters)
            location={"address": "Test Address", "coordinates": {"lat": 55.7558, "lon": 37.6176}},
                                                                               ^
security/bots/gaming_security_bot.py:50:1: F401 'core.base.ComponentStatus' imported but unused
from core.base import ComponentStatus, SecurityBase, SecurityLevel
^
security/bots/gaming_security_bot.py:50:1: F401 'core.base.SecurityLevel' imported but unused
from core.base import ComponentStatus, SecurityBase, SecurityLevel
^
security/bots/gaming_security_bot.py:53:1: F401 'json' imported but unused
import json
^
security/bots/gaming_security_bot.py:56:1: F401 'datetime.timedelta' imported but unused
from datetime import datetime, timedelta
^
security/bots/gaming_security_bot.py:59:1: F401 'dataclasses.dataclass' imported but unused
from dataclasses import dataclass, field
^
security/bots/gaming_security_bot.py:59:1: F401 'dataclasses.field' imported but unused
from dataclasses import dataclass, field
^
security/bots/gaming_security_bot.py:61:1: F401 'collections.defaultdict' imported but unused
from collections import defaultdict
^
security/bots/gaming_security_bot.py:66:1: F401 'sqlalchemy.Text' imported but unused
from sqlalchemy import create_engine, Column, String, Integer, DateTime, Boolean, JSON, Text, Float
^
security/bots/gaming_security_bot.py:66:80: E501 line too long (99 > 79 characters)
from sqlalchemy import create_engine, Column, String, Integer, DateTime, Boolean, JSON, Text, Float
                                                                               ^
security/bots/gaming_security_bot.py:69:1: F401 'pydantic.validator' imported but unused
from pydantic import BaseModel, Field, validator
^
security/bots/gaming_security_bot.py:70:1: F401 'prometheus_client.Histogram' imported but unused
from prometheus_client import Counter, Histogram, Gauge
^
security/bots/gaming_security_bot.py:71:1: F401 'numpy as np' imported but unused
import numpy as np
^
security/bots/gaming_security_bot.py:78:80: E501 line too long (93 > 79 characters)
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))
                                                                               ^
security/bots/gaming_security_bot.py:292:80: E501 line too long (97 > 79 characters)
    def __init__(self, name: str = "GamingSecurityBot", config: Optional[Dict[str, Any]] = None):
                                                                               ^
security/bots/gaming_security_bot.py:379:80: E501 line too long (89 > 79 characters)
                self.monitoring_thread = threading.Thread(target=self._monitoring_worker)
                                                                               ^
security/bots/gaming_security_bot.py:401:80: E501 line too long (80 > 79 characters)
                if self.monitoring_thread and self.monitoring_thread.is_alive():
                                                                               ^
security/bots/gaming_security_bot.py:421:80: E501 line too long (94 > 79 characters)
            database_url = self.config.get("database_url", "sqlite:///gaming_security_bot.db")
                                                                               ^
security/bots/gaming_security_bot.py:437:80: E501 line too long (80 > 79 characters)
            redis_url = self.config.get("redis_url", "redis://localhost:6379/0")
                                                                               ^
security/bots/gaming_security_bot.py:438:80: E501 line too long (80 > 79 characters)
            self.redis_client = redis.from_url(redis_url, decode_responses=True)
                                                                               ^
security/bots/gaming_security_bot.py:521:80: E501 line too long (99 > 79 characters)
    async def start_game_session(self, player_id: str, game_id: str, game_genre: GameGenre) -> str:
                                                                               ^
security/bots/gaming_security_bot.py:564:80: E501 line too long (87 > 79 characters)
        random_part = hashlib.md5(f"{timestamp}{time.time()}".encode()).hexdigest()[:8]
                                                                               ^
security/bots/gaming_security_bot.py:567:80: E501 line too long (96 > 79 characters)
    async def analyze_player_action(self, session_id: str, player_id: str, action: PlayerAction,
                                                                               ^
security/bots/gaming_security_bot.py:568:80: E501 line too long (83 > 79 characters)
                                    coordinates: Optional[Dict[str, float]] = None,
                                                                               ^
security/bots/gaming_security_bot.py:569:80: E501 line too long (101 > 79 characters)
                                    context: Optional[Dict[str, Any]] = None) -> CheatAnalysisResult:
                                                                               ^
security/bots/gaming_security_bot.py:593:80: E501 line too long (90 > 79 characters)
                recommended_action=self._get_recommended_action(threat_level, confidence),
                                                                               ^
security/bots/gaming_security_bot.py:594:80: E501 line too long (105 > 79 characters)
                false_positive_probability=self._calculate_false_positive_probability(confidence, action)
                                                                               ^
security/bots/gaming_security_bot.py:639:80: E501 line too long (86 > 79 characters)
                if coordinates and self._is_impossible_accuracy(coordinates, context):
                                                                               ^
security/bots/gaming_security_bot.py:656:80: E501 line too long (87 > 79 characters)
                    anomaly_score = self.ml_model.decision_function(features_scaled)[0]
                                                                               ^
security/bots/gaming_security_bot.py:670:80: E501 line too long (112 > 79 characters)
    def _is_impossible_accuracy(self, coordinates: Dict[str, float], context: Optional[Dict[str, Any]]) -> bool:
                                                                               ^
security/bots/gaming_security_bot.py:679:80: E501 line too long (87 > 79 characters)
            # Простая проверка: точность > 95% на расстоянии > 100 метров подозрительна
                                                                               ^
security/bots/gaming_security_bot.py:686:80: E501 line too long (119 > 79 characters)
    def _is_impossible_speed(self, coordinates: Optional[Dict[str, float]], context: Optional[Dict[str, Any]]) -> bool:
                                                                               ^
security/bots/gaming_security_bot.py:693:80: E501 line too long (86 > 79 characters)
            max_speed = context.get("max_speed", 10.0)  # Максимальная скорость в игре
                                                                               ^
security/bots/gaming_security_bot.py:702:80: E501 line too long (94 > 79 characters)
    def _extract_features(self, action: PlayerAction, coordinates: Optional[Dict[str, float]],
                                                                               ^
security/bots/gaming_security_bot.py:714:80: E501 line too long (83 > 79 characters)
                features.extend([coordinates.get("x", 0), coordinates.get("y", 0)])
                                                                               ^
security/bots/gaming_security_bot.py:732:80: E501 line too long (93 > 79 characters)
    def _gather_evidence(self, action: PlayerAction, coordinates: Optional[Dict[str, float]],
                                                                               ^
security/bots/gaming_security_bot.py:749:80: E501 line too long (91 > 79 characters)
    def _get_recommended_action(self, threat_level: ThreatLevel, confidence: float) -> str:
                                                                               ^
security/bots/gaming_security_bot.py:767:80: E501 line too long (102 > 79 characters)
    def _calculate_false_positive_probability(self, confidence: float, action: PlayerAction) -> float:
                                                                               ^
security/bots/gaming_security_bot.py:785:80: E501 line too long (86 > 79 characters)
            self.logger.error(f"Ошибка расчета вероятности ложного срабатывания: {e}")
                                                                               ^
security/bots/gaming_security_bot.py:788:80: E501 line too long (111 > 79 characters)
    async def _log_cheat_detection(self, session_id: str, player_id: str, result: CheatAnalysisResult) -> None:
                                                                               ^
security/bots/gaming_security_bot.py:814:80: E501 line too long (87 > 79 characters)
        random_part = hashlib.md5(f"{timestamp}{time.time()}".encode()).hexdigest()[:8]
                                                                               ^
security/bots/gaming_security_bot.py:818:80: E501 line too long (86 > 79 characters)
                                  transaction_data: Dict[str, Any]) -> Dict[str, Any]:
                                                                               ^
security/bots/gaming_security_bot.py:858:80: E501 line too long (86 > 79 characters)
                "transaction_id": transaction.id if 'transaction' in locals() else "",
                                                                               ^
security/bots/gaming_security_bot.py:874:80: E501 line too long (85 > 79 characters)
    def _calculate_transaction_risk(self, transaction_data: Dict[str, Any]) -> float:
                                                                               ^
security/bots/gaming_security_bot.py:890:80: E501 line too long (80 > 79 characters)
            elif payment_method in ["gift_card", "prepaid"]:  # Подарочные карты
                                                                               ^
security/bots/gaming_security_bot.py:911:80: E501 line too long (87 > 79 characters)
        random_part = hashlib.md5(f"{timestamp}{time.time()}".encode()).hexdigest()[:8]
                                                                               ^
security/bots/gaming_security_bot.py:915:80: E501 line too long (90 > 79 characters)
                               kills: int = 0, deaths: int = 0, assists: int = 0) -> bool:
                                                                               ^
security/bots/gaming_security_bot.py:925:80: E501 line too long (95 > 79 characters)
                session.duration = int((session.end_time - session.start_time).total_seconds())
                                                                               ^
security/bots/gaming_security_bot.py:954:80: E501 line too long (82 > 79 characters)
    async def get_player_profile(self, player_id: str) -> Optional[PlayerProfile]:
                                                                               ^
security/bots/gaming_security_bot.py:980:80: E501 line too long (113 > 79 characters)
    async def get_security_alerts(self, player_id: Optional[str] = None, limit: int = 10) -> List[SecurityAlert]:
                                                                               ^
security/bots/gaming_security_bot.py:1042:80: E501 line too long (88 > 79 characters)
        print(f"✅ Анализ действия: {result.cheat_type.value} - {result.confidence:.2f}")
                                                                               ^
security/bots/gaming_security_bot.py:1055:80: E501 line too long (117 > 79 characters)
        print(f"✅ Анализ транзакции: {transaction_result['is_fraudulent']} - {transaction_result['risk_score']:.2f}")
                                                                               ^
security/bots/gaming_security_bot.py:1058:80: E501 line too long (102 > 79 characters)
        ended = await bot.end_game_session(session_id, final_score=1000, kills=5, deaths=2, assists=3)
                                                                               ^
security/bots/incognito_protection_bot.py:14:1: F401 'socket' imported but unused
import socket
^
security/bots/incognito_protection_bot.py:16:1: F401 'datetime.timedelta' imported but unused
from datetime import datetime, timedelta
^
security/bots/incognito_protection_bot.py:17:1: F401 'typing.Optional' imported but unused
from typing import Dict, List, Any, Optional, Union, Tuple
^
security/bots/incognito_protection_bot.py:17:1: F401 'typing.Union' imported but unused
from typing import Dict, List, Any, Optional, Union, Tuple
^
security/bots/incognito_protection_bot.py:17:1: F401 'typing.Tuple' imported but unused
from typing import Dict, List, Any, Optional, Union, Tuple
^
security/bots/incognito_protection_bot.py:21:1: F401 'hashlib' imported but unused
import hashlib
^
security/bots/incognito_protection_bot.py:22:1: F401 're' imported but unused
import re
^
security/bots/incognito_protection_bot.py:23:1: F401 'urllib.parse' imported but unused
import urllib.parse
^
security/bots/incognito_protection_bot.py:105:1: W293 blank line contains whitespace
        
^
security/bots/incognito_protection_bot.py:113:1: W293 blank line contains whitespace
        
^
security/bots/incognito_protection_bot.py:120:1: W293 blank line contains whitespace
        
^
security/bots/incognito_protection_bot.py:124:1: W293 blank line contains whitespace
        
^
security/bots/incognito_protection_bot.py:134:1: W293 blank line contains whitespace
        
^
security/bots/incognito_protection_bot.py:152:1: W293 blank line contains whitespace
            
^
security/bots/incognito_protection_bot.py:166:1: W293 blank line contains whitespace
            
^
security/bots/incognito_protection_bot.py:187:1: W293 blank line contains whitespace
                
^
security/bots/incognito_protection_bot.py:194:1: W293 blank line contains whitespace
                
^
security/bots/incognito_protection_bot.py:196:80: E501 line too long (89 > 79 characters)
                    any(provider in indicator for provider in self.blocked_vpn_providers)
                                                                               ^
security/bots/incognito_protection_bot.py:199:1: W293 blank line contains whitespace
                
^
security/bots/incognito_protection_bot.py:203:80: E501 line too long (85 > 79 characters)
                        if any(provider in indicator for indicator in vpn_indicators)
                                                                               ^
security/bots/incognito_protection_bot.py:205:1: W293 blank line contains whitespace
                    
^
security/bots/incognito_protection_bot.py:210:55: W291 trailing whitespace
                        conn.execute("""
                            INSERT INTO vpn_detections 
                            (detection_id, child_id, vpn_provider, vpn_country, 
                             original_country, confidence, detection_method, timestamp, blocked)
                            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
                        """, (
                                        
             ^
security/bots/incognito_protection_bot.py:211:80: W291 trailing whitespace
                        conn.execute("""
                            INSERT INTO vpn_detections 
                            (detection_id, child_id, vpn_provider, vpn_country, 
                             original_country, confidence, detection_method, timestamp, blocked)
                            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
                        """, (
                                        
                                      ^
security/bots/incognito_protection_bot.py:212:80: E501 line too long (96 > 79 characters)
                        conn.execute("""
                            INSERT INTO vpn_detections 
                            (detection_id, child_id, vpn_provider, vpn_country, 
                             original_country, confidence, detection_method, timestamp, blocked)
                            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
                        """, (
                                        
                                      ^
security/bots/incognito_protection_bot.py:215:80: E501 line too long (90 > 79 characters)
                            detection_id, child_id, vpn_provider, data.get("country", ""),
                                                                               ^
security/bots/incognito_protection_bot.py:216:75: W291 trailing whitespace
                            data.get("country", ""), 0.9, "API_DETECTION", 
                                                                          ^
security/bots/incognito_protection_bot.py:219:1: W293 blank line contains whitespace
                    
^
security/bots/incognito_protection_bot.py:228:1: W293 blank line contains whitespace
            
^
security/bots/incognito_protection_bot.py:237:1: W293 blank line contains whitespace
            
^
security/bots/incognito_protection_bot.py:257:61: W291 trailing whitespace
                        browser in proc.info['name'].lower() 
                                                            ^
security/bots/incognito_protection_bot.py:258:80: E501 line too long (96 > 79 characters)
                        for browser in ['chrome', 'firefox', 'safari', 'edge', 'opera', 'brave']
                                                                               ^
security/bots/incognito_protection_bot.py:266:1: W293 blank line contains whitespace
            
^
security/bots/incognito_protection_bot.py:272:1: W293 blank line contains whitespace
            
^
security/bots/incognito_protection_bot.py:276:1: W293 blank line contains whitespace
            
^
security/bots/incognito_protection_bot.py:279:80: E501 line too long (91 > 79 characters)
                if any(indicator in cmdline.lower() for indicator in incognito_indicators):
                                                                               ^
security/bots/incognito_protection_bot.py:284:1: W293 blank line contains whitespace
            
^
security/bots/incognito_protection_bot.py:289:80: E501 line too long (82 > 79 characters)
                    Path.home() / "AppData/Local/Google/Chrome/User Data/Default",
                                                                               ^
security/bots/incognito_protection_bot.py:290:80: E501 line too long (86 > 79 characters)
                    Path.home() / "Library/Application Support/Google/Chrome/Default",
                                                                               ^
security/bots/incognito_protection_bot.py:293:1: W293 blank line contains whitespace
                
^
security/bots/incognito_protection_bot.py:302:1: W293 blank line contains whitespace
            
^
security/bots/incognito_protection_bot.py:308:57: W291 trailing whitespace
                    conn.execute("""
                        INSERT INTO incognito_detections 
                        (detection_id, child_id, browser_type, detection_method, 
                         confidence, session_data, timestamp, blocked)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?)
                    """, (
                                    
                   ^
security/bots/incognito_protection_bot.py:309:80: E501 line too long (80 > 79 characters)
                    conn.execute("""
                        INSERT INTO incognito_detections 
                        (detection_id, child_id, browser_type, detection_method, 
                         confidence, session_data, timestamp, blocked)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?)
                    """, (
                                    
                                          ^
security/bots/incognito_protection_bot.py:309:81: W291 trailing whitespace
                    conn.execute("""
                        INSERT INTO incognito_detections 
                        (detection_id, child_id, browser_type, detection_method, 
                         confidence, session_data, timestamp, blocked)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?)
                    """, (
                                    
                                           ^
security/bots/incognito_protection_bot.py:316:1: W293 blank line contains whitespace
            
^
security/bots/incognito_protection_bot.py:324:1: W293 blank line contains whitespace
            
^
security/bots/incognito_protection_bot.py:342:1: W293 blank line contains whitespace
            
^
security/bots/incognito_protection_bot.py:347:1: W293 blank line contains whitespace
            
^
security/bots/incognito_protection_bot.py:352:80: E501 line too long (93 > 79 characters)
    async def block_bypass_attempt(self, child_id: str, bypass_method: BypassMethod) -> bool:
                                                                               ^
security/bots/incognito_protection_bot.py:363:1: W293 blank line contains whitespace
            
^
security/bots/incognito_protection_bot.py:374:1: W293 blank line contains whitespace
            
^
security/bots/incognito_protection_bot.py:378:56: W291 trailing whitespace
                    "sudo", "iptables", "-A", "OUTPUT", 
                                                       ^
security/bots/incognito_protection_bot.py:381:1: W293 blank line contains whitespace
                
^
security/bots/incognito_protection_bot.py:383:56: W291 trailing whitespace
                    "sudo", "iptables", "-A", "OUTPUT", 
                                                       ^
security/bots/incognito_protection_bot.py:386:1: W293 blank line contains whitespace
            
^
security/bots/incognito_protection_bot.py:399:61: W291 trailing whitespace
                        browser in proc.info['name'].lower() 
                                                            ^
security/bots/incognito_protection_bot.py:400:80: E501 line too long (96 > 79 characters)
                        for browser in ['chrome', 'firefox', 'safari', 'edge', 'opera', 'brave']
                                                                               ^
security/bots/incognito_protection_bot.py:407:80: E501 line too long (102 > 79 characters)
                            logger.info(f"Завершен процесс браузера в инкогнито: {proc.info['name']}")
                                                                               ^
security/bots/incognito_protection_bot.py:410:1: W293 blank line contains whitespace
            
^
security/bots/incognito_protection_bot.py:422:80: E501 line too long (80 > 79 characters)
                    if proc.info['name'] and 'tor' in proc.info['name'].lower():
                                                                               ^
security/bots/incognito_protection_bot.py:424:80: E501 line too long (81 > 79 characters)
                        logger.info(f"Завершен процесс Tor: {proc.info['name']}")
                                                                               ^
security/bots/incognito_protection_bot.py:427:1: W293 blank line contains whitespace
            
^
security/bots/incognito_protection_bot.py:432:56: W291 trailing whitespace
                    "sudo", "iptables", "-A", "OUTPUT", 
                                                       ^
security/bots/incognito_protection_bot.py:435:1: W293 blank line contains whitespace
            
^
security/bots/incognito_protection_bot.py:448:56: W291 trailing whitespace
                    "sudo", "iptables", "-A", "OUTPUT", 
                                                       ^
security/bots/incognito_protection_bot.py:451:1: W293 blank line contains whitespace
            
^
security/bots/incognito_protection_bot.py:457:80: E501 line too long (81 > 79 characters)
    async def notify_parents(self, child_id: str, bypass_attempt: BypassAttempt):
                                                                               ^
security/bots/incognito_protection_bot.py:465:80: E501 line too long (110 > 79 characters)
                "message": f"Ребенок {child_id} пытается обойти защиту: {bypass_attempt.bypass_method.value}",
                                                                               ^
security/bots/incognito_protection_bot.py:471:1: W293 blank line contains whitespace
            
^
security/bots/incognito_protection_bot.py:474:1: W293 blank line contains whitespace
            
^
security/bots/incognito_protection_bot.py:476:80: E501 line too long (82 > 79 characters)
            logger.critical(f"КРИТИЧЕСКОЕ УВЕДОМЛЕНИЕ: {notification['message']}")
                                                                               ^
security/bots/incognito_protection_bot.py:477:1: W293 blank line contains whitespace
            
^
security/bots/incognito_protection_bot.py:487:1: W293 blank line contains whitespace
        
^
security/bots/incognito_protection_bot.py:495:80: E501 line too long (101 > 79 characters)
            screenshot_path = f"data/screenshots/incognito_attempt_{child_id}_{int(time.time())}.png"
                                                                               ^
security/bots/incognito_protection_bot.py:497:1: W293 blank line contains whitespace
            
^
security/bots/incognito_protection_bot.py:500:1: W293 blank line contains whitespace
            
^
security/bots/incognito_protection_bot.py:514:65: W291 trailing whitespace
                            browser in proc.info['name'].lower() 
                                                                ^
security/bots/incognito_protection_bot.py:515:80: E501 line too long (100 > 79 characters)
                            for browser in ['chrome', 'firefox', 'safari', 'edge', 'opera', 'brave']
                                                                               ^
security/bots/incognito_protection_bot.py:520:1: W293 blank line contains whitespace
                
^
security/bots/incognito_protection_bot.py:525:1: W293 blank line contains whitespace
                
^
security/bots/incognito_protection_bot.py:526:80: E501 line too long (91 > 79 characters)
                logger.critical(f"ЭКСТРЕННАЯ БЛОКИРОВКА УСТРОЙСТВА для ребенка {child_id}")
                                                                               ^
security/bots/incognito_protection_bot.py:528:1: W293 blank line contains whitespace
            
^
security/bots/incognito_protection_bot.py:554:1: W293 blank line contains whitespace
                    
^
security/bots/incognito_protection_bot.py:555:80: E501 line too long (90 > 79 characters)
                    await self.block_bypass_attempt(child_id, BypassMethod.VPN_CONNECTION)
                                                                               ^
security/bots/incognito_protection_bot.py:557:1: W293 blank line contains whitespace
                
^
security/bots/incognito_protection_bot.py:559:80: E501 line too long (80 > 79 characters)
                incognito_detection = await self.detect_incognito_mode(child_id)
                                                                               ^
security/bots/incognito_protection_bot.py:574:1: W293 blank line contains whitespace
                    
^
security/bots/incognito_protection_bot.py:575:80: E501 line too long (90 > 79 characters)
                    await self.block_bypass_attempt(child_id, BypassMethod.INCOGNITO_MODE)
                                                                               ^
security/bots/incognito_protection_bot.py:577:1: W293 blank line contains whitespace
                
^
security/bots/incognito_protection_bot.py:580:1: W293 blank line contains whitespace
                
^
security/bots/incognito_protection_bot.py:591:61: W291 trailing whitespace
                cursor = conn.execute("""
                    SELECT bypass_method, COUNT(*) as count, 
                           SUM(CASE WHEN success THEN 1 ELSE 0 END) as successful
                    FROM bypass_attempts 
                    WHERE child_id = ? 
                    GROUP BY bypass_method
                """, (child_id,))
                                         
                  ^
security/bots/incognito_protection_bot.py:592:80: E501 line too long (81 > 79 characters)
                cursor = conn.execute("""
                    SELECT bypass_method, COUNT(*) as count, 
                           SUM(CASE WHEN success THEN 1 ELSE 0 END) as successful
                    FROM bypass_attempts 
                    WHERE child_id = ? 
                    GROUP BY bypass_method
                """, (child_id,))
                                         
                                     ^
security/bots/incognito_protection_bot.py:593:41: W291 trailing whitespace
                cursor = conn.execute("""
                    SELECT bypass_method, COUNT(*) as count, 
                           SUM(CASE WHEN success THEN 1 ELSE 0 END) as successful
                    FROM bypass_attempts 
                    WHERE child_id = ? 
                    GROUP BY bypass_method
                """, (child_id,))
                                        ^
security/bots/incognito_protection_bot.py:594:39: W291 trailing whitespace
                cursor = conn.execute("""
                    SELECT bypass_method, COUNT(*) as count, 
                           SUM(CASE WHEN success THEN 1 ELSE 0 END) as successful
                    FROM bypass_attempts 
                    WHERE child_id = ? 
                    GROUP BY bypass_method
                """, (child_id,))
                                      ^
security/bots/incognito_protection_bot.py:597:1: W293 blank line contains whitespace
                
^
security/bots/incognito_protection_bot.py:605:1: W293 blank line contains whitespace
                
^
security/bots/incognito_protection_bot.py:608:46: W291 trailing whitespace
                cursor = conn.execute("""
                    SELECT COUNT(*) as total, 
                           SUM(CASE WHEN blocked THEN 1 ELSE 0 END) as blocked
                    FROM vpn_detections 
                    WHERE child_id = ?
                """, (child_id,))
                                         
   ^
security/bots/incognito_protection_bot.py:610:40: W291 trailing whitespace
                cursor = conn.execute("""
                    SELECT COUNT(*) as total, 
                           SUM(CASE WHEN blocked THEN 1 ELSE 0 END) as blocked
                    FROM vpn_detections 
                    WHERE child_id = ?
                """, (child_id,))
                                       ^
security/bots/incognito_protection_bot.py:613:1: W293 blank line contains whitespace
                
^
security/bots/incognito_protection_bot.py:615:1: W293 blank line contains whitespace
                
^
security/bots/incognito_protection_bot.py:618:46: W291 trailing whitespace
                cursor = conn.execute("""
                    SELECT COUNT(*) as total, 
                           SUM(CASE WHEN blocked THEN 1 ELSE 0 END) as blocked
                    FROM incognito_detections 
                    WHERE child_id = ?
                """, (child_id,))
                                         
   ^
security/bots/incognito_protection_bot.py:620:46: W291 trailing whitespace
                cursor = conn.execute("""
                    SELECT COUNT(*) as total, 
                           SUM(CASE WHEN blocked THEN 1 ELSE 0 END) as blocked
                    FROM incognito_detections 
                    WHERE child_id = ?
                """, (child_id,))
                                         
   ^
security/bots/incognito_protection_bot.py:623:1: W293 blank line contains whitespace
                
^
security/bots/incognito_protection_bot.py:625:1: W293 blank line contains whitespace
                
^
security/bots/incognito_protection_bot.py:639:1: W293 blank line contains whitespace
                
^
security/bots/incognito_protection_bot.py:649:1: W293 blank line contains whitespace
    
^
security/bots/incognito_protection_bot.py:652:1: W293 blank line contains whitespace
    
^
security/bots/incognito_protection_bot.py:657:1: W293 blank line contains whitespace
    
^
security/bots/incognito_protection_bot.py:663:24: W292 no newline at end of file
    asyncio.run(main())                       ^
security/bots/instagram_security_bot.py:50:1: F401 'core.base.ComponentStatus' imported but unused
from core.base import ComponentStatus, SecurityBase, SecurityLevel
^
security/bots/instagram_security_bot.py:50:1: F401 'core.base.SecurityLevel' imported but unused
from core.base import ComponentStatus, SecurityBase, SecurityLevel
^
security/bots/instagram_security_bot.py:53:1: F401 'json' imported but unused
import json
^
security/bots/instagram_security_bot.py:56:1: F401 'datetime.timedelta' imported but unused
from datetime import datetime, timedelta
^
security/bots/instagram_security_bot.py:58:1: F401 'typing.Tuple' imported but unused
from typing import Dict, List, Optional, Any, Tuple
^
security/bots/instagram_security_bot.py:59:1: F401 'dataclasses.dataclass' imported but unused
from dataclasses import dataclass, field
^
security/bots/instagram_security_bot.py:59:1: F401 'dataclasses.field' imported but unused
from dataclasses import dataclass, field
^
security/bots/instagram_security_bot.py:61:1: F401 'collections.defaultdict' imported but unused
from collections import defaultdict
^
security/bots/instagram_security_bot.py:66:80: E501 line too long (99 > 79 characters)
from sqlalchemy import create_engine, Column, String, Integer, DateTime, Boolean, JSON, Text, Float
                                                                               ^
security/bots/instagram_security_bot.py:69:1: F401 'pydantic.validator' imported but unused
from pydantic import BaseModel, Field, validator
^
security/bots/instagram_security_bot.py:70:1: F401 'prometheus_client.Histogram' imported but unused
from prometheus_client import Counter, Histogram, Gauge
^
security/bots/instagram_security_bot.py:71:1: F401 'numpy as np' imported but unused
import numpy as np
^
security/bots/instagram_security_bot.py:385:80: E501 line too long (80 > 79 characters)
                if self.monitoring_thread and self.monitoring_thread.is_alive():
                                                                               ^
security/bots/instagram_security_bot.py:465:80: E501 line too long (89 > 79 characters)
                    f"Загружено {len(self.monitored_accounts)} мониторируемых аккаунтов")
                                                                               ^
security/bots/instagram_security_bot.py:554:80: E501 line too long (80 > 79 characters)
                media_analysis = await self._analyze_media_content(content_data)
                                                                               ^
security/bots/instagram_security_bot.py:559:80: E501 line too long (89 > 79 characters)
                is_inappropriate = is_inappropriate or media_analysis["is_inappropriate"]
                                                                               ^
security/bots/instagram_security_bot.py:561:80: E501 line too long (81 > 79 characters)
                is_copyright_violation = media_analysis["is_copyright_violation"]
                                                                               ^
security/bots/instagram_security_bot.py:567:80: E501 line too long (88 > 79 characters)
            account_analysis = await self._analyze_account(content_data.get("user", {}))
                                                                               ^
security/bots/instagram_security_bot.py:674:80: E501 line too long (81 > 79 characters)
                1 for keyword in inappropriate_keywords if keyword in text_lower)
                                                                               ^
security/bots/instagram_security_bot.py:897:80: E501 line too long (87 > 79 characters)
            if threat_level == ThreatLevel.CRITICAL or is_inappropriate or is_bullying:
                                                                               ^
security/bots/instagram_security_bot.py:899:80: E501 line too long (91 > 79 characters)
            elif threat_level == ThreatLevel.HIGH or is_deepfake or is_copyright_violation:
                                                                               ^
security/bots/instagram_security_bot.py:911:80: E501 line too long (87 > 79 characters)
            self, content_data: Dict[str, Any], result: ContentAnalysisResult) -> None:
                                                                               ^
security/bots/instagram_security_bot.py:1075:80: E501 line too long (81 > 79 characters)
                "child_safety_violations": self.stats["child_safety_violations"],
                                                                               ^
security/bots/instagram_security_bot.py:1088:80: E501 line too long (85 > 79 characters)
                    deleted_user_posts = self.db_session.query(InstagramPost).filter(
                                                                               ^
security/bots/instagram_security_bot.py:1162:80: E501 line too long (98 > 79 characters)
            f"✅ Анализ контента: {result.threat_level.value} - {result.recommended_action.value}")
                                                                               ^
security/bots/instagram_security_bot.py:1171:80: E501 line too long (86 > 79 characters)
            f"✅ Отчет по безопасности: {report['threats_detected']} угроз обнаружено")
                                                                               ^
security/bots/integrate_all_bots_to_sleep.py:11:1: F401 'time' imported but unused
import time
^
security/bots/integrate_all_bots_to_sleep.py:14:1: F401 'typing.List' imported but unused
from typing import Dict, List, Any
^
security/bots/integrate_all_bots_to_sleep.py:23:1: W293 blank line contains whitespace
    
^
security/bots/integrate_all_bots_to_sleep.py:29:1: W293 blank line contains whitespace
        
^
security/bots/integrate_all_bots_to_sleep.py:41:50: W291 trailing whitespace
                "file": "gaming_security_bot.py", 
                                                 ^
security/bots/integrate_all_bots_to_sleep.py:49:49: W291 trailing whitespace
                "class": "EmergencyResponseBot", 
                                                ^
security/bots/integrate_all_bots_to_sleep.py:57:43: W291 trailing whitespace
                "function": "function_89", 
                                          ^
security/bots/integrate_all_bots_to_sleep.py:78:48: W291 trailing whitespace
                "class": "TelegramSecurityBot", 
                                               ^
security/bots/integrate_all_bots_to_sleep.py:141:1: W293 blank line contains whitespace
    
^
security/bots/integrate_all_bots_to_sleep.py:157:1: W293 blank line contains whitespace
        
^
security/bots/integrate_all_bots_to_sleep.py:168:1: W293 blank line contains whitespace
    
^
security/bots/integrate_all_bots_to_sleep.py:176:1: W293 blank line contains whitespace
    
^
security/bots/integrate_all_bots_to_sleep.py:180:1: W293 blank line contains whitespace
        
^
security/bots/integrate_all_bots_to_sleep.py:186:1: W293 blank line contains whitespace
            
^
security/bots/integrate_all_bots_to_sleep.py:188:80: E501 line too long (106 > 79 characters)
            phase_icon = "🟢" if bot_info["phase"] == "9.2" else "🔵" if bot_info["phase"] == "9.3" else "🟡"
                                                                               ^
security/bots/integrate_all_bots_to_sleep.py:189:80: E501 line too long (108 > 79 characters)
            print(f"  {status_icon} {phase_icon} {bot_info['file']}: {'Найден' if exists else 'Не найден'}")
                                                                               ^
security/bots/integrate_all_bots_to_sleep.py:190:1: W293 blank line contains whitespace
        
^
security/bots/integrate_all_bots_to_sleep.py:192:1: W293 blank line contains whitespace
    
^
security/bots/integrate_all_bots_to_sleep.py:196:1: W293 blank line contains whitespace
        
^
security/bots/integrate_all_bots_to_sleep.py:202:1: W293 blank line contains whitespace
            
^
security/bots/integrate_all_bots_to_sleep.py:205:80: E501 line too long (106 > 79 characters)
            phase_icon = "🟢" if bot_info["phase"] == "9.2" else "🔵" if bot_info["phase"] == "9.3" else "🟡"
                                                                               ^
security/bots/integrate_all_bots_to_sleep.py:206:80: E501 line too long (109 > 79 characters)
            print(f"  {status_icon} {phase_icon} {sleep_file}: {'В спящем режиме' if exists else 'Активен'}")
                                                                               ^
security/bots/integrate_all_bots_to_sleep.py:207:1: W293 blank line contains whitespace
        
^
security/bots/integrate_all_bots_to_sleep.py:209:1: W293 blank line contains whitespace
    
^
security/bots/integrate_all_bots_to_sleep.py:213:1: W293 blank line contains whitespace
        
^
security/bots/integrate_all_bots_to_sleep.py:219:80: E501 line too long (82 > 79 characters)
                self.config = {"test": True, "bot_type": bot_type, "phase": phase}
                                                                               ^
security/bots/integrate_all_bots_to_sleep.py:222:1: W293 blank line contains whitespace
            
^
security/bots/integrate_all_bots_to_sleep.py:226:1: W293 blank line contains whitespace
            
^
security/bots/integrate_all_bots_to_sleep.py:230:1: W293 blank line contains whitespace
            
^
security/bots/integrate_all_bots_to_sleep.py:238:1: W293 blank line contains whitespace
        
^
security/bots/integrate_all_bots_to_sleep.py:241:80: E501 line too long (87 > 79 characters)
            mock_bot = MockBot(f"Test{bot_info['class']}", bot_name, bot_info["phase"])
                                                                               ^
security/bots/integrate_all_bots_to_sleep.py:243:1: W293 blank line contains whitespace
            
^
security/bots/integrate_all_bots_to_sleep.py:244:80: E501 line too long (106 > 79 characters)
            phase_icon = "🟢" if bot_info["phase"] == "9.2" else "🔵" if bot_info["phase"] == "9.3" else "🟡"
                                                                               ^
security/bots/integrate_all_bots_to_sleep.py:246:1: W293 blank line contains whitespace
        
^
security/bots/integrate_all_bots_to_sleep.py:248:1: W293 blank line contains whitespace
    
^
security/bots/integrate_all_bots_to_sleep.py:255:1: W293 blank line contains whitespace
            
^
security/bots/integrate_all_bots_to_sleep.py:269:1: W293 blank line contains whitespace
            
^
security/bots/integrate_all_bots_to_sleep.py:274:1: W293 blank line contains whitespace
            
^
security/bots/integrate_all_bots_to_sleep.py:277:1: W293 blank line contains whitespace
            
^
security/bots/integrate_all_bots_to_sleep.py:279:80: E501 line too long (80 > 79 characters)
            logger.error(f"Ошибка перевода бота {bot_name} в спящий режим: {e}")
                                                                               ^
security/bots/integrate_all_bots_to_sleep.py:281:1: W293 blank line contains whitespace
    
^
security/bots/integrate_all_bots_to_sleep.py:286:1: W293 blank line contains whitespace
        
^
security/bots/integrate_all_bots_to_sleep.py:289:80: E501 line too long (80 > 79 characters)
        existing_bots = [name for name, exists in file_status.items() if exists]
                                                                               ^
security/bots/integrate_all_bots_to_sleep.py:290:1: W293 blank line contains whitespace
        
^
security/bots/integrate_all_bots_to_sleep.py:293:80: E501 line too long (85 > 79 characters)
        sleeping_bots = [name for name, sleeping in sleep_status.items() if sleeping]
                                                                               ^
security/bots/integrate_all_bots_to_sleep.py:294:80: E501 line too long (87 > 79 characters)
        active_bots = [name for name, sleeping in sleep_status.items() if not sleeping]
                                                                               ^
security/bots/integrate_all_bots_to_sleep.py:295:1: W293 blank line contains whitespace
        
^
security/bots/integrate_all_bots_to_sleep.py:296:15: F541 f-string is missing placeholders
        print(f"\n📊 СТАТИСТИКА:")
              ^
security/bots/integrate_all_bots_to_sleep.py:301:1: W293 blank line contains whitespace
        
^
security/bots/integrate_all_bots_to_sleep.py:305:1: W293 blank line contains whitespace
        
^
security/bots/integrate_all_bots_to_sleep.py:308:80: E501 line too long (85 > 79 characters)
            print(f"\n😴 Перевод {len(active_bots)} активных ботов в спящий режим...")
                                                                               ^
security/bots/integrate_all_bots_to_sleep.py:309:1: W293 blank line contains whitespace
            
^
security/bots/integrate_all_bots_to_sleep.py:313:80: E501 line too long (88 > 79 characters)
                    success = await self.put_bot_to_sleep(bot_name, mock_bots[bot_name])
                                                                               ^
security/bots/integrate_all_bots_to_sleep.py:315:1: W293 blank line contains whitespace
                    
^
security/bots/integrate_all_bots_to_sleep.py:317:80: E501 line too long (114 > 79 characters)
                    phase_icon = "🟢" if bot_info["phase"] == "9.2" else "🔵" if bot_info["phase"] == "9.3" else "🟡"
                                                                               ^
security/bots/integrate_all_bots_to_sleep.py:319:80: E501 line too long (108 > 79 characters)
                    print(f"  {status_icon} {phase_icon} {bot_info['function']}: {bot_info['description']}")
                                                                               ^
security/bots/integrate_all_bots_to_sleep.py:323:1: W293 blank line contains whitespace
        
^
security/bots/integrate_all_bots_to_sleep.py:325:80: E501 line too long (83 > 79 characters)
        successful_sleeps = sum(1 for success in sleep_results.values() if success)
                                                                               ^
security/bots/integrate_all_bots_to_sleep.py:327:1: W293 blank line contains whitespace
        
^
security/bots/integrate_all_bots_to_sleep.py:328:15: F541 f-string is missing placeholders
        print(f"\n📊 РЕЗУЛЬТАТЫ ИНТЕГРАЦИИ:")
              ^
security/bots/integrate_all_bots_to_sleep.py:329:80: E501 line too long (91 > 79 characters)
        print(f"  😴 Успешно переведено в спящий режим: {successful_sleeps}/{total_active}")
                                                                               ^
security/bots/integrate_all_bots_to_sleep.py:330:80: E501 line too long (102 > 79 characters)
        print(f"  📁 Всего файлов состояния: {len([f for f in Path('.').glob('sleep_state_*.json')])}")
                                                                               ^
security/bots/integrate_all_bots_to_sleep.py:331:1: W293 blank line contains whitespace
        
^
security/bots/integrate_all_bots_to_sleep.py:333:15: F541 f-string is missing placeholders
        print(f"\n🔍 ФИНАЛЬНАЯ ПРОВЕРКА:")
              ^
security/bots/integrate_all_bots_to_sleep.py:335:80: E501 line too long (87 > 79 characters)
        final_sleeping = sum(1 for sleeping in final_sleep_status.values() if sleeping)
                                                                               ^
security/bots/integrate_all_bots_to_sleep.py:337:1: W293 blank line contains whitespace
        
^
security/bots/integrate_all_bots_to_sleep.py:340:1: W293 blank line contains whitespace
        
^
security/bots/integrate_all_bots_to_sleep.py:343:1: W293 blank line contains whitespace
        
^
security/bots/integrate_all_bots_to_sleep.py:345:80: E501 line too long (82 > 79 characters)
            print("\n🎉 ВСЕ 15 БОТОВ УСПЕШНО ИНТЕГРИРОВАНЫ В SAFEFUNCTIONMANAGER!")
                                                                               ^
security/bots/integrate_all_bots_to_sleep.py:350:1: W293 blank line contains whitespace
    
^
security/bots/integrate_all_bots_to_sleep.py:353:15: F541 f-string is missing placeholders
        print(f"\n📋 ОТЧЕТ ПО ФАЗАМ:")
              ^
security/bots/integrate_all_bots_to_sleep.py:354:1: W293 blank line contains whitespace
        
^
security/bots/integrate_all_bots_to_sleep.py:360:1: W293 blank line contains whitespace
            
^
security/bots/integrate_all_bots_to_sleep.py:366:1: W293 blank line contains whitespace
        
^
security/bots/integrate_all_bots_to_sleep.py:369:80: E501 line too long (82 > 79 characters)
            phase_icon = "🟢" if phase == "9.2" else "🔵" if phase == "9.3" else "🟡"
                                                                               ^
security/bots/integrate_all_bots_to_sleep.py:370:80: E501 line too long (113 > 79 characters)
            print(f"  {phase_icon} {phase_name} ({phase}): {stats['sleeping']}/{stats['total']} в спящем режиме")
                                                                               ^
security/bots/integrate_all_bots_to_sleep.py:371:1: W293 blank line contains whitespace
    
^
security/bots/integrate_all_bots_to_sleep.py:375:1: W293 blank line contains whitespace
        
^
security/bots/integrate_all_bots_to_sleep.py:378:80: E501 line too long (81 > 79 characters)
        sleeping_bots = [f.stem.replace('sleep_state_', '') for f in sleep_files]
                                                                               ^
security/bots/integrate_all_bots_to_sleep.py:379:1: W293 blank line contains whitespace
        
^
security/bots/integrate_all_bots_to_sleep.py:388:1: W293 blank line contains whitespace
        
^
security/bots/integrate_all_bots_to_sleep.py:399:1: W293 blank line contains whitespace
        
^
security/bots/integrate_all_bots_to_sleep.py:401:80: E501 line too long (84 > 79 characters)
        with open("comprehensive_all_bots_report.json", "w", encoding="utf-8") as f:
                                                                               ^
security/bots/integrate_all_bots_to_sleep.py:403:1: W293 blank line contains whitespace
        
^
security/bots/integrate_all_bots_to_sleep.py:404:15: F541 f-string is missing placeholders
        print(f"✅ Комплексный отчет сохранен: comprehensive_all_bots_report.json")
              ^
security/bots/integrate_all_bots_to_sleep.py:404:80: E501 line too long (82 > 79 characters)
        print(f"✅ Комплексный отчет сохранен: comprehensive_all_bots_report.json")
                                                                               ^
security/bots/integrate_all_bots_to_sleep.py:411:1: W293 blank line contains whitespace
    
^
security/bots/integrate_all_bots_to_sleep.py:414:1: W293 blank line contains whitespace
    
^
security/bots/integrate_all_bots_to_sleep.py:416:5: F841 local variable 'report' is assigned to but never used
    report = sleep_manager.generate_comprehensive_report()
    ^
security/bots/integrate_all_bots_to_sleep.py:417:1: W293 blank line contains whitespace
    
^
security/bots/integrate_all_bots_to_sleep.py:429:20: W292 no newline at end of file
    exit(exit_code)                   ^
security/bots/integration_test_suite.py:36:1: F401 'datetime.timedelta' imported but unused
from datetime import datetime, timedelta
^
security/bots/integration_test_suite.py:37:1: F401 'typing.Optional' imported but unused
from typing import Dict, List, Any, Optional
^
security/bots/integration_test_suite.py:42:80: E501 line too long (93 > 79 characters)
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))
                                                                               ^
security/bots/integration_test_suite.py:45:1: E402 module level import not at top of file
from security.bots.emergency_response_bot import EmergencyResponseBot, EmergencyResponse, EmergencyType, EmergencySeverity
^
security/bots/integration_test_suite.py:45:80: E501 line too long (122 > 79 characters)
from security.bots.emergency_response_bot import EmergencyResponseBot, EmergencyResponse, EmergencyType, EmergencySeverity
                                                                               ^
security/bots/integration_test_suite.py:46:1: F401 'security.bots.parental_control_bot.ContentAnalysisResult' imported but unused
from security.bots.parental_control_bot import ParentalControlBot, ContentAnalysisResult, ContentCategory, ControlAction
^
security/bots/integration_test_suite.py:46:1: F401 'security.bots.parental_control_bot.ContentCategory' imported but unused
from security.bots.parental_control_bot import ParentalControlBot, ContentAnalysisResult, ContentCategory, ControlAction
^
security/bots/integration_test_suite.py:46:1: F401 'security.bots.parental_control_bot.ControlAction' imported but unused
from security.bots.parental_control_bot import ParentalControlBot, ContentAnalysisResult, ContentCategory, ControlAction
^
security/bots/integration_test_suite.py:46:1: E402 module level import not at top of file
from security.bots.parental_control_bot import ParentalControlBot, ContentAnalysisResult, ContentCategory, ControlAction
^
security/bots/integration_test_suite.py:46:80: E501 line too long (120 > 79 characters)
from security.bots.parental_control_bot import ParentalControlBot, ContentAnalysisResult, ContentCategory, ControlAction
                                                                               ^
security/bots/integration_test_suite.py:47:1: E402 module level import not at top of file
from security.bots.mobile_navigation_bot import MobileNavigationBot, NavigationRequest, NavigationAction, DeviceType
^
security/bots/integration_test_suite.py:47:80: E501 line too long (116 > 79 characters)
from security.bots.mobile_navigation_bot import MobileNavigationBot, NavigationRequest, NavigationAction, DeviceType
                                                                               ^
security/bots/integration_test_suite.py:48:1: F401 'security.bots.gaming_security_bot.CheatAnalysisResult' imported but unused
from security.bots.gaming_security_bot import GamingSecurityBot, PlayerAction, GameGenre, CheatAnalysisResult
^
security/bots/integration_test_suite.py:48:1: E402 module level import not at top of file
from security.bots.gaming_security_bot import GamingSecurityBot, PlayerAction, GameGenre, CheatAnalysisResult
^
security/bots/integration_test_suite.py:48:80: E501 line too long (109 > 79 characters)
from security.bots.gaming_security_bot import GamingSecurityBot, PlayerAction, GameGenre, CheatAnalysisResult
                                                                               ^
security/bots/integration_test_suite.py:49:1: E402 module level import not at top of file
from security.bots.notification_bot import NotificationBot, NotificationRequest, NotificationType, Priority, DeliveryChannel
^
security/bots/integration_test_suite.py:49:80: E501 line too long (124 > 79 characters)
from security.bots.notification_bot import NotificationBot, NotificationRequest, NotificationType, Priority, DeliveryChannel
                                                                               ^
security/bots/integration_test_suite.py:58:1: W293 blank line contains whitespace
    
^
security/bots/integration_test_suite.py:64:1: W293 blank line contains whitespace
        
^
security/bots/integration_test_suite.py:69:1: W293 blank line contains whitespace
        
^
security/bots/integration_test_suite.py:71:1: W293 blank line contains whitespace
        
^
security/bots/integration_test_suite.py:75:1: W293 blank line contains whitespace
            
^
security/bots/integration_test_suite.py:78:1: W293 blank line contains whitespace
            
^
security/bots/integration_test_suite.py:81:1: W293 blank line contains whitespace
            
^
security/bots/integration_test_suite.py:84:1: W293 blank line contains whitespace
            
^
security/bots/integration_test_suite.py:87:1: W293 blank line contains whitespace
            
^
security/bots/integration_test_suite.py:90:1: W293 blank line contains whitespace
            
^
security/bots/integration_test_suite.py:93:1: W293 blank line contains whitespace
            
^
security/bots/integration_test_suite.py:96:1: W293 blank line contains whitespace
            
^
security/bots/integration_test_suite.py:99:1: W293 blank line contains whitespace
            
^
security/bots/integration_test_suite.py:101:1: W293 blank line contains whitespace
            
^
security/bots/integration_test_suite.py:103:80: E501 line too long (105 > 79 characters)
            print(f"⏱️ Время выполнения: {(self.end_time - self.start_time).total_seconds():.2f} секунд")
                                                                               ^
security/bots/integration_test_suite.py:104:1: W293 blank line contains whitespace
            
^
security/bots/integration_test_suite.py:106:1: W293 blank line contains whitespace
            
^
security/bots/integration_test_suite.py:110:1: W293 blank line contains whitespace
    
^
security/bots/integration_test_suite.py:114:1: W293 blank line contains whitespace
        
^
security/bots/integration_test_suite.py:123:1: W293 blank line contains whitespace
        
^
security/bots/integration_test_suite.py:128:80: E501 line too long (80 > 79 characters)
            "navigation": MobileNavigationBot("TestNavigationBot", test_config),
                                                                               ^
security/bots/integration_test_suite.py:132:1: W293 blank line contains whitespace
        
^
security/bots/integration_test_suite.py:143:1: W293 blank line contains whitespace
    
^
security/bots/integration_test_suite.py:147:1: W293 blank line contains whitespace
        
^
security/bots/integration_test_suite.py:150:1: W293 blank line contains whitespace
        
^
security/bots/integration_test_suite.py:153:1: W293 blank line contains whitespace
        
^
security/bots/integration_test_suite.py:156:1: W293 blank line contains whitespace
        
^
security/bots/integration_test_suite.py:159:1: W293 blank line contains whitespace
        
^
security/bots/integration_test_suite.py:162:1: W293 blank line contains whitespace
    
^
security/bots/integration_test_suite.py:166:1: W293 blank line contains whitespace
        
^
security/bots/integration_test_suite.py:169:1: W293 blank line contains whitespace
            
^
security/bots/integration_test_suite.py:175:80: E501 line too long (102 > 79 characters)
                location={"address": "Test Address", "coordinates": {"lat": 55.7558, "lon": 37.6176}},
                                                                               ^
security/bots/integration_test_suite.py:180:1: W293 blank line contains whitespace
            
^
security/bots/integration_test_suite.py:183:1: W293 blank line contains whitespace
            
^
security/bots/integration_test_suite.py:186:1: W293 blank line contains whitespace
            
^
security/bots/integration_test_suite.py:188:80: E501 line too long (81 > 79 characters)
            resolved = await bot.resolve_incident(incident_id, "Test resolution")
                                                                               ^
security/bots/integration_test_suite.py:189:1: W293 blank line contains whitespace
            
^
security/bots/integration_test_suite.py:197:1: W293 blank line contains whitespace
            
^
security/bots/integration_test_suite.py:199:1: W293 blank line contains whitespace
            
^
security/bots/integration_test_suite.py:207:1: W293 blank line contains whitespace
    
^
security/bots/integration_test_suite.py:211:1: W293 blank line contains whitespace
        
^
security/bots/integration_test_suite.py:214:1: W293 blank line contains whitespace
            
^
security/bots/integration_test_suite.py:223:1: W293 blank line contains whitespace
            
^
security/bots/integration_test_suite.py:225:1: W293 blank line contains whitespace
            
^
security/bots/integration_test_suite.py:227:80: E501 line too long (92 > 79 characters)
            result = await bot.analyze_content("https://youtube.com/watch?v=test", child_id)
                                                                               ^
security/bots/integration_test_suite.py:228:1: W293 blank line contains whitespace
            
^
security/bots/integration_test_suite.py:231:1: W293 blank line contains whitespace
            
^
security/bots/integration_test_suite.py:239:1: W293 blank line contains whitespace
            
^
security/bots/integration_test_suite.py:241:1: W293 blank line contains whitespace
            
^
security/bots/integration_test_suite.py:249:1: W293 blank line contains whitespace
    
^
security/bots/integration_test_suite.py:253:1: W293 blank line contains whitespace
        
^
security/bots/integration_test_suite.py:256:1: W293 blank line contains whitespace
            
^
security/bots/integration_test_suite.py:263:1: W293 blank line contains whitespace
            
^
security/bots/integration_test_suite.py:273:1: W293 blank line contains whitespace
            
^
security/bots/integration_test_suite.py:275:1: W293 blank line contains whitespace
            
^
security/bots/integration_test_suite.py:278:1: W293 blank line contains whitespace
            
^
security/bots/integration_test_suite.py:281:1: W293 blank line contains whitespace
            
^
security/bots/integration_test_suite.py:290:1: W293 blank line contains whitespace
            
^
security/bots/integration_test_suite.py:292:1: W293 blank line contains whitespace
            
^
security/bots/integration_test_suite.py:300:1: W293 blank line contains whitespace
    
^
security/bots/integration_test_suite.py:304:1: W293 blank line contains whitespace
        
^
security/bots/integration_test_suite.py:307:1: W293 blank line contains whitespace
            
^
security/bots/integration_test_suite.py:314:1: W293 blank line contains whitespace
            
^
security/bots/integration_test_suite.py:323:1: W293 blank line contains whitespace
            
^
security/bots/integration_test_suite.py:335:1: W293 blank line contains whitespace
            
^
security/bots/integration_test_suite.py:337:80: E501 line too long (106 > 79 characters)
            ended = await bot.end_game_session(session_id, final_score=1000, kills=5, deaths=2, assists=3)
                                                                               ^
security/bots/integration_test_suite.py:338:1: W293 blank line contains whitespace
            
^
security/bots/integration_test_suite.py:347:1: W293 blank line contains whitespace
            
^
security/bots/integration_test_suite.py:349:1: W293 blank line contains whitespace
            
^
security/bots/integration_test_suite.py:357:1: W293 blank line contains whitespace
    
^
security/bots/integration_test_suite.py:361:1: W293 blank line contains whitespace
        
^
security/bots/integration_test_suite.py:364:1: W293 blank line contains whitespace
            
^
security/bots/integration_test_suite.py:374:1: W293 blank line contains whitespace
            
^
security/bots/integration_test_suite.py:376:1: W293 blank line contains whitespace
            
^
security/bots/integration_test_suite.py:380:80: E501 line too long (84 > 79 characters)
                status = await bot.get_notification_status(response.notification_id)
                                                                               ^
security/bots/integration_test_suite.py:381:1: W293 blank line contains whitespace
            
^
security/bots/integration_test_suite.py:384:1: W293 blank line contains whitespace
            
^
security/bots/integration_test_suite.py:392:1: W293 blank line contains whitespace
            
^
security/bots/integration_test_suite.py:394:1: W293 blank line contains whitespace
            
^
security/bots/integration_test_suite.py:402:1: W293 blank line contains whitespace
    
^
security/bots/integration_test_suite.py:406:1: W293 blank line contains whitespace
        
^
security/bots/integration_test_suite.py:411:1: W293 blank line contains whitespace
            
^
security/bots/integration_test_suite.py:422:1: W293 blank line contains whitespace
            
^
security/bots/integration_test_suite.py:424:1: W293 blank line contains whitespace
            
^
security/bots/integration_test_suite.py:434:1: W293 blank line contains whitespace
            
^
security/bots/integration_test_suite.py:435:80: E501 line too long (98 > 79 characters)
            notification_response = await notification_bot.send_notification(notification_request)
                                                                               ^
security/bots/integration_test_suite.py:436:1: W293 blank line contains whitespace
            
^
security/bots/integration_test_suite.py:442:1: W293 blank line contains whitespace
            
^
security/bots/integration_test_suite.py:444:1: W293 blank line contains whitespace
            
^
security/bots/integration_test_suite.py:452:1: W293 blank line contains whitespace
    
^
security/bots/integration_test_suite.py:456:1: W293 blank line contains whitespace
        
^
security/bots/integration_test_suite.py:460:1: W293 blank line contains whitespace
            
^
security/bots/integration_test_suite.py:464:80: E501 line too long (80 > 79 characters)
                "message": "Интеграция с SafeFunctionManager работает корректно"
                                                                               ^
security/bots/integration_test_suite.py:466:1: W293 blank line contains whitespace
            
^
security/bots/integration_test_suite.py:467:80: E501 line too long (82 > 79 characters)
            print("    ✅ Интеграция с SafeFunctionManager протестирована успешно")
                                                                               ^
security/bots/integration_test_suite.py:468:1: W293 blank line contains whitespace
            
^
security/bots/integration_test_suite.py:476:1: W293 blank line contains whitespace
    
^
security/bots/integration_test_suite.py:480:1: W293 blank line contains whitespace
        
^
security/bots/integration_test_suite.py:483:1: W293 blank line contains whitespace
            
^
security/bots/integration_test_suite.py:498:1: W293 blank line contains whitespace
            
^
security/bots/integration_test_suite.py:500:80: E501 line too long (87 > 79 characters)
                "success": all(result["success"] for result in sleep_results.values()),
                                                                               ^
security/bots/integration_test_suite.py:504:1: W293 blank line contains whitespace
            
^
security/bots/integration_test_suite.py:506:1: W293 blank line contains whitespace
            
^
security/bots/integration_test_suite.py:514:1: W293 blank line contains whitespace
    
^
security/bots/integration_test_suite.py:518:1: W293 blank line contains whitespace
        
^
security/bots/integration_test_suite.py:521:1: W293 blank line contains whitespace
            
^
security/bots/integration_test_suite.py:536:1: W293 blank line contains whitespace
            
^
security/bots/integration_test_suite.py:538:80: E501 line too long (89 > 79 characters)
                "success": all(result["success"] for result in wake_up_results.values()),
                                                                               ^
security/bots/integration_test_suite.py:542:1: W293 blank line contains whitespace
            
^
security/bots/integration_test_suite.py:544:1: W293 blank line contains whitespace
            
^
security/bots/integration_test_suite.py:552:1: W293 blank line contains whitespace
    
^
security/bots/integration_test_suite.py:556:1: W293 blank line contains whitespace
        
^
security/bots/integration_test_suite.py:559:1: W293 blank line contains whitespace
            
^
security/bots/integration_test_suite.py:562:1: W293 blank line contains whitespace
                
^
security/bots/integration_test_suite.py:576:1: W293 blank line contains whitespace
                
^
security/bots/integration_test_suite.py:579:21: F841 local variable 'result' is assigned to but never used
                    result = await bot.analyze_content("https://test.com", "test_child")
                    ^
security/bots/integration_test_suite.py:579:80: E501 line too long (88 > 79 characters)
                    result = await bot.analyze_content("https://test.com", "test_child")
                                                                               ^
security/bots/integration_test_suite.py:580:1: W293 blank line contains whitespace
                
^
security/bots/integration_test_suite.py:583:80: E501 line too long (113 > 79 characters)
                    session_id = await bot.start_navigation_session("perf_user", "perf_device", DeviceType.PHONE)
                                                                               ^
security/bots/integration_test_suite.py:585:1: W293 blank line contains whitespace
                
^
security/bots/integration_test_suite.py:588:80: E501 line too long (104 > 79 characters)
                    session_id = await bot.start_game_session("perf_player", "perf_game", GameGenre.FPS)
                                                                               ^
security/bots/integration_test_suite.py:590:1: W293 blank line contains whitespace
                
^
security/bots/integration_test_suite.py:601:1: W293 blank line contains whitespace
                
^
security/bots/integration_test_suite.py:604:1: W293 blank line contains whitespace
                
^
security/bots/integration_test_suite.py:609:1: W293 blank line contains whitespace
            
^
security/bots/integration_test_suite.py:615:1: W293 blank line contains whitespace
            
^
security/bots/integration_test_suite.py:617:1: W293 blank line contains whitespace
            
^
security/bots/integration_test_suite.py:625:1: W293 blank line contains whitespace
    
^
security/bots/integration_test_suite.py:629:1: W293 blank line contains whitespace
        
^
security/bots/integration_test_suite.py:632:1: W293 blank line contains whitespace
            
^
security/bots/integration_test_suite.py:637:1: W293 blank line contains whitespace
                    
^
security/bots/integration_test_suite.py:645:1: W293 blank line contains whitespace
                    
^
security/bots/integration_test_suite.py:650:1: W293 blank line contains whitespace
                    
^
security/bots/integration_test_suite.py:656:1: W293 blank line contains whitespace
            
^
security/bots/integration_test_suite.py:658:80: E501 line too long (90 > 79 characters)
                "success": all(result["success"] for result in security_results.values()),
                                                                               ^
security/bots/integration_test_suite.py:662:1: W293 blank line contains whitespace
            
^
security/bots/integration_test_suite.py:664:1: W293 blank line contains whitespace
            
^
security/bots/integration_test_suite.py:672:1: W293 blank line contains whitespace
    
^
security/bots/integration_test_suite.py:676:1: W293 blank line contains whitespace
        
^
security/bots/integration_test_suite.py:679:80: E501 line too long (106 > 79 characters)
        successful_tests = sum(1 for result in self.test_results.values() if result.get("success", False))
                                                                               ^
security/bots/integration_test_suite.py:681:1: W293 blank line contains whitespace
        
^
security/bots/integration_test_suite.py:683:80: E501 line too long (112 > 79 characters)
        duration = (self.end_time - self.start_time).total_seconds() if self.end_time and self.start_time else 0
                                                                               ^
security/bots/integration_test_suite.py:684:1: W293 blank line contains whitespace
        
^
security/bots/integration_test_suite.py:690:80: E501 line too long (97 > 79 characters)
                "success_rate": (successful_tests / total_tests * 100) if total_tests > 0 else 0,
                                                                               ^
security/bots/integration_test_suite.py:697:1: W293 blank line contains whitespace
        
^
security/bots/integration_test_suite.py:699:80: E501 line too long (99 > 79 characters)
        report_file = f"integration_test_report_{datetime.utcnow().strftime('%Y%m%d_%H%M%S')}.json"
                                                                               ^
security/bots/integration_test_suite.py:702:1: W293 blank line contains whitespace
        
^
security/bots/integration_test_suite.py:704:1: W293 blank line contains whitespace
        
^
security/bots/integration_test_suite.py:706:1: W293 blank line contains whitespace
    
^
security/bots/integration_test_suite.py:710:1: W293 blank line contains whitespace
        
^
security/bots/integration_test_suite.py:713:80: E501 line too long (118 > 79 characters)
                recommendations.append(f"Исправить ошибки в {test_name}: {result.get('error', 'Неизвестная ошибка')}")
                                                                               ^
security/bots/integration_test_suite.py:714:1: W293 blank line contains whitespace
        
^
security/bots/integration_test_suite.py:716:80: E501 line too long (92 > 79 characters)
            recommendations.append("Все тесты прошли успешно! Система готова к продакшену.")
                                                                               ^
security/bots/integration_test_suite.py:717:1: W293 blank line contains whitespace
        
^
security/bots/integration_test_suite.py:719:1: W293 blank line contains whitespace
    
^
security/bots/integration_test_suite.py:723:1: W293 blank line contains whitespace
        
^
security/bots/integration_test_suite.py:736:1: W293 blank line contains whitespace
    
^
security/bots/integration_test_suite.py:739:1: W293 blank line contains whitespace
        
^
security/bots/integration_test_suite.py:747:80: E501 line too long (86 > 79 characters)
        print(f"⏱️ Время выполнения: {report['summary']['duration_seconds']:.2f} сек")
                                                                               ^
security/bots/integration_test_suite.py:748:1: W293 blank line contains whitespace
        
^
security/bots/integration_test_suite.py:753:1: W293 blank line contains whitespace
        
^
security/bots/integration_test_suite.py:755:1: W293 blank line contains whitespace
        
^
security/bots/integration_test_suite.py:762:41: W292 no newline at end of file
    asyncio.run(run_integration_tests())                                        ^
security/bots/max_messenger_security_bot.py:7:80: E501 line too long (82 > 79 characters)
"""
MaxMessengerSecurityBot - Бот безопасности российского мессенджера MAX
function_94: Интеллектуальный бот для безопасности мессенджера MAX

Этот модуль предоставляет интеллектуального бота для безопасности мессенджера MAX,
включающего:
- Мониторинг сообщений и чатов на подозрительный контент
- Детекция спама и ботов
- Защита от вредоносных ссылок и файлов
- Контроль конфиденциальности и шифрования
- Анализ участников групп
- Блокировка нежелательных пользователей
- Шифрование сообщений end-to-end
- Резервное копирование чатов
- Антивирусная проверка файлов
- Модерация контента

Основные возможности:
1. Умная модерация чатов и групп
2. Детекция спама и ботов
3. Защита от вредоносных ссылок
4. Контроль конфиденциальности
5. Анализ и блокировка пользователей
6. Шифрование сообщений
7. Резервное копирование
8. Антивирусная проверка
9. Автоматическая модерация
10. Интеграция с системой безопасности

Технические детали:
- Использует ML для анализа сообщений
- Применяет NLP для понимания контекста
- Интегрирует с MAX Messenger API
- Использует криптографию для шифрования
- Применяет антивирусные движки
- Интегрирует с базами данных угроз
- Использует геолокацию для анализа
- Применяет поведенческий анализ
- Интегрирует с системами уведомлений
- Использует машинное обучение для адаптации

Автор: ALADDIN Security System
Версия: 2.0
Дата: 2025-01-27
Лицензия: MIT
"""
   
                                                                      
    ^
security/bots/max_messenger_security_bot.py:55:1: F401 'dataclasses.dataclass' imported but unused
from dataclasses import dataclass, field
^
security/bots/max_messenger_security_bot.py:55:1: F401 'dataclasses.field' imported but unused
from dataclasses import dataclass, field
^
security/bots/max_messenger_security_bot.py:58:1: F401 'typing.Tuple' imported but unused
from typing import Any, Dict, List, Optional, Tuple
^
security/bots/max_messenger_security_bot.py:66:1: F401 'collections.defaultdict' imported but unused
from collections import defaultdict
^
security/bots/max_messenger_security_bot.py:68:1: F401 'numpy as np' imported but unused
import numpy as np
^
security/bots/max_messenger_security_bot.py:72:1: F401 'prometheus_client.Histogram' imported but unused
from prometheus_client import Counter, Gauge, Histogram
^
security/bots/max_messenger_security_bot.py:73:1: F401 'pydantic.validator' imported but unused
from pydantic import BaseModel, Field, validator
^
security/bots/max_messenger_security_bot.py:82:80: E501 line too long (80 > 79 characters)
    os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
                                                                               ^
security/bots/max_messenger_security_bot.py:388:80: E501 line too long (81 > 79 characters)
                    self.logger.warning("MaxMessengerSecurityBot уже остановлен")
                                                                               ^
security/bots/max_messenger_security_bot.py:394:80: E501 line too long (80 > 79 characters)
                if self.monitoring_thread and self.monitoring_thread.is_alive():
                                                                               ^
security/bots/max_messenger_security_bot.py:432:80: E501 line too long (80 > 79 characters)
            redis_url = self.config.get("redis_url", "redis://localhost:6379/0")
                                                                               ^
security/bots/max_messenger_security_bot.py:433:80: E501 line too long (80 > 79 characters)
            self.redis_client = redis.from_url(redis_url, decode_responses=True)
                                                                               ^
security/bots/max_messenger_security_bot.py:462:80: E501 line too long (85 > 79 characters)
                    self.db_session.query(MaxChat).filter(MaxChat.is_monitored).all()
                                                                               ^
security/bots/max_messenger_security_bot.py:471:80: E501 line too long (81 > 79 characters)
                    f"Загружено {len(self.monitored_chats)} мониторируемых чатов"
                                                                               ^
security/bots/max_messenger_security_bot.py:548:80: E501 line too long (88 > 79 characters)
                    threat_level, analysis_result["threat_level"], key=lambda x: x.value
                                                                               ^
security/bots/max_messenger_security_bot.py:565:80: E501 line too long (81 > 79 characters)
                analysis_result = await self._analyze_media_content(message_data)
                                                                               ^
security/bots/max_messenger_security_bot.py:567:80: E501 line too long (88 > 79 characters)
                    threat_level, analysis_result["threat_level"], key=lambda x: x.value
                                                                               ^
security/bots/max_messenger_security_bot.py:575:80: E501 line too long (88 > 79 characters)
            if content and ("http" in content or "max://" in content or "@" in content):
                                                                               ^
security/bots/max_messenger_security_bot.py:582:80: E501 line too long (80 > 79 characters)
                    detected_patterns.extend(link_analysis["detected_patterns"])
                                                                               ^
security/bots/max_messenger_security_bot.py:690:80: E501 line too long (80 > 79 characters)
                1 for indicator in spam_indicators if indicator in content_lower
                                                                               ^
security/bots/max_messenger_security_bot.py:716:80: E501 line too long (83 > 79 characters)
                1 for keyword in inappropriate_keywords if keyword in content_lower
                                                                               ^
security/bots/max_messenger_security_bot.py:742:80: E501 line too long (84 > 79 characters)
                1 for indicator in phishing_indicators if indicator in content_lower
                                                                               ^
security/bots/max_messenger_security_bot.py:759:80: E501 line too long (84 > 79 characters)
            suspicious_chars = ["$", "€", "₽", "bitcoin", "btc", "crypto", "крипто"]
                                                                               ^
security/bots/max_messenger_security_bot.py:811:80: E501 line too long (88 > 79 characters)
                suspicious_extensions = [".exe", ".bat", ".cmd", ".scr", ".pif", ".com"]
                                                                               ^
security/bots/max_messenger_security_bot.py:813:80: E501 line too long (84 > 79 characters)
                    file_name.lower().endswith(ext) for ext in suspicious_extensions
                                                                               ^
security/bots/max_messenger_security_bot.py:845:80: E501 line too long (109 > 79 characters)
            url_pattern = r"http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+"
                                                                               ^
security/bots/max_messenger_security_bot.py:895:80: E501 line too long (82 > 79 characters)
                if any(keyword in url.lower() for keyword in suspicious_keywords):
                                                                               ^
security/bots/max_messenger_security_bot.py:908:80: E501 line too long (87 > 79 characters)
            return {"is_malicious": False, "detected_patterns": [], "risk_factors": []}
                                                                               ^
security/bots/max_messenger_security_bot.py:985:80: E501 line too long (87 > 79 characters)
        random_part = hashlib.md5(f"{timestamp}{time.time()}".encode()).hexdigest()[:8]
                                                                               ^
security/bots/max_messenger_security_bot.py:1013:80: E501 line too long (82 > 79 characters)
                self.logger.info(f"Пользователь {user_id} заблокирован: {reason}")
                                                                               ^
security/bots/max_messenger_security_bot.py:1023:80: E501 line too long (87 > 79 characters)
        random_part = hashlib.md5(f"{timestamp}{time.time()}".encode()).hexdigest()[:8]
                                                                               ^
security/bots/max_messenger_security_bot.py:1027:80: E501 line too long (82 > 79 characters)
        self, chat_id: str, chat_type: str, title: str = "", description: str = ""
                                                                               ^
security/bots/max_messenger_security_bot.py:1063:80: E501 line too long (87 > 79 characters)
        random_part = hashlib.md5(f"{timestamp}{time.time()}".encode()).hexdigest()[:8]
                                                                               ^
security/bots/max_messenger_security_bot.py:1098:80: E501 line too long (85 > 79 characters)
                        .filter(MaxMessage.chat_id == chat_id, MaxMessage.is_deleted)
                                                                               ^
security/bots/max_messenger_security_bot.py:1155:80: E501 line too long (112 > 79 characters)
            "text": "Срочно! Заработайте 100000 рублей за день! Переходите по ссылке: http://fake-earnings.com",
                                                                               ^
security/bots/max_messenger_security_bot.py:1158:80: E501 line too long (82 > 79 characters)
            "from": {"id": "123456789", "username": "test_user", "is_bot": False},
                                                                               ^
security/bots/max_messenger_security_bot.py:1163:80: E501 line too long (98 > 79 characters)
            f"✅ Анализ сообщения: {result.threat_level.value} - {result.recommended_action.value}"
                                                                               ^
security/bots/max_messenger_security_bot.py:1173:80: E501 line too long (85 > 79 characters)
            f"✅ Отчет по безопасности: {report['threats_detected']} угроз обнаружено"
                                                                               ^
security/bots/messenger_bots_integration_test.py:13:1: F401 'typing.Dict' imported but unused
from typing import Dict, List, Any
^
security/bots/messenger_bots_integration_test.py:13:1: F401 'typing.List' imported but unused
from typing import Dict, List, Any
^
security/bots/messenger_bots_integration_test.py:13:1: F401 'typing.Any' imported but unused
from typing import Dict, List, Any
^
security/bots/messenger_bots_integration_test.py:30:1: W293 blank line contains whitespace
    
^
security/bots/messenger_bots_integration_test.py:36:1: W293 blank line contains whitespace
        
^
security/bots/messenger_bots_integration_test.py:40:1: W293 blank line contains whitespace
        
^
security/bots/messenger_bots_integration_test.py:50:1: W293 blank line contains whitespace
        
^
security/bots/messenger_bots_integration_test.py:52:1: W293 blank line contains whitespace
        
^
security/bots/messenger_bots_integration_test.py:56:1: W293 blank line contains whitespace
        
^
security/bots/messenger_bots_integration_test.py:68:1: W293 blank line contains whitespace
        
^
security/bots/messenger_bots_integration_test.py:71:1: W293 blank line contains whitespace
    
^
security/bots/messenger_bots_integration_test.py:75:1: W293 blank line contains whitespace
        
^
security/bots/messenger_bots_integration_test.py:82:1: W293 blank line contains whitespace
                
^
security/bots/messenger_bots_integration_test.py:96:1: W293 blank line contains whitespace
                    
^
security/bots/messenger_bots_integration_test.py:98:1: W293 blank line contains whitespace
                
^
security/bots/messenger_bots_integration_test.py:102:1: W293 blank line contains whitespace
    
^
security/bots/messenger_bots_integration_test.py:112:1: W293 blank line contains whitespace
        
^
security/bots/messenger_bots_integration_test.py:115:1: W293 blank line contains whitespace
        
^
security/bots/messenger_bots_integration_test.py:119:1: W293 blank line contains whitespace
    
^
security/bots/messenger_bots_integration_test.py:130:1: W293 blank line contains whitespace
        
^
security/bots/messenger_bots_integration_test.py:133:1: W293 blank line contains whitespace
        
^
security/bots/messenger_bots_integration_test.py:141:1: W293 blank line contains whitespace
    
^
security/bots/messenger_bots_integration_test.py:162:1: W293 blank line contains whitespace
        
^
security/bots/messenger_bots_integration_test.py:165:1: W293 blank line contains whitespace
        
^
security/bots/messenger_bots_integration_test.py:167:80: E501 line too long (81 > 79 characters)
        account_added = await bot.add_account_to_monitoring(content_data["user"])
                                                                               ^
security/bots/messenger_bots_integration_test.py:169:1: W293 blank line contains whitespace
    
^
security/bots/messenger_bots_integration_test.py:178:80: E501 line too long (81 > 79 characters)
            "from": {"id": "123456789", "username": "test_user", "is_bot": False}
                                                                               ^
security/bots/messenger_bots_integration_test.py:180:1: W293 blank line contains whitespace
        
^
security/bots/messenger_bots_integration_test.py:183:1: W293 blank line contains whitespace
        
^
security/bots/messenger_bots_integration_test.py:187:1: W293 blank line contains whitespace
        
^
security/bots/messenger_bots_integration_test.py:191:1: W293 blank line contains whitespace
    
^
security/bots/messenger_bots_integration_test.py:195:80: E501 line too long (98 > 79 characters)
        await bot.collect_metric("test_metric", 0.75, bot.MetricType.GAUGE, {"component": "test"})
                                                                               ^
security/bots/messenger_bots_integration_test.py:197:1: W293 blank line contains whitespace
        
^
security/bots/messenger_bots_integration_test.py:199:80: E501 line too long (119 > 79 characters)
        anomaly_result = await bot.detect_anomaly("test_metric", [0.5, 0.6, 0.7, 0.8, 0.9, 0.95, 0.98, 0.99, 1.0, 1.1])
                                                                               ^
security/bots/messenger_bots_integration_test.py:201:1: W293 blank line contains whitespace
        
^
security/bots/messenger_bots_integration_test.py:210:1: W293 blank line contains whitespace
    
^
security/bots/messenger_bots_integration_test.py:216:1: W293 blank line contains whitespace
        
^
security/bots/messenger_bots_integration_test.py:218:80: E501 line too long (87 > 79 characters)
        blocked = await bot.block_domain("malware.com", "malware", "Test malware site")
                                                                               ^
security/bots/messenger_bots_integration_test.py:220:1: W293 blank line contains whitespace
        
^
security/bots/messenger_bots_integration_test.py:224:1: W293 blank line contains whitespace
        
^
security/bots/messenger_bots_integration_test.py:228:1: W293 blank line contains whitespace
    
^
security/bots/messenger_bots_integration_test.py:232:1: W293 blank line contains whitespace
        
^
security/bots/messenger_bots_integration_test.py:244:1: W293 blank line contains whitespace
            
^
security/bots/messenger_bots_integration_test.py:248:80: E501 line too long (82 > 79 characters)
            print(f"✅ Общая статистика: {active_bots}/{total_bots} ботов активны")
                                                                               ^
security/bots/messenger_bots_integration_test.py:249:1: W293 blank line contains whitespace
            
^
security/bots/messenger_bots_integration_test.py:250:80: E501 line too long (95 > 79 characters)
            self.test_results["inter_bot_communication"] = {"status": "success", "error": None}
                                                                               ^
security/bots/messenger_bots_integration_test.py:251:1: W293 blank line contains whitespace
            
^
security/bots/messenger_bots_integration_test.py:254:80: E501 line too long (95 > 79 characters)
            self.test_results["inter_bot_communication"] = {"status": "error", "error": str(e)}
                                                                               ^
security/bots/messenger_bots_integration_test.py:255:1: W293 blank line contains whitespace
    
^
security/bots/messenger_bots_integration_test.py:259:1: W293 blank line contains whitespace
        
^
security/bots/messenger_bots_integration_test.py:262:1: W293 blank line contains whitespace
            
^
security/bots/messenger_bots_integration_test.py:268:1: W293 blank line contains whitespace
            
^
security/bots/messenger_bots_integration_test.py:270:1: W293 blank line contains whitespace
            
^
security/bots/messenger_bots_integration_test.py:273:1: W293 blank line contains whitespace
            
^
security/bots/messenger_bots_integration_test.py:275:80: E501 line too long (117 > 79 characters)
            print(f"✅ Успешных операций: {len([r for r in results if not isinstance(r, Exception)])}/{len(results)}")
                                                                               ^
security/bots/messenger_bots_integration_test.py:276:1: W293 blank line contains whitespace
            
^
security/bots/messenger_bots_integration_test.py:280:80: E501 line too long (99 > 79 characters)
                "successful_operations": len([r for r in results if not isinstance(r, Exception)]),
                                                                               ^
security/bots/messenger_bots_integration_test.py:283:1: W293 blank line contains whitespace
            
^
security/bots/messenger_bots_integration_test.py:286:80: E501 line too long (83 > 79 characters)
            self.test_results["performance"] = {"status": "error", "error": str(e)}
                                                                               ^
security/bots/messenger_bots_integration_test.py:287:1: W293 blank line contains whitespace
    
^
security/bots/messenger_bots_integration_test.py:291:1: W293 blank line contains whitespace
        
^
security/bots/messenger_bots_integration_test.py:303:1: W293 blank line contains whitespace
        
^
security/bots/messenger_bots_integration_test.py:306:1: W293 blank line contains whitespace
    
^
security/bots/messenger_bots_integration_test.py:310:1: W293 blank line contains whitespace
        
^
security/bots/messenger_bots_integration_test.py:312:80: E501 line too long (99 > 79 characters)
        successful_tests = len([r for r in self.test_results.values() if r["status"] == "success"])
                                                                               ^
security/bots/messenger_bots_integration_test.py:314:1: W293 blank line contains whitespace
        
^
security/bots/messenger_bots_integration_test.py:315:80: E501 line too long (87 > 79 characters)
        success_rate = (successful_tests / total_tests * 100) if total_tests > 0 else 0
                                                                               ^
security/bots/messenger_bots_integration_test.py:316:1: W293 blank line contains whitespace
        
^
security/bots/messenger_bots_integration_test.py:323:80: E501 line too long (87 > 79 characters)
                "start_time": self.start_time.isoformat() if self.start_time else None,
                                                                               ^
security/bots/messenger_bots_integration_test.py:324:80: E501 line too long (81 > 79 characters)
                "end_time": self.end_time.isoformat() if self.end_time else None,
                                                                               ^
security/bots/messenger_bots_integration_test.py:325:80: E501 line too long (124 > 79 characters)
                "duration": (self.end_time - self.start_time).total_seconds() if self.start_time and self.end_time else None
                                                                               ^
security/bots/messenger_bots_integration_test.py:330:1: W293 blank line contains whitespace
        
^
security/bots/messenger_bots_integration_test.py:332:80: E501 line too long (81 > 79 characters)
        with open("messenger_bots_test_report.json", "w", encoding="utf-8") as f:
                                                                               ^
security/bots/messenger_bots_integration_test.py:334:1: W293 blank line contains whitespace
        
^
security/bots/messenger_bots_integration_test.py:335:15: F541 f-string is missing placeholders
        print(f"✅ Отчет сохранен: messenger_bots_test_report.json")
              ^
security/bots/messenger_bots_integration_test.py:337:1: W293 blank line contains whitespace
        
^
security/bots/messenger_bots_integration_test.py:339:1: W293 blank line contains whitespace
    
^
security/bots/messenger_bots_integration_test.py:343:1: W293 blank line contains whitespace
        
^
security/bots/messenger_bots_integration_test.py:344:80: E501 line too long (106 > 79 characters)
        failed_tests = [name for name, result in self.test_results.items() if result["status"] == "error"]
                                                                               ^
security/bots/messenger_bots_integration_test.py:345:1: W293 blank line contains whitespace
        
^
security/bots/messenger_bots_integration_test.py:347:80: E501 line too long (90 > 79 characters)
            recommendations.append(f"Исправить ошибки в ботах: {', '.join(failed_tests)}")
                                                                               ^
security/bots/messenger_bots_integration_test.py:348:1: W293 blank line contains whitespace
        
^
security/bots/messenger_bots_integration_test.py:349:80: E501 line too long (106 > 79 characters)
        if "performance" in self.test_results and self.test_results["performance"]["status"] == "success":
                                                                               ^
security/bots/messenger_bots_integration_test.py:352:80: E501 line too long (113 > 79 characters)
                recommendations.append("Оптимизировать производительность - время выполнения превышает 5 секунд")
                                                                               ^
security/bots/messenger_bots_integration_test.py:353:1: W293 blank line contains whitespace
        
^
security/bots/messenger_bots_integration_test.py:355:80: E501 line too long (92 > 79 characters)
            recommendations.append("Все тесты прошли успешно - система готова к продакшену")
                                                                               ^
security/bots/messenger_bots_integration_test.py:356:1: W293 blank line contains whitespace
        
^
security/bots/messenger_bots_integration_test.py:358:1: W293 blank line contains whitespace
    
^
security/bots/messenger_bots_integration_test.py:363:1: W293 blank line contains whitespace
        
^
security/bots/messenger_bots_integration_test.py:365:1: W293 blank line contains whitespace
        
^
security/bots/messenger_bots_integration_test.py:369:1: W293 blank line contains whitespace
            
^
security/bots/messenger_bots_integration_test.py:375:1: W293 blank line contains whitespace
            
^
security/bots/messenger_bots_integration_test.py:378:1: W293 blank line contains whitespace
            
^
security/bots/messenger_bots_integration_test.py:381:1: W293 blank line contains whitespace
            
^
security/bots/messenger_bots_integration_test.py:384:1: W293 blank line contains whitespace
            
^
security/bots/messenger_bots_integration_test.py:387:1: W293 blank line contains whitespace
            
^
security/bots/messenger_bots_integration_test.py:389:1: W293 blank line contains whitespace
            
^
security/bots/messenger_bots_integration_test.py:392:1: W293 blank line contains whitespace
            
^
security/bots/messenger_bots_integration_test.py:395:80: E501 line too long (81 > 79 characters)
            print(f"📊 Успешность: {report['test_summary']['success_rate']:.1f}%")
                                                                               ^
security/bots/messenger_bots_integration_test.py:396:80: E501 line too long (90 > 79 characters)
            print(f"⏱️ Время выполнения: {report['test_summary']['duration']:.2f} секунд")
                                                                               ^
security/bots/messenger_bots_integration_test.py:398:1: W293 blank line contains whitespace
            
^
security/bots/messenger_bots_integration_test.py:400:1: W293 blank line contains whitespace
            
^
security/bots/messenger_bots_integration_test.py:410:1: W293 blank line contains whitespace
    
^
security/bots/messenger_bots_integration_test.py:421:20: W292 no newline at end of file
    exit(exit_code)                   ^
security/bots/mobile_navigation_bot.py:7:80: E501 line too long (88 > 79 characters)
"""
MobileNavigationBot - Бот навигации по мобильным устройствам
function_86: Интеллектуальный бот для мобильной навигации

Этот модуль предоставляет интеллектуального бота для навигации по мобильным устройствам,
включающего:
- Умную навигацию по приложениям
- Голосовое управление
- Адаптивный интерфейс
- Безопасную навигацию
- Персонализацию
- Доступность
- Геолокацию
- Интеграцию с системами безопасности
- Аналитику использования
- Оптимизацию производительности

Основные возможности:
1. Интеллектуальная навигация по приложениям
2. Голосовое управление без использования рук
3. Адаптивный интерфейс под устройство
4. Безопасная навигация с проверками
5. Персонализация под пользователя
6. Поддержка доступности
7. Геолокация и контекстная навигация
8. Интеграция с системами безопасности
9. Аналитика и оптимизация
10. Мультиплатформенная поддержка

Технические детали:
- Использует ML для предсказания намерений пользователя
- Применяет NLP для голосового управления
- Интегрирует с GPS и датчиками устройства
- Использует компьютерное зрение для анализа интерфейса
- Применяет рекомендательные системы
- Интегрирует с системами безопасности
- Использует кэширование для оптимизации
- Применяет адаптивные алгоритмы
- Интегрирует с внешними API
- Использует машинное обучение для персонализации

Автор: ALADDIN Security System
Версия: 2.0
Дата: 2025-01-27
Лицензия: MIT
"""
   
                                                            
              ^
security/bots/mobile_navigation_bot.py:50:1: F401 'core.base.ComponentStatus' imported but unused
from core.base import ComponentStatus, SecurityBase, SecurityLevel
^
security/bots/mobile_navigation_bot.py:50:1: F401 'core.base.SecurityLevel' imported but unused
from core.base import ComponentStatus, SecurityBase, SecurityLevel
^
security/bots/mobile_navigation_bot.py:53:1: F401 'json' imported but unused
import json
^
security/bots/mobile_navigation_bot.py:59:1: F401 'dataclasses.dataclass' imported but unused
from dataclasses import dataclass, field
^
security/bots/mobile_navigation_bot.py:59:1: F401 'dataclasses.field' imported but unused
from dataclasses import dataclass, field
^
security/bots/mobile_navigation_bot.py:61:1: F401 'collections.defaultdict' imported but unused
from collections import defaultdict
^
security/bots/mobile_navigation_bot.py:66:80: E501 line too long (99 > 79 characters)
from sqlalchemy import create_engine, Column, String, Integer, DateTime, Boolean, JSON, Text, Float
                                                                               ^
security/bots/mobile_navigation_bot.py:69:1: F401 'pydantic.validator' imported but unused
from pydantic import BaseModel, Field, validator
^
security/bots/mobile_navigation_bot.py:71:1: F401 'numpy as np' imported but unused
import numpy as np
^
security/bots/mobile_navigation_bot.py:78:80: E501 line too long (93 > 79 characters)
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))
                                                                               ^
security/bots/mobile_navigation_bot.py:150:80: E501 line too long (80 > 79 characters)
    accessibility_level = Column(String, default=AccessibilityLevel.BASIC.value)
                                                                               ^
security/bots/mobile_navigation_bot.py:261:80: E501 line too long (99 > 79 characters)
    def __init__(self, name: str = "MobileNavigationBot", config: Optional[Dict[str, Any]] = None):
                                                                               ^
security/bots/mobile_navigation_bot.py:347:80: E501 line too long (89 > 79 characters)
                self.monitoring_thread = threading.Thread(target=self._monitoring_worker)
                                                                               ^
security/bots/mobile_navigation_bot.py:369:80: E501 line too long (80 > 79 characters)
                if self.monitoring_thread and self.monitoring_thread.is_alive():
                                                                               ^
security/bots/mobile_navigation_bot.py:389:80: E501 line too long (96 > 79 characters)
            database_url = self.config.get("database_url", "sqlite:///mobile_navigation_bot.db")
                                                                               ^
security/bots/mobile_navigation_bot.py:405:80: E501 line too long (80 > 79 characters)
            redis_url = self.config.get("redis_url", "redis://localhost:6379/0")
                                                                               ^
security/bots/mobile_navigation_bot.py:406:80: E501 line too long (80 > 79 characters)
            self.redis_client = redis.from_url(redis_url, decode_responses=True)
                                                                               ^
security/bots/mobile_navigation_bot.py:441:80: E501 line too long (82 > 79 characters)
                self.logger.info(f"Загружено {len(self.app_registry)} приложений")
                                                                               ^
security/bots/mobile_navigation_bot.py:493:80: E501 line too long (87 > 79 characters)
            accessibility_level: AccessibilityLevel = AccessibilityLevel.BASIC) -> str:
                                                                               ^
security/bots/mobile_navigation_bot.py:531:80: E501 line too long (87 > 79 characters)
        random_part = hashlib.md5(f"{timestamp}{time.time()}".encode()).hexdigest()[:8]
                                                                               ^
security/bots/mobile_navigation_bot.py:534:80: E501 line too long (89 > 79 characters)
    async def execute_navigation(self, request: NavigationRequest) -> NavigationResponse:
                                                                               ^
security/bots/mobile_navigation_bot.py:564:80: E501 line too long (97 > 79 characters)
            navigation_duration.labels(action_type=request.action.value).observe(duration / 1000)
                                                                               ^
security/bots/mobile_navigation_bot.py:605:80: E501 line too long (91 > 79 characters)
                    warnings.append(f"Приложение {request.target} может быть небезопасным")
                                                                               ^
security/bots/mobile_navigation_bot.py:648:80: E501 line too long (84 > 79 characters)
            suspicious_keywords = ["hack", "bypass", "root", "jailbreak", "exploit"]
                                                                               ^
security/bots/mobile_navigation_bot.py:651:80: E501 line too long (87 > 79 characters)
            return not any(keyword in command_lower for keyword in suspicious_keywords)
                                                                               ^
security/bots/mobile_navigation_bot.py:657:80: E501 line too long (89 > 79 characters)
    async def _execute_action(self, request: NavigationRequest) -> Tuple[bool, str, str]:
                                                                               ^
security/bots/mobile_navigation_bot.py:664:80: E501 line too long (90 > 79 characters)
                success, message = await self._open_app(request.target, request.device_id)
                                                                               ^
security/bots/mobile_navigation_bot.py:666:80: E501 line too long (91 > 79 characters)
                success, message = await self._close_app(request.target, request.device_id)
                                                                               ^
security/bots/mobile_navigation_bot.py:668:80: E501 line too long (92 > 79 characters)
                success, message = await self._switch_app(request.target, request.device_id)
                                                                               ^
security/bots/mobile_navigation_bot.py:670:80: E501 line too long (98 > 79 characters)
                success, message = await self._tap_element(request.coordinates, request.device_id)
                                                                               ^
security/bots/mobile_navigation_bot.py:672:80: E501 line too long (100 > 79 characters)
                success, message = await self._swipe_element(request.coordinates, request.device_id)
                                                                               ^
security/bots/mobile_navigation_bot.py:674:80: E501 line too long (110 > 79 characters)
                success, message = await self._process_voice_command(request.voice_command, request.device_id)
                                                                               ^
security/bots/mobile_navigation_bot.py:676:80: E501 line too long (96 > 79 characters)
                success, message = await self._perform_search(request.target, request.device_id)
                                                                               ^
security/bots/mobile_navigation_bot.py:678:80: E501 line too long (94 > 79 characters)
                success, message = False, f"Неподдерживаемое действие: {request.action.value}"
                                                                               ^
security/bots/mobile_navigation_bot.py:689:80: E501 line too long (87 > 79 characters)
        random_part = hashlib.md5(f"{timestamp}{time.time()}".encode()).hexdigest()[:8]
                                                                               ^
security/bots/mobile_navigation_bot.py:697:80: E501 line too long (87 > 79 characters)
            self.logger.info(f"Открытие приложения {app_id} на устройстве {device_id}")
                                                                               ^
security/bots/mobile_navigation_bot.py:715:80: E501 line too long (80 > 79 characters)
    async def _close_app(self, app_id: str, device_id: str) -> Tuple[bool, str]:
                                                                               ^
security/bots/mobile_navigation_bot.py:719:80: E501 line too long (87 > 79 characters)
            self.logger.info(f"Закрытие приложения {app_id} на устройстве {device_id}")
                                                                               ^
security/bots/mobile_navigation_bot.py:726:80: E501 line too long (81 > 79 characters)
    async def _switch_app(self, app_id: str, device_id: str) -> Tuple[bool, str]:
                                                                               ^
security/bots/mobile_navigation_bot.py:730:80: E501 line too long (94 > 79 characters)
            self.logger.info(f"Переключение на приложение {app_id} на устройстве {device_id}")
                                                                               ^
security/bots/mobile_navigation_bot.py:741:80: E501 line too long (110 > 79 characters)
    async def _tap_element(self, coordinates: Optional[Dict[str, float]], device_id: str) -> Tuple[bool, str]:
                                                                               ^
security/bots/mobile_navigation_bot.py:748:80: E501 line too long (94 > 79 characters)
            self.logger.info(f"Нажатие на координаты {coordinates} на устройстве {device_id}")
                                                                               ^
security/bots/mobile_navigation_bot.py:755:80: E501 line too long (112 > 79 characters)
    async def _swipe_element(self, coordinates: Optional[Dict[str, float]], device_id: str) -> Tuple[bool, str]:
                                                                               ^
security/bots/mobile_navigation_bot.py:762:80: E501 line too long (93 > 79 characters)
            self.logger.info(f"Свайп по координатам {coordinates} на устройстве {device_id}")
                                                                               ^
security/bots/mobile_navigation_bot.py:769:80: E501 line too long (93 > 79 characters)
    async def _process_voice_command(self, command: str, device_id: str) -> Tuple[bool, str]:
                                                                               ^
security/bots/mobile_navigation_bot.py:773:80: E501 line too long (97 > 79 characters)
            self.logger.info(f"Обработка голосовой команды: {command} на устройстве {device_id}")
                                                                               ^
security/bots/mobile_navigation_bot.py:784:80: E501 line too long (84 > 79 characters)
    async def _perform_search(self, query: str, device_id: str) -> Tuple[bool, str]:
                                                                               ^
security/bots/mobile_navigation_bot.py:788:80: E501 line too long (85 > 79 characters)
            self.logger.info(f"Выполнение поиска: {query} на устройстве {device_id}")
                                                                               ^
security/bots/mobile_navigation_bot.py:795:80: E501 line too long (83 > 79 characters)
    async def _generate_suggestions(self, request: NavigationRequest) -> List[str]:
                                                                               ^
security/bots/mobile_navigation_bot.py:802:80: E501 line too long (100 > 79 characters)
                suggestions.append("Попробуйте использовать голосовую команду для быстрого доступа")
                                                                               ^
security/bots/mobile_navigation_bot.py:804:80: E501 line too long (90 > 79 characters)
                suggestions.append("Используйте фильтры для уточнения результатов поиска")
                                                                               ^
security/bots/mobile_navigation_bot.py:806:80: E501 line too long (89 > 79 characters)
                suggestions.append("Говорите четко и медленно для лучшего распознавания")
                                                                               ^
security/bots/mobile_navigation_bot.py:810:80: E501 line too long (89 > 79 characters)
                suggestions.append("Включите ночной режим для комфортного использования")
                                                                               ^
security/bots/mobile_navigation_bot.py:818:80: E501 line too long (96 > 79 characters)
    async def _predict_next_actions(self, request: NavigationRequest) -> List[NavigationAction]:
                                                                               ^
security/bots/mobile_navigation_bot.py:825:80: E501 line too long (83 > 79 characters)
                next_actions.extend([NavigationAction.TAP, NavigationAction.SWIPE])
                                                                               ^
security/bots/mobile_navigation_bot.py:827:80: E501 line too long (86 > 79 characters)
                next_actions.extend([NavigationAction.TAP, NavigationAction.OPEN_APP])
                                                                               ^
security/bots/mobile_navigation_bot.py:829:80: E501 line too long (89 > 79 characters)
                next_actions.extend([NavigationAction.OPEN_APP, NavigationAction.SEARCH])
                                                                               ^
security/bots/mobile_navigation_bot.py:856:80: E501 line too long (81 > 79 characters)
                error_message=response.message if not response.success else None,
                                                                               ^
security/bots/mobile_navigation_bot.py:864:80: E501 line too long (81 > 79 characters)
            self.logger.error(f"Ошибка логирования навигационного действия: {e}")
                                                                               ^
security/bots/mobile_navigation_bot.py:895:80: E501 line too long (101 > 79 characters)
    async def get_app_recommendations(self, user_id: str, limit: int = 5) -> List[AppRecommendation]:
                                                                               ^
security/bots/mobile_navigation_bot.py:973:80: E501 line too long (93 > 79 characters)
        print(f"✅ Навигационное действие выполнено: {response.success} - {response.message}")
                                                                               ^
security/bots/network_security_bot.py:12:1: F401 'datetime.timedelta' imported but unused
from datetime import datetime, timedelta
^
security/bots/network_security_bot.py:13:1: F401 'typing.Union' imported but unused
from typing import Dict, List, Any, Optional, Union
^
security/bots/network_security_bot.py:17:1: F401 'hashlib' imported but unused
import hashlib
^
security/bots/network_security_bot.py:18:1: F401 're' imported but unused
import re
^
security/bots/network_security_bot.py:19:1: F401 'socket' imported but unused
import socket
^
security/bots/network_security_bot.py:20:1: F401 'ipaddress' imported but unused
import ipaddress
^
security/bots/network_security_bot.py:375:80: E501 line too long (85 > 79 characters)
                    remote_port) in self.config["network_settings"]["blocked_ports"]:
                                                                               ^
security/bots/network_security_bot.py:469:80: E501 line too long (85 > 79 characters)
            AttackType.MAN_IN_THE_MIDDLE: "Использовать VPN и проверять сертификаты",
                                                                               ^
security/bots/network_security_bot.py:473:80: E501 line too long (85 > 79 characters)
            AttackType.MALWARE_COMMUNICATION: "Блокировать IP и сканировать систему"}
                                                                               ^
security/bots/network_security_bot.py:525:80: E501 line too long (105 > 79 characters)
            cursor.execute("""
                INSERT OR REPLACE INTO blocked_ips
                (ip_address, reason, block_time, threat_level, duration_hours)
                VALUES (?, ?, ?, ?, ?)
            """, (ip_address, reason, datetime.utcnow().isoformat(), threat_level.value, duration_hours))
                              
                                                ^
security/bots/network_security_bot.py:545:80: E501 line too long (108 > 79 characters)
            threat_level, threats = await self._detect_traffic_threats(source_ip, target_ip, port, protocol)
                                                                               ^
security/bots/network_security_bot.py:568:80: E501 line too long (81 > 79 characters)
                blocked_ips=[source_ip] if action == NetworkAction.BLOCK else [],
                                                                               ^
security/bots/network_security_bot.py:569:80: E501 line too long (81 > 79 characters)
                allowed_ips=[source_ip] if action == NetworkAction.ALLOW else [],
                                                                               ^
security/bots/network_security_bot.py:570:80: E501 line too long (85 > 79 characters)
                monitored_ips=[source_ip] if action == NetworkAction.MONITOR else [],
                                                                               ^
security/bots/network_security_bot.py:571:80: E501 line too long (89 > 79 characters)
                security_recommendations=self._generate_network_recommendations(threats),
                                                                               ^
security/bots/network_security_bot.py:597:80: E501 line too long (88 > 79 characters)
                                                                   List[NetworkThreat]]:
                                                                               ^
security/bots/network_security_bot.py:631:80: E501 line too long (84 > 79 characters)
                description=f"Попытка подключения к заблокированному порту: {port}",
                                                                               ^
security/bots/network_security_bot.py:663:80: E501 line too long (101 > 79 characters)
            return f"🚫 Сетевое соединение заблокировано: {threat_level.value.upper()} уровень угрозы"
                                                                               ^
security/bots/network_security_bot.py:665:80: E501 line too long (105 > 79 characters)
            return f"👁️ Сетевое соединение под мониторингом: {threat_level.value.upper()} уровень угрозы"
                                                                               ^
security/bots/network_security_bot.py:764:80: E501 line too long (107 > 79 characters)
                                                           session.packets_sent + session.packets_received)
                                                                               ^
security/bots/network_security_bot.py:789:80: E501 line too long (81 > 79 characters)
            cursor.execute("""
                INSERT OR REPLACE INTO network_sessions
                (session_id, user_id, start_time, end_time, source_ip, target_ip,
                 port, protocol, packets_sent, packets_received, bytes_sent,
                 bytes_received, threats_detected, security_score, performance_score)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                              
                                                ^
security/bots/network_security_bot.py:791:80: E501 line too long (85 > 79 characters)
            cursor.execute("""
                INSERT OR REPLACE INTO network_sessions
                (session_id, user_id, start_time, end_time, source_ip, target_ip,
                 port, protocol, packets_sent, packets_received, bytes_sent,
                 bytes_received, threats_detected, security_score, performance_score)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                              
                                                ^
security/bots/network_security_bot.py:848:80: E501 line too long (99 > 79 characters)
    response = await bot.analyze_network_traffic("192.168.1.100", "192.168.1.1", 80, Protocol.HTTP)
                                                                               ^
security/bots/network_security_bot.py:852:80: E501 line too long (110 > 79 characters)
    session_id = await bot.start_network_session("user123", "192.168.1.100", "192.168.1.1", 80, Protocol.HTTP)
                                                                               ^
security/bots/notification_bot.py:50:1: F401 'core.base.ComponentStatus' imported but unused
from core.base import ComponentStatus, SecurityBase, SecurityLevel
^
security/bots/notification_bot.py:50:1: F401 'core.base.SecurityLevel' imported but unused
from core.base import ComponentStatus, SecurityBase, SecurityLevel
^
security/bots/notification_bot.py:53:1: F401 'json' imported but unused
import json
^
security/bots/notification_bot.py:59:1: F401 'dataclasses.dataclass' imported but unused
from dataclasses import dataclass, field
^
security/bots/notification_bot.py:59:1: F401 'dataclasses.field' imported but unused
from dataclasses import dataclass, field
^
security/bots/notification_bot.py:66:1: F401 'sqlalchemy.Float' imported but unused
from sqlalchemy import create_engine, Column, String, Integer, DateTime, Boolean, JSON, Text, Float
^
security/bots/notification_bot.py:66:80: E501 line too long (99 > 79 characters)
from sqlalchemy import create_engine, Column, String, Integer, DateTime, Boolean, JSON, Text, Float
                                                                               ^
security/bots/notification_bot.py:69:1: F401 'pydantic.validator' imported but unused
from pydantic import BaseModel, Field, validator
^
security/bots/notification_bot.py:71:1: F401 'numpy as np' imported but unused
import numpy as np
^
security/bots/notification_bot.py:78:80: E501 line too long (93 > 79 characters)
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))
                                                                               ^
security/bots/notification_bot.py:152:80: E501 line too long (84 > 79 characters)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
                                                                               ^
security/bots/notification_bot.py:266:80: E501 line too long (95 > 79 characters)
    def __init__(self, name: str = "NotificationBot", config: Optional[Dict[str, Any]] = None):
                                                                               ^
security/bots/notification_bot.py:359:80: E501 line too long (89 > 79 characters)
                self.monitoring_thread = threading.Thread(target=self._monitoring_worker)
                                                                               ^
security/bots/notification_bot.py:360:80: E501 line too long (85 > 79 characters)
                self.delivery_thread = threading.Thread(target=self._delivery_worker)
                                                                               ^
security/bots/notification_bot.py:386:80: E501 line too long (80 > 79 characters)
                if self.monitoring_thread and self.monitoring_thread.is_alive():
                                                                               ^
security/bots/notification_bot.py:409:80: E501 line too long (91 > 79 characters)
            database_url = self.config.get("database_url", "sqlite:///notification_bot.db")
                                                                               ^
security/bots/notification_bot.py:425:80: E501 line too long (80 > 79 characters)
            redis_url = self.config.get("redis_url", "redis://localhost:6379/0")
                                                                               ^
security/bots/notification_bot.py:426:80: E501 line too long (80 > 79 characters)
            self.redis_client = redis.from_url(redis_url, decode_responses=True)
                                                                               ^
security/bots/notification_bot.py:462:80: E501 line too long (106 > 79 characters)
                    self.user_preferences[pref.user_id][f"{pref.notification_type}_{pref.channel}"] = pref
                                                                               ^
security/bots/notification_bot.py:464:80: E501 line too long (92 > 79 characters)
                self.logger.info(f"Загружено {len(preferences)} предпочтений пользователей")
                                                                               ^
security/bots/notification_bot.py:467:80: E501 line too long (81 > 79 characters)
            self.logger.error(f"Ошибка загрузки предпочтений пользователей: {e}")
                                                                               ^
security/bots/notification_bot.py:480:80: E501 line too long (84 > 79 characters)
                self.logger.info(f"Загружено {len(templates)} шаблонов уведомлений")
                                                                               ^
security/bots/notification_bot.py:519:80: E501 line too long (96 > 79 characters)
                        self.stats["delivered_notifications"] / self.stats["sent_notifications"]
                                                                               ^
security/bots/notification_bot.py:524:80: E501 line too long (96 > 79 characters)
                        self.stats["read_notifications"] / self.stats["delivered_notifications"]
                                                                               ^
security/bots/notification_bot.py:529:80: E501 line too long (94 > 79 characters)
                        self.stats["clicked_notifications"] / self.stats["read_notifications"]
                                                                               ^
security/bots/notification_bot.py:543:80: E501 line too long (90 > 79 characters)
            for notification_id, notification in list(self.pending_notifications.items()):
                                                                               ^
security/bots/notification_bot.py:546:80: E501 line too long (81 > 79 characters)
                        notification.status == NotificationStatus.PENDING.value):
                                                                               ^
security/bots/notification_bot.py:589:80: E501 line too long (92 > 79 characters)
    async def send_notification(self, request: NotificationRequest) -> NotificationResponse:
                                                                               ^
security/bots/notification_bot.py:597:80: E501 line too long (80 > 79 characters)
                    message="Уведомление заблокировано настройками пользователя"
                                                                               ^
security/bots/notification_bot.py:616:80: E501 line too long (81 > 79 characters)
                delivery_estimate=notification.scheduled_at or datetime.utcnow(),
                                                                               ^
security/bots/notification_bot.py:629:80: E501 line too long (84 > 79 characters)
    async def _should_send_notification(self, request: NotificationRequest) -> bool:
                                                                               ^
security/bots/notification_bot.py:635:80: E501 line too long (108 > 79 characters)
            key = f"{request.notification_type.value}_{request.channel.value if request.channel else 'any'}"
                                                                               ^
security/bots/notification_bot.py:643:80: E501 line too long (101 > 79 characters)
                if self._is_quiet_hours(pref.quiet_hours_start, pref.quiet_hours_end, pref.timezone):
                                                                               ^
security/bots/notification_bot.py:648:80: E501 line too long (88 > 79 characters)
                if self._exceeds_frequency_limit(request.user_id, pref.frequency_limit):
                                                                               ^
security/bots/notification_bot.py:657:80: E501 line too long (85 > 79 characters)
    def _is_quiet_hours(self, start_time: str, end_time: str, timezone: str) -> bool:
                                                                               ^
security/bots/notification_bot.py:695:80: E501 line too long (97 > 79 characters)
    async def _determine_delivery_channel(self, request: NotificationRequest) -> DeliveryChannel:
                                                                               ^
security/bots/notification_bot.py:707:80: E501 line too long (81 > 79 characters)
                if (pref.notification_type == request.notification_type.value and
                                                                               ^
security/bots/notification_bot.py:725:80: E501 line too long (90 > 79 characters)
            return default_channels.get(request.notification_type, DeliveryChannel.IN_APP)
                                                                               ^
security/bots/notification_bot.py:731:80: E501 line too long (113 > 79 characters)
    async def _create_notification(self, request: NotificationRequest, channel: DeliveryChannel) -> Notification:
                                                                               ^
security/bots/notification_bot.py:767:80: E501 line too long (87 > 79 characters)
        random_part = hashlib.md5(f"{timestamp}{time.time()}".encode()).hexdigest()[:8]
                                                                               ^
security/bots/notification_bot.py:770:80: E501 line too long (113 > 79 characters)
    async def _process_template(self, request: NotificationRequest, channel: DeliveryChannel) -> Tuple[str, str]:
                                                                               ^
security/bots/notification_bot.py:774:80: E501 line too long (90 > 79 characters)
            if request.template_id and request.template_id in self.notification_templates:
                                                                               ^
security/bots/notification_bot.py:778:80: E501 line too long (113 > 79 characters)
                title = self._substitute_variables(template.subject_template or request.title, request.variables)
                                                                               ^
security/bots/notification_bot.py:779:80: E501 line too long (98 > 79 characters)
                message = self._substitute_variables(template.message_template, request.variables)
                                                                               ^
security/bots/notification_bot.py:790:80: E501 line too long (81 > 79 characters)
    def _substitute_variables(self, text: str, variables: Dict[str, Any]) -> str:
                                                                               ^
security/bots/notification_bot.py:803:80: E501 line too long (94 > 79 characters)
    async def get_notification_status(self, notification_id: str) -> Optional[Dict[str, Any]]:
                                                                               ^
security/bots/notification_bot.py:827:80: E501 line too long (94 > 79 characters)
                "sent_at": notification.sent_at.isoformat() if notification.sent_at else None,
                                                                               ^
security/bots/notification_bot.py:828:80: E501 line too long (109 > 79 characters)
                "delivered_at": notification.delivered_at.isoformat() if notification.delivered_at else None,
                                                                               ^
security/bots/notification_bot.py:829:80: E501 line too long (94 > 79 characters)
                "read_at": notification.read_at.isoformat() if notification.read_at else None,
                                                                               ^
security/bots/notification_bot.py:830:80: E501 line too long (102 > 79 characters)
                "clicked_at": notification.clicked_at.isoformat() if notification.clicked_at else None
                                                                               ^
security/bots/notification_bot.py:865:80: E501 line too long (82 > 79 characters)
            self.logger.error(f"Ошибка отметки уведомления как прочитанного: {e}")
                                                                               ^
security/bots/notification_bot.py:870:80: E501 line too long (90 > 79 characters)
                            end_date: Optional[datetime] = None) -> NotificationAnalytics:
                                                                               ^
security/bots/notification_bot.py:893:80: E501 line too long (81 > 79 characters)
            analytics.total_sent = len([n for n in notifications if n.status in [
                                                                               ^
security/bots/notification_bot.py:900:80: E501 line too long (86 > 79 characters)
            analytics.total_delivered = len([n for n in notifications if n.status in [
                                                                               ^
security/bots/notification_bot.py:906:80: E501 line too long (81 > 79 characters)
            analytics.total_read = len([n for n in notifications if n.status in [
                                                                               ^
security/bots/notification_bot.py:911:80: E501 line too long (117 > 79 characters)
            analytics.total_clicked = len([n for n in notifications if n.status == NotificationStatus.CLICKED.value])
                                                                               ^
security/bots/notification_bot.py:915:80: E501 line too long (98 > 79 characters)
                analytics.delivery_rate = (analytics.total_delivered / analytics.total_sent) * 100
                                                                               ^
security/bots/notification_bot.py:918:80: E501 line too long (94 > 79 characters)
                analytics.read_rate = (analytics.total_read / analytics.total_delivered) * 100
                                                                               ^
security/bots/notification_bot.py:921:80: E501 line too long (93 > 79 characters)
                analytics.click_rate = (analytics.total_clicked / analytics.total_read) * 100
                                                                               ^
security/bots/notification_bot.py:930:80: E501 line too long (106 > 79 characters)
                for channel, count in sorted(channel_counts.items(), key=lambda x: x[1], reverse=True)[:5]
                                                                               ^
security/bots/notification_bot.py:940:80: E501 line too long (101 > 79 characters)
                for ntype, count in sorted(type_counts.items(), key=lambda x: x[1], reverse=True)[:5]
                                                                               ^
security/bots/notification_bot.py:993:80: E501 line too long (83 > 79 characters)
        print(f"✅ Уведомление отправлено: {response.success} - {response.message}")
                                                                               ^
security/bots/notification_bot.py:997:80: E501 line too long (80 > 79 characters)
            status = await bot.get_notification_status(response.notification_id)
                                                                               ^
security/bots/notification_bot.py:998:80: E501 line too long (89 > 79 characters)
            print(f"✅ Статус уведомления: {status['status'] if status else 'не найден'}")
                                                                               ^
security/bots/notification_bot.py:1002:80: E501 line too long (107 > 79 characters)
        print(f"✅ Аналитика: {analytics.total_sent} отправлено, {analytics.delivery_rate:.1f}% доставлено")
                                                                               ^
security/bots/notification_bot_extra.py:7:1: F401 'asyncio' imported but unused
import asyncio
^
security/bots/notification_bot_extra.py:9:1: F401 'time' imported but unused
import time
^
security/bots/notification_bot_extra.py:11:1: F401 'typing.List' imported but unused
from typing import Dict, Any, List, Optional
^
security/bots/notification_bot_extra.py:11:1: F401 'typing.Optional' imported but unused
from typing import Dict, Any, List, Optional
^
security/bots/notification_bot_extra.py:14:1: E302 expected 2 blank lines, found 1
@dataclass
^
security/bots/notification_bot_extra.py:24:1: E302 expected 2 blank lines, found 1
@dataclass
^
security/bots/notification_bot_extra.py:33:1: W293 blank line contains whitespace
    
^
security/bots/notification_bot_extra.py:38:1: E302 expected 2 blank lines, found 1
class NotificationBotExtra:
^
security/bots/notification_bot_extra.py:40:1: W293 blank line contains whitespace
    
^
security/bots/notification_bot_extra.py:51:1: W293 blank line contains whitespace
    
^
security/bots/notification_bot_extra.py:58:80: E501 line too long (81 > 79 characters)
                    'template': 'Обнаружена подозрительная активность: {details}'
                                                                               ^
security/bots/notification_bot_extra.py:72:1: W293 blank line contains whitespace
    
^
security/bots/notification_bot_extra.py:78:80: E501 line too long (85 > 79 characters)
            self.logger.info(f"Добавлены настройки пользователя: {settings.user_id}")
                                                                               ^
security/bots/notification_bot_extra.py:83:1: W293 blank line contains whitespace
    
^
security/bots/notification_bot_extra.py:88:80: E501 line too long (85 > 79 characters)
                self.logger.warning(f"Пользователь {notification.user_id} не найден")
                                                                               ^
security/bots/notification_bot_extra.py:90:1: W293 blank line contains whitespace
            
^
security/bots/notification_bot_extra.py:92:1: W293 blank line contains whitespace
            
^
security/bots/notification_bot_extra.py:95:80: E501 line too long (98 > 79 characters)
                    self.logger.info(f"Уведомление отложено (тихие часы): {notification.user_id}")
                                                                               ^
security/bots/notification_bot_extra.py:97:1: W293 blank line contains whitespace
            
^
security/bots/notification_bot_extra.py:99:1: W293 blank line contains whitespace
            
^
security/bots/notification_bot_extra.py:104:1: W293 blank line contains whitespace
            
^
security/bots/notification_bot_extra.py:106:1: W293 blank line contains whitespace
            
^
security/bots/notification_bot_extra.py:111:1: W293 blank line contains whitespace
    
^
security/bots/notification_bot_extra.py:115:80: E501 line too long (100 > 79 characters)
        return settings.quiet_hours_start <= current_hour or current_hour < settings.quiet_hours_end
                                                                               ^
security/bots/notification_bot_extra.py:116:1: W293 blank line contains whitespace
    
^
security/bots/notification_bot_extra.py:117:80: E501 line too long (105 > 79 characters)
    def _send_notification(self, notification: Notification, settings: UserNotificationSettings) -> bool:
                                                                               ^
security/bots/notification_bot_extra.py:120:80: E501 line too long (111 > 79 characters)
            self.logger.info(f"Отправка уведомления пользователю {notification.user_id}: {notification.title}")
                                                                               ^
security/bots/notification_bot_extra.py:121:1: W293 blank line contains whitespace
            
^
security/bots/notification_bot_extra.py:124:1: W293 blank line contains whitespace
            
^
security/bots/notification_bot_extra.py:127:1: W293 blank line contains whitespace
            
^
security/bots/notification_bot_extra.py:130:1: W293 blank line contains whitespace
            
^
security/bots/notification_bot_extra.py:132:1: W293 blank line contains whitespace
            
^
security/bots/notification_bot_extra.py:136:1: W293 blank line contains whitespace
    
^
security/bots/notification_bot_extra.py:140:1: W293 blank line contains whitespace
    
^
security/bots/notification_bot_extra.py:144:1: W293 blank line contains whitespace
    
^
security/bots/notification_bot_extra.py:148:1: W293 blank line contains whitespace
    
^
security/bots/notification_bot_extra.py:162:1: W293 blank line contains whitespace
    
^
security/bots/notification_bot_extra.py:177:1: E305 expected 2 blank lines after class or function definition, found 1
notification_bot_extra = NotificationBotExtra()^
security/bots/notification_bot_extra.py:177:48: W292 no newline at end of file
notification_bot_extra = NotificationBotExtra()                                               ^
security/bots/parental_control_bot.py:50:1: F401 'core.base.ComponentStatus' imported but unused
from core.base import ComponentStatus, SecurityBase, SecurityLevel
^
security/bots/parental_control_bot.py:50:1: F401 'core.base.SecurityLevel' imported but unused
from core.base import ComponentStatus, SecurityBase, SecurityLevel
^
security/bots/parental_control_bot.py:56:1: F401 'datetime.timedelta' imported but unused
from datetime import datetime, timedelta
^
security/bots/parental_control_bot.py:58:1: F401 'typing.Tuple' imported but unused
from typing import Dict, List, Optional, Any, Tuple
^
security/bots/parental_control_bot.py:59:1: F401 'dataclasses.dataclass' imported but unused
from dataclasses import dataclass, field
^
security/bots/parental_control_bot.py:59:1: F401 'dataclasses.field' imported but unused
from dataclasses import dataclass, field
^
security/bots/parental_control_bot.py:66:1: F401 'sqlalchemy.Text' imported but unused
from sqlalchemy import create_engine, Column, String, Integer, DateTime, Boolean, JSON, Text, Float
^
security/bots/parental_control_bot.py:66:80: E501 line too long (99 > 79 characters)
from sqlalchemy import create_engine, Column, String, Integer, DateTime, Boolean, JSON, Text, Float
                                                                               ^
security/bots/parental_control_bot.py:69:1: F401 'pydantic.validator' imported but unused
from pydantic import BaseModel, Field, validator
^
security/bots/parental_control_bot.py:70:1: F401 'prometheus_client.Histogram' imported but unused
from prometheus_client import Counter, Histogram, Gauge
^
security/bots/parental_control_bot.py:71:1: F401 'numpy as np' imported but unused
import numpy as np
^
security/bots/parental_control_bot.py:78:80: E501 line too long (93 > 79 characters)
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))
                                                                               ^
security/bots/parental_control_bot.py:146:80: E501 line too long (84 > 79 characters)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
                                                                               ^
security/bots/parental_control_bot.py:183:80: E501 line too long (87 > 79 characters)
    time_limits: Dict[str, int] = Field(default_factory=dict)  # device_type -> minutes
                                                                               ^
security/bots/parental_control_bot.py:254:80: E501 line too long (98 > 79 characters)
    def __init__(self, name: str = "ParentalControlBot", config: Optional[Dict[str, Any]] = None):
                                                                               ^
security/bots/parental_control_bot.py:336:80: E501 line too long (89 > 79 characters)
                self.monitoring_thread = threading.Thread(target=self._monitoring_worker)
                                                                               ^
security/bots/parental_control_bot.py:358:80: E501 line too long (80 > 79 characters)
                if self.monitoring_thread and self.monitoring_thread.is_alive():
                                                                               ^
security/bots/parental_control_bot.py:378:80: E501 line too long (95 > 79 characters)
            database_url = self.config.get("database_url", "sqlite:///parental_control_bot.db")
                                                                               ^
security/bots/parental_control_bot.py:394:80: E501 line too long (80 > 79 characters)
            redis_url = self.config.get("redis_url", "redis://localhost:6379/0")
                                                                               ^
security/bots/parental_control_bot.py:395:80: E501 line too long (80 > 79 characters)
            self.redis_client = redis.from_url(redis_url, decode_responses=True)
                                                                               ^
security/bots/parental_control_bot.py:432:80: E501 line too long (99 > 79 characters)
                self.stats["active_children"] = len([p for p in self.child_profiles.values() if p])
                                                                               ^
security/bots/parental_control_bot.py:434:80: E501 line too long (96 > 79 characters)
                self.logger.info("Загружено {} профилей детей".format(len(self.child_profiles)))
                                                                               ^
security/bots/parental_control_bot.py:461:80: E501 line too long (99 > 79 characters)
                self.stats["active_children"] = len([p for p in self.child_profiles.values() if p])
                                                                               ^
security/bots/parental_control_bot.py:480:80: E501 line too long (115 > 79 characters)
                        self._handle_time_violation(child_id, device_type, daily_usage[device_type], limit_minutes)
                                                                               ^
security/bots/parental_control_bot.py:493:80: E501 line too long (80 > 79 characters)
            self.logger.error(f"Ошибка проверки подозрительной активности: {e}")
                                                                               ^
security/bots/parental_control_bot.py:509:80: E501 line too long (95 > 79 characters)
                device_type = log.device_id.split('_')[0]  # Предполагаем формат device_type_id
                                                                               ^
security/bots/parental_control_bot.py:518:80: E501 line too long (110 > 79 characters)
    def _handle_time_violation(self, child_id: str, device_type: str, current_usage: int, limit: int) -> None:
                                                                               ^
security/bots/parental_control_bot.py:526:80: E501 line too long (107 > 79 characters)
                message=f"Превышен лимит времени использования {device_type}: {current_usage}м > {limit}м",
                                                                               ^
security/bots/parental_control_bot.py:541:80: E501 line too long (90 > 79 characters)
            time_limit_violations.labels(child_id=child_id, device_type=device_type).inc()
                                                                               ^
security/bots/parental_control_bot.py:543:80: E501 line too long (83 > 79 characters)
            self.logger.warning(f"Нарушение времени для {child_id}: {device_type}")
                                                                               ^
security/bots/parental_control_bot.py:566:80: E501 line too long (82 > 79 characters)
                self.redis_client.lpush("parental_alerts", json.dumps(alert_data))
                                                                               ^
security/bots/parental_control_bot.py:583:80: E501 line too long (104 > 79 characters)
                    age_group=child_data.get("age_group", self._determine_age_group(child_data["age"])),
                                                                               ^
security/bots/parental_control_bot.py:614:80: E501 line too long (87 > 79 characters)
        random_part = hashlib.md5(f"{timestamp}{time.time()}".encode()).hexdigest()[:8]
                                                                               ^
security/bots/parental_control_bot.py:630:80: E501 line too long (86 > 79 characters)
    async def analyze_content(self, url: str, child_id: str) -> ContentAnalysisResult:
                                                                               ^
security/bots/parental_control_bot.py:639:80: E501 line too long (92 > 79 characters)
            action = self._determine_action(category, risk_score, age_appropriate, child_id)
                                                                               ^
security/bots/parental_control_bot.py:661:80: E501 line too long (87 > 79 characters)
            await self._log_activity(child_id, "content_access", url, category, result)
                                                                               ^
security/bots/parental_control_bot.py:683:80: E501 line too long (88 > 79 characters)
            if any(word in url_lower for word in ["youtube", "video", "entertainment"]):
                                                                               ^
security/bots/parental_control_bot.py:685:80: E501 line too long (99 > 79 characters)
            elif any(word in url_lower for word in ["facebook", "instagram", "twitter", "social"]):
                                                                               ^
security/bots/parental_control_bot.py:689:80: E501 line too long (87 > 79 characters)
            elif any(word in url_lower for word in ["shop", "buy", "store", "amazon"]):
                                                                               ^
security/bots/parental_control_bot.py:691:80: E501 line too long (80 > 79 characters)
            elif any(word in url_lower for word in ["news", "article", "blog"]):
                                                                               ^
security/bots/parental_control_bot.py:695:80: E501 line too long (81 > 79 characters)
            elif any(word in url_lower for word in ["violence", "fight", "war"]):
                                                                               ^
security/bots/parental_control_bot.py:697:80: E501 line too long (81 > 79 characters)
            elif any(word in url_lower for word in ["drug", "alcohol", "smoke"]):
                                                                               ^
security/bots/parental_control_bot.py:699:80: E501 line too long (82 > 79 characters)
            elif any(word in url_lower for word in ["gambling", "casino", "bet"]):
                                                                               ^
security/bots/parental_control_bot.py:701:80: E501 line too long (89 > 79 characters)
            elif any(word in url_lower for word in ["edu", "learn", "school", "course"]):
                                                                               ^
security/bots/parental_control_bot.py:710:80: E501 line too long (82 > 79 characters)
    def _calculate_risk_score(self, url: str, category: ContentCategory) -> float:
                                                                               ^
security/bots/parental_control_bot.py:733:80: E501 line too long (84 > 79 characters)
    def _is_age_appropriate(self, category: ContentCategory, child_id: str) -> bool:
                                                                               ^
security/bots/parental_control_bot.py:804:80: E501 line too long (109 > 79 characters)
    def _get_action_reason(self, action: ControlAction, category: ContentCategory, risk_score: float) -> str:
                                                                               ^
security/bots/parental_control_bot.py:853:80: E501 line too long (87 > 79 characters)
        random_part = hashlib.md5(f"{timestamp}{time.time()}".encode()).hexdigest()[:8]
                                                                               ^
security/bots/parental_control_bot.py:856:80: E501 line too long (80 > 79 characters)
    async def get_child_status(self, child_id: str) -> Optional[Dict[str, Any]]:
                                                                               ^
security/bots/parental_control_bot.py:892:80: E501 line too long (92 > 79 characters)
                "active_monitoring": len([m for m in self.active_monitoring.values() if m]),
                                                                               ^
security/bots/parental_control_bot.py:928:80: E501 line too long (88 > 79 characters)
        result = await bot.analyze_content("https://youtube.com/watch?v=test", child_id)
                                                                               ^
security/bots/simple_messenger_test.py:11:1: F401 'time' imported but unused
import time
^
security/bots/simple_messenger_test.py:13:1: F401 'typing.Dict' imported but unused
from typing import Dict, List, Any
^
security/bots/simple_messenger_test.py:13:1: F401 'typing.List' imported but unused
from typing import Dict, List, Any
^
security/bots/simple_messenger_test.py:13:1: F401 'typing.Any' imported but unused
from typing import Dict, List, Any
^
security/bots/simple_messenger_test.py:22:1: W293 blank line contains whitespace
    
^
security/bots/simple_messenger_test.py:27:1: W293 blank line contains whitespace
        
^
security/bots/simple_messenger_test.py:31:1: W293 blank line contains whitespace
        
^
security/bots/simple_messenger_test.py:34:1: W293 blank line contains whitespace
        
^
security/bots/simple_messenger_test.py:43:1: W293 blank line contains whitespace
        
^
security/bots/simple_messenger_test.py:52:1: W293 blank line contains whitespace
        
^
security/bots/simple_messenger_test.py:61:1: W293 blank line contains whitespace
        
^
security/bots/simple_messenger_test.py:70:1: W293 blank line contains whitespace
        
^
security/bots/simple_messenger_test.py:79:1: W293 blank line contains whitespace
        
^
security/bots/simple_messenger_test.py:83:13: F841 local variable 'bot' is assigned to but never used
            bot = WebsiteNavigationBot("TestWebsiteBot")
            ^
security/bots/simple_messenger_test.py:88:1: W293 blank line contains whitespace
        
^
security/bots/simple_messenger_test.py:95:1: W293 blank line contains whitespace
        
^
security/bots/simple_messenger_test.py:97:1: W293 blank line contains whitespace
    
^
security/bots/simple_messenger_test.py:101:1: W293 blank line contains whitespace
        
^
security/bots/simple_messenger_test.py:104:1: W293 blank line contains whitespace
        
^
security/bots/simple_messenger_test.py:109:1: W293 blank line contains whitespace
            
^
security/bots/simple_messenger_test.py:115:1: W293 blank line contains whitespace
            
^
security/bots/simple_messenger_test.py:121:1: W293 blank line contains whitespace
            
^
security/bots/simple_messenger_test.py:125:1: W293 blank line contains whitespace
        
^
security/bots/simple_messenger_test.py:130:1: W293 blank line contains whitespace
            
^
security/bots/simple_messenger_test.py:135:1: W293 blank line contains whitespace
            
^
security/bots/simple_messenger_test.py:140:1: W293 blank line contains whitespace
            
^
security/bots/simple_messenger_test.py:144:1: W293 blank line contains whitespace
        
^
security/bots/simple_messenger_test.py:149:1: W293 blank line contains whitespace
            
^
security/bots/simple_messenger_test.py:154:1: W293 blank line contains whitespace
            
^
security/bots/simple_messenger_test.py:159:1: W293 blank line contains whitespace
            
^
security/bots/simple_messenger_test.py:163:1: W293 blank line contains whitespace
        
^
security/bots/simple_messenger_test.py:168:1: W293 blank line contains whitespace
            
^
security/bots/simple_messenger_test.py:173:1: W293 blank line contains whitespace
            
^
security/bots/simple_messenger_test.py:178:1: W293 blank line contains whitespace
            
^
security/bots/simple_messenger_test.py:182:1: W293 blank line contains whitespace
        
^
security/bots/simple_messenger_test.py:187:1: W293 blank line contains whitespace
            
^
security/bots/simple_messenger_test.py:192:1: W293 blank line contains whitespace
            
^
security/bots/simple_messenger_test.py:197:1: W293 blank line contains whitespace
            
^
security/bots/simple_messenger_test.py:201:1: W293 blank line contains whitespace
        
^
security/bots/simple_messenger_test.py:206:1: W293 blank line contains whitespace
            
^
security/bots/simple_messenger_test.py:211:1: W293 blank line contains whitespace
            
^
security/bots/simple_messenger_test.py:216:1: W293 blank line contains whitespace
            
^
security/bots/simple_messenger_test.py:220:1: W293 blank line contains whitespace
        
^
security/bots/simple_messenger_test.py:221:80: E501 line too long (90 > 79 characters)
        success_rate = (functionality_tests / total_tests * 100) if total_tests > 0 else 0
                                                                               ^
security/bots/simple_messenger_test.py:222:80: E501 line too long (95 > 79 characters)
        print(f"📊 Функциональность: {functionality_tests}/{total_tests} ({success_rate:.1f}%)")
                                                                               ^
security/bots/simple_messenger_test.py:223:1: W293 blank line contains whitespace
        
^
security/bots/simple_messenger_test.py:230:1: W293 blank line contains whitespace
        
^
security/bots/simple_messenger_test.py:232:1: W293 blank line contains whitespace
    
^
security/bots/simple_messenger_test.py:236:1: W293 blank line contains whitespace
        
^
security/bots/simple_messenger_test.py:239:1: W293 blank line contains whitespace
        
^
security/bots/simple_messenger_test.py:242:40: W291 trailing whitespace
            "telegram_security_bot.py", 
                                       ^
security/bots/simple_messenger_test.py:248:1: W293 blank line contains whitespace
        
^
security/bots/simple_messenger_test.py:251:1: W293 blank line contains whitespace
        
^
security/bots/simple_messenger_test.py:261:1: W293 blank line contains whitespace
                    
^
security/bots/simple_messenger_test.py:266:80: E501 line too long (83 > 79 characters)
                        print(f"❌ {bot_file}: Ошибка синтаксиса - {result.stderr}")
                                                                               ^
security/bots/simple_messenger_test.py:267:1: W293 blank line contains whitespace
                        
^
security/bots/simple_messenger_test.py:272:1: W293 blank line contains whitespace
        
^
security/bots/simple_messenger_test.py:273:80: E501 line too long (84 > 79 characters)
        success_rate = (quality_tests / total_tests * 100) if total_tests > 0 else 0
                                                                               ^
security/bots/simple_messenger_test.py:274:80: E501 line too long (86 > 79 characters)
        print(f"📊 Качество кода: {quality_tests}/{total_tests} ({success_rate:.1f}%)")
                                                                               ^
security/bots/simple_messenger_test.py:275:1: W293 blank line contains whitespace
        
^
security/bots/simple_messenger_test.py:282:1: W293 blank line contains whitespace
        
^
security/bots/simple_messenger_test.py:284:1: W293 blank line contains whitespace
    
^
security/bots/simple_messenger_test.py:288:1: W293 blank line contains whitespace
        
^
security/bots/simple_messenger_test.py:290:80: E501 line too long (99 > 79 characters)
        successful_tests = len([r for r in self.test_results.values() if r["status"] == "success"])
                                                                               ^
security/bots/simple_messenger_test.py:291:80: E501 line too long (96 > 79 characters)
        partial_tests = len([r for r in self.test_results.values() if r["status"] == "partial"])
                                                                               ^
security/bots/simple_messenger_test.py:293:1: W293 blank line contains whitespace
        
^
security/bots/simple_messenger_test.py:294:80: E501 line too long (119 > 79 characters)
        overall_success_rate = ((successful_tests + partial_tests * 0.5) / total_tests * 100) if total_tests > 0 else 0
                                                                               ^
security/bots/simple_messenger_test.py:295:1: W293 blank line contains whitespace
        
^
security/bots/simple_messenger_test.py:303:80: E501 line too long (87 > 79 characters)
                "start_time": self.start_time.isoformat() if self.start_time else None,
                                                                               ^
security/bots/simple_messenger_test.py:304:80: E501 line too long (81 > 79 characters)
                "end_time": self.end_time.isoformat() if self.end_time else None,
                                                                               ^
security/bots/simple_messenger_test.py:305:80: E501 line too long (124 > 79 characters)
                "duration": (self.end_time - self.start_time).total_seconds() if self.start_time and self.end_time else None
                                                                               ^
security/bots/simple_messenger_test.py:310:1: W293 blank line contains whitespace
        
^
security/bots/simple_messenger_test.py:312:80: E501 line too long (83 > 79 characters)
        with open("simple_messenger_test_report.json", "w", encoding="utf-8") as f:
                                                                               ^
security/bots/simple_messenger_test.py:314:1: W293 blank line contains whitespace
        
^
security/bots/simple_messenger_test.py:315:15: F541 f-string is missing placeholders
        print(f"✅ Отчет сохранен: simple_messenger_test_report.json")
              ^
security/bots/simple_messenger_test.py:317:1: W293 blank line contains whitespace
        
^
security/bots/simple_messenger_test.py:319:1: W293 blank line contains whitespace
    
^
security/bots/simple_messenger_test.py:323:1: W293 blank line contains whitespace
        
^
security/bots/simple_messenger_test.py:324:80: E501 line too long (108 > 79 characters)
        if "bot_creation" in self.test_results and self.test_results["bot_creation"]["status"] != "success":
                                                                               ^
security/bots/simple_messenger_test.py:326:1: W293 blank line contains whitespace
        
^
security/bots/simple_messenger_test.py:327:80: E501 line too long (109 > 79 characters)
        if "functionality" in self.test_results and self.test_results["functionality"]["success_rate"] < 100:
                                                                               ^
security/bots/simple_messenger_test.py:329:1: W293 blank line contains whitespace
        
^
security/bots/simple_messenger_test.py:330:80: E501 line too long (107 > 79 characters)
        if "code_quality" in self.test_results and self.test_results["code_quality"]["success_rate"] < 100:
                                                                               ^
security/bots/simple_messenger_test.py:332:1: W293 blank line contains whitespace
        
^
security/bots/simple_messenger_test.py:334:80: E501 line too long (98 > 79 characters)
            recommendations.append("Все тесты прошли успешно - система готова к следующему этапу")
                                                                               ^
security/bots/simple_messenger_test.py:335:1: W293 blank line contains whitespace
        
^
security/bots/simple_messenger_test.py:337:1: W293 blank line contains whitespace
    
^
security/bots/simple_messenger_test.py:342:1: W293 blank line contains whitespace
        
^
security/bots/simple_messenger_test.py:344:1: W293 blank line contains whitespace
        
^
security/bots/simple_messenger_test.py:347:13: F841 local variable 'creation_success' is assigned to but never used
            creation_success = await self.test_bot_creation()
            ^
security/bots/simple_messenger_test.py:348:1: W293 blank line contains whitespace
            
^
security/bots/simple_messenger_test.py:350:13: F841 local variable 'functionality_success' is assigned to but never used
            functionality_success = await self.test_bot_functionality()
            ^
security/bots/simple_messenger_test.py:351:1: W293 blank line contains whitespace
            
^
security/bots/simple_messenger_test.py:353:13: F841 local variable 'quality_success' is assigned to but never used
            quality_success = await self.test_code_quality()
            ^
security/bots/simple_messenger_test.py:354:1: W293 blank line contains whitespace
            
^
security/bots/simple_messenger_test.py:356:1: W293 blank line contains whitespace
            
^
security/bots/simple_messenger_test.py:359:1: W293 blank line contains whitespace
            
^
security/bots/simple_messenger_test.py:362:80: E501 line too long (95 > 79 characters)
            print(f"📊 Общая успешность: {report['test_summary']['overall_success_rate']:.1f}%")
                                                                               ^
security/bots/simple_messenger_test.py:363:80: E501 line too long (90 > 79 characters)
            print(f"⏱️ Время выполнения: {report['test_summary']['duration']:.2f} секунд")
                                                                               ^
security/bots/simple_messenger_test.py:365:1: W293 blank line contains whitespace
            
^
security/bots/simple_messenger_test.py:367:1: W293 blank line contains whitespace
            
^
security/bots/simple_messenger_test.py:377:1: W293 blank line contains whitespace
    
^
security/bots/simple_messenger_test.py:388:20: W292 no newline at end of file
    exit(exit_code)                   ^
security/bots/sleep_mode_manager.py:11:1: F401 'time' imported but unused
import time
^
security/bots/sleep_mode_manager.py:13:1: F401 'typing.List' imported but unused
from typing import Dict, List, Any, Optional
^
security/bots/sleep_mode_manager.py:13:1: F401 'typing.Optional' imported but unused
from typing import Dict, List, Any, Optional
^
security/bots/sleep_mode_manager.py:23:1: W293 blank line contains whitespace
    
^
security/bots/sleep_mode_manager.py:29:1: W293 blank line contains whitespace
        
^
security/bots/sleep_mode_manager.py:46:1: W293 blank line contains whitespace
        
^
security/bots/sleep_mode_manager.py:58:1: W293 blank line contains whitespace
    
^
security/bots/sleep_mode_manager.py:66:1: W293 blank line contains whitespace
    
^
security/bots/sleep_mode_manager.py:76:1: W293 blank line contains whitespace
            
^
security/bots/sleep_mode_manager.py:77:80: E501 line too long (85 > 79 characters)
            logger.info(f"Бот {bot_name} зарегистрирован в менеджере спящего режима")
                                                                               ^
security/bots/sleep_mode_manager.py:79:1: W293 blank line contains whitespace
            
^
security/bots/sleep_mode_manager.py:83:1: W293 blank line contains whitespace
    
^
security/bots/sleep_mode_manager.py:84:80: E501 line too long (90 > 79 characters)
    async def put_bot_to_sleep(self, bot_name: str, reason: str = "Manual sleep") -> bool:
                                                                               ^
security/bots/sleep_mode_manager.py:90:1: W293 blank line contains whitespace
            
^
security/bots/sleep_mode_manager.py:93:1: W293 blank line contains whitespace
            
^
security/bots/sleep_mode_manager.py:98:1: W293 blank line contains whitespace
            
^
security/bots/sleep_mode_manager.py:101:1: W293 blank line contains whitespace
            
^
security/bots/sleep_mode_manager.py:105:1: W293 blank line contains whitespace
            
^
security/bots/sleep_mode_manager.py:111:1: W293 blank line contains whitespace
            
^
security/bots/sleep_mode_manager.py:118:1: W293 blank line contains whitespace
            
^
security/bots/sleep_mode_manager.py:121:1: W293 blank line contains whitespace
            
^
security/bots/sleep_mode_manager.py:123:80: E501 line too long (80 > 79 characters)
            logger.error(f"Ошибка перевода бота {bot_name} в спящий режим: {e}")
                                                                               ^
security/bots/sleep_mode_manager.py:125:1: W293 blank line contains whitespace
    
^
security/bots/sleep_mode_manager.py:132:1: W293 blank line contains whitespace
            
^
security/bots/sleep_mode_manager.py:134:1: W293 blank line contains whitespace
            
^
security/bots/sleep_mode_manager.py:139:1: W293 blank line contains whitespace
            
^
security/bots/sleep_mode_manager.py:142:1: W293 blank line contains whitespace
            
^
security/bots/sleep_mode_manager.py:150:1: W293 blank line contains whitespace
            
^
security/bots/sleep_mode_manager.py:155:1: W293 blank line contains whitespace
            
^
security/bots/sleep_mode_manager.py:159:80: E501 line too long (101 > 79 characters)
                "sleep_duration": (bot_info["wake_up_time"] - bot_info["sleep_time"]).total_seconds()
                                                                               ^
security/bots/sleep_mode_manager.py:161:1: W293 blank line contains whitespace
            
^
security/bots/sleep_mode_manager.py:164:1: W293 blank line contains whitespace
            
^
security/bots/sleep_mode_manager.py:168:1: W293 blank line contains whitespace
    
^
security/bots/sleep_mode_manager.py:169:80: E501 line too long (88 > 79 characters)
    async def _save_bot_state(self, bot_name: str, bot_instance: Any) -> Dict[str, Any]:
                                                                               ^
security/bots/sleep_mode_manager.py:179:1: W293 blank line contains whitespace
            
^
security/bots/sleep_mode_manager.py:184:1: W293 blank line contains whitespace
            
^
security/bots/sleep_mode_manager.py:187:1: W293 blank line contains whitespace
            
^
security/bots/sleep_mode_manager.py:191:1: W293 blank line contains whitespace
    
^
security/bots/sleep_mode_manager.py:192:80: E501 line too long (90 > 79 characters)
    async def _restore_bot_state(self, bot_name: str, sleep_data: Dict[str, Any]) -> bool:
                                                                               ^
security/bots/sleep_mode_manager.py:196:80: E501 line too long (90 > 79 characters)
                logger.warning(f"Нет данных для восстановления состояния бота {bot_name}")
                                                                               ^
security/bots/sleep_mode_manager.py:198:1: W293 blank line contains whitespace
            
^
security/bots/sleep_mode_manager.py:204:1: W293 blank line contains whitespace
            
^
security/bots/sleep_mode_manager.py:207:1: W293 blank line contains whitespace
            
^
security/bots/sleep_mode_manager.py:209:80: E501 line too long (81 > 79 characters)
            logger.error(f"Ошибка восстановления состояния бота {bot_name}: {e}")
                                                                               ^
security/bots/sleep_mode_manager.py:211:1: W293 blank line contains whitespace
    
^
security/bots/sleep_mode_manager.py:212:80: E501 line too long (91 > 79 characters)
    async def put_all_bots_to_sleep(self, reason: str = "System sleep") -> Dict[str, bool]:
                                                                               ^
security/bots/sleep_mode_manager.py:215:1: W293 blank line contains whitespace
        
^
security/bots/sleep_mode_manager.py:218:80: E501 line too long (80 > 79 characters)
            if self.sleep_config["bots"].get(bot_name, {}).get("enabled", True):
                                                                               ^
security/bots/sleep_mode_manager.py:225:1: W293 blank line contains whitespace
        
^
security/bots/sleep_mode_manager.py:228:1: W293 blank line contains whitespace
        
^
security/bots/sleep_mode_manager.py:231:1: W293 blank line contains whitespace
    
^
security/bots/sleep_mode_manager.py:235:1: W293 blank line contains whitespace
        
^
security/bots/sleep_mode_manager.py:238:80: E501 line too long (80 > 79 characters)
            if self.sleep_config["bots"].get(bot_name, {}).get("enabled", True):
                                                                               ^
security/bots/sleep_mode_manager.py:245:1: W293 blank line contains whitespace
        
^
security/bots/sleep_mode_manager.py:248:1: W293 blank line contains whitespace
        
^
security/bots/sleep_mode_manager.py:251:1: W293 blank line contains whitespace
    
^
security/bots/sleep_mode_manager.py:257:80: E501 line too long (109 > 79 characters)
            "sleeping_bots": len([b for b in self.bot_instances.values() if b["sleep_state"] == "sleeping"]),
                                                                               ^
security/bots/sleep_mode_manager.py:258:80: E501 line too long (103 > 79 characters)
            "awake_bots": len([b for b in self.bot_instances.values() if b["sleep_state"] == "awake"]),
                                                                               ^
security/bots/sleep_mode_manager.py:262:1: W293 blank line contains whitespace
    
^
security/bots/sleep_mode_manager.py:267:1: W293 blank line contains whitespace
        
^
security/bots/sleep_mode_manager.py:268:80: E501 line too long (82 > 79 characters)
        auto_sleep_minutes = self.sleep_config.get("auto_sleep_after_minutes", 30)
                                                                               ^
security/bots/sleep_mode_manager.py:270:1: W293 blank line contains whitespace
        
^
security/bots/sleep_mode_manager.py:274:80: E501 line too long (86 > 79 characters)
                inactive_minutes = (current_time - last_activity).total_seconds() / 60
                                                                               ^
security/bots/sleep_mode_manager.py:275:1: W293 blank line contains whitespace
                
^
security/bots/sleep_mode_manager.py:277:80: E501 line too long (123 > 79 characters)
                    await self.put_bot_to_sleep(bot_name, f"Auto sleep after {inactive_minutes:.1f} minutes of inactivity")
                                                                               ^
security/bots/sleep_mode_manager.py:278:1: W293 blank line contains whitespace
    
^
security/bots/sleep_mode_manager.py:281:80: E501 line too long (112 > 79 characters)
        sleeping_bots = [name for name, info in self.bot_instances.items() if info["sleep_state"] == "sleeping"]
                                                                               ^
security/bots/sleep_mode_manager.py:282:80: E501 line too long (106 > 79 characters)
        awake_bots = [name for name, info in self.bot_instances.items() if info["sleep_state"] == "awake"]
                                                                               ^
security/bots/sleep_mode_manager.py:283:1: W293 blank line contains whitespace
        
^
security/bots/sleep_mode_manager.py:296:1: W293 blank line contains whitespace
        
^
security/bots/sleep_mode_manager.py:300:1: W293 blank line contains whitespace
        
^
security/bots/sleep_mode_manager.py:307:1: W293 blank line contains whitespace
    
^
security/bots/sleep_mode_manager.py:310:1: W293 blank line contains whitespace
    
^
security/bots/sleep_mode_manager.py:318:1: W293 blank line contains whitespace
        
^
security/bots/sleep_mode_manager.py:322:1: W293 blank line contains whitespace
        
^
security/bots/sleep_mode_manager.py:326:1: W293 blank line contains whitespace
    
^
security/bots/sleep_mode_manager.py:336:1: W293 blank line contains whitespace
    
^
security/bots/sleep_mode_manager.py:339:1: W293 blank line contains whitespace
    
^
security/bots/sleep_mode_manager.py:341:1: W293 blank line contains whitespace
    
^
security/bots/sleep_mode_manager.py:345:80: E501 line too long (83 > 79 characters)
    print(f"✅ Переведено в спящий режим: {successful_sleeps}/{len(sleep_results)}")
                                                                               ^
security/bots/sleep_mode_manager.py:346:1: W293 blank line contains whitespace
    
^
security/bots/sleep_mode_manager.py:349:80: E501 line too long (80 > 79 characters)
    successful_wake_ups = sum(1 for success in wake_results.values() if success)
                                                                               ^
security/bots/sleep_mode_manager.py:351:1: W293 blank line contains whitespace
    
^
security/bots/sleep_mode_manager.py:354:80: E501 line too long (89 > 79 characters)
    print(f"✅ Статус: {status['awake_bots']} активных, {status['sleeping_bots']} спящих")
                                                                               ^
security/bots/sleep_mode_manager.py:355:1: W293 blank line contains whitespace
    
^
security/bots/sleep_mode_manager.py:359:1: W293 blank line contains whitespace
    
^
security/bots/sleep_mode_manager.py:360:80: E501 line too long (88 > 79 characters)
    return successful_sleeps == len(test_bots) and successful_wake_ups == len(test_bots)
                                                                               ^
security/bots/sleep_mode_manager.py:366:1: W293 blank line contains whitespace
    
^
security/bots/sleep_mode_manager.py:377:20: W292 no newline at end of file
    exit(exit_code)                   ^
security/bots/telegram_security_bot.py:50:1: F401 'core.base.ComponentStatus' imported but unused
from core.base import ComponentStatus, SecurityBase, SecurityLevel
^
security/bots/telegram_security_bot.py:50:1: F401 'core.base.SecurityLevel' imported but unused
from core.base import ComponentStatus, SecurityBase, SecurityLevel
^
security/bots/telegram_security_bot.py:53:1: F401 'json' imported but unused
import json
^
security/bots/telegram_security_bot.py:56:1: F401 'datetime.timedelta' imported but unused
from datetime import datetime, timedelta
^
security/bots/telegram_security_bot.py:58:1: F401 'typing.Tuple' imported but unused
from typing import Dict, List, Optional, Any, Tuple
^
security/bots/telegram_security_bot.py:59:1: F401 'dataclasses.dataclass' imported but unused
from dataclasses import dataclass, field
^
security/bots/telegram_security_bot.py:59:1: F401 'dataclasses.field' imported but unused
from dataclasses import dataclass, field
^
security/bots/telegram_security_bot.py:61:1: F401 'collections.defaultdict' imported but unused
from collections import defaultdict
^
security/bots/telegram_security_bot.py:66:80: E501 line too long (99 > 79 characters)
from sqlalchemy import create_engine, Column, String, Integer, DateTime, Boolean, JSON, Text, Float
                                                                               ^
security/bots/telegram_security_bot.py:69:1: F401 'pydantic.validator' imported but unused
from pydantic import BaseModel, Field, validator
^
security/bots/telegram_security_bot.py:70:1: F401 'prometheus_client.Histogram' imported but unused
from prometheus_client import Counter, Histogram, Gauge
^
security/bots/telegram_security_bot.py:71:1: F401 'numpy as np' imported but unused
import numpy as np
^
security/bots/telegram_security_bot.py:380:80: E501 line too long (80 > 79 characters)
                if self.monitoring_thread and self.monitoring_thread.is_alive():
                                                                               ^
security/bots/telegram_security_bot.py:460:80: E501 line too long (82 > 79 characters)
                    f"Загружено {len(self.monitored_chats)} мониторируемых чатов")
                                                                               ^
security/bots/telegram_security_bot.py:546:80: E501 line too long (87 > 79 characters)
            elif message_type in [TelegramMessageType.PHOTO, TelegramMessageType.VIDEO,
                                                                               ^
security/bots/telegram_security_bot.py:547:80: E501 line too long (91 > 79 characters)
                                  TelegramMessageType.DOCUMENT, TelegramMessageType.AUDIO]:
                                                                               ^
security/bots/telegram_security_bot.py:548:80: E501 line too long (81 > 79 characters)
                analysis_result = await self._analyze_media_content(message_data)
                                                                               ^
security/bots/telegram_security_bot.py:574:80: E501 line too long (87 > 79 characters)
                threat_level, is_spam, is_bot_activity, is_malicious, is_inappropriate)
                                                                               ^
security/bots/telegram_security_bot.py:656:80: E501 line too long (81 > 79 characters)
                1 for indicator in spam_indicators if indicator in content_lower)
                                                                               ^
security/bots/telegram_security_bot.py:671:80: E501 line too long (84 > 79 characters)
                1 for keyword in inappropriate_keywords if keyword in content_lower)
                                                                               ^
security/bots/telegram_security_bot.py:775:80: E501 line too long (109 > 79 characters)
            url_pattern = r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+'
                                                                               ^
security/bots/telegram_security_bot.py:828:80: E501 line too long (88 > 79 characters)
            if threat_level == ThreatLevel.CRITICAL or is_malicious or is_inappropriate:
                                                                               ^
security/bots/telegram_security_bot.py:842:80: E501 line too long (87 > 79 characters)
            self, message_data: Dict[str, Any], result: MessageAnalysisResult) -> None:
                                                                               ^
security/bots/telegram_security_bot.py:1008:80: E501 line too long (82 > 79 characters)
                    chat_messages = self.db_session.query(TelegramMessage).filter(
                                                                               ^
security/bots/telegram_security_bot.py:1011:80: E501 line too long (90 > 79 characters)
                    deleted_chat_messages = self.db_session.query(TelegramMessage).filter(
                                                                               ^
security/bots/telegram_security_bot.py:1069:80: E501 line too long (112 > 79 characters)
            "text": "Срочно! Заработайте 100000 рублей за день! Переходите по ссылке: http://fake-earnings.com",
                                                                               ^
security/bots/telegram_security_bot.py:1081:80: E501 line too long (99 > 79 characters)
            f"✅ Анализ сообщения: {result.threat_level.value} - {result.recommended_action.value}")
                                                                               ^
security/bots/telegram_security_bot.py:1090:80: E501 line too long (86 > 79 characters)
            f"✅ Отчет по безопасности: {report['threats_detected']} угроз обнаружено")
                                                                               ^
security/bots/website_navigation_bot.py:7:80: E501 line too long (88 > 79 characters)
"""
WebsiteNavigationBot - Бот навигации по сайтам
function_96: Интеллектуальный бот для безопасной навигации по веб-сайтам

Этот модуль предоставляет интеллектуального бота для безопасной навигации по веб-сайтам,
включающего:
- Мониторинг веб-трафика на подозрительную активность
- Детекция вредоносных сайтов и фишинга
- Защита от XSS и CSRF атак
- Контроль доступа к сайтам
- Анализ SSL сертификатов
- Блокировка нежелательного контента
- Мониторинг DNS запросов
- Анализ веб-приложений
- Защита от веб-атак
- Интеграция с браузерами

Основные возможности:
1. Умная навигация по сайтам
2. Детекция вредоносных сайтов
3. Защита от веб-атак
4. Контроль доступа
5. Анализ SSL сертификатов
6. Блокировка контента
7. Мониторинг DNS
8. Анализ веб-приложений
9. Защита от XSS/CSRF
10. Интеграция с браузерами

Технические детали:
- Использует ML для анализа веб-трафика
- Применяет NLP для анализа контента
- Интегрирует с браузерными API
- Использует криптографию для проверки SSL
- Применяет антивирусные движки
- Интегрирует с базами данных угроз
- Использует геолокацию для анализа
- Применяет поведенческий анализ
- Интегрирует с системами уведомлений
- Использует машинное обучение для адаптации

Автор: ALADDIN Security System
Версия: 2.0
Дата: 2025-01-27
Лицензия: MIT
"""
   
                                              
                            ^
security/bots/website_navigation_bot.py:50:1: F401 'core.base.ComponentStatus' imported but unused
from core.base import ComponentStatus, SecurityBase, SecurityLevel
^
security/bots/website_navigation_bot.py:50:1: F401 'core.base.SecurityLevel' imported but unused
from core.base import ComponentStatus, SecurityBase, SecurityLevel
^
security/bots/website_navigation_bot.py:53:1: F401 'json' imported but unused
import json
^
security/bots/website_navigation_bot.py:56:1: F401 'datetime.timedelta' imported but unused
from datetime import datetime, timedelta
^
security/bots/website_navigation_bot.py:58:1: F401 'typing.Tuple' imported but unused
from typing import Dict, List, Optional, Any, Tuple
^
security/bots/website_navigation_bot.py:59:1: F401 'dataclasses.dataclass' imported but unused
from dataclasses import dataclass, field
^
security/bots/website_navigation_bot.py:59:1: F401 'dataclasses.field' imported but unused
from dataclasses import dataclass, field
^
security/bots/website_navigation_bot.py:61:1: F401 'collections.defaultdict' imported but unused
from collections import defaultdict
^
security/bots/website_navigation_bot.py:66:80: E501 line too long (99 > 79 characters)
from sqlalchemy import create_engine, Column, String, Integer, DateTime, Boolean, JSON, Text, Float
                                                                               ^
security/bots/website_navigation_bot.py:69:1: F401 'pydantic.validator' imported but unused
from pydantic import BaseModel, Field, validator
^
security/bots/website_navigation_bot.py:70:1: F401 'prometheus_client.Histogram' imported but unused
from prometheus_client import Counter, Histogram, Gauge
^
security/bots/website_navigation_bot.py:71:1: F401 'numpy as np' imported but unused
import numpy as np
^
security/bots/website_navigation_bot.py:376:80: E501 line too long (80 > 79 characters)
                if self.monitoring_thread and self.monitoring_thread.is_alive():
                                                                               ^
security/bots/website_navigation_bot.py:454:80: E501 line too long (85 > 79 characters)
                    f"Загружено {len(self.blocked_domains)} заблокированных доменов")
                                                                               ^
security/bots/website_navigation_bot.py:565:80: E501 line too long (83 > 79 characters)
                threat_level, is_malicious, is_phishing, is_malware, is_suspicious)
                                                                               ^
security/bots/website_navigation_bot.py:768:80: E501 line too long (107 > 79 characters)
            elif any(keyword in domain_lower for keyword in ["social", "facebook", "twitter", "vk", "ok"]):
                                                                               ^
security/bots/website_navigation_bot.py:770:80: E501 line too long (100 > 79 characters)
            elif any(keyword in domain_lower for keyword in ["shop", "store", "market", "магазин"]):
                                                                               ^
security/bots/website_navigation_bot.py:772:80: E501 line too long (100 > 79 characters)
            elif any(keyword in domain_lower for keyword in ["bank", "банк", "finance", "финансы"]):
                                                                               ^
security/bots/website_navigation_bot.py:774:80: E501 line too long (107 > 79 characters)
            elif any(keyword in domain_lower for keyword in ["gov", "government", "гос", "правительство"]):
                                                                               ^
security/bots/website_navigation_bot.py:776:80: E501 line too long (106 > 79 characters)
            elif any(keyword in domain_lower for keyword in ["edu", "education", "университет", "школа"]):
                                                                               ^
security/bots/website_navigation_bot.py:778:80: E501 line too long (110 > 79 characters)
            elif any(keyword in domain_lower for keyword in ["entertainment", "game", "игра", "развлечение"]):
                                                                               ^
security/bots/website_navigation_bot.py:780:80: E501 line too long (98 > 79 characters)
            elif any(keyword in domain_lower for keyword in ["tech", "technology", "технологии"]):
                                                                               ^
security/bots/website_navigation_bot.py:782:80: E501 line too long (96 > 79 characters)
            elif any(keyword in domain_lower for keyword in ["health", "медицина", "здоровье"]):
                                                                               ^
security/bots/website_navigation_bot.py:800:80: E501 line too long (82 > 79 characters)
            if threat_level == ThreatLevel.CRITICAL or is_malicious or is_malware:
                                                                               ^
security/bots/website_navigation_bot.py:837:80: E501 line too long (88 > 79 characters)
                is_quarantined=result.recommended_action == NavigationAction.QUARANTINE,
                                                                               ^
security/bots/website_navigation_bot.py:926:80: E501 line too long (87 > 79 characters)
                    f"Сессия навигации {session_id} начата для пользователя {user_id}")
                                                                               ^
security/bots/website_navigation_bot.py:970:80: E501 line too long (82 > 79 characters)
                                    session_id: Optional[str] = None) -> Dict[str,
                                                                               ^
security/bots/website_navigation_bot.py:971:80: E501 line too long (83 > 79 characters)
                                                                              Any]:
                                                                               ^
security/bots/website_navigation_bot.py:1059:80: E501 line too long (95 > 79 characters)
            f"✅ Анализ сайта: {result.threat_level.value} - {result.recommended_action.value}")
                                                                               ^
security/bots/website_navigation_bot.py:1062:80: E501 line too long (88 > 79 characters)
        blocked = await bot.block_domain("malware.com", "malware", "Known malware site")
                                                                               ^
security/bots/website_navigation_bot.py:1068:80: E501 line too long (83 > 79 characters)
            f"✅ Отчет по навигации: {report['threats_detected']} угроз обнаружено")
                                                                               ^
security/bots/whatsapp_security_bot.py:50:1: F401 'core.base.ComponentStatus' imported but unused
from core.base import ComponentStatus, SecurityBase, SecurityLevel
^
security/bots/whatsapp_security_bot.py:50:1: F401 'core.base.SecurityLevel' imported but unused
from core.base import ComponentStatus, SecurityBase, SecurityLevel
^
security/bots/whatsapp_security_bot.py:53:1: F401 'json' imported but unused
import json
^
security/bots/whatsapp_security_bot.py:56:1: F401 'datetime.timedelta' imported but unused
from datetime import datetime, timedelta
^
security/bots/whatsapp_security_bot.py:58:1: F401 'typing.Tuple' imported but unused
from typing import Dict, List, Optional, Any, Tuple
^
security/bots/whatsapp_security_bot.py:59:1: F401 'dataclasses.dataclass' imported but unused
from dataclasses import dataclass, field
^
security/bots/whatsapp_security_bot.py:59:1: F401 'dataclasses.field' imported but unused
from dataclasses import dataclass, field
^
security/bots/whatsapp_security_bot.py:61:1: F401 'collections.defaultdict' imported but unused
from collections import defaultdict
^
security/bots/whatsapp_security_bot.py:66:80: E501 line too long (99 > 79 characters)
from sqlalchemy import create_engine, Column, String, Integer, DateTime, Boolean, JSON, Text, Float
                                                                               ^
security/bots/whatsapp_security_bot.py:69:1: F401 'pydantic.validator' imported but unused
from pydantic import BaseModel, Field, validator
^
security/bots/whatsapp_security_bot.py:70:1: F401 'prometheus_client.Histogram' imported but unused
from prometheus_client import Counter, Histogram, Gauge
^
security/bots/whatsapp_security_bot.py:71:1: F401 'numpy as np' imported but unused
import numpy as np
^
security/bots/whatsapp_security_bot.py:354:80: E501 line too long (80 > 79 characters)
                if self.monitoring_thread and self.monitoring_thread.is_alive():
                                                                               ^
security/bots/whatsapp_security_bot.py:432:80: E501 line too long (80 > 79 characters)
                    f"Загружено {len(self.security_rules)} правил безопасности")
                                                                               ^
security/bots/whatsapp_security_bot.py:502:80: E501 line too long (94 > 79 characters)
            elif message_type in [MessageType.IMAGE, MessageType.VIDEO, MessageType.DOCUMENT]:
                                                                               ^
security/bots/whatsapp_security_bot.py:503:80: E501 line too long (81 > 79 characters)
                analysis_result = await self._analyze_media_content(message_data)
                                                                               ^
security/bots/whatsapp_security_bot.py:601:80: E501 line too long (81 > 79 characters)
                1 for indicator in spam_indicators if indicator in content_lower)
                                                                               ^
security/bots/whatsapp_security_bot.py:616:80: E501 line too long (85 > 79 characters)
                1 for indicator in phishing_indicators if indicator in content_lower)
                                                                               ^
security/bots/whatsapp_security_bot.py:711:80: E501 line too long (109 > 79 characters)
            url_pattern = r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+'
                                                                               ^
security/bots/whatsapp_security_bot.py:773:80: E501 line too long (87 > 79 characters)
            self, message_data: Dict[str, Any], result: MessageAnalysisResult) -> None:
                                                                               ^
security/bots/whatsapp_security_bot.py:790:80: E501 line too long (80 > 79 characters)
                is_blocked=result.recommended_action in ["block", "quarantine"],
                                                                               ^
security/bots/whatsapp_security_bot.py:876:80: E501 line too long (82 > 79 characters)
                    chat_messages = self.db_session.query(WhatsAppMessage).filter(
                                                                               ^
security/bots/whatsapp_security_bot.py:879:80: E501 line too long (90 > 79 characters)
                    blocked_chat_messages = self.db_session.query(WhatsAppMessage).filter(
                                                                               ^
security/bots/whatsapp_security_bot.py:928:80: E501 line too long (89 > 79 characters)
            "content": "Срочно! Подтвердите ваши данные по ссылке: http://fake-bank.com",
                                                                               ^
security/bots/whatsapp_security_bot.py:936:80: E501 line too long (93 > 79 characters)
            f"✅ Анализ сообщения: {result.threat_level.value} - {result.recommended_action}")
                                                                               ^
security/bots/whatsapp_security_bot.py:945:80: E501 line too long (86 > 79 characters)
            f"✅ Отчет по безопасности: {report['threats_detected']} угроз обнаружено")
                                                                               ^
security/ci_cd/__init__.py:27:19: W291 trailing whitespace
    "BuildStatus", 
                  ^
security/ci_cd/__init__.py:35:2: W292 no newline at end of file
] ^
security/ci_cd/ci_pipeline_manager.py:21:80: E501 line too long (81 > 79 characters)
# from typing import Dict, List, Optional, Any, Union  # Python 2.7 compatibility
                                                                               ^
security/ci_cd/ci_pipeline_manager.py:125:80: E501 line too long (81 > 79 characters)
        """Объединяет пользовательскую конфигурацию с настройками по умолчанию"""
                                                                               ^
security/ci_cd/ci_pipeline_manager.py:129:80: E501 line too long (80 > 79 characters)
            elif isinstance(value, dict) and isinstance(self.config[key], dict):
                                                                               ^
security/ci_cd/ci_pipeline_manager.py:165:80: E501 line too long (83 > 79 characters)
            "start_time": self.start_time.isoformat() if self.start_time else None,
                                                                               ^
security/ci_cd/ci_pipeline_manager.py:205:80: E501 line too long (83 > 79 characters)
            "start_time": self.start_time.isoformat() if self.start_time else None,
                                                                               ^
security/ci_cd/ci_pipeline_manager.py:270:80: E501 line too long (90 > 79 characters)
            self.logger.error("Ошибка инициализации CIPipelineManager: {}".format(str(e)))
                                                                               ^
security/ci_cd/ci_pipeline_manager.py:293:80: E501 line too long (93 > 79 characters)
            self.logger.warning("Не удалось загрузить историю пайплайнов: {}".format(str(e)))
                                                                               ^
security/ci_cd/ci_pipeline_manager.py:302:80: E501 line too long (91 > 79 characters)
            self.logger.error("Не удалось сохранить историю пайплайнов: {}".format(str(e)))
                                                                               ^
security/ci_cd/ci_pipeline_manager.py:334:80: E501 line too long (101 > 79 characters)
            self.logger.info("Создан пайплайн: {} для окружения: {}".format(name, environment.value))
                                                                               ^
security/ci_cd/ci_pipeline_manager.py:339:80: E501 line too long (86 > 79 characters)
            self.logger.error("Ошибка создания пайплайна {}: {}".format(name, str(e)))
                                                                               ^
security/ci_cd/ci_pipeline_manager.py:369:80: E501 line too long (80 > 79 characters)
                "python -m bandit -r security/ -f json -o security_report.json",
                                                                               ^
security/ci_cd/ci_pipeline_manager.py:380:80: E501 line too long (81 > 79 characters)
                "python -m flake8 security/ --max-line-length=120 --format=json",
                                                                               ^
security/ci_cd/ci_pipeline_manager.py:390:80: E501 line too long (91 > 79 characters)
            "python scripts/deploy.py --environment={}".format(pipeline.environment.value),
                                                                               ^
security/ci_cd/ci_pipeline_manager.py:403:80: E501 line too long (80 > 79 characters)
                self.logger.error("Пайплайн {} не найден".format(pipeline_name))
                                                                               ^
security/ci_cd/ci_pipeline_manager.py:410:80: E501 line too long (84 > 79 characters)
                self.logger.warning("Пайплайн {} уже запущен".format(pipeline_name))
                                                                               ^
security/ci_cd/ci_pipeline_manager.py:432:80: E501 line too long (109 > 79 characters)
            self.logger.info("Запущен пайплайн: {} (build #{})".format(pipeline_name, pipeline.build_number))
                                                                               ^
security/ci_cd/ci_pipeline_manager.py:436:80: E501 line too long (94 > 79 characters)
            self.logger.error("Ошибка запуска пайплайна {}: {}".format(pipeline_name, str(e)))
                                                                               ^
security/ci_cd/ci_pipeline_manager.py:452:80: E501 line too long (92 > 79 characters)
                if stage.status == TestStatus.FAILED and stage.retry_count >= stage.retries:
                                                                               ^
security/ci_cd/ci_pipeline_manager.py:458:80: E501 line too long (89 > 79 characters)
            pipeline.duration = (pipeline.end_time - pipeline.start_time).total_seconds()
                                                                               ^
security/ci_cd/ci_pipeline_manager.py:482:80: E501 line too long (97 > 79 characters)
            self.logger.error("Ошибка выполнения пайплайна {}: {}".format(pipeline.name, str(e)))
                                                                               ^
security/ci_cd/ci_pipeline_manager.py:485:80: E501 line too long (89 > 79 characters)
            pipeline.duration = (pipeline.end_time - pipeline.start_time).total_seconds()
                                                                               ^
security/ci_cd/ci_pipeline_manager.py:490:80: E501 line too long (102 > 79 characters)
            self.logger.info("Выполнение этапа: {} в пайплайне: {}".format(stage.name, pipeline.name))
                                                                               ^
security/ci_cd/ci_pipeline_manager.py:505:80: E501 line too long (80 > 79 characters)
            stage.duration = (stage.end_time - stage.start_time).total_seconds()
                                                                               ^
security/ci_cd/ci_pipeline_manager.py:514:80: E501 line too long (84 > 79 characters)
                self.logger.error("Этап {} завершился с ошибкой".format(stage.name))
                                                                               ^
security/ci_cd/ci_pipeline_manager.py:527:80: E501 line too long (80 > 79 characters)
            stage.error = "Timeout: этап превысил максимальное время выполнения"
                                                                               ^
security/ci_cd/ci_pipeline_manager.py:528:80: E501 line too long (85 > 79 characters)
            self.logger.error("Этап {} превысил время выполнения".format(stage.name))
                                                                               ^
security/ci_cd/ci_pipeline_manager.py:533:80: E501 line too long (90 > 79 characters)
            self.logger.error("Ошибка выполнения этапа {}: {}".format(stage.name, str(e)))
                                                                               ^
security/ci_cd/ci_pipeline_manager.py:545:80: E501 line too long (97 > 79 characters)
        total_duration = self.metrics["average_duration"] * (self.metrics["total_pipelines"] - 1)
                                                                               ^
security/ci_cd/ci_pipeline_manager.py:547:80: E501 line too long (91 > 79 characters)
        self.metrics["average_duration"] = total_duration / self.metrics["total_pipelines"]
                                                                               ^
security/ci_cd/ci_pipeline_manager.py:552:80: E501 line too long (86 > 79 characters)
                self.metrics["successful_pipelines"] / self.metrics["total_pipelines"]
                                                                               ^
security/ci_cd/ci_pipeline_manager.py:570:80: E501 line too long (92 > 79 characters)
            self.logger.info("Отправка уведомлений для пайплайна: {}".format(pipeline.name))
                                                                               ^
security/ci_cd/ci_pipeline_manager.py:583:80: E501 line too long (82 > 79 characters)
        return [pipeline.to_dict() for pipeline in self.active_pipelines.values()]
                                                                               ^
security/ci_cd/ci_pipeline_manager.py:599:80: E501 line too long (93 > 79 characters)
            self.logger.error("Ошибка отмены пайплайна {}: {}".format(pipeline_name, str(e)))
                                                                               ^
security/ci_cd/ci_pipeline_manager.py:612:80: E501 line too long (82 > 79 characters)
            cutoff_date = datetime.now() - timedelta(days=self.cleanup_after_days)
                                                                               ^
security/ci_cd/ci_pipeline_manager.py:641:80: E501 line too long (86 > 79 characters)
            self.logger.error("Ошибка остановки CIPipelineManager: {}".format(str(e)))
                                                                               ^
security/circuit_breaker.py:13:1: F401 'datetime.timedelta' imported but unused
from datetime import datetime, timedelta
^
security/circuit_breaker.py:34:1: W293 blank line contains whitespace
    
^
security/circuit_breaker.py:39:1: W293 blank line contains whitespace
    
^
security/circuit_breaker.py:44:1: W293 blank line contains whitespace
    
^
security/circuit_breaker.py:47:40: E261 at least two spaces before inline comment
    max_recovery_timeout: float = 300.0 # Максимальное время восстановления
                                       ^
security/circuit_breaker.py:52:1: W293 blank line contains whitespace
    
^
security/circuit_breaker.py:53:80: E501 line too long (81 > 79 characters)
    def __init__(self, name: str, config: Optional[CircuitBreakerConfig] = None):
                                                                               ^
security/circuit_breaker.py:56:1: W293 blank line contains whitespace
        
^
security/circuit_breaker.py:63:1: W293 blank line contains whitespace
        
^
security/circuit_breaker.py:68:1: W293 blank line contains whitespace
        
^
security/circuit_breaker.py:72:1: W293 blank line contains whitespace
        
^
security/circuit_breaker.py:75:1: W293 blank line contains whitespace
        
^
security/circuit_breaker.py:79:1: W293 blank line contains whitespace
    
^
security/circuit_breaker.py:92:1: W293 blank line contains whitespace
            
^
security/circuit_breaker.py:99:1: W293 blank line contains whitespace
                
^
security/circuit_breaker.py:103:1: W293 blank line contains whitespace
    
^
security/circuit_breaker.py:108:1: W293 blank line contains whitespace
        
^
security/circuit_breaker.py:111:1: W293 blank line contains whitespace
    
^
security/circuit_breaker.py:116:1: W293 blank line contains whitespace
        
^
security/circuit_breaker.py:120:1: W293 blank line contains whitespace
        
^
security/circuit_breaker.py:124:1: W293 blank line contains whitespace
        
^
security/circuit_breaker.py:126:53: W291 trailing whitespace
        if (self.state == CircuitState.HALF_OPEN and 
                                                    ^
security/circuit_breaker.py:127:13: E129 visually indented line with same indent as next logical line
            self.success_count >= self.config.success_threshold):
            ^
security/circuit_breaker.py:130:1: W293 blank line contains whitespace
    
^
security/circuit_breaker.py:135:1: W293 blank line contains whitespace
        
^
security/circuit_breaker.py:139:1: W293 blank line contains whitespace
        
^
security/circuit_breaker.py:143:1: W293 blank line contains whitespace
        
^
security/circuit_breaker.py:147:1: W293 blank line contains whitespace
    
^
security/circuit_breaker.py:153:1: W293 blank line contains whitespace
        
^
security/circuit_breaker.py:156:80: E501 line too long (90 > 79 characters)
        error_rate = sum(1 for success in recent_calls if not success) / len(recent_calls)
                                                                               ^
security/circuit_breaker.py:157:1: W293 blank line contains whitespace
        
^
security/circuit_breaker.py:165:1: W293 blank line contains whitespace
        
^
security/circuit_breaker.py:169:66: W291 trailing whitespace
        return (error_rate >= self.config.error_rate_threshold or 
                                                                 ^
security/circuit_breaker.py:171:1: W293 blank line contains whitespace
    
^
security/circuit_breaker.py:176:1: W293 blank line contains whitespace
        
^
security/circuit_breaker.py:179:80: E501 line too long (90 > 79 characters)
        error_rate = sum(1 for success in recent_calls if not success) / len(recent_calls)
                                                                               ^
security/circuit_breaker.py:180:1: W293 blank line contains whitespace
        
^
security/circuit_breaker.py:184:80: E501 line too long (114 > 79 characters)
            response_time_std = statistics.stdev(self.response_times[-20:]) if len(self.response_times) > 1 else 0
                                                                               ^
security/circuit_breaker.py:187:13: F841 local variable 'response_time_std' is assigned to but never used
            response_time_std = 0
            ^
security/circuit_breaker.py:188:1: W293 blank line contains whitespace
        
^
security/circuit_breaker.py:200:1: W293 blank line contains whitespace
        
^
security/circuit_breaker.py:212:1: W293 blank line contains whitespace
    
^
security/circuit_breaker.py:217:1: W293 blank line contains whitespace
        
^
security/circuit_breaker.py:224:1: W293 blank line contains whitespace
        
^
security/circuit_breaker.py:228:1: W293 blank line contains whitespace
    
^
security/circuit_breaker.py:233:1: W293 blank line contains whitespace
        
^
security/circuit_breaker.py:236:1: W293 blank line contains whitespace
    
^
security/circuit_breaker.py:240:1: W293 blank line contains whitespace
        
^
security/circuit_breaker.py:254:1: W293 blank line contains whitespace
    
^
security/circuit_breaker.py:259:1: W293 blank line contains whitespace
        
^
security/circuit_breaker.py:261:80: E501 line too long (84 > 79 characters)
        return sum(1 for success in recent_calls if not success) / len(recent_calls)
                                                                               ^
security/circuit_breaker.py:262:1: W293 blank line contains whitespace
    
^
security/circuit_breaker.py:273:53: W291 trailing whitespace
                statistics.mean(self.response_times) 
                                                    ^
security/circuit_breaker.py:277:51: W291 trailing whitespace
                self.last_failure_time.isoformat() 
                                                  ^
security/circuit_breaker.py:281:51: W291 trailing whitespace
                self.last_success_time.isoformat() 
                                                  ^
security/circuit_breaker.py:291:1: W293 blank line contains whitespace
    
^
security/circuit_breaker.py:311:80: E501 line too long (105 > 79 characters)
def get_circuit_breaker(name: str, config: Optional[CircuitBreakerConfig] = None) -> SmartCircuitBreaker:
                                                                               ^
security/circuit_breaker.py:320:76: W292 no newline at end of file
    return {name: cb.get_stats() for name, cb in _circuit_breakers.items()}                                                                           ^
security/compliance/__init__.py:21:2: W292 no newline at end of file
] ^
security/compliance/coppa_compliance_manager.py:210:80: E501 line too long (100 > 79 characters)
                    f"Согласие родителей не требуется для ребенка {child_id} (возраст {child.age})")
                                                                               ^
security/compliance/coppa_compliance_manager.py:371:80: E501 line too long (109 > 79 characters)
                    "unresolved": len([v for v in self.violations.values() if v.get("status") != "resolved"])
                                                                               ^
security/compliance/coppa_compliance_manager.py:439:80: E501 line too long (90 > 79 characters)
        f"Отчет о соответствии COPPA: {json.dumps(report, indent=2, ensure_ascii=False)}")
                                                                               ^
security/compliance/russian_child_protection_manager.py:4:80: E501 line too long (83 > 79 characters)
"""
Russian Child Protection Compliance Manager - Соответствие Russian Child Protection
Система соответствия американскому закону о защите детей в интернете

Функция: RussianChildProtectionManager
Приоритет: ВЫСОКИЙ
Версия: 1.0
Дата: 2025-09-07
"""
   
                                                                           ^
security/compliance/russian_child_protection_manager.py:64:80: E501 line too long (93 > 79 characters)
    """
    Менеджер соответствия Russian Child Protection (Children's Online Privacy Protection Act)

    Обеспечивает соответствие американскому закону о защите детей в интернете:
    - Согласие родителей на сбор данных детей младше 13 лет
    - Ограничения на сбор персональной информации
    - Право родителей на удаление данных детей
    - Защита от таргетированной рекламы
    """
       
                                                                       ^
security/compliance/russian_child_protection_manager.py:118:80: E501 line too long (90 > 79 characters)
        self.logger.info("Инициализация системы соответствия Russian Child Protection...")
                                                                               ^
security/compliance/russian_child_protection_manager.py:126:80: E501 line too long (90 > 79 characters)
        self.logger.info("Система соответствия Russian Child Protection инициализирована")
                                                                               ^
security/compliance/russian_child_protection_manager.py:137:80: E501 line too long (87 > 79 characters)
        self.logger.info("Настройка мониторинга нарушений Russian Child Protection...")
                                                                               ^
security/compliance/russian_child_protection_manager.py:210:80: E501 line too long (100 > 79 characters)
                    f"Согласие родителей не требуется для ребенка {child_id} (возраст {child.age})")
                                                                               ^
security/compliance/russian_child_protection_manager.py:263:80: E501 line too long (96 > 79 characters)
                    child_id, f"Нарушение Russian Child Protection при сборе {data_type.value}")
                                                                               ^
security/compliance/russian_child_protection_manager.py:320:80: E501 line too long (94 > 79 characters)
        self.log_activity(f"Зафиксировано нарушение Russian Child Protection: {violation_id}")
                                                                               ^
security/compliance/russian_child_protection_manager.py:371:80: E501 line too long (109 > 79 characters)
                    "unresolved": len([v for v in self.violations.values() if v.get("status") != "resolved"])
                                                                               ^
security/compliance/russian_child_protection_manager.py:417:80: E501 line too long (85 > 79 characters)
            self.logger.info("Сохранение данных системы Russian Child Protection...")
                                                                               ^
security/compliance/russian_child_protection_manager.py:439:80: E501 line too long (109 > 79 characters)
        f"Отчет о соответствии Russian Child Protection: {json.dumps(report, indent=2, ensure_ascii=False)}")
                                                                               ^
security/compliance/russian_data_protection_manager.py:29:80: E501 line too long (81 > 79 characters)
    LEGAL_OBLIGATION = "legal_obligation"      # Исполнение правовых обязательств
                                                                               ^
security/compliance/russian_data_protection_manager.py:46:80: E501 line too long (83 > 79 characters)
    UNAUTHORIZED_ACCESS = "unauthorized_access"        # Несанкционированный доступ
                                                                               ^
security/compliance/russian_data_protection_manager.py:48:80: E501 line too long (88 > 79 characters)
    UNAUTHORIZED_PROCESSING = "unauthorized_processing"  # Несанкционированная обработка
                                                                               ^
security/compliance/russian_data_protection_manager.py:51:80: E501 line too long (82 > 79 characters)
    RETENTION_VIOLATION = "retention_violation"        # Нарушение сроков хранения
                                                                               ^
security/compliance/russian_data_protection_manager.py:190:80: E501 line too long (92 > 79 characters)
                data_categories=subject_data.get("data_categories", [DataCategory.GENERAL]),
                                                                               ^
security/compliance/russian_data_protection_manager.py:191:80: E501 line too long (108 > 79 characters)
                processing_purposes=subject_data.get("processing_purposes", [DataProcessingPurpose.CONSENT])
                                                                               ^
security/compliance/russian_data_protection_manager.py:491:80: E501 line too long (110 > 79 characters)
                    "unresolved": len([v for v in self.violations.values() if v.get("status") != "resolved"]),
                                                                               ^
security/compliance/russian_data_protection_manager.py:492:80: E501 line too long (109 > 79 characters)
                    "critical": len([v for v in self.violations.values() if v.get("severity") == "critical"])
                                                                               ^
security/compliance/russian_data_protection_manager.py:564:80: E501 line too long (84 > 79 characters)
        f"Отчет о соответствии: {json.dumps(report, indent=2, ensure_ascii=False)}")
                                                                               ^
security/compliance_manager.py:70:80: E501 line too long (102 > 79 characters)
    def update_status(self, new_status: ComplianceStatus, assessment_date: Optional[datetime] = None):
                                                                               ^
security/compliance_manager.py:74:80: E501 line too long (95 > 79 characters)
        self.next_assessment = self.last_assessment + timedelta(days=self.assessment_frequency)
                                                                               ^
security/compliance_manager.py:76:80: E501 line too long (99 > 79 characters)
    def add_control(self, control_id: str, control_name: str, control_type: str, description: str):
                                                                               ^
security/compliance_manager.py:89:80: E501 line too long (93 > 79 characters)
    def add_evidence(self, evidence_type: str, description: str, data: Optional[Any] = None):
                                                                               ^
security/compliance_manager.py:111:80: E501 line too long (100 > 79 characters)
            "last_assessment": (self.last_assessment.isoformat() if self.last_assessment else None),
                                                                               ^
security/compliance_manager.py:112:80: E501 line too long (100 > 79 characters)
            "next_assessment": (self.next_assessment.isoformat() if self.next_assessment else None),
                                                                               ^
security/compliance_manager.py:124:80: E501 line too long (97 > 79 characters)
    def __init__(self, name: str = "ComplianceManager", config: Optional[Dict[str, Any]] = None):
                                                                               ^
security/compliance_manager.py:128:80: E501 line too long (97 > 79 characters)
        self.assessment_interval = config.get("assessment_interval", 30) if config else 30  # дни
                                                                               ^
security/compliance_manager.py:129:80: E501 line too long (86 > 79 characters)
        self.auto_assessment = config.get("auto_assessment", True) if config else True
                                                                               ^
security/compliance_manager.py:130:80: E501 line too long (84 > 79 characters)
        self.alert_threshold = config.get("alert_threshold", 0.8) if config else 0.8
                                                                               ^
security/compliance_manager.py:131:80: E501 line too long (88 > 79 characters)
        self.enable_reporting = config.get("enable_reporting", True) if config else True
                                                                               ^
security/compliance_manager.py:149:80: E501 line too long (94 > 79 characters)
            self.log_activity(f"Инициализация менеджера соответствия требованиям {self.name}")
                                                                               ^
security/compliance_manager.py:168:80: E501 line too long (103 > 79 characters)
            self.log_activity(f"Менеджер соответствия требованиям {self.name} успешно инициализирован")
                                                                               ^
security/compliance_manager.py:174:80: E501 line too long (92 > 79 characters)
                f"Ошибка инициализации менеджера соответствия требованиям {self.name}: {e}",
                                                                               ^
security/compliance_manager.py:195:80: E501 line too long (82 > 79 characters)
                "description": "Стандарт управления информационной безопасностью",
                                                                               ^
security/compliance_manager.py:206:80: E501 line too long (87 > 79 characters)
                "description": "Стандарт безопасности данных индустрии платежных карт",
                                                                               ^
security/compliance_manager.py:217:80: E501 line too long (80 > 79 characters)
                "description": "Федеральный закон о защите персональных данных",
                                                                               ^
security/compliance_manager.py:235:80: E501 line too long (95 > 79 characters)
                "description": "Обеспечение правовой основы для обработки персональных данных",
                                                                               ^
security/compliance_manager.py:243:80: E501 line too long (95 > 79 characters)
                "description": "Разработка и поддержание политики информационной безопасности",
                                                                               ^
security/compliance_manager.py:251:80: E501 line too long (94 > 79 characters)
                "description": "Защита данных платежных карт от несанкционированного доступа",
                                                                               ^
security/compliance_manager.py:259:80: E501 line too long (94 > 79 characters)
                "description": "Получение согласия субъекта персональных данных на обработку",
                                                                               ^
security/compliance_manager.py:278:80: E501 line too long (95 > 79 characters)
        self.log_activity(f"Создано {len(basic_requirements)} базовых требований соответствия")
                                                                               ^
security/compliance_manager.py:302:80: E501 line too long (103 > 79 characters)
                self.log_activity(f"Требование {requirement.requirement_id} уже существует", "warning")
                                                                               ^
security/compliance_manager.py:308:80: E501 line too long (88 > 79 characters)
            self.log_activity(f"Добавлено требование соответствия: {requirement.title}")
                                                                               ^
security/compliance_manager.py:334:80: E501 line too long (86 > 79 characters)
                return False, ComplianceStatus.NOT_APPLICABLE, "Требование не найдено"
                                                                               ^
security/compliance_manager.py:339:80: E501 line too long (93 > 79 characters)
            compliance_score = self._calculate_compliance_score(requirement, assessment_data)
                                                                               ^
security/compliance_manager.py:359:80: E501 line too long (102 > 79 characters)
            self._save_assessment_history(requirement_id, assessment_data, assessor, compliance_score)
                                                                               ^
security/compliance_manager.py:363:80: E501 line too long (109 > 79 characters)
            self.log_activity(f"Оценка требования {requirement_id}: {status.value} ({compliance_score:.2f})")
                                                                               ^
security/compliance_manager.py:370:80: E501 line too long (120 > 79 characters)
    def _calculate_compliance_score(self, requirement: ComplianceRequirement, assessment_data: Dict[str, Any]) -> float:
                                                                               ^
security/compliance_manager.py:380:80: E501 line too long (81 > 79 characters)
                    control_score = assessment_data[control_id].get("score", 0.0)
                                                                               ^
security/compliance_manager.py:381:80: E501 line too long (83 > 79 characters)
                    control_weight = assessment_data[control_id].get("weight", 1.0)
                                                                               ^
security/compliance_manager.py:394:80: E501 line too long (83 > 79 characters)
                final_score = (score / total_weight * 0.8) + (evidence_score * 0.2)
                                                                               ^
security/compliance_manager.py:401:80: E501 line too long (82 > 79 characters)
            self.log_activity(f"Ошибка расчета оценки соответствия: {e}", "error")
                                                                               ^
security/compliance_manager.py:404:80: E501 line too long (106 > 79 characters)
    def _update_compliance_statistics(self, requirement: ComplianceRequirement, status: ComplianceStatus):
                                                                               ^
security/compliance_manager.py:414:80: E501 line too long (91 > 79 characters)
            compliance_rate = self.compliant_requirements / max(1, self.total_requirements)
                                                                               ^
security/compliance_manager.py:416:80: E501 line too long (99 > 79 characters)
                self.log_activity(f"Низкий уровень соответствия: {compliance_rate:.2f}", "warning")
                                                                               ^
security/compliance_manager.py:447:80: E501 line too long (80 > 79 characters)
            self.log_activity(f"Ошибка сохранения истории оценки: {e}", "error")
                                                                               ^
security/compliance_manager.py:464:80: E501 line too long (97 > 79 characters)
    def get_requirements_by_standard(self, standard: ComplianceStandard) -> List[Dict[str, Any]]:
                                                                               ^
security/compliance_manager.py:474:80: E501 line too long (96 > 79 characters)
        return [req.to_dict() for req in self.requirements.values() if req.standard == standard]
                                                                               ^
security/compliance_manager.py:476:80: E501 line too long (91 > 79 characters)
    def get_requirements_by_status(self, status: ComplianceStatus) -> List[Dict[str, Any]]:
                                                                               ^
security/compliance_manager.py:486:80: E501 line too long (92 > 79 characters)
        return [req.to_dict() for req in self.requirements.values() if req.status == status]
                                                                               ^
security/compliance_manager.py:488:80: E501 line too long (82 > 79 characters)
    def get_requirements_by_category(self, category: str) -> List[Dict[str, Any]]:
                                                                               ^
security/compliance_manager.py:498:80: E501 line too long (96 > 79 characters)
        return [req.to_dict() for req in self.requirements.values() if req.category == category]
                                                                               ^
security/compliance_manager.py:526:80: E501 line too long (88 > 79 characters)
            requirement.add_control(control_id, control_name, control_type, description)
                                                                               ^
security/compliance_manager.py:528:80: E501 line too long (90 > 79 characters)
            self.log_activity(f"Контрольная мера добавлена к требованию {requirement_id}")
                                                                               ^
security/compliance_manager.py:532:80: E501 line too long (82 > 79 characters)
            self.log_activity(f"Ошибка добавления контрольной меры: {e}", "error")
                                                                               ^
security/compliance_manager.py:561:80: E501 line too long (88 > 79 characters)
            self.log_activity(f"Доказательство добавлено к требованию {requirement_id}")
                                                                               ^
security/compliance_manager.py:565:80: E501 line too long (80 > 79 characters)
            self.log_activity(f"Ошибка добавления доказательства: {e}", "error")
                                                                               ^
security/compliance_manager.py:608:80: E501 line too long (84 > 79 characters)
            self.log_activity(f"Ошибка создания задачи по устранению: {e}", "error")
                                                                               ^
security/compliance_manager.py:612:80: E501 line too long (85 > 79 characters)
        self, task_id: str, completed_by: str, completion_notes: Optional[str] = None
                                                                               ^
security/compliance_manager.py:644:80: E501 line too long (101 > 79 characters)
    def get_compliance_report(self, standard: Optional[ComplianceStandard] = None) -> Dict[str, Any]:
                                                                               ^
security/compliance_manager.py:649:80: E501 line too long (81 > 79 characters)
        """
        Получение отчета о соответствии

        Args:
            standard: Стандарт соответствия (если None, возвращается общий отчет)

        Returns:
            Dict[str, Any]: Отчет о соответствии
        """
           
                                       

             
            ^
security/compliance_manager.py:658:80: E501 line too long (84 > 79 characters)
                requirements = [req.to_dict() for req in self.requirements.values()]
                                                                               ^
security/compliance_manager.py:662:80: E501 line too long (116 > 79 characters)
            compliant_reqs = len([req for req in requirements if req["status"] == ComplianceStatus.COMPLIANT.value])
                                                                               ^
security/compliance_manager.py:664:80: E501 line too long (102 > 79 characters)
                [req for req in requirements if req["status"] == ComplianceStatus.NON_COMPLIANT.value]
                                                                               ^
security/compliance_manager.py:667:80: E501 line too long (108 > 79 characters)
                [req for req in requirements if req["status"] == ComplianceStatus.PARTIALLY_COMPLIANT.value]
                                                                               ^
security/compliance_manager.py:680:80: E501 line too long (93 > 79 characters)
                "requirements_by_category": self._get_requirements_by_category(requirements),
                                                                               ^
security/compliance_manager.py:681:80: E501 line too long (93 > 79 characters)
                "requirements_by_priority": self._get_requirements_by_priority(requirements),
                                                                               ^
security/compliance_manager.py:683:80: E501 line too long (98 > 79 characters)
                    [task for task in self.remediation_tasks.values() if task["status"] == "open"]
                                                                               ^
security/compliance_manager.py:690:80: E501 line too long (85 > 79 characters)
            self.log_activity(f"Ошибка создания отчета о соответствии: {e}", "error")
                                                                               ^
security/compliance_manager.py:693:80: E501 line too long (98 > 79 characters)
    def _get_requirements_by_category(self, requirements: List[Dict[str, Any]]) -> Dict[str, int]:
                                                                               ^
security/compliance_manager.py:701:80: E501 line too long (98 > 79 characters)
    def _get_requirements_by_priority(self, requirements: List[Dict[str, Any]]) -> Dict[str, int]:
                                                                               ^
security/compliance_manager.py:722:80: E501 line too long (101 > 79 characters)
            "overall_compliance_rate": self.compliant_requirements / max(1, self.total_requirements),
                                                                               ^
security/compliance_manager.py:726:80: E501 line too long (94 > 79 characters)
                [task for task in self.remediation_tasks.values() if task["status"] == "open"]
                                                                               ^
security/compliance_manager.py:749:80: E501 line too long (87 > 79 characters)
            self.log_activity(f"Запуск менеджера соответствия требованиям {self.name}")
                                                                               ^
security/compliance_manager.py:752:80: E501 line too long (95 > 79 characters)
            self.log_activity(f"Менеджер соответствия требованиям {self.name} успешно запущен")
                                                                               ^
security/compliance_manager.py:757:80: E501 line too long (86 > 79 characters)
                f"Ошибка запуска менеджера соответствия требованиям {self.name}: {e}",
                                                                               ^
security/compliance_manager.py:765:80: E501 line too long (90 > 79 characters)
            self.log_activity(f"Остановка менеджера соответствия требованиям {self.name}")
                                                                               ^
security/compliance_manager.py:771:80: E501 line too long (98 > 79 characters)
            self.log_activity(f"Менеджер соответствия требованиям {self.name} успешно остановлен")
                                                                               ^
security/compliance_manager.py:775:80: E501 line too long (88 > 79 characters)
                f"Ошибка остановки менеджера соответствия требованиям {self.name}: {e}",
                                                                               ^
security/config/color_scheme.py:7:80: E501 line too long (80 > 79 characters)
"""
Цветовая схема Matrix AI Security System
========================================

Цветовая палитра для веб-интерфейса, мобильного приложения и всех UI компонентов
системы безопасности ALADDIN.

Автор: AI Security System
Версия: 1.0.0
Дата: 2024
"""
   
                                        
                                  ^
security/config/color_scheme.py:15:1: F401 'typing.Tuple' imported but unused
from typing import Dict, List, Tuple
^
security/config/color_scheme.py:46:1: W293 blank line contains whitespace
    
^
security/config/color_scheme.py:50:1: W293 blank line contains whitespace
    
^
security/config/color_scheme.py:66:1: W293 blank line contains whitespace
            
^
security/config/color_scheme.py:79:1: W293 blank line contains whitespace
            
^
security/config/color_scheme.py:92:1: W293 blank line contains whitespace
            
^
security/config/color_scheme.py:105:1: W293 blank line contains whitespace
            
^
security/config/color_scheme.py:119:1: W293 blank line contains whitespace
    
^
security/config/color_scheme.py:123:1: W293 blank line contains whitespace
    
^
security/config/color_scheme.py:127:1: W293 blank line contains whitespace
    
^
security/config/color_scheme.py:131:1: W293 blank line contains whitespace
    
^
security/config/color_scheme.py:136:1: W293 blank line contains whitespace
        
^
security/config/color_scheme.py:138:1: W293 blank line contains whitespace
        
^
security/config/color_scheme.py:159:1: W293 blank line contains whitespace
    
^
security/config/color_scheme.py:164:1: W293 blank line contains whitespace
        
^
security/config/color_scheme.py:166:1: W293 blank line contains whitespace
        
^
security/config/color_scheme.py:178:1: W293 blank line contains whitespace
    
^
security/config/color_scheme.py:179:80: E501 line too long (84 > 79 characters)
    def get_gradient_colors(self, theme: ColorTheme = None) -> List[Dict[str, str]]:
                                                                               ^
security/config/color_scheme.py:183:1: W293 blank line contains whitespace
        
^
security/config/color_scheme.py:185:1: W293 blank line contains whitespace
        
^
security/config/color_scheme.py:212:1: W293 blank line contains whitespace
        
^
security/config/color_scheme.py:214:1: W293 blank line contains whitespace
    
^
security/config/color_scheme.py:219:1: W293 blank line contains whitespace
        
^
security/config/color_scheme.py:221:1: W293 blank line contains whitespace
        
^
security/config/color_scheme.py:227:54: E261 at least two spaces before inline comment
            "shadow_success": f"{palette.success}30", # 30% opacity
                                                     ^
security/config/color_scheme.py:228:54: E261 at least two spaces before inline comment
            "shadow_warning": f"{palette.warning}30", # 30% opacity
                                                     ^
security/config/color_scheme.py:231:1: W293 blank line contains whitespace
    
^
security/config/color_scheme.py:232:80: E501 line too long (80 > 79 characters)
    def get_accessible_colors(self, theme: ColorTheme = None) -> Dict[str, str]:
                                                                               ^
security/config/color_scheme.py:236:1: W293 blank line contains whitespace
        
^
security/config/color_scheme.py:238:1: W293 blank line contains whitespace
        
^
security/config/color_scheme.py:248:1: W293 blank line contains whitespace
    
^
security/config/color_scheme.py:256:1: W293 blank line contains whitespace
    
^
security/config/color_scheme.py:263:1: W293 blank line contains whitespace
        
^
security/config/color_scheme.py:267:1: W293 blank line contains whitespace
        
^
security/config/color_scheme.py:269:1: W293 blank line contains whitespace
    
^
security/config/color_scheme.py:276:1: W293 blank line contains whitespace
        
^
security/config/color_scheme.py:280:1: W293 blank line contains whitespace
        
^
security/config/color_scheme.py:282:1: W293 blank line contains whitespace
    
^
security/config/color_scheme.py:289:1: W293 blank line contains whitespace
        
^
security/config/color_scheme.py:292:1: W293 blank line contains whitespace
        
^
security/config/color_scheme.py:295:1: W293 blank line contains whitespace
    
^
security/config/color_scheme.py:296:80: E501 line too long (87 > 79 characters)
    def generate_css_file(self, theme: ColorTheme = None, filename: str = None) -> str:
                                                                               ^
security/config/color_scheme.py:300:1: W293 blank line contains whitespace
        
^
security/config/color_scheme.py:302:80: E501 line too long (80 > 79 characters)
            filename = f"security/static/css/matrix_ai_colors_{theme.value}.css"
                                                                               ^
security/config/color_scheme.py:303:1: W293 blank line contains whitespace
        
^
security/config/color_scheme.py:308:1: W293 blank line contains whitespace
        
^
security/config/color_scheme.py:320:1: W293 blank line contains whitespace
        css_content = f"""/* Matrix AI Security System - Color Scheme */
/* Theme: {theme.value} */
/* Generated automatically */

:root {{
    /* Primary Colors */
    --color-primary: {css_variables['--color-primary']};
    --color-secondary: {css_variables['--color-secondary']};
    --color-accent: {css_variables['--color-accent']};
    --color-text: {css_variables['--color-text']};
    --color-background: {css_variables['--color-background']};
    
    /* Status Colors */
    --color-success: {css_variables['--color-success']};
    --color-warning: {css_variables['--color-warning']};
    --color-error: {css_variables['--color-error']};
    --color-info: {css_variables['--color-info']};
    
    /* RGB Values */
    --color-primary-rgb: {css_variables['--color-primary-rgb']};
    --color-secondary-rgb: {css_variables['--color-secondary-rgb']};
    --color-accent-rgb: {css_variables['--color-accent-rgb']};
    --color-text-rgb: {css_variables['--color-text-rgb']};
    --color-background-rgb: {css_variables['--color-background-rgb']};
    --color-success-rgb: {css_variables['--color-success-rgb']};
    --color-warning-rgb: {css_variables['--color-warning-rgb']};
    --color-error-rgb: {css_variables['--color-error-rgb']};
    --color-info-rgb: {css_variables['--color-info-rgb']};
    
    /* Accessible Colors */
    --text-on-primary: {accessible['text_on_primary']};
    --text-on-secondary: {accessible['text_on_secondary']};
    --text-on-accent: {accessible['text_on_accent']};
    --text-on-success: {accessible['text_on_success']};
    --text-on-warning: {accessible['text_on_warning']};
    --text-on-error: {accessible['text_on_error']};
    --text-on-info: {accessible['text_on_info']};
    
    /* Shadow Colors */
    --shadow-light: {shadows['shadow_light']};
    --shadow-medium: {shadows['shadow_medium']};
    --shadow-dark: {shadows['shadow_dark']};
    --shadow-accent: {shadows['shadow_accent']};
    --shadow-success: {shadows['shadow_success']};
    --shadow-warning: {shadows['shadow_warning']};
    --shadow-error: {shadows['shadow_error']};
}}

/* Gradients */
"""
^
security/config/color_scheme.py:326:1: W293 blank line contains whitespace
        css_content = f"""/* Matrix AI Security System - Color Scheme */
/* Theme: {theme.value} */
/* Generated automatically */

:root {{
    /* Primary Colors */
    --color-primary: {css_variables['--color-primary']};
    --color-secondary: {css_variables['--color-secondary']};
    --color-accent: {css_variables['--color-accent']};
    --color-text: {css_variables['--color-text']};
    --color-background: {css_variables['--color-background']};
    
    /* Status Colors */
    --color-success: {css_variables['--color-success']};
    --color-warning: {css_variables['--color-warning']};
    --color-error: {css_variables['--color-error']};
    --color-info: {css_variables['--color-info']};
    
    /* RGB Values */
    --color-primary-rgb: {css_variables['--color-primary-rgb']};
    --color-secondary-rgb: {css_variables['--color-secondary-rgb']};
    --color-accent-rgb: {css_variables['--color-accent-rgb']};
    --color-text-rgb: {css_variables['--color-text-rgb']};
    --color-background-rgb: {css_variables['--color-background-rgb']};
    --color-success-rgb: {css_variables['--color-success-rgb']};
    --color-warning-rgb: {css_variables['--color-warning-rgb']};
    --color-error-rgb: {css_variables['--color-error-rgb']};
    --color-info-rgb: {css_variables['--color-info-rgb']};
    
    /* Accessible Colors */
    --text-on-primary: {accessible['text_on_primary']};
    --text-on-secondary: {accessible['text_on_secondary']};
    --text-on-accent: {accessible['text_on_accent']};
    --text-on-success: {accessible['text_on_success']};
    --text-on-warning: {accessible['text_on_warning']};
    --text-on-error: {accessible['text_on_error']};
    --text-on-info: {accessible['text_on_info']};
    
    /* Shadow Colors */
    --shadow-light: {shadows['shadow_light']};
    --shadow-medium: {shadows['shadow_medium']};
    --shadow-dark: {shadows['shadow_dark']};
    --shadow-accent: {shadows['shadow_accent']};
    --shadow-success: {shadows['shadow_success']};
    --shadow-warning: {shadows['shadow_warning']};
    --shadow-error: {shadows['shadow_error']};
}}

/* Gradients */
"""
^
security/config/color_scheme.py:337:1: W293 blank line contains whitespace
        css_content = f"""/* Matrix AI Security System - Color Scheme */
/* Theme: {theme.value} */
/* Generated automatically */

:root {{
    /* Primary Colors */
    --color-primary: {css_variables['--color-primary']};
    --color-secondary: {css_variables['--color-secondary']};
    --color-accent: {css_variables['--color-accent']};
    --color-text: {css_variables['--color-text']};
    --color-background: {css_variables['--color-background']};
    
    /* Status Colors */
    --color-success: {css_variables['--color-success']};
    --color-warning: {css_variables['--color-warning']};
    --color-error: {css_variables['--color-error']};
    --color-info: {css_variables['--color-info']};
    
    /* RGB Values */
    --color-primary-rgb: {css_variables['--color-primary-rgb']};
    --color-secondary-rgb: {css_variables['--color-secondary-rgb']};
    --color-accent-rgb: {css_variables['--color-accent-rgb']};
    --color-text-rgb: {css_variables['--color-text-rgb']};
    --color-background-rgb: {css_variables['--color-background-rgb']};
    --color-success-rgb: {css_variables['--color-success-rgb']};
    --color-warning-rgb: {css_variables['--color-warning-rgb']};
    --color-error-rgb: {css_variables['--color-error-rgb']};
    --color-info-rgb: {css_variables['--color-info-rgb']};
    
    /* Accessible Colors */
    --text-on-primary: {accessible['text_on_primary']};
    --text-on-secondary: {accessible['text_on_secondary']};
    --text-on-accent: {accessible['text_on_accent']};
    --text-on-success: {accessible['text_on_success']};
    --text-on-warning: {accessible['text_on_warning']};
    --text-on-error: {accessible['text_on_error']};
    --text-on-info: {accessible['text_on_info']};
    
    /* Shadow Colors */
    --shadow-light: {shadows['shadow_light']};
    --shadow-medium: {shadows['shadow_medium']};
    --shadow-dark: {shadows['shadow_dark']};
    --shadow-accent: {shadows['shadow_accent']};
    --shadow-success: {shadows['shadow_success']};
    --shadow-warning: {shadows['shadow_warning']};
    --shadow-error: {shadows['shadow_error']};
}}

/* Gradients */
"""
^
security/config/color_scheme.py:346:1: W293 blank line contains whitespace
        css_content = f"""/* Matrix AI Security System - Color Scheme */
/* Theme: {theme.value} */
/* Generated automatically */

:root {{
    /* Primary Colors */
    --color-primary: {css_variables['--color-primary']};
    --color-secondary: {css_variables['--color-secondary']};
    --color-accent: {css_variables['--color-accent']};
    --color-text: {css_variables['--color-text']};
    --color-background: {css_variables['--color-background']};
    
    /* Status Colors */
    --color-success: {css_variables['--color-success']};
    --color-warning: {css_variables['--color-warning']};
    --color-error: {css_variables['--color-error']};
    --color-info: {css_variables['--color-info']};
    
    /* RGB Values */
    --color-primary-rgb: {css_variables['--color-primary-rgb']};
    --color-secondary-rgb: {css_variables['--color-secondary-rgb']};
    --color-accent-rgb: {css_variables['--color-accent-rgb']};
    --color-text-rgb: {css_variables['--color-text-rgb']};
    --color-background-rgb: {css_variables['--color-background-rgb']};
    --color-success-rgb: {css_variables['--color-success-rgb']};
    --color-warning-rgb: {css_variables['--color-warning-rgb']};
    --color-error-rgb: {css_variables['--color-error-rgb']};
    --color-info-rgb: {css_variables['--color-info-rgb']};
    
    /* Accessible Colors */
    --text-on-primary: {accessible['text_on_primary']};
    --text-on-secondary: {accessible['text_on_secondary']};
    --text-on-accent: {accessible['text_on_accent']};
    --text-on-success: {accessible['text_on_success']};
    --text-on-warning: {accessible['text_on_warning']};
    --text-on-error: {accessible['text_on_error']};
    --text-on-info: {accessible['text_on_info']};
    
    /* Shadow Colors */
    --shadow-light: {shadows['shadow_light']};
    --shadow-medium: {shadows['shadow_medium']};
    --shadow-dark: {shadows['shadow_dark']};
    --shadow-accent: {shadows['shadow_accent']};
    --shadow-success: {shadows['shadow_success']};
    --shadow-warning: {shadows['shadow_warning']};
    --shadow-error: {shadows['shadow_error']};
}}

/* Gradients */
"""
^
security/config/color_scheme.py:359:1: W293 blank line contains whitespace
        
^
security/config/color_scheme.py:363:80: E501 line too long (95 > 79 characters)
            css_content += f"""
.{gradient['name']} {{
    background: linear-gradient({gradient['direction']}, {gradient['from']}, {gradient['to']});
}}
"""
                               
                      
                        ^
security/config/color_scheme.py:366:1: W293 blank line contains whitespace
        
^
security/config/color_scheme.py:402:1: W293 blank line contains whitespace
        
^
security/config/color_scheme.py:404:1: W293 blank line contains whitespace
    
^
security/config/color_scheme.py:414:1: W293 blank line contains whitespace
        
^
security/config/color_scheme.py:416:1: W293 blank line contains whitespace
    
^
security/config/color_scheme.py:422:1: W293 blank line contains whitespace
        
^
security/config/color_scheme.py:426:1: W293 blank line contains whitespace
        
^
security/config/color_scheme.py:428:1: W293 blank line contains whitespace
        
^
security/config/color_scheme.py:444:1: W293 blank line contains whitespace
    
^
security/config/color_scheme.py:448:1: W293 blank line contains whitespace
        
^
security/config/color_scheme.py:451:1: W293 blank line contains whitespace
        
^
security/config/color_scheme.py:453:1: W293 blank line contains whitespace
    
^
security/config/color_scheme.py:460:1: W293 blank line contains whitespace
    
^
security/config/color_scheme.py:463:1: W293 blank line contains whitespace
    
^
security/config/color_scheme.py:473:1: W293 blank line contains whitespace
    
^
security/config/color_scheme.py:478:1: W293 blank line contains whitespace
    
^
security/config/color_scheme.py:486:1: W293 blank line contains whitespace
    
^
security/config/color_scheme.py:490:1: W293 blank line contains whitespace
    
^
security/config/color_scheme.py:491:66: W292 no newline at end of file
    print("\n🎉 Цветовая схема Matrix AI готова к использованию!")                                                                 ^
security/data_protection_manager.py:8:1: F401 'json' imported but unused
import json
^
security/data_protection_manager.py:12:1: F401 'typing.Union' imported but unused
from typing import Dict, List, Any, Optional, Set, Union
^
security/data_protection_manager.py:79:1: W293 blank line contains whitespace
    
^
security/data_protection_manager.py:80:80: E501 line too long (101 > 79 characters)
    def __init__(self, name: str = "DataProtectionManager", config: Optional[Dict[str, Any]] = None):
                                                                               ^
security/data_protection_manager.py:82:1: W293 blank line contains whitespace
        
^
security/data_protection_manager.py:86:1: W293 blank line contains whitespace
        
^
security/data_protection_manager.py:88:80: E501 line too long (114 > 79 characters)
        self.encryption_key = config.get("encryption_key", "default_key_12345") if config else "default_key_12345"
                                                                               ^
security/data_protection_manager.py:89:80: E501 line too long (90 > 79 characters)
        self.enable_encryption = config.get("enable_encryption", True) if config else True
                                                                               ^
security/data_protection_manager.py:90:1: W293 blank line contains whitespace
        
^
security/data_protection_manager.py:102:1: W293 blank line contains whitespace
        
^
security/data_protection_manager.py:109:1: W293 blank line contains whitespace
        
^
security/data_protection_manager.py:113:80: E501 line too long (81 > 79 characters)
            self.log_activity(f"Инициализация DataProtectionManager {self.name}")
                                                                               ^
security/data_protection_manager.py:115:1: W293 blank line contains whitespace
            
^
security/data_protection_manager.py:118:1: W293 blank line contains whitespace
            
^
security/data_protection_manager.py:121:1: W293 blank line contains whitespace
            
^
security/data_protection_manager.py:124:80: E501 line too long (91 > 79 characters)
            self.log_activity(f"DataProtectionManager {self.name} успешно инициализирован")
                                                                               ^
security/data_protection_manager.py:126:1: W293 blank line contains whitespace
            
^
security/data_protection_manager.py:128:80: E501 line too long (90 > 79 characters)
            self.log_activity(f"Ошибка инициализации DataProtectionManager: {e}", "error")
                                                                               ^
security/data_protection_manager.py:131:1: W293 blank line contains whitespace
    
^
security/data_protection_manager.py:145:1: W293 blank line contains whitespace
        
^
security/data_protection_manager.py:157:1: W293 blank line contains whitespace
    
^
security/data_protection_manager.py:162:1: W293 blank line contains whitespace
        
^
security/data_protection_manager.py:168:1: W293 blank line contains whitespace
            
^
security/data_protection_manager.py:171:1: W293 blank line contains whitespace
            
^
security/data_protection_manager.py:176:1: W293 blank line contains whitespace
    
^
security/data_protection_manager.py:181:1: W293 blank line contains whitespace
        
^
security/data_protection_manager.py:186:1: W293 blank line contains whitespace
            
^
security/data_protection_manager.py:189:1: W293 blank line contains whitespace
            
^
security/data_protection_manager.py:194:1: W293 blank line contains whitespace
    
^
security/data_protection_manager.py:195:75: W291 trailing whitespace
    def store_data(self, data_type: DataType, content: str, owner_id: str, 
                                                                          ^
security/data_protection_manager.py:196:80: E501 line too long (84 > 79 characters)
                   classification: DataClassification = DataClassification.INTERNAL,
                                                                               ^
security/data_protection_manager.py:200:80: E501 line too long (113 > 79 characters)
            record_id = f"data_{int(datetime.now().timestamp())}_{hashlib.md5(content.encode()).hexdigest()[:8]}"
                                                                               ^
security/data_protection_manager.py:201:1: W293 blank line contains whitespace
            
^
security/data_protection_manager.py:205:1: W293 blank line contains whitespace
            
^
security/data_protection_manager.py:207:1: W293 blank line contains whitespace
            
^
security/data_protection_manager.py:209:80: E501 line too long (98 > 79 characters)
            encrypted_content = self._encrypt_data(content) if self.enable_encryption else content
                                                                               ^
security/data_protection_manager.py:210:1: W293 blank line contains whitespace
            
^
security/data_protection_manager.py:221:1: W293 blank line contains whitespace
            
^
security/data_protection_manager.py:224:1: W293 blank line contains whitespace
            
^
security/data_protection_manager.py:227:1: W293 blank line contains whitespace
            
^
security/data_protection_manager.py:228:80: E501 line too long (88 > 79 characters)
            self.log_activity(f"Данные сохранены: {record_id} (тип: {data_type.value})")
                                                                               ^
security/data_protection_manager.py:230:1: W293 blank line contains whitespace
            
^
security/data_protection_manager.py:234:1: W293 blank line contains whitespace
    
^
security/data_protection_manager.py:235:80: E501 line too long (80 > 79 characters)
    def retrieve_data(self, record_id: str, requester_id: str) -> Optional[str]:
                                                                               ^
security/data_protection_manager.py:239:80: E501 line too long (85 > 79 characters)
                self.log_activity(f"Запись данных {record_id} не найдена", "warning")
                                                                               ^
security/data_protection_manager.py:241:1: W293 blank line contains whitespace
            
^
security/data_protection_manager.py:244:1: W293 blank line contains whitespace
            
^
security/data_protection_manager.py:248:80: E501 line too long (82 > 79 characters)
                self.log_activity(f"Запись данных {record_id} истекла", "warning")
                                                                               ^
security/data_protection_manager.py:250:1: W293 blank line contains whitespace
            
^
security/data_protection_manager.py:253:80: E501 line too long (107 > 79 characters)
                self.log_activity(f"Отказано в доступе к записи {record_id} для {requester_id}", "warning")
                                                                               ^
security/data_protection_manager.py:255:1: W293 blank line contains whitespace
            
^
security/data_protection_manager.py:259:1: W293 blank line contains whitespace
            
^
security/data_protection_manager.py:268:1: W293 blank line contains whitespace
            
^
security/data_protection_manager.py:270:1: W293 blank line contains whitespace
            
^
security/data_protection_manager.py:276:1: W293 blank line contains whitespace
                
^
security/data_protection_manager.py:280:1: W293 blank line contains whitespace
    
^
security/data_protection_manager.py:286:1: W293 blank line contains whitespace
            
^
security/data_protection_manager.py:288:1: W293 blank line contains whitespace
            
^
security/data_protection_manager.py:291:80: E501 line too long (106 > 79 characters)
                self.log_activity(f"Отказано в удалении записи {record_id} для {requester_id}", "warning")
                                                                               ^
security/data_protection_manager.py:293:1: W293 blank line contains whitespace
            
^
security/data_protection_manager.py:296:1: W293 blank line contains whitespace
            
^
security/data_protection_manager.py:299:1: W293 blank line contains whitespace
            
^
security/data_protection_manager.py:302:1: W293 blank line contains whitespace
            
^
security/data_protection_manager.py:306:1: W293 blank line contains whitespace
    
^
security/data_protection_manager.py:312:1: W293 blank line contains whitespace
            
^
security/data_protection_manager.py:316:1: W293 blank line contains whitespace
            
^
security/data_protection_manager.py:320:1: W293 blank line contains whitespace
            
^
security/data_protection_manager.py:322:80: E501 line too long (87 > 79 characters)
                self.log_activity(f"Очищено {len(expired_records)} устаревших записей")
                                                                               ^
security/data_protection_manager.py:323:1: W293 blank line contains whitespace
                
^
security/data_protection_manager.py:326:1: W293 blank line contains whitespace
    
^
security/data_protection_manager.py:335:80: E501 line too long (91 > 79 characters)
            "encryption_rate": (self.encrypted_records / max(self.total_records, 1)) * 100,
                                                                               ^
security/data_protection_manager.py:336:80: E501 line too long (96 > 79 characters)
            "access_success_rate": (self.successful_access / max(self.access_attempts, 1)) * 100
                                                                               ^
security/data_protection_manager.py:338:1: W293 blank line contains whitespace
    
^
security/data_protection_manager.py:344:80: W291 trailing whitespace
                classification.value: sum(1 for r in self.data_records.values() 
                                                                               ^
security/data_protection_manager.py:345:41: E128 continuation line under-indented for visual indent
                                        if r.classification == classification)
                                        ^
security/data_protection_manager.py:349:75: W291 trailing whitespace
                data_type.value: sum(1 for r in self.data_records.values() 
                                                                          ^
security/data_protection_manager.py:350:36: E128 continuation line under-indented for visual indent
                                   if r.data_type == data_type and 
                                   ^
security/data_protection_manager.py:350:67: W291 trailing whitespace
                                   if r.data_type == data_type and 
                                                                  ^
security/data_protection_manager.py:351:36: E128 continuation line under-indented for visual indent
                                   (not r.expires_at or r.expires_at > datetime.now()))
                                   ^
security/data_protection_manager.py:351:80: E501 line too long (87 > 79 characters)
                                   (not r.expires_at or r.expires_at > datetime.now()))
                                                                               ^
security/data_protection_manager.py:354:80: E501 line too long (96 > 79 characters)
            "encryption_compliance": (self.encrypted_records / max(self.total_records, 1)) * 100
                                                                               ^
security/data_protection_manager.py:356:1: W293 blank line contains whitespace
    
^
security/data_protection_manager.py:361:1: W293 blank line contains whitespace
            
^
security/data_protection_manager.py:364:1: W293 blank line contains whitespace
            
^
security/data_protection_manager.py:369:80: E501 line too long (86 > 79 characters)
            self.log_activity(f"Ошибка остановки DataProtectionManager: {e}", "error")
                                                                               ^
security/data_protection_manager.py:376:1: W293 blank line contains whitespace
    
^
security/data_protection_manager.py:380:1: W293 blank line contains whitespace
        
^
security/data_protection_manager.py:388:1: W293 blank line contains whitespace
        
^
security/data_protection_manager.py:391:1: W293 blank line contains whitespace
            
^
security/data_protection_manager.py:396:1: W293 blank line contains whitespace
            
^
security/data_protection_manager.py:400:1: W293 blank line contains whitespace
            
^
security/data_protection_manager.py:404:1: W293 blank line contains whitespace
        
^
security/device_security.py:13:1: F401 'hashlib' imported but unused
import hashlib
^
security/device_security.py:23:1: E302 expected 2 blank lines, found 1
class DeviceType(Enum):
^
security/device_security.py:33:1: E302 expected 2 blank lines, found 1
class SecurityLevel(Enum):
^
security/device_security.py:40:1: E302 expected 2 blank lines, found 1
class DeviceStatus(Enum):
^
security/device_security.py:48:1: E302 expected 2 blank lines, found 1
class ThreatType(Enum):
^
security/device_security.py:58:1: E302 expected 2 blank lines, found 1
@dataclass
^
security/device_security.py:73:80: E501 line too long (87 > 79 characters)
    last_seen: str = field(default_factory=lambda: datetime.datetime.now().isoformat())
                                                                               ^
security/device_security.py:74:80: E501 line too long (88 > 79 characters)
    created_at: str = field(default_factory=lambda: datetime.datetime.now().isoformat())
                                                                               ^
security/device_security.py:109:80: E501 line too long (81 > 79 characters)
            last_seen=data.get("last_seen", datetime.datetime.now().isoformat()),
                                                                               ^
security/device_security.py:110:80: E501 line too long (83 > 79 characters)
            created_at=data.get("created_at", datetime.datetime.now().isoformat()),
                                                                               ^
security/device_security.py:115:1: E302 expected 2 blank lines, found 1
@dataclass
^
security/device_security.py:127:80: E501 line too long (88 > 79 characters)
    created_at: str = field(default_factory=lambda: datetime.datetime.now().isoformat())
                                                                               ^
security/device_security.py:151:80: E501 line too long (82 > 79 characters)
            created_at=data.get("created_at", datetime.datetime.now().isoformat())
                                                                               ^
security/device_security.py:154:1: E302 expected 2 blank lines, found 1
@dataclass
^
security/device_security.py:164:80: E501 line too long (89 > 79 characters)
    detected_at: str = field(default_factory=lambda: datetime.datetime.now().isoformat())
                                                                               ^
security/device_security.py:190:80: E501 line too long (85 > 79 characters)
            detected_at=data.get("detected_at", datetime.datetime.now().isoformat()),
                                                                               ^
security/device_security.py:196:1: E302 expected 2 blank lines, found 1
class DeviceSecurityMetrics:
^
security/device_security.py:210:80: E501 line too long (83 > 79 characters)
    def update_metrics(self, devices: List[Device], threats: List[SecurityThreat]):
                                                                               ^
security/device_security.py:213:80: E501 line too long (90 > 79 characters)
        self.active_devices = len([d for d in devices if d.status == DeviceStatus.ACTIVE])
                                                                               ^
security/device_security.py:214:80: E501 line too long (100 > 79 characters)
        self.compromised_devices = len([d for d in devices if d.status == DeviceStatus.COMPROMISED])
                                                                               ^
security/device_security.py:215:1: W293 blank line contains whitespace
        
^
security/device_security.py:217:80: E501 line too long (91 > 79 characters)
            self.avg_security_score = sum(d.security_score for d in devices) / len(devices)
                                                                               ^
security/device_security.py:218:80: E501 line too long (95 > 79 characters)
            compliant_devices = len([d for d in devices if d.compliance_status == "compliant"])
                                                                               ^
security/device_security.py:220:1: W293 blank line contains whitespace
        
^
security/device_security.py:222:80: E501 line too long (83 > 79 characters)
        self.threats_resolved = len([t for t in threats if t.status == "resolved"])
                                                                               ^
security/device_security.py:237:1: E302 expected 2 blank lines, found 1
class DeviceSecurity:
^
security/device_security.py:255:80: E501 line too long (86 > 79 characters)
                return [SecurityPolicy.from_dict(p) for p in data.get('policies', [])]
                                                                               ^
security/device_security.py:314:1: W293 blank line contains whitespace
        
^
security/device_security.py:316:80: E501 line too long (81 > 79 characters)
        print(f"Устройство {device.name} ({device.device_id}) зарегистрировано.")
                                                                               ^
security/device_security.py:324:80: E501 line too long (82 > 79 characters)
                updated_device = Device.from_dict({**device.to_dict(), **updates})
                                                                               ^
security/device_security.py:343:80: E501 line too long (80 > 79 characters)
    def assess_device_security(self, device_id: str) -> Tuple[float, List[str]]:
                                                                               ^
security/device_security.py:348:80: E501 line too long (82 > 79 characters)
        device = next((d for d in self.devices if d.device_id == device_id), None)
                                                                               ^
security/device_security.py:356:80: E501 line too long (110 > 79 characters)
        applicable_policies = [p for p in self.policies if device.device_type in p.device_types and p.enabled]
                                                                               ^
security/device_security.py:357:1: W293 blank line contains whitespace
        
^
security/device_security.py:361:1: W293 blank line contains whitespace
            
^
security/device_security.py:362:80: E501 line too long (95 > 79 characters)
            # Простая проверка требований (в реальной системе здесь была бы детальная проверка)
                                                                               ^
security/device_security.py:368:1: W293 blank line contains whitespace
            
^
security/device_security.py:372:1: W293 blank line contains whitespace
        
^
security/device_security.py:375:1: W293 blank line contains whitespace
        
^
security/device_security.py:379:1: W293 blank line contains whitespace
        
^
security/device_security.py:384:80: E501 line too long (83 > 79 characters)
        # Упрощенная проверка (в реальной системе здесь была бы детальная проверка)
                                                                               ^
security/device_security.py:386:1: W293 blank line contains whitespace
        
^
security/device_security.py:395:1: W293 blank line contains whitespace
        
^
security/device_security.py:398:69: W291 trailing whitespace
    def detect_threat(self, device_id: str, threat_type: ThreatType, 
                                                                    ^
security/device_security.py:399:22: E128 continuation line under-indented for visual indent
                     severity: SecurityLevel, description: str) -> str:
                     ^
security/device_security.py:402:1: W293 blank line contains whitespace
        
^
security/device_security.py:410:1: W293 blank line contains whitespace
        
^
security/device_security.py:412:1: W293 blank line contains whitespace
        
^
security/device_security.py:414:80: E501 line too long (82 > 79 characters)
        device = next((d for d in self.devices if d.device_id == device_id), None)
                                                                               ^
security/device_security.py:417:80: E501 line too long (88 > 79 characters)
            device.security_score = max(0, device.security_score - 20)  # Снижаем оценку
                                                                               ^
security/device_security.py:418:1: W293 blank line contains whitespace
        
^
security/device_security.py:419:80: E501 line too long (97 > 79 characters)
        print(f"Обнаружена угроза {threat_type.value} для устройства {device_id}: {description}")
                                                                               ^
security/device_security.py:421:1: W293 blank line contains whitespace
        
^
security/device_security.py:424:80: E501 line too long (84 > 79 characters)
    def resolve_threat(self, threat_id: str, mitigation_actions: List[str]) -> bool:
                                                                               ^
security/device_security.py:431:1: W293 blank line contains whitespace
                
^
security/device_security.py:433:80: E501 line too long (97 > 79 characters)
                device = next((d for d in self.devices if d.device_id == threat.device_id), None)
                                                                               ^
security/device_security.py:436:80: E501 line too long (99 > 79 characters)
                    device.security_score = min(100, device.security_score + 10)  # Повышаем оценку
                                                                               ^
security/device_security.py:437:1: W293 blank line contains whitespace
                
^
security/device_security.py:441:1: W293 blank line contains whitespace
        
^
security/device_security.py:453:80: E501 line too long (82 > 79 characters)
    def get_devices_by_security_level(self, level: SecurityLevel) -> List[Device]:
                                                                               ^
security/device_security.py:459:80: E501 line too long (82 > 79 characters)
        device = next((d for d in self.devices if d.device_id == device_id), None)
                                                                               ^
security/device_security.py:470:80: E501 line too long (82 > 79 characters)
        device = next((d for d in self.devices if d.device_id == device_id), None)
                                                                               ^
security/device_security.py:495:1: W293 blank line contains whitespace
        
^
security/device_security.py:498:1: W293 blank line contains whitespace
        
^
security/device_security.py:499:68: W292 no newline at end of file
        print(f"Отчет по устройствам экспортирован в: {file_path}")                                                                   ^
security/enhanced_alerting.py:23:1: F401 'core.base.SecurityLevel' imported but unused
from core.base import ComponentStatus, SecurityLevel
^
security/enhanced_alerting.py:75:1: W293 blank line contains whitespace
    
^
security/enhanced_alerting.py:80:1: W293 blank line contains whitespace
        
^
security/enhanced_alerting.py:83:1: W293 blank line contains whitespace
        
^
security/enhanced_alerting.py:87:1: W293 blank line contains whitespace
        
^
security/enhanced_alerting.py:90:1: W293 blank line contains whitespace
        
^
security/enhanced_alerting.py:94:1: W293 blank line contains whitespace
        
^
security/enhanced_alerting.py:98:1: W293 blank line contains whitespace
        
^
security/enhanced_alerting.py:100:1: W293 blank line contains whitespace
    
^
security/enhanced_alerting.py:124:1: W293 blank line contains whitespace
    
^
security/enhanced_alerting.py:134:1: W293 blank line contains whitespace
    
^
security/enhanced_alerting.py:153:80: E501 line too long (86 > 79 characters)
                channels=[AlertChannel.EMAIL, AlertChannel.SMS, AlertChannel.CONSOLE],
                                                                               ^
security/enhanced_alerting.py:162:80: E501 line too long (86 > 79 characters)
                channels=[AlertChannel.EMAIL, AlertChannel.SMS, AlertChannel.WEBHOOK],
                                                                               ^
security/enhanced_alerting.py:171:80: E501 line too long (86 > 79 characters)
                channels=[AlertChannel.EMAIL, AlertChannel.SMS, AlertChannel.CONSOLE],
                                                                               ^
security/enhanced_alerting.py:184:1: W293 blank line contains whitespace
        
^
security/enhanced_alerting.py:186:80: E501 line too long (87 > 79 characters)
        self.logger.info(f"Загружено {len(default_rules)} правил алертов по умолчанию")
                                                                               ^
security/enhanced_alerting.py:187:1: W293 blank line contains whitespace
    
^
security/enhanced_alerting.py:192:1: W293 blank line contains whitespace
    
^
security/enhanced_alerting.py:195:80: E501 line too long (89 > 79 characters)
        self.alert_rules = [rule for rule in self.alert_rules if rule.rule_id != rule_id]
                                                                               ^
security/enhanced_alerting.py:197:1: W293 blank line contains whitespace
    
^
security/enhanced_alerting.py:201:80: E501 line too long (92 > 79 characters)
        self.monitoring_thread = threading.Thread(target=self._monitoring_loop, daemon=True)
                                                                               ^
security/enhanced_alerting.py:204:1: W293 blank line contains whitespace
    
^
security/enhanced_alerting.py:211:1: W293 blank line contains whitespace
                
^
security/enhanced_alerting.py:216:1: W293 blank line contains whitespace
                    
^
security/enhanced_alerting.py:219:80: E501 line too long (96 > 79 characters)
                        time_since_last = (datetime.now() - rule.last_triggered).total_seconds()
                                                                               ^
security/enhanced_alerting.py:222:1: W293 blank line contains whitespace
                    
^
security/enhanced_alerting.py:227:1: W293 blank line contains whitespace
                
^
security/enhanced_alerting.py:230:1: W293 blank line contains whitespace
                
^
security/enhanced_alerting.py:232:1: W293 blank line contains whitespace
                
^
security/enhanced_alerting.py:236:1: W293 blank line contains whitespace
    
^
security/enhanced_alerting.py:241:1: W293 blank line contains whitespace
            
^
security/enhanced_alerting.py:245:80: E501 line too long (102 > 79 characters)
                'disk_free_percent': psutil.disk_usage('/').free / psutil.disk_usage('/').total * 100,
                                                                               ^
security/enhanced_alerting.py:253:1: W293 blank line contains whitespace
    
^
security/enhanced_alerting.py:254:80: E501 line too long (83 > 79 characters)
    def _evaluate_condition(self, condition: str, metrics: Dict[str, Any]) -> bool:
                                                                               ^
security/enhanced_alerting.py:273:1: W293 blank line contains whitespace
            
^
security/enhanced_alerting.py:278:1: W293 blank line contains whitespace
    
^
security/enhanced_alerting.py:282:1: W293 blank line contains whitespace
        
^
security/enhanced_alerting.py:293:1: W293 blank line contains whitespace
        
^
security/enhanced_alerting.py:295:1: W293 blank line contains whitespace
        
^
security/enhanced_alerting.py:301:80: E501 line too long (87 > 79 characters)
                self.logger.error(f"Ошибка отправки алерта через {channel.value}: {e}")
                                                                               ^
security/enhanced_alerting.py:302:1: W293 blank line contains whitespace
        
^
security/enhanced_alerting.py:304:1: W293 blank line contains whitespace
    
^
security/enhanced_alerting.py:312:1: W293 blank line contains whitespace
            
^
security/enhanced_alerting.py:317:1: W293 blank line contains whitespace
            
^
security/enhanced_alerting.py:320:1: W293 blank line contains whitespace
            body = f"""
            Алерт системы безопасности ALADDIN
            
            Уровень: {alert.severity.value.upper()}
            Компонент: {alert.component}
            Время: {alert.timestamp.strftime('%Y-%m-%d %H:%M:%S')}
            
            Сообщение: {alert.message}
            
            Дополнительная информация:
            {json.dumps(alert.metadata, indent=2, ensure_ascii=False)}
            """
^
security/enhanced_alerting.py:324:1: W293 blank line contains whitespace
            body = f"""
            Алерт системы безопасности ALADDIN
            
            Уровень: {alert.severity.value.upper()}
            Компонент: {alert.component}
            Время: {alert.timestamp.strftime('%Y-%m-%d %H:%M:%S')}
            
            Сообщение: {alert.message}
            
            Дополнительная информация:
            {json.dumps(alert.metadata, indent=2, ensure_ascii=False)}
            """
^
security/enhanced_alerting.py:326:1: W293 blank line contains whitespace
            body = f"""
            Алерт системы безопасности ALADDIN
            
            Уровень: {alert.severity.value.upper()}
            Компонент: {alert.component}
            Время: {alert.timestamp.strftime('%Y-%m-%d %H:%M:%S')}
            
            Сообщение: {alert.message}
            
            Дополнительная информация:
            {json.dumps(alert.metadata, indent=2, ensure_ascii=False)}
            """
^
security/enhanced_alerting.py:330:1: W293 blank line contains whitespace
            
^
security/enhanced_alerting.py:332:1: W293 blank line contains whitespace
            
^
security/enhanced_alerting.py:338:1: W293 blank line contains whitespace
            
^
security/enhanced_alerting.py:340:1: W293 blank line contains whitespace
            
^
security/enhanced_alerting.py:343:1: W293 blank line contains whitespace
    
^
security/enhanced_alerting.py:351:1: W293 blank line contains whitespace
            
^
security/enhanced_alerting.py:352:13: F841 local variable 'message' is assigned to but never used
            message = f"[{alert.severity.value.upper()}] {alert.title}: {alert.message}"
            ^
security/enhanced_alerting.py:352:80: E501 line too long (88 > 79 characters)
            message = f"[{alert.severity.value.upper()}] {alert.title}: {alert.message}"
                                                                               ^
security/enhanced_alerting.py:353:1: W293 blank line contains whitespace
            
^
security/enhanced_alerting.py:356:1: W293 blank line contains whitespace
            
^
security/enhanced_alerting.py:359:1: W293 blank line contains whitespace
    
^
security/enhanced_alerting.py:364:1: W293 blank line contains whitespace
            
^
security/enhanced_alerting.py:367:1: W293 blank line contains whitespace
            
^
security/enhanced_alerting.py:377:1: W293 blank line contains whitespace
            
^
security/enhanced_alerting.py:378:80: E501 line too long (82 > 79 characters)
            response = requests.post(url, json=payload, timeout=config['timeout'])
                                                                               ^
security/enhanced_alerting.py:380:1: W293 blank line contains whitespace
            
^
security/enhanced_alerting.py:382:1: W293 blank line contains whitespace
            
^
security/enhanced_alerting.py:385:1: W293 blank line contains whitespace
    
^
security/enhanced_alerting.py:394:1: W293 blank line contains whitespace
        
^
security/enhanced_alerting.py:397:1: W293 blank line contains whitespace
        
^
security/enhanced_alerting.py:403:1: W293 blank line contains whitespace
    
^
security/enhanced_alerting.py:406:80: E501 line too long (101 > 79 characters)
        self.logger.warning(f"ALERT [{alert.severity.value.upper()}] {alert.title}: {alert.message}")
                                                                               ^
security/enhanced_alerting.py:407:1: W293 blank line contains whitespace
    
^
security/enhanced_alerting.py:410:80: E501 line too long (84 > 79 characters)
        cutoff_date = datetime.now() - timedelta(days=self.config['retention_days'])
                                                                               ^
security/enhanced_alerting.py:412:1: W293 blank line contains whitespace
        
^
security/enhanced_alerting.py:413:80: E501 line too long (87 > 79 characters)
        self.alerts = [alert for alert in self.alerts if alert.timestamp > cutoff_date]
                                                                               ^
security/enhanced_alerting.py:414:1: W293 blank line contains whitespace
        
^
security/enhanced_alerting.py:418:1: W293 blank line contains whitespace
    
^
security/enhanced_alerting.py:419:80: E501 line too long (99 > 79 characters)
    def get_alerts(self, limit: int = 50, severity: Optional[AlertSeverity] = None) -> List[Alert]:
                                                                               ^
security/enhanced_alerting.py:422:1: W293 blank line contains whitespace
        
^
security/enhanced_alerting.py:425:1: W293 blank line contains whitespace
        
^
security/enhanced_alerting.py:427:1: W293 blank line contains whitespace
    
^
security/enhanced_alerting.py:436:1: W293 blank line contains whitespace
    
^
security/enhanced_alerting.py:441:1: W293 blank line contains whitespace
        
^
security/enhanced_alerting.py:444:80: E501 line too long (101 > 79 characters)
            severity_counts[severity.value] = len([a for a in self.alerts if a.severity == severity])
                                                                               ^
security/enhanced_alerting.py:445:1: W293 blank line contains whitespace
        
^
security/enhanced_alerting.py:451:80: E501 line too long (88 > 79 characters)
            'last_alert': self.alerts[-1].timestamp.isoformat() if self.alerts else None
                                                                               ^
security/enhanced_alerting.py:453:1: W293 blank line contains whitespace
    
^
security/enhanced_alerting.py:466:1: W293 blank line contains whitespace
    
^
security/enhanced_alerting.py:470:1: W293 blank line contains whitespace
        
^
security/enhanced_alerting.py:473:1: W293 blank line contains whitespace
            
^
security/enhanced_alerting.py:477:80: E501 line too long (121 > 79 characters)
                print(f"📊 Статистика алертов: {stats['total_alerts']} всего, {stats['unresolved_alerts']} неразрешенных")
                                                                               ^
security/enhanced_alerting.py:478:1: W293 blank line contains whitespace
    
^
security/enhanced_alerting.py:482:47: W292 no newline at end of file
        print("✅ Система алертов остановлена")                                              ^
security/enhanced_safe_function_manager.py:11:1: F401 'threading' imported but unused
import threading
^
security/enhanced_safe_function_manager.py:12:1: F401 'time' imported but unused
import time
^
security/enhanced_safe_function_manager.py:15:1: F401 'typing.List' imported but unused
from typing import Any, Dict, List, Optional, Union
^
security/enhanced_safe_function_manager.py:15:1: F401 'typing.Union' imported but unused
from typing import Any, Dict, List, Optional, Union
^
security/enhanced_safe_function_manager.py:17:1: F401 'core.base.SecurityBase' imported but unused
from core.base import ComponentStatus, SecurityBase, SecurityLevel
^
security/enhanced_safe_function_manager.py:18:1: F401 'security.safe_function_manager.SecurityFunction' imported but unused
from security.safe_function_manager import SafeFunctionManager, SecurityFunction, FunctionStatus
^
security/enhanced_safe_function_manager.py:18:1: F401 'security.safe_function_manager.FunctionStatus' imported but unused
from security.safe_function_manager import SafeFunctionManager, SecurityFunction, FunctionStatus
^
security/enhanced_safe_function_manager.py:18:80: E501 line too long (96 > 79 characters)
from security.safe_function_manager import SafeFunctionManager, SecurityFunction, FunctionStatus
                                                                               ^
security/enhanced_safe_function_manager.py:23:1: W293 blank line contains whitespace
    
^
security/enhanced_safe_function_manager.py:32:1: W293 blank line contains whitespace
    
^
security/enhanced_safe_function_manager.py:37:80: E501 line too long (87 > 79 characters)
            from security.safe_security_monitoring import SafeSecurityMonitoringManager
                                                                               ^
security/enhanced_safe_function_manager.py:40:80: E501 line too long (86 > 79 characters)
            from security.advanced_monitoring_manager import AdvancedMonitoringManager
                                                                               ^
security/enhanced_safe_function_manager.py:45:1: W293 blank line contains whitespace
    
^
security/enhanced_safe_function_manager.py:50:80: E501 line too long (86 > 79 characters)
            from security.simple_security_integration import SimpleSecurityIntegration
                                                                               ^
security/enhanced_safe_function_manager.py:53:80: E501 line too long (88 > 79 characters)
            from security.minimal_security_integration import MinimalSecurityIntegration
                                                                               ^
security/enhanced_safe_function_manager.py:58:1: W293 blank line contains whitespace
    
^
security/enhanced_safe_function_manager.py:72:1: W293 blank line contains whitespace
    
^
security/enhanced_safe_function_manager.py:73:80: E501 line too long (107 > 79 characters)
    def __init__(self, name: str = "EnhancedSafeFunctionManager", config: Optional[Dict[str, Any]] = None):
                                                                               ^
security/enhanced_safe_function_manager.py:75:1: W293 blank line contains whitespace
        
^
security/enhanced_safe_function_manager.py:79:1: W293 blank line contains whitespace
        
^
security/enhanced_safe_function_manager.py:83:1: W293 blank line contains whitespace
        
^
security/enhanced_safe_function_manager.py:88:1: W293 blank line contains whitespace
    
^
security/enhanced_safe_function_manager.py:93:80: E501 line too long (104 > 79 characters)
                self.log_activity(f"Неверный режим: {mode}. Доступные: {self.available_modes}", "error")
                                                                               ^
security/enhanced_safe_function_manager.py:95:1: W293 blank line contains whitespace
            
^
security/enhanced_safe_function_manager.py:99:80: E501 line too long (86 > 79 characters)
                self.log_activity(f"Режим компонентов изменен с {old_mode} на {mode}")
                                                                               ^
security/enhanced_safe_function_manager.py:100:1: W293 blank line contains whitespace
                
^
security/enhanced_safe_function_manager.py:104:1: W293 blank line contains whitespace
                
^
security/enhanced_safe_function_manager.py:106:1: W293 blank line contains whitespace
                
^
security/enhanced_safe_function_manager.py:110:1: W293 blank line contains whitespace
    
^
security/enhanced_safe_function_manager.py:116:1: W293 blank line contains whitespace
            
^
security/enhanced_safe_function_manager.py:118:1: W293 blank line contains whitespace
            
^
security/enhanced_safe_function_manager.py:122:80: E501 line too long (88 > 79 characters)
                    component = SecurityComponentFactory.create_monitoring_manager(mode)
                                                                               ^
security/enhanced_safe_function_manager.py:124:80: E501 line too long (89 > 79 characters)
                    component = SecurityComponentFactory.create_integration_manager(mode)
                                                                               ^
security/enhanced_safe_function_manager.py:126:80: E501 line too long (82 > 79 characters)
                    component = SecurityComponentFactory.create_data_manager(mode)
                                                                               ^
security/enhanced_safe_function_manager.py:128:80: E501 line too long (95 > 79 characters)
                    self.log_activity(f"Неизвестный тип компонента: {component_type}", "error")
                                                                               ^
security/enhanced_safe_function_manager.py:130:1: W293 blank line contains whitespace
                
^
security/enhanced_safe_function_manager.py:133:80: E501 line too long (87 > 79 characters)
                    self.component_status[component_key] = ComponentStatus.INITIALIZING
                                                                               ^
security/enhanced_safe_function_manager.py:134:1: W293 blank line contains whitespace
                    
^
security/enhanced_safe_function_manager.py:138:80: E501 line too long (124 > 79 characters)
                        self.component_status[component_key] = ComponentStatus.RUNNING if success else ComponentStatus.ERROR
                                                                               ^
security/enhanced_safe_function_manager.py:144:80: E501 line too long (86 > 79 characters)
                        self.component_status[component_key] = ComponentStatus.RUNNING
                                                                               ^
security/enhanced_safe_function_manager.py:146:1: W293 blank line contains whitespace
                    
^
security/enhanced_safe_function_manager.py:148:1: W293 blank line contains whitespace
            
^
security/enhanced_safe_function_manager.py:150:1: W293 blank line contains whitespace
            
^
security/enhanced_safe_function_manager.py:152:80: E501 line too long (92 > 79 characters)
            self.log_activity(f"Ошибка получения компонента {component_type}: {e}", "error")
                                                                               ^
security/enhanced_safe_function_manager.py:154:1: W293 blank line contains whitespace
    
^
security/enhanced_safe_function_manager.py:165:1: W293 blank line contains whitespace
            
^
security/enhanced_safe_function_manager.py:168:80: E501 line too long (104 > 79 characters)
                    component_status = self.component_status.get(component_key, ComponentStatus.UNKNOWN)
                                                                               ^
security/enhanced_safe_function_manager.py:180:1: W293 blank line contains whitespace
            
^
security/enhanced_safe_function_manager.py:182:1: W293 blank line contains whitespace
            
^
security/enhanced_safe_function_manager.py:184:80: E501 line too long (84 > 79 characters)
            self.log_activity(f"Ошибка получения статуса компонентов: {e}", "error")
                                                                               ^
security/enhanced_safe_function_manager.py:186:1: W293 blank line contains whitespace
    
^
security/enhanced_safe_function_manager.py:192:1: W293 blank line contains whitespace
            
^
security/enhanced_safe_function_manager.py:195:1: W293 blank line contains whitespace
            
^
security/enhanced_safe_function_manager.py:202:80: E501 line too long (106 > 79 characters)
                    "uptime": (datetime.now() - self.start_time).total_seconds() if self.start_time else 0
                                                                               ^
security/enhanced_safe_function_manager.py:206:1: W293 blank line contains whitespace
            
^
security/enhanced_safe_function_manager.py:208:1: W293 blank line contains whitespace
            
^
security/enhanced_safe_function_manager.py:210:80: E501 line too long (80 > 79 characters)
            self.log_activity(f"Ошибка получения данных дашборда: {e}", "error")
                                                                               ^
security/enhanced_safe_function_manager.py:212:1: W293 blank line contains whitespace
    
^
security/enhanced_safe_function_manager.py:216:80: E501 line too long (102 > 79 characters)
            self.log_activity(f"Переинициализация компонентов для режима {self.component_mode.value}")
                                                                               ^
security/enhanced_safe_function_manager.py:217:1: W293 blank line contains whitespace
            
^
security/enhanced_safe_function_manager.py:222:80: E501 line too long (124 > 79 characters)
                        self.component_status[component_key] = ComponentStatus.RUNNING if success else ComponentStatus.ERROR
                                                                               ^
security/enhanced_safe_function_manager.py:224:80: E501 line too long (96 > 79 characters)
                    self.log_activity(f"Ошибка переинициализации {component_key}: {e}", "error")
                                                                               ^
security/enhanced_safe_function_manager.py:225:80: E501 line too long (80 > 79 characters)
                    self.component_status[component_key] = ComponentStatus.ERROR
                                                                               ^
security/enhanced_safe_function_manager.py:226:1: W293 blank line contains whitespace
                    
^
security/enhanced_safe_function_manager.py:228:80: E501 line too long (84 > 79 characters)
            self.log_activity(f"Ошибка переинициализации компонентов: {e}", "error")
                                                                               ^
security/enhanced_safe_function_manager.py:229:1: W293 blank line contains whitespace
    
^
security/enhanced_safe_function_manager.py:230:80: E501 line too long (89 > 79 characters)
    def register_component_function(self, component_type: str, mode: str = None) -> bool:
                                                                               ^
security/enhanced_safe_function_manager.py:235:1: W293 blank line contains whitespace
            
^
security/enhanced_safe_function_manager.py:238:80: E501 line too long (81 > 79 characters)
            description = f"Получение менеджера {component_type} в режиме {mode}"
                                                                               ^
security/enhanced_safe_function_manager.py:239:1: W293 blank line contains whitespace
            
^
security/enhanced_safe_function_manager.py:249:1: W293 blank line contains whitespace
            
^
security/enhanced_safe_function_manager.py:251:80: E501 line too long (90 > 79 characters)
                self.log_activity(f"Зарегистрирована функция компонента: {function_name}")
                                                                               ^
security/enhanced_safe_function_manager.py:252:1: W293 blank line contains whitespace
            
^
security/enhanced_safe_function_manager.py:254:1: W293 blank line contains whitespace
            
^
security/enhanced_safe_function_manager.py:256:80: E501 line too long (85 > 79 characters)
            self.log_activity(f"Ошибка регистрации функции компонента: {e}", "error")
                                                                               ^
security/enhanced_safe_function_manager.py:261:63: W292 no newline at end of file
ENHANCED_SAFE_FUNCTION_MANAGER = EnhancedSafeFunctionManager()                                                              ^
security/external_api_manager.py:9:1: F401 'json' imported but unused
import json
^
security/external_api_manager.py:12:1: F401 'typing.List' imported but unused
from typing import Dict, List, Optional, Any, Union
^
security/external_api_manager.py:12:1: F401 'typing.Union' imported but unused
from typing import Dict, List, Optional, Any, Union
^
security/external_api_manager.py:16:1: F401 'threading' imported but unused
import threading
^
security/external_api_manager.py:66:1: W293 blank line contains whitespace
    
^
security/external_api_manager.py:71:1: W293 blank line contains whitespace
        
^
security/external_api_manager.py:74:1: W293 blank line contains whitespace
        
^
security/external_api_manager.py:78:1: W293 blank line contains whitespace
        
^
security/external_api_manager.py:87:1: W293 blank line contains whitespace
        
^
security/external_api_manager.py:91:1: W293 blank line contains whitespace
        
^
security/external_api_manager.py:94:1: W293 blank line contains whitespace
        
^
security/external_api_manager.py:97:1: W293 blank line contains whitespace
        
^
security/external_api_manager.py:100:1: W293 blank line contains whitespace
    
^
security/external_api_manager.py:123:1: W293 blank line contains whitespace
            
^
security/external_api_manager.py:143:1: W293 blank line contains whitespace
            
^
security/external_api_manager.py:164:1: W293 blank line contains whitespace
    
^
security/external_api_manager.py:174:1: W293 blank line contains whitespace
    
^
security/external_api_manager.py:179:1: W293 blank line contains whitespace
        
^
security/external_api_manager.py:183:1: W293 blank line contains whitespace
        
^
security/external_api_manager.py:189:1: W293 blank line contains whitespace
        
^
security/external_api_manager.py:194:1: W293 blank line contains whitespace
        
^
security/external_api_manager.py:196:1: W293 blank line contains whitespace
    
^
security/external_api_manager.py:197:80: E501 line too long (92 > 79 characters)
    async def _make_api_request(self, api_name: str, params: Dict[str, Any]) -> APIResponse:
                                                                               ^
security/external_api_manager.py:209:1: W293 blank line contains whitespace
        
^
security/external_api_manager.py:212:1: W293 blank line contains whitespace
        
^
security/external_api_manager.py:225:1: W293 blank line contains whitespace
            
^
security/external_api_manager.py:233:1: W293 blank line contains whitespace
            
^
security/external_api_manager.py:240:1: W293 blank line contains whitespace
            
^
security/external_api_manager.py:242:80: E501 line too long (111 > 79 characters)
            async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=endpoint.timeout)) as session:
                                                                               ^
security/external_api_manager.py:245:80: E501 line too long (91 > 79 characters)
                    async with session.post(url, json=params, headers=headers) as response:
                                                                               ^
security/external_api_manager.py:250:80: E501 line too long (92 > 79 characters)
                    async with session.get(url, params=params, headers=headers) as response:
                                                                               ^
security/external_api_manager.py:253:1: W293 blank line contains whitespace
            
^
security/external_api_manager.py:257:1: W293 blank line contains whitespace
            
^
security/external_api_manager.py:259:1: W293 blank line contains whitespace
            
^
security/external_api_manager.py:268:1: W293 blank line contains whitespace
            
^
security/external_api_manager.py:289:1: W293 blank line contains whitespace
    
^
security/external_api_manager.py:290:80: E501 line too long (108 > 79 characters)
    async def check_threat_intelligence(self, indicator: str, indicator_type: str = "ip") -> Dict[str, Any]:
                                                                               ^
security/external_api_manager.py:296:80: E501 line too long (92 > 79 characters)
            if datetime.now() - cache_data["timestamp"] < timedelta(seconds=self.cache_ttl):
                                                                               ^
security/external_api_manager.py:299:1: W293 blank line contains whitespace
        
^
security/external_api_manager.py:301:1: W293 blank line contains whitespace
        
^
security/external_api_manager.py:312:1: W293 blank line contains whitespace
        
^
security/external_api_manager.py:323:1: W293 blank line contains whitespace
        
^
security/external_api_manager.py:329:1: W293 blank line contains whitespace
        
^
security/external_api_manager.py:335:1: W293 blank line contains whitespace
        
^
security/external_api_manager.py:337:1: W293 blank line contains whitespace
    
^
security/external_api_manager.py:344:80: E501 line too long (92 > 79 characters)
            if datetime.now() - cache_data["timestamp"] < timedelta(seconds=self.cache_ttl):
                                                                               ^
security/external_api_manager.py:347:1: W293 blank line contains whitespace
        
^
security/external_api_manager.py:349:1: W293 blank line contains whitespace
        
^
security/external_api_manager.py:352:80: E501 line too long (84 > 79 characters)
            apip_response = await self._make_api_request("apip", {"ip": ip_address})
                                                                               ^
security/external_api_manager.py:357:1: W293 blank line contains whitespace
        
^
security/external_api_manager.py:360:80: E501 line too long (95 > 79 characters)
            rfgi_response = await self._make_api_request("reallyfreegeoip", {"ip": ip_address})
                                                                               ^
security/external_api_manager.py:365:1: W293 blank line contains whitespace
        
^
security/external_api_manager.py:371:1: W293 blank line contains whitespace
        
^
security/external_api_manager.py:377:1: W293 blank line contains whitespace
        
^
security/external_api_manager.py:379:1: W293 blank line contains whitespace
    
^
security/external_api_manager.py:386:80: E501 line too long (92 > 79 characters)
            if datetime.now() - cache_data["timestamp"] < timedelta(seconds=self.cache_ttl):
                                                                               ^
security/external_api_manager.py:389:1: W293 blank line contains whitespace
        
^
security/external_api_manager.py:391:1: W293 blank line contains whitespace
        
^
security/external_api_manager.py:394:80: E501 line too long (98 > 79 characters)
            rapid_response = await self._make_api_request("rapid_email", {"email": email_address})
                                                                               ^
security/external_api_manager.py:399:1: W293 blank line contains whitespace
        
^
security/external_api_manager.py:402:80: E501 line too long (96 > 79 characters)
            noparam_response = await self._make_api_request("noparam", {"email": email_address})
                                                                               ^
security/external_api_manager.py:407:1: W293 blank line contains whitespace
        
^
security/external_api_manager.py:413:1: W293 blank line contains whitespace
        
^
security/external_api_manager.py:419:1: W293 blank line contains whitespace
        
^
security/external_api_manager.py:421:1: W293 blank line contains whitespace
    
^
security/external_api_manager.py:438:1: W293 blank line contains whitespace
    
^
security/external_api_manager.py:443:1: W293 blank line contains whitespace
    
^
security/external_api_manager.py:461:44: W292 no newline at end of file
external_api_manager = ExternalAPIManager()                                           ^
security/family/__init__.py:25:16: W291 trailing whitespace
    "UserRole", 
               ^
security/family/__init__.py:31:2: W292 no newline at end of file
] ^
security/family/advanced_parental_controls.py:10:1: F401 'logging' imported but unused
import logging
^
security/family/advanced_parental_controls.py:11:1: F401 'time' imported but unused
import time
^
security/family/advanced_parental_controls.py:12:1: F401 'datetime.timedelta' imported but unused
from datetime import datetime, timedelta
^
security/family/advanced_parental_controls.py:13:1: F401 'typing.Optional' imported but unused
from typing import Dict, List, Any, Optional
^
security/family/advanced_parental_controls.py:15:1: F401 'dataclasses.dataclass' imported but unused
from dataclasses import dataclass
^
security/family/advanced_parental_controls.py:18:1: F401 'security.bots.incognito_protection_bot.BypassMethod' imported but unused
from security.bots.incognito_protection_bot import IncognitoProtectionBot, BypassMethod, ThreatLevel
^
security/family/advanced_parental_controls.py:18:80: E501 line too long (100 > 79 characters)
from security.bots.incognito_protection_bot import IncognitoProtectionBot, BypassMethod, ThreatLevel
                                                                               ^
security/family/advanced_parental_controls.py:24:46: W291 trailing whitespace
    HIGH = "high"            # Высокая защита  
                                             ^
security/family/advanced_parental_controls.py:31:1: W293 blank line contains whitespace
    
^
security/family/advanced_parental_controls.py:38:1: W293 blank line contains whitespace
        
^
security/family/advanced_parental_controls.py:39:80: E501 line too long (93 > 79 characters)
    async def setup_child_protection(self, child_id: str, protection_level: str = "MAXIMUM"):
                                                                               ^
security/family/advanced_parental_controls.py:50:1: W293 blank line contains whitespace
            
^
security/family/advanced_parental_controls.py:62:1: W293 blank line contains whitespace
            
^
security/family/advanced_parental_controls.py:63:13: F821 undefined name 'logger'
            logger.info(f"🛡️ Максимальная защита активирована для ребенка {child_id}")
            ^
security/family/advanced_parental_controls.py:63:80: E501 line too long (86 > 79 characters)
            logger.info(f"🛡️ Максимальная защита активирована для ребенка {child_id}")
                                                                               ^
security/family/advanced_parental_controls.py:65:1: W293 blank line contains whitespace
            
^
security/family/advanced_parental_controls.py:67:13: F821 undefined name 'logger'
            logger.error(f"Ошибка настройки защиты: {e}")
            ^
security/family/advanced_parental_controls.py:69:1: W293 blank line contains whitespace
    
^
security/family/advanced_parental_controls.py:70:80: E501 line too long (81 > 79 characters)
    async def emergency_response(self, child_id: str, threat_level: ThreatLevel):
                                                                               ^
security/family/advanced_parental_controls.py:76:1: W293 blank line contains whitespace
                
^
security/family/advanced_parental_controls.py:78:80: E501 line too long (103 > 79 characters)
                await self._send_critical_alert(child_id, "КРИТИЧЕСКАЯ УГРОЗА: Попытка обхода защиты!")
                                                                               ^
security/family/advanced_parental_controls.py:79:1: W293 blank line contains whitespace
                
^
security/family/advanced_parental_controls.py:81:17: F841 local variable 'screenshot' is assigned to but never used
                screenshot = await self.incognito_bot.take_screenshot(child_id)
                ^
security/family/advanced_parental_controls.py:82:1: W293 blank line contains whitespace
                
^
security/family/advanced_parental_controls.py:84:17: F821 undefined name 'logger'
                logger.critical(f"🚨 ЭКСТРЕННЫЙ РЕЖИМ: Ребенок {child_id} заблокирован!")
                ^
security/family/advanced_parental_controls.py:84:80: E501 line too long (88 > 79 characters)
                logger.critical(f"🚨 ЭКСТРЕННЫЙ РЕЖИМ: Ребенок {child_id} заблокирован!")
                                                                               ^
security/family/advanced_parental_controls.py:85:1: W293 blank line contains whitespace
                
^
security/family/advanced_parental_controls.py:89:80: E501 line too long (101 > 79 characters)
                await self._send_high_alert(child_id, "Высокий уровень угрозы: Блокировка браузеров")
                                                                               ^
security/family/advanced_parental_controls.py:90:1: W293 blank line contains whitespace
                
^
security/family/advanced_parental_controls.py:95:1: W293 blank line contains whitespace
            
^
security/family/advanced_parental_controls.py:97:1: W293 blank line contains whitespace
            
^
security/family/advanced_parental_controls.py:99:13: F821 undefined name 'logger'
            logger.error(f"Ошибка экстренного ответа: {e}")
            ^
security/family/advanced_parental_controls.py:101:1: W293 blank line contains whitespace
    
^
security/family/advanced_parental_controls.py:111:1: W293 blank line contains whitespace
        
^
security/family/advanced_parental_controls.py:114:1: W293 blank line contains whitespace
        
^
security/family/advanced_parental_controls.py:118:1: W293 blank line contains whitespace
    
^
security/family/advanced_parental_controls.py:128:1: W293 blank line contains whitespace
        
^
security/family/advanced_parental_controls.py:130:1: W293 blank line contains whitespace
        
^
security/family/advanced_parental_controls.py:133:1: W293 blank line contains whitespace
    
^
security/family/advanced_parental_controls.py:139:1: W293 blank line contains whitespace
            
^
security/family/advanced_parental_controls.py:142:1: W293 blank line contains whitespace
            
^
security/family/advanced_parental_controls.py:146:80: E501 line too long (82 > 79 characters)
                "protection_level": child_info.get("protection_level", "UNKNOWN"),
                                                                               ^
security/family/advanced_parental_controls.py:147:80: E501 line too long (106 > 79 characters)
                "monitoring_duration": str(datetime.now() - child_info.get("start_time", datetime.now())),
                                                                               ^
security/family/advanced_parental_controls.py:148:80: E501 line too long (80 > 79 characters)
                "total_blocked_attempts": child_info.get("blocked_attempts", 0),
                                                                               ^
security/family/advanced_parental_controls.py:149:80: E501 line too long (113 > 79 characters)
                "last_alert": child_info.get("last_alert").isoformat() if child_info.get("last_alert") else None,
                                                                               ^
security/family/advanced_parental_controls.py:153:1: W293 blank line contains whitespace
            
^
security/family/advanced_parental_controls.py:155:1: W293 blank line contains whitespace
            
^
security/family/advanced_parental_controls.py:157:13: F821 undefined name 'logger'
            logger.error(f"Ошибка получения отчета: {e}")
            ^
security/family/advanced_parental_controls.py:159:1: W293 blank line contains whitespace
    
^
security/family/advanced_parental_controls.py:163:1: W293 blank line contains whitespace
        
^
security/family/advanced_parental_controls.py:169:80: E501 line too long (124 > 79 characters)
                    recommendations.append(f"⚠️ Усилить защиту от {method}: {data['successful_attempts']} успешных попыток")
                                                                               ^
security/family/advanced_parental_controls.py:170:1: W293 blank line contains whitespace
        
^
security/family/advanced_parental_controls.py:174:80: E501 line too long (107 > 79 characters)
            recommendations.append("🔒 Частые попытки использования VPN - рассмотреть блокировку интернета")
                                                                               ^
security/family/advanced_parental_controls.py:175:1: W293 blank line contains whitespace
        
^
security/family/advanced_parental_controls.py:179:80: E501 line too long (85 > 79 characters)
            recommendations.append("🌐 Частые попытки инкогнито - усилить мониторинг")
                                                                               ^
security/family/advanced_parental_controls.py:180:1: W293 blank line contains whitespace
        
^
security/family/advanced_parental_controls.py:183:1: W293 blank line contains whitespace
        
^
security/family/advanced_parental_controls.py:191:1: W293 blank line contains whitespace
    
^
security/family/advanced_parental_controls.py:195:1: W293 blank line contains whitespace
    
^
security/family/advanced_parental_controls.py:196:11: F541 f-string is missing placeholders
    print(f"🛡️ Продвинутый родительский контроль активирован")
          ^
security/family/advanced_parental_controls.py:201:1: W293 blank line contains whitespace
    
^
security/family/advanced_parental_controls.py:208:24: W292 no newline at end of file
    asyncio.run(main())                       ^
security/family/child_protection.py:324:80: E501 line too long (98 > 79 characters)
                child_id, f"Попытка доступа к заблокированной категории: {content_category.value}"
                                                                               ^
security/family/child_protection.py:341:80: E501 line too long (92 > 79 characters)
                            child_id, f"Попытка доступа к заблокированному домену: {domain}"
                                                                               ^
security/family/child_protection.py:377:9: F841 local variable 'today' is assigned to but never used
        today = datetime.now().date()
        ^
security/family/child_protection.py:378:80: E501 line too long (81 > 79 characters)
        category_time = self._get_category_time_today(child_id, content_category)
                                                                               ^
security/family/child_protection.py:405:5: E129 visually indented line with same indent as next logical line
                log.timestamp.date() == today):
    ^
security/family/child_protection.py:417:5: E129 visually indented line with same indent as next logical line
                log.timestamp.date() == today):
    ^
security/family/child_protection.py:428:9: F841 local variable 'event' is assigned to but never used
        event = SecurityEvent(
        ^
security/family/child_protection.py:436:80: E501 line too long (80 > 79 characters)
        self.logger.warning(f"Нарушение защиты ребенка {child_id}: {violation}")
                                                                               ^
security/family/child_protection.py:471:80: E501 line too long (86 > 79 characters)
        self.logger.info(f"Уведомление родителям о нарушении {child_id}: {violation}")
                                                                               ^
security/family/child_protection.py:500:80: E501 line too long (83 > 79 characters)
            "total_screen_time_today": self._get_total_screen_time_today(child_id),
                                                                               ^
security/family/child_protection.py:530:80: E501 line too long (85 > 79 characters)
        if profile.age < 12 and ContentCategory.SOCIAL in profile.allowed_categories:
                                                                               ^
security/family/child_protection.py:663:31: W292 no newline at end of file
        return recommendations                              ^
security/family/child_protection_new.py:315:80: E501 line too long (98 > 79 characters)
                child_id, f"Попытка доступа к заблокированной категории: {content_category.value}"
                                                                               ^
security/family/child_protection_new.py:332:80: E501 line too long (92 > 79 characters)
                            child_id, f"Попытка доступа к заблокированному домену: {domain}"
                                                                               ^
security/family/child_protection_new.py:368:9: F841 local variable 'today' is assigned to but never used
        today = datetime.now().date()
        ^
security/family/child_protection_new.py:369:80: E501 line too long (81 > 79 characters)
        category_time = self._get_category_time_today(child_id, content_category)
                                                                               ^
security/family/child_protection_new.py:396:5: E129 visually indented line with same indent as next logical line
                log.timestamp.date() == today):
    ^
security/family/child_protection_new.py:408:5: E129 visually indented line with same indent as next logical line
                log.timestamp.date() == today):
    ^
security/family/child_protection_new.py:419:9: F841 local variable 'event' is assigned to but never used
        event = SecurityEvent(
        ^
security/family/child_protection_new.py:427:80: E501 line too long (80 > 79 characters)
        self.logger.warning(f"Нарушение защиты ребенка {child_id}: {violation}")
                                                                               ^
security/family/child_protection_new.py:462:80: E501 line too long (86 > 79 characters)
        self.logger.info(f"Уведомление родителям о нарушении {child_id}: {violation}")
                                                                               ^
security/family/child_protection_new.py:491:80: E501 line too long (83 > 79 characters)
            "total_screen_time_today": self._get_total_screen_time_today(child_id),
                                                                               ^
security/family/child_protection_new.py:521:80: E501 line too long (85 > 79 characters)
        if profile.age < 12 and ContentCategory.SOCIAL in profile.allowed_categories:
                                                                               ^
security/family/child_protection_new.py:654:31: W292 no newline at end of file
        return recommendations                              ^
security/family/elderly_protection.py:15:1: F401 'core.security_base.SecurityEvent' imported but unused
from core.security_base import SecurityEvent, SecurityRule, IncidentSeverity
^
security/family/elderly_protection.py:15:1: F401 'core.security_base.SecurityRule' imported but unused
from core.security_base import SecurityEvent, SecurityRule, IncidentSeverity
^
security/family/elderly_protection.py:15:1: F401 'core.security_base.IncidentSeverity' imported but unused
from core.security_base import SecurityEvent, SecurityRule, IncidentSeverity
^
security/family/elderly_protection.py:16:1: F401 'security.family.family_profile_manager.FamilyMember' imported but unused
from security.family.family_profile_manager import FamilyMember, AgeGroup
^
security/family/elderly_protection.py:16:1: F401 'security.family.family_profile_manager.AgeGroup' imported but unused
from security.family.family_profile_manager import FamilyMember, AgeGroup
^
security/family/elderly_protection.py:25:40: E261 at least two spaces before inline comment
    FINANCIAL_FRAUD = "financial_fraud" # Финансовое мошенничество
                                       ^
security/family/elderly_protection.py:92:1: W293 blank line contains whitespace
    
^
security/family/elderly_protection.py:95:80: E501 line too long (97 > 79 characters)
        self.logger = logging.getLogger(f"{self.__class__.__module__}.{self.__class__.__name__}")
                                                                               ^
security/family/elderly_protection.py:96:1: W293 blank line contains whitespace
        
^
security/family/elderly_protection.py:105:1: W293 blank line contains whitespace
        
^
security/family/elderly_protection.py:108:1: W293 blank line contains whitespace
        
^
security/family/elderly_protection.py:111:1: W293 blank line contains whitespace
        
^
security/family/elderly_protection.py:127:80: E501 line too long (83 > 79 characters)
            description="Телефонное мошенничество с призами и банковскими услугами"
                                                                               ^
security/family/elderly_protection.py:129:1: W293 blank line contains whitespace
        
^
security/family/elderly_protection.py:149:1: W293 blank line contains whitespace
        
^
security/family/elderly_protection.py:170:1: W293 blank line contains whitespace
        
^
security/family/elderly_protection.py:183:1: W293 blank line contains whitespace
        
^
security/family/elderly_protection.py:191:1: W293 blank line contains whitespace
    
^
security/family/elderly_protection.py:193:14: W291 trailing whitespace
        self, 
             ^
security/family/elderly_protection.py:194:25: W291 trailing whitespace
        elderly_id: str, 
                        ^
security/family/elderly_protection.py:195:27: W291 trailing whitespace
        phone_number: str, 
                          ^
security/family/elderly_protection.py:201:1: W293 blank line contains whitespace
        """
        Анализ телефонного звонка
        
        Args:
            elderly_id: ID пожилого человека
            phone_number: Номер телефона
            caller_name: Имя звонящего
            call_content: Содержимое разговора
            
        Returns:
            Tuple[RiskLevel, ProtectionAction, str]: (уровень риска, действие, причина)
        """
^
security/family/elderly_protection.py:207:1: W293 blank line contains whitespace
        """
        Анализ телефонного звонка
        
        Args:
            elderly_id: ID пожилого человека
            phone_number: Номер телефона
            caller_name: Имя звонящего
            call_content: Содержимое разговора
            
        Returns:
            Tuple[RiskLevel, ProtectionAction, str]: (уровень риска, действие, причина)
        """
^
security/family/elderly_protection.py:209:80: E501 line too long (87 > 79 characters)
        """
        Анализ телефонного звонка
        
        Args:
            elderly_id: ID пожилого человека
            phone_number: Номер телефона
            caller_name: Имя звонящего
            call_content: Содержимое разговора
            
        Returns:
            Tuple[RiskLevel, ProtectionAction, str]: (уровень риска, действие, причина)
        """
           
                                 
        
             
          ^
security/family/elderly_protection.py:214:80: E501 line too long (87 > 79 characters)
                return RiskLevel.CRITICAL, ProtectionAction.BLOCK, "Номер заблокирован"
                                                                               ^
security/family/elderly_protection.py:215:1: W293 blank line contains whitespace
            
^
security/family/elderly_protection.py:218:80: E501 line too long (82 > 79 characters)
                return RiskLevel.LOW, ProtectionAction.ALLOW, "Доверенный контакт"
                                                                               ^
security/family/elderly_protection.py:219:1: W293 blank line contains whitespace
            
^
security/family/elderly_protection.py:223:1: W293 blank line contains whitespace
            
^
security/family/elderly_protection.py:230:1: W293 blank line contains whitespace
                    
^
security/family/elderly_protection.py:234:80: E501 line too long (83 > 79 characters)
                            detected_threats.append((pattern, "suspicious_number"))
                                                                               ^
security/family/elderly_protection.py:235:1: W293 blank line contains whitespace
            
^
security/family/elderly_protection.py:238:80: E501 line too long (83 > 79 characters)
                risk_levels = [threat[0].risk_level for threat in detected_threats]
                                                                               ^
security/family/elderly_protection.py:240:80: E501 line too long (91 > 79 characters)
                threat_types = [threat[0].threat_type.value for threat in detected_threats]
                                                                               ^
security/family/elderly_protection.py:241:1: W293 blank line contains whitespace
                
^
security/family/elderly_protection.py:253:1: W293 blank line contains whitespace
                
^
security/family/elderly_protection.py:255:1: W293 blank line contains whitespace
                
^
security/family/elderly_protection.py:265:80: E501 line too long (84 > 79 characters)
                    reason = f"Подозрительная активность: {', '.join(threat_types)}"
                                                                               ^
security/family/elderly_protection.py:266:1: W293 blank line contains whitespace
                
^
security/family/elderly_protection.py:268:1: W293 blank line contains whitespace
            
^
security/family/elderly_protection.py:270:1: W293 blank line contains whitespace
            
^
security/family/elderly_protection.py:274:1: W293 blank line contains whitespace
    
^
security/family/elderly_protection.py:276:14: W291 trailing whitespace
        self, 
             ^
security/family/elderly_protection.py:277:25: W291 trailing whitespace
        elderly_id: str, 
                        ^
security/family/elderly_protection.py:278:27: W291 trailing whitespace
        sender_email: str, 
                          ^
security/family/elderly_protection.py:279:22: W291 trailing whitespace
        subject: str, 
                     ^
security/family/elderly_protection.py:284:1: W293 blank line contains whitespace
        """
        Анализ email сообщения
        
        Args:
            elderly_id: ID пожилого человека
            sender_email: Email отправителя
            subject: Тема письма
            content: Содержимое письма
            
        Returns:
            Tuple[RiskLevel, ProtectionAction, str]: (уровень риска, действие, причина)
        """
^
security/family/elderly_protection.py:290:1: W293 blank line contains whitespace
        """
        Анализ email сообщения
        
        Args:
            elderly_id: ID пожилого человека
            sender_email: Email отправителя
            subject: Тема письма
            content: Содержимое письма
            
        Returns:
            Tuple[RiskLevel, ProtectionAction, str]: (уровень риска, действие, причина)
        """
^
security/family/elderly_protection.py:292:80: E501 line too long (87 > 79 characters)
        """
        Анализ email сообщения
        
        Args:
            elderly_id: ID пожилого человека
            sender_email: Email отправителя
            subject: Тема письма
            content: Содержимое письма
            
        Returns:
            Tuple[RiskLevel, ProtectionAction, str]: (уровень риска, действие, причина)
        """
           
                              
        
             
             ^
security/family/elderly_protection.py:297:80: E501 line too long (87 > 79 characters)
                return RiskLevel.CRITICAL, ProtectionAction.BLOCK, "Email заблокирован"
                                                                               ^
security/family/elderly_protection.py:298:1: W293 blank line contains whitespace
            
^
security/family/elderly_protection.py:302:1: W293 blank line contains whitespace
            
^
security/family/elderly_protection.py:309:1: W293 blank line contains whitespace
                    
^
security/family/elderly_protection.py:313:80: E501 line too long (82 > 79 characters)
                            detected_threats.append((pattern, "suspicious_email"))
                                                                               ^
security/family/elderly_protection.py:314:1: W293 blank line contains whitespace
            
^
security/family/elderly_protection.py:317:80: E501 line too long (83 > 79 characters)
                risk_levels = [threat[0].risk_level for threat in detected_threats]
                                                                               ^
security/family/elderly_protection.py:319:80: E501 line too long (91 > 79 characters)
                threat_types = [threat[0].threat_type.value for threat in detected_threats]
                                                                               ^
security/family/elderly_protection.py:320:1: W293 blank line contains whitespace
                
^
security/family/elderly_protection.py:332:1: W293 blank line contains whitespace
                
^
security/family/elderly_protection.py:334:1: W293 blank line contains whitespace
                
^
security/family/elderly_protection.py:344:80: E501 line too long (80 > 79 characters)
                    reason = f"Подозрительное письмо: {', '.join(threat_types)}"
                                                                               ^
security/family/elderly_protection.py:345:1: W293 blank line contains whitespace
                
^
security/family/elderly_protection.py:347:1: W293 blank line contains whitespace
            
^
security/family/elderly_protection.py:349:1: W293 blank line contains whitespace
            
^
security/family/elderly_protection.py:353:1: W293 blank line contains whitespace
    
^
security/family/elderly_protection.py:355:14: W291 trailing whitespace
        self, 
             ^
security/family/elderly_protection.py:356:25: W291 trailing whitespace
        elderly_id: str, 
                        ^
security/family/elderly_protection.py:357:26: W291 trailing whitespace
        website_url: str, 
                         ^
security/family/elderly_protection.py:362:1: W293 blank line contains whitespace
        """
        Анализ веб-сайта
        
        Args:
            elderly_id: ID пожилого человека
            website_url: URL сайта
            page_content: Содержимое страницы
            
        Returns:
            Tuple[RiskLevel, ProtectionAction, str]: (уровень риска, действие, причина)
        """
^
security/family/elderly_protection.py:367:1: W293 blank line contains whitespace
        """
        Анализ веб-сайта
        
        Args:
            elderly_id: ID пожилого человека
            website_url: URL сайта
            page_content: Содержимое страницы
            
        Returns:
            Tuple[RiskLevel, ProtectionAction, str]: (уровень риска, действие, причина)
        """
^
security/family/elderly_protection.py:369:80: E501 line too long (87 > 79 characters)
        """
        Анализ веб-сайта
        
        Args:
            elderly_id: ID пожилого человека
            website_url: URL сайта
            page_content: Содержимое страницы
            
        Returns:
            Tuple[RiskLevel, ProtectionAction, str]: (уровень риска, действие, причина)
        """
           
                        
        
             
                   ^
security/family/elderly_protection.py:374:80: E501 line too long (86 > 79 characters)
                return RiskLevel.CRITICAL, ProtectionAction.BLOCK, "Сайт заблокирован"
                                                                               ^
security/family/elderly_protection.py:375:1: W293 blank line contains whitespace
            
^
security/family/elderly_protection.py:379:1: W293 blank line contains whitespace
            
^
security/family/elderly_protection.py:386:1: W293 blank line contains whitespace
                    
^
security/family/elderly_protection.py:390:80: E501 line too long (80 > 79 characters)
                            detected_threats.append((pattern, "suspicious_url"))
                                                                               ^
security/family/elderly_protection.py:391:1: W293 blank line contains whitespace
            
^
security/family/elderly_protection.py:394:80: E501 line too long (83 > 79 characters)
                risk_levels = [threat[0].risk_level for threat in detected_threats]
                                                                               ^
security/family/elderly_protection.py:396:80: E501 line too long (91 > 79 characters)
                threat_types = [threat[0].threat_type.value for threat in detected_threats]
                                                                               ^
security/family/elderly_protection.py:397:1: W293 blank line contains whitespace
                
^
security/family/elderly_protection.py:403:80: E501 line too long (84 > 79 characters)
                    content=f"URL: {website_url}\nContent: {page_content[:200]}...",
                                                                               ^
security/family/elderly_protection.py:409:1: W293 blank line contains whitespace
                
^
security/family/elderly_protection.py:411:1: W293 blank line contains whitespace
                
^
security/family/elderly_protection.py:422:1: W293 blank line contains whitespace
                
^
security/family/elderly_protection.py:424:1: W293 blank line contains whitespace
            
^
security/family/elderly_protection.py:426:1: W293 blank line contains whitespace
            
^
security/family/elderly_protection.py:430:1: W293 blank line contains whitespace
    
^
security/family/elderly_protection.py:431:80: E501 line too long (84 > 79 characters)
    def block_contact(self, contact_info: str, contact_type: str = "phone") -> bool:
                                                                               ^
security/family/elderly_protection.py:434:1: W293 blank line contains whitespace
        """
        Блокировка контакта
        
        Args:
            contact_info: Информация о контакте (номер, email, URL)
            contact_type: Тип контакта (phone, email, website)
            
        Returns:
            bool: Успешно ли заблокирован контакт
        """
^
security/family/elderly_protection.py:438:1: W293 blank line contains whitespace
        """
        Блокировка контакта
        
        Args:
            contact_info: Информация о контакте (номер, email, URL)
            contact_type: Тип контакта (phone, email, website)
            
        Returns:
            bool: Успешно ли заблокирован контакт
        """
^
security/family/elderly_protection.py:449:1: W293 blank line contains whitespace
            
^
security/family/elderly_protection.py:452:1: W293 blank line contains whitespace
            
^
security/family/elderly_protection.py:456:1: W293 blank line contains whitespace
    
^
security/family/elderly_protection.py:457:80: E501 line too long (90 > 79 characters)
    def add_trusted_contact(self, contact_info: str, contact_type: str = "phone") -> bool:
                                                                               ^
security/family/elderly_protection.py:460:1: W293 blank line contains whitespace
        """
        Добавление доверенного контакта
        
        Args:
            contact_info: Информация о контакте
            contact_type: Тип контакта
            
        Returns:
            bool: Успешно ли добавлен контакт
        """
^
security/family/elderly_protection.py:464:1: W293 blank line contains whitespace
        """
        Добавление доверенного контакта
        
        Args:
            contact_info: Информация о контакте
            contact_type: Тип контакта
            
        Returns:
            bool: Успешно ли добавлен контакт
        """
^
security/family/elderly_protection.py:470:80: E501 line too long (83 > 79 characters)
            self.logger.info(f"Добавлен доверенный {contact_type}: {contact_info}")
                                                                               ^
security/family/elderly_protection.py:472:1: W293 blank line contains whitespace
            
^
security/family/elderly_protection.py:476:1: W293 blank line contains whitespace
    
^
security/family/elderly_protection.py:478:14: W291 trailing whitespace
        self, 
             ^
security/family/elderly_protection.py:479:25: W291 trailing whitespace
        elderly_id: str, 
                        ^
security/family/elderly_protection.py:484:1: W293 blank line contains whitespace
        """
        Добавление контакта семьи
        
        Args:
            elderly_id: ID пожилого человека
            contact: Контакт семьи
            
        Returns:
            bool: Успешно ли добавлен контакт
        """
^
security/family/elderly_protection.py:488:1: W293 blank line contains whitespace
        """
        Добавление контакта семьи
        
        Args:
            elderly_id: ID пожилого человека
            contact: Контакт семьи
            
        Returns:
            bool: Успешно ли добавлен контакт
        """
^
security/family/elderly_protection.py:495:1: W293 blank line contains whitespace
            
^
security/family/elderly_protection.py:497:80: E501 line too long (88 > 79 characters)
            self.logger.info(f"Добавлен контакт семьи для {elderly_id}: {contact.name}")
                                                                               ^
security/family/elderly_protection.py:499:1: W293 blank line contains whitespace
            
^
security/family/elderly_protection.py:503:1: W293 blank line contains whitespace
    
^
security/family/elderly_protection.py:505:14: W291 trailing whitespace
        self, 
             ^
security/family/elderly_protection.py:506:25: W291 trailing whitespace
        elderly_id: str, 
                        ^
security/family/elderly_protection.py:507:22: W291 trailing whitespace
        message: str, 
                     ^
security/family/elderly_protection.py:512:1: W293 blank line contains whitespace
        """
        Уведомление семьи
        
        Args:
            elderly_id: ID пожилого человека
            message: Сообщение
            priority: Приоритет (1 = высший)
            
        Returns:
            bool: Успешно ли отправлены уведомления
        """
^
security/family/elderly_protection.py:517:1: W293 blank line contains whitespace
        """
        Уведомление семьи
        
        Args:
            elderly_id: ID пожилого человека
            message: Сообщение
            priority: Приоритет (1 = высший)
            
        Returns:
            bool: Успешно ли отправлены уведомления
        """
^
security/family/elderly_protection.py:523:1: W293 blank line contains whitespace
            
^
security/family/elderly_protection.py:526:1: W293 blank line contains whitespace
            
^
security/family/elderly_protection.py:531:80: E501 line too long (96 > 79 characters)
                    self.logger.info(f"Уведомление {contact.name} ({contact.phone}): {message}")
                                                                               ^
security/family/elderly_protection.py:533:1: W293 blank line contains whitespace
            
^
security/family/elderly_protection.py:535:1: W293 blank line contains whitespace
            
^
security/family/elderly_protection.py:539:1: W293 blank line contains whitespace
    
^
security/family/elderly_protection.py:541:14: W291 trailing whitespace
        self, 
             ^
security/family/elderly_protection.py:542:25: W291 trailing whitespace
        elderly_id: str, 
                        ^
security/family/elderly_protection.py:547:1: W293 blank line contains whitespace
        """
        Получение отчета об активности пожилого человека
        
        Args:
            elderly_id: ID пожилого человека
            days: Количество дней для отчета
            
        Returns:
            Dict[str, Any]: Отчет об активности
        """
^
security/family/elderly_protection.py:551:1: W293 blank line contains whitespace
        """
        Получение отчета об активности пожилого человека
        
        Args:
            elderly_id: ID пожилого человека
            days: Количество дней для отчета
            
        Returns:
            Dict[str, Any]: Отчет об активности
        """
^
security/family/elderly_protection.py:558:1: W293 blank line contains whitespace
            
^
security/family/elderly_protection.py:561:52: W291 trailing whitespace
                activity for activity in activities 
                                                   ^
security/family/elderly_protection.py:564:1: W293 blank line contains whitespace
            
^
security/family/elderly_protection.py:568:1: W293 blank line contains whitespace
            
^
security/family/elderly_protection.py:572:80: E501 line too long (84 > 79 characters)
                    threat_stats[threat_type] = threat_stats.get(threat_type, 0) + 1
                                                                               ^
security/family/elderly_protection.py:573:1: W293 blank line contains whitespace
                
^
security/family/elderly_protection.py:576:1: W293 blank line contains whitespace
            
^
security/family/elderly_protection.py:582:1: W293 blank line contains whitespace
            
^
security/family/elderly_protection.py:587:80: E501 line too long (91 > 79 characters)
                "threats_detected": sum(1 for a in recent_activities if a.threat_detected),
                                                                               ^
security/family/elderly_protection.py:591:80: E501 line too long (94 > 79 characters)
                "family_notifications": sum(1 for a in recent_activities if a.family_notified)
                                                                               ^
security/family/elderly_protection.py:593:1: W293 blank line contains whitespace
            
^
security/family/elderly_protection.py:597:1: W293 blank line contains whitespace
    
^
security/family/elderly_protection.py:598:80: E501 line too long (80 > 79 characters)
    def _add_activity(self, elderly_id: str, activity: ElderlyActivity) -> None:
                                                                               ^
security/family/elderly_protection.py:603:1: W293 blank line contains whitespace
    
^
security/family/elderly_protection.py:608:80: E501 line too long (102 > 79 characters)
            total_activities = sum(len(activities) for activities in self.elderly_activities.values())
                                                                               ^
security/family/elderly_protection.py:609:80: E501 line too long (100 > 79 characters)
            total_family_contacts = sum(len(contacts) for contacts in self.family_contacts.values())
                                                                               ^
security/family/elderly_protection.py:610:1: W293 blank line contains whitespace
            
^
security/family/elderly_protection.py:623:1: W293 blank line contains whitespace
            
^
security/family/family_dashboard_manager.py:16:1: F401 'datetime.timedelta' imported but unused
from datetime import datetime, timedelta
^
security/family/family_dashboard_manager.py:18:1: F401 'collections.defaultdict' imported but unused
from collections import defaultdict, deque
^
security/family/family_dashboard_manager.py:92:80: E501 line too long (82 > 79 characters)
    def __init__(self, member_id, name, role, age=0, avatar="", preferences=None):
                                                                               ^
security/family/family_dashboard_manager.py:123:80: E501 line too long (83 > 79 characters)
    def __init__(self, widget_id, widget_type, title, position, size, config=None):
                                                                               ^
security/family/family_dashboard_manager.py:154:80: E501 line too long (80 > 79 characters)
    def __init__(self, notification_id, title, message, level, target_role=None,
                                                                               ^
security/family/family_dashboard_manager.py:175:80: E501 line too long (80 > 79 characters)
            "target_role": self.target_role.value if self.target_role else None,
                                                                               ^
security/family/family_dashboard_manager.py:178:80: E501 line too long (83 > 79 characters)
            "expires_at": self.expires_at.isoformat() if self.expires_at else None,
                                                                               ^
security/family/family_dashboard_manager.py:275:80: E501 line too long (95 > 79 characters)
            self.logger.error("Ошибка инициализации FamilyDashboardManager: {}".format(str(e)))
                                                                               ^
security/family/family_dashboard_manager.py:393:80: E501 line too long (86 > 79 characters)
            self.logger.info("Инициализировано {} виджетов".format(len(self.widgets)))
                                                                               ^
security/family/family_dashboard_manager.py:396:80: E501 line too long (81 > 79 characters)
            self.logger.error("Ошибка инициализации виджетов: {}".format(str(e)))
                                                                               ^
security/family/family_dashboard_manager.py:435:80: E501 line too long (93 > 79 characters)
            self.logger.info("Настроено {} быстрых действий".format(len(self.quick_actions)))
                                                                               ^
security/family/family_dashboard_manager.py:438:80: E501 line too long (85 > 79 characters)
            self.logger.error("Ошибка настройки быстрых действий: {}".format(str(e)))
                                                                               ^
security/family/family_dashboard_manager.py:471:80: E501 line too long (102 > 79 characters)
            self.logger.info("Настроено {} экстренных контактов".format(len(self.emergency_contacts)))
                                                                               ^
security/family/family_dashboard_manager.py:474:80: E501 line too long (89 > 79 characters)
            self.logger.error("Ошибка настройки экстренных контактов: {}".format(str(e)))
                                                                               ^
security/family/family_dashboard_manager.py:477:80: E501 line too long (91 > 79 characters)
    def add_family_member(self, member_id, name, role, age=0, avatar="", preferences=None):
                                                                               ^
security/family/family_dashboard_manager.py:507:80: E501 line too long (87 > 79 characters)
                raise ValueError("Член семьи с ID {} уже существует".format(member_id))
                                                                               ^
security/family/family_dashboard_manager.py:510:80: E501 line too long (82 > 79 characters)
            member = FamilyMember(member_id, name, role, age, avatar, preferences)
                                                                               ^
security/family/family_dashboard_manager.py:516:80: E501 line too long (85 > 79 characters)
            self.logger.info("Добавлен член семьи: {} ({})".format(name, role.value))
                                                                               ^
security/family/family_dashboard_manager.py:520:80: E501 line too long (95 > 79 characters)
            self.logger.error("Ошибка валидации при добавлении члена семьи: {}".format(str(e)))
                                                                               ^
security/family/family_dashboard_manager.py:523:80: E501 line too long (97 > 79 characters)
            self.logger.error("Ошибка типа данных при добавлении члена семьи: {}".format(str(e)))
                                                                               ^
security/family/family_dashboard_manager.py:526:80: E501 line too long (97 > 79 characters)
            self.logger.error("Неожиданная ошибка при добавлении члена семьи: {}".format(str(e)))
                                                                               ^
security/family/family_dashboard_manager.py:533:80: E501 line too long (80 > 79 characters)
            base_widgets = ["security_status", "notifications", "quick_actions"]
                                                                               ^
security/family/family_dashboard_manager.py:537:80: E501 line too long (101 > 79 characters)
                role_widgets = ["family_members", "parental_controls", "statistics", "device_status"]
                                                                               ^
security/family/family_dashboard_manager.py:541:80: E501 line too long (80 > 79 characters)
                role_widgets = ["family_members", "health_monitor", "emergency"]
                                                                               ^
security/family/family_dashboard_manager.py:543:80: E501 line too long (83 > 79 characters)
                role_widgets = ["family_members", "device_status", "activity_feed"]
                                                                               ^
security/family/family_dashboard_manager.py:562:80: E501 line too long (88 > 79 characters)
            self.logger.info("Создан дашборд для {} ({})".format(member_id, role.value))
                                                                               ^
security/family/family_dashboard_manager.py:565:80: E501 line too long (94 > 79 characters)
            self.logger.error("Ошибка создания дашборда для {}: {}".format(member_id, str(e)))
                                                                               ^
security/family/family_dashboard_manager.py:579:80: E501 line too long (110 > 79 characters)
    def send_notification(self, title, message, level, target_role=None, target_member=None, expires_at=None):
                                                                               ^
security/family/family_dashboard_manager.py:603:80: E501 line too long (82 > 79 characters)
                raise TypeError("level должен быть экземпляром NotificationLevel")
                                                                               ^
security/family/family_dashboard_manager.py:606:80: E501 line too long (93 > 79 characters)
            notification_id = "notif_{}_{}".format(int(time.time()), len(self.notifications))
                                                                               ^
security/family/family_dashboard_manager.py:608:80: E501 line too long (94 > 79 characters)
                notification_id, title, message, level, target_role, target_member, expires_at
                                                                               ^
security/family/family_dashboard_manager.py:614:80: E501 line too long (99 > 79 characters)
            self.logger.info("Отправлено уведомление: {} (уровень: {})".format(title, level.value))
                                                                               ^
security/family/family_dashboard_manager.py:618:80: E501 line too long (93 > 79 characters)
            self.logger.error("Ошибка валидации при отправке уведомления: {}".format(str(e)))
                                                                               ^
security/family/family_dashboard_manager.py:621:80: E501 line too long (95 > 79 characters)
            self.logger.error("Ошибка типа данных при отправке уведомления: {}".format(str(e)))
                                                                               ^
security/family/family_dashboard_manager.py:624:80: E501 line too long (95 > 79 characters)
            self.logger.error("Неожиданная ошибка при отправке уведомления: {}".format(str(e)))
                                                                               ^
security/family/family_dashboard_manager.py:639:80: E501 line too long (81 > 79 characters)
                self.logger.warning("Дашборд для {} не найден".format(member_id))
                                                                               ^
security/family/family_dashboard_manager.py:645:80: E501 line too long (95 > 79 characters)
            self.logger.error("Ошибка получения дашборда для {}: {}".format(member_id, str(e)))
                                                                               ^
security/family/family_dashboard_manager.py:656:80: E501 line too long (80 > 79 characters)
            return [member.to_dict() for member in self.family_members.values()]
                                                                               ^
security/family/family_dashboard_manager.py:658:80: E501 line too long (88 > 79 characters)
            self.logger.error("Ошибка получения списка членов семьи: {}".format(str(e)))
                                                                               ^
security/family/family_dashboard_manager.py:677:80: E501 line too long (117 > 79 characters)
                notifications = [n for n in notifications if n.target_member == member_id or n.target_member is None]
                                                                               ^
security/family/family_dashboard_manager.py:686:80: E501 line too long (80 > 79 characters)
            self.logger.error("Ошибка получения уведомлений: {}".format(str(e)))
                                                                               ^
security/family/family_dashboard_manager.py:732:80: E501 line too long (91 > 79 characters)
            self.logger.error("Ошибка остановки FamilyDashboardManager: {}".format(str(e)))
                                                                               ^
security/family/family_dashboard_manager.py:739:80: E501 line too long (105 > 79 characters)
                "family_members": {mid: member.to_dict() for mid, member in self.family_members.items()},
                                                                               ^
security/family/family_dashboard_manager.py:741:80: E501 line too long (91 > 79 characters)
                "widgets": {wid: widget.to_dict() for wid, widget in self.widgets.items()},
                                                                               ^
security/family/family_dashboard_manager.py:749:80: E501 line too long (95 > 79 characters)
            state_file = "data/family/backups/dashboard_state_{}.json".format(int(time.time()))
                                                                               ^
security/family/family_dashboard_manager.py:753:80: E501 line too long (83 > 79 characters)
            self.logger.info("Состояние дашборда сохранено: {}".format(state_file))
                                                                               ^
security/family/family_profile_manager.py:61:1: W293 blank line contains whitespace
    
^
security/family/family_profile_manager.py:64:80: E501 line too long (97 > 79 characters)
        self.logger = logging.getLogger(f"{self.__class__.__module__}.{self.__class__.__name__}")
                                                                               ^
security/family/family_profile_manager.py:66:1: W293 blank line contains whitespace
        
^
security/family/family_profile_manager.py:73:1: W293 blank line contains whitespace
                
^
security/family/family_profile_manager.py:78:1: W293 blank line contains whitespace
            
^
security/family/family_profile_manager.py:82:1: W293 blank line contains whitespace
            
^
security/family/family_profile_manager.py:86:1: W293 blank line contains whitespace
    
^
security/family/family_profile_manager.py:88:14: W291 trailing whitespace
        self, 
             ^
security/family/family_profile_manager.py:89:24: W291 trailing whitespace
        family_id: str, 
                       ^
security/family/family_profile_manager.py:90:24: W291 trailing whitespace
        member_id: str, 
                       ^
security/family/family_profile_manager.py:91:19: W291 trailing whitespace
        name: str, 
                  ^
security/family/family_profile_manager.py:100:1: W293 blank line contains whitespace
                
^
security/family/family_profile_manager.py:104:1: W293 blank line contains whitespace
            
^
security/family/family_profile_manager.py:109:1: W293 blank line contains whitespace
            
^
security/family/family_profile_manager.py:118:1: W293 blank line contains whitespace
            
^
security/family/family_profile_manager.py:122:1: W293 blank line contains whitespace
            
^
security/family/family_profile_manager.py:123:80: E501 line too long (97 > 79 characters)
            self.logger.info(f"Добавлен член семьи: {name} (возраст: {age}, роль: {role.value})")
                                                                               ^
security/family/family_profile_manager.py:125:1: W293 blank line contains whitespace
            
^
security/family/family_profile_manager.py:127:80: E501 line too long (80 > 79 characters)
            self.logger.error(f"Ошибка добавления члена семьи {member_id}: {e}")
                                                                               ^
security/family/family_profile_manager.py:129:1: W293 blank line contains whitespace
    
^
security/family/family_profile_manager.py:140:1: W293 blank line contains whitespace
    
^
security/family/family_profile_manager.py:153:1: W293 blank line contains whitespace
    
^
security/family/family_profile_manager.py:154:80: E501 line too long (90 > 79 characters)
    def get_family_member(self, family_id: str, member_id: str) -> Optional[FamilyMember]:
                                                                               ^
security/family/family_profile_manager.py:163:1: W293 blank line contains whitespace
    
^
security/family/family_profile_manager.py:169:1: W293 blank line contains whitespace
                
^
security/family/family_profile_manager.py:179:1: W293 blank line contains whitespace
            
^
security/family/family_profile_manager.py:181:1: W293 blank line contains whitespace
            
^
security/family/family_profile_manager.py:185:1: W293 blank line contains whitespace
    
^
security/family/family_profile_manager.py:190:80: E501 line too long (89 > 79 characters)
            total_members = sum(len(family.members) for family in self.families.values())
                                                                               ^
security/family/family_profile_manager.py:191:1: W293 blank line contains whitespace
            
^
security/family/family_profile_manager.py:199:1: W293 blank line contains whitespace
            
^
security/family/parental_controls.py:12:1: F401 'typing.Set' imported but unused
from typing import Dict, List, Optional, Any, Set, Tuple
^
security/family/parental_controls.py:17:1: F401 'core.security_base.ThreatType' imported but unused
from core.security_base import SecurityEvent, IncidentSeverity, ThreatType
^
security/family/parental_controls.py:18:1: F401 'security.family.family_profile_manager.FamilyProfile' imported but unused
from security.family.family_profile_manager import FamilyProfileManager, FamilyProfile, FamilyMember, AgeGroup, FamilyRole
^
security/family/parental_controls.py:18:1: F401 'security.family.family_profile_manager.FamilyMember' imported but unused
from security.family.family_profile_manager import FamilyProfileManager, FamilyProfile, FamilyMember, AgeGroup, FamilyRole
^
security/family/parental_controls.py:18:80: E501 line too long (122 > 79 characters)
from security.family.family_profile_manager import FamilyProfileManager, FamilyProfile, FamilyMember, AgeGroup, FamilyRole
                                                                               ^
security/family/parental_controls.py:19:80: E501 line too long (90 > 79 characters)
from security.family.child_protection import ChildProtection, ContentCategory, ThreatLevel
                                                                               ^
security/family/parental_controls.py:20:1: F401 'security.family.elderly_protection.RiskLevel' imported but unused
from security.family.elderly_protection import ElderlyProtection, RiskLevel
^
security/family/parental_controls.py:99:1: W293 blank line contains whitespace
    
^
security/family/parental_controls.py:100:69: W291 trailing whitespace
    def __init__(self, family_profile_manager: FamilyProfileManager, 
                                                                    ^
security/family/parental_controls.py:105:80: E501 line too long (97 > 79 characters)
        self.logger = logging.getLogger(f"{self.__class__.__module__}.{self.__class__.__name__}")
                                                                               ^
security/family/parental_controls.py:106:1: W293 blank line contains whitespace
        
^
security/family/parental_controls.py:111:1: W293 blank line contains whitespace
        
^
security/family/parental_controls.py:118:1: W293 blank line contains whitespace
        
^
security/family/parental_controls.py:126:1: W293 blank line contains whitespace
        
^
security/family/parental_controls.py:128:80: E501 line too long (91 > 79 characters)
            AgeGroup.TODDLER: [ContentCategory.EDUCATIONAL, ContentCategory.ENTERTAINMENT],
                                                                               ^
security/family/parental_controls.py:129:80: E501 line too long (112 > 79 characters)
            AgeGroup.CHILD: [ContentCategory.EDUCATIONAL, ContentCategory.ENTERTAINMENT, ContentCategory.GAMES],
                                                                               ^
security/family/parental_controls.py:130:80: E501 line too long (135 > 79 characters)
            AgeGroup.TEEN: [ContentCategory.EDUCATIONAL, ContentCategory.ENTERTAINMENT, ContentCategory.GAMES, ContentCategory.SOCIAL],
                                                                               ^
security/family/parental_controls.py:131:80: E501 line too long (158 > 79 characters)
            AgeGroup.ADULT: [ContentCategory.EDUCATIONAL, ContentCategory.ENTERTAINMENT, ContentCategory.GAMES, ContentCategory.SOCIAL, ContentCategory.NEWS],
                                                                               ^
security/family/parental_controls.py:133:1: W293 blank line contains whitespace
        
^
security/family/parental_controls.py:135:1: W293 blank line contains whitespace
    
^
security/family/parental_controls.py:145:1: W293 blank line contains whitespace
            
^
security/family/parental_controls.py:146:80: E501 line too long (84 > 79 characters)
            self.logger.info("Инициализированы правила по умолчанию для всех детей")
                                                                               ^
security/family/parental_controls.py:147:1: W293 blank line contains whitespace
            
^
security/family/parental_controls.py:150:1: W293 blank line contains whitespace
    
^
security/family/parental_controls.py:163:1: W293 blank line contains whitespace
            
^
security/family/parental_controls.py:166:1: W293 blank line contains whitespace
            
^
security/family/parental_controls.py:168:1: W293 blank line contains whitespace
            
^
security/family/parental_controls.py:176:80: E501 line too long (87 > 79 characters)
                    "daily_limit": self.default_time_limits[age_group].total_seconds(),
                                                                               ^
security/family/parental_controls.py:183:1: W293 blank line contains whitespace
            
^
security/family/parental_controls.py:191:80: E501 line too long (105 > 79 characters)
                    "allowed_categories": [cat.value for cat in self.default_content_filters[age_group]],
                                                                               ^
security/family/parental_controls.py:198:1: W293 blank line contains whitespace
            
^
security/family/parental_controls.py:207:80: E501 line too long (83 > 79 characters)
                    "blocked_apps": ["социальные сети", "мессенджеры", "браузеры"],
                                                                               ^
security/family/parental_controls.py:213:1: W293 blank line contains whitespace
            
^
security/family/parental_controls.py:228:1: W293 blank line contains whitespace
            
^
security/family/parental_controls.py:243:1: W293 blank line contains whitespace
            
^
security/family/parental_controls.py:259:1: W293 blank line contains whitespace
            
^
security/family/parental_controls.py:275:1: W293 blank line contains whitespace
            
^
security/family/parental_controls.py:276:80: E501 line too long (84 > 79 characters)
            self.logger.info(f"Созданы правила по умолчанию для ребенка {child_id}")
                                                                               ^
security/family/parental_controls.py:277:1: W293 blank line contains whitespace
            
^
security/family/parental_controls.py:279:80: E501 line too long (84 > 79 characters)
            self.logger.error(f"Ошибка создания правил для ребенка {child_id}: {e}")
                                                                               ^
security/family/parental_controls.py:280:1: W293 blank line contains whitespace
    
^
security/family/parental_controls.py:281:76: W291 trailing whitespace
    def create_control_rule(self, child_id: str, control_type: ControlType, 
                                                                           ^
security/family/parental_controls.py:282:28: E128 continuation line under-indented for visual indent
                           settings: Dict[str, Any]) -> bool:
                           ^
security/family/parental_controls.py:294:1: W293 blank line contains whitespace
            
^
security/family/parental_controls.py:302:1: W293 blank line contains whitespace
            
^
security/family/parental_controls.py:304:1: W293 blank line contains whitespace
            
^
security/family/parental_controls.py:309:80: E501 line too long (100 > 79 characters)
                description=f"Создано правило контроля {control_type.value} для ребенка {child_id}",
                                                                               ^
security/family/parental_controls.py:313:1: W293 blank line contains whitespace
            
^
security/family/parental_controls.py:316:1: W293 blank line contains whitespace
            
^
security/family/parental_controls.py:320:1: W293 blank line contains whitespace
    
^
security/family/parental_controls.py:321:80: E501 line too long (82 > 79 characters)
    def update_control_rule(self, rule_id: str, settings: Dict[str, Any]) -> bool:
                                                                               ^
security/family/parental_controls.py:334:1: W293 blank line contains whitespace
            
^
security/family/parental_controls.py:338:1: W293 blank line contains whitespace
            
^
security/family/parental_controls.py:347:1: W293 blank line contains whitespace
            
^
security/family/parental_controls.py:350:1: W293 blank line contains whitespace
            
^
security/family/parental_controls.py:354:1: W293 blank line contains whitespace
    
^
security/family/parental_controls.py:366:1: W293 blank line contains whitespace
            
^
security/family/parental_controls.py:371:1: W293 blank line contains whitespace
            
^
security/family/parental_controls.py:374:1: W293 blank line contains whitespace
            
^
security/family/parental_controls.py:378:1: W293 blank line contains whitespace
    
^
security/family/parental_controls.py:390:1: W293 blank line contains whitespace
            
^
security/family/parental_controls.py:395:1: W293 blank line contains whitespace
            
^
security/family/parental_controls.py:398:1: W293 blank line contains whitespace
            
^
security/family/parental_controls.py:402:1: W293 blank line contains whitespace
    
^
security/family/parental_controls.py:416:1: W293 blank line contains whitespace
            
^
security/family/parental_controls.py:418:1: W293 blank line contains whitespace
            
^
security/family/parental_controls.py:420:80: E501 line too long (85 > 79 characters)
            self.logger.error(f"Ошибка получения правил для ребенка {child_id}: {e}")
                                                                               ^
security/family/parental_controls.py:422:1: W293 blank line contains whitespace
    
^
security/family/parental_controls.py:433:71: W291 trailing whitespace
            time_rules = [rule for rule in self.control_rules.values() 
                                                                      ^
security/family/parental_controls.py:434:26: E128 continuation line under-indented for visual indent
                         if rule.child_id == child_id and rule.control_type == ControlType.TIME_LIMIT and rule.is_active]
                         ^
security/family/parental_controls.py:434:80: E501 line too long (121 > 79 characters)
                         if rule.child_id == child_id and rule.control_type == ControlType.TIME_LIMIT and rule.is_active]
                                                                               ^
security/family/parental_controls.py:435:1: W293 blank line contains whitespace
            
^
security/family/parental_controls.py:438:1: W293 blank line contains whitespace
            
^
security/family/parental_controls.py:441:1: W293 blank line contains whitespace
            
^
security/family/parental_controls.py:443:13: F841 local variable 'today' is assigned to but never used
            today = datetime.now().date()
            ^
security/family/parental_controls.py:444:80: E501 line too long (89 > 79 characters)
            activities_result = self.child_protection.get_child_activity_report(child_id)
                                                                               ^
security/family/parental_controls.py:450:1: W293 blank line contains whitespace
            
^
security/family/parental_controls.py:453:80: E501 line too long (131 > 79 characters)
                if hasattr(activity, 'end_time') and activity.end_time and hasattr(activity, 'start_time') and activity.start_time:
                                                                               ^
security/family/parental_controls.py:455:1: W293 blank line contains whitespace
            
^
security/family/parental_controls.py:463:80: E501 line too long (81 > 79 characters)
                    message=f"Ребенок {child_id} превысил дневной лимит времени",
                                                                               ^
security/family/parental_controls.py:467:1: W293 blank line contains whitespace
                
^
security/family/parental_controls.py:469:1: W293 blank line contains whitespace
            
^
security/family/parental_controls.py:472:1: W293 blank line contains whitespace
            
^
security/family/parental_controls.py:476:1: W293 blank line contains whitespace
    
^
security/family/parental_controls.py:477:80: E501 line too long (107 > 79 characters)
    def check_content_access(self, child_id: str, content_url: str, content_type: str) -> Tuple[bool, str]:
                                                                               ^
security/family/parental_controls.py:496:1: W293 blank line contains whitespace
            
^
security/family/parental_controls.py:497:80: E501 line too long (88 > 79 characters)
            allowed, message, threat_level = self.child_protection.check_content_access(
                                                                               ^
security/family/parental_controls.py:500:1: W293 blank line contains whitespace
            
^
security/family/parental_controls.py:508:80: E501 line too long (117 > 79 characters)
                    message=f"Ребенок {child_id} пытался получить доступ к заблокированному контенту: {content_url}",
                                                                               ^
security/family/parental_controls.py:511:1: W293 blank line contains whitespace
            
^
security/family/parental_controls.py:513:1: W293 blank line contains whitespace
            
^
security/family/parental_controls.py:517:1: W293 blank line contains whitespace
    
^
security/family/parental_controls.py:533:1: W293 blank line contains whitespace
            
^
security/family/parental_controls.py:540:80: E501 line too long (90 > 79 characters)
                message=f"Устройство ребенка {child_id} заблокировано. Причина: {reason}",
                                                                               ^
security/family/parental_controls.py:544:1: W293 blank line contains whitespace
            
^
security/family/parental_controls.py:549:80: E501 line too long (93 > 79 characters)
                description=f"Экстренная блокировка устройства ребенка {child_id}: {reason}",
                                                                               ^
security/family/parental_controls.py:553:1: W293 blank line contains whitespace
            
^
security/family/parental_controls.py:554:80: E501 line too long (98 > 79 characters)
            self.logger.critical(f"Экстренная блокировка устройства ребенка {child_id}: {reason}")
                                                                               ^
security/family/parental_controls.py:556:1: W293 blank line contains whitespace
            
^
security/family/parental_controls.py:560:1: W293 blank line contains whitespace
    
^
security/family/parental_controls.py:561:80: E501 line too long (123 > 79 characters)
    def get_daily_activity_summary(self, child_id: str, date: Optional[datetime] = None) -> Optional[ChildActivitySummary]:
                                                                               ^
security/family/parental_controls.py:575:1: W293 blank line contains whitespace
            
^
security/family/parental_controls.py:577:80: E501 line too long (89 > 79 characters)
            activities_result = self.child_protection.get_child_activity_report(child_id)
                                                                               ^
security/family/parental_controls.py:583:1: W293 blank line contains whitespace
            
^
security/family/parental_controls.py:592:1: W293 blank line contains whitespace
            
^
security/family/parental_controls.py:594:80: E501 line too long (131 > 79 characters)
                if hasattr(activity, 'end_time') and activity.end_time and hasattr(activity, 'start_time') and activity.start_time:
                                                                               ^
security/family/parental_controls.py:595:80: E501 line too long (80 > 79 characters)
                    total_screen_time += activity.end_time - activity.start_time
                                                                               ^
security/family/parental_controls.py:596:1: W293 blank line contains whitespace
                
^
security/family/parental_controls.py:597:80: E501 line too long (85 > 79 characters)
                if hasattr(activity, 'threat_detected') and activity.threat_detected:
                                                                               ^
security/family/parental_controls.py:602:1: W293 blank line contains whitespace
                
^
security/family/parental_controls.py:605:1: W293 blank line contains whitespace
                
^
security/family/parental_controls.py:609:1: W293 blank line contains whitespace
                
^
security/family/parental_controls.py:612:1: W293 blank line contains whitespace
                
^
security/family/parental_controls.py:615:1: W293 blank line contains whitespace
            
^
security/family/parental_controls.py:627:1: W293 blank line contains whitespace
            
^
security/family/parental_controls.py:631:1: W293 blank line contains whitespace
            
^
security/family/parental_controls.py:633:1: W293 blank line contains whitespace
            
^
security/family/parental_controls.py:637:1: W293 blank line contains whitespace
    
^
security/family/parental_controls.py:638:80: E501 line too long (112 > 79 characters)
    def get_parent_notifications(self, parent_id: str, unread_only: bool = False) -> List[ParentalNotification]:
                                                                               ^
security/family/parental_controls.py:653:1: W293 blank line contains whitespace
            
^
security/family/parental_controls.py:654:80: E501 line too long (81 > 79 characters)
            return sorted(notifications, key=lambda x: x.timestamp, reverse=True)
                                                                               ^
security/family/parental_controls.py:655:1: W293 blank line contains whitespace
            
^
security/family/parental_controls.py:659:1: W293 blank line contains whitespace
    
^
security/family/parental_controls.py:673:1: W293 blank line contains whitespace
            
^
security/family/parental_controls.py:677:1: W293 blank line contains whitespace
    
^
security/family/parental_controls.py:678:66: W291 trailing whitespace
    def _create_notification(self, parent_id: str, child_id: str, 
                                                                 ^
security/family/parental_controls.py:679:28: E128 continuation line under-indented for visual indent
                           notification_type: NotificationType, title: str, 
                           ^
security/family/parental_controls.py:679:76: W291 trailing whitespace
                           notification_type: NotificationType, title: str, 
                                                                           ^
security/family/parental_controls.py:680:28: E128 continuation line under-indented for visual indent
                           message: str, severity: IncidentSeverity, 
                           ^
security/family/parental_controls.py:680:69: W291 trailing whitespace
                           message: str, severity: IncidentSeverity, 
                                                                    ^
security/family/parental_controls.py:681:28: E128 continuation line under-indented for visual indent
                           action_required: bool = False) -> None:
                           ^
security/family/parental_controls.py:685:1: W293 blank line contains whitespace
            
^
security/family/parental_controls.py:696:1: W293 blank line contains whitespace
            
^
security/family/parental_controls.py:698:1: W293 blank line contains whitespace
            
^
security/family/parental_controls.py:701:1: W293 blank line contains whitespace
    
^
security/family/parental_controls.py:714:1: W293 blank line contains whitespace
            
^
security/family/parental_controls.py:716:1: W293 blank line contains whitespace
            
^
security/family/parental_controls.py:720:1: W293 blank line contains whitespace
    
^
security/family/parental_controls.py:733:50: W291 trailing whitespace
                if (rule.child_id == child_id and 
                                                 ^
security/family/parental_controls.py:734:73: W291 trailing whitespace
                    rule.control_type == ControlType.IPV6_PROTECTION and 
                                                                        ^
security/family/parental_controls.py:735:5: E129 visually indented line with same indent as next logical line
                    rule.is_active):
    ^
security/family/parental_controls.py:738:1: W293 blank line contains whitespace
            
^
security/family/parental_controls.py:741:1: W293 blank line contains whitespace
            
^
security/family/parental_controls.py:746:1: W293 blank line contains whitespace
            
^
security/family/parental_controls.py:750:1: W293 blank line contains whitespace
            
^
security/family/parental_controls.py:754:1: W293 blank line contains whitespace
    
^
security/family/parental_controls.py:755:80: E501 line too long (97 > 79 characters)
    def activate_kill_switch(self, child_id: str, reason: str = "Родительский контроль") -> bool:
                                                                               ^
security/family/parental_controls.py:768:50: W291 trailing whitespace
                if (rule.child_id == child_id and 
                                                 ^
security/family/parental_controls.py:769:69: W291 trailing whitespace
                    rule.control_type == ControlType.KILL_SWITCH and 
                                                                    ^
security/family/parental_controls.py:770:5: E129 visually indented line with same indent as next logical line
                    rule.is_active):
    ^
security/family/parental_controls.py:773:1: W293 blank line contains whitespace
            
^
security/family/parental_controls.py:775:80: E501 line too long (86 > 79 characters)
                self.logger.warning(f"Kill Switch не настроен для ребенка {child_id}")
                                                                               ^
security/family/parental_controls.py:777:1: W293 blank line contains whitespace
            
^
security/family/parental_controls.py:780:1: W293 blank line contains whitespace
            
^
security/family/parental_controls.py:784:80: E501 line too long (93 > 79 characters)
                self.logger.info(f"Kill Switch активирован для ребенка {child_id}: {reason}")
                                                                               ^
security/family/parental_controls.py:785:1: W293 blank line contains whitespace
                
^
security/family/parental_controls.py:794:80: E501 line too long (93 > 79 characters)
                        message=f"Kill Switch активирован для {child_id}. Причина: {reason}",
                                                                               ^
security/family/parental_controls.py:798:1: W293 blank line contains whitespace
                
^
security/family/parental_controls.py:800:1: W293 blank line contains whitespace
            
^
security/family/parental_controls.py:802:1: W293 blank line contains whitespace
            
^
security/family/parental_controls.py:806:1: W293 blank line contains whitespace
    
^
security/family/parental_controls.py:817:80: E501 line too long (81 > 79 characters)
            self.logger.info(f"Kill Switch деактивирован для ребенка {child_id}")
                                                                               ^
security/family/parental_controls.py:818:1: W293 blank line contains whitespace
            
^
security/family/parental_controls.py:826:80: E501 line too long (92 > 79 characters)
                message=f"Kill Switch деактивирован для {child_id}. Интернет восстановлен.",
                                                                               ^
security/family/parental_controls.py:830:1: W293 blank line contains whitespace
            
^
security/family/parental_controls.py:832:1: W293 blank line contains whitespace
            
^
security/family/parental_controls.py:836:1: W293 blank line contains whitespace
    
^
security/family/parental_controls.py:861:1: W293 blank line contains whitespace
            
^
security/family/parental_controls.py:865:80: E501 line too long (98 > 79 characters)
            status["ipv6_protection"]["status"] = "protected" if ipv6_protected else "unprotected"
                                                                               ^
security/family/parental_controls.py:867:1: W293 blank line contains whitespace
            
^
security/family/parental_controls.py:871:50: W291 trailing whitespace
                if (rule.child_id == child_id and 
                                                 ^
security/family/parental_controls.py:872:69: W291 trailing whitespace
                    rule.control_type == ControlType.KILL_SWITCH and 
                                                                    ^
security/family/parental_controls.py:873:5: E129 visually indented line with same indent as next logical line
                    rule.is_active):
    ^
security/family/parental_controls.py:876:1: W293 blank line contains whitespace
            
^
security/family/parental_controls.py:880:80: E501 line too long (82 > 79 characters)
                status["kill_switch"]["message"] = "Kill Switch готов к активации"
                                                                               ^
security/family/parental_controls.py:885:1: W293 blank line contains whitespace
            
^
security/family/parental_controls.py:891:1: W293 blank line contains whitespace
            
^
security/family/parental_controls.py:893:1: W293 blank line contains whitespace
            
^
security/family/parental_controls.py:895:80: E501 line too long (83 > 79 characters)
            self.logger.error(f"Ошибка получения статуса современных функций: {e}")
                                                                               ^
security/family/parental_controls.py:902:1: W293 blank line contains whitespace
    
^
security/family/parental_controls.py:912:1: W293 blank line contains whitespace
            
^
security/family/parental_controls.py:917:80: E501 line too long (93 > 79 characters)
                "active_rules": len([r for r in self.control_rules.values() if r.is_active]),
                                                                               ^
security/family/parental_controls.py:919:80: E501 line too long (103 > 79 characters)
                "unread_notifications": len([n for n in self.notifications.values() if not n.is_read]),
                                                                               ^
security/family/parental_controls.py:923:80: E501 line too long (83 > 79 characters)
                    control_type.value: len([r for r in self.control_rules.values() 
                                                                               ^
security/family/parental_controls.py:923:84: W291 trailing whitespace
                    control_type.value: len([r for r in self.control_rules.values() 
                                                                                   ^
security/family/parental_controls.py:924:44: E128 continuation line under-indented for visual indent
                                           if r.control_type == control_type and r.is_active])
                                           ^
security/family/parental_controls.py:924:80: E501 line too long (94 > 79 characters)
                                           if r.control_type == control_type and r.is_active])
                                                                               ^
security/family/parental_controls.py:928:80: E501 line too long (88 > 79 characters)
                    "ipv6_protection_rules": len([r for r in self.control_rules.values() 
                                                                               ^
security/family/parental_controls.py:928:89: W291 trailing whitespace
                    "ipv6_protection_rules": len([r for r in self.control_rules.values() 
                                                                                        ^
security/family/parental_controls.py:929:49: E128 continuation line under-indented for visual indent
                                                if r.control_type == ControlType.IPV6_PROTECTION and r.is_active]),
                                                ^
security/family/parental_controls.py:929:80: E501 line too long (115 > 79 characters)
                                                if r.control_type == ControlType.IPV6_PROTECTION and r.is_active]),
                                                                               ^
security/family/parental_controls.py:930:80: E501 line too long (84 > 79 characters)
                    "kill_switch_rules": len([r for r in self.control_rules.values() 
                                                                               ^
security/family/parental_controls.py:930:85: W291 trailing whitespace
                    "kill_switch_rules": len([r for r in self.control_rules.values() 
                                                                                    ^
security/family/parental_controls.py:931:45: E128 continuation line under-indented for visual indent
                                            if r.control_type == ControlType.KILL_SWITCH and r.is_active]),
                                            ^
security/family/parental_controls.py:931:80: E501 line too long (107 > 79 characters)
                                            if r.control_type == ControlType.KILL_SWITCH and r.is_active]),
                                                                               ^
security/family/parental_controls.py:933:80: E501 line too long (89 > 79 characters)
                    "active_modern_features": len([r for r in self.control_rules.values() 
                                                                               ^
security/family/parental_controls.py:933:90: W291 trailing whitespace
                    "active_modern_features": len([r for r in self.control_rules.values() 
                                                                                         ^
security/family/parental_controls.py:934:50: E128 continuation line under-indented for visual indent
                                                 if r.control_type in [ControlType.IPV6_PROTECTION, ControlType.KILL_SWITCH] and r.is_active])
                                                 ^
security/family/parental_controls.py:934:80: E501 line too long (142 > 79 characters)
                                                 if r.control_type in [ControlType.IPV6_PROTECTION, ControlType.KILL_SWITCH] and r.is_active])
                                                                               ^
security/family/parental_controls.py:937:1: W293 blank line contains whitespace
            
^
security/family/parental_controls.py:939:1: W293 blank line contains whitespace
            
^
security/family/parental_controls.py:942:56: W292 no newline at end of file
            return {"status": "error", "error": str(e)}                                                       ^
security/family_group_manager.py:8:1: F401 'json' imported but unused
import json
^
security/family_group_manager.py:10:1: F401 'datetime.timedelta' imported but unused
from datetime import datetime, timedelta
^
security/family_group_manager.py:63:1: W293 blank line contains whitespace
    
^
security/family_group_manager.py:64:80: E501 line too long (98 > 79 characters)
    def __init__(self, name: str = "FamilyGroupManager", config: Optional[Dict[str, Any]] = None):
                                                                               ^
security/family_group_manager.py:66:1: W293 blank line contains whitespace
        
^
security/family_group_manager.py:70:1: W293 blank line contains whitespace
        
^
security/family_group_manager.py:76:1: W293 blank line contains whitespace
        
^
security/family_group_manager.py:78:80: E501 line too long (94 > 79 characters)
        self.max_members_per_group = config.get("max_members_per_group", 20) if config else 20
                                                                               ^
security/family_group_manager.py:79:80: E501 line too long (96 > 79 characters)
        self.enable_audit_logging = config.get("enable_audit_logging", True) if config else True
                                                                               ^
security/family_group_manager.py:80:1: W293 blank line contains whitespace
        
^
security/family_group_manager.py:86:1: W293 blank line contains whitespace
            
^
security/family_group_manager.py:89:1: W293 blank line contains whitespace
            
^
security/family_group_manager.py:92:80: E501 line too long (88 > 79 characters)
            self.log_activity(f"FamilyGroupManager {self.name} успешно инициализирован")
                                                                               ^
security/family_group_manager.py:94:1: W293 blank line contains whitespace
            
^
security/family_group_manager.py:96:80: E501 line too long (87 > 79 characters)
            self.log_activity(f"Ошибка инициализации FamilyGroupManager: {e}", "error")
                                                                               ^
security/family_group_manager.py:99:1: W293 blank line contains whitespace
    
^
security/family_group_manager.py:111:1: W293 blank line contains whitespace
    
^
security/family_group_manager.py:112:80: E501 line too long (90 > 79 characters)
    def create_family_group(self, name: str, admin_member: FamilyMember) -> Optional[str]:
                                                                               ^
security/family_group_manager.py:116:1: W293 blank line contains whitespace
            
^
security/family_group_manager.py:122:1: W293 blank line contains whitespace
            
^
security/family_group_manager.py:126:1: W293 blank line contains whitespace
            
^
security/family_group_manager.py:132:1: W293 blank line contains whitespace
            
^
security/family_group_manager.py:133:80: E501 line too long (82 > 79 characters)
            self.log_activity(f"Создана семейная группа: {name} (ID: {group_id})")
                                                                               ^
security/family_group_manager.py:135:1: W293 blank line contains whitespace
            
^
security/family_group_manager.py:139:1: W293 blank line contains whitespace
    
^
security/family_group_manager.py:144:80: E501 line too long (84 > 79 characters)
                self.log_activity(f"Семейная группа {group_id} не найдена", "error")
                                                                               ^
security/family_group_manager.py:146:1: W293 blank line contains whitespace
            
^
security/family_group_manager.py:148:1: W293 blank line contains whitespace
            
^
security/family_group_manager.py:150:80: E501 line too long (88 > 79 characters)
                self.log_activity(f"Превышен лимит членов в группе {group_id}", "error")
                                                                               ^
security/family_group_manager.py:152:1: W293 blank line contains whitespace
            
^
security/family_group_manager.py:156:1: W293 blank line contains whitespace
            
^
security/family_group_manager.py:159:1: W293 blank line contains whitespace
            
^
security/family_group_manager.py:160:80: E501 line too long (83 > 79 characters)
            self.log_activity(f"Добавлен член {member.name} в группу {group.name}")
                                                                               ^
security/family_group_manager.py:162:1: W293 blank line contains whitespace
            
^
security/family_group_manager.py:164:80: E501 line too long (80 > 79 characters)
            self.log_activity(f"Ошибка добавления члена в группу: {e}", "error")
                                                                               ^
security/family_group_manager.py:166:1: W293 blank line contains whitespace
    
^
security/family_group_manager.py:171:1: W293 blank line contains whitespace
        
^
security/family_group_manager.py:173:1: W293 blank line contains whitespace
    
^
security/family_group_manager.py:177:1: W293 blank line contains whitespace
    
^
security/family_group_manager.py:185:80: E501 line too long (87 > 79 characters)
            "average_members_per_group": self.total_members / max(self.total_groups, 1)
                                                                               ^
security/family_group_manager.py:187:1: W293 blank line contains whitespace
    
^
security/family_group_manager.py:196:80: E501 line too long (83 > 79 characters)
            self.log_activity(f"Ошибка остановки FamilyGroupManager: {e}", "error")
                                                                               ^
security/family_group_manager.py:203:1: W293 blank line contains whitespace
    
^
security/family_group_manager.py:207:1: W293 blank line contains whitespace
        
^
security/family_group_manager.py:214:1: W293 blank line contains whitespace
        
^
security/family_group_manager.py:219:1: W293 blank line contains whitespace
            
^
security/family_group_manager.py:223:1: W293 blank line contains whitespace
        
^
security/incident_response.py:90:80: E501 line too long (93 > 79 characters)
    def add_evidence(self, evidence_type: str, description: str, data: Optional[Any] = None):
                                                                               ^
security/incident_response.py:100:80: E501 line too long (88 > 79 characters)
    def add_action(self, action: str, performed_by: str, details: Optional[str] = None):
                                                                               ^
security/incident_response.py:131:80: E501 line too long (86 > 79 characters)
            "resolved_at": self.resolved_at.isoformat() if self.resolved_at else None,
                                                                               ^
security/incident_response.py:154:80: E501 line too long (108 > 79 characters)
        self.auto_escalation_threshold = config.get("auto_escalation_threshold", 4) if config else 4  # часа
                                                                               ^
security/incident_response.py:155:80: E501 line too long (88 > 79 characters)
        self.max_open_incidents = config.get("max_open_incidents", 50) if config else 50
                                                                               ^
security/incident_response.py:156:80: E501 line too long (97 > 79 characters)
        self.response_timeout = config.get("response_timeout", 3600) if config else 3600  # 1 час
                                                                               ^
security/incident_response.py:157:80: E501 line too long (96 > 79 characters)
        self.enable_auto_response = config.get("enable_auto_response", True) if config else True
                                                                               ^
security/incident_response.py:175:80: E501 line too long (95 > 79 characters)
            self.log_activity(f"Инициализация менеджера реагирования на инциденты {self.name}")
                                                                               ^
security/incident_response.py:193:80: E501 line too long (104 > 79 characters)
            self.log_activity(f"Менеджер реагирования на инциденты {self.name} успешно инициализирован")
                                                                               ^
security/incident_response.py:199:80: E501 line too long (93 > 79 characters)
                f"Ошибка инициализации менеджера реагирования на инциденты {self.name}: {e}",
                                                                               ^
security/incident_response.py:220:80: E501 line too long (87 > 79 characters)
                "capabilities": ["forensic_analysis", "threat_hunting", "remediation"],
                                                                               ^
security/incident_response.py:226:80: E501 line too long (88 > 79 characters)
                "capabilities": ["strategic_response", "coordination", "post_incident"],
                                                                               ^
security/incident_response.py:325:80: E501 line too long (83 > 79 characters)
                self.log_activity("Достигнут лимит открытых инцидентов", "warning")
                                                                               ^
security/incident_response.py:332:80: E501 line too long (99 > 79 characters)
            incident = Incident(incident_id, title, description, incident_type, priority, severity)
                                                                               ^
security/incident_response.py:368:80: E501 line too long (86 > 79 characters)
            if team in self.response_teams and self.response_teams[team]["available"]:
                                                                               ^
security/incident_response.py:370:80: E501 line too long (93 > 79 characters)
                self.log_activity(f"Инцидент {incident.incident_id} назначен команде {team}")
                                                                               ^
security/incident_response.py:380:80: E501 line too long (114 > 79 characters)
                self.log_activity(f"Инцидент {incident.incident_id} эскалирован к команде {incident.assigned_to}")
                                                                               ^
security/incident_response.py:405:80: E501 line too long (112 > 79 characters)
                self.log_activity(f"Автоматическое реагирование выполнено для инцидента {incident.incident_id}")
                                                                               ^
security/incident_response.py:408:80: E501 line too long (83 > 79 characters)
            self.log_activity(f"Ошибка автоматического реагирования: {e}", "error")
                                                                               ^
security/incident_response.py:416:80: E501 line too long (84 > 79 characters)
                    self.log_activity(f"Система {system} изолирована автоматически")
                                                                               ^
security/incident_response.py:420:80: E501 line too long (82 > 79 characters)
                self.log_activity("Образцы вредоносного ПО собраны автоматически")
                                                                               ^
security/incident_response.py:435:80: E501 line too long (99 > 79 characters)
            self.log_activity(f"Ошибка выполнения автоматического действия {action}: {e}", "error")
                                                                               ^
security/incident_response.py:467:80: E501 line too long (87 > 79 characters)
            if old_status == IncidentStatus.OPEN and new_status != IncidentStatus.OPEN:
                                                                               ^
security/incident_response.py:482:80: E501 line too long (93 > 79 characters)
            action_description = f"Статус изменен с {old_status.value} на {new_status.value}"
                                                                               ^
security/incident_response.py:483:80: E501 line too long (84 > 79 characters)
            incident.add_action(action_description, performed_by or "system", notes)
                                                                               ^
security/incident_response.py:485:80: E501 line too long (94 > 79 characters)
            self.log_activity(f"Статус инцидента {incident_id} изменен на {new_status.value}")
                                                                               ^
security/incident_response.py:489:80: E501 line too long (83 > 79 characters)
            self.log_activity(f"Ошибка обновления статуса инцидента: {e}", "error")
                                                                               ^
security/incident_response.py:496:80: E501 line too long (112 > 79 characters)
                resolution_time = (incident.resolved_at - incident.created_at).total_seconds() / 3600  # в часах
                                                                               ^
security/incident_response.py:502:80: E501 line too long (111 > 79 characters)
                    total_time = self.average_resolution_time * (self.resolved_incidents - 1) + resolution_time
                                                                               ^
security/incident_response.py:503:80: E501 line too long (87 > 79 characters)
                    self.average_resolution_time = total_time / self.resolved_incidents
                                                                               ^
security/incident_response.py:506:80: E501 line too long (84 > 79 characters)
            self.log_activity(f"Ошибка обновления времени разрешения: {e}", "error")
                                                                               ^
security/incident_response.py:509:80: E501 line too long (96 > 79 characters)
        self, incident_id: str, evidence_type: str, description: str, data: Optional[Any] = None
                                                                               ^
security/incident_response.py:530:80: E501 line too long (84 > 79 characters)
            self.log_activity(f"Доказательство добавлено к инциденту {incident_id}")
                                                                               ^
security/incident_response.py:534:80: E501 line too long (80 > 79 characters)
            self.log_activity(f"Ошибка добавления доказательства: {e}", "error")
                                                                               ^
security/incident_response.py:538:80: E501 line too long (93 > 79 characters)
        self, incident_id: str, action: str, performed_by: str, details: Optional[str] = None
                                                                               ^
security/incident_response.py:581:80: E501 line too long (97 > 79 characters)
    def get_all_incidents(self, status: Optional[IncidentStatus] = None) -> List[Dict[str, Any]]:
                                                                               ^
security/incident_response.py:608:80: E501 line too long (92 > 79 characters)
    def get_incidents_by_priority(self, priority: IncidentPriority) -> List[Dict[str, Any]]:
                                                                               ^
security/incident_response.py:618:80: E501 line too long (108 > 79 characters)
        return [incident.to_dict() for incident in self.incidents.values() if incident.priority == priority]
                                                                               ^
security/incident_response.py:620:80: E501 line too long (89 > 79 characters)
    def get_incidents_by_type(self, incident_type: IncidentType) -> List[Dict[str, Any]]:
                                                                               ^
security/incident_response.py:630:80: E501 line too long (118 > 79 characters)
        return [incident.to_dict() for incident in self.incidents.values() if incident.incident_type == incident_type]
                                                                               ^
security/incident_response.py:632:80: E501 line too long (90 > 79 characters)
    def escalate_incident(self, incident_id: str, reason: str, escalated_by: str) -> bool:
                                                                               ^
security/incident_response.py:669:80: E501 line too long (102 > 79 characters)
            incident.add_action(f"Эскалация к команде {new_team}", escalated_by, f"Причина: {reason}")
                                                                               ^
security/incident_response.py:673:80: E501 line too long (89 > 79 characters)
            self.log_activity(f"Инцидент {incident_id} эскалирован к команде {new_team}")
                                                                               ^
security/incident_response.py:735:80: E501 line too long (88 > 79 characters)
            self.log_activity(f"Запуск менеджера реагирования на инциденты {self.name}")
                                                                               ^
security/incident_response.py:738:80: E501 line too long (96 > 79 characters)
            self.log_activity(f"Менеджер реагирования на инциденты {self.name} успешно запущен")
                                                                               ^
security/incident_response.py:743:80: E501 line too long (87 > 79 characters)
                f"Ошибка запуска менеджера реагирования на инциденты {self.name}: {e}",
                                                                               ^
security/incident_response.py:751:80: E501 line too long (91 > 79 characters)
            self.log_activity(f"Остановка менеджера реагирования на инциденты {self.name}")
                                                                               ^
security/incident_response.py:757:80: E501 line too long (99 > 79 characters)
            self.log_activity(f"Менеджер реагирования на инциденты {self.name} успешно остановлен")
                                                                               ^
security/incident_response.py:761:80: E501 line too long (89 > 79 characters)
                f"Ошибка остановки менеджера реагирования на инциденты {self.name}: {e}",
                                                                               ^
security/intrusion_prevention.py:12:1: F401 'hashlib' imported but unused
import hashlib
^
security/intrusion_prevention.py:13:1: F401 'os' imported but unused
import os
^
security/intrusion_prevention.py:15:1: F401 'socket' imported but unused
import socket
^
security/intrusion_prevention.py:16:1: F401 'threading' imported but unused
import threading
^
security/intrusion_prevention.py:17:1: F401 'typing.Tuple' imported but unused
from typing import Dict, List, Optional, Tuple, Any
^
security/intrusion_prevention.py:21:1: F401 'ipaddress' imported but unused
import ipaddress
^
security/intrusion_prevention.py:106:1: W293 blank line contains whitespace
    
^
security/intrusion_prevention.py:117:1: W293 blank line contains whitespace
        
^
security/intrusion_prevention.py:122:1: W293 blank line contains whitespace
        
^
security/intrusion_prevention.py:125:1: W293 blank line contains whitespace
    
^
security/intrusion_prevention.py:142:80: E501 line too long (90 > 79 characters)
                "pattern": r"(union|select|insert|update|delete|drop|create|alter).*from",
                                                                               ^
security/intrusion_prevention.py:175:1: W293 blank line contains whitespace
        
^
security/intrusion_prevention.py:189:1: W293 blank line contains whitespace
    
^
security/intrusion_prevention.py:196:1: W293 blank line contains whitespace
    
^
security/intrusion_prevention.py:204:1: W293 blank line contains whitespace
    
^
security/intrusion_prevention.py:216:1: W293 blank line contains whitespace
    
^
security/intrusion_prevention.py:217:80: E501 line too long (101 > 79 characters)
    def analyze_log_entry(self, log_entry: str, source_ip: str = None) -> Optional[IntrusionAttempt]:
                                                                               ^
security/intrusion_prevention.py:220:1: W293 blank line contains whitespace
        
^
security/intrusion_prevention.py:225:1: W293 blank line contains whitespace
                
^
security/intrusion_prevention.py:238:1: W293 blank line contains whitespace
                
^
security/intrusion_prevention.py:241:1: W293 blank line contains whitespace
                
^
security/intrusion_prevention.py:244:1: W293 blank line contains whitespace
        
^
security/intrusion_prevention.py:246:1: W293 blank line contains whitespace
    
^
security/intrusion_prevention.py:247:80: E501 line too long (84 > 79 characters)
    def analyze_network_flow(self, flow: NetworkFlow) -> Optional[IntrusionAttempt]:
                                                                               ^
security/intrusion_prevention.py:250:1: W293 blank line contains whitespace
        
^
security/intrusion_prevention.py:264:1: W293 blank line contains whitespace
            
^
security/intrusion_prevention.py:268:1: W293 blank line contains whitespace
        
^
security/intrusion_prevention.py:282:1: W293 blank line contains whitespace
            
^
security/intrusion_prevention.py:286:1: W293 blank line contains whitespace
        
^
security/intrusion_prevention.py:288:1: W293 blank line contains whitespace
    
^
security/intrusion_prevention.py:296:1: W293 blank line contains whitespace
    
^
security/intrusion_prevention.py:300:80: E501 line too long (87 > 79 characters)
        source_flows = [f for f in self.network_flows if f.source_ip == flow.source_ip]
                                                                               ^
security/intrusion_prevention.py:303:1: W293 blank line contains whitespace
    
^
security/intrusion_prevention.py:307:1: W293 blank line contains whitespace
        
^
security/intrusion_prevention.py:313:1: W293 blank line contains whitespace
            
^
security/intrusion_prevention.py:316:80: E501 line too long (81 > 79 characters)
            print(f"🚨 АЛЕРТ: {attempt.attack_type.value} от {attempt.source_ip}")
                                                                               ^
security/intrusion_prevention.py:317:1: W293 blank line contains whitespace
            
^
security/intrusion_prevention.py:321:1: W293 blank line contains whitespace
    
^
security/intrusion_prevention.py:322:80: E501 line too long (105 > 79 characters)
    def check_rate_limit(self, source_ip: str, max_attempts: int = 10, window_seconds: int = 60) -> bool:
                                                                               ^
security/intrusion_prevention.py:326:1: W293 blank line contains whitespace
        
^
security/intrusion_prevention.py:330:1: W293 blank line contains whitespace
        
^
security/intrusion_prevention.py:334:1: W293 blank line contains whitespace
        
^
security/intrusion_prevention.py:338:1: W293 blank line contains whitespace
    
^
security/intrusion_prevention.py:342:1: W293 blank line contains whitespace
    
^
security/intrusion_prevention.py:346:1: W293 blank line contains whitespace
    
^
security/intrusion_prevention.py:351:1: W293 blank line contains whitespace
    
^
security/intrusion_prevention.py:356:1: W293 blank line contains whitespace
    
^
security/intrusion_prevention.py:361:1: W293 blank line contains whitespace
    
^
security/intrusion_prevention.py:366:1: W293 blank line contains whitespace
        
^
security/intrusion_prevention.py:370:1: W293 blank line contains whitespace
        
^
security/intrusion_prevention.py:377:80: E501 line too long (87 > 79 characters)
            "active_rules_count": len([r for r in self.rules.values() if r.is_active]),
                                                                               ^
security/intrusion_prevention.py:382:1: W293 blank line contains whitespace
    
^
security/intrusion_prevention.py:386:80: E501 line too long (98 > 79 characters)
        return [attempt for attempt in self.intrusion_attempts if attempt.timestamp > cutoff_time]
                                                                               ^
security/intrusion_prevention.py:387:1: W293 blank line contains whitespace
    
^
security/intrusion_prevention.py:405:1: W293 blank line contains whitespace
            
^
security/intrusion_prevention.py:408:1: W293 blank line contains whitespace
            
^
security/intrusion_prevention.py:411:1: W293 blank line contains whitespace
            
^
security/intrusion_prevention.py:415:1: W293 blank line contains whitespace
    
^
security/intrusion_prevention.py:421:1: W293 blank line contains whitespace
            
^
security/intrusion_prevention.py:438:1: W293 blank line contains whitespace
            
^
security/intrusion_prevention.py:441:1: W293 blank line contains whitespace
            
^
security/intrusion_prevention.py:451:1: W293 blank line contains whitespace
    
^
security/intrusion_prevention.py:455:1: W293 blank line contains whitespace
    
^
security/intrusion_prevention.py:461:1: W293 blank line contains whitespace
    
^
security/intrusion_prevention.py:464:11: F541 f-string is missing placeholders
    print(f"\n📊 СТАТИСТИКА IPS:")
          ^
security/intrusion_prevention.py:469:64: W292 no newline at end of file
    print(f"   Активных правил: {stats['active_rules_count']}")                                                               ^
security/malware_protection.py:12:1: F401 'hashlib' imported but unused
import hashlib
^
security/malware_protection.py:14:1: F401 'subprocess' imported but unused
import subprocess
^
security/malware_protection.py:15:1: F401 'json' imported but unused
import json
^
security/malware_protection.py:16:1: F401 'typing.Tuple' imported but unused
from typing import Dict, List, Optional, Tuple, Any
^
security/malware_protection.py:20:1: F401 'requests' imported but unused
import requests
^
security/malware_protection.py:21:1: F401 'pathlib.Path' imported but unused
from pathlib import Path
^
security/malware_protection.py:73:1: W293 blank line contains whitespace
    
^
security/malware_protection.py:82:1: W293 blank line contains whitespace
        
^
security/malware_protection.py:85:1: W293 blank line contains whitespace
        
^
security/malware_protection.py:89:1: W293 blank line contains whitespace
    
^
security/malware_protection.py:97:80: E501 line too long (101 > 79 characters)
                "signature": "X5O!P%@AP[4\\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*",
                                                                               ^
security/malware_protection.py:115:1: W293 blank line contains whitespace
        
^
security/malware_protection.py:127:1: W293 blank line contains whitespace
    
^
security/malware_protection.py:156:1: W293 blank line contains whitespace
    
^
security/malware_protection.py:161:1: W293 blank line contains whitespace
    
^
security/malware_protection.py:166:1: W293 blank line contains whitespace
        
^
security/malware_protection.py:180:1: W293 blank line contains whitespace
            
^
security/malware_protection.py:184:1: W293 blank line contains whitespace
            
^
security/malware_protection.py:201:1: W293 blank line contains whitespace
            
^
security/malware_protection.py:222:1: W293 blank line contains whitespace
            
^
security/malware_protection.py:236:1: W293 blank line contains whitespace
            
^
security/malware_protection.py:250:1: W293 blank line contains whitespace
    
^
security/malware_protection.py:254:1: W293 blank line contains whitespace
        
^
security/malware_protection.py:261:1: W293 blank line contains whitespace
                    
^
security/malware_protection.py:269:1: W293 blank line contains whitespace
        
^
security/malware_protection.py:271:1: W293 blank line contains whitespace
    
^
security/malware_protection.py:277:1: W293 blank line contains whitespace
            
^
security/malware_protection.py:280:80: E501 line too long (97 > 79 characters)
            quarantine_path = os.path.join(self.quarantine_dir, f"{int(time.time())}_{filename}")
                                                                               ^
security/malware_protection.py:281:1: W293 blank line contains whitespace
            
^
security/malware_protection.py:286:1: W293 blank line contains whitespace
            
^
security/malware_protection.py:290:1: W293 blank line contains whitespace
    
^
security/malware_protection.py:296:1: W293 blank line contains whitespace
        
^
security/malware_protection.py:299:1: W293 blank line contains whitespace
        
^
security/malware_protection.py:305:1: W293 blank line contains whitespace
                
^
security/malware_protection.py:310:1: W293 blank line contains whitespace
        
^
security/malware_protection.py:318:80: E501 line too long (114 > 79 characters)
            "quarantine_count": len(os.listdir(self.quarantine_dir)) if os.path.exists(self.quarantine_dir) else 0
                                                                               ^
security/malware_protection.py:320:1: W293 blank line contains whitespace
    
^
security/malware_protection.py:326:1: W293 blank line contains whitespace
            
^
security/malware_protection.py:329:1: W293 blank line contains whitespace
            
^
security/malware_protection.py:332:1: W293 blank line contains whitespace
            
^
security/malware_protection.py:336:1: W293 blank line contains whitespace
    
^
security/malware_protection.py:346:1: W293 blank line contains whitespace
    
^
security/malware_protection.py:359:1: W293 blank line contains whitespace
    
^
security/malware_protection.py:379:1: W293 blank line contains whitespace
    
^
security/malware_protection.py:383:1: W293 blank line contains whitespace
    
^
security/malware_protection.py:386:11: F541 f-string is missing placeholders
    print(f"\n📊 СТАТИСТИКА СКАНИРОВАНИЯ:")
          ^
security/malware_protection.py:391:58: W292 no newline at end of file
    print(f"   В карантине: {stats['quarantine_count']}")                                                         ^
security/managers/analytics_manager.py:11:1: F401 'time' imported but unused
import time
^
security/managers/analytics_manager.py:42:1: W293 blank line contains whitespace
    
^
security/managers/analytics_manager.py:54:1: W293 blank line contains whitespace
    
^
security/managers/analytics_manager.py:91:1: W293 blank line contains whitespace
    
^
security/managers/analytics_manager.py:135:5: F841 local variable 'config' is assigned to but never used
    config = AnalyticsConfig()
    ^
security/managers/analytics_manager.py:136:5: F841 local variable 'analysis_type' is assigned to but never used
    analysis_type = "BEHAVIORAL"
    ^
security/managers/analytics_manager.py:137:5: F841 local variable 'data_source' is assigned to but never used
    data_source = "USER_ACTIVITY"
    ^
security/managers/analytics_manager.py:138:5: F841 local variable 'time_window' is assigned to but never used
    time_window = 3600
    ^
security/managers/analytics_manager.py:139:5: F841 local variable 'sample_size' is assigned to but never used
    sample_size = 1000
    ^
security/managers/analytics_manager.py:140:5: F841 local variable 'confidence_threshold' is assigned to but never used
    confidence_threshold = 0.95
    ^
security/managers/analytics_manager.py:141:5: F841 local variable 'anomaly_threshold' is assigned to but never used
    anomaly_threshold = 0.1
    ^
security/managers/analytics_manager.py:142:5: F841 local variable 'enable_ml' is assigned to but never used
    enable_ml = True
    ^
security/managers/analytics_manager.py:143:5: F841 local variable 'enable_clustering' is assigned to but never used
    enable_clustering = True
    ^
security/managers/analytics_manager.py:144:5: F841 local variable 'enable_prediction' is assigned to but never used
    enable_prediction = True
    ^
security/managers/analytics_manager.py:147:1: W293 blank line contains whitespace
    
^
security/managers/analytics_manager.py:163:1: W293 blank line contains whitespace
    
^
security/managers/dashboard_manager.py:10:1: F401 'time' imported but unused
import time
^
security/managers/dashboard_manager.py:11:1: F401 'numpy as np' imported but unused
import numpy as np
^
security/managers/dashboard_manager.py:44:1: E402 module level import not at top of file
from abc import ABC, abstractmethod
^
security/managers/dashboard_manager.py:49:1: W293 blank line contains whitespace
    
^
security/managers/dashboard_manager.py:58:1: W293 blank line contains whitespace
    
^
security/managers/dashboard_manager.py:62:1: W293 blank line contains whitespace
        
^
security/managers/dashboard_manager.py:66:80: E501 line too long (109 > 79 characters)
        processed_data['critical_incidents'] = len([i for i in incidents if i.get('severity') == 'critical'])
                                                                               ^
security/managers/dashboard_manager.py:67:1: W293 blank line contains whitespace
        
^
security/managers/dashboard_manager.py:71:80: E501 line too long (99 > 79 characters)
        processed_data['active_threats'] = len([t for t in threats if t.get('status') == 'active'])
                                                                               ^
security/managers/dashboard_manager.py:72:1: W293 blank line contains whitespace
        
^
security/managers/dashboard_manager.py:78:1: W293 blank line contains whitespace
    
^
security/managers/dashboard_manager.py:79:80: E501 line too long (95 > 79 characters)
    def __init__(self, widget_id: str, title: str, widget_type: str, position: Dict[str, int]):
                                                                               ^
security/managers/dashboard_manager.py:88:1: W293 blank line contains whitespace
    
^
security/managers/dashboard_manager.py:95:1: W293 blank line contains whitespace
        
^
security/managers/dashboard_manager.py:98:1: W293 blank line contains whitespace
    
^
security/managers/dashboard_manager.py:99:80: E501 line too long (103 > 79 characters)
    async def render_widget(self, widget_config: WidgetConfig, data: Dict[str, Any]) -> Dict[str, Any]:
                                                                               ^
security/managers/dashboard_manager.py:123:1: W293 blank line contains whitespace
    
^
security/managers/dashboard_manager.py:128:1: W293 blank line contains whitespace
            
^
security/managers/dashboard_manager.py:138:1: W293 blank line contains whitespace
            
^
security/managers/dashboard_manager.py:143:1: W293 blank line contains whitespace
            
^
security/managers/dashboard_manager.py:153:1: W293 blank line contains whitespace
            
^
security/managers/dashboard_manager.py:157:1: W293 blank line contains whitespace
            
^
security/managers/dashboard_manager.py:168:1: W293 blank line contains whitespace
            
^
security/managers/dashboard_manager.py:172:1: W293 blank line contains whitespace
            
^
security/managers/dashboard_manager.py:176:1: W293 blank line contains whitespace
            
^
security/managers/dashboard_manager.py:178:1: W293 blank line contains whitespace
            
^
security/managers/dashboard_manager.py:199:1: W293 blank line contains whitespace
            
^
security/managers/dashboard_manager.py:217:80: E501 line too long (80 > 79 characters)
            self.widgets = [w for w in self.widgets if w.widget_id != widget_id]
                                                                               ^
security/managers/dashboard_manager.py:234:1: W293 blank line contains whitespace
    
^
security/managers/dashboard_manager.py:237:1: W293 blank line contains whitespace
    
^
security/managers/dashboard_manager.py:242:1: W293 blank line contains whitespace
    
^
security/managers/dashboard_manager.py:250:1: W293 blank line contains whitespace
    
^
security/managers/dashboard_manager.py:252:1: W293 blank line contains whitespace
    
^
security/managers/dashboard_manager.py:259:1: W293 blank line contains whitespace
    
^
security/managers/dashboard_manager.py:261:1: W293 blank line contains whitespace
    
^
security/managers/monitor_manager.py:8:1: F401 'typing.Any' imported but unused
from typing import Any, Dict, List, Optional
^
security/managers/monitor_manager.py:12:1: F401 'time' imported but unused
import time
^
security/managers/monitor_manager.py:47:1: W293 blank line contains whitespace
    
^
security/managers/monitor_manager.py:76:1: W293 blank line contains whitespace
    
^
security/managers/monitor_manager.py:106:1: W293 blank line contains whitespace
    
^
security/managers/monitor_manager.py:111:1: W293 blank line contains whitespace
        
^
security/managers/monitor_manager.py:119:1: W293 blank line contains whitespace
        
^
security/managers/monitor_manager.py:127:1: W293 blank line contains whitespace
        
^
security/managers/monitor_manager.py:133:1: W293 blank line contains whitespace
    
^
security/managers/monitor_manager.py:145:1: W293 blank line contains whitespace
            
^
security/managers/monitor_manager.py:149:1: W293 blank line contains whitespace
            
^
security/managers/monitor_manager.py:152:1: W293 blank line contains whitespace
            
^
security/managers/monitor_manager.py:156:1: W293 blank line contains whitespace
            
^
security/managers/monitor_manager.py:170:1: W293 blank line contains whitespace
        
^
security/managers/monitor_manager.py:179:80: E501 line too long (105 > 79 characters)
    async def get_metrics(self, metric_name: Optional[str] = None, limit: int = 100) -> List[MetricData]:
                                                                               ^
security/managers/monitor_manager.py:202:80: E501 line too long (83 > 79 characters)
            return [alert for alert in active_alerts if alert.severity == severity]
                                                                               ^
security/managers/monitor_manager.py:215:5: F841 local variable 'collection_interval' is assigned to but never used
    collection_interval = 30
    ^
security/managers/monitor_manager.py:216:5: F841 local variable 'retention_days' is assigned to but never used
    retention_days = 30
    ^
security/managers/monitor_manager.py:217:5: F841 local variable 'anomaly_detection_enabled' is assigned to but never used
    anomaly_detection_enabled = True
    ^
security/managers/monitor_manager.py:218:5: F841 local variable 'alerting_enabled' is assigned to but never used
    alerting_enabled = True
    ^
security/managers/monitor_manager.py:219:5: F841 local variable 'cpu_threshold' is assigned to but never used
    cpu_threshold = 80.0
    ^
security/managers/monitor_manager.py:220:5: F841 local variable 'memory_threshold' is assigned to but never used
    memory_threshold = 85.0
    ^
security/managers/monitor_manager.py:221:5: F841 local variable 'disk_threshold' is assigned to but never used
    disk_threshold = 90.0
    ^
security/managers/report_manager.py:7:1: F401 'pandas as pd' imported but unused
import pandas as pd
^
security/managers/report_manager.py:9:1: F401 'security.base.SecurityBase' imported but unused
from security.base import SecurityBase
^
security/managers/report_manager.py:44:1: W293 blank line contains whitespace
    
^
security/managers/report_manager.py:45:80: E501 line too long (91 > 79 characters)
    def __init__(self, template_id: str, name: str, report_type: str, sections: List[str]):
                                                                               ^
security/managers/report_manager.py:86:1: W293 blank line contains whitespace
    
^
security/managers/report_manager.py:91:1: W293 blank line contains whitespace
        
^
security/managers/report_manager.py:96:80: E501 line too long (81 > 79 characters)
    def get_template_by_type(self, report_type: str) -> Optional[ReportTemplate]:
                                                                               ^
security/managers/report_manager.py:101:1: W293 blank line contains whitespace
        
^
security/managers/report_manager.py:112:1: W293 blank line contains whitespace
        
^
security/managers/report_manager.py:117:80: E501 line too long (80 > 79 characters)
                content[section] = self._generate_incidents_summary(report_data)
                                                                               ^
security/managers/report_manager.py:121:80: E501 line too long (82 > 79 characters)
                content[section] = self._generate_performance_summary(report_data)
                                                                               ^
security/managers/report_manager.py:122:1: W293 blank line contains whitespace
        
^
security/managers/report_manager.py:135:80: E501 line too long (82 > 79 characters)
    def _generate_incidents_summary(self, data: Dict[str, Any]) -> Dict[str, Any]:
                                                                               ^
security/managers/report_manager.py:145:80: E501 line too long (80 > 79 characters)
    def _generate_threats_summary(self, data: Dict[str, Any]) -> Dict[str, Any]:
                                                                               ^
security/managers/report_manager.py:155:80: E501 line too long (84 > 79 characters)
    def _generate_performance_summary(self, data: Dict[str, Any]) -> Dict[str, Any]:
                                                                               ^
security/managers/report_manager.py:160:80: E501 line too long (82 > 79 characters)
            "implemented": len([i for i in improvements if i.get("implemented")]),
                                                                               ^
security/managers/report_manager.py:161:80: E501 line too long (82 > 79 characters)
            "in_progress": len([i for i in improvements if i.get("in_progress")]),
                                                                               ^
security/managers/report_manager.py:165:80: E501 line too long (80 > 79 characters)
    def _count_by_severity(self, items: List[Dict[str, Any]]) -> Dict[str, int]:
                                                                               ^
security/managers/report_manager.py:193:1: W293 blank line contains whitespace
            
^
security/managers/report_manager.py:197:1: W293 blank line contains whitespace
            
^
security/managers/report_manager.py:200:1: W293 blank line contains whitespace
            
^
security/managers/report_manager.py:209:1: W293 blank line contains whitespace
            
^
security/managers/report_manager.py:212:1: W293 blank line contains whitespace
            
^
security/managers/report_manager.py:215:1: W293 blank line contains whitespace
            
^
security/managers/report_manager.py:227:80: E501 line too long (88 > 79 characters)
    async def list_reports(self, report_type: Optional[str] = None) -> List[ReportData]:
                                                                               ^
security/managers/report_manager.py:238:1: W293 blank line contains whitespace
    
^
security/managers/report_manager.py:243:80: E501 line too long (81 > 79 characters)
            {"type": "phishing", "severity": "medium", "timestamp": "2024-01-02"}
                                                                               ^
security/managers/report_manager.py:246:80: E501 line too long (85 > 79 characters)
            {"type": "unusual_traffic", "severity": "low", "timestamp": "2024-01-01"}
                                                                               ^
security/managers/report_manager.py:252:1: W293 blank line contains whitespace
    
^
security/managers/report_manager.py:259:1: W293 blank line contains whitespace
    
^
security/managers/report_manager.py:263:1: W293 blank line contains whitespace
    
^
security/mfa_service.py:12:1: F401 'hashlib' imported but unused
import hashlib
^
security/mfa_service.py:17:1: F401 'typing.Tuple' imported but unused
from typing import Dict, List, Optional, Tuple, Any
^
security/mfa_service.py:21:1: F401 'smtplib' imported but unused
import smtplib
^
security/mfa_service.py:22:1: F401 'email.mime.text.MIMEText' imported but unused
from email.mime.text import MIMEText
^
security/mfa_service.py:23:1: F401 'email.mime.multipart.MIMEMultipart' imported but unused
from email.mime.multipart import MIMEMultipart
^
security/mfa_service.py:81:1: W293 blank line contains whitespace
    
^
security/mfa_service.py:85:1: W293 blank line contains whitespace
        """
        Инициализация MFAService
        
        Args:
            config: Конфигурация MFA
        """
^
security/mfa_service.py:94:1: W293 blank line contains whitespace
        
^
security/mfa_service.py:99:1: W293 blank line contains whitespace
    
^
security/mfa_service.py:104:1: W293 blank line contains whitespace
    
^
security/mfa_service.py:109:1: W293 blank line contains whitespace
    
^
security/mfa_service.py:113:1: W293 blank line contains whitespace
        """
        Включение MFA для пользователя
        
        Args:
            user_id: ID пользователя
            mfa_type: Тип MFA
            
        Returns:
            Результат включения MFA
        """
^
security/mfa_service.py:117:1: W293 blank line contains whitespace
        """
        Включение MFA для пользователя
        
        Args:
            user_id: ID пользователя
            mfa_type: Тип MFA
            
        Returns:
            Результат включения MFA
        """
^
security/mfa_service.py:138:1: W293 blank line contains whitespace
    
^
security/mfa_service.py:143:1: W293 blank line contains whitespace
        
^
security/mfa_service.py:145:9: F841 local variable 'totp' is assigned to but never used
        totp = self.totp(secret_key)
        ^
security/mfa_service.py:146:1: W293 blank line contains whitespace
        
^
security/mfa_service.py:149:1: W293 blank line contains whitespace
        
^
security/mfa_service.py:152:1: W293 blank line contains whitespace
        
^
security/mfa_service.py:161:1: W293 blank line contains whitespace
        
^
security/mfa_service.py:164:1: W293 blank line contains whitespace
        
^
security/mfa_service.py:172:1: W293 blank line contains whitespace
    
^
security/mfa_service.py:182:1: W293 blank line contains whitespace
        
^
security/mfa_service.py:185:1: W293 blank line contains whitespace
        
^
security/mfa_service.py:191:1: W293 blank line contains whitespace
    
^
security/mfa_service.py:201:1: W293 blank line contains whitespace
        
^
security/mfa_service.py:204:1: W293 blank line contains whitespace
        
^
security/mfa_service.py:210:1: W293 blank line contains whitespace
    
^
security/mfa_service.py:211:80: E501 line too long (87 > 79 characters)
    def verify_mfa(self, user_id: str, code: str, mfa_type: MFAType) -> Dict[str, Any]:
                                                                               ^
security/mfa_service.py:214:1: W293 blank line contains whitespace
        """
        Проверка MFA кода
        
        Args:
            user_id: ID пользователя
            code: MFA код
            mfa_type: Тип MFA
            
        Returns:
            Результат проверки
        """
^
security/mfa_service.py:219:1: W293 blank line contains whitespace
        """
        Проверка MFA кода
        
        Args:
            user_id: ID пользователя
            code: MFA код
            mfa_type: Тип MFA
            
        Returns:
            Результат проверки
        """
^
security/mfa_service.py:228:80: E501 line too long (81 > 79 characters)
                    "error": "Пользователь заблокирован из-за превышения попыток"
                                                                               ^
security/mfa_service.py:230:1: W293 blank line contains whitespace
            
^
security/mfa_service.py:237:1: W293 blank line contains whitespace
            
^
security/mfa_service.py:252:1: W293 blank line contains whitespace
                
^
security/mfa_service.py:258:1: W293 blank line contains whitespace
    
^
security/mfa_service.py:266:1: W293 blank line contains whitespace
        
^
security/mfa_service.py:269:1: W293 blank line contains whitespace
        
^
security/mfa_service.py:277:1: W293 blank line contains whitespace
        
^
security/mfa_service.py:287:1: W293 blank line contains whitespace
        
^
security/mfa_service.py:294:1: W293 blank line contains whitespace
    
^
security/mfa_service.py:304:1: W293 blank line contains whitespace
        
^
security/mfa_service.py:313:1: W293 blank line contains whitespace
        
^
security/mfa_service.py:320:1: W293 blank line contains whitespace
    
^
security/mfa_service.py:330:1: W293 blank line contains whitespace
        
^
security/mfa_service.py:339:1: W293 blank line contains whitespace
        
^
security/mfa_service.py:346:1: W293 blank line contains whitespace
    
^
security/mfa_service.py:354:1: W293 blank line contains whitespace
    
^
security/mfa_service.py:355:80: E501 line too long (84 > 79 characters)
    def send_mfa_challenge(self, user_id: str, mfa_type: MFAType) -> Dict[str, Any]:
                                                                               ^
security/mfa_service.py:358:1: W293 blank line contains whitespace
        """
        Отправка MFA вызова
        
        Args:
            user_id: ID пользователя
            mfa_type: Тип MFA
            
        Returns:
            Результат отправки
        """
^
security/mfa_service.py:362:1: W293 blank line contains whitespace
        """
        Отправка MFA вызова
        
        Args:
            user_id: ID пользователя
            mfa_type: Тип MFA
            
        Returns:
            Результат отправки
        """
^
security/mfa_service.py:374:80: E501 line too long (80 > 79 characters)
                    "error": f"Отправка вызова не поддерживается для {mfa_type}"
                                                                               ^
security/mfa_service.py:381:1: W293 blank line contains whitespace
    
^
security/mfa_service.py:390:1: W293 blank line contains whitespace
        
^
security/mfa_service.py:393:1: W293 blank line contains whitespace
        
^
security/mfa_service.py:404:1: W293 blank line contains whitespace
        
^
security/mfa_service.py:407:1: W293 blank line contains whitespace
        
^
security/mfa_service.py:413:1: W293 blank line contains whitespace
    
^
security/mfa_service.py:422:1: W293 blank line contains whitespace
        
^
security/mfa_service.py:425:1: W293 blank line contains whitespace
        
^
security/mfa_service.py:436:1: W293 blank line contains whitespace
        
^
security/mfa_service.py:439:1: W293 blank line contains whitespace
        
^
security/mfa_service.py:445:1: W293 blank line contains whitespace
    
^
security/mfa_service.py:449:1: W293 blank line contains whitespace
        """
        Отключение MFA для пользователя
        
        Args:
            user_id: ID пользователя
            
        Returns:
            Результат отключения
        """
^
security/mfa_service.py:452:1: W293 blank line contains whitespace
        """
        Отключение MFA для пользователя
        
        Args:
            user_id: ID пользователя
            
        Returns:
            Результат отключения
        """
^
security/mfa_service.py:460:1: W293 blank line contains whitespace
            
^
security/mfa_service.py:464:1: W293 blank line contains whitespace
            
^
security/mfa_service.py:467:1: W293 blank line contains whitespace
            
^
security/mfa_service.py:477:1: W293 blank line contains whitespace
    
^
security/mfa_service.py:481:1: W293 blank line contains whitespace
        """
        Получение статуса MFA пользователя
        
        Args:
            user_id: ID пользователя
            
        Returns:
            Статус MFA
        """
^
security/mfa_service.py:484:1: W293 blank line contains whitespace
        """
        Получение статуса MFA пользователя
        
        Args:
            user_id: ID пользователя
            
        Returns:
            Статус MFA
        """
^
security/mfa_service.py:490:1: W293 blank line contains whitespace
        
^
security/mfa_service.py:498:1: W293 blank line contains whitespace
    
^
security/mfa_service.py:506:1: W293 blank line contains whitespace
        
^
security/mfa_service.py:511:1: W293 blank line contains whitespace
        
^
security/mfa_service.py:514:1: W293 blank line contains whitespace
        
^
security/mfa_service.py:519:1: W293 blank line contains whitespace
        
^
security/mfa_service.py:521:1: W293 blank line contains whitespace
    
^
security/mfa_service.py:529:1: W293 blank line contains whitespace
    
^
security/mfa_service.py:533:1: W293 blank line contains whitespace
    
^
security/mfa_service.py:537:1: W293 blank line contains whitespace
    
^
security/mfa_service.py:542:1: W293 blank line contains whitespace
    
^
security/mfa_service.py:547:1: W293 blank line contains whitespace
    
^
security/mfa_service.py:548:80: E501 line too long (96 > 79 characters)
    def _find_active_challenge(self, user_id: str, mfa_type: MFAType) -> Optional[MFAChallenge]:
                                                                               ^
security/mfa_service.py:552:49: W291 trailing whitespace
            if (challenge.user_id == user_id and 
                                                ^
security/mfa_service.py:553:51: W291 trailing whitespace
                challenge.mfa_type == mfa_type and 
                                                  ^
security/mfa_service.py:554:5: E129 visually indented line with same indent as next logical line
                challenge.expires_at > current_time):
    ^
security/mfa_service.py:557:1: W293 blank line contains whitespace
    
^
security/mfa_service.py:562:1: W293 blank line contains whitespace
    
^
security/mfa_service.py:567:1: W293 blank line contains whitespace
        
^
security/mfa_service.py:570:1: W293 blank line contains whitespace
        
^
security/mfa_service.py:577:1: W293 blank line contains whitespace
    
^
security/mfa_service.py:582:1: W293 blank line contains whitespace
    
^
security/mfa_service.py:587:1: W293 blank line contains whitespace
        
^
security/mfa_service.py:591:1: W293 blank line contains whitespace
        
^
security/mfa_service.py:593:1: W293 blank line contains whitespace
    
^
security/mfa_service.py:601:1: W293 blank line contains whitespace
        
^
security/mfa_service.py:604:1: W293 blank line contains whitespace
    
^
security/mfa_service.py:608:74: W291 trailing whitespace
        enabled_users = sum(1 for status in self.user_mfa_status.values() 
                                                                         ^
security/mfa_service.py:609:27: E128 continuation line under-indented for visual indent
                          if status == MFAStatus.ENABLED)
                          ^
security/mfa_service.py:610:72: W291 trailing whitespace
        locked_users = sum(1 for user_id in self.user_mfa_status.keys() 
                                                                       ^
security/mfa_service.py:611:26: E128 continuation line under-indented for visual indent
                         if self._is_user_locked(user_id))
                         ^
security/mfa_service.py:613:1: W293 blank line contains whitespace
        
^
security/mfa_service.py:619:80: E501 line too long (99 > 79 characters)
            "mfa_enabled_percentage": (enabled_users / total_users * 100) if total_users > 0 else 0
                                                                               ^
security/mfa_service.py:627:1: W293 blank line contains whitespace
    
^
security/mfa_service.py:632:1: W293 blank line contains whitespace
    
^
security/mfa_service.py:638:1: W293 blank line contains whitespace
        
^
security/mfa_service.py:640:80: E501 line too long (83 > 79 characters)
        verify_result = mfa_service.verify_mfa(user_id, current_code, MFAType.TOTP)
                                                                               ^
security/mfa_service.py:642:1: W293 blank line contains whitespace
    
^
security/mfa_service.py:645:38: W292 no newline at end of file
    print(f"Статистика MFA: {stats}")                                     ^
security/microservices/__init__.py:14:1: F401 '.service_mesh_manager.ServiceMeshManager' imported but unused
from .service_mesh_manager import ServiceMeshManager, ServiceInfo, ServiceEndpoint, ServiceRequest, ServiceResponse
^
security/microservices/__init__.py:14:1: F401 '.service_mesh_manager.ServiceInfo' imported but unused
from .service_mesh_manager import ServiceMeshManager, ServiceInfo, ServiceEndpoint, ServiceRequest, ServiceResponse
^
security/microservices/__init__.py:14:1: F401 '.service_mesh_manager.ServiceEndpoint' imported but unused
from .service_mesh_manager import ServiceMeshManager, ServiceInfo, ServiceEndpoint, ServiceRequest, ServiceResponse
^
security/microservices/__init__.py:14:1: F401 '.service_mesh_manager.ServiceRequest' imported but unused
from .service_mesh_manager import ServiceMeshManager, ServiceInfo, ServiceEndpoint, ServiceRequest, ServiceResponse
^
security/microservices/__init__.py:14:1: F401 '.service_mesh_manager.ServiceResponse' imported but unused
from .service_mesh_manager import ServiceMeshManager, ServiceInfo, ServiceEndpoint, ServiceRequest, ServiceResponse
^
security/microservices/__init__.py:14:80: E501 line too long (115 > 79 characters)
from .service_mesh_manager import ServiceMeshManager, ServiceInfo, ServiceEndpoint, ServiceRequest, ServiceResponse
                                                                               ^
security/microservices/__init__.py:15:1: F401 '.api_gateway.APIGateway' imported but unused
from .api_gateway import APIGateway, AuthMethod, RouteConfig^
security/microservices/__init__.py:15:1: F401 '.api_gateway.AuthMethod' imported but unused
from .api_gateway import APIGateway, AuthMethod, RouteConfig^
security/microservices/__init__.py:15:1: F401 '.api_gateway.RouteConfig' imported but unused
from .api_gateway import APIGateway, AuthMethod, RouteConfig^
security/microservices/__init__.py:15:61: W292 no newline at end of file
from .api_gateway import APIGateway, AuthMethod, RouteConfig                                                            ^
security/microservices/api_gateway.py:7:80: E501 line too long (84 > 79 characters)
"""
APIGateway - API шлюз системы безопасности
Централизованная маршрутизация и управление API

Этот модуль предоставляет комплексную систему API шлюза для AI системы безопасности,
включающую безопасную маршрутизацию, аутентификацию, мониторинг и защиту.

Автор: ALADDIN Security System
Версия: 3.0
Дата: 2025-01-06
Лицензия: MIT
"""
   
                                          
                                ^
security/microservices/api_gateway.py:36:1: F401 'core.base.CoreBase' imported but unused
from core.base import CoreBase, ComponentStatus, SecurityLevel
^
security/microservices/api_gateway.py:36:1: F401 'core.base.ComponentStatus' imported but unused
from core.base import CoreBase, ComponentStatus, SecurityLevel
^
security/microservices/api_gateway.py:36:1: F401 'core.base.SecurityLevel' imported but unused
from core.base import CoreBase, ComponentStatus, SecurityLevel
^
security/microservices/api_gateway.py:36:1: E402 module level import not at top of file
from core.base import CoreBase, ComponentStatus, SecurityLevel
^
security/microservices/api_gateway.py:37:1: E402 module level import not at top of file
import uvicorn
^
security/microservices/api_gateway.py:38:1: E402 module level import not at top of file
from fastapi import FastAPI, HTTPException
^
security/microservices/api_gateway.py:39:1: E402 module level import not at top of file
from fastapi.middleware.cors import CORSMiddleware
^
security/microservices/api_gateway.py:40:1: E402 module level import not at top of file
from fastapi.middleware.trustedhost import TrustedHostMiddleware
^
security/microservices/api_gateway.py:41:1: E402 module level import not at top of file
import httpx
^
security/microservices/api_gateway.py:42:1: E402 module level import not at top of file
from prometheus_client import Counter, Histogram, Gauge, generate_latest
^
security/microservices/api_gateway.py:69:1: E302 expected 2 blank lines, found 1
class APIKey(Base):
^
security/microservices/api_gateway.py:73:80: E501 line too long (80 > 79 characters)
    id = Column(String(36), primary_key=True, default=lambda: str(uuid.uuid4()))
                                                                               ^
security/microservices/api_gateway.py:81:80: E501 line too long (84 > 79 characters)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
                                                                               ^
security/microservices/api_gateway.py:83:1: E302 expected 2 blank lines, found 1
class APIRoute(Base):
^
security/microservices/api_gateway.py:87:80: E501 line too long (80 > 79 characters)
    id = Column(String(36), primary_key=True, default=lambda: str(uuid.uuid4()))
                                                                               ^
security/microservices/api_gateway.py:96:80: E501 line too long (84 > 79 characters)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
                                                                               ^
security/microservices/api_gateway.py:98:1: E302 expected 2 blank lines, found 1
class APILog(Base):
^
security/microservices/api_gateway.py:102:80: E501 line too long (80 > 79 characters)
    id = Column(String(36), primary_key=True, default=lambda: str(uuid.uuid4()))
                                                                               ^
security/microservices/api_gateway.py:113:1: E302 expected 2 blank lines, found 1
class RouteStatus(Enum):
^
security/microservices/api_gateway.py:120:1: E302 expected 2 blank lines, found 1
class AuthMethod(Enum):
^
security/microservices/api_gateway.py:127:1: E302 expected 2 blank lines, found 1
@dataclass
^
security/microservices/api_gateway.py:141:1: E302 expected 2 blank lines, found 1
@dataclass
^
security/microservices/api_gateway.py:155:1: E302 expected 2 blank lines, found 1
@dataclass
^
security/microservices/api_gateway.py:165:1: E302 expected 2 blank lines, found 1
class AuthenticationInterface(ABC):
^
security/microservices/api_gateway.py:174:80: E501 line too long (80 > 79 characters)
    async def authorize(self, user_id: str, resource: str, action: str) -> bool:
                                                                               ^
security/microservices/api_gateway.py:178:1: E302 expected 2 blank lines, found 1
class APIGateway:
^
security/microservices/api_gateway.py:289:80: E501 line too long (99 > 79 characters)
            self.logger.info(f"Маршрут зарегистрирован: {route_config.method} {route_config.path}")
                                                                               ^
security/microservices/api_gateway.py:312:80: E501 line too long (80 > 79 characters)
                    detail=f"Маршрут не найден: {request.method} {request.path}"
                                                                               ^
security/microservices/api_gateway.py:326:80: E501 line too long (94 > 79 characters)
            await self._log_request(request, response, int((time.time() - start_time) * 1000))
                                                                               ^
security/microservices/api_gateway.py:346:80: E501 line too long (84 > 79 characters)
            raise HTTPException(status_code=500, detail="Внутренняя ошибка сервера")
                                                                               ^
security/microservices/api_gateway.py:352:80: E501 line too long (87 > 79 characters)
    async def _check_rate_limit(self, request: APIRequest, route: RouteConfig) -> bool:
                                                                               ^
security/microservices/api_gateway.py:375:80: E501 line too long (91 > 79 characters)
    async def _proxy_request(self, request: APIRequest, route: RouteConfig) -> APIResponse:
                                                                               ^
security/microservices/api_gateway.py:395:80: E501 line too long (135 > 79 characters)
                    body=response.json() if response.headers.get('content-type', '').startswith('application/json') else response.text,
                                                                               ^
security/microservices/api_gateway.py:406:80: E501 line too long (105 > 79 characters)
    async def _log_request(self, request: APIRequest, response: APIResponse, response_time: int) -> None:
                                                                               ^
security/microservices/api_gateway.py:432:80: E501 line too long (87 > 79 characters)
                'active_routes': len([r for r in self.routes.values() if r.is_active]),
                                                                               ^
security/microservices/api_gateway.py:433:80: E501 line too long (81 > 79 characters)
                'uptime': time.time() - getattr(self, 'start_time', time.time()),
                                                                               ^
security/microservices/api_gateway.py:457:1: E305 expected 2 blank lines after class or function definition, found 1
app = FastAPI(
^
security/microservices/api_gateway.py:480:1: E302 expected 2 blank lines, found 1
@app.on_event("startup")
^
security/microservices/api_gateway.py:487:1: E302 expected 2 blank lines, found 1
@app.on_event("shutdown")
^
security/microservices/api_gateway.py:494:1: E302 expected 2 blank lines, found 1
@app.get("/health")
^
security/microservices/api_gateway.py:499:1: E302 expected 2 blank lines, found 1
@app.get("/metrics")
^
security/microservices/api_gateway.py:503:80: E501 line too long (85 > 79 characters)
        raise HTTPException(status_code=503, detail="API Gateway не инициализирован")
                                                                               ^
security/microservices/api_gateway.py:508:1: E302 expected 2 blank lines, found 1
@app.post("/routes", response_model=dict)
^
security/microservices/api_gateway.py:512:80: E501 line too long (85 > 79 characters)
        raise HTTPException(status_code=503, detail="API Gateway не инициализирован")
                                                                               ^
security/microservices/api_gateway.py:521:80: E501 line too long (86 > 79 characters)
            raise HTTPException(status_code=400, detail="Ошибка регистрации маршрута")
                                                                               ^
security/microservices/api_gateway.py:526:1: E302 expected 2 blank lines, found 1
@app.get("/routes")
^
security/microservices/api_gateway.py:530:80: E501 line too long (85 > 79 characters)
        raise HTTPException(status_code=503, detail="API Gateway не инициализирован")
                                                                               ^
security/microservices/api_gateway_new.py:7:80: E501 line too long (84 > 79 characters)
"""
APIGateway - API шлюз системы безопасности
Централизованная маршрутизация и управление API

Этот модуль предоставляет комплексную систему API шлюза для AI системы безопасности,
включающую безопасную маршрутизацию, аутентификацию, мониторинг и защиту.

Автор: ALADDIN Security System
Версия: 3.0
Дата: 2025-01-06
Лицензия: MIT
"""
   
                                          
                                ^
security/microservices/api_gateway_new.py:63:1: E302 expected 2 blank lines, found 1
class APIKey(Base):
^
security/microservices/api_gateway_new.py:67:80: E501 line too long (80 > 79 characters)
    id = Column(String(36), primary_key=True, default=lambda: str(uuid.uuid4()))
                                                                               ^
security/microservices/api_gateway_new.py:75:80: E501 line too long (84 > 79 characters)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
                                                                               ^
security/microservices/api_gateway_new.py:77:1: E302 expected 2 blank lines, found 1
class APIRoute(Base):
^
security/microservices/api_gateway_new.py:81:80: E501 line too long (80 > 79 characters)
    id = Column(String(36), primary_key=True, default=lambda: str(uuid.uuid4()))
                                                                               ^
security/microservices/api_gateway_new.py:90:80: E501 line too long (84 > 79 characters)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
                                                                               ^
security/microservices/api_gateway_new.py:92:1: E302 expected 2 blank lines, found 1
class APILog(Base):
^
security/microservices/api_gateway_new.py:96:80: E501 line too long (80 > 79 characters)
    id = Column(String(36), primary_key=True, default=lambda: str(uuid.uuid4()))
                                                                               ^
security/microservices/api_gateway_new.py:107:1: E302 expected 2 blank lines, found 1
class RouteStatus(Enum):
^
security/microservices/api_gateway_new.py:114:1: E302 expected 2 blank lines, found 1
class AuthMethod(Enum):
^
security/microservices/api_gateway_new.py:121:1: E302 expected 2 blank lines, found 1
@dataclass
^
security/microservices/api_gateway_new.py:135:1: E302 expected 2 blank lines, found 1
@dataclass
^
security/microservices/api_gateway_new.py:149:1: E302 expected 2 blank lines, found 1
@dataclass
^
security/microservices/api_gateway_new.py:159:1: E302 expected 2 blank lines, found 1
class AuthenticationInterface(ABC):
^
security/microservices/api_gateway_new.py:168:80: E501 line too long (80 > 79 characters)
    async def authorize(self, user_id: str, resource: str, action: str) -> bool:
                                                                               ^
security/microservices/api_gateway_new.py:172:1: E302 expected 2 blank lines, found 1
class APIGateway:
^
security/microservices/api_gateway_new.py:283:80: E501 line too long (99 > 79 characters)
            self.logger.info(f"Маршрут зарегистрирован: {route_config.method} {route_config.path}")
                                                                               ^
security/microservices/api_gateway_new.py:306:80: E501 line too long (80 > 79 characters)
                    detail=f"Маршрут не найден: {request.method} {request.path}"
                                                                               ^
security/microservices/api_gateway_new.py:320:80: E501 line too long (94 > 79 characters)
            await self._log_request(request, response, int((time.time() - start_time) * 1000))
                                                                               ^
security/microservices/api_gateway_new.py:340:80: E501 line too long (84 > 79 characters)
            raise HTTPException(status_code=500, detail="Внутренняя ошибка сервера")
                                                                               ^
security/microservices/api_gateway_new.py:346:80: E501 line too long (87 > 79 characters)
    async def _check_rate_limit(self, request: APIRequest, route: RouteConfig) -> bool:
                                                                               ^
security/microservices/api_gateway_new.py:369:80: E501 line too long (91 > 79 characters)
    async def _proxy_request(self, request: APIRequest, route: RouteConfig) -> APIResponse:
                                                                               ^
security/microservices/api_gateway_new.py:389:80: E501 line too long (135 > 79 characters)
                    body=response.json() if response.headers.get('content-type', '').startswith('application/json') else response.text,
                                                                               ^
security/microservices/api_gateway_new.py:400:80: E501 line too long (105 > 79 characters)
    async def _log_request(self, request: APIRequest, response: APIResponse, response_time: int) -> None:
                                                                               ^
security/microservices/api_gateway_new.py:426:80: E501 line too long (87 > 79 characters)
                'active_routes': len([r for r in self.routes.values() if r.is_active]),
                                                                               ^
security/microservices/api_gateway_new.py:427:80: E501 line too long (81 > 79 characters)
                'uptime': time.time() - getattr(self, 'start_time', time.time()),
                                                                               ^
security/microservices/api_gateway_new.py:451:1: E305 expected 2 blank lines after class or function definition, found 1
app = FastAPI(
^
security/microservices/api_gateway_new.py:474:1: E302 expected 2 blank lines, found 1
@app.on_event("startup")
^
security/microservices/api_gateway_new.py:481:1: E302 expected 2 blank lines, found 1
@app.on_event("shutdown")
^
security/microservices/api_gateway_new.py:488:1: E302 expected 2 blank lines, found 1
@app.get("/health")
^
security/microservices/api_gateway_new.py:493:1: E302 expected 2 blank lines, found 1
@app.get("/metrics")
^
security/microservices/api_gateway_new.py:497:80: E501 line too long (85 > 79 characters)
        raise HTTPException(status_code=503, detail="API Gateway не инициализирован")
                                                                               ^
security/microservices/api_gateway_new.py:502:1: E302 expected 2 blank lines, found 1
@app.post("/routes", response_model=dict)
^
security/microservices/api_gateway_new.py:506:80: E501 line too long (85 > 79 characters)
        raise HTTPException(status_code=503, detail="API Gateway не инициализирован")
                                                                               ^
security/microservices/api_gateway_new.py:515:80: E501 line too long (86 > 79 characters)
            raise HTTPException(status_code=400, detail="Ошибка регистрации маршрута")
                                                                               ^
security/microservices/api_gateway_new.py:520:1: E302 expected 2 blank lines, found 1
@app.get("/routes")
^
security/microservices/api_gateway_new.py:524:80: E501 line too long (85 > 79 characters)
        raise HTTPException(status_code=503, detail="API Gateway не инициализирован")
                                                                               ^
security/microservices/circuit_breaker.py:7:80: E501 line too long (90 > 79 characters)
"""
CircuitBreaker - Интеллектуальный автоматический выключатель
function_84: Защита от каскадных сбоев и перегрузки системы

Этот модуль предоставляет продвинутую систему circuit breaker для AI системы безопасности,
включающую:
- Множественные стратегии circuit breaker (Count-based, Time-based, Error-rate-based)
- Интеллектуальное определение сбоев и восстановления
- Адаптивные пороги на основе поведения системы
- ML-анализ для предсказания сбоев
- Интеграция с системой мониторинга и алертинга
- Поддержка различных типов операций (HTTP, Database, External API)
- Автоматическое обучение и адаптация порогов
- Детальное логирование и аудит всех операций
- Интеграция с внешними системами мониторинга (Prometheus, Grafana)
- Поддержка различных протоколов и сервисов

Основные возможности:
1. Интеллектуальная защита от каскадных сбоев
2. Автоматическое обнаружение и изоляция неисправных сервисов
3. ML-оптимизация порогов на основе исторических данных
4. Интеграция с системой мониторинга для отслеживания метрик
5. Поддержка различных стратегий circuit breaker
6. Адаптивные пороги на основе контекста и нагрузки
7. Детальное логирование и аудит всех операций
8. Интеграция с внешними системами мониторинга
9. Поддержка различных типов операций и сервисов
10. Автоматическое восстановление после сбоев

Технические детали:
- Использует asyncio для высокопроизводительной асинхронной обработки
- Применяет ML алгоритмы для анализа сбоев
- Интегрирует Redis для кэширования состояний
- Использует SQLAlchemy для работы с базой данных
- Применяет Pydantic для валидации данных
- Интегрирует Prometheus для метрик
- Использует Celery для асинхронных задач
- Применяет nginx для reverse proxy
- Интегрирует ELK stack для логирования

Автор: ALADDIN Security System
Версия: 2.0
Дата: 2025-01-27
Лицензия: MIT
"""
   
                                                            
              ^
security/microservices/circuit_breaker.py:9:80: E501 line too long (85 > 79 characters)
"""
CircuitBreaker - Интеллектуальный автоматический выключатель
function_84: Защита от каскадных сбоев и перегрузки системы

Этот модуль предоставляет продвинутую систему circuit breaker для AI системы безопасности,
включающую:
- Множественные стратегии circuit breaker (Count-based, Time-based, Error-rate-based)
- Интеллектуальное определение сбоев и восстановления
- Адаптивные пороги на основе поведения системы
- ML-анализ для предсказания сбоев
- Интеграция с системой мониторинга и алертинга
- Поддержка различных типов операций (HTTP, Database, External API)
- Автоматическое обучение и адаптация порогов
- Детальное логирование и аудит всех операций
- Интеграция с внешними системами мониторинга (Prometheus, Grafana)
- Поддержка различных протоколов и сервисов

Основные возможности:
1. Интеллектуальная защита от каскадных сбоев
2. Автоматическое обнаружение и изоляция неисправных сервисов
3. ML-оптимизация порогов на основе исторических данных
4. Интеграция с системой мониторинга для отслеживания метрик
5. Поддержка различных стратегий circuit breaker
6. Адаптивные пороги на основе контекста и нагрузки
7. Детальное логирование и аудит всех операций
8. Интеграция с внешними системами мониторинга
9. Поддержка различных типов операций и сервисов
10. Автоматическое восстановление после сбоев

Технические детали:
- Использует asyncio для высокопроизводительной асинхронной обработки
- Применяет ML алгоритмы для анализа сбоев
- Интегрирует Redis для кэширования состояний
- Использует SQLAlchemy для работы с базой данных
- Применяет Pydantic для валидации данных
- Интегрирует Prometheus для метрик
- Использует Celery для асинхронных задач
- Применяет nginx для reverse proxy
- Интегрирует ELK stack для логирования

Автор: ALADDIN Security System
Версия: 2.0
Дата: 2025-01-27
Лицензия: MIT
"""
   
                                                            
              ^
security/microservices/circuit_breaker.py:64:80: E501 line too long (99 > 79 characters)
from sqlalchemy import create_engine, Column, String, Integer, Float, DateTime, Boolean, Text, JSON
                                                                               ^
security/microservices/circuit_breaker.py:68:1: F401 'prometheus_client.Gauge' imported but unused
from prometheus_client import Counter, Histogram, Gauge
^
security/microservices/circuit_breaker.py:76:80: E501 line too long (93 > 79 characters)
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))
                                                                               ^
security/microservices/circuit_breaker.py:78:1: F401 'core.base.CoreBase' imported but unused
from core.base import CoreBase
^
security/microservices/circuit_breaker.py:78:1: E402 module level import not at top of file
from core.base import CoreBase
^
security/microservices/circuit_breaker.py:79:1: F401 'core.service_base.ServiceBase' imported but unused
from core.service_base import ServiceBase
^
security/microservices/circuit_breaker.py:79:1: E402 module level import not at top of file
from core.service_base import ServiceBase
^
security/microservices/circuit_breaker.py:80:1: E402 module level import not at top of file
from core.security_base import SecurityBase
^
security/microservices/circuit_breaker.py:81:1: F401 'core.database.DatabaseManager' imported but unused
from core.database import DatabaseManager
^
security/microservices/circuit_breaker.py:81:1: E402 module level import not at top of file
from core.database import DatabaseManager
^
security/microservices/circuit_breaker.py:82:1: F401 'core.configuration.ConfigurationManager' imported but unused
from core.configuration import ConfigurationManager
^
security/microservices/circuit_breaker.py:82:1: E402 module level import not at top of file
from core.configuration import ConfigurationManager
^
security/microservices/circuit_breaker.py:89:80: E501 line too long (142 > 79 characters)
CIRCUIT_STATE_CHANGES = Counter('circuit_breaker_state_changes_total', 'Circuit breaker state changes', ['service', 'from_state', 'to_state'])
                                                                               ^
security/microservices/circuit_breaker.py:90:80: E501 line too long (120 > 79 characters)
CIRCUIT_REQUESTS = Counter('circuit_breaker_requests_total', 'Circuit breaker requests', ['service', 'state', 'result'])
                                                                               ^
security/microservices/circuit_breaker.py:91:80: E501 line too long (130 > 79 characters)
CIRCUIT_DURATION = Histogram('circuit_breaker_request_duration_seconds', 'Circuit breaker request duration', ['service', 'state'])
                                                                               ^
security/microservices/circuit_breaker.py:92:80: E501 line too long (117 > 79 characters)
CIRCUIT_FAILURES = Counter('circuit_breaker_failures_total', 'Circuit breaker failures', ['service', 'failure_type'])
                                                                               ^
security/microservices/circuit_breaker.py:93:80: E501 line too long (107 > 79 characters)
CIRCUIT_RECOVERIES = Counter('circuit_breaker_recoveries_total', 'Circuit breaker recoveries', ['service'])
                                                                               ^
security/microservices/circuit_breaker.py:94:80: E501 line too long (122 > 79 characters)
ML_PREDICTIONS = Counter('circuit_breaker_ml_predictions_total', 'ML failure predictions', ['service', 'prediction_type'])
                                                                               ^
security/microservices/circuit_breaker.py:101:1: E303 too many blank lines (3)
class CircuitBreakerRecord(Base):
^
security/microservices/circuit_breaker.py:118:80: E501 line too long (84 > 79 characters)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
                                                                               ^
security/microservices/circuit_breaker.py:123:1: E303 too many blank lines (3)
class CircuitBreakerEvent(Base):
^
security/microservices/circuit_breaker.py:149:80: E501 line too long (99 > 79 characters)
    half_open_max_calls: int = Field(5, gt=0, description="Максимум вызовов в half-open состоянии")
                                                                               ^
security/microservices/circuit_breaker.py:150:80: E501 line too long (100 > 79 characters)
    success_threshold: int = Field(3, gt=0, description="Порог успешных вызовов для восстановления")
                                                                               ^
security/microservices/circuit_breaker.py:163:1: E303 too many blank lines (3)
class CircuitBreakerRequest(BaseModel):
^
security/microservices/circuit_breaker.py:171:80: E501 line too long (97 > 79 characters)
    extra_data: Dict[str, Any] = Field(default_factory=dict, description="Дополнительные данные")
                                                                               ^
security/microservices/circuit_breaker.py:175:1: E303 too many blank lines (3)
class CircuitBreakerResponse(BaseModel):
^
security/microservices/circuit_breaker.py:181:80: E501 line too long (81 > 79 characters)
    execution_time: float = Field(..., description="Время выполнения в секундах")
                                                                               ^
security/microservices/circuit_breaker.py:183:80: E501 line too long (97 > 79 characters)
    extra_data: Dict[str, Any] = Field(default_factory=dict, description="Дополнительные данные")
                                                                               ^
security/microservices/circuit_breaker.py:197:1: E303 too many blank lines (3)
class CircuitBreakerState(Enum):
^
security/microservices/circuit_breaker.py:205:1: E303 too many blank lines (3)
class ServiceType(Enum):
^
security/microservices/circuit_breaker.py:215:1: E303 too many blank lines (3)
class EventType(Enum):
^
security/microservices/circuit_breaker.py:224:1: E302 expected 2 blank lines, found 1
@dataclass
^
security/microservices/circuit_breaker.py:227:1: E304 blank lines found after function decorator
class CountBasedStrategy:
^
security/microservices/circuit_breaker.py:253:1: E302 expected 2 blank lines, found 1
@dataclass
^
security/microservices/circuit_breaker.py:256:1: E304 blank lines found after function decorator
class TimeBasedStrategy:
^
security/microservices/circuit_breaker.py:298:1: E302 expected 2 blank lines, found 1
@dataclass
^
security/microservices/circuit_breaker.py:301:1: E304 blank lines found after function decorator
class ErrorRateBasedStrategy:
^
security/microservices/circuit_breaker.py:364:80: E501 line too long (94 > 79 characters)
    def __init__(self, name: str = "CircuitBreaker", config: Optional[Dict[str, Any]] = None):
                                                                               ^
security/microservices/circuit_breaker.py:446:80: E501 line too long (92 > 79 characters)
            self.cleanup_thread = threading.Thread(target=self._cleanup_worker, daemon=True)
                                                                               ^
security/microservices/circuit_breaker.py:450:80: E501 line too long (86 > 79 characters)
                self.ml_thread = threading.Thread(target=self._ml_worker, daemon=True)
                                                                               ^
security/microservices/circuit_breaker.py:494:80: E501 line too long (90 > 79 characters)
            database_url = self.config.get('database_url', 'sqlite:///circuit_breaker.db')
                                                                               ^
security/microservices/circuit_breaker.py:513:80: E501 line too long (80 > 79 characters)
            redis_url = self.config.get('redis_url', 'redis://localhost:6379/0')
                                                                               ^
security/microservices/circuit_breaker.py:514:80: E501 line too long (80 > 79 characters)
            self.redis_client = redis.from_url(redis_url, decode_responses=True)
                                                                               ^
security/microservices/circuit_breaker.py:543:80: E501 line too long (107 > 79 characters)
    async def execute(self, request: CircuitBreakerRequest, operation: Callable) -> CircuitBreakerResponse:
                                                                               ^
security/microservices/circuit_breaker.py:576:80: E501 line too long (90 > 79 characters)
                    await self._change_state(circuit, CircuitBreakerState.HALF_OPEN.value)
                                                                               ^
security/microservices/circuit_breaker.py:580:80: E501 line too long (83 > 79 characters)
                failure_probability = await self._predict_failure(request, circuit)
                                                                               ^
security/microservices/circuit_breaker.py:584:80: E501 line too long (104 > 79 characters)
                    ML_PREDICTIONS.labels(service=request.service_name, prediction_type="failure").inc()
                                                                               ^
security/microservices/circuit_breaker.py:679:80: E501 line too long (93 > 79 characters)
    async def _get_or_create_circuit(self, request: CircuitBreakerRequest) -> Dict[str, Any]:
                                                                               ^
security/microservices/circuit_breaker.py:715:80: E501 line too long (96 > 79 characters)
    async def _get_circuit_config(self, request: CircuitBreakerRequest) -> CircuitBreakerConfig:
                                                                               ^
security/microservices/circuit_breaker.py:718:80: E501 line too long (80 > 79 characters)
        cache_key = f"circuit_config:{request.service_name}:{request.operation}"
                                                                               ^
security/microservices/circuit_breaker.py:806:80: E501 line too long (99 > 79 characters)
            time_since_failure = (datetime.utcnow() - circuit["last_failure_time"]).total_seconds()
                                                                               ^
security/microservices/circuit_breaker.py:811:80: E501 line too long (83 > 79 characters)
    async def _change_state(self, circuit: Dict[str, Any], new_state: str) -> None:
                                                                               ^
security/microservices/circuit_breaker.py:834:80: E501 line too long (116 > 79 characters)
        self.logger.info(f"Circuit breaker {circuit['service_name']} изменил состояние: {old_state} -> {new_state}")
                                                                               ^
security/microservices/circuit_breaker.py:836:80: E501 line too long (101 > 79 characters)
    async def _record_success(self, circuit: Dict[str, Any], request: CircuitBreakerRequest) -> None:
                                                                               ^
security/microservices/circuit_breaker.py:852:80: E501 line too long (83 > 79 characters)
                await self._change_state(circuit, CircuitBreakerState.CLOSED.value)
                                                                               ^
security/microservices/circuit_breaker.py:859:80: E501 line too long (113 > 79 characters)
    async def _record_failure(self, circuit: Dict[str, Any], request: CircuitBreakerRequest, error: str) -> None:
                                                                               ^
security/microservices/circuit_breaker.py:871:80: E501 line too long (103 > 79 characters)
        if circuit["state"] in [CircuitBreakerState.CLOSED.value, CircuitBreakerState.HALF_OPEN.value]:
                                                                               ^
security/microservices/circuit_breaker.py:873:80: E501 line too long (81 > 79 characters)
                await self._change_state(circuit, CircuitBreakerState.OPEN.value)
                                                                               ^
security/microservices/circuit_breaker.py:881:80: E501 line too long (103 > 79 characters)
    async def _predict_failure(self, request: CircuitBreakerRequest, circuit: Dict[str, Any]) -> float:
                                                                               ^
security/microservices/circuit_breaker.py:898:80: E501 line too long (100 > 79 characters)
            failure_probability = max(0.0, min(1.0, -anomaly_score))  # Преобразование в вероятность
                                                                               ^
security/microservices/circuit_breaker.py:906:80: E501 line too long (104 > 79 characters)
    def _extract_features(self, request: CircuitBreakerRequest, circuit: Dict[str, Any]) -> List[float]:
                                                                               ^
security/microservices/circuit_breaker.py:936:80: E501 line too long (85 > 79 characters)
            time_since_failure = (now - circuit["last_failure_time"]).total_seconds()
                                                                               ^
security/microservices/circuit_breaker.py:942:80: E501 line too long (85 > 79 characters)
            time_since_success = (now - circuit["last_success_time"]).total_seconds()
                                                                               ^
security/microservices/circuit_breaker.py:949:80: E501 line too long (106 > 79 characters)
    async def _record_state_change(self, circuit: Dict[str, Any], from_state: str, to_state: str) -> None:
                                                                               ^
security/microservices/circuit_breaker.py:953:80: E501 line too long (87 > 79 characters)
                id=f"state_change_{int(time.time() * 1000)}_{circuit['service_name']}",
                                                                               ^
security/microservices/circuit_breaker.py:971:80: E501 line too long (119 > 79 characters)
    async def _record_failure_event(self, circuit: Dict[str, Any], request: CircuitBreakerRequest, error: str) -> None:
                                                                               ^
security/microservices/circuit_breaker.py:975:80: E501 line too long (82 > 79 characters)
                id=f"failure_{int(time.time() * 1000)}_{circuit['service_name']}",
                                                                               ^
security/microservices/circuit_breaker.py:1082:80: E501 line too long (102 > 79 characters)
                            time_since_update = (current_time - circuit["updated_at"]).total_seconds()
                                                                               ^
security/microservices/circuit_breaker.py:1131:80: E501 line too long (85 > 79 characters)
    def _extract_features_from_circuit(self, circuit: Dict[str, Any]) -> List[float]:
                                                                               ^
security/microservices/circuit_breaker.py:1154:80: E501 line too long (85 > 79 characters)
            time_since_failure = (now - circuit["last_failure_time"]).total_seconds()
                                                                               ^
security/microservices/circuit_breaker.py:1160:80: E501 line too long (85 > 79 characters)
            time_since_success = (now - circuit["last_success_time"]).total_seconds()
                                                                               ^
security/microservices/circuit_breaker.py:1176:80: E501 line too long (115 > 79 characters)
                    failure_rate = circuit["failure_count"] / (circuit["failure_count"] + circuit["success_count"])
                                                                               ^
security/microservices/circuit_breaker.py:1212:80: E501 line too long (89 > 79 characters)
                    "default_failure_threshold": self.config["default_failure_threshold"]
                                                                               ^
security/microservices/circuit_breaker.py:1216:80: E501 line too long (94 > 79 characters)
    async def reset_circuit(self, service_name: str, operation: Optional[str] = None) -> bool:
                                                                               ^
security/microservices/circuit_breaker.py:1230:80: E501 line too long (81 > 79 characters)
                            self.strategies[service_key] = self._create_strategy(
                                                                               ^
security/microservices/circuit_breaker.py:1231:80: E501 line too long (85 > 79 characters)
                                await self._get_circuit_config(CircuitBreakerRequest(
                                                                               ^
security/microservices/circuit_breaker.py:1239:80: E501 line too long (86 > 79 characters)
                        self.logger.info(f"Circuit breaker сброшен для {service_key}")
                                                                               ^
security/microservices/circuit_breaker.py:1242:80: E501 line too long (111 > 79 characters)
                    keys_to_reset = [key for key in self.circuits.keys() if key.startswith(f"{service_name}:")]
                                                                               ^
security/microservices/circuit_breaker.py:1251:80: E501 line too long (89 > 79 characters)
                    self.logger.info(f"Все circuit breakers сброшены для {service_name}")
                                                                               ^
security/microservices/circuit_breaker.py:1260:1: F401 'fastapi.Depends' imported but unused
from fastapi import FastAPI, HTTPException, Depends
^
security/microservices/circuit_breaker.py:1260:1: E305 expected 2 blank lines after class or function definition, found 1
from fastapi import FastAPI, HTTPException, Depends
^
security/microservices/circuit_breaker.py:1260:1: E402 module level import not at top of file
from fastapi import FastAPI, HTTPException, Depends
^
security/microservices/circuit_breaker.py:1261:1: E402 module level import not at top of file
from fastapi.middleware.cors import CORSMiddleware
^
security/microservices/circuit_breaker.py:1262:1: E402 module level import not at top of file
import uvicorn
^
security/microservices/circuit_breaker.py:1278:1: E302 expected 2 blank lines, found 1
@app.on_event("startup")
^
security/microservices/circuit_breaker.py:1285:1: E302 expected 2 blank lines, found 1
@app.on_event("shutdown")
^
security/microservices/circuit_breaker.py:1292:1: E302 expected 2 blank lines, found 1
@app.get("/health")
^
security/microservices/circuit_breaker.py:1297:1: E302 expected 2 blank lines, found 1
@app.get("/status")
^
security/microservices/circuit_breaker.py:1301:80: E501 line too long (85 > 79 characters)
        raise HTTPException(status_code=503, detail="CircuitBreaker not initialized")
                                                                               ^
security/microservices/circuit_breaker.py:1305:1: E302 expected 2 blank lines, found 1
@app.post("/execute")
^
security/microservices/circuit_breaker.py:1306:80: E501 line too long (95 > 79 characters)
async def execute_operation(request: CircuitBreakerRequest, operation: str = "test_operation"):
                                                                               ^
security/microservices/circuit_breaker.py:1309:80: E501 line too long (85 > 79 characters)
        raise HTTPException(status_code=503, detail="CircuitBreaker not initialized")
                                                                               ^
security/microservices/circuit_breaker.py:1318:1: E302 expected 2 blank lines, found 1
@app.post("/reset")
^
security/microservices/circuit_breaker.py:1322:80: E501 line too long (85 > 79 characters)
        raise HTTPException(status_code=503, detail="CircuitBreaker not initialized")
                                                                               ^
security/microservices/circuit_breaker.py:1326:80: E501 line too long (86 > 79 characters)
        raise HTTPException(status_code=500, detail="Failed to reset circuit breaker")
                                                                               ^
security/microservices/circuit_breaker.py:1330:1: E302 expected 2 blank lines, found 1
@app.get("/metrics")
^
security/microservices/circuit_breaker.py:1354:1: E305 expected 2 blank lines after class or function definition, found 1
if __name__ == "__main__":
^
security/microservices/circuit_breaker.py:1358:1: E302 expected 2 blank lines, found 1
async def test_circuit_breaker():
^
security/microservices/circuit_breaker.py:1391:80: E501 line too long (114 > 79 characters)
            print(f"✅ Тест 2.{i+1} - Операция с ошибкой: {response.success}, состояние: {response.circuit_state}")
                                                                               ^
security/microservices/circuit_breaker.py:1395:80: E501 line too long (98 > 79 characters)
        print(f"✅ Тест 3 - Операция с открытым CB: {response.success}, причина: {response.error}")
                                                                               ^
security/microservices/circuit_breaker.py:1399:80: E501 line too long (97 > 79 characters)
        print(f"✅ Тест 4 - Статус: {status['status']}, активных CB: {status['active_circuits']}")
                                                                               ^
security/microservices/circuit_breaker_extra.py:7:1: F401 'numpy as np' imported but unused
import numpy as np
^
security/microservices/circuit_breaker_extra.py:10:1: F401 'time' imported but unused
import time
^
security/microservices/circuit_breaker_extra.py:14:1: E302 expected 2 blank lines, found 1
class CircuitBreakerExtra:
^
security/microservices/circuit_breaker_extra.py:16:1: W293 blank line contains whitespace
    
^
security/microservices/circuit_breaker_extra.py:28:1: W293 blank line contains whitespace
    
^
security/microservices/circuit_breaker_extra.py:29:80: E501 line too long (84 > 79 characters)
    def _save_circuit_state(self, circuit_id: str, circuit: Dict[str, Any]) -> bool:
                                                                               ^
security/microservices/circuit_breaker_extra.py:32:22: F821 undefined name 'CircuitBreakerRecord'
            record = CircuitBreakerRecord(
                     ^
security/microservices/circuit_breaker_extra.py:46:50: F821 undefined name 'CircuitBreakerRecord'
                existing = self.db_session.query(CircuitBreakerRecord).filter(
                                                 ^
security/microservices/circuit_breaker_extra.py:47:21: F821 undefined name 'CircuitBreakerRecord'
                    CircuitBreakerRecord.id == record.id
                    ^
security/microservices/circuit_breaker_extra.py:62:80: E501 line too long (82 > 79 characters)
            self.logger.error(f"Ошибка сохранения состояния Circuit Breaker: {e}")
                                                                               ^
security/microservices/circuit_breaker_extra.py:64:1: W293 blank line contains whitespace
    
^
security/microservices/circuit_breaker_extra.py:65:80: E501 line too long (85 > 79 characters)
    def create_circuit(self, circuit_id: str, config: Dict[str, Any] = None) -> bool:
                                                                               ^
security/microservices/circuit_breaker_extra.py:71:1: W293 blank line contains whitespace
                
^
security/microservices/circuit_breaker_extra.py:75:1: W293 blank line contains whitespace
                
^
security/microservices/circuit_breaker_extra.py:82:80: E501 line too long (85 > 79 characters)
                    "failure_threshold": circuit_config["default_failure_threshold"],
                                                                               ^
security/microservices/circuit_breaker_extra.py:86:1: W293 blank line contains whitespace
                
^
security/microservices/circuit_breaker_extra.py:92:1: W293 blank line contains whitespace
    
^
security/microservices/circuit_breaker_extra.py:99:1: W293 blank line contains whitespace
                
^
security/microservices/circuit_breaker_extra.py:101:1: W293 blank line contains whitespace
                
^
security/microservices/circuit_breaker_extra.py:108:1: W293 blank line contains whitespace
                
^
security/microservices/circuit_breaker_extra.py:111:1: W293 blank line contains whitespace
                
^
security/microservices/circuit_breaker_extra.py:115:1: W293 blank line contains whitespace
                
^
security/microservices/circuit_breaker_extra.py:120:1: W293 blank line contains whitespace
    
^
security/microservices/circuit_breaker_extra.py:125:1: W293 blank line contains whitespace
        
^
security/microservices/circuit_breaker_extra.py:126:80: E501 line too long (95 > 79 characters)
        time_since_failure = (datetime.utcnow() - circuit["last_failure_time"]).total_seconds()
                                                                               ^
security/microservices/circuit_breaker_extra.py:128:1: W293 blank line contains whitespace
    
^
security/microservices/circuit_breaker_extra.py:133:1: W293 blank line contains whitespace
        
^
security/microservices/circuit_breaker_extra.py:137:1: W293 blank line contains whitespace
        
^
security/microservices/circuit_breaker_extra.py:139:1: W293 blank line contains whitespace
    
^
security/microservices/circuit_breaker_extra.py:144:1: W293 blank line contains whitespace
        
^
security/microservices/circuit_breaker_extra.py:147:1: W293 blank line contains whitespace
        
^
security/microservices/circuit_breaker_extra.py:149:1: W293 blank line contains whitespace
    
^
security/microservices/circuit_breaker_extra.py:155:80: E501 line too long (88 > 79 characters)
                "circuit_states": {cid: c["state"] for cid, c in self.circuits.items()},
                                                                               ^
security/microservices/circuit_breaker_extra.py:162:1: W293 blank line contains whitespace
    
^
security/microservices/circuit_breaker_extra.py:173:1: E305 expected 2 blank lines after class or function definition, found 1
circuit_breaker_extra = CircuitBreakerExtra()^
security/microservices/circuit_breaker_extra.py:173:46: W292 no newline at end of file
circuit_breaker_extra = CircuitBreakerExtra()                                             ^
security/microservices/load_balancer.py:24:80: E501 line too long (87 > 79 characters)
from sqlalchemy import create_engine, Column, String, DateTime, Integer, Boolean, Float
                                                                               ^
security/microservices/load_balancer.py:36:1: F401 'core.base.CoreBase' imported but unused
from core.base import CoreBase, ComponentStatus, SecurityLevel
^
security/microservices/load_balancer.py:36:1: F401 'core.base.ComponentStatus' imported but unused
from core.base import CoreBase, ComponentStatus, SecurityLevel
^
security/microservices/load_balancer.py:36:1: F401 'core.base.SecurityLevel' imported but unused
from core.base import CoreBase, ComponentStatus, SecurityLevel
^
security/microservices/load_balancer.py:36:1: E402 module level import not at top of file
from core.base import CoreBase, ComponentStatus, SecurityLevel
^
security/microservices/load_balancer.py:76:1: E302 expected 2 blank lines, found 1
class ServiceEndpoint(Base):
^
security/microservices/load_balancer.py:91:80: E501 line too long (84 > 79 characters)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
                                                                               ^
security/microservices/load_balancer.py:93:1: E302 expected 2 blank lines, found 1
class LoadBalancingSession(Base):
^
security/microservices/load_balancer.py:106:1: E302 expected 2 blank lines, found 1
class LoadBalancingMetrics(Base):
^
security/microservices/load_balancer.py:121:1: E302 expected 2 blank lines, found 1
class LoadBalancingAlgorithm(Enum):
^
security/microservices/load_balancer.py:131:1: E302 expected 2 blank lines, found 1
class ServiceStatus(Enum):
^
security/microservices/load_balancer.py:139:1: E302 expected 2 blank lines, found 1
class HealthCheckType(Enum):
^
security/microservices/load_balancer.py:147:1: E302 expected 2 blank lines, found 1
class ServiceRequest(BaseModel):
^
security/microservices/load_balancer.py:194:1: E302 expected 2 blank lines, found 1
class LoadBalancingRequest(BaseModel):
^
security/microservices/load_balancer.py:217:1: E302 expected 2 blank lines, found 1
class LoadBalancingResponse(BaseModel):
^
security/microservices/load_balancer.py:252:1: E302 expected 2 blank lines, found 1
class HealthCheckResponse(BaseModel):
^
security/microservices/load_balancer.py:284:1: E302 expected 2 blank lines, found 1
class LoadBalancingAlgorithmInterface(ABC):
^
security/microservices/load_balancer.py:301:1: E302 expected 2 blank lines, found 1
class HealthCheckInterface(ABC):
^
security/microservices/load_balancer.py:312:1: E302 expected 2 blank lines, found 1
class MetricsCollectorInterface(ABC):
^
security/microservices/load_balancer.py:324:1: E302 expected 2 blank lines, found 1
class RoundRobinAlgorithm(LoadBalancingAlgorithmInterface):
^
security/microservices/load_balancer.py:350:1: E302 expected 2 blank lines, found 1
class LeastConnectionsAlgorithm(LoadBalancingAlgorithmInterface):
^
security/microservices/load_balancer.py:389:1: E302 expected 2 blank lines, found 1
class LoadBalancer:
^
security/microservices/load_balancer.py:422:80: E501 line too long (87 > 79 characters)
            LoadBalancingAlgorithm.LEAST_CONNECTIONS.value: LeastConnectionsAlgorithm()
                                                                               ^
security/microservices/load_balancer.py:482:80: E501 line too long (80 > 79 characters)
                self.logger.info(f"Загружено {len(services)} активных сервисов")
                                                                               ^
security/microservices/load_balancer.py:516:80: E501 line too long (80 > 79 characters)
                    service_metrics[metric.service_id]['response_times'].append(
                                                                               ^
security/microservices/load_balancer.py:519:80: E501 line too long (83 > 79 characters)
                    service_metrics[metric.service_id]['throughput_values'].append(
                                                                               ^
security/microservices/load_balancer.py:572:1: W293 blank line contains whitespace
            
^
security/microservices/load_balancer.py:599:80: E501 line too long (89 > 79 characters)
                        service_list[:] = [s for s in service_list if s.id != service_id]
                                                                               ^
security/microservices/load_balancer.py:627:80: E501 line too long (89 > 79 characters)
                self.logger.warning(f"Нет доступных сервисов для {request.service_name}")
                                                                               ^
security/microservices/load_balancer.py:654:80: E501 line too long (108 > 79 characters)
                service_url=f"{selected_service.protocol}://{selected_service.url}:{selected_service.port}",
                                                                               ^
security/microservices/load_balancer.py:700:80: E501 line too long (107 > 79 characters)
                health_url = f"{service.protocol}://{service.url}:{service.port}{service.health_check_url}"
                                                                               ^
security/microservices/load_balancer.py:712:80: E501 line too long (88 > 79 characters)
                        error_message=None if is_healthy else f"HTTP {response.status}",
                                                                               ^
security/microservices/load_balancer.py:731:80: E501 line too long (84 > 79 characters)
            self.logger.error(f"Ошибка проверки здоровья сервиса {service_id}: {e}")
                                                                               ^
security/microservices/load_balancer.py:742:80: E501 line too long (82 > 79 characters)
                self.logger.error(f"Алгоритм {algorithm.value} не поддерживается")
                                                                               ^
security/microservices/load_balancer.py:752:80: E501 line too long (92 > 79 characters)
                'total_services': sum(len(services) for services in self.services.values()),
                                                                               ^
security/microservices/load_balancer.py:793:1: E305 expected 2 blank lines after class or function definition, found 1
app = FastAPI(
^
security/microservices/load_balancer.py:802:1: E302 expected 2 blank lines, found 1
@app.on_event("startup")
^
security/microservices/load_balancer.py:809:1: E302 expected 2 blank lines, found 1
@app.on_event("shutdown")
^
security/microservices/load_balancer.py:816:1: E302 expected 2 blank lines, found 1
@app.get("/health")
^
security/microservices/load_balancer.py:821:1: E302 expected 2 blank lines, found 1
@app.get("/metrics")
^
security/microservices/load_balancer.py:826:1: E302 expected 2 blank lines, found 1
@app.post("/services", response_model=dict)
^
security/microservices/load_balancer.py:835:1: E302 expected 2 blank lines, found 1
@app.delete("/services/{service_id}")
^
security/microservices/load_balancer.py:844:1: E302 expected 2 blank lines, found 1
@app.post("/balance", response_model=LoadBalancingResponse)
^
security/microservices/load_balancer.py:856:1: E302 expected 2 blank lines, found 1
@app.get("/services/{service_id}/health")
^
security/microservices/load_balancer.py:868:1: E302 expected 2 blank lines, found 1
@app.get("/metrics/summary")
^
security/microservices/put_to_sleep.py:10:1: F401 'time' imported but unused
import time
^
security/microservices/put_to_sleep.py:15:80: E501 line too long (93 > 79 characters)
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))
                                                                               ^
security/microservices/put_to_sleep.py:17:1: E402 module level import not at top of file
from rate_limiter import RateLimiter
^
security/microservices/put_to_sleep.py:18:1: E402 module level import not at top of file
from circuit_breaker import CircuitBreaker
^
security/microservices/put_to_sleep.py:19:1: E402 module level import not at top of file
from user_interface_manager import UserInterfaceManager
^
security/microservices/put_to_sleep.py:28:1: E302 expected 2 blank lines, found 1
async def put_systems_to_sleep():
^
security/microservices/put_to_sleep.py:33:1: W293 blank line contains whitespace
    
^
security/microservices/put_to_sleep.py:48:1: W293 blank line contains whitespace
    
^
security/microservices/put_to_sleep.py:50:1: W293 blank line contains whitespace
    
^
security/microservices/put_to_sleep.py:58:1: W293 blank line contains whitespace
        
^
security/microservices/put_to_sleep.py:65:1: W293 blank line contains whitespace
        
^
security/microservices/put_to_sleep.py:68:80: E501 line too long (85 > 79 characters)
        ui_manager = UserInterfaceManager("UserInterfaceManager_Sleep", sleep_config)
                                                                               ^
security/microservices/put_to_sleep.py:72:1: W293 blank line contains whitespace
        
^
security/microservices/put_to_sleep.py:78:1: W293 blank line contains whitespace
        
^
security/microservices/put_to_sleep.py:80:80: E501 line too long (83 > 79 characters)
        logger.info("💤 Системы будут автоматически пробуждаться при необходимости")
                                                                               ^
security/microservices/put_to_sleep.py:81:1: W293 blank line contains whitespace
        
^
security/microservices/put_to_sleep.py:83:80: E501 line too long (93 > 79 characters)
        sleep_config_file = os.path.join(os.path.dirname(__file__), "sleep_mode_config.json")
                                                                               ^
security/microservices/put_to_sleep.py:87:80: E501 line too long (84 > 79 characters)
        logger.info(f"💾 Конфигурация спящего режима сохранена: {sleep_config_file}")
                                                                               ^
security/microservices/put_to_sleep.py:88:1: W293 blank line contains whitespace
        
^
security/microservices/put_to_sleep.py:90:1: W293 blank line contains whitespace
        
^
security/microservices/put_to_sleep.py:94:1: W293 blank line contains whitespace
    
^
security/microservices/put_to_sleep.py:105:1: E302 expected 2 blank lines, found 1
def main():
^
security/microservices/put_to_sleep.py:111:1: W293 blank line contains whitespace
    
^
security/microservices/put_to_sleep.py:115:1: W293 blank line contains whitespace
        
^
security/microservices/put_to_sleep.py:118:80: E501 line too long (81 > 79 characters)
            print("💤 Системы будут автоматически пробуждаться при необходимости")
                                                                               ^
security/microservices/put_to_sleep.py:119:80: E501 line too long (86 > 79 characters)
            print("🔧 Для ручного пробуждения используйте: python3 wake_up_systems.py")
                                                                               ^
security/microservices/put_to_sleep.py:123:1: W293 blank line contains whitespace
            
^
security/microservices/put_to_sleep.py:130:1: W293 blank line contains whitespace
    
^
security/microservices/put_to_sleep.py:133:1: E305 expected 2 blank lines after class or function definition, found 1
if __name__ == "__main__":
^
security/microservices/put_to_sleep.py:134:17: W292 no newline at end of file
    exit(main())                ^
security/microservices/rate_limiter.py:7:80: E501 line too long (104 > 79 characters)
"""
RateLimiter - Интеллектуальный ограничитель скорости запросов
function_83: Защита от DDoS атак и злоупотреблений

Этот модуль предоставляет продвинутую систему ограничения скорости запросов для AI системы безопасности,
включающую:
- Множественные алгоритмы rate limiting (Token Bucket, Sliding Window, Fixed Window)
- Интеллектуальное определение аномальных паттернов трафика
- Адаптивные лимиты на основе поведения пользователей
- ML-анализ для выявления DDoS атак
- Интеграция с системой мониторинга и алертинга
- Поддержка различных типов лимитов (per IP, per user, per endpoint)
- Автоматическое обучение и адаптация лимитов
- Детальное логирование и аудит всех операций
- Интеграция с внешними системами мониторинга (Prometheus, Grafana)
- Поддержка различных протоколов и API endpoints

Основные возможности:
1. Интеллектуальное ограничение скорости запросов
2. Автоматическое обнаружение и блокировка аномального трафика
3. ML-оптимизация лимитов на основе исторических данных
4. Интеграция с системой мониторинга для отслеживания метрик
5. Поддержка различных стратегий rate limiting
6. Адаптивные лимиты на основе контекста и поведения
7. Детальное логирование и аудит всех операций
8. Интеграция с внешними системами мониторинга
9. Поддержка различных типов пользователей и ролей
10. Автоматическое восстановление после сбоев

Технические детали:
- Использует asyncio для высокопроизводительной асинхронной обработки
- Применяет ML алгоритмы для анализа трафика
- Интегрирует Redis для кэширования состояний лимитов
- Использует SQLAlchemy для работы с базой данных
- Применяет Pydantic для валидации данных
- Интегрирует Prometheus для метрик
- Использует Celery для асинхронных задач
- Применяет nginx для reverse proxy
- Интегрирует ELK stack для логирования

Автор: ALADDIN Security System
Версия: 2.0
Дата: 2025-01-27
Лицензия: MIT
"""
   
                                                             
             ^
security/microservices/rate_limiter.py:9:80: E501 line too long (84 > 79 characters)
"""
RateLimiter - Интеллектуальный ограничитель скорости запросов
function_83: Защита от DDoS атак и злоупотреблений

Этот модуль предоставляет продвинутую систему ограничения скорости запросов для AI системы безопасности,
включающую:
- Множественные алгоритмы rate limiting (Token Bucket, Sliding Window, Fixed Window)
- Интеллектуальное определение аномальных паттернов трафика
- Адаптивные лимиты на основе поведения пользователей
- ML-анализ для выявления DDoS атак
- Интеграция с системой мониторинга и алертинга
- Поддержка различных типов лимитов (per IP, per user, per endpoint)
- Автоматическое обучение и адаптация лимитов
- Детальное логирование и аудит всех операций
- Интеграция с внешними системами мониторинга (Prometheus, Grafana)
- Поддержка различных протоколов и API endpoints

Основные возможности:
1. Интеллектуальное ограничение скорости запросов
2. Автоматическое обнаружение и блокировка аномального трафика
3. ML-оптимизация лимитов на основе исторических данных
4. Интеграция с системой мониторинга для отслеживания метрик
5. Поддержка различных стратегий rate limiting
6. Адаптивные лимиты на основе контекста и поведения
7. Детальное логирование и аудит всех операций
8. Интеграция с внешними системами мониторинга
9. Поддержка различных типов пользователей и ролей
10. Автоматическое восстановление после сбоев

Технические детали:
- Использует asyncio для высокопроизводительной асинхронной обработки
- Применяет ML алгоритмы для анализа трафика
- Интегрирует Redis для кэширования состояний лимитов
- Использует SQLAlchemy для работы с базой данных
- Применяет Pydantic для валидации данных
- Интегрирует Prometheus для метрик
- Использует Celery для асинхронных задач
- Применяет nginx для reverse proxy
- Интегрирует ELK stack для логирования

Автор: ALADDIN Security System
Версия: 2.0
Дата: 2025-01-27
Лицензия: MIT
"""
   
                                                             
             ^
security/microservices/rate_limiter.py:65:80: E501 line too long (86 > 79 characters)
from sqlalchemy import create_engine, Column, String, Integer, DateTime, Boolean, JSON
                                                                               ^
security/microservices/rate_limiter.py:77:80: E501 line too long (93 > 79 characters)
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))
                                                                               ^
security/microservices/rate_limiter.py:79:1: F401 'core.base.CoreBase' imported but unused
from core.base import CoreBase
^
security/microservices/rate_limiter.py:79:1: E402 module level import not at top of file
from core.base import CoreBase
^
security/microservices/rate_limiter.py:80:1: F401 'core.service_base.ServiceBase' imported but unused
from core.service_base import ServiceBase
^
security/microservices/rate_limiter.py:80:1: E402 module level import not at top of file
from core.service_base import ServiceBase
^
security/microservices/rate_limiter.py:81:1: E402 module level import not at top of file
from core.security_base import SecurityBase
^
security/microservices/rate_limiter.py:82:1: F401 'core.database.DatabaseManager' imported but unused
from core.database import DatabaseManager
^
security/microservices/rate_limiter.py:82:1: E402 module level import not at top of file
from core.database import DatabaseManager
^
security/microservices/rate_limiter.py:83:1: F401 'core.configuration.ConfigurationManager' imported but unused
from core.configuration import ConfigurationManager
^
security/microservices/rate_limiter.py:83:1: E402 module level import not at top of file
from core.configuration import ConfigurationManager
^
security/microservices/rate_limiter.py:90:80: E501 line too long (125 > 79 characters)
REQUEST_COUNT = Counter('rate_limiter_requests_total', 'Total rate limiter requests', ['algorithm', 'client_type', 'status'])
                                                                               ^
security/microservices/rate_limiter.py:91:80: E501 line too long (132 > 79 characters)
REQUEST_DURATION = Histogram('rate_limiter_request_duration_seconds', 'Rate limiter request duration', ['algorithm', 'client_type'])
                                                                               ^
security/microservices/rate_limiter.py:92:80: E501 line too long (106 > 79 characters)
ACTIVE_LIMITS = Gauge('rate_limiter_active_limits', 'Active rate limits per client type', ['client_type'])
                                                                               ^
security/microservices/rate_limiter.py:93:80: E501 line too long (128 > 79 characters)
BLOCKED_REQUESTS = Counter('rate_limiter_blocked_requests_total', 'Blocked requests by rate limiter', ['reason', 'client_type'])
                                                                               ^
security/microservices/rate_limiter.py:94:80: E501 line too long (112 > 79 characters)
ML_ANOMALIES = Counter('rate_limiter_ml_anomalies_total', 'ML detected anomalies', ['anomaly_type', 'severity'])
                                                                               ^
security/microservices/rate_limiter.py:101:1: E303 too many blank lines (3)
class RateLimitRecord(Base):
^
security/microservices/rate_limiter.py:115:80: E501 line too long (84 > 79 characters)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
                                                                               ^
security/microservices/rate_limiter.py:120:1: E303 too many blank lines (3)
class RateLimitViolation(Base):
^
security/microservices/rate_limiter.py:144:80: E501 line too long (81 > 79 characters)
    client_type: str = Field(..., description="Тип клиента (ip, user, endpoint)")
                                                                               ^
security/microservices/rate_limiter.py:146:80: E501 line too long (87 > 79 characters)
    limit_value: int = Field(..., gt=0, description="Максимальное количество запросов")
                                                                               ^
security/microservices/rate_limiter.py:148:80: E501 line too long (80 > 79 characters)
    burst_limit: Optional[int] = Field(None, gt=0, description="Лимит всплеска")
                                                                               ^
security/microservices/rate_limiter.py:154:80: E501 line too long (80 > 79 characters)
        allowed = ['token_bucket', 'sliding_window', 'fixed_window', 'adaptive']
                                                                               ^
security/microservices/rate_limiter.py:161:1: E303 too many blank lines (3)
class RateLimitRequest(BaseModel):
^
security/microservices/rate_limiter.py:170:80: E501 line too long (95 > 79 characters)
    metadata: Dict[str, Any] = Field(default_factory=dict, description="Дополнительные данные")
                                                                               ^
security/microservices/rate_limiter.py:174:1: E303 too many blank lines (3)
class RateLimitResponse(BaseModel):
^
security/microservices/rate_limiter.py:179:80: E501 line too long (86 > 79 characters)
    retry_after: Optional[int] = Field(None, description="Время до следующей попытки")
                                                                               ^
security/microservices/rate_limiter.py:181:80: E501 line too long (95 > 79 characters)
    metadata: Dict[str, Any] = Field(default_factory=dict, description="Дополнительные данные")
                                                                               ^
security/microservices/rate_limiter.py:195:1: E303 too many blank lines (3)
class ClientType(Enum):
^
security/microservices/rate_limiter.py:204:1: E303 too many blank lines (3)
class ViolationSeverity(Enum):
^
security/microservices/rate_limiter.py:212:1: E302 expected 2 blank lines, found 1
@dataclass
^
security/microservices/rate_limiter.py:215:1: E304 blank lines found after function decorator
class TokenBucket:
^
security/microservices/rate_limiter.py:226:80: E501 line too long (86 > 79 characters)
        self.tokens = min(self.capacity, self.tokens + time_passed * self.refill_rate)
                                                                               ^
security/microservices/rate_limiter.py:238:80: E501 line too long (89 > 79 characters)
        current_tokens = min(self.capacity, self.tokens + time_passed * self.refill_rate)
                                                                               ^
security/microservices/rate_limiter.py:241:1: E302 expected 2 blank lines, found 1
@dataclass
^
security/microservices/rate_limiter.py:244:1: E304 blank lines found after function decorator
class SlidingWindow:
^
security/microservices/rate_limiter.py:270:1: E302 expected 2 blank lines, found 1
@dataclass
^
security/microservices/rate_limiter.py:273:1: E304 blank lines found after function decorator
class FixedWindow:
^
security/microservices/rate_limiter.py:320:80: E501 line too long (91 > 79 characters)
    def __init__(self, name: str = "RateLimiter", config: Optional[Dict[str, Any]] = None):
                                                                               ^
security/microservices/rate_limiter.py:358:80: E501 line too long (80 > 79 characters)
        self.violations: Dict[str, List[RateLimitViolation]] = defaultdict(list)
                                                                               ^
security/microservices/rate_limiter.py:400:80: E501 line too long (92 > 79 characters)
            self.cleanup_thread = threading.Thread(target=self._cleanup_worker, daemon=True)
                                                                               ^
security/microservices/rate_limiter.py:404:80: E501 line too long (86 > 79 characters)
                self.ml_thread = threading.Thread(target=self._ml_worker, daemon=True)
                                                                               ^
security/microservices/rate_limiter.py:448:80: E501 line too long (87 > 79 characters)
            database_url = self.config.get('database_url', 'sqlite:///rate_limiter.db')
                                                                               ^
security/microservices/rate_limiter.py:467:80: E501 line too long (80 > 79 characters)
            redis_url = self.config.get('redis_url', 'redis://localhost:6379/0')
                                                                               ^
security/microservices/rate_limiter.py:468:80: E501 line too long (80 > 79 characters)
            self.redis_client = redis.from_url(redis_url, decode_responses=True)
                                                                               ^
security/microservices/rate_limiter.py:497:80: E501 line too long (85 > 79 characters)
    async def check_rate_limit(self, request: RateLimitRequest) -> RateLimitResponse:
                                                                               ^
security/microservices/rate_limiter.py:518:80: E501 line too long (80 > 79 characters)
                if not await self._is_circuit_breaker_closed(request.client_id):
                                                                               ^
security/microservices/rate_limiter.py:522:80: E501 line too long (99 > 79 characters)
                        reset_time=datetime.utcnow() + timedelta(seconds=limit_config.window_size),
                                                                               ^
security/microservices/rate_limiter.py:533:80: E501 line too long (94 > 79 characters)
                    ML_ANOMALIES.labels(anomaly_type="request_pattern", severity="high").inc()
                                                                               ^
security/microservices/rate_limiter.py:536:80: E501 line too long (96 > 79 characters)
            allowed, remaining, reset_time = await self._apply_rate_limit(request, limit_config)
                                                                               ^
security/microservices/rate_limiter.py:577:80: E501 line too long (84 > 79 characters)
                    "is_anomaly": is_anomaly if self.config["ml_enabled"] else False
                                                                               ^
security/microservices/rate_limiter.py:591:80: E501 line too long (84 > 79 characters)
    async def _get_limit_config(self, request: RateLimitRequest) -> RateLimitConfig:
                                                                               ^
security/microservices/rate_limiter.py:594:80: E501 line too long (82 > 79 characters)
        cache_key = f"rate_limit_config:{request.client_id}:{request.client_type}"
                                                                               ^
security/microservices/rate_limiter.py:647:80: E501 line too long (120 > 79 characters)
    async def _apply_rate_limit(self, request: RateLimitRequest, config: RateLimitConfig) -> Tuple[bool, int, datetime]:
                                                                               ^
security/microservices/rate_limiter.py:745:17: E131 continuation line unaligned for hanging indent
                len(request.request_metadata) if request.request_metadata else 0
                ^
security/microservices/rate_limiter.py:745:80: E501 line too long (80 > 79 characters)
                len(request.request_metadata) if request.request_metadata else 0
                                                                               ^
security/microservices/rate_limiter.py:751:80: E501 line too long (87 > 79 characters)
            ip_hash = int(hashlib.md5(request.ip_address.encode()).hexdigest()[:8], 16)
                                                                               ^
security/microservices/rate_limiter.py:763:80: E501 line too long (107 > 79 characters)
    async def _record_violation(self, request: RateLimitRequest, config: RateLimitConfig, limiter) -> None:
                                                                               ^
security/microservices/rate_limiter.py:797:80: E501 line too long (93 > 79 characters)
    def _calculate_severity(self, request: RateLimitRequest, config: RateLimitConfig) -> str:
                                                                               ^
security/microservices/rate_limiter.py:857:80: E501 line too long (83 > 79 characters)
    async def _update_circuit_breaker(self, client_id: str, success: bool) -> None:
                                                                               ^
security/microservices/rate_limiter.py:893:80: E501 line too long (82 > 79 characters)
                            if current_time - limiter.last_refill > 3600:  # 1 час
                                                                               ^
security/microservices/rate_limiter.py:928:80: E501 line too long (86 > 79 characters)
                        for violation in violations[-100:]:  # Последние 100 нарушений
                                                                               ^
security/microservices/rate_limiter.py:929:80: E501 line too long (87 > 79 characters)
                            features = self._extract_features_from_violation(violation)
                                                                               ^
security/microservices/rate_limiter.py:950:80: E501 line too long (93 > 79 characters)
    def _extract_features_from_violation(self, violation: RateLimitViolation) -> List[float]:
                                                                               ^
security/microservices/rate_limiter.py:967:17: E131 continuation line unaligned for hanging indent
                len(violation.request_metadata) if violation.request_metadata else 0
                ^
security/microservices/rate_limiter.py:967:80: E501 line too long (84 > 79 characters)
                len(violation.request_metadata) if violation.request_metadata else 0
                                                                               ^
security/microservices/rate_limiter.py:972:80: E501 line too long (89 > 79 characters)
            ip_hash = int(hashlib.md5(violation.ip_address.encode()).hexdigest()[:8], 16)
                                                                               ^
security/microservices/rate_limiter.py:988:80: E501 line too long (82 > 79 characters)
                    recent_violations = violations[-10:]  # Последние 10 нарушений
                                                                               ^
security/microservices/rate_limiter.py:1016:80: E501 line too long (82 > 79 characters)
                "total_violations": sum(len(v) for v in self.violations.values()),
                                                                               ^
security/microservices/rate_limiter.py:1039:80: E501 line too long (112 > 79 characters)
                    keys_to_remove = [key for key in self.rate_limits.keys() if key.startswith(f"{client_id}:")]
                                                                               ^
security/microservices/rate_limiter.py:1054:80: E501 line too long (106 > 79 characters)
                self.logger.info(f"Лимиты сброшены для {'всех клиентов' if not client_id else client_id}")
                                                                               ^
security/microservices/rate_limiter.py:1062:1: F401 'fastapi.Depends' imported but unused
from fastapi import FastAPI, HTTPException, Depends
^
security/microservices/rate_limiter.py:1062:1: E305 expected 2 blank lines after class or function definition, found 1
from fastapi import FastAPI, HTTPException, Depends
^
security/microservices/rate_limiter.py:1062:1: E402 module level import not at top of file
from fastapi import FastAPI, HTTPException, Depends
^
security/microservices/rate_limiter.py:1063:1: E402 module level import not at top of file
from fastapi.middleware.cors import CORSMiddleware
^
security/microservices/rate_limiter.py:1064:1: E402 module level import not at top of file
import uvicorn
^
security/microservices/rate_limiter.py:1080:1: E302 expected 2 blank lines, found 1
@app.on_event("startup")
^
security/microservices/rate_limiter.py:1087:1: E302 expected 2 blank lines, found 1
@app.on_event("shutdown")
^
security/microservices/rate_limiter.py:1094:1: E302 expected 2 blank lines, found 1
@app.get("/health")
^
security/microservices/rate_limiter.py:1099:1: E302 expected 2 blank lines, found 1
@app.get("/status")
^
security/microservices/rate_limiter.py:1103:80: E501 line too long (82 > 79 characters)
        raise HTTPException(status_code=503, detail="RateLimiter not initialized")
                                                                               ^
security/microservices/rate_limiter.py:1107:1: E302 expected 2 blank lines, found 1
@app.post("/check")
^
security/microservices/rate_limiter.py:1111:80: E501 line too long (82 > 79 characters)
        raise HTTPException(status_code=503, detail="RateLimiter not initialized")
                                                                               ^
security/microservices/rate_limiter.py:1115:1: E302 expected 2 blank lines, found 1
@app.post("/reset")
^
security/microservices/rate_limiter.py:1119:80: E501 line too long (82 > 79 characters)
        raise HTTPException(status_code=503, detail="RateLimiter not initialized")
                                                                               ^
security/microservices/rate_limiter.py:1127:1: E302 expected 2 blank lines, found 1
@app.get("/metrics")
^
security/microservices/rate_limiter.py:1151:1: E305 expected 2 blank lines after class or function definition, found 1
if __name__ == "__main__":
^
security/microservices/rate_limiter.py:1155:1: E302 expected 2 blank lines, found 1
async def test_rate_limiter():
^
security/microservices/rate_limiter.py:1187:80: E501 line too long (103 > 79 characters)
            print(f"✅ Тест 2.{i+1} - Запрос {i+1}: {response.allowed}, осталось: {response.remaining}")
                                                                               ^
security/microservices/rate_limiter.py:1197:80: E501 line too long (94 > 79 characters)
        print(f"✅ Тест 3 - Превышение лимита: {response.allowed}, причина: {response.reason}")
                                                                               ^
security/microservices/rate_limiter.py:1201:80: E501 line too long (100 > 79 characters)
        print(f"✅ Тест 4 - Статус: {status['status']}, активных лимитов: {status['active_limits']}")
                                                                               ^
security/microservices/redis_cache_manager.py:62:80: E501 line too long (85 > 79 characters)
        data['created_at'] = self.created_at.isoformat() if self.created_at else None
                                                                               ^
security/microservices/redis_cache_manager.py:63:80: E501 line too long (85 > 79 characters)
        data['expires_at'] = self.expires_at.isoformat() if self.expires_at else None
                                                                               ^
security/microservices/redis_cache_manager.py:64:80: E501 line too long (94 > 79 characters)
        data['last_accessed'] = self.last_accessed.isoformat() if self.last_accessed else None
                                                                               ^
security/microservices/redis_cache_manager.py:98:80: E501 line too long (91 > 79 characters)
        data['last_updated'] = self.last_updated.isoformat() if self.last_updated else None
                                                                               ^
security/microservices/redis_cache_manager.py:161:80: E501 line too long (84 > 79 characters)
            self.log_activity("Redis Cache Manager успешно инициализирован", "info")
                                                                               ^
security/microservices/redis_cache_manager.py:165:80: E501 line too long (88 > 79 characters)
            self.log_activity(f"Ошибка инициализации Redis Cache Manager: {e}", "error")
                                                                               ^
security/microservices/redis_cache_manager.py:190:80: E501 line too long (84 > 79 characters)
            self.log_activity(f"Ошибка остановки Redis Cache Manager: {e}", "error")
                                                                               ^
security/microservices/redis_cache_manager.py:311:80: E501 line too long (83 > 79 characters)
            self.log_activity(f"Ошибка проверки существования {key}: {e}", "error")
                                                                               ^
security/microservices/redis_cache_manager.py:338:80: E501 line too long (81 > 79 characters)
                    keys = [key for key in keys if fnmatch.fnmatch(key, pattern)]
                                                                               ^
security/microservices/redis_cache_manager.py:363:80: E501 line too long (82 > 79 characters)
            self.log_activity(f"Ошибка получения информации о кэше: {e}", "error")
                                                                               ^
security/microservices/redis_cache_manager.py:488:80: E501 line too long (94 > 79 characters)
            os.makedirs(os.path.dirname(self.cache_config["persistence_path"]), exist_ok=True)
                                                                               ^
security/microservices/redis_cache_manager.py:490:80: E501 line too long (89 > 79 characters)
            with open(self.cache_config["persistence_path"], 'w', encoding='utf-8') as f:
                                                                               ^
security/microservices/redis_cache_manager.py:508:80: E501 line too long (89 > 79 characters)
            with open(self.cache_config["persistence_path"], 'r', encoding='utf-8') as f:
                                                                               ^
security/microservices/redis_cache_manager.py:517:80: E501 line too long (89 > 79 characters)
                            created_at = datetime.fromisoformat(entry_data["created_at"])
                                                                               ^
security/microservices/redis_cache_manager.py:521:80: E501 line too long (89 > 79 characters)
                            expires_at = datetime.fromisoformat(entry_data["expires_at"])
                                                                               ^
security/microservices/redis_cache_manager.py:525:80: E501 line too long (95 > 79 characters)
                            last_accessed = datetime.fromisoformat(entry_data["last_accessed"])
                                                                               ^
security/microservices/redis_cache_manager.py:543:80: E501 line too long (88 > 79 characters)
                        self.log_activity(f"Ошибка загрузки записи {key}: {e}", "error")
                                                                               ^
security/microservices/safe_function_manager_integration.py:5:80: E501 line too long (83 > 79 characters)
"""
SafeFunctionManager Integration - Интеграция всех микросервисов
Интеграция RateLimiter, CircuitBreaker и UserInterfaceManager с SafeFunctionManager

Этот модуль обеспечивает интеграцию всех созданных микросервисов с центральной системой
управления безопасными функциями, включая:
- Регистрацию всех компонентов в SafeFunctionManager
- Управление жизненным циклом микросервисов
- Мониторинг состояния всех компонентов
- Интеграцию с системой безопасности
- Автоматическое тестирование интеграции
- Детальное логирование всех операций

Автор: ALADDIN Security System
Версия: 2.0
Дата: 2025-01-27
Лицензия: MIT
"""
   
                                                               
           ^
security/microservices/safe_function_manager_integration.py:7:80: E501 line too long (87 > 79 characters)
"""
SafeFunctionManager Integration - Интеграция всех микросервисов
Интеграция RateLimiter, CircuitBreaker и UserInterfaceManager с SafeFunctionManager

Этот модуль обеспечивает интеграцию всех созданных микросервисов с центральной системой
управления безопасными функциями, включая:
- Регистрацию всех компонентов в SafeFunctionManager
- Управление жизненным циклом микросервисов
- Мониторинг состояния всех компонентов
- Интеграцию с системой безопасности
- Автоматическое тестирование интеграции
- Детальное логирование всех операций

Автор: ALADDIN Security System
Версия: 2.0
Дата: 2025-01-27
Лицензия: MIT
"""
   
                                                               
           ^
security/microservices/safe_function_manager_integration.py:25:1: F401 'json' imported but unused
import json
^
security/microservices/safe_function_manager_integration.py:27:1: F401 'typing.Union' imported but unused
from typing import Dict, List, Optional, Any, Union
^
security/microservices/safe_function_manager_integration.py:33:80: E501 line too long (93 > 79 characters)
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))
                                                                               ^
security/microservices/safe_function_manager_integration.py:35:1: F401 'core.base.CoreBase' imported but unused
from core.base import CoreBase
^
security/microservices/safe_function_manager_integration.py:35:1: E402 module level import not at top of file
from core.base import CoreBase
^
security/microservices/safe_function_manager_integration.py:36:1: F401 'core.service_base.ServiceBase' imported but unused
from core.service_base import ServiceBase
^
security/microservices/safe_function_manager_integration.py:36:1: E402 module level import not at top of file
from core.service_base import ServiceBase
^
security/microservices/safe_function_manager_integration.py:37:1: E402 module level import not at top of file
from core.security_base import SecurityBase
^
security/microservices/safe_function_manager_integration.py:38:1: F401 'core.database.Database' imported but unused
from core.database import Database
^
security/microservices/safe_function_manager_integration.py:38:1: E402 module level import not at top of file
from core.database import Database
^
security/microservices/safe_function_manager_integration.py:39:1: F401 'core.configuration.Configuration' imported but unused
from core.configuration import Configuration
^
security/microservices/safe_function_manager_integration.py:39:1: E402 module level import not at top of file
from core.configuration import Configuration
^
security/microservices/safe_function_manager_integration.py:42:1: F401 'rate_limiter.RateLimitResponse' imported but unused
from rate_limiter import RateLimiter, RateLimitRequest, RateLimitResponse
^
security/microservices/safe_function_manager_integration.py:42:1: E402 module level import not at top of file
from rate_limiter import RateLimiter, RateLimitRequest, RateLimitResponse
^
security/microservices/safe_function_manager_integration.py:43:1: F401 'circuit_breaker.CircuitBreakerResponse' imported but unused
from circuit_breaker import CircuitBreaker, CircuitBreakerRequest, CircuitBreakerResponse
^
security/microservices/safe_function_manager_integration.py:43:1: E402 module level import not at top of file
from circuit_breaker import CircuitBreaker, CircuitBreakerRequest, CircuitBreakerResponse
^
security/microservices/safe_function_manager_integration.py:43:80: E501 line too long (89 > 79 characters)
from circuit_breaker import CircuitBreaker, CircuitBreakerRequest, CircuitBreakerResponse
                                                                               ^
security/microservices/safe_function_manager_integration.py:44:1: F401 'user_interface_manager.InterfaceResponse' imported but unused
from user_interface_manager import UserInterfaceManager, InterfaceRequest, InterfaceResponse
^
security/microservices/safe_function_manager_integration.py:44:1: E402 module level import not at top of file
from user_interface_manager import UserInterfaceManager, InterfaceRequest, InterfaceResponse
^
security/microservices/safe_function_manager_integration.py:44:80: E501 line too long (92 > 79 characters)
from user_interface_manager import UserInterfaceManager, InterfaceRequest, InterfaceResponse
                                                                               ^
security/microservices/safe_function_manager_integration.py:50:1: E302 expected 2 blank lines, found 1
class SafeFunctionManagerIntegration(SecurityBase):
^
security/microservices/safe_function_manager_integration.py:53:1: W293 blank line contains whitespace
    """
    Интеграция всех микросервисов с SafeFunctionManager
    
    Обеспечивает:
    - Регистрацию компонентов
    - Управление жизненным циклом
    - Мониторинг состояния
    - Интеграцию с безопасностью
    """
^
security/microservices/safe_function_manager_integration.py:60:1: W293 blank line contains whitespace
    
^
security/microservices/safe_function_manager_integration.py:61:80: E501 line too long (110 > 79 characters)
    def __init__(self, name: str = "SafeFunctionManagerIntegration", config: Optional[Dict[str, Any]] = None):
                                                                               ^
security/microservices/safe_function_manager_integration.py:64:1: W293 blank line contains whitespace
        """
        Инициализация интеграции
        
        Args:
            name: Имя интеграции
            config: Конфигурация
        """
^
security/microservices/safe_function_manager_integration.py:70:1: W293 blank line contains whitespace
        
^
security/microservices/safe_function_manager_integration.py:82:1: W293 blank line contains whitespace
        
^
security/microservices/safe_function_manager_integration.py:85:1: W293 blank line contains whitespace
        
^
security/microservices/safe_function_manager_integration.py:90:1: W293 blank line contains whitespace
        
^
security/microservices/safe_function_manager_integration.py:93:80: E501 line too long (85 > 79 characters)
            "rate_limiter": {"status": "stopped", "last_check": None, "error": None},
                                                                               ^
security/microservices/safe_function_manager_integration.py:94:80: E501 line too long (88 > 79 characters)
            "circuit_breaker": {"status": "stopped", "last_check": None, "error": None},
                                                                               ^
security/microservices/safe_function_manager_integration.py:95:80: E501 line too long (94 > 79 characters)
            "user_interface_manager": {"status": "stopped", "last_check": None, "error": None}
                                                                               ^
security/microservices/safe_function_manager_integration.py:97:1: W293 blank line contains whitespace
        
^
security/microservices/safe_function_manager_integration.py:108:1: W293 blank line contains whitespace
        
^
security/microservices/safe_function_manager_integration.py:112:1: W293 blank line contains whitespace
        
^
security/microservices/safe_function_manager_integration.py:115:1: W293 blank line contains whitespace
        
^
security/microservices/safe_function_manager_integration.py:116:80: E501 line too long (82 > 79 characters)
        self.logger.info(f"SafeFunctionManagerIntegration {name} инициализирован")
                                                                               ^
security/microservices/safe_function_manager_integration.py:117:1: W293 blank line contains whitespace
    
^
security/microservices/safe_function_manager_integration.py:122:1: W293 blank line contains whitespace
            
^
security/microservices/safe_function_manager_integration.py:125:1: W293 blank line contains whitespace
            
^
security/microservices/safe_function_manager_integration.py:129:1: W293 blank line contains whitespace
            
^
security/microservices/safe_function_manager_integration.py:133:80: E501 line too long (106 > 79 characters)
                self.health_check_thread = threading.Thread(target=self._health_check_worker, daemon=True)
                                                                               ^
security/microservices/safe_function_manager_integration.py:135:1: W293 blank line contains whitespace
            
^
security/microservices/safe_function_manager_integration.py:138:1: W293 blank line contains whitespace
            
^
security/microservices/safe_function_manager_integration.py:140:80: E501 line too long (84 > 79 characters)
            self.logger.error(f"Ошибка запуска SafeFunctionManagerIntegration: {e}")
                                                                               ^
security/microservices/safe_function_manager_integration.py:142:1: W293 blank line contains whitespace
    
^
security/microservices/safe_function_manager_integration.py:147:1: W293 blank line contains whitespace
            
^
security/microservices/safe_function_manager_integration.py:149:1: W293 blank line contains whitespace
            
^
security/microservices/safe_function_manager_integration.py:151:80: E501 line too long (80 > 79 characters)
            if self.health_check_thread and self.health_check_thread.is_alive():
                                                                               ^
security/microservices/safe_function_manager_integration.py:153:1: W293 blank line contains whitespace
            
^
security/microservices/safe_function_manager_integration.py:156:1: W293 blank line contains whitespace
            
^
security/microservices/safe_function_manager_integration.py:157:80: E501 line too long (81 > 79 characters)
            self.logger.info("SafeFunctionManagerIntegration успешно остановлен")
                                                                               ^
security/microservices/safe_function_manager_integration.py:159:1: W293 blank line contains whitespace
            
^
security/microservices/safe_function_manager_integration.py:161:80: E501 line too long (86 > 79 characters)
            self.logger.error(f"Ошибка остановки SafeFunctionManagerIntegration: {e}")
                                                                               ^
security/microservices/safe_function_manager_integration.py:163:1: W293 blank line contains whitespace
    
^
security/microservices/safe_function_manager_integration.py:171:1: W293 blank line contains whitespace
            
^
security/microservices/safe_function_manager_integration.py:174:80: E501 line too long (81 > 79 characters)
                self.circuit_breaker = CircuitBreaker("IntegratedCircuitBreaker")
                                                                               ^
security/microservices/safe_function_manager_integration.py:176:1: W293 blank line contains whitespace
            
^
security/microservices/safe_function_manager_integration.py:179:80: E501 line too long (100 > 79 characters)
                self.user_interface_manager = UserInterfaceManager("IntegratedUserInterfaceManager")
                                                                               ^
security/microservices/safe_function_manager_integration.py:181:1: W293 blank line contains whitespace
            
^
security/microservices/safe_function_manager_integration.py:185:1: W293 blank line contains whitespace
    
^
security/microservices/safe_function_manager_integration.py:197:80: E501 line too long (86 > 79 characters)
                    self.component_status["rate_limiter"]["error"] = "Failed to start"
                                                                               ^
security/microservices/safe_function_manager_integration.py:199:1: W293 blank line contains whitespace
            
^
security/microservices/safe_function_manager_integration.py:204:80: E501 line too long (82 > 79 characters)
                    self.component_status["circuit_breaker"]["status"] = "running"
                                                                               ^
security/microservices/safe_function_manager_integration.py:207:80: E501 line too long (80 > 79 characters)
                    self.component_status["circuit_breaker"]["status"] = "error"
                                                                               ^
security/microservices/safe_function_manager_integration.py:208:80: E501 line too long (89 > 79 characters)
                    self.component_status["circuit_breaker"]["error"] = "Failed to start"
                                                                               ^
security/microservices/safe_function_manager_integration.py:210:1: W293 blank line contains whitespace
            
^
security/microservices/safe_function_manager_integration.py:215:80: E501 line too long (89 > 79 characters)
                    self.component_status["user_interface_manager"]["status"] = "running"
                                                                               ^
security/microservices/safe_function_manager_integration.py:218:80: E501 line too long (87 > 79 characters)
                    self.component_status["user_interface_manager"]["status"] = "error"
                                                                               ^
security/microservices/safe_function_manager_integration.py:219:80: E501 line too long (96 > 79 characters)
                    self.component_status["user_interface_manager"]["error"] = "Failed to start"
                                                                               ^
security/microservices/safe_function_manager_integration.py:221:1: W293 blank line contains whitespace
            
^
security/microservices/safe_function_manager_integration.py:225:1: W293 blank line contains whitespace
    
^
security/microservices/safe_function_manager_integration.py:235:1: W293 blank line contains whitespace
            
^
security/microservices/safe_function_manager_integration.py:240:80: E501 line too long (82 > 79 characters)
                    self.component_status["circuit_breaker"]["status"] = "stopped"
                                                                               ^
security/microservices/safe_function_manager_integration.py:242:1: W293 blank line contains whitespace
            
^
security/microservices/safe_function_manager_integration.py:247:80: E501 line too long (89 > 79 characters)
                    self.component_status["user_interface_manager"]["status"] = "stopped"
                                                                               ^
security/microservices/safe_function_manager_integration.py:249:1: W293 blank line contains whitespace
            
^
security/microservices/safe_function_manager_integration.py:252:1: W293 blank line contains whitespace
    
^
security/microservices/safe_function_manager_integration.py:258:1: W293 blank line contains whitespace
                
^
security/microservices/safe_function_manager_integration.py:263:80: E501 line too long (90 > 79 characters)
                        self.component_status["rate_limiter"]["status"] = status["status"]
                                                                               ^
security/microservices/safe_function_manager_integration.py:264:80: E501 line too long (95 > 79 characters)
                        self.component_status["rate_limiter"]["last_check"] = datetime.utcnow()
                                                                               ^
security/microservices/safe_function_manager_integration.py:267:80: E501 line too long (81 > 79 characters)
                        self.component_status["rate_limiter"]["status"] = "error"
                                                                               ^
security/microservices/safe_function_manager_integration.py:270:1: W293 blank line contains whitespace
                
^
security/microservices/safe_function_manager_integration.py:275:80: E501 line too long (93 > 79 characters)
                        self.component_status["circuit_breaker"]["status"] = status["status"]
                                                                               ^
security/microservices/safe_function_manager_integration.py:276:80: E501 line too long (98 > 79 characters)
                        self.component_status["circuit_breaker"]["last_check"] = datetime.utcnow()
                                                                               ^
security/microservices/safe_function_manager_integration.py:277:80: E501 line too long (80 > 79 characters)
                        self.component_status["circuit_breaker"]["error"] = None
                                                                               ^
security/microservices/safe_function_manager_integration.py:279:80: E501 line too long (84 > 79 characters)
                        self.component_status["circuit_breaker"]["status"] = "error"
                                                                               ^
security/microservices/safe_function_manager_integration.py:280:80: E501 line too long (82 > 79 characters)
                        self.component_status["circuit_breaker"]["error"] = str(e)
                                                                               ^
security/microservices/safe_function_manager_integration.py:281:80: E501 line too long (81 > 79 characters)
                        self.logger.error(f"Ошибка проверки CircuitBreaker: {e}")
                                                                               ^
security/microservices/safe_function_manager_integration.py:282:1: W293 blank line contains whitespace
                
^
security/microservices/safe_function_manager_integration.py:287:80: E501 line too long (100 > 79 characters)
                        self.component_status["user_interface_manager"]["status"] = status["status"]
                                                                               ^
security/microservices/safe_function_manager_integration.py:288:80: E501 line too long (105 > 79 characters)
                        self.component_status["user_interface_manager"]["last_check"] = datetime.utcnow()
                                                                               ^
security/microservices/safe_function_manager_integration.py:289:80: E501 line too long (87 > 79 characters)
                        self.component_status["user_interface_manager"]["error"] = None
                                                                               ^
security/microservices/safe_function_manager_integration.py:291:80: E501 line too long (91 > 79 characters)
                        self.component_status["user_interface_manager"]["status"] = "error"
                                                                               ^
security/microservices/safe_function_manager_integration.py:292:80: E501 line too long (89 > 79 characters)
                        self.component_status["user_interface_manager"]["error"] = str(e)
                                                                               ^
security/microservices/safe_function_manager_integration.py:293:80: E501 line too long (87 > 79 characters)
                        self.logger.error(f"Ошибка проверки UserInterfaceManager: {e}")
                                                                               ^
security/microservices/safe_function_manager_integration.py:294:1: W293 blank line contains whitespace
                
^
security/microservices/safe_function_manager_integration.py:297:1: W293 blank line contains whitespace
    
^
security/microservices/safe_function_manager_integration.py:301:1: W293 blank line contains whitespace
        """
        Обработка запроса через все компоненты
        
        Args:
            request: Запрос для обработки
            
        Returns:
            Dict[str, Any]: Результат обработки
        """
^
security/microservices/safe_function_manager_integration.py:304:1: W293 blank line contains whitespace
        """
        Обработка запроса через все компоненты
        
        Args:
            request: Запрос для обработки
            
        Returns:
            Dict[str, Any]: Результат обработки
        """
^
security/microservices/safe_function_manager_integration.py:309:1: W293 blank line contains whitespace
        
^
security/microservices/safe_function_manager_integration.py:313:1: W293 blank line contains whitespace
            
^
security/microservices/safe_function_manager_integration.py:315:80: E501 line too long (98 > 79 characters)
            if self.rate_limiter and self.component_status["rate_limiter"]["status"] == "running":
                                                                               ^
security/microservices/safe_function_manager_integration.py:325:1: W293 blank line contains whitespace
                
^
security/microservices/safe_function_manager_integration.py:326:80: E501 line too long (98 > 79 characters)
                rate_limit_response = await self.rate_limiter.check_rate_limit(rate_limit_request)
                                                                               ^
security/microservices/safe_function_manager_integration.py:327:1: W293 blank line contains whitespace
                
^
security/microservices/safe_function_manager_integration.py:331:1: W293 blank line contains whitespace
                    
^
security/microservices/safe_function_manager_integration.py:339:1: W293 blank line contains whitespace
            
^
security/microservices/safe_function_manager_integration.py:341:80: E501 line too long (104 > 79 characters)
            if self.circuit_breaker and self.component_status["circuit_breaker"]["status"] == "running":
                                                                               ^
security/microservices/safe_function_manager_integration.py:351:1: W293 blank line contains whitespace
                
^
security/microservices/safe_function_manager_integration.py:355:80: E501 line too long (81 > 79 characters)
                    return {"result": "success", "data": request.get("data", {})}
                                                                               ^
security/microservices/safe_function_manager_integration.py:356:1: W293 blank line contains whitespace
                
^
security/microservices/safe_function_manager_integration.py:357:80: E501 line too long (118 > 79 characters)
                circuit_breaker_response = await self.circuit_breaker.execute(circuit_breaker_request, test_operation)
                                                                               ^
security/microservices/safe_function_manager_integration.py:358:1: W293 blank line contains whitespace
                
^
security/microservices/safe_function_manager_integration.py:362:1: W293 blank line contains whitespace
                    
^
security/microservices/safe_function_manager_integration.py:367:80: E501 line too long (80 > 79 characters)
                        "circuit_state": circuit_breaker_response.circuit_state,
                                                                               ^
security/microservices/safe_function_manager_integration.py:370:1: W293 blank line contains whitespace
            
^
security/microservices/safe_function_manager_integration.py:372:80: E501 line too long (118 > 79 characters)
            if self.user_interface_manager and self.component_status["user_interface_manager"]["status"] == "running":
                                                                               ^
security/microservices/safe_function_manager_integration.py:384:1: W293 blank line contains whitespace
                
^
security/microservices/safe_function_manager_integration.py:385:80: E501 line too long (103 > 79 characters)
                interface_response = await self.user_interface_manager.get_interface(interface_request)
                                                                               ^
security/microservices/safe_function_manager_integration.py:386:1: W293 blank line contains whitespace
                
^
security/microservices/safe_function_manager_integration.py:394:1: W293 blank line contains whitespace
                
^
security/microservices/safe_function_manager_integration.py:397:1: W293 blank line contains whitespace
                
^
security/microservices/safe_function_manager_integration.py:400:80: E501 line too long (81 > 79 characters)
                request["user_preferences"] = interface_response.user_preferences
                                                                               ^
security/microservices/safe_function_manager_integration.py:402:1: W293 blank line contains whitespace
            
^
security/microservices/safe_function_manager_integration.py:406:1: W293 blank line contains whitespace
            
^
security/microservices/safe_function_manager_integration.py:413:1: W293 blank line contains whitespace
            
^
security/microservices/safe_function_manager_integration.py:416:1: W293 blank line contains whitespace
            
^
security/microservices/safe_function_manager_integration.py:420:1: W293 blank line contains whitespace
            
^
security/microservices/safe_function_manager_integration.py:427:1: W293 blank line contains whitespace
    
^
security/microservices/safe_function_manager_integration.py:431:1: W293 blank line contains whitespace
        
^
security/microservices/safe_function_manager_integration.py:434:1: W293 blank line contains whitespace
        
^
security/microservices/safe_function_manager_integration.py:437:1: W293 blank line contains whitespace
        
^
security/microservices/safe_function_manager_integration.py:438:80: E501 line too long (82 > 79 characters)
        if self.component_status["user_interface_manager"]["status"] == "running":
                                                                               ^
security/microservices/safe_function_manager_integration.py:440:1: W293 blank line contains whitespace
        
^
security/microservices/safe_function_manager_integration.py:442:1: W293 blank line contains whitespace
    
^
security/microservices/safe_function_manager_integration.py:454:80: E501 line too long (84 > 79 characters)
                    "enable_circuit_breaker": self.config["enable_circuit_breaker"],
                                                                               ^
security/microservices/safe_function_manager_integration.py:455:80: E501 line too long (98 > 79 characters)
                    "enable_user_interface_manager": self.config["enable_user_interface_manager"],
                                                                               ^
security/microservices/safe_function_manager_integration.py:459:1: W293 blank line contains whitespace
    
^
security/microservices/safe_function_manager_integration.py:468:1: W293 blank line contains whitespace
        
^
security/microservices/safe_function_manager_integration.py:479:1: W293 blank line contains whitespace
                    
^
security/microservices/safe_function_manager_integration.py:480:80: E501 line too long (85 > 79 characters)
                    response = await self.rate_limiter.check_rate_limit(test_request)
                                                                               ^
security/microservices/safe_function_manager_integration.py:481:80: E501 line too long (104 > 79 characters)
                    test_results["rate_limiter"]["status"] = "passed" if response.allowed else "limited"
                                                                               ^
security/microservices/safe_function_manager_integration.py:485:1: W293 blank line contains whitespace
            
^
security/microservices/safe_function_manager_integration.py:494:1: W293 blank line contains whitespace
                    
^
security/microservices/safe_function_manager_integration.py:497:1: W293 blank line contains whitespace
                    
^
security/microservices/safe_function_manager_integration.py:498:80: E501 line too long (95 > 79 characters)
                    response = await self.circuit_breaker.execute(test_request, test_operation)
                                                                               ^
security/microservices/safe_function_manager_integration.py:499:80: E501 line too long (107 > 79 characters)
                    test_results["circuit_breaker"]["status"] = "passed" if response.success else "blocked"
                                                                               ^
security/microservices/safe_function_manager_integration.py:503:1: W293 blank line contains whitespace
            
^
security/microservices/safe_function_manager_integration.py:513:1: W293 blank line contains whitespace
                    
^
security/microservices/safe_function_manager_integration.py:514:80: E501 line too long (92 > 79 characters)
                    response = await self.user_interface_manager.get_interface(test_request)
                                                                               ^
security/microservices/safe_function_manager_integration.py:515:80: E501 line too long (113 > 79 characters)
                    test_results["user_interface_manager"]["status"] = "passed" if response.success else "failed"
                                                                               ^
security/microservices/safe_function_manager_integration.py:519:1: W293 blank line contains whitespace
            
^
security/microservices/safe_function_manager_integration.py:533:1: W293 blank line contains whitespace
                
^
security/microservices/safe_function_manager_integration.py:535:80: E501 line too long (101 > 79 characters)
                test_results["integration"]["status"] = "passed" if response["success"] else "failed"
                                                                               ^
security/microservices/safe_function_manager_integration.py:539:1: W293 blank line contains whitespace
            
^
security/microservices/safe_function_manager_integration.py:541:1: W293 blank line contains whitespace
            
^
security/microservices/safe_function_manager_integration.py:547:1: E302 expected 2 blank lines, found 1
async def main():
^
security/microservices/safe_function_manager_integration.py:550:1: W293 blank line contains whitespace
    
^
security/microservices/safe_function_manager_integration.py:553:1: W293 blank line contains whitespace
    
^
security/microservices/safe_function_manager_integration.py:560:1: W293 blank line contains whitespace
        
^
security/microservices/safe_function_manager_integration.py:562:1: W293 blank line contains whitespace
        
^
security/microservices/safe_function_manager_integration.py:565:1: W293 blank line contains whitespace
        
^
security/microservices/safe_function_manager_integration.py:576:1: W293 blank line contains whitespace
        
^
security/microservices/safe_function_manager_integration.py:579:15: F541 f-string is missing placeholders
        print(f"\n📈 Статистика интеграции:")
              ^
security/microservices/safe_function_manager_integration.py:583:80: E501 line too long (94 > 79 characters)
        print(f"  - Заблокированных rate limiter: {status['stats']['rate_limited_requests']}")
                                                                               ^
security/microservices/safe_function_manager_integration.py:584:80: E501 line too long (98 > 79 characters)
        print(f"  - Заблокированных circuit breaker: {status['stats']['circuit_breaker_blocks']}")
                                                                               ^
security/microservices/safe_function_manager_integration.py:585:80: E501 line too long (93 > 79 characters)
        print(f"  - Сгенерированных интерфейсов: {status['stats']['interface_generations']}")
                                                                               ^
security/microservices/safe_function_manager_integration.py:586:1: W293 blank line contains whitespace
        
^
security/microservices/safe_function_manager_integration.py:587:80: E501 line too long (83 > 79 characters)
        print(f"\n🔧 Активные компоненты: {', '.join(status['active_components'])}")
                                                                               ^
security/microservices/safe_function_manager_integration.py:588:1: W293 blank line contains whitespace
        
^
security/microservices/safe_function_manager_integration.py:590:1: W293 blank line contains whitespace
        
^
security/microservices/safe_function_manager_integration.py:593:1: W293 blank line contains whitespace
    
^
security/microservices/safe_function_manager_integration.py:600:24: W292 no newline at end of file
    asyncio.run(main())                       ^
security/microservices/service_mesh_manager.py:108:80: E501 line too long (114 > 79 characters)
        data['created_at'] = self.created_at.isoformat() if self.created_at else None if self.created_at else None
                                                                               ^
security/microservices/service_mesh_manager.py:109:80: E501 line too long (91 > 79 characters)
        data['last_updated'] = self.last_updated.isoformat() if self.last_updated else None
                                                                               ^
security/microservices/service_mesh_manager.py:134:80: E501 line too long (85 > 79 characters)
        data['created_at'] = self.created_at.isoformat() if self.created_at else None
                                                                               ^
security/microservices/service_mesh_manager.py:158:80: E501 line too long (85 > 79 characters)
        data['created_at'] = self.created_at.isoformat() if self.created_at else None
                                                                               ^
security/microservices/service_mesh_manager.py:165:80: E501 line too long (98 > 79 characters)
    def __init__(self, name: str = "ServiceMeshManager", config: Optional[Dict[str, Any]] = None):
                                                                               ^
security/microservices/service_mesh_manager.py:241:80: E501 line too long (87 > 79 characters)
            self.log_activity(f"Ошибка инициализации ServiceMeshManager: {e}", "error")
                                                                               ^
security/microservices/service_mesh_manager.py:310:80: E501 line too long (89 > 79 characters)
            self.log_activity(f"Зарегистрировано {len(basic_services)} базовых сервисов")
                                                                               ^
security/microservices/service_mesh_manager.py:313:80: E501 line too long (83 > 79 characters)
            self.log_activity(f"Ошибка регистрации базовых сервисов: {e}", "error")
                                                                               ^
security/microservices/service_mesh_manager.py:338:80: E501 line too long (81 > 79 characters)
                self.log_activity(f"Сервис {service.service_id} зарегистрирован")
                                                                               ^
security/microservices/service_mesh_manager.py:342:80: E501 line too long (95 > 79 characters)
            self.log_activity(f"Ошибка регистрации сервиса {service.service_id}: {e}", "error")
                                                                               ^
security/microservices/service_mesh_manager.py:370:80: E501 line too long (82 > 79 characters)
                    self.log_activity(f"Сервис {service_id} не найден", "warning")
                                                                               ^
security/microservices/service_mesh_manager.py:374:80: E501 line too long (94 > 79 characters)
            self.log_activity(f"Ошибка отмены регистрации сервиса {service_id}: {e}", "error")
                                                                               ^
security/microservices/service_mesh_manager.py:384:80: E501 line too long (84 > 79 characters)
                "weights": [ep.weight for ep in self.service_endpoints[service_id]],
                                                                               ^
security/microservices/service_mesh_manager.py:393:80: E501 line too long (100 > 79 characters)
            self.log_activity(f"Ошибка инициализации балансировщика для {service_id}: {e}", "error")
                                                                               ^
security/microservices/service_mesh_manager.py:407:80: E501 line too long (101 > 79 characters)
            self.log_activity(f"Ошибка инициализации Circuit Breaker для {service_id}: {e}", "error")
                                                                               ^
security/microservices/service_mesh_manager.py:415:80: E501 line too long (92 > 79 characters)
        self.monitoring_thread = threading.Thread(target=self._monitoring_loop, daemon=True)
                                                                               ^
security/microservices/service_mesh_manager.py:445:80: E501 line too long (109 > 79 characters)
                    if last_check and (datetime.now() - last_check).seconds >= service.health_check_interval:
                                                                               ^
security/microservices/service_mesh_manager.py:449:80: E501 line too long (81 > 79 characters)
            self.log_activity(f"Ошибка проверки здоровья сервисов: {e}", "error")
                                                                               ^
security/microservices/service_mesh_manager.py:483:80: E501 line too long (93 > 79 characters)
            self.log_activity(f"Ошибка проверки здоровья сервиса {service_id}: {e}", "error")
                                                                               ^
security/microservices/service_mesh_manager.py:507:80: E501 line too long (93 > 79 characters)
                            metrics.get("total_response_time", 0) / metrics["requests_count"]
                                                                               ^
security/microservices/service_mesh_manager.py:513:80: E501 line too long (86 > 79 characters)
                            metrics["success_count"] / metrics["requests_count"] * 100
                                                                               ^
security/microservices/service_mesh_manager.py:519:80: E501 line too long (81 > 79 characters)
    def get_service_endpoint(self, service_id: str) -> Optional[ServiceEndpoint]:
                                                                               ^
security/microservices/service_mesh_manager.py:543:80: E501 line too long (81 > 79 characters)
                return self._round_robin_selection(service_id, healthy_endpoints)
                                                                               ^
security/microservices/service_mesh_manager.py:545:80: E501 line too long (87 > 79 characters)
                return self._least_connections_selection(service_id, healthy_endpoints)
                                                                               ^
security/microservices/service_mesh_manager.py:547:80: E501 line too long (90 > 79 characters)
                return self._weighted_round_robin_selection(service_id, healthy_endpoints)
                                                                               ^
security/microservices/service_mesh_manager.py:549:80: E501 line too long (89 > 79 characters)
                return self._least_response_time_selection(service_id, healthy_endpoints)
                                                                               ^
security/microservices/service_mesh_manager.py:556:80: E501 line too long (100 > 79 characters)
            self.log_activity(f"Ошибка получения конечной точки сервиса {service_id}: {e}", "error")
                                                                               ^
security/microservices/service_mesh_manager.py:559:80: E501 line too long (117 > 79 characters)
    def _round_robin_selection(self, service_id: str, endpoints: List[ServiceEndpoint]) -> Optional[ServiceEndpoint]:
                                                                               ^
security/microservices/service_mesh_manager.py:571:80: E501 line too long (90 > 79 characters)
            self.log_activity(f"Ошибка Round Robin выбора для {service_id}: {e}", "error")
                                                                               ^
security/microservices/service_mesh_manager.py:575:80: E501 line too long (100 > 79 characters)
                                     endpoints: List[ServiceEndpoint]) -> Optional[ServiceEndpoint]:
                                                                               ^
security/microservices/service_mesh_manager.py:592:80: E501 line too long (96 > 79 characters)
            self.log_activity(f"Ошибка Least Connections выбора для {service_id}: {e}", "error")
                                                                               ^
security/microservices/service_mesh_manager.py:596:80: E501 line too long (103 > 79 characters)
                                        endpoints: List[ServiceEndpoint]) -> Optional[ServiceEndpoint]:
                                                                               ^
security/microservices/service_mesh_manager.py:622:80: E501 line too long (99 > 79 characters)
            self.log_activity(f"Ошибка Weighted Round Robin выбора для {service_id}: {e}", "error")
                                                                               ^
security/microservices/service_mesh_manager.py:626:80: E501 line too long (102 > 79 characters)
                                       endpoints: List[ServiceEndpoint]) -> Optional[ServiceEndpoint]:
                                                                               ^
security/microservices/service_mesh_manager.py:642:80: E501 line too long (98 > 79 characters)
            self.log_activity(f"Ошибка Least Response Time выбора для {service_id}: {e}", "error")
                                                                               ^
security/microservices/service_mesh_manager.py:645:80: E501 line too long (95 > 79 characters)
    def _random_selection(self, endpoints: List[ServiceEndpoint]) -> Optional[ServiceEndpoint]:
                                                                               ^
security/microservices/service_mesh_manager.py:668:80: E501 line too long (91 > 79 characters)
                    time_since_failure = (datetime.now() - cb["last_failure_time"]).seconds
                                                                               ^
security/microservices/service_mesh_manager.py:679:80: E501 line too long (96 > 79 characters)
            self.log_activity(f"Ошибка проверки Circuit Breaker для {service_id}: {e}", "error")
                                                                               ^
security/microservices/service_mesh_manager.py:702:80: E501 line too long (98 > 79 characters)
            self.log_activity(f"Ошибка обновления Circuit Breaker для {service_id}: {e}", "error")
                                                                               ^
security/microservices/service_mesh_manager.py:712:80: E501 line too long (106 > 79 characters)
                self.log_activity(f"Не удалось получить конечную точку для сервиса {service_id}", "error")
                                                                               ^
security/microservices/service_mesh_manager.py:739:80: E501 line too long (88 > 79 characters)
                    self._update_circuit_breaker(service_id, response.status_code < 400)
                                                                               ^
security/microservices/service_mesh_manager.py:744:80: E501 line too long (94 > 79 characters)
            self.log_activity(f"Ошибка отправки запроса к сервису {service_id}: {e}", "error")
                                                                               ^
security/microservices/service_mesh_manager.py:747:80: E501 line too long (112 > 79 characters)
    def _execute_request(self, request: ServiceRequest, endpoint: ServiceEndpoint) -> Optional[ServiceResponse]:
                                                                               ^
security/microservices/service_mesh_manager.py:756:80: E501 line too long (82 > 79 characters)
            error_message = None if status_code < 400 else "Internal Server Error"
                                                                               ^
security/microservices/service_mesh_manager.py:770:80: E501 line too long (94 > 79 characters)
            self.log_activity(f"Ошибка выполнения запроса {request.request_id}: {e}", "error")
                                                                               ^
security/microservices/service_mesh_manager.py:773:80: E501 line too long (82 > 79 characters)
    def _update_request_metrics(self, service_id: str, response: ServiceResponse):
                                                                               ^
security/microservices/service_mesh_manager.py:798:80: E501 line too long (97 > 79 characters)
                (self.average_response_time * (self.total_requests - 1) + response.response_time)
                                                                               ^
security/microservices/service_mesh_manager.py:803:80: E501 line too long (89 > 79 characters)
            self.log_activity(f"Ошибка обновления метрик для {service_id}: {e}", "error")
                                                                               ^
security/microservices/service_mesh_manager.py:822:80: E501 line too long (93 > 79 characters)
                "created_at": service.created_at.isoformat() if service.created_at else None,
                                                                               ^
security/microservices/service_mesh_manager.py:823:80: E501 line too long (98 > 79 characters)
                "last_updated": service.last_updated.isoformat() if service.last_updated else None
                                                                               ^
security/microservices/service_mesh_manager.py:827:80: E501 line too long (93 > 79 characters)
            self.log_activity(f"Ошибка получения статуса сервиса {service_id}: {e}", "error")
                                                                               ^
security/microservices/service_mesh_manager.py:834:80: E501 line too long (107 > 79 characters)
            healthy_services = len([s for s in self.service_health.values() if s == ServiceStatus.HEALTHY])
                                                                               ^
security/microservices/service_mesh_manager.py:835:80: E501 line too long (111 > 79 characters)
            unhealthy_services = len([s for s in self.service_health.values() if s == ServiceStatus.UNHEALTHY])
                                                                               ^
security/microservices/service_mesh_manager.py:836:80: E501 line too long (109 > 79 characters)
            degraded_services = len([s for s in self.service_health.values() if s == ServiceStatus.DEGRADED])
                                                                               ^
security/microservices/service_mesh_manager.py:850:80: E501 line too long (91 > 79 characters)
                "services": [self.get_service_status(sid) for sid in self.services.keys()],
                                                                               ^
security/microservices/service_mesh_manager.py:855:80: E501 line too long (88 > 79 characters)
            self.log_activity(f"Ошибка получения статуса сервисной сетки: {e}", "error")
                                                                               ^
security/microservices/service_mesh_manager.py:886:80: E501 line too long (83 > 79 characters)
            self.log_activity(f"Ошибка остановки ServiceMeshManager: {e}", "error")
                                                                               ^
security/microservices/simple_sleep.py:8:1: F401 'os' imported but unused
import os
^
security/microservices/simple_sleep.py:20:1: E302 expected 2 blank lines, found 1
def create_sleep_config():
^
security/microservices/simple_sleep.py:85:1: W293 blank line contains whitespace
    
^
security/microservices/simple_sleep.py:88:1: E302 expected 2 blank lines, found 1
def create_wake_up_config():
^
security/microservices/simple_sleep.py:153:1: W293 blank line contains whitespace
    
^
security/microservices/simple_sleep.py:156:1: E302 expected 2 blank lines, found 1
def put_systems_to_sleep():
^
security/microservices/simple_sleep.py:161:1: W293 blank line contains whitespace
    
^
security/microservices/simple_sleep.py:165:1: W293 blank line contains whitespace
        
^
security/microservices/simple_sleep.py:170:1: W293 blank line contains whitespace
        
^
security/microservices/simple_sleep.py:172:1: W293 blank line contains whitespace
        
^
security/microservices/simple_sleep.py:175:1: W293 blank line contains whitespace
        
^
security/microservices/simple_sleep.py:179:80: E501 line too long (80 > 79 characters)
                json.dump(sleep_config[system], f, indent=2, ensure_ascii=False)
                                                                               ^
security/microservices/simple_sleep.py:181:1: W293 blank line contains whitespace
        
^
security/microservices/simple_sleep.py:190:1: W293 blank line contains whitespace
        
^
security/microservices/simple_sleep.py:193:1: W293 blank line contains whitespace
        
^
security/microservices/simple_sleep.py:194:80: E501 line too long (81 > 79 characters)
        logger.info("📊 Общий статус системы сохранен: overall_sleep_status.json")
                                                                               ^
security/microservices/simple_sleep.py:195:1: W293 blank line contains whitespace
        
^
security/microservices/simple_sleep.py:209:1: W293 blank line contains whitespace
        wake_up_script = """#!/usr/bin/env python3
# -*- coding: utf-8 -*-
\"\"\"
Скрипт для пробуждения систем из спящего режима
\"\"\"

import json
import time
import os

def wake_up_systems():
    print("🌅 Пробуждение систем из спящего режима...")
    
    # Загрузка конфигурации пробуждения
    wake_up_config = {
        "rate_limiter": {
            "enabled": True,
            "sleep_mode": False,
            "status": "ACTIVE",
            "wake_up_time": time.time()
        },
        "circuit_breaker": {
            "enabled": True,
            "sleep_mode": False,
            "status": "ACTIVE",
            "wake_up_time": time.time()
        },
        "user_interface_manager": {
            "enabled": True,
            "sleep_mode": False,
            "status": "ACTIVE",
            "wake_up_time": time.time()
        }
    }
    
    # Сохранение конфигурации пробуждения
    with open("wake_up_config.json", 'w', encoding='utf-8') as f:
        json.dump(wake_up_config, f, indent=2, ensure_ascii=False)
    
    print("✅ Системы пробуждены!")
    print("⚡ Все компоненты активны и готовы к работе")

if __name__ == "__main__":
    wake_up_systems()
"""
^
security/microservices/simple_sleep.py:231:1: W293 blank line contains whitespace
        wake_up_script = """#!/usr/bin/env python3
# -*- coding: utf-8 -*-
\"\"\"
Скрипт для пробуждения систем из спящего режима
\"\"\"

import json
import time
import os

def wake_up_systems():
    print("🌅 Пробуждение систем из спящего режима...")
    
    # Загрузка конфигурации пробуждения
    wake_up_config = {
        "rate_limiter": {
            "enabled": True,
            "sleep_mode": False,
            "status": "ACTIVE",
            "wake_up_time": time.time()
        },
        "circuit_breaker": {
            "enabled": True,
            "sleep_mode": False,
            "status": "ACTIVE",
            "wake_up_time": time.time()
        },
        "user_interface_manager": {
            "enabled": True,
            "sleep_mode": False,
            "status": "ACTIVE",
            "wake_up_time": time.time()
        }
    }
    
    # Сохранение конфигурации пробуждения
    with open("wake_up_config.json", 'w', encoding='utf-8') as f:
        json.dump(wake_up_config, f, indent=2, ensure_ascii=False)
    
    print("✅ Системы пробуждены!")
    print("⚡ Все компоненты активны и готовы к работе")

if __name__ == "__main__":
    wake_up_systems()
"""
^
security/microservices/simple_sleep.py:235:1: W293 blank line contains whitespace
        wake_up_script = """#!/usr/bin/env python3
# -*- coding: utf-8 -*-
\"\"\"
Скрипт для пробуждения систем из спящего режима
\"\"\"

import json
import time
import os

def wake_up_systems():
    print("🌅 Пробуждение систем из спящего режима...")
    
    # Загрузка конфигурации пробуждения
    wake_up_config = {
        "rate_limiter": {
            "enabled": True,
            "sleep_mode": False,
            "status": "ACTIVE",
            "wake_up_time": time.time()
        },
        "circuit_breaker": {
            "enabled": True,
            "sleep_mode": False,
            "status": "ACTIVE",
            "wake_up_time": time.time()
        },
        "user_interface_manager": {
            "enabled": True,
            "sleep_mode": False,
            "status": "ACTIVE",
            "wake_up_time": time.time()
        }
    }
    
    # Сохранение конфигурации пробуждения
    with open("wake_up_config.json", 'w', encoding='utf-8') as f:
        json.dump(wake_up_config, f, indent=2, ensure_ascii=False)
    
    print("✅ Системы пробуждены!")
    print("⚡ Все компоненты активны и готовы к работе")

if __name__ == "__main__":
    wake_up_systems()
"""
^
security/microservices/simple_sleep.py:242:1: W293 blank line contains whitespace
        
^
security/microservices/simple_sleep.py:245:1: W293 blank line contains whitespace
        
^
security/microservices/simple_sleep.py:247:1: W293 blank line contains whitespace
        
^
security/microservices/simple_sleep.py:249:80: E501 line too long (83 > 79 characters)
        logger.info("💤 Системы будут автоматически пробуждаться при необходимости")
                                                                               ^
security/microservices/simple_sleep.py:250:80: E501 line too long (88 > 79 characters)
        logger.info("🔧 Для ручного пробуждения используйте: python3 wake_up_systems.py")
                                                                               ^
security/microservices/simple_sleep.py:251:1: W293 blank line contains whitespace
        
^
security/microservices/simple_sleep.py:253:1: W293 blank line contains whitespace
        
^
security/microservices/simple_sleep.py:258:1: E302 expected 2 blank lines, found 1
def main():
^
security/microservices/simple_sleep.py:264:1: W293 blank line contains whitespace
    
^
security/microservices/simple_sleep.py:267:1: W293 blank line contains whitespace
        
^
security/microservices/simple_sleep.py:270:80: E501 line too long (81 > 79 characters)
            print("💤 Системы будут автоматически пробуждаться при необходимости")
                                                                               ^
security/microservices/simple_sleep.py:271:80: E501 line too long (86 > 79 characters)
            print("🔧 Для ручного пробуждения используйте: python3 wake_up_systems.py")
                                                                               ^
security/microservices/simple_sleep.py:275:80: E501 line too long (83 > 79 characters)
            print("   - circuit_breaker_sleep_status.json - статус CircuitBreaker")
                                                                               ^
security/microservices/simple_sleep.py:276:80: E501 line too long (96 > 79 characters)
            print("   - user_interface_manager_sleep_status.json - статус UserInterfaceManager")
                                                                               ^
security/microservices/simple_sleep.py:282:1: W293 blank line contains whitespace
            
^
security/microservices/simple_sleep.py:289:1: W293 blank line contains whitespace
    
^
security/microservices/simple_sleep.py:292:1: E305 expected 2 blank lines after class or function definition, found 1
if __name__ == "__main__":
^
security/microservices/simple_sleep.py:293:17: W292 no newline at end of file
    exit(main())                ^
security/microservices/user_interface_manager.py:7:80: E501 line too long (116 > 79 characters)
"""
UserInterfaceManager - Интеллектуальный менеджер пользовательского интерфейса
function_85: Универсальное управление интерфейсами для всех типов пользователей

Этот модуль предоставляет продвинутую систему управления пользовательскими интерфейсами для AI системы безопасности,
включающую:
- Множественные типы интерфейсов (Web, Mobile, Desktop, API, Voice)
- Интеллектуальную адаптацию под пользователей
- ML-анализ поведения пользователей
- Персонализацию интерфейсов
- Интеграцию с системой мониторинга и алертинга
- Поддержка различных устройств и платформ
- Автоматическое обучение и адаптация интерфейсов
- Детальное логирование и аудит всех операций
- Интеграция с внешними системами мониторинга (Prometheus, Grafana)
- Поддержка различных языков и локализации

Основные возможности:
1. Интеллектуальное управление пользовательскими интерфейсами
2. Автоматическая адаптация под предпочтения пользователей
3. ML-оптимизация интерфейсов на основе поведения
4. Интеграция с системой мониторинга для отслеживания метрик
5. Поддержка различных типов интерфейсов и устройств
6. Персонализация на основе контекста и роли пользователя
7. Детальное логирование и аудит всех операций
8. Интеграция с внешними системами мониторинга
9. Поддержка различных языков и культур
10. Автоматическое восстановление после сбоев

Технические детали:
- Использует asyncio для высокопроизводительной асинхронной обработки
- Применяет ML алгоритмы для анализа поведения пользователей
- Интегрирует Redis для кэширования состояний интерфейсов
- Использует SQLAlchemy для работы с базой данных
- Применяет Pydantic для валидации данных
- Интегрирует Prometheus для метрик
- Использует Celery для асинхронных задач
- Применяет nginx для reverse proxy
- Интегрирует ELK stack для логирования

Автор: ALADDIN Security System
Версия: 2.0
Дата: 2025-01-27
Лицензия: MIT
"""
   
                                                                           ^
security/microservices/user_interface_manager.py:64:1: F401 'sqlalchemy.Integer' imported but unused
from sqlalchemy import create_engine, Column, String, Integer, DateTime, Boolean, JSON
^
security/microservices/user_interface_manager.py:64:80: E501 line too long (86 > 79 characters)
from sqlalchemy import create_engine, Column, String, Integer, DateTime, Boolean, JSON
                                                                               ^
security/microservices/user_interface_manager.py:76:80: E501 line too long (93 > 79 characters)
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))
                                                                               ^
security/microservices/user_interface_manager.py:78:1: F401 'core.base.CoreBase' imported but unused
from core.base import CoreBase
^
security/microservices/user_interface_manager.py:78:1: E402 module level import not at top of file
from core.base import CoreBase
^
security/microservices/user_interface_manager.py:79:1: F401 'core.service_base.ServiceBase' imported but unused
from core.service_base import ServiceBase
^
security/microservices/user_interface_manager.py:79:1: E402 module level import not at top of file
from core.service_base import ServiceBase
^
security/microservices/user_interface_manager.py:80:1: E402 module level import not at top of file
from core.security_base import SecurityBase
^
security/microservices/user_interface_manager.py:82:80: E501 line too long (81 > 79 characters)
# from core.configuration import Configuration  # Configuration не экспортируется
                                                                               ^
security/microservices/user_interface_manager.py:89:80: E501 line too long (123 > 79 characters)
INTERFACE_REQUESTS = Counter('ui_manager_requests_total', 'UI Manager requests', ['interface_type', 'user_type', 'status'])
                                                                               ^
security/microservices/user_interface_manager.py:90:80: E501 line too long (133 > 79 characters)
INTERFACE_DURATION = Histogram('ui_manager_request_duration_seconds', 'UI Manager request duration', ['interface_type', 'user_type'])
                                                                               ^
security/microservices/user_interface_manager.py:91:80: E501 line too long (107 > 79 characters)
ACTIVE_INTERFACES = Gauge('ui_manager_active_interfaces', 'Active interfaces per type', ['interface_type'])
                                                                               ^
security/microservices/user_interface_manager.py:92:80: E501 line too long (88 > 79 characters)
USER_SESSIONS = Gauge('ui_manager_user_sessions', 'Active user sessions', ['user_type'])
                                                                               ^
security/microservices/user_interface_manager.py:93:80: E501 line too long (137 > 79 characters)
ML_RECOMMENDATIONS = Counter('ui_manager_ml_recommendations_total', 'ML interface recommendations', ['recommendation_type', 'user_type'])
                                                                               ^
security/microservices/user_interface_manager.py:100:1: E303 too many blank lines (3)
class InterfaceRecord(Base):
^
security/microservices/user_interface_manager.py:115:80: E501 line too long (84 > 79 characters)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
                                                                               ^
security/microservices/user_interface_manager.py:120:1: E303 too many blank lines (3)
class UserSessionRecord(Base):
^
security/microservices/user_interface_manager.py:138:1: E303 too many blank lines (3)
class InterfaceEventRecord(Base):
^
security/microservices/user_interface_manager.py:176:1: E303 too many blank lines (3)
class InterfaceRequest(BaseModel):
^
security/microservices/user_interface_manager.py:186:80: E501 line too long (96 > 79 characters)
    meta_data: Dict[str, Any] = Field(default_factory=dict, description="Дополнительные данные")
                                                                               ^
security/microservices/user_interface_manager.py:190:1: E303 too many blank lines (3)
class InterfaceResponse(BaseModel):
^
security/microservices/user_interface_manager.py:193:80: E501 line too long (80 > 79 characters)
    interface_data: Dict[str, Any] = Field(..., description="Данные интерфейса")
                                                                               ^
security/microservices/user_interface_manager.py:194:80: E501 line too long (107 > 79 characters)
    user_preferences: Dict[str, Any] = Field(default_factory=dict, description="Предпочтения пользователя")
                                                                               ^
security/microservices/user_interface_manager.py:195:80: E501 line too long (88 > 79 characters)
    recommendations: List[str] = Field(default_factory=list, description="Рекомендации")
                                                                               ^
security/microservices/user_interface_manager.py:197:80: E501 line too long (96 > 79 characters)
    meta_data: Dict[str, Any] = Field(default_factory=dict, description="Дополнительные данные")
                                                                               ^
security/microservices/user_interface_manager.py:213:1: E303 too many blank lines (3)
class UserType(Enum):
^
security/microservices/user_interface_manager.py:223:1: E303 too many blank lines (3)
class DeviceType(Enum):
^
security/microservices/user_interface_manager.py:234:1: E303 too many blank lines (3)
class EventType(Enum):
^
security/microservices/user_interface_manager.py:243:1: E302 expected 2 blank lines, found 1
@dataclass
^
security/microservices/user_interface_manager.py:246:1: E304 blank lines found after function decorator
class WebInterface:
^
security/microservices/user_interface_manager.py:253:80: E501 line too long (85 > 79 characters)
    def generate_interface(self, user_preferences: Dict[str, Any]) -> Dict[str, Any]:
                                                                               ^
security/microservices/user_interface_manager.py:266:1: E302 expected 2 blank lines, found 1
@dataclass
^
security/microservices/user_interface_manager.py:269:1: E304 blank lines found after function decorator
class MobileInterface:
^
security/microservices/user_interface_manager.py:276:80: E501 line too long (85 > 79 characters)
    def generate_interface(self, user_preferences: Dict[str, Any]) -> Dict[str, Any]:
                                                                               ^
security/microservices/user_interface_manager.py:289:1: E302 expected 2 blank lines, found 1
@dataclass
^
security/microservices/user_interface_manager.py:292:1: E304 blank lines found after function decorator
class VoiceInterface:
^
security/microservices/user_interface_manager.py:299:80: E501 line too long (85 > 79 characters)
    def generate_interface(self, user_preferences: Dict[str, Any]) -> Dict[str, Any]:
                                                                               ^
security/microservices/user_interface_manager.py:312:1: E302 expected 2 blank lines, found 1
@dataclass
^
security/microservices/user_interface_manager.py:315:1: E304 blank lines found after function decorator
class APIInterface:
^
security/microservices/user_interface_manager.py:322:80: E501 line too long (85 > 79 characters)
    def generate_interface(self, user_preferences: Dict[str, Any]) -> Dict[str, Any]:
                                                                               ^
security/microservices/user_interface_manager.py:349:80: E501 line too long (100 > 79 characters)
    def __init__(self, name: str = "UserInterfaceManager", config: Optional[Dict[str, Any]] = None):
                                                                               ^
security/microservices/user_interface_manager.py:431:80: E501 line too long (92 > 79 characters)
            self.cleanup_thread = threading.Thread(target=self._cleanup_worker, daemon=True)
                                                                               ^
security/microservices/user_interface_manager.py:435:80: E501 line too long (86 > 79 characters)
                self.ml_thread = threading.Thread(target=self._ml_worker, daemon=True)
                                                                               ^
security/microservices/user_interface_manager.py:479:80: E501 line too long (97 > 79 characters)
            database_url = self.config.get('database_url', 'sqlite:///user_interface_manager.db')
                                                                               ^
security/microservices/user_interface_manager.py:489:80: E501 line too long (81 > 79 characters)
            self.logger.info("База данных UserInterfaceManager инициализирована")
                                                                               ^
security/microservices/user_interface_manager.py:498:80: E501 line too long (80 > 79 characters)
            redis_url = self.config.get('redis_url', 'redis://localhost:6379/0')
                                                                               ^
security/microservices/user_interface_manager.py:499:80: E501 line too long (80 > 79 characters)
            self.redis_client = redis.from_url(redis_url, decode_responses=True)
                                                                               ^
security/microservices/user_interface_manager.py:504:80: E501 line too long (81 > 79 characters)
            self.logger.info("Redis клиент UserInterfaceManager инициализирован")
                                                                               ^
security/microservices/user_interface_manager.py:528:80: E501 line too long (82 > 79 characters)
    async def get_interface(self, request: InterfaceRequest) -> InterfaceResponse:
                                                                               ^
security/microservices/user_interface_manager.py:548:80: E501 line too long (104 > 79 characters)
            user_preferences = await self._get_user_preferences(request.user_id, request.interface_type)
                                                                               ^
security/microservices/user_interface_manager.py:552:80: E501 line too long (95 > 79 characters)
                recommendations = await self._get_ml_recommendations(request, user_preferences)
                                                                               ^
security/microservices/user_interface_manager.py:563:80: E501 line too long (103 > 79 characters)
            interface_data = await self._generate_interface(request, user_preferences, recommendations)
                                                                               ^
security/microservices/user_interface_manager.py:619:80: E501 line too long (97 > 79 characters)
        session_id = request.session_id or f"session_{int(time.time() * 1000)}_{request.user_id}"
                                                                               ^
security/microservices/user_interface_manager.py:652:80: E501 line too long (95 > 79 characters)
    async def _get_user_preferences(self, user_id: str, interface_type: str) -> Dict[str, Any]:
                                                                               ^
security/microservices/user_interface_manager.py:711:80: E501 line too long (118 > 79 characters)
    async def _get_ml_recommendations(self, request: InterfaceRequest, user_preferences: Dict[str, Any]) -> List[str]:
                                                                               ^
security/microservices/user_interface_manager.py:727:80: E501 line too long (82 > 79 characters)
            preference_score = self.ml_model.decision_function(features_scaled)[0]
                                                                               ^
security/microservices/user_interface_manager.py:742:80: E501 line too long (96 > 79 characters)
                recommendations.extend(["colorful_theme", "large_buttons", "simple_navigation"])
                                                                               ^
security/microservices/user_interface_manager.py:744:80: E501 line too long (88 > 79 characters)
                recommendations.extend(["high_contrast", "large_text", "simple_layout"])
                                                                               ^
security/microservices/user_interface_manager.py:746:80: E501 line too long (100 > 79 characters)
                recommendations.extend(["advanced_features", "detailed_views", "power_user_layout"])
                                                                               ^
security/microservices/user_interface_manager.py:754:80: E501 line too long (113 > 79 characters)
    def _extract_user_features(self, request: InterfaceRequest, user_preferences: Dict[str, Any]) -> List[float]:
                                                                               ^
security/microservices/user_interface_manager.py:791:80: E501 line too long (147 > 79 characters)
    async def _generate_interface(self, request: InterfaceRequest, user_preferences: Dict[str, Any], recommendations: List[str]) -> Dict[str, Any]:
                                                                               ^
security/microservices/user_interface_manager.py:846:80: E501 line too long (81 > 79 characters)
    def _get_web_components(self, user_preferences: Dict[str, Any]) -> List[str]:
                                                                               ^
security/microservices/user_interface_manager.py:848:80: E501 line too long (82 > 79 characters)
        components = ["header", "navigation", "main_content", "sidebar", "footer"]
                                                                               ^
security/microservices/user_interface_manager.py:852:80: E501 line too long (88 > 79 characters)
            components.extend(["admin_panel", "analytics_dashboard", "user_management"])
                                                                               ^
security/microservices/user_interface_manager.py:854:80: E501 line too long (80 > 79 characters)
            components.extend(["parental_controls", "child_dashboard", "games"])
                                                                               ^
security/microservices/user_interface_manager.py:856:80: E501 line too long (89 > 79 characters)
            components.extend(["accessibility_tools", "help_system", "emergency_button"])
                                                                               ^
security/microservices/user_interface_manager.py:860:80: E501 line too long (84 > 79 characters)
    def _get_mobile_components(self, user_preferences: Dict[str, Any]) -> List[str]:
                                                                               ^
security/microservices/user_interface_manager.py:862:80: E501 line too long (95 > 79 characters)
        components = ["mobile_header", "bottom_navigation", "swipe_gestures", "touch_controls"]
                                                                               ^
security/microservices/user_interface_manager.py:866:80: E501 line too long (81 > 79 characters)
            components.extend(["parental_locks", "child_mode", "fun_animations"])
                                                                               ^
security/microservices/user_interface_manager.py:868:80: E501 line too long (87 > 79 characters)
            components.extend(["large_buttons", "voice_commands", "emergency_contact"])
                                                                               ^
security/microservices/user_interface_manager.py:872:80: E501 line too long (81 > 79 characters)
    def _get_voice_commands(self, user_preferences: Dict[str, Any]) -> List[str]:
                                                                               ^
security/microservices/user_interface_manager.py:886:80: E501 line too long (87 > 79 characters)
    def _get_voice_responses(self, user_preferences: Dict[str, Any]) -> Dict[str, str]:
                                                                               ^
security/microservices/user_interface_manager.py:903:80: E501 line too long (86 > 79 characters)
    def _get_web_navigation(self, user_preferences: Dict[str, Any]) -> Dict[str, Any]:
                                                                               ^
security/microservices/user_interface_manager.py:909:80: E501 line too long (84 > 79 characters)
                "main": ["dashboard", "users", "security", "analytics", "settings"],
                                                                               ^
security/microservices/user_interface_manager.py:928:80: E501 line too long (82 > 79 characters)
    def _get_mobile_gestures(self, user_preferences: Dict[str, Any]) -> List[str]:
                                                                               ^
security/microservices/user_interface_manager.py:930:80: E501 line too long (95 > 79 characters)
        gestures = ["swipe_up", "swipe_down", "swipe_left", "swipe_right", "tap", "long_press"]
                                                                               ^
security/microservices/user_interface_manager.py:940:80: E501 line too long (80 > 79 characters)
    def _get_api_endpoints(self, user_preferences: Dict[str, Any]) -> List[str]:
                                                                               ^
security/microservices/user_interface_manager.py:946:80: E501 line too long (106 > 79 characters)
            endpoints.extend(["/api/v1/admin/users", "/api/v1/admin/security", "/api/v1/admin/analytics"])
                                                                               ^
security/microservices/user_interface_manager.py:950:80: E501 line too long (83 > 79 characters)
            endpoints.extend(["/api/v1/elderly/emergency", "/api/v1/elderly/help"])
                                                                               ^
security/microservices/user_interface_manager.py:954:80: E501 line too long (80 > 79 characters)
    async def _save_interface_record(self, preferences: Dict[str, Any]) -> None:
                                                                               ^
security/microservices/user_interface_manager.py:958:80: E501 line too long (89 > 79 characters)
                id=f"interface_{preferences['user_id']}_{preferences['interface_type']}",
                                                                               ^
security/microservices/user_interface_manager.py:1037:80: E501 line too long (103 > 79 characters)
                        time_since_activity = (current_time - session["last_activity"]).total_seconds()
                                                                               ^
security/microservices/user_interface_manager.py:1038:80: E501 line too long (80 > 79 characters)
                        if time_since_activity > self.config["session_timeout"]:
                                                                               ^
security/microservices/user_interface_manager.py:1085:80: E501 line too long (80 > 79 characters)
    def _extract_session_features(self, session: Dict[str, Any]) -> List[float]:
                                                                               ^
security/microservices/user_interface_manager.py:1120:80: E501 line too long (98 > 79 characters)
                    session_duration = (datetime.utcnow() - session["start_time"]).total_seconds()
                                                                               ^
security/microservices/user_interface_manager.py:1147:80: E501 line too long (115 > 79 characters)
                "interface_types": list(set(session["interface_type"] for session in self.user_sessions.values())),
                                                                               ^
security/microservices/user_interface_manager.py:1148:80: E501 line too long (117 > 79 characters)
                "user_types": list(set(session.get("user_type", "user") for session in self.user_sessions.values())),
                                                                               ^
security/microservices/user_interface_manager.py:1153:80: E501 line too long (84 > 79 characters)
                    "default_interface_type": self.config["default_interface_type"],
                                                                               ^
security/microservices/user_interface_manager.py:1158:80: E501 line too long (116 > 79 characters)
    async def update_user_preferences(self, user_id: str, interface_type: str, preferences: Dict[str, Any]) -> bool:
                                                                               ^
security/microservices/user_interface_manager.py:1181:80: E501 line too long (82 > 79 characters)
                    record.language = preferences.get("language", record.language)
                                                                               ^
security/microservices/user_interface_manager.py:1182:80: E501 line too long (84 > 79 characters)
                    record.meta_data = preferences.get("metadata", record.meta_data)
                                                                               ^
security/microservices/user_interface_manager.py:1194:1: F401 'fastapi.Depends' imported but unused
from fastapi import FastAPI, HTTPException, Depends
^
security/microservices/user_interface_manager.py:1194:1: E305 expected 2 blank lines after class or function definition, found 1
from fastapi import FastAPI, HTTPException, Depends
^
security/microservices/user_interface_manager.py:1194:1: E402 module level import not at top of file
from fastapi import FastAPI, HTTPException, Depends
^
security/microservices/user_interface_manager.py:1195:1: E402 module level import not at top of file
from fastapi.middleware.cors import CORSMiddleware
^
security/microservices/user_interface_manager.py:1196:1: E402 module level import not at top of file
import uvicorn
^
security/microservices/user_interface_manager.py:1212:1: E302 expected 2 blank lines, found 1
@app.on_event("startup")
^
security/microservices/user_interface_manager.py:1219:1: E302 expected 2 blank lines, found 1
@app.on_event("shutdown")
^
security/microservices/user_interface_manager.py:1226:1: E302 expected 2 blank lines, found 1
@app.get("/health")
^
security/microservices/user_interface_manager.py:1231:1: E302 expected 2 blank lines, found 1
@app.get("/status")
^
security/microservices/user_interface_manager.py:1235:80: E501 line too long (91 > 79 characters)
        raise HTTPException(status_code=503, detail="UserInterfaceManager not initialized")
                                                                               ^
security/microservices/user_interface_manager.py:1239:1: E302 expected 2 blank lines, found 1
@app.post("/interface")
^
security/microservices/user_interface_manager.py:1243:80: E501 line too long (91 > 79 characters)
        raise HTTPException(status_code=503, detail="UserInterfaceManager not initialized")
                                                                               ^
security/microservices/user_interface_manager.py:1247:1: E302 expected 2 blank lines, found 1
@app.put("/preferences/{user_id}/{interface_type}")
^
security/microservices/user_interface_manager.py:1248:80: E501 line too long (93 > 79 characters)
async def update_preferences(user_id: str, interface_type: str, preferences: Dict[str, Any]):
                                                                               ^
security/microservices/user_interface_manager.py:1251:80: E501 line too long (91 > 79 characters)
        raise HTTPException(status_code=503, detail="UserInterfaceManager not initialized")
                                                                               ^
security/microservices/user_interface_manager.py:1253:80: E501 line too long (92 > 79 characters)
    success = await ui_manager.update_user_preferences(user_id, interface_type, preferences)
                                                                               ^
security/microservices/user_interface_manager.py:1255:80: E501 line too long (83 > 79 characters)
        raise HTTPException(status_code=500, detail="Failed to update preferences")
                                                                               ^
security/microservices/user_interface_manager.py:1259:1: E302 expected 2 blank lines, found 1
@app.get("/metrics")
^
security/microservices/user_interface_manager.py:1283:1: E305 expected 2 blank lines after class or function definition, found 1
if __name__ == "__main__":
^
security/microservices/user_interface_manager.py:1287:1: E302 expected 2 blank lines, found 1
async def test_user_interface_manager():
^
security/microservices/user_interface_manager.py:1308:80: E501 line too long (106 > 79 characters)
        print(f"✅ Тест 1 - Веб-интерфейс: {response.success}, тип: {response.interface_data.get('type')}")
                                                                               ^
security/microservices/user_interface_manager.py:1320:80: E501 line too long (80 > 79 characters)
        print(f"✅ Тест 2 - Мобильный интерфейс для ребенка: {response.success}")
                                                                               ^
security/microservices/user_interface_manager.py:1332:80: E501 line too long (117 > 79 characters)
        print(f"✅ Тест 3 - Голосовой интерфейс: {response.success}, язык: {response.interface_data.get('language')}")
                                                                               ^
security/microservices/user_interface_manager.py:1344:80: E501 line too long (126 > 79 characters)
        print(f"✅ Тест 4 - API интерфейс: {response.success}, endpoints: {len(response.interface_data.get('endpoints', []))}")
                                                                               ^
security/microservices/user_interface_manager.py:1348:80: E501 line too long (101 > 79 characters)
        print(f"✅ Тест 5 - Статус: {status['status']}, активных сессий: {status['active_sessions']}")
                                                                               ^
security/microservices/user_interface_manager_extra.py:7:1: F401 'numpy as np' imported but unused
import numpy as np
^
security/microservices/user_interface_manager_extra.py:10:1: F401 'time' imported but unused
import time
^
security/microservices/user_interface_manager_extra.py:14:1: E302 expected 2 blank lines, found 1
class UserInterfaceManagerExtra:
^
security/microservices/user_interface_manager_extra.py:16:1: W293 blank line contains whitespace
    
^
security/microservices/user_interface_manager_extra.py:28:1: W293 blank line contains whitespace
    
^
security/microservices/user_interface_manager_extra.py:34:50: F821 undefined name 'UserSessionRecord'
                existing = self.db_session.query(UserSessionRecord).filter(
                                                 ^
security/microservices/user_interface_manager_extra.py:35:21: F821 undefined name 'UserSessionRecord'
                    UserSessionRecord.id == record.id
                    ^
security/microservices/user_interface_manager_extra.py:37:1: W293 blank line contains whitespace
                
^
security/microservices/user_interface_manager_extra.py:43:1: W293 blank line contains whitespace
                
^
security/microservices/user_interface_manager_extra.py:49:1: W293 blank line contains whitespace
    
^
security/microservices/user_interface_manager_extra.py:56:80: E501 line too long (98 > 79 characters)
                    session_duration = (datetime.utcnow() - session["start_time"]).total_seconds()
                                                                               ^
security/microservices/user_interface_manager_extra.py:57:1: W293 blank line contains whitespace
                    
^
security/microservices/user_interface_manager_extra.py:69:1: W293 blank line contains whitespace
                    
^
security/microservices/user_interface_manager_extra.py:73:1: W293 blank line contains whitespace
    
^
security/microservices/user_interface_manager_extra.py:86:1: W293 blank line contains whitespace
    
^
security/microservices/user_interface_manager_extra.py:98:1: E305 expected 2 blank lines after class or function definition, found 1
ui_manager = UserInterfaceManagerExtra()^
security/microservices/user_interface_manager_extra.py:98:41: W292 no newline at end of file
ui_manager = UserInterfaceManagerExtra()                                        ^
security/microservices/wake_up_systems.py:9:1: F401 'os' imported but unused
import os
^
security/microservices/wake_up_systems.py:11:1: E302 expected 2 blank lines, found 1
def wake_up_systems():
^
security/microservices/wake_up_systems.py:13:1: W293 blank line contains whitespace
    
^
security/microservices/wake_up_systems.py:35:1: W293 blank line contains whitespace
    
^
security/microservices/wake_up_systems.py:39:1: W293 blank line contains whitespace
    
^
security/microservices/wake_up_systems.py:43:1: E305 expected 2 blank lines after class or function definition, found 1
if __name__ == "__main__":
^
security/minimal_security_integration.py:118:80: E501 line too long (95 > 79 characters)
            self.log_activity(f"Инициализация минимальной интеграции безопасности {self.name}")
                                                                               ^
security/minimal_security_integration.py:126:80: E501 line too long (106 > 79 characters)
            self.log_activity(f"Минимальная интеграция безопасности {self.name} успешно инициализирована")
                                                                               ^
security/minimal_security_integration.py:131:80: E501 line too long (81 > 79 characters)
                f"Ошибка инициализации минимальной интеграции безопасности: {e}",
                                                                               ^
security/minimal_security_integration.py:143:80: E501 line too long (98 > 79 characters)
        self, module_name: str, operation: str, user: str, params: Optional[Dict[str, Any]] = None
                                                                               ^
security/minimal_security_integration.py:181:80: E501 line too long (98 > 79 characters)
            "report_id": f"minimal_security_integration_report_{int(datetime.now().timestamp())}",
                                                                               ^
security/mobile/mobile_api.py:9:1: F401 'json' imported but unused
import json
^
security/mobile/mobile_api.py:12:1: F401 'typing.List' imported but unused
from typing import Dict, List, Optional, Any
^
security/mobile/mobile_api.py:12:1: F401 'typing.Optional' imported but unused
from typing import Dict, List, Optional, Any
^
security/mobile/mobile_api.py:21:1: E402 module level import not at top of file
from security.vpn.vpn_security_system import VPNSecuritySystem, VPNSecurityLevel
^
security/mobile/mobile_api.py:21:80: E501 line too long (80 > 79 characters)
from security.vpn.vpn_security_system import VPNSecuritySystem, VPNSecurityLevel
                                                                               ^
security/mobile/mobile_api.py:22:1: E402 module level import not at top of file
from security.antivirus.antivirus_security_system import AntivirusSecuritySystem
^
security/mobile/mobile_api.py:22:80: E501 line too long (80 > 79 characters)
from security.antivirus.antivirus_security_system import AntivirusSecuritySystem
                                                                               ^
security/mobile/mobile_api.py:28:1: E302 expected 2 blank lines, found 1
class ConnectionType(Enum):
^
security/mobile/mobile_api.py:35:1: E302 expected 2 blank lines, found 1
class ConnectionSpeed(Enum):
^
security/mobile/mobile_api.py:41:1: E302 expected 2 blank lines, found 1
@dataclass
^
security/mobile/mobile_api.py:51:1: E302 expected 2 blank lines, found 1
@dataclass
^
security/mobile/mobile_api.py:64:1: E302 expected 2 blank lines, found 1
class MobileSecurityAPI:
^
security/mobile/mobile_api.py:66:1: W293 blank line contains whitespace
    
^
security/mobile/mobile_api.py:73:1: W293 blank line contains whitespace
        
^
security/mobile/mobile_api.py:76:1: W293 blank line contains whitespace
    
^
security/mobile/mobile_api.py:85:1: W293 blank line contains whitespace
    
^
security/mobile/mobile_api.py:95:80: E501 line too long (85 > 79 characters)
                    "features": ["Защита трафика", "Смена IP", "Быстрое подключение"]
                                                                               ^
security/mobile/mobile_api.py:98:44: W291 trailing whitespace
                    "id": "antivirus_only", 
                                           ^
security/mobile/mobile_api.py:102:80: E501 line too long (104 > 79 characters)
                    "features": ["Сканирование файлов", "Защита в реальном времени", "Блокировка угроз"]
                                                                               ^
security/mobile/mobile_api.py:109:80: E501 line too long (82 > 79 characters)
                    "features": ["VPN защита", "Антивирус", "Полная безопасность"]
                                                                               ^
security/mobile/mobile_api.py:116:80: E501 line too long (90 > 79 characters)
                    "features": ["AI анализ", "Автоматический выбор", "Адаптивная защита"]
                                                                               ^
security/mobile/mobile_api.py:147:1: W293 blank line contains whitespace
    
^
security/mobile/mobile_api.py:148:80: E501 line too long (93 > 79 characters)
    async def connect_mobile(self, config: MobileConnectionConfig) -> MobileConnectionResult:
                                                                               ^
security/mobile/mobile_api.py:152:80: E501 line too long (82 > 79 characters)
            connection_id = f"mobile_{self.connection_counter}_{int(time.time())}"
                                                                               ^
security/mobile/mobile_api.py:153:1: W293 blank line contains whitespace
            
^
security/mobile/mobile_api.py:155:1: W293 blank line contains whitespace
            
^
security/mobile/mobile_api.py:160:80: E501 line too long (82 > 79 characters)
                result = await self._connect_antivirus_only(connection_id, config)
                                                                               ^
security/mobile/mobile_api.py:162:80: E501 line too long (81 > 79 characters)
                result = await self._connect_vpn_antivirus(connection_id, config)
                                                                               ^
security/mobile/mobile_api.py:164:80: E501 line too long (84 > 79 characters)
                result = await self._connect_smart_protection(connection_id, config)
                                                                               ^
security/mobile/mobile_api.py:166:80: E501 line too long (90 > 79 characters)
                raise ValueError(f"Неизвестный тип подключения: {config.connection_type}")
                                                                               ^
security/mobile/mobile_api.py:167:1: W293 blank line contains whitespace
            
^
security/mobile/mobile_api.py:169:1: W293 blank line contains whitespace
            
^
security/mobile/mobile_api.py:176:1: W293 blank line contains whitespace
            
^
security/mobile/mobile_api.py:188:1: W293 blank line contains whitespace
            
^
security/mobile/mobile_api.py:202:1: W293 blank line contains whitespace
    
^
security/mobile/mobile_api.py:203:80: E501 line too long (108 > 79 characters)
    async def _connect_vpn_only(self, connection_id: str, config: MobileConnectionConfig) -> Dict[str, Any]:
                                                                               ^
security/mobile/mobile_api.py:207:1: W293 blank line contains whitespace
        
^
security/mobile/mobile_api.py:210:1: W293 blank line contains whitespace
        
^
security/mobile/mobile_api.py:216:1: W293 blank line contains whitespace
        
^
security/mobile/mobile_api.py:225:1: W293 blank line contains whitespace
    
^
security/mobile/mobile_api.py:226:80: E501 line too long (114 > 79 characters)
    async def _connect_antivirus_only(self, connection_id: str, config: MobileConnectionConfig) -> Dict[str, Any]:
                                                                               ^
security/mobile/mobile_api.py:230:1: W293 blank line contains whitespace
        
^
security/mobile/mobile_api.py:232:9: F841 local variable 'status' is assigned to but never used
        status = self.antivirus_system.get_status()
        ^
security/mobile/mobile_api.py:233:1: W293 blank line contains whitespace
        
^
security/mobile/mobile_api.py:239:1: W293 blank line contains whitespace
    
^
security/mobile/mobile_api.py:240:80: E501 line too long (113 > 79 characters)
    async def _connect_vpn_antivirus(self, connection_id: str, config: MobileConnectionConfig) -> Dict[str, Any]:
                                                                               ^
security/mobile/mobile_api.py:244:1: W293 blank line contains whitespace
        
^
security/mobile/mobile_api.py:246:80: E501 line too long (84 > 79 characters)
        antivirus_result = await self._connect_antivirus_only(connection_id, config)
                                                                               ^
security/mobile/mobile_api.py:247:1: W293 blank line contains whitespace
        
^
security/mobile/mobile_api.py:249:80: E501 line too long (84 > 79 characters)
            "message": f"🚀 {vpn_result['message']} + {antivirus_result['message']}",
                                                                               ^
security/mobile/mobile_api.py:253:1: W293 blank line contains whitespace
    
^
security/mobile/mobile_api.py:254:80: E501 line too long (116 > 79 characters)
    async def _connect_smart_protection(self, connection_id: str, config: MobileConnectionConfig) -> Dict[str, Any]:
                                                                               ^
security/mobile/mobile_api.py:263:1: W293 blank line contains whitespace
    
^
security/mobile/mobile_api.py:272:1: W293 blank line contains whitespace
    
^
security/mobile/mobile_api.py:278:1: W293 blank line contains whitespace
            
^
security/mobile/mobile_api.py:280:1: W293 blank line contains whitespace
            
^
security/mobile/mobile_api.py:282:80: E501 line too long (130 > 79 characters)
            if config.connection_type in [ConnectionType.VPN_ONLY, ConnectionType.VPN_ANTIVIRUS, ConnectionType.SMART_PROTECTION]:
                                                                               ^
security/mobile/mobile_api.py:284:80: E501 line too long (86 > 79 characters)
                    success, message = await self.vpn_system.disconnect(connection_id)
                                                                               ^
security/mobile/mobile_api.py:286:80: E501 line too long (97 > 79 characters)
                        return {"success": False, "message": f"Ошибка отключения VPN: {message}"}
                                                                               ^
security/mobile/mobile_api.py:287:1: W293 blank line contains whitespace
            
^
security/mobile/mobile_api.py:290:1: W293 blank line contains whitespace
            
^
security/mobile/mobile_api.py:296:1: W293 blank line contains whitespace
            
^
security/mobile/mobile_api.py:299:80: E501 line too long (80 > 79 characters)
            return {"success": False, "message": f"Ошибка отключения: {str(e)}"}
                                                                               ^
security/mobile/mobile_api.py:300:1: W293 blank line contains whitespace
    
^
security/mobile/mobile_api.py:321:1: E305 expected 2 blank lines after class or function definition, found 1
mobile_api = MobileSecurityAPI()
^
security/mobile/mobile_api.py:323:1: E302 expected 2 blank lines, found 1
async def main():
^
security/mobile/mobile_api.py:327:1: W293 blank line contains whitespace
    
^
security/mobile/mobile_api.py:329:5: F841 local variable 'options' is assigned to but never used
    options = mobile_api.get_connection_options()
    ^
security/mobile/mobile_api.py:331:1: W293 blank line contains whitespace
    
^
security/mobile/mobile_api.py:338:1: W293 blank line contains whitespace
    
^
security/mobile/mobile_api.py:341:1: W293 blank line contains whitespace
    
^
security/mobile/mobile_api.py:343:80: E501 line too long (80 > 79 characters)
    disconnect_result = await mobile_api.disconnect_mobile(result.connection_id)
                                                                               ^
security/mobile/mobile_api.py:345:1: W293 blank line contains whitespace
    
^
security/network_monitoring.py:15:1: F401 'typing.Tuple' imported but unused
from typing import Dict, List, Optional, Any, Tuple
^
security/network_monitoring.py:23:1: E302 expected 2 blank lines, found 1
class NetworkStatus(Enum):
^
security/network_monitoring.py:30:1: E302 expected 2 blank lines, found 1
class AlertLevel(Enum):
^
security/network_monitoring.py:37:1: E302 expected 2 blank lines, found 1
@dataclass
^
security/network_monitoring.py:45:80: E501 line too long (87 > 79 characters)
    timestamp: str = field(default_factory=lambda: datetime.datetime.now().isoformat())
                                                                               ^
security/network_monitoring.py:65:80: E501 line too long (81 > 79 characters)
            timestamp=data.get("timestamp", datetime.datetime.now().isoformat()),
                                                                               ^
security/network_monitoring.py:70:1: E302 expected 2 blank lines, found 1
@dataclass
^
security/network_monitoring.py:81:80: E501 line too long (87 > 79 characters)
    timestamp: str = field(default_factory=lambda: datetime.datetime.now().isoformat())
                                                                               ^
security/network_monitoring.py:105:80: E501 line too long (81 > 79 characters)
            timestamp=data.get("timestamp", datetime.datetime.now().isoformat()),
                                                                               ^
security/network_monitoring.py:109:1: E302 expected 2 blank lines, found 1
@dataclass
^
security/network_monitoring.py:119:80: E501 line too long (87 > 79 characters)
    last_seen: str = field(default_factory=lambda: datetime.datetime.now().isoformat())
                                                                               ^
security/network_monitoring.py:141:80: E501 line too long (81 > 79 characters)
            last_seen=data.get("last_seen", datetime.datetime.now().isoformat()),
                                                                               ^
security/network_monitoring.py:145:1: E302 expected 2 blank lines, found 1
class NetworkMonitoring:
^
security/network_monitoring.py:155:80: E501 line too long (137 > 79 characters)
        self.metrics_history: Dict[str, deque] = defaultdict(lambda: deque(maxlen=1000))  # Храним последние 1000 метрик для каждого типа
                                                                               ^
security/network_monitoring.py:202:80: E501 line too long (97 > 79 characters)
        print(f"Устройство {device.name} ({device.device_id}) зарегистрировано для мониторинга.")
                                                                               ^
security/network_monitoring.py:214:80: E501 line too long (100 > 79 characters)
            if rule.get("metric") == metric.metric_name and metric.value > rule.get("threshold", 0):
                                                                               ^
security/network_monitoring.py:219:80: E501 line too long (112 > 79 characters)
                    message=f"{rule['name']}: {metric.value} {metric.unit} превышает порог {rule['threshold']}",
                                                                               ^
security/network_monitoring.py:235:80: E501 line too long (83 > 79 characters)
            self.devices[device_id].last_seen = datetime.datetime.now().isoformat()
                                                                               ^
security/network_monitoring.py:255:1: W293 blank line contains whitespace
        
^
security/network_monitoring.py:258:80: E501 line too long (91 > 79 characters)
            metric_values = [m.value for m in self.metrics if m.metric_name == metric_name]
                                                                               ^
security/network_monitoring.py:273:1: W293 blank line contains whitespace
        
^
security/network_monitoring.py:274:80: E501 line too long (102 > 79 characters)
        healthy_devices = len([d for d in self.devices.values() if d.status == NetworkStatus.HEALTHY])
                                                                               ^
security/network_monitoring.py:276:1: W293 blank line contains whitespace
        
^
security/network_monitoring.py:280:1: W293 blank line contains whitespace
        
^
security/network_monitoring.py:283:1: W293 blank line contains whitespace
        
^
security/network_monitoring.py:286:80: E501 line too long (93 > 79 characters)
    def add_monitoring_rule(self, rule_name: str, metric: str, threshold: float, level: str):
                                                                               ^
security/network_monitoring.py:304:80: E501 line too long (107 > 79 characters)
    def get_device_metrics(self, device_id: str, metric_name: Optional[str] = None) -> List[NetworkMetric]:
                                                                               ^
security/network_monitoring.py:308:80: E501 line too long (88 > 79 characters)
            device_metrics = [m for m in device_metrics if m.metric_name == metric_name]
                                                                               ^
security/network_monitoring.py:315:1: W293 blank line contains whitespace
        
^
security/network_monitoring.py:317:80: E501 line too long (82 > 79 characters)
        self.metrics = [m for m in self.metrics if m.timestamp > cutoff_timestamp]
                                                                               ^
security/network_monitoring.py:319:1: W293 blank line contains whitespace
        
^
security/network_monitoring.py:321:80: E501 line too long (82 > 79 characters)
            print(f"Удалено {removed_count} старых метрик (старше {hours} часов)")
                                                                               ^
security/network_monitoring.py:335:80: E501 line too long (108 > 79 characters)
            "healthy_devices": len([d for d in self.devices.values() if d.status == NetworkStatus.HEALTHY]),
                                                                               ^
security/network_monitoring.py:336:80: E501 line too long (110 > 79 characters)
            "degraded_devices": len([d for d in self.devices.values() if d.status == NetworkStatus.DEGRADED]),
                                                                               ^
security/network_monitoring.py:337:80: E501 line too long (110 > 79 characters)
            "critical_devices": len([d for d in self.devices.values() if d.status == NetworkStatus.CRITICAL]),
                                                                               ^
security/network_monitoring.py:338:80: E501 line too long (101 > 79 characters)
            "down_devices": len([d for d in self.devices.values() if d.status == NetworkStatus.DOWN])
                                                                               ^
security/network_monitoring.py:340:24: W292 no newline at end of file
        return topology                       ^
security/orchestration/__init__.py:31:2: W292 no newline at end of file
] ^
security/orchestration/kubernetes_orchestrator.py:76:80: E501 line too long (85 > 79 characters)
        data['created_at'] = self.created_at.isoformat() if self.created_at else None
                                                                               ^
security/orchestration/kubernetes_orchestrator.py:77:80: E501 line too long (91 > 79 characters)
        data['last_updated'] = self.last_updated.isoformat() if self.last_updated else None
                                                                               ^
security/orchestration/kubernetes_orchestrator.py:110:80: E501 line too long (85 > 79 characters)
        data['created_at'] = self.created_at.isoformat() if self.created_at else None
                                                                               ^
security/orchestration/kubernetes_orchestrator.py:111:80: E501 line too long (91 > 79 characters)
        data['last_updated'] = self.last_updated.isoformat() if self.last_updated else None
                                                                               ^
security/orchestration/kubernetes_orchestrator.py:143:80: E501 line too long (85 > 79 characters)
        data['created_at'] = self.created_at.isoformat() if self.created_at else None
                                                                               ^
security/orchestration/kubernetes_orchestrator.py:144:80: E501 line too long (91 > 79 characters)
        data['last_updated'] = self.last_updated.isoformat() if self.last_updated else None
                                                                               ^
security/orchestration/kubernetes_orchestrator.py:170:80: E501 line too long (91 > 79 characters)
        data['last_scaling'] = self.last_scaling.isoformat() if self.last_scaling else None
                                                                               ^
security/orchestration/kubernetes_orchestrator.py:173:80: E501 line too long (102 > 79 characters)
    def update_metrics(self, pods: List[PodInfo], services: List[ServiceInfo], nodes: List[NodeInfo]):
                                                                               ^
security/orchestration/kubernetes_orchestrator.py:176:80: E501 line too long (83 > 79 characters)
        self.running_pods = len([p for p in pods if p.status == PodStatus.RUNNING])
                                                                               ^
security/orchestration/kubernetes_orchestrator.py:177:80: E501 line too long (81 > 79 characters)
        self.failed_pods = len([p for p in pods if p.status == PodStatus.FAILED])
                                                                               ^
security/orchestration/kubernetes_orchestrator.py:180:80: E501 line too long (93 > 79 characters)
        self.active_services = len([s for s in services if s.status == ServiceStatus.ACTIVE])
                                                                               ^
security/orchestration/kubernetes_orchestrator.py:207:80: E501 line too long (81 > 79 characters)
        self.orchestration_metrics: OrchestrationMetrics = OrchestrationMetrics()
                                                                               ^
security/orchestration/kubernetes_orchestrator.py:250:80: E501 line too long (88 > 79 characters)
            self.log_activity("Kubernetes Orchestrator успешно инициализирован", "info")
                                                                               ^
security/orchestration/kubernetes_orchestrator.py:254:80: E501 line too long (92 > 79 characters)
            self.log_activity(f"Ошибка инициализации Kubernetes Orchestrator: {e}", "error")
                                                                               ^
security/orchestration/kubernetes_orchestrator.py:280:80: E501 line too long (88 > 79 characters)
            self.log_activity(f"Ошибка остановки Kubernetes Orchestrator: {e}", "error")
                                                                               ^
security/orchestration/kubernetes_orchestrator.py:300:80: E501 line too long (101 > 79 characters)
                        f"Сервис {service_info.name} успешно развернут с {len(pods_created)} подами",
                                                                               ^
security/orchestration/kubernetes_orchestrator.py:306:80: E501 line too long (99 > 79 characters)
                    self.log_activity(f"Ошибка развертывания сервиса {service_info.name}", "error")
                                                                               ^
security/orchestration/kubernetes_orchestrator.py:319:80: E501 line too long (82 > 79 characters)
                    self.log_activity(f"Сервис {service_id} не найден", "warning")
                                                                               ^
security/orchestration/kubernetes_orchestrator.py:336:80: E501 line too long (119 > 79 characters)
                current_pods = [p for p in self.pods.values() if p.labels and p.labels.get("service_id") == service_id]
                                                                               ^
security/orchestration/kubernetes_orchestrator.py:340:80: E501 line too long (87 > 79 characters)
                    self._create_additional_pods(service, replicas - len(current_pods))
                                                                               ^
security/orchestration/kubernetes_orchestrator.py:343:80: E501 line too long (88 > 79 characters)
                    self._remove_excess_pods(current_pods, len(current_pods) - replicas)
                                                                               ^
security/orchestration/kubernetes_orchestrator.py:357:80: E501 line too long (80 > 79 characters)
                    f"Сервис {service.name} масштабирован до {replicas} реплик",
                                                                               ^
security/orchestration/kubernetes_orchestrator.py:363:80: E501 line too long (91 > 79 characters)
            self.log_activity(f"Ошибка масштабирования сервиса {service_id}: {e}", "error")
                                                                               ^
security/orchestration/kubernetes_orchestrator.py:371:80: E501 line too long (115 > 79 characters)
                    return [p for p in self.pods.values() if p.labels and p.labels.get("service_id") == service_id]
                                                                               ^
security/orchestration/kubernetes_orchestrator.py:417:80: E501 line too long (85 > 79 characters)
            self.log_activity(f"Ошибка получения статуса оркестратора: {e}", "error")
                                                                               ^
security/orchestration/kubernetes_orchestrator.py:426:80: E501 line too long (87 > 79 characters)
            self.log_activity(f"Ошибка инициализации Kubernetes клиента: {e}", "error")
                                                                               ^
security/orchestration/kubernetes_orchestrator.py:452:80: E501 line too long (85 > 79 characters)
            self.log_activity(f"Ошибка загрузки существующих ресурсов: {e}", "error")
                                                                               ^
security/orchestration/kubernetes_orchestrator.py:479:80: E501 line too long (81 > 79 characters)
            # Фоновые задачи остановятся автоматически при остановке оркестратора
                                                                               ^
security/orchestration/kubernetes_orchestrator.py:484:80: E501 line too long (82 > 79 characters)
    def _create_service_info(self, service_config: Dict[str, Any]) -> ServiceInfo:
                                                                               ^
security/orchestration/kubernetes_orchestrator.py:487:80: E501 line too long (89 > 79 characters)
            service_id=f"service-{int(time.time() * 1000)}-{random.randint(1000, 9999)}",
                                                                               ^
security/orchestration/kubernetes_orchestrator.py:495:80: E501 line too long (93 > 79 characters)
            scaling_strategy=ScalingStrategy(service_config.get("scaling_strategy", "auto")),
                                                                               ^
security/orchestration/kubernetes_orchestrator.py:500:80: E501 line too long (83 > 79 characters)
    def _create_pods_for_service(self, service_info: ServiceInfo) -> List[PodInfo]:
                                                                               ^
security/orchestration/kubernetes_orchestrator.py:513:80: E501 line too long (140 > 79 characters)
                    image=service_info.labels.get("image", "aladdin/security:latest") if service_info.labels else "aladdin/security:latest",
                                                                               ^
security/orchestration/kubernetes_orchestrator.py:535:80: E501 line too long (130 > 79 characters)
                    image=service.labels.get("image", "aladdin/security:latest") if service.labels else "aladdin/security:latest",
                                                                               ^
security/orchestration/kubernetes_orchestrator.py:540:80: E501 line too long (84 > 79 characters)
            self.log_activity(f"Ошибка создания дополнительных подов: {e}", "error")
                                                                               ^
security/orchestration/kubernetes_orchestrator.py:550:80: E501 line too long (80 > 79 characters)
            self.log_activity(f"Ошибка удаления избыточных подов: {e}", "error")
                                                                               ^
security/orchestration/kubernetes_orchestrator.py:563:80: E501 line too long (98 > 79 characters)
                        self.log_activity(f"Под {pod.name} перешел в состояние FAILED", "warning")
                                                                               ^
security/orchestration/kubernetes_orchestrator.py:567:80: E501 line too long (118 > 79 characters)
                    service_pods = [p for p in self.pods.values() if p.labels.get("service_id") == service.service_id]
                                                                               ^
security/orchestration/kubernetes_orchestrator.py:568:80: E501 line too long (93 > 79 characters)
                    running_pods = [p for p in service_pods if p.status == PodStatus.RUNNING]
                                                                               ^
security/orchestration/kubernetes_orchestrator.py:572:80: E501 line too long (114 > 79 characters)
                        self.log_activity(f"Сервис {service.name} имеет недостаточно работающих подов", "warning")
                                                                               ^
security/orchestration/kubernetes_orchestrator.py:575:80: E501 line too long (82 > 79 characters)
            self.log_activity(f"Ошибка задачи мониторинга здоровья: {e}", "error")
                                                                               ^
security/orchestration/kubernetes_orchestrator.py:587:80: E501 line too long (118 > 79 characters)
                    service_pods = [p for p in self.pods.values() if p.labels.get("service_id") == service.service_id]
                                                                               ^
security/orchestration/kubernetes_orchestrator.py:592:80: E501 line too long (88 > 79 characters)
                    avg_cpu = sum(p.cpu_usage for p in service_pods) / len(service_pods)
                                                                               ^
security/orchestration/kubernetes_orchestrator.py:595:80: E501 line too long (97 > 79 characters)
                    if avg_cpu > self.scaling_threshold and service.replicas < self.max_replicas:
                                                                               ^
security/orchestration/kubernetes_orchestrator.py:596:80: E501 line too long (84 > 79 characters)
                        self.scale_service(service.service_id, service.replicas + 1)
                                                                               ^
security/orchestration/kubernetes_orchestrator.py:597:80: E501 line too long (80 > 79 characters)
                    elif avg_cpu < 0.3 and service.replicas > self.min_replicas:
                                                                               ^
security/orchestration/kubernetes_orchestrator.py:598:80: E501 line too long (84 > 79 characters)
                        self.scale_service(service.service_id, service.replicas - 1)
                                                                               ^
security/orchestration/kubernetes_orchestrator.py:601:80: E501 line too long (93 > 79 characters)
            self.log_activity(f"Ошибка задачи автоматического масштабирования: {e}", "error")
                                                                               ^
security/orchestration/kubernetes_orchestrator.py:618:80: E501 line too long (96 > 79 characters)
            with open("/tmp/aladdin_orchestration/last_state.json", 'w', encoding='utf-8') as f:
                                                                               ^
security/orchestration/kubernetes_orchestrator.py:623:80: E501 line too long (87 > 79 characters)
            self.log_activity(f"Ошибка сохранения состояния оркестрации: {e}", "error")
                                                                               ^
security/persistence_integrator.py:15:1: E302 expected 2 blank lines, found 1
@dataclass
^
security/persistence_integrator.py:34:1: E302 expected 2 blank lines, found 1
class PersistenceIntegrator:
^
security/persistence_integrator.py:36:1: W293 blank line contains whitespace
    
^
security/persistence_integrator.py:37:80: E501 line too long (90 > 79 characters)
    def __init__(self, sfm_instance, registry_file: str = "data/functions_registry.json"):
                                                                               ^
security/persistence_integrator.py:47:1: W293 blank line contains whitespace
        
^
security/persistence_integrator.py:50:1: W293 blank line contains whitespace
        
^
security/persistence_integrator.py:53:1: W293 blank line contains whitespace
    
^
security/persistence_integrator.py:59:1: W293 blank line contains whitespace
                
^
security/persistence_integrator.py:69:80: E501 line too long (134 > 79 characters)
                        created_at=function.created_at.isoformat() if hasattr(function, 'created_at') else datetime.now().isoformat(),
                                                                               ^
security/persistence_integrator.py:70:80: E501 line too long (152 > 79 characters)
                        last_execution=function.last_execution.isoformat() if hasattr(function, 'last_execution') and function.last_execution else None,
                                                                               ^
security/persistence_integrator.py:71:80: E501 line too long (80 > 79 characters)
                        execution_count=getattr(function, 'execution_count', 0),
                                                                               ^
security/persistence_integrator.py:74:80: E501 line too long (96 > 79 characters)
                        average_execution_time=getattr(function, 'average_execution_time', 0.0),
                                                                               ^
security/persistence_integrator.py:79:1: W293 blank line contains whitespace
                
^
security/persistence_integrator.py:84:80: E501 line too long (82 > 79 characters)
                    "functions": {k: asdict(v) for k, v in functions_data.items()}
                                                                               ^
security/persistence_integrator.py:86:1: W293 blank line contains whitespace
                
^
security/persistence_integrator.py:90:1: W293 blank line contains whitespace
                
^
security/persistence_integrator.py:93:1: W293 blank line contains whitespace
                
^
security/persistence_integrator.py:97:1: W293 blank line contains whitespace
    
^
security/persistence_integrator.py:104:1: W293 blank line contains whitespace
            
^
security/persistence_integrator.py:107:1: W293 blank line contains whitespace
            
^
security/persistence_integrator.py:110:1: W293 blank line contains whitespace
            
^
security/persistence_integrator.py:116:80: E501 line too long (88 > 79 characters)
                        # Регистрируем функцию БЕЗ auto_enable чтобы избежать блокировки
                                                                               ^
security/persistence_integrator.py:122:80: E501 line too long (112 > 79 characters)
                            security_level=getattr(self.sfm.SecurityLevel, func_data["security_level"].upper()),
                                                                               ^
security/persistence_integrator.py:126:1: W293 blank line contains whitespace
                        
^
security/persistence_integrator.py:130:80: E501 line too long (107 > 79 characters)
                            function.status = getattr(self.sfm.FunctionStatus, func_data["status"].upper())
                                                                               ^
security/persistence_integrator.py:131:1: W293 blank line contains whitespace
                            
^
security/persistence_integrator.py:137:1: W293 blank line contains whitespace
                            
^
security/persistence_integrator.py:139:1: W293 blank line contains whitespace
                            
^
security/persistence_integrator.py:143:1: W293 blank line contains whitespace
            
^
security/persistence_integrator.py:146:1: W293 blank line contains whitespace
            
^
security/persistence_integrator.py:150:1: W293 blank line contains whitespace
    
^
security/persistence_integrator.py:156:1: W293 blank line contains whitespace
            
^
security/persistence_integrator.py:160:80: E501 line too long (92 > 79 characters)
                print(f"✅ Функция {kwargs.get('function_id')} зарегистрирована и сохранена")
                                                                               ^
security/persistence_integrator.py:161:1: W293 blank line contains whitespace
            
^
security/persistence_integrator.py:163:1: W293 blank line contains whitespace
            
^
security/persistence_integrator.py:167:1: W293 blank line contains whitespace
    
^
security/persistence_integrator.py:172:1: W293 blank line contains whitespace
            
^
security/persistence_integrator.py:176:1: W293 blank line contains whitespace
            
^
security/persistence_integrator.py:178:1: W293 blank line contains whitespace
            
^
security/persistence_integrator.py:182:1: W293 blank line contains whitespace
    
^
security/persistence_integrator.py:187:1: W293 blank line contains whitespace
            
^
security/persistence_integrator.py:191:1: W293 blank line contains whitespace
            
^
security/persistence_integrator.py:193:1: W293 blank line contains whitespace
            
^
security/persistence_integrator.py:197:1: W293 blank line contains whitespace
    
^
security/persistence_integrator.py:203:80: E501 line too long (114 > 79 characters)
                "enabled_functions": len([f for f in self.sfm.functions.values() if f.status.value == "enabled"]),
                                                                               ^
security/persistence_integrator.py:204:80: E501 line too long (116 > 79 characters)
                "disabled_functions": len([f for f in self.sfm.functions.values() if f.status.value == "disabled"]),
                                                                               ^
security/persistence_integrator.py:205:80: E501 line too long (120 > 79 characters)
                "critical_functions": len([f for f in self.sfm.functions.values() if getattr(f, 'is_critical', False)]),
                                                                               ^
security/persistence_integrator.py:214:1: E305 expected 2 blank lines after class or function definition, found 1
if __name__ == "__main__":
^
security/preliminary/__init__.py:22:2: W292 no newline at end of file
] ^
security/preliminary/behavioral_analysis.py:14:1: F401 'typing.Union' imported but unused
from typing import Dict, List, Optional, Any, Union
^
security/preliminary/behavioral_analysis.py:17:1: F401 'json' imported but unused
import json
^
security/preliminary/behavioral_analysis.py:24:1: F401 'sklearn.metrics.silhouette_score' imported but unused
from sklearn.metrics import silhouette_score
^
security/preliminary/behavioral_analysis.py:25:1: F401 'sklearn.decomposition.PCA' imported but unused
from sklearn.decomposition import PCA
^
security/preliminary/behavioral_analysis.py:26:1: F401 'sklearn.manifold.TSNE' imported but unused
from sklearn.manifold import TSNE
^
security/preliminary/behavioral_analysis.py:29:1: F401 'core.security_base.SecurityEvent' imported but unused
from core.security_base import SecurityEvent, IncidentSeverity
^
security/preliminary/behavioral_analysis.py:29:1: F401 'core.security_base.IncidentSeverity' imported but unused
from core.security_base import SecurityEvent, IncidentSeverity
^
security/preliminary/behavioral_analysis.py:184:80: E501 line too long (82 > 79 characters)
                "baseline_features": self._extract_baseline_features(session_data)
                                                                               ^
security/preliminary/behavioral_analysis.py:343:80: E501 line too long (86 > 79 characters)
                description=f"Обнаружена аномалия в поведении пользователя {user_id}",
                                                                               ^
security/preliminary/behavioral_analysis.py:370:80: E501 line too long (81 > 79 characters)
        for pattern in profile.behavior_patterns[-50:]:  # Последние 50 паттернов
                                                                               ^
security/preliminary/behavioral_analysis.py:506:80: E501 line too long (80 > 79 characters)
                trend = "increasing" if values[-1] > values[0] else "decreasing"
                                                                               ^
security/preliminary/behavioral_analysis.py:634:80: E501 line too long (84 > 79 characters)
            risk_distribution[risk_level] = risk_distribution.get(risk_level, 0) + 1
                                                                               ^
security/preliminary/behavioral_analysis.py:640:80: E501 line too long (80 > 79 characters)
            anomaly_types[anomaly_type] = anomaly_types.get(anomaly_type, 0) + 1
                                                                               ^
security/preliminary/behavioral_analysis.py:665:10: W292 no newline at end of file
        }         ^
security/preliminary/behavioral_analysis_new.py:14:1: F401 'typing.Union' imported but unused
from typing import Dict, List, Optional, Any, Union
^
security/preliminary/behavioral_analysis_new.py:17:1: F401 'json' imported but unused
import json
^
security/preliminary/behavioral_analysis_new.py:24:1: F401 'sklearn.metrics.silhouette_score' imported but unused
from sklearn.metrics import silhouette_score
^
security/preliminary/behavioral_analysis_new.py:25:1: F401 'sklearn.decomposition.PCA' imported but unused
from sklearn.decomposition import PCA
^
security/preliminary/behavioral_analysis_new.py:26:1: F401 'sklearn.manifold.TSNE' imported but unused
from sklearn.manifold import TSNE
^
security/preliminary/behavioral_analysis_new.py:29:1: F401 'core.security_base.SecurityEvent' imported but unused
from core.security_base import SecurityEvent, IncidentSeverity
^
security/preliminary/behavioral_analysis_new.py:29:1: F401 'core.security_base.IncidentSeverity' imported but unused
from core.security_base import SecurityEvent, IncidentSeverity
^
security/preliminary/behavioral_analysis_new.py:184:80: E501 line too long (82 > 79 characters)
                "baseline_features": self._extract_baseline_features(session_data)
                                                                               ^
security/preliminary/behavioral_analysis_new.py:343:80: E501 line too long (86 > 79 characters)
                description=f"Обнаружена аномалия в поведении пользователя {user_id}",
                                                                               ^
security/preliminary/behavioral_analysis_new.py:370:80: E501 line too long (81 > 79 characters)
        for pattern in profile.behavior_patterns[-50:]:  # Последние 50 паттернов
                                                                               ^
security/preliminary/behavioral_analysis_new.py:506:80: E501 line too long (80 > 79 characters)
                trend = "increasing" if values[-1] > values[0] else "decreasing"
                                                                               ^
security/preliminary/behavioral_analysis_new.py:634:80: E501 line too long (84 > 79 characters)
            risk_distribution[risk_level] = risk_distribution.get(risk_level, 0) + 1
                                                                               ^
security/preliminary/behavioral_analysis_new.py:640:80: E501 line too long (80 > 79 characters)
            anomaly_types[anomaly_type] = anomaly_types.get(anomaly_type, 0) + 1
                                                                               ^
security/preliminary/behavioral_analysis_new.py:665:10: W292 no newline at end of file
        }         ^
security/preliminary/context_aware_access.py:11:1: F401 'hashlib' imported but unused
import hashlib
^
security/preliminary/context_aware_access.py:13:1: F401 'typing.Set' imported but unused
from typing import Dict, List, Optional, Any, Set, Tuple, Union
^
security/preliminary/context_aware_access.py:13:1: F401 'typing.Union' imported but unused
from typing import Dict, List, Optional, Any, Set, Tuple, Union
^
security/preliminary/context_aware_access.py:18:1: F401 'core.security_base.ThreatType' imported but unused
from core.security_base import SecurityEvent, IncidentSeverity, ThreatType
^
security/preliminary/context_aware_access.py:114:1: W293 blank line contains whitespace
    
^
security/preliminary/context_aware_access.py:117:80: E501 line too long (97 > 79 characters)
        self.logger = logging.getLogger(f"{self.__class__.__module__}.{self.__class__.__name__}")
                                                                               ^
security/preliminary/context_aware_access.py:118:1: W293 blank line contains whitespace
        
^
security/preliminary/context_aware_access.py:124:1: W293 blank line contains whitespace
        
^
security/preliminary/context_aware_access.py:129:1: W293 blank line contains whitespace
        
^
security/preliminary/context_aware_access.py:143:1: W293 blank line contains whitespace
        
^
security/preliminary/context_aware_access.py:152:1: W293 blank line contains whitespace
        
^
security/preliminary/context_aware_access.py:159:1: W293 blank line contains whitespace
        
^
security/preliminary/context_aware_access.py:161:1: W293 blank line contains whitespace
    
^
security/preliminary/context_aware_access.py:169:80: E501 line too long (95 > 79 characters)
                description="Разрешить полный доступ для доверенных устройств в домашней сети",
                                                                               ^
security/preliminary/context_aware_access.py:178:1: W293 blank line contains whitespace
            
^
security/preliminary/context_aware_access.py:191:1: W293 blank line contains whitespace
            
^
security/preliminary/context_aware_access.py:205:1: W293 blank line contains whitespace
            
^
security/preliminary/context_aware_access.py:210:80: E501 line too long (84 > 79 characters)
                description="Заблокировать развлекательный контент в школьные часы",
                                                                               ^
security/preliminary/context_aware_access.py:219:1: W293 blank line contains whitespace
            
^
security/preliminary/context_aware_access.py:232:1: W293 blank line contains whitespace
            
^
security/preliminary/context_aware_access.py:237:80: E501 line too long (89 > 79 characters)
                description="Запросить дополнительную аутентификацию при низком доверии",
                                                                               ^
security/preliminary/context_aware_access.py:245:1: W293 blank line contains whitespace
            
^
security/preliminary/context_aware_access.py:246:80: E501 line too long (89 > 79 characters)
            self.logger.info(f"Инициализировано {len(self.access_rules)} правил доступа")
                                                                               ^
security/preliminary/context_aware_access.py:247:1: W293 blank line contains whitespace
            
^
security/preliminary/context_aware_access.py:250:1: W293 blank line contains whitespace
    
^
security/preliminary/context_aware_access.py:251:67: W291 trailing whitespace
    def evaluate_access_request(self, user_id: str, resource: str, 
                                                                  ^
security/preliminary/context_aware_access.py:252:31: E128 continuation line under-indented for visual indent
                              context_data: ContextData) -> AccessDecision:
                              ^
security/preliminary/context_aware_access.py:264:1: W293 blank line contains whitespace
            
^
security/preliminary/context_aware_access.py:267:1: W293 blank line contains whitespace
            
^
security/preliminary/context_aware_access.py:270:1: W293 blank line contains whitespace
            
^
security/preliminary/context_aware_access.py:275:1: W293 blank line contains whitespace
            
^
security/preliminary/context_aware_access.py:286:80: E501 line too long (84 > 79 characters)
                reasoning=self._generate_reasoning(applicable_rules, context_score),
                                                                               ^
security/preliminary/context_aware_access.py:289:1: W293 blank line contains whitespace
            
^
security/preliminary/context_aware_access.py:292:1: W293 blank line contains whitespace
            
^
security/preliminary/context_aware_access.py:295:1: W293 blank line contains whitespace
            
^
security/preliminary/context_aware_access.py:299:80: E501 line too long (115 > 79 characters)
                severity=IncidentSeverity.LOW if decision == AccessDecisionType.ALLOW else IncidentSeverity.MEDIUM,
                                                                               ^
security/preliminary/context_aware_access.py:300:80: E501 line too long (89 > 79 characters)
                description=f"Принято решение о доступе: {decision.value} для {user_id}",
                                                                               ^
security/preliminary/context_aware_access.py:304:1: W293 blank line contains whitespace
            
^
security/preliminary/context_aware_access.py:305:80: E501 line too long (122 > 79 characters)
            self.logger.info(f"Принято решение о доступе: {decision.value} для {user_id} (уверенность: {confidence:.2f})")
                                                                               ^
security/preliminary/context_aware_access.py:307:1: W293 blank line contains whitespace
            
^
security/preliminary/context_aware_access.py:321:1: W293 blank line contains whitespace
    
^
security/preliminary/context_aware_access.py:327:1: W293 blank line contains whitespace
            
^
security/preliminary/context_aware_access.py:331:80: E501 line too long (94 > 79 characters)
                context_score += location_score * self.context_weights[ContextFactor.LOCATION]
                                                                               ^
security/preliminary/context_aware_access.py:333:1: W293 blank line contains whitespace
            
^
security/preliminary/context_aware_access.py:336:80: E501 line too long (82 > 79 characters)
            context_score += time_score * self.context_weights[ContextFactor.TIME]
                                                                               ^
security/preliminary/context_aware_access.py:338:1: W293 blank line contains whitespace
            
^
security/preliminary/context_aware_access.py:341:80: E501 line too long (86 > 79 characters)
            context_score += device_score * self.context_weights[ContextFactor.DEVICE]
                                                                               ^
security/preliminary/context_aware_access.py:343:1: W293 blank line contains whitespace
            
^
security/preliminary/context_aware_access.py:346:80: E501 line too long (81 > 79 characters)
                network_score = self._evaluate_network(context_data.network_type)
                                                                               ^
security/preliminary/context_aware_access.py:347:80: E501 line too long (92 > 79 characters)
                context_score += network_score * self.context_weights[ContextFactor.NETWORK]
                                                                               ^
security/preliminary/context_aware_access.py:349:1: W293 blank line contains whitespace
            
^
security/preliminary/context_aware_access.py:352:80: E501 line too long (95 > 79 characters)
            context_score += behavior_score * self.context_weights[ContextFactor.USER_BEHAVIOR]
                                                                               ^
security/preliminary/context_aware_access.py:354:1: W293 blank line contains whitespace
            
^
security/preliminary/context_aware_access.py:357:80: E501 line too long (88 > 79 characters)
            context_score += risk_score * self.context_weights[ContextFactor.RISK_LEVEL]
                                                                               ^
security/preliminary/context_aware_access.py:359:1: W293 blank line contains whitespace
            
^
security/preliminary/context_aware_access.py:362:80: E501 line too long (90 > 79 characters)
            context_score += trust_score * self.context_weights[ContextFactor.TRUST_SCORE]
                                                                               ^
security/preliminary/context_aware_access.py:364:1: W293 blank line contains whitespace
            
^
security/preliminary/context_aware_access.py:367:80: E501 line too long (92 > 79 characters)
            context_score += auth_score * self.context_weights[ContextFactor.AUTHENTICATION]
                                                                               ^
security/preliminary/context_aware_access.py:369:1: W293 blank line contains whitespace
            
^
security/preliminary/context_aware_access.py:373:1: W293 blank line contains whitespace
            
^
security/preliminary/context_aware_access.py:375:1: W293 blank line contains whitespace
            
^
security/preliminary/context_aware_access.py:379:1: W293 blank line contains whitespace
    
^
security/preliminary/context_aware_access.py:392:1: W293 blank line contains whitespace
                
^
security/preliminary/context_aware_access.py:396:1: W293 blank line contains whitespace
    
^
security/preliminary/context_aware_access.py:401:1: W293 blank line contains whitespace
            
^
security/preliminary/context_aware_access.py:405:1: W293 blank line contains whitespace
            
^
security/preliminary/context_aware_access.py:409:1: W293 blank line contains whitespace
            
^
security/preliminary/context_aware_access.py:413:1: W293 blank line contains whitespace
            
^
security/preliminary/context_aware_access.py:417:1: W293 blank line contains whitespace
                
^
security/preliminary/context_aware_access.py:421:1: W293 blank line contains whitespace
    
^
security/preliminary/context_aware_access.py:434:1: W293 blank line contains whitespace
                
^
security/preliminary/context_aware_access.py:438:1: W293 blank line contains whitespace
    
^
security/preliminary/context_aware_access.py:453:1: W293 blank line contains whitespace
                
^
security/preliminary/context_aware_access.py:457:1: W293 blank line contains whitespace
    
^
security/preliminary/context_aware_access.py:473:1: W293 blank line contains whitespace
                
^
security/preliminary/context_aware_access.py:477:1: W293 blank line contains whitespace
    
^
security/preliminary/context_aware_access.py:478:80: E501 line too long (84 > 79 characters)
    def _find_applicable_rules(self, context_data: ContextData) -> List[AccessRule]:
                                                                               ^
security/preliminary/context_aware_access.py:482:1: W293 blank line contains whitespace
            
^
security/preliminary/context_aware_access.py:486:1: W293 blank line contains whitespace
                
^
security/preliminary/context_aware_access.py:489:1: W293 blank line contains whitespace
            
^
security/preliminary/context_aware_access.py:492:1: W293 blank line contains whitespace
            
^
security/preliminary/context_aware_access.py:494:1: W293 blank line contains whitespace
            
^
security/preliminary/context_aware_access.py:498:1: W293 blank line contains whitespace
    
^
security/preliminary/context_aware_access.py:499:80: E501 line too long (89 > 79 characters)
    def _rule_matches_context(self, rule: AccessRule, context_data: ContextData) -> bool:
                                                                               ^
security/preliminary/context_aware_access.py:506:1: W293 blank line contains whitespace
                
^
security/preliminary/context_aware_access.py:508:80: E501 line too long (89 > 79 characters)
                    if not self._check_time_condition(condition, context_data.timestamp):
                                                                               ^
security/preliminary/context_aware_access.py:510:1: W293 blank line contains whitespace
                
^
security/preliminary/context_aware_access.py:514:1: W293 blank line contains whitespace
                
^
security/preliminary/context_aware_access.py:518:1: W293 blank line contains whitespace
                
^
security/preliminary/context_aware_access.py:522:1: W293 blank line contains whitespace
                
^
security/preliminary/context_aware_access.py:524:1: W293 blank line contains whitespace
            
^
security/preliminary/context_aware_access.py:526:1: W293 blank line contains whitespace
            
^
security/preliminary/context_aware_access.py:530:1: W293 blank line contains whitespace
    
^
security/preliminary/context_aware_access.py:531:80: E501 line too long (81 > 79 characters)
    def _check_time_condition(self, condition: str, timestamp: datetime) -> bool:
                                                                               ^
security/preliminary/context_aware_access.py:537:1: W293 blank line contains whitespace
            
^
security/preliminary/context_aware_access.py:541:1: W293 blank line contains whitespace
            
^
security/preliminary/context_aware_access.py:545:1: W293 blank line contains whitespace
            
^
security/preliminary/context_aware_access.py:547:1: W293 blank line contains whitespace
            
^
security/preliminary/context_aware_access.py:551:1: W293 blank line contains whitespace
    
^
security/preliminary/context_aware_access.py:552:63: W291 trailing whitespace
    def _make_access_decision(self, context_data: ContextData, 
                                                              ^
security/preliminary/context_aware_access.py:553:29: E128 continuation line under-indented for visual indent
                            applicable_rules: List[AccessRule], 
                            ^
security/preliminary/context_aware_access.py:553:64: W291 trailing whitespace
                            applicable_rules: List[AccessRule], 
                                                               ^
security/preliminary/context_aware_access.py:554:29: E128 continuation line under-indented for visual indent
                            context_score: float) -> Tuple[AccessDecisionType, AccessLevel, float]:
                            ^
security/preliminary/context_aware_access.py:554:80: E501 line too long (99 > 79 characters)
                            context_score: float) -> Tuple[AccessDecisionType, AccessLevel, float]:
                                                                               ^
security/preliminary/context_aware_access.py:560:80: E501 line too long (88 > 79 characters)
                    return AccessDecisionType.ALLOW, AccessLevel.STANDARD, context_score
                                                                               ^
security/preliminary/context_aware_access.py:562:80: E501 line too long (94 > 79 characters)
                    return AccessDecisionType.CHALLENGE, AccessLevel.RESTRICTED, context_score
                                                                               ^
security/preliminary/context_aware_access.py:564:80: E501 line too long (85 > 79 characters)
                    return AccessDecisionType.DENY, AccessLevel.DENIED, context_score
                                                                               ^
security/preliminary/context_aware_access.py:565:1: W293 blank line contains whitespace
            
^
security/preliminary/context_aware_access.py:571:80: E501 line too long (84 > 79 characters)
                    return AccessDecisionType.CHALLENGE, AccessLevel.RESTRICTED, 0.8
                                                                               ^
security/preliminary/context_aware_access.py:578:1: W293 blank line contains whitespace
            
^
security/preliminary/context_aware_access.py:581:80: E501 line too long (84 > 79 characters)
                return AccessDecisionType.ALLOW, AccessLevel.STANDARD, context_score
                                                                               ^
security/preliminary/context_aware_access.py:583:80: E501 line too long (90 > 79 characters)
                return AccessDecisionType.CHALLENGE, AccessLevel.RESTRICTED, context_score
                                                                               ^
security/preliminary/context_aware_access.py:584:1: W293 blank line contains whitespace
                
^
security/preliminary/context_aware_access.py:588:1: W293 blank line contains whitespace
    
^
security/preliminary/context_aware_access.py:589:70: W291 trailing whitespace
    def _generate_reasoning(self, applicable_rules: List[AccessRule], 
                                                                     ^
security/preliminary/context_aware_access.py:590:27: E128 continuation line under-indented for visual indent
                          context_score: float) -> str:
                          ^
security/preliminary/context_aware_access.py:594:80: E501 line too long (83 > 79 characters)
                return f"Решение на основе контекстного балла: {context_score:.2f}"
                                                                               ^
security/preliminary/context_aware_access.py:595:1: W293 blank line contains whitespace
            
^
security/preliminary/context_aware_access.py:597:80: E501 line too long (103 > 79 characters)
            return f"Применены правила: {', '.join(rule_names)}. Контекстный балл: {context_score:.2f}"
                                                                               ^
security/preliminary/context_aware_access.py:598:1: W293 blank line contains whitespace
            
^
security/preliminary/context_aware_access.py:602:1: W293 blank line contains whitespace
    
^
security/preliminary/context_aware_access.py:604:27: E128 continuation line under-indented for visual indent
                          context_conditions: Dict[ContextFactor, Any],
                          ^
security/preliminary/context_aware_access.py:605:27: E128 continuation line under-indented for visual indent
                          access_level: AccessLevel, priority: int = 100) -> bool:
                          ^
security/preliminary/context_aware_access.py:605:80: E501 line too long (82 > 79 characters)
                          access_level: AccessLevel, priority: int = 100) -> bool:
                                                                               ^
security/preliminary/context_aware_access.py:622:1: W293 blank line contains whitespace
            
^
security/preliminary/context_aware_access.py:631:1: W293 blank line contains whitespace
            
^
security/preliminary/context_aware_access.py:633:1: W293 blank line contains whitespace
            
^
security/preliminary/context_aware_access.py:642:1: W293 blank line contains whitespace
            
^
security/preliminary/context_aware_access.py:645:1: W293 blank line contains whitespace
            
^
security/preliminary/context_aware_access.py:649:1: W293 blank line contains whitespace
    
^
security/preliminary/context_aware_access.py:663:1: W293 blank line contains whitespace
            
^
security/preliminary/context_aware_access.py:665:1: W293 blank line contains whitespace
            
^
security/preliminary/context_aware_access.py:670:1: W293 blank line contains whitespace
            
^
security/preliminary/context_aware_access.py:672:1: W293 blank line contains whitespace
            
^
security/preliminary/context_aware_access.py:675:1: W293 blank line contains whitespace
            
^
security/preliminary/context_aware_access.py:679:1: W293 blank line contains whitespace
    
^
security/preliminary/context_aware_access.py:692:1: W293 blank line contains whitespace
            
^
security/preliminary/context_aware_access.py:695:1: W293 blank line contains whitespace
            
^
security/preliminary/context_aware_access.py:704:1: W293 blank line contains whitespace
            
^
security/preliminary/context_aware_access.py:707:1: W293 blank line contains whitespace
            
^
security/preliminary/context_aware_access.py:711:1: W293 blank line contains whitespace
    
^
security/preliminary/context_aware_access.py:712:80: E501 line too long (82 > 79 characters)
    def get_access_summary(self, user_id: str, hours: int = 24) -> Dict[str, Any]:
                                                                               ^
security/preliminary/context_aware_access.py:723:1: W293 blank line contains whitespace
            
^
security/preliminary/context_aware_access.py:726:49: W291 trailing whitespace
                d for d in self.access_decisions 
                                                ^
security/preliminary/context_aware_access.py:729:1: W293 blank line contains whitespace
            
^
security/preliminary/context_aware_access.py:737:1: W293 blank line contains whitespace
            
^
security/preliminary/context_aware_access.py:742:1: W293 blank line contains whitespace
            
^
security/preliminary/context_aware_access.py:746:80: E501 line too long (90 > 79 characters)
                decision_counts[decision_type] = decision_counts.get(decision_type, 0) + 1
                                                                               ^
security/preliminary/context_aware_access.py:747:1: W293 blank line contains whitespace
                
^
security/preliminary/context_aware_access.py:750:80: E501 line too long (96 > 79 characters)
                access_level_counts[access_level] = access_level_counts.get(access_level, 0) + 1
                                                                               ^
security/preliminary/context_aware_access.py:751:1: W293 blank line contains whitespace
                
^
security/preliminary/context_aware_access.py:754:1: W293 blank line contains whitespace
            
^
security/preliminary/context_aware_access.py:756:80: E501 line too long (106 > 79 characters)
            avg_confidence = sum(confidence_scores) / len(confidence_scores) if confidence_scores else 0.0
                                                                               ^
security/preliminary/context_aware_access.py:757:1: W293 blank line contains whitespace
            
^
security/preliminary/context_aware_access.py:776:1: W293 blank line contains whitespace
            
^
security/preliminary/context_aware_access.py:780:1: W293 blank line contains whitespace
    
^
security/preliminary/context_aware_access.py:790:1: W293 blank line contains whitespace
            
^
security/preliminary/context_aware_access.py:798:80: E501 line too long (115 > 79 characters)
                    str(rule.priority): len([r for r in self.access_rules.values() if r.priority == rule.priority])
                                                                               ^
security/preliminary/context_aware_access.py:802:80: E501 line too long (101 > 79 characters)
                    decision.value: len([d for d in self.access_decisions if d.decision == decision])
                                                                               ^
security/preliminary/context_aware_access.py:805:80: E501 line too long (89 > 79 characters)
                "context_weights": {k.value: v for k, v in self.context_weights.items()},
                                                                               ^
security/preliminary/context_aware_access.py:806:80: E501 line too long (107 > 79 characters)
                "context_access_levels": {k.value: v.value for k, v in self.context_access_levels.items()},
                                                                               ^
security/preliminary/context_aware_access.py:809:1: W293 blank line contains whitespace
            
^
security/preliminary/context_aware_access.py:811:1: W293 blank line contains whitespace
            
^
security/preliminary/context_aware_access.py:814:56: W292 no newline at end of file
            return {"status": "error", "error": str(e)}                                                       ^
security/preliminary/mfa_service.py:12:1: F401 'hashlib' imported but unused
import hashlib
^
security/preliminary/mfa_service.py:13:1: F401 'hmac' imported but unused
import hmac
^
security/preliminary/mfa_service.py:14:1: F401 'base64' imported but unused
import base64
^
security/preliminary/mfa_service.py:21:1: F401 'core.security_base.ThreatType' imported but unused
from core.security_base import SecurityEvent, IncidentSeverity, ThreatType
^
security/preliminary/mfa_service.py:60:80: E501 line too long (96 > 79 characters)
    expires_at: datetime = field(default_factory=lambda: datetime.now() + timedelta(minutes=10))
                                                                               ^
security/preliminary/mfa_service.py:75:80: E501 line too long (95 > 79 characters)
    expires_at: datetime = field(default_factory=lambda: datetime.now() + timedelta(minutes=5))
                                                                               ^
security/preliminary/mfa_service.py:101:80: E501 line too long (81 > 79 characters)
    """
    Многофакторная аутентификация для семей
    Поддерживает различные методы аутентификации в зависимости от возраста и роли
    """
       
                                           
                           ^
security/preliminary/mfa_service.py:103:1: W293 blank line contains whitespace
    
^
security/preliminary/mfa_service.py:106:80: E501 line too long (97 > 79 characters)
        self.logger = logging.getLogger(f"{self.__class__.__module__}.{self.__class__.__name__}")
                                                                               ^
security/preliminary/mfa_service.py:107:1: W293 blank line contains whitespace
        
^
security/preliminary/mfa_service.py:114:1: W293 blank line contains whitespace
        
^
security/preliminary/mfa_service.py:120:1: W293 blank line contains whitespace
        
^
security/preliminary/mfa_service.py:126:80: E501 line too long (88 > 79 characters)
            UserRole.ADMIN: [MFAMethod.TOTP, MFAMethod.BIOMETRIC, MFAMethod.BACKUP_CODE]
                                                                               ^
security/preliminary/mfa_service.py:128:1: W293 blank line contains whitespace
        
^
security/preliminary/mfa_service.py:130:1: W293 blank line contains whitespace
    
^
security/preliminary/mfa_service.py:153:80: E501 line too long (80 > 79 characters)
                    enabled_methods=set(self.default_methods[UserRole.ELDERLY]),
                                                                               ^
security/preliminary/mfa_service.py:158:1: W293 blank line contains whitespace
            
^
security/preliminary/mfa_service.py:161:1: W293 blank line contains whitespace
            
^
security/preliminary/mfa_service.py:163:1: W293 blank line contains whitespace
            
^
security/preliminary/mfa_service.py:166:1: W293 blank line contains whitespace
    
^
security/preliminary/mfa_service.py:167:64: W291 trailing whitespace
    def create_user_profile(self, user_id: str, role: UserRole, 
                                                               ^
security/preliminary/mfa_service.py:168:28: E128 continuation line under-indented for visual indent
                           phone_number: Optional[str] = None,
                           ^
security/preliminary/mfa_service.py:169:28: E128 continuation line under-indented for visual indent
                           email: Optional[str] = None) -> bool:
                           ^
security/preliminary/mfa_service.py:182:80: E501 line too long (85 > 79 characters)
                self.logger.warning(f"Профиль пользователя {user_id} уже существует")
                                                                               ^
security/preliminary/mfa_service.py:184:1: W293 blank line contains whitespace
            
^
security/preliminary/mfa_service.py:189:80: E501 line too long (85 > 79 characters)
                enabled_methods=set(self.default_methods.get(role, [MFAMethod.SMS])),
                                                                               ^
security/preliminary/mfa_service.py:193:1: W293 blank line contains whitespace
            
^
security/preliminary/mfa_service.py:196:1: W293 blank line contains whitespace
            
^
security/preliminary/mfa_service.py:198:1: W293 blank line contains whitespace
            
^
security/preliminary/mfa_service.py:203:80: E501 line too long (98 > 79 characters)
                description=f"Создан профиль MFA для пользователя {user_id} с ролью {role.value}",
                                                                               ^
security/preliminary/mfa_service.py:207:1: W293 blank line contains whitespace
            
^
security/preliminary/mfa_service.py:210:1: W293 blank line contains whitespace
            
^
security/preliminary/mfa_service.py:214:1: W293 blank line contains whitespace
    
^
security/preliminary/mfa_service.py:215:62: W291 trailing whitespace
    def start_mfa_session(self, user_id: str, device_id: str, 
                                                             ^
security/preliminary/mfa_service.py:216:26: E128 continuation line under-indented for visual indent
                         context: Dict[str, Any]) -> Optional[str]:
                         ^
security/preliminary/mfa_service.py:229:80: E501 line too long (80 > 79 characters)
                self.logger.warning(f"Профиль пользователя {user_id} не найден")
                                                                               ^
security/preliminary/mfa_service.py:231:1: W293 blank line contains whitespace
            
^
security/preliminary/mfa_service.py:233:1: W293 blank line contains whitespace
            
^
security/preliminary/mfa_service.py:238:1: W293 blank line contains whitespace
            
^
security/preliminary/mfa_service.py:239:80: E501 line too long (96 > 79 characters)
            if profile.is_locked and profile.lock_until and profile.lock_until > datetime.now():
                                                                               ^
security/preliminary/mfa_service.py:240:80: E501 line too long (84 > 79 characters)
                self.logger.warning(f"Пользователь {user_id} временно заблокирован")
                                                                               ^
security/preliminary/mfa_service.py:242:1: W293 blank line contains whitespace
            
^
security/preliminary/mfa_service.py:253:1: W293 blank line contains whitespace
            
^
security/preliminary/mfa_service.py:255:1: W293 blank line contains whitespace
            
^
security/preliminary/mfa_service.py:264:1: W293 blank line contains whitespace
            
^
security/preliminary/mfa_service.py:265:80: E501 line too long (90 > 79 characters)
            self.logger.info(f"Начата сессия MFA {session_id} для пользователя {user_id}")
                                                                               ^
security/preliminary/mfa_service.py:267:1: W293 blank line contains whitespace
            
^
security/preliminary/mfa_service.py:271:1: W293 blank line contains whitespace
    
^
security/preliminary/mfa_service.py:285:1: W293 blank line contains whitespace
            
^
security/preliminary/mfa_service.py:287:1: W293 blank line contains whitespace
            
^
security/preliminary/mfa_service.py:293:1: W293 blank line contains whitespace
            
^
security/preliminary/mfa_service.py:296:80: E501 line too long (102 > 79 characters)
                self.logger.warning(f"Метод {method.value} не поддерживается для сессии {session_id}")
                                                                               ^
security/preliminary/mfa_service.py:298:1: W293 blank line contains whitespace
            
^
security/preliminary/mfa_service.py:301:1: W293 blank line contains whitespace
            
^
security/preliminary/mfa_service.py:310:1: W293 blank line contains whitespace
            
^
security/preliminary/mfa_service.py:312:1: W293 blank line contains whitespace
            
^
security/preliminary/mfa_service.py:315:1: W293 blank line contains whitespace
            
^
security/preliminary/mfa_service.py:321:80: E501 line too long (100 > 79 characters)
                    description=f"Отправлен код MFA методом {method.value} для сессии {session_id}",
                                                                               ^
security/preliminary/mfa_service.py:325:1: W293 blank line contains whitespace
                
^
security/preliminary/mfa_service.py:326:80: E501 line too long (101 > 79 characters)
                self.logger.info(f"Отправлен код MFA методом {method.value} для сессии {session_id}")
                                                                               ^
security/preliminary/mfa_service.py:329:80: E501 line too long (85 > 79 characters)
                self.logger.error(f"Ошибка отправки кода MFA методом {method.value}")
                                                                               ^
security/preliminary/mfa_service.py:331:1: W293 blank line contains whitespace
            
^
security/preliminary/mfa_service.py:335:1: W293 blank line contains whitespace
    
^
security/preliminary/mfa_service.py:336:66: W291 trailing whitespace
    def verify_mfa_code(self, session_id: str, method: MFAMethod, 
                                                                 ^
security/preliminary/mfa_service.py:337:24: E128 continuation line under-indented for visual indent
                       code: str) -> Tuple[bool, str]:
                       ^
security/preliminary/mfa_service.py:350:1: W293 blank line contains whitespace
            
^
security/preliminary/mfa_service.py:352:1: W293 blank line contains whitespace
            
^
security/preliminary/mfa_service.py:357:1: W293 blank line contains whitespace
            
^
security/preliminary/mfa_service.py:363:1: W293 blank line contains whitespace
            
^
security/preliminary/mfa_service.py:367:58: W291 trailing whitespace
                if (code_obj.session_id == session_id and 
                                                         ^
security/preliminary/mfa_service.py:368:50: W291 trailing whitespace
                    code_obj.method == method and 
                                                 ^
security/preliminary/mfa_service.py:370:5: E129 visually indented line with same indent as next logical line
                    code_obj.expires_at > datetime.now()):
    ^
security/preliminary/mfa_service.py:373:1: W293 blank line contains whitespace
            
^
security/preliminary/mfa_service.py:377:1: W293 blank line contains whitespace
            
^
security/preliminary/mfa_service.py:383:1: W293 blank line contains whitespace
            
^
security/preliminary/mfa_service.py:389:1: W293 blank line contains whitespace
                
^
security/preliminary/mfa_service.py:394:1: W293 blank line contains whitespace
                    
^
security/preliminary/mfa_service.py:401:1: W293 blank line contains whitespace
                
^
security/preliminary/mfa_service.py:406:80: E501 line too long (102 > 79 characters)
                    description=f"Подтвержден код MFA методом {method.value} для сессии {session_id}",
                                                                               ^
security/preliminary/mfa_service.py:410:1: W293 blank line contains whitespace
                
^
security/preliminary/mfa_service.py:416:1: W293 blank line contains whitespace
                
^
security/preliminary/mfa_service.py:422:1: W293 blank line contains whitespace
                
^
security/preliminary/mfa_service.py:424:1: W293 blank line contains whitespace
            
^
security/preliminary/mfa_service.py:428:1: W293 blank line contains whitespace
    
^
security/preliminary/mfa_service.py:440:1: W293 blank line contains whitespace
            
^
security/preliminary/mfa_service.py:442:1: W293 blank line contains whitespace
            
^
security/preliminary/mfa_service.py:449:80: E501 line too long (90 > 79 characters)
                "verified_methods": [method.value for method in session.verified_methods],
                                                                               ^
security/preliminary/mfa_service.py:457:1: W293 blank line contains whitespace
            
^
security/preliminary/mfa_service.py:461:1: W293 blank line contains whitespace
    
^
security/preliminary/mfa_service.py:471:1: W293 blank line contains whitespace
            
^
security/preliminary/mfa_service.py:475:1: W293 blank line contains whitespace
            
^
security/preliminary/mfa_service.py:478:1: W293 blank line contains whitespace
            
^
security/preliminary/mfa_service.py:484:1: W293 blank line contains whitespace
            
^
security/preliminary/mfa_service.py:487:1: W293 blank line contains whitespace
            
^
security/preliminary/mfa_service.py:489:80: E501 line too long (104 > 79 characters)
                self.logger.info(f"Очищено {len(expired_sessions)} сессий и {len(expired_codes)} кодов")
                                                                               ^
security/preliminary/mfa_service.py:490:1: W293 blank line contains whitespace
            
^
security/preliminary/mfa_service.py:492:1: W293 blank line contains whitespace
            
^
security/preliminary/mfa_service.py:496:1: W293 blank line contains whitespace
    
^
security/preliminary/mfa_service.py:511:1: W293 blank line contains whitespace
    
^
security/preliminary/mfa_service.py:519:1: W293 blank line contains whitespace
    
^
security/preliminary/mfa_service.py:520:80: E501 line too long (80 > 79 characters)
    def _deliver_code(self, user_id: str, method: MFAMethod, code: str) -> bool:
                                                                               ^
security/preliminary/mfa_service.py:526:1: W293 blank line contains whitespace
            
^
security/preliminary/mfa_service.py:529:80: E501 line too long (87 > 79 characters)
                self.logger.info(f"SMS код {code} отправлен на {profile.phone_number}")
                                                                               ^
security/preliminary/mfa_service.py:533:80: E501 line too long (82 > 79 characters)
                self.logger.info(f"Email код {code} отправлен на {profile.email}")
                                                                               ^
security/preliminary/mfa_service.py:545:34: F541 f-string is missing placeholders
                self.logger.info(f"Запрос биометрической аутентификации")
                                 ^
security/preliminary/mfa_service.py:549:34: F541 f-string is missing placeholders
                self.logger.info(f"Использован резервный код")
                                 ^
security/preliminary/mfa_service.py:551:1: W293 blank line contains whitespace
            
^
security/preliminary/mfa_service.py:553:1: W293 blank line contains whitespace
            
^
security/preliminary/mfa_service.py:557:1: W293 blank line contains whitespace
    
^
security/preliminary/mfa_service.py:567:1: W293 blank line contains whitespace
                
^
security/preliminary/mfa_service.py:571:1: W293 blank line contains whitespace
    
^
security/preliminary/mfa_service.py:578:1: W293 blank line contains whitespace
            
^
security/preliminary/mfa_service.py:582:1: W293 blank line contains whitespace
    
^
security/preliminary/mfa_service.py:589:1: W293 blank line contains whitespace
            
^
security/preliminary/mfa_service.py:597:1: W293 blank line contains whitespace
            
^
security/preliminary/mfa_service.py:599:1: W293 blank line contains whitespace
            
^
security/preliminary/mfa_service.py:603:1: W293 blank line contains whitespace
    
^
security/preliminary/mfa_service.py:612:1: W293 blank line contains whitespace
                
^
security/preliminary/mfa_service.py:617:80: E501 line too long (100 > 79 characters)
                    description=f"Пользователь {user_id} заблокирован из-за превышения попыток MFA",
                                                                               ^
security/preliminary/mfa_service.py:621:1: W293 blank line contains whitespace
                
^
security/preliminary/mfa_service.py:622:80: E501 line too long (99 > 79 characters)
                self.logger.warning(f"Пользователь {user_id} заблокирован до {profile.lock_until}")
                                                                               ^
security/preliminary/mfa_service.py:623:1: W293 blank line contains whitespace
            
^
security/preliminary/mfa_service.py:626:1: W293 blank line contains whitespace
    
^
security/preliminary/mfa_service.py:636:1: W293 blank line contains whitespace
            
^
security/preliminary/mfa_service.py:642:80: E501 line too long (117 > 79 characters)
                "pending_sessions": len([s for s in self.active_sessions.values() if s.status == MFAStatus.PENDING]),
                                                                               ^
security/preliminary/mfa_service.py:643:80: E501 line too long (119 > 79 characters)
                "verified_sessions": len([s for s in self.active_sessions.values() if s.status == MFAStatus.VERIFIED]),
                                                                               ^
security/preliminary/mfa_service.py:644:80: E501 line too long (117 > 79 characters)
                "expired_sessions": len([s for s in self.active_sessions.values() if s.expires_at < datetime.now()]),
                                                                               ^
security/preliminary/mfa_service.py:647:80: E501 line too long (93 > 79 characters)
                "locked_users": len([p for p in self.user_profiles.values() if p.is_locked]),
                                                                               ^
security/preliminary/mfa_service.py:649:80: E501 line too long (95 > 79 characters)
                    role.value: len([p for p in self.user_profiles.values() if p.role == role])
                                                                               ^
security/preliminary/mfa_service.py:653:80: E501 line too long (104 > 79 characters)
                    method.value: len([s for s in self.active_sessions.values() if method in s.methods])
                                                                               ^
security/preliminary/mfa_service.py:657:1: W293 blank line contains whitespace
            
^
security/preliminary/mfa_service.py:659:1: W293 blank line contains whitespace
            
^
security/preliminary/mfa_service.py:662:56: W292 no newline at end of file
            return {"status": "error", "error": str(e)}                                                       ^
security/preliminary/policy_engine.py:11:1: F401 'json' imported but unused
import json
^
security/preliminary/policy_engine.py:12:1: F401 'datetime.timedelta' imported but unused
from datetime import datetime, timedelta
^
security/preliminary/policy_engine.py:13:1: F401 'typing.Set' imported but unused
from typing import Dict, List, Optional, Any, Set, Tuple, Union
^
security/preliminary/policy_engine.py:13:1: F401 'typing.Tuple' imported but unused
from typing import Dict, List, Optional, Any, Set, Tuple, Union
^
security/preliminary/policy_engine.py:13:1: F401 'typing.Union' imported but unused
from typing import Dict, List, Optional, Any, Set, Tuple, Union
^
security/preliminary/policy_engine.py:18:1: F401 'core.security_base.ThreatType' imported but unused
from core.security_base import SecurityEvent, IncidentSeverity, ThreatType
^
security/preliminary/policy_engine.py:93:80: E501 line too long (82 > 79 characters)
    parameters: Dict[str, Any] = field(default_factory=dict)  # Параметры действия
                                                                               ^
security/preliminary/policy_engine.py:108:80: E501 line too long (81 > 79 characters)
    target_users: List[str] = field(default_factory=list)  # Целевые пользователи
                                                                               ^
security/preliminary/policy_engine.py:109:80: E501 line too long (81 > 79 characters)
    target_devices: List[str] = field(default_factory=list)  # Целевые устройства
                                                                               ^
security/preliminary/policy_engine.py:110:80: E501 line too long (86 > 79 characters)
    target_applications: List[str] = field(default_factory=list)  # Целевые приложения
                                                                               ^
security/preliminary/policy_engine.py:137:1: W293 blank line contains whitespace
    
^
security/preliminary/policy_engine.py:140:80: E501 line too long (97 > 79 characters)
        self.logger = logging.getLogger(f"{self.__class__.__module__}.{self.__class__.__name__}")
                                                                               ^
security/preliminary/policy_engine.py:141:1: W293 blank line contains whitespace
        
^
security/preliminary/policy_engine.py:145:80: E501 line too long (87 > 79 characters)
        self.policy_cache: Dict[str, List[SecurityPolicy]] = {}  # Кэш политик по типам
                                                                               ^
security/preliminary/policy_engine.py:147:1: W293 blank line contains whitespace
        
^
security/preliminary/policy_engine.py:153:1: W293 blank line contains whitespace
        
^
security/preliminary/policy_engine.py:162:1: W293 blank line contains whitespace
        
^
security/preliminary/policy_engine.py:164:1: W293 blank line contains whitespace
    
^
security/preliminary/policy_engine.py:172:80: E501 line too long (82 > 79 characters)
                    "description": "Блокировка нежелательного контента для детей",
                                                                               ^
security/preliminary/policy_engine.py:176:80: E501 line too long (109 > 79 characters)
                        PolicyCondition("user_age", ConditionOperator.LESS_THAN, 18, "Возраст пользователя"),
                                                                               ^
security/preliminary/policy_engine.py:177:80: E501 line too long (138 > 79 characters)
                        PolicyCondition("content_category", ConditionOperator.IN, ["adult", "violence", "gambling"], "Категория контента")
                                                                               ^
security/preliminary/policy_engine.py:180:80: E501 line too long (124 > 79 characters)
                        PolicyAction(ActionType.BLOCK, {"reason": "Нежелательный контент для детей"}, "Блокировка доступа"),
                                                                               ^
security/preliminary/policy_engine.py:181:80: E501 line too long (109 > 79 characters)
                        PolicyAction(ActionType.NOTIFY, {"recipients": ["parents"]}, "Уведомление родителей")
                                                                               ^
security/preliminary/policy_engine.py:188:80: E501 line too long (100 > 79 characters)
                    "description": "Блокировка подозрительных сайтов и уведомления о мошенничестве",
                                                                               ^
security/preliminary/policy_engine.py:192:80: E501 line too long (112 > 79 characters)
                        PolicyCondition("user_age", ConditionOperator.GREATER_THAN, 65, "Возраст пользователя"),
                                                                               ^
security/preliminary/policy_engine.py:193:80: E501 line too long (136 > 79 characters)
                        PolicyCondition("website_category", ConditionOperator.IN, ["scam", "phishing", "suspicious"], "Категория сайта")
                                                                               ^
security/preliminary/policy_engine.py:196:80: E501 line too long (110 > 79 characters)
                        PolicyAction(ActionType.BLOCK, {"reason": "Подозрительный сайт"}, "Блокировка сайта"),
                                                                               ^
security/preliminary/policy_engine.py:197:80: E501 line too long (131 > 79 characters)
                        PolicyAction(ActionType.NOTIFY, {"recipients": ["family"], "urgency": "high"}, "Срочное уведомление семьи")
                                                                               ^
security/preliminary/policy_engine.py:204:80: E501 line too long (81 > 79 characters)
                    "description": "Ограничение времени использования устройств",
                                                                               ^
security/preliminary/policy_engine.py:208:80: E501 line too long (138 > 79 characters)
                        PolicyCondition("current_time", ConditionOperator.TIME_RANGE, {"start": "22:00", "end": "07:00"}, "Ночное время"),
                                                                               ^
security/preliminary/policy_engine.py:209:80: E501 line too long (118 > 79 characters)
                        PolicyCondition("user_role", ConditionOperator.IN, ["child", "teenager"], "Роль пользователя")
                                                                               ^
security/preliminary/policy_engine.py:212:80: E501 line too long (116 > 79 characters)
                        PolicyAction(ActionType.BLOCK, {"reason": "Время ограничено"}, "Блокировка в ночное время"),
                                                                               ^
security/preliminary/policy_engine.py:213:80: E501 line too long (109 > 79 characters)
                        PolicyAction(ActionType.NOTIFY, {"recipients": ["parents"]}, "Уведомление родителей")
                                                                               ^
security/preliminary/policy_engine.py:220:80: E501 line too long (85 > 79 characters)
                    "description": "Проверка безопасности устройств при подключении",
                                                                               ^
security/preliminary/policy_engine.py:224:80: E501 line too long (126 > 79 characters)
                        PolicyCondition("device_trust_score", ConditionOperator.LESS_THAN, 0.7, "Уровень доверия устройства"),
                                                                               ^
security/preliminary/policy_engine.py:225:80: E501 line too long (118 > 79 characters)
                        PolicyCondition("device_encryption", ConditionOperator.EQUALS, False, "Шифрование устройства")
                                                                               ^
security/preliminary/policy_engine.py:228:80: E501 line too long (122 > 79 characters)
                        PolicyAction(ActionType.QUARANTINE, {"reason": "Небезопасное устройство"}, "Карантин устройства"),
                                                                               ^
security/preliminary/policy_engine.py:229:80: E501 line too long (112 > 79 characters)
                        PolicyAction(ActionType.NOTIFY, {"recipients": ["admin"]}, "Уведомление администратора")
                                                                               ^
security/preliminary/policy_engine.py:240:80: E501 line too long (127 > 79 characters)
                        PolicyCondition("data_type", ConditionOperator.IN, ["personal", "financial", "medical"], "Тип данных"),
                                                                               ^
security/preliminary/policy_engine.py:241:80: E501 line too long (130 > 79 characters)
                        PolicyCondition("access_location", ConditionOperator.NOT_IN, ["home", "office"], "Местоположение доступа")
                                                                               ^
security/preliminary/policy_engine.py:244:80: E501 line too long (115 > 79 characters)
                        PolicyAction(ActionType.DENY, {"reason": "Небезопасное местоположение"}, "Запрет доступа"),
                                                                               ^
security/preliminary/policy_engine.py:245:80: E501 line too long (107 > 79 characters)
                        PolicyAction(ActionType.LOG, {"level": "security"}, "Логирование попытки доступа"),
                                                                               ^
security/preliminary/policy_engine.py:246:80: E501 line too long (99 > 79 characters)
                        PolicyAction(ActionType.ESCALATE, {"level": "high"}, "Эскалация инцидента")
                                                                               ^
security/preliminary/policy_engine.py:251:1: W293 blank line contains whitespace
            
^
security/preliminary/policy_engine.py:264:80: E501 line too long (82 > 79 characters)
                    target_applications=policy_data.get("target_applications", [])
                                                                               ^
security/preliminary/policy_engine.py:267:1: W293 blank line contains whitespace
            
^
security/preliminary/policy_engine.py:270:1: W293 blank line contains whitespace
            
^
security/preliminary/policy_engine.py:271:80: E501 line too long (91 > 79 characters)
            self.logger.info(f"Инициализировано {len(self.policies)} политик по умолчанию")
                                                                               ^
security/preliminary/policy_engine.py:272:1: W293 blank line contains whitespace
            
^
security/preliminary/policy_engine.py:274:80: E501 line too long (80 > 79 characters)
            self.logger.error(f"Ошибка инициализации политик по умолчанию: {e}")
                                                                               ^
security/preliminary/policy_engine.py:275:1: W293 blank line contains whitespace
    
^
security/preliminary/policy_engine.py:288:1: W293 blank line contains whitespace
            
^
security/preliminary/policy_engine.py:292:1: W293 blank line contains whitespace
            
^
security/preliminary/policy_engine.py:303:1: W293 blank line contains whitespace
            
^
security/preliminary/policy_engine.py:313:1: W293 blank line contains whitespace
            
^
security/preliminary/policy_engine.py:330:1: W293 blank line contains whitespace
            
^
security/preliminary/policy_engine.py:333:1: W293 blank line contains whitespace
            
^
security/preliminary/policy_engine.py:342:1: W293 blank line contains whitespace
            
^
security/preliminary/policy_engine.py:345:1: W293 blank line contains whitespace
            
^
security/preliminary/policy_engine.py:349:1: W293 blank line contains whitespace
    
^
security/preliminary/policy_engine.py:350:80: E501 line too long (113 > 79 characters)
    def evaluate_policy(self, policy_id: str, user_id: str, request_context: Dict[str, Any]) -> PolicyEvaluation:
                                                                               ^
security/preliminary/policy_engine.py:362:1: W293 blank line contains whitespace
            
^
security/preliminary/policy_engine.py:371:1: W293 blank line contains whitespace
            
^
security/preliminary/policy_engine.py:373:1: W293 blank line contains whitespace
            
^
security/preliminary/policy_engine.py:383:1: W293 blank line contains whitespace
            
^
security/preliminary/policy_engine.py:393:1: W293 blank line contains whitespace
            
^
security/preliminary/policy_engine.py:399:1: W293 blank line contains whitespace
            
^
security/preliminary/policy_engine.py:402:1: W293 blank line contains whitespace
            
^
security/preliminary/policy_engine.py:409:1: W293 blank line contains whitespace
            
^
security/preliminary/policy_engine.py:411:1: W293 blank line contains whitespace
            
^
security/preliminary/policy_engine.py:421:1: W293 blank line contains whitespace
            
^
security/preliminary/policy_engine.py:424:1: W293 blank line contains whitespace
            
^
security/preliminary/policy_engine.py:429:1: W293 blank line contains whitespace
            
^
security/preliminary/policy_engine.py:431:1: W293 blank line contains whitespace
            
^
security/preliminary/policy_engine.py:441:1: W293 blank line contains whitespace
    
^
security/preliminary/policy_engine.py:442:79: W291 trailing whitespace
    def evaluate_policies(self, user_id: str, request_context: Dict[str, Any], 
                                                                              ^
security/preliminary/policy_engine.py:443:26: E128 continuation line under-indented for visual indent
                         policy_types: Optional[List[PolicyType]] = None) -> List[PolicyEvaluation]:
                         ^
security/preliminary/policy_engine.py:443:80: E501 line too long (100 > 79 characters)
                         policy_types: Optional[List[PolicyType]] = None) -> List[PolicyEvaluation]:
                                                                               ^
security/preliminary/policy_engine.py:455:1: W293 blank line contains whitespace
            
^
security/preliminary/policy_engine.py:457:80: E501 line too long (82 > 79 characters)
            policies_to_evaluate = self._get_policies_for_evaluation(policy_types)
                                                                               ^
security/preliminary/policy_engine.py:458:1: W293 blank line contains whitespace
            
^
security/preliminary/policy_engine.py:461:80: E501 line too long (94 > 79 characters)
                policies_to_evaluate = policies_to_evaluate[:self.max_evaluations_per_request]
                                                                               ^
security/preliminary/policy_engine.py:462:80: E501 line too long (116 > 79 characters)
                self.logger.warning(f"Ограничено количество политик для оценки: {self.max_evaluations_per_request}")
                                                                               ^
security/preliminary/policy_engine.py:463:1: W293 blank line contains whitespace
            
^
security/preliminary/policy_engine.py:466:80: E501 line too long (93 > 79 characters)
                evaluation = self.evaluate_policy(policy.policy_id, user_id, request_context)
                                                                               ^
security/preliminary/policy_engine.py:468:1: W293 blank line contains whitespace
                
^
security/preliminary/policy_engine.py:469:80: E501 line too long (87 > 79 characters)
                # Если политика сработала и имеет высокий приоритет, можем остановиться
                                                                               ^
security/preliminary/policy_engine.py:470:80: E501 line too long (108 > 79 characters)
                if evaluation.matched and policy.priority in [PolicyPriority.CRITICAL, PolicyPriority.HIGH]:
                                                                               ^
security/preliminary/policy_engine.py:472:1: W293 blank line contains whitespace
            
^
security/preliminary/policy_engine.py:474:1: W293 blank line contains whitespace
            
^
security/preliminary/policy_engine.py:478:1: W293 blank line contains whitespace
    
^
security/preliminary/policy_engine.py:479:80: E501 line too long (95 > 79 characters)
    def _evaluate_condition(self, condition: PolicyCondition, context: Dict[str, Any]) -> bool:
                                                                               ^
security/preliminary/policy_engine.py:483:1: W293 blank line contains whitespace
            
^
security/preliminary/policy_engine.py:486:1: W293 blank line contains whitespace
            
^
security/preliminary/policy_engine.py:507:1: W293 blank line contains whitespace
                
^
security/preliminary/policy_engine.py:511:1: W293 blank line contains whitespace
    
^
security/preliminary/policy_engine.py:512:80: E501 line too long (90 > 79 characters)
    def _evaluate_time_range(self, current_time: Any, time_range: Dict[str, str]) -> bool:
                                                                               ^
security/preliminary/policy_engine.py:519:1: W293 blank line contains whitespace
            
^
security/preliminary/policy_engine.py:522:1: W293 blank line contains whitespace
            
^
security/preliminary/policy_engine.py:527:1: W293 blank line contains whitespace
                
^
security/preliminary/policy_engine.py:531:1: W293 blank line contains whitespace
    
^
security/preliminary/policy_engine.py:532:80: E501 line too long (99 > 79 characters)
    def _execute_action(self, action: PolicyAction, user_id: str, context: Dict[str, Any]) -> bool:
                                                                               ^
security/preliminary/policy_engine.py:539:80: E501 line too long (121 > 79 characters)
                self.logger.warning(f"Запрещен доступ для пользователя {user_id}: {action.parameters.get('reason', '')}")
                                                                               ^
security/preliminary/policy_engine.py:542:80: E501 line too long (125 > 79 characters)
                self.logger.warning(f"Заблокирован доступ для пользователя {user_id}: {action.parameters.get('reason', '')}")
                                                                               ^
security/preliminary/policy_engine.py:545:80: E501 line too long (114 > 79 characters)
                self.logger.warning(f"Карантин для пользователя {user_id}: {action.parameters.get('reason', '')}")
                                                                               ^
security/preliminary/policy_engine.py:548:80: E501 line too long (117 > 79 characters)
                self.logger.info(f"Логирование для пользователя {user_id}: {action.parameters.get('level', 'info')}")
                                                                               ^
security/preliminary/policy_engine.py:552:80: E501 line too long (95 > 79 characters)
                self.logger.info(f"Уведомление {recipients} о действии пользователя {user_id}")
                                                                               ^
security/preliminary/policy_engine.py:556:80: E501 line too long (101 > 79 characters)
                self.logger.warning(f"Эскалация инцидента уровня {level} для пользователя {user_id}")
                                                                               ^
security/preliminary/policy_engine.py:560:80: E501 line too long (87 > 79 characters)
                self.logger.info(f"Перенаправление пользователя {user_id} на {target}")
                                                                               ^
security/preliminary/policy_engine.py:564:1: W293 blank line contains whitespace
                
^
security/preliminary/policy_engine.py:568:1: W293 blank line contains whitespace
    
^
security/preliminary/policy_engine.py:569:80: E501 line too long (116 > 79 characters)
    def _get_policies_for_evaluation(self, policy_types: Optional[List[PolicyType]] = None) -> List[SecurityPolicy]:
                                                                               ^
security/preliminary/policy_engine.py:573:80: E501 line too long (81 > 79 characters)
                # Возвращаем все активные политики, отсортированные по приоритету
                                                                               ^
security/preliminary/policy_engine.py:574:80: E501 line too long (104 > 79 characters)
                active_policies = [p for p in self.policies.values() if p.status == PolicyStatus.ACTIVE]
                                                                               ^
security/preliminary/policy_engine.py:575:80: E501 line too long (98 > 79 characters)
                return sorted(active_policies, key=lambda x: self._get_priority_order(x.priority))
                                                                               ^
security/preliminary/policy_engine.py:582:80: E501 line too long (91 > 79 characters)
                return sorted(policies, key=lambda x: self._get_priority_order(x.priority))
                                                                               ^
security/preliminary/policy_engine.py:583:1: W293 blank line contains whitespace
                
^
security/preliminary/policy_engine.py:587:1: W293 blank line contains whitespace
    
^
security/preliminary/policy_engine.py:598:1: W293 blank line contains whitespace
    
^
security/preliminary/policy_engine.py:603:1: W293 blank line contains whitespace
            
^
security/preliminary/policy_engine.py:610:1: W293 blank line contains whitespace
            
^
security/preliminary/policy_engine.py:612:1: W293 blank line contains whitespace
            
^
security/preliminary/policy_engine.py:615:1: W293 blank line contains whitespace
    
^
security/preliminary/policy_engine.py:627:1: W293 blank line contains whitespace
            
^
security/preliminary/policy_engine.py:629:1: W293 blank line contains whitespace
            
^
security/preliminary/policy_engine.py:631:80: E501 line too long (97 > 79 characters)
            policy_evaluations = [e for e in self.policy_evaluations if e.policy_id == policy_id]
                                                                               ^
security/preliminary/policy_engine.py:633:80: E501 line too long (86 > 79 characters)
            successful_evaluations = len([e for e in policy_evaluations if e.matched])
                                                                               ^
security/preliminary/policy_engine.py:634:1: W293 blank line contains whitespace
            
^
security/preliminary/policy_engine.py:653:80: E501 line too long (112 > 79 characters)
                    "success_rate": successful_evaluations / total_evaluations if total_evaluations > 0 else 0.0
                                                                               ^
security/preliminary/policy_engine.py:656:1: W293 blank line contains whitespace
            
^
security/preliminary/policy_engine.py:660:1: W293 blank line contains whitespace
    
^
security/preliminary/policy_engine.py:661:80: E501 line too long (84 > 79 characters)
    def get_policies_by_type(self, policy_type: PolicyType) -> List[Dict[str, Any]]:
                                                                               ^
security/preliminary/policy_engine.py:681:1: W293 blank line contains whitespace
            
^
security/preliminary/policy_engine.py:682:80: E501 line too long (106 > 79 characters)
            return sorted(policies, key=lambda x: self._get_priority_order(PolicyPriority(x["priority"])))
                                                                               ^
security/preliminary/policy_engine.py:683:1: W293 blank line contains whitespace
            
^
security/preliminary/policy_engine.py:687:1: W293 blank line contains whitespace
    
^
security/preliminary/policy_engine.py:697:1: W293 blank line contains whitespace
            
^
security/preliminary/policy_engine.py:702:80: E501 line too long (111 > 79 characters)
                "active_policies": len([p for p in self.policies.values() if p.status == PolicyStatus.ACTIVE]),
                                                                               ^
security/preliminary/policy_engine.py:704:80: E501 line too long (111 > 79 characters)
                    policy_type.value: len([p for p in self.policies.values() if p.policy_type == policy_type])
                                                                               ^
security/preliminary/policy_engine.py:708:80: E501 line too long (102 > 79 characters)
                    priority.value: len([p for p in self.policies.values() if p.priority == priority])
                                                                               ^
security/preliminary/policy_engine.py:712:80: E501 line too long (96 > 79 characters)
                    status.value: len([p for p in self.policies.values() if p.status == status])
                                                                               ^
security/preliminary/policy_engine.py:723:80: E501 line too long (83 > 79 characters)
                    "max_evaluations_per_request": self.max_evaluations_per_request
                                                                               ^
security/preliminary/policy_engine.py:726:1: W293 blank line contains whitespace
            
^
security/preliminary/policy_engine.py:728:1: W293 blank line contains whitespace
            
^
security/preliminary/policy_engine.py:731:56: W292 no newline at end of file
            return {"status": "error", "error": str(e)}                                                       ^
security/preliminary/risk_assessment.py:13:1: F401 'typing.Set' imported but unused
from typing import Dict, List, Optional, Any, Set, Tuple
^
security/preliminary/risk_assessment.py:13:1: F401 'typing.Tuple' imported but unused
from typing import Dict, List, Optional, Any, Set, Tuple
^
security/preliminary/risk_assessment.py:18:1: F401 'core.security_base.ThreatType' imported but unused
from core.security_base import SecurityEvent, IncidentSeverity, ThreatType
^
security/preliminary/risk_assessment.py:120:1: W293 blank line contains whitespace
    
^
security/preliminary/risk_assessment.py:123:80: E501 line too long (97 > 79 characters)
        self.logger = logging.getLogger(f"{self.__class__.__module__}.{self.__class__.__name__}")
                                                                               ^
security/preliminary/risk_assessment.py:124:1: W293 blank line contains whitespace
        
^
security/preliminary/risk_assessment.py:131:1: W293 blank line contains whitespace
        
^
security/preliminary/risk_assessment.py:140:1: W293 blank line contains whitespace
        
^
security/preliminary/risk_assessment.py:153:1: W293 blank line contains whitespace
        
^
security/preliminary/risk_assessment.py:156:1: W293 blank line contains whitespace
    
^
security/preliminary/risk_assessment.py:164:80: E501 line too long (85 > 79 characters)
                    "description": "Использование простых или повторяющихся паролей",
                                                                               ^
security/preliminary/risk_assessment.py:173:80: E501 line too long (83 > 79 characters)
                    "description": "Неиспользование многофакторной аутентификации",
                                                                               ^
security/preliminary/risk_assessment.py:191:80: E501 line too long (88 > 79 characters)
                    "description": "Использование устаревшего программного обеспечения",
                                                                               ^
security/preliminary/risk_assessment.py:200:80: E501 line too long (81 > 79 characters)
                    "description": "Аномальные паттерны поведения пользователей",
                                                                               ^
security/preliminary/risk_assessment.py:218:80: E501 line too long (82 > 79 characters)
                    "description": "Неавторизованный доступ третьих лиц к данным",
                                                                               ^
security/preliminary/risk_assessment.py:227:80: E501 line too long (82 > 79 characters)
                    "description": "Незащищенный физический доступ к устройствам",
                                                                               ^
security/preliminary/risk_assessment.py:234:1: W293 blank line contains whitespace
            
^
security/preliminary/risk_assessment.py:247:1: W293 blank line contains whitespace
            
^
security/preliminary/risk_assessment.py:248:80: E501 line too long (89 > 79 characters)
            self.logger.info(f"Инициализировано {len(self.risk_factors)} факторов риска")
                                                                               ^
security/preliminary/risk_assessment.py:249:1: W293 blank line contains whitespace
            
^
security/preliminary/risk_assessment.py:252:1: W293 blank line contains whitespace
    
^
security/preliminary/risk_assessment.py:306:80: E501 line too long (88 > 79 characters)
                        "description": "Регулярное обновление программного обеспечения",
                                                                               ^
security/preliminary/risk_assessment.py:329:80: E501 line too long (81 > 79 characters)
                        "description": "Регулярное резервное копирование данных",
                                                                               ^
security/preliminary/risk_assessment.py:350:1: W293 blank line contains whitespace
            
^
security/preliminary/risk_assessment.py:352:1: W293 blank line contains whitespace
            
^
security/preliminary/risk_assessment.py:355:1: W293 blank line contains whitespace
    
^
security/preliminary/risk_assessment.py:360:80: E501 line too long (86 > 79 characters)
            risk_score = factor.impact_score * factor.likelihood_score * factor.weight
                                                                               ^
security/preliminary/risk_assessment.py:362:1: W293 blank line contains whitespace
            
^
security/preliminary/risk_assessment.py:366:1: W293 blank line contains whitespace
    
^
security/preliminary/risk_assessment.py:367:80: E501 line too long (87 > 79 characters)
    def assess_user_risk(self, user_id: str, user_data: Dict[str, Any]) -> RiskProfile:
                                                                               ^
security/preliminary/risk_assessment.py:385:1: W293 blank line contains whitespace
            
^
security/preliminary/risk_assessment.py:391:80: E501 line too long (82 > 79 characters)
                    updated_factor = self._update_factor_scores(factor, user_data)
                                                                               ^
security/preliminary/risk_assessment.py:393:1: W293 blank line contains whitespace
            
^
security/preliminary/risk_assessment.py:395:80: E501 line too long (97 > 79 characters)
            profile.overall_risk_score = self._calculate_overall_risk_score(profile.risk_factors)
                                                                               ^
security/preliminary/risk_assessment.py:396:80: E501 line too long (87 > 79 characters)
            profile.risk_level = self._determine_risk_level(profile.overall_risk_score)
                                                                               ^
security/preliminary/risk_assessment.py:397:1: W293 blank line contains whitespace
            
^
security/preliminary/risk_assessment.py:399:80: E501 line too long (99 > 79 characters)
            profile.mitigation_recommendations = self._generate_mitigation_recommendations(profile)
                                                                               ^
security/preliminary/risk_assessment.py:400:1: W293 blank line contains whitespace
            
^
security/preliminary/risk_assessment.py:410:80: E501 line too long (82 > 79 characters)
                impact_score=self._calculate_average_impact(profile.risk_factors),
                                                                               ^
security/preliminary/risk_assessment.py:411:80: E501 line too long (90 > 79 characters)
                likelihood_score=self._calculate_average_likelihood(profile.risk_factors),
                                                                               ^
security/preliminary/risk_assessment.py:412:80: E501 line too long (84 > 79 characters)
                description=f"Комплексная оценка рисков для пользователя {user_id}",
                                                                               ^
security/preliminary/risk_assessment.py:416:80: E501 line too long (101 > 79 characters)
                residual_risk=profile.overall_risk_score * 0.3  # Предполагаем 70% снижение после мер
                                                                               ^
security/preliminary/risk_assessment.py:418:1: W293 blank line contains whitespace
            
^
security/preliminary/risk_assessment.py:421:1: W293 blank line contains whitespace
            
^
security/preliminary/risk_assessment.py:424:1: W293 blank line contains whitespace
            
^
security/preliminary/risk_assessment.py:427:80: E501 line too long (121 > 79 characters)
                severity = IncidentSeverity.HIGH if profile.risk_level == RiskLevel.CRITICAL else IncidentSeverity.MEDIUM
                                                                               ^
security/preliminary/risk_assessment.py:431:80: E501 line too long (111 > 79 characters)
                    description=f"Выявлен {profile.risk_level.value} уровень риска для пользователя {user_id}",
                                                                               ^
security/preliminary/risk_assessment.py:435:1: W293 blank line contains whitespace
            
^
security/preliminary/risk_assessment.py:436:80: E501 line too long (111 > 79 characters)
            self.logger.info(f"Оценка рисков завершена для пользователя {user_id}: {profile.risk_level.value}")
                                                                               ^
security/preliminary/risk_assessment.py:438:1: W293 blank line contains whitespace
            
^
security/preliminary/risk_assessment.py:448:1: W293 blank line contains whitespace
    
^
security/preliminary/risk_assessment.py:449:80: E501 line too long (91 > 79 characters)
    def _is_factor_applicable(self, factor: RiskFactor, user_data: Dict[str, Any]) -> bool:
                                                                               ^
security/preliminary/risk_assessment.py:454:80: E501 line too long (85 > 79 characters)
                return "password_strength" in user_data or "mfa_enabled" in user_data
                                                                               ^
security/preliminary/risk_assessment.py:456:80: E501 line too long (86 > 79 characters)
                return "wifi_usage" in user_data or "network_connections" in user_data
                                                                               ^
security/preliminary/risk_assessment.py:458:80: E501 line too long (84 > 79 characters)
                return "device_info" in user_data or "software_updates" in user_data
                                                                               ^
security/preliminary/risk_assessment.py:460:80: E501 line too long (86 > 79 characters)
                return "behavior_patterns" in user_data or "activity_log" in user_data
                                                                               ^
security/preliminary/risk_assessment.py:462:80: E501 line too long (80 > 79 characters)
                return "data_access" in user_data or "file_sharing" in user_data
                                                                               ^
security/preliminary/risk_assessment.py:465:1: W293 blank line contains whitespace
                
^
security/preliminary/risk_assessment.py:469:1: W293 blank line contains whitespace
    
^
security/preliminary/risk_assessment.py:470:80: E501 line too long (97 > 79 characters)
    def _update_factor_scores(self, factor: RiskFactor, user_data: Dict[str, Any]) -> RiskFactor:
                                                                               ^
security/preliminary/risk_assessment.py:482:1: W293 blank line contains whitespace
            
^
security/preliminary/risk_assessment.py:488:80: E501 line too long (97 > 79 characters)
                        updated_factor.likelihood_score = min(1.0, factor.likelihood_score + 0.3)
                                                                               ^
security/preliminary/risk_assessment.py:490:80: E501 line too long (97 > 79 characters)
                        updated_factor.likelihood_score = max(0.1, factor.likelihood_score - 0.2)
                                                                               ^
security/preliminary/risk_assessment.py:491:1: W293 blank line contains whitespace
                
^
security/preliminary/risk_assessment.py:493:80: E501 line too long (93 > 79 characters)
                    updated_factor.likelihood_score = min(1.0, factor.likelihood_score + 0.4)
                                                                               ^
security/preliminary/risk_assessment.py:494:1: W293 blank line contains whitespace
            
^
security/preliminary/risk_assessment.py:497:80: E501 line too long (87 > 79 characters)
                    unsecured_ratio = user_data["wifi_usage"].get("unsecured_ratio", 0)
                                                                               ^
security/preliminary/risk_assessment.py:498:80: E501 line too long (111 > 79 characters)
                    updated_factor.likelihood_score = min(1.0, factor.likelihood_score + unsecured_ratio * 0.5)
                                                                               ^
security/preliminary/risk_assessment.py:499:1: W293 blank line contains whitespace
            
^
security/preliminary/risk_assessment.py:502:80: E501 line too long (91 > 79 characters)
                    outdated_ratio = user_data["software_updates"].get("outdated_ratio", 0)
                                                                               ^
security/preliminary/risk_assessment.py:503:80: E501 line too long (110 > 79 characters)
                    updated_factor.likelihood_score = min(1.0, factor.likelihood_score + outdated_ratio * 0.4)
                                                                               ^
security/preliminary/risk_assessment.py:504:1: W293 blank line contains whitespace
            
^
security/preliminary/risk_assessment.py:507:80: E501 line too long (88 > 79 characters)
                    anomalies = user_data["behavior_patterns"].get("anomalies_count", 0)
                                                                               ^
security/preliminary/risk_assessment.py:509:80: E501 line too long (97 > 79 characters)
                        updated_factor.likelihood_score = min(1.0, factor.likelihood_score + 0.3)
                                                                               ^
security/preliminary/risk_assessment.py:510:1: W293 blank line contains whitespace
            
^
security/preliminary/risk_assessment.py:512:80: E501 line too long (82 > 79 characters)
            updated_factor.risk_score = self._calculate_risk_score(updated_factor)
                                                                               ^
security/preliminary/risk_assessment.py:514:1: W293 blank line contains whitespace
            
^
security/preliminary/risk_assessment.py:516:1: W293 blank line contains whitespace
            
^
security/preliminary/risk_assessment.py:520:1: W293 blank line contains whitespace
    
^
security/preliminary/risk_assessment.py:521:80: E501 line too long (90 > 79 characters)
    def _calculate_overall_risk_score(self, risk_factors: Dict[str, RiskFactor]) -> float:
                                                                               ^
security/preliminary/risk_assessment.py:526:1: W293 blank line contains whitespace
            
^
security/preliminary/risk_assessment.py:529:1: W293 blank line contains whitespace
            
^
security/preliminary/risk_assessment.py:535:1: W293 blank line contains whitespace
            
^
security/preliminary/risk_assessment.py:539:1: W293 blank line contains whitespace
            
^
security/preliminary/risk_assessment.py:544:1: W293 blank line contains whitespace
            
^
security/preliminary/risk_assessment.py:546:1: W293 blank line contains whitespace
            
^
security/preliminary/risk_assessment.py:550:1: W293 blank line contains whitespace
    
^
security/preliminary/risk_assessment.py:558:1: W293 blank line contains whitespace
            
^
security/preliminary/risk_assessment.py:562:1: W293 blank line contains whitespace
    
^
security/preliminary/risk_assessment.py:563:80: E501 line too long (86 > 79 characters)
    def _generate_mitigation_recommendations(self, profile: RiskProfile) -> List[str]:
                                                                               ^
security/preliminary/risk_assessment.py:567:1: W293 blank line contains whitespace
            
^
security/preliminary/risk_assessment.py:573:80: E501 line too long (116 > 79 characters)
                            recommendations.append("Используйте сложные пароли с комбинацией букв, цифр и символов")
                                                                               ^
security/preliminary/risk_assessment.py:575:80: E501 line too long (111 > 79 characters)
                            recommendations.append("Включите многофакторную аутентификацию для всех аккаунтов")
                                                                               ^
security/preliminary/risk_assessment.py:576:1: W293 blank line contains whitespace
                    
^
security/preliminary/risk_assessment.py:579:80: E501 line too long (109 > 79 characters)
                            recommendations.append("Используйте VPN при подключении к публичным Wi-Fi сетям")
                                                                               ^
security/preliminary/risk_assessment.py:580:1: W293 blank line contains whitespace
                    
^
security/preliminary/risk_assessment.py:583:80: E501 line too long (121 > 79 characters)
                            recommendations.append("Регулярно обновляйте программное обеспечение и операционную систему")
                                                                               ^
security/preliminary/risk_assessment.py:584:1: W293 blank line contains whitespace
                    
^
security/preliminary/risk_assessment.py:587:80: E501 line too long (118 > 79 characters)
                            recommendations.append("Ограничьте доступ к персональным данным и используйте шифрование")
                                                                               ^
security/preliminary/risk_assessment.py:588:1: W293 blank line contains whitespace
            
^
security/preliminary/risk_assessment.py:596:1: W293 blank line contains whitespace
            
^
security/preliminary/risk_assessment.py:598:1: W293 blank line contains whitespace
            
^
security/preliminary/risk_assessment.py:602:1: W293 blank line contains whitespace
    
^
security/preliminary/risk_assessment.py:603:80: E501 line too long (86 > 79 characters)
    def _calculate_average_impact(self, risk_factors: Dict[str, RiskFactor]) -> float:
                                                                               ^
security/preliminary/risk_assessment.py:608:1: W293 blank line contains whitespace
            
^
security/preliminary/risk_assessment.py:609:80: E501 line too long (87 > 79 characters)
            total_impact = sum(factor.impact_score for factor in risk_factors.values())
                                                                               ^
security/preliminary/risk_assessment.py:611:1: W293 blank line contains whitespace
            
^
security/preliminary/risk_assessment.py:615:1: W293 blank line contains whitespace
    
^
security/preliminary/risk_assessment.py:616:80: E501 line too long (90 > 79 characters)
    def _calculate_average_likelihood(self, risk_factors: Dict[str, RiskFactor]) -> float:
                                                                               ^
security/preliminary/risk_assessment.py:621:1: W293 blank line contains whitespace
            
^
security/preliminary/risk_assessment.py:622:80: E501 line too long (95 > 79 characters)
            total_likelihood = sum(factor.likelihood_score for factor in risk_factors.values())
                                                                               ^
security/preliminary/risk_assessment.py:624:1: W293 blank line contains whitespace
            
^
security/preliminary/risk_assessment.py:628:1: W293 blank line contains whitespace
    
^
security/preliminary/risk_assessment.py:629:80: E501 line too long (80 > 79 characters)
    def _identify_affected_assets(self, user_data: Dict[str, Any]) -> List[str]:
                                                                               ^
security/preliminary/risk_assessment.py:633:1: W293 blank line contains whitespace
            
^
security/preliminary/risk_assessment.py:636:1: W293 blank line contains whitespace
            
^
security/preliminary/risk_assessment.py:638:80: E501 line too long (82 > 79 characters)
                assets.extend([f"account_{acc}" for acc in user_data["accounts"]])
                                                                               ^
security/preliminary/risk_assessment.py:639:1: W293 blank line contains whitespace
            
^
security/preliminary/risk_assessment.py:642:1: W293 blank line contains whitespace
            
^
security/preliminary/risk_assessment.py:644:1: W293 blank line contains whitespace
            
^
security/preliminary/risk_assessment.py:648:1: W293 blank line contains whitespace
    
^
security/preliminary/risk_assessment.py:659:80: E501 line too long (81 > 79 characters)
                return {"user_id": user_id, "message": "Профиль риска не найден"}
                                                                               ^
security/preliminary/risk_assessment.py:660:1: W293 blank line contains whitespace
            
^
security/preliminary/risk_assessment.py:662:1: W293 blank line contains whitespace
            
^
security/preliminary/risk_assessment.py:669:1: W293 blank line contains whitespace
                
^
security/preliminary/risk_assessment.py:677:1: W293 blank line contains whitespace
            
^
security/preliminary/risk_assessment.py:680:80: E501 line too long (93 > 79 characters)
                risks_by_category[category].sort(key=lambda x: x["risk_score"], reverse=True)
                                                                               ^
security/preliminary/risk_assessment.py:681:1: W293 blank line contains whitespace
            
^
security/preliminary/risk_assessment.py:687:80: E501 line too long (81 > 79 characters)
                "mitigation_recommendations": profile.mitigation_recommendations,
                                                                               ^
security/preliminary/risk_assessment.py:690:80: E501 line too long (106 > 79 characters)
                "high_risk_factors": len([f for f in profile.risk_factors.values() if f.risk_score > 0.7])
                                                                               ^
security/preliminary/risk_assessment.py:692:1: W293 blank line contains whitespace
            
^
security/preliminary/risk_assessment.py:696:1: W293 blank line contains whitespace
    
^
security/preliminary/risk_assessment.py:707:80: E501 line too long (102 > 79 characters)
            recent_assessments = [a for a in self.risk_assessments if a.assessment_date >= start_date]
                                                                               ^
security/preliminary/risk_assessment.py:708:1: W293 blank line contains whitespace
            
^
security/preliminary/risk_assessment.py:710:80: E501 line too long (89 > 79 characters)
                return {"period_days": days, "message": "Нет данных за указанный период"}
                                                                               ^
security/preliminary/risk_assessment.py:711:1: W293 blank line contains whitespace
            
^
security/preliminary/risk_assessment.py:715:1: W293 blank line contains whitespace
            
^
security/preliminary/risk_assessment.py:720:1: W293 blank line contains whitespace
            
^
security/preliminary/risk_assessment.py:721:80: E501 line too long (81 > 79 characters)
            avg_risk_score = statistics.mean(risk_scores) if risk_scores else 0.0
                                                                               ^
security/preliminary/risk_assessment.py:724:1: W293 blank line contains whitespace
            
^
security/preliminary/risk_assessment.py:727:80: E501 line too long (90 > 79 characters)
                trend = "increasing" if risk_scores[-1] > risk_scores[0] else "decreasing"
                                                                               ^
security/preliminary/risk_assessment.py:730:1: W293 blank line contains whitespace
            
^
security/preliminary/risk_assessment.py:741:1: W293 blank line contains whitespace
            
^
security/preliminary/risk_assessment.py:745:1: W293 blank line contains whitespace
    
^
security/preliminary/risk_assessment.py:755:1: W293 blank line contains whitespace
            
^
security/preliminary/risk_assessment.py:763:80: E501 line too long (106 > 79 characters)
                    category.value: len([f for f in self.risk_factors.values() if f.category == category])
                                                                               ^
security/preliminary/risk_assessment.py:767:80: E501 line too long (92 > 79 characters)
                    level.value: len([a for a in self.risk_assessments if a.level == level])
                                                                               ^
security/preliminary/risk_assessment.py:770:80: E501 line too long (81 > 79 characters)
                "high_risk_profiles": len([p for p in self.risk_profiles.values() 
                                                                               ^
security/preliminary/risk_assessment.py:770:82: W291 trailing whitespace
                "high_risk_profiles": len([p for p in self.risk_profiles.values() 
                                                                                 ^
security/preliminary/risk_assessment.py:771:42: E128 continuation line under-indented for visual indent
                                         if p.risk_level in [RiskLevel.HIGH, RiskLevel.CRITICAL]]),
                                         ^
security/preliminary/risk_assessment.py:771:80: E501 line too long (99 > 79 characters)
                                         if p.risk_level in [RiskLevel.HIGH, RiskLevel.CRITICAL]]),
                                                                               ^
security/preliminary/risk_assessment.py:772:80: E501 line too long (110 > 79 characters)
                "avg_risk_score": statistics.mean([p.overall_risk_score for p in self.risk_profiles.values()]) 
                                                                               ^
security/preliminary/risk_assessment.py:772:111: W291 trailing whitespace
                "avg_risk_score": statistics.mean([p.overall_risk_score for p in self.risk_profiles.values()]) 
                                                                                                              ^
security/preliminary/risk_assessment.py:773:33: E131 continuation line unaligned for hanging indent
                                if self.risk_profiles else 0.0,
                                ^
security/preliminary/risk_assessment.py:775:80: E501 line too long (94 > 79 characters)
                "assessment_weights": {k.value: v for k, v in self.assessment_weights.items()}
                                                                               ^
security/preliminary/risk_assessment.py:777:1: W293 blank line contains whitespace
            
^
security/preliminary/risk_assessment.py:779:1: W293 blank line contains whitespace
            
^
security/preliminary/risk_assessment.py:782:56: W292 no newline at end of file
            return {"status": "error", "error": str(e)}                                                       ^
security/preliminary/trust_scoring.py:20:1: E302 expected 2 blank lines, found 1
class TrustLevel(Enum):
^
security/preliminary/trust_scoring.py:28:1: E302 expected 2 blank lines, found 1
@dataclass
^
security/preliminary/trust_scoring.py:41:1: E302 expected 2 blank lines, found 1
@dataclass
^
security/preliminary/trust_scoring.py:53:1: E302 expected 2 blank lines, found 1
@dataclass
^
security/preliminary/trust_scoring.py:63:1: E302 expected 2 blank lines, found 1
class TrustScoring(SecurityBase):
^
security/preliminary/trust_scoring.py:196:26: E128 continuation line under-indented for visual indent
                         min(self.max_trust_score, final_score))
                         ^
security/preliminary/trust_scoring.py:251:80: E501 line too long (81 > 79 characters)
            if pattern in ["regular_login", "secure_browsing", "timely_updates"]:
                                                                               ^
security/preliminary/trust_scoring.py:254:80: E501 line too long (86 > 79 characters)
            elif pattern in ["suspicious_activity", "failed_logins", "unusual_hours"]:
                                                                               ^
security/preliminary/trust_scoring.py:417:80: E501 line too long (80 > 79 characters)
        profile.trust_level = self._calculate_trust_level(profile.initial_score)
                                                                               ^
security/preliminary/trust_scoring_new.py:20:1: E302 expected 2 blank lines, found 1
class TrustLevel(Enum):
^
security/preliminary/trust_scoring_new.py:28:1: E302 expected 2 blank lines, found 1
@dataclass
^
security/preliminary/trust_scoring_new.py:41:1: E302 expected 2 blank lines, found 1
@dataclass
^
security/preliminary/trust_scoring_new.py:53:1: E302 expected 2 blank lines, found 1
@dataclass
^
security/preliminary/trust_scoring_new.py:63:1: E302 expected 2 blank lines, found 1
class TrustScoring(SecurityBase):
^
security/preliminary/trust_scoring_new.py:196:26: E128 continuation line under-indented for visual indent
                         min(self.max_trust_score, final_score))
                         ^
security/preliminary/trust_scoring_new.py:251:80: E501 line too long (81 > 79 characters)
            if pattern in ["regular_login", "secure_browsing", "timely_updates"]:
                                                                               ^
security/preliminary/trust_scoring_new.py:254:80: E501 line too long (86 > 79 characters)
            elif pattern in ["suspicious_activity", "failed_logins", "unusual_hours"]:
                                                                               ^
security/preliminary/trust_scoring_new.py:417:80: E501 line too long (80 > 79 characters)
        profile.trust_level = self._calculate_trust_level(profile.initial_score)
                                                                               ^
security/preliminary/zero_trust_service.py:11:1: F401 'hashlib' imported but unused
import hashlib
^
security/preliminary/zero_trust_service.py:18:1: F401 'core.security_base.ThreatType' imported but unused
from core.security_base import SecurityEvent, IncidentSeverity, ThreatType
^
security/preliminary/zero_trust_service.py:112:1: W293 blank line contains whitespace
    
^
security/preliminary/zero_trust_service.py:115:80: E501 line too long (97 > 79 characters)
        self.logger = logging.getLogger(f"{self.__class__.__module__}.{self.__class__.__name__}")
                                                                               ^
security/preliminary/zero_trust_service.py:116:1: W293 blank line contains whitespace
        
^
security/preliminary/zero_trust_service.py:125:1: W293 blank line contains whitespace
        
^
security/preliminary/zero_trust_service.py:131:1: W293 blank line contains whitespace
        
^
security/preliminary/zero_trust_service.py:133:1: W293 blank line contains whitespace
    
^
security/preliminary/zero_trust_service.py:144:80: E501 line too long (93 > 79 characters)
                device_conditions={"device_type": ["mobile", "tablet", "desktop", "laptop"]},
                                                                               ^
security/preliminary/zero_trust_service.py:151:1: W293 blank line contains whitespace
            
^
security/preliminary/zero_trust_service.py:159:80: E501 line too long (82 > 79 characters)
                device_conditions={"device_type": ["mobile", "tablet", "laptop"]},
                                                                               ^
security/preliminary/zero_trust_service.py:166:1: W293 blank line contains whitespace
            
^
security/preliminary/zero_trust_service.py:181:1: W293 blank line contains whitespace
            
^
security/preliminary/zero_trust_service.py:182:80: E501 line too long (81 > 79 characters)
            self.logger.info("Инициализированы политики Zero Trust по умолчанию")
                                                                               ^
security/preliminary/zero_trust_service.py:183:1: W293 blank line contains whitespace
            
^
security/preliminary/zero_trust_service.py:186:1: W293 blank line contains whitespace
    
^
security/preliminary/zero_trust_service.py:187:80: E501 line too long (88 > 79 characters)
    def register_device(self, device_id: str, device_name: str, device_type: DeviceType,
                                                                               ^
security/preliminary/zero_trust_service.py:188:24: E128 continuation line under-indented for visual indent
                       user_id: str, family_id: str, mac_address: str, ip_address: str,
                       ^
security/preliminary/zero_trust_service.py:188:80: E501 line too long (87 > 79 characters)
                       user_id: str, family_id: str, mac_address: str, ip_address: str,
                                                                               ^
security/preliminary/zero_trust_service.py:189:24: E128 continuation line under-indented for visual indent
                       os_version: str, app_version: str) -> bool:
                       ^
security/preliminary/zero_trust_service.py:208:80: E501 line too long (99 > 79 characters)
                self.logger.warning(f"Попытка регистрации заблокированного устройства {device_id}")
                                                                               ^
security/preliminary/zero_trust_service.py:210:1: W293 blank line contains whitespace
            
^
security/preliminary/zero_trust_service.py:224:1: W293 blank line contains whitespace
            
^
security/preliminary/zero_trust_service.py:226:1: W293 blank line contains whitespace
            
^
security/preliminary/zero_trust_service.py:231:80: E501 line too long (87 > 79 characters)
                description=f"Зарегистрировано устройство {device_name} ({device_id})",
                                                                               ^
security/preliminary/zero_trust_service.py:235:1: W293 blank line contains whitespace
            
^
security/preliminary/zero_trust_service.py:236:80: E501 line too long (88 > 79 characters)
            self.logger.info(f"Зарегистрировано устройство {device_name} ({device_id})")
                                                                               ^
security/preliminary/zero_trust_service.py:238:1: W293 blank line contains whitespace
            
^
security/preliminary/zero_trust_service.py:242:1: W293 blank line contains whitespace
    
^
security/preliminary/zero_trust_service.py:243:70: W291 trailing whitespace
    def update_device_trust(self, device_id: str, trust_score: float, 
                                                                     ^
security/preliminary/zero_trust_service.py:244:28: E128 continuation line under-indented for visual indent
                           reason: str) -> bool:
                           ^
security/preliminary/zero_trust_service.py:258:1: W293 blank line contains whitespace
            
^
security/preliminary/zero_trust_service.py:262:80: E501 line too long (82 > 79 characters)
            device.is_trusted = device.trust_score >= self.default_trust_threshold
                                                                               ^
security/preliminary/zero_trust_service.py:264:1: W293 blank line contains whitespace
            
^
security/preliminary/zero_trust_service.py:266:80: E501 line too long (85 > 79 characters)
            self.trust_scores[f"{device_id}_{int(time.time())}"] = device.trust_score
                                                                               ^
security/preliminary/zero_trust_service.py:267:1: W293 blank line contains whitespace
            
^
security/preliminary/zero_trust_service.py:272:1: W293 blank line contains whitespace
            
^
security/preliminary/zero_trust_service.py:276:80: E501 line too long (142 > 79 characters)
                description=f"Изменен уровень доверия устройства {device_id}: {old_trust:.2f} -> {device.trust_score:.2f}. Причина: {reason}",
                                                                               ^
security/preliminary/zero_trust_service.py:280:1: W293 blank line contains whitespace
            
^
security/preliminary/zero_trust_service.py:281:80: E501 line too long (125 > 79 characters)
            self.logger.info(f"Обновлен уровень доверия устройства {device_id}: {old_trust:.2f} -> {device.trust_score:.2f}")
                                                                               ^
security/preliminary/zero_trust_service.py:283:1: W293 blank line contains whitespace
            
^
security/preliminary/zero_trust_service.py:287:1: W293 blank line contains whitespace
    
^
security/preliminary/zero_trust_service.py:288:80: E501 line too long (82 > 79 characters)
    def evaluate_access_request(self, user_id: str, device_id: str, resource: str,
                                                                               ^
security/preliminary/zero_trust_service.py:289:32: E128 continuation line under-indented for visual indent
                               action: str, context: Dict[str, Any]) -> Tuple[AccessDecision, str, float]:
                               ^
security/preliminary/zero_trust_service.py:289:80: E501 line too long (106 > 79 characters)
                               action: str, context: Dict[str, Any]) -> Tuple[AccessDecision, str, float]:
                                                                               ^
security/preliminary/zero_trust_service.py:311:1: W293 blank line contains whitespace
            
^
security/preliminary/zero_trust_service.py:315:80: E501 line too long (86 > 79 characters)
                    f"Попытка доступа с незарегистрированного устройства {device_id}",
                                                                               ^
security/preliminary/zero_trust_service.py:318:80: E501 line too long (81 > 79 characters)
                return AccessDecision.DENY, "Устройство не зарегистрировано", 1.0
                                                                               ^
security/preliminary/zero_trust_service.py:319:1: W293 blank line contains whitespace
            
^
security/preliminary/zero_trust_service.py:321:1: W293 blank line contains whitespace
            
^
security/preliminary/zero_trust_service.py:325:80: E501 line too long (81 > 79 characters)
                    f"Попытка доступа с заблокированного устройства {device_id}",
                                                                               ^
security/preliminary/zero_trust_service.py:329:1: W293 blank line contains whitespace
            
^
security/preliminary/zero_trust_service.py:333:80: E501 line too long (82 > 79 characters)
                    f"Попытка доступа с устройства с низким доверием {device_id}",
                                                                               ^
security/preliminary/zero_trust_service.py:336:80: E501 line too long (99 > 79 characters)
                return AccessDecision.DENY, "Низкий уровень доверия устройства", device.trust_score
                                                                               ^
security/preliminary/zero_trust_service.py:337:1: W293 blank line contains whitespace
            
^
security/preliminary/zero_trust_service.py:339:80: E501 line too long (81 > 79 characters)
            decision, reason, risk = self._apply_access_policies(request, device)
                                                                               ^
security/preliminary/zero_trust_service.py:340:1: W293 blank line contains whitespace
            
^
security/preliminary/zero_trust_service.py:344:1: W293 blank line contains whitespace
            
^
security/preliminary/zero_trust_service.py:347:80: E501 line too long (96 > 79 characters)
                self.update_device_trust(device_id, device.trust_score - 0.1, "Отказ в доступе")
                                                                               ^
security/preliminary/zero_trust_service.py:349:80: E501 line too long (97 > 79 characters)
                self.update_device_trust(device_id, device.trust_score + 0.05, "Успешный доступ")
                                                                               ^
security/preliminary/zero_trust_service.py:350:1: W293 blank line contains whitespace
            
^
security/preliminary/zero_trust_service.py:352:1: W293 blank line contains whitespace
            
^
security/preliminary/zero_trust_service.py:356:1: W293 blank line contains whitespace
    
^
security/preliminary/zero_trust_service.py:357:80: E501 line too long (121 > 79 characters)
    def _apply_access_policies(self, request: AccessRequest, device: DeviceProfile) -> Tuple[AccessDecision, str, float]:
                                                                               ^
security/preliminary/zero_trust_service.py:361:80: E501 line too long (94 > 79 characters)
            network_type = self._determine_network_type(request.context.get("ip_address", ""))
                                                                               ^
security/preliminary/zero_trust_service.py:363:1: W293 blank line contains whitespace
            
^
security/preliminary/zero_trust_service.py:368:1: W293 blank line contains whitespace
                
^
security/preliminary/zero_trust_service.py:372:1: W293 blank line contains whitespace
                    
^
security/preliminary/zero_trust_service.py:375:80: E501 line too long (88 > 79 characters)
                        return AccessDecision.DENY, f"Высокий риск: {policy.name}", risk
                                                                               ^
security/preliminary/zero_trust_service.py:377:80: E501 line too long (120 > 79 characters)
                        return AccessDecision.CHALLENGE, f"Требуется дополнительная аутентификация: {policy.name}", risk
                                                                               ^
security/preliminary/zero_trust_service.py:379:80: E501 line too long (100 > 79 characters)
                        return AccessDecision.MONITOR, f"Доступ с мониторингом: {policy.name}", risk
                                                                               ^
security/preliminary/zero_trust_service.py:381:80: E501 line too long (92 > 79 characters)
                        return AccessDecision.ALLOW, f"Доступ разрешен: {policy.name}", risk
                                                                               ^
security/preliminary/zero_trust_service.py:382:1: W293 blank line contains whitespace
            
^
security/preliminary/zero_trust_service.py:384:80: E501 line too long (91 > 79 characters)
            return AccessDecision.CHALLENGE, "Требуется дополнительная аутентификация", 0.5
                                                                               ^
security/preliminary/zero_trust_service.py:385:1: W293 blank line contains whitespace
            
^
security/preliminary/zero_trust_service.py:389:1: W293 blank line contains whitespace
    
^
security/preliminary/zero_trust_service.py:390:80: E501 line too long (107 > 79 characters)
    def _matches_policy(self, request: AccessRequest, device: DeviceProfile, policy: AccessPolicy) -> bool:
                                                                               ^
security/preliminary/zero_trust_service.py:394:80: E501 line too long (84 > 79 characters)
            if not self._matches_pattern(request.resource, policy.resource_pattern):
                                                                               ^
security/preliminary/zero_trust_service.py:396:1: W293 blank line contains whitespace
            
^
security/preliminary/zero_trust_service.py:398:80: E501 line too long (88 > 79 characters)
            if not self._check_user_conditions(request.user_id, policy.user_conditions):
                                                                               ^
security/preliminary/zero_trust_service.py:400:1: W293 blank line contains whitespace
            
^
security/preliminary/zero_trust_service.py:402:80: E501 line too long (83 > 79 characters)
            if not self._check_device_conditions(device, policy.device_conditions):
                                                                               ^
security/preliminary/zero_trust_service.py:404:1: W293 blank line contains whitespace
            
^
security/preliminary/zero_trust_service.py:406:80: E501 line too long (99 > 79 characters)
            if not self._check_network_conditions(request.network_type, policy.network_conditions):
                                                                               ^
security/preliminary/zero_trust_service.py:408:1: W293 blank line contains whitespace
            
^
security/preliminary/zero_trust_service.py:410:80: E501 line too long (90 > 79 characters)
            if not self._check_time_conditions(request.timestamp, policy.time_conditions):
                                                                               ^
security/preliminary/zero_trust_service.py:412:1: W293 blank line contains whitespace
            
^
security/preliminary/zero_trust_service.py:414:1: W293 blank line contains whitespace
            
^
security/preliminary/zero_trust_service.py:418:1: W293 blank line contains whitespace
    
^
security/preliminary/zero_trust_service.py:423:1: W293 blank line contains whitespace
        
^
security/preliminary/zero_trust_service.py:427:1: W293 blank line contains whitespace
    
^
security/preliminary/zero_trust_service.py:428:80: E501 line too long (87 > 79 characters)
    def _check_user_conditions(self, user_id: str, conditions: Dict[str, Any]) -> bool:
                                                                               ^
security/preliminary/zero_trust_service.py:432:1: W293 blank line contains whitespace
    
^
security/preliminary/zero_trust_service.py:433:80: E501 line too long (98 > 79 characters)
    def _check_device_conditions(self, device: DeviceProfile, conditions: Dict[str, Any]) -> bool:
                                                                               ^
security/preliminary/zero_trust_service.py:441:1: W293 blank line contains whitespace
        
^
security/preliminary/zero_trust_service.py:443:1: W293 blank line contains whitespace
    
^
security/preliminary/zero_trust_service.py:444:80: E501 line too long (103 > 79 characters)
    def _check_network_conditions(self, network_type: NetworkType, conditions: Dict[str, Any]) -> bool:
                                                                               ^
security/preliminary/zero_trust_service.py:452:1: W293 blank line contains whitespace
        
^
security/preliminary/zero_trust_service.py:454:1: W293 blank line contains whitespace
    
^
security/preliminary/zero_trust_service.py:455:80: E501 line too long (94 > 79 characters)
    def _check_time_conditions(self, timestamp: datetime, conditions: Dict[str, Any]) -> bool:
                                                                               ^
security/preliminary/zero_trust_service.py:464:1: W293 blank line contains whitespace
        
^
security/preliminary/zero_trust_service.py:466:1: W293 blank line contains whitespace
    
^
security/preliminary/zero_trust_service.py:467:80: E501 line too long (108 > 79 characters)
    def _calculate_risk(self, request: AccessRequest, device: DeviceProfile, policy: AccessPolicy) -> float:
                                                                               ^
security/preliminary/zero_trust_service.py:471:1: W293 blank line contains whitespace
            
^
security/preliminary/zero_trust_service.py:474:1: W293 blank line contains whitespace
            
^
security/preliminary/zero_trust_service.py:480:1: W293 blank line contains whitespace
            
^
security/preliminary/zero_trust_service.py:485:1: W293 blank line contains whitespace
            
^
security/preliminary/zero_trust_service.py:489:1: W293 blank line contains whitespace
            
^
security/preliminary/zero_trust_service.py:493:1: W293 blank line contains whitespace
            
^
security/preliminary/zero_trust_service.py:495:1: W293 blank line contains whitespace
            
^
security/preliminary/zero_trust_service.py:499:1: W293 blank line contains whitespace
    
^
security/preliminary/zero_trust_service.py:504:80: E501 line too long (114 > 79 characters)
            if ip_address.startswith("192.168.") or ip_address.startswith("10.") or ip_address.startswith("172."):
                                                                               ^
security/preliminary/zero_trust_service.py:506:80: E501 line too long (80 > 79 characters)
            elif ip_address.startswith("203.") or ip_address.startswith("8.8."):
                                                                               ^
security/preliminary/zero_trust_service.py:510:1: W293 blank line contains whitespace
                
^
security/preliminary/zero_trust_service.py:514:1: W293 blank line contains whitespace
    
^
security/preliminary/zero_trust_service.py:526:1: W293 blank line contains whitespace
            
^
security/preliminary/zero_trust_service.py:531:80: E501 line too long (87 > 79 characters)
                description=f"Заблокировано устройство {device_id}. Причина: {reason}",
                                                                               ^
security/preliminary/zero_trust_service.py:535:1: W293 blank line contains whitespace
            
^
security/preliminary/zero_trust_service.py:536:80: E501 line too long (91 > 79 characters)
            self.logger.warning(f"Заблокировано устройство {device_id}. Причина: {reason}")
                                                                               ^
security/preliminary/zero_trust_service.py:538:1: W293 blank line contains whitespace
            
^
security/preliminary/zero_trust_service.py:542:1: W293 blank line contains whitespace
    
^
security/preliminary/zero_trust_service.py:555:1: W293 blank line contains whitespace
                
^
security/preliminary/zero_trust_service.py:560:80: E501 line too long (92 > 79 characters)
                    description=f"Разблокировано устройство {device_id}. Причина: {reason}",
                                                                               ^
security/preliminary/zero_trust_service.py:564:1: W293 blank line contains whitespace
                
^
security/preliminary/zero_trust_service.py:565:80: E501 line too long (93 > 79 characters)
                self.logger.info(f"Разблокировано устройство {device_id}. Причина: {reason}")
                                                                               ^
security/preliminary/zero_trust_service.py:567:1: W293 blank line contains whitespace
            
^
security/preliminary/zero_trust_service.py:569:1: W293 blank line contains whitespace
            
^
security/preliminary/zero_trust_service.py:573:1: W293 blank line contains whitespace
    
^
security/preliminary/zero_trust_service.py:574:80: E501 line too long (82 > 79 characters)
    def get_device_trust_report(self, device_id: str) -> Optional[Dict[str, Any]]:
                                                                               ^
security/preliminary/zero_trust_service.py:585:1: W293 blank line contains whitespace
            
^
security/preliminary/zero_trust_service.py:587:1: W293 blank line contains whitespace
            
^
security/preliminary/zero_trust_service.py:597:1: W293 blank line contains whitespace
            
^
security/preliminary/zero_trust_service.py:600:1: W293 blank line contains whitespace
            
^
security/preliminary/zero_trust_service.py:609:80: E501 line too long (85 > 79 characters)
                "trust_history": sorted(trust_history, key=lambda x: x["timestamp"]),
                                                                               ^
security/preliminary/zero_trust_service.py:612:1: W293 blank line contains whitespace
            
^
security/preliminary/zero_trust_service.py:616:1: W293 blank line contains whitespace
    
^
security/preliminary/zero_trust_service.py:620:80: E501 line too long (96 > 79 characters)
            device_requests = [req for req in self.access_history if req.device_id == device_id]
                                                                               ^
security/preliminary/zero_trust_service.py:621:1: W293 blank line contains whitespace
            
^
security/preliminary/zero_trust_service.py:623:80: E501 line too long (92 > 79 characters)
                return {"total_requests": 0, "successful_requests": 0, "failed_requests": 0}
                                                                               ^
security/preliminary/zero_trust_service.py:624:1: W293 blank line contains whitespace
            
^
security/preliminary/zero_trust_service.py:627:80: E501 line too long (95 > 79 characters)
            successful_requests = len([req for req in device_requests if req.risk_score < 0.5])
                                                                               ^
security/preliminary/zero_trust_service.py:629:1: W293 blank line contains whitespace
            
^
security/preliminary/zero_trust_service.py:634:80: E501 line too long (97 > 79 characters)
                "success_rate": successful_requests / total_requests if total_requests > 0 else 0
                                                                               ^
security/preliminary/zero_trust_service.py:636:1: W293 blank line contains whitespace
            
^
security/preliminary/zero_trust_service.py:639:80: E501 line too long (88 > 79 characters)
            return {"total_requests": 0, "successful_requests": 0, "failed_requests": 0}
                                                                               ^
security/preliminary/zero_trust_service.py:640:1: W293 blank line contains whitespace
    
^
security/preliminary/zero_trust_service.py:641:80: E501 line too long (93 > 79 characters)
    def _log_suspicious_activity(self, description: str, severity: IncidentSeverity) -> None:
                                                                               ^
security/preliminary/zero_trust_service.py:652:1: W293 blank line contains whitespace
            
^
security/preliminary/zero_trust_service.py:654:80: E501 line too long (83 > 79 characters)
            self.logger.error(f"Ошибка логирования подозрительной активности: {e}")
                                                                               ^
security/preliminary/zero_trust_service.py:655:1: W293 blank line contains whitespace
    
^
security/preliminary/zero_trust_service.py:665:1: W293 blank line contains whitespace
            
^
security/preliminary/zero_trust_service.py:670:80: E501 line too long (99 > 79 characters)
                "trusted_devices": len([d for d in self.device_profiles.values() if d.is_trusted]),
                                                                               ^
security/preliminary/zero_trust_service.py:673:80: E501 line too long (98 > 79 characters)
                "active_policies": len([p for p in self.access_policies.values() if p.is_active]),
                                                                               ^
security/preliminary/zero_trust_service.py:676:80: E501 line too long (156 > 79 characters)
                "average_trust_score": sum(d.trust_score for d in self.device_profiles.values()) / len(self.device_profiles) if self.device_profiles else 0,
                                                                               ^
security/preliminary/zero_trust_service.py:678:80: E501 line too long (118 > 79 characters)
                    device_type.value: len([d for d in self.device_profiles.values() if d.device_type == device_type])
                                                                               ^
security/preliminary/zero_trust_service.py:682:1: W293 blank line contains whitespace
            
^
security/preliminary/zero_trust_service.py:684:1: W293 blank line contains whitespace
            
^
security/preliminary/zero_trust_service.py:687:56: W292 no newline at end of file
            return {"status": "error", "error": str(e)}                                                       ^
security/privacy/__init__.py:38:80: E501 line too long (96 > 79 characters)
__description__ = "Универсальный менеджер приватности для соответствия международным стандартам"                                                                               ^
security/privacy/__init__.py:38:97: W292 no newline at end of file
__description__ = "Универсальный менеджер приватности для соответствия международным стандартам"                                                                                                ^
security/privacy/universal_privacy_manager.py:129:80: E501 line too long (83 > 79 characters)
            "expires_at": self.expires_at.isoformat() if self.expires_at else None,
                                                                               ^
security/privacy/universal_privacy_manager.py:156:5: E129 visually indented line with same indent as next logical line
                consent.is_valid()):
    ^
security/privacy/universal_privacy_manager.py:268:30: E128 continuation line under-indented for visual indent
                             phone: str = None) -> bool:
                             ^
security/privacy/universal_privacy_manager.py:342:80: E501 line too long (80 > 79 characters)
    def revoke_consent(self, user_id: str, data_category: DataCategory) -> bool:
                                                                               ^
security/privacy/universal_privacy_manager.py:362:80: E501 line too long (89 > 79 characters)
                self.logger.info(f"Согласие отозвано: {user_id} - {data_category.value}")
                                                                               ^
security/privacy/universal_privacy_manager.py:371:28: E128 continuation line under-indented for visual indent
                           data_category: DataCategory,
                           ^
security/privacy/universal_privacy_manager.py:372:28: E128 continuation line under-indented for visual indent
                           details: dict = None) -> bool:
                           ^
security/privacy/universal_privacy_manager.py:396:80: E501 line too long (80 > 79 characters)
            self.logger.info(f"Действие обработано: {user_id} - {action.value}")
                                                                               ^
security/privacy/universal_privacy_manager.py:436:80: E501 line too long (86 > 79 characters)
    def get_privacy_events(self, user_id: str = None, limit: int = 100) -> List[dict]:
                                                                               ^
security/privacy/universal_privacy_manager.py:463:80: E501 line too long (80 > 79 characters)
                    for standard, compliance in event.compliance_status.items():
                                                                               ^
security/privacy/universal_privacy_manager.py:483:80: E501 line too long (102 > 79 characters)
                "compliance_rate": (compliant_events / total_events * 100) if total_events > 0 else 0,
                                                                               ^
security/privacy/universal_privacy_manager_new.py:129:80: E501 line too long (83 > 79 characters)
            "expires_at": self.expires_at.isoformat() if self.expires_at else None,
                                                                               ^
security/privacy/universal_privacy_manager_new.py:156:5: E129 visually indented line with same indent as next logical line
                consent.is_valid()):
    ^
security/privacy/universal_privacy_manager_new.py:268:30: E128 continuation line under-indented for visual indent
                             phone: str = None) -> bool:
                             ^
security/privacy/universal_privacy_manager_new.py:342:80: E501 line too long (80 > 79 characters)
    def revoke_consent(self, user_id: str, data_category: DataCategory) -> bool:
                                                                               ^
security/privacy/universal_privacy_manager_new.py:362:80: E501 line too long (89 > 79 characters)
                self.logger.info(f"Согласие отозвано: {user_id} - {data_category.value}")
                                                                               ^
security/privacy/universal_privacy_manager_new.py:371:28: E128 continuation line under-indented for visual indent
                           data_category: DataCategory,
                           ^
security/privacy/universal_privacy_manager_new.py:372:28: E128 continuation line under-indented for visual indent
                           details: dict = None) -> bool:
                           ^
security/privacy/universal_privacy_manager_new.py:396:80: E501 line too long (80 > 79 characters)
            self.logger.info(f"Действие обработано: {user_id} - {action.value}")
                                                                               ^
security/privacy/universal_privacy_manager_new.py:436:80: E501 line too long (86 > 79 characters)
    def get_privacy_events(self, user_id: str = None, limit: int = 100) -> List[dict]:
                                                                               ^
security/privacy/universal_privacy_manager_new.py:463:80: E501 line too long (80 > 79 characters)
                    for standard, compliance in event.compliance_status.items():
                                                                               ^
security/privacy/universal_privacy_manager_new.py:483:80: E501 line too long (102 > 79 characters)
                "compliance_rate": (compliant_events / total_events * 100) if total_events > 0 else 0,
                                                                               ^
security/privacy/universal_privacy_manager_part2.py:16:1: E302 expected 2 blank lines, found 1
class ConsentType(Enum):
^
security/privacy/universal_privacy_manager_part2.py:23:1: E302 expected 2 blank lines, found 1
@dataclass
^
security/privacy/universal_privacy_manager_part2.py:31:1: W293 blank line contains whitespace
    
^
security/privacy/universal_privacy_manager_part2.py:38:80: E501 line too long (82 > 79 characters)
            "expires_at": self.expires_at.isoformat() if self.expires_at else None
                                                                               ^
security/privacy/universal_privacy_manager_part2.py:41:1: E302 expected 2 blank lines, found 1
@dataclass
^
security/privacy/universal_privacy_manager_part2.py:53:1: E302 expected 2 blank lines, found 1
class DataCategory(Enum):
^
security/privacy/universal_privacy_manager_part2.py:60:1: E302 expected 2 blank lines, found 1
class PrivacyAction(Enum):
^
security/privacy/universal_privacy_manager_part2.py:68:1: E302 expected 2 blank lines, found 1
class PrivacyStandard(Enum):
^
security/privacy/universal_privacy_manager_part2.py:75:1: E302 expected 2 blank lines, found 1
@dataclass
^
security/privacy/universal_privacy_manager_part2.py:83:1: E302 expected 2 blank lines, found 1
class UniversalPrivacyManagerPart2:
^
security/privacy/universal_privacy_manager_part2.py:85:1: W293 blank line contains whitespace
    
^
security/privacy/universal_privacy_manager_part2.py:92:1: W293 blank line contains whitespace
    
^
security/privacy/universal_privacy_manager_part2.py:101:1: W293 blank line contains whitespace
    
^
security/privacy/universal_privacy_manager_part2.py:108:1: W293 blank line contains whitespace
            
^
security/privacy/universal_privacy_manager_part2.py:110:80: E501 line too long (89 > 79 characters)
                consents_data = [consent.to_dict() for consent in self.consents.values()]
                                                                               ^
security/privacy/universal_privacy_manager_part2.py:112:1: W293 blank line contains whitespace
            
^
security/privacy/universal_privacy_manager_part2.py:116:80: E501 line too long (80 > 79 characters)
                events_data = [event.to_dict() for event in self.privacy_events]
                                                                               ^
security/privacy/universal_privacy_manager_part2.py:118:1: W293 blank line contains whitespace
            
^
security/privacy/universal_privacy_manager_part2.py:120:1: W293 blank line contains whitespace
            
^
security/privacy/universal_privacy_manager_part2.py:122:80: E501 line too long (88 > 79 characters)
            self.logger.error("Ошибка сохранения данных приватности: {}".format(str(e)))
                                                                               ^
security/privacy/universal_privacy_manager_part2.py:123:1: W293 blank line contains whitespace
    
^
security/privacy/universal_privacy_manager_part2.py:124:80: E501 line too long (83 > 79 characters)
    def create_consent(self, user_id: str, purpose: str, consent_type: ConsentType, 
                                                                               ^
security/privacy/universal_privacy_manager_part2.py:124:84: W291 trailing whitespace
    def create_consent(self, user_id: str, purpose: str, consent_type: ConsentType, 
                                                                                   ^
security/privacy/universal_privacy_manager_part2.py:125:23: E128 continuation line under-indented for visual indent
                      legal_basis: str = "", expires: datetime = None) -> str:
                      ^
security/privacy/universal_privacy_manager_part2.py:129:1: W293 blank line contains whitespace
            
^
security/privacy/universal_privacy_manager_part2.py:138:1: W293 blank line contains whitespace
            
^
security/privacy/universal_privacy_manager_part2.py:141:1: W293 blank line contains whitespace
            
^
security/privacy/universal_privacy_manager_part2.py:144:1: W293 blank line contains whitespace
            
^
security/privacy/universal_privacy_manager_part2.py:152:1: W293 blank line contains whitespace
            
^
security/privacy/universal_privacy_manager_part2.py:153:80: E501 line too long (99 > 79 characters)
            self.logger.info("Создано согласие {} для пользователя {}".format(consent_id, user_id))
                                                                               ^
security/privacy/universal_privacy_manager_part2.py:155:1: W293 blank line contains whitespace
            
^
security/privacy/universal_privacy_manager_part2.py:159:1: W293 blank line contains whitespace
    
^
security/privacy/universal_privacy_manager_part2.py:164:80: E501 line too long (80 > 79 characters)
                self.logger.warning("Согласие {} не найдено".format(consent_id))
                                                                               ^
security/privacy/universal_privacy_manager_part2.py:166:1: W293 blank line contains whitespace
            
^
security/privacy/universal_privacy_manager_part2.py:169:80: E501 line too long (118 > 79 characters)
                self.logger.warning("Пользователь {} не имеет права отозвать согласие {}".format(user_id, consent_id))
                                                                               ^
security/privacy/universal_privacy_manager_part2.py:171:1: W293 blank line contains whitespace
            
^
security/privacy/universal_privacy_manager_part2.py:172:30: F821 undefined name 'PrivacyStatus'
            consent.status = PrivacyStatus.REVOKED
                             ^
security/privacy/universal_privacy_manager_part2.py:175:1: W293 blank line contains whitespace
            
^
security/privacy/universal_privacy_manager_part2.py:183:1: W293 blank line contains whitespace
            
^
security/privacy/universal_privacy_manager_part2.py:184:80: E501 line too long (97 > 79 characters)
            self.logger.info("Согласие {} отозвано пользователем {}".format(consent_id, user_id))
                                                                               ^
security/privacy/universal_privacy_manager_part2.py:186:1: W293 blank line contains whitespace
            
^
security/privacy/universal_privacy_manager_part2.py:190:1: W293 blank line contains whitespace
    
^
security/privacy/universal_privacy_manager_part2.py:195:51: W291 trailing whitespace
                if (consent.user_id == user_id and 
                                                  ^
security/privacy/universal_privacy_manager_part2.py:196:51: W291 trailing whitespace
                    consent.purpose == purpose and 
                                                  ^
security/privacy/universal_privacy_manager_part2.py:197:39: F821 undefined name 'PrivacyStatus'
                    consent.status == PrivacyStatus.ACTIVE and
                                      ^
security/privacy/universal_privacy_manager_part2.py:198:5: E129 visually indented line with same indent as next logical line
                    consent.granted):
    ^
security/privacy/universal_privacy_manager_part2.py:200:1: W293 blank line contains whitespace
            
^
security/privacy/universal_privacy_manager_part2.py:202:1: W293 blank line contains whitespace
            
^
security/privacy/universal_privacy_manager_part2.py:206:1: W293 blank line contains whitespace
    
^
security/privacy/universal_privacy_manager_part2.py:207:80: E501 line too long (94 > 79 characters)
    def request_data_deletion(self, user_id: str, data_categories: List[DataCategory]) -> str:
                                                                               ^
security/privacy/universal_privacy_manager_part2.py:211:1: W293 blank line contains whitespace
            
^
security/privacy/universal_privacy_manager_part2.py:217:80: E501 line too long (104 > 79 characters)
                details={"request_id": request_id, "categories": [cat.value for cat in data_categories]}
                                                                               ^
security/privacy/universal_privacy_manager_part2.py:219:1: W293 blank line contains whitespace
            
^
security/privacy/universal_privacy_manager_part2.py:222:1: W293 blank line contains whitespace
            
^
security/privacy/universal_privacy_manager_part2.py:223:80: E501 line too long (108 > 79 characters)
            self.logger.info("Запрос на удаление данных {} для пользователя {}".format(request_id, user_id))
                                                                               ^
security/privacy/universal_privacy_manager_part2.py:225:1: W293 blank line contains whitespace
            
^
security/privacy/universal_privacy_manager_part2.py:227:80: E501 line too long (85 > 79 characters)
            self.logger.error("Ошибка запроса на удаление данных: {}".format(str(e)))
                                                                               ^
security/privacy/universal_privacy_manager_part2.py:229:1: W293 blank line contains whitespace
    
^
security/privacy/universal_privacy_manager_part2.py:230:80: E501 line too long (97 > 79 characters)
    def request_data_portability(self, user_id: str, data_categories: List[DataCategory]) -> str:
                                                                               ^
security/privacy/universal_privacy_manager_part2.py:234:1: W293 blank line contains whitespace
            
^
security/privacy/universal_privacy_manager_part2.py:240:80: E501 line too long (104 > 79 characters)
                details={"request_id": request_id, "categories": [cat.value for cat in data_categories]}
                                                                               ^
security/privacy/universal_privacy_manager_part2.py:242:1: W293 blank line contains whitespace
            
^
security/privacy/universal_privacy_manager_part2.py:245:1: W293 blank line contains whitespace
            
^
security/privacy/universal_privacy_manager_part2.py:246:80: E501 line too long (113 > 79 characters)
            self.logger.info("Запрос на портативность данных {} для пользователя {}".format(request_id, user_id))
                                                                               ^
security/privacy/universal_privacy_manager_part2.py:248:1: W293 blank line contains whitespace
            
^
security/privacy/universal_privacy_manager_part2.py:250:80: E501 line too long (90 > 79 characters)
            self.logger.error("Ошибка запроса на портативность данных: {}".format(str(e)))
                                                                               ^
security/privacy/universal_privacy_manager_part2.py:252:1: W293 blank line contains whitespace
    
^
security/privacy/universal_privacy_manager_part2.py:253:70: W291 trailing whitespace
    def _log_privacy_event(self, user_id: str, action: PrivacyAction, 
                                                                     ^
security/privacy/universal_privacy_manager_part2.py:254:27: E128 continuation line under-indented for visual indent
                          data_category: DataCategory, details: dict = None):
                          ^
security/privacy/universal_privacy_manager_part2.py:258:1: W293 blank line contains whitespace
            
^
security/privacy/universal_privacy_manager_part2.py:265:1: W293 blank line contains whitespace
            
^
security/privacy/universal_privacy_manager_part2.py:268:1: W293 blank line contains whitespace
            
^
security/privacy/universal_privacy_manager_part2.py:273:1: W293 blank line contains whitespace
            
^
security/privacy/universal_privacy_manager_part2.py:276:1: W293 blank line contains whitespace
            
^
security/privacy/universal_privacy_manager_part2.py:278:80: E501 line too long (90 > 79 characters)
            self.logger.error("Ошибка логирования события приватности: {}".format(str(e)))
                                                                               ^
security/privacy/universal_privacy_manager_part2.py:279:1: W293 blank line contains whitespace
    
^
security/privacy/universal_privacy_manager_part2.py:280:80: E501 line too long (97 > 79 characters)
    def _check_standard_compliance(self, event: PrivacyEvent, standard: PrivacyStandard) -> bool:
                                                                               ^
security/privacy/universal_privacy_manager_part2.py:291:1: W293 blank line contains whitespace
                
^
security/privacy/universal_privacy_manager_part2.py:293:80: E501 line too long (109 > 79 characters)
            self.logger.error("Ошибка проверки соответствия стандарту {}: {}".format(standard.value, str(e)))
                                                                               ^
security/privacy/universal_privacy_manager_part2.py:295:1: W293 blank line contains whitespace
    
^
security/privacy/universal_privacy_manager_part2.py:302:1: W293 blank line contains whitespace
            
^
security/privacy/universal_privacy_manager_part2.py:306:1: W293 blank line contains whitespace
            
^
security/privacy/universal_privacy_manager_part2.py:309:80: E501 line too long (80 > 79 characters)
                return True  # GDPR требует выполнения запросов на портативность
                                                                               ^
security/privacy/universal_privacy_manager_part2.py:310:1: W293 blank line contains whitespace
            
^
security/privacy/universal_privacy_manager_part2.py:312:1: W293 blank line contains whitespace
            
^
security/privacy/universal_privacy_manager_part2.py:314:80: E501 line too long (85 > 79 characters)
            self.logger.error("Ошибка проверки соответствия GDPR: {}".format(str(e)))
                                                                               ^
security/privacy/universal_privacy_manager_part2.py:316:1: W293 blank line contains whitespace
    
^
security/privacy/universal_privacy_manager_part2.py:323:1: W293 blank line contains whitespace
            
^
security/privacy/universal_privacy_manager_part2.py:327:1: W293 blank line contains whitespace
            
^
security/privacy/universal_privacy_manager_part2.py:329:1: W293 blank line contains whitespace
            
^
security/privacy/universal_privacy_manager_part2.py:331:80: E501 line too long (85 > 79 characters)
            self.logger.error("Ошибка проверки соответствия CCPA: {}".format(str(e)))
                                                                               ^
security/privacy/universal_privacy_manager_part2.py:333:1: W293 blank line contains whitespace
    
^
security/privacy/universal_privacy_manager_part2.py:339:80: E501 line too long (84 > 79 characters)
                return self.check_consent(event.user_id, "personal_data_processing")
                                                                               ^
security/privacy/universal_privacy_manager_part2.py:340:1: W293 blank line contains whitespace
            
^
security/privacy/universal_privacy_manager_part2.py:342:1: W293 blank line contains whitespace
            
^
security/privacy/universal_privacy_manager_part2.py:344:80: E501 line too long (87 > 79 characters)
            self.logger.error("Ошибка проверки соответствия 152-ФЗ: {}".format(str(e)))
                                                                               ^
security/privacy/universal_privacy_manager_part2.py:346:1: W293 blank line contains whitespace
    
^
security/privacy/universal_privacy_manager_part2.py:352:1: W293 blank line contains whitespace
            
^
security/privacy/universal_privacy_manager_part2.py:354:80: E501 line too long (113 > 79 characters)
                metrics["compliance_by_standard"][standard.value] = self._calculate_standard_compliance(standard)
                                                                               ^
security/privacy/universal_privacy_manager_part2.py:355:1: W293 blank line contains whitespace
            
^
security/privacy/universal_privacy_manager_part2.py:357:1: W293 blank line contains whitespace
            
^
security/privacy/universal_privacy_manager_part2.py:359:80: E501 line too long (87 > 79 characters)
            self.logger.error("Ошибка получения метрик приватности: {}".format(str(e)))
                                                                               ^
security/privacy/universal_privacy_manager_part2.py:361:1: W293 blank line contains whitespace
    
^
security/privacy/universal_privacy_manager_part2.py:369:1: W293 blank line contains whitespace
            
^
security/privacy/universal_privacy_manager_part2.py:371:1: W293 blank line contains whitespace
            
^
security/privacy/universal_privacy_manager_part2.py:373:80: E501 line too long (90 > 79 characters)
            self.logger.error("Ошибка получения согласий пользователя: {}".format(str(e)))
                                                                               ^
security/privacy/universal_privacy_manager_part2.py:375:1: W293 blank line contains whitespace
    
^
security/privacy/universal_privacy_manager_part2.py:376:80: E501 line too long (86 > 79 characters)
    def get_privacy_events(self, user_id: str = None, limit: int = 100) -> List[dict]:
                                                                               ^
security/privacy/universal_privacy_manager_part2.py:380:1: W293 blank line contains whitespace
            
^
security/privacy/universal_privacy_manager_part2.py:383:1: W293 blank line contains whitespace
            
^
security/privacy/universal_privacy_manager_part2.py:386:1: W293 blank line contains whitespace
            
^
security/privacy/universal_privacy_manager_part2.py:389:1: W293 blank line contains whitespace
            
^
security/privacy/universal_privacy_manager_part2.py:391:1: W293 blank line contains whitespace
            
^
security/privacy/universal_privacy_manager_part2.py:393:80: E501 line too long (88 > 79 characters)
            self.logger.error("Ошибка получения событий приватности: {}".format(str(e)))
                                                                               ^
security/privacy/universal_privacy_manager_part2.py:395:1: W293 blank line contains whitespace
    
^
security/privacy/universal_privacy_manager_part2.py:403:28: F821 undefined name 'hashlib'
                    return hashlib.sha256(data.encode()).hexdigest()[:8]
                           ^
security/privacy/universal_privacy_manager_part2.py:408:80: E501 line too long (80 > 79 characters)
                        if key.lower() in ['name', 'email', 'phone', 'address']:
                                                                               ^
security/privacy/universal_privacy_manager_part2.py:409:47: F821 undefined name 'hashlib'
                            anonymized[key] = hashlib.sha256(str(value).encode()).hexdigest()[:8]
                                              ^
security/privacy/universal_privacy_manager_part2.py:409:80: E501 line too long (97 > 79 characters)
                            anonymized[key] = hashlib.sha256(str(value).encode()).hexdigest()[:8]
                                                                               ^
security/privacy/universal_privacy_manager_part2.py:413:1: W293 blank line contains whitespace
            
^
security/privacy/universal_privacy_manager_part2.py:421:1: W293 blank line contains whitespace
            
^
security/privacy/universal_privacy_manager_part2.py:425:29: F821 undefined name 'hashlib'
                    return [hashlib.sha256(str(item).encode()).hexdigest()[:8] for item in data]
                            ^
security/privacy/universal_privacy_manager_part2.py:425:80: E501 line too long (96 > 79 characters)
                    return [hashlib.sha256(str(item).encode()).hexdigest()[:8] for item in data]
                                                                               ^
security/privacy/universal_privacy_manager_part2.py:426:1: W293 blank line contains whitespace
            
^
security/privacy/universal_privacy_manager_part2.py:428:1: W293 blank line contains whitespace
            
^
security/privacy/universal_privacy_manager_part2.py:432:1: W293 blank line contains whitespace
    
^
security/privacy/universal_privacy_manager_part2.py:433:80: E501 line too long (90 > 79 characters)
    def generate_privacy_report(self, user_id: str = None, period_days: int = 30) -> dict:
                                                                               ^
security/privacy/universal_privacy_manager_part2.py:437:37: F821 undefined name 'timedelta'
            start_date = end_date - timedelta(days=period_days)
                                    ^
security/privacy/universal_privacy_manager_part2.py:438:1: W293 blank line contains whitespace
            
^
security/privacy/universal_privacy_manager_part2.py:441:47: W291 trailing whitespace
                e for e in self.privacy_events 
                                              ^
security/privacy/universal_privacy_manager_part2.py:444:1: W293 blank line contains whitespace
            
^
security/privacy/universal_privacy_manager_part2.py:446:80: E501 line too long (82 > 79 characters)
                period_events = [e for e in period_events if e.user_id == user_id]
                                                                               ^
security/privacy/universal_privacy_manager_part2.py:447:1: W293 blank line contains whitespace
            
^
security/privacy/universal_privacy_manager_part2.py:453:1: W293 blank line contains whitespace
            
^
security/privacy/universal_privacy_manager_part2.py:459:1: W293 blank line contains whitespace
            
^
security/privacy/universal_privacy_manager_part2.py:463:80: E501 line too long (114 > 79 characters)
                compliant_events = sum(1 for e in period_events if e.compliance_status.get(standard.value, False))
                                                                               ^
security/privacy/universal_privacy_manager_part2.py:465:80: E501 line too long (117 > 79 characters)
                compliance_stats[standard.value] = (compliant_events / total_events * 100) if total_events > 0 else 0
                                                                               ^
security/privacy/universal_privacy_manager_part2.py:466:1: W293 blank line contains whitespace
            
^
security/privacy/universal_privacy_manager_part2.py:478:80: E501 line too long (120 > 79 characters)
                "overall_compliance": sum(compliance_stats.values()) / len(compliance_stats) if compliance_stats else 0,
                                                                               ^
security/privacy/universal_privacy_manager_part2.py:481:1: W293 blank line contains whitespace
            
^
security/privacy/universal_privacy_manager_part2.py:483:1: W293 blank line contains whitespace
            
^
security/privacy/universal_privacy_manager_part2.py:485:80: E501 line too long (89 > 79 characters)
            self.logger.error("Ошибка генерации отчета о приватности: {}".format(str(e)))
                                                                               ^
security/privacy/universal_privacy_manager_part2.py:492:1: W293 blank line contains whitespace
    
^
security/privacy/universal_privacy_manager_part2.py:494:15: F821 undefined name 'UniversalPrivacyManager'
    manager = UniversalPrivacyManager("TestUniversalPrivacy")
              ^
security/privacy/universal_privacy_manager_part2.py:495:1: W293 blank line contains whitespace
    
^
security/privacy/universal_privacy_manager_part2.py:499:1: W293 blank line contains whitespace
        
^
security/privacy/universal_privacy_manager_part2.py:508:1: W293 blank line contains whitespace
        
^
security/privacy/universal_privacy_manager_part2.py:512:1: W293 blank line contains whitespace
        
^
security/privacy/universal_privacy_manager_part2.py:519:1: W293 blank line contains whitespace
        
^
security/privacy/universal_privacy_manager_part2.py:523:1: W293 blank line contains whitespace
        
^
security/privacy/universal_privacy_manager_part2.py:528:64: W292 no newline at end of file
        print("❌ Ошибка инициализации UniversalPrivacyManager")                                                               ^
security/production_persistence_manager.py:12:1: F401 'typing.Optional' imported but unused
from typing import Dict, Any, Optional
^
security/production_persistence_manager.py:14:1: E302 expected 2 blank lines, found 1
class ProductionPersistenceManager:
^
security/production_persistence_manager.py:16:1: W293 blank line contains whitespace
    
^
security/production_persistence_manager.py:17:80: E501 line too long (90 > 79 characters)
    def __init__(self, sfm_instance, registry_file: str = "data/functions_registry.json"):
                                                                               ^
security/production_persistence_manager.py:27:1: W293 blank line contains whitespace
        
^
security/production_persistence_manager.py:30:1: W293 blank line contains whitespace
        
^
security/production_persistence_manager.py:31:15: F541 f-string is missing placeholders
        print(f"🔧 ProductionPersistenceManager инициализирован")
              ^
security/production_persistence_manager.py:33:1: W293 blank line contains whitespace
    
^
security/production_persistence_manager.py:39:1: W293 blank line contains whitespace
                
^
security/production_persistence_manager.py:47:80: E501 line too long (151 > 79 characters)
                        "security_level": function.security_level.value if hasattr(function.security_level, 'value') else str(function.security_level),
                                                                               ^
security/production_persistence_manager.py:48:80: E501 line too long (119 > 79 characters)
                        "status": function.status.value if hasattr(function.status, 'value') else str(function.status),
                                                                               ^
security/production_persistence_manager.py:49:80: E501 line too long (137 > 79 characters)
                        "created_at": function.created_at.isoformat() if hasattr(function, 'created_at') else datetime.now().isoformat(),
                                                                               ^
security/production_persistence_manager.py:53:1: W293 blank line contains whitespace
                
^
security/production_persistence_manager.py:60:1: W293 blank line contains whitespace
                
^
security/production_persistence_manager.py:64:1: W293 blank line contains whitespace
                
^
security/production_persistence_manager.py:67:1: W293 blank line contains whitespace
                
^
security/production_persistence_manager.py:71:1: W293 blank line contains whitespace
    
^
security/production_persistence_manager.py:78:1: W293 blank line contains whitespace
            
^
security/production_persistence_manager.py:81:1: W293 blank line contains whitespace
            
^
security/production_persistence_manager.py:84:1: W293 blank line contains whitespace
            
^
security/production_persistence_manager.py:86:1: W293 blank line contains whitespace
            
^
security/production_persistence_manager.py:94:1: W293 blank line contains whitespace
                        
^
security/production_persistence_manager.py:101:80: E501 line too long (94 > 79 characters)
                            security_level=SecurityLevel[func_data["security_level"].upper()],
                                                                               ^
security/production_persistence_manager.py:105:1: W293 blank line contains whitespace
                        
^
security/production_persistence_manager.py:112:80: E501 line too long (80 > 79 characters)
                        print(f"   ℹ️ {func_data['name']} уже зарегистрирована")
                                                                               ^
security/production_persistence_manager.py:113:1: W293 blank line contains whitespace
                        
^
security/production_persistence_manager.py:117:1: W293 blank line contains whitespace
            
^
security/production_persistence_manager.py:120:1: W293 blank line contains whitespace
            
^
security/production_persistence_manager.py:124:1: W293 blank line contains whitespace
    
^
security/production_persistence_manager.py:130:1: W293 blank line contains whitespace
            
^
security/production_persistence_manager.py:134:80: E501 line too long (92 > 79 characters)
                print(f"✅ Функция {kwargs.get('function_id')} зарегистрирована и сохранена")
                                                                               ^
security/production_persistence_manager.py:135:1: W293 blank line contains whitespace
            
^
security/production_persistence_manager.py:137:1: W293 blank line contains whitespace
            
^
security/production_persistence_manager.py:141:1: W293 blank line contains whitespace
    
^
security/production_persistence_manager.py:147:80: E501 line too long (114 > 79 characters)
                "enabled_functions": len([f for f in self.sfm.functions.values() if f.status.value == "enabled"]),
                                                                               ^
security/production_persistence_manager.py:148:80: E501 line too long (116 > 79 characters)
                "disabled_functions": len([f for f in self.sfm.functions.values() if f.status.value == "disabled"]),
                                                                               ^
security/production_persistence_manager.py:149:80: E501 line too long (120 > 79 characters)
                "critical_functions": len([f for f in self.sfm.functions.values() if getattr(f, 'is_critical', False)]),
                                                                               ^
security/production_persistence_manager.py:157:1: W293 blank line contains whitespace
    
^
security/production_persistence_manager.py:162:1: W293 blank line contains whitespace
            
^
security/production_persistence_manager.py:193:1: W293 blank line contains whitespace
            
^
security/production_persistence_manager.py:197:80: E501 line too long (82 > 79 characters)
                    success = self.register_function_with_persistence(**func_data)
                                                                               ^
security/production_persistence_manager.py:200:1: W293 blank line contains whitespace
            
^
security/production_persistence_manager.py:201:80: E501 line too long (80 > 79 characters)
            print(f"✅ Инициализировано критических функций: {registered_count}")
                                                                               ^
security/production_persistence_manager.py:203:1: W293 blank line contains whitespace
            
^
security/production_persistence_manager.py:208:1: E305 expected 2 blank lines after class or function definition, found 1
if __name__ == "__main__":
^
security/protected_data_manager.py:71:80: E501 line too long (83 > 79 characters)
            self.log_activity("Система защиты критических данных инициализирована")
                                                                               ^
security/protected_data_manager.py:115:80: E501 line too long (90 > 79 characters)
        self.log_activity(f"Защищено {len(absolute_protection)} паттернов файлов проекта")
                                                                               ^
security/protected_data_manager.py:143:80: E501 line too long (106 > 79 characters)
        self.log_activity(f"Защищено {len(critical_security_data)} типов критических данных безопасности")
                                                                               ^
security/protected_data_manager.py:167:80: E501 line too long (88 > 79 characters)
        self.log_activity(f"Защищено {len(config_files)} типов конфигурационных файлов")
                                                                               ^
security/protected_data_manager.py:192:80: E501 line too long (84 > 79 characters)
        self.log_activity(f"Защищено {len(documentation_files)} типов документации")
                                                                               ^
security/protected_data_manager.py:220:80: E501 line too long (99 > 79 characters)
                if fnmatch.fnmatch(filename, pattern) or fnmatch.fnmatch(normalized_path, pattern):
                                                                               ^
security/protected_data_manager.py:226:80: E501 line too long (88 > 79 characters)
            self.log_activity(f"Ошибка проверки защиты файла {file_path}: {e}", "error")
                                                                               ^
security/protected_data_manager.py:247:80: E501 line too long (93 > 79 characters)
                f"ФАЙЛ ЗАЩИЩЕН ОТ УДАЛЕНИЯ: {file_path} (уровень: {protection_level.value})",
                                                                               ^
security/protected_data_manager.py:270:80: E501 line too long (84 > 79 characters)
        if protection_level in [ProtectionLevel.ABSOLUTE, ProtectionLevel.CRITICAL]:
                                                                               ^
security/protected_data_manager.py:276:80: E501 line too long (80 > 79 characters)
    def add_protection(self, file_path: str, protection_level: ProtectionLevel):
                                                                               ^
security/protected_data_manager.py:287:80: E501 line too long (106 > 79 characters)
                self.log_activity(f"Защищена директория: {file_path} (уровень: {protection_level.value})")
                                                                               ^
security/protected_data_manager.py:290:80: E501 line too long (99 > 79 characters)
                self.log_activity(f"Защищен файл: {file_path} (уровень: {protection_level.value})")
                                                                               ^
security/protected_data_manager.py:293:80: E501 line too long (88 > 79 characters)
            self.log_activity(f"Ошибка добавления защиты для {file_path}: {e}", "error")
                                                                               ^
security/protected_data_manager.py:309:80: E501 line too long (89 > 79 characters)
                    f"НЕВОЗМОЖНО УДАЛИТЬ ЗАЩИТУ: {file_path} - критический файл проекта",
                                                                               ^
security/protected_data_manager.py:328:80: E501 line too long (86 > 79 characters)
            self.log_activity(f"Ошибка удаления защиты для {file_path}: {e}", "error")
                                                                               ^
security/protected_data_manager.py:370:80: E501 line too long (113 > 79 characters)
                dirs[:] = [d for d in dirs if not d.startswith(".") and d not in ["__pycache__", "node_modules"]]
                                                                               ^
security/protected_data_manager.py:379:80: E501 line too long (84 > 79 characters)
                            self.add_protection(file_path, ProtectionLevel.ABSOLUTE)
                                                                               ^
security/protected_data_manager.py:386:80: E501 line too long (117 > 79 characters)
                datetime.fromisoformat(scan_results["end_time"]) - datetime.fromisoformat(scan_results["start_time"])
                                                                               ^
security/protected_data_manager.py:425:80: E501 line too long (116 > 79 characters)
                level.value: sum(1 for _, pl in self.protected_patterns if pl == level) for level in ProtectionLevel
                                                                               ^
security/ransomware_protection.py:12:1: F401 'dataclasses.field' imported but unused
from dataclasses import dataclass, field
^
security/ransomware_protection.py:13:1: F401 'datetime.timedelta' imported but unused
from datetime import datetime, timedelta
^
security/ransomware_protection.py:14:1: F401 'pathlib.Path' imported but unused
from pathlib import Path
^
security/ransomware_protection.py:17:1: F401 'asyncio' imported but unused
import asyncio
^
security/ransomware_protection.py:20:1: E302 expected 2 blank lines, found 1
class FileSystemEventHandler:
^
security/ransomware_protection.py:24:1: W293 blank line contains whitespace
    
^
security/ransomware_protection.py:27:1: W293 blank line contains whitespace
    
^
security/ransomware_protection.py:31:1: E302 expected 2 blank lines, found 1
class Observer:
^
security/ransomware_protection.py:35:1: W293 blank line contains whitespace
    
^
security/ransomware_protection.py:38:1: W293 blank line contains whitespace
    
^
security/ransomware_protection.py:41:1: W293 blank line contains whitespace
    
^
security/ransomware_protection.py:44:1: W293 blank line contains whitespace
    
^
security/ransomware_protection.py:48:1: E302 expected 2 blank lines, found 1
@dataclass
^
security/ransomware_protection.py:57:1: E302 expected 2 blank lines, found 1
@dataclass
^
security/ransomware_protection.py:68:1: E302 expected 2 blank lines, found 1
@dataclass
^
security/ransomware_protection.py:80:1: E302 expected 2 blank lines, found 1
class RansomwareProtectionSystem:
^
security/ransomware_protection.py:85:1: W293 blank line contains whitespace
    
^
security/ransomware_protection.py:92:80: E501 line too long (80 > 79 characters)
        self.alert_threshold = 10  # Количество подозрительных файлов для алерта
                                                                               ^
security/ransomware_protection.py:95:1: W293 blank line contains whitespace
        
^
security/ransomware_protection.py:98:1: W293 blank line contains whitespace
        
^
security/ransomware_protection.py:103:1: W293 blank line contains whitespace
        
^
security/ransomware_protection.py:113:1: W293 blank line contains whitespace
        
^
security/ransomware_protection.py:116:1: W293 blank line contains whitespace
        
^
security/ransomware_protection.py:123:80: E501 line too long (87 > 79 characters)
                suspicious_patterns=["WannaCry", "Wanna Decrypt0r", "Wanna Decryptor"],
                                                                               ^
security/ransomware_protection.py:124:80: E501 line too long (96 > 79 characters)
                behavior_indicators=["mass_file_encryption", "bitcoin_demand", "timer_display"],
                                                                               ^
security/ransomware_protection.py:137:80: E501 line too long (81 > 79 characters)
                suspicious_patterns=["CryptoLocker", "Your files are encrypted"],
                                                                               ^
security/ransomware_protection.py:138:80: E501 line too long (80 > 79 characters)
                behavior_indicators=["mass_file_encryption", "bitcoin_payment"],
                                                                               ^
security/ransomware_protection.py:150:80: E501 line too long (81 > 79 characters)
                file_extensions={".encrypted", ".locked", ".crypted", ".crypto"},
                                                                               ^
security/ransomware_protection.py:151:80: E501 line too long (81 > 79 characters)
                suspicious_patterns=["encrypted", "locked", "crypted", "crypto"],
                                                                               ^
security/ransomware_protection.py:157:1: W293 blank line contains whitespace
    
^
security/ransomware_protection.py:163:1: W293 blank line contains whitespace
            
^
security/ransomware_protection.py:166:1: W293 blank line contains whitespace
            
^
security/ransomware_protection.py:169:1: W293 blank line contains whitespace
            
^
security/ransomware_protection.py:172:1: W293 blank line contains whitespace
            
^
security/ransomware_protection.py:173:80: E501 line too long (96 > 79 characters)
            self.logger.info(f"Защита от ransomware запущена для {len(directories)} директорий")
                                                                               ^
security/ransomware_protection.py:175:1: W293 blank line contains whitespace
            
^
security/ransomware_protection.py:179:1: W293 blank line contains whitespace
    
^
security/ransomware_protection.py:183:1: W293 blank line contains whitespace
        
^
security/ransomware_protection.py:187:80: E501 line too long (80 > 79 characters)
                self.observer.schedule(event_handler, directory, recursive=True)
                                                                               ^
security/ransomware_protection.py:188:1: W293 blank line contains whitespace
        
^
security/ransomware_protection.py:190:1: W293 blank line contains whitespace
    
^
security/ransomware_protection.py:199:80: E501 line too long (91 > 79 characters)
                    self.logger.error(f"Ошибка в планировщике резервного копирования: {e}")
                                                                               ^
security/ransomware_protection.py:201:1: W293 blank line contains whitespace
        
^
security/ransomware_protection.py:204:1: W293 blank line contains whitespace
    
^
security/ransomware_protection.py:213:80: E501 line too long (82 > 79 characters)
                    self.logger.error(f"Ошибка в периодическом сканировании: {e}")
                                                                               ^
security/ransomware_protection.py:215:1: W293 blank line contains whitespace
        
^
security/ransomware_protection.py:218:1: W293 blank line contains whitespace
    
^
security/ransomware_protection.py:224:1: W293 blank line contains whitespace
            
^
security/ransomware_protection.py:228:80: E501 line too long (109 > 79 characters)
                    backup_path = os.path.join(self.backup_directory, backup_id, os.path.basename(directory))
                                                                               ^
security/ransomware_protection.py:230:1: W293 blank line contains whitespace
                    
^
security/ransomware_protection.py:233:1: W293 blank line contains whitespace
                    
^
security/ransomware_protection.py:236:1: W293 blank line contains whitespace
            
^
security/ransomware_protection.py:239:1: W293 blank line contains whitespace
            
^
security/ransomware_protection.py:242:1: W293 blank line contains whitespace
            
^
security/ransomware_protection.py:243:80: E501 line too long (84 > 79 characters)
            self.logger.info(f"Автоматическая резервная копия создана: {backup_id}")
                                                                               ^
security/ransomware_protection.py:245:1: W293 blank line contains whitespace
            
^
security/ransomware_protection.py:249:1: W293 blank line contains whitespace
    
^
security/ransomware_protection.py:259:1: W293 blank line contains whitespace
        
^
security/ransomware_protection.py:266:1: W293 blank line contains whitespace
                
^
security/ransomware_protection.py:273:1: W293 blank line contains whitespace
                
^
security/ransomware_protection.py:275:1: W293 blank line contains whitespace
        
^
security/ransomware_protection.py:277:1: W293 blank line contains whitespace
        
^
security/ransomware_protection.py:282:1: W293 blank line contains whitespace
    
^
security/ransomware_protection.py:286:72: W291 trailing whitespace
            backup_dirs = [d for d in os.listdir(self.backup_directory) 
                                                                       ^
security/ransomware_protection.py:287:27: E128 continuation line under-indented for visual indent
                          if os.path.isdir(os.path.join(self.backup_directory, d))]
                          ^
security/ransomware_protection.py:287:80: E501 line too long (83 > 79 characters)
                          if os.path.isdir(os.path.join(self.backup_directory, d))]
                                                                               ^
security/ransomware_protection.py:288:1: W293 blank line contains whitespace
            
^
security/ransomware_protection.py:291:80: E501 line too long (104 > 79 characters)
                backup_dirs.sort(key=lambda x: os.path.getctime(os.path.join(self.backup_directory, x)))
                                                                               ^
security/ransomware_protection.py:292:1: W293 blank line contains whitespace
                
^
security/ransomware_protection.py:297:80: E501 line too long (85 > 79 characters)
                    self.logger.info(f"Удалена старая резервная копия: {old_backup}")
                                                                               ^
security/ransomware_protection.py:298:1: W293 blank line contains whitespace
                    
^
security/ransomware_protection.py:301:1: W293 blank line contains whitespace
    
^
security/ransomware_protection.py:307:1: W293 blank line contains whitespace
            
^
security/ransomware_protection.py:311:1: W293 blank line contains whitespace
                    
^
security/ransomware_protection.py:315:1: W293 blank line contains whitespace
                        
^
security/ransomware_protection.py:320:1: W293 blank line contains whitespace
                        
^
security/ransomware_protection.py:325:1: W293 blank line contains whitespace
            
^
security/ransomware_protection.py:328:1: W293 blank line contains whitespace
            
^
security/ransomware_protection.py:331:80: E501 line too long (87 > 79 characters)
                self._generate_ransomware_alert(suspicious_count, new_suspicious_files)
                                                                               ^
security/ransomware_protection.py:332:1: W293 blank line contains whitespace
            
^
security/ransomware_protection.py:334:1: W293 blank line contains whitespace
            
^
security/ransomware_protection.py:337:1: W293 blank line contains whitespace
    
^
security/ransomware_protection.py:341:1: W293 blank line contains whitespace
        
^
security/ransomware_protection.py:345:1: W293 blank line contains whitespace
        
^
security/ransomware_protection.py:347:1: W293 blank line contains whitespace
    
^
security/ransomware_protection.py:351:80: E501 line too long (102 > 79 characters)
            if not os.path.exists(file_path) or os.path.getsize(file_path) > 10 * 1024 * 1024:  # 10MB
                                                                               ^
security/ransomware_protection.py:353:1: W293 blank line contains whitespace
            
^
security/ransomware_protection.py:356:1: W293 blank line contains whitespace
                
^
security/ransomware_protection.py:361:1: W293 blank line contains whitespace
                            
^
security/ransomware_protection.py:364:1: W293 blank line contains whitespace
        
^
security/ransomware_protection.py:366:1: W293 blank line contains whitespace
    
^
security/ransomware_protection.py:367:80: E501 line too long (93 > 79 characters)
    def _generate_ransomware_alert(self, suspicious_count: int, suspicious_files: List[str]):
                                                                               ^
security/ransomware_protection.py:374:80: E501 line too long (106 > 79 characters)
            description=f"Обнаружено {suspicious_count} подозрительных файлов, возможна ransomware атака",
                                                                               ^
security/ransomware_protection.py:377:1: W293 blank line contains whitespace
        
^
security/ransomware_protection.py:380:1: W293 blank line contains whitespace
        
^
security/ransomware_protection.py:383:1: W293 blank line contains whitespace
        
^
security/ransomware_protection.py:386:1: W293 blank line contains whitespace
    
^
security/ransomware_protection.py:390:80: E501 line too long (92 > 79 characters)
            alert_file = os.path.join(self.backup_directory, f"alert_{alert.alert_id}.json")
                                                                               ^
security/ransomware_protection.py:391:1: W293 blank line contains whitespace
            
^
security/ransomware_protection.py:402:1: W293 blank line contains whitespace
            
^
security/ransomware_protection.py:405:1: W293 blank line contains whitespace
                
^
security/ransomware_protection.py:408:1: W293 blank line contains whitespace
    
^
security/ransomware_protection.py:414:80: E501 line too long (82 > 79 characters)
                quarantine_dir = os.path.join(self.backup_directory, "quarantine")
                                                                               ^
security/ransomware_protection.py:416:1: W293 blank line contains whitespace
                
^
security/ransomware_protection.py:418:80: E501 line too long (108 > 79 characters)
                quarantine_path = os.path.join(quarantine_dir, f"quarantined_{int(time.time())}_{filename}")
                                                                               ^
security/ransomware_protection.py:419:1: W293 blank line contains whitespace
                
^
security/ransomware_protection.py:421:80: E501 line too long (99 > 79 characters)
                self.logger.warning(f"Файл перемещен в карантин: {file_path} -> {quarantine_path}")
                                                                               ^
security/ransomware_protection.py:422:1: W293 blank line contains whitespace
                
^
security/ransomware_protection.py:425:1: W293 blank line contains whitespace
    
^
security/ransomware_protection.py:436:1: W293 blank line contains whitespace
    
^
security/ransomware_protection.py:450:1: W293 blank line contains whitespace
    
^
security/ransomware_protection.py:459:1: E302 expected 2 blank lines, found 1
class RansomwareFileHandler(FileSystemEventHandler):
^
security/ransomware_protection.py:461:1: W293 blank line contains whitespace
    
^
security/ransomware_protection.py:465:1: W293 blank line contains whitespace
    
^
security/ransomware_protection.py:470:1: W293 blank line contains whitespace
    
^
security/ransomware_protection.py:475:1: W293 blank line contains whitespace
    
^
security/ransomware_protection.py:481:80: E501 line too long (82 > 79 characters)
                self.logger.warning(f"Обнаружен подозрительный файл: {file_path}")
                                                                               ^
security/ransomware_protection.py:482:1: W293 blank line contains whitespace
                
^
security/ransomware_protection.py:485:1: W293 blank line contains whitespace
                
^
security/ransomware_protection.py:490:1: E305 expected 2 blank lines after class or function definition, found 1
if __name__ == "__main__":
^
security/ransomware_protection.py:493:1: W293 blank line contains whitespace
    
^
security/ransomware_protection.py:500:1: W293 blank line contains whitespace
    
^
security/ransomware_protection.py:503:1: W293 blank line contains whitespace
        
^
security/ransomware_protection.py:507:80: E501 line too long (85 > 79 characters)
        print(f"📁 Мониторируемые директории: {len(status['monitored_directories'])}")
                                                                               ^
security/ransomware_protection.py:509:1: W293 blank line contains whitespace
        
^
security/ransomware_protection.py:511:9: F811 redefinition of unused 'time' from line 9
        import time
        ^
security/ransomware_protection.py:516:55: W292 no newline at end of file
        print("❌ Ошибка запуска защиты от ransomware")                                                      ^
security/reactive/forensics_service.py:80:80: E501 line too long (82 > 79 characters)
    age_appropriate_explanation: Dict[AgeGroup, str] = field(default_factory=dict)
                                                                               ^
security/reactive/forensics_service.py:214:80: E501 line too long (111 > 79 characters)
    def start_investigation(self, incident_type: IncidentType, incident_data: Dict[str, Any]) -> Investigation:
                                                                               ^
security/reactive/forensics_service.py:217:80: E501 line too long (112 > 79 characters)
            investigation_id = f"investigation_{incident_type.value}_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
                                                                               ^
security/reactive/forensics_service.py:225:80: E501 line too long (98 > 79 characters)
                family_impact_assessment=self._assess_family_impact(incident_type, incident_data),
                                                                               ^
security/reactive/forensics_service.py:236:80: E501 line too long (107 > 79 characters)
                description=f"Начато расследование {investigation_id} для инцидента {incident_type.value}",
                                                                               ^
security/reactive/forensics_service.py:257:80: E501 line too long (104 > 79 characters)
    def _assess_family_impact(self, incident_type: IncidentType, _incident_data: Dict[str, Any]) -> str:
                                                                               ^
security/reactive/forensics_service.py:260:80: E501 line too long (92 > 79 characters)
            IncidentType.MALWARE_INFECTION: "Высокое - может заразить все устройства семьи",
                                                                               ^
security/reactive/forensics_service.py:261:80: E501 line too long (81 > 79 characters)
            IncidentType.DATA_BREACH: "Критическое - утечка личных данных семьи",
                                                                               ^
security/reactive/forensics_service.py:262:80: E501 line too long (103 > 79 characters)
            IncidentType.UNAUTHORIZED_ACCESS: "Высокое - несанкционированный доступ к семейным данным",
                                                                               ^
security/reactive/forensics_service.py:263:80: E501 line too long (83 > 79 characters)
            IncidentType.PHISHING_ATTEMPT: "Среднее - попытка обмана членов семьи",
                                                                               ^
security/reactive/forensics_service.py:264:80: E501 line too long (84 > 79 characters)
            IncidentType.SOCIAL_ENGINEERING: "Среднее - попытка манипуляции семьей",
                                                                               ^
security/reactive/forensics_service.py:265:80: E501 line too long (87 > 79 characters)
            IncidentType.SYSTEM_COMPROMISE: "Высокое - компрометация семейной системы",
                                                                               ^
security/reactive/forensics_service.py:266:80: E501 line too long (82 > 79 characters)
            IncidentType.NETWORK_INTRUSION: "Высокое - вторжение в домашнюю сеть",
                                                                               ^
security/reactive/forensics_service.py:267:80: E501 line too long (88 > 79 characters)
            IncidentType.PRIVILEGE_ESCALATION: "Среднее - попытка повышения привилегий",
                                                                               ^
security/reactive/forensics_service.py:270:80: E501 line too long (83 > 79 characters)
        return impact_levels.get(incident_type, "Неизвестное воздействие на семью")
                                                                               ^
security/reactive/forensics_service.py:272:80: E501 line too long (82 > 79 characters)
    def collect_evidence(self, investigation_id: str, evidence_type: EvidenceType,
                                                                               ^
security/reactive/forensics_service.py:277:80: E501 line too long (80 > 79 characters)
                raise ValueError(f"Расследование {investigation_id} не найдено")
                                                                               ^
security/reactive/forensics_service.py:279:80: E501 line too long (102 > 79 characters)
            evidence_id = f"evidence_{evidence_type.value}_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
                                                                               ^
security/reactive/forensics_service.py:287:80: E501 line too long (85 > 79 characters)
                description=f"Доказательство типа {evidence_type.value} из {source}",
                                                                               ^
security/reactive/forensics_service.py:288:80: E501 line too long (80 > 79 characters)
                priority=self._determine_evidence_priority(evidence_type, data),
                                                                               ^
security/reactive/forensics_service.py:290:80: E501 line too long (87 > 79 characters)
                family_impact=self._assess_evidence_family_impact(evidence_type, data),
                                                                               ^
security/reactive/forensics_service.py:291:80: E501 line too long (102 > 79 characters)
                age_appropriate_explanation=self._generate_evidence_explanations(evidence_type, data),
                                                                               ^
security/reactive/forensics_service.py:296:80: E501 line too long (82 > 79 characters)
            self.active_investigations[investigation_id].evidence.append(evidence)
                                                                               ^
security/reactive/forensics_service.py:302:80: E501 line too long (105 > 79 characters)
                description=f"Собрано доказательство {evidence_id} для расследования {investigation_id}",
                                                                               ^
security/reactive/forensics_service.py:324:80: E501 line too long (115 > 79 characters)
    def _determine_evidence_priority(self, evidence_type: EvidenceType, _data: Dict[str, Any]) -> EvidencePriority:
                                                                               ^
security/reactive/forensics_service.py:339:80: E501 line too long (104 > 79 characters)
    def _assess_evidence_family_impact(self, evidence_type: EvidenceType, _data: Dict[str, Any]) -> str:
                                                                               ^
security/reactive/forensics_service.py:342:80: E501 line too long (80 > 79 characters)
            EvidenceType.MEMORY_DUMP: "Может содержать личную информацию семьи",
                                                                               ^
security/reactive/forensics_service.py:343:80: E501 line too long (81 > 79 characters)
            EvidenceType.SYSTEM_STATE: "Показывает состояние семейных устройств",
                                                                               ^
security/reactive/forensics_service.py:344:80: E501 line too long (82 > 79 characters)
            EvidenceType.NETWORK_TRAFFIC: "Отображает активность в домашней сети",
                                                                               ^
security/reactive/forensics_service.py:352:80: E501 line too long (84 > 79 characters)
        return impact_mapping.get(evidence_type, "Неизвестное воздействие на семью")
                                                                               ^
security/reactive/forensics_service.py:354:80: E501 line too long (120 > 79 characters)
    def _generate_evidence_explanations(self, evidence_type: EvidenceType, data: Dict[str, Any]) -> Dict[AgeGroup, str]:
                                                                               ^
security/reactive/forensics_service.py:360:80: E501 line too long (94 > 79 characters)
            "Мы собираем информацию о том, что произошло с компьютером, чтобы защитить семью."
                                                                               ^
security/reactive/forensics_service.py:364:80: E501 line too long (119 > 79 characters)
        explanations[AgeGroup.TEENAGERS] = f"Собираем доказательства типа {evidence_type.value} для анализа инцидента."
                                                                               ^
security/reactive/forensics_service.py:369:80: E501 line too long (96 > 79 characters)
            f"Собрано доказательство типа {evidence_type.value} с приоритетом {priority.value}."
                                                                               ^
security/reactive/forensics_service.py:373:80: E501 line too long (94 > 79 characters)
        explanations[AgeGroup.ELDERLY] = "Собираем информацию для защиты семьи от киберугроз."
                                                                               ^
security/reactive/forensics_service.py:381:80: E501 line too long (80 > 79 characters)
                raise ValueError(f"Расследование {investigation_id} не найдено")
                                                                               ^
security/reactive/forensics_service.py:399:80: E501 line too long (100 > 79 characters)
                description=f"Проанализированы доказательства для расследования {investigation_id}",
                                                                               ^
security/reactive/forensics_service.py:423:80: E501 line too long (109 > 79 characters)
            EvidenceType.MEMORY_DUMP: f"Анализ памяти показал подозрительную активность в {evidence.source}",
                                                                               ^
security/reactive/forensics_service.py:424:80: E501 line too long (105 > 79 characters)
            EvidenceType.SYSTEM_STATE: f"Состояние системы {evidence.source} указывает на компрометацию",
                                                                               ^
security/reactive/forensics_service.py:425:80: E501 line too long (99 > 79 characters)
            EvidenceType.NETWORK_TRAFFIC: f"Сетевой трафик из {evidence.source} содержит аномалии",
                                                                               ^
security/reactive/forensics_service.py:426:80: E501 line too long (89 > 79 characters)
            EvidenceType.LOG_FILE: f"Лог-файл {evidence.source} содержит признаки атаки",
                                                                               ^
security/reactive/forensics_service.py:427:80: E501 line too long (101 > 79 characters)
            EvidenceType.USER_ACTIVITY: f"Активность пользователя в {evidence.source} подозрительна",
                                                                               ^
security/reactive/forensics_service.py:428:80: E501 line too long (90 > 79 characters)
            EvidenceType.FILE_SYSTEM: f"Файловая система {evidence.source} была изменена",
                                                                               ^
security/reactive/forensics_service.py:429:80: E501 line too long (94 > 79 characters)
            EvidenceType.REGISTRY: f"Реестр {evidence.source} содержит подозрительные записи",
                                                                               ^
security/reactive/forensics_service.py:430:80: E501 line too long (112 > 79 characters)
            EvidenceType.BROWSER_HISTORY: f"История браузера {evidence.source} показывает подозрительные сайты",
                                                                               ^
security/reactive/forensics_service.py:435:80: E501 line too long (92 > 79 characters)
            f"Доказательство {evidence.evidence_type.value} требует дополнительного анализа"
                                                                               ^
security/reactive/forensics_service.py:442:80: E501 line too long (80 > 79 characters)
                raise ValueError(f"Расследование {investigation_id} не найдено")
                                                                               ^
security/reactive/forensics_service.py:452:80: E501 line too long (89 > 79 characters)
            investigation.recommendations = self._generate_recommendations(investigation)
                                                                               ^
security/reactive/forensics_service.py:455:80: E501 line too long (95 > 79 characters)
            investigation.age_appropriate_summary = self._generate_age_summaries(investigation)
                                                                               ^
security/reactive/forensics_service.py:474:80: E501 line too long (87 > 79 characters)
                    "duration": str(investigation.end_time - investigation.start_time),
                                                                               ^
security/reactive/forensics_service.py:476:80: E501 line too long (80 > 79 characters)
                    "recommendations_count": len(investigation.recommendations),
                                                                               ^
security/reactive/forensics_service.py:491:80: E501 line too long (83 > 79 characters)
    def _generate_recommendations(self, investigation: Investigation) -> List[str]:
                                                                               ^
security/reactive/forensics_service.py:524:80: E501 line too long (91 > 79 characters)
    def _generate_age_summaries(self, investigation: Investigation) -> Dict[AgeGroup, str]:
                                                                               ^
security/reactive/forensics_service.py:530:80: E501 line too long (99 > 79 characters)
            "Мы проверили компьютер и нашли проблему. Теперь мы её исправим, чтобы защитить семью."
                                                                               ^
security/reactive/forensics_service.py:535:80: E501 line too long (86 > 79 characters)
            f"Расследование инцидента {investigation.incident_type.value} завершено. "
                                                                               ^
security/reactive/forensics_service.py:542:80: E501 line too long (114 > 79 characters)
            f"Собрано {len(investigation.evidence)} доказательств, найдено {len(investigation.findings)} проблем."
                                                                               ^
security/reactive/forensics_service.py:547:80: E501 line too long (100 > 79 characters)
            "Мы проверили компьютер и нашли проблемы. Теперь мы их исправим для безопасности семьи."
                                                                               ^
security/reactive/forensics_service.py:552:80: E501 line too long (95 > 79 characters)
    def generate_forensics_report(self, investigation_id: str) -> Union[ForensicsReport, None]:
                                                                               ^
security/reactive/forensics_service.py:556:80: E501 line too long (92 > 79 characters)
                raise ValueError(f"Завершенное расследование {investigation_id} не найдено")
                                                                               ^
security/reactive/forensics_service.py:559:80: E501 line too long (95 > 79 characters)
            report_id = f"report_{investigation_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
                                                                               ^
security/reactive/forensics_service.py:565:80: E501 line too long (90 > 79 characters)
                investigation_duration = investigation.end_time - investigation.start_time
                                                                               ^
security/reactive/forensics_service.py:567:80: E501 line too long (100 > 79 characters)
            critical_findings = len([f for f in investigation.findings if "критическ" in f.lower()])
                                                                               ^
security/reactive/forensics_service.py:568:80: E501 line too long (84 > 79 characters)
            family_impact_level = self._determine_family_impact_level(investigation)
                                                                               ^
security/reactive/forensics_service.py:581:80: E501 line too long (82 > 79 characters)
                executive_summary=self._generate_executive_summary(investigation),
                                                                               ^
security/reactive/forensics_service.py:582:80: E501 line too long (82 > 79 characters)
                technical_details=self._generate_technical_details(investigation),
                                                                               ^
security/reactive/forensics_service.py:584:80: E501 line too long (82 > 79 characters)
                age_appropriate_reports=self._generate_age_reports(investigation),
                                                                               ^
security/reactive/forensics_service.py:612:80: E501 line too long (82 > 79 characters)
    def _determine_family_impact_level(self, investigation: Investigation) -> str:
                                                                               ^
security/reactive/forensics_service.py:624:80: E501 line too long (92 > 79 characters)
        summary = f"Расследование инцидента {investigation.incident_type.value} завершено. "
                                                                               ^
security/reactive/forensics_service.py:625:80: E501 line too long (122 > 79 characters)
        summary += f"Собрано {len(investigation.evidence)} доказательств, найдено {len(investigation.findings)} проблем. "
                                                                               ^
security/reactive/forensics_service.py:626:80: E501 line too long (86 > 79 characters)
        summary += f"Воздействие на семью: {investigation.family_impact_assessment}. "
                                                                               ^
security/reactive/forensics_service.py:627:80: E501 line too long (103 > 79 characters)
        summary += f"Рекомендации: {len(investigation.recommendations)} мер по улучшению безопасности."
                                                                               ^
security/reactive/forensics_service.py:633:80: E501 line too long (89 > 79 characters)
        details = f"Технические детали расследования {investigation.investigation_id}:\n"
                                                                               ^
security/reactive/forensics_service.py:652:80: E501 line too long (91 > 79 characters)
        summary += f"Рекомендации: {len(investigation.recommendations)} мер безопасности\n"
                                                                               ^
security/reactive/forensics_service.py:656:80: E501 line too long (89 > 79 characters)
    def _generate_age_reports(self, investigation: Investigation) -> Dict[AgeGroup, str]:
                                                                               ^
security/reactive/forensics_service.py:661:80: E501 line too long (112 > 79 characters)
        reports[AgeGroup.CHILDREN] = "Мы нашли и исправили проблему с компьютером. Теперь семья в безопасности!"
                                                                               ^
security/reactive/forensics_service.py:665:80: E501 line too long (114 > 79 characters)
            f"Расследование завершено. Найдена проблема типа {investigation.incident_type.value}, она исправлена."
                                                                               ^
security/reactive/forensics_service.py:671:80: E501 line too long (114 > 79 characters)
            f"Собрано {len(investigation.evidence)} доказательств, найдено {len(investigation.findings)} проблем."
                                                                               ^
security/reactive/forensics_service.py:675:80: E501 line too long (115 > 79 characters)
        reports[AgeGroup.ELDERLY] = "Мы проверили компьютер и исправили все проблемы. Семья теперь в безопасности."
                                                                               ^
security/reactive/forensics_service.py:685:80: E501 line too long (101 > 79 characters)
                if "семьи" in inv.family_impact_assessment or "семей" in inv.family_impact_assessment
                                                                               ^
security/reactive/forensics_service.py:696:80: E501 line too long (108 > 79 characters)
                    "protection_level": self.family_protection["age_groups"][age_group]["protection_level"],
                                                                               ^
security/reactive/forensics_service.py:707:80: E501 line too long (91 > 79 characters)
                "recommendations": self._generate_family_recommendations(family_incidents),
                                                                               ^
security/reactive/forensics_service.py:721:80: E501 line too long (99 > 79 characters)
    def _generate_family_recommendations(self, family_incidents: List[Investigation]) -> List[str]:
                                                                               ^
security/reactive/forensics_service.py:753:80: E501 line too long (83 > 79 characters)
                "completed_investigations": self.stats["completed_investigations"],
                                                                               ^
security/reactive/forensics_service.py:775:80: E501 line too long (102 > 79 characters)
                "status": "active" if hasattr(self, 'is_running') and self.is_running else "inactive",
                                                                               ^
security/reactive/forensics_service.py:777:80: E501 line too long (83 > 79 characters)
                "completed_investigations": self.stats["completed_investigations"],
                                                                               ^
security/reactive/forensics_service.py:779:80: E501 line too long (98 > 79 characters)
                "family_protection_enabled": self.forensics_rules["family_protection"]["enabled"],
                                                                               ^
security/reactive/performance_optimizer.py:102:80: E501 line too long (100 > 79 characters)
    def __init__(self, name: str = "PerformanceOptimizer", config: Optional[Dict[str, Any]] = None):
                                                                               ^
security/reactive/performance_optimizer.py:132:80: E501 line too long (80 > 79 characters)
        process_pool_size = self.optimization_config.get("process_pool_size", 2)
                                                                               ^
security/reactive/performance_optimizer.py:164:80: E501 line too long (89 > 79 characters)
            self.log_activity(f"Ошибка инициализации PerformanceOptimizer: {e}", "error")
                                                                               ^
security/reactive/performance_optimizer.py:253:80: E501 line too long (92 > 79 characters)
        self.monitoring_thread = threading.Thread(target=self._monitoring_loop, daemon=True)
                                                                               ^
security/reactive/performance_optimizer.py:266:80: E501 line too long (88 > 79 characters)
                    self.log_activity("Обнаружена необходимость оптимизации", "warning")
                                                                               ^
security/reactive/performance_optimizer.py:286:80: E501 line too long (81 > 79 characters)
        memory_threshold = self.optimization_config.get("memory_threshold", 80.0)
                                                                               ^
security/reactive/performance_optimizer.py:288:80: E501 line too long (97 > 79 characters)
        response_time_threshold = self.optimization_config.get("response_time_threshold", 1000.0)
                                                                               ^
security/reactive/performance_optimizer.py:289:80: E501 line too long (88 > 79 characters)
        error_rate_threshold = self.optimization_config.get("error_rate_threshold", 5.0)
                                                                               ^
security/reactive/performance_optimizer.py:290:1: W293 blank line contains whitespace
        
^
security/reactive/performance_optimizer.py:328:80: E501 line too long (113 > 79 characters)
                    msg = f"Оптимизация {opt_type.value} успешна: {result.improvement_percentage:.2f}% улучшения"
                                                                               ^
security/reactive/performance_optimizer.py:331:80: E501 line too long (88 > 79 characters)
                    msg = f"Ошибка оптимизации {opt_type.value}: {result.error_message}"
                                                                               ^
security/reactive/performance_optimizer.py:335:80: E501 line too long (81 > 79 characters)
            self.log_activity(f"Ошибка автоматической оптимизации: {e}", "error")
                                                                               ^
security/reactive/performance_optimizer.py:355:80: E501 line too long (81 > 79 characters)
        memory_threshold = self.optimization_config.get("memory_threshold", 80.0)
                                                                               ^
security/reactive/performance_optimizer.py:373:80: E501 line too long (97 > 79 characters)
        response_time_threshold = self.optimization_config.get("response_time_threshold", 1000.0)
                                                                               ^
security/reactive/performance_optimizer.py:382:80: E501 line too long (108 > 79 characters)
    def optimize(self, optimization_type: OptimizationType, level: OptimizationLevel) -> OptimizationResult:
                                                                               ^
security/reactive/performance_optimizer.py:414:80: E501 line too long (110 > 79 characters)
            improvement = float(self._calculate_improvement(before_metrics, after_metrics, optimization_type))
                                                                               ^
security/reactive/performance_optimizer.py:835:80: E501 line too long (91 > 79 characters)
    def _calculate_improvement(self, before: PerformanceMetrics, after: PerformanceMetrics,
                                                                               ^
security/reactive/performance_optimizer.py:840:80: E501 line too long (92 > 79 characters)
                return max(0, (before.cpu_usage - after.cpu_usage) / before.cpu_usage * 100)
                                                                               ^
security/reactive/performance_optimizer.py:842:80: E501 line too long (101 > 79 characters)
                return max(0, (before.memory_usage - after.memory_usage) / before.memory_usage * 100)
                                                                               ^
security/reactive/performance_optimizer.py:844:80: E501 line too long (95 > 79 characters)
                return max(0, (before.disk_usage - after.disk_usage) / before.disk_usage * 100)
                                                                               ^
security/reactive/performance_optimizer.py:846:80: E501 line too long (103 > 79 characters)
                return max(0, (before.network_io - after.network_io) / max(before.network_io, 1) * 100)
                                                                               ^
security/reactive/performance_optimizer.py:848:80: E501 line too long (104 > 79 characters)
                return max(0, (before.response_time - after.response_time) / before.response_time * 100)
                                                                               ^
security/reactive/performance_optimizer.py:850:80: E501 line too long (104 > 79 characters)
                return max(0, (before.response_time - after.response_time) / before.response_time * 100)
                                                                               ^
security/reactive/performance_optimizer.py:852:80: E501 line too long (104 > 79 characters)
                return max(0, (before.response_time - after.response_time) / before.response_time * 100)
                                                                               ^
security/reactive/performance_optimizer.py:854:80: E501 line too long (104 > 79 characters)
                return max(0, (before.response_time - after.response_time) / before.response_time * 100)
                                                                               ^
security/reactive/performance_optimizer.py:872:80: E501 line too long (88 > 79 characters)
                r.improvement_percentage for r in self.optimization_history if r.success
                                                                               ^
security/reactive/performance_optimizer.py:876:80: E501 line too long (103 > 79 characters)
            recent_optimizations = self.optimization_history[-10:] if self.optimization_history else []
                                                                               ^
security/reactive/performance_optimizer.py:880:80: E501 line too long (103 > 79 characters)
                "baseline_metrics": self.baseline_metrics.to_dict() if self.baseline_metrics else None,
                                                                               ^
security/reactive/performance_optimizer.py:884:80: E501 line too long (99 > 79 characters)
                    "success_rate": (successful_optimizations / max(total_optimizations, 1)) * 100,
                                                                               ^
security/reactive/performance_optimizer.py:887:80: E501 line too long (84 > 79 characters)
                "recent_optimizations": [r.to_dict() for r in recent_optimizations],
                                                                               ^
security/reactive/performance_optimizer.py:914:80: E501 line too long (85 > 79 characters)
            self.log_activity(f"Ошибка остановки PerformanceOptimizer: {e}", "error")
                                                                               ^
security/reactive/performance_optimizer.py:926:80: E501 line too long (96 > 79 characters)
            "current_metrics": self.current_metrics.to_dict() if self.current_metrics else None,
                                                                               ^
security/reactive/recovery_service.py:2:80: E501 line too long (90 > 79 characters)
"""
Сервис автоматического восстановления после атак для семейной системы безопасности ALADDIN
"""
   
                                                                           ^
security/reactive/recovery_service.py:7:1: F401 'datetime.timedelta' imported but unused
from datetime import datetime, timedelta
^
security/reactive/recovery_service.py:104:80: E501 line too long (95 > 79 characters)
    def __init__(self, name: str = "RecoveryService", config: Optional[Dict[str, Any]] = None):
                                                                               ^
security/reactive/recovery_service.py:106:1: W293 blank line contains whitespace
        
^
security/reactive/recovery_service.py:113:1: W293 blank line contains whitespace
        
^
security/reactive/recovery_service.py:119:1: W293 blank line contains whitespace
        
^
security/reactive/recovery_service.py:125:1: W293 blank line contains whitespace
        
^
security/reactive/recovery_service.py:148:80: E501 line too long (85 > 79 characters)
                "conditions": {"threat_type": "data_breach", "severity": "critical"},
                                                                               ^
security/reactive/recovery_service.py:153:1: W293 blank line contains whitespace
        
^
security/reactive/recovery_service.py:156:1: W293 blank line contains whitespace
        
^
security/reactive/recovery_service.py:157:80: E501 line too long (81 > 79 characters)
        self.log_activity(f"Инициализировано {len(rules)} правил восстановления")
                                                                               ^
security/reactive/recovery_service.py:185:80: E501 line too long (83 > 79 characters)
    def create_recovery_plan(self, incident_id: str, incident_data: Dict[str, Any],
                                                                               ^
security/reactive/recovery_service.py:186:28: E128 continuation line under-indented for visual indent
                           user_id: Optional[str] = None,
                           ^
security/reactive/recovery_service.py:187:28: E128 continuation line under-indented for visual indent
                           family_role: Optional[str] = None) -> RecoveryPlan:
                           ^
security/reactive/recovery_service.py:191:80: E501 line too long (95 > 79 characters)
            recovery_tasks = self._generate_recovery_tasks(incident_data, user_id, family_role)
                                                                               ^
security/reactive/recovery_service.py:192:1: W293 blank line contains whitespace
            
^
security/reactive/recovery_service.py:194:80: E501 line too long (91 > 79 characters)
            family_impact = self._assess_family_impact(incident_data, user_id, family_role)
                                                                               ^
security/reactive/recovery_service.py:195:1: W293 blank line contains whitespace
            
^
security/reactive/recovery_service.py:197:80: E501 line too long (82 > 79 characters)
            estimated_duration = self._calculate_recovery_duration(recovery_tasks)
                                                                               ^
security/reactive/recovery_service.py:198:1: W293 blank line contains whitespace
            
^
security/reactive/recovery_service.py:206:1: W293 blank line contains whitespace
            
^
security/reactive/recovery_service.py:208:1: W293 blank line contains whitespace
            
^
security/reactive/recovery_service.py:212:80: E501 line too long (96 > 79 characters)
                description=f"Создан план восстановления {plan_id} для инцидента {incident_id}",
                                                                               ^
security/reactive/recovery_service.py:224:1: W293 blank line contains whitespace
            
^
security/reactive/recovery_service.py:225:80: E501 line too long (103 > 79 characters)
            self.log_activity(f"Создан план восстановления {plan_id} с {len(recovery_tasks)} задачами")
                                                                               ^
security/reactive/recovery_service.py:227:1: W293 blank line contains whitespace
            
^
security/reactive/recovery_service.py:233:32: E128 continuation line under-indented for visual indent
                               user_id: Optional[str] = None,
                               ^
security/reactive/recovery_service.py:234:32: E128 continuation line under-indented for visual indent
                               family_role: Optional[str] = None) -> List[RecoveryTask]:
                               ^
security/reactive/recovery_service.py:234:80: E501 line too long (88 > 79 characters)
                               family_role: Optional[str] = None) -> List[RecoveryTask]:
                                                                               ^
security/reactive/recovery_service.py:237:1: W293 blank line contains whitespace
        
^
security/reactive/recovery_service.py:239:9: F841 local variable 'threat_type' is assigned to but never used
        threat_type = incident_data.get("threat_type", "unknown")
        ^
security/reactive/recovery_service.py:240:9: F841 local variable 'severity' is assigned to but never used
        severity = incident_data.get("severity", "medium")
        ^
security/reactive/recovery_service.py:241:9: F841 local variable 'affected_entities' is assigned to but never used
        affected_entities = incident_data.get("affected_entities", [])
        ^
security/reactive/recovery_service.py:242:1: W293 blank line contains whitespace
        
^
security/reactive/recovery_service.py:245:80: E501 line too long (87 > 79 characters)
            if self._evaluate_recovery_rule(incident_data, rule, user_id, family_role):
                                                                               ^
security/reactive/recovery_service.py:246:80: E501 line too long (92 > 79 characters)
                task = self._create_recovery_task(rule, incident_data, user_id, family_role)
                                                                               ^
security/reactive/recovery_service.py:249:1: W293 blank line contains whitespace
        
^
security/reactive/recovery_service.py:252:80: E501 line too long (98 > 79 characters)
            family_tasks = self._create_family_recovery_tasks(incident_data, user_id, family_role)
                                                                               ^
security/reactive/recovery_service.py:254:1: W293 blank line contains whitespace
        
^
security/reactive/recovery_service.py:257:80: E501 line too long (90 > 79 characters)
    def _evaluate_recovery_rule(self, incident_data: Dict[str, Any], rule: Dict[str, Any],
                                                                               ^
security/reactive/recovery_service.py:258:31: E128 continuation line under-indented for visual indent
                              user_id: Optional[str] = None,
                              ^
security/reactive/recovery_service.py:259:31: E128 continuation line under-indented for visual indent
                              family_role: Optional[str] = None) -> bool:
                              ^
security/reactive/recovery_service.py:263:1: W293 blank line contains whitespace
            
^
security/reactive/recovery_service.py:274:1: W293 blank line contains whitespace
            
^
security/reactive/recovery_service.py:279:1: W293 blank line contains whitespace
                
^
security/reactive/recovery_service.py:283:1: W293 blank line contains whitespace
            
^
security/reactive/recovery_service.py:285:1: W293 blank line contains whitespace
            
^
security/reactive/recovery_service.py:290:80: E501 line too long (88 > 79 characters)
    def _create_recovery_task(self, rule: Dict[str, Any], incident_data: Dict[str, Any],
                                                                               ^
security/reactive/recovery_service.py:291:29: E128 continuation line under-indented for visual indent
                            user_id: Optional[str] = None,
                            ^
security/reactive/recovery_service.py:292:29: E128 continuation line under-indented for visual indent
                            family_role: Optional[str] = None) -> Optional[RecoveryTask]:
                            ^
security/reactive/recovery_service.py:292:80: E501 line too long (89 > 79 characters)
                            family_role: Optional[str] = None) -> Optional[RecoveryTask]:
                                                                               ^
security/reactive/recovery_service.py:296:1: W293 blank line contains whitespace
            
^
security/reactive/recovery_service.py:311:1: W293 blank line contains whitespace
            
^
security/reactive/recovery_service.py:313:1: W293 blank line contains whitespace
            
^
security/reactive/recovery_service.py:319:37: E128 continuation line under-indented for visual indent
                                    user_id: Optional[str] = None,
                                    ^
security/reactive/recovery_service.py:320:37: E128 continuation line under-indented for visual indent
                                    family_role: Optional[str] = None) -> List[RecoveryTask]:
                                    ^
security/reactive/recovery_service.py:320:80: E501 line too long (93 > 79 characters)
                                    family_role: Optional[str] = None) -> List[RecoveryTask]:
                                                                               ^
security/reactive/recovery_service.py:323:1: W293 blank line contains whitespace
        
^
security/reactive/recovery_service.py:343:1: W293 blank line contains whitespace
            
^
security/reactive/recovery_service.py:361:1: W293 blank line contains whitespace
            
^
security/reactive/recovery_service.py:363:80: E501 line too long (84 > 79 characters)
            self.logger.error(f"Ошибка создания семейных задач восстановления: {e}")
                                                                               ^
security/reactive/recovery_service.py:364:1: W293 blank line contains whitespace
        
^
security/reactive/recovery_service.py:373:1: W293 blank line contains whitespace
            
^
security/reactive/recovery_service.py:376:1: W293 blank line contains whitespace
            
^
security/reactive/recovery_service.py:380:80: E501 line too long (96 > 79 characters)
                    self.logger.error(f"Ошибка выполнения задачи восстановления {task.task_id}")
                                                                               ^
security/reactive/recovery_service.py:384:1: W293 blank line contains whitespace
            
^
security/reactive/recovery_service.py:386:80: E501 line too long (111 > 79 characters)
            completed_tasks = sum(1 for task in plan.recovery_tasks if task.status == RecoveryStatus.COMPLETED)
                                                                               ^
security/reactive/recovery_service.py:387:80: E501 line too long (105 > 79 characters)
            failed_tasks = sum(1 for task in plan.recovery_tasks if task.status == RecoveryStatus.FAILED)
                                                                               ^
security/reactive/recovery_service.py:388:1: W293 blank line contains whitespace
            
^
security/reactive/recovery_service.py:395:1: W293 blank line contains whitespace
            
^
security/reactive/recovery_service.py:397:1: W293 blank line contains whitespace
            
^
security/reactive/recovery_service.py:403:80: E501 line too long (83 > 79 characters)
                    self.family_recovery_history[task.user_id].append(plan.plan_id)
                                                                               ^
security/reactive/recovery_service.py:404:1: W293 blank line contains whitespace
                        
^
security/reactive/recovery_service.py:407:1: W293 blank line contains whitespace
            
^
security/reactive/recovery_service.py:421:1: W293 blank line contains whitespace
            
^
security/reactive/recovery_service.py:422:80: E501 line too long (124 > 79 characters)
            self.log_activity(f"Выполнен план восстановления {plan_id}: {completed_tasks}/{len(plan.recovery_tasks)} задач")
                                                                               ^
security/reactive/recovery_service.py:424:1: W293 blank line contains whitespace
            
^
security/reactive/recovery_service.py:434:1: W293 blank line contains whitespace
            
^
security/reactive/recovery_service.py:450:1: W293 blank line contains whitespace
            
^
security/reactive/recovery_service.py:458:1: W293 blank line contains whitespace
            
^
security/reactive/recovery_service.py:460:1: W293 blank line contains whitespace
            
^
security/reactive/recovery_service.py:462:80: E501 line too long (93 > 79 characters)
            self.logger.error(f"Ошибка выполнения задачи восстановления {task.task_id}: {e}")
                                                                               ^
security/reactive/recovery_service.py:471:80: E501 line too long (80 > 79 characters)
            self.log_activity(f"Восстановление данных для {task.target_entity}")
                                                                               ^
security/reactive/recovery_service.py:472:1: W293 blank line contains whitespace
            
^
security/reactive/recovery_service.py:475:1: W293 blank line contains whitespace
            
^
security/reactive/recovery_service.py:477:1: W293 blank line contains whitespace
            
^
security/reactive/recovery_service.py:486:80: E501 line too long (81 > 79 characters)
            self.log_activity(f"Восстановление системы для {task.target_entity}")
                                                                               ^
security/reactive/recovery_service.py:487:1: W293 blank line contains whitespace
            
^
security/reactive/recovery_service.py:490:1: W293 blank line contains whitespace
            
^
security/reactive/recovery_service.py:492:1: W293 blank line contains whitespace
            
^
security/reactive/recovery_service.py:502:1: W293 blank line contains whitespace
            
^
security/reactive/recovery_service.py:505:1: W293 blank line contains whitespace
            
^
security/reactive/recovery_service.py:507:1: W293 blank line contains whitespace
            
^
security/reactive/recovery_service.py:516:80: E501 line too long (85 > 79 characters)
            self.log_activity(f"Восстановление аккаунта пользователя {task.user_id}")
                                                                               ^
security/reactive/recovery_service.py:517:1: W293 blank line contains whitespace
            
^
security/reactive/recovery_service.py:520:80: E501 line too long (91 > 79 characters)
                self.log_activity("Применение дополнительной защиты для детского аккаунта")
                                                                               ^
security/reactive/recovery_service.py:522:80: E501 line too long (96 > 79 characters)
                self.log_activity("Применение упрощенного интерфейса для пожилого пользователя")
                                                                               ^
security/reactive/recovery_service.py:523:1: W293 blank line contains whitespace
            
^
security/reactive/recovery_service.py:526:1: W293 blank line contains whitespace
            
^
security/reactive/recovery_service.py:528:1: W293 blank line contains whitespace
            
^
security/reactive/recovery_service.py:537:80: E501 line too long (85 > 79 characters)
            self.log_activity(f"Восстановление семейного профиля для {task.user_id}")
                                                                               ^
security/reactive/recovery_service.py:538:1: W293 blank line contains whitespace
            
^
security/reactive/recovery_service.py:544:1: W293 blank line contains whitespace
            
^
security/reactive/recovery_service.py:547:1: W293 blank line contains whitespace
            
^
security/reactive/recovery_service.py:549:1: W293 blank line contains whitespace
            
^
security/reactive/recovery_service.py:558:80: E501 line too long (89 > 79 characters)
            self.log_activity(f"Восстановление настроек безопасности для {task.user_id}")
                                                                               ^
security/reactive/recovery_service.py:559:1: W293 blank line contains whitespace
            
^
security/reactive/recovery_service.py:562:80: E501 line too long (86 > 79 characters)
                self.log_activity("Восстановление родительских настроек безопасности")
                                                                               ^
security/reactive/recovery_service.py:563:1: W293 blank line contains whitespace
            
^
security/reactive/recovery_service.py:566:1: W293 blank line contains whitespace
            
^
security/reactive/recovery_service.py:568:1: W293 blank line contains whitespace
            
^
security/reactive/recovery_service.py:570:80: E501 line too long (82 > 79 characters)
            self.logger.error(f"Ошибка восстановления настроек безопасности: {e}")
                                                                               ^
security/reactive/recovery_service.py:574:29: E128 continuation line under-indented for visual indent
                            user_id: Optional[str] = None,
                            ^
security/reactive/recovery_service.py:575:29: E128 continuation line under-indented for visual indent
                            family_role: Optional[str] = None) -> Dict[str, Any]:
                            ^
security/reactive/recovery_service.py:575:80: E501 line too long (81 > 79 characters)
                            family_role: Optional[str] = None) -> Dict[str, Any]:
                                                                               ^
security/reactive/recovery_service.py:586:1: W293 blank line contains whitespace
            
^
security/reactive/recovery_service.py:593:1: W293 blank line contains whitespace
                
^
security/reactive/recovery_service.py:602:1: W293 blank line contains whitespace
            
^
security/reactive/recovery_service.py:604:1: W293 blank line contains whitespace
            
^
security/reactive/recovery_service.py:613:1: W293 blank line contains whitespace
            
^
security/reactive/recovery_service.py:623:80: E501 line too long (80 > 79 characters)
                elif task.recovery_type == RecoveryType.FAMILY_PROFILE_RECOVERY:
                                                                               ^
security/reactive/recovery_service.py:625:80: E501 line too long (83 > 79 characters)
                elif task.recovery_type == RecoveryType.SECURITY_SETTINGS_RECOVERY:
                                                                               ^
security/reactive/recovery_service.py:627:1: W293 blank line contains whitespace
            
^
security/reactive/recovery_service.py:629:1: W293 blank line contains whitespace
            
^
security/reactive/recovery_service.py:638:1: W293 blank line contains whitespace
            
^
security/reactive/recovery_service.py:639:80: E501 line too long (111 > 79 characters)
            completed_tasks = sum(1 for task in plan.recovery_tasks if task.status == RecoveryStatus.COMPLETED)
                                                                               ^
security/reactive/recovery_service.py:640:80: E501 line too long (105 > 79 characters)
            failed_tasks = sum(1 for task in plan.recovery_tasks if task.status == RecoveryStatus.FAILED)
                                                                               ^
security/reactive/recovery_service.py:641:1: W293 blank line contains whitespace
            
^
security/reactive/recovery_service.py:644:80: E501 line too long (104 > 79 characters)
                start_time = min(task.started_time for task in plan.recovery_tasks if task.started_time)
                                                                               ^
security/reactive/recovery_service.py:645:80: E501 line too long (106 > 79 characters)
                end_time = max(task.completed_time for task in plan.recovery_tasks if task.completed_time)
                                                                               ^
security/reactive/recovery_service.py:646:80: E501 line too long (119 > 79 characters)
                recovery_duration = int((end_time - start_time).total_seconds() / 60) if start_time and end_time else 0
                                                                               ^
security/reactive/recovery_service.py:649:1: W293 blank line contains whitespace
            
^
security/reactive/recovery_service.py:652:1: W293 blank line contains whitespace
            
^
security/reactive/recovery_service.py:665:1: W293 blank line contains whitespace
            
^
security/reactive/recovery_service.py:667:1: W293 blank line contains whitespace
            
^
security/reactive/recovery_service.py:669:1: W293 blank line contains whitespace
            
^
security/reactive/recovery_service.py:673:80: E501 line too long (82 > 79 characters)
    def _generate_recovery_recommendations(self, plan: RecoveryPlan) -> List[str]:
                                                                               ^
security/reactive/recovery_service.py:676:1: W293 blank line contains whitespace
        
^
security/reactive/recovery_service.py:680:1: W293 blank line contains whitespace
                
^
security/reactive/recovery_service.py:682:80: E501 line too long (88 > 79 characters)
            recommendations.append("Регулярно создавайте резервные копии важных данных")
                                                                               ^
security/reactive/recovery_service.py:685:1: W293 blank line contains whitespace
            
^
security/reactive/recovery_service.py:687:80: E501 line too long (93 > 79 characters)
            if plan.family_impact and plan.family_impact.get("family_support_needed", False):
                                                                               ^
security/reactive/recovery_service.py:688:80: E501 line too long (94 > 79 characters)
                recommendations.append("Обеспечьте дополнительную поддержку для членов семьи")
                                                                               ^
security/reactive/recovery_service.py:690:1: W293 blank line contains whitespace
            
^
security/reactive/recovery_service.py:692:80: E501 line too long (84 > 79 characters)
            recovery_types = set(task.recovery_type for task in plan.recovery_tasks)
                                                                               ^
security/reactive/recovery_service.py:699:1: W293 blank line contains whitespace
            
^
security/reactive/recovery_service.py:702:1: W293 blank line contains whitespace
        
^
security/reactive/recovery_service.py:705:80: E501 line too long (84 > 79 characters)
    def get_recovery_summary(self, user_id: Optional[str] = None) -> Dict[str, Any]:
                                                                               ^
security/reactive/recovery_service.py:710:76: W291 trailing whitespace
                user_plans = [plan for plan in self.recovery_plans.values() 
                                                                           ^
security/reactive/recovery_service.py:711:29: E128 continuation line under-indented for visual indent
                            if any(task.user_id == user_id for task in plan.recovery_tasks)]
                            ^
security/reactive/recovery_service.py:711:80: E501 line too long (92 > 79 characters)
                            if any(task.user_id == user_id for task in plan.recovery_tasks)]
                                                                               ^
security/reactive/recovery_service.py:712:80: E501 line too long (89 > 79 characters)
                user_tasks = [task for plan in user_plans for task in plan.recovery_tasks 
                                                                               ^
security/reactive/recovery_service.py:712:90: W291 trailing whitespace
                user_tasks = [task for plan in user_plans for task in plan.recovery_tasks 
                                                                                         ^
security/reactive/recovery_service.py:713:29: E128 continuation line under-indented for visual indent
                            if task.user_id == user_id]
                            ^
security/reactive/recovery_service.py:717:80: E501 line too long (90 > 79 characters)
                user_tasks = [task for plan in user_plans for task in plan.recovery_tasks]
                                                                               ^
security/reactive/recovery_service.py:718:1: W293 blank line contains whitespace
            
^
security/reactive/recovery_service.py:722:80: E501 line too long (108 > 79 characters)
                "completed_tasks": sum(1 for task in user_tasks if task.status == RecoveryStatus.COMPLETED),
                                                                               ^
security/reactive/recovery_service.py:723:80: E501 line too long (102 > 79 characters)
                "failed_tasks": sum(1 for task in user_tasks if task.status == RecoveryStatus.FAILED),
                                                                               ^
security/reactive/recovery_service.py:724:80: E501 line too long (112 > 79 characters)
                "in_progress_tasks": sum(1 for task in user_tasks if task.status == RecoveryStatus.IN_PROGRESS),
                                                                               ^
security/reactive/recovery_service.py:725:80: E501 line too long (107 > 79 characters)
                "success_rate": (sum(1 for task in user_tasks if task.status == RecoveryStatus.COMPLETED) / 
                                                                               ^
security/reactive/recovery_service.py:725:108: W291 trailing whitespace
                "success_rate": (sum(1 for task in user_tasks if task.status == RecoveryStatus.COMPLETED) / 
                                                                                                           ^
security/reactive/recovery_service.py:726:32: E128 continuation line under-indented for visual indent
                               len(user_tasks) * 100) if user_tasks else 0,
                               ^
security/reactive/recovery_service.py:727:80: E501 line too long (91 > 79 characters)
                "average_recovery_time": self._calculate_average_recovery_time(user_tasks),
                                                                               ^
security/reactive/recovery_service.py:728:80: E501 line too long (85 > 79 characters)
                "family_impact_summary": self._get_family_impact_summary(user_plans),
                                                                               ^
security/reactive/recovery_service.py:729:80: E501 line too long (85 > 79 characters)
                "recent_recoveries": self._get_recent_recoveries(user_plans, limit=5)
                                                                               ^
security/reactive/recovery_service.py:731:1: W293 blank line contains whitespace
            
^
security/reactive/recovery_service.py:733:1: W293 blank line contains whitespace
            
^
security/reactive/recovery_service.py:735:80: E501 line too long (80 > 79 characters)
            self.logger.error(f"Ошибка получения сводки по восстановлению: {e}")
                                                                               ^
security/reactive/recovery_service.py:738:80: E501 line too long (83 > 79 characters)
    def _calculate_average_recovery_time(self, tasks: List[RecoveryTask]) -> float:
                                                                               ^
security/reactive/recovery_service.py:741:80: E501 line too long (100 > 79 characters)
            completed_tasks = [task for task in tasks if task.status == RecoveryStatus.COMPLETED and 
                                                                               ^
security/reactive/recovery_service.py:741:101: W291 trailing whitespace
            completed_tasks = [task for task in tasks if task.status == RecoveryStatus.COMPLETED and 
                                                                                                    ^
security/reactive/recovery_service.py:742:30: E128 continuation line under-indented for visual indent
                             task.started_time and task.completed_time]
                             ^
security/reactive/recovery_service.py:743:1: W293 blank line contains whitespace
            
^
security/reactive/recovery_service.py:746:1: W293 blank line contains whitespace
            
^
security/reactive/recovery_service.py:747:80: E501 line too long (86 > 79 characters)
            total_time = sum((task.completed_time - task.started_time).total_seconds() 
                                                                               ^
security/reactive/recovery_service.py:747:87: W291 trailing whitespace
            total_time = sum((task.completed_time - task.started_time).total_seconds() 
                                                                                      ^
security/reactive/recovery_service.py:748:28: E128 continuation line under-indented for visual indent
                           for task in completed_tasks)
                           ^
security/reactive/recovery_service.py:750:1: W293 blank line contains whitespace
            
^
security/reactive/recovery_service.py:752:80: E501 line too long (85 > 79 characters)
            self.logger.error(f"Ошибка расчета среднего времени восстановления: {e}")
                                                                               ^
security/reactive/recovery_service.py:755:80: E501 line too long (86 > 79 characters)
    def _get_family_impact_summary(self, plans: List[RecoveryPlan]) -> Dict[str, Any]:
                                                                               ^
security/reactive/recovery_service.py:760:1: W293 blank line contains whitespace
            
^
security/reactive/recovery_service.py:764:80: E501 line too long (98 > 79 characters)
                        family_roles[task.family_role] = family_roles.get(task.family_role, 0) + 1
                                                                               ^
security/reactive/recovery_service.py:765:1: W293 blank line contains whitespace
                
^
security/reactive/recovery_service.py:768:1: W293 blank line contains whitespace
            
^
security/reactive/recovery_service.py:774:1: W293 blank line contains whitespace
            
^
security/reactive/recovery_service.py:776:80: E501 line too long (84 > 79 characters)
            self.logger.error(f"Ошибка получения сводки семейного воздействия: {e}")
                                                                               ^
security/reactive/recovery_service.py:779:80: E501 line too long (104 > 79 characters)
    def _get_recent_recoveries(self, plans: List[RecoveryPlan], limit: int = 5) -> List[Dict[str, Any]]:
                                                                               ^
security/reactive/recovery_service.py:782:80: E501 line too long (92 > 79 characters)
            recent_plans = sorted(plans, key=lambda p: p.created_time, reverse=True)[:limit]
                                                                               ^
security/reactive/recovery_service.py:783:1: W293 blank line contains whitespace
            
^
security/reactive/recovery_service.py:794:1: W293 blank line contains whitespace
            
^
security/reactive/recovery_service.py:796:1: W293 blank line contains whitespace
            
^
security/reactive/recovery_service.py:806:80: E501 line too long (82 > 79 characters)
                "family_notifications_enabled": self.family_notifications_enabled,
                                                                               ^
security/reactive/recovery_service.py:807:80: E501 line too long (80 > 79 characters)
                "recovery_monitoring_enabled": self.recovery_monitoring_enabled,
                                                                               ^
security/reactive/recovery_service.py:811:80: E501 line too long (90 > 79 characters)
                "success_rate": (self.successful_recoveries / self.total_recoveries * 100) 
                                                                               ^
security/reactive/recovery_service.py:811:91: W291 trailing whitespace
                "success_rate": (self.successful_recoveries / self.total_recoveries * 100) 
                                                                                          ^
security/reactive/recovery_service.py:812:31: E131 continuation line unaligned for hanging indent
                              if self.total_recoveries > 0 else 0,
                              ^
security/reactive/recovery_service.py:813:77: W291 trailing whitespace
                "active_plans": len([p for p in self.recovery_plans.values() 
                                                                            ^
security/reactive/recovery_service.py:814:36: E128 continuation line under-indented for visual indent
                                   if p.status == RecoveryStatus.IN_PROGRESS]),
                                   ^
security/reactive/recovery_service.py:819:43: W291 trailing whitespace
                    user_id: len(plan_ids) 
                                          ^
security/reactive/recovery_service.py:820:80: E501 line too long (81 > 79 characters)
                    for user_id, plan_ids in self.family_recovery_history.items()
                                                                               ^
security/reactive/recovery_service.py:823:1: W293 blank line contains whitespace
            
^
security/reactive/recovery_service.py:825:1: W293 blank line contains whitespace
            
^
security/reactive/recovery_service.py:827:80: E501 line too long (88 > 79 characters)
            self.logger.error(f"Ошибка получения статуса семейного восстановления: {e}")
                                                                               ^
security/reactive/recovery_service.py:846:77: W291 trailing whitespace
                "uptime": (datetime.now() - self.start_time).total_seconds() 
                                                                            ^
security/reactive/recovery_service.py:847:26: E131 continuation line unaligned for hanging indent
                         if hasattr(self, "start_time") and self.start_time else 0
                         ^
security/reactive/recovery_service.py:847:80: E501 line too long (82 > 79 characters)
                         if hasattr(self, "start_time") and self.start_time else 0
                                                                               ^
security/reactive/security_analytics.py:193:80: E501 line too long (86 > 79 characters)
                "children": {"min_age": 0, "max_age": 17, "protection_level": "high"},
                                                                               ^
security/reactive/security_analytics.py:194:80: E501 line too long (87 > 79 characters)
                "adults": {"min_age": 18, "max_age": 64, "protection_level": "medium"},
                                                                               ^
security/reactive/security_analytics.py:195:80: E501 line too long (87 > 79 characters)
                "elderly": {"min_age": 65, "max_age": 100, "protection_level": "high"},
                                                                               ^
security/reactive/security_analytics.py:214:80: E501 line too long (87 > 79 characters)
                self.performance_metrics.memory_usage = psutil.virtual_memory().percent
                                                                               ^
security/reactive/security_analytics.py:215:80: E501 line too long (84 > 79 characters)
                self.performance_metrics.disk_usage = psutil.disk_usage("/").percent
                                                                               ^
security/reactive/security_analytics.py:219:80: E501 line too long (91 > 79 characters)
                self.performance_metrics.throughput = net_io.bytes_sent + net_io.bytes_recv
                                                                               ^
security/reactive/security_analytics.py:245:80: E501 line too long (80 > 79 characters)
                description=f"Ошибка сбора метрик производительности: {str(e)}",
                                                                               ^
security/reactive/security_analytics.py:257:80: E501 line too long (108 > 79 characters)
            threats_detected = len([e for e in security_events if e.get("event_type") == "threat_detected"])
                                                                               ^
security/reactive/security_analytics.py:258:80: E501 line too long (106 > 79 characters)
            threats_blocked = len([e for e in security_events if e.get("event_type") == "threat_blocked"])
                                                                               ^
security/reactive/security_analytics.py:264:80: E501 line too long (97 > 79 characters)
                self.security_metrics.security_score = (threats_blocked / threats_detected) * 100
                                                                               ^
security/reactive/security_analytics.py:305:80: E501 line too long (106 > 79 characters)
            family_events = [e for e in self.get_security_events() if "family" in e.get("event_type", "")]
                                                                               ^
security/reactive/security_analytics.py:319:80: E501 line too long (104 > 79 characters)
            parental_controls = len([e for e in family_events if "parental" in e.get("event_type", "")])
                                                                               ^
security/reactive/security_analytics.py:322:80: E501 line too long (100 > 79 characters)
            child_activities = len([e for e in family_events if "child" in e.get("event_type", "")])
                                                                               ^
security/reactive/security_analytics.py:325:80: E501 line too long (104 > 79 characters)
            elderly_protection = len([e for e in family_events if "elderly" in e.get("event_type", "")])
                                                                               ^
security/reactive/security_analytics.py:331:80: E501 line too long (107 > 79 characters)
                    (parental_controls + child_activities + elderly_protection) / total_family_events * 100
                                                                               ^
security/reactive/security_analytics.py:353:80: E501 line too long (87 > 79 characters)
                    "family_security_score": self.family_metrics.family_security_score,
                                                                               ^
security/reactive/security_analytics.py:373:80: E501 line too long (99 > 79 characters)
            report_id = f"analytics_{report_type.value}_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
                                                                               ^
security/reactive/security_analytics.py:405:80: E501 line too long (82 > 79 characters)
            recommendations = self._generate_recommendations(report_type, metrics)
                                                                               ^
security/reactive/security_analytics.py:446:80: E501 line too long (88 > 79 characters)
    def _generate_insights(self, report_type: AnalyticsType, metrics: Any) -> List[str]:
                                                                               ^
security/reactive/security_analytics.py:453:80: E501 line too long (102 > 79 characters)
                    insights.append("Высокая загрузка CPU может влиять на производительность системы")
                                                                               ^
security/reactive/security_analytics.py:454:80: E501 line too long (82 > 79 characters)
                if hasattr(metrics, "memory_usage") and metrics.memory_usage > 85:
                                                                               ^
security/reactive/security_analytics.py:455:80: E501 line too long (90 > 79 characters)
                    insights.append("Высокое использование памяти может замедлять работу")
                                                                               ^
security/reactive/security_analytics.py:457:80: E501 line too long (81 > 79 characters)
                    insights.append("Повышенный уровень ошибок требует внимания")
                                                                               ^
security/reactive/security_analytics.py:460:80: E501 line too long (86 > 79 characters)
                if hasattr(metrics, "security_score") and metrics.security_score < 70:
                                                                               ^
security/reactive/security_analytics.py:461:80: E501 line too long (87 > 79 characters)
                    insights.append("Низкий показатель безопасности требует улучшения")
                                                                               ^
security/reactive/security_analytics.py:462:80: E501 line too long (90 > 79 characters)
                if hasattr(metrics, "threats_detected") and metrics.threats_detected > 10:
                                                                               ^
security/reactive/security_analytics.py:464:80: E501 line too long (83 > 79 characters)
                if hasattr(metrics, "risk_level") and metrics.risk_level == "high":
                                                                               ^
security/reactive/security_analytics.py:465:80: E501 line too long (89 > 79 characters)
                    insights.append("Высокий уровень риска требует немедленных действий")
                                                                               ^
security/reactive/security_analytics.py:468:80: E501 line too long (100 > 79 characters)
                if hasattr(metrics, "family_security_score") and metrics.family_security_score < 75:
                                                                               ^
security/reactive/security_analytics.py:470:80: E501 line too long (81 > 79 characters)
                if hasattr(metrics, "active_users") and metrics.active_users > 5:
                                                                               ^
security/reactive/security_analytics.py:471:80: E501 line too long (91 > 79 characters)
                    insights.append("Высокая активность пользователей требует мониторинга")
                                                                               ^
security/reactive/security_analytics.py:472:80: E501 line too long (105 > 79 characters)
                if hasattr(metrics, "parental_controls_active") and not metrics.parental_controls_active:
                                                                               ^
security/reactive/security_analytics.py:484:80: E501 line too long (95 > 79 characters)
    def _generate_recommendations(self, report_type: AnalyticsType, metrics: Any) -> List[str]:
                                                                               ^
security/reactive/security_analytics.py:491:80: E501 line too long (95 > 79 characters)
                    recommendations.append("Оптимизировать процессы для снижения загрузки CPU")
                                                                               ^
security/reactive/security_analytics.py:492:80: E501 line too long (82 > 79 characters)
                if hasattr(metrics, "memory_usage") and metrics.memory_usage > 85:
                                                                               ^
security/reactive/security_analytics.py:493:80: E501 line too long (101 > 79 characters)
                    recommendations.append("Увеличить объем памяти или оптимизировать использование")
                                                                               ^
security/reactive/security_analytics.py:495:80: E501 line too long (86 > 79 characters)
                    recommendations.append("Исследовать и исправить источники ошибок")
                                                                               ^
security/reactive/security_analytics.py:498:80: E501 line too long (86 > 79 characters)
                if hasattr(metrics, "security_score") and metrics.security_score < 70:
                                                                               ^
security/reactive/security_analytics.py:500:80: E501 line too long (90 > 79 characters)
                if hasattr(metrics, "threats_detected") and metrics.threats_detected > 10:
                                                                               ^
security/reactive/security_analytics.py:501:80: E501 line too long (80 > 79 characters)
                    recommendations.append("Обновить правила обнаружения угроз")
                                                                               ^
security/reactive/security_analytics.py:502:80: E501 line too long (83 > 79 characters)
                if hasattr(metrics, "risk_level") and metrics.risk_level == "high":
                                                                               ^
security/reactive/security_analytics.py:503:80: E501 line too long (88 > 79 characters)
                    recommendations.append("Немедленно принять меры по снижению рисков")
                                                                               ^
security/reactive/security_analytics.py:506:80: E501 line too long (100 > 79 characters)
                if hasattr(metrics, "family_security_score") and metrics.family_security_score < 75:
                                                                               ^
security/reactive/security_analytics.py:507:80: E501 line too long (81 > 79 characters)
                    recommendations.append("Улучшить семейные меры безопасности")
                                                                               ^
security/reactive/security_analytics.py:508:80: E501 line too long (105 > 79 characters)
                if hasattr(metrics, "parental_controls_active") and not metrics.parental_controls_active:
                                                                               ^
security/reactive/security_analytics.py:509:80: E501 line too long (80 > 79 characters)
                    recommendations.append("Активировать родительские контроли")
                                                                               ^
security/reactive/security_analytics.py:510:80: E501 line too long (107 > 79 characters)
                if hasattr(metrics, "elderly_protection_active") and not metrics.elderly_protection_active:
                                                                               ^
security/reactive/security_analytics.py:522:80: E501 line too long (94 > 79 characters)
    def _check_alerts(self, report_type: AnalyticsType, metrics: Any) -> List[Dict[str, Any]]:
                                                                               ^
security/reactive/security_analytics.py:528:80: E501 line too long (108 > 79 characters)
                if hasattr(metrics, "cpu_usage") and metrics.cpu_usage > self.alert_thresholds["cpu_usage"]:
                                                                               ^
security/reactive/security_analytics.py:532:80: E501 line too long (85 > 79 characters)
                            "message": f"Высокая загрузка CPU: {metrics.cpu_usage}%",
                                                                               ^
security/reactive/security_analytics.py:542:80: E501 line too long (88 > 79 characters)
                    and metrics.security_score < self.alert_thresholds["security_score"]
                                                                               ^
security/reactive/security_analytics.py:547:80: E501 line too long (100 > 79 characters)
                            "message": f"Низкий показатель безопасности: {metrics.security_score}%",
                                                                               ^
security/reactive/security_analytics.py:550:80: E501 line too long (81 > 79 characters)
                            "threshold": self.alert_thresholds["security_score"],
                                                                               ^
security/reactive/security_analytics.py:557:80: E501 line too long (102 > 79 characters)
                    and metrics.family_security_score < self.alert_thresholds["family_security_score"]
                                                                               ^
security/reactive/security_analytics.py:562:80: E501 line too long (116 > 79 characters)
                            "message": f"Низкий семейный показатель безопасности: {metrics.family_security_score}%",
                                                                               ^
security/reactive/security_analytics.py:565:80: E501 line too long (88 > 79 characters)
                            "threshold": self.alert_thresholds["family_security_score"],
                                                                               ^
security/reactive/security_analytics.py:582:80: E501 line too long (97 > 79 characters)
    def _analyze_family_impact(self, report_type: AnalyticsType, metrics: Any) -> Dict[str, Any]:
                                                                               ^
security/reactive/security_analytics.py:589:80: E501 line too long (88 > 79 characters)
                    "total_family_members": getattr(metrics, "total_family_members", 0),
                                                                               ^
security/reactive/security_analytics.py:591:80: E501 line too long (83 > 79 characters)
                    "security_score": getattr(metrics, "family_security_score", 0),
                                                                               ^
security/reactive/security_analytics.py:592:80: E501 line too long (94 > 79 characters)
                    "protection_coverage": getattr(metrics, "age_appropriate_protection", {}),
                                                                               ^
security/reactive/security_analytics.py:593:80: E501 line too long (86 > 79 characters)
                    "recommendations": self._generate_family_recommendations(metrics),
                                                                               ^
security/reactive/security_analytics.py:596:80: E501 line too long (101 > 79 characters)
                family_impact = {"impact_level": "low", "affected_members": 0, "recommendations": []}
                                                                               ^
security/reactive/security_analytics.py:599:80: E501 line too long (115 > 79 characters)
            family_impact = {"error": f"Ошибка анализа семейного воздействия: {str(e)}", "impact_level": "unknown"}
                                                                               ^
security/reactive/security_analytics.py:608:80: E501 line too long (96 > 79 characters)
            if hasattr(metrics, "family_security_score") and metrics.family_security_score < 75:
                                                                               ^
security/reactive/security_analytics.py:610:80: E501 line too long (101 > 79 characters)
            if hasattr(metrics, "parental_controls_active") and not metrics.parental_controls_active:
                                                                               ^
security/reactive/security_analytics.py:612:80: E501 line too long (103 > 79 characters)
            if hasattr(metrics, "elderly_protection_active") and not metrics.elderly_protection_active:
                                                                               ^
security/reactive/security_analytics.py:614:80: E501 line too long (105 > 79 characters)
            if hasattr(metrics, "child_activities_monitored") and not metrics.child_activities_monitored:
                                                                               ^
security/reactive/security_analytics.py:618:80: E501 line too long (87 > 79 characters)
            recommendations.append(f"Ошибка генерации семейных рекомендаций: {str(e)}")
                                                                               ^
security/reactive/security_analytics.py:641:80: E501 line too long (93 > 79 characters)
                    "parental_controls_active": self.family_metrics.parental_controls_active,
                                                                               ^
security/reactive/security_analytics.py:642:80: E501 line too long (97 > 79 characters)
                    "child_activities_monitored": self.family_metrics.child_activities_monitored,
                                                                               ^
security/reactive/security_analytics.py:643:80: E501 line too long (95 > 79 characters)
                    "elderly_protection_active": self.family_metrics.elderly_protection_active,
                                                                               ^
security/reactive/security_analytics.py:644:80: E501 line too long (87 > 79 characters)
                    "family_security_score": self.family_metrics.family_security_score,
                                                                               ^
security/reactive/threat_intelligence.py:82:80: E501 line too long (82 > 79 characters)
    age_appropriate_explanation: Dict[AgeGroup, str] = field(default_factory=dict)
                                                                               ^
security/reactive/threat_intelligence.py:96:80: E501 line too long (83 > 79 characters)
    age_appropriate_advice: Dict[AgeGroup, List[str]] = field(default_factory=dict)
                                                                               ^
security/reactive/threat_intelligence.py:262:80: E501 line too long (80 > 79 characters)
                    age_appropriate_explanation=self._generate_age_explanations(
                                                                               ^
security/reactive/threat_intelligence.py:263:80: E501 line too long (86 > 79 characters)
                        indicator_data["threat_type"], indicator_data["family_impact"]
                                                                               ^
security/reactive/threat_intelligence.py:294:80: E501 line too long (113 > 79 characters)
    def _generate_age_explanations(self, threat_type: ThreatCategory, family_impact: str) -> Dict[AgeGroup, str]:
                                                                               ^
security/reactive/threat_intelligence.py:300:80: E501 line too long (82 > 79 characters)
            f"Плохая программа может навредить твоему компьютеру. {family_impact}"
                                                                               ^
security/reactive/threat_intelligence.py:323:80: E501 line too long (109 > 79 characters)
    def analyze_threat_intelligence(self, indicators: List[ThreatIndicator]) -> List[ThreatIntelligenceData]:
                                                                               ^
security/reactive/threat_intelligence.py:339:80: E501 line too long (80 > 79 characters)
                    age_appropriate_advice=self._generate_age_advice(indicator),
                                                                               ^
security/reactive/threat_intelligence.py:343:80: E501 line too long (83 > 79 characters)
                self.intelligence_data[intelligence.intelligence_id] = intelligence
                                                                               ^
security/reactive/threat_intelligence.py:355:80: E501 line too long (87 > 79 characters)
                        if t.severity in [ThreatSeverity.HIGH, ThreatSeverity.CRITICAL]
                                                                               ^
security/reactive/threat_intelligence.py:371:80: E501 line too long (81 > 79 characters)
    def _generate_recommendations(self, indicator: ThreatIndicator) -> List[str]:
                                                                               ^
security/reactive/threat_intelligence.py:396:80: E501 line too long (92 > 79 characters)
    def _generate_age_advice(self, indicator: ThreatIndicator) -> Dict[AgeGroup, List[str]]:
                                                                               ^
security/reactive/threat_intelligence.py:437:80: E501 line too long (102 > 79 characters)
            report_id = f"intelligence_{report_type.value}_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
                                                                               ^
security/reactive/threat_intelligence.py:443:80: E501 line too long (107 > 79 characters)
            new_threats = len([t for t in self.intelligence_data.values() if t.created_at >= period_start])
                                                                               ^
security/reactive/threat_intelligence.py:467:80: E501 line too long (108 > 79 characters)
                summary=self._generate_report_summary(threats_analyzed, new_threats, high_priority_threats),
                                                                               ^
security/reactive/threat_intelligence.py:473:80: E501 line too long (80 > 79 characters)
                description=f"Создан отчет разведывательных данных {report_id}",
                                                                               ^
security/reactive/threat_intelligence.py:506:80: E501 line too long (96 > 79 characters)
            recommendations.append(f"Обнаружено {high_priority_count} высокоприоритетных угроз")
                                                                               ^
security/reactive/threat_intelligence.py:519:80: E501 line too long (107 > 79 characters)
    def _generate_report_summary(self, threats_analyzed: int, new_threats: int, high_priority: int) -> str:
                                                                               ^
security/reactive/threat_intelligence.py:522:80: E501 line too long (87 > 79 characters)
        summary += f"из них {new_threats} новых и {high_priority} высокоприоритетных. "
                                                                               ^
security/reactive/threat_intelligence.py:544:80: E501 line too long (111 > 79 characters)
                    "threats_count": len([t for t in family_threats if age_group in t.age_appropriate_advice]),
                                                                               ^
security/reactive/threat_intelligence.py:545:80: E501 line too long (108 > 79 characters)
                    "protection_level": self.family_protection["age_groups"][age_group]["protection_level"],
                                                                               ^
security/reactive/threat_intelligence.py:552:80: E501 line too long (83 > 79 characters)
                    if t.severity in [ThreatSeverity.HIGH, ThreatSeverity.CRITICAL]
                                                                               ^
security/reactive/threat_intelligence.py:556:80: E501 line too long (89 > 79 characters)
                "recommendations": self._generate_family_recommendations(family_threats),
                                                                               ^
security/reactive/threat_intelligence.py:570:80: E501 line too long (106 > 79 characters)
    def _generate_family_recommendations(self, family_threats: List[ThreatIntelligenceData]) -> List[str]:
                                                                               ^
security/reactive/threat_intelligence.py:585:80: E501 line too long (83 > 79 characters)
            recommendations.append("Повысить осторожность при общении в интернете")
                                                                               ^
security/reactive/threat_intelligence.py:608:80: E501 line too long (83 > 79 characters)
                    if t.severity in [ThreatSeverity.HIGH, ThreatSeverity.CRITICAL]
                                                                               ^
security/reactive/threat_intelligence.py:629:80: E501 line too long (102 > 79 characters)
                "status": "active" if hasattr(self, 'is_running') and self.is_running else "inactive",
                                                                               ^
security/reactive/threat_intelligence.py:633:80: E501 line too long (101 > 79 characters)
                "family_protection_enabled": self.intelligence_rules["family_protection"]["enabled"],
                                                                               ^
security/russian_api_manager.py:7:1: F401 'asyncio' imported but unused
import asyncio
^
security/russian_api_manager.py:12:1: F401 'typing.Union' imported but unused
from typing import Dict, Any, List, Optional, Union
^
security/russian_api_manager.py:72:1: W293 blank line contains whitespace
        
^
security/russian_api_manager.py:76:1: W293 blank line contains whitespace
        
^
security/russian_api_manager.py:84:80: E501 line too long (100 > 79 characters)
                "api_key": self.config.get("yandex_maps", {}).get("api_key", "YOUR_YANDEX_API_KEY"),
                                                                               ^
security/russian_api_manager.py:109:1: W293 blank line contains whitespace
        
^
security/russian_api_manager.py:113:1: W293 blank line contains whitespace
        
^
security/russian_api_manager.py:122:1: W293 blank line contains whitespace
        
^
security/russian_api_manager.py:128:1: W293 blank line contains whitespace
        
^
security/russian_api_manager.py:129:80: E501 line too long (99 > 79 characters)
        self.logger.log("INFO", f"RussianAPIManager инициализирован с {len(self.api_configs)} API")
                                                                               ^
security/russian_api_manager.py:136:1: W293 blank line contains whitespace
            
^
security/russian_api_manager.py:137:80: E501 line too long (100 > 79 characters)
            config_path = os.path.join(os.path.dirname(os.path.dirname(__file__)), self.config_file)
                                                                               ^
security/russian_api_manager.py:138:1: W293 blank line contains whitespace
            
^
security/russian_api_manager.py:142:80: E501 line too long (83 > 79 characters)
                self.logger.log("INFO", f"Конфигурация загружена из {config_path}")
                                                                               ^
security/russian_api_manager.py:145:80: E501 line too long (89 > 79 characters)
                self.logger.log("WARNING", f"Файл конфигурации не найден: {config_path}")
                                                                               ^
security/russian_api_manager.py:150:80: E501 line too long (86 > 79 characters)
    def _get_cache_key(self, api_type: RussianAPIType, params: Dict[str, Any]) -> str:
                                                                               ^
security/russian_api_manager.py:159:1: W293 blank line contains whitespace
        
^
security/russian_api_manager.py:167:1: W293 blank line contains whitespace
        
^
security/russian_api_manager.py:170:1: W293 blank line contains whitespace
        
^
security/russian_api_manager.py:171:80: E501 line too long (94 > 79 characters)
        if current_time - self.rate_limits[api_key]["last_reset"] > 60:  # Сброс каждую минуту
                                                                               ^
security/russian_api_manager.py:174:1: W293 blank line contains whitespace
        
^
security/russian_api_manager.py:176:80: E501 line too long (83 > 79 characters)
            self.logger.log("WARNING", f"Rate limit превышен для {api_type.value}")
                                                                               ^
security/russian_api_manager.py:178:1: W293 blank line contains whitespace
        
^
security/russian_api_manager.py:182:70: W291 trailing whitespace
    async def _make_request(self, api_type: RussianAPIType, url: str, 
                                                                     ^
security/russian_api_manager.py:183:27: E128 continuation line under-indented for visual indent
                          params: Dict[str, Any] = None, 
                          ^
security/russian_api_manager.py:183:57: W291 trailing whitespace
                          params: Dict[str, Any] = None, 
                                                        ^
security/russian_api_manager.py:184:27: E128 continuation line under-indented for visual indent
                          headers: Dict[str, str] = None) -> RussianAPIResponse:
                          ^
security/russian_api_manager.py:184:80: E501 line too long (80 > 79 characters)
                          headers: Dict[str, str] = None) -> RussianAPIResponse:
                                                                               ^
security/russian_api_manager.py:187:1: W293 blank line contains whitespace
        
^
security/russian_api_manager.py:191:1: W293 blank line contains whitespace
            
^
security/russian_api_manager.py:195:1: W293 blank line contains whitespace
            
^
security/russian_api_manager.py:197:80: E501 line too long (100 > 79 characters)
                async with session.get(url, params=params, headers=headers, timeout=10) as response:
                                                                               ^
security/russian_api_manager.py:199:1: W293 blank line contains whitespace
                    
^
security/russian_api_manager.py:204:1: W293 blank line contains whitespace
                        
^
security/russian_api_manager.py:214:1: W293 blank line contains whitespace
                        
^
security/russian_api_manager.py:222:1: W293 blank line contains whitespace
        
^
security/russian_api_manager.py:226:1: W293 blank line contains whitespace
            
^
security/russian_api_manager.py:235:80: E501 line too long (128 > 79 characters)
    async def geocode_address(self, address: str, api_type: RussianAPIType = RussianAPIType.YANDEX_GEOCODER) -> GeocodingResult:
                                                                               ^
security/russian_api_manager.py:238:1: W293 blank line contains whitespace
        
^
security/russian_api_manager.py:245:1: W293 blank line contains whitespace
        
^
security/russian_api_manager.py:249:1: W293 blank line contains whitespace
        
^
security/russian_api_manager.py:252:1: W293 blank line contains whitespace
        
^
security/russian_api_manager.py:258:1: W293 blank line contains whitespace
        
^
security/russian_api_manager.py:261:1: W293 blank line contains whitespace
        
^
security/russian_api_manager.py:263:1: W293 blank line contains whitespace
        
^
security/russian_api_manager.py:267:80: E501 line too long (85 > 79 characters)
                result = self._parse_yandex_geocoder_response(response.data, address)
                                                                               ^
security/russian_api_manager.py:269:80: E501 line too long (96 > 79 characters)
                result = self._parse_generic_geocoder_response(response.data, address, api_type)
                                                                               ^
security/russian_api_manager.py:270:1: W293 blank line contains whitespace
            
^
security/russian_api_manager.py:276:1: W293 blank line contains whitespace
            
^
security/russian_api_manager.py:281:80: E501 line too long (101 > 79 characters)
    def _parse_yandex_geocoder_response(self, data: Dict[str, Any], address: str) -> GeocodingResult:
                                                                               ^
security/russian_api_manager.py:284:80: E501 line too long (106 > 79 characters)
            geo_objects = data.get("response", {}).get("GeoObjectCollection", {}).get("featureMember", [])
                                                                               ^
security/russian_api_manager.py:285:1: W293 blank line contains whitespace
            
^
security/russian_api_manager.py:288:1: W293 blank line contains whitespace
            
^
security/russian_api_manager.py:292:1: W293 blank line contains whitespace
            
^
security/russian_api_manager.py:293:80: E501 line too long (90 > 79 characters)
            meta_data = geo_object.get("metaDataProperty", {}).get("GeocoderMetaData", {})
                                                                               ^
security/russian_api_manager.py:295:1: W293 blank line contains whitespace
            
^
security/russian_api_manager.py:300:80: E501 line too long (81 > 79 characters)
                city=address_details.get("locality", {}).get("LocalityName", ""),
                                                                               ^
security/russian_api_manager.py:301:80: E501 line too long (103 > 79 characters)
                region=address_details.get("AdministrativeArea", {}).get("AdministrativeAreaName", ""),
                                                                               ^
security/russian_api_manager.py:308:80: E501 line too long (128 > 79 characters)
    def _parse_generic_geocoder_response(self, data: Dict[str, Any], address: str, api_type: RussianAPIType) -> GeocodingResult:
                                                                               ^
security/russian_api_manager.py:321:64: W291 trailing whitespace
    async def build_route(self, from_point: str, to_point: str, 
                                                               ^
security/russian_api_manager.py:322:26: E128 continuation line under-indented for visual indent
                         route_type: str = "auto",
                         ^
security/russian_api_manager.py:323:26: E128 continuation line under-indented for visual indent
                         api_type: RussianAPIType = RussianAPIType.YANDEX_ROUTING) -> RoutingResult:
                         ^
security/russian_api_manager.py:323:80: E501 line too long (100 > 79 characters)
                         api_type: RussianAPIType = RussianAPIType.YANDEX_ROUTING) -> RoutingResult:
                                                                               ^
security/russian_api_manager.py:325:80: E501 line too long (83 > 79 characters)
        self.logger.log("INFO", f"Построение маршрута: {from_point} -> {to_point}")
                                                                               ^
security/russian_api_manager.py:326:1: W293 blank line contains whitespace
        
^
security/russian_api_manager.py:329:32: W291 trailing whitespace
            "from": from_point, 
                               ^
security/russian_api_manager.py:330:28: W291 trailing whitespace
            "to": to_point, 
                           ^
security/russian_api_manager.py:333:1: W293 blank line contains whitespace
        
^
security/russian_api_manager.py:338:1: W293 blank line contains whitespace
        
^
security/russian_api_manager.py:342:1: W293 blank line contains whitespace
        
^
security/russian_api_manager.py:345:1: W293 blank line contains whitespace
        
^
security/russian_api_manager.py:351:1: W293 blank line contains whitespace
        
^
security/russian_api_manager.py:354:1: W293 blank line contains whitespace
        
^
security/russian_api_manager.py:356:1: W293 blank line contains whitespace
        
^
security/russian_api_manager.py:360:80: E501 line too long (109 > 79 characters)
                result = self._parse_yandex_routing_response(response.data, from_point, to_point, route_type)
                                                                               ^
security/russian_api_manager.py:362:80: E501 line too long (120 > 79 characters)
                result = self._parse_generic_routing_response(response.data, from_point, to_point, route_type, api_type)
                                                                               ^
security/russian_api_manager.py:363:1: W293 blank line contains whitespace
            
^
security/russian_api_manager.py:369:1: W293 blank line contains whitespace
            
^
security/russian_api_manager.py:374:80: E501 line too long (133 > 79 characters)
    def _parse_yandex_routing_response(self, data: Dict[str, Any], from_point: str, to_point: str, route_type: str) -> RoutingResult:
                                                                               ^
security/russian_api_manager.py:380:1: W293 blank line contains whitespace
            
^
security/russian_api_manager.py:392:80: E501 line too long (160 > 79 characters)
    def _parse_generic_routing_response(self, data: Dict[str, Any], from_point: str, to_point: str, route_type: str, api_type: RussianAPIType) -> RoutingResult:
                                                                               ^
security/russian_api_manager.py:403:80: E501 line too long (85 > 79 characters)
    async def get_glonass_coordinates(self, device_id: str) -> Optional[List[float]]:
                                                                               ^
security/russian_api_manager.py:405:80: E501 line too long (91 > 79 characters)
        self.logger.log("INFO", f"Получение ГЛОНАСС координат для устройства: {device_id}")
                                                                               ^
security/russian_api_manager.py:406:1: W293 blank line contains whitespace
        
^
security/russian_api_manager.py:445:42: W292 no newline at end of file
russian_api_manager = RussianAPIManager()                                         ^
security/safe_function_manager.py:39:80: E501 line too long (80 > 79 characters)
    def __init__(self, alert_type: str, message: str, severity: str = "medium"):
                                                                               ^
security/safe_function_manager.py:179:80: E501 line too long (82 > 79 characters)
        self.redis_enabled = config.get("redis_enabled", True) if config else True
                                                                               ^
security/safe_function_manager.py:180:80: E501 line too long (118 > 79 characters)
        self.redis_url = config.get("redis_url", "redis://localhost:6379/0") if config else "redis://localhost:6379/0"
                                                                               ^
security/safe_function_manager.py:181:80: E501 line too long (83 > 79 characters)
        self.cache_ttl = config.get("cache_ttl", 3600) if config else 3600  # 1 час
                                                                               ^
security/safe_function_manager.py:185:1: W293 blank line contains whitespace
        
^
security/safe_function_manager.py:189:1: W293 blank line contains whitespace
        
^
security/safe_function_manager.py:192:80: E501 line too long (102 > 79 characters)
        self.circuit_breaker_enabled = config.get("circuit_breaker_enabled", True) if config else True
                                                                               ^
security/safe_function_manager.py:193:1: W293 blank line contains whitespace
        
^
security/safe_function_manager.py:201:80: E501 line too long (97 > 79 characters)
                self.log_activity(f"Redis недоступен: {e}, используем встроенный кэш", "warning")
                                                                               ^
security/safe_function_manager.py:206:80: E501 line too long (98 > 79 characters)
                self.log_activity("Redis модуль не установлен, используем встроенный кэш", "info")
                                                                               ^
security/safe_function_manager.py:243:1: W293 blank line contains whitespace
        
^
security/safe_function_manager.py:312:1: W293 blank line contains whitespace
    
^
security/safe_function_manager.py:313:80: E501 line too long (83 > 79 characters)
    def get_cached_result(self, function_id: str, args_hash: str) -> Optional[Any]:
                                                                               ^
security/safe_function_manager.py:317:1: W293 blank line contains whitespace
            
^
security/safe_function_manager.py:323:80: E501 line too long (100 > 79 characters)
                    self.log_activity(f"Результат получен из Redis кэша для {function_id}", "debug")
                                                                               ^
security/safe_function_manager.py:328:1: W293 blank line contains whitespace
            
^
security/safe_function_manager.py:333:80: E501 line too long (88 > 79 characters)
                    if time.time() - self.cache_timestamps.get(key, 0) < self.cache_ttl:
                                                                               ^
security/safe_function_manager.py:335:80: E501 line too long (110 > 79 characters)
                        self.log_activity(f"Результат получен из встроенного кэша для {function_id}", "debug")
                                                                               ^
security/safe_function_manager.py:341:1: W293 blank line contains whitespace
                
^
security/safe_function_manager.py:344:1: W293 blank line contains whitespace
                
^
security/safe_function_manager.py:349:80: E501 line too long (82 > 79 characters)
    def cache_result(self, function_id: str, args_hash: str, result: Any) -> None:
                                                                               ^
security/safe_function_manager.py:353:1: W293 blank line contains whitespace
            
^
security/safe_function_manager.py:357:80: E501 line too long (87 > 79 characters)
                serialized_result = json.dumps(result, default=str, ensure_ascii=False)
                                                                               ^
security/safe_function_manager.py:359:80: E501 line too long (95 > 79 characters)
                self.log_activity(f"Результат сохранен в Redis кэш для {function_id}", "debug")
                                                                               ^
security/safe_function_manager.py:360:1: W293 blank line contains whitespace
            
^
security/safe_function_manager.py:365:80: E501 line too long (101 > 79 characters)
                self.log_activity(f"Результат сохранен во встроенный кэш для {function_id}", "debug")
                                                                               ^
security/safe_function_manager.py:366:1: W293 blank line contains whitespace
                
^
security/safe_function_manager.py:380:80: E501 line too long (96 > 79 characters)
                        self.log_activity(f"Redis кэш очищен для функции {function_id}", "info")
                                                                               ^
security/safe_function_manager.py:391:80: E501 line too long (99 > 79 characters)
                    keys_to_remove = [k for k in self.memory_cache.keys() if k.startswith(pattern)]
                                                                               ^
security/safe_function_manager.py:395:80: E501 line too long (97 > 79 characters)
                    self.log_activity(f"Встроенный кэш очищен для функции {function_id}", "info")
                                                                               ^
security/safe_function_manager.py:408:80: E501 line too long (88 > 79 characters)
        hit_rate = (self.cache_hits / total_requests * 100) if total_requests > 0 else 0
                                                                               ^
security/safe_function_manager.py:409:1: W293 blank line contains whitespace
        
^
security/safe_function_manager.py:412:80: E501 line too long (98 > 79 characters)
            "cache_type": "Redis" if (self.redis_enabled and self.redis_client) else "Встроенный",
                                                                               ^
security/safe_function_manager.py:419:80: E501 line too long (88 > 79 characters)
            "cache_entries": len(self.memory_cache) if not self.redis_enabled else "N/A"
                                                                               ^
security/safe_function_manager.py:423:1: W293 blank line contains whitespace
    
^
security/safe_function_manager.py:436:80: E501 line too long (98 > 79 characters)
            self.circuit_breakers[function_id] = SmartCircuitBreaker(f"sfm_{function_id}", config)
                                                                               ^
security/safe_function_manager.py:437:1: W293 blank line contains whitespace
            
^
security/safe_function_manager.py:439:80: E501 line too long (102 > 79 characters)
            self.circuit_breakers[function_id].on_state_change = self._on_circuit_breaker_state_change
                                                                               ^
security/safe_function_manager.py:440:80: E501 line too long (88 > 79 characters)
            self.circuit_breakers[function_id].on_alert = self._on_circuit_breaker_alert
                                                                               ^
security/safe_function_manager.py:441:1: W293 blank line contains whitespace
        
^
security/safe_function_manager.py:443:1: W293 blank line contains whitespace
    
^
security/safe_function_manager.py:444:80: E501 line too long (80 > 79 characters)
    def _on_circuit_breaker_state_change(self, name: str, old_state, new_state):
                                                                               ^
security/safe_function_manager.py:447:79: W291 trailing whitespace
            f"Circuit Breaker {name}: {old_state.value} -> {new_state.value}", 
                                                                              ^
security/safe_function_manager.py:450:1: W293 blank line contains whitespace
    
^
security/safe_function_manager.py:454:80: E501 line too long (94 > 79 characters)
            f"Circuit Breaker Alert: {alert_data['circuit_breaker']} - {alert_data['state']}", 
                                                                               ^
security/safe_function_manager.py:454:95: W291 trailing whitespace
            f"Circuit Breaker Alert: {alert_data['circuit_breaker']} - {alert_data['state']}", 
                                                                                              ^
security/safe_function_manager.py:457:1: W293 blank line contains whitespace
        
^
security/safe_function_manager.py:464:1: W293 blank line contains whitespace
    
^
security/safe_function_manager.py:469:1: W293 blank line contains whitespace
        
^
security/safe_function_manager.py:474:37: W291 trailing whitespace
                name: cb.get_stats() 
                                    ^
security/safe_function_manager.py:548:80: E501 line too long (82 > 79 characters)
            # Регистрируем без сохранения в файл (сохранение будет после загрузки)
                                                                               ^
security/safe_function_manager.py:558:1: W293 blank line contains whitespace
            
^
security/safe_function_manager.py:560:1: W293 blank line contains whitespace
            
^
security/safe_function_manager.py:669:80: E501 line too long (90 > 79 characters)
                        f"Зарегистрирован обработчик для функции: {name} ({function_id})")
                                                                               ^
security/safe_function_manager.py:676:1: W293 blank line contains whitespace
            
^
security/safe_function_manager.py:677:80: E501 line too long (85 > 79 characters)
            # Автоматическое сохранение при изменениях (только если не инициализация)
                                                                               ^
security/safe_function_manager.py:678:80: E501 line too long (91 > 79 characters)
            if hasattr(self, '_initialization_complete') and self._initialization_complete:
                                                                               ^
security/safe_function_manager.py:680:1: W293 blank line contains whitespace
            
^
security/safe_function_manager.py:916:1: W293 blank line contains whitespace
            
^
security/safe_function_manager.py:932:1: W293 blank line contains whitespace
                
^
security/safe_function_manager.py:1173:1: W293 blank line contains whitespace
            
^
security/safe_function_manager.py:1176:1: W293 blank line contains whitespace
            
^
security/safe_function_manager.py:2010:17: E129 visually indented line with same indent as next logical line
                current_metrics.get("sleeping_functions", 0) > 10):
                ^
security/safe_function_manager.py:2055:80: E501 line too long (99 > 79 characters)
                    self.log_activity(f"Оптимизация: увеличено время до сна до {new_sleep_hours}ч")
                                                                               ^
security/safe_function_manager.py:2060:80: E501 line too long (99 > 79 characters)
                self._send_monitoring_metric("sfm_optimization_applied", 1, MetricType.PERFORMANCE)
                                                                               ^
security/safe_function_manager.py:2061:80: E501 line too long (123 > 79 characters)
                self._send_monitoring_metric("sfm_sleep_check_interval", self.sleep_check_interval, MetricType.PERFORMANCE)
                                                                               ^
security/safe_function_manager.py:2062:80: E501 line too long (121 > 79 characters)
                self._send_monitoring_metric("sfm_default_sleep_hours", self.default_sleep_hours, MetricType.PERFORMANCE)
                                                                               ^
security/safe_function_manager.py:2067:80: E501 line too long (92 > 79 characters)
            self.log_activity(f"Ошибка оптимизации управления спящим режимом: {e}", "error")
                                                                               ^
security/safe_function_manager.py:2084:80: E501 line too long (85 > 79 characters)
            if hasattr(self, 'execution_times') and len(self.execution_times) > 1000:
                                                                               ^
security/safe_function_manager.py:2085:80: E501 line too long (100 > 79 characters)
                self.execution_times = self.execution_times[-500:]  # Оставляем только последние 500
                                                                               ^
security/safe_function_manager.py:2086:80: E501 line too long (83 > 79 characters)
                self.log_activity("Оптимизация: очищены старые метрики выполнения")
                                                                               ^
security/safe_function_manager.py:2095:80: E501 line too long (105 > 79 characters)
                    if (current_time - exec_data.get('start_time', current_time)).total_seconds() > 3600:
                                                                               ^
security/safe_function_manager.py:2102:80: E501 line too long (102 > 79 characters)
                    self.log_activity(f"Оптимизация: удалено {len(old_executions)} старых выполнений")
                                                                               ^
security/safe_function_manager.py:2107:80: E501 line too long (82 > 79 characters)
                # При высокой нагрузке CPU - принудительный сон неактивных функций
                                                                               ^
security/safe_function_manager.py:2110:70: W291 trailing whitespace
                    if (function.status == FunctionStatus.ENABLED and 
                                                                     ^
security/safe_function_manager.py:2113:5: E129 visually indented line with same indent as next logical line
                        (datetime.now() - function.last_activity).total_seconds() > 300):  # 5 минут
    ^
security/safe_function_manager.py:2113:80: E501 line too long (100 > 79 characters)
                        (datetime.now() - function.last_activity).total_seconds() > 300):  # 5 минут
                                                                               ^
security/safe_function_manager.py:2119:80: E501 line too long (121 > 79 characters)
                    self.log_activity(f"Оптимизация: принудительно переведено в сон {inactive_count} неактивных функций")
                                                                               ^
security/safe_function_manager.py:2125:80: E501 line too long (85 > 79 characters)
            self.log_activity(f"Ошибка оптимизации выполнения функций: {e}", "error")
                                                                               ^
security/safe_function_manager.py:2151:80: E501 line too long (123 > 79 characters)
                self._send_monitoring_metric("sfm_optimization_sleep", 1 if sleep_optimized else 0, MetricType.PERFORMANCE)
                                                                               ^
security/safe_function_manager.py:2152:80: E501 line too long (131 > 79 characters)
                self._send_monitoring_metric("sfm_optimization_execution", 1 if execution_optimized else 0, MetricType.PERFORMANCE)
                                                                               ^
security/safe_function_manager.py:2153:80: E501 line too long (125 > 79 characters)
                self._send_monitoring_metric("sfm_optimization_system", 1 if system_optimized else 0, MetricType.PERFORMANCE)
                                                                               ^
security/safe_function_manager.py:2156:80: E501 line too long (85 > 79 characters)
            self.log_activity(f"Ошибка оптимизации производительности: {e}", "error")
                                                                               ^
security/safe_function_manager.py:2176:80: E501 line too long (101 > 79 characters)
                "recent_metrics": self.performance_metrics[-10:] if self.performance_metrics else [],
                                                                               ^
security/safe_function_manager.py:2177:80: E501 line too long (107 > 79 characters)
                "optimization_results": self.optimization_results[-5:] if self.optimization_results else []
                                                                               ^
security/safe_function_manager.py:2181:80: E501 line too long (90 > 79 characters)
            self.log_activity(f"Ошибка получения метрик производительности: {e}", "error")
                                                                               ^
security/safe_function_manager.py:2184:49: W291 trailing whitespace
    def configure_performance_optimization(self, 
                                                ^
security/safe_function_manager.py:2185:42: E128 continuation line under-indented for visual indent
                                         optimization_enabled: bool = None,
                                         ^
security/safe_function_manager.py:2186:42: E128 continuation line under-indented for visual indent
                                         optimization_interval: int = None) -> bool:
                                         ^
security/safe_function_manager.py:2186:80: E501 line too long (84 > 79 characters)
                                         optimization_interval: int = None) -> bool:
                                                                               ^
security/safe_function_manager.py:2194:80: E501 line too long (99 > 79 characters)
                    self.optimization_interval = max(60, optimization_interval)  # Минимум 1 минута
                                                                               ^
security/safe_function_manager.py:2196:80: E501 line too long (90 > 79 characters)
                self.log_activity("Конфигурация оптимизации производительности обновлена")
                                                                               ^
security/safe_function_manager.py:2200:80: E501 line too long (98 > 79 characters)
            self.log_activity(f"Ошибка конфигурации оптимизации производительности: {e}", "error")
                                                                               ^
security/safe_function_manager.py:2213:80: E501 line too long (82 > 79 characters)
                description="Security alert when critical functions are sleeping",
                                                                               ^
security/safe_function_manager.py:2268:80: E501 line too long (96 > 79 characters)
            self.log_activity(f"Ошибка настройки правил мониторинга безопасности: {e}", "error")
                                                                               ^
security/safe_function_manager.py:2271:28: E128 continuation line under-indented for visual indent
                           severity: str = "MEDIUM", component: str = "SafeFunctionManager",
                           ^
security/safe_function_manager.py:2271:80: E501 line too long (92 > 79 characters)
                           severity: str = "MEDIUM", component: str = "SafeFunctionManager",
                                                                               ^
security/safe_function_manager.py:2272:28: E128 continuation line under-indented for visual indent
                           alert_type: str = "FUNCTION_MANAGEMENT"):
                           ^
security/safe_function_manager.py:2303:80: E501 line too long (94 > 79 characters)
            self.log_activity(f"Ошибка отправки алерта безопасности {alert_id}: {e}", "error")
                                                                               ^
security/safe_function_manager.py:2305:80: E501 line too long (104 > 79 characters)
    def _monitor_function_security(self, function_id: str, action: str, details: Dict[str, Any] = None):
                                                                               ^
security/safe_function_manager.py:2318:80: E501 line too long (80 > 79 characters)
                    alert_id=f"critical_sleep_{function_id}_{int(time.time())}",
                                                                               ^
security/safe_function_manager.py:2320:80: E501 line too long (87 > 79 characters)
                    message=f"Critical function {function.name} has been put to sleep",
                                                                               ^
security/safe_function_manager.py:2332:80: E501 line too long (80 > 79 characters)
                        title=f"Mass Sleep Transition: {sleep_count} functions",
                                                                               ^
security/safe_function_manager.py:2333:80: E501 line too long (92 > 79 characters)
                        message=f"{sleep_count} functions were put to sleep simultaneously",
                                                                               ^
security/safe_function_manager.py:2345:80: E501 line too long (82 > 79 characters)
                    message=f"Error in function {function.name}: {error_message}",
                                                                               ^
security/safe_function_manager.py:2352:80: E501 line too long (101 > 79 characters)
            self.log_activity(f"Ошибка мониторинга безопасности функции {function_id}: {e}", "error")
                                                                               ^
security/safe_function_manager.py:2362:80: E501 line too long (86 > 79 characters)
                "critical_functions_sleeping": len([f for f in self.functions.values() 
                                                                               ^
security/safe_function_manager.py:2362:87: W291 trailing whitespace
                "critical_functions_sleeping": len([f for f in self.functions.values() 
                                                                                      ^
security/safe_function_manager.py:2363:51: E128 continuation line under-indented for visual indent
                                                  if f.is_critical and f.status == FunctionStatus.SLEEPING]),
                                                  ^
security/safe_function_manager.py:2363:80: E501 line too long (109 > 79 characters)
                                                  if f.is_critical and f.status == FunctionStatus.SLEEPING]),
                                                                               ^
security/safe_function_manager.py:2365:78: W291 trailing whitespace
                "sleeping_functions": len([f for f in self.functions.values() 
                                                                             ^
security/safe_function_manager.py:2366:42: E128 continuation line under-indented for visual indent
                                         if f.status == FunctionStatus.SLEEPING]),
                                         ^
security/safe_function_manager.py:2366:80: E501 line too long (82 > 79 characters)
                                         if f.status == FunctionStatus.SLEEPING]),
                                                                               ^
security/safe_function_manager.py:2367:77: W291 trailing whitespace
                "enabled_functions": len([f for f in self.functions.values() 
                                                                            ^
security/safe_function_manager.py:2368:41: E128 continuation line under-indented for visual indent
                                        if f.status == FunctionStatus.ENABLED]),
                                        ^
security/safe_function_manager.py:2368:80: E501 line too long (80 > 79 characters)
                                        if f.status == FunctionStatus.ENABLED]),
                                                                               ^
security/safe_function_manager.py:2369:80: E501 line too long (93 > 79 characters)
                "sleep_transitions_per_minute": self.sleep_transitions,  # Упрощенная метрика
                                                                               ^
security/safe_function_manager.py:2371:80: E501 line too long (90 > 79 characters)
                "avg_execution_time": 0,  # Будет обновляться из метрик производительности
                                                                               ^
security/safe_function_manager.py:2379:80: E501 line too long (97 > 79 characters)
            self.log_activity(f"Ошибка обновления данных мониторинга безопасности: {e}", "error")
                                                                               ^
security/safe_function_manager.py:2385:80: E501 line too long (96 > 79 characters)
                return {"enabled": False, "message": "Security monitoring integration disabled"}
                                                                               ^
security/safe_function_manager.py:2395:80: E501 line too long (90 > 79 characters)
                "recent_alerts": [alert.to_dict() for alert in self.security_alerts[-5:]],
                                                                               ^
security/safe_function_manager.py:2396:80: E501 line too long (86 > 79 characters)
                "critical_functions_sleeping": len([f for f in self.functions.values() 
                                                                               ^
security/safe_function_manager.py:2396:87: W291 trailing whitespace
                "critical_functions_sleeping": len([f for f in self.functions.values() 
                                                                                      ^
security/safe_function_manager.py:2397:51: E128 continuation line under-indented for visual indent
                                                  if f.is_critical and f.status == FunctionStatus.SLEEPING]),
                                                  ^
security/safe_function_manager.py:2397:80: E501 line too long (109 > 79 characters)
                                                  if f.is_critical and f.status == FunctionStatus.SLEEPING]),
                                                                               ^
security/safe_function_manager.py:2398:80: E501 line too long (91 > 79 characters)
                "monitoring_data": self.security_monitoring.monitoring_data.get("sfm", {}),
                                                                               ^
security/safe_function_manager.py:2405:80: E501 line too long (97 > 79 characters)
            self.log_activity(f"Ошибка получения статуса мониторинга безопасности: {e}", "error")
                                                                               ^
security/safe_function_manager.py:2408:44: W291 trailing whitespace
    def configure_security_monitoring(self, 
                                           ^
security/safe_function_manager.py:2409:37: E128 continuation line under-indented for visual indent
                                    monitoring_integration_enabled: bool = None,
                                    ^
security/safe_function_manager.py:2409:80: E501 line too long (80 > 79 characters)
                                    monitoring_integration_enabled: bool = None,
                                                                               ^
security/safe_function_manager.py:2410:37: E128 continuation line under-indented for visual indent
                                    alert_retention_days: int = None) -> bool:
                                    ^
security/safe_function_manager.py:2415:80: E501 line too long (88 > 79 characters)
                    self.monitoring_integration_enabled = monitoring_integration_enabled
                                                                               ^
security/safe_function_manager.py:2418:80: E501 line too long (88 > 79 characters)
                    self.security_monitoring.alert_retention_days = alert_retention_days
                                                                               ^
security/safe_function_manager.py:2424:80: E501 line too long (84 > 79 characters)
                self.log_activity("Конфигурация мониторинга безопасности обновлена")
                                                                               ^
security/safe_function_manager.py:2428:80: E501 line too long (92 > 79 characters)
            self.log_activity(f"Ошибка конфигурации мониторинга безопасности: {e}", "error")
                                                                               ^
security/safe_function_manager.py:2444:80: E501 line too long (80 > 79 characters)
                f"Ошибка запуска менеджера безопасных функций {self.name}: {e}",
                                                                               ^
security/safe_function_manager.py:2471:80: E501 line too long (82 > 79 characters)
                f"Ошибка остановки менеджера безопасных функций {self.name}: {e}",
                                                                               ^
security/safe_function_manager.py:2494:80: E501 line too long (88 > 79 characters)
                return False, "Идентификатор функции должен содержать минимум 3 символа"
                                                                               ^
security/safe_function_manager.py:2497:80: E501 line too long (86 > 79 characters)
                return False, "Идентификатор функции не должен превышать 100 символов"
                                                                               ^
security/safe_function_manager.py:2502:80: E501 line too long (113 > 79 characters)
                return False, "Идентификатор функции может содержать только буквы, цифры, дефисы и подчеркивания"
                                                                               ^
security/safe_function_manager.py:2505:80: E501 line too long (156 > 79 characters)
            dangerous_patterns = [';', '--', '/*', '*/', 'xp_', 'sp_', 'exec', 'execute', 'select', 'insert', 'update', 'delete', 'drop', 'create', 'alter']
                                                                               ^
security/safe_function_manager.py:2509:80: E501 line too long (107 > 79 characters)
                    return False, f"Идентификатор функции содержит потенциально опасный паттерн: {pattern}"
                                                                               ^
security/safe_function_manager.py:2534:80: E501 line too long (83 > 79 characters)
                return False, "Название функции должно содержать минимум 3 символа"
                                                                               ^
security/safe_function_manager.py:2537:80: E501 line too long (81 > 79 characters)
                return False, "Название функции не должно превышать 200 символов"
                                                                               ^
security/safe_function_manager.py:2540:80: E501 line too long (106 > 79 characters)
            dangerous_patterns = ['<script', '</script', 'javascript:', 'onload=', 'onerror=', 'onclick=']
                                                                               ^
security/safe_function_manager.py:2544:80: E501 line too long (102 > 79 characters)
                    return False, f"Название функции содержит потенциально опасный паттерн: {pattern}"
                                                                               ^
security/safe_function_manager.py:2551:80: E501 line too long (84 > 79 characters)
    def _validate_function_params(self, params: Dict[str, Any]) -> Tuple[bool, str]:
                                                                               ^
security/safe_function_manager.py:2580:80: E501 line too long (93 > 79 characters)
                dangerous_patterns = [';', '--', '/*', '*/', 'xp_', 'sp_', 'exec', 'execute']
                                                                               ^
security/safe_function_manager.py:2584:80: E501 line too long (87 > 79 characters)
                        return False, f"Ключ параметра содержит опасный паттерн: {key}"
                                                                               ^
security/safe_function_manager.py:2589:80: E501 line too long (82 > 79 characters)
                        return False, f"Значение параметра слишком длинное: {key}"
                                                                               ^
security/safe_function_manager.py:2592:80: E501 line too long (102 > 79 characters)
                    dangerous_patterns = ['<script', '</script', 'javascript:', 'onload=', 'onerror=']
                                                                               ^
security/safe_function_manager.py:2596:80: E501 line too long (95 > 79 characters)
                            return False, f"Значение параметра содержит опасный паттерн: {key}"
                                                                               ^
security/safe_function_manager.py:2605:80: E501 line too long (82 > 79 characters)
                        return False, f"Значение параметра слишком большое: {key}"
                                                                               ^
security/safe_function_manager.py:2608:80: E501 line too long (99 > 79 characters)
                    return False, f"Неподдерживаемый тип параметра: {key} ({type(value).__name__})"
                                                                               ^
security/safe_function_manager.py:2646:80: E501 line too long (101 > 79 characters)
    def _log_security_event(self, event_type: str, function_id: str, details: Dict[str, Any] = None):
                                                                               ^
security/safe_function_manager.py:2665:80: E501 line too long (105 > 79 characters)
            self.log_activity(f"СОБЫТИЕ БЕЗОПАСНОСТИ: {event_type} для функции {function_id}", "warning")
                                                                               ^
security/safe_function_manager.py:2668:80: E501 line too long (90 > 79 characters)
            self._monitor_function_security(function_id, "security_event", security_event)
                                                                               ^
security/safe_function_manager.py:2671:80: E501 line too long (87 > 79 characters)
            self.log_activity(f"Ошибка логирования события безопасности: {e}", "error")
                                                                               ^
security/safe_function_manager.py:2673:80: E501 line too long (95 > 79 characters)
    def _check_security_threats(self, function_id: str, params: Dict[str, Any] = None) -> bool:
                                                                               ^
security/safe_function_manager.py:2692:80: E501 line too long (83 > 79 characters)
                if hasattr(function, 'last_execution') and function.last_execution:
                                                                               ^
security/safe_function_manager.py:2693:80: E501 line too long (96 > 79 characters)
                    time_since_last = (datetime.now() - function.last_execution).total_seconds()
                                                                               ^
security/safe_function_manager.py:2695:80: E501 line too long (82 > 79 characters)
                        self._log_security_event("RAPID_EXECUTION", function_id, {
                                                                               ^
security/safe_function_manager.py:2703:80: E501 line too long (88 > 79 characters)
                    error_rate = (function.error_count / function.execution_count) * 100
                                                                               ^
security/safe_function_manager.py:2705:80: E501 line too long (82 > 79 characters)
                        self._log_security_event("HIGH_ERROR_RATE", function_id, {
                                                                               ^
security/safe_function_manager.py:2718:80: E501 line too long (87 > 79 characters)
                            'union select', 'drop table', 'delete from', 'insert into',
                                                                               ^
security/safe_function_manager.py:2719:80: E501 line too long (83 > 79 characters)
                            'update set', 'exec(', 'eval(', 'system(', 'shell_exec'
                                                                               ^
security/safe_function_manager.py:2725:80: E501 line too long (92 > 79 characters)
                                self._log_security_event("INJECTION_ATTEMPT", function_id, {
                                                                               ^
security/safe_function_manager.py:2727:80: E501 line too long (80 > 79 characters)
                                    "value": value[:100],  # Первые 100 символов
                                                                               ^
security/safe_function_manager.py:2736:80: E501 line too long (82 > 79 characters)
            self.log_activity(f"Ошибка проверки угроз безопасности: {e}", "error")
                                                                               ^
security/safe_function_manager.py:2750:80: E501 line too long (97 > 79 characters)
                "critical_functions": len([f for f in self.functions.values() if f.is_critical]),
                                                                               ^
security/safe_function_manager.py:2751:80: E501 line too long (127 > 79 characters)
                "high_security_functions": len([f for f in self.functions.values() if f.security_level == SecurityLevel.HIGH]),
                                                                               ^
security/safe_function_manager.py:2752:80: E501 line too long (131 > 79 characters)
                "medium_security_functions": len([f for f in self.functions.values() if f.security_level == SecurityLevel.MEDIUM]),
                                                                               ^
security/safe_function_manager.py:2753:80: E501 line too long (125 > 79 characters)
                "low_security_functions": len([f for f in self.functions.values() if f.security_level == SecurityLevel.LOW]),
                                                                               ^
security/safe_function_manager.py:2754:80: E501 line too long (104 > 79 characters)
                "functions_with_errors": len([f for f in self.functions.values() if f.error_count > 0]),
                                                                               ^
security/safe_function_manager.py:2781:80: E501 line too long (88 > 79 characters)
                    error_rate = (function.error_count / function.execution_count) * 100
                                                                               ^
security/safe_function_manager.py:2817:80: E501 line too long (85 > 79 characters)
            self.log_activity(f"Ошибка получения статуса безопасности: {e}", "error")
                                                                               ^
security/safe_function_manager.py:2840:80: E501 line too long (80 > 79 characters)
            error_rate = (function.error_count / function.execution_count) * 100
                                                                               ^
security/safe_function_manager.py:2852:13: F401 'json' imported but unused
            import json
            ^
security/safe_function_manager.py:2853:1: W293 blank line contains whitespace
            
^
security/safe_function_manager.py:2857:1: W293 blank line contains whitespace
            
^
security/safe_function_manager.py:2859:80: E501 line too long (86 > 79 characters)
            self.registry_file = os.path.join(self.data_dir, "function_registry.json")
                                                                               ^
security/safe_function_manager.py:2860:1: W293 blank line contains whitespace
            
^
security/safe_function_manager.py:2863:1: W293 blank line contains whitespace
            
^
security/safe_function_manager.py:2865:1: W293 blank line contains whitespace
            
^
security/safe_function_manager.py:2867:80: E501 line too long (84 > 79 characters)
            self.log_activity(f"Ошибка инициализации персистентности: {e}", "error")
                                                                               ^
security/safe_function_manager.py:2874:1: W293 blank line contains whitespace
            
^
security/safe_function_manager.py:2877:1: W293 blank line contains whitespace
            
^
security/safe_function_manager.py:2879:80: E501 line too long (84 > 79 characters)
            print(f"🔍 DEBUG: Файл существует: {os.path.exists(self.registry_file)}")
                                                                               ^
security/safe_function_manager.py:2880:1: W293 blank line contains whitespace
            
^
security/safe_function_manager.py:2883:23: F541 f-string is missing placeholders
                print(f"🔍 DEBUG: Начинаем чтение файла...")
                      ^
security/safe_function_manager.py:2887:27: F541 f-string is missing placeholders
                    print(f"🔍 DEBUG: Файл прочитан успешно!")
                          ^
security/safe_function_manager.py:2891:1: W293 blank line contains whitespace
                
^
security/safe_function_manager.py:2894:80: E501 line too long (80 > 79 characters)
                print(f"🔍 DEBUG: functions в data: {data.get('functions', {})}")
                                                                               ^
security/safe_function_manager.py:2895:1: W293 blank line contains whitespace
                    
^
security/safe_function_manager.py:2898:80: E501 line too long (91 > 79 characters)
                print(f"🔍 DEBUG: Найдено {len(data.get('functions', {}))} функций в файле")
                                                                               ^
security/safe_function_manager.py:2899:80: E501 line too long (94 > 79 characters)
                self.log_activity(f"Найдено {len(data.get('functions', {}))} функций в файле")
                                                                               ^
security/safe_function_manager.py:2900:1: W293 blank line contains whitespace
                
^
security/safe_function_manager.py:2901:23: F541 f-string is missing placeholders
                print(f"🔍 DEBUG: Начинаем цикл загрузки функций...")
                      ^
security/safe_function_manager.py:2905:1: W293 blank line contains whitespace
                    
^
security/safe_function_manager.py:2906:80: E501 line too long (96 > 79 characters)
                    # Создаем объект функции из сохраненных данных (перезаписываем существующие)
                                                                               ^
security/safe_function_manager.py:2911:80: E501 line too long (80 > 79 characters)
                        function_type=func_data.get('function_type', 'unknown'),
                                                                               ^
security/safe_function_manager.py:2912:80: E501 line too long (95 > 79 characters)
                        security_level=SecurityLevel(func_data.get('security_level', 'MEDIUM'))
                                                                               ^
security/safe_function_manager.py:2914:1: W293 blank line contains whitespace
                    
^
security/safe_function_manager.py:2916:80: E501 line too long (84 > 79 characters)
                    func.status = FunctionStatus(func_data.get('status', 'enabled'))
                                                                               ^
security/safe_function_manager.py:2921:1: W293 blank line contains whitespace
                    
^
security/safe_function_manager.py:2926:1: W293 blank line contains whitespace
                
^
security/safe_function_manager.py:2930:80: E501 line too long (99 > 79 characters)
                    # Создаем обработчик на основе сохраненных данных (перезаписываем существующие)
                                                                               ^
security/safe_function_manager.py:2931:21: F841 local variable 'handler_type' is assigned to but never used
                    handler_type = handler_data.get('type', 'function')
                    ^
security/safe_function_manager.py:2933:1: W293 blank line contains whitespace
                    
^
security/safe_function_manager.py:2941:80: E501 line too long (88 > 79 characters)
                                'message': f'Обработчик {handler_name} выполнен успешно'
                                                                               ^
security/safe_function_manager.py:2944:1: W293 blank line contains whitespace
                    
^
security/safe_function_manager.py:2945:80: E501 line too long (99 > 79 characters)
                    self.function_handlers[func_id] = create_handler_wrapper(func_id, handler_name)
                                                                               ^
security/safe_function_manager.py:2947:1: W293 blank line contains whitespace
                        
^
security/safe_function_manager.py:2948:80: E501 line too long (107 > 79 characters)
                self.log_activity(f"Загружено {functions_loaded} функций и {handlers_loaded} обработчиков")
                                                                               ^
security/safe_function_manager.py:2950:80: E501 line too long (89 > 79 characters)
                self.log_activity("Файл реестра не найден, начинаем с пустого состояния")
                                                                               ^
security/safe_function_manager.py:2951:1: W293 blank line contains whitespace
                
^
security/safe_function_manager.py:2953:80: E501 line too long (83 > 79 characters)
            self.log_activity(f"Ошибка загрузки сохраненных функций: {e}", "error")
                                                                               ^
security/safe_function_manager.py:2959:1: W293 blank line contains whitespace
            
^
security/safe_function_manager.py:2965:1: W293 blank line contains whitespace
            
^
security/safe_function_manager.py:2980:1: W293 blank line contains whitespace
            
^
security/safe_function_manager.py:2985:80: E501 line too long (100 > 79 characters)
                    'function_name': handler.__name__ if hasattr(handler, '__name__') else 'lambda',
                                                                               ^
security/safe_function_manager.py:2986:80: E501 line too long (97 > 79 characters)
                    'module': handler.__module__ if hasattr(handler, '__module__') else 'unknown'
                                                                               ^
security/safe_function_manager.py:2988:1: W293 blank line contains whitespace
            
^
security/safe_function_manager.py:2991:1: W293 blank line contains whitespace
                
^
security/safe_function_manager.py:2992:80: E501 line too long (128 > 79 characters)
            self.log_activity(f"Функции ({len(self.functions)}) и обработчики ({len(self.function_handlers)}) сохранены в файл")
                                                                               ^
security/safe_function_manager.py:2993:1: W293 blank line contains whitespace
            
^
security/safe_function_manager_backup_20250909_021153.py:69:80: E501 line too long (82 > 79 characters)
                self.last_execution.isoformat() if self.last_execution else None),
                                                                               ^
security/safe_function_manager_backup_20250909_021153.py:138:80: E501 line too long (83 > 79 characters)
                f"Менеджер безопасных функций {self.name} успешно инициализирован")
                                                                               ^
security/safe_function_manager_backup_20250909_021153.py:144:80: E501 line too long (86 > 79 characters)
                f"Ошибка инициализации менеджера безопасных функций {self.name}: {e}",
                                                                               ^
security/safe_function_manager_backup_20250909_021153.py:290:80: E501 line too long (81 > 79 characters)
                        f"Функция {function_id} уже зарегистрирована", "warning")
                                                                               ^
security/safe_function_manager_backup_20250909_021153.py:333:17: F841 local variable 'function' is assigned to but never used
                function = self.functions[function_id]
                ^
security/safe_function_manager_backup_20250909_021153.py:338:80: E501 line too long (103 > 79 characters)
                        f"Невозможно удалить функцию {function_id}: есть зависимые функции", "error", )
                                                                               ^
security/safe_function_manager_backup_20250909_021153.py:383:80: E501 line too long (99 > 79 characters)
                        f"Невозможно включить функцию {function_id}: зависимости не удовлетворены",
                                                                               ^
security/safe_function_manager_backup_20250909_021153.py:481:80: E501 line too long (94 > 79 characters)
                        f"Функция {function_id} не активна (статус: {function.status.value})",
                                                                               ^
security/safe_function_manager_backup_20250909_021153.py:485:80: E501 line too long (80 > 79 characters)
                if len(self.active_executions) >= self.max_concurrent_functions:
                                                                               ^
security/safe_function_manager_backup_20250909_021153.py:486:80: E501 line too long (82 > 79 characters)
                    return False, None, "Достигнут лимит одновременных выполнений"
                                                                               ^
security/safe_function_manager_backup_20250909_021153.py:507:80: E501 line too long (88 > 79 characters)
                    f"Функция {function_id} выполнена успешно за {execution_time:.2f}с")
                                                                               ^
security/safe_function_manager_backup_20250909_021153.py:594:80: E501 line too long (92 > 79 characters)
                f"Ошибка регистрации обработчика для функции {function_id}: {e}", "error", )
                                                                               ^
security/safe_function_manager_backup_20250909_021153.py:641:80: E501 line too long (80 > 79 characters)
                for function in self.functions.values() if function.is_critical]
                                                                               ^
security/safe_function_manager_backup_20250909_021153.py:727:80: E501 line too long (93 > 79 characters)
            "critical_functions": len([f for f in self.functions.values() if f.is_critical]),
                                                                               ^
security/safe_function_manager_backup_20250909_021153.py:733:80: E501 line too long (110 > 79 characters)
                (self.successful_executions / self.total_executions * 100) if self.total_executions > 0 else 0
                                                                               ^
security/safe_function_manager_backup_20250909_021153.py:736:80: E501 line too long (83 > 79 characters)
            "functions_by_security_level": self._get_functions_by_security_level(),
                                                                               ^
security/safe_function_manager_backup_20250909_021153.py:768:80: E501 line too long (80 > 79 characters)
                f"Ошибка запуска менеджера безопасных функций {self.name}: {e}",
                                                                               ^
security/safe_function_manager_backup_20250909_021153.py:792:80: E501 line too long (82 > 79 characters)
                f"Ошибка остановки менеджера безопасных функций {self.name}: {e}",
                                                                               ^
security/safe_function_manager_fixed.py:69:80: E501 line too long (82 > 79 characters)
                self.last_execution.isoformat() if self.last_execution else None),
                                                                               ^
security/safe_function_manager_fixed.py:138:80: E501 line too long (83 > 79 characters)
                f"Менеджер безопасных функций {self.name} успешно инициализирован")
                                                                               ^
security/safe_function_manager_fixed.py:144:80: E501 line too long (86 > 79 characters)
                f"Ошибка инициализации менеджера безопасных функций {self.name}: {e}",
                                                                               ^
security/safe_function_manager_fixed.py:290:80: E501 line too long (81 > 79 characters)
                        f"Функция {function_id} уже зарегистрирована", "warning")
                                                                               ^
security/safe_function_manager_fixed.py:333:17: F841 local variable 'function' is assigned to but never used
                function = self.functions[function_id]
                ^
security/safe_function_manager_fixed.py:338:80: E501 line too long (103 > 79 characters)
                        f"Невозможно удалить функцию {function_id}: есть зависимые функции", "error", )
                                                                               ^
security/safe_function_manager_fixed.py:383:80: E501 line too long (99 > 79 characters)
                        f"Невозможно включить функцию {function_id}: зависимости не удовлетворены",
                                                                               ^
security/safe_function_manager_fixed.py:481:80: E501 line too long (94 > 79 characters)
                        f"Функция {function_id} не активна (статус: {function.status.value})",
                                                                               ^
security/safe_function_manager_fixed.py:485:80: E501 line too long (80 > 79 characters)
                if len(self.active_executions) >= self.max_concurrent_functions:
                                                                               ^
security/safe_function_manager_fixed.py:486:80: E501 line too long (82 > 79 characters)
                    return False, None, "Достигнут лимит одновременных выполнений"
                                                                               ^
security/safe_function_manager_fixed.py:507:80: E501 line too long (88 > 79 characters)
                    f"Функция {function_id} выполнена успешно за {execution_time:.2f}с")
                                                                               ^
security/safe_function_manager_fixed.py:594:80: E501 line too long (92 > 79 characters)
                f"Ошибка регистрации обработчика для функции {function_id}: {e}", "error", )
                                                                               ^
security/safe_function_manager_fixed.py:641:80: E501 line too long (80 > 79 characters)
                for function in self.functions.values() if function.is_critical]
                                                                               ^
security/safe_function_manager_fixed.py:727:80: E501 line too long (93 > 79 characters)
            "critical_functions": len([f for f in self.functions.values() if f.is_critical]),
                                                                               ^
security/safe_function_manager_fixed.py:733:80: E501 line too long (110 > 79 characters)
                (self.successful_executions / self.total_executions * 100) if self.total_executions > 0 else 0
                                                                               ^
security/safe_function_manager_fixed.py:736:80: E501 line too long (83 > 79 characters)
            "functions_by_security_level": self._get_functions_by_security_level(),
                                                                               ^
security/safe_function_manager_fixed.py:768:80: E501 line too long (80 > 79 characters)
                f"Ошибка запуска менеджера безопасных функций {self.name}: {e}",
                                                                               ^
security/safe_function_manager_fixed.py:792:80: E501 line too long (82 > 79 characters)
                f"Ошибка остановки менеджера безопасных функций {self.name}: {e}",
                                                                               ^
security/safe_function_manager_patch.py:4:80: E501 line too long (80 > 79 characters)
"""
ПАТЧ для SafeFunctionManager - исправляет блокировку и добавляет персистентность
"""
   
                                                                           ^
security/safe_function_manager_patch.py:9:1: E302 expected 2 blank lines, found 1
def apply_patch():
^
security/safe_function_manager_patch.py:11:1: W293 blank line contains whitespace
    
^
security/safe_function_manager_patch.py:15:1: W293 blank line contains whitespace
    
^
security/safe_function_manager_patch.py:18:80: E501 line too long (112 > 79 characters)
        r'(self\.enable_auto_management = config\.get\(\'enable_auto_management\', True\) if config else True)',
                                                                               ^
security/safe_function_manager_patch.py:19:80: E501 line too long (303 > 79 characters)
        r'\1\n        \n        # НОВОЕ: Персистентное хранение функций\n        self.registry_file = config.get("registry_file", "data/functions_registry.json") if config else "data/functions_registry.json"\n        self.enable_persistence = config.get("enable_persistence", True) if config else True',
                                                                               ^
security/safe_function_manager_patch.py:22:1: W293 blank line contains whitespace
    
^
security/safe_function_manager_patch.py:26:80: E501 line too long (150 > 79 characters)
        r'\1\n        \n        # НОВОЕ: Загрузить функции при инициализации\n        if self.enable_persistence:\n            self.load_functions()',
                                                                               ^
security/safe_function_manager_patch.py:29:1: W293 blank line contains whitespace
    
^
security/safe_function_manager_patch.py:32:80: E501 line too long (115 > 79 characters)
        r'(\s+# Автоматическое включение если требуется\s+if auto_enable:\s+self\.enable_function\(function_id\))',
                                                                               ^
security/safe_function_manager_patch.py:38:80: E501 line too long (86 > 79 characters)
        r'''\1
                # Автоматическое включение если требуется (без блокировки)
                if auto_enable:
                    function.status = FunctionStatus.ENABLED
                    self.functions_enabled += 1
                    self.log_activity(f"Функция {function_id} автоматически включена")
                
                # НОВОЕ: Автоматически сохранить после регистрации
                if self.enable_persistence:
                    self.save_functions()''',
              
                                                                ^
security/safe_function_manager_patch.py:39:1: W293 blank line contains whitespace
        r'''\1
                # Автоматическое включение если требуется (без блокировки)
                if auto_enable:
                    function.status = FunctionStatus.ENABLED
                    self.functions_enabled += 1
                    self.log_activity(f"Функция {function_id} автоматически включена")
                
                # НОВОЕ: Автоматически сохранить после регистрации
                if self.enable_persistence:
                    self.save_functions()''',
^
security/safe_function_manager_patch.py:45:1: W293 blank line contains whitespace
    
^
security/safe_function_manager_patch.py:48:80: E501 line too long (164 > 79 characters)
        r'(\s+for function in self\.functions\.values\(\):\s+if function\.is_critical and function\.auto_enable:\s+self\.enable_function\(function\.function_id\))',
                                                                               ^
security/safe_function_manager_patch.py:54:80: E501 line too long (81 > 79 characters)
        r'''\1
        for function in self.functions.values():
            if function.is_critical and function.auto_enable:
                function.status = FunctionStatus.ENABLED
                self.functions_enabled += 1
                self.functions_disabled = max(0, self.functions_disabled - 1)''',
              
                                                
               ^
security/safe_function_manager_patch.py:57:1: W293 blank line contains whitespace
    
^
security/safe_function_manager_patch.py:61:1: W293 blank line contains whitespace
    
^
security/safe_function_manager_patch.py:68:1: E305 expected 2 blank lines after class or function definition, found 1
if __name__ == "__main__":
^
security/safe_security_monitoring.py:76:80: E501 line too long (97 > 79 characters)
            "last_triggered": (self.last_triggered.isoformat() if self.last_triggered else None),
                                                                               ^
security/safe_security_monitoring.py:118:80: E501 line too long (100 > 79 characters)
            "acknowledged_at": (self.acknowledged_at.isoformat() if self.acknowledged_at else None),
                                                                               ^
security/safe_security_monitoring.py:120:80: E501 line too long (86 > 79 characters)
            "resolved_at": self.resolved_at.isoformat() if self.resolved_at else None,
                                                                               ^
security/safe_security_monitoring.py:135:80: E501 line too long (101 > 79 characters)
        self.monitoring_interval = config.get("monitoring_interval", 30) if config else 30  # секунды
                                                                               ^
security/safe_security_monitoring.py:136:80: E501 line too long (92 > 79 characters)
        self.alert_retention_days = config.get("alert_retention_days", 30) if config else 30
                                                                               ^
security/safe_security_monitoring.py:137:80: E501 line too long (88 > 79 characters)
        self.enable_real_time = config.get("enable_real_time", True) if config else True
                                                                               ^
security/safe_security_monitoring.py:138:80: E501 line too long (98 > 79 characters)
        self.max_concurrent_monitors = config.get("max_concurrent_monitors", 10) if config else 10
                                                                               ^
security/safe_security_monitoring.py:164:80: E501 line too long (93 > 79 characters)
            self.log_activity(f"Инициализация безопасного менеджера мониторинга {self.name}")
                                                                               ^
security/safe_security_monitoring.py:182:80: E501 line too long (101 > 79 characters)
            self.log_activity(f"Безопасный менеджер мониторинга {self.name} успешно инициализирован")
                                                                               ^
security/safe_security_monitoring.py:186:80: E501 line too long (102 > 79 characters)
            self.log_activity(f"Ошибка инициализации безопасного менеджера мониторинга: {e}", "error")
                                                                               ^
security/safe_security_monitoring.py:237:80: E501 line too long (86 > 79 characters)
            "threat_intelligence": {"status": "active", "last_check": datetime.now()},
                                                                               ^
security/safe_security_monitoring.py:238:80: E501 line too long (81 > 79 characters)
            "authentication": {"status": "active", "last_check": datetime.now()},
                                                                               ^
security/safe_security_monitoring.py:250:80: E501 line too long (102 > 79 characters)
            self.log_activity("Мониторинг в реальном времени отключен в безопасном режиме", "warning")
                                                                               ^
security/safe_security_monitoring.py:254:80: E501 line too long (84 > 79 characters)
        monitor_thread = threading.Thread(target=self._monitoring_loop, daemon=True)
                                                                               ^
security/safe_security_monitoring.py:325:80: E501 line too long (91 > 79 characters)
        return {rule_id: rule.to_dict() for rule_id, rule in self.monitoring_rules.items()}
                                                                               ^
security/safe_security_monitoring.py:332:80: E501 line too long (92 > 79 characters)
        return {alert_id: alert.to_dict() for alert_id, alert in self.active_alerts.items()}
                                                                               ^
security/safe_security_monitoring.py:355:80: E501 line too long (101 > 79 characters)
            "uptime": ((datetime.now() - self.start_time).total_seconds() if self.start_time else 0),
                                                                               ^
security/safe_security_monitoring.py:374:80: E501 line too long (100 > 79 characters)
                    [a for a in self.active_alerts.values() if a.severity == AlertSeverity.CRITICAL]
                                                                               ^
security/safe_security_monitoring.py:376:80: E501 line too long (119 > 79 characters)
                "warning_alerts": len([a for a in self.active_alerts.values() if a.severity == AlertSeverity.WARNING]),
                                                                               ^
security/safe_security_monitoring.py:377:80: E501 line too long (101 > 79 characters)
                "system_health": ("good" if self.active_alerts_count == 0 else "attention_required"),
                                                                               ^
security/safe_security_monitoring.py:381:80: E501 line too long (112 > 79 characters)
    def validate_monitoring_operation(self, operation: str, function: Optional[str] = None) -> Tuple[bool, str]:
                                                                               ^
security/safe_security_monitoring.py:383:80: E501 line too long (108 > 79 characters)
        return self.safe_config.validate_operation(operation, "security.safe_security_monitoring", function)
                                                                               ^
security/safe_security_monitoring.py:387:80: E501 line too long (85 > 79 characters)
        self.log_activity(f"Остановка безопасного менеджера мониторинга {self.name}")
                                                                               ^
security/safe_security_monitoring.py:397:80: E501 line too long (84 > 79 characters)
        self.log_activity(f"Безопасный менеджер мониторинга {self.name} остановлен")
                                                                               ^
security/safe_security_monitoring.py:409:80: E501 line too long (101 > 79 characters)
            "uptime": ((datetime.now() - self.start_time).total_seconds() if self.start_time else 0),
                                                                               ^
security/safe_security_monitoring.py:415:80: E501 line too long (109 > 79 characters)
def create_safe_monitoring_manager(config: Optional[Dict[str, Any]] = None) -> SafeSecurityMonitoringManager:
                                                                               ^
security/scaling/__init__.py:31:2: W292 no newline at end of file
] ^
security/scaling/auto_scaling_engine.py:105:80: E501 line too long (85 > 79 characters)
        data['created_at'] = self.created_at.isoformat() if self.created_at else None
                                                                               ^
security/scaling/auto_scaling_engine.py:106:80: E501 line too long (97 > 79 characters)
        data['last_triggered'] = self.last_triggered.isoformat() if self.last_triggered else None
                                                                               ^
security/scaling/auto_scaling_engine.py:156:80: E501 line too long (106 > 79 characters)
        data['last_scaling_time'] = self.last_scaling_time.isoformat() if self.last_scaling_time else None
                                                                               ^
security/scaling/auto_scaling_engine.py:217:80: E501 line too long (84 > 79 characters)
            self.log_activity("Auto Scaling Engine успешно инициализирован", "info")
                                                                               ^
security/scaling/auto_scaling_engine.py:221:80: E501 line too long (88 > 79 characters)
            self.log_activity(f"Ошибка инициализации Auto Scaling Engine: {e}", "error")
                                                                               ^
security/scaling/auto_scaling_engine.py:247:80: E501 line too long (84 > 79 characters)
            self.log_activity(f"Ошибка остановки Auto Scaling Engine: {e}", "error")
                                                                               ^
security/scaling/auto_scaling_engine.py:257:80: E501 line too long (91 > 79 characters)
                self.log_activity(f"Правило масштабирования {rule.name} добавлено", "info")
                                                                               ^
security/scaling/auto_scaling_engine.py:261:80: E501 line too long (89 > 79 characters)
            self.log_activity(f"Ошибка добавления правила масштабирования: {e}", "error")
                                                                               ^
security/scaling/auto_scaling_engine.py:273:80: E501 line too long (93 > 79 characters)
                    self.log_activity(f"Правило масштабирования {rule.name} удалено", "info")
                                                                               ^
security/scaling/auto_scaling_engine.py:276:80: E501 line too long (97 > 79 characters)
                    self.log_activity(f"Правило масштабирования {rule_id} не найдено", "warning")
                                                                               ^
security/scaling/auto_scaling_engine.py:280:80: E501 line too long (87 > 79 characters)
            self.log_activity(f"Ошибка удаления правила масштабирования: {e}", "error")
                                                                               ^
security/scaling/auto_scaling_engine.py:295:80: E501 line too long (91 > 79 characters)
                cutoff_time = datetime.now() - timedelta(hours=self.metric_retention_hours)
                                                                               ^
security/scaling/auto_scaling_engine.py:310:80: E501 line too long (82 > 79 characters)
    def make_scaling_decision(self, service_id: str) -> Optional[ScalingDecision]:
                                                                               ^
security/scaling/auto_scaling_engine.py:317:80: E501 line too long (116 > 79 characters)
                service_rules = [r for r in self.scaling_rules.values() if r.service_id == service_id and r.enabled]
                                                                               ^
security/scaling/auto_scaling_engine.py:335:80: E501 line too long (99 > 79 characters)
                        confidence_scores.append(self._calculate_confidence(rule, service_metrics))
                                                                               ^
security/scaling/auto_scaling_engine.py:359:80: E501 line too long (115 > 79 characters)
                        (self.statistics["average_decision_time"] * (self.statistics["total_decisions_made"] - 1) +
                                                                               ^
security/scaling/auto_scaling_engine.py:360:80: E501 line too long (81 > 79 characters)
                         decision_time) / self.statistics["total_decisions_made"]
                                                                               ^
security/scaling/auto_scaling_engine.py:366:80: E501 line too long (89 > 79 characters)
            self.log_activity(f"Ошибка принятия решения о масштабировании: {e}", "error")
                                                                               ^
security/scaling/auto_scaling_engine.py:369:80: E501 line too long (87 > 79 characters)
    def get_scaling_rules(self, service_id: Optional[str] = None) -> List[ScalingRule]:
                                                                               ^
security/scaling/auto_scaling_engine.py:374:80: E501 line too long (97 > 79 characters)
                    return [r for r in self.scaling_rules.values() if r.service_id == service_id]
                                                                               ^
security/scaling/auto_scaling_engine.py:377:80: E501 line too long (87 > 79 characters)
            self.log_activity(f"Ошибка получения правил масштабирования: {e}", "error")
                                                                               ^
security/scaling/auto_scaling_engine.py:380:80: E501 line too long (113 > 79 characters)
    def get_scaling_decisions(self, service_id: Optional[str] = None, limit: int = 100) -> List[ScalingDecision]:
                                                                               ^
security/scaling/auto_scaling_engine.py:386:80: E501 line too long (84 > 79 characters)
                    decisions = [d for d in decisions if d.service_id == service_id]
                                                                               ^
security/scaling/auto_scaling_engine.py:392:80: E501 line too long (90 > 79 characters)
            self.log_activity(f"Ошибка получения решений о масштабировании: {e}", "error")
                                                                               ^
security/scaling/auto_scaling_engine.py:401:80: E501 line too long (87 > 79 characters)
            self.log_activity(f"Ошибка получения метрик масштабирования: {e}", "error")
                                                                               ^
security/scaling/auto_scaling_engine.py:411:80: E501 line too long (99 > 79 characters)
                    "total_metrics": sum(len(metrics) for metrics in self.metric_history.values()),
                                                                               ^
security/scaling/auto_scaling_engine.py:478:80: E501 line too long (95 > 79 characters)
            self.log_activity(f"Загружено {len(default_rules)} правил масштабирования", "info")
                                                                               ^
security/scaling/auto_scaling_engine.py:480:80: E501 line too long (86 > 79 characters)
            self.log_activity(f"Ошибка загрузки правил масштабирования: {e}", "error")
                                                                               ^
security/scaling/auto_scaling_engine.py:518:80: E501 line too long (96 > 79 characters)
                    recent_metrics = metric_list[-10:] if len(metric_list) > 10 else metric_list
                                                                               ^
security/scaling/auto_scaling_engine.py:525:80: E501 line too long (83 > 79 characters)
    def _evaluate_rule(self, rule: ScalingRule, metrics: List[MetricData]) -> bool:
                                                                               ^
security/scaling/auto_scaling_engine.py:535:80: E501 line too long (84 > 79 characters)
            rule_metrics = [m for m in metrics if m.metric_name == rule.metric_name]
                                                                               ^
security/scaling/auto_scaling_engine.py:544:80: E501 line too long (90 > 79 characters)
            if rule.trigger == ScalingTrigger.CPU_HIGH and current_value > rule.threshold:
                                                                               ^
security/scaling/auto_scaling_engine.py:546:80: E501 line too long (91 > 79 characters)
            elif rule.trigger == ScalingTrigger.CPU_LOW and current_value < rule.threshold:
                                                                               ^
security/scaling/auto_scaling_engine.py:548:80: E501 line too long (95 > 79 characters)
            elif rule.trigger == ScalingTrigger.MEMORY_HIGH and current_value > rule.threshold:
                                                                               ^
security/scaling/auto_scaling_engine.py:550:80: E501 line too long (94 > 79 characters)
            elif rule.trigger == ScalingTrigger.MEMORY_LOW and current_value < rule.threshold:
                                                                               ^
security/scaling/auto_scaling_engine.py:559:80: E501 line too long (91 > 79 characters)
    def _calculate_confidence(self, rule: ScalingRule, metrics: List[MetricData]) -> float:
                                                                               ^
security/scaling/auto_scaling_engine.py:570:80: E501 line too long (84 > 79 characters)
            rule_metrics = [m for m in metrics if m.metric_name == rule.metric_name]
                                                                               ^
security/scaling/auto_scaling_engine.py:582:80: E501 line too long (81 > 79 characters)
    def _make_final_decision(self, service_id: str, actions: List[ScalingAction],
                                                                               ^
security/scaling/auto_scaling_engine.py:583:80: E501 line too long (88 > 79 characters)
                             confidence_scores: List[float], triggered_rules: List[str],
                                                                               ^
security/scaling/auto_scaling_engine.py:584:80: E501 line too long (85 > 79 characters)
                             metrics: List[MetricData]) -> Optional[ScalingDecision]:
                                                                               ^
security/scaling/auto_scaling_engine.py:599:80: E501 line too long (93 > 79 characters)
            avg_confidence = statistics.mean(confidence_scores) if confidence_scores else 0.5
                                                                               ^
security/scaling/auto_scaling_engine.py:614:80: E501 line too long (105 > 79 characters)
                reason=f"Triggered by {len(triggered_rules)} rules with {avg_confidence:.2f} confidence",
                                                                               ^
security/scaling/auto_scaling_engine.py:624:80: E501 line too long (82 > 79 characters)
            self.log_activity(f"Ошибка принятия финального решения: {e}", "error")
                                                                               ^
security/scaling/auto_scaling_engine.py:627:80: E501 line too long (80 > 79 characters)
    def _calculate_target_replicas(self, service_id: str, action: ScalingAction,
                                                                               ^
security/scaling/auto_scaling_engine.py:628:80: E501 line too long (84 > 79 characters)
                                   current_replicas: int, confidence: float) -> int:
                                                                               ^
security/scaling/auto_scaling_engine.py:671:80: E501 line too long (90 > 79 characters)
                service_ids = set(rule.service_id for rule in self.scaling_rules.values())
                                                                               ^
security/scaling/auto_scaling_engine.py:677:80: E501 line too long (92 > 79 characters)
                            f"{decision.action.value} до {decision.target_replicas} реплик",
                                                                               ^
security/scaling/auto_scaling_engine.py:688:80: E501 line too long (86 > 79 characters)
            services = ["threat-detection", "performance-optimization", "api-gateway"]
                                                                               ^
security/scaling/auto_scaling_engine.py:721:80: E501 line too long (81 > 79 characters)
                "rules": {k: v.to_dict() for k, v in self.scaling_rules.items()},
                                                                               ^
security/scaling/auto_scaling_engine.py:722:80: E501 line too long (99 > 79 characters)
                "decisions": [d.to_dict() for d in self.scaling_decisions[-100:]],  # Последние 100
                                                                               ^
security/scaling/auto_scaling_engine.py:728:80: E501 line too long (90 > 79 characters)
            with open("/tmp/aladdin_scaling/last_state.json", 'w', encoding='utf-8') as f:
                                                                               ^
security/scaling/auto_scaling_engine.py:733:80: E501 line too long (91 > 79 characters)
            self.log_activity(f"Ошибка сохранения состояния масштабирования: {e}", "error")
                                                                               ^
security/secure_config_manager.py:15:1: E302 expected 2 blank lines, found 1
class Fernet:
^
security/secure_config_manager.py:19:1: W293 blank line contains whitespace
    
^
security/secure_config_manager.py:29:1: W293 blank line contains whitespace
    
^
security/secure_config_manager.py:40:1: E302 expected 2 blank lines, found 1
class PBKDF2HMAC:
^
security/secure_config_manager.py:47:1: W293 blank line contains whitespace
    
^
security/secure_config_manager.py:51:80: E501 line too long (100 > 79 characters)
            return hashlib.pbkdf2_hmac('sha256', password, self.salt, self.iterations)[:self.length]
                                                                               ^
security/secure_config_manager.py:60:1: E302 expected 2 blank lines, found 1
class hashes:
^
security/secure_config_manager.py:64:1: E302 expected 2 blank lines, found 1
@dataclass
^
security/secure_config_manager.py:76:1: E302 expected 2 blank lines, found 1
class SecureConfigManager:
^
security/secure_config_manager.py:81:1: W293 blank line contains whitespace
    
^
security/secure_config_manager.py:87:1: W293 blank line contains whitespace
        
^
security/secure_config_manager.py:92:1: W293 blank line contains whitespace
            
^
security/secure_config_manager.py:97:80: E501 line too long (80 > 79 characters)
                "ALADDIN_MASTER_PASSWORD не установлен в переменных окружения! "
                                                                               ^
security/secure_config_manager.py:98:80: E501 line too long (83 > 79 characters)
                "Установите: export ALADDIN_MASTER_PASSWORD='your_secure_password'"
                                                                               ^
security/secure_config_manager.py:100:1: W293 blank line contains whitespace
        
^
security/secure_config_manager.py:103:1: W293 blank line contains whitespace
        
^
security/secure_config_manager.py:111:1: W293 blank line contains whitespace
        
^
security/secure_config_manager.py:115:1: W293 blank line contains whitespace
        
^
security/secure_config_manager.py:117:1: W293 blank line contains whitespace
    
^
security/secure_config_manager.py:122:1: W293 blank line contains whitespace
            
^
security/secure_config_manager.py:126:1: W293 blank line contains whitespace
    
^
security/secure_config_manager.py:131:1: W293 blank line contains whitespace
            
^
security/secure_config_manager.py:140:1: W293 blank line contains whitespace
    
^
security/secure_config_manager.py:144:1: W293 blank line contains whitespace
        
^
security/secure_config_manager.py:152:1: W293 blank line contains whitespace
        
^
security/secure_config_manager.py:158:1: W293 blank line contains whitespace
                    
^
security/secure_config_manager.py:167:1: W293 blank line contains whitespace
                        
^
security/secure_config_manager.py:170:1: W293 blank line contains whitespace
        
^
security/secure_config_manager.py:173:1: W293 blank line contains whitespace
    
^
security/secure_config_manager.py:178:1: W293 blank line contains whitespace
            
^
security/secure_config_manager.py:184:1: W293 blank line contains whitespace
            
^
security/secure_config_manager.py:188:80: E501 line too long (82 > 79 characters)
                    config_dict[f"{field}_encrypted"] = self._encrypt_value(value)
                                                                               ^
security/secure_config_manager.py:189:1: W293 blank line contains whitespace
            
^
security/secure_config_manager.py:193:1: W293 blank line contains whitespace
            
^
security/secure_config_manager.py:196:1: W293 blank line contains whitespace
            
^
security/secure_config_manager.py:199:1: W293 blank line contains whitespace
            
^
security/secure_config_manager.py:203:1: W293 blank line contains whitespace
    
^
security/secure_config_manager.py:209:1: W293 blank line contains whitespace
    
^
security/secure_config_manager.py:219:1: W293 blank line contains whitespace
        
^
security/secure_config_manager.py:229:1: W293 blank line contains whitespace
        
^
security/secure_config_manager.py:236:80: E501 line too long (84 > 79 characters)
                    validation_result['warnings'].append(f"{name} слишком короткий")
                                                                               ^
security/secure_config_manager.py:237:80: E501 line too long (81 > 79 characters)
                if value in ['YOUR_TELEGRAM_BOT_TOKEN', 'YOUR_DISCORD_BOT_TOKEN', 
                                                                               ^
security/secure_config_manager.py:237:82: W291 trailing whitespace
                if value in ['YOUR_TELEGRAM_BOT_TOKEN', 'YOUR_DISCORD_BOT_TOKEN', 
                                                                                 ^
security/secure_config_manager.py:238:28: E128 continuation line under-indented for visual indent
                           'YOUR_TWILIO_TOKEN', 'your_app_password', 
                           ^
security/secure_config_manager.py:238:69: W291 trailing whitespace
                           'YOUR_TWILIO_TOKEN', 'your_app_password', 
                                                                    ^
security/secure_config_manager.py:239:28: E128 continuation line under-indented for visual indent
                           'YOUR_FIREBASE_SERVER_KEY', 'YOUR_ENCRYPTION_KEY']:
                           ^
security/secure_config_manager.py:240:80: E501 line too long (93 > 79 characters)
                    validation_result['errors'].append(f"{name} содержит шаблонное значение")
                                                                               ^
security/secure_config_manager.py:244:1: W293 blank line contains whitespace
        
^
security/secure_config_manager.py:245:80: E501 line too long (89 > 79 characters)
        validation_result['security_score'] = (security_score / len(secret_fields)) * 100
                                                                               ^
security/secure_config_manager.py:246:1: W293 blank line contains whitespace
        
^
security/secure_config_manager.py:248:1: W293 blank line contains whitespace
    
^
security/secure_config_manager.py:252:80: E501 line too long (84 > 79 characters)
            template = """# ALADDIN Security System - Environment Variables Template
# Скопируйте этот файл в .env и заполните реальными значениями

# Master Password для шифрования конфигурации
ALADDIN_MASTER_PASSWORD=your_secure_master_password_here

# Telegram Bot Configuration
TELEGRAM_BOT_TOKEN=your_telegram_bot_token_here
TELEGRAM_CHAT_ID=your_telegram_chat_id_here

# Discord Bot Configuration
DISCORD_BOT_TOKEN=your_discord_bot_token_here
DISCORD_CHANNEL_ID=your_discord_channel_id_here

# Twilio SMS Configuration
TWILIO_ACCOUNT_SID=your_twilio_account_sid_here
TWILIO_AUTH_TOKEN=your_twilio_auth_token_here
TWILIO_FROM_NUMBER=+1234567890

# Email Configuration
SMTP_SERVER=smtp.gmail.com
SMTP_PORT=587
EMAIL_USERNAME=your_email@gmail.com
EMAIL_PASSWORD=your_app_password_here

# Firebase Push Notifications
FIREBASE_SERVER_KEY=your_firebase_server_key_here
FCM_PROJECT_ID=your_fcm_project_id_here

# Security Settings
ENCRYPTION_KEY=your_encryption_key_here
API_RATE_LIMIT=100
MAX_MESSAGE_LENGTH=4096
"""
                                                                               ^
security/secure_config_manager.py:286:1: W293 blank line contains whitespace
            
^
security/secure_config_manager.py:289:1: W293 blank line contains whitespace
            
^
security/secure_config_manager.py:290:80: E501 line too long (82 > 79 characters)
            self.logger.info(f"Шаблон переменных окружения создан: {output_file}")
                                                                               ^
security/secure_config_manager.py:292:1: W293 blank line contains whitespace
            
^
security/secure_config_manager.py:298:1: E305 expected 2 blank lines after class or function definition, found 1
if __name__ == "__main__":
^
security/secure_config_manager.py:301:1: W293 blank line contains whitespace
    
^
security/secure_config_manager.py:304:1: W293 blank line contains whitespace
    
^
security/secure_config_manager.py:307:1: W293 blank line contains whitespace
    
^
security/secure_config_manager.py:310:1: W293 blank line contains whitespace
    
^
security/secure_config_manager.py:313:1: W293 blank line contains whitespace
    
^
security/secure_config_manager.py:318:1: W293 blank line contains whitespace
    
^
security/secure_config_manager.py:322:36: W292 no newline at end of file
            print(f"  - {warning}")                                   ^
security/secure_wrapper.py:45:80: E501 line too long (88 > 79 characters)
                if not ACCESS_CONTROL.check_permission(session_id, required_permission):
                                                                               ^
security/secure_wrapper.py:57:80: E501 line too long (104 > 79 characters)
                    raise PermissionError(f"Недостаточно прав для выполнения операции {operation_name}")
                                                                               ^
security/secure_wrapper.py:64:80: E501 line too long (82 > 79 characters)
                function=lambda params: func(*params["args"], **params["kwargs"]),
                                                                               ^
security/secure_wrapper.py:132:80: E501 line too long (104 > 79 characters)
                    "required_permission": (required_permission.value if required_permission else None),
                                                                               ^
security/secure_wrapper.py:137:80: E501 line too long (83 > 79 characters)
            success, result, message = self.security_layer.execute_with_protection(
                                                                               ^
security/secure_wrapper.py:138:80: E501 line too long (80 > 79 characters)
                operation=operation, user=user, params=params, function=function
                                                                               ^
security/secure_wrapper.py:144:80: E501 line too long (83 > 79 characters)
                event_type="operation_complete" if success else "operation_failed",
                                                                               ^
security/secure_wrapper.py:182:80: E501 line too long (108 > 79 characters)
    def execute_query(self, user: str, query: str, params: Optional[tuple] = None) -> Tuple[bool, Any, str]:
                                                                               ^
security/secure_wrapper.py:188:80: E501 line too long (84 > 79 characters)
            function=lambda p: self.database.execute_query(p["query"], p["params"]),
                                                                               ^
security/secure_wrapper.py:192:80: E501 line too long (109 > 79 characters)
    def execute_update(self, user: str, query: str, params: Optional[tuple] = None) -> Tuple[bool, Any, str]:
                                                                               ^
security/secure_wrapper.py:198:80: E501 line too long (85 > 79 characters)
            function=lambda p: self.database.execute_update(p["query"], p["params"]),
                                                                               ^
security/secure_wrapper.py:230:80: E501 line too long (83 > 79 characters)
    def set_config(self, user: str, key: str, value: Any) -> Tuple[bool, Any, str]:
                                                                               ^
security/secure_wrapper.py:248:80: E501 line too long (98 > 79 characters)
    def analyze_incident(self, user: str, incident_data: Dict[str, Any]) -> Tuple[bool, Any, str]:
                                                                               ^
security/secure_wrapper.py:254:80: E501 line too long (82 > 79 characters)
            function=lambda p: self.incident.analyze_incident(p["incident_data"]),
                                                                               ^
security/secure_wrapper.py:258:80: E501 line too long (81 > 79 characters)
    def auto_respond(self, user: str, incident_id: str) -> Tuple[bool, Any, str]:
                                                                               ^
security/secure_wrapper.py:277:80: E501 line too long (82 > 79 characters)
        self, user: str, function_id: str, params: Optional[Dict[str, Any]] = None
                                                                               ^
security/secure_wrapper.py:284:80: E501 line too long (101 > 79 characters)
            function=lambda p: self.function_manager.execute_function(p["function_id"], p["params"]),
                                                                               ^
security/secure_wrapper.py:288:80: E501 line too long (115 > 79 characters)
    def register_function(self, user: str, function_id: str, name: str, description: str) -> Tuple[bool, Any, str]:
                                                                               ^
security/security_analytics.py:63:80: E501 line too long (83 > 79 characters)
    def update_value(self, new_value: float, timestamp: Optional[datetime] = None):
                                                                               ^
security/security_analytics.py:69:80: E501 line too long (85 > 79 characters)
        history_entry = {"value": new_value, "timestamp": self.timestamp.isoformat()}
                                                                               ^
security/security_analytics.py:86:80: E501 line too long (95 > 79 characters)
                alerts.append(f"Превышен максимальный порог: {self.value} > {threshold_value}")
                                                                               ^
security/security_analytics.py:88:80: E501 line too long (92 > 79 characters)
                alerts.append(f"Ниже минимального порога: {self.value} < {threshold_value}")
                                                                               ^
security/security_analytics.py:118:80: E501 line too long (90 > 79 characters)
        self.data_retention_days = config.get("data_retention_days", 90) if config else 90
                                                                               ^
security/security_analytics.py:119:80: E501 line too long (99 > 79 characters)
        self.analysis_interval = config.get("analysis_interval", 300) if config else 300  # 5 минут
                                                                               ^
security/security_analytics.py:120:80: E501 line too long (88 > 79 characters)
        self.enable_real_time = config.get("enable_real_time", True) if config else True
                                                                               ^
security/security_analytics.py:121:80: E501 line too long (84 > 79 characters)
        self.alert_threshold = config.get("alert_threshold", 0.8) if config else 0.8
                                                                               ^
security/security_analytics.py:140:80: E501 line too long (92 > 79 characters)
            self.log_activity(f"Инициализация менеджера аналитики безопасности {self.name}")
                                                                               ^
security/security_analytics.py:158:80: E501 line too long (101 > 79 characters)
            self.log_activity(f"Менеджер аналитики безопасности {self.name} успешно инициализирован")
                                                                               ^
security/security_analytics.py:164:80: E501 line too long (90 > 79 characters)
                f"Ошибка инициализации менеджера аналитики безопасности {self.name}: {e}",
                                                                               ^
security/security_analytics.py:226:80: E501 line too long (86 > 79 characters)
        self.log_activity(f"Создано {len(basic_metrics)} базовых метрик безопасности")
                                                                               ^
security/security_analytics.py:276:80: E501 line too long (90 > 79 characters)
                self.log_activity(f"Метрика {metric.metric_id} уже существует", "warning")
                                                                               ^
security/security_analytics.py:290:80: E501 line too long (104 > 79 characters)
    def update_metric(self, metric_id: str, value: float, timestamp: Optional[datetime] = None) -> bool:
                                                                               ^
security/security_analytics.py:313:80: E501 line too long (87 > 79 characters)
                    self.log_activity(f"Алерт метрики {metric_id}: {alert}", "warning")
                                                                               ^
security/security_analytics.py:346:80: E501 line too long (112 > 79 characters)
        return [metric.to_dict() for metric in self.metrics.values() if metric.tags.get("category") == category]
                                                                               ^
security/security_analytics.py:348:80: E501 line too long (90 > 79 characters)
    def get_metric_history(self, metric_id: str, hours: int = 24) -> List[Dict[str, Any]]:
                                                                               ^
security/security_analytics.py:366:80: E501 line too long (118 > 79 characters)
            history = [entry for entry in metric.history if datetime.fromisoformat(entry["timestamp"]) >= cutoff_time]
                                                                               ^
security/security_analytics.py:371:80: E501 line too long (80 > 79 characters)
            self.log_activity(f"Ошибка получения истории метрики: {e}", "error")
                                                                               ^
security/security_analytics.py:398:80: E501 line too long (95 > 79 characters)
                        threat_scores.append(min(1.0, metric["value"] / 100.0))  # Нормализация
                                                                               ^
security/security_analytics.py:412:80: E501 line too long (85 > 79 characters)
                analysis_result["recommendations"].append("Усилить мониторинг угроз")
                                                                               ^
security/security_analytics.py:413:80: E501 line too long (104 > 79 characters)
                analysis_result["recommendations"].append("Провести дополнительный анализ безопасности")
                                                                               ^
security/security_analytics.py:416:80: E501 line too long (98 > 79 characters)
            self.log_activity(f"Анализ угроз завершен: уровень {analysis_result['threat_level']}")
                                                                               ^
security/security_analytics.py:460:80: E501 line too long (91 > 79 characters)
                risk_assessment["overall_risk_score"] = sum(risk_scores) / len(risk_scores)
                                                                               ^
security/security_analytics.py:464:80: E501 line too long (91 > 79 characters)
                risk_assessment["mitigation_actions"].append("Провести аудит безопасности")
                                                                               ^
security/security_analytics.py:465:80: E501 line too long (90 > 79 characters)
                risk_assessment["mitigation_actions"].append("Усилить меры защиты данных")
                                                                               ^
security/security_analytics.py:468:80: E501 line too long (113 > 79 characters)
            self.log_activity(f"Оценка рисков завершена: общий риск {risk_assessment['overall_risk_score']:.2f}")
                                                                               ^
security/security_analytics.py:509:80: E501 line too long (116 > 79 characters)
                        performance_analysis["optimization_recommendations"].append("Улучшить стабильность системы")
                                                                               ^
security/security_analytics.py:512:80: E501 line too long (118 > 79 characters)
            self.log_activity(f"Анализ производительности завершен: здоровье {performance_analysis['system_health']}")
                                                                               ^
security/security_analytics.py:517:80: E501 line too long (81 > 79 characters)
            self.log_activity(f"Ошибка анализа производительности: {e}", "error")
                                                                               ^
security/security_analytics.py:531:80: E501 line too long (82 > 79 characters)
                if len(metric.history) < 10:  # Нужно минимум 10 точек для анализа
                                                                               ^
security/security_analytics.py:536:80: E501 line too long (100 > 79 characters)
                values = [entry["value"] for entry in metric.history[-20:]]  # Последние 20 значений
                                                                               ^
security/security_analytics.py:540:80: E501 line too long (87 > 79 characters)
                    variance = sum((x - mean_value) ** 2 for x in values) / len(values)
                                                                               ^
security/security_analytics.py:544:80: E501 line too long (93 > 79 characters)
                    z_score = abs(current_value - mean_value) / std_dev if std_dev > 0 else 0
                                                                               ^
security/security_analytics.py:552:80: E501 line too long (109 > 79 characters)
                            "expected_range": f"{mean_value - 2*std_dev:.2f} - {mean_value + 2*std_dev:.2f}",
                                                                               ^
security/security_analytics.py:586:80: E501 line too long (82 > 79 characters)
                recent_values = [entry["value"] for entry in metric.history[-20:]]
                                                                               ^
security/security_analytics.py:596:80: E501 line too long (105 > 79 characters)
                    change_percent = ((second_avg - first_avg) / first_avg * 100) if first_avg > 0 else 0
                                                                               ^
security/security_analytics.py:599:80: E501 line too long (82 > 79 characters)
                        trend = "увеличение" if change_percent > 0 else "снижение"
                                                                               ^
security/security_analytics.py:606:80: E501 line too long (109 > 79 characters)
                            "description": f"{metric.name} показывает {trend} на {abs(change_percent):.1f}%",
                                                                               ^
security/security_analytics.py:669:80: E501 line too long (86 > 79 characters)
                    recent_values = [entry["value"] for entry in metric.history[-10:]]
                                                                               ^
security/security_analytics.py:725:80: E501 line too long (85 > 79 characters)
            self.log_activity(f"Запуск менеджера аналитики безопасности {self.name}")
                                                                               ^
security/security_analytics.py:728:80: E501 line too long (93 > 79 characters)
            self.log_activity(f"Менеджер аналитики безопасности {self.name} успешно запущен")
                                                                               ^
security/security_analytics.py:733:80: E501 line too long (84 > 79 characters)
                f"Ошибка запуска менеджера аналитики безопасности {self.name}: {e}",
                                                                               ^
security/security_analytics.py:741:80: E501 line too long (88 > 79 characters)
            self.log_activity(f"Остановка менеджера аналитики безопасности {self.name}")
                                                                               ^
security/security_analytics.py:747:80: E501 line too long (96 > 79 characters)
            self.log_activity(f"Менеджер аналитики безопасности {self.name} успешно остановлен")
                                                                               ^
security/security_analytics.py:751:80: E501 line too long (86 > 79 characters)
                f"Ошибка остановки менеджера аналитики безопасности {self.name}: {e}",
                                                                               ^
security/security_audit.py:68:80: E501 line too long (93 > 79 characters)
    def add_evidence(self, evidence_type: str, description: str, data: Optional[Any] = None):
                                                                               ^
security/security_audit.py:78:80: E501 line too long (80 > 79 characters)
    def add_recommendation(self, recommendation: str, priority: str = "medium"):
                                                                               ^
security/security_audit.py:87:80: E501 line too long (85 > 79 characters)
    def remediate(self, remediated_by: str, remediation_notes: Optional[str] = None):
                                                                               ^
security/security_audit.py:108:80: E501 line too long (94 > 79 characters)
            "remediated_at": (self.remediated_at.isoformat() if self.remediated_at else None),
                                                                               ^
security/security_audit.py:119:80: E501 line too long (98 > 79 characters)
    def __init__(self, audit_id: str, title: str, audit_type: AuditType, auditor: str = "system"):
                                                                               ^
security/security_audit.py:150:80: E501 line too long (80 > 79 characters)
    def add_recommendation(self, recommendation: str, priority: str = "medium"):
                                                                               ^
security/security_audit.py:162:80: E501 line too long (108 > 79 characters)
        critical_findings = len([f for f in self.findings.values() if f.severity == SecurityLevel.CRITICAL])
                                                                               ^
security/security_audit.py:163:80: E501 line too long (100 > 79 characters)
        high_findings = len([f for f in self.findings.values() if f.severity == SecurityLevel.HIGH])
                                                                               ^
security/security_audit.py:164:80: E501 line too long (104 > 79 characters)
        medium_findings = len([f for f in self.findings.values() if f.severity == SecurityLevel.MEDIUM])
                                                                               ^
security/security_audit.py:165:80: E501 line too long (98 > 79 characters)
        low_findings = len([f for f in self.findings.values() if f.severity == SecurityLevel.LOW])
                                                                               ^
security/security_audit.py:167:80: E501 line too long (98 > 79 characters)
        remediated_findings = len([f for f in self.findings.values() if f.status == "remediated"])
                                                                               ^
security/security_audit.py:206:80: E501 line too long (83 > 79 characters)
            "started_at": self.started_at.isoformat() if self.started_at else None,
                                                                               ^
security/security_audit.py:207:80: E501 line too long (91 > 79 characters)
            "completed_at": (self.completed_at.isoformat() if self.completed_at else None),
                                                                               ^
security/security_audit.py:210:80: E501 line too long (105 > 79 characters)
            "findings": {finding_id: finding.to_dict() for finding_id, finding in self.findings.items()},
                                                                               ^
security/security_audit.py:229:80: E501 line too long (104 > 79 characters)
        self.audit_retention_days = config.get("audit_retention_days", 730) if config else 730  # 2 года
                                                                               ^
security/security_audit.py:230:80: E501 line too long (97 > 79 characters)
        self.auto_audit_interval = config.get("auto_audit_interval", 30) if config else 30  # дни
                                                                               ^
security/security_audit.py:231:80: E501 line too long (102 > 79 characters)
        self.enable_continuous_audit = config.get("enable_continuous_audit", True) if config else True
                                                                               ^
security/security_audit.py:232:80: E501 line too long (82 > 79 characters)
        self.risk_threshold = config.get("risk_threshold", 7.0) if config else 7.0
                                                                               ^
security/security_audit.py:250:80: E501 line too long (89 > 79 characters)
            self.log_activity(f"Инициализация менеджера аудита безопасности {self.name}")
                                                                               ^
security/security_audit.py:265:80: E501 line too long (98 > 79 characters)
            self.log_activity(f"Менеджер аудита безопасности {self.name} успешно инициализирован")
                                                                               ^
security/security_audit.py:271:80: E501 line too long (87 > 79 characters)
                f"Ошибка инициализации менеджера аудита безопасности {self.name}: {e}",
                                                                               ^
security/security_audit.py:446:80: E501 line too long (80 > 79 characters)
            if audit.summary.get("overall_risk_score", 0) > self.risk_threshold:
                                                                               ^
security/security_audit.py:448:80: E501 line too long (95 > 79 characters)
                    f"Высокий риск в аудите {audit_id}: {audit.summary['overall_risk_score']}",
                                                                               ^
security/security_audit.py:459:80: E501 line too long (81 > 79 characters)
    def add_finding_to_audit(self, audit_id: str, finding: AuditFinding) -> bool:
                                                                               ^
security/security_audit.py:477:80: E501 line too long (88 > 79 characters)
            self.log_activity(f"Находка добавлена к аудиту {audit_id}: {finding.title}")
                                                                               ^
security/security_audit.py:542:80: E501 line too long (118 > 79 characters)
    def remediate_finding(self, finding_id: str, remediated_by: str, remediation_notes: Optional[str] = None) -> bool:
                                                                               ^
security/security_audit.py:587:80: E501 line too long (80 > 79 characters)
    def get_audits_by_type(self, audit_type: AuditType) -> List[Dict[str, Any]]:
                                                                               ^
security/security_audit.py:597:80: E501 line too long (100 > 79 characters)
        return [audit.to_dict() for audit in self.audits.values() if audit.audit_type == audit_type]
                                                                               ^
security/security_audit.py:599:80: E501 line too long (80 > 79 characters)
    def get_audits_by_status(self, status: AuditStatus) -> List[Dict[str, Any]]:
                                                                               ^
security/security_audit.py:609:80: E501 line too long (92 > 79 characters)
        return [audit.to_dict() for audit in self.audits.values() if audit.status == status]
                                                                               ^
security/security_audit.py:611:80: E501 line too long (88 > 79 characters)
    def get_findings_by_severity(self, severity: SecurityLevel) -> List[Dict[str, Any]]:
                                                                               ^
security/security_audit.py:666:80: E501 line too long (95 > 79 characters)
                    "started_at": (audit.started_at.isoformat() if audit.started_at else None),
                                                                               ^
security/security_audit.py:667:80: E501 line too long (101 > 79 characters)
                    "completed_at": (audit.completed_at.isoformat() if audit.completed_at else None),
                                                                               ^
security/security_audit.py:671:80: E501 line too long (88 > 79 characters)
                "findings_by_severity": self._get_findings_by_severity_for_audit(audit),
                                                                               ^
security/security_audit.py:672:80: E501 line too long (84 > 79 characters)
                "findings_by_status": self._get_findings_by_status_for_audit(audit),
                                                                               ^
security/security_audit.py:681:80: E501 line too long (81 > 79 characters)
            self.log_activity(f"Ошибка генерации отчета по аудиту: {e}", "error")
                                                                               ^
security/security_audit.py:684:80: E501 line too long (90 > 79 characters)
    def _get_findings_by_severity_for_audit(self, audit: SecurityAudit) -> Dict[str, int]:
                                                                               ^
security/security_audit.py:692:80: E501 line too long (88 > 79 characters)
    def _get_findings_by_status_for_audit(self, audit: SecurityAudit) -> Dict[str, int]:
                                                                               ^
security/security_audit.py:749:80: E501 line too long (82 > 79 characters)
            self.log_activity(f"Запуск менеджера аудита безопасности {self.name}")
                                                                               ^
security/security_audit.py:752:80: E501 line too long (90 > 79 characters)
            self.log_activity(f"Менеджер аудита безопасности {self.name} успешно запущен")
                                                                               ^
security/security_audit.py:757:80: E501 line too long (81 > 79 characters)
                f"Ошибка запуска менеджера аудита безопасности {self.name}: {e}",
                                                                               ^
security/security_audit.py:765:80: E501 line too long (85 > 79 characters)
            self.log_activity(f"Остановка менеджера аудита безопасности {self.name}")
                                                                               ^
security/security_audit.py:771:80: E501 line too long (93 > 79 characters)
            self.log_activity(f"Менеджер аудита безопасности {self.name} успешно остановлен")
                                                                               ^
security/security_audit.py:775:80: E501 line too long (83 > 79 characters)
                f"Ошибка остановки менеджера аудита безопасности {self.name}: {e}",
                                                                               ^
security/security_core.py:52:80: E501 line too long (80 > 79 characters)
            self.components["threat_intelligence"] = ThreatIntelligenceManager()
                                                                               ^
security/security_core.py:56:80: E501 line too long (80 > 79 characters)
            self.components["security_monitoring"] = SecurityMonitoringManager()
                                                                               ^
security/security_core.py:115:80: E501 line too long (83 > 79 characters)
            "start_time": self.start_time.isoformat() if self.start_time else None,
                                                                               ^
security/security_core.py:149:80: E501 line too long (88 > 79 characters)
                    results["recommendations"].append(f"Перезапустить компонент {name}")
                                                                               ^
security/security_core.py:152:80: E501 line too long (83 > 79 characters)
            if any(status == "error" for status in results["components"].values()):
                                                                               ^
security/security_core.py:154:80: E501 line too long (104 > 79 characters)
            elif all(status in ["running", "initialized"] for status in results["components"].values()):
                                                                               ^
security/security_integration.py:24:80: E501 line too long (99 > 79 characters)
    def __init__(self, name: str = "SecurityIntegration", config: Optional[Dict[str, Any]] = None):
                                                                               ^
security/security_integration.py:38:80: E501 line too long (84 > 79 characters)
        self.auto_integrate = config.get("auto_integrate", True) if config else True
                                                                               ^
security/security_integration.py:39:80: E501 line too long (86 > 79 characters)
        self.enable_wrappers = config.get("enable_wrappers", True) if config else True
                                                                               ^
security/security_integration.py:45:80: E501 line too long (83 > 79 characters)
            self.log_activity(f"Инициализация интеграции безопасности {self.name}")
                                                                               ^
security/security_integration.py:64:80: E501 line too long (94 > 79 characters)
            self.log_activity(f"Интеграция безопасности {self.name} успешно инициализирована")
                                                                               ^
security/security_integration.py:68:80: E501 line too long (92 > 79 characters)
            self.log_activity(f"Ошибка инициализации интеграции безопасности: {e}", "error")
                                                                               ^
security/security_integration.py:90:80: E501 line too long (93 > 79 characters)
            self.log_activity(f"Ошибка инициализации компонентов безопасности: {e}", "error")
                                                                               ^
security/security_integration.py:109:80: E501 line too long (96 > 79 characters)
                    self.log_activity(f"Ошибка интеграции модуля {module_name}: {e}", "warning")
                                                                               ^
security/security_integration.py:112:80: E501 line too long (102 > 79 characters)
            self.log_activity(f"Интегрировано {self.secured_modules} из {self.total_modules} модулей")
                                                                               ^
security/security_integration.py:128:80: E501 line too long (83 > 79 characters)
                wrapper = create_secure_wrapper(module, module_name.split(".")[-1])
                                                                               ^
security/security_integration.py:148:80: E501 line too long (99 > 79 characters)
                    "integration_method": ("secure_wrapper" if self.enable_wrappers else "direct"),
                                                                               ^
security/security_integration.py:155:80: E501 line too long (86 > 79 characters)
            self.log_activity(f"Ошибка интеграции модуля {module_name}: {e}", "error")
                                                                               ^
security/security_integration.py:174:80: E501 line too long (85 > 79 characters)
            self.log_activity(f"Ошибка импорта модуля {module_name}: {e}", "warning")
                                                                               ^
security/security_integration.py:177:80: E501 line too long (97 > 79 characters)
            self.log_activity(f"Ошибка создания экземпляра модуля {module_name}: {e}", "warning")
                                                                               ^
security/security_integration.py:185:80: E501 line too long (102 > 79 characters)
                    wrapper = create_secure_wrapper(module_info["module"], module_name.split(".")[-1])
                                                                               ^
security/security_integration.py:189:80: E501 line too long (86 > 79 characters)
                    self.log_activity(f"Создана безопасная обертка для {module_name}")
                                                                               ^
security/security_integration.py:192:80: E501 line too long (82 > 79 characters)
            self.log_activity(f"Ошибка создания безопасных оберток: {e}", "error")
                                                                               ^
security/security_integration.py:198:80: E501 line too long (83 > 79 characters)
                "security_layer": SECURITY_LAYER.status == ComponentStatus.RUNNING,
                                                                               ^
security/security_integration.py:200:80: E501 line too long (83 > 79 characters)
                "access_control": ACCESS_CONTROL.status == ComponentStatus.RUNNING,
                                                                               ^
security/security_integration.py:208:80: E501 line too long (87 > 79 characters)
                failed_components = [k for k, v in validation_results.items() if not v]
                                                                               ^
security/security_integration.py:209:80: E501 line too long (94 > 79 characters)
                raise Exception(f"Валидация не пройдена для компонентов: {failed_components}")
                                                                               ^
security/security_integration.py:241:80: E501 line too long (101 > 79 characters)
                self.log_activity(f"Модуль {module_name} не найден в безопасных обертках", "warning")
                                                                               ^
security/security_integration.py:245:80: E501 line too long (97 > 79 characters)
            self.log_activity(f"Ошибка получения безопасного модуля {module_name}: {e}", "error")
                                                                               ^
security/security_integration.py:249:80: E501 line too long (98 > 79 characters)
        self, module_name: str, operation: str, user: str, params: Optional[Dict[str, Any]] = None
                                                                               ^
security/security_integration.py:268:80: E501 line too long (104 > 79 characters)
            return secure_module.execute_secure_operation(operation=operation, user=user, params=params)
                                                                               ^
security/security_integration.py:271:80: E501 line too long (85 > 79 characters)
            self.log_activity(f"Ошибка выполнения безопасной операции: {e}", "error")
                                                                               ^
security/security_integration.py:281:80: E501 line too long (98 > 79 characters)
                (self.secured_modules / self.total_modules * 100) if self.total_modules > 0 else 0
                                                                               ^
security/security_integration.py:304:80: E501 line too long (90 > 79 characters)
            "report_id": f"security_integration_report_{int(datetime.now().timestamp())}",
                                                                               ^
security/security_integration.py:316:80: E501 line too long (103 > 79 characters)
                "security_level": ("HIGH" if self.secured_modules == self.total_modules else "MEDIUM"),
                                                                               ^
security/security_integration.py:317:80: E501 line too long (83 > 79 characters)
                "integration_complete": self.secured_modules == self.total_modules,
                                                                               ^
security/security_integration.py:331:80: E501 line too long (89 > 79 characters)
            self.log_activity(f"Ошибка остановки компонентов безопасности: {e}", "error")
                                                                               ^
security/security_layer.py:81:80: E501 line too long (93 > 79 characters)
    def __init__(self, name: str = "SecurityLayer", config: Optional[Dict[str, Any]] = None):
                                                                               ^
security/security_layer.py:85:80: E501 line too long (110 > 79 characters)
        self.enable_real_time_protection = config.get("enable_real_time_protection", True) if config else True
                                                                               ^
security/security_layer.py:86:80: E501 line too long (96 > 79 characters)
        self.auto_block_high_risk = config.get("auto_block_high_risk", True) if config else True
                                                                               ^
security/security_layer.py:87:80: E501 line too long (114 > 79 characters)
        self.require_approval_for_critical = config.get("require_approval_for_critical", True) if config else True
                                                                               ^
security/security_layer.py:88:80: E501 line too long (104 > 79 characters)
        self.max_operations_per_minute = config.get("max_operations_per_minute", 100) if config else 100
                                                                               ^
security/security_layer.py:115:80: E501 line too long (80 > 79 characters)
            self.log_activity(f"Инициализация системы безопасности {self.name}")
                                                                               ^
security/security_layer.py:133:80: E501 line too long (91 > 79 characters)
            self.log_activity(f"Система безопасности {self.name} успешно инициализирована")
                                                                               ^
security/security_layer.py:137:80: E501 line too long (89 > 79 characters)
            self.log_activity(f"Ошибка инициализации системы безопасности: {e}", "error")
                                                                               ^
security/security_layer.py:145:80: E501 line too long (85 > 79 characters)
            "delete_user": {"risk": SecurityRisk.CRITICAL, "require_approval": True},
                                                                               ^
security/security_layer.py:146:80: E501 line too long (84 > 79 characters)
            "drop_table": {"risk": SecurityRisk.CRITICAL, "require_approval": True},
                                                                               ^
security/security_layer.py:147:80: E501 line too long (80 > 79 characters)
            "clear_logs": {"risk": SecurityRisk.HIGH, "require_approval": True},
                                                                               ^
security/security_layer.py:148:80: E501 line too long (83 > 79 characters)
            "modify_config": {"risk": SecurityRisk.HIGH, "require_approval": True},
                                                                               ^
security/security_layer.py:157:80: E501 line too long (81 > 79 characters)
            "shutil_rmtree": {"risk": SecurityRisk.CRITICAL, "auto_block": True},
                                                                               ^
security/security_layer.py:206:80: E501 line too long (80 > 79 characters)
        self, operation: str, user: str, params: Optional[Dict[str, Any]] = None
                                                                               ^
security/security_layer.py:217:80: E501 line too long (81 > 79 characters)
        """
        Валидация операции на безопасность

        Args:
            operation: Название операции
            user: Пользователь, выполняющий операцию
            params: Параметры операции

        Returns:
            Tuple[bool, str, SecurityRisk]: (разрешено, сообщение, уровень риска)
        """
           
                                          

             
         ^
security/security_layer.py:222:80: E501 line too long (86 > 79 characters)
                return False, f"Операция {operation} запрещена", SecurityRisk.CRITICAL
                                                                               ^
security/security_layer.py:225:80: E501 line too long (80 > 79 characters)
                return True, f"Операция {operation} разрешена", SecurityRisk.LOW
                                                                               ^
security/security_layer.py:228:80: E501 line too long (84 > 79 characters)
            rule = self.security_rules.get(operation, {"risk": SecurityRisk.MEDIUM})
                                                                               ^
security/security_layer.py:233:80: E501 line too long (87 > 79 characters)
                return False, "Превышен лимит операций пользователя", SecurityRisk.HIGH
                                                                               ^
security/security_layer.py:236:80: E501 line too long (90 > 79 characters)
            if risk_level == SecurityRisk.CRITICAL and self.require_approval_for_critical:
                                                                               ^
security/security_layer.py:255:80: E501 line too long (85 > 79 characters)
            self.log_activity(f"Ошибка валидации операции {operation}: {e}", "error")
                                                                               ^
security/security_layer.py:267:80: E501 line too long (88 > 79 characters)
            if op.get("user") == user and op.get("timestamp", datetime.min) > minute_ago
                                                                               ^
security/security_layer.py:294:80: E501 line too long (95 > 79 characters)
                allowed, message, risk_level = self.validate_operation(operation, user, params)
                                                                               ^
security/security_layer.py:309:80: E501 line too long (99 > 79 characters)
                security_event = SecurityEvent(event_id, operation, user, risk_level, params or {})
                                                                               ^
security/security_layer.py:360:80: E501 line too long (97 > 79 characters)
            self.log_activity(f"Ошибка выполнения защищенной операции {operation}: {e}", "error")
                                                                               ^
security/security_layer.py:404:80: E501 line too long (86 > 79 characters)
            f"Событие безопасности: {operation} от {user} (риск: {risk_level.value})",
                                                                               ^
security/security_layer.py:405:80: E501 line too long (95 > 79 characters)
            ("warning" if risk_level in [SecurityRisk.MEDIUM, SecurityRisk.HIGH] else "error"),
                                                                               ^
security/security_layer.py:418:80: E501 line too long (101 > 79 characters)
            "uptime": ((datetime.now() - self.start_time).total_seconds() if self.start_time else 0),
                                                                               ^
security/security_layer.py:436:80: E501 line too long (90 > 79 characters)
        self.log_activity(f"Операция {event.operation} одобрена пользователем {approver}")
                                                                               ^
security/security_layer.py:439:80: E501 line too long (80 > 79 characters)
    def block_operation(self, event_id: str, blocker: str, reason: str) -> bool:
                                                                               ^
security/security_layer.py:448:80: E501 line too long (104 > 79 characters)
        self.log_activity(f"Операция {event.operation} заблокирована пользователем {blocker}: {reason}")
                                                                               ^
security/security_layer.py:455:80: E501 line too long (89 > 79 characters)
            self.log_activity(f"Добавлено правило безопасности для операции {operation}")
                                                                               ^
security/security_layer.py:458:80: E501 line too long (86 > 79 characters)
            self.log_activity(f"Ошибка добавления правила безопасности: {e}", "error")
                                                                               ^
security/security_layer.py:466:80: E501 line too long (91 > 79 characters)
                self.log_activity(f"Удалено правило безопасности для операции {operation}")
                                                                               ^
security/security_layer.py:470:80: E501 line too long (84 > 79 characters)
            self.log_activity(f"Ошибка удаления правила безопасности: {e}", "error")
                                                                               ^
security/security_monitoring.py:11:1: F401 'os' imported but unused
import os
^
security/security_monitoring.py:14:1: F401 'json' imported but unused
import json
^
security/security_monitoring.py:17:1: F401 'typing.List' imported but unused
from typing import Dict, List, Any, Optional
^
security/security_monitoring.py:18:1: F401 'pathlib.Path' imported but unused
from pathlib import Path
^
security/security_monitoring.py:23:1: E402 module level import not at top of file
from core.base import ComponentStatus, SecurityBase, SecurityLevel
^
security/security_monitoring.py:25:1: E302 expected 2 blank lines, found 1
class SecurityMonitoring(SecurityBase):
^
security/security_monitoring.py:28:1: W293 blank line contains whitespace
    """
    Мониторинг безопасности
    
    Критический компонент системы безопасности ALADDIN
    """
^
security/security_monitoring.py:31:1: W293 blank line contains whitespace
    
^
security/security_monitoring.py:39:1: W293 blank line contains whitespace
        
^
security/security_monitoring.py:42:1: W293 blank line contains whitespace
        
^
security/security_monitoring.py:44:1: W293 blank line contains whitespace
    
^
security/security_monitoring.py:50:1: W293 blank line contains whitespace
            
^
security/security_monitoring.py:53:1: W293 blank line contains whitespace
            
^
security/security_monitoring.py:55:80: E501 line too long (80 > 79 characters)
            self.log_activity(f"Ошибка инициализации {self.name}: {e}", "error")
                                                                               ^
security/security_monitoring.py:57:1: W293 blank line contains whitespace
    
^
security/security_monitoring.py:62:1: W293 blank line contains whitespace
    
^
security/security_monitoring.py:66:1: W293 blank line contains whitespace
        """
        Выполнение основной функции компонента
        
        Args:
            params: Параметры выполнения
            
        Returns:
            Dict с результатами выполнения
        """
^
security/security_monitoring.py:69:1: W293 blank line contains whitespace
        """
        Выполнение основной функции компонента
        
        Args:
            params: Параметры выполнения
            
        Returns:
            Dict с результатами выполнения
        """
^
security/security_monitoring.py:74:80: E501 line too long (88 > 79 characters)
            self.log_activity(f"Выполнение {self.name} с параметрами: {params}", "info")
                                                                               ^
security/security_monitoring.py:75:1: W293 blank line contains whitespace
            
^
security/security_monitoring.py:78:1: W293 blank line contains whitespace
            
^
security/security_monitoring.py:86:1: W293 blank line contains whitespace
            
^
security/security_monitoring.py:95:1: W293 blank line contains whitespace
    
^
security/security_monitoring.py:102:1: W293 blank line contains whitespace
    
^
security/security_monitoring.py:106:1: W293 blank line contains whitespace
        """
        Получение статуса компонента
        
        Returns:
            Dict с информацией о статусе
        """
^
security/security_monitoring.py:118:1: W293 blank line contains whitespace
    
^
security/security_monitoring.py:128:1: W293 blank line contains whitespace
    
^
security/security_monitoring.py:138:1: W293 blank line contains whitespace
    
^
security/security_monitoring.py:156:1: W293 blank line contains whitespace
    
^
security/security_monitoring.py:160:1: W293 blank line contains whitespace
    
^
security/security_monitoring_a_plus.py:10:1: F401 'typing.Tuple' imported but unused
from typing import Dict, List, Optional, Any, Tuple
^
security/security_monitoring_a_plus.py:40:1: W293 blank line contains whitespace
    """
    Событие безопасности.
    
    Attributes:
        event_id: Уникальный идентификатор события
        timestamp: Время возникновения события
        level: Уровень критичности события
        alert_type: Тип алерта
        description: Описание события
        source: Источник события
        metadata: Дополнительные метаданные
    """
^
security/security_monitoring_a_plus.py:63:1: W293 blank line contains whitespace
    """
    Конфигурация мониторинга безопасности.
    
    Attributes:
        enabled: Включен ли мониторинг
        check_interval: Интервал проверки в секундах
        alert_threshold: Порог для генерации алертов
        retention_days: Количество дней хранения событий
        log_level: Уровень логирования
    """
^
security/security_monitoring_a_plus.py:81:1: W293 blank line contains whitespace
    """
    Интерфейс стратегии мониторинга.
    
    Применяет принцип Interface Segregation - интерфейс содержит
    только необходимые методы для конкретной стратегии.
    """
^
security/security_monitoring_a_plus.py:85:1: W293 blank line contains whitespace
    
^
security/security_monitoring_a_plus.py:90:1: W293 blank line contains whitespace
        """
        Проверка безопасности.
        
        Returns:
            Список обнаруженных событий безопасности
        """
^
security/security_monitoring_a_plus.py:95:1: W293 blank line contains whitespace
    
^
security/security_monitoring_a_plus.py:100:1: W293 blank line contains whitespace
        """
        Получение имени стратегии.
        
        Returns:
            Имя стратегии
        """
^
security/security_monitoring_a_plus.py:110:1: W293 blank line contains whitespace
    """
    Базовая стратегия безопасности.
    
    Применяет принцип DRY - общая функциональность вынесена в базовый класс.
    """
^
security/security_monitoring_a_plus.py:113:1: W293 blank line contains whitespace
    
^
security/security_monitoring_a_plus.py:117:1: W293 blank line contains whitespace
        """
        Инициализация стратегии.
        
        Args:
            config: Конфигурация мониторинга
        """
^
security/security_monitoring_a_plus.py:123:1: W293 blank line contains whitespace
    
^
security/security_monitoring_a_plus.py:127:1: W293 blank line contains whitespace
        """
        Проверка включен ли мониторинг.
        
        Returns:
            True если мониторинг включен
        """
^
security/security_monitoring_a_plus.py:132:1: W293 blank line contains whitespace
    
^
security/security_monitoring_a_plus.py:133:67: W291 trailing whitespace
    def _create_event(self, event_id: str, level: MonitoringLevel, 
                                                                  ^
security/security_monitoring_a_plus.py:134:22: E128 continuation line under-indented for visual indent
                     alert_type: AlertType, description: str, 
                     ^
security/security_monitoring_a_plus.py:134:62: W291 trailing whitespace
                     alert_type: AlertType, description: str, 
                                                             ^
security/security_monitoring_a_plus.py:135:22: E128 continuation line under-indented for visual indent
                     source: str) -> SecurityEvent:
                     ^
security/security_monitoring_a_plus.py:138:1: W293 blank line contains whitespace
        """
        Создание события безопасности.
        
        Args:
            event_id: Идентификатор события
            level: Уровень критичности
            alert_type: Тип алерта
            description: Описание
            source: Источник
            
        Returns:
            Созданное событие
        """
^
security/security_monitoring_a_plus.py:145:1: W293 blank line contains whitespace
        """
        Создание события безопасности.
        
        Args:
            event_id: Идентификатор события
            level: Уровень критичности
            alert_type: Тип алерта
            description: Описание
            source: Источник
            
        Returns:
            Созданное событие
        """
^
security/security_monitoring_a_plus.py:162:1: W293 blank line contains whitespace
    """
    Стратегия обнаружения угроз.
    
    Применяет принцип Single Responsibility - отвечает только
    за обнаружение угроз безопасности.
    """
^
security/security_monitoring_a_plus.py:166:1: W293 blank line contains whitespace
    
^
security/security_monitoring_a_plus.py:170:1: W293 blank line contains whitespace
        """
        Проверка угроз безопасности.
        
        Returns:
            Список обнаруженных угроз
        """
^
security/security_monitoring_a_plus.py:175:1: W293 blank line contains whitespace
        
^
security/security_monitoring_a_plus.py:178:1: W293 blank line contains whitespace
        
^
security/security_monitoring_a_plus.py:180:80: E501 line too long (81 > 79 characters)
        # В реальной реализации здесь будет анализ логов, сетевого трафика и т.д.
                                                                               ^
security/security_monitoring_a_plus.py:181:1: W293 blank line contains whitespace
        
^
security/security_monitoring_a_plus.py:183:1: W293 blank line contains whitespace
    
^
security/security_monitoring_a_plus.py:187:1: W293 blank line contains whitespace
        """
        Получение имени стратегии.
        
        Returns:
            Имя стратегии обнаружения угроз
        """
^
security/security_monitoring_a_plus.py:197:1: W293 blank line contains whitespace
    """
    Стратегия обнаружения аномалий.
    
    Применяет принцип Single Responsibility - отвечает только
    за обнаружение аномального поведения.
    """
^
security/security_monitoring_a_plus.py:201:1: W293 blank line contains whitespace
    
^
security/security_monitoring_a_plus.py:205:1: W293 blank line contains whitespace
        """
        Проверка аномалий.
        
        Returns:
            Список обнаруженных аномалий
        """
^
security/security_monitoring_a_plus.py:210:1: W293 blank line contains whitespace
        
^
security/security_monitoring_a_plus.py:213:1: W293 blank line contains whitespace
        
^
security/security_monitoring_a_plus.py:215:80: E501 line too long (87 > 79 characters)
        # В реальной реализации здесь будет анализ статистики, машинное обучение и т.д.
                                                                               ^
security/security_monitoring_a_plus.py:216:1: W293 blank line contains whitespace
        
^
security/security_monitoring_a_plus.py:218:1: W293 blank line contains whitespace
    
^
security/security_monitoring_a_plus.py:222:1: W293 blank line contains whitespace
        """
        Получение имени стратегии.
        
        Returns:
            Имя стратегии обнаружения аномалий
        """
^
security/security_monitoring_a_plus.py:232:1: W293 blank line contains whitespace
    """
    Менеджер данных мониторинга.
    
    Применяет принцип Single Responsibility - отвечает только
    за управление данными мониторинга.
    """
^
security/security_monitoring_a_plus.py:236:1: W293 blank line contains whitespace
    
^
security/security_monitoring_a_plus.py:240:1: W293 blank line contains whitespace
        """
        Инициализация менеджера данных.
        
        Args:
            config: Конфигурация мониторинга
        """
^
security/security_monitoring_a_plus.py:247:1: W293 blank line contains whitespace
    
^
security/security_monitoring_a_plus.py:251:1: W293 blank line contains whitespace
        """
        Добавление события.
        
        Args:
            event: Событие для добавления
        """
^
security/security_monitoring_a_plus.py:258:1: W293 blank line contains whitespace
    
^
security/security_monitoring_a_plus.py:262:1: W293 blank line contains whitespace
        """
        Получение событий за период.
        
        Args:
            hours: Количество часов для выборки
            
        Returns:
            Список событий за указанный период
        """
^
security/security_monitoring_a_plus.py:265:1: W293 blank line contains whitespace
        """
        Получение событий за период.
        
        Args:
            hours: Количество часов для выборки
            
        Returns:
            Список событий за указанный период
        """
^
security/security_monitoring_a_plus.py:271:1: W293 blank line contains whitespace
    
^
security/security_monitoring_a_plus.py:272:80: E501 line too long (81 > 79 characters)
    def get_events_by_level(self, level: MonitoringLevel) -> List[SecurityEvent]:
                                                                               ^
security/security_monitoring_a_plus.py:275:1: W293 blank line contains whitespace
        """
        Получение событий по уровню критичности.
        
        Args:
            level: Уровень критичности
            
        Returns:
            Список событий указанного уровня
        """
^
security/security_monitoring_a_plus.py:278:1: W293 blank line contains whitespace
        """
        Получение событий по уровню критичности.
        
        Args:
            level: Уровень критичности
            
        Returns:
            Список событий указанного уровня
        """
^
security/security_monitoring_a_plus.py:283:1: W293 blank line contains whitespace
    
^
security/security_monitoring_a_plus.py:287:1: W293 blank line contains whitespace
        """
        Очистка старых событий.
        
        Удаляет события старше retention_days дней.
        """
^
security/security_monitoring_a_plus.py:290:80: E501 line too long (81 > 79 characters)
        cutoff_time = datetime.now() - timedelta(days=self.config.retention_days)
                                                                               ^
security/security_monitoring_a_plus.py:301:1: W293 blank line contains whitespace
    """
    Менеджер алертов.
    
    Применяет принцип Single Responsibility - отвечает только
    за управление алертами.
    """
^
security/security_monitoring_a_plus.py:305:1: W293 blank line contains whitespace
    
^
security/security_monitoring_a_plus.py:309:1: W293 blank line contains whitespace
        """
        Инициализация менеджера алертов.
        
        Args:
            config: Конфигурация мониторинга
        """
^
security/security_monitoring_a_plus.py:316:1: W293 blank line contains whitespace
    
^
security/security_monitoring_a_plus.py:320:1: W293 blank line contains whitespace
        """
        Обработка событий и генерация алертов.
        
        Args:
            events: Список событий для обработки
        """
^
security/security_monitoring_a_plus.py:325:1: W293 blank line contains whitespace
        
^
security/security_monitoring_a_plus.py:328:1: W293 blank line contains whitespace
    
^
security/security_monitoring_a_plus.py:329:80: E501 line too long (90 > 79 characters)
    def _filter_critical_events(self, events: List[SecurityEvent]) -> List[SecurityEvent]:
                                                                               ^
security/security_monitoring_a_plus.py:332:1: W293 blank line contains whitespace
        """
        Фильтрация критических событий.
        
        Args:
            events: Список всех событий
            
        Returns:
            Список критических событий
        """
^
security/security_monitoring_a_plus.py:335:1: W293 blank line contains whitespace
        """
        Фильтрация критических событий.
        
        Args:
            events: Список всех событий
            
        Returns:
            Список критических событий
        """
^
security/security_monitoring_a_plus.py:340:1: W293 blank line contains whitespace
    
^
security/security_monitoring_a_plus.py:341:80: E501 line too long (83 > 79 characters)
    def _should_generate_alert(self, critical_events: List[SecurityEvent]) -> bool:
                                                                               ^
security/security_monitoring_a_plus.py:344:1: W293 blank line contains whitespace
        """
        Проверка необходимости генерации алерта.
        
        Args:
            critical_events: Список критических событий
            
        Returns:
            True если нужно сгенерировать алерт
        """
^
security/security_monitoring_a_plus.py:347:1: W293 blank line contains whitespace
        """
        Проверка необходимости генерации алерта.
        
        Args:
            critical_events: Список критических событий
            
        Returns:
            True если нужно сгенерировать алерт
        """
^
security/security_monitoring_a_plus.py:352:1: W293 blank line contains whitespace
    
^
security/security_monitoring_a_plus.py:356:1: W293 blank line contains whitespace
        """
        Отправка алерта.
        
        Args:
            events: Список событий для алерта
        """
^
security/security_monitoring_a_plus.py:361:80: E501 line too long (92 > 79 characters)
        self.logger.warning(f"Критический алерт #{self.alert_count}: {len(events)} событий")
                                                                               ^
security/security_monitoring_a_plus.py:362:1: W293 blank line contains whitespace
        
^
security/security_monitoring_a_plus.py:370:1: W293 blank line contains whitespace
    """
    Менеджер мониторинга безопасности.
    
    Применяет принципы SOLID:
    - Single Responsibility: управление мониторингом
    - Open/Closed: открыт для расширения стратегиями
    - Liskov Substitution: стратегии взаимозаменяемы
    - Interface Segregation: интерфейсы разделены
    - Dependency Inversion: зависимость от абстракций
    """
^
security/security_monitoring_a_plus.py:378:1: W293 blank line contains whitespace
    
^
security/security_monitoring_a_plus.py:379:64: W291 trailing whitespace
    def __init__(self, name: str = "SecurityMonitoringManager", 
                                                               ^
security/security_monitoring_a_plus.py:383:1: W293 blank line contains whitespace
        """
        Инициализация менеджера мониторинга.
        
        Args:
            name: Имя менеджера
            config: Конфигурация мониторинга
        """
^
security/security_monitoring_a_plus.py:389:1: W293 blank line contains whitespace
        
^
security/security_monitoring_a_plus.py:393:1: W293 blank line contains whitespace
        
^
security/security_monitoring_a_plus.py:395:80: E501 line too long (82 > 79 characters)
        self.strategies: List[IMonitoringStrategy] = self._initialize_strategies()
                                                                               ^
security/security_monitoring_a_plus.py:396:1: W293 blank line contains whitespace
        
^
security/security_monitoring_a_plus.py:397:80: E501 line too long (93 > 79 characters)
        self.logger.info(f"{self.name} инициализирован с {len(self.strategies)} стратегиями")
                                                                               ^
security/security_monitoring_a_plus.py:398:1: W293 blank line contains whitespace
    
^
security/security_monitoring_a_plus.py:402:1: W293 blank line contains whitespace
        """
        Инициализация стратегий мониторинга.
        
        Returns:
            Список инициализированных стратегий
        """
^
security/security_monitoring_a_plus.py:410:1: W293 blank line contains whitespace
    
^
security/security_monitoring_a_plus.py:414:1: W293 blank line contains whitespace
        """
        Запуск мониторинга безопасности.
        
        Запускает асинхронный цикл мониторинга с заданным интервалом.
        """
^
security/security_monitoring_a_plus.py:420:1: W293 blank line contains whitespace
        
^
security/security_monitoring_a_plus.py:422:1: W293 blank line contains whitespace
        
^
security/security_monitoring_a_plus.py:427:1: W293 blank line contains whitespace
                
^
security/security_monitoring_a_plus.py:431:1: W293 blank line contains whitespace
    
^
security/security_monitoring_a_plus.py:435:1: W293 blank line contains whitespace
        """
        Цикл мониторинга.
        
        Выполняет проверку безопасности через все стратегии,
        сохраняет события и обрабатывает алерты.
        """
^
security/security_monitoring_a_plus.py:441:1: W293 blank line contains whitespace
        
^
security/security_monitoring_a_plus.py:444:1: W293 blank line contains whitespace
    
^
security/security_monitoring_a_plus.py:448:1: W293 blank line contains whitespace
        """
        Сбор событий от всех стратегий.
        
        Returns:
            Список всех собранных событий
        """
^
security/security_monitoring_a_plus.py:453:1: W293 blank line contains whitespace
        
^
security/security_monitoring_a_plus.py:458:1: W293 blank line contains whitespace
                
^
security/security_monitoring_a_plus.py:460:80: E501 line too long (92 > 79 characters)
                self.logger.error(f"Ошибка в стратегии {strategy.get_strategy_name()}: {e}")
                                                                               ^
security/security_monitoring_a_plus.py:461:1: W293 blank line contains whitespace
        
^
security/security_monitoring_a_plus.py:463:1: W293 blank line contains whitespace
    
^
security/security_monitoring_a_plus.py:467:1: W293 blank line contains whitespace
        """
        Сохранение событий.
        
        Args:
            events: Список событий для сохранения
        """
^
security/security_monitoring_a_plus.py:473:1: W293 blank line contains whitespace
    
^
security/security_monitoring_a_plus.py:477:1: W293 blank line contains whitespace
        """
        Получение статуса безопасности.
        
        Returns:
            Словарь с информацией о текущем статусе
        """
^
security/security_monitoring_a_plus.py:482:1: W293 blank line contains whitespace
        
^
security/security_monitoring_a_plus.py:485:80: E501 line too long (100 > 79 characters)
            'critical_events': len(self.data_manager.get_events_by_level(MonitoringLevel.CRITICAL)),
                                                                               ^
security/security_monitoring_a_plus.py:486:80: E501 line too long (92 > 79 characters)
            'high_events': len(self.data_manager.get_events_by_level(MonitoringLevel.HIGH)),
                                                                               ^
security/security_monitoring_a_plus.py:491:1: W293 blank line contains whitespace
    
^
security/security_monitoring_a_plus.py:495:1: W293 blank line contains whitespace
        """
        Добавление стратегии мониторинга.
        
        Применяет принцип Open/Closed - система открыта для расширения.
        
        Args:
            strategy: Стратегия для добавления
        """
^
security/security_monitoring_a_plus.py:497:1: W293 blank line contains whitespace
        """
        Добавление стратегии мониторинга.
        
        Применяет принцип Open/Closed - система открыта для расширения.
        
        Args:
            strategy: Стратегия для добавления
        """
^
security/security_monitoring_a_plus.py:502:80: E501 line too long (80 > 79 characters)
        self.logger.info(f"Добавлена стратегия: {strategy.get_strategy_name()}")
                                                                               ^
security/security_monitoring_a_plus.py:503:1: W293 blank line contains whitespace
    
^
security/security_monitoring_a_plus.py:507:1: W293 blank line contains whitespace
        """
        Удаление стратегии мониторинга.
        
        Args:
            strategy_name: Имя стратегии для удаления
        """
^
security/security_monitoring_a_plus.py:511:80: E501 line too long (96 > 79 characters)
        self.strategies = [s for s in self.strategies if s.get_strategy_name() != strategy_name]
                                                                               ^
security/security_monitoring_a_plus.py:513:1: W293 blank line contains whitespace
    
^
security/security_monitoring_a_plus.py:517:1: W293 blank line contains whitespace
        """
        Обновление конфигурации.
        
        Args:
            new_config: Новая конфигурация
        """
^
security/security_monitoring_a_plus.py:525:1: W293 blank line contains whitespace
    
^
security/security_monitoring_a_plus.py:529:1: W293 blank line contains whitespace
        """
        Остановка мониторинга.
        
        Отключает мониторинг и останавливает цикл проверки.
        """
^
security/security_monitoring_backup.py:68:80: E501 line too long (80 > 79 characters)
        action = {"type": action_type, "config": action_config, "enabled": True}
                                                                               ^
security/security_monitoring_backup.py:94:80: E501 line too long (97 > 79 characters)
            "last_triggered": (self.last_triggered.isoformat() if self.last_triggered else None),
                                                                               ^
security/security_monitoring_backup.py:134:80: E501 line too long (80 > 79 characters)
    def resolve(self, resolved_by: str, resolution_notes: Optional[str] = None):
                                                                               ^
security/security_monitoring_backup.py:152:80: E501 line too long (100 > 79 characters)
            "acknowledged_at": (self.acknowledged_at.isoformat() if self.acknowledged_at else None),
                                                                               ^
security/security_monitoring_backup.py:153:80: E501 line too long (86 > 79 characters)
            "resolved_at": self.resolved_at.isoformat() if self.resolved_at else None,
                                                                               ^
security/security_monitoring_backup.py:172:80: E501 line too long (101 > 79 characters)
        self.monitoring_interval = config.get("monitoring_interval", 30) if config else 30  # секунды
                                                                               ^
security/security_monitoring_backup.py:173:80: E501 line too long (92 > 79 characters)
        self.alert_retention_days = config.get("alert_retention_days", 30) if config else 30
                                                                               ^
security/security_monitoring_backup.py:174:80: E501 line too long (88 > 79 characters)
        self.enable_real_time = config.get("enable_real_time", True) if config else True
                                                                               ^
security/security_monitoring_backup.py:175:80: E501 line too long (98 > 79 characters)
        self.max_concurrent_monitors = config.get("max_concurrent_monitors", 10) if config else 10
                                                                               ^
security/security_monitoring_backup.py:198:80: E501 line too long (94 > 79 characters)
            self.log_activity(f"Инициализация менеджера мониторинга безопасности {self.name}")
                                                                               ^
security/security_monitoring_backup.py:216:80: E501 line too long (103 > 79 characters)
            self.log_activity(f"Менеджер мониторинга безопасности {self.name} успешно инициализирован")
                                                                               ^
security/security_monitoring_backup.py:222:80: E501 line too long (92 > 79 characters)
                f"Ошибка инициализации менеджера мониторинга безопасности {self.name}: {e}",
                                                                               ^
security/security_monitoring_backup.py:251:80: E501 line too long (80 > 79 characters)
                "description": "Мониторинг критических инцидентов безопасности",
                                                                               ^
security/security_monitoring_backup.py:294:80: E501 line too long (83 > 79 characters)
        self.log_activity(f"Создано {len(basic_rules)} базовых правил мониторинга")
                                                                               ^
security/security_monitoring_backup.py:301:80: E501 line too long (87 > 79 characters)
                "metrics": ["threat_level", "active_threats", "threat_detection_rate"],
                                                                               ^
security/security_monitoring_backup.py:306:80: E501 line too long (87 > 79 characters)
                "metrics": ["failed_attempts", "successful_logins", "active_sessions"],
                                                                               ^
security/security_monitoring_backup.py:311:80: E501 line too long (85 > 79 characters)
                "metrics": ["open_incidents", "critical_incidents", "response_time"],
                                                                               ^
security/security_monitoring_backup.py:316:80: E501 line too long (81 > 79 characters)
                "metrics": ["uptime", "cpu_usage", "memory_usage", "disk_usage"],
                                                                               ^
security/security_monitoring_backup.py:321:80: E501 line too long (85 > 79 characters)
                "metrics": ["compliance_rate", "non_compliant_items", "audit_score"],
                                                                               ^
security/security_monitoring_backup.py:348:80: E501 line too long (93 > 79 characters)
            self.log_activity(f"Ошибка запуска мониторинга в реальном времени: {e}", "error")
                                                                               ^
security/security_monitoring_backup.py:355:80: E501 line too long (87 > 79 characters)
                metrics = self._collect_component_metrics(component, config["metrics"])
                                                                               ^
security/security_monitoring_backup.py:364:80: E501 line too long (89 > 79 characters)
            self.log_activity(f"Ошибка мониторинга компонента {component}: {e}", "error")
                                                                               ^
security/security_monitoring_backup.py:366:80: E501 line too long (95 > 79 characters)
    def _collect_component_metrics(self, component: str, metrics: List[str]) -> Dict[str, Any]:
                                                                               ^
security/security_monitoring_backup.py:403:80: E501 line too long (90 > 79 characters)
            self.log_activity(f"Ошибка сбора метрик компонента {component}: {e}", "error")
                                                                               ^
security/security_monitoring_backup.py:418:80: E501 line too long (82 > 79 characters)
            self.log_activity(f"Ошибка проверки правил мониторинга: {e}", "error")
                                                                               ^
security/security_monitoring_backup.py:420:80: E501 line too long (94 > 79 characters)
    def _evaluate_rule_condition(self, rule: MonitoringRule, metrics: Dict[str, Any]) -> bool:
                                                                               ^
security/security_monitoring_backup.py:443:80: E501 line too long (92 > 79 characters)
    def _trigger_alert(self, rule: MonitoringRule, component: str, metrics: Dict[str, Any]):
                                                                               ^
security/security_monitoring_backup.py:448:80: E501 line too long (88 > 79 characters)
                time_since_last = (datetime.now() - rule.last_triggered).total_seconds()
                                                                               ^
security/security_monitoring_backup.py:478:80: E501 line too long (82 > 79 characters)
            self.log_activity(f"Сработало оповещение: {alert.title} ({alert_id})")
                                                                               ^
security/security_monitoring_backup.py:483:80: E501 line too long (80 > 79 characters)
    def _execute_rule_actions(self, rule: MonitoringRule, alert: SecurityAlert):
                                                                               ^
security/security_monitoring_backup.py:497:80: E501 line too long (84 > 79 characters)
                    self.log_activity(f"Email оповещение отправлено: {alert.title}")
                                                                               ^
security/security_monitoring_backup.py:501:80: E501 line too long (86 > 79 characters)
                    self.log_activity(f"Webhook оповещение отправлено: {alert.title}")
                                                                               ^
security/security_monitoring_backup.py:503:80: E501 line too long (95 > 79 characters)
                elif action_type == "callback" and alert.alert_id in self.monitoring_callbacks:
                                                                               ^
security/security_monitoring_backup.py:508:80: E501 line too long (82 > 79 characters)
            self.log_activity(f"Ошибка выполнения действий правила: {e}", "error")
                                                                               ^
security/security_monitoring_backup.py:522:80: E501 line too long (86 > 79 characters)
                self.log_activity(f"Правило {rule.rule_id} уже существует", "warning")
                                                                               ^
security/security_monitoring_backup.py:531:80: E501 line too long (85 > 79 characters)
            self.log_activity(f"Ошибка добавления правила мониторинга: {e}", "error")
                                                                               ^
security/security_monitoring_backup.py:545:80: E501 line too long (98 > 79 characters)
            f"ПОПЫТКА УДАЛЕНИЯ ПРАВИЛА МОНИТОРИНГА {rule_id} ЗАБЛОКИРОВАНА СИСТЕМОЙ БЕЗОПАСНОСТИ",
                                                                               ^
security/security_monitoring_backup.py:560:80: E501 line too long (94 > 79 characters)
        self.log_activity(f"КРИТИЧЕСКАЯ ОПЕРАЦИЯ ЗАБЛОКИРОВАНА: {security_event}", "critical")
                                                                               ^
security/security_monitoring_backup.py:585:80: E501 line too long (84 > 79 characters)
            self.log_activity(f"Ошибка включения правила мониторинга: {e}", "error")
                                                                               ^
security/security_monitoring_backup.py:609:80: E501 line too long (85 > 79 characters)
            self.log_activity(f"Ошибка отключения правила мониторинга: {e}", "error")
                                                                               ^
security/security_monitoring_backup.py:626:80: E501 line too long (98 > 79 characters)
    def get_active_alerts(self, severity: Optional[AlertSeverity] = None) -> List[Dict[str, Any]]:
                                                                               ^
security/security_monitoring_backup.py:671:80: E501 line too long (97 > 79 characters)
    def resolve_alert(self, alert_id: str, resolved_by: str, resolution_notes: str = "") -> bool:
                                                                               ^
security/security_monitoring_backup.py:703:80: E501 line too long (106 > 79 characters)
            self.log_activity(f"Оповещение разрешено (БЕЗОПАСНО): {alert_id} пользователем {resolved_by}")
                                                                               ^
security/security_monitoring_backup.py:736:80: E501 line too long (91 > 79 characters)
            "enabled_rules": len([r for r in self.monitoring_rules.values() if r.enabled]),
                                                                               ^
security/security_monitoring_backup.py:762:80: E501 line too long (87 > 79 characters)
            self.log_activity(f"Запуск менеджера мониторинга безопасности {self.name}")
                                                                               ^
security/security_monitoring_backup.py:766:80: E501 line too long (95 > 79 characters)
            self.log_activity(f"Менеджер мониторинга безопасности {self.name} успешно запущен")
                                                                               ^
security/security_monitoring_backup.py:771:80: E501 line too long (86 > 79 characters)
                f"Ошибка запуска менеджера мониторинга безопасности {self.name}: {e}",
                                                                               ^
security/security_monitoring_backup.py:784:80: E501 line too long (98 > 79 characters)
            self.log_activity(f"Попытка остановки менеджера мониторинга безопасности {self.name}")
                                                                               ^
security/security_monitoring_backup.py:788:80: E501 line too long (90 > 79 characters)
                self.log_activity("ОСТАНОВКА ЗАБЛОКИРОВАНА - ПРОДАКШЕН РЕЖИМ", "critical")
                                                                               ^
security/security_monitoring_backup.py:799:80: E501 line too long (102 > 79 characters)
                self.log_activity(f"КРИТИЧЕСКАЯ ОПЕРАЦИЯ ЗАБЛОКИРОВАНА: {security_event}", "critical")
                                                                               ^
security/security_monitoring_backup.py:803:80: E501 line too long (101 > 79 characters)
            self.log_activity(f"Безопасная остановка менеджера мониторинга безопасности {self.name}")
                                                                               ^
security/security_monitoring_backup.py:818:80: E501 line too long (100 > 79 characters)
            self.log_activity(f"Менеджер мониторинга безопасности {self.name} безопасно остановлен")
                                                                               ^
security/security_monitoring_backup.py:828:80: E501 line too long (82 > 79 characters)
            self.log_activity(f"Безопасная остановка завершена: {security_event}")
                                                                               ^
security/security_monitoring_backup.py:834:80: E501 line too long (88 > 79 characters)
                f"Ошибка остановки менеджера мониторинга безопасности {self.name}: {e}",
                                                                               ^
security/security_monitoring_refactored.py:10:1: F401 'typing.Tuple' imported but unused
from typing import Dict, List, Optional, Any, Tuple
^
security/security_monitoring_refactored.py:60:1: W293 blank line contains whitespace
    
^
security/security_monitoring_refactored.py:65:1: W293 blank line contains whitespace
    
^
security/security_monitoring_refactored.py:74:1: W293 blank line contains whitespace
    
^
security/security_monitoring_refactored.py:78:1: W293 blank line contains whitespace
    
^
security/security_monitoring_refactored.py:82:1: W293 blank line contains whitespace
        
^
security/security_monitoring_refactored.py:87:1: W293 blank line contains whitespace
            
^
security/security_monitoring_refactored.py:90:1: W293 blank line contains whitespace
        
^
security/security_monitoring_refactored.py:92:1: W293 blank line contains whitespace
    
^
security/security_monitoring_refactored.py:97:1: W293 blank line contains whitespace
    
^
security/security_monitoring_refactored.py:104:1: W293 blank line contains whitespace
    
^
security/security_monitoring_refactored.py:108:1: W293 blank line contains whitespace
    
^
security/security_monitoring_refactored.py:112:1: W293 blank line contains whitespace
        
^
security/security_monitoring_refactored.py:117:1: W293 blank line contains whitespace
            
^
security/security_monitoring_refactored.py:120:1: W293 blank line contains whitespace
        
^
security/security_monitoring_refactored.py:122:1: W293 blank line contains whitespace
    
^
security/security_monitoring_refactored.py:127:1: W293 blank line contains whitespace
    
^
security/security_monitoring_refactored.py:134:1: W293 blank line contains whitespace
    
^
security/security_monitoring_refactored.py:139:1: W293 blank line contains whitespace
    
^
security/security_monitoring_refactored.py:144:1: W293 blank line contains whitespace
    
^
security/security_monitoring_refactored.py:149:1: W293 blank line contains whitespace
    
^
security/security_monitoring_refactored.py:152:80: E501 line too long (81 > 79 characters)
        cutoff_time = datetime.now() - timedelta(days=self.config.retention_days)
                                                                               ^
security/security_monitoring_refactored.py:158:1: W293 blank line contains whitespace
    
^
security/security_monitoring_refactored.py:163:1: W293 blank line contains whitespace
    
^
security/security_monitoring_refactored.py:166:80: E501 line too long (84 > 79 characters)
        critical_events = [e for e in events if e.level == MonitoringLevel.CRITICAL]
                                                                               ^
security/security_monitoring_refactored.py:167:1: W293 blank line contains whitespace
        
^
security/security_monitoring_refactored.py:170:1: W293 blank line contains whitespace
    
^
security/security_monitoring_refactored.py:174:80: E501 line too long (92 > 79 characters)
        self.logger.warning(f"Критический алерт #{self.alert_count}: {len(events)} событий")
                                                                               ^
security/security_monitoring_refactored.py:182:1: W293 blank line contains whitespace
    
^
security/security_monitoring_refactored.py:183:64: W291 trailing whitespace
    def __init__(self, name: str = "SecurityMonitoringManager", 
                                                               ^
security/security_monitoring_refactored.py:186:1: W293 blank line contains whitespace
        
^
security/security_monitoring_refactored.py:190:1: W293 blank line contains whitespace
        
^
security/security_monitoring_refactored.py:196:1: W293 blank line contains whitespace
        
^
security/security_monitoring_refactored.py:197:80: E501 line too long (93 > 79 characters)
        self.logger.info(f"{self.name} инициализирован с {len(self.strategies)} стратегиями")
                                                                               ^
security/security_monitoring_refactored.py:198:1: W293 blank line contains whitespace
    
^
security/security_monitoring_refactored.py:204:1: W293 blank line contains whitespace
        
^
security/security_monitoring_refactored.py:206:1: W293 blank line contains whitespace
        
^
security/security_monitoring_refactored.py:211:1: W293 blank line contains whitespace
                
^
security/security_monitoring_refactored.py:215:1: W293 blank line contains whitespace
    
^
security/security_monitoring_refactored.py:219:1: W293 blank line contains whitespace
        
^
security/security_monitoring_refactored.py:225:1: W293 blank line contains whitespace
                
^
security/security_monitoring_refactored.py:227:80: E501 line too long (92 > 79 characters)
                self.logger.error(f"Ошибка в стратегии {strategy.get_strategy_name()}: {e}")
                                                                               ^
security/security_monitoring_refactored.py:228:1: W293 blank line contains whitespace
        
^
security/security_monitoring_refactored.py:232:1: W293 blank line contains whitespace
        
^
security/security_monitoring_refactored.py:236:1: W293 blank line contains whitespace
    
^
security/security_monitoring_refactored.py:240:1: W293 blank line contains whitespace
        
^
security/security_monitoring_refactored.py:243:80: E501 line too long (102 > 79 characters)
            'critical_events': len([e for e in recent_events if e.level == MonitoringLevel.CRITICAL]),
                                                                               ^
security/security_monitoring_refactored.py:244:80: E501 line too long (94 > 79 characters)
            'high_events': len([e for e in recent_events if e.level == MonitoringLevel.HIGH]),
                                                                               ^
security/security_monitoring_refactored.py:249:1: W293 blank line contains whitespace
    
^
security/security_monitoring_refactored.py:253:80: E501 line too long (80 > 79 characters)
        self.logger.info(f"Добавлена стратегия: {strategy.get_strategy_name()}")
                                                                               ^
security/security_monitoring_refactored.py:254:1: W293 blank line contains whitespace
    
^
security/security_monitoring_refactored.py:263:1: W293 blank line contains whitespace
    
^
security/security_monitoring_refactored.py:270:1: W293 blank line contains whitespace
    
^
security/security_monitoring_ultimate_a_plus.py:60:1: W293 blank line contains whitespace
    
^
security/security_monitoring_ultimate_a_plus.py:65:1: W293 blank line contains whitespace
    
^
security/security_monitoring_ultimate_a_plus.py:74:1: W293 blank line contains whitespace
    
^
security/security_monitoring_ultimate_a_plus.py:78:1: W293 blank line contains whitespace
    
^
security/security_monitoring_ultimate_a_plus.py:82:1: W293 blank line contains whitespace
    
^
security/security_monitoring_ultimate_a_plus.py:83:67: W291 trailing whitespace
    def _create_event(self, event_id: str, level: MonitoringLevel, 
                                                                  ^
security/security_monitoring_ultimate_a_plus.py:84:22: E128 continuation line under-indented for visual indent
                     alert_type: AlertType, description: str, 
                     ^
security/security_monitoring_ultimate_a_plus.py:84:62: W291 trailing whitespace
                     alert_type: AlertType, description: str, 
                                                             ^
security/security_monitoring_ultimate_a_plus.py:85:22: E128 continuation line under-indented for visual indent
                     source: str) -> SecurityEvent:
                     ^
security/security_monitoring_ultimate_a_plus.py:99:1: W293 blank line contains whitespace
    
^
security/security_monitoring_ultimate_a_plus.py:105:1: W293 blank line contains whitespace
    
^
security/security_monitoring_ultimate_a_plus.py:113:1: W293 blank line contains whitespace
    
^
security/security_monitoring_ultimate_a_plus.py:119:1: W293 blank line contains whitespace
    
^
security/security_monitoring_ultimate_a_plus.py:127:1: W293 blank line contains whitespace
    
^
security/security_monitoring_ultimate_a_plus.py:132:1: W293 blank line contains whitespace
    
^
security/security_monitoring_ultimate_a_plus.py:137:1: W293 blank line contains whitespace
    
^
security/security_monitoring_ultimate_a_plus.py:142:1: W293 blank line contains whitespace
    
^
security/security_monitoring_ultimate_a_plus.py:143:80: E501 line too long (81 > 79 characters)
    def get_events_by_level(self, level: MonitoringLevel) -> List[SecurityEvent]:
                                                                               ^
security/security_monitoring_ultimate_a_plus.py:146:1: W293 blank line contains whitespace
    
^
security/security_monitoring_ultimate_a_plus.py:149:80: E501 line too long (81 > 79 characters)
        cutoff_time = datetime.now() - timedelta(days=self.config.retention_days)
                                                                               ^
security/security_monitoring_ultimate_a_plus.py:155:1: W293 blank line contains whitespace
    
^
security/security_monitoring_ultimate_a_plus.py:160:1: W293 blank line contains whitespace
    
^
security/security_monitoring_ultimate_a_plus.py:163:80: E501 line too long (84 > 79 characters)
        critical_events = [e for e in events if e.level == MonitoringLevel.CRITICAL]
                                                                               ^
security/security_monitoring_ultimate_a_plus.py:164:1: W293 blank line contains whitespace
        
^
security/security_monitoring_ultimate_a_plus.py:167:1: W293 blank line contains whitespace
    
^
security/security_monitoring_ultimate_a_plus.py:171:80: E501 line too long (92 > 79 characters)
        self.logger.warning(f"Критический алерт #{self.alert_count}: {len(events)} событий")
                                                                               ^
security/security_monitoring_ultimate_a_plus.py:176:1: W293 blank line contains whitespace
    
^
security/security_monitoring_ultimate_a_plus.py:177:64: W291 trailing whitespace
    def __init__(self, name: str = "SecurityMonitoringManager", 
                                                               ^
security/security_monitoring_ultimate_a_plus.py:180:1: W293 blank line contains whitespace
        
^
security/security_monitoring_ultimate_a_plus.py:184:1: W293 blank line contains whitespace
        
^
security/security_monitoring_ultimate_a_plus.py:189:1: W293 blank line contains whitespace
        
^
security/security_monitoring_ultimate_a_plus.py:190:80: E501 line too long (93 > 79 characters)
        self.logger.info(f"{self.name} инициализирован с {len(self.strategies)} стратегиями")
                                                                               ^
security/security_monitoring_ultimate_a_plus.py:191:1: W293 blank line contains whitespace
    
^
security/security_monitoring_ultimate_a_plus.py:197:1: W293 blank line contains whitespace
        
^
security/security_monitoring_ultimate_a_plus.py:199:1: W293 blank line contains whitespace
        
^
security/security_monitoring_ultimate_a_plus.py:207:1: W293 blank line contains whitespace
    
^
security/security_monitoring_ultimate_a_plus.py:211:1: W293 blank line contains whitespace
        
^
security/security_monitoring_ultimate_a_plus.py:217:80: E501 line too long (92 > 79 characters)
                self.logger.error(f"Ошибка в стратегии {strategy.get_strategy_name()}: {e}")
                                                                               ^
security/security_monitoring_ultimate_a_plus.py:218:1: W293 blank line contains whitespace
        
^
security/security_monitoring_ultimate_a_plus.py:221:1: W293 blank line contains whitespace
        
^
security/security_monitoring_ultimate_a_plus.py:224:1: W293 blank line contains whitespace
    
^
security/security_monitoring_ultimate_a_plus.py:228:1: W293 blank line contains whitespace
        
^
security/security_monitoring_ultimate_a_plus.py:231:80: E501 line too long (100 > 79 characters)
            'critical_events': len(self.data_manager.get_events_by_level(MonitoringLevel.CRITICAL)),
                                                                               ^
security/security_monitoring_ultimate_a_plus.py:232:80: E501 line too long (92 > 79 characters)
            'high_events': len(self.data_manager.get_events_by_level(MonitoringLevel.HIGH)),
                                                                               ^
security/security_monitoring_ultimate_a_plus.py:237:1: W293 blank line contains whitespace
    
^
security/security_monitoring_ultimate_a_plus.py:241:80: E501 line too long (80 > 79 characters)
        self.logger.info(f"Добавлена стратегия: {strategy.get_strategy_name()}")
                                                                               ^
security/security_monitoring_ultimate_a_plus.py:242:1: W293 blank line contains whitespace
    
^
security/security_monitoring_ultimate_a_plus.py:245:80: E501 line too long (96 > 79 characters)
        self.strategies = [s for s in self.strategies if s.get_strategy_name() != strategy_name]
                                                                               ^
security/security_monitoring_ultimate_a_plus.py:247:1: W293 blank line contains whitespace
    
^
security/security_monitoring_ultimate_a_plus.py:254:1: W293 blank line contains whitespace
    
^
security/security_policy.py:90:80: E501 line too long (85 > 79 characters)
                    return False, f"Ошибка выполнения действия {action}: {result[1]}"
                                                                               ^
security/security_policy.py:120:80: E501 line too long (88 > 79 characters)
    def _execute_action(self, action: str, context: Dict[str, Any]) -> Tuple[bool, str]:
                                                                               ^
security/security_policy.py:154:80: E501 line too long (94 > 79 characters)
            "last_executed": (self.last_executed.isoformat() if self.last_executed else None),
                                                                               ^
security/security_policy.py:244:80: E501 line too long (90 > 79 characters)
        sorted_rules = sorted(self.rules.values(), key=lambda x: x.priority, reverse=True)
                                                                               ^
security/security_policy.py:271:80: E501 line too long (87 > 79 characters)
            "rules": {rule_id: rule.to_dict() for rule_id, rule in self.rules.items()},
                                                                               ^
security/security_policy.py:275:80: E501 line too long (86 > 79 characters)
            "review_date": self.review_date.isoformat() if self.review_date else None,
                                                                               ^
security/security_policy.py:276:80: E501 line too long (103 > 79 characters)
            "next_review_date": (self.next_review_date.isoformat() if self.next_review_date else None),
                                                                               ^
security/security_policy.py:291:80: E501 line too long (107 > 79 characters)
        self.policy_retention_days = config.get("policy_retention_days", 2555) if config else 2555  # 7 лет
                                                                               ^
security/security_policy.py:292:80: E501 line too long (99 > 79 characters)
        self.auto_review_interval = config.get("auto_review_interval", 90) if config else 90  # дни
                                                                               ^
security/security_policy.py:293:80: E501 line too long (106 > 79 characters)
        self.enable_policy_enforcement = config.get("enable_policy_enforcement", True) if config else True
                                                                               ^
security/security_policy.py:294:80: E501 line too long (80 > 79 characters)
        self.strict_mode = config.get("strict_mode", False) if config else False
                                                                               ^
security/security_policy.py:312:80: E501 line too long (90 > 79 characters)
            self.log_activity(f"Инициализация менеджера политик безопасности {self.name}")
                                                                               ^
security/security_policy.py:326:80: E501 line too long (99 > 79 characters)
            self.log_activity(f"Менеджер политик безопасности {self.name} успешно инициализирован")
                                                                               ^
security/security_policy.py:332:80: E501 line too long (88 > 79 characters)
                f"Ошибка инициализации менеджера политик безопасности {self.name}: {e}",
                                                                               ^
security/security_policy.py:347:80: E501 line too long (84 > 79 characters)
                        "description": "Пароль должен содержать минимум 8 символов",
                                                                               ^
security/security_policy.py:353:80: E501 line too long (88 > 79 characters)
                        "description": "Пароль должен содержать буквы, цифры и символы",
                                                                               ^
security/security_policy.py:366:80: E501 line too long (80 > 79 characters)
                        "description": "Доступ только для авторизованных ролей",
                                                                               ^
security/security_policy.py:385:80: E501 line too long (98 > 79 characters)
                        "description": ("Все конфиденциальные данные " "должны быть зашифрованы"),
                                                                               ^
security/security_policy.py:391:80: E501 line too long (87 > 79 characters)
                        "description": "Ограничение доступа к конфиденциальным данным",
                                                                               ^
security/security_policy.py:626:80: E501 line too long (91 > 79 characters)
                self.log_activity(f"Правило добавлено к политике {policy_id}: {rule.name}")
                                                                               ^
security/security_policy.py:662:80: E501 line too long (86 > 79 characters)
                        "violations": [r for r in policy_results if not r["success"]],
                                                                               ^
security/security_policy.py:668:80: E501 line too long (106 > 79 characters)
                    results["violations_detected"] += len([r for r in policy_results if not r["success"]])
                                                                               ^
security/security_policy.py:675:80: E501 line too long (85 > 79 characters)
                    f"Обнаружено {results['violations_detected']} нарушений политик",
                                                                               ^
security/security_policy.py:702:80: E501 line too long (84 > 79 characters)
    def get_policies_by_type(self, policy_type: PolicyType) -> List[Dict[str, Any]]:
                                                                               ^
security/security_policy.py:712:80: E501 line too long (107 > 79 characters)
        return [policy.to_dict() for policy in self.policies.values() if policy.policy_type == policy_type]
                                                                               ^
security/security_policy.py:714:80: E501 line too long (83 > 79 characters)
    def get_policies_by_status(self, status: PolicyStatus) -> List[Dict[str, Any]]:
                                                                               ^
security/security_policy.py:724:80: E501 line too long (97 > 79 characters)
        return [policy.to_dict() for policy in self.policies.values() if policy.status == status]
                                                                               ^
security/security_policy.py:774:80: E501 line too long (83 > 79 characters)
            self.log_activity(f"Запуск менеджера политик безопасности {self.name}")
                                                                               ^
security/security_policy.py:777:80: E501 line too long (91 > 79 characters)
            self.log_activity(f"Менеджер политик безопасности {self.name} успешно запущен")
                                                                               ^
security/security_policy.py:782:80: E501 line too long (82 > 79 characters)
                f"Ошибка запуска менеджера политик безопасности {self.name}: {e}",
                                                                               ^
security/security_policy.py:790:80: E501 line too long (86 > 79 characters)
            self.log_activity(f"Остановка менеджера политик безопасности {self.name}")
                                                                               ^
security/security_policy.py:796:80: E501 line too long (94 > 79 characters)
            self.log_activity(f"Менеджер политик безопасности {self.name} успешно остановлен")
                                                                               ^
security/security_policy.py:800:80: E501 line too long (84 > 79 characters)
                f"Ошибка остановки менеджера политик безопасности {self.name}: {e}",
                                                                               ^
security/security_reporting.py:11:1: F401 'os' imported but unused
import os
^
security/security_reporting.py:14:1: F401 'json' imported but unused
import json
^
security/security_reporting.py:17:1: F401 'typing.List' imported but unused
from typing import Dict, List, Any, Optional
^
security/security_reporting.py:18:1: F401 'pathlib.Path' imported but unused
from pathlib import Path
^
security/security_reporting.py:23:1: E402 module level import not at top of file
from core.base import ComponentStatus, SecurityBase, SecurityLevel
^
security/security_reporting.py:25:1: E302 expected 2 blank lines, found 1
class SecurityReporting(SecurityBase):
^
security/security_reporting.py:28:1: W293 blank line contains whitespace
    """
    Отчетность по безопасности
    
    Критический компонент системы безопасности ALADDIN
    """
^
security/security_reporting.py:31:1: W293 blank line contains whitespace
    
^
security/security_reporting.py:39:1: W293 blank line contains whitespace
        
^
security/security_reporting.py:42:1: W293 blank line contains whitespace
        
^
security/security_reporting.py:44:1: W293 blank line contains whitespace
    
^
security/security_reporting.py:50:1: W293 blank line contains whitespace
            
^
security/security_reporting.py:53:1: W293 blank line contains whitespace
            
^
security/security_reporting.py:55:80: E501 line too long (80 > 79 characters)
            self.log_activity(f"Ошибка инициализации {self.name}: {e}", "error")
                                                                               ^
security/security_reporting.py:57:1: W293 blank line contains whitespace
    
^
security/security_reporting.py:62:1: W293 blank line contains whitespace
    
^
security/security_reporting.py:66:1: W293 blank line contains whitespace
        """
        Выполнение основной функции компонента
        
        Args:
            params: Параметры выполнения
            
        Returns:
            Dict с результатами выполнения
        """
^
security/security_reporting.py:69:1: W293 blank line contains whitespace
        """
        Выполнение основной функции компонента
        
        Args:
            params: Параметры выполнения
            
        Returns:
            Dict с результатами выполнения
        """
^
security/security_reporting.py:74:80: E501 line too long (88 > 79 characters)
            self.log_activity(f"Выполнение {self.name} с параметрами: {params}", "info")
                                                                               ^
security/security_reporting.py:75:1: W293 blank line contains whitespace
            
^
security/security_reporting.py:78:1: W293 blank line contains whitespace
            
^
security/security_reporting.py:86:1: W293 blank line contains whitespace
            
^
security/security_reporting.py:95:1: W293 blank line contains whitespace
    
^
security/security_reporting.py:102:1: W293 blank line contains whitespace
    
^
security/security_reporting.py:106:1: W293 blank line contains whitespace
        """
        Получение статуса компонента
        
        Returns:
            Dict с информацией о статусе
        """
^
security/security_reporting.py:118:1: W293 blank line contains whitespace
    
^
security/security_reporting.py:128:1: W293 blank line contains whitespace
    
^
security/security_reporting.py:138:1: W293 blank line contains whitespace
    
^
security/security_reporting.py:156:1: W293 blank line contains whitespace
    
^
security/security_reporting.py:160:1: W293 blank line contains whitespace
    
^
security/sfm_singleton.py:16:1: E302 expected 2 blank lines, found 1
class SFMSingleton:
^
security/sfm_singleton.py:18:1: W293 blank line contains whitespace
    
^
security/sfm_singleton.py:21:1: W293 blank line contains whitespace
    
^
security/sfm_singleton.py:30:1: W293 blank line contains whitespace
    
^
security/sfm_singleton.py:39:1: W293 blank line contains whitespace
    
^
security/sfm_singleton.py:48:1: E305 expected 2 blank lines after class or function definition, found 1
sfm_singleton = SFMSingleton()
^
security/sfm_singleton.py:50:1: E302 expected 2 blank lines, found 1
def get_sfm() -> SafeFunctionManager:
^
security/sfm_singleton.py:54:1: E302 expected 2 blank lines, found 1
def reset_sfm():
^
security/sfm_singleton.py:56:26: W292 no newline at end of file
    sfm_singleton.reset()                         ^
security/simple_security_integration.py:41:80: E501 line too long (116 > 79 characters)
        self.auto_integrate = config.get("auto_integrate", False) if config else False  # Отключено для тестирования
                                                                               ^
security/simple_security_integration.py:42:80: E501 line too long (86 > 79 characters)
        self.enable_wrappers = config.get("enable_wrappers", True) if config else True
                                                                               ^
security/simple_security_integration.py:43:80: E501 line too long (110 > 79 characters)
        self.strict_mode = config.get("strict_mode", False) if config else False  # Отключено для тестирования
                                                                               ^
security/simple_security_integration.py:48:80: E501 line too long (94 > 79 characters)
            self.log_activity(f"Инициализация упрощенной интеграции безопасности {self.name}")
                                                                               ^
security/simple_security_integration.py:67:80: E501 line too long (105 > 79 characters)
            self.log_activity(f"Упрощенная интеграция безопасности {self.name} успешно инициализирована")
                                                                               ^
security/simple_security_integration.py:71:80: E501 line too long (103 > 79 characters)
            self.log_activity(f"Ошибка инициализации упрощенной интеграции безопасности: {e}", "error")
                                                                               ^
security/simple_security_integration.py:79:80: E501 line too long (94 > 79 characters)
            self.security_layer = SecurityLayer(config={"enable_real_time_protection": False})
                                                                               ^
security/simple_security_integration.py:80:80: E501 line too long (85 > 79 characters)
            self.audit_system = AuditSystem(config={"enable_real_time_audit": False})
                                                                               ^
security/simple_security_integration.py:81:80: E501 line too long (86 > 79 characters)
            self.access_control = AccessControl(config={"enable_ip_whitelist": False})
                                                                               ^
security/simple_security_integration.py:96:80: E501 line too long (93 > 79 characters)
            self.log_activity(f"Ошибка инициализации компонентов безопасности: {e}", "error")
                                                                               ^
security/simple_security_integration.py:115:80: E501 line too long (87 > 79 characters)
            self.log_activity("Создание безопасных оберток отключено для тестирования")
                                                                               ^
security/simple_security_integration.py:118:80: E501 line too long (82 > 79 characters)
            self.log_activity(f"Ошибка создания безопасных оберток: {e}", "error")
                                                                               ^
security/simple_security_integration.py:124:80: E501 line too long (88 > 79 characters)
                "security_layer": self.security_layer.status == ComponentStatus.RUNNING,
                                                                               ^
security/simple_security_integration.py:125:80: E501 line too long (84 > 79 characters)
                "audit_system": self.audit_system.status == ComponentStatus.RUNNING,
                                                                               ^
security/simple_security_integration.py:126:80: E501 line too long (88 > 79 characters)
                "access_control": self.access_control.status == ComponentStatus.RUNNING,
                                                                               ^
security/simple_security_integration.py:134:80: E501 line too long (87 > 79 characters)
                failed_components = [k for k, v in validation_results.items() if not v]
                                                                               ^
security/simple_security_integration.py:135:80: E501 line too long (94 > 79 characters)
                raise Exception(f"Валидация не пройдена для компонентов: {failed_components}")
                                                                               ^
security/simple_security_integration.py:156:80: E501 line too long (89 > 79 characters)
            self.log_activity(f"Запрос модуля {module_name} (заглушка для тестирования)")
                                                                               ^
security/simple_security_integration.py:160:80: E501 line too long (97 > 79 characters)
            self.log_activity(f"Ошибка получения безопасного модуля {module_name}: {e}", "error")
                                                                               ^
security/simple_security_integration.py:164:80: E501 line too long (98 > 79 characters)
        self, module_name: str, operation: str, user: str, params: Optional[Dict[str, Any]] = None
                                                                               ^
security/simple_security_integration.py:180:80: E501 line too long (116 > 79 characters)
            self.log_activity(f"Выполнение операции {operation} в модуле {module_name} (заглушка для тестирования)")
                                                                               ^
security/simple_security_integration.py:188:80: E501 line too long (85 > 79 characters)
            self.log_activity(f"Ошибка выполнения безопасной операции: {e}", "error")
                                                                               ^
security/simple_security_integration.py:219:80: E501 line too long (97 > 79 characters)
            "report_id": f"simple_security_integration_report_{int(datetime.now().timestamp())}",
                                                                               ^
security/simple_security_integration.py:238:80: E501 line too long (86 > 79 characters)
        self.log_activity(f"Остановка упрощенной интеграции безопасности {self.name}")
                                                                               ^
security/simple_security_integration.py:246:80: E501 line too long (89 > 79 characters)
            self.log_activity(f"Ошибка остановки компонентов безопасности: {e}", "error")
                                                                               ^
security/simple_security_integration.py:249:80: E501 line too long (88 > 79 characters)
        self.log_activity(f"Упрощенная интеграция безопасности {self.name} остановлена")
                                                                               ^
security/smart_data_manager.py:47:80: E501 line too long (86 > 79 characters)
        self.compression_threshold = 0.5  # Сжимаем данные старше 50% периода хранения
                                                                               ^
security/smart_data_manager.py:48:80: E501 line too long (85 > 79 characters)
        self.archive_threshold = 0.8  # Архивируем данные старше 80% периода хранения
                                                                               ^
security/smart_data_manager.py:54:80: E501 line too long (96 > 79 characters)
    def __init__(self, name: str = "SmartDataManager", config: Optional[Dict[str, Any]] = None):
                                                                               ^
security/smart_data_manager.py:58:80: E501 line too long (106 > 79 characters)
        self.data_directory = config.get("data_directory", "data/security") if config else "data/security"
                                                                               ^
security/smart_data_manager.py:59:80: E501 line too long (104 > 79 characters)
        self.max_total_size_gb = config.get("max_total_size_gb", 10) if config else 10  # Максимум 10 ГБ
                                                                               ^
security/smart_data_manager.py:60:80: E501 line too long (92 > 79 characters)
        self.enable_compression = config.get("enable_compression", True) if config else True
                                                                               ^
security/smart_data_manager.py:61:80: E501 line too long (88 > 79 characters)
        self.enable_archiving = config.get("enable_archiving", True) if config else True
                                                                               ^
security/smart_data_manager.py:126:80: E501 line too long (92 > 79 characters)
                    "size_bytes": len(json.dumps(data, ensure_ascii=False).encode("utf-8")),
                                                                               ^
security/smart_data_manager.py:140:80: E501 line too long (119 > 79 characters)
            self.log_activity(f"Данные безопасности сохранены: {data_type}/{identifier} (приоритет: {priority.value})")
                                                                               ^
security/smart_data_manager.py:144:80: E501 line too long (85 > 79 characters)
            self.log_activity(f"Ошибка сохранения данных безопасности: {e}", "error")
                                                                               ^
security/smart_data_manager.py:147:80: E501 line too long (93 > 79 characters)
    def _get_file_path(self, priority: DataPriority, data_type: str, identifier: str) -> str:
                                                                               ^
security/smart_data_manager.py:160:80: E501 line too long (95 > 79 characters)
                self.log_activity(f"ВНИМАНИЕ: Диск заполнен на {usage_percent:.1%}", "warning")
                                                                               ^
security/smart_data_manager.py:190:80: E501 line too long (100 > 79 characters)
            if self.total_data_size > self.max_total_size_gb * 1024 * 1024 * 1024:  # Превышен лимит
                                                                               ^
security/smart_data_manager.py:191:80: E501 line too long (90 > 79 characters)
                self.log_activity("Автоматическая очистка: превышен лимит размера данных")
                                                                               ^
security/smart_data_manager.py:207:80: E501 line too long (87 > 79 characters)
            for priority in [DataPriority.TEMP, DataPriority.LOW, DataPriority.MEDIUM]:
                                                                               ^
security/smart_data_manager.py:211:80: E501 line too long (95 > 79 characters)
                self.log_activity(f"Очищено {cleaned_size / (1024*1024):.1f} МБ старых данных")
                                                                               ^
security/smart_data_manager.py:231:80: E501 line too long (90 > 79 characters)
                    self.log_activity(f"ФАЙЛ ЗАЩИЩЕН ОТ УДАЛЕНИЯ: {file_path}", "warning")
                                                                               ^
security/smart_data_manager.py:236:80: E501 line too long (84 > 79 characters)
                retention_period = self.retention_policy.retention_periods[priority]
                                                                               ^
security/smart_data_manager.py:248:80: E501 line too long (103 > 79 characters)
                            self.log_activity(f"ФАЙЛ ЗАЩИЩЕН ОТ АРХИВИРОВАНИЯ: {file_path}", "warning")
                                                                               ^
security/smart_data_manager.py:260:80: E501 line too long (97 > 79 characters)
            self.log_activity(f"Ошибка очистки данных приоритета {priority.value}: {e}", "error")
                                                                               ^
security/smart_data_manager.py:272:80: E501 line too long (80 > 79 characters)
                priority_dir = os.path.join(self.data_directory, priority.value)
                                                                               ^
security/smart_data_manager.py:276:80: E501 line too long (84 > 79 characters)
                retention_period = self.retention_policy.retention_periods[priority]
                                                                               ^
security/smart_data_manager.py:281:80: E501 line too long (83 > 79 characters)
                    file_time = datetime.fromtimestamp(os.path.getctime(file_path))
                                                                               ^
security/smart_data_manager.py:302:80: E501 line too long (87 > 79 characters)
            archive_dir = os.path.join(self.data_directory, "archived", priority.value)
                                                                               ^
security/smart_data_manager.py:316:80: E501 line too long (82 > 79 characters)
            self.log_activity(f"Файл заархивирован: {file_path} → {archive_path}")
                                                                               ^
security/smart_data_manager.py:319:80: E501 line too long (86 > 79 characters)
            self.log_activity(f"Ошибка архивирования файла {file_path}: {e}", "error")
                                                                               ^
security/smart_data_manager.py:326:80: E501 line too long (106 > 79 characters)
            "usage_percent": (self.total_data_size / (self.max_total_size_gb * 1024 * 1024 * 1024)) * 100,
                                                                               ^
security/smart_data_manager.py:337:80: E501 line too long (115 > 79 characters)
                priority.value: str(policy) for priority, policy in self.retention_policy.retention_periods.items()
                                                                               ^
security/smart_data_manager.py:346:80: E501 line too long (88 > 79 characters)
                return len([f for f in os.listdir(priority_dir) if f.endswith(".json")])
                                                                               ^
security/smart_data_manager.py:361:80: E501 line too long (83 > 79 characters)
        """
        Ручная очистка данных

        Args:
            priority: Приоритет для очистки (если None - все приоритеты)
            older_than_days: Очищать данные старше N дней (если None - по политике)

        Returns:
            Dict[str, Any]: Результат очистки
        """
           
                             

             
                      ^
security/smart_data_manager.py:385:80: E501 line too long (81 > 79 characters)
                "freed_space_gb": (start_size - end_size) / (1024 * 1024 * 1024),
                                                                               ^
security/smart_monitoring.py:18:1: F401 'json' imported but unused
import json
^
security/smart_monitoring.py:71:1: W293 blank line contains whitespace
    
^
security/smart_monitoring.py:78:1: W293 blank line contains whitespace
        
^
security/smart_monitoring.py:83:1: W293 blank line contains whitespace
        
^
security/smart_monitoring.py:87:1: W293 blank line contains whitespace
        
^
security/smart_monitoring.py:90:1: W293 blank line contains whitespace
        
^
security/smart_monitoring.py:93:1: W293 blank line contains whitespace
        
^
security/smart_monitoring.py:96:1: W293 blank line contains whitespace
    
^
security/smart_monitoring.py:103:1: W293 blank line contains whitespace
    
^
security/smart_monitoring.py:104:80: E501 line too long (96 > 79 characters)
    def add_metric(self, metric_name: str, value: float, tags: Optional[Dict[str, str]] = None):
                                                                               ^
security/smart_monitoring.py:109:1: W293 blank line contains whitespace
            
^
security/smart_monitoring.py:111:1: W293 blank line contains whitespace
            
^
security/smart_monitoring.py:115:1: W293 blank line contains whitespace
            
^
security/smart_monitoring.py:118:1: W293 blank line contains whitespace
    
^
security/smart_monitoring.py:119:80: E501 line too long (81 > 79 characters)
    def _check_rules(self, metric_name: str, value: float, tags: Dict[str, str]):
                                                                               ^
security/smart_monitoring.py:122:1: W293 blank line contains whitespace
        
^
security/smart_monitoring.py:126:1: W293 blank line contains whitespace
            
^
security/smart_monitoring.py:128:80: E501 line too long (83 > 79 characters)
            if not self._evaluate_condition(value, rule.condition, rule.threshold):
                                                                               ^
security/smart_monitoring.py:130:1: W293 blank line contains whitespace
            
^
security/smart_monitoring.py:133:80: E501 line too long (99 > 79 characters)
                if current_time - self.alert_cooldowns[rule_id] < timedelta(seconds=rule.cooldown):
                                                                               ^
security/smart_monitoring.py:135:1: W293 blank line contains whitespace
            
^
security/smart_monitoring.py:137:80: E501 line too long (81 > 79 characters)
            if self._is_hourly_limit_exceeded(rule_id, rule.max_alerts_per_hour):
                                                                               ^
security/smart_monitoring.py:139:1: W293 blank line contains whitespace
            
^
security/smart_monitoring.py:143:1: W293 blank line contains whitespace
            
^
security/smart_monitoring.py:146:1: W293 blank line contains whitespace
    
^
security/smart_monitoring.py:147:80: E501 line too long (90 > 79 characters)
    def _evaluate_condition(self, value: float, condition: str, threshold: float) -> bool:
                                                                               ^
security/smart_monitoring.py:163:1: W293 blank line contains whitespace
    
^
security/smart_monitoring.py:167:1: W293 blank line contains whitespace
        
^
security/smart_monitoring.py:172:1: W293 blank line contains whitespace
        
^
security/smart_monitoring.py:174:1: W293 blank line contains whitespace
    
^
security/smart_monitoring.py:175:80: E501 line too long (81 > 79 characters)
    def _check_min_occurrences(self, rule_id: str, min_occurrences: int) -> bool:
                                                                               ^
security/smart_monitoring.py:179:1: W293 blank line contains whitespace
        
^
security/smart_monitoring.py:184:1: W293 blank line contains whitespace
        
^
security/smart_monitoring.py:186:1: W293 blank line contains whitespace
    
^
security/smart_monitoring.py:187:80: E501 line too long (104 > 79 characters)
    def _generate_alert(self, rule: AlertRule, value: float, tags: Dict[str, str], timestamp: datetime):
                                                                               ^
security/smart_monitoring.py:190:1: W293 blank line contains whitespace
        
^
security/smart_monitoring.py:194:1: W293 blank line contains whitespace
        
^
security/smart_monitoring.py:199:80: E501 line too long (102 > 79 characters)
            message=f"Метрика {rule.metric_name} = {value:.2f} {rule.condition} {rule.threshold:.2f}",
                                                                               ^
security/smart_monitoring.py:208:1: W293 blank line contains whitespace
        
^
security/smart_monitoring.py:215:1: W293 blank line contains whitespace
            
^
security/smart_monitoring.py:219:1: W293 blank line contains whitespace
        
^
security/smart_monitoring.py:222:1: W293 blank line contains whitespace
    
^
security/smart_monitoring.py:226:1: W293 blank line contains whitespace
        
^
security/smart_monitoring.py:229:1: W293 blank line contains whitespace
        
^
security/smart_monitoring.py:232:1: W293 blank line contains whitespace
        
^
security/smart_monitoring.py:235:80: E501 line too long (89 > 79 characters)
            self.baseline_metrics[metric_name] = self.baseline_metrics[metric_name][-50:]
                                                                               ^
security/smart_monitoring.py:236:1: W293 blank line contains whitespace
        
^
security/smart_monitoring.py:241:80: E501 line too long (92 > 79 characters)
            std_value = statistics.stdev(baseline_values) if len(baseline_values) > 1 else 0
                                                                               ^
security/smart_monitoring.py:242:1: W293 blank line contains whitespace
            
^
security/smart_monitoring.py:250:1: W293 blank line contains whitespace
            
^
security/smart_monitoring.py:252:80: E501 line too long (80 > 79 characters)
            rule.threshold = (rule.threshold * 0.8) + (adaptive_threshold * 0.2)
                                                                               ^
security/smart_monitoring.py:253:1: W293 blank line contains whitespace
    
^
security/smart_monitoring.py:261:1: W293 blank line contains whitespace
    
^
security/smart_monitoring.py:265:1: W293 blank line contains whitespace
    
^
security/smart_monitoring.py:269:80: E501 line too long (89 > 79 characters)
            return [alert for alert in self.alerts if alert.status == AlertStatus.ACTIVE]
                                                                               ^
security/smart_monitoring.py:270:1: W293 blank line contains whitespace
    
^
security/smart_monitoring.py:274:80: E501 line too long (90 > 79 characters)
            active_count = len([a for a in self.alerts if a.status == AlertStatus.ACTIVE])
                                                                               ^
security/smart_monitoring.py:276:1: W293 blank line contains whitespace
            
^
security/smart_monitoring.py:282:1: W293 blank line contains whitespace
            
^
security/smart_monitoring.py:288:1: W293 blank line contains whitespace
            
^
security/smart_monitoring.py:296:50: W291 trailing whitespace
                    rule_id: cooldown.isoformat() 
                                                 ^
security/smart_monitoring.py:300:1: W293 blank line contains whitespace
    
^
security/smart_monitoring.py:301:80: E501 line too long (80 > 79 characters)
    def suppress_alert(self, alert_id: str, reason: str = "Manual suppression"):
                                                                               ^
security/smart_monitoring.py:308:1: W293 blank line contains whitespace
    
^
security/smart_monitoring.py:316:1: W293 blank line contains whitespace
    
^
security/smart_monitoring.py:326:1: W293 blank line contains whitespace
        
^
security/smart_monitoring.py:329:1: W293 blank line contains whitespace
    
^
security/smart_monitoring.py:334:1: W293 blank line contains whitespace
            
^
security/smart_monitoring.py:337:47: W291 trailing whitespace
                alert for alert in self.alerts 
                                              ^
security/smart_monitoring.py:340:1: W293 blank line contains whitespace
            
^
security/smart_monitoring.py:401:1: W293 blank line contains whitespace
    
^
security/smart_monitoring.py:407:22: W292 no newline at end of file
setup_default_rules()                     ^
security/system/network_protection_manager.py:13:1: F401 'typing.Optional' imported but unused
from typing import Dict, List, Any, Optional
^
security/system/network_protection_manager.py:21:1: W293 blank line contains whitespace
    
^
security/system/network_protection_manager.py:28:1: W293 blank line contains whitespace
        
^
security/system/network_protection_manager.py:35:56: W291 trailing whitespace
                    "sudo", "iptables", "-A", "OUTPUT", 
                                                       ^
security/system/network_protection_manager.py:38:1: W293 blank line contains whitespace
                
^
security/system/network_protection_manager.py:40:56: W291 trailing whitespace
                    "sudo", "iptables", "-A", "OUTPUT", 
                                                       ^
security/system/network_protection_manager.py:43:1: W293 blank line contains whitespace
            
^
security/system/network_protection_manager.py:49:1: W293 blank line contains whitespace
            
^
security/system/network_protection_manager.py:51:1: W293 blank line contains whitespace
            
^
security/system/network_protection_manager.py:54:1: W293 blank line contains whitespace
            
^
security/system/network_protection_manager.py:58:1: W293 blank line contains whitespace
    
^
security/system/network_protection_manager.py:65:56: W291 trailing whitespace
                    "sudo", "iptables", "-A", "OUTPUT", 
                                                       ^
security/system/network_protection_manager.py:68:1: W293 blank line contains whitespace
            
^
security/system/network_protection_manager.py:73:1: W293 blank line contains whitespace
            
^
security/system/network_protection_manager.py:75:1: W293 blank line contains whitespace
            
^
security/system/network_protection_manager.py:78:1: W293 blank line contains whitespace
            
^
security/system/network_protection_manager.py:82:1: W293 blank line contains whitespace
    
^
security/system/network_protection_manager.py:90:56: W291 trailing whitespace
                    "sudo", "iptables", "-A", "OUTPUT", 
                                                       ^
security/system/network_protection_manager.py:93:1: W293 blank line contains whitespace
            
^
security/system/network_protection_manager.py:96:1: W293 blank line contains whitespace
            
^
security/system/network_protection_manager.py:100:1: W293 blank line contains whitespace
    
^
security/system/network_protection_manager.py:107:1: W293 blank line contains whitespace
            
^
security/system/network_protection_manager.py:111:1: W293 blank line contains whitespace
            
^
security/system/network_protection_manager.py:117:1: W293 blank line contains whitespace
            
^
security/system/network_protection_manager.py:123:1: W293 blank line contains whitespace
            
^
security/system/network_protection_manager.py:130:1: W293 blank line contains whitespace
                
^
security/system/network_protection_manager.py:132:1: W293 blank line contains whitespace
            
^
security/system/network_protection_manager.py:134:1: W293 blank line contains whitespace
            
^
security/system/network_protection_manager.py:138:1: W293 blank line contains whitespace
    
^
security/system/network_protection_manager.py:145:1: W293 blank line contains whitespace
            
^
security/system/network_protection_manager.py:151:1: W293 blank line contains whitespace
                    
^
security/system/network_protection_manager.py:153:70: W291 trailing whitespace
                    if any(keyword in proc_name or keyword in cmdline 
                                                                     ^
security/system/network_protection_manager.py:157:80: E501 line too long (87 > 79 characters)
                        logger.warning(f"Завершен подозрительный процесс: {proc_name}")
                                                                               ^
security/system/network_protection_manager.py:158:1: W293 blank line contains whitespace
                        
^
security/system/network_protection_manager.py:161:1: W293 blank line contains whitespace
            
^
security/system/network_protection_manager.py:163:1: W293 blank line contains whitespace
            
^
security/system/network_protection_manager.py:167:1: W293 blank line contains whitespace
    
^
security/system/network_protection_manager.py:178:1: W293 blank line contains whitespace
            
^
security/system/network_protection_manager.py:184:1: W293 blank line contains whitespace
            
^
security/system/network_protection_manager.py:187:1: W293 blank line contains whitespace
            
^
security/system/network_protection_manager.py:191:1: W293 blank line contains whitespace
    
^
security/system/network_protection_manager.py:199:1: W293 blank line contains whitespace
            
^
security/system/network_protection_manager.py:202:52: W291 trailing whitespace
                "sudo", "iptables", "-A", "OUTPUT", 
                                                   ^
security/system/network_protection_manager.py:205:1: W293 blank line contains whitespace
            
^
security/system/network_protection_manager.py:208:1: W293 blank line contains whitespace
            
^
security/system/network_protection_manager.py:212:1: W293 blank line contains whitespace
    
^
security/system/network_protection_manager.py:219:1: W293 blank line contains whitespace
            
^
security/system/network_protection_manager.py:222:1: W293 blank line contains whitespace
            
^
security/system/network_protection_manager.py:226:1: W293 blank line contains whitespace
    
^
security/system/network_protection_manager.py:232:60: W291 trailing whitespace
                ["sudo", "iptables", "-L", "OUTPUT", "-n"], 
                                                           ^
security/system/network_protection_manager.py:235:1: W293 blank line contains whitespace
            
^
security/system/network_protection_manager.py:237:1: W293 blank line contains whitespace
            
^
security/system/network_protection_manager.py:242:64: W291 trailing whitespace
                    if any(keyword in proc.info['name'].lower() 
                                                               ^
security/system/network_protection_manager.py:247:1: W293 blank line contains whitespace
            
^
security/system/network_protection_manager.py:254:1: W293 blank line contains whitespace
            
^
security/system/network_protection_manager.py:264:1: W293 blank line contains whitespace
    
^
security/system/network_protection_manager.py:267:1: W293 blank line contains whitespace
    
^
security/system/network_protection_manager.py:271:1: W293 blank line contains whitespace
    
^
security/system/network_protection_manager.py:274:1: W293 blank line contains whitespace
    
^
security/system/network_protection_manager.py:277:1: W293 blank line contains whitespace
    
^
security/system/network_protection_manager.py:280:1: W293 blank line contains whitespace
    
^
security/system/network_protection_manager.py:283:1: W293 blank line contains whitespace
    
^
security/system/network_protection_manager.py:287:1: W293 blank line contains whitespace
    
^
security/system/network_protection_manager.py:293:11: W292 no newline at end of file
    main()          ^
security/test_demo_function.py:6:1: F401 'time' imported but unused
import time
^
security/test_demo_function.py:8:1: F401 'typing.Optional' imported but unused
from typing import Dict, List, Optional, Any
^
security/test_demo_function.py:11:1: F401 'core.base.SecurityLevel' imported but unused
from core.base import SecurityBase, SecurityLevel, ComponentStatus
^
security/test_demo_function.py:11:1: F401 'core.base.ComponentStatus' imported but unused
from core.base import SecurityBase, SecurityLevel, ComponentStatus
^
security/test_demo_function.py:13:1: E302 expected 2 blank lines, found 1
class TestStatus(Enum):
^
security/test_demo_function.py:19:1: E302 expected 2 blank lines, found 1
class TestFunction(SecurityBase):
^
security/test_demo_function.py:21:1: W293 blank line contains whitespace
    
^
security/test_demo_function.py:28:1: W293 blank line contains whitespace
        
^
security/test_demo_function.py:38:1: W293 blank line contains whitespace
    
^
security/test_demo_function.py:42:1: W293 blank line contains whitespace
    
^
security/test_demo_function.py:47:1: E302 expected 2 blank lines, found 1
class TestManager(SecurityBase):
^
security/test_demo_function.py:49:1: W293 blank line contains whitespace
    
^
security/test_demo_function.py:53:1: W293 blank line contains whitespace
        
^
security/test_demo_function.py:57:1: W293 blank line contains whitespace
        
^
security/test_security_function.py:6:1: E302 expected 2 blank lines, found 1
class TestSecurityFunction:
^
security/test_security_function.py:8:1: W293 blank line contains whitespace
    
^
security/test_security_function.py:12:1: W293 blank line contains whitespace
    
^
security/threat_detection.py:13:1: F401 'typing.Tuple' imported but unused
from typing import Dict, List, Optional, Any, Tuple
^
security/threat_detection.py:22:1: E302 expected 2 blank lines, found 1
class ThreatSeverity(Enum):
^
security/threat_detection.py:29:1: E302 expected 2 blank lines, found 1
class ThreatStatus(Enum):
^
security/threat_detection.py:38:1: E302 expected 2 blank lines, found 1
class ThreatType(Enum):
^
security/threat_detection.py:50:1: E302 expected 2 blank lines, found 1
@dataclass
^
security/threat_detection.py:63:80: E501 line too long (88 > 79 characters)
    created_at: str = field(default_factory=lambda: datetime.datetime.now().isoformat())
                                                                               ^
security/threat_detection.py:64:80: E501 line too long (88 > 79 characters)
    updated_at: str = field(default_factory=lambda: datetime.datetime.now().isoformat())
                                                                               ^
security/threat_detection.py:93:80: E501 line too long (83 > 79 characters)
            created_at=data.get("created_at", datetime.datetime.now().isoformat()),
                                                                               ^
security/threat_detection.py:94:80: E501 line too long (83 > 79 characters)
            updated_at=data.get("updated_at", datetime.datetime.now().isoformat()),
                                                                               ^
security/threat_detection.py:98:1: E302 expected 2 blank lines, found 1
@dataclass
^
security/threat_detection.py:114:80: E501 line too long (89 > 79 characters)
    detected_at: str = field(default_factory=lambda: datetime.datetime.now().isoformat())
                                                                               ^
security/threat_detection.py:152:80: E501 line too long (85 > 79 characters)
            detected_at=data.get("detected_at", datetime.datetime.now().isoformat()),
                                                                               ^
security/threat_detection.py:158:1: E302 expected 2 blank lines, found 1
class DetectionMetrics:
^
security/threat_detection.py:174:1: W293 blank line contains whitespace
        
^
security/threat_detection.py:179:1: W293 blank line contains whitespace
        
^
security/threat_detection.py:182:80: E501 line too long (132 > 79 characters)
            self.avg_confidence = (self.avg_confidence * (self.total_detections - 1) + detection.confidence) / self.total_detections
                                                                               ^
security/threat_detection.py:183:1: W293 blank line contains whitespace
        
^
security/threat_detection.py:186:80: E501 line too long (92 > 79 characters)
        self.detection_by_type[threat_type] = self.detection_by_type.get(threat_type, 0) + 1
                                                                               ^
security/threat_detection.py:187:1: W293 blank line contains whitespace
        
^
security/threat_detection.py:190:80: E501 line too long (94 > 79 characters)
        self.detection_by_severity[severity] = self.detection_by_severity.get(severity, 0) + 1
                                                                               ^
security/threat_detection.py:191:1: W293 blank line contains whitespace
        
^
security/threat_detection.py:205:1: E302 expected 2 blank lines, found 1
class ThreatDetection:
^
security/threat_detection.py:223:80: E501 line too long (93 > 79 characters)
                return [ThreatIndicator.from_dict(ind) for ind in data.get('indicators', [])]
                                                                               ^
security/threat_detection.py:279:80: E501 line too long (84 > 79 characters)
    def update_indicator(self, indicator_id: str, new_data: Dict[str, Any]) -> bool:
                                                                               ^
security/threat_detection.py:283:80: E501 line too long (98 > 79 characters)
                updated_indicator = ThreatIndicator.from_dict({**indicator.to_dict(), **new_data})
                                                                               ^
security/threat_detection.py:294:80: E501 line too long (94 > 79 characters)
        self.indicators = [ind for ind in self.indicators if ind.indicator_id != indicator_id]
                                                                               ^
security/threat_detection.py:302:80: E501 line too long (103 > 79 characters)
    def analyze_data(self, data: str, source_ip: Optional[str] = None, target_ip: Optional[str] = None, 
                                                                               ^
security/threat_detection.py:302:104: W291 trailing whitespace
    def analyze_data(self, data: str, source_ip: Optional[str] = None, target_ip: Optional[str] = None, 
                                                                                                       ^
security/threat_detection.py:303:21: E128 continuation line under-indented for visual indent
                    user_id: Optional[str] = None, device_id: Optional[str] = None) -> List[ThreatDetection]:
                    ^
security/threat_detection.py:303:80: E501 line too long (109 > 79 characters)
                    user_id: Optional[str] = None, device_id: Optional[str] = None) -> List[ThreatDetection]:
                                                                               ^
security/threat_detection.py:309:1: W293 blank line contains whitespace
        
^
security/threat_detection.py:313:1: W293 blank line contains whitespace
                
^
security/threat_detection.py:314:80: E501 line too long (82 > 79 characters)
            # Простая проверка по паттерну (в реальной системе здесь был бы regex)
                                                                               ^
security/threat_detection.py:317:80: E501 line too long (80 > 79 characters)
                    detection_id=f"threat_{int(time.time())}_{len(detections)}",
                                                                               ^
security/threat_detection.py:330:80: E501 line too long (99 > 79 characters)
                print(f"Обнаружена угроза: {indicator.name} (уверенность: {indicator.confidence})")
                                                                               ^
security/threat_detection.py:331:1: W293 blank line contains whitespace
        
^
security/threat_detection.py:334:1: W293 blank line contains whitespace
        
^
security/threat_detection.py:338:1: W293 blank line contains whitespace
        
^
security/threat_detection.py:358:80: E501 line too long (88 > 79 characters)
                print(f"Обнаружение '{detection_id}' помечено как ложное срабатывание.")
                                                                               ^
security/threat_detection.py:363:80: E501 line too long (87 > 79 characters)
    def resolve_threat(self, detection_id: str, mitigation_actions: List[str]) -> bool:
                                                                               ^
security/threat_detection.py:375:68: W291 trailing whitespace
    def get_detections(self, status: Optional[ThreatStatus] = None, 
                                                                   ^
security/threat_detection.py:376:23: E128 continuation line under-indented for visual indent
                      threat_type: Optional[ThreatType] = None) -> List[ThreatDetection]:
                      ^
security/threat_detection.py:376:80: E501 line too long (89 > 79 characters)
                      threat_type: Optional[ThreatType] = None) -> List[ThreatDetection]:
                                                                               ^
security/threat_detection.py:379:1: W293 blank line contains whitespace
        
^
security/threat_detection.py:382:1: W293 blank line contains whitespace
        
^
security/threat_detection.py:385:1: W293 blank line contains whitespace
        
^
security/threat_detection.py:394:80: E501 line too long (83 > 79 characters)
        return [d for d in self.detections if d.confidence >= self.alert_threshold]
                                                                               ^
security/threat_detection.py:399:80: E501 line too long (94 > 79 characters)
            json.dump([d.to_dict() for d in self.detections], f, indent=4, ensure_ascii=False)
                                                                               ^
security/threat_detection.py:400:60: W292 no newline at end of file
        print(f"Обнаружения экспортированы в: {file_path}")                                                           ^
security/threat_intelligence.py:150:80: E501 line too long (95 > 79 characters)
        self.update_interval = config.get("update_interval", 3600) if config else 3600  # 1 час
                                                                               ^
security/threat_intelligence.py:151:80: E501 line too long (86 > 79 characters)
        self.max_indicators = config.get("max_indicators", 10000) if config else 10000
                                                                               ^
security/threat_intelligence.py:152:80: E501 line too long (94 > 79 characters)
        self.confidence_threshold = config.get("confidence_threshold", 0.7) if config else 0.7
                                                                               ^
security/threat_intelligence.py:153:80: E501 line too long (92 > 79 characters)
        self.enable_auto_update = config.get("enable_auto_update", True) if config else True
                                                                               ^
security/threat_intelligence.py:172:80: E501 line too long (84 > 79 characters)
            self.log_activity(f"Инициализация менеджера разведки угроз {self.name}")
                                                                               ^
security/threat_intelligence.py:190:80: E501 line too long (93 > 79 characters)
            self.log_activity(f"Менеджер разведки угроз {self.name} успешно инициализирован")
                                                                               ^
security/threat_intelligence.py:196:80: E501 line too long (82 > 79 characters)
                f"Ошибка инициализации менеджера разведки угроз {self.name}: {e}",
                                                                               ^
security/threat_intelligence.py:242:80: E501 line too long (89 > 79 characters)
        self.log_activity(f"Загружено {len(basic_indicators)} базовых индикаторов угроз")
                                                                               ^
security/threat_intelligence.py:302:80: E501 line too long (84 > 79 characters)
                existing.confidence = max(existing.confidence, indicator.confidence)
                                                                               ^
security/threat_intelligence.py:303:80: E501 line too long (97 > 79 characters)
                existing.tags.extend([tag for tag in indicator.tags if tag not in existing.tags])
                                                                               ^
security/threat_intelligence.py:314:80: E501 line too long (105 > 79 characters)
            self.log_activity(f"Добавлен индикатор угрозы: {indicator.indicator_type}:{indicator.value}")
                                                                               ^
security/threat_intelligence.py:337:80: E501 line too long (105 > 79 characters)
    def check_indicator(self, indicator_type: str, value: str) -> Tuple[bool, Optional[ThreatIndicator]]:
                                                                               ^
security/threat_intelligence.py:353:80: E501 line too long (93 > 79 characters)
                if indicator.is_active and indicator.confidence >= self.confidence_threshold:
                                                                               ^
security/threat_intelligence.py:355:80: E501 line too long (96 > 79 characters)
                    self.log_activity(f"Обнаружена угроза: {indicator_type}:{value}", "warning")
                                                                               ^
security/threat_intelligence.py:364:80: E501 line too long (82 > 79 characters)
    def check_ip(self, ip_address: str) -> Tuple[bool, Optional[ThreatIndicator]]:
                                                                               ^
security/threat_intelligence.py:368:80: E501 line too long (82 > 79 characters)
    def check_domain(self, domain: str) -> Tuple[bool, Optional[ThreatIndicator]]:
                                                                               ^
security/threat_intelligence.py:376:80: E501 line too long (83 > 79 characters)
    def check_hash(self, file_hash: str) -> Tuple[bool, Optional[ThreatIndicator]]:
                                                                               ^
security/threat_intelligence.py:380:80: E501 line too long (80 > 79 characters)
    def check_email(self, email: str) -> Tuple[bool, Optional[ThreatIndicator]]:
                                                                               ^
security/threat_intelligence.py:406:80: E501 line too long (91 > 79 characters)
            report = ThreatReport(threat_id, title, description, threat_category, severity)
                                                                               ^
security/threat_intelligence.py:413:80: E501 line too long (80 > 79 characters)
            self.log_activity(f"Ошибка создания отчета об угрозе: {e}", "error")
                                                                               ^
security/threat_intelligence.py:416:80: E501 line too long (90 > 79 characters)
    def add_indicator_to_report(self, threat_id: str, indicator: ThreatIndicator) -> bool:
                                                                               ^
security/threat_intelligence.py:438:80: E501 line too long (85 > 79 characters)
            self.log_activity(f"Ошибка добавления индикатора к отчету: {e}", "error")
                                                                               ^
security/threat_intelligence.py:465:80: E501 line too long (107 > 79 characters)
    def search_indicators(self, query: str, indicator_type: Optional[str] = None) -> List[ThreatIndicator]:
                                                                               ^
security/threat_intelligence.py:484:80: E501 line too long (81 > 79 characters)
                if indicator_type and indicator.indicator_type != indicator_type:
                                                                               ^
security/threat_intelligence.py:510:80: E501 line too long (92 > 79 characters)
    def get_indicators_by_category(self, category: ThreatCategory) -> List[ThreatIndicator]:
                                                                               ^
security/threat_intelligence.py:526:80: E501 line too long (86 > 79 characters)
    def get_indicators_by_source(self, source: ThreatSource) -> List[ThreatIndicator]:
                                                                               ^
security/threat_intelligence.py:537:80: E501 line too long (117 > 79 characters)
            indicator for indicator in self.indicators.values() if indicator.source == source and indicator.is_active
                                                                               ^
security/threat_intelligence.py:568:80: E501 line too long (87 > 79 characters)
            self.log_activity(f"Ошибка обновления источника {feed_name}: {e}", "error")
                                                                               ^
security/threat_intelligence.py:590:80: E501 line too long (87 > 79 characters)
                self.log_activity(f"Индикатор деактивирован: {indicator_type}:{value}")
                                                                               ^
security/threat_intelligence.py:622:80: E501 line too long (105 > 79 characters)
                self.log_activity(f"Индикатор отмечен как ложное срабатывание: {indicator_type}:{value}")
                                                                               ^
security/threat_intelligence.py:628:80: E501 line too long (83 > 79 characters)
            self.log_activity(f"Ошибка отметки ложного срабатывания: {e}", "error")
                                                                               ^
security/threat_intelligence.py:656:80: E501 line too long (84 > 79 characters)
                types_count[indicator_type] = types_count.get(indicator_type, 0) + 1
                                                                               ^
security/threat_intelligence.py:665:80: E501 line too long (82 > 79 characters)
                categories_count[category] = categories_count.get(category, 0) + 1
                                                                               ^
security/threat_intelligence.py:688:80: E501 line too long (90 > 79 characters)
            active_indicators = [ind for ind in self.indicators.values() if ind.is_active]
                                                                               ^
security/threat_intelligence.py:746:80: E501 line too long (80 > 79 characters)
    def _export_indicators_stix(self, indicators: List[ThreatIndicator]) -> str:
                                                                               ^
security/threat_intelligence.py:751:80: E501 line too long (82 > 79 characters)
            "id": f"bundle--{hashlib.md5(str(time.time()).encode()).hexdigest()}",
                                                                               ^
security/threat_intelligence.py:758:80: E501 line too long (88 > 79 characters)
                "id": f"indicator--{hashlib.md5(indicator.value.encode()).hexdigest()}",
                                                                               ^
security/threat_intelligence.py:761:80: E501 line too long (87 > 79 characters)
                "pattern": f"[{indicator.indicator_type}:value = '{indicator.value}']",
                                                                               ^
security/threat_intelligence.py:777:80: E501 line too long (85 > 79 characters)
            self.log_activity(f"Менеджер разведки угроз {self.name} успешно запущен")
                                                                               ^
security/threat_intelligence.py:781:80: E501 line too long (99 > 79 characters)
            self.log_activity(f"Ошибка запуска менеджера разведки угроз {self.name}: {e}", "error")
                                                                               ^
security/threat_intelligence.py:787:80: E501 line too long (80 > 79 characters)
            self.log_activity(f"Остановка менеджера разведки угроз {self.name}")
                                                                               ^
security/threat_intelligence.py:793:80: E501 line too long (88 > 79 characters)
            self.log_activity(f"Менеджер разведки угроз {self.name} успешно остановлен")
                                                                               ^
security/threat_intelligence.py:796:80: E501 line too long (101 > 79 characters)
            self.log_activity(f"Ошибка остановки менеджера разведки угроз {self.name}: {e}", "error")
                                                                               ^
security/universal_singleton.py:13:1: F401 'typing.Optional' imported but unused
from typing import Dict, Type, TypeVar, Any, Optional
^
security/universal_singleton.py:20:1: E302 expected 2 blank lines, found 1
class UniversalSingleton:
^
security/universal_singleton.py:23:1: W293 blank line contains whitespace
    """
    Универсальный Singleton для всех компонентов ALADDIN
    
    Особенности:
    - Thread-safe (потокобезопасный)
    - Memory-safe (безопасный по памяти)
    - Lazy initialization (ленивая инициализация)
    - Weak references (слабые ссылки)
    - Auto cleanup (автоочистка)
    """
^
security/universal_singleton.py:31:1: W293 blank line contains whitespace
    
^
security/universal_singleton.py:35:1: W293 blank line contains whitespace
    
^
security/universal_singleton.py:47:1: W293 blank line contains whitespace
                    
^
security/universal_singleton.py:50:1: W293 blank line contains whitespace
                    
^
security/universal_singleton.py:55:1: W293 blank line contains whitespace
                    
^
security/universal_singleton.py:57:1: W293 blank line contains whitespace
        
^
security/universal_singleton.py:62:1: W293 blank line contains whitespace
        
^
security/universal_singleton.py:64:1: W293 blank line contains whitespace
    
^
security/universal_singleton.py:77:1: W293 blank line contains whitespace
    
^
security/universal_singleton.py:84:1: W293 blank line contains whitespace
    
^
security/universal_singleton.py:96:1: W293 blank line contains whitespace
    
^
security/universal_singleton.py:104:1: W293 blank line contains whitespace
        
^
security/universal_singleton.py:113:1: W293 blank line contains whitespace
    
^
security/universal_singleton.py:122:80: E501 line too long (83 > 79 characters)
            logging.info(f"🚀 Singleton инициализирован: {self.__class__.__name__}")
                                                                               ^
security/universal_singleton.py:124:1: E302 expected 2 blank lines, found 1
def get_component(component_class: Type[T], *args, **kwargs) -> T:
^
security/universal_singleton.py:127:1: W293 blank line contains whitespace
    """
    Универсальная функция получения компонента
    
    Args:
        component_class: Класс компонента
        *args: Аргументы для инициализации
        **kwargs: Ключевые аргументы для инициализации
    
    Returns:
        Экземпляр компонента (Singleton)
    """
^
security/universal_singleton.py:132:1: W293 blank line contains whitespace
    """
    Универсальная функция получения компонента
    
    Args:
        component_class: Класс компонента
        *args: Аргументы для инициализации
        **kwargs: Ключевые аргументы для инициализации
    
    Returns:
        Экземпляр компонента (Singleton)
    """
^
security/universal_singleton.py:137:80: E501 line too long (103 > 79 characters)
        raise TypeError(f"Класс {component_class.__name__} должен наследоваться от UniversalSingleton")
                                                                               ^
security/universal_singleton.py:138:1: W293 blank line contains whitespace
    
^
security/universal_singleton.py:141:1: E302 expected 2 blank lines, found 1
def reset_all_singletons():
^
security/universal_singleton.py:150:1: E302 expected 2 blank lines, found 1
def get_all_singleton_stats() -> Dict[str, Dict[str, Any]]:
^
security/universal_singleton.py:165:1: E302 expected 2 blank lines, found 1
def singleton(cls):
^
security/universal_singleton.py:171:1: W293 blank line contains whitespace
    
^
security/universal_singleton.py:175:1: W293 blank line contains whitespace
    
^
security/universal_singleton.py:179:1: E305 expected 2 blank lines after class or function definition, found 1
if __name__ == "__main__":
^
security/universal_singleton.py:185:1: W293 blank line contains whitespace
        
^
security/universal_singleton.py:188:1: W293 blank line contains whitespace
    
^
security/universal_singleton.py:193:1: W293 blank line contains whitespace
    
^
security/universal_singleton.py:197:1: W293 blank line contains whitespace
    
^
security/universal_singleton.py:200:1: W293 blank line contains whitespace
    
^
security/universal_singleton.py:205:1: W293 blank line contains whitespace
    
^
security/universal_singleton.py:208:29: W292 no newline at end of file
    print(f"Stats: {stats}")                            ^
security/vpn/__init__.py:7:80: E501 line too long (87 > 79 characters)
from .vpn_security_system import VPNSecuritySystem, VPNSecurityLevel, VPNSecurityConfig
                                                                               ^
security/vpn/__init__.py:8:80: E501 line too long (111 > 79 characters)
from .core.vpn_core import VPNCore, VPNServer, VPNConnection, VPNProtocol, VPNServerStatus, VPNConnectionStatus
                                                                               ^
security/vpn/core/__init__.py:7:80: E501 line too long (106 > 79 characters)
from .vpn_core import VPNCore, VPNServer, VPNConnection, VPNProtocol, VPNServerStatus, VPNConnectionStatus
                                                                               ^
security/vpn/core/vpn_core.py:15:1: F401 'json' imported but unused
import json
^
security/vpn/core/vpn_core.py:16:1: F401 'hashlib' imported but unused
import hashlib
^
security/vpn/core/vpn_core.py:19:1: F401 'datetime.timedelta' imported but unused
from datetime import datetime, timedelta
^
security/vpn/core/vpn_core.py:24:1: F401 'subprocess' imported but unused
import subprocess
^
security/vpn/core/vpn_core.py:25:1: F401 'os' imported but unused
import os
^
security/vpn/core/vpn_core.py:26:1: F401 'sys' imported but unused
import sys
^
security/vpn/core/vpn_core.py:350:80: E501 line too long (95 > 79 characters)
                f"Добавлен сервер: {server.name} ({server.country}) - {server.protocol.value}")
                                                                               ^
security/vpn/core/vpn_core.py:421:80: E501 line too long (80 > 79 characters)
                if country is None or server.country.lower() == country.lower():
                                                                               ^
security/vpn/core/vpn_core.py:506:80: E501 line too long (102 > 79 characters)
                f"Пользователь {user_id} подключен к серверу {server.name} ({server.protocol.value})")
                                                                               ^
security/vpn/core/vpn_core.py:508:80: E501 line too long (98 > 79 characters)
            return True, f"Подключен к {server.name} ({server.country}) - {server.protocol.value}"
                                                                               ^
security/vpn/core/vpn_core.py:598:80: E501 line too long (85 > 79 characters)
            'message': f"VPN Core: {online_servers}/{total_servers} серверов онлайн",
                                                                               ^
security/vpn/core/vpn_core.py:628:80: E501 line too long (115 > 79 characters)
        success, message = await vpn_core.connect("test_user", country="Singapore", protocol=VPNProtocol.WIREGUARD)
                                                                               ^
security/vpn/encryption/modern_encryption.py:15:1: F401 'os' imported but unused
import os
^
security/vpn/encryption/modern_encryption.py:18:1: F401 'typing.List' imported but unused
from typing import Dict, List, Optional, Any, Tuple, Union
^
security/vpn/encryption/modern_encryption.py:18:1: F401 'typing.Union' imported but unused
from typing import Dict, List, Optional, Any, Tuple, Union
^
security/vpn/encryption/modern_encryption.py:24:1: F401 'core.base.SecurityLevel' imported but unused
from core.base import ComponentStatus, SecurityBase, SecurityLevel
^
security/vpn/encryption/modern_encryption.py:28:1: E302 expected 2 blank lines, found 1
class EncryptionAlgorithm(Enum):
^
security/vpn/encryption/modern_encryption.py:36:1: E302 expected 2 blank lines, found 1
class EncryptionMode(Enum):
^
security/vpn/encryption/modern_encryption.py:43:1: E302 expected 2 blank lines, found 1
@dataclass
^
security/vpn/encryption/modern_encryption.py:54:1: E302 expected 2 blank lines, found 1
@dataclass
^
security/vpn/encryption/modern_encryption.py:65:1: E302 expected 2 blank lines, found 1
class ModernEncryptionSystem(SecurityBase):
^
security/vpn/encryption/modern_encryption.py:67:1: W293 blank line contains whitespace
    
^
security/vpn/encryption/modern_encryption.py:68:80: E501 line too long (102 > 79 characters)
    def __init__(self, name: str = "ModernEncryptionSystem", config: Optional[Dict[str, Any]] = None):
                                                                               ^
security/vpn/encryption/modern_encryption.py:70:1: W293 blank line contains whitespace
        
^
security/vpn/encryption/modern_encryption.py:73:80: E501 line too long (107 > 79 characters)
        self.key_rotation_interval = config.get('key_rotation_interval', 3600) if config else 3600  # 1 час
                                                                               ^
security/vpn/encryption/modern_encryption.py:74:80: E501 line too long (88 > 79 characters)
        self.max_key_usage = config.get('max_key_usage', 1000000) if config else 1000000
                                                                               ^
security/vpn/encryption/modern_encryption.py:75:1: W293 blank line contains whitespace
        
^
security/vpn/encryption/modern_encryption.py:79:1: W293 blank line contains whitespace
        
^
security/vpn/encryption/modern_encryption.py:85:1: W293 blank line contains whitespace
        
^
security/vpn/encryption/modern_encryption.py:88:1: W293 blank line contains whitespace
        
^
security/vpn/encryption/modern_encryption.py:90:1: W293 blank line contains whitespace
    
^
security/vpn/encryption/modern_encryption.py:96:1: W293 blank line contains whitespace
            
^
security/vpn/encryption/modern_encryption.py:99:1: W293 blank line contains whitespace
            
^
security/vpn/encryption/modern_encryption.py:101:1: W293 blank line contains whitespace
            
^
security/vpn/encryption/modern_encryption.py:105:1: W293 blank line contains whitespace
    
^
security/vpn/encryption/modern_encryption.py:110:1: W293 blank line contains whitespace
            
^
security/vpn/encryption/modern_encryption.py:120:1: W293 blank line contains whitespace
            
^
security/vpn/encryption/modern_encryption.py:130:1: W293 blank line contains whitespace
            
^
security/vpn/encryption/modern_encryption.py:133:1: W293 blank line contains whitespace
            
^
security/vpn/encryption/modern_encryption.py:137:1: W293 blank line contains whitespace
            
^
security/vpn/encryption/modern_encryption.py:138:80: E501 line too long (86 > 79 characters)
            logger.info(f"Новый ключ шифрования создан: {key_id} ({algorithm.value})")
                                                                               ^
security/vpn/encryption/modern_encryption.py:140:1: W293 blank line contains whitespace
            
^
security/vpn/encryption/modern_encryption.py:144:1: W293 blank line contains whitespace
    
^
security/vpn/encryption/modern_encryption.py:148:1: W293 blank line contains whitespace
        
^
security/vpn/encryption/modern_encryption.py:153:1: W293 blank line contains whitespace
                    
^
security/vpn/encryption/modern_encryption.py:157:1: W293 blank line contains whitespace
                        
^
security/vpn/encryption/modern_encryption.py:160:1: W293 blank line contains whitespace
        
^
security/vpn/encryption/modern_encryption.py:161:80: E501 line too long (81 > 79 characters)
        rotation_thread = threading.Thread(target=key_rotation_loop, daemon=True)
                                                                               ^
security/vpn/encryption/modern_encryption.py:164:1: W293 blank line contains whitespace
    
^
security/vpn/encryption/modern_encryption.py:167:80: E501 line too long (84 > 79 characters)
        if not self.active_key_id or self.active_key_id not in self.encryption_keys:
                                                                               ^
security/vpn/encryption/modern_encryption.py:169:1: W293 blank line contains whitespace
        
^
security/vpn/encryption/modern_encryption.py:171:1: W293 blank line contains whitespace
        
^
security/vpn/encryption/modern_encryption.py:175:1: W293 blank line contains whitespace
        
^
security/vpn/encryption/modern_encryption.py:177:80: E501 line too long (83 > 79 characters)
        if active_key.max_usage and active_key.usage_count >= active_key.max_usage:
                                                                               ^
security/vpn/encryption/modern_encryption.py:179:1: W293 blank line contains whitespace
        
^
security/vpn/encryption/modern_encryption.py:181:1: W293 blank line contains whitespace
    
^
security/vpn/encryption/modern_encryption.py:187:1: W293 blank line contains whitespace
            
^
security/vpn/encryption/modern_encryption.py:191:1: W293 blank line contains whitespace
            
^
security/vpn/encryption/modern_encryption.py:199:1: W293 blank line contains whitespace
                
^
security/vpn/encryption/modern_encryption.py:201:80: E501 line too long (86 > 79 characters)
                cleanup_thread = threading.Thread(target=cleanup_old_key, daemon=True)
                                                                               ^
security/vpn/encryption/modern_encryption.py:203:1: W293 blank line contains whitespace
            
^
security/vpn/encryption/modern_encryption.py:205:1: W293 blank line contains whitespace
            
^
security/vpn/encryption/modern_encryption.py:208:1: W293 blank line contains whitespace
    
^
security/vpn/encryption/modern_encryption.py:209:80: E501 line too long (88 > 79 characters)
    def encrypt_data(self, data: bytes, algorithm: Optional[EncryptionAlgorithm] = None, 
                                                                               ^
security/vpn/encryption/modern_encryption.py:209:89: W291 trailing whitespace
    def encrypt_data(self, data: bytes, algorithm: Optional[EncryptionAlgorithm] = None, 
                                                                                        ^
security/vpn/encryption/modern_encryption.py:210:21: E128 continuation line under-indented for visual indent
                    key_id: Optional[str] = None) -> EncryptionResult:
                    ^
security/vpn/encryption/modern_encryption.py:216:1: W293 blank line contains whitespace
            
^
security/vpn/encryption/modern_encryption.py:220:1: W293 blank line contains whitespace
            
^
security/vpn/encryption/modern_encryption.py:226:1: W293 blank line contains whitespace
            
^
security/vpn/encryption/modern_encryption.py:228:1: W293 blank line contains whitespace
            
^
security/vpn/encryption/modern_encryption.py:230:80: E501 line too long (81 > 79 characters)
            nonce = secrets.token_bytes(12)  # 96 бит для GCM и ChaCha20-Poly1305
                                                                               ^
security/vpn/encryption/modern_encryption.py:231:1: W293 blank line contains whitespace
            
^
security/vpn/encryption/modern_encryption.py:234:80: E501 line too long (112 > 79 characters)
                encrypted_data, auth_tag = self._chacha20_poly1305_encrypt(data, encryption_key.key_data, nonce)
                                                                               ^
security/vpn/encryption/modern_encryption.py:236:80: E501 line too long (102 > 79 characters)
                encrypted_data, auth_tag = self._aes_gcm_encrypt(data, encryption_key.key_data, nonce)
                                                                               ^
security/vpn/encryption/modern_encryption.py:238:80: E501 line too long (102 > 79 characters)
                encrypted_data, auth_tag = self._aes_gcm_encrypt(data, encryption_key.key_data, nonce)
                                                                               ^
security/vpn/encryption/modern_encryption.py:242:80: E501 line too long (81 > 79 characters)
                    error_message=f"Неподдерживаемый алгоритм: {algorithm.value}"
                                                                               ^
security/vpn/encryption/modern_encryption.py:244:1: W293 blank line contains whitespace
            
^
security/vpn/encryption/modern_encryption.py:248:80: E501 line too long (88 > 79 characters)
            self.algorithm_usage[algorithm] = self.algorithm_usage.get(algorithm, 0) + 1
                                                                               ^
security/vpn/encryption/modern_encryption.py:249:1: W293 blank line contains whitespace
            
^
security/vpn/encryption/modern_encryption.py:258:1: W293 blank line contains whitespace
            
^
security/vpn/encryption/modern_encryption.py:266:1: W293 blank line contains whitespace
    
^
security/vpn/encryption/modern_encryption.py:267:80: E501 line too long (80 > 79 characters)
    def decrypt_data(self, encrypted_data: bytes, auth_tag: bytes, nonce: bytes,
                                                                               ^
security/vpn/encryption/modern_encryption.py:268:21: E128 continuation line under-indented for visual indent
                    algorithm: EncryptionAlgorithm, key_id: str) -> EncryptionResult:
                    ^
security/vpn/encryption/modern_encryption.py:268:80: E501 line too long (85 > 79 characters)
                    algorithm: EncryptionAlgorithm, key_id: str) -> EncryptionResult:
                                                                               ^
security/vpn/encryption/modern_encryption.py:276:1: W293 blank line contains whitespace
            
^
security/vpn/encryption/modern_encryption.py:278:1: W293 blank line contains whitespace
            
^
security/vpn/encryption/modern_encryption.py:281:80: E501 line too long (122 > 79 characters)
                decrypted_data = self._chacha20_poly1305_decrypt(encrypted_data, auth_tag, encryption_key.key_data, nonce)
                                                                               ^
security/vpn/encryption/modern_encryption.py:283:80: E501 line too long (112 > 79 characters)
                decrypted_data = self._aes_gcm_decrypt(encrypted_data, auth_tag, encryption_key.key_data, nonce)
                                                                               ^
security/vpn/encryption/modern_encryption.py:285:80: E501 line too long (112 > 79 characters)
                decrypted_data = self._aes_gcm_decrypt(encrypted_data, auth_tag, encryption_key.key_data, nonce)
                                                                               ^
security/vpn/encryption/modern_encryption.py:289:80: E501 line too long (81 > 79 characters)
                    error_message=f"Неподдерживаемый алгоритм: {algorithm.value}"
                                                                               ^
security/vpn/encryption/modern_encryption.py:291:1: W293 blank line contains whitespace
            
^
security/vpn/encryption/modern_encryption.py:294:1: W293 blank line contains whitespace
            
^
security/vpn/encryption/modern_encryption.py:301:1: W293 blank line contains whitespace
            
^
security/vpn/encryption/modern_encryption.py:309:1: W293 blank line contains whitespace
    
^
security/vpn/encryption/modern_encryption.py:310:80: E501 line too long (103 > 79 characters)
    def _chacha20_poly1305_encrypt(self, data: bytes, key: bytes, nonce: bytes) -> Tuple[bytes, bytes]:
                                                                               ^
security/vpn/encryption/modern_encryption.py:312:80: E501 line too long (82 > 79 characters)
        # В реальной реализации здесь будет использоваться библиотека cryptography
                                                                               ^
security/vpn/encryption/modern_encryption.py:315:1: W293 blank line contains whitespace
        
^
security/vpn/encryption/modern_encryption.py:320:1: W293 blank line contains whitespace
        
^
security/vpn/encryption/modern_encryption.py:323:1: W293 blank line contains whitespace
        
^
security/vpn/encryption/modern_encryption.py:325:80: E501 line too long (81 > 79 characters)
        auth_tag = hmac.new(key, encrypted + nonce, hashlib.sha256).digest()[:16]
                                                                               ^
security/vpn/encryption/modern_encryption.py:326:1: W293 blank line contains whitespace
        
^
security/vpn/encryption/modern_encryption.py:328:1: W293 blank line contains whitespace
    
^
security/vpn/encryption/modern_encryption.py:329:80: E501 line too long (116 > 79 characters)
    def _chacha20_poly1305_decrypt(self, encrypted_data: bytes, auth_tag: bytes, key: bytes, nonce: bytes) -> bytes:
                                                                               ^
security/vpn/encryption/modern_encryption.py:332:80: E501 line too long (90 > 79 characters)
        expected_tag = hmac.new(key, encrypted_data + nonce, hashlib.sha256).digest()[:16]
                                                                               ^
security/vpn/encryption/modern_encryption.py:335:1: W293 blank line contains whitespace
        
^
security/vpn/encryption/modern_encryption.py:338:1: W293 blank line contains whitespace
    
^
security/vpn/encryption/modern_encryption.py:339:80: E501 line too long (93 > 79 characters)
    def _aes_gcm_encrypt(self, data: bytes, key: bytes, nonce: bytes) -> Tuple[bytes, bytes]:
                                                                               ^
security/vpn/encryption/modern_encryption.py:341:80: E501 line too long (82 > 79 characters)
        # В реальной реализации здесь будет использоваться библиотека cryptography
                                                                               ^
security/vpn/encryption/modern_encryption.py:343:1: W293 blank line contains whitespace
        
^
security/vpn/encryption/modern_encryption.py:348:1: W293 blank line contains whitespace
        
^
security/vpn/encryption/modern_encryption.py:351:1: W293 blank line contains whitespace
        
^
security/vpn/encryption/modern_encryption.py:353:80: E501 line too long (81 > 79 characters)
        auth_tag = hmac.new(key, encrypted + nonce, hashlib.sha256).digest()[:16]
                                                                               ^
security/vpn/encryption/modern_encryption.py:354:1: W293 blank line contains whitespace
        
^
security/vpn/encryption/modern_encryption.py:356:1: W293 blank line contains whitespace
    
^
security/vpn/encryption/modern_encryption.py:357:80: E501 line too long (106 > 79 characters)
    def _aes_gcm_decrypt(self, encrypted_data: bytes, auth_tag: bytes, key: bytes, nonce: bytes) -> bytes:
                                                                               ^
security/vpn/encryption/modern_encryption.py:360:80: E501 line too long (90 > 79 characters)
        expected_tag = hmac.new(key, encrypted_data + nonce, hashlib.sha256).digest()[:16]
                                                                               ^
security/vpn/encryption/modern_encryption.py:363:1: W293 blank line contains whitespace
        
^
security/vpn/encryption/modern_encryption.py:366:1: W293 blank line contains whitespace
    
^
security/vpn/encryption/modern_encryption.py:375:80: E501 line too long (97 > 79 characters)
            "algorithm_usage": {alg.value: count for alg, count in self.algorithm_usage.items()},
                                                                               ^
security/vpn/encryption/modern_encryption.py:379:1: W293 blank line contains whitespace
    
^
security/vpn/encryption/modern_encryption.py:389:1: W293 blank line contains whitespace
            
^
security/vpn/encryption/modern_encryption.py:392:1: W293 blank line contains whitespace
            
^
security/vpn/encryption/modern_encryption.py:398:1: E305 expected 2 blank lines after class or function definition, found 1
if __name__ == "__main__":
^
security/vpn/encryption/modern_encryption.py:400:1: W293 blank line contains whitespace
    
^
security/vpn/encryption/modern_encryption.py:403:1: W293 blank line contains whitespace
    
^
security/vpn/encryption/modern_encryption.py:406:1: W293 blank line contains whitespace
    
^
security/vpn/encryption/modern_encryption.py:409:1: W293 blank line contains whitespace
    
^
security/vpn/encryption/modern_encryption.py:412:80: E501 line too long (93 > 79 characters)
    result = encryption_system.encrypt_data(test_data, EncryptionAlgorithm.CHACHA20_POLY1305)
                                                                               ^
security/vpn/encryption/modern_encryption.py:417:1: W293 blank line contains whitespace
        
^
security/vpn/encryption/modern_encryption.py:424:80: E501 line too long (80 > 79 characters)
            print(f"   ✅ Расшифровка: {decrypt_result.encrypted_data.decode()}")
                                                                               ^
security/vpn/encryption/modern_encryption.py:429:1: W293 blank line contains whitespace
    
^
security/vpn/encryption/modern_encryption.py:432:80: E501 line too long (87 > 79 characters)
    result = encryption_system.encrypt_data(test_data, EncryptionAlgorithm.AES_256_GCM)
                                                                               ^
security/vpn/encryption/modern_encryption.py:436:1: W293 blank line contains whitespace
        
^
security/vpn/encryption/modern_encryption.py:443:80: E501 line too long (80 > 79 characters)
            print(f"   ✅ Расшифровка: {decrypt_result.encrypted_data.decode()}")
                                                                               ^
security/vpn/encryption/modern_encryption.py:448:1: W293 blank line contains whitespace
    
^
security/vpn/encryption/modern_encryption.py:454:1: W293 blank line contains whitespace
    
^
security/vpn/protection/ipv6_dns_protection.py:13:1: F401 'os' imported but unused
import os
^
security/vpn/protection/ipv6_dns_protection.py:15:1: F401 'socket' imported but unused
import socket
^
security/vpn/protection/ipv6_dns_protection.py:19:1: F401 'typing.Tuple' imported but unused
from typing import Dict, List, Optional, Any, Tuple
^
security/vpn/protection/ipv6_dns_protection.py:22:1: F401 'json' imported but unused
import json
^
security/vpn/protection/ipv6_dns_protection.py:25:1: F401 'core.base.SecurityLevel' imported but unused
from core.base import ComponentStatus, SecurityBase, SecurityLevel
^
security/vpn/protection/ipv6_dns_protection.py:29:1: E302 expected 2 blank lines, found 1
class ProtectionLevel(Enum):
^
security/vpn/protection/ipv6_dns_protection.py:36:1: E302 expected 2 blank lines, found 1
class LeakType(Enum):
^
security/vpn/protection/ipv6_dns_protection.py:44:1: E302 expected 2 blank lines, found 1
@dataclass
^
security/vpn/protection/ipv6_dns_protection.py:54:1: E302 expected 2 blank lines, found 1
@dataclass
^
security/vpn/protection/ipv6_dns_protection.py:63:1: E302 expected 2 blank lines, found 1
class IPv6DNSProtectionSystem(SecurityBase):
^
security/vpn/protection/ipv6_dns_protection.py:65:1: W293 blank line contains whitespace
    
^
security/vpn/protection/ipv6_dns_protection.py:66:80: E501 line too long (103 > 79 characters)
    def __init__(self, name: str = "IPv6DNSProtectionSystem", config: Optional[Dict[str, Any]] = None):
                                                                               ^
security/vpn/protection/ipv6_dns_protection.py:68:1: W293 blank line contains whitespace
        
^
security/vpn/protection/ipv6_dns_protection.py:74:1: W293 blank line contains whitespace
        
^
security/vpn/protection/ipv6_dns_protection.py:80:29: E261 at least two spaces before inline comment
            "208.67.222.222" # OpenDNS
                            ^
security/vpn/protection/ipv6_dns_protection.py:82:1: W293 blank line contains whitespace
        
^
security/vpn/protection/ipv6_dns_protection.py:85:1: W293 blank line contains whitespace
        
^
security/vpn/protection/ipv6_dns_protection.py:89:1: W293 blank line contains whitespace
        
^
security/vpn/protection/ipv6_dns_protection.py:94:1: W293 blank line contains whitespace
        
^
security/vpn/protection/ipv6_dns_protection.py:97:1: W293 blank line contains whitespace
        
^
security/vpn/protection/ipv6_dns_protection.py:99:1: W293 blank line contains whitespace
    
^
security/vpn/protection/ipv6_dns_protection.py:105:1: W293 blank line contains whitespace
            
^
security/vpn/protection/ipv6_dns_protection.py:109:1: W293 blank line contains whitespace
            
^
security/vpn/protection/ipv6_dns_protection.py:111:1: W293 blank line contains whitespace
            
^
security/vpn/protection/ipv6_dns_protection.py:115:1: W293 blank line contains whitespace
    
^
security/vpn/protection/ipv6_dns_protection.py:127:1: W293 blank line contains whitespace
            
^
security/vpn/protection/ipv6_dns_protection.py:136:1: W293 blank line contains whitespace
            
^
security/vpn/protection/ipv6_dns_protection.py:145:1: W293 blank line contains whitespace
            
^
security/vpn/protection/ipv6_dns_protection.py:155:1: W293 blank line contains whitespace
        
^
security/vpn/protection/ipv6_dns_protection.py:158:1: W293 blank line contains whitespace
    
^
security/vpn/protection/ipv6_dns_protection.py:166:1: W293 blank line contains whitespace
                    
^
security/vpn/protection/ipv6_dns_protection.py:169:1: W293 blank line contains whitespace
                    
^
security/vpn/protection/ipv6_dns_protection.py:172:1: W293 blank line contains whitespace
                    
^
security/vpn/protection/ipv6_dns_protection.py:174:1: W293 blank line contains whitespace
                    
^
security/vpn/protection/ipv6_dns_protection.py:177:1: W293 blank line contains whitespace
        
^
security/vpn/protection/ipv6_dns_protection.py:178:80: E501 line too long (81 > 79 characters)
        monitoring_thread = threading.Thread(target=monitoring_loop, daemon=True)
                                                                               ^
security/vpn/protection/ipv6_dns_protection.py:181:1: W293 blank line contains whitespace
    
^
security/vpn/protection/ipv6_dns_protection.py:187:1: W293 blank line contains whitespace
            
^
security/vpn/protection/ipv6_dns_protection.py:192:80: E501 line too long (83 > 79 characters)
                    details=f"Обнаружены IPv6 адреса: {', '.join(ipv6_addresses)}",
                                                                               ^
security/vpn/protection/ipv6_dns_protection.py:198:1: W293 blank line contains whitespace
                
^
security/vpn/protection/ipv6_dns_protection.py:201:1: W293 blank line contains whitespace
                
^
security/vpn/protection/ipv6_dns_protection.py:203:1: W293 blank line contains whitespace
            
^
security/vpn/protection/ipv6_dns_protection.py:206:1: W293 blank line contains whitespace
    
^
security/vpn/protection/ipv6_dns_protection.py:213:1: W293 blank line contains whitespace
            
^
security/vpn/protection/ipv6_dns_protection.py:216:1: W293 blank line contains whitespace
            
^
security/vpn/protection/ipv6_dns_protection.py:221:80: E501 line too long (86 > 79 characters)
                    details=f"Используются небезопасные DNS: {', '.join(unsafe_dns)}",
                                                                               ^
security/vpn/protection/ipv6_dns_protection.py:227:1: W293 blank line contains whitespace
                
^
security/vpn/protection/ipv6_dns_protection.py:230:1: W293 blank line contains whitespace
                
^
security/vpn/protection/ipv6_dns_protection.py:232:1: W293 blank line contains whitespace
            
^
security/vpn/protection/ipv6_dns_protection.py:235:1: W293 blank line contains whitespace
    
^
security/vpn/protection/ipv6_dns_protection.py:242:1: W293 blank line contains whitespace
            
^
security/vpn/protection/ipv6_dns_protection.py:253:1: W293 blank line contains whitespace
                
^
security/vpn/protection/ipv6_dns_protection.py:255:1: W293 blank line contains whitespace
            
^
security/vpn/protection/ipv6_dns_protection.py:258:1: W293 blank line contains whitespace
    
^
security/vpn/protection/ipv6_dns_protection.py:263:80: E501 line too long (81 > 79 characters)
            result = subprocess.run(['ifconfig'], capture_output=True, text=True)
                                                                               ^
security/vpn/protection/ipv6_dns_protection.py:265:1: W293 blank line contains whitespace
            
^
security/vpn/protection/ipv6_dns_protection.py:268:80: E501 line too long (80 > 79 characters)
                if 'inet6' in line and '::1' not in line:  # Исключаем localhost
                                                                               ^
security/vpn/protection/ipv6_dns_protection.py:273:1: W293 blank line contains whitespace
            
^
security/vpn/protection/ipv6_dns_protection.py:275:1: W293 blank line contains whitespace
            
^
security/vpn/protection/ipv6_dns_protection.py:279:1: W293 blank line contains whitespace
    
^
security/vpn/protection/ipv6_dns_protection.py:291:1: W293 blank line contains whitespace
                
^
security/vpn/protection/ipv6_dns_protection.py:295:1: W293 blank line contains whitespace
    
^
security/vpn/protection/ipv6_dns_protection.py:301:80: E501 line too long (84 > 79 characters)
                subprocess.run(['sysctl', '-w', 'net.ipv6.conf.all.disable_ipv6=1'], 
                                                                               ^
security/vpn/protection/ipv6_dns_protection.py:301:85: W291 trailing whitespace
                subprocess.run(['sysctl', '-w', 'net.ipv6.conf.all.disable_ipv6=1'], 
                                                                                    ^
security/vpn/protection/ipv6_dns_protection.py:302:30: E128 continuation line under-indented for visual indent
                             check=True, capture_output=True)
                             ^
security/vpn/protection/ipv6_dns_protection.py:303:80: E501 line too long (88 > 79 characters)
                subprocess.run(['sysctl', '-w', 'net.ipv6.conf.default.disable_ipv6=1'], 
                                                                               ^
security/vpn/protection/ipv6_dns_protection.py:303:89: W291 trailing whitespace
                subprocess.run(['sysctl', '-w', 'net.ipv6.conf.default.disable_ipv6=1'], 
                                                                                        ^
security/vpn/protection/ipv6_dns_protection.py:304:30: E128 continuation line under-indented for visual indent
                             check=True, capture_output=True)
                             ^
security/vpn/protection/ipv6_dns_protection.py:305:1: W293 blank line contains whitespace
                
^
security/vpn/protection/ipv6_dns_protection.py:307:1: W293 blank line contains whitespace
                
^
security/vpn/protection/ipv6_dns_protection.py:310:1: W293 blank line contains whitespace
    
^
security/vpn/protection/ipv6_dns_protection.py:316:80: E501 line too long (85 > 79 characters)
                subprocess.run(['cp', '/etc/resolv.conf', '/etc/resolv.conf.backup'], 
                                                                               ^
security/vpn/protection/ipv6_dns_protection.py:316:86: W291 trailing whitespace
                subprocess.run(['cp', '/etc/resolv.conf', '/etc/resolv.conf.backup'], 
                                                                                     ^
security/vpn/protection/ipv6_dns_protection.py:317:30: E128 continuation line under-indented for visual indent
                             check=True, capture_output=True)
                             ^
security/vpn/protection/ipv6_dns_protection.py:318:1: W293 blank line contains whitespace
                
^
security/vpn/protection/ipv6_dns_protection.py:323:1: W293 blank line contains whitespace
                
^
security/vpn/protection/ipv6_dns_protection.py:324:80: E501 line too long (99 > 79 characters)
                logger.info(f"Принудительно установлены безопасные DNS: {self.secure_dns_servers}")
                                                                               ^
security/vpn/protection/ipv6_dns_protection.py:325:1: W293 blank line contains whitespace
                
^
security/vpn/protection/ipv6_dns_protection.py:328:1: W293 blank line contains whitespace
    
^
security/vpn/protection/ipv6_dns_protection.py:334:75: W291 trailing whitespace
                subprocess.run(['iptables', '-A', 'OUTPUT', '-j', 'DROP'], 
                                                                          ^
security/vpn/protection/ipv6_dns_protection.py:335:30: E128 continuation line under-indented for visual indent
                             check=True, capture_output=True)
                             ^
security/vpn/protection/ipv6_dns_protection.py:336:1: W293 blank line contains whitespace
                
^
security/vpn/protection/ipv6_dns_protection.py:338:1: W293 blank line contains whitespace
                
^
security/vpn/protection/ipv6_dns_protection.py:340:1: W293 blank line contains whitespace
                
^
security/vpn/protection/ipv6_dns_protection.py:343:1: W293 blank line contains whitespace
    
^
security/vpn/protection/ipv6_dns_protection.py:348:71: W291 trailing whitespace
            subprocess.run(['iptables', '-D', 'OUTPUT', '-j', 'DROP'], 
                                                                      ^
security/vpn/protection/ipv6_dns_protection.py:349:26: E128 continuation line under-indented for visual indent
                         check=True, capture_output=True)
                         ^
security/vpn/protection/ipv6_dns_protection.py:350:1: W293 blank line contains whitespace
            
^
security/vpn/protection/ipv6_dns_protection.py:352:1: W293 blank line contains whitespace
            
^
security/vpn/protection/ipv6_dns_protection.py:355:1: W293 blank line contains whitespace
    
^
security/vpn/protection/ipv6_dns_protection.py:360:1: W293 blank line contains whitespace
            
^
security/vpn/protection/ipv6_dns_protection.py:379:1: W293 blank line contains whitespace
            
^
security/vpn/protection/ipv6_dns_protection.py:382:1: W293 blank line contains whitespace
            
^
security/vpn/protection/ipv6_dns_protection.py:386:1: W293 blank line contains whitespace
    
^
security/vpn/protection/ipv6_dns_protection.py:409:1: W293 blank line contains whitespace
    
^
security/vpn/protection/ipv6_dns_protection.py:418:1: W293 blank line contains whitespace
        
^
security/vpn/protection/ipv6_dns_protection.py:423:1: W293 blank line contains whitespace
            
^
security/vpn/protection/ipv6_dns_protection.py:427:80: E501 line too long (84 > 79 characters)
            test_results["dns_test"] = all(dns in secure_dns for dns in current_dns)
                                                                               ^
security/vpn/protection/ipv6_dns_protection.py:428:1: W293 blank line contains whitespace
            
^
security/vpn/protection/ipv6_dns_protection.py:431:1: W293 blank line contains whitespace
            
^
security/vpn/protection/ipv6_dns_protection.py:433:80: E501 line too long (95 > 79 characters)
            if all(test_results[key] for key in ["ipv6_test", "dns_test", "kill_switch_test"]):
                                                                               ^
security/vpn/protection/ipv6_dns_protection.py:435:80: E501 line too long (97 > 79 characters)
            elif any(test_results[key] for key in ["ipv6_test", "dns_test", "kill_switch_test"]):
                                                                               ^
security/vpn/protection/ipv6_dns_protection.py:439:1: W293 blank line contains whitespace
            
^
security/vpn/protection/ipv6_dns_protection.py:443:1: W293 blank line contains whitespace
        
^
security/vpn/protection/ipv6_dns_protection.py:447:1: E305 expected 2 blank lines after class or function definition, found 1
if __name__ == "__main__":
^
security/vpn/protection/ipv6_dns_protection.py:449:1: W293 blank line contains whitespace
    
^
security/vpn/protection/ipv6_dns_protection.py:452:1: W293 blank line contains whitespace
    
^
security/vpn/protection/ipv6_dns_protection.py:455:1: W293 blank line contains whitespace
    
^
security/vpn/protection/ipv6_dns_protection.py:462:1: W293 blank line contains whitespace
    
^
security/vpn/protection/ipv6_dns_protection.py:470:1: W293 blank line contains whitespace
    
^
security/vpn/protection/ipv6_dns_protection.py:472:1: W293 blank line contains whitespace
    
^
security/vpn/protection/ipv6_dns_protection.py:478:1: W293 blank line contains whitespace
    
^
security/vpn/vpn_security_system.py:7:1: F401 'asyncio' imported but unused
import asyncio
^
security/vpn/vpn_security_system.py:15:1: F401 '.core.vpn_core.VPNConnection' imported but unused
from .core.vpn_core import VPNCore, VPNConnection, VPNServer, VPNConnectionStatus
^
security/vpn/vpn_security_system.py:15:1: F401 '.core.vpn_core.VPNServer' imported but unused
from .core.vpn_core import VPNCore, VPNConnection, VPNServer, VPNConnectionStatus
^
security/vpn/vpn_security_system.py:15:1: F401 '.core.vpn_core.VPNConnectionStatus' imported but unused
from .core.vpn_core import VPNCore, VPNConnection, VPNServer, VPNConnectionStatus
^
security/vpn/vpn_security_system.py:15:80: E501 line too long (81 > 79 characters)
from .core.vpn_core import VPNCore, VPNConnection, VPNServer, VPNConnectionStatus
                                                                               ^
security/vpn/vpn_security_system.py:69:80: E501 line too long (87 > 79 characters)
                      security_level: Optional[VPNSecurityLevel] = None) -> Tuple[bool,
                                                                               ^
security/vpn/vpn_security_system.py:70:80: E501 line too long (86 > 79 characters)
                                                                                  str,
                                                                               ^
security/vpn/vpn_security_system.py:71:80: E501 line too long (91 > 79 characters)
                                                                                  Dict[str,
                                                                               ^
security/vpn/vpn_security_system.py:72:80: E501 line too long (93 > 79 characters)
                                                                                       Any]]:
                                                                               ^
security/vpn/vpn_security_system.py:85:80: E501 line too long (87 > 79 characters)
            success, message = await self.vpn_core.connect(user_id, server_id, country)
                                                                               ^
security/vpn/vpn_security_system.py:190:80: E501 line too long (97 > 79 characters)
            'success_rate': (self.successful_connections / max(self.total_connections, 1)) * 100,
                                                                               ^
security/vpn/web/vpn_web_interface.py:7:80: E501 line too long (80 > 79 characters)
from security.vpn.vpn_security_system import VPNSecuritySystem, VPNSecurityLevel
                                                                               ^
security/vpn/web/vpn_web_interface.py:10:1: F401 'json' imported but unused
import json
^
security/vpn/web/vpn_web_interface.py:12:1: F401 'datetime.datetime' imported but unused
from datetime import datetime
^
security/vpn/web/vpn_web_interface.py:13:1: F401 'typing.Dict' imported but unused
from typing import Dict, List, Optional, Any
^
security/vpn/web/vpn_web_interface.py:13:1: F401 'typing.List' imported but unused
from typing import Dict, List, Optional, Any
^
security/vpn/web/vpn_web_interface.py:13:1: F401 'typing.Optional' imported but unused
from typing import Dict, List, Optional, Any
^
security/vpn/web/vpn_web_interface.py:13:1: F401 'typing.Any' imported but unused
from typing import Dict, List, Optional, Any
^
security/vpn/web/vpn_web_interface.py:14:1: F401 'flask.render_template' imported but unused
from flask import Flask, render_template, request, jsonify, redirect, url_for
^
security/vpn/web/vpn_web_interface.py:14:1: F401 'flask.request' imported but unused
from flask import Flask, render_template, request, jsonify, redirect, url_for
^
security/vpn/web/vpn_web_interface.py:14:1: F401 'flask.redirect' imported but unused
from flask import Flask, render_template, request, jsonify, redirect, url_for
^
security/vpn/web/vpn_web_interface.py:14:1: F401 'flask.url_for' imported but unused
from flask import Flask, render_template, request, jsonify, redirect, url_for
^
security/vpn/web/vpn_web_interface.py:15:1: F401 'threading' imported but unused
import threading
^
security/vpn/web/vpn_web_interface.py:150:80: E501 line too long (90 > 79 characters)
    return '''
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>VPN Test Interface</title>
        <style>
            body {
                font-family: Arial, sans-serif;
                margin: 0;
                padding: 20px;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                min-height: 100vh;
            }
            .container {
                max-width: 600px;
                margin: 0 auto;
                background: rgba(255, 255, 255, 0.1);
                padding: 30px;
                border-radius: 20px;
                backdrop-filter: blur(10px);
                box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);
            }
            h1 {
                text-align: center;
                margin-bottom: 30px;
                font-size: 2.5em;
            }
            .status {
                background: rgba(255, 255, 255, 0.2);
                padding: 20px;
                border-radius: 10px;
                margin-bottom: 20px;
            }
            .button {
                background: #4CAF50;
                color: white;
                padding: 15px 30px;
                border: none;
                border-radius: 10px;
                cursor: pointer;
                font-size: 16px;
                margin: 10px;
                width: 100%;
                transition: background 0.3s;
            }
            .button:hover {
                background: #45a049;
            }
            .button.disconnect {
                background: #f44336;
            }
            .button.disconnect:hover {
                background: #da190b;
            }
            .info {
                background: rgba(255, 255, 255, 0.1);
                padding: 15px;
                border-radius: 10px;
                margin: 10px 0;
            }
            .loading {
                display: none;
                text-align: center;
                margin: 20px 0;
            }
            .spinner {
                border: 4px solid #f3f3f3;
                border-top: 4px solid #3498db;
                border-radius: 50%;
                width: 40px;
                height: 40px;
                animation: spin 2s linear infinite;
                margin: 0 auto;
            }
            @keyframes spin {
                0% { transform: rotate(0deg); }
                100% { transform: rotate(360deg); }
            }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>🌍 VPN Test Interface</h1>

            <div class="status" id="status">
                <h3>📊 Статус системы</h3>
                <div id="statusInfo">Загрузка...</div>
            </div>

            <div class="info">
                <h3>🇸🇬 Тестирование Singapore VPN</h3>
                <p>Нажмите кнопку для тестирования подключения к Singapore</p>
                <button class="button" onclick="testSingapore()">🚀 Тест Singapore</button>
                <div class="loading" id="loading">
                    <div class="spinner"></div>
                    <p>Тестирование подключения...</p>
                </div>
            </div>

            <div class="info">
                <h3>🌍 Доступные страны</h3>
                <div id="countries">Загрузка...</div>
            </div>

            <div class="info">
                <h3>📱 Мобильное подключение</h3>
                <p>Для подключения с телефона используйте этот же адрес</p>
                <p><strong>Адрес:</strong> <span id="currentUrl"></span></p>
            </div>
        </div>

        <script>
            // Получение текущего URL
            document.getElementById('currentUrl').textContent = window.location.href;

            // Загрузка статуса системы
            async function loadStatus() {
                try {
                    const response = await fetch('/api/status');
                    const data = await response.json();

                    document.getElementById('statusInfo').innerHTML = `
                        <p><strong>Статус:</strong> ${data.status}</p>
                        <p><strong>Сообщение:</strong> ${data.message}</p>
                        <p><strong>Всего подключений:</strong> ${data.statistics.total_connections}</p>
                        <p><strong>Успешных:</strong> ${data.statistics.successful_connections}</p>
                        <p><strong>Успешность:</strong> ${data.statistics.success_rate.toFixed(1)}%</p>
                    `;
                } catch (error) {
                    document.getElementById('statusInfo').innerHTML = '<p style="color: red;">Ошибка загрузки статуса</p>';
                }
            }

            // Загрузка списка стран
            async function loadCountries() {
                try {
                    const response = await fetch('/api/countries');
                    const data = await response.json();

                    let countriesHtml = '<ul>';
                    data.countries.forEach(country => {
                        countriesHtml += `<li>${country.name} (${country.total_servers} серверов, ${country.avg_latency.toFixed(1)}ms)</li>`;
                    });
                    countriesHtml += '</ul>';

                    document.getElementById('countries').innerHTML = countriesHtml;
                } catch (error) {
                    document.getElementById('countries').innerHTML = '<p style="color: red;">Ошибка загрузки стран</p>';
                }
            }

            // Тестирование Singapore
            async function testSingapore() {
                const loading = document.getElementById('loading');
                const button = event.target;

                loading.style.display = 'block';
                button.disabled = true;
                button.textContent = '🔄 Тестирование...';

                try {
                    const response = await fetch('/api/test_singapore');
                    const data = await response.json();

                    if (data.success) {
                        alert(`✅ Тест Singapore успешен!\\n\\nПодключение: ${data.connect_message}\\nОтключение: ${data.disconnect_message}\\nДлительность: ${data.test_duration}`);
                    } else {
                        alert(`❌ Ошибка тестирования: ${data.error}`);
                    }
                } catch (error) {
                    alert(`❌ Ошибка: ${error.message}`);
                } finally {
                    loading.style.display = 'none';
                    button.disabled = false;
                    button.textContent = '🚀 Тест Singapore';
                }
            }

            // Загрузка данных при загрузке страницы
            window.onload = function() {
                loadStatus();
                loadCountries();
            };
        </script>
    </body>
    </html>
    '''
              
                   
                    
          
            ^
security/vpn/web/vpn_web_interface.py:171:80: E501 line too long (85 > 79 characters)
    return '''
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>VPN Test Interface</title>
        <style>
            body {
                font-family: Arial, sans-serif;
                margin: 0;
                padding: 20px;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                min-height: 100vh;
            }
            .container {
                max-width: 600px;
                margin: 0 auto;
                background: rgba(255, 255, 255, 0.1);
                padding: 30px;
                border-radius: 20px;
                backdrop-filter: blur(10px);
                box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);
            }
            h1 {
                text-align: center;
                margin-bottom: 30px;
                font-size: 2.5em;
            }
            .status {
                background: rgba(255, 255, 255, 0.2);
                padding: 20px;
                border-radius: 10px;
                margin-bottom: 20px;
            }
            .button {
                background: #4CAF50;
                color: white;
                padding: 15px 30px;
                border: none;
                border-radius: 10px;
                cursor: pointer;
                font-size: 16px;
                margin: 10px;
                width: 100%;
                transition: background 0.3s;
            }
            .button:hover {
                background: #45a049;
            }
            .button.disconnect {
                background: #f44336;
            }
            .button.disconnect:hover {
                background: #da190b;
            }
            .info {
                background: rgba(255, 255, 255, 0.1);
                padding: 15px;
                border-radius: 10px;
                margin: 10px 0;
            }
            .loading {
                display: none;
                text-align: center;
                margin: 20px 0;
            }
            .spinner {
                border: 4px solid #f3f3f3;
                border-top: 4px solid #3498db;
                border-radius: 50%;
                width: 40px;
                height: 40px;
                animation: spin 2s linear infinite;
                margin: 0 auto;
            }
            @keyframes spin {
                0% { transform: rotate(0deg); }
                100% { transform: rotate(360deg); }
            }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>🌍 VPN Test Interface</h1>

            <div class="status" id="status">
                <h3>📊 Статус системы</h3>
                <div id="statusInfo">Загрузка...</div>
            </div>

            <div class="info">
                <h3>🇸🇬 Тестирование Singapore VPN</h3>
                <p>Нажмите кнопку для тестирования подключения к Singapore</p>
                <button class="button" onclick="testSingapore()">🚀 Тест Singapore</button>
                <div class="loading" id="loading">
                    <div class="spinner"></div>
                    <p>Тестирование подключения...</p>
                </div>
            </div>

            <div class="info">
                <h3>🌍 Доступные страны</h3>
                <div id="countries">Загрузка...</div>
            </div>

            <div class="info">
                <h3>📱 Мобильное подключение</h3>
                <p>Для подключения с телефона используйте этот же адрес</p>
                <p><strong>Адрес:</strong> <span id="currentUrl"></span></p>
            </div>
        </div>

        <script>
            // Получение текущего URL
            document.getElementById('currentUrl').textContent = window.location.href;

            // Загрузка статуса системы
            async function loadStatus() {
                try {
                    const response = await fetch('/api/status');
                    const data = await response.json();

                    document.getElementById('statusInfo').innerHTML = `
                        <p><strong>Статус:</strong> ${data.status}</p>
                        <p><strong>Сообщение:</strong> ${data.message}</p>
                        <p><strong>Всего подключений:</strong> ${data.statistics.total_connections}</p>
                        <p><strong>Успешных:</strong> ${data.statistics.successful_connections}</p>
                        <p><strong>Успешность:</strong> ${data.statistics.success_rate.toFixed(1)}%</p>
                    `;
                } catch (error) {
                    document.getElementById('statusInfo').innerHTML = '<p style="color: red;">Ошибка загрузки статуса</p>';
                }
            }

            // Загрузка списка стран
            async function loadCountries() {
                try {
                    const response = await fetch('/api/countries');
                    const data = await response.json();

                    let countriesHtml = '<ul>';
                    data.countries.forEach(country => {
                        countriesHtml += `<li>${country.name} (${country.total_servers} серверов, ${country.avg_latency.toFixed(1)}ms)</li>`;
                    });
                    countriesHtml += '</ul>';

                    document.getElementById('countries').innerHTML = countriesHtml;
                } catch (error) {
                    document.getElementById('countries').innerHTML = '<p style="color: red;">Ошибка загрузки стран</p>';
                }
            }

            // Тестирование Singapore
            async function testSingapore() {
                const loading = document.getElementById('loading');
                const button = event.target;

                loading.style.display = 'block';
                button.disabled = true;
                button.textContent = '🔄 Тестирование...';

                try {
                    const response = await fetch('/api/test_singapore');
                    const data = await response.json();

                    if (data.success) {
                        alert(`✅ Тест Singapore успешен!\\n\\nПодключение: ${data.connect_message}\\nОтключение: ${data.disconnect_message}\\nДлительность: ${data.test_duration}`);
                    } else {
                        alert(`❌ Ошибка тестирования: ${data.error}`);
                    }
                } catch (error) {
                    alert(`❌ Ошибка: ${error.message}`);
                } finally {
                    loading.style.display = 'none';
                    button.disabled = false;
                    button.textContent = '🚀 Тест Singapore';
                }
            }

            // Загрузка данных при загрузке страницы
            window.onload = function() {
                loadStatus();
                loadCountries();
            };
        </script>
    </body>
    </html>
    '''
              
                   
                    
          
            ^
security/vpn/web/vpn_web_interface.py:182:80: E501 line too long (103 > 79 characters)
    return '''
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>VPN Test Interface</title>
        <style>
            body {
                font-family: Arial, sans-serif;
                margin: 0;
                padding: 20px;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                min-height: 100vh;
            }
            .container {
                max-width: 600px;
                margin: 0 auto;
                background: rgba(255, 255, 255, 0.1);
                padding: 30px;
                border-radius: 20px;
                backdrop-filter: blur(10px);
                box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);
            }
            h1 {
                text-align: center;
                margin-bottom: 30px;
                font-size: 2.5em;
            }
            .status {
                background: rgba(255, 255, 255, 0.2);
                padding: 20px;
                border-radius: 10px;
                margin-bottom: 20px;
            }
            .button {
                background: #4CAF50;
                color: white;
                padding: 15px 30px;
                border: none;
                border-radius: 10px;
                cursor: pointer;
                font-size: 16px;
                margin: 10px;
                width: 100%;
                transition: background 0.3s;
            }
            .button:hover {
                background: #45a049;
            }
            .button.disconnect {
                background: #f44336;
            }
            .button.disconnect:hover {
                background: #da190b;
            }
            .info {
                background: rgba(255, 255, 255, 0.1);
                padding: 15px;
                border-radius: 10px;
                margin: 10px 0;
            }
            .loading {
                display: none;
                text-align: center;
                margin: 20px 0;
            }
            .spinner {
                border: 4px solid #f3f3f3;
                border-top: 4px solid #3498db;
                border-radius: 50%;
                width: 40px;
                height: 40px;
                animation: spin 2s linear infinite;
                margin: 0 auto;
            }
            @keyframes spin {
                0% { transform: rotate(0deg); }
                100% { transform: rotate(360deg); }
            }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>🌍 VPN Test Interface</h1>

            <div class="status" id="status">
                <h3>📊 Статус системы</h3>
                <div id="statusInfo">Загрузка...</div>
            </div>

            <div class="info">
                <h3>🇸🇬 Тестирование Singapore VPN</h3>
                <p>Нажмите кнопку для тестирования подключения к Singapore</p>
                <button class="button" onclick="testSingapore()">🚀 Тест Singapore</button>
                <div class="loading" id="loading">
                    <div class="spinner"></div>
                    <p>Тестирование подключения...</p>
                </div>
            </div>

            <div class="info">
                <h3>🌍 Доступные страны</h3>
                <div id="countries">Загрузка...</div>
            </div>

            <div class="info">
                <h3>📱 Мобильное подключение</h3>
                <p>Для подключения с телефона используйте этот же адрес</p>
                <p><strong>Адрес:</strong> <span id="currentUrl"></span></p>
            </div>
        </div>

        <script>
            // Получение текущего URL
            document.getElementById('currentUrl').textContent = window.location.href;

            // Загрузка статуса системы
            async function loadStatus() {
                try {
                    const response = await fetch('/api/status');
                    const data = await response.json();

                    document.getElementById('statusInfo').innerHTML = `
                        <p><strong>Статус:</strong> ${data.status}</p>
                        <p><strong>Сообщение:</strong> ${data.message}</p>
                        <p><strong>Всего подключений:</strong> ${data.statistics.total_connections}</p>
                        <p><strong>Успешных:</strong> ${data.statistics.successful_connections}</p>
                        <p><strong>Успешность:</strong> ${data.statistics.success_rate.toFixed(1)}%</p>
                    `;
                } catch (error) {
                    document.getElementById('statusInfo').innerHTML = '<p style="color: red;">Ошибка загрузки статуса</p>';
                }
            }

            // Загрузка списка стран
            async function loadCountries() {
                try {
                    const response = await fetch('/api/countries');
                    const data = await response.json();

                    let countriesHtml = '<ul>';
                    data.countries.forEach(country => {
                        countriesHtml += `<li>${country.name} (${country.total_servers} серверов, ${country.avg_latency.toFixed(1)}ms)</li>`;
                    });
                    countriesHtml += '</ul>';

                    document.getElementById('countries').innerHTML = countriesHtml;
                } catch (error) {
                    document.getElementById('countries').innerHTML = '<p style="color: red;">Ошибка загрузки стран</p>';
                }
            }

            // Тестирование Singapore
            async function testSingapore() {
                const loading = document.getElementById('loading');
                const button = event.target;

                loading.style.display = 'block';
                button.disabled = true;
                button.textContent = '🔄 Тестирование...';

                try {
                    const response = await fetch('/api/test_singapore');
                    const data = await response.json();

                    if (data.success) {
                        alert(`✅ Тест Singapore успешен!\\n\\nПодключение: ${data.connect_message}\\nОтключение: ${data.disconnect_message}\\nДлительность: ${data.test_duration}`);
                    } else {
                        alert(`❌ Ошибка тестирования: ${data.error}`);
                    }
                } catch (error) {
                    alert(`❌ Ошибка: ${error.message}`);
                } finally {
                    loading.style.display = 'none';
                    button.disabled = false;
                    button.textContent = '🚀 Тест Singapore';
                }
            }

            // Загрузка данных при загрузке страницы
            window.onload = function() {
                loadStatus();
                loadCountries();
            };
        </script>
    </body>
    </html>
    '''
              
                   
                    
          
            ^
security/vpn/web/vpn_web_interface.py:183:80: E501 line too long (99 > 79 characters)
    return '''
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>VPN Test Interface</title>
        <style>
            body {
                font-family: Arial, sans-serif;
                margin: 0;
                padding: 20px;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                min-height: 100vh;
            }
            .container {
                max-width: 600px;
                margin: 0 auto;
                background: rgba(255, 255, 255, 0.1);
                padding: 30px;
                border-radius: 20px;
                backdrop-filter: blur(10px);
                box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);
            }
            h1 {
                text-align: center;
                margin-bottom: 30px;
                font-size: 2.5em;
            }
            .status {
                background: rgba(255, 255, 255, 0.2);
                padding: 20px;
                border-radius: 10px;
                margin-bottom: 20px;
            }
            .button {
                background: #4CAF50;
                color: white;
                padding: 15px 30px;
                border: none;
                border-radius: 10px;
                cursor: pointer;
                font-size: 16px;
                margin: 10px;
                width: 100%;
                transition: background 0.3s;
            }
            .button:hover {
                background: #45a049;
            }
            .button.disconnect {
                background: #f44336;
            }
            .button.disconnect:hover {
                background: #da190b;
            }
            .info {
                background: rgba(255, 255, 255, 0.1);
                padding: 15px;
                border-radius: 10px;
                margin: 10px 0;
            }
            .loading {
                display: none;
                text-align: center;
                margin: 20px 0;
            }
            .spinner {
                border: 4px solid #f3f3f3;
                border-top: 4px solid #3498db;
                border-radius: 50%;
                width: 40px;
                height: 40px;
                animation: spin 2s linear infinite;
                margin: 0 auto;
            }
            @keyframes spin {
                0% { transform: rotate(0deg); }
                100% { transform: rotate(360deg); }
            }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>🌍 VPN Test Interface</h1>

            <div class="status" id="status">
                <h3>📊 Статус системы</h3>
                <div id="statusInfo">Загрузка...</div>
            </div>

            <div class="info">
                <h3>🇸🇬 Тестирование Singapore VPN</h3>
                <p>Нажмите кнопку для тестирования подключения к Singapore</p>
                <button class="button" onclick="testSingapore()">🚀 Тест Singapore</button>
                <div class="loading" id="loading">
                    <div class="spinner"></div>
                    <p>Тестирование подключения...</p>
                </div>
            </div>

            <div class="info">
                <h3>🌍 Доступные страны</h3>
                <div id="countries">Загрузка...</div>
            </div>

            <div class="info">
                <h3>📱 Мобильное подключение</h3>
                <p>Для подключения с телефона используйте этот же адрес</p>
                <p><strong>Адрес:</strong> <span id="currentUrl"></span></p>
            </div>
        </div>

        <script>
            // Получение текущего URL
            document.getElementById('currentUrl').textContent = window.location.href;

            // Загрузка статуса системы
            async function loadStatus() {
                try {
                    const response = await fetch('/api/status');
                    const data = await response.json();

                    document.getElementById('statusInfo').innerHTML = `
                        <p><strong>Статус:</strong> ${data.status}</p>
                        <p><strong>Сообщение:</strong> ${data.message}</p>
                        <p><strong>Всего подключений:</strong> ${data.statistics.total_connections}</p>
                        <p><strong>Успешных:</strong> ${data.statistics.successful_connections}</p>
                        <p><strong>Успешность:</strong> ${data.statistics.success_rate.toFixed(1)}%</p>
                    `;
                } catch (error) {
                    document.getElementById('statusInfo').innerHTML = '<p style="color: red;">Ошибка загрузки статуса</p>';
                }
            }

            // Загрузка списка стран
            async function loadCountries() {
                try {
                    const response = await fetch('/api/countries');
                    const data = await response.json();

                    let countriesHtml = '<ul>';
                    data.countries.forEach(country => {
                        countriesHtml += `<li>${country.name} (${country.total_servers} серверов, ${country.avg_latency.toFixed(1)}ms)</li>`;
                    });
                    countriesHtml += '</ul>';

                    document.getElementById('countries').innerHTML = countriesHtml;
                } catch (error) {
                    document.getElementById('countries').innerHTML = '<p style="color: red;">Ошибка загрузки стран</p>';
                }
            }

            // Тестирование Singapore
            async function testSingapore() {
                const loading = document.getElementById('loading');
                const button = event.target;

                loading.style.display = 'block';
                button.disabled = true;
                button.textContent = '🔄 Тестирование...';

                try {
                    const response = await fetch('/api/test_singapore');
                    const data = await response.json();

                    if (data.success) {
                        alert(`✅ Тест Singapore успешен!\\n\\nПодключение: ${data.connect_message}\\nОтключение: ${data.disconnect_message}\\nДлительность: ${data.test_duration}`);
                    } else {
                        alert(`❌ Ошибка тестирования: ${data.error}`);
                    }
                } catch (error) {
                    alert(`❌ Ошибка: ${error.message}`);
                } finally {
                    loading.style.display = 'none';
                    button.disabled = false;
                    button.textContent = '🚀 Тест Singapore';
                }
            }

            // Загрузка данных при загрузке страницы
            window.onload = function() {
                loadStatus();
                loadCountries();
            };
        </script>
    </body>
    </html>
    '''
              
                   
                    
          
            ^
security/vpn/web/vpn_web_interface.py:184:80: E501 line too long (103 > 79 characters)
    return '''
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>VPN Test Interface</title>
        <style>
            body {
                font-family: Arial, sans-serif;
                margin: 0;
                padding: 20px;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                min-height: 100vh;
            }
            .container {
                max-width: 600px;
                margin: 0 auto;
                background: rgba(255, 255, 255, 0.1);
                padding: 30px;
                border-radius: 20px;
                backdrop-filter: blur(10px);
                box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);
            }
            h1 {
                text-align: center;
                margin-bottom: 30px;
                font-size: 2.5em;
            }
            .status {
                background: rgba(255, 255, 255, 0.2);
                padding: 20px;
                border-radius: 10px;
                margin-bottom: 20px;
            }
            .button {
                background: #4CAF50;
                color: white;
                padding: 15px 30px;
                border: none;
                border-radius: 10px;
                cursor: pointer;
                font-size: 16px;
                margin: 10px;
                width: 100%;
                transition: background 0.3s;
            }
            .button:hover {
                background: #45a049;
            }
            .button.disconnect {
                background: #f44336;
            }
            .button.disconnect:hover {
                background: #da190b;
            }
            .info {
                background: rgba(255, 255, 255, 0.1);
                padding: 15px;
                border-radius: 10px;
                margin: 10px 0;
            }
            .loading {
                display: none;
                text-align: center;
                margin: 20px 0;
            }
            .spinner {
                border: 4px solid #f3f3f3;
                border-top: 4px solid #3498db;
                border-radius: 50%;
                width: 40px;
                height: 40px;
                animation: spin 2s linear infinite;
                margin: 0 auto;
            }
            @keyframes spin {
                0% { transform: rotate(0deg); }
                100% { transform: rotate(360deg); }
            }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>🌍 VPN Test Interface</h1>

            <div class="status" id="status">
                <h3>📊 Статус системы</h3>
                <div id="statusInfo">Загрузка...</div>
            </div>

            <div class="info">
                <h3>🇸🇬 Тестирование Singapore VPN</h3>
                <p>Нажмите кнопку для тестирования подключения к Singapore</p>
                <button class="button" onclick="testSingapore()">🚀 Тест Singapore</button>
                <div class="loading" id="loading">
                    <div class="spinner"></div>
                    <p>Тестирование подключения...</p>
                </div>
            </div>

            <div class="info">
                <h3>🌍 Доступные страны</h3>
                <div id="countries">Загрузка...</div>
            </div>

            <div class="info">
                <h3>📱 Мобильное подключение</h3>
                <p>Для подключения с телефона используйте этот же адрес</p>
                <p><strong>Адрес:</strong> <span id="currentUrl"></span></p>
            </div>
        </div>

        <script>
            // Получение текущего URL
            document.getElementById('currentUrl').textContent = window.location.href;

            // Загрузка статуса системы
            async function loadStatus() {
                try {
                    const response = await fetch('/api/status');
                    const data = await response.json();

                    document.getElementById('statusInfo').innerHTML = `
                        <p><strong>Статус:</strong> ${data.status}</p>
                        <p><strong>Сообщение:</strong> ${data.message}</p>
                        <p><strong>Всего подключений:</strong> ${data.statistics.total_connections}</p>
                        <p><strong>Успешных:</strong> ${data.statistics.successful_connections}</p>
                        <p><strong>Успешность:</strong> ${data.statistics.success_rate.toFixed(1)}%</p>
                    `;
                } catch (error) {
                    document.getElementById('statusInfo').innerHTML = '<p style="color: red;">Ошибка загрузки статуса</p>';
                }
            }

            // Загрузка списка стран
            async function loadCountries() {
                try {
                    const response = await fetch('/api/countries');
                    const data = await response.json();

                    let countriesHtml = '<ul>';
                    data.countries.forEach(country => {
                        countriesHtml += `<li>${country.name} (${country.total_servers} серверов, ${country.avg_latency.toFixed(1)}ms)</li>`;
                    });
                    countriesHtml += '</ul>';

                    document.getElementById('countries').innerHTML = countriesHtml;
                } catch (error) {
                    document.getElementById('countries').innerHTML = '<p style="color: red;">Ошибка загрузки стран</p>';
                }
            }

            // Тестирование Singapore
            async function testSingapore() {
                const loading = document.getElementById('loading');
                const button = event.target;

                loading.style.display = 'block';
                button.disabled = true;
                button.textContent = '🔄 Тестирование...';

                try {
                    const response = await fetch('/api/test_singapore');
                    const data = await response.json();

                    if (data.success) {
                        alert(`✅ Тест Singapore успешен!\\n\\nПодключение: ${data.connect_message}\\nОтключение: ${data.disconnect_message}\\nДлительность: ${data.test_duration}`);
                    } else {
                        alert(`❌ Ошибка тестирования: ${data.error}`);
                    }
                } catch (error) {
                    alert(`❌ Ошибка: ${error.message}`);
                } finally {
                    loading.style.display = 'none';
                    button.disabled = false;
                    button.textContent = '🚀 Тест Singapore';
                }
            }

            // Загрузка данных при загрузке страницы
            window.onload = function() {
                loadStatus();
                loadCountries();
            };
        </script>
    </body>
    </html>
    '''
              
                   
                    
          
            ^
security/vpn/web/vpn_web_interface.py:187:80: E501 line too long (123 > 79 characters)
    return '''
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>VPN Test Interface</title>
        <style>
            body {
                font-family: Arial, sans-serif;
                margin: 0;
                padding: 20px;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                min-height: 100vh;
            }
            .container {
                max-width: 600px;
                margin: 0 auto;
                background: rgba(255, 255, 255, 0.1);
                padding: 30px;
                border-radius: 20px;
                backdrop-filter: blur(10px);
                box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);
            }
            h1 {
                text-align: center;
                margin-bottom: 30px;
                font-size: 2.5em;
            }
            .status {
                background: rgba(255, 255, 255, 0.2);
                padding: 20px;
                border-radius: 10px;
                margin-bottom: 20px;
            }
            .button {
                background: #4CAF50;
                color: white;
                padding: 15px 30px;
                border: none;
                border-radius: 10px;
                cursor: pointer;
                font-size: 16px;
                margin: 10px;
                width: 100%;
                transition: background 0.3s;
            }
            .button:hover {
                background: #45a049;
            }
            .button.disconnect {
                background: #f44336;
            }
            .button.disconnect:hover {
                background: #da190b;
            }
            .info {
                background: rgba(255, 255, 255, 0.1);
                padding: 15px;
                border-radius: 10px;
                margin: 10px 0;
            }
            .loading {
                display: none;
                text-align: center;
                margin: 20px 0;
            }
            .spinner {
                border: 4px solid #f3f3f3;
                border-top: 4px solid #3498db;
                border-radius: 50%;
                width: 40px;
                height: 40px;
                animation: spin 2s linear infinite;
                margin: 0 auto;
            }
            @keyframes spin {
                0% { transform: rotate(0deg); }
                100% { transform: rotate(360deg); }
            }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>🌍 VPN Test Interface</h1>

            <div class="status" id="status">
                <h3>📊 Статус системы</h3>
                <div id="statusInfo">Загрузка...</div>
            </div>

            <div class="info">
                <h3>🇸🇬 Тестирование Singapore VPN</h3>
                <p>Нажмите кнопку для тестирования подключения к Singapore</p>
                <button class="button" onclick="testSingapore()">🚀 Тест Singapore</button>
                <div class="loading" id="loading">
                    <div class="spinner"></div>
                    <p>Тестирование подключения...</p>
                </div>
            </div>

            <div class="info">
                <h3>🌍 Доступные страны</h3>
                <div id="countries">Загрузка...</div>
            </div>

            <div class="info">
                <h3>📱 Мобильное подключение</h3>
                <p>Для подключения с телефона используйте этот же адрес</p>
                <p><strong>Адрес:</strong> <span id="currentUrl"></span></p>
            </div>
        </div>

        <script>
            // Получение текущего URL
            document.getElementById('currentUrl').textContent = window.location.href;

            // Загрузка статуса системы
            async function loadStatus() {
                try {
                    const response = await fetch('/api/status');
                    const data = await response.json();

                    document.getElementById('statusInfo').innerHTML = `
                        <p><strong>Статус:</strong> ${data.status}</p>
                        <p><strong>Сообщение:</strong> ${data.message}</p>
                        <p><strong>Всего подключений:</strong> ${data.statistics.total_connections}</p>
                        <p><strong>Успешных:</strong> ${data.statistics.successful_connections}</p>
                        <p><strong>Успешность:</strong> ${data.statistics.success_rate.toFixed(1)}%</p>
                    `;
                } catch (error) {
                    document.getElementById('statusInfo').innerHTML = '<p style="color: red;">Ошибка загрузки статуса</p>';
                }
            }

            // Загрузка списка стран
            async function loadCountries() {
                try {
                    const response = await fetch('/api/countries');
                    const data = await response.json();

                    let countriesHtml = '<ul>';
                    data.countries.forEach(country => {
                        countriesHtml += `<li>${country.name} (${country.total_servers} серверов, ${country.avg_latency.toFixed(1)}ms)</li>`;
                    });
                    countriesHtml += '</ul>';

                    document.getElementById('countries').innerHTML = countriesHtml;
                } catch (error) {
                    document.getElementById('countries').innerHTML = '<p style="color: red;">Ошибка загрузки стран</p>';
                }
            }

            // Тестирование Singapore
            async function testSingapore() {
                const loading = document.getElementById('loading');
                const button = event.target;

                loading.style.display = 'block';
                button.disabled = true;
                button.textContent = '🔄 Тестирование...';

                try {
                    const response = await fetch('/api/test_singapore');
                    const data = await response.json();

                    if (data.success) {
                        alert(`✅ Тест Singapore успешен!\\n\\nПодключение: ${data.connect_message}\\nОтключение: ${data.disconnect_message}\\nДлительность: ${data.test_duration}`);
                    } else {
                        alert(`❌ Ошибка тестирования: ${data.error}`);
                    }
                } catch (error) {
                    alert(`❌ Ошибка: ${error.message}`);
                } finally {
                    loading.style.display = 'none';
                    button.disabled = false;
                    button.textContent = '🚀 Тест Singapore';
                }
            }

            // Загрузка данных при загрузке страницы
            window.onload = function() {
                loadStatus();
                loadCountries();
            };
        </script>
    </body>
    </html>
    '''
              
                   
                    
          
            ^
security/vpn/web/vpn_web_interface.py:199:80: E501 line too long (141 > 79 characters)
    return '''
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>VPN Test Interface</title>
        <style>
            body {
                font-family: Arial, sans-serif;
                margin: 0;
                padding: 20px;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                min-height: 100vh;
            }
            .container {
                max-width: 600px;
                margin: 0 auto;
                background: rgba(255, 255, 255, 0.1);
                padding: 30px;
                border-radius: 20px;
                backdrop-filter: blur(10px);
                box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);
            }
            h1 {
                text-align: center;
                margin-bottom: 30px;
                font-size: 2.5em;
            }
            .status {
                background: rgba(255, 255, 255, 0.2);
                padding: 20px;
                border-radius: 10px;
                margin-bottom: 20px;
            }
            .button {
                background: #4CAF50;
                color: white;
                padding: 15px 30px;
                border: none;
                border-radius: 10px;
                cursor: pointer;
                font-size: 16px;
                margin: 10px;
                width: 100%;
                transition: background 0.3s;
            }
            .button:hover {
                background: #45a049;
            }
            .button.disconnect {
                background: #f44336;
            }
            .button.disconnect:hover {
                background: #da190b;
            }
            .info {
                background: rgba(255, 255, 255, 0.1);
                padding: 15px;
                border-radius: 10px;
                margin: 10px 0;
            }
            .loading {
                display: none;
                text-align: center;
                margin: 20px 0;
            }
            .spinner {
                border: 4px solid #f3f3f3;
                border-top: 4px solid #3498db;
                border-radius: 50%;
                width: 40px;
                height: 40px;
                animation: spin 2s linear infinite;
                margin: 0 auto;
            }
            @keyframes spin {
                0% { transform: rotate(0deg); }
                100% { transform: rotate(360deg); }
            }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>🌍 VPN Test Interface</h1>

            <div class="status" id="status">
                <h3>📊 Статус системы</h3>
                <div id="statusInfo">Загрузка...</div>
            </div>

            <div class="info">
                <h3>🇸🇬 Тестирование Singapore VPN</h3>
                <p>Нажмите кнопку для тестирования подключения к Singapore</p>
                <button class="button" onclick="testSingapore()">🚀 Тест Singapore</button>
                <div class="loading" id="loading">
                    <div class="spinner"></div>
                    <p>Тестирование подключения...</p>
                </div>
            </div>

            <div class="info">
                <h3>🌍 Доступные страны</h3>
                <div id="countries">Загрузка...</div>
            </div>

            <div class="info">
                <h3>📱 Мобильное подключение</h3>
                <p>Для подключения с телефона используйте этот же адрес</p>
                <p><strong>Адрес:</strong> <span id="currentUrl"></span></p>
            </div>
        </div>

        <script>
            // Получение текущего URL
            document.getElementById('currentUrl').textContent = window.location.href;

            // Загрузка статуса системы
            async function loadStatus() {
                try {
                    const response = await fetch('/api/status');
                    const data = await response.json();

                    document.getElementById('statusInfo').innerHTML = `
                        <p><strong>Статус:</strong> ${data.status}</p>
                        <p><strong>Сообщение:</strong> ${data.message}</p>
                        <p><strong>Всего подключений:</strong> ${data.statistics.total_connections}</p>
                        <p><strong>Успешных:</strong> ${data.statistics.successful_connections}</p>
                        <p><strong>Успешность:</strong> ${data.statistics.success_rate.toFixed(1)}%</p>
                    `;
                } catch (error) {
                    document.getElementById('statusInfo').innerHTML = '<p style="color: red;">Ошибка загрузки статуса</p>';
                }
            }

            // Загрузка списка стран
            async function loadCountries() {
                try {
                    const response = await fetch('/api/countries');
                    const data = await response.json();

                    let countriesHtml = '<ul>';
                    data.countries.forEach(country => {
                        countriesHtml += `<li>${country.name} (${country.total_servers} серверов, ${country.avg_latency.toFixed(1)}ms)</li>`;
                    });
                    countriesHtml += '</ul>';

                    document.getElementById('countries').innerHTML = countriesHtml;
                } catch (error) {
                    document.getElementById('countries').innerHTML = '<p style="color: red;">Ошибка загрузки стран</p>';
                }
            }

            // Тестирование Singapore
            async function testSingapore() {
                const loading = document.getElementById('loading');
                const button = event.target;

                loading.style.display = 'block';
                button.disabled = true;
                button.textContent = '🔄 Тестирование...';

                try {
                    const response = await fetch('/api/test_singapore');
                    const data = await response.json();

                    if (data.success) {
                        alert(`✅ Тест Singapore успешен!\\n\\nПодключение: ${data.connect_message}\\nОтключение: ${data.disconnect_message}\\nДлительность: ${data.test_duration}`);
                    } else {
                        alert(`❌ Ошибка тестирования: ${data.error}`);
                    }
                } catch (error) {
                    alert(`❌ Ошибка: ${error.message}`);
                } finally {
                    loading.style.display = 'none';
                    button.disabled = false;
                    button.textContent = '🚀 Тест Singapore';
                }
            }

            // Загрузка данных при загрузке страницы
            window.onload = function() {
                loadStatus();
                loadCountries();
            };
        </script>
    </body>
    </html>
    '''
              
                   
                    
          
            ^
security/vpn/web/vpn_web_interface.py:203:80: E501 line too long (83 > 79 characters)
    return '''
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>VPN Test Interface</title>
        <style>
            body {
                font-family: Arial, sans-serif;
                margin: 0;
                padding: 20px;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                min-height: 100vh;
            }
            .container {
                max-width: 600px;
                margin: 0 auto;
                background: rgba(255, 255, 255, 0.1);
                padding: 30px;
                border-radius: 20px;
                backdrop-filter: blur(10px);
                box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);
            }
            h1 {
                text-align: center;
                margin-bottom: 30px;
                font-size: 2.5em;
            }
            .status {
                background: rgba(255, 255, 255, 0.2);
                padding: 20px;
                border-radius: 10px;
                margin-bottom: 20px;
            }
            .button {
                background: #4CAF50;
                color: white;
                padding: 15px 30px;
                border: none;
                border-radius: 10px;
                cursor: pointer;
                font-size: 16px;
                margin: 10px;
                width: 100%;
                transition: background 0.3s;
            }
            .button:hover {
                background: #45a049;
            }
            .button.disconnect {
                background: #f44336;
            }
            .button.disconnect:hover {
                background: #da190b;
            }
            .info {
                background: rgba(255, 255, 255, 0.1);
                padding: 15px;
                border-radius: 10px;
                margin: 10px 0;
            }
            .loading {
                display: none;
                text-align: center;
                margin: 20px 0;
            }
            .spinner {
                border: 4px solid #f3f3f3;
                border-top: 4px solid #3498db;
                border-radius: 50%;
                width: 40px;
                height: 40px;
                animation: spin 2s linear infinite;
                margin: 0 auto;
            }
            @keyframes spin {
                0% { transform: rotate(0deg); }
                100% { transform: rotate(360deg); }
            }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>🌍 VPN Test Interface</h1>

            <div class="status" id="status">
                <h3>📊 Статус системы</h3>
                <div id="statusInfo">Загрузка...</div>
            </div>

            <div class="info">
                <h3>🇸🇬 Тестирование Singapore VPN</h3>
                <p>Нажмите кнопку для тестирования подключения к Singapore</p>
                <button class="button" onclick="testSingapore()">🚀 Тест Singapore</button>
                <div class="loading" id="loading">
                    <div class="spinner"></div>
                    <p>Тестирование подключения...</p>
                </div>
            </div>

            <div class="info">
                <h3>🌍 Доступные страны</h3>
                <div id="countries">Загрузка...</div>
            </div>

            <div class="info">
                <h3>📱 Мобильное подключение</h3>
                <p>Для подключения с телефона используйте этот же адрес</p>
                <p><strong>Адрес:</strong> <span id="currentUrl"></span></p>
            </div>
        </div>

        <script>
            // Получение текущего URL
            document.getElementById('currentUrl').textContent = window.location.href;

            // Загрузка статуса системы
            async function loadStatus() {
                try {
                    const response = await fetch('/api/status');
                    const data = await response.json();

                    document.getElementById('statusInfo').innerHTML = `
                        <p><strong>Статус:</strong> ${data.status}</p>
                        <p><strong>Сообщение:</strong> ${data.message}</p>
                        <p><strong>Всего подключений:</strong> ${data.statistics.total_connections}</p>
                        <p><strong>Успешных:</strong> ${data.statistics.successful_connections}</p>
                        <p><strong>Успешность:</strong> ${data.statistics.success_rate.toFixed(1)}%</p>
                    `;
                } catch (error) {
                    document.getElementById('statusInfo').innerHTML = '<p style="color: red;">Ошибка загрузки статуса</p>';
                }
            }

            // Загрузка списка стран
            async function loadCountries() {
                try {
                    const response = await fetch('/api/countries');
                    const data = await response.json();

                    let countriesHtml = '<ul>';
                    data.countries.forEach(country => {
                        countriesHtml += `<li>${country.name} (${country.total_servers} серверов, ${country.avg_latency.toFixed(1)}ms)</li>`;
                    });
                    countriesHtml += '</ul>';

                    document.getElementById('countries').innerHTML = countriesHtml;
                } catch (error) {
                    document.getElementById('countries').innerHTML = '<p style="color: red;">Ошибка загрузки стран</p>';
                }
            }

            // Тестирование Singapore
            async function testSingapore() {
                const loading = document.getElementById('loading');
                const button = event.target;

                loading.style.display = 'block';
                button.disabled = true;
                button.textContent = '🔄 Тестирование...';

                try {
                    const response = await fetch('/api/test_singapore');
                    const data = await response.json();

                    if (data.success) {
                        alert(`✅ Тест Singapore успешен!\\n\\nПодключение: ${data.connect_message}\\nОтключение: ${data.disconnect_message}\\nДлительность: ${data.test_duration}`);
                    } else {
                        alert(`❌ Ошибка тестирования: ${data.error}`);
                    }
                } catch (error) {
                    alert(`❌ Ошибка: ${error.message}`);
                } finally {
                    loading.style.display = 'none';
                    button.disabled = false;
                    button.textContent = '🚀 Тест Singapore';
                }
            }

            // Загрузка данных при загрузке страницы
            window.onload = function() {
                loadStatus();
                loadCountries();
            };
        </script>
    </body>
    </html>
    '''
              
                   
                    
          
            ^
security/vpn/web/vpn_web_interface.py:205:80: E501 line too long (120 > 79 characters)
    return '''
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>VPN Test Interface</title>
        <style>
            body {
                font-family: Arial, sans-serif;
                margin: 0;
                padding: 20px;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                min-height: 100vh;
            }
            .container {
                max-width: 600px;
                margin: 0 auto;
                background: rgba(255, 255, 255, 0.1);
                padding: 30px;
                border-radius: 20px;
                backdrop-filter: blur(10px);
                box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);
            }
            h1 {
                text-align: center;
                margin-bottom: 30px;
                font-size: 2.5em;
            }
            .status {
                background: rgba(255, 255, 255, 0.2);
                padding: 20px;
                border-radius: 10px;
                margin-bottom: 20px;
            }
            .button {
                background: #4CAF50;
                color: white;
                padding: 15px 30px;
                border: none;
                border-radius: 10px;
                cursor: pointer;
                font-size: 16px;
                margin: 10px;
                width: 100%;
                transition: background 0.3s;
            }
            .button:hover {
                background: #45a049;
            }
            .button.disconnect {
                background: #f44336;
            }
            .button.disconnect:hover {
                background: #da190b;
            }
            .info {
                background: rgba(255, 255, 255, 0.1);
                padding: 15px;
                border-radius: 10px;
                margin: 10px 0;
            }
            .loading {
                display: none;
                text-align: center;
                margin: 20px 0;
            }
            .spinner {
                border: 4px solid #f3f3f3;
                border-top: 4px solid #3498db;
                border-radius: 50%;
                width: 40px;
                height: 40px;
                animation: spin 2s linear infinite;
                margin: 0 auto;
            }
            @keyframes spin {
                0% { transform: rotate(0deg); }
                100% { transform: rotate(360deg); }
            }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>🌍 VPN Test Interface</h1>

            <div class="status" id="status">
                <h3>📊 Статус системы</h3>
                <div id="statusInfo">Загрузка...</div>
            </div>

            <div class="info">
                <h3>🇸🇬 Тестирование Singapore VPN</h3>
                <p>Нажмите кнопку для тестирования подключения к Singapore</p>
                <button class="button" onclick="testSingapore()">🚀 Тест Singapore</button>
                <div class="loading" id="loading">
                    <div class="spinner"></div>
                    <p>Тестирование подключения...</p>
                </div>
            </div>

            <div class="info">
                <h3>🌍 Доступные страны</h3>
                <div id="countries">Загрузка...</div>
            </div>

            <div class="info">
                <h3>📱 Мобильное подключение</h3>
                <p>Для подключения с телефона используйте этот же адрес</p>
                <p><strong>Адрес:</strong> <span id="currentUrl"></span></p>
            </div>
        </div>

        <script>
            // Получение текущего URL
            document.getElementById('currentUrl').textContent = window.location.href;

            // Загрузка статуса системы
            async function loadStatus() {
                try {
                    const response = await fetch('/api/status');
                    const data = await response.json();

                    document.getElementById('statusInfo').innerHTML = `
                        <p><strong>Статус:</strong> ${data.status}</p>
                        <p><strong>Сообщение:</strong> ${data.message}</p>
                        <p><strong>Всего подключений:</strong> ${data.statistics.total_connections}</p>
                        <p><strong>Успешных:</strong> ${data.statistics.successful_connections}</p>
                        <p><strong>Успешность:</strong> ${data.statistics.success_rate.toFixed(1)}%</p>
                    `;
                } catch (error) {
                    document.getElementById('statusInfo').innerHTML = '<p style="color: red;">Ошибка загрузки статуса</p>';
                }
            }

            // Загрузка списка стран
            async function loadCountries() {
                try {
                    const response = await fetch('/api/countries');
                    const data = await response.json();

                    let countriesHtml = '<ul>';
                    data.countries.forEach(country => {
                        countriesHtml += `<li>${country.name} (${country.total_servers} серверов, ${country.avg_latency.toFixed(1)}ms)</li>`;
                    });
                    countriesHtml += '</ul>';

                    document.getElementById('countries').innerHTML = countriesHtml;
                } catch (error) {
                    document.getElementById('countries').innerHTML = '<p style="color: red;">Ошибка загрузки стран</p>';
                }
            }

            // Тестирование Singapore
            async function testSingapore() {
                const loading = document.getElementById('loading');
                const button = event.target;

                loading.style.display = 'block';
                button.disabled = true;
                button.textContent = '🔄 Тестирование...';

                try {
                    const response = await fetch('/api/test_singapore');
                    const data = await response.json();

                    if (data.success) {
                        alert(`✅ Тест Singapore успешен!\\n\\nПодключение: ${data.connect_message}\\nОтключение: ${data.disconnect_message}\\nДлительность: ${data.test_duration}`);
                    } else {
                        alert(`❌ Ошибка тестирования: ${data.error}`);
                    }
                } catch (error) {
                    alert(`❌ Ошибка: ${error.message}`);
                } finally {
                    loading.style.display = 'none';
                    button.disabled = false;
                    button.textContent = '🚀 Тест Singapore';
                }
            }

            // Загрузка данных при загрузке страницы
            window.onload = function() {
                loadStatus();
                loadCountries();
            };
        </script>
    </body>
    </html>
    '''
              
                   
                    
          
            ^
security/vpn/web/vpn_web_interface.py:223:80: E501 line too long (180 > 79 characters)
    return '''
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>VPN Test Interface</title>
        <style>
            body {
                font-family: Arial, sans-serif;
                margin: 0;
                padding: 20px;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                min-height: 100vh;
            }
            .container {
                max-width: 600px;
                margin: 0 auto;
                background: rgba(255, 255, 255, 0.1);
                padding: 30px;
                border-radius: 20px;
                backdrop-filter: blur(10px);
                box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);
            }
            h1 {
                text-align: center;
                margin-bottom: 30px;
                font-size: 2.5em;
            }
            .status {
                background: rgba(255, 255, 255, 0.2);
                padding: 20px;
                border-radius: 10px;
                margin-bottom: 20px;
            }
            .button {
                background: #4CAF50;
                color: white;
                padding: 15px 30px;
                border: none;
                border-radius: 10px;
                cursor: pointer;
                font-size: 16px;
                margin: 10px;
                width: 100%;
                transition: background 0.3s;
            }
            .button:hover {
                background: #45a049;
            }
            .button.disconnect {
                background: #f44336;
            }
            .button.disconnect:hover {
                background: #da190b;
            }
            .info {
                background: rgba(255, 255, 255, 0.1);
                padding: 15px;
                border-radius: 10px;
                margin: 10px 0;
            }
            .loading {
                display: none;
                text-align: center;
                margin: 20px 0;
            }
            .spinner {
                border: 4px solid #f3f3f3;
                border-top: 4px solid #3498db;
                border-radius: 50%;
                width: 40px;
                height: 40px;
                animation: spin 2s linear infinite;
                margin: 0 auto;
            }
            @keyframes spin {
                0% { transform: rotate(0deg); }
                100% { transform: rotate(360deg); }
            }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>🌍 VPN Test Interface</h1>

            <div class="status" id="status">
                <h3>📊 Статус системы</h3>
                <div id="statusInfo">Загрузка...</div>
            </div>

            <div class="info">
                <h3>🇸🇬 Тестирование Singapore VPN</h3>
                <p>Нажмите кнопку для тестирования подключения к Singapore</p>
                <button class="button" onclick="testSingapore()">🚀 Тест Singapore</button>
                <div class="loading" id="loading">
                    <div class="spinner"></div>
                    <p>Тестирование подключения...</p>
                </div>
            </div>

            <div class="info">
                <h3>🌍 Доступные страны</h3>
                <div id="countries">Загрузка...</div>
            </div>

            <div class="info">
                <h3>📱 Мобильное подключение</h3>
                <p>Для подключения с телефона используйте этот же адрес</p>
                <p><strong>Адрес:</strong> <span id="currentUrl"></span></p>
            </div>
        </div>

        <script>
            // Получение текущего URL
            document.getElementById('currentUrl').textContent = window.location.href;

            // Загрузка статуса системы
            async function loadStatus() {
                try {
                    const response = await fetch('/api/status');
                    const data = await response.json();

                    document.getElementById('statusInfo').innerHTML = `
                        <p><strong>Статус:</strong> ${data.status}</p>
                        <p><strong>Сообщение:</strong> ${data.message}</p>
                        <p><strong>Всего подключений:</strong> ${data.statistics.total_connections}</p>
                        <p><strong>Успешных:</strong> ${data.statistics.successful_connections}</p>
                        <p><strong>Успешность:</strong> ${data.statistics.success_rate.toFixed(1)}%</p>
                    `;
                } catch (error) {
                    document.getElementById('statusInfo').innerHTML = '<p style="color: red;">Ошибка загрузки статуса</p>';
                }
            }

            // Загрузка списка стран
            async function loadCountries() {
                try {
                    const response = await fetch('/api/countries');
                    const data = await response.json();

                    let countriesHtml = '<ul>';
                    data.countries.forEach(country => {
                        countriesHtml += `<li>${country.name} (${country.total_servers} серверов, ${country.avg_latency.toFixed(1)}ms)</li>`;
                    });
                    countriesHtml += '</ul>';

                    document.getElementById('countries').innerHTML = countriesHtml;
                } catch (error) {
                    document.getElementById('countries').innerHTML = '<p style="color: red;">Ошибка загрузки стран</p>';
                }
            }

            // Тестирование Singapore
            async function testSingapore() {
                const loading = document.getElementById('loading');
                const button = event.target;

                loading.style.display = 'block';
                button.disabled = true;
                button.textContent = '🔄 Тестирование...';

                try {
                    const response = await fetch('/api/test_singapore');
                    const data = await response.json();

                    if (data.success) {
                        alert(`✅ Тест Singapore успешен!\\n\\nПодключение: ${data.connect_message}\\nОтключение: ${data.disconnect_message}\\nДлительность: ${data.test_duration}`);
                    } else {
                        alert(`❌ Ошибка тестирования: ${data.error}`);
                    }
                } catch (error) {
                    alert(`❌ Ошибка: ${error.message}`);
                } finally {
                    loading.style.display = 'none';
                    button.disabled = false;
                    button.textContent = '🚀 Тест Singapore';
                }
            }

            // Загрузка данных при загрузке страницы
            window.onload = function() {
                loadStatus();
                loadCountries();
            };
        </script>
    </body>
    </html>
    '''
              
                   
                    
          
            ^
security/vpn/web/vpn_web_interface.py:294:80: E501 line too long (97 > 79 characters)
                    s['latency'] for s in country_data['servers']) / len(country_data['servers'])
                                                                               ^
security/vpn/web/vpn_web_interface.py:352:80: E501 line too long (88 > 79 characters)
        print("🇸🇬 Для тестирования Singapore: http://localhost:5000/api/test_singapore")
                                                                               ^
security/zero_trust_manager.py:8:1: F401 'hmac' imported but unused
import hmac
^
security/zero_trust_manager.py:10:1: F401 'json' imported but unused
import json
^
security/zero_trust_manager.py:12:1: F401 'typing.Set' imported but unused
from typing import Dict, List, Optional, Set, Tuple
^
security/zero_trust_manager.py:16:1: F401 'asyncio' imported but unused
import asyncio
^
security/zero_trust_manager.py:17:1: F401 'base64' imported but unused
import base64
^
security/zero_trust_manager.py:22:1: F401 'core.base.SecurityBase' imported but unused
from core.base import SecurityBase, ComponentStatus, SecurityLevel
^
security/zero_trust_manager.py:22:1: F401 'core.base.ComponentStatus' imported but unused
from core.base import SecurityBase, ComponentStatus, SecurityLevel
^
security/zero_trust_manager.py:22:1: F401 'core.base.SecurityLevel' imported but unused
from core.base import SecurityBase, ComponentStatus, SecurityLevel
^
security/zero_trust_manager.py:22:1: E402 module level import not at top of file
from core.base import SecurityBase, ComponentStatus, SecurityLevel
^
security/zero_trust_manager.py:25:1: E302 expected 2 blank lines, found 1
class PBKDF2HMAC:
^
security/zero_trust_manager.py:32:1: W293 blank line contains whitespace
    
^
security/zero_trust_manager.py:37:80: E501 line too long (85 > 79 characters)
            key = hashlib.pbkdf2_hmac('sha256', password, self.salt, self.iterations)
                                                                               ^
security/zero_trust_manager.py:40:13: F811 redefinition of unused 'hmac' from line 8
            import hmac
            ^
security/zero_trust_manager.py:46:1: E302 expected 2 blank lines, found 1
class hashes:
^
security/zero_trust_manager.py:50:1: E302 expected 2 blank lines, found 1
class TrustLevel(Enum):
^
security/zero_trust_manager.py:58:1: E302 expected 2 blank lines, found 1
class VerificationStatus(Enum):
^
security/zero_trust_manager.py:66:1: E302 expected 2 blank lines, found 1
@dataclass
^
security/zero_trust_manager.py:85:1: E302 expected 2 blank lines, found 1
@dataclass
^
security/zero_trust_manager.py:98:1: E302 expected 2 blank lines, found 1
@dataclass
^
security/zero_trust_manager.py:112:1: E302 expected 2 blank lines, found 1
@dataclass
^
security/zero_trust_manager.py:124:1: E302 expected 2 blank lines, found 1
class ZeroTrustManager:
^
security/zero_trust_manager.py:129:1: W293 blank line contains whitespace
    
^
security/zero_trust_manager.py:134:1: W293 blank line contains whitespace
        
^
security/zero_trust_manager.py:141:1: W293 blank line contains whitespace
        
^
security/zero_trust_manager.py:145:1: W293 blank line contains whitespace
        
^
security/zero_trust_manager.py:156:1: W293 blank line contains whitespace
        
^
security/zero_trust_manager.py:159:1: W293 blank line contains whitespace
        
^
security/zero_trust_manager.py:163:1: W293 blank line contains whitespace
    
^
security/zero_trust_manager.py:172:80: E501 line too long (93 > 79 characters)
                required_verifications=["mfa", "device_verification", "behavioral_analysis"],
                                                                               ^
security/zero_trust_manager.py:195:1: W293 blank line contains whitespace
        
^
security/zero_trust_manager.py:198:1: W293 blank line contains whitespace
    
^
security/zero_trust_manager.py:205:1: W293 blank line contains whitespace
            
^
security/zero_trust_manager.py:208:1: W293 blank line contains whitespace
            
^
security/zero_trust_manager.py:209:80: E501 line too long (92 > 79 characters)
            self.logger.info(f"Устройство зарегистрировано: {device_fingerprint.device_id}")
                                                                               ^
security/zero_trust_manager.py:211:1: W293 blank line contains whitespace
            
^
security/zero_trust_manager.py:215:1: W293 blank line contains whitespace
    
^
security/zero_trust_manager.py:216:80: E501 line too long (83 > 79 characters)
    def _generate_device_key(self, device_fingerprint: DeviceFingerprint) -> bytes:
                                                                               ^
security/zero_trust_manager.py:218:80: E501 line too long (117 > 79 characters)
        device_data = f"{device_fingerprint.hardware_id}{device_fingerprint.os_info}{device_fingerprint.mac_address}"
                                                                               ^
security/zero_trust_manager.py:226:1: W293 blank line contains whitespace
    
^
security/zero_trust_manager.py:231:80: E501 line too long (86 > 79 characters)
            self.logger.info(f"Пользователь зарегистрирован: {user_identity.user_id}")
                                                                               ^
security/zero_trust_manager.py:233:1: W293 blank line contains whitespace
            
^
security/zero_trust_manager.py:237:1: W293 blank line contains whitespace
    
^
security/zero_trust_manager.py:238:74: W291 trailing whitespace
    def request_access(self, user_id: str, device_id: str, resource: str, 
                                                                         ^
security/zero_trust_manager.py:239:23: E128 continuation line under-indented for visual indent
                      action: str, context: Dict[str, any]) -> AccessRequest:
                      ^
security/zero_trust_manager.py:241:80: E501 line too long (120 > 79 characters)
        request_id = f"req_{int(time.time())}_{hashlib.md5(f'{user_id}{device_id}{resource}'.encode()).hexdigest()[:8]}"
                                                                               ^
security/zero_trust_manager.py:242:1: W293 blank line contains whitespace
        
^
security/zero_trust_manager.py:252:1: W293 blank line contains whitespace
        
^
security/zero_trust_manager.py:256:1: W293 blank line contains whitespace
        
^
security/zero_trust_manager.py:260:1: W293 blank line contains whitespace
        
^
security/zero_trust_manager.py:264:1: W293 blank line contains whitespace
        
^
security/zero_trust_manager.py:265:80: E501 line too long (121 > 79 characters)
        self.logger.info(f"Запрос на доступ создан: {request_id} (риск: {risk_score:.2f}, доверие: {trust_level.value})")
                                                                               ^
security/zero_trust_manager.py:266:1: W293 blank line contains whitespace
        
^
security/zero_trust_manager.py:268:1: W293 blank line contains whitespace
    
^
security/zero_trust_manager.py:272:1: W293 blank line contains whitespace
        
^
security/zero_trust_manager.py:282:1: W293 blank line contains whitespace
        
^
security/zero_trust_manager.py:292:1: W293 blank line contains whitespace
        
^
security/zero_trust_manager.py:297:80: E501 line too long (90 > 79 characters)
            if ip.startswith('192.168.') or ip.startswith('10.') or ip.startswith('172.'):
                                                                               ^
security/zero_trust_manager.py:301:1: W293 blank line contains whitespace
        
^
security/zero_trust_manager.py:306:1: W293 blank line contains whitespace
        
^
security/zero_trust_manager.py:308:72: W291 trailing whitespace
        recent_requests = [req for req in self.access_requests.values() 
                                                                       ^
security/zero_trust_manager.py:309:27: E128 continuation line under-indented for visual indent
                          if req.user_id == access_request.user_id and 
                          ^
security/zero_trust_manager.py:309:71: W291 trailing whitespace
                          if req.user_id == access_request.user_id and 
                                                                      ^
security/zero_trust_manager.py:310:27: E128 continuation line under-indented for visual indent
                          req.timestamp > datetime.now() - timedelta(minutes=5)]
                          ^
security/zero_trust_manager.py:310:80: E501 line too long (80 > 79 characters)
                          req.timestamp > datetime.now() - timedelta(minutes=5)]
                                                                               ^
security/zero_trust_manager.py:313:1: W293 blank line contains whitespace
        
^
security/zero_trust_manager.py:316:1: W293 blank line contains whitespace
    
^
security/zero_trust_manager.py:317:80: E501 line too long (82 > 79 characters)
    def _calculate_trust_level(self, access_request: AccessRequest) -> TrustLevel:
                                                                               ^
security/zero_trust_manager.py:329:1: W293 blank line contains whitespace
    
^
security/zero_trust_manager.py:330:69: W291 trailing whitespace
    def verify_access(self, request_id: str, verification_type: str, 
                                                                    ^
security/zero_trust_manager.py:331:22: E128 continuation line under-indented for visual indent
                     verification_data: Dict[str, any]) -> bool:
                     ^
security/zero_trust_manager.py:335:1: W293 blank line contains whitespace
        
^
security/zero_trust_manager.py:337:1: W293 blank line contains whitespace
        
^
security/zero_trust_manager.py:346:80: E501 line too long (80 > 79 characters)
                return self._verify_biometric(access_request, verification_data)
                                                                               ^
security/zero_trust_manager.py:348:80: E501 line too long (88 > 79 characters)
                self.logger.warning(f"Неизвестный тип верификации: {verification_type}")
                                                                               ^
security/zero_trust_manager.py:350:1: W293 blank line contains whitespace
                
^
security/zero_trust_manager.py:354:1: W293 blank line contains whitespace
    
^
security/zero_trust_manager.py:355:80: E501 line too long (100 > 79 characters)
    def _verify_mfa(self, access_request: AccessRequest, verification_data: Dict[str, any]) -> bool:
                                                                               ^
security/zero_trust_manager.py:358:1: W293 blank line contains whitespace
        
^
security/zero_trust_manager.py:361:1: W293 blank line contains whitespace
        
^
security/zero_trust_manager.py:365:1: W293 blank line contains whitespace
        
^
security/zero_trust_manager.py:370:1: W293 blank line contains whitespace
        
^
security/zero_trust_manager.py:371:80: E501 line too long (88 > 79 characters)
        # Упрощенная проверка MFA (в реальной системе здесь была бы проверка с сервером)
                                                                               ^
security/zero_trust_manager.py:376:1: W293 blank line contains whitespace
        
^
security/zero_trust_manager.py:378:1: W293 blank line contains whitespace
    
^
security/zero_trust_manager.py:379:80: E501 line too long (103 > 79 characters)
    def _verify_device(self, access_request: AccessRequest, verification_data: Dict[str, any]) -> bool:
                                                                               ^
security/zero_trust_manager.py:382:1: W293 blank line contains whitespace
        
^
security/zero_trust_manager.py:385:1: W293 blank line contains whitespace
        
^
security/zero_trust_manager.py:387:1: W293 blank line contains whitespace
        
^
security/zero_trust_manager.py:392:1: W293 blank line contains whitespace
        
^
security/zero_trust_manager.py:397:1: W293 blank line contains whitespace
        
^
security/zero_trust_manager.py:401:1: W293 blank line contains whitespace
        
^
security/zero_trust_manager.py:403:1: W293 blank line contains whitespace
    
^
security/zero_trust_manager.py:404:80: E501 line too long (105 > 79 characters)
    def _verify_behavior(self, access_request: AccessRequest, verification_data: Dict[str, any]) -> bool:
                                                                               ^
security/zero_trust_manager.py:407:1: W293 blank line contains whitespace
        
^
security/zero_trust_manager.py:410:1: W293 blank line contains whitespace
        
^
security/zero_trust_manager.py:415:1: W293 blank line contains whitespace
        
^
security/zero_trust_manager.py:420:1: W293 blank line contains whitespace
        
^
security/zero_trust_manager.py:422:72: W291 trailing whitespace
        recent_requests = [req for req in self.access_requests.values() 
                                                                       ^
security/zero_trust_manager.py:423:27: E128 continuation line under-indented for visual indent
                          if req.user_id == user_id and 
                          ^
security/zero_trust_manager.py:423:56: W291 trailing whitespace
                          if req.user_id == user_id and 
                                                       ^
security/zero_trust_manager.py:424:27: E128 continuation line under-indented for visual indent
                          req.timestamp > datetime.now() - timedelta(hours=1)]
                          ^
security/zero_trust_manager.py:427:1: W293 blank line contains whitespace
        
^
security/zero_trust_manager.py:431:1: W293 blank line contains whitespace
        
^
security/zero_trust_manager.py:433:1: W293 blank line contains whitespace
    
^
security/zero_trust_manager.py:434:80: E501 line too long (106 > 79 characters)
    def _verify_biometric(self, access_request: AccessRequest, verification_data: Dict[str, any]) -> bool:
                                                                               ^
security/zero_trust_manager.py:440:1: W293 blank line contains whitespace
        
^
security/zero_trust_manager.py:443:1: W293 blank line contains whitespace
    
^
security/zero_trust_manager.py:446:80: E501 line too long (107 > 79 characters)
        device_data = f"{device.hardware_id}{device.os_info}{device.mac_address}{device.screen_resolution}"
                                                                               ^
security/zero_trust_manager.py:448:1: W293 blank line contains whitespace
    
^
security/zero_trust_manager.py:453:1: W293 blank line contains whitespace
        
^
security/zero_trust_manager.py:455:1: W293 blank line contains whitespace
        
^
security/zero_trust_manager.py:460:1: W293 blank line contains whitespace
        
^
security/zero_trust_manager.py:462:80: E501 line too long (104 > 79 characters)
        if access_request.trust_level.value not in self._get_trust_levels_above(policy.min_trust_level):
                                                                               ^
security/zero_trust_manager.py:463:80: E501 line too long (101 > 79 characters)
            return False, f"Недостаточный уровень доверия. Требуется: {policy.min_trust_level.value}"
                                                                               ^
security/zero_trust_manager.py:464:1: W293 blank line contains whitespace
        
^
security/zero_trust_manager.py:467:80: E501 line too long (88 > 79 characters)
            return False, f"Слишком высокий риск. Максимальный: {policy.max_risk_score}"
                                                                               ^
security/zero_trust_manager.py:468:1: W293 blank line contains whitespace
        
^
security/zero_trust_manager.py:471:80: E501 line too long (82 > 79 characters)
            if not self._is_verification_completed(request_id, verification_type):
                                                                               ^
security/zero_trust_manager.py:473:1: W293 blank line contains whitespace
        
^
security/zero_trust_manager.py:477:1: W293 blank line contains whitespace
        
^
security/zero_trust_manager.py:480:1: W293 blank line contains whitespace
    
^
security/zero_trust_manager.py:481:80: E501 line too long (97 > 79 characters)
    def _find_applicable_policy(self, access_request: AccessRequest) -> Optional[SecurityPolicy]:
                                                                               ^
security/zero_trust_manager.py:484:1: W293 blank line contains whitespace
        
^
security/zero_trust_manager.py:492:1: W293 blank line contains whitespace
    
^
security/zero_trust_manager.py:498:1: W293 blank line contains whitespace
    
^
security/zero_trust_manager.py:499:80: E501 line too long (90 > 79 characters)
    def _is_verification_completed(self, request_id: str, verification_type: str) -> bool:
                                                                               ^
security/zero_trust_manager.py:503:1: W293 blank line contains whitespace
        
^
security/zero_trust_manager.py:506:1: W293 blank line contains whitespace
    
^
security/zero_trust_manager.py:514:80: E501 line too long (80 > 79 characters)
            'active_requests': len([req for req in self.access_requests.values() 
                                                                               ^
security/zero_trust_manager.py:514:81: W291 trailing whitespace
            'active_requests': len([req for req in self.access_requests.values() 
                                                                                ^
security/zero_trust_manager.py:515:35: E128 continuation line under-indented for visual indent
                                  if req.verification_status == VerificationStatus.PENDING]),
                                  ^
security/zero_trust_manager.py:515:80: E501 line too long (93 > 79 characters)
                                  if req.verification_status == VerificationStatus.PENDING]),
                                                                               ^
security/zero_trust_manager.py:519:1: W293 blank line contains whitespace
    
^
security/zero_trust_manager.py:524:1: W293 blank line contains whitespace
    
^
security/zero_trust_manager.py:531:1: E305 expected 2 blank lines after class or function definition, found 1
if __name__ == "__main__":
^
security/zero_trust_manager.py:535:1: W293 blank line contains whitespace
    
^
security/zero_trust_manager.py:545:1: W293 blank line contains whitespace
    
^
security/zero_trust_manager.py:555:1: W293 blank line contains whitespace
    
^
security/zero_trust_manager.py:561:1: W293 blank line contains whitespace
    
^
security/zero_trust_manager.py:569:1: W293 blank line contains whitespace
    
^
security/zero_trust_manager.py:573:1: W293 blank line contains whitespace
    
^
security/zero_trust_manager.py:575:80: E501 line too long (80 > 79 characters)
    authorized, message = zero_trust.authorize_access(access_request.request_id)
                                                                               ^
security/zero_trust_manager.py:577:1: W293 blank line contains whitespace
    
^
security/zero_trust_manager.py:581:1: W293 blank line contains whitespace
    
^
security/zero_trust_manager.py:582:22: W292 no newline at end of file
    zero_trust.stop()                     ^
195   E128 continuation line under-indented for visual indent
22    E129 visually indented line with same indent as next logical line
5     E131 continuation line unaligned for hanging indent
12    E261 at least two spaces before inline comment
311   E302 expected 2 blank lines, found 1
21    E303 too many blank lines (3)
10    E304 blank lines found after function decorator
40    E305 expected 2 blank lines after class or function definition, found 1
59    E402 module level import not at top of file
6008  E501 line too long (81 > 79 characters)
1     E712 comparison to True should be 'if cond is True:' or 'if cond:'
19    E722 do not use bare 'except'
716   F401 'typing.Optional' imported but unused
28    F541 f-string is missing placeholders
15    F811 redefinition of unused 'ThreatType' from line 11
29    F821 undefined name 'os'
77    F841 local variable 'emotions' is assigned to but never used
337   W291 trailing whitespace
107   W292 no newline at end of file
5967  W293 blank line contains whitespace
13979
