#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ SecurityMonitoringManager
"""

import sys
import os
import asyncio
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from security.security_monitoring_a_plus import (
    MonitoringLevel,
    AlertType,
    SecurityEvent,
    MonitoringConfig,
    ThreatDetectionStrategy,
    AnomalyDetectionStrategy,
    MonitoringDataManager,
    AlertManager,
    SecurityMonitoringManager
)


async def test_final_comprehensive():
    """–§–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    print("üöÄ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –í–°–ï–• –ö–û–ú–ü–û–ù–ï–ù–¢–û–í")
    print("=" * 60)
    
    try:
        # 1. –¢–µ—Å—Ç –≤—Å–µ—Ö –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–π
        print("1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–π...")
        levels = list(MonitoringLevel)
        alert_types = list(AlertType)
        print(f"‚úÖ MonitoringLevel: {len(levels)} —É—Ä–æ–≤–Ω–µ–π")
        print(f"‚úÖ AlertType: {len(alert_types)} —Ç–∏–ø–æ–≤")
        
        # 2. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å–µ—Ö dataclasses
        print("\n2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö dataclasses...")
        config = MonitoringConfig(
            enabled=True,
            alert_threshold=5,
            check_interval=30,
            retention_days=7,
            log_level="INFO"
        )
        
        event = SecurityEvent(
            event_id="final_test_001",
            timestamp=datetime.now(),
            level=MonitoringLevel.HIGH,
            alert_type=AlertType.THREAT_DETECTED,
            description="Final test event",
            source="final_test_system"
        )
        
        print(f"‚úÖ MonitoringConfig: {config}")
        print(f"‚úÖ SecurityEvent: {event}")
        
        # 3. –¢–µ—Å—Ç –≤—Å–µ—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        print("\n3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π...")
        threat_strategy = ThreatDetectionStrategy(config)
        anomaly_strategy = AnomalyDetectionStrategy(config)
        
        # –¢–µ—Å—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
        threat_events = await threat_strategy.check_security()
        anomaly_events = await anomaly_strategy.check_security()
        
        print(f"‚úÖ ThreatDetectionStrategy: {threat_strategy.get_strategy_name()}")
        print(f"‚úÖ AnomalyDetectionStrategy: {anomaly_strategy.get_strategy_name()}")
        print(f"‚úÖ –°–æ–±—ã—Ç–∏—è –æ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {len(threat_events + anomaly_events)}")
        
        # 4. –¢–µ—Å—Ç –≤—Å–µ—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        print("\n4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤...")
        data_manager = MonitoringDataManager(config)
        alert_manager = AlertManager(config)
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
        for i in range(3):
            test_event = SecurityEvent(
                event_id=f"test_event_{i:03d}",
                timestamp=datetime.now(),
                level=MonitoringLevel.MEDIUM,
                alert_type=AlertType.ANOMALY_FOUND,
                description=f"Test event {i}",
                source="test_system"
            )
            data_manager.add_event(test_event)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
        all_events = data_manager.get_events()
        critical_events = data_manager.get_events_by_level(MonitoringLevel.CRITICAL)
        
        print(f"‚úÖ MonitoringDataManager: {len(all_events)} —Å–æ–±—ã—Ç–∏–π")
        print(f"‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π: {len(critical_events)}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤
        await alert_manager.process_events(all_events)
        print(f"‚úÖ AlertManager: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(all_events)} —Å–æ–±—ã—Ç–∏–π")
        
        # 5. –¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        print("\n5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SecurityMonitoringManager...")
        main_manager = SecurityMonitoringManager(
            name="FinalTestManager",
            config=config
        )
        
        # –¢–µ—Å—Ç –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω: {main_manager}")
        print(f"‚úÖ –î–ª–∏–Ω–∞: {len(main_manager)} —Å—Ç—Ä–∞—Ç–µ–≥–∏–π")
        print(f"‚úÖ –ò—Ç–µ—Ä–∞—Ü–∏—è: {len(list(main_manager))} —Å—Ç—Ä–∞—Ç–µ–≥–∏–π")
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        main_manager.add_monitoring_strategy(threat_strategy)
        main_manager.add_monitoring_strategy(anomaly_strategy)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        assert threat_strategy in main_manager, "ThreatDetectionStrategy –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–µ"
        assert anomaly_strategy in main_manager, "AnomalyDetectionStrategy –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–µ"
        
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {len(main_manager.strategies)}")
        
        # 6. –¢–µ—Å—Ç –≤—Å–µ—Ö property –º–µ—Ç–æ–¥–æ–≤
        print("\n6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö property –º–µ—Ç–æ–¥–æ–≤...")
        print(f"‚úÖ is_running: {main_manager.is_running}")
        print(f"‚úÖ strategies_count: {main_manager.strategies_count}")
        print(f"‚úÖ status_info: {len(main_manager.status_info)} –ø–æ–ª–µ–π")
        
        # 7. –¢–µ—Å—Ç –≤—Å–µ—Ö static –º–µ—Ç–æ–¥–æ–≤
        print("\n7. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö static –º–µ—Ç–æ–¥–æ–≤...")
        supported_levels = SecurityMonitoringManager.get_supported_levels()
        supported_alert_types = SecurityMonitoringManager.get_supported_alert_types()
        
        print(f"‚úÖ get_supported_levels: {len(supported_levels)} —É—Ä–æ–≤–Ω–µ–π")
        print(f"‚úÖ get_supported_alert_types: {len(supported_alert_types)} —Ç–∏–ø–æ–≤")
        
        # 8. –¢–µ—Å—Ç –≤—Å–µ—Ö class –º–µ—Ç–æ–¥–æ–≤
        print("\n8. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö class –º–µ—Ç–æ–¥–æ–≤...")
        custom_config = MonitoringConfig(
            enabled=False,
            alert_threshold=10,
            check_interval=60,
            retention_days=14,
            log_level="DEBUG"
        )
        
        custom_manager = SecurityMonitoringManager.create_with_custom_config(
            "CustomFinalManager", custom_config
        )
        
        assert custom_manager.name == "CustomFinalManager", "–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å CustomFinalManager"
        assert custom_manager.config == custom_config, "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–≤–ø–∞–¥–∞—Ç—å"
        print(f"‚úÖ create_with_custom_config: {custom_manager.name}")
        
        # 9. –¢–µ—Å—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        print("\n9. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞...")
        with main_manager as m:
            assert m is main_manager, "–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å self"
            print("‚úÖ __enter__ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("‚úÖ __exit__ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        # 10. –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        print("\n10. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        new_config = MonitoringConfig(
            enabled=True,
            alert_threshold=15,
            check_interval=120,
            retention_days=30,
            log_level="WARNING"
        )
        
        main_manager.update_config(new_config)
        assert main_manager.config.alert_threshold == 15, "–ü–æ—Ä–æ–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 15"
        print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: threshold={main_manager.config.alert_threshold}")
        
        # 11. –¢–µ—Å—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        print("\n11. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
        main_manager.stop_monitoring()
        assert not main_manager.config.enabled, "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        print("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        # 12. –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("\n12. –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞...")
        final_status = main_manager.get_security_status()
        
        print(f"üìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   - –ò–º—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {main_manager.name}")
        print(f"   - –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {final_status['total_events']}")
        print(f"   - –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π: {final_status['critical_events']}")
        print(f"   - –í—ã—Å–æ–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π: {final_status['high_events']}")
        print(f"   - –ê–ª–µ—Ä—Ç–æ–≤: {final_status['alert_count']}")
        print(f"   - –°—Ç—Ä–∞—Ç–µ–≥–∏–π: {final_status['strategies_count']}")
        print(f"   - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤–∫–ª—é—á–µ–Ω: {final_status['monitoring_enabled']}")
        
        # 13. –¢–µ—Å—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
        print("\n13. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤...")
        manager1 = SecurityMonitoringManager("Test1", config)
        manager2 = SecurityMonitoringManager("Test1", config)
        manager3 = SecurityMonitoringManager("Test2", config)
        
        assert manager1 == manager2, "–û–¥–∏–Ω–∞–∫–æ–≤—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–≤–Ω—ã"
        assert manager1 != manager3, "–†–∞–∑–Ω—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–µ —Ä–∞–≤–Ω—ã"
        print("‚úÖ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        # 14. –¢–µ—Å—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
        print("\n14. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è...")
        print(f"‚úÖ __str__: {str(main_manager)}")
        print(f"‚úÖ __repr__: {repr(main_manager)}")
        
        print("\n" + "=" * 60)
        print("üéâ –í–°–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´ –†–ê–ë–û–¢–ê–Æ–¢ –ò–î–ï–ê–õ–¨–ù–û!")
        print("‚úÖ SecurityMonitoringManager –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É!")
        print("‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ A+ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –í –§–ò–ù–ê–õ–¨–ù–û–ú –¢–ï–°–¢–ï: {e}")
        import traceback
        traceback.print_exc()
        return False


if __name__ == "__main__":
    success = asyncio.run(test_final_comprehensive())
    sys.exit(0 if success else 1)