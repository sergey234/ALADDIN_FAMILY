#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü–æ–∏—Å–∫ –º–æ–¥—É–ª—è –ê–ù–ê–õ–ò–ó –ì–û–õ–û–°–ê –≤ —Å–∏—Å—Ç–µ–º–µ
"""

import re

def find_voice_analysis_module():
    """–ò—â–µ—Ç –º–æ–¥—É–ª—å –ê–ù–ê–õ–ò–ó –ì–û–õ–û–°–ê –≤ —Å–∏—Å—Ç–µ–º–µ"""
    
    with open('/Users/sergejhlystov/ALADDIN_NEW/MOBILE_APP_INFO_SECTIONS.md', 'r', encoding='utf-8') as f:
        content = f.read()
    
    print("=== –ü–û–ò–°–ö –ú–û–î–£–õ–Ø –ê–ù–ê–õ–ò–ó –ì–û–õ–û–°–ê ===\n")
    
    # –ò—â–µ–º –≤—Å–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è "–ê–ù–ê–õ–ò–ó –ì–û–õ–û–°–ê"
    voice_analysis_pattern = r'–ê–ù–ê–õ–ò–ó –ì–û–õ–û–°–ê'
    voice_analysis_matches = re.findall(voice_analysis_pattern, content)
    
    print(f"üìã –ù–ê–ô–î–ï–ù–û –£–ü–û–ú–ò–ù–ê–ù–ò–ô: {len(voice_analysis_matches)}")
    
    # –ò—â–µ–º –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–æ–¥—É–ª—è
    module_pattern = r'### [^#\n]*22\. –ê–ù–ê–õ–ò–ó –ì–û–õ–û–°–ê[^#\n]*\n\n\*\*–ß—Ç–æ —ç—Ç–æ —Ç–∞–∫–æ–µ\?\*\*\n([^#\n]+)\n\n\*\*–ß—Ç–æ –¥–µ–ª–∞–µ—Ç —Å–∏—Å—Ç–µ–º–∞:\*\*\n((?:[^#\n]*\n)*?)\*\*–û—Ç —á–µ–≥–æ –∑–∞—â–∏—â–∞–µ—Ç:\*\*\n((?:[^#\n]*\n)*?)(?=---|\n###)'
    module_match = re.search(module_pattern, content, re.DOTALL)
    
    if module_match:
        print("‚úÖ –ú–û–î–£–õ–¨ –ù–ê–ô–î–ï–ù:")
        print(f"–ù–æ–º–µ—Ä: 22")
        print(f"–ù–∞–∑–≤–∞–Ω–∏–µ: –ê–ù–ê–õ–ò–ó –ì–û–õ–û–°–ê")
        print(f"–ß—Ç–æ —ç—Ç–æ —Ç–∞–∫–æ–µ: {module_match.group(1).strip()}")
        print(f"–ß—Ç–æ –¥–µ–ª–∞–µ—Ç —Å–∏—Å—Ç–µ–º–∞: {module_match.group(2).strip()}")
        print(f"–û—Ç —á–µ–≥–æ –∑–∞—â–∏—â–∞–µ—Ç: {module_match.group(3).strip()}")
        
        # –ò—â–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        functions_pattern = r'1\. \*\*üé§ –ê–Ω–∞–ª–∏–∑ –≥–æ–ª–æ—Å–∞\*\* - ([^#\n]+)\n2\. \*\*üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø–æ–¥–¥–µ–ª–æ–∫\*\* - ([^#\n]+)\n3\. \*\*üõ°Ô∏è –ó–∞—â–∏—Ç–∞ –æ—Ç deepfake\*\* - ([^#\n]+)\n4\. \*\*‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è\*\* - ([^#\n]+)\n5\. \*\*üìä –ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π\*\* - ([^#\n]+)'
        functions_match = re.search(functions_pattern, content)
        
        if functions_match:
            print("\nüéØ –ù–ê–ô–î–ï–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò:")
            print(f"1. üé§ –ê–Ω–∞–ª–∏–∑ –≥–æ–ª–æ—Å–∞ - {functions_match.group(1).strip()}")
            print(f"2. üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø–æ–¥–¥–µ–ª–æ–∫ - {functions_match.group(2).strip()}")
            print(f"3. üõ°Ô∏è –ó–∞—â–∏—Ç–∞ –æ—Ç deepfake - {functions_match.group(3).strip()}")
            print(f"4. ‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è - {functions_match.group(4).strip()}")
            print(f"5. üìä –ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π - {functions_match.group(5).strip()}")
        
        return True
    else:
        print("‚ùå –ú–û–î–£–õ–¨ –ù–ï –ù–ê–ô–î–ï–ù")
        return False

if __name__ == "__main__":
    found = find_voice_analysis_module()
    if found:
        print("\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢: –ú–æ–¥—É–ª—å –ê–ù–ê–õ–ò–ó –ì–û–õ–û–°–ê –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ")
    else:
        print("\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢: –ú–æ–¥—É–ª—å –ê–ù–ê–õ–ò–ó –ì–û–õ–û–°–ê –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ")
