#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è Enhanced Services
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ API Docs –∏ Architecture Visualizer

–ê–≤—Ç–æ—Ä: ALADDIN Security Team
–í–µ—Ä—Å–∏—è: 2.0
–î–∞—Ç–∞: 2025-01-06
"""

import asyncio
import httpx
import json
import time
from datetime import datetime

class EnhancedServicesTester:
    """–¢–µ—Å—Ç–µ—Ä –¥–ª—è Enhanced Services"""
    
    def __init__(self):
        self.api_docs_url = "http://localhost:8080"
        self.arch_viz_url = "http://localhost:8081"
        self.test_results = []
    
    async def test_api_docs(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Enhanced API Docs"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Enhanced API Docs...")
        
        async with httpx.AsyncClient() as client:
            try:
                # –¢–µ—Å—Ç 1: –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
                print("  üìÑ –¢–µ—Å—Ç –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
                response = await client.get(f"{self.api_docs_url}/")
                if response.status_code == 200:
                    print("    ‚úÖ –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
                    self.test_results.append({"test": "API Docs Homepage", "status": "PASS"})
                else:
                    print(f"    ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {response.status_code}")
                    self.test_results.append({"test": "API Docs Homepage", "status": "FAIL"})
                
                # –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ endpoints
                print("  üì° –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è endpoints...")
                response = await client.get(f"{self.api_docs_url}/api/endpoints")
                if response.status_code == 200:
                    data = response.json()
                    endpoints_count = len(data.get("endpoints", []))
                    print(f"    ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {endpoints_count} endpoints")
                    self.test_results.append({"test": "Get Endpoints", "status": "PASS", "count": endpoints_count})
                else:
                    print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è endpoints: {response.status_code}")
                    self.test_results.append({"test": "Get Endpoints", "status": "FAIL"})
                
                # –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤
                print("  üîß –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤...")
                response = await client.get(f"{self.api_docs_url}/api/services")
                if response.status_code == 200:
                    data = response.json()
                    services_count = len(data.get("services", {}))
                    print(f"    ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {services_count} —Å–µ—Ä–≤–∏—Å–æ–≤")
                    self.test_results.append({"test": "Get Services", "status": "PASS", "count": services_count})
                else:
                    print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤: {response.status_code}")
                    self.test_results.append({"test": "Get Services", "status": "FAIL"})
                
                # –¢–µ—Å—Ç 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoint
                print("  üß™ –¢–µ—Å—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API endpoint...")
                test_data = {
                    "endpoint": "/health",
                    "method": "GET"
                }
                response = await client.post(
                    f"{self.api_docs_url}/api/test",
                    json=test_data,
                    headers={"Authorization": "Bearer demo_token"}
                )
                if response.status_code == 200:
                    data = response.json()
                    print(f"    ‚úÖ –¢–µ—Å—Ç endpoint –≤—ã–ø–æ–ª–Ω–µ–Ω: {data.get('status_code', 'N/A')}")
                    self.test_results.append({"test": "Test Endpoint", "status": "PASS"})
                else:
                    print(f"    ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è endpoint: {response.status_code}")
                    self.test_results.append({"test": "Test Endpoint", "status": "FAIL"})
                
                # –¢–µ—Å—Ç 5: –ò—Å—Ç–æ—Ä–∏—è —Ç–µ—Å—Ç–æ–≤
                print("  üìä –¢–µ—Å—Ç –∏—Å—Ç–æ—Ä–∏–∏ —Ç–µ—Å—Ç–æ–≤...")
                response = await client.get(f"{self.api_docs_url}/api/test-history")
                if response.status_code == 200:
                    data = response.json()
                    history_count = len(data.get("history", []))
                    print(f"    ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {history_count} –∑–∞–ø–∏—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏")
                    self.test_results.append({"test": "Get Test History", "status": "PASS", "count": history_count})
                else:
                    print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {response.status_code}")
                    self.test_results.append({"test": "Get Test History", "status": "FAIL"})
                
                # –¢–µ—Å—Ç 6: –≠–∫—Å–ø–æ—Ä—Ç JSON
                print("  üì§ –¢–µ—Å—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ JSON...")
                response = await client.get(f"{self.api_docs_url}/api/export/json")
                if response.status_code == 200:
                    data = response.json()
                    print(f"    ‚úÖ JSON —ç–∫—Å–ø–æ—Ä—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω")
                    self.test_results.append({"test": "JSON Export", "status": "PASS"})
                else:
                    print(f"    ‚ùå –û—à–∏–±–∫–∞ JSON —ç–∫—Å–ø–æ—Ä—Ç–∞: {response.status_code}")
                    self.test_results.append({"test": "JSON Export", "status": "FAIL"})
                
            except Exception as e:
                print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API Docs: {e}")
                self.test_results.append({"test": "API Docs Connection", "status": "FAIL", "error": str(e)})
    
    async def test_architecture_visualizer(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Enhanced Architecture Visualizer"""
        print("\nüèóÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Enhanced Architecture Visualizer...")
        
        async with httpx.AsyncClient() as client:
            try:
                # –¢–µ—Å—Ç 1: –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
                print("  üìÑ –¢–µ—Å—Ç –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
                response = await client.get(f"{self.arch_viz_url}/")
                if response.status_code == 200:
                    print("    ‚úÖ –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
                    self.test_results.append({"test": "Arch Viz Homepage", "status": "PASS"})
                else:
                    print(f"    ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {response.status_code}")
                    self.test_results.append({"test": "Arch Viz Homepage", "status": "FAIL"})
                
                # –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
                print("  üèóÔ∏è –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã...")
                response = await client.get(f"{self.arch_viz_url}/api/architecture")
                if response.status_code == 200:
                    data = response.json()
                    services_count = len(data.get("services", {}))
                    connections_count = len(data.get("connections", []))
                    print(f"    ‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: {services_count} —Å–µ—Ä–≤–∏—Å–æ–≤, {connections_count} —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π")
                    self.test_results.append({"test": "Get Architecture", "status": "PASS", "services": services_count, "connections": connections_count})
                else:
                    print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã: {response.status_code}")
                    self.test_results.append({"test": "Get Architecture", "status": "FAIL"})
                
                # –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤
                print("  üîß –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤...")
                response = await client.get(f"{self.arch_viz_url}/api/services")
                if response.status_code == 200:
                    data = response.json()
                    services_count = len(data.get("services", {}))
                    print(f"    ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {services_count} —Å–µ—Ä–≤–∏—Å–æ–≤")
                    self.test_results.append({"test": "Get Services", "status": "PASS", "count": services_count})
                else:
                    print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤: {response.status_code}")
                    self.test_results.append({"test": "Get Services", "status": "FAIL"})
                
                # –¢–µ—Å—Ç 4: –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
                print("  üìä –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫...")
                response = await client.get(f"{self.arch_viz_url}/api/metrics")
                if response.status_code == 200:
                    data = response.json()
                    metrics = data.get("metrics", {})
                    print(f"    ‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –º–µ—Ç—Ä–∏–∫–∏: CPU {metrics.get('cpu', {}).get('percent', 0):.1f}%, RAM {metrics.get('memory', {}).get('percent', 0):.1f}%")
                    self.test_results.append({"test": "Get Metrics", "status": "PASS"})
                else:
                    print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: {response.status_code}")
                    self.test_results.append({"test": "Get Metrics", "status": "FAIL"})
                
                # –¢–µ—Å—Ç 5: –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–æ–≤
                print("  üö® –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–æ–≤...")
                response = await client.get(f"{self.arch_viz_url}/api/alerts")
                if response.status_code == 200:
                    data = response.json()
                    alerts_count = len(data.get("alerts", []))
                    print(f"    ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {alerts_count} –∞–ª–µ—Ä—Ç–æ–≤")
                    self.test_results.append({"test": "Get Alerts", "status": "PASS", "count": alerts_count})
                else:
                    print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–æ–≤: {response.status_code}")
                    self.test_results.append({"test": "Get Alerts", "status": "FAIL"})
                
            except Exception as e:
                print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Architecture Visualizer: {e}")
                self.test_results.append({"test": "Arch Viz Connection", "status": "FAIL", "error": str(e)})
    
    async def test_websocket_connection(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        print("\nüîå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...")
        
        try:
            import websockets
            
            async with websockets.connect(f"ws://localhost:8081/ws") as websocket:
                print("  ‚úÖ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                
                # –ñ–¥–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                message = await asyncio.wait_for(websocket.recv(), timeout=10.0)
                data = json.loads(message)
                
                if "services" in data and "timestamp" in data:
                    print("  ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ WebSocket —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π")
                    self.test_results.append({"test": "WebSocket Connection", "status": "PASS"})
                else:
                    print("  ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è")
                    self.test_results.append({"test": "WebSocket Connection", "status": "FAIL"})
                
        except ImportError:
            print("  ‚ö†Ô∏è  websockets –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º WebSocket —Ç–µ—Å—Ç")
            self.test_results.append({"test": "WebSocket Connection", "status": "SKIP", "reason": "websockets not installed"})
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
            self.test_results.append({"test": "WebSocket Connection", "status": "FAIL", "error": str(e)})
    
    def print_summary(self):
        """–í—ã–≤–æ–¥ —Å–≤–æ–¥–∫–∏ —Ç–µ—Å—Ç–æ–≤"""
        print("\n" + "="*60)
        print("üìä –°–í–û–î–ö–ê –¢–ï–°–¢–û–í")
        print("="*60)
        
        total_tests = len(self.test_results)
        passed_tests = len([r for r in self.test_results if r["status"] == "PASS"])
        failed_tests = len([r for r in self.test_results if r["status"] == "FAIL"])
        skipped_tests = len([r for r in self.test_results if r["status"] == "SKIP"])
        
        print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")
        print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed_tests}")
        print(f"‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped_tests}")
        print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(passed_tests/total_tests*100):.1f}%")
        
        print("\nüìã –î–µ—Ç–∞–ª–∏ —Ç–µ—Å—Ç–æ–≤:")
        for result in self.test_results:
            status_icon = "‚úÖ" if result["status"] == "PASS" else "‚ùå" if result["status"] == "FAIL" else "‚è≠Ô∏è"
            print(f"  {status_icon} {result['test']}: {result['status']}")
            if "error" in result:
                print(f"      –û—à–∏–±–∫–∞: {result['error']}")
            if "count" in result:
                print(f"      –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {result['count']}")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"test_results_{timestamp}.json"
        
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump({
                "timestamp": datetime.now().isoformat(),
                "summary": {
                    "total": total_tests,
                    "passed": passed_tests,
                    "failed": failed_tests,
                    "skipped": skipped_tests,
                    "success_rate": passed_tests/total_tests*100
                },
                "results": self.test_results
            }, f, indent=2, ensure_ascii=False)
        
        print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")
        
        if failed_tests > 0:
            print("\n‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
            print("   ‚Ä¢ –ó–∞–ø—É—â–µ–Ω—ã –ª–∏ Enhanced Services")
            print("   ‚Ä¢ –î–æ—Å—Ç—É–ø–Ω—ã –ª–∏ –ø–æ—Ä—Ç—ã 8080 –∏ 8081")
            print("   ‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ª–∏ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
            return False
        else:
            print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            return True

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üõ°Ô∏è ALADDIN Enhanced Services Tester")
    print("="*50)
    print(f"‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    tester = EnhancedServicesTester()
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    await tester.test_api_docs()
    await tester.test_architecture_visualizer()
    await tester.test_websocket_connection()
    
    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    success = tester.print_summary()
    
    if success:
        print("\nüöÄ Enhanced Services —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        print("üåê –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:")
        print("   üì° Enhanced API Docs: http://localhost:8080")
        print("   üèóÔ∏è Enhanced Architecture Visualizer: http://localhost:8081")
    else:
        print("\n‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ.")
        return 1
    
    return 0

if __name__ == "__main__":
    exit_code = asyncio.run(main())
    exit(exit_code)