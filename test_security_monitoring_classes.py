#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤ SecurityMonitoringManager
"""

import sys
import os
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from security.security_monitoring_a_plus import (
    MonitoringLevel,
    AlertType,
    SecurityEvent,
    MonitoringConfig,
    ThreatDetectionStrategy,
    AnomalyDetectionStrategy,
    MonitoringDataManager,
    AlertManager,
    SecurityMonitoringManager
)


def test_class_instantiation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤"""
    print("üöÄ –¢–ï–°–¢ –°–û–ó–î–ê–ù–ò–Ø –≠–ö–ó–ï–ú–ü–õ–Ø–†–û–í –ö–õ–ê–°–°–û–í")
    print("=" * 50)
    
    try:
        # 1. –¢–µ—Å—Ç –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–π
        print("1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–π...")
        monitoring_level = MonitoringLevel.HIGH
        alert_type = AlertType.THREAT_DETECTED
        print(f"‚úÖ MonitoringLevel: {monitoring_level}")
        print(f"‚úÖ AlertType: {alert_type}")
        
        # 2. –¢–µ—Å—Ç dataclasses
        print("\n2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ dataclasses...")
        security_event = SecurityEvent(
            event_id="test_001",
            timestamp=datetime.now(),
            level=MonitoringLevel.MEDIUM,
            alert_type=AlertType.THREAT_DETECTED,
            description="Test event",
            source="test_system"
        )
        print(f"‚úÖ SecurityEvent: {security_event.event_id}")
        
        monitoring_config = MonitoringConfig(
            enabled=True,
            alert_threshold=5,
            check_interval=30,
            retention_days=7,
            log_level="INFO"
        )
        print(f"‚úÖ MonitoringConfig: {monitoring_config.enabled}")
        
        # 3. –¢–µ—Å—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        print("\n3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π...")
        threat_strategy = ThreatDetectionStrategy(monitoring_config)
        anomaly_strategy = AnomalyDetectionStrategy(monitoring_config)
        print(f"‚úÖ ThreatDetectionStrategy: {threat_strategy.get_strategy_name()}")
        print(f"‚úÖ AnomalyDetectionStrategy: {anomaly_strategy.get_strategy_name()}")
        
        # 4. –¢–µ—Å—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        print("\n4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤...")
        data_manager = MonitoringDataManager(monitoring_config)
        alert_manager = AlertManager(monitoring_config)
        print(f"‚úÖ MonitoringDataManager: {type(data_manager).__name__}")
        print(f"‚úÖ AlertManager: {type(alert_manager).__name__}")
        
        # 5. –¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        print("\n5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SecurityMonitoringManager...")
        main_manager = SecurityMonitoringManager(
            name="TestManager",
            config=monitoring_config
        )
        print(f"‚úÖ SecurityMonitoringManager: {main_manager.name}")
        
        print("\n" + "=" * 50)
        print("üéâ –í–°–ï –ö–õ–ê–°–°–´ –°–û–ó–î–ê–ù–´ –£–°–ü–ï–®–ù–û!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –ü–†–ò –°–û–ó–î–ê–ù–ò–ò –ö–õ–ê–°–°–û–í: {e}")
        import traceback
        traceback.print_exc()
        return False


if __name__ == "__main__":
    success = test_class_instantiation()
    sys.exit(0 if success else 1)