#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞
"""

import os
import sys
import subprocess
from datetime import datetime

def fix_imports():
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤"""
    print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ò–ú–ü–û–†–¢–û–í")
    print("-" * 50)
    
    # –§–∞–π–ª—ã —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏ –∏–º–ø–æ—Ä—Ç–æ–≤
    files_to_fix = [
        "security/authentication.py",
        "security/access_control.py", 
        "security/security_monitoring.py",
        "security/safe_function_manager.py",
        "security/family/child_protection.py",
        "security/ai_agents/monitor_manager.py",
        "security/bots/notification_bot.py",
        "security/microservices/api_gateway.py"
    ]
    
    for file_path in files_to_fix:
        full_path = os.path.join("/Users/sergejhlystov/ALADDIN_NEW", file_path)
        if os.path.exists(full_path):
            print(f"üìÑ –ò—Å–ø—Ä–∞–≤–ª—è–µ–º: {file_path}")
            
            try:
                # –£–¥–∞–ª—è–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã
                result = subprocess.run([
                    'python3', '-m', 'autoflake', 
                    '--in-place', 
                    '--remove-all-unused-imports',
                    '--remove-unused-variables',
                    full_path
                ], capture_output=True, text=True, timeout=30)
                
                if result.returncode == 0:
                    print(f"   ‚úÖ –ò–º–ø–æ—Ä—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã")
                else:
                    print(f"   ‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {result.stderr}")
                    
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        else:
            print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")

def fix_formatting():
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("\nüîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("-" * 50)
    
    files_to_fix = [
        "security/authentication.py",
        "security/access_control.py", 
        "security/security_monitoring.py",
        "security/safe_function_manager.py",
        "security/family/child_protection.py",
        "security/ai_agents/monitor_manager.py",
        "security/bots/notification_bot.py",
        "security/microservices/api_gateway.py"
    ]
    
    for file_path in files_to_fix:
        full_path = os.path.join("/Users/sergejhlystov/ALADDIN_NEW", file_path)
        if os.path.exists(full_path):
            print(f"üìÑ –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º: {file_path}")
            
            try:
                # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                result = subprocess.run([
                    'python3', '-m', 'autopep8', 
                    '--in-place',
                    '--aggressive',
                    '--aggressive',
                    '--max-line-length=120',
                    full_path
                ], capture_output=True, text=True, timeout=60)
                
                if result.returncode == 0:
                    print(f"   ‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ")
                else:
                    print(f"   ‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {result.stderr}")
                    
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        else:
            print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")

def add_missing_imports():
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤"""
    print("\nüîß –î–û–ë–ê–í–õ–ï–ù–ò–ï –ù–ï–î–û–°–¢–ê–Æ–©–ò–• –ò–ú–ü–û–†–¢–û–í")
    print("-" * 50)
    
    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    fixes = {
        "security/authentication.py": [
            ("import os", "import os\n")
        ],
        "security/access_control.py": [
            ("import os", "import os\n")
        ],
        "security/security_monitoring.py": [
            ("import time", "import time\n"),
            ("import threading", "import threading\n"),
            ("from core.base import ComponentStatus", "from core.base import ComponentStatus\n")
        ]
    }
    
    for file_path, imports in fixes.items():
        full_path = os.path.join("/Users/sergejhlystov/ALADDIN_NEW", file_path)
        if os.path.exists(full_path):
            print(f"üìÑ –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã –≤: {file_path}")
            
            try:
                with open(full_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
                for import_line, replacement in imports:
                    if import_line not in content:
                        # –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –∏–º–ø–æ—Ä—Ç–∞
                        lines = content.split('\n')
                        insert_index = 0
                        
                        # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–º–ø–æ—Ä—Ç
                        for i, line in enumerate(lines):
                            if line.strip().startswith('import ') or line.strip().startswith('from '):
                                insert_index = i + 1
                        
                        # –í—Å—Ç–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç
                        lines.insert(insert_index, import_line)
                        content = '\n'.join(lines)
                        
                        print(f"   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω: {import_line}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
                with open(full_path, 'w', encoding='utf-8') as f:
                    f.write(content)
                    
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        else:
            print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")

def check_quality_after_fix():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""
    print("\nüîç –ü–†–û–í–ï–†–ö–ê –ö–ê–ß–ï–°–¢–í–ê –ü–û–°–õ–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô")
    print("-" * 50)
    
    files_to_check = [
        "security/authentication.py",
        "security/access_control.py", 
        "security/security_monitoring.py",
        "security/safe_function_manager.py",
        "security/family/child_protection.py",
        "security/ai_agents/monitor_manager.py",
        "security/bots/notification_bot.py",
        "security/microservices/api_gateway.py"
    ]
    
    total_issues = 0
    
    for file_path in files_to_check:
        full_path = os.path.join("/Users/sergejhlystov/ALADDIN_NEW", file_path)
        if os.path.exists(full_path):
            print(f"üìÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º: {file_path}")
            
            try:
                result = subprocess.run([
                    'python3', '-m', 'flake8', 
                    '--max-line-length=120',
                    full_path
                ], capture_output=True, text=True, timeout=30)
                
                if result.returncode == 0:
                    print(f"   ‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ: A+ (0 –ø—Ä–æ–±–ª–µ–º)")
                else:
                    output = result.stdout
                    lines = output.split('\n')
                    file_issues = len([l for l in lines if l.strip()])
                    total_issues += file_issues
                    
                    if file_issues <= 5:
                        grade = "A"
                    elif file_issues <= 15:
                        grade = "B"
                    elif file_issues <= 30:
                        grade = "C"
                    else:
                        grade = "D"
                    
                    print(f"   üìä –ö–∞—á–µ—Å—Ç–≤–æ: {grade} ({file_issues} –ø—Ä–æ–±–ª–µ–º)")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –ø—Ä–æ–±–ª–µ–º—ã
                    for i, line in enumerate(lines[:3]):
                        if line.strip():
                            print(f"   ‚ö†Ô∏è  {line}")
                    if len(lines) > 3:
                        print(f"   ... –∏ –µ—â–µ {len(lines) - 3} –ø—Ä–æ–±–ª–µ–º")
                        
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {str(e)}")
        else:
            print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
    
    print(f"\nüìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–±–ª–µ–º –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {total_issues}")
    
    if total_issues < 100:
        print("üéâ –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –ö–∞—á–µ—Å—Ç–≤–æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–ª—É—á—à–µ–Ω–æ!")
    elif total_issues < 300:
        print("‚úÖ –•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –ö–∞—á–µ—Å—Ç–≤–æ —É–ª—É—á—à–µ–Ω–æ.")
    else:
        print("‚ö†Ô∏è  –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –∫–∞—á–µ—Å—Ç–≤–∞.")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ö–ê–ß–ï–°–¢–í–ê –ö–û–î–ê")
    print("=" * 60)
    print(f"üìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    try:
        subprocess.run(['python3', '-m', 'autoflake', '--version'], 
                      capture_output=True, check=True)
        subprocess.run(['python3', '-m', 'autopep8', '--version'], 
                      capture_output=True, check=True)
    except subprocess.CalledProcessError:
        print("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip3 install autoflake autopep8")
        return
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    fix_imports()
    add_missing_imports()
    fix_formatting()
    check_quality_after_fix()
    
    print()
    print("=" * 60)
    print("‚úÖ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
    print("=" * 60)
    print()
    print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç: python3 -m flake8 --max-line-length=120 security/")
    print("2. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Ä—É—á–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
    print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏")
    print("4. –ü—Ä–æ–≤–µ–¥–∏—Ç–µ code review")

if __name__ == "__main__":
    main()