#!/usr/bin/env python3
"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫–æ–≤–∏–∫ —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è SFM –∞–ª–≥–æ—Ä–∏—Ç–º–∞
–ò—â–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –≤ SFM —Ä–µ–µ—Å—Ç—Ä–µ, formatting_work –∏ sleeping —Ñ—É–Ω–∫—Ü–∏—è—Ö
"""

import json
import os
import glob
from datetime import datetime
from typing import Dict, List, Tuple, Optional
from dataclasses import dataclass


@dataclass
class FunctionVersion:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–µ—Ä—Å–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏"""
    source: str  # 'sfm', 'formatting_work', 'sleeping'
    path: str
    function_id: str
    name: str
    status: str
    lines_of_code: int
    file_size_kb: float
    flake8_errors: int
    quality_score: str
    last_updated: str
    description: str = ""


class EnhancedFunctionFinder:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫–æ–≤–∏–∫ —Ñ—É–Ω–∫—Ü–∏–π"""
    
    def __init__(self, base_path: str = "."):
        self.base_path = base_path
        self.sfm_registry_path = os.path.join(base_path, "data/sfm/function_registry.json")
        self.formatting_work_path = os.path.join(base_path, "formatting_work")
        
    def find_all_function_versions(self, function_name: str) -> List[FunctionVersion]:
        """–ù–∞–π—Ç–∏ –≤—Å–µ –≤–µ—Ä—Å–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ"""
        print(f"üîç –ü–û–ò–°–ö –í–°–ï–• –í–ï–†–°–ò–ô –§–£–ù–ö–¶–ò–ò: {function_name}")
        print("=" * 60)
        
        versions = []
        
        # 1. –ü–æ–∏—Å–∫ –≤ SFM —Ä–µ–µ—Å—Ç—Ä–µ
        sfm_versions = self._find_in_sfm_registry(function_name)
        versions.extend(sfm_versions)
        
        # 2. –ü–æ–∏—Å–∫ –≤ formatting_work
        formatting_versions = self._find_in_formatting_work(function_name)
        versions.extend(formatting_versions)
        
        # 3. –ü–æ–∏—Å–∫ –≤ sleeping —Ñ—É–Ω–∫—Ü–∏—è—Ö
        sleeping_versions = self._find_in_sleeping_functions(function_name)
        versions.extend(sleeping_versions)
        
        return versions
    
    def _find_in_sfm_registry(self, function_name: str) -> List[FunctionVersion]:
        """–ü–æ–∏—Å–∫ –≤ SFM —Ä–µ–µ—Å—Ç—Ä–µ"""
        print("üìã –ü–æ–∏—Å–∫ –≤ SFM —Ä–µ–µ—Å—Ç—Ä–µ...")
        versions = []
        
        try:
            with open(self.sfm_registry_path, 'r', encoding='utf-8') as f:
                registry = json.load(f)
            
            for func_id, func_data in registry['functions'].items():
                if (function_name.lower() in func_id.lower() or 
                    function_name.lower() in func_data.get('name', '').lower()):
                    
                    version = FunctionVersion(
                        source='sfm',
                        path=func_data.get('file_path', ''),
                        function_id=func_id,
                        name=func_data.get('name', ''),
                        status=func_data.get('status', 'unknown'),
                        lines_of_code=func_data.get('lines_of_code', 0),
                        file_size_kb=func_data.get('file_size_kb', 0.0),
                        flake8_errors=func_data.get('flake8_errors', 0),
                        quality_score=func_data.get('quality_score', 'N/A'),
                        last_updated=func_data.get('last_updated', ''),
                        description=func_data.get('description', '')
                    )
                    versions.append(version)
                    print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–∞: {func_id} ({func_data.get('status', 'unknown')})")
        
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è SFM —Ä–µ–µ—Å—Ç—Ä–∞: {e}")
        
        return versions
    
    def _find_in_formatting_work(self, function_name: str) -> List[FunctionVersion]:
        """–ü–æ–∏—Å–∫ –≤ formatting_work"""
        print("üìÅ –ü–æ–∏—Å–∫ –≤ formatting_work...")
        versions = []
        
        if not os.path.exists(self.formatting_work_path):
            print("  ‚ö†Ô∏è –ü–∞–ø–∫–∞ formatting_work –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return versions
        
        # –ü–æ–∏—Å–∫ –≤—Å–µ—Ö Python —Ñ–∞–π–ª–æ–≤ –≤ formatting_work
        pattern = os.path.join(self.formatting_work_path, "**", "*.py")
        for file_path in glob.glob(pattern, recursive=True):
            filename = os.path.basename(file_path)
            if function_name.lower() in filename.lower():
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
                    with open(file_path, 'r', encoding='utf-8') as f:
                        content = f.read()
                    
                    lines_count = len(content.splitlines())
                    file_size_kb = os.path.getsize(file_path) / 1024
                    
                    version = FunctionVersion(
                        source='formatting_work',
                        path=file_path,
                        function_id=filename.replace('.py', ''),
                        name=filename.replace('.py', ''),
                        status='formatting_work',
                        lines_of_code=lines_count,
                        file_size_kb=file_size_kb,
                        flake8_errors=0,  # –ë—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –ø–æ–∑–∂–µ
                        quality_score='N/A',
                        last_updated=datetime.fromtimestamp(os.path.getmtime(file_path)).isoformat(),
                        description=f"–§–∞–π–ª –∏–∑ formatting_work: {filename}"
                    )
                    versions.append(version)
                    print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–∞: {filename} ({lines_count} —Å—Ç—Ä–æ–∫)")
                
                except Exception as e:
                    print(f"  ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {file_path}: {e}")
        
        return versions
    
    def _find_in_sleeping_functions(self, function_name: str) -> List[FunctionVersion]:
        """–ü–æ–∏—Å–∫ –≤ sleeping —Ñ—É–Ω–∫—Ü–∏—è—Ö"""
        print("üí§ –ü–æ–∏—Å–∫ –≤ sleeping —Ñ—É–Ω–∫—Ü–∏—è—Ö...")
        versions = []
        
        try:
            with open(self.sfm_registry_path, 'r', encoding='utf-8') as f:
                registry = json.load(f)
            
            for func_id, func_data in registry['functions'].items():
                if (func_data.get('status') == 'sleeping' and 
                    (function_name.lower() in func_id.lower() or 
                     function_name.lower() in func_data.get('name', '').lower())):
                    
                    version = FunctionVersion(
                        source='sleeping',
                        path=func_data.get('file_path', ''),
                        function_id=func_id,
                        name=func_data.get('name', ''),
                        status='sleeping',
                        lines_of_code=func_data.get('lines_of_code', 0),
                        file_size_kb=func_data.get('file_size_kb', 0.0),
                        flake8_errors=func_data.get('flake8_errors', 0),
                        quality_score=func_data.get('quality_score', 'N/A'),
                        last_updated=func_data.get('last_updated', ''),
                        description=func_data.get('description', '')
                    )
                    versions.append(version)
                    print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–∞ sleeping: {func_id}")
        
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ sleeping —Ñ—É–Ω–∫—Ü–∏–π: {e}")
        
        return versions
    
    def compare_versions(self, versions: List[FunctionVersion]) -> Dict:
        """–°—Ä–∞–≤–Ω–∏—Ç—å –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏"""
        print("\nüìä –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –í–ï–†–°–ò–ô:")
        print("=" * 50)
        
        if not versions:
            print("‚ùå –í–µ—Ä—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return {}
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–∞—á–µ—Å—Ç–≤—É (–º–µ–Ω—å—à–µ –æ—à–∏–±–æ–∫ = –ª—É—á—à–µ)
        sorted_versions = sorted(versions, key=lambda v: (v.flake8_errors, -v.lines_of_code))
        
        print(f"–ù–∞–π–¥–µ–Ω–æ –≤–µ—Ä—Å–∏–π: {len(versions)}")
        print()
        
        for i, version in enumerate(sorted_versions, 1):
            print(f"{i}. {version.function_id}")
            print(f"   –ò—Å—Ç–æ—á–Ω–∏–∫: {version.source}")
            print(f"   –°—Ç–∞—Ç—É—Å: {version.status}")
            print(f"   –°—Ç—Ä–æ–∫ –∫–æ–¥–∞: {version.lines_of_code}")
            print(f"   –†–∞–∑–º–µ—Ä: {version.file_size_kb:.1f} KB")
            print(f"   –û—à–∏–±–∫–∏ flake8: {version.flake8_errors}")
            print(f"   –ö–∞—á–µ—Å—Ç–≤–æ: {version.quality_score}")
            print(f"   –û–±–Ω–æ–≤–ª–µ–Ω–æ: {version.last_updated}")
            print(f"   –ü—É—Ç—å: {version.path}")
            print()
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
        best_version = sorted_versions[0]
        print(f"üèÜ –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–ê–Ø –í–ï–†–°–ò–Ø: {best_version.function_id}")
        print(f"   –ò—Å—Ç–æ—á–Ω–∏–∫: {best_version.source}")
        print(f"   –ü—Ä–∏—á–∏–Ω–∞: {best_version.flake8_errors} –æ—à–∏–±–æ–∫ flake8, {best_version.lines_of_code} —Å—Ç—Ä–æ–∫")
        
        return {
            'total_versions': len(versions),
            'best_version': best_version,
            'all_versions': sorted_versions,
            'recommendation': best_version
        }
    
    def analyze_function_quality(self, file_path: str) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏"""
        print(f"\nüîç –ê–ù–ê–õ–ò–ó –ö–ê–ß–ï–°–¢–í–ê: {file_path}")
        print("=" * 40)
        
        if not os.path.exists(file_path):
            print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            return {}
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            lines_count = len(content.splitlines())
            file_size_kb = os.path.getsize(file_path) / 1024
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º flake8
            import subprocess
            result = subprocess.run(
                ['python3', '-m', 'flake8', file_path, '--max-line-length=79'],
                capture_output=True, text=True
            )
            
            flake8_errors = len(result.stdout.splitlines()) if result.stdout else 0
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
            if flake8_errors == 0:
                quality = "A+"
            elif flake8_errors <= 5:
                quality = "A"
            elif flake8_errors <= 10:
                quality = "B"
            elif flake8_errors <= 20:
                quality = "C"
            else:
                quality = "D"
            
            analysis = {
                'file_path': file_path,
                'lines_of_code': lines_count,
                'file_size_kb': file_size_kb,
                'flake8_errors': flake8_errors,
                'quality_score': quality,
                'flake8_output': result.stdout,
                'last_modified': datetime.fromtimestamp(os.path.getmtime(file_path)).isoformat()
            }
            
            print(f"‚úÖ –°—Ç—Ä–æ–∫ –∫–æ–¥–∞: {lines_count}")
            print(f"‚úÖ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size_kb:.1f} KB")
            print(f"‚úÖ –û—à–∏–±–∫–∏ flake8: {flake8_errors}")
            print(f"‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ: {quality}")
            
            return analysis
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            return {}


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    finder = EnhancedFunctionFinder()
    
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    function_name = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞: ").strip()
    
    if not function_name:
        print("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ")
        return
    
    # –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –≤–µ—Ä—Å–∏–π
    versions = finder.find_all_function_versions(function_name)
    
    if not versions:
        print(f"‚ùå –§—É–Ω–∫—Ü–∏—è '{function_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–π
    comparison = finder.compare_versions(versions)
    
    if comparison:
        best_version = comparison['best_version']
        print(f"\nüéØ –ì–û–¢–û–í –ö –ê–ù–ê–õ–ò–ó–£: {best_version.path}")
        
        # –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –ª—É—á—à–µ–π –≤–µ—Ä—Å–∏–∏
        if best_version.path and os.path.exists(best_version.path):
            finder.analyze_function_quality(best_version.path)


if __name__ == "__main__":
    main()