#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ LoadBalancer
"""

import sys
import os
import asyncio
import time
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

async def test_load_balancer():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ LoadBalancer"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï LOADBALANCER")
    print("=" * 50)
    
    try:
        # –ò–º–ø–æ—Ä—Ç LoadBalancer
        from security.microservices.load_balancer import (
            LoadBalancer, 
            LoadBalancingAlgorithm, 
            ServiceRequest, 
            LoadBalancingRequest
        )
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
        lb = LoadBalancer(name="TestLoadBalancer")
        print("‚úÖ LoadBalancer: —Å–æ–∑–¥–∞–Ω –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –¢–µ—Å—Ç —Å—Ç–∞—Ç—É—Å–∞
        status = lb.get_status()
        print(f"‚úÖ –°—Ç–∞—Ç—É—Å: {status['status']}")
        print(f"‚úÖ –ê–ª–≥–æ—Ä–∏—Ç–º—ã: {status['algorithms_count']}")
        print(f"‚úÖ –°–µ—Ä–≤–∏—Å—ã: {status['services_count']}")
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
        request = LoadBalancingRequest(
            service_name="test_services",
            algorithm=LoadBalancingAlgorithm.ROUND_ROBIN,
            client_ip="192.168.1.100",
            session_id="test_session_123",
            priority=5,
            timeout=30,
            retry_count=3
        )
        print("‚úÖ LoadBalancingRequest: —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ —Å–µ—Ä–≤–∏—Å–∞
        service_request = ServiceRequest(
            name="test_service_1",
            url="http://localhost",
            port=8001,
            protocol="http",
            weight=10,
            max_connections=1000,
            health_check_url="/health",
            health_check_interval=30
        )
        print("‚úÖ ServiceRequest: —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤
        algorithms = lb.algorithms
        print(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã: {list(algorithms.keys())}")
        
        for name, algorithm in algorithms.items():
            print(f"  - {name}: {algorithm.get_algorithm_description()}")
        
        print("\nüéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–°–ü–ï–®–ù–û!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = asyncio.run(test_load_balancer())
    if success:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
    else:
        print("\nüí• –¢–ï–°–¢–´ –ù–ï –ü–†–û–®–õ–ò!")