#!/usr/bin/env python3
"""
–§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø: –î–æ–≤–µ–¥–µ–Ω–∏–µ –≤—Å–µ—Ö —ç—Ç–∞–ø–æ–≤ –¥–æ 100%
"""

import sys
import subprocess
import json
from datetime import datetime
from pathlib import Path
from typing import Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append('/Users/sergejhlystov/ALADDIN_NEW')

class FinalValidator:
    """–§–∏–Ω–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö —ç—Ç–∞–ø–æ–≤"""
    
    def __init__(self, file_path: str = "security/reactive/recovery_service.py"):
        self.file_path = Path(file_path)
        self.results = {}
        
    def run_complete_validation(self) -> Dict[str, Any]:
        """–ü–æ–ª–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö —ç—Ç–∞–ø–æ–≤"""
        print("üéØ –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø: –î–æ–≤–µ–¥–µ–Ω–∏–µ –¥–æ 100%")
        print("=" * 60)
        
        # –≠—Ç–∞–ø 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–æ–¥–æ–≤ –∏ –∫–ª–∞—Å—Å–æ–≤
        print("üìã –≠–¢–ê–ü 6: –ü–†–û–í–ï–†–ö–ê –ú–ï–¢–û–î–û–í –ò –ö–õ–ê–°–°–û–í")
        stage6_results = self._validate_stage6()
        
        # –≠—Ç–∞–ø 7: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤
        print("üìã –≠–¢–ê–ü 7: –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ú–ï–¢–û–î–û–í")
        stage7_results = self._validate_stage7()
        
        # –≠—Ç–∞–ø 8: –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        print("üìã –≠–¢–ê–ü 8: –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –í–°–ï–• –ö–û–ú–ü–û–ù–ï–ù–¢–û–í")
        stage8_results = self._validate_stage8()
        
        # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
        print("üìä –û–ë–©–ê–Ø –û–¶–ï–ù–ö–ê")
        overall_score = self._calculate_overall_score(stage6_results, stage7_results, stage8_results)
        
        self.results = {
            "timestamp": datetime.now().isoformat(),
            "stage6": stage6_results,
            "stage7": stage7_results,
            "stage8": stage8_results,
            "overall_score": overall_score
        }
        
        return self.results
    
    def _validate_stage6(self) -> Dict[str, Any]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –≠–¢–ê–ü–ê 6"""
        try:
            # –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –∏–º–ø–æ—Ä—Ç–æ–≤
            import_test = self._test_import_analysis()
            
            # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤
            instance_test = self._test_instance_creation()
            
            # –¢–µ—Å—Ç –º–µ—Ç–æ–¥–æ–≤
            method_test = self._test_methods()
            
            score = 0
            if import_test["success"]:
                score += 40
            if instance_test["success"]:
                score += 30
            if method_test["success"]:
                score += 30
            
            print(f"   ‚úÖ –ê–Ω–∞–ª–∏–∑ –∏–º–ø–æ—Ä—Ç–æ–≤: {'‚úÖ' if import_test['success'] else '‚ùå'}")
            print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤: {'‚úÖ' if instance_test['success'] else '‚ùå'}")
            print(f"   ‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤: {'‚úÖ' if method_test['success'] else '‚ùå'}")
            print(f"   üìä –û—Ü–µ–Ω–∫–∞ –≠–¢–ê–ü–ê 6: {score}%")
            
            return {
                "import_analysis": import_test,
                "instance_creation": instance_test,
                "method_testing": method_test,
                "score": score,
                "status": "completed" if score >= 90 else "needs_improvement"
            }
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≠–¢–ê–ü–ê 6: {e}")
            return {"error": str(e), "score": 0, "status": "failed"}
    
    def _validate_stage7(self) -> Dict[str, Any]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –≠–¢–ê–ü–ê 7"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã
            new_methods = [
                "__str__", "__repr__", "__len__", "__enter__", "__exit__",
                "validate_recovery_plan", "get_recovery_statistics", "cleanup_old_plans"
            ]
            
            with open(self.file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            methods_found = []
            for method in new_methods:
                if f"def {method}(" in content:
                    methods_found.append(method)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
            new_attributes = [
                "self.recovery_plans", "self.recovery_reports",
                "self.recovery_statistics", "self.last_cleanup_date"
            ]
            
            attributes_found = []
            for attr in new_attributes:
                if attr in content:
                    attributes_found.append(attr)
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã
            functionality_test = self._test_new_methods()
            
            score = 0
            score += (len(methods_found) / len(new_methods)) * 50  # 50% –∑–∞ –º–µ—Ç–æ–¥—ã
            score += (len(attributes_found) / len(new_attributes)) * 30  # 30% –∑–∞ –∞—Ç—Ä–∏–±—É—Ç—ã
            if functionality_test["success"]:
                score += 20  # 20% –∑–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
            
            print(f"   ‚úÖ –ú–µ—Ç–æ–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã: {len(methods_found)}/{len(new_methods)}")
            print(f"   ‚úÖ –ê—Ç—Ä–∏–±—É—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã: {len(attributes_found)}/{len(new_attributes)}")
            print(f"   ‚úÖ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {'‚úÖ' if functionality_test['success'] else '‚ùå'}")
            print(f"   üìä –û—Ü–µ–Ω–∫–∞ –≠–¢–ê–ü–ê 7: {score:.1f}%")
            
            return {
                "methods_added": len(methods_found),
                "methods_total": len(new_methods),
                "attributes_added": len(attributes_found),
                "attributes_total": len(new_attributes),
                "functionality_test": functionality_test,
                "score": score,
                "status": "completed" if score >= 90 else "needs_improvement"
            }
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≠–¢–ê–ü–ê 7: {e}")
            return {"error": str(e), "score": 0, "status": "failed"}
    
    def _validate_stage8(self) -> Dict[str, Any]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –≠–¢–ê–ü–ê 8"""
        try:
            # –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
            integration_test = self._test_integration()
            
            # –¢–µ—Å—Ç –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            component_test = self._test_all_components()
            
            # –¢–µ—Å—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞
            quality_test = self._test_code_quality()
            
            score = 0
            if integration_test["success"]:
                score += 40
            if component_test["success"]:
                score += 30
            if quality_test["success"]:
                score += 30
            
            print(f"   ‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: {'‚úÖ' if integration_test['success'] else '‚ùå'}")
            print(f"   ‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: {'‚úÖ' if component_test['success'] else '‚ùå'}")
            print(f"   ‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞: {'‚úÖ' if quality_test['success'] else '‚ùå'}")
            print(f"   üìä –û—Ü–µ–Ω–∫–∞ –≠–¢–ê–ü–ê 8: {score}%")
            
            return {
                "integration_test": integration_test,
                "component_test": component_test,
                "quality_test": quality_test,
                "score": score,
                "status": "completed" if score >= 90 else "needs_improvement"
            }
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≠–¢–ê–ü–ê 8: {e}")
            return {"error": str(e), "score": 0, "status": "failed"}
    
    def _test_import_analysis(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –∏–º–ø–æ—Ä—Ç–æ–≤"""
        try:
            result = subprocess.run([
                'python3', '-c',
                'import sys; sys.path.append("/Users/sergejhlystov/ALADDIN_NEW"); from security.reactive.recovery_service import RecoveryService; print("Import successful")'
            ], capture_output=True, text=True, timeout=30)
            
            return {
                "success": result.returncode == 0,
                "error": result.stderr if result.returncode != 0 else None
            }
        except Exception as e:
            return {"success": False, "error": str(e)}
    
    def _test_instance_creation(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤"""
        try:
            result = subprocess.run([
                'python3', '-c',
                'import sys; sys.path.append("/Users/sergejhlystov/ALADDIN_NEW"); from security.reactive.recovery_service import RecoveryService; rs = RecoveryService("test", {}); print("Instance created")'
            ], capture_output=True, text=True, timeout=30)
            
            return {
                "success": result.returncode == 0,
                "error": result.stderr if result.returncode != 0 else None
            }
        except Exception as e:
            return {"success": False, "error": str(e)}
    
    def _test_methods(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç –º–µ—Ç–æ–¥–æ–≤"""
        try:
            result = subprocess.run([
                'python3', '-c',
                'import sys; sys.path.append("/Users/sergejhlystov/ALADDIN_NEW"); from security.reactive.recovery_service import RecoveryService; rs = RecoveryService("test", {}); print(str(rs)); print(len(rs)); print(rs.get_recovery_statistics())'
            ], capture_output=True, text=True, timeout=30)
            
            return {
                "success": result.returncode == 0,
                "error": result.stderr if result.returncode != 0 else None
            }
        except Exception as e:
            return {"success": False, "error": str(e)}
    
    def _test_new_methods(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç –Ω–æ–≤—ã—Ö –º–µ—Ç–æ–¥–æ–≤"""
        try:
            result = subprocess.run([
                'python3', '-c',
                'import sys; sys.path.append("/Users/sergejhlystov/ALADDIN_NEW"); from security.reactive.recovery_service import RecoveryService; rs = RecoveryService("test", {}); print("Testing new methods:"); print("__str__:", str(rs)); print("__len__:", len(rs)); print("stats:", rs.get_recovery_statistics()); print("cleanup:", rs.cleanup_old_plans(30))'
            ], capture_output=True, text=True, timeout=30)
            
            return {
                "success": result.returncode == 0,
                "error": result.stderr if result.returncode != 0 else None,
                "output": result.stdout
            }
        except Exception as e:
            return {"success": False, "error": str(e)}
    
    def _test_integration(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        try:
            result = subprocess.run([
                'python3', '-c',
                'import sys; sys.path.append("/Users/sergejhlystov/ALADDIN_NEW"); from security.core.security_base import SecurityBase; from security.reactive.recovery_service import RecoveryService; print("Integration successful")'
            ], capture_output=True, text=True, timeout=30)
            
            return {
                "success": result.returncode == 0,
                "error": result.stderr if result.returncode != 0 else None
            }
        except Exception as e:
            return {"success": False, "error": str(e)}
    
    def _test_all_components(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        try:
            result = subprocess.run([
                'python3', '-c',
                'import sys; sys.path.append("/Users/sergejhlystov/ALADDIN_NEW"); from security.reactive.recovery_service import RecoveryService; rs = RecoveryService("test", {}); print("All components working")'
            ], capture_output=True, text=True, timeout=30)
            
            return {
                "success": result.returncode == 0,
                "error": result.stderr if result.returncode != 0 else None
            }
        except Exception as e:
            return {"success": False, "error": str(e)}
    
    def _test_code_quality(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞"""
        try:
            # –¢–µ—Å—Ç flake8
            result = subprocess.run([
                'python3', '-m', 'flake8', str(self.file_path)
            ], capture_output=True, text=True, timeout=30)
            
            flake8_errors = len(result.stdout.split('\n')) - 1 if result.returncode != 0 else 0
            
            # –¢–µ—Å—Ç —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
            result2 = subprocess.run([
                'python3', '-m', 'py_compile', str(self.file_path)
            ], capture_output=True, text=True, timeout=30)
            
            return {
                "success": flake8_errors == 0 and result2.returncode == 0,
                "flake8_errors": flake8_errors,
                "syntax_errors": result2.returncode != 0,
                "error": result.stderr if result.returncode != 0 else result2.stderr if result2.returncode != 0 else None
            }
        except Exception as e:
            return {"success": False, "error": str(e)}
    
    def _calculate_overall_score(self, stage6: Dict, stage7: Dict, stage8: Dict) -> float:
        """–†–∞—Å—á—ë—Ç –æ–±—â–µ–π –æ—Ü–µ–Ω–∫–∏"""
        scores = []
        
        if "score" in stage6:
            scores.append(stage6["score"])
        if "score" in stage7:
            scores.append(stage7["score"])
        if "score" in stage8:
            scores.append(stage8["score"])
        
        if scores:
            return sum(scores) / len(scores)
        else:
            return 0.0
    
    def save_final_report(self) -> str:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞"""
        try:
            report_dir = Path("formatting_work")
            report_dir.mkdir(exist_ok=True)
            
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            report_path = report_dir / f"final_validation_100_percent_{timestamp}.json"
            
            with open(report_path, 'w', encoding='utf-8') as f:
                json.dump(self.results, f, indent=2, ensure_ascii=False)
            
            print(f"\nüìÑ –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {report_path}")
            return str(report_path)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á—ë—Ç–∞: {e}")
            return ""

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    validator = FinalValidator()
    results = validator.run_complete_validation()
    
    print(f"\nüéØ –§–ò–ù–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print(f"   ‚Ä¢ –≠–¢–ê–ü 6: {results['stage6'].get('score', 0):.1f}%")
    print(f"   ‚Ä¢ –≠–¢–ê–ü 7: {results['stage7'].get('score', 0):.1f}%")
    print(f"   ‚Ä¢ –≠–¢–ê–ü 8: {results['stage8'].get('score', 0):.1f}%")
    print(f"   ‚Ä¢ –û–ë–©–ê–Ø –û–¶–ï–ù–ö–ê: {results['overall_score']:.1f}%")
    
    if results['overall_score'] >= 95:
        print(f"\nüéâ –£–°–ü–ï–•! –í—Å–µ —ç—Ç–∞–ø—ã –¥–æ–≤–µ–¥–µ–Ω—ã –¥–æ 100%!")
    elif results['overall_score'] >= 90:
        print(f"\n‚úÖ –û–¢–õ–ò–ß–ù–û! –ü–æ—á—Ç–∏ –≤—Å–µ —ç—Ç–∞–ø—ã –Ω–∞ 100%!")
    else:
        print(f"\n‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò!")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á—ë—Ç
    report_path = validator.save_final_report()
    print(f"üìÑ –û—Ç—á—ë—Ç: {report_path}")

if __name__ == "__main__":
    main()