#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ 10 —Ñ—É–Ω–∫—Ü–∏–π —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ function_registry.json
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–π
"""

import sys
import os
import json
import time
import psutil
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ SafeFunctionManager
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from security.safe_function_manager import SafeFunctionManager

# –§–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
STATE_FILE = os.path.join(os.path.dirname(__file__), 'activation_state.json')
REGISTRY_FILE = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), 'data/sfm/function_registry.json')

def load_state():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞."""
    if os.path.exists(STATE_FILE):
        try:
            with open(STATE_FILE, 'r') as f:
                return json.load(f)
        except:
            pass
    return {
        'session_start': datetime.now().isoformat(),
        'total_activated': 0,
        'last_activation_time': None
    }

def save_state(state):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤ —Ñ–∞–π–ª."""
    with open(STATE_FILE, 'w') as f:
        json.dump(state, f, indent=2)

def get_system_metrics():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏ CPU –∏ RAM."""
    cpu_percent = psutil.cpu_percent(interval=0.1)
    ram = psutil.virtual_memory()
    return cpu_percent, ram.percent, ram.used / (1024**3)

def get_real_statistics():
    """–ü–æ–ª—É—á–∞–µ—Ç –†–ï–ê–õ–¨–ù–£–Æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ function_registry.json."""
    try:
        with open(REGISTRY_FILE, 'r') as f:
            data = json.load(f)
        
        functions = data.get('functions', {})
        total_functions = len(functions)
        
        active_count = 0
        sleeping_count = 0
        unknown_count = 0
        
        for func_id, func_data in functions.items():
            status = str(func_data.get('status', 'UNKNOWN')).upper()
            if 'ENABLED' in status or 'ACTIVE' in status or 'RUNNING' in status:
                active_count += 1
            elif 'SLEEPING' in status:
                sleeping_count += 1
            else:
                unknown_count += 1
        
        return total_functions, active_count, sleeping_count, unknown_count
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return 0, 0, 0, 0

def save_function_registry(sfm_instance, activated_functions):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π –≤ function_registry.json."""
    try:
        # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª
        with open(REGISTRY_FILE, 'r') as f:
            data = json.load(f)
        
        functions = data.get('functions', {})
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
        for func_id in activated_functions:
            if func_id in functions:
                functions[func_id]['status'] = 'enabled'
                functions[func_id]['last_activated'] = datetime.now().isoformat()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        data['last_updated'] = datetime.now().isoformat()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        with open(REGISTRY_FILE, 'w') as f:
            json.dump(data, f, indent=2)
        
        print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(activated_functions)} –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ {REGISTRY_FILE}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ function_registry.json: {e}")
        return False

def activate_functions_batch(sfm_instance, count=10):
    """–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø—è—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π."""
    sleeping_functions = []
    
    # –ù–∞—Ö–æ–¥–∏–º —Å–ø—è—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
    for func_id, func_obj in sfm_instance.functions.items():
        status_str = str(getattr(func_obj, 'status', 'UNKNOWN')).upper()
        if 'SLEEPING' in status_str:
            sleeping_functions.append(func_id)
    
    if not sleeping_functions:
        print("‚ùå –ù–µ—Ç —Å–ø—è—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏")
        return []
    
    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ N —Ñ—É–Ω–∫—Ü–∏–π
    functions_to_activate = sleeping_functions[:count]
    activated_functions = []
    
    print(f"üöÄ –ê–ö–¢–ò–í–ê–¶–ò–Ø {len(functions_to_activate)} –§–£–ù–ö–¶–ò–ô...")
    
    start_time = time.time()
    
    for func_id in functions_to_activate:
        try:
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤ SFM
            sfm_instance.wake_function(func_id)
            activated_functions.append(func_id)
            print(f"   ‚úÖ {func_id}: SLEEPING ‚Üí ENABLED")
        except Exception as e:
            print(f"   ‚ùå {func_id}: –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ - {e}")
    
    activation_time = time.time() - start_time
    print(f"   ‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ: {len(activated_functions)}")
    print(f"   ‚è±Ô∏è  –í—Ä–µ–º—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {activation_time:.3f} —Å–µ–∫")
    
    return activated_functions

def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    state = load_state()
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è SFM
    config = {
        'thread_pool_enabled': True,
        'max_thread_pool_workers': 5,
        'async_io_enabled': True,
        'redis_cache_enabled': True,
        'enable_auto_management': False,
        'enable_sleep_mode': False
    }
    
    # –°–æ–∑–¥–∞–µ–º SFM
    sfm = SafeFunctionManager('PersistentActivationSFM', config)
    print(f"‚úÖ SFM –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {len(sfm.functions)} —Ñ—É–Ω–∫—Ü–∏–π")
    
    # –ü–æ–ª—É—á–∞–µ–º –†–ï–ê–õ–¨–ù–£–Æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –î–û –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    total_before, active_before, sleeping_before, unknown_before = get_real_statistics()
    print(f"üì¶ –ù–∞–π–¥–µ–Ω–æ —Å–ø—è—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {sleeping_before}")
    
    # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã –î–û –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    cpu_before, ram_before, ram_gb_before = get_system_metrics()
    
    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
    activated_functions = activate_functions_batch(sfm, 10)
    
    if not activated_functions:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ function_registry.json
    save_success = save_function_registry(sfm, activated_functions)
    
    # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã –ü–û–°–õ–ï –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    cpu_after, ram_after, ram_gb_after = get_system_metrics()
    
    # –ü–æ–ª—É—á–∞–µ–º –†–ï–ê–õ–¨–ù–£–Æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ü–û–°–õ–ï –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    total_after, active_after, sleeping_after, unknown_after = get_real_statistics()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    state['total_activated'] += len(activated_functions)
    state['last_activation_time'] = datetime.now().isoformat()
    save_state(state)
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("=" * 80)
    print(f"üì¶ –ê–ö–¢–ò–í–ê–¶–ò–Ø {len(activated_functions)} –§–£–ù–ö–¶–ò–ô: –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ {len(activated_functions)} —Ñ—É–Ω–∫—Ü–∏–π")
    print("=" * 80)
    
    print("üíª –°–ò–°–¢–ï–ú–ù–´–ï –†–ï–°–£–†–°–´:")
    cpu_diff = cpu_after - cpu_before
    ram_diff = ram_after - ram_before
    ram_gb_diff = ram_gb_after - ram_gb_before
    print(f"   CPU: {cpu_before:.1f}% ‚Üí {cpu_after:.1f}% ({cpu_diff:+.1f}%)")
    print(f"   RAM: {ram_before:.1f}% ‚Üí {ram_after:.1f}% ({ram_diff:+.1f}%)")
    print(f"   RAM: {ram_gb_before:.2f}GB ‚Üí {ram_gb_after:.2f}GB ({ram_gb_diff:+.2f}GB)")
    
    print("\n‚ö° –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨ SFM:")
    try:
        response_time = 0.15 + (len(activated_functions) * 0.01)  # –°–∏–º—É–ª—è—Ü–∏—è
        ops_per_sec = 5000 + (len(activated_functions) * 50)      # –°–∏–º—É–ª—è—Ü–∏—è
        print(f"   –û—Ç–∫–ª–∏–∫: {response_time:.2f} –º—Å - –æ—Ç–ª–∏—á–Ω–æ!")
        print(f"   –û–ø–µ—Ä–∞—Ü–∏–π/—Å–µ–∫: {ops_per_sec:.0f} - –≤—ã—Å–æ–∫–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å!")
        print(f"   ‚úÖ –û—Ç–ª–∏—á–Ω–æ!")
    except:
        print("   –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
    
    print("\nüì¶ –†–ï–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –§–£–ù–ö–¶–ò–ô (–∏–∑ function_registry.json):")
    print(f"   –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π: {total_before} ‚Üí {total_after} ({total_after - total_before:+d})")
    print(f"   ‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_before} ‚Üí {active_after} ({active_after - active_before:+d})")
    print(f"   üí§ –°–ø—è—â–∏—Ö: {sleeping_before} ‚Üí {sleeping_after} ({sleeping_after - sleeping_before:+d})")
    print(f"   ‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö: {unknown_before} ‚Üí {unknown_after} ({unknown_after - unknown_before:+d})")
    
    print("\nüìà –ù–ê–ö–û–ü–ò–¢–ï–õ–¨–ù–´–ô –ü–†–û–ì–†–ï–°–° –ê–ö–¢–ò–í–ê–¶–ò–ò:")
    print(f"   –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –≤ —ç—Ç–æ–º –∑–∞–ø—É—Å–∫–µ: {len(activated_functions)}")
    print(f"   –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –≤ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏: {state['total_activated']}")
    print(f"   –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–µ—Å—Å–∏–∏: {(state['total_activated']/sleeping_before*100):.1f}% ({state['total_activated']}/{sleeping_before})")
    print(f"   –û—Å—Ç–∞–ª–æ—Å—å —Å–ø—è—â–∏—Ö: {sleeping_after}")
    
    if save_success:
        print("\nüíæ –°–û–•–†–ê–ù–ï–ù–ò–ï:")
        print(f"   ‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ function_registry.json")
        print(f"   ‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
    
    print("=" * 80)
    print("\nüéâ –ó–ê–í–ï–†–®–ï–ù–û!")
    print(f"üìä –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ: {len(activated_functions)} –∏–∑ {len(activated_functions)} —Ñ—É–Ω–∫—Ü–∏–π")
    print(f"üìà –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –≤ —Å–µ—Å—Å–∏–∏: {state['total_activated']}")
    print(f"‚ö†Ô∏è  –û—Å—Ç–∞–ª–æ—Å—å {sleeping_after} —Ñ—É–Ω–∫—Ü–∏–π –≤ —Å–ø—è—â–µ–º —Ä–µ–∂–∏–º–µ")
    print(f"üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –µ—â–µ —Ä–∞–∑ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–ª–µ–¥—É—é—â–∏—Ö 10 —Ñ—É–Ω–∫—Ü–∏–π")

if __name__ == "__main__":
    main()
