#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü–õ–ê–ù –ü–û–®–ê–ì–û–í–û–ô –ú–ò–ì–†–ê–¶–ò–ò - –°–¢–†–û–ì–û –ü–û 1 –§–ê–ô–õ–£ –ó–ê –†–ê–ó
–° –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞
"""

import sys
import os
import re
import shutil
from pathlib import Path
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(str(Path(__file__).parent.parent))

def analyze_single_file(file_path):
    """–ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ–º"""
    print(f"üîç –ê–ù–ê–õ–ò–ó –§–ê–ô–õ–ê: {os.path.basename(file_path)}")
    print("=" * 60)
    
    if not os.path.exists(file_path):
        print("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return None
    
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        classes = re.findall(r'class\s+(\w+)', content)
        functions = re.findall(r'def\s+(\w+)', content)
        imports = re.findall(r'import\s+(\w+)|from\s+(\S+)\s+import', content)
        
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∞–π–ª–∞:")
        print(f"   ‚Ä¢ –ö–ª–∞—Å—Å—ã: {len(classes)} - {classes}")
        print(f"   ‚Ä¢ –§—É–Ω–∫—Ü–∏–∏: {len(functions)}")
        print(f"   ‚Ä¢ –ò–º–ø–æ—Ä—Ç—ã: {len(imports)}")
        
        # –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç —ç—Ç–æ—Ç –º–æ–¥—É–ª—å
        module_name = os.path.basename(file_path)[:-3]  # —É–±–∏—Ä–∞–µ–º .py
        importing_files = find_files_importing_module(module_name)
        
        if importing_files:
            print(f"‚ö†Ô∏è  –§–∞–π–ª—ã, –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—â–∏–µ —ç—Ç–æ—Ç –º–æ–¥—É–ª—å ({len(importing_files)}):")
            for imp_file in importing_files:
                print(f"   ‚Ä¢ {imp_file}")
        else:
            print("‚úÖ –ù–∏–∫—Ç–æ –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —ç—Ç–æ—Ç –º–æ–¥—É–ª—å")
        
        return {
            'classes': classes,
            'functions': functions,
            'imports': imports,
            'importing_files': importing_files,
            'content': content
        }
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        return None

def find_files_importing_module(module_name, search_path="."):
    """–ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π –º–æ–¥—É–ª—å"""
    importing_files = []
    
    for root, dirs, files in os.walk(search_path):
        for file in files:
            if file.endswith('.py') and file != f"{module_name}.py":
                file_path = os.path.join(root, file)
                try:
                    with open(file_path, 'r', encoding='utf-8') as f:
                        content = f.read()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–º–ø–æ—Ä—Ç–∞
                    import_patterns = [
                        f'import {module_name}',
                        f'from {module_name} import',
                        f'from .{module_name} import',
                        f'from ..{module_name} import',
                        f'from security.ai_agents.{module_name} import',
                        f'from security.microservices.{module_name} import',
                        f'from security.managers.{module_name} import',
                        f'from security.bots.{module_name} import'
                    ]
                    
                    for pattern in import_patterns:
                        if re.search(pattern, content):
                            importing_files.append(file_path)
                            break
                            
                except Exception:
                    continue
    
    return importing_files

def create_backup(file_path, backup_dir="migration_backups"):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ —Ñ–∞–π–ª–∞"""
    if not os.path.exists(backup_dir):
        os.makedirs(backup_dir)
    
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    backup_name = f"{os.path.basename(file_path)}_{timestamp}.backup"
    backup_path = os.path.join(backup_dir, backup_name)
    
    shutil.copy2(file_path, backup_path)
    print(f"üíæ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")
    return backup_path

def update_imports_in_file(file_path, old_module_path, new_module_path):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤ –≤ —Ñ–∞–π–ª–µ"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        original_content = content
        
        # –ó–∞–º–µ–Ω—è–µ–º –∏–º–ø–æ—Ä—Ç—ã
        replacements = [
            (f'from {old_module_path} import', f'from {new_module_path} import'),
            (f'import {old_module_path}', f'import {new_module_path}'),
        ]
        
        for old, new in replacements:
            content = content.replace(old, new)
        
        if content != original_content:
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(content)
            print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã –∏–º–ø–æ—Ä—Ç—ã –≤ {file_path}")
            return True
        else:
            print(f"‚ÑπÔ∏è  –ò–º–ø–æ—Ä—Ç—ã –≤ {file_path} –Ω–µ —Ç—Ä–µ–±—É—é—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–º–ø–æ—Ä—Ç–æ–≤ –≤ {file_path}: {e}")
        return False

def execute_single_file_migration(file_info, step_number):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    print(f"\nüöÄ –®–ê–ì {step_number}: –ú–ò–ì–†–ê–¶–ò–Ø {file_info['file']}")
    print("=" * 80)
    
    source_path = os.path.join(file_info['from'], file_info['file'])
    target_path = os.path.join(file_info['to'], file_info['file'])
    
    print(f"üìç –û—Ç–∫—É–¥–∞: {source_path}")
    print(f"üìç –ö—É–¥–∞: {target_path}")
    print(f"üí° –ü—Ä–∏—á–∏–Ω–∞: {file_info['reason']}")
    
    # –®–ê–ì 1: –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞
    print(f"\nüìã –®–ê–ì 1: –ê–ù–ê–õ–ò–ó –§–ê–ô–õ–ê")
    print("-" * 40)
    analysis = analyze_single_file(source_path)
    if not analysis:
        return False
    
    # –®–ê–ì 2: –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
    print(f"\nüìã –®–ê–ì 2: –°–û–ó–î–ê–ù–ò–ï –†–ï–ó–ï–†–í–ù–û–ô –ö–û–ü–ò–ò")
    print("-" * 40)
    backup_path = create_backup(source_path)
    
    # –®–ê–ì 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–µ–≤–æ–π –ø–∞–ø–∫–∏
    print(f"\nüìã –®–ê–ì 3: –ü–†–û–í–ï–†–ö–ê –¶–ï–õ–ï–í–û–ô –ü–ê–ü–ö–ò")
    print("-" * 40)
    target_dir = os.path.dirname(target_path)
    if not os.path.exists(target_dir):
        os.makedirs(target_dir)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: {target_dir}")
    else:
        print(f"‚úÖ –ü–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {target_dir}")
    
    # –®–ê–ì 4: –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    print(f"\nüìã –®–ê–ì 4: –ü–ï–†–ï–ú–ï–©–ï–ù–ò–ï –§–ê–ô–õ–ê")
    print("-" * 40)
    try:
        shutil.move(source_path, target_path)
        print(f"‚úÖ –§–∞–π–ª –ø–µ—Ä–µ–º–µ—â–µ–Ω: {source_path} ‚Üí {target_path}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è: {e}")
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
        shutil.copy2(backup_path, source_path)
        print(f"üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏")
        return False
    
    # –®–ê–ì 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
    print(f"\nüìã –®–ê–ì 5: –ü–†–û–í–ï–†–ö–ê –°–ò–ù–¢–ê–ö–°–ò–°–ê")
    print("-" * 40)
    import subprocess
    result = subprocess.run(f"python3 -m py_compile {target_path}", 
                          shell=True, capture_output=True, text=True)
    if result.returncode == 0:
        print("‚úÖ –°–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞: {result.stderr}")
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
        shutil.copy2(backup_path, source_path)
        os.remove(target_path)
        print(f"üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏")
        return False
    
    # –®–ê–ì 6: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º—ã—Ö —Ñ–∞–π–ª–∞—Ö
    print(f"\nüìã –®–ê–ì 6: –û–ë–ù–û–í–õ–ï–ù–ò–ï –ò–ú–ü–û–†–¢–û–í")
    print("-" * 40)
    if analysis['importing_files']:
        module_name = file_info['file'][:-3]
        old_module_path = f"security.ai_agents.{module_name}"
        new_module_path = f"{file_info['to'].replace('/', '.')}.{module_name}"
        
        for imp_file in analysis['importing_files']:
            update_imports_in_file(imp_file, old_module_path, new_module_path)
    else:
        print("‚ÑπÔ∏è  –ù–µ—Ç —Ñ–∞–π–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç —ç—Ç–æ—Ç –º–æ–¥—É–ª—å")
    
    # –®–ê–ì 7: –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    print(f"\nüìã –®–ê–ì 7: –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê")
    print("-" * 40)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –Ω–∞ –Ω–æ–≤–æ–º –º–µ—Å—Ç–µ
    if os.path.exists(target_path):
        print("‚úÖ –§–∞–π–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ü–µ–ª–µ–≤–æ–π –ø–∞–ø–∫–µ")
    else:
        print("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ü–µ–ª–µ–≤–æ–π –ø–∞–ø–∫–µ")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –æ—Å—Ç–∞–ª—Å—è –≤ –∏—Å—Ö–æ–¥–Ω–æ–π –ø–∞–ø–∫–µ
    if not os.path.exists(source_path):
        print("‚úÖ –§–∞–π–ª —É–¥–∞–ª–µ–Ω –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–π –ø–∞–ø–∫–∏")
    else:
        print("‚ö†Ô∏è  –§–∞–π–ª –æ—Å—Ç–∞–ª—Å—è –≤ –∏—Å—Ö–æ–¥–Ω–æ–π –ø–∞–ø–∫–µ")
    
    print(f"\nüéâ –§–ê–ô–õ {file_info['file']} –£–°–ü–ï–®–ù–û –ü–ï–†–ï–ú–ï–©–ï–ù!")
    print(f"üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")
    
    return True

def create_migration_plan():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –º–∏–≥—Ä–∞—Ü–∏–∏"""
    print("üöÄ –ü–õ–ê–ù –ü–û–®–ê–ì–û–í–û–ô –ú–ò–ì–†–ê–¶–ò–ò - –°–¢–†–û–ì–û –ü–û 1 –§–ê–ô–õ–£ –ó–ê –†–ê–ó")
    print("=" * 80)
    
    files_to_move = [
        {
            'file': 'emergency_formatters.py',
            'from': 'security/ai_agents/',
            'to': 'security/microservices/',
            'reason': '–ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö'
        },
        {
            'file': 'emergency_base_models.py',
            'from': 'security/ai_agents/',
            'to': 'security/microservices/',
            'reason': '–ë–∞–∑–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤'
        },
        {
            'file': 'emergency_base_models_refactored.py',
            'from': 'security/ai_agents/',
            'to': 'security/microservices/',
            'reason': '–†–µ—Ñ–∞–∫—Ç–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–∞–∑–æ–≤—ã–µ –º–æ–¥–µ–ª–∏'
        },
        {
            'file': 'emergency_service.py',
            'from': 'security/ai_agents/',
            'to': 'security/managers/',
            'reason': '–ú–µ–Ω–µ–¥–∂–µ—Ä —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤'
        },
        {
            'file': 'emergency_service_caller.py',
            'from': 'security/ai_agents/',
            'to': 'security/microservices/',
            'reason': '–ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å –≤—ã–∑–æ–≤–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤'
        },
        {
            'file': 'messenger_integration.py',
            'from': 'security/ai_agents/',
            'to': 'security/bots/',
            'reason': '–ë–æ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞–º–∏'
        }
    ]
    
    print(f"\nüìã –û–ë–©–ò–ô –ü–õ–ê–ù –ú–ò–ì–†–ê–¶–ò–ò")
    print("-" * 50)
    print(f"–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è: {len(files_to_move)}")
    print(f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è: –°–¢–†–û–ì–û –ü–û 1 –§–ê–ô–õ–£ –ó–ê –†–ê–ó")
    print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞: –ü–û–õ–ù–ê–Ø –ù–ê –ö–ê–ñ–î–û–ú –®–ê–ì–ï")
    print(f"–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: –†–ï–ó–ï–†–í–ù–´–ï –ö–û–ü–ò–ò + –û–¢–ö–ê–¢")
    
    print(f"\nüìã –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û–°–¢–¨ –ü–ï–†–ï–ú–ï–©–ï–ù–ò–Ø:")
    print("-" * 50)
    for i, file_info in enumerate(files_to_move, 1):
        print(f"{i}. {file_info['file']}")
        print(f"   {file_info['from']} ‚Üí {file_info['to']}")
        print(f"   –ü—Ä–∏—á–∏–Ω–∞: {file_info['reason']}")
        print()
    
    return files_to_move

def execute_migration_interactive():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏"""
    files_to_move = create_migration_plan()
    
    print(f"\nüöÄ –ù–ê–ß–ê–õ–û –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–û–ô –ú–ò–ì–†–ê–¶–ò–ò")
    print("=" * 80)
    print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ú–∏–≥—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è —Å—Ç—Ä–æ–≥–æ –ø–æ 1 —Ñ–∞–π–ª—É –∑–∞ —Ä–∞–∑!")
    print("‚ö†Ô∏è  –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞ –±—É–¥–µ—Ç –ø–∞—É–∑–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏!")
    print("‚ö†Ô∏è  –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–∫–∞—Ç!")
    
    input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –Ω–∞—á–∞–ª–∞ –º–∏–≥—Ä–∞—Ü–∏–∏...")
    
    success_count = 0
    total_files = len(files_to_move)
    
    for i, file_info in enumerate(files_to_move, 1):
        print(f"\n{'='*80}")
        print(f"–®–ê–ì {i}/{total_files}: {file_info['file']}")
        print(f"{'='*80}")
        
        success = execute_single_file_migration(file_info, i)
        
        if success:
            success_count += 1
            print(f"\n‚úÖ –®–ê–ì {i} –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
        else:
            print(f"\n‚ùå –®–ê–ì {i} –ó–ê–í–ï–†–®–ï–ù –° –û–®–ò–ë–ö–û–ô!")
            print("üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω –æ—Ç–∫–∞—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é")
        
        if i < total_files:
            input(f"\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ñ–∞–π–ª—É...")
    
    print(f"\nüéØ –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print("=" * 50)
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–æ: {success_count}/{total_files} —Ñ–∞–π–ª–æ–≤")
    
    if success_count == total_files:
        print("üéâ –í–°–ï –§–ê–ô–õ–´ –£–°–ü–ï–®–ù–û –ü–ï–†–ï–ú–ï–©–ï–ù–´!")
        print("‚úÖ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å–∏—Å—Ç–µ–º—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞!")
    else:
        print("‚ö†Ô∏è  –ù–ï–ö–û–¢–û–†–´–ï –§–ê–ô–õ–´ –ù–ï –£–î–ê–õ–û–°–¨ –ü–ï–†–ï–ú–ï–°–¢–ò–¢–¨")
        print("üìÅ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –≤ –ø–∞–ø–∫–µ migration_backups/")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ü–õ–ê–ù –ü–û–®–ê–ì–û–í–û–ô –ú–ò–ì–†–ê–¶–ò–ò –§–ê–ô–õ–û–í")
    print("=" * 80)
    
    # –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω
    files_to_move = create_migration_plan()
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    print(f"\nüìã –í–ê–†–ò–ê–ù–¢–´ –í–´–ü–û–õ–ù–ï–ù–ò–Ø:")
    print("-" * 50)
    print("1. –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–ª–∞–Ω (–±–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è)")
    print("2. –í—ã–ø–æ–ª–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –º–∏–≥—Ä–∞—Ü–∏—é")
    print("3. –°–æ–∑–¥–∞—Ç—å —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
    
    choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç (1-3): ").strip()
    
    if choice == "1":
        print("\n‚úÖ –ü–ª–∞–Ω —Å–æ–∑–¥–∞–Ω. –ì–æ—Ç–æ–≤ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é!")
    elif choice == "2":
        execute_migration_interactive()
    elif choice == "3":
        create_automation_script(files_to_move)
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")

def create_automation_script(files_to_move):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
    script_content = f'''#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤
–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Å—Ç—Ä–æ–≥–æ –ø–æ 1 —Ñ–∞–π–ª—É –∑–∞ —Ä–∞–∑
"""

import os
import shutil
import subprocess
import sys
from datetime import datetime

def execute_single_file_migration(file_info, step_number):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    print(f"\\nüöÄ –®–ê–ì {{step_number}}: –ú–ò–ì–†–ê–¶–ò–Ø {{file_info['file']}}")
    print("=" * 80)
    
    source_path = os.path.join(file_info['from'], file_info['file'])
    target_path = os.path.join(file_info['to'], file_info['file'])
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    backup_dir = f"migration_backups_{{datetime.now().strftime('%Y%m%d_%H%M%S')}}"
    os.makedirs(backup_dir, exist_ok=True)
    backup_path = os.path.join(backup_dir, file_info['file'])
    shutil.copy2(source_path, backup_path)
    
    try:
        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª
        shutil.move(source_path, target_path)
        print(f"‚úÖ –§–∞–π–ª –ø–µ—Ä–µ–º–µ—â–µ–Ω: {{source_path}} ‚Üí {{target_path}}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
        result = subprocess.run(f"python3 -m py_compile {{target_path}}", 
                              shell=True, capture_output=True, text=True)
        if result.returncode == 0:
            print("‚úÖ –°–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞: {{result.stderr}}")
            # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º—Å—è
            shutil.copy2(backup_path, source_path)
            os.remove(target_path)
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {{e}}")
        # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º—Å—è
        shutil.copy2(backup_path, source_path)
        return False

def main():
    files_to_move = {files_to_move}
    
    print("üöÄ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ú–ò–ì–†–ê–¶–ò–Ø –§–ê–ô–õ–û–í")
    print("=" * 80)
    
    success_count = 0
    for i, file_info in enumerate(files_to_move, 1):
        if execute_single_file_migration(file_info, i):
            success_count += 1
    
    print(f"\\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢: {{success_count}}/{{len(files_to_move)}} —Ñ–∞–π–ª–æ–≤ –ø–µ—Ä–µ–º–µ—â–µ–Ω–æ")

if __name__ == "__main__":
    main()
'''
    
    with open('ALADDIN_NEW/scripts/auto_migration.py', 'w', encoding='utf-8') as f:
        f.write(script_content)
    
    print("‚úÖ –°–æ–∑–¥–∞–Ω —Å–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: scripts/auto_migration.py")

if __name__ == "__main__":
    main()