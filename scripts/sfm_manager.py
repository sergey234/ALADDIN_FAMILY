#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
SFM Manager - –ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è SFM —Å–∏—Å—Ç–µ–º–æ–π
"""

import json
import os
import sys
import subprocess
import argparse
from datetime import datetime
from pathlib import Path

class SFMManager:
    """–ì–ª–∞–≤–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä SFM —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self):
        self.scripts_dir = "scripts"
        self.registry_path = "data/sfm/function_registry.json"
        self.available_commands = {
            'stats': '–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É SFM',
            'validate': '–í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã SFM',
            'fix': '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º SFM',
            'add': '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏',
            'backup': '–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏',
            'restore': '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏',
            'list': '–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π',
            'search': '–ü–æ–∏—Å–∫ —Ñ—É–Ω–∫—Ü–∏–π',
            'status': '–û–±—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã'
        }
    
    def run_script(self, script_name, args=None):
        """–ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞"""
        script_path = os.path.join(self.scripts_dir, script_name)
        
        if not os.path.exists(script_path):
            print(f"‚ùå –°–∫—Ä–∏–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {script_path}")
            return False
        
        try:
            cmd = [sys.executable, script_path]
            if args:
                cmd.extend(args)
            
            result = subprocess.run(cmd, capture_output=True, text=True)
            
            if result.returncode == 0:
                print(result.stdout)
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞: {result.stderr}")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞: {e}")
            return False
    
    def show_stats(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É SFM"""
        print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê SFM")
        print("=" * 50)
        
        # –ó–∞–ø—É—Å–∫ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
        if os.path.exists(os.path.join(self.scripts_dir, "sfm_stats_universal.py")):
            self.run_script("sfm_stats_universal.py")
        else:
            # Fallback –Ω–∞ –±—ã—Å—Ç—Ä—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.run_script("sfm_quick_stats.py")
    
    def validate_structure(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã SFM"""
        print("üîç –í–ê–õ–ò–î–ê–¶–ò–Ø –°–¢–†–£–ö–¢–£–†–´ SFM")
        print("=" * 50)
        
        self.run_script("sfm_structure_validator.py")
    
    def fix_issues(self):
        """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º SFM"""
        print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú SFM")
        print("=" * 50)
        
        self.run_script("sfm_fix_and_validate.py")
    
    def add_function(self, args):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏"""
        print("‚ûï –î–û–ë–ê–í–õ–ï–ù–ò–ï –ù–û–í–û–ô –§–£–ù–ö–¶–ò–ò")
        print("=" * 50)
        
        if os.path.exists(os.path.join(self.scripts_dir, "sfm_add_function.py")):
            self.run_script("sfm_add_function.py", args)
        else:
            print("‚ùå –°–∫—Ä–∏–ø—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    def create_backup(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
        print("üíæ –°–û–ó–î–ê–ù–ò–ï –†–ï–ó–ï–†–í–ù–û–ô –ö–û–ü–ò–ò")
        print("=" * 50)
        
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        backup_path = f"data/sfm/function_registry_backup_manual_{timestamp}.json"
        
        try:
            os.makedirs(os.path.dirname(backup_path), exist_ok=True)
            with open(self.registry_path, 'r', encoding='utf-8') as src:
                with open(backup_path, 'w', encoding='utf-8') as dst:
                    dst.write(src.read())
            print(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_path}")
            return backup_path
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
            return None
    
    def restore_backup(self, backup_path):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
        print("üîÑ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ò–ó –†–ï–ó–ï–†–í–ù–û–ô –ö–û–ü–ò–ò")
        print("=" * 50)
        
        if not os.path.exists(backup_path):
            print(f"‚ùå –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {backup_path}")
            return False
        
        try:
            with open(backup_path, 'r', encoding='utf-8') as src:
                with open(self.registry_path, 'w', encoding='utf-8') as dst:
                    dst.write(src.read())
            print(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–∑: {backup_path}")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            return False
    
    def list_functions(self):
        """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
        print("üìã –°–ü–ò–°–û–ö –í–°–ï–• –§–£–ù–ö–¶–ò–ô")
        print("=" * 50)
        
        try:
            with open(self.registry_path, 'r', encoding='utf-8') as f:
                registry = json.load(f)
            
            functions = registry.get('functions', {})
            
            if not functions:
                print("‚ùå –§—É–Ω–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            
            print(f"–í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π: {len(functions)}")
            print()
            
            for func_id, func_data in functions.items():
                if isinstance(func_data, dict):
                    name = func_data.get('name', 'Unknown')
                    func_type = func_data.get('function_type', 'unknown')
                    status = func_data.get('status', 'unknown')
                    is_critical = func_data.get('is_critical', False)
                    
                    critical_mark = "üî¥" if is_critical else "‚ö™"
                    status_icon = "üü¢" if status == "active" else "üü°" if status == "sleeping" else "üî¥"
                    
                    print(f"{critical_mark} {status_icon} {func_id}")
                    print(f"    Name: {name}")
                    print(f"    Type: {func_type}")
                    print(f"    Status: {status}")
                    print()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–µ—Å—Ç—Ä–∞: {e}")
    
    def search_functions(self, query):
        """–ü–æ–∏—Å–∫ —Ñ—É–Ω–∫—Ü–∏–π"""
        print(f"üîç –ü–û–ò–°–ö –§–£–ù–ö–¶–ò–ô: {query}")
        print("=" * 50)
        
        try:
            with open(self.registry_path, 'r', encoding='utf-8') as f:
                registry = json.load(f)
            
            functions = registry.get('functions', {})
            found_functions = []
            
            query_lower = query.lower()
            
            for func_id, func_data in functions.items():
                if isinstance(func_data, dict):
                    # –ü–æ–∏—Å–∫ –ø–æ ID
                    if query_lower in func_id.lower():
                        found_functions.append((func_id, func_data))
                        continue
                    
                    # –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏
                    name = func_data.get('name', '')
                    if query_lower in name.lower():
                        found_functions.append((func_id, func_data))
                        continue
                    
                    # –ü–æ–∏—Å–∫ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é
                    description = func_data.get('description', '')
                    if query_lower in description.lower():
                        found_functions.append((func_id, func_data))
                        continue
            
            if found_functions:
                print(f"–ù–∞–π–¥–µ–Ω–æ —Ñ—É–Ω–∫—Ü–∏–π: {len(found_functions)}")
                print()
                
                for func_id, func_data in found_functions:
                    name = func_data.get('name', 'Unknown')
                    func_type = func_data.get('function_type', 'unknown')
                    status = func_data.get('status', 'unknown')
                    is_critical = func_data.get('is_critical', False)
                    
                    critical_mark = "üî¥" if is_critical else "‚ö™"
                    status_icon = "üü¢" if status == "active" else "üü°" if status == "sleeping" else "üî¥"
                    
                    print(f"{critical_mark} {status_icon} {func_id}")
                    print(f"    Name: {name}")
                    print(f"    Type: {func_type}")
                    print(f"    Status: {status}")
                    print()
            else:
                print("‚ùå –§—É–Ω–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
    
    def show_status(self):
        """–û–±—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        print("üìä –û–ë–©–ò–ô –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´ SFM")
        print("=" * 50)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–µ—Å—Ç—Ä–∞
        if os.path.exists(self.registry_path):
            print("‚úÖ SFM —Ä–µ–µ—Å—Ç—Ä –Ω–∞–π–¥–µ–Ω")
        else:
            print("‚ùå SFM —Ä–µ–µ—Å—Ç—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤
        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤:")
        scripts = [
            "sfm_quick_stats.py",
            "sfm_analyzer.py",
            "sfm_structure_validator.py",
            "sfm_add_function.py",
            "sfm_fix_and_validate.py",
            "sfm_stats_universal.py"
        ]
        
        for script in scripts:
            script_path = os.path.join(self.scripts_dir, script)
            if os.path.exists(script_path):
                print(f"  ‚úÖ {script}")
            else:
                print(f"  ‚ùå {script}")
        
        # –ó–∞–ø—É—Å–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        print("\nüîç –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:")
        self.validate_structure()
        
        # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        self.show_stats()
    
    def show_help(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
        print("üöÄ SFM MANAGER - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ SFM —Å–∏—Å—Ç–µ–º–æ–π")
        print("=" * 50)
        print()
        print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
        for cmd, desc in self.available_commands.items():
            print(f"  {cmd:<12} - {desc}")
        print()
        print("–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:")
        print("  python3 scripts/sfm_manager.py stats")
        print("  python3 scripts/sfm_manager.py validate")
        print("  python3 scripts/sfm_manager.py fix")
        print("  python3 scripts/sfm_manager.py add --interactive")
        print("  python3 scripts/sfm_manager.py list")
        print("  python3 scripts/sfm_manager.py search 'ai_agent'")
        print("  python3 scripts/sfm_manager.py status")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description='SFM Manager - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ SFM —Å–∏—Å—Ç–µ–º–æ–π')
    parser.add_argument('command', nargs='?', help='–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è')
    parser.add_argument('args', nargs='*', help='–ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã')
    
    args = parser.parse_args()
    
    manager = SFMManager()
    
    if not args.command:
        manager.show_help()
        return
    
    command = args.command.lower()
    
    if command == 'stats':
        manager.show_stats()
    elif command == 'validate':
        manager.validate_structure()
    elif command == 'fix':
        manager.fix_issues()
    elif command == 'add':
        manager.add_function(args.args)
    elif command == 'backup':
        manager.create_backup()
    elif command == 'restore':
        if args.args:
            manager.restore_backup(args.args[0])
        else:
            print("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏")
    elif command == 'list':
        manager.list_functions()
    elif command == 'search':
        if args.args:
            manager.search_functions(' '.join(args.args))
        else:
            print("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")
    elif command == 'status':
        manager.show_status()
    elif command == 'help':
        manager.show_help()
    else:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")
        manager.show_help()

if __name__ == "__main__":
    main()