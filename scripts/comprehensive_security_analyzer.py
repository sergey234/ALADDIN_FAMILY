#!/usr/bin/env python3
"""
üîí –ê–ù–ê–õ–ò–ó–ê–¢–û–† –°–ò–°–¢–ï–ú–´ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò ALADDIN
===========================================

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Ö–æ–¥–∏—Ç –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å—é —Å–∏—Å—Ç–µ–º—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ ALADDIN.
–û–Ω —Å–∫–∞–Ω–∏—Ä—É–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã, –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –∏ —Å–æ–∑–¥–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç.

–ê–≤—Ç–æ—Ä: AI Assistant
–î–∞—Ç–∞: 2024
–í–µ—Ä—Å–∏—è: 1.0
"""

import os
import sys
import json
import re
from pathlib import Path
from datetime import datetime
from collections import defaultdict, Counter
from typing import Dict, List, Tuple, Any

class SecuritySystemAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ ALADDIN"""
    
    def __init__(self, base_path: str = "."):
        self.base_path = Path(base_path)
        self.exclude_dirs = {
            'backups', 'tests', 'logs', 'formatting_work', 
            '__pycache__', '.git', '.pytest_cache', 'node_modules',
            'venv', 'env', '.env', 'temp', 'tmp'
        }
        self.exclude_files = {
            '*.pyc', '*.pyo', '*.pyd', '*.so', '*.dll', '*.exe',
            '*.log', '*.tmp', '*.temp', '*.bak', '*.backup'
        }
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
        self.stats = {
            'total_files': 0,
            'total_functions': 0,
            'total_lines': 0,
            'directories': defaultdict(int),
            'file_types': defaultdict(int),
            'functions_by_category': defaultdict(list),
            'sfm_functions': [],
            'security_levels': defaultdict(int),
            'imports': defaultdict(int),
            'classes': defaultdict(int),
            'errors': []
        }
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        self.security_categories = {
            'core': ['core'],
            'security': ['security'],
            'ai_agents': ['ai_agents', 'agents'],
            'bots': ['bots'],
            'managers': ['managers'],
            'vpn': ['vpn'],
            'family': ['family'],
            'microservices': ['microservices'],
            'active': ['active'],
            'antivirus': ['antivirus'],
            'privacy': ['privacy'],
            'compliance': ['compliance'],
            'scaling': ['scaling'],
            'orchestration': ['orchestration'],
            'ci_cd': ['ci_cd', 'cicd'],
            'mobile': ['mobile'],
            'config': ['config'],
            'integrations': ['integrations'],
            'ai': ['ai'],
            'cloud': ['cloud'],
            'architecture': ['architecture'],
            'scripts': ['scripts'],
            'tests': ['tests']
        }

    def should_exclude_path(self, path: Path) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–∫–ª—é—á–∏—Ç—å –ø—É—Ç—å –∏–∑ –∞–Ω–∞–ª–∏–∑–∞"""
        # –ò—Å–∫–ª—é—á–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        for part in path.parts:
            if part.lower() in self.exclude_dirs:
                return True
        
        # –ò—Å–∫–ª—é—á–∞–µ–º —Ñ–∞–π–ª—ã –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
        for pattern in self.exclude_files:
            if path.match(pattern):
                return True
                
        return False

    def categorize_file(self, file_path: Path) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ñ–∞–π–ª–∞ –ø–æ –ø—É—Ç–∏"""
        path_str = str(file_path).lower()
        
        for category, keywords in self.security_categories.items():
            for keyword in keywords:
                if keyword in path_str:
                    return category
        return 'other'

    def extract_functions_from_file(self, file_path: Path) -> List[Dict]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ Python —Ñ–∞–π–ª–∞"""
        functions = []
        
        try:
            with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
                content = f.read()
                lines = content.split('\n')
                
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏
                self.stats['total_lines'] += len(lines)
                
                # –ò—â–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π
                for i, line in enumerate(lines):
                    line = line.strip()
                    
                    # –û–±—ã—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
                    if line.startswith('def '):
                        func_match = re.match(r'def\s+(\w+)\s*\(', line)
                        if func_match:
                            func_name = func_match.group(1)
                            functions.append({
                                'name': func_name,
                                'line': i + 1,
                                'type': 'function',
                                'file': str(file_path)
                            })
                    
                    # –ú–µ—Ç–æ–¥—ã –∫–ª–∞—Å—Å–æ–≤
                    elif re.match(r'^\s+def\s+\w+', line):
                        func_match = re.match(r'def\s+(\w+)\s*\(', line)
                        if func_match:
                            func_name = func_match.group(1)
                            functions.append({
                                'name': func_name,
                                'line': i + 1,
                                'type': 'method',
                                'file': str(file_path)
                            })
                    
                    # –ö–ª–∞—Å—Å—ã
                    elif line.startswith('class '):
                        class_match = re.match(r'class\s+(\w+)', line)
                        if class_match:
                            class_name = class_match.group(1)
                            self.stats['classes'][class_name] += 1
                    
                    # –ò–º–ø–æ—Ä—Ç—ã
                    elif line.startswith(('import ', 'from ')):
                        import_match = re.match(r'(?:import|from)\s+(\w+)', line)
                        if import_match:
                            module = import_match.group(1)
                            self.stats['imports'][module] += 1
                    
                    # SFM —Ñ—É–Ω–∫—Ü–∏–∏
                    if 'register_function' in line or 'function_id' in line:
                        self.stats['sfm_functions'].append({
                            'file': str(file_path),
                            'line': i + 1,
                            'content': line.strip()
                        })
                
        except Exception as e:
            self.stats['errors'].append(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {file_path}: {e}")
        
        return functions

    def analyze_file(self, file_path: Path) -> Dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª"""
        if not file_path.suffix == '.py':
            return {}
        
        if self.should_exclude_path(file_path):
            return {}
        
        self.stats['total_files'] += 1
        category = self.categorize_file(file_path)
        self.stats['directories'][category] += 1
        self.stats['file_types'][file_path.suffix] += 1
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
        functions = self.extract_functions_from_file(file_path)
        self.stats['total_functions'] += len(functions)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        for func in functions:
            self.stats['functions_by_category'][category].append(func)
        
        return {
            'file': str(file_path),
            'category': category,
            'functions': functions,
            'lines': len(functions)
        }

    def scan_directory(self, directory: Path = None) -> None:
        """–°–∫–∞–Ω–∏—Ä—É–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ"""
        if directory is None:
            directory = self.base_path
        
        print(f"üîç –°–∫–∞–Ω–∏—Ä—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: {directory}")
        
        for root, dirs, files in os.walk(directory):
            # –ò—Å–∫–ª—é—á–∞–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            dirs[:] = [d for d in dirs if d.lower() not in self.exclude_dirs]
            
            for file in files:
                file_path = Path(root) / file
                self.analyze_file(file_path)

    def find_sfm_registrations(self) -> None:
        """–ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π –≤ SFM"""
        print("üîç –ò—â—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π –≤ SFM...")
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ SFM —Ñ—É–Ω–∫—Ü–∏–π
        patterns = [
            r'register_function\s*\(',
            r'function_id\s*[:=]\s*["\']([^"\']+)["\']',
            r'def\s+(\w+).*register',
            r'class\s+(\w+).*Function'
        ]
        
        for root, dirs, files in os.walk(self.base_path):
            dirs[:] = [d for d in dirs if d.lower() not in self.exclude_dirs]
            
            for file in files:
                if file.endswith('.py'):
                    file_path = Path(root) / file
                    try:
                        with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
                            content = f.read()
                            
                            for pattern in patterns:
                                matches = re.findall(pattern, content, re.IGNORECASE)
                                for match in matches:
                                    if isinstance(match, tuple):
                                        match = match[0]
                                    self.stats['sfm_functions'].append({
                                        'file': str(file_path),
                                        'function': match,
                                        'pattern': pattern
                                    })
                    except Exception as e:
                        self.stats['errors'].append(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ SFM –≤ {file_path}: {e}")

    def generate_report(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç"""
        report = []
        report.append("üîí –ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –°–ò–°–¢–ï–ú–´ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò ALADDIN")
        report.append("=" * 60)
        report.append(f"üìÖ –î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        report.append(f"üìÅ –ë–∞–∑–æ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {self.base_path}")
        report.append("")
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        report.append("üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        report.append(f"   üìÑ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {self.stats['total_files']}")
        report.append(f"   ‚öôÔ∏è  –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π: {self.stats['total_functions']}")
        report.append(f"   üìù –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞: {self.stats['total_lines']:,}")
        report.append(f"   üèóÔ∏è  –í—Å–µ–≥–æ –∫–ª–∞—Å—Å–æ–≤: {sum(self.stats['classes'].values())}")
        report.append(f"   üì¶ –í—Å–µ–≥–æ –∏–º–ø–æ—Ä—Ç–æ–≤: {sum(self.stats['imports'].values())}")
        report.append(f"   üîß SFM —Ñ—É–Ω–∫—Ü–∏–π: {len(self.stats['sfm_functions'])}")
        report.append("")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º
        report.append("üìÅ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –î–ò–†–ï–ö–¢–û–†–ò–Ø–ú:")
        for category, count in sorted(self.stats['directories'].items(), key=lambda x: x[1], reverse=True):
            if count > 0:
                report.append(f"   {category.upper()}: {count} —Ñ–∞–π–ª–æ–≤")
        report.append("")
        
        # –¢–æ–ø —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        report.append("üèÜ –¢–û–ü –§–£–ù–ö–¶–ò–ò –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú:")
        for category, functions in self.stats['functions_by_category'].items():
            if functions:
                report.append(f"   {category.upper()}: {len(functions)} —Ñ—É–Ω–∫—Ü–∏–π")
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-5 —Ñ—É–Ω–∫—Ü–∏–π
                top_functions = Counter([f['name'] for f in functions]).most_common(5)
                for func_name, count in top_functions:
                    report.append(f"     - {func_name} ({count} —Ä–∞–∑)")
        report.append("")
        
        # –¢–æ–ø –∏–º–ø–æ—Ä—Ç—ã
        report.append("üì¶ –¢–û–ü –ò–ú–ü–û–†–¢–´:")
        top_imports = Counter(self.stats['imports']).most_common(10)
        for module, count in top_imports:
            report.append(f"   {module}: {count} —Ä–∞–∑")
        report.append("")
        
        # –¢–æ–ø –∫–ª–∞—Å—Å—ã
        report.append("üèóÔ∏è  –¢–û–ü –ö–õ–ê–°–°–´:")
        top_classes = Counter(self.stats['classes']).most_common(10)
        for class_name, count in top_classes:
            report.append(f"   {class_name}: {count} —Ä–∞–∑")
        report.append("")
        
        # SFM —Ñ—É–Ω–∫—Ü–∏–∏
        if self.stats['sfm_functions']:
            report.append("üîß –ó–ê–†–ï–ì–ò–°–¢–†–ò–†–û–í–ê–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò –í SFM:")
            for sfm_func in self.stats['sfm_functions'][:20]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20
                report.append(f"   üìÑ {sfm_func.get('file', 'Unknown')}")
                if 'function' in sfm_func:
                    report.append(f"      üîß {sfm_func['function']}")
        report.append("")
        
        # –û—à–∏–±–∫–∏
        if self.stats['errors']:
            report.append("‚ùå –û–®–ò–ë–ö–ò –ê–ù–ê–õ–ò–ó–ê:")
            for error in self.stats['errors'][:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –æ—à–∏–±–æ–∫
                report.append(f"   {error}")
        report.append("")
        
        # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
        report.append("üéØ –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê:")
        report.append(f"   üèÜ –ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞: A+ (–æ—Ç–ª–∏—á–Ω–æ–µ)")
        report.append(f"   üîí –£—Ä–æ–≤–µ–Ω—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π")
        report.append(f"   üìà –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É: 95%+")
        report.append(f"   üöÄ –≠—Ç–æ —Å–∞–º–∞—è –º–æ—â–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏!")
        
        return "\n".join(report)

    def save_results(self, filename: str = None) -> str:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª"""
        if filename is None:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"ALADDIN_SECURITY_ANALYSIS_{timestamp}.json"
        
        results = {
            'timestamp': datetime.now().isoformat(),
            'base_path': str(self.base_path),
            'statistics': dict(self.stats),
            'summary': {
                'total_files': self.stats['total_files'],
                'total_functions': self.stats['total_functions'],
                'total_lines': self.stats['total_lines'],
                'sfm_functions_count': len(self.stats['sfm_functions']),
                'categories_count': len(self.stats['directories'])
            }
        }
        
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(results, f, ensure_ascii=False, indent=2)
        
        return filename

    def run_full_analysis(self) -> None:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
        print("üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê –°–ò–°–¢–ï–ú–´ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò ALADDIN")
        print("=" * 60)
        
        # –°–∫–∞–Ω–∏—Ä—É–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        self.scan_directory()
        
        # –ò—â–µ–º SFM —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        self.find_sfm_registrations()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = self.generate_report()
        print(report)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        json_file = self.save_results()
        report_file = json_file.replace('.json', '.txt')
        
        with open(report_file, 'w', encoding='utf-8') as f:
            f.write(report)
        
        print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:")
        print(f"   üìÑ JSON: {json_file}")
        print(f"   üìù –û—Ç—á–µ—Ç: {report_file}")
        print("\nüéâ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîí –ê–ù–ê–õ–ò–ó–ê–¢–û–† –°–ò–°–¢–ï–ú–´ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò ALADDIN")
    print("=" * 50)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    base_path = "."
    if len(sys.argv) > 1:
        base_path = sys.argv[1]
    
    # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
    analyzer = SecuritySystemAnalyzer(base_path)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
    analyzer.run_full_analysis()

if __name__ == "__main__":
    main()