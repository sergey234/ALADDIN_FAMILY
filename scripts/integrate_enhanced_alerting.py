#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Enhanced Alerting System —Å SafeFunctionManager
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∞–ª–µ—Ä—Ç–æ–≤

–ê–≤—Ç–æ—Ä: ALADDIN Security Team
–í–µ—Ä—Å–∏—è: 1.0
–î–∞—Ç–∞: 2025-09-08
"""

import sys
import os
import json
import time
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from security.enhanced_alerting import EnhancedAlertingSystem, AlertRule, AlertSeverity, AlertChannel
from security.safe_function_manager import SafeFunctionManager


def integrate_enhanced_alerting():
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∞–ª–µ—Ä—Ç–æ–≤"""
    print("üö® –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Enhanced Alerting System —Å SafeFunctionManager")
    print("=" * 60)
    
    try:
        # 1. –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å–∏—Å—Ç–µ–º—ã –∞–ª–µ—Ä—Ç–æ–≤
        print("1. –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∞–ª–µ—Ä—Ç–æ–≤...")
        alerting_system = EnhancedAlertingSystem()
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∞–ª–µ—Ä—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–∞")
        
        # 2. –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ SafeFunctionManager
        print("2. –°–æ–∑–¥–∞–Ω–∏–µ SafeFunctionManager...")
        safe_manager = SafeFunctionManager()
        print("‚úÖ SafeFunctionManager —Å–æ–∑–¥–∞–Ω")
        
        # 3. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∞–ª–µ—Ä—Ç–æ–≤ –≤ SafeFunctionManager
        print("3. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ SafeFunctionManager...")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        alerting_config = {
            "function_name": "EnhancedAlertingSystem",
            "description": "–£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
            "version": "1.0",
            "author": "ALADDIN Security Team",
            "category": "security",
            "priority": "high",
            "dependencies": ["core.base", "core.logging_module"],
            "enabled": True,
            "auto_start": True,
            "monitoring": True,
            "alerting": True,
            "performance_tracking": True,
            "error_handling": True,
            "logging": True,
            "metrics": True,
            "health_check": True,
            "backup": True,
            "restore": True,
            "update": True,
            "rollback": True,
            "cleanup": True,
            "status": "active",
            "last_updated": datetime.now().isoformat(),
            "update_frequency": "real_time",
            "performance_threshold": 0.8,
            "error_threshold": 0.05,
            "memory_limit": 100,  # MB
            "cpu_limit": 50,  # %
            "disk_limit": 1000,  # MB
            "network_limit": 100,  # MB
            "timeout": 30,  # seconds
            "retry_count": 3,
            "cooldown": 60,  # seconds
            "max_instances": 1,
            "auto_restart": True,
            "auto_scale": False,
            "load_balancing": False,
            "caching": True,
            "compression": True,
            "encryption": True,
            "authentication": True,
            "authorization": True,
            "audit_logging": True,
            "compliance": True,
            "testing": True,
            "documentation": True,
            "support": True,
            "maintenance": True,
            "monitoring_rules": [
                {
                    "rule_id": "high_cpu_usage",
                    "name": "–í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ CPU",
                    "condition": "cpu_usage > 80",
                    "severity": "warning",
                    "enabled": True
                },
                {
                    "rule_id": "high_memory_usage",
                    "name": "–í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ –ø–∞–º—è—Ç—å",
                    "condition": "memory_usage > 90",
                    "severity": "error",
                    "enabled": True
                },
                {
                    "rule_id": "security_threat_detected",
                    "name": "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —É–≥—Ä–æ–∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
                    "condition": "threats_detected > 0",
                    "severity": "critical",
                    "enabled": True
                }
            ],
            "alert_channels": ["email", "console", "log"],
            "email_config": {
                "smtp_server": "smtp.gmail.com",
                "smtp_port": 587,
                "username": "",
                "password": "",
                "from_email": "aladdin@security.local",
                "to_emails": ["admin@security.local"]
            },
            "webhook_config": {
                "url": "http://localhost:5000/api/webhook",
                "timeout": 10
            }
        }
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
        registration_result = safe_manager.register_function(
            function_name="EnhancedAlertingSystem",
            function_instance=alerting_system,
            config=alerting_config
        )
        
        if registration_result["success"]:
            print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∞–ª–µ—Ä—Ç–æ–≤ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≤ SafeFunctionManager")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {registration_result['error']}")
            return False
        
        # 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        print("4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
        status = safe_manager.get_function_status("EnhancedAlertingSystem")
        print(f"üìä –°—Ç–∞—Ç—É—Å: {status['status']}")
        print(f"üìà –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {status['performance']}")
        print(f"üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {status['config_loaded']}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç—Ä–∏–∫
        metrics = safe_manager.get_function_metrics("EnhancedAlertingSystem")
        print(f"üìä –ú–µ—Ç—Ä–∏–∫–∏: {len(metrics)} –∑–∞–ø–∏—Å–µ–π")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤
        logs = safe_manager.get_function_logs("EnhancedAlertingSystem", limit=5)
        print(f"üìù –õ–æ–≥–∏: {len(logs)} –∑–∞–ø–∏—Å–µ–π")
        
        # 5. –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        print("5. –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...")
        
        integration_report = {
            "integration_date": datetime.now().isoformat(),
            "function_name": "EnhancedAlertingSystem",
            "version": "1.0",
            "status": "success",
            "safe_manager_integration": True,
            "monitoring_enabled": True,
            "alerting_enabled": True,
            "performance_tracking": True,
            "error_handling": True,
            "logging_enabled": True,
            "metrics_collection": True,
            "health_monitoring": True,
            "backup_enabled": True,
            "restore_capability": True,
            "update_mechanism": True,
            "rollback_capability": True,
            "cleanup_enabled": True,
            "alert_rules": len(alerting_system.alert_rules),
            "alert_channels": len(alerting_system.channels),
            "monitoring_active": alerting_system.running,
            "configuration": alerting_config,
            "test_results": {
                "registration": registration_result["success"],
                "status_check": status["status"] == "active",
                "metrics_available": len(metrics) > 0,
                "logs_available": len(logs) > 0
            },
            "recommendations": [
                "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å email –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤",
                "–î–æ–±–∞–≤–∏—Ç—å SMS –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∞–ª–µ—Ä—Ç–æ–≤",
                "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å webhook –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏",
                "–†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∏ –æ–±–Ω–æ–≤–ª—è—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –∞–ª–µ—Ä—Ç–æ–≤",
                "–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã –∞–ª–µ—Ä—Ç–æ–≤"
            ]
        }
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        report_filename = f"enhanced_alerting_integration_report_{int(time.time())}.json"
        with open(report_filename, 'w', encoding='utf-8') as f:
            json.dump(integration_report, f, indent=2, ensure_ascii=False)
        
        print(f"‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_filename}")
        
        # 6. –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        print("\n" + "=" * 60)
        print("üéâ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        print("=" * 60)
        print(f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"üîß –§—É–Ω–∫—Ü–∏—è: EnhancedAlertingSystem v1.0")
        print(f"üìä –°—Ç–∞—Ç—É—Å: {status['status']}")
        print(f"üìà –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {status['performance']}")
        print(f"üö® –ü—Ä–∞–≤–∏–ª –∞–ª–µ—Ä—Ç–æ–≤: {len(alerting_system.alert_rules)}")
        print(f"üì° –ö–∞–Ω–∞–ª–æ–≤ –æ—Ç–ø—Ä–∞–≤–∫–∏: {len(alerting_system.channels)}")
        print(f"üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω: {'–î–∞' if alerting_system.running else '–ù–µ—Ç'}")
        print(f"üìù –û—Ç—á–µ—Ç: {report_filename}")
        print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        for i, rec in enumerate(integration_report["recommendations"], 1):
            print(f"   {i}. {rec}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        return False


def test_alerting_system():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∞–ª–µ—Ä—Ç–æ–≤"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∞–ª–µ—Ä—Ç–æ–≤...")
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞
        test_rule = AlertRule(
            rule_id="test_rule",
            name="–¢–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–∞–≤–∏–ª–æ",
            description="–ü—Ä–∞–≤–∏–ª–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –∞–ª–µ—Ä—Ç–æ–≤",
            condition="cpu_usage > 0",  # –í—Å–µ–≥–¥–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç
            severity=AlertSeverity.INFO,
            channels=[AlertChannel.CONSOLE, AlertChannel.LOG],
            cooldown=1
        )
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∞–ª–µ—Ä—Ç–æ–≤
        alerting_system = EnhancedAlertingSystem()
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞
        alerting_system.add_alert_rule(test_rule)
        
        print("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–∞–≤–∏–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ")
        
        # –û–∂–∏–¥–∞–Ω–∏–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –∞–ª–µ—Ä—Ç–∞
        print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –∞–ª–µ—Ä—Ç–∞ (10 —Å–µ–∫—É–Ω–¥)...")
        time.sleep(10)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤
        alerts = alerting_system.get_alerts(limit=10)
        print(f"üìä –ü–æ–ª—É—á–µ–Ω–æ –∞–ª–µ—Ä—Ç–æ–≤: {len(alerts)}")
        
        for alert in alerts:
            print(f"  - {alert.severity.value.upper()}: {alert.title}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = alerting_system.get_alert_statistics()
        print(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats['total_alerts']} –≤—Å–µ–≥–æ, {stats['unresolved_alerts']} –Ω–µ—Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö")
        
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã
        alerting_system.stop()
        print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False


if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Enhanced Alerting System")
    print("=" * 60)
    
    # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
    success = integrate_enhanced_alerting()
    
    if success:
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        test_alerting_system()
        
        print("\nüéâ –í–°–ï –ó–ê–î–ê–ß–ò –í–´–ü–û–õ–ù–ï–ù–´ –£–°–ü–ï–®–ù–û!")
    else:
        print("\n‚ùå –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –ù–ï –£–î–ê–õ–ê–°–¨!")
        sys.exit(1)