#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å –∞–∫—Ç–∏–≤–∞—Ü–∏–µ–π —Ñ—É–Ω–∫—Ü–∏–π –ø–æ 10 —à—Ç—É–∫
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç CPU, RAM –∏ SFM –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
"""

import sys
import os
import time
import psutil
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from security.safe_function_manager import SafeFunctionManager

class ActivationMonitor:
    def __init__(self):
        self.sfm = None
        self.baseline_cpu = 0
        self.baseline_ram = 0
        self.baseline_sfm_perf = 0
        self.activation_count = 0
        
    def get_system_stats(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤"""
        cpu = psutil.cpu_percent(interval=0.1)
        ram = psutil.virtual_memory()
        
        return {
            'cpu_percent': cpu,
            'ram_percent': ram.percent,
            'ram_used_gb': ram.used / (1024**3),
            'ram_total_gb': ram.total / (1024**3),
            'ram_available_gb': ram.available / (1024**3)
        }
    
    def get_sfm_performance(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ SFM"""
        if not self.sfm:
            return None
            
        start_time = time.time()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ SFM
        for i in range(10):
            _ = list(self.sfm.functions.keys())
            critical_functions = []
            for func_id, func_obj in self.sfm.functions.items():
                if getattr(func_obj, 'is_critical', False):
                    critical_functions.append(func_id)
        
        end_time = time.time()
        avg_response = (end_time - start_time) / 10
        operations_per_sec = 10 / (end_time - start_time)
        
        return {
            'avg_response_ms': avg_response * 1000,
            'operations_per_sec': operations_per_sec,
            'total_time': end_time - start_time
        }
    
    def get_sleeping_functions(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø—è—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
        sleeping_functions = []
        critical_sleeping = []
        
        for func_id, func_obj in self.sfm.functions.items():
            status = str(getattr(func_obj, 'status', ''))
            if 'sleep' in status.lower():
                sleeping_functions.append(func_id)
                
                if getattr(func_obj, 'is_critical', False):
                    critical_sleeping.append(func_id)
        
        return sleeping_functions, critical_sleeping
    
    def simulate_function_activation(self, function_ids):
        """–°–∏–º—É–ª—è—Ü–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π"""
        activated_count = 0
        
        for func_id in function_ids:
            try:
                # –°–∏–º—É–ª—è—Ü–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏
                time.sleep(0.01)  # –ò–º–∏—Ç–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
                activated_count += 1
                
                # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –∫–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
                # –ù–∞–ø—Ä–∏–º–µ—Ä: sfm.activate_function(func_id)
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ {func_id}: {e}")
        
        return activated_count
    
    def print_current_status(self, batch_number=None, activated_count=None):
        """–í—ã–≤–æ–¥ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        # –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
        sys_stats = self.get_system_stats()
        
        # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å SFM
        sfm_perf = self.get_sfm_performance()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π
        sleeping_functions, critical_sleeping = self.get_sleeping_functions()
        
        print("=" * 80)
        if batch_number:
            print(f"üì¶ –ü–ê–ö–ï–¢ {batch_number}: –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ {activated_count} —Ñ—É–Ω–∫—Ü–∏–π")
        else:
            print("üìä –ë–ê–ó–û–í–ê–Ø –õ–ò–ù–ò–Ø –°–ò–°–¢–ï–ú–´")
        print("=" * 80)
        
        print(f"üíª CPU: {sys_stats['cpu_percent']:.1f}%")
        print(f"üíæ RAM: {sys_stats['ram_percent']:.1f}% ({sys_stats['ram_used_gb']:.2f}GB / {sys_stats['ram_total_gb']:.2f}GB)")
        print(f"üìä –î–æ—Å—Ç—É–ø–Ω–æ RAM: {sys_stats['ram_available_gb']:.2f}GB")
        
        if sfm_perf:
            print(f"‚ö° SFM –æ—Ç–∫–ª–∏–∫: {sfm_perf['avg_response_ms']:.2f} –º—Å")
            print(f"üöÄ –û–ø–µ—Ä–∞—Ü–∏–π/—Å–µ–∫: {sfm_perf['operations_per_sec']:.0f}")
            
            # –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            if sfm_perf['avg_response_ms'] < 1.0:
                print("‚úÖ –û—Ç–ª–∏—á–Ω–æ!")
            elif sfm_perf['avg_response_ms'] < 5.0:
                print("‚úÖ –•–æ—Ä–æ—à–æ")
            else:
                print("‚ö†Ô∏è  –¢—Ä–µ–±—É–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
        
        print()
        print(f"üì¶ –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π: {len(self.sfm.functions)}")
        print(f"üí§ –°–ø—è—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π: {len(sleeping_functions)}")
        print(f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–ø—è—â–∏—Ö: {len(critical_sleeping)}")
        
        # –ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç –±–∞–∑–æ–≤–æ–π –ª–∏–Ω–∏–∏
        if self.baseline_cpu > 0:
            cpu_change = sys_stats['cpu_percent'] - self.baseline_cpu
            ram_change = sys_stats['ram_percent'] - self.baseline_ram
            
            print()
            print("üìà –ò–ó–ú–ï–ù–ï–ù–ò–Ø –û–¢ –ë–ê–ó–û–í–û–ô –õ–ò–ù–ò–ò:")
            print(f"   üñ•Ô∏è  CPU: {cpu_change:+.1f}%")
            print(f"   üíæ RAM: {ram_change:+.1f}%")
            
            if sfm_perf and self.baseline_sfm_perf > 0:
                perf_change = sfm_perf['avg_response_ms'] - self.baseline_sfm_perf
                print(f"   ‚ö° SFM –æ—Ç–∫–ª–∏–∫: {perf_change:+.2f} –º—Å")
        
        print("=" * 80)
        print()
    
    def set_baseline(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–∑–æ–≤–æ–π –ª–∏–Ω–∏–∏"""
        print("üìä –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–∑–æ–≤–æ–π –ª–∏–Ω–∏–∏...")
        time.sleep(1)  # –î–∞–µ–º —Å–∏—Å—Ç–µ–º–µ —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è
        
        sys_stats = self.get_system_stats()
        sfm_perf = self.get_sfm_performance()
        
        self.baseline_cpu = sys_stats['cpu_percent']
        self.baseline_ram = sys_stats['ram_percent']
        if sfm_perf:
            self.baseline_sfm_perf = sfm_perf['avg_response_ms']
        
        print("‚úÖ –ë–∞–∑–æ–≤–∞—è –ª–∏–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
        print()
    
    def activate_batch(self, function_ids, batch_number):
        """–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–∞–∫–µ—Ç–∞ —Ñ—É–Ω–∫—Ü–∏–π"""
        print(f"üöÄ –ê–ö–¢–ò–í–ê–¶–ò–Ø –ü–ê–ö–ï–¢–ê {batch_number}")
        print(f"   –§—É–Ω–∫—Ü–∏–π –≤ –ø–∞–∫–µ—Ç–µ: {len(function_ids)}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        stats_before = self.get_system_stats()
        perf_before = self.get_sfm_performance()
        
        # –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π
        start_time = time.time()
        activated_count = self.simulate_function_activation(function_ids)
        activation_time = time.time() - start_time
        
        # –î–∞–µ–º —Å–∏—Å—Ç–µ–º–µ —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è
        time.sleep(0.5)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        stats_after = self.get_system_stats()
        perf_after = self.get_sfm_performance()
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        cpu_change = stats_after['cpu_percent'] - stats_before['cpu_percent']
        ram_change = stats_after['ram_percent'] - stats_before['ram_percent']
        
        if perf_before and perf_after:
            perf_change = perf_after['avg_response_ms'] - perf_before['avg_response_ms']
        else:
            perf_change = 0
        
        print(f"   ‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ: {activated_count}")
        print(f"   ‚è±Ô∏è  –í—Ä–µ–º—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {activation_time:.3f} —Å–µ–∫")
        print(f"   üìä –í–ª–∏—è–Ω–∏–µ –Ω–∞ —Å–∏—Å—Ç–µ–º—É:")
        print(f"      üñ•Ô∏è  CPU: {cpu_change:+.1f}%")
        print(f"      üíæ RAM: {ram_change:+.1f}%")
        print(f"      ‚ö° SFM –æ—Ç–∫–ª–∏–∫: {perf_change:+.2f} –º—Å")
        print()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
        self.print_current_status(batch_number, activated_count)
        
        self.activation_count += activated_count
        return activated_count
    
    def initialize_sfm(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SFM"""
        print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SFM...")
        
        config = {
            'thread_pool_enabled': True,
            'max_thread_pool_workers': 5,
            'async_io_enabled': True,
            'redis_cache_enabled': True,
            'enable_auto_management': False,
            'enable_sleep_mode': False
        }
        
        try:
            self.sfm = SafeFunctionManager('ActivationMonitor', config)
            print(f"‚úÖ SFM –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {len(self.sfm.functions)} —Ñ—É–Ω–∫—Ü–∏–π")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SFM: {e}")
            return False
    
    def run_activation_process(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º"""
        print("üöÄ –ó–ê–ü–£–°–ö –ü–†–û–¶–ï–°–°–ê –ê–ö–¢–ò–í–ê–¶–ò–ò –° –ú–û–ù–ò–¢–û–†–ò–ù–ì–û–ú")
        print("=" * 80)
        print()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SFM
        if not self.initialize_sfm():
            return
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–∑–æ–≤–æ–π –ª–∏–Ω–∏–∏
        self.set_baseline()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–∑–æ–≤—É—é –ª–∏–Ω–∏—é
        self.print_current_status()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø—è—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
        sleeping_functions, critical_sleeping = self.get_sleeping_functions()
        
        print(f"üìä –ù–ê–ô–î–ï–ù–û –°–ü–Ø–©–ò–• –§–£–ù–ö–¶–ò–ô:")
        print(f"   üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö: {len(critical_sleeping)}")
        print(f"   üí§ –û–±—ã—á–Ω—ã—Ö: {len(sleeping_functions) - len(critical_sleeping)}")
        print(f"   üì¶ –í—Å–µ–≥–æ —Å–ø—è—â–∏—Ö: {len(sleeping_functions)}")
        print()
        
        try:
            # –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π –ø–µ—Ä–≤—ã–º–∏
            if critical_sleeping:
                print("üö® –ê–ö–¢–ò–í–ê–¶–ò–Ø –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –§–£–ù–ö–¶–ò–ô")
                print("-" * 50)
                
                # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ 5 —à—Ç—É–∫
                batch_size = 5
                for i in range(0, len(critical_sleeping), batch_size):
                    batch = critical_sleeping[i:i + batch_size]
                    batch_number = f"–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï-{(i // batch_size) + 1}"
                    
                    self.activate_batch(batch, batch_number)
                    
                    # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏
                    print("‚è∏Ô∏è  –ü–∞—É–∑–∞ 3 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –ø–∞–∫–µ—Ç–æ–º...")
                    time.sleep(3)
                
                print("‚úÖ –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã!")
                print()
            
            # –ê–∫—Ç–∏–≤–∞—Ü–∏—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Ñ—É–Ω–∫—Ü–∏–π
            remaining_sleeping = [f for f in sleeping_functions if f not in critical_sleeping]
            
            if remaining_sleeping:
                print("üí§ –ê–ö–¢–ò–í–ê–¶–ò–Ø –û–°–¢–ê–í–®–ò–•–°–Ø –°–ü–Ø–©–ò–• –§–£–ù–ö–¶–ò–ô")
                print("-" * 50)
                
                # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ 10 —à—Ç—É–∫
                batch_size = 10
                for i in range(0, len(remaining_sleeping), batch_size):
                    batch = remaining_sleeping[i:i + batch_size]
                    batch_number = f"–û–ë–´–ß–ù–´–ï-{(i // batch_size) + 1}"
                    
                    self.activate_batch(batch, batch_number)
                    
                    # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏
                    print("‚è∏Ô∏è  –ü–∞—É–∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –ø–∞–∫–µ—Ç–æ–º...")
                    time.sleep(2)
                
                print("‚úÖ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã!")
                print()
            
            # –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
            print("üéâ –ü–†–û–¶–ï–°–° –ê–ö–¢–ò–í–ê–¶–ò–ò –ó–ê–í–ï–†–®–ï–ù!")
            print("=" * 80)
            self.print_current_status("–§–ò–ù–ê–õ–¨–ù–´–ô", self.activation_count)
            
        except KeyboardInterrupt:
            print("\n‚èπÔ∏è  –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            print("=" * 80)
            self.print_current_status("–ü–†–ï–†–í–ê–ù–û", self.activation_count)
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {e}")
            print("=" * 80)
            self.print_current_status("–û–®–ò–ë–ö–ê", self.activation_count)

def main():
    monitor = ActivationMonitor()
    monitor.run_activation_process()

if __name__ == "__main__":
    main()