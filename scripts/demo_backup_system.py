#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∑–∞—â–∏—Ç–∞ —Ä–µ–µ—Å—Ç—Ä–∞
"""

import json
import sys
from datetime import datetime
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append('/Users/sergejhlystov/ALADDIN_NEW')

from scripts.registry_protection_system import RegistryProtectionSystem

def demo_backup_system():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print("üîÑ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–• –†–ï–ó–ï–†–í–ù–´–• –ö–û–ü–ò–ô")
    print("=" * 60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∑–∞—â–∏—Ç—ã
    protection = RegistryProtectionSystem()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    print("üìä –¢–ï–ö–£–©–ï–ï –°–û–°–¢–û–Ø–ù–ò–ï:")
    status = protection.get_registry_status()
    print(f"   ‚Ä¢ –§—É–Ω–∫—Ü–∏–π –≤ —Ä–µ–µ—Å—Ç—Ä–µ: {status['current_functions_count']}")
    print(f"   ‚Ä¢ –†–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π: {status['backup_count']}")
    print(f"   ‚Ä¢ –ü—É—Ç—å –∫ —Ä–µ–µ—Å—Ç—Ä—É: {status['registry_path']}")
    
    # –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
    print(f"\nüîÑ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –†–ï–ó–ï–†–í–ù–û–ì–û –ö–û–ü–ò–†–û–í–ê–ù–ò–Ø:")
    
    # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–µ—Å—Ç—Ä
    with open(protection.registry_path, 'r', encoding='utf-8') as f:
        current_registry = json.load(f)
    
    # –°–æ–∑–¥–∞—ë–º –∫–æ–ø–∏—é —Å –Ω–µ–±–æ–ª—å—à–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º
    test_registry = current_registry.copy()
    test_registry["last_updated"] = datetime.now().isoformat()
    test_registry["test_demo"] = "–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"
    
    print("   ‚Ä¢ –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ —Ä–µ–µ—Å—Ç—Ä–µ...")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–∏ –∑–∞—â–∏—â—ë–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏
    print("   ‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—ë—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é...")
    backup_path = protection.create_backup()
    print(f"   ‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_path}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
    if backup_path and Path(backup_path).exists():
        with open(backup_path, 'r', encoding='utf-8') as f:
            backup_data = json.load(f)
        
        print(f"   üìÑ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç {len(backup_data.get('functions', {}))} —Ñ—É–Ω–∫—Ü–∏–π")
        print(f"   üìÖ –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {backup_data.get('last_updated', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –∑–∞—â–∏—Ç—É –æ—Ç —É–¥–∞–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π
    print(f"\nüõ°Ô∏è –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–©–ò–¢–´ –û–¢ –£–î–ê–õ–ï–ù–ò–Ø –§–£–ù–ö–¶–ò–ô:")
    
    # –°–æ–∑–¥–∞—ë–º —Ä–µ–µ—Å—Ç—Ä —Å —É–¥–∞–ª—ë–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π
    dangerous_registry = current_registry.copy()
    if dangerous_registry["functions"]:
        # –£–¥–∞–ª—è–µ–º –ø–µ—Ä–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
        first_func = list(dangerous_registry["functions"].keys())[0]
        del dangerous_registry["functions"][first_func]
        print(f"   ‚Ä¢ –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é: {first_func}")
    
    print("   ‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è...")
    deletion_info = protection.check_function_deletion(dangerous_registry)
    
    if deletion_info["deleted_count"] > 0:
        print(f"   üö® –û–ë–ù–ê–†–£–ñ–ï–ù–û –£–î–ê–õ–ï–ù–ò–ï {deletion_info['deleted_count']} –§–£–ù–ö–¶–ò–ô!")
        print(f"   ‚ùå –ó–ê–ü–ò–°–¨ –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–ê!")
        print(f"   üõ°Ô∏è –§—É–Ω–∫—Ü–∏–∏ –∑–∞—â–∏—â–µ–Ω—ã –æ—Ç —Å–ª—É—á–∞–π–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è")
    else:
        print("   ‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω—ã")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–ø–∏—Å—å
    print(f"\nüîì –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ô –ó–ê–ü–ò–°–ò:")
    print("   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ–º force=True –¥–ª—è –æ–±—Ö–æ–¥–∞ –∑–∞—â–∏—Ç—ã...")
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ (–¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é)
    safe_registry = current_registry.copy()
    safe_registry["functions"]["test_demo_function"] = {
        "name": "Test Demo Function",
        "description": "–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è",
        "status": "active",
        "function_type": "test",
        "security_level": "low",
        "is_critical": False,
        "created_at": datetime.now().isoformat()
    }
    safe_registry["last_updated"] = datetime.now().isoformat()
    
    print("   ‚Ä¢ –í—ã–ø–æ–ª–Ω—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ...")
    success = protection.protect_registry_write(safe_registry, force=False)
    
    if success:
        print("   ‚úÖ –†–µ–µ—Å—Ç—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ–º")
    else:
        print("   ‚ùå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    print(f"\nüìä –§–ò–ù–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï:")
    final_status = protection.get_registry_status()
    print(f"   ‚Ä¢ –§—É–Ω–∫—Ü–∏–π –≤ —Ä–µ–µ—Å—Ç—Ä–µ: {final_status['current_functions_count']}")
    print(f"   ‚Ä¢ –†–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π: {final_status['backup_count']}")
    print(f"   ‚Ä¢ –ü–æ—Ç–µ—Ä—è–Ω–æ —Ñ—É–Ω–∫—Ü–∏–π: {final_status['functions_lost']}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏
    backup_dir = Path("data/sfm/backups")
    registry_backups = list(backup_dir.glob("registry_backup_*.json"))
    
    print(f"\nüíæ –í–°–ï –†–ï–ó–ï–†–í–ù–´–ï –ö–û–ü–ò–ò –†–ï–ï–°–¢–†–ê:")
    for i, backup in enumerate(registry_backups[-5:], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5
        stat = backup.stat()
        size = stat.st_size
        mtime = datetime.fromtimestamp(stat.st_mtime)
        print(f"   {i}. {backup.name}")
        print(f"      üìÖ {mtime.strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"      üìä {size} –±–∞–π—Ç")
    
    print(f"\nüõ°Ô∏è –°–ò–°–¢–ï–ú–ê –ó–ê–©–ò–¢–´ –ê–ö–¢–ò–í–ù–ê!")
    print(f"   ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏: ‚úÖ")
    print(f"   ‚Ä¢ –ó–∞—â–∏—Ç–∞ –æ—Ç —É–¥–∞–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π: ‚úÖ")
    print(f"   ‚Ä¢ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞: ‚úÖ")
    print(f"   ‚Ä¢ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π: ‚úÖ")

if __name__ == "__main__":
    demo_backup_system()