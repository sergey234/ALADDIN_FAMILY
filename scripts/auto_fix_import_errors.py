#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –∏–º–ø–æ—Ä—Ç–æ–≤
"""

import os
import re
import subprocess
from pathlib import Path

def fix_import_errors_in_file(file_path):
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –æ—à–∏–±–∫–∏ –∏–º–ø–æ—Ä—Ç–æ–≤ –≤ –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        original_content = content
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ sys.path.append() –≤ —Ñ–∞–π–ª–µ
        if 'sys.path.append(' in content:
            print(f"  üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º {file_path}")
            
            # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ —á–∞—Å—Ç–∏
            lines = content.split('\n')
            
            # –ù–∞—Ö–æ–¥–∏–º –∏–º–ø–æ—Ä—Ç—ã –∏ sys.path.append
            imports = []
            sys_path_lines = []
            other_lines = []
            
            in_imports = False
            for i, line in enumerate(lines):
                stripped = line.strip()
                
                if stripped.startswith('import ') or stripped.startswith('from '):
                    imports.append(line)
                    in_imports = True
                elif stripped.startswith('sys.path.append('):
                    sys_path_lines.append(line)
                    in_imports = False
                elif stripped and not stripped.startswith('#') and not stripped.startswith('"""') and not stripped.startswith("'''"):
                    if in_imports:
                        # –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞
                        imports.append(line)
                    else:
                        other_lines.append(line)
                        in_imports = False
                else:
                    other_lines.append(line)
                    in_imports = False
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
            new_content = []
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ñ–∞–π–ª–∞
            for line in lines:
                if line.strip().startswith('# -*-') or line.strip().startswith('"""') or line.strip().startswith("'''"):
                    new_content.append(line)
                elif line.strip() == '':
                    new_content.append(line)
                else:
                    break
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
            new_content.append('')
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∏–º–ø–æ—Ä—Ç—ã
            for imp in imports:
                new_content.append(imp)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
            new_content.append('')
            
            # –î–æ–±–∞–≤–ª—è–µ–º sys.path.append
            for sys_line in sys_path_lines:
                new_content.append(sys_line)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
            new_content.append('')
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥
            for line in other_lines:
                if not (line.strip().startswith('import ') or 
                       line.strip().startswith('from ') or 
                       line.strip().startswith('sys.path.append(')):
                    new_content.append(line)
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º
            new_content_str = '\n'.join(new_content)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Ñ–∞–π–ª
            if new_content_str != original_content:
                # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
                backup_path = f"{file_path}.backup"
                with open(backup_path, 'w', encoding='utf-8') as f:
                    f.write(original_content)
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write(new_content_str)
                
                print(f"    ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω (—Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path})")
                return True
            else:
                print(f"    ‚ÑπÔ∏è  –§–∞–π–ª —É–∂–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω")
                return False
                
    except Exception as e:
        print(f"    ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def fix_import_errors_in_directory(directory):
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –æ—à–∏–±–∫–∏ –∏–º–ø–æ—Ä—Ç–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    print(f"üîç –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –û–®–ò–ë–û–ö –ò–ú–ü–û–†–¢–û–í –í {directory}")
    print("=" * 60)
    
    fixed_files = 0
    total_files = 0
    
    for py_file in Path(directory).rglob("*.py"):
        if any(exclude in str(py_file) for exclude in ['backup', 'test', 'logs', '__pycache__']):
            continue
            
        total_files += 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—à–∏–±–∫–∏ E402 –≤ —Ñ–∞–π–ª–µ
        try:
            result = subprocess.run([
                "python3", "-m", "flake8", "--select=E402", str(py_file)
            ], capture_output=True, text=True, timeout=10)
            
            if result.returncode != 0:
                if fix_import_errors_in_file(str(py_file)):
                    fixed_files += 1
            else:
                print(f"  ‚úÖ {py_file.name} - –±–µ–∑ –æ—à–∏–±–æ–∫ E402")
                
        except Exception as e:
            print(f"  ‚ùå {py_file.name} - –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
    
    print(f"\nüìä –ò–¢–û–ì–ò:")
    print(f"  ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {total_files}")
    print(f"  ‚Ä¢ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {fixed_files}")
    print(f"  ‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {(fixed_files/total_files*100):.1f}%")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîß –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –û–®–ò–ë–û–ö –ò–ú–ü–û–†–¢–û–í")
    print("=" * 60)
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º security/
    fix_import_errors_in_directory("security")
    
    print("\n" + "=" * 60)
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º formatting_work/
    fix_import_errors_in_directory("formatting_work")
    
    print("\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã")
    print("2. –£–¥–∞–ª–∏—Ç–µ .backup —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏")
    print("3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ PYTHONPATH –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è sys.path.append()")
    print("4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –≥–¥–µ –≤–æ–∑–º–æ–∂–Ω–æ")

if __name__ == "__main__":
    main()