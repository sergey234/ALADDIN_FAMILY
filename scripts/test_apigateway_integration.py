#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ APIGateway —Å SafeFunctionManager
"""

import asyncio
import uuid
from datetime import datetime
import sys
import os

sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..')))

import sys
import os
sys.path.insert(0, '/Users/sergejhlystov/ALADDIN_NEW')

from security.safe_function_manager import SafeFunctionManager, SecurityLevel
from security.microservices.api_gateway import APIGateway, RouteConfig, AuthMethod


async def run_integration_test():
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ APIGateway —Å SFM"""
    print("üîß –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ APIGateway —Å SafeFunctionManager")
    print("============================================================")
    
    # –°–æ–∑–¥–∞–µ–º SFM
    sfm = SafeFunctionManager(name="ALADDIN")
    print("‚úÖ SafeFunctionManager —Å–æ–∑–¥–∞–Ω!")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º APIGateway –≤ SFM
    registration_success = sfm.register_function(
        function_id="api_gateway",
        name="APIGateway",
        description="API —à–ª—é–∑ —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–µ–π –∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π",
        function_type="microservice",
        security_level=SecurityLevel.HIGH,
        is_critical=True,
        auto_enable=False
    )
    print(f"‚úÖ APIGateway –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! –†–µ–∑—É–ª—å—Ç–∞—Ç: {registration_success}")
    
    # –í–∫–ª—é—á–∞–µ–º APIGateway
    enable_success = sfm.enable_function("api_gateway")
    print(f"‚úÖ APIGateway –≤–∫–ª—é—á–µ–Ω! –†–µ–∑—É–ª—å—Ç–∞—Ç: {enable_success}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å
    gateway_status = sfm.get_function_status("api_gateway")
    print(f"\nüìà –°—Ç–∞—Ç—É—Å APIGateway: {gateway_status['status']}")
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä APIGateway
    gateway = APIGateway(
        database_url="sqlite:///test_api_gateway.db",
        redis_url="redis://localhost:6379/0"
    )
    print("‚úÖ APIGateway —Å–æ–∑–¥–∞–Ω!")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
    init_success = await gateway.initialize()
    print(f"‚úÖ APIGateway –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω! –†–µ–∑—É–ª—å—Ç–∞—Ç: {init_success}")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç
    test_route = RouteConfig(
        path="/test",
        method="GET",
        target_service="test_service",
        target_url="http://localhost:8000",
        auth_required=False,
        auth_method=AuthMethod.NONE,
        rate_limit=100,
        timeout=30,
        cache_ttl=300,
        is_active=True
    )
    
    route_success = await gateway.register_route(test_route)
    print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! –†–µ–∑—É–ª—å—Ç–∞—Ç: {route_success}")
    
    # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
    metrics = await gateway.get_metrics()
    print(f"‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã! –†–µ–∑—É–ª—å—Ç–∞—Ç: {metrics}")
    print(f"   ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {metrics.get('active_connections', 0)}")
    print(f"   ‚Ä¢ –í—Å–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–æ–≤: {metrics.get('total_routes', 0)}")
    print(f"   ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤: {metrics.get('active_routes', 0)}")
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É
    await gateway.shutdown()
    print("‚úÖ APIGateway –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É!")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ SFM
    sfm_test_result = sfm.test_function("api_gateway")
    print(f"‚úÖ –¢–µ—Å—Ç SFM –∑–∞–≤–µ—Ä—à–µ–Ω! –†–µ–∑—É–ª—å—Ç–∞—Ç: {sfm_test_result}")
    
    # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ SFM
    sfm_metrics = sfm.get_performance_metrics()
    print("‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ SFM –ø–æ–ª—É—á–µ–Ω—ã!")
    print(f"   ‚Ä¢ –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π: {sfm_metrics['current_metrics']['total_functions']}")
    print(f"   ‚Ä¢ –í–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π: {sfm_metrics['current_metrics']['enabled_functions']}")
    print(f"   ‚Ä¢ –°–ø—è—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π: {sfm_metrics['current_metrics']['sleeping_functions']}")
    print(f"   ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π: {sfm_metrics['current_metrics']['active_executions']}")
    
    print("\n============================================================")
    print("üéâ –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ APIGateway –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    
    if registration_success and enable_success and init_success:
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        return True
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å.")
        return False


if __name__ == "__main__":
    asyncio.run(run_integration_test())