#!/usr/bin/env python3
"""
–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Å–∫—Ä–∏–ø—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª–∏–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫ (E501) –≤ LoadBalancer
–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç 161 –æ—à–∏–±–∫—É E501 —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ –∫–æ–¥–∞
"""

import os
import re
import textwrap
from typing import List, Tuple


def fix_long_lines_advanced(file_path: str, max_length: int = 79) -> None:
    """
    –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫ —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    
    Args:
        file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
        max_length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏
    """
    print(f"üîß –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫: {file_path}")
    
    with open(file_path, 'r', encoding='utf-8') as f:
        lines = f.readlines()
    
    fixed_lines = []
    fixes_count = 0
    
    for i, line in enumerate(lines):
        original_line = line.rstrip('\n')
        
        if len(original_line) > max_length:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            fixed_line = fix_line_by_type(original_line, max_length)
            
            if fixed_line != original_line:
                fixes_count += 1
                # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                wrapped_lines = fixed_line.split('\n')
                for wrapped_line in wrapped_lines:
                    fixed_lines.append(wrapped_line + '\n')
            else:
                fixed_lines.append(line)
        else:
            fixed_lines.append(line)
        
        if (i + 1) % 100 == 0:
            print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: {i+1}, –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {fixes_count}")
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with open(file_path, 'w', encoding='utf-8') as f:
        f.writelines(fixed_lines)
    
    print(f"‚úÖ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print(f"   –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å—Ç—Ä–æ–∫: {fixes_count}")
    print(f"   E501 (–¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏): ~{fixes_count}")


def fix_line_by_type(line: str, max_length: int) -> str:
    """
    –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –µ—ë —Ç–∏–ø–∞
    
    Args:
        line: –ò—Å—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        max_length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞
        
    Returns:
        –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
    """
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    line = line.rstrip()
    
    # 1. –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ - –ø—Ä–æ—Å—Ç–æ–µ –ø–µ—Ä–µ–Ω–æ—Å
    if line.strip().startswith('#'):
        return wrap_comment(line, max_length)
    
    # 2. –°—Ç—Ä–æ–∫–∏ —Å –∏–º–ø–æ—Ä—Ç–∞–º–∏
    if line.strip().startswith(('import ', 'from ')):
        return wrap_import(line, max_length)
    
    # 3. –°—Ç—Ä–æ–∫–∏ —Å –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ–º
    if ' = ' in line and not line.strip().startswith('#'):
        return wrap_assignment(line, max_length)
    
    # 4. –°—Ç—Ä–æ–∫–∏ —Å –≤—ã–∑–æ–≤–∞–º–∏ —Ñ—É–Ω–∫—Ü–∏–π
    if '(' in line and ')' in line:
        return wrap_function_call(line, max_length)
    
    # 5. –°—Ç—Ä–æ–∫–∏ —Å f-—Å—Ç—Ä–æ–∫–∞–º–∏
    if 'f"' in line or "f'" in line:
        return wrap_f_string(line, max_length)
    
    # 6. –û–±—ã—á–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ - –ø—Ä–æ—Å—Ç–æ–µ –ø–µ—Ä–µ–Ω–æ—Å
    return wrap_simple(line, max_length)


def wrap_comment(line: str, max_length: int) -> str:
    """–ü–µ—Ä–µ–Ω–æ—Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"""
    indent = len(line) - len(line.lstrip())
    comment_text = line.lstrip()[1:].strip()  # –£–±–∏—Ä–∞–µ–º #
    
    if len(comment_text) <= max_length - indent - 2:
        return line
    
    # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    wrapped = textwrap.fill(
        comment_text,
        width=max_length - indent - 2,
        initial_indent=' ' * indent + '# ',
        subsequent_indent=' ' * indent + '# '
    )
    return wrapped


def wrap_import(line: str, max_length: int) -> str:
    """–ü–µ—Ä–µ–Ω–æ—Å –∏–º–ø–æ—Ä—Ç–æ–≤"""
    if 'from ' in line and ' import ' in line:
        # from module import item1, item2, item3
        parts = line.split(' import ')
        if len(parts) == 2:
            module_part = parts[0]
            items_part = parts[1]
            
            if len(line) <= max_length:
                return line
            
            # –ü–µ—Ä–µ–Ω–æ—Å–∏–º —Å–ø–∏—Å–æ–∫ –∏–º–ø–æ—Ä—Ç–æ–≤
            indent = len(line) - len(line.lstrip())
            wrapped_items = textwrap.fill(
                items_part,
                width=max_length - indent - 8,  # " import " = 8 —Å–∏–º–≤–æ–ª–æ–≤
                initial_indent='',
                subsequent_indent=' ' * (indent + 8)
            )
            return f"{module_part} import {wrapped_items}"
    
    return wrap_simple(line, max_length)


def wrap_assignment(line: str, max_length: int) -> str:
    """–ü–µ—Ä–µ–Ω–æ—Å –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–π"""
    if ' = ' not in line:
        return wrap_simple(line, max_length)
    
    parts = line.split(' = ', 1)
    if len(parts) != 2:
        return wrap_simple(line, max_length)
    
    var_name = parts[0]
    value = parts[1]
    
    if len(line) <= max_length:
        return line
    
    # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ
    indent = len(line) - len(line.lstrip())
    wrapped_value = textwrap.fill(
        value,
        width=max_length - indent - 3,  # " = " = 3 —Å–∏–º–≤–æ–ª–∞
        initial_indent='',
        subsequent_indent=' ' * (indent + 3)
    )
    return f"{var_name} = {wrapped_value}"


def wrap_function_call(line: str, max_length: int) -> str:
    """–ü–µ—Ä–µ–Ω–æ—Å –≤—ã–∑–æ–≤–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π"""
    if '(' not in line or ')' not in line:
        return wrap_simple(line, max_length)
    
    # –ù–∞—Ö–æ–¥–∏–º –æ—Ç–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É
    open_paren = line.find('(')
    func_name = line[:open_paren].rstrip()
    args_part = line[open_paren:]
    
    if len(line) <= max_length:
        return line
    
    # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    indent = len(line) - len(line.lstrip())
    wrapped_args = textwrap.fill(
        args_part,
        width=max_length - indent,
        initial_indent=' ' * indent,
        subsequent_indent=' ' * (indent + 4)
    )
    return wrapped_args


def wrap_f_string(line: str, max_length: int) -> str:
    """–ü–µ—Ä–µ–Ω–æ—Å f-—Å—Ç—Ä–æ–∫"""
    if 'f"' not in line and "f'" not in line:
        return wrap_simple(line, max_length)
    
    # –ü—Ä–æ—Å—Ç–æ–µ –ø–µ—Ä–µ–Ω–æ—Å f-—Å—Ç—Ä–æ–∫
    return wrap_simple(line, max_length)


def wrap_simple(line: str, max_length: int) -> str:
    """–ü—Ä–æ—Å—Ç–æ–π –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏"""
    if len(line) <= max_length:
        return line
    
    indent = len(line) - len(line.lstrip())
    content = line.lstrip()
    
    wrapped = textwrap.fill(
        content,
        width=max_length - indent,
        initial_indent=' ' * indent,
        subsequent_indent=' ' * (indent + 4)
    )
    return wrapped


if __name__ == "__main__":
    load_balancer_path = '/Users/sergejhlystov/ALADDIN_NEW/security/microservices/load_balancer.py'
    fix_long_lines_advanced(load_balancer_path)