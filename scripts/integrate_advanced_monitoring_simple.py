#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from security.advanced_monitoring_manager import advanced_monitoring_manager
from core.logging_module import LoggingManager
import time

logger = LoggingManager(name="IntegrateAdvancedMonitoringSimple")

def integrate_advanced_monitoring_simple():
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    logger.log("INFO", "üöÄ –ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        status = advanced_monitoring_manager.get_status()
        logger.log("INFO", f"üìä –°—Ç–∞—Ç—É—Å AdvancedMonitoringManager: {status['status']}")
        logger.log("INFO", f"üîß –ú–µ—Ç—Ä–∏–∫–∏: {status['metrics_count']}")
        logger.log("INFO", f"üö® –ê–ª–µ—Ä—Ç—ã: {status['alerts_count']}")
        logger.log("INFO", f"üìã –ü—Ä–∞–≤–∏–ª–∞: {status['rules_count']}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        logger.log("INFO", "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π...")
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫
        try:
            metrics = advanced_monitoring_manager.get_metrics()
            logger.log("INFO", f"‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã: {len(metrics)} —Ç–∏–ø–æ–≤")
        except Exception as e:
            logger.log("ERROR", f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: {e}")
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–æ–≤
        try:
            alerts = advanced_monitoring_manager.get_alerts()
            logger.log("INFO", f"‚úÖ –ê–ª–µ—Ä—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã: {len(alerts)} —à—Ç—É–∫")
        except Exception as e:
            logger.log("ERROR", f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–æ–≤: {e}")
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞—à–±–æ—Ä–¥–∞
        try:
            dashboard = advanced_monitoring_manager.get_dashboard_data()
            logger.log("INFO", f"‚úÖ –î–∞–Ω–Ω—ã–µ –¥–∞—à–±–æ—Ä–¥–∞ –ø–æ–ª—É—á–µ–Ω—ã: {len(dashboard)} —Ä–∞–∑–¥–µ–ª–æ–≤")
        except Exception as e:
            logger.log("ERROR", f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞—à–±–æ—Ä–¥–∞: {e}")
        
        # –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –º–µ—Ç—Ä–∏–∫–∏
        try:
            advanced_monitoring_manager._add_metric(
                "test.integration", 100.0, 
                advanced_monitoring_manager.MetricType.CUSTOM, 
                "test_units", {"integration": "success"}
            )
            logger.log("INFO", "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –º–µ—Ç—Ä–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
        except Exception as e:
            logger.log("ERROR", f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫–∏: {e}")
        
        # –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        try:
            from security.advanced_monitoring_manager import MonitoringRule, AlertSeverity
            
            test_rule = MonitoringRule(
                rule_id="test_integration_rule",
                name="Test Integration Rule",
                metric_name="test.integration",
                condition=">",
                threshold=50.0,
                severity=AlertSeverity.INFO
            )
            
            success = advanced_monitoring_manager.add_monitoring_rule(test_rule)
            if success:
                logger.log("INFO", "‚úÖ –ü—Ä–∞–≤–∏–ª–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–æ")
            else:
                logger.log("WARNING", "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∞–≤–∏–ª–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
        except Exception as e:
            logger.log("ERROR", f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞: {e}")
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
        final_status = advanced_monitoring_manager.get_status()
        logger.log("INFO", f"üìà –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {final_status['status']}")
        logger.log("INFO", f"‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {final_status['uptime']:.1f} —Å–µ–∫—É–Ω–¥")
        
        logger.log("CRITICAL", "üéâ –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        logger.log("CRITICAL", f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        return False

if __name__ == '__main__':
    success = integrate_advanced_monitoring_simple()
    if success:
        print("\n‚úÖ –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("üöÄ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å Monitoring API Server:")
        print("   python3 monitoring_api_server.py")
        print("   –∏–ª–∏")
        print("   ./start_monitoring.sh")
    else:
        print("\n‚ùå –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
        sys.exit(1)