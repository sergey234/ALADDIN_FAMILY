#!/usr/bin/env python3
"""
ALADDIN Registry Merge Manager
–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–µ–µ—Å—Ç—Ä–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π —Å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π —Å–ø—è—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
"""

import json
import os
import glob
from datetime import datetime
from typing import Dict, Any, List, Optional
from pathlib import Path


class RegistryMergeManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Ä–µ–µ—Å—Ç—Ä–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π"""
    
    def __init__(self):
        self.timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        self.backup_dir = f"backups/registry_merge_backup_{self.timestamp}"
        self.old_registry_path = "data/functions_registry.json"
        self.new_registry_path = "data/sfm/function_registry.json"
        self.sleep_states_dir = "data/sleep_states"
        
    def create_backup(self) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –±—ç–∫–∞–ø–∞ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            print("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –±—ç–∫–∞–ø–∞ —Å–∏—Å—Ç–µ–º—ã...")
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –±—ç–∫–∞–ø–∞
            os.makedirs(self.backup_dir, exist_ok=True)
            
            # –ö–æ–ø–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            critical_dirs = ["data/sfm", "data/sleep_states", "security", "core", "ai"]
            for dir_name in critical_dirs:
                if os.path.exists(dir_name):
                    os.system(f"cp -r {dir_name} {self.backup_dir}/")
                    print(f"  ‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω {dir_name}")
                else:
                    print(f"  ‚ö†Ô∏è  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {dir_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
            print(f"‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: {self.backup_dir}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞: {e}")
            return False
    
    def analyze_conflicts(self) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –º–µ–∂–¥—É —Ä–µ–µ—Å—Ç—Ä–∞–º–∏"""
        try:
            print("üîç –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –º–µ–∂–¥—É —Ä–µ–µ—Å—Ç—Ä–∞–º–∏...")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–µ—Å—Ç—Ä—ã
            with open(self.old_registry_path, 'r') as f:
                old_registry = json.load(f)
            with open(self.new_registry_path, 'r') as f:
                new_registry = json.load(f)
            
            old_functions = set(old_registry['functions'].keys())
            new_functions = set(new_registry['functions'].keys())
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
            common_functions = old_functions & new_functions
            old_only = old_functions - new_functions
            new_only = new_functions - old_functions
            
            analysis = {
                "old_count": len(old_functions),
                "new_count": len(new_functions),
                "common_count": len(common_functions),
                "old_only_count": len(old_only),
                "new_only_count": len(new_only),
                "common_functions": list(common_functions),
                "old_only_functions": list(old_only),
                "new_only_functions": list(new_only),
                "has_conflicts": len(old_only) > 0
            }
            
            print(f"  üìä –°—Ç–∞—Ä—ã–π —Ä–µ–µ—Å—Ç—Ä: {analysis['old_count']} —Ñ—É–Ω–∫—Ü–∏–π")
            print(f"  üìä –ù–æ–≤—ã–π —Ä–µ–µ—Å—Ç—Ä: {analysis['new_count']} —Ñ—É–Ω–∫—Ü–∏–π")
            print(f"  üîÑ –û–±—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π: {analysis['common_count']}")
            print(f"  ‚ö†Ô∏è  –¢–æ–ª—å–∫–æ –≤ —Å—Ç–∞—Ä–æ–º: {analysis['old_only_count']}")
            print(f"  ‚ûï –¢–æ–ª—å–∫–æ –≤ –Ω–æ–≤–æ–º: {analysis['new_only_count']}")
            
            if analysis['has_conflicts']:
                print("  ‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã!")
            else:
                print("  ‚úÖ –ö–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
            
            return analysis
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤: {e}")
            return {}
    
    def convert_sleeping_functions(self) -> List[Dict[str, Any]]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å–ø—è—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç SFM"""
        try:
            print("üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å–ø—è—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π...")
            
            sleeping_functions = []
            sleep_files = glob.glob(f"{self.sleep_states_dir}/*_state.json")
            
            print(f"  üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ —Å–ø—è—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π: {len(sleep_files)}")
            
            for sleep_file in sleep_files:
                try:
                    with open(sleep_file, 'r') as f:
                        sleep_data = json.load(f)
                    
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç SFM
                    converted_func = self._convert_sleep_to_sfm_format(sleep_data)
                    sleeping_functions.append(converted_func)
                    
                except Exception as e:
                    print(f"  ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ {sleep_file}: {e}")
                    continue
            
            print(f"  ‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ —Ñ—É–Ω–∫—Ü–∏–π: {len(sleeping_functions)}")
            return sleeping_functions
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Å–ø—è—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π: {e}")
            return []
    
    def _convert_sleep_to_sfm_format(self, sleep_data: Dict[str, Any]) -> Dict[str, Any]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –æ–¥–Ω–æ–π —Å–ø—è—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç SFM"""
        return {
            "function_id": sleep_data["function_id"],
            "name": sleep_data["function_name"],
            "description": f"–°–ø—è—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è {sleep_data['function_name']}",
            "function_type": self._determine_function_type(sleep_data["function_name"]),
            "security_level": sleep_data["security_level"],
            "status": "sleeping",
            "created_at": sleep_data["sleep_time"],
            "is_critical": sleep_data["is_critical"],
            "auto_enable": False,
            "wake_time": sleep_data["sleep_time"],
            "emergency_wake_up": sleep_data["is_critical"],
            "features": [],
            "dependencies": [],
            "file_path": self._determine_file_path(sleep_data["function_name"]),
            "class_name": sleep_data["function_name"],
            "global_instance": f"{sleep_data['function_name'].lower()}_instance",
            "sleep_state": {
                "sleep_time": sleep_data["sleep_time"],
                "previous_status": sleep_data["previous_status"],
                "minimal_system_sleep": sleep_data.get("minimal_system_sleep", False)
            }
        }
    
    def _determine_function_type(self, function_name: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ –∏–º–µ–Ω–∏"""
        if "bot" in function_name.lower():
            return "bot"
        elif "agent" in function_name.lower():
            return "ai_agent"
        elif "manager" in function_name.lower():
            return "manager"
        elif "service" in function_name.lower():
            return "service"
        else:
            return "unknown"
    
    def _determine_file_path(self, function_name: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É —Ñ—É–Ω–∫—Ü–∏–∏"""
        # –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—É—Ç–∏
        if "bot" in function_name.lower():
            return f"bots/{function_name.lower()}.py"
        elif "agent" in function_name.lower():
            return f"ai_agents/{function_name.lower()}.py"
        elif "manager" in function_name.lower():
            return f"managers/{function_name.lower()}.py"
        else:
            return f"security/{function_name.lower()}.py"
    
    def merge_registries(self, sleeping_functions: List[Dict[str, Any]]) -> Dict[str, Any]:
        """–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–µ–µ—Å—Ç—Ä–æ–≤ –≤ –µ–¥–∏–Ω—ã–π"""
        try:
            print("üîÑ –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–µ–µ—Å—Ç—Ä–æ–≤...")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–π —Ä–µ–µ—Å—Ç—Ä (–æ—Å–Ω–æ–≤–Ω–æ–π)
            with open(self.new_registry_path, 'r') as f:
                merged_registry = json.load(f)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø—è—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
            for func in sleeping_functions:
                func_id = func["function_id"]
                if func_id not in merged_registry["functions"]:
                    merged_registry["functions"][func_id] = func
                    print(f"  ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å–ø—è—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è: {func_id}")
                else:
                    print(f"  ‚ö†Ô∏è  –§—É–Ω–∫—Ü–∏—è {func_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            merged_registry["version"] = "2.0"
            merged_registry["last_updated"] = datetime.now().isoformat()
            merged_registry["security_components_count"] = len(merged_registry["functions"])
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            active_count = sum(1 for f in merged_registry["functions"].values() if f["status"] == "active")
            sleeping_count = sum(1 for f in merged_registry["functions"].values() if f["status"] == "sleeping")
            critical_count = sum(1 for f in merged_registry["functions"].values() if f["is_critical"])
            
            merged_registry["statistics"] = {
                "total_functions": len(merged_registry["functions"]),
                "active_functions": active_count,
                "sleeping_functions": sleeping_count,
                "critical_functions": critical_count,
                "auto_enable_functions": sum(1 for f in merged_registry["functions"].values() if f.get("auto_enable", False))
            }
            
            print(f"  üìä –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π: {merged_registry['statistics']['total_functions']}")
            print(f"  üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {merged_registry['statistics']['active_functions']}")
            print(f"  üò¥ –°–ø—è—â–∏—Ö: {merged_registry['statistics']['sleeping_functions']}")
            print(f"  üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö: {merged_registry['statistics']['critical_functions']}")
            
            return merged_registry
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Ä–µ–µ—Å—Ç—Ä–æ–≤: {e}")
            return {}
    
    def save_merged_registry(self, merged_registry: Dict[str, Any]) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ —Ä–µ–µ—Å—Ç—Ä–∞"""
        try:
            print("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ —Ä–µ–µ—Å—Ç—Ä–∞...")
            
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–µ—Å—Ç—Ä–∞
            backup_path = f"{self.new_registry_path}.backup_{self.timestamp}"
            os.system(f"cp {self.new_registry_path} {backup_path}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ä–µ–µ—Å—Ç—Ä
            with open(self.new_registry_path, 'w') as f:
                json.dump(merged_registry, f, indent=2, ensure_ascii=False)
            
            print(f"  ‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")
            print(f"  ‚úÖ –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ä–µ–µ—Å—Ç—Ä: {self.new_registry_path}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–µ—Å—Ç—Ä–∞: {e}")
            return False
    
    def validate_merged_registry(self, registry: Dict[str, Any]) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ —Ä–µ–µ—Å—Ç—Ä–∞"""
        try:
            print("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ —Ä–µ–µ—Å—Ç—Ä–∞...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            required_fields = ["version", "last_updated", "functions", "security_components_count"]
            for field in required_fields:
                if field not in registry:
                    print(f"  ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: {field}")
                    return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å function_id
            function_ids = list(registry["functions"].keys())
            if len(function_ids) != len(set(function_ids)):
                print("  ‚ùå –ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è function_id")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ—É–Ω–∫—Ü–∏–π
            required_func_fields = ["function_id", "name", "description", "function_type", 
                                  "security_level", "status", "created_at", "is_critical"]
            
            for func_id, func_data in registry["functions"].items():
                for field in required_func_fields:
                    if field not in func_data:
                        print(f"  ‚ùå –§—É–Ω–∫—Ü–∏—è {func_id} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–µ {field}")
                        return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º JSON –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
            json.dumps(registry)
            
            print("  ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
            return False
    
    def cleanup_old_registry(self) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ —Ä–µ–µ—Å—Ç—Ä–∞"""
        try:
            print("üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ —Ä–µ–µ—Å—Ç—Ä–∞...")
            
            if os.path.exists(self.old_registry_path):
                # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
                backup_path = f"{self.old_registry_path}.backup_{self.timestamp}"
                os.system(f"cp {self.old_registry_path} {backup_path}")
                
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ä–µ–µ—Å—Ç—Ä
                os.remove(self.old_registry_path)
                
                print(f"  ‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")
                print(f"  ‚úÖ –°—Ç–∞—Ä—ã–π —Ä–µ–µ—Å—Ç—Ä —É–¥–∞–ª–µ–Ω: {self.old_registry_path}")
                return True
            else:
                print(f"  ‚ö†Ô∏è  –°—Ç–∞—Ä—ã–π —Ä–µ–µ—Å—Ç—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.old_registry_path}")
                return True
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä–æ–≥–æ —Ä–µ–µ—Å—Ç—Ä–∞: {e}")
            return False
    
    def run_merge_process(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è"""
        try:
            print("üöÄ –ó–ê–ü–£–°–ö –ü–†–û–¶–ï–°–°–ê –û–ë–™–ï–î–ò–ù–ï–ù–ò–Ø –†–ï–ï–°–¢–†–û–í")
            print("=" * 50)
            
            # 1. –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞
            if not self.create_backup():
                return False
            
            # 2. –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
            conflicts = self.analyze_conflicts()
            if not conflicts:
                return False
            
            # 3. –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å–ø—è—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
            sleeping_functions = self.convert_sleeping_functions()
            if not sleeping_functions:
                print("‚ö†Ô∏è  –ù–µ—Ç —Å–ø—è—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏")
                sleeping_functions = []
            
            # 4. –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–µ–µ—Å—Ç—Ä–æ–≤
            merged_registry = self.merge_registries(sleeping_functions)
            if not merged_registry:
                return False
            
            # 5. –í–∞–ª–∏–¥–∞—Ü–∏—è
            if not self.validate_merged_registry(merged_registry):
                return False
            
            # 6. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            if not self.save_merged_registry(merged_registry):
                return False
            
            # 7. –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ —Ä–µ–µ—Å—Ç—Ä–∞
            if not self.cleanup_old_registry():
                return False
            
            print("=" * 50)
            print("‚úÖ –ü–†–û–¶–ï–°–° –û–ë–™–ï–î–ò–ù–ï–ù–ò–Ø –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
            print(f"üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print(f"  –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π: {merged_registry['statistics']['total_functions']}")
            print(f"  –ê–∫—Ç–∏–≤–Ω—ã—Ö: {merged_registry['statistics']['active_functions']}")
            print(f"  –°–ø—è—â–∏—Ö: {merged_registry['statistics']['sleeping_functions']}")
            print(f"  –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö: {merged_registry['statistics']['critical_functions']}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
            return False


if __name__ == "__main__":
    manager = RegistryMergeManager()
    success = manager.run_merge_process()
    
    if success:
        print("\nüéâ –û–ë–™–ï–î–ò–ù–ï–ù–ò–ï –†–ï–ï–°–¢–†–û–í –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
        exit(0)
    else:
        print("\nüí• –û–ë–™–ï–î–ò–ù–ï–ù–ò–ï –†–ï–ï–°–¢–†–û–í –ó–ê–í–ï–†–®–ò–õ–û–°–¨ –° –û–®–ò–ë–ö–ê–ú–ò!")
        exit(1)