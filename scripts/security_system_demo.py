#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ALADDIN SECURITY SYSTEM DEMO
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å —Å–∏–º—É–ª—è—Ü–∏–µ–π —É–≥—Ä–æ–∑—ã

–ê–≤—Ç–æ—Ä: ALADDIN Security Team
–í–µ—Ä—Å–∏—è: 1.0
–î–∞—Ç–∞: 2025-01-27
"""

import json
import time
import random
from pathlib import Path
from datetime import datetime
from typing import Dict, List, Any

class SecuritySystemDemo:
    def __init__(self, project_root="/Users/sergejhlystov/ALADDIN_NEW"):
        self.project_root = Path(project_root)
        self.sfm_dir = self.project_root / "data" / "sfm"
        self.registry_file = self.sfm_dir / "function_registry.json"
        
        # –°–∏–º—É–ª—è—Ü–∏—è —É–≥—Ä–æ–∑
        self.threats = [
            {
                "type": "phishing",
                "message": "üéÅ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ iPhone! –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: bit.ly/fake123",
                "source": "WhatsApp",
                "risk_level": "high"
            },
            {
                "type": "malware",
                "message": "‚ö†Ô∏è –í–∞—à –∫–æ–º–ø—å—é—Ç–µ—Ä –∑–∞—Ä–∞–∂–µ–Ω! –°–∫–∞—á–∞–π—Ç–µ –∞–Ω—Ç–∏–≤–∏—Ä—É—Å: virus-cleaner.exe",
                "source": "Email",
                "risk_level": "critical"
            },
            {
                "type": "gaming_fraud",
                "message": "üéÆ –ü–æ–ª—É—á–∏—Ç–µ 1000 –º–æ–Ω–µ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω–æ! –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã:",
                "source": "Gaming App",
                "risk_level": "high"
            },
            {
                "type": "social_engineering",
                "message": "üë®‚Äçüíº –≠—Ç–æ IT –æ—Ç–¥–µ–ª. –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –≤–∑–ª–æ–º–∞–Ω! –°—Ä–æ—á–Ω–æ —Å–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª—å:",
                "source": "Telegram",
                "risk_level": "medium"
            }
        ]
        
        # –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        self.protection_functions = {
            "phishing": ["MessageBlocker", "ParentNotifier", "LogWriter", "ThreatAnalyzer"],
            "malware": ["FileScanner", "ParentNotifier", "LogWriter", "SystemProtector"],
            "gaming_fraud": ["PaymentBlocker", "ParentNotifier", "LogWriter", "GamingProtector"],
            "social_engineering": ["MessageBlocker", "ParentNotifier", "LogWriter", "BehaviorAnalyzer"]
        }

    def load_sfm_registry(self) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–µ—Å—Ç—Ä–∞ SFM"""
        try:
            with open(self.registry_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
            return data.get("functions", {})
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–µ—Å—Ç—Ä–∞: {e}")
            return {}

    def simulate_threat_detection(self, threat: Dict) -> None:
        """–°–∏–º—É–ª—è—Ü–∏—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —É–≥—Ä–æ–∑—ã"""
        print(f"üîç {threat['source']} BOT: –û–±–Ω–∞—Ä—É–∂–∏–ª –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!")
        print(f"   üì± –°–æ–æ–±—â–µ–Ω–∏–µ: {threat['message']}")
        print(f"   ‚ö†Ô∏è –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {threat['risk_level'].upper()}")
        time.sleep(1)

    def simulate_ai_analysis(self, threat: Dict) -> None:
        """–°–∏–º—É–ª—è—Ü–∏—è AI –∞–Ω–∞–ª–∏–∑–∞"""
        print(f"ü§ñ {threat['type'].upper()} AGENT: –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —É–≥—Ä–æ–∑—É...")
        time.sleep(1)
        print(f"   üîç –¢–∏–ø —É–≥—Ä–æ–∑—ã: {threat['type']}")
        print(f"   üß† –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω: {threat['type'].upper()} –æ–±–Ω–∞—Ä—É–∂–µ–Ω!")
        print(f"   ‚ö° –†–µ—à–µ–Ω–∏–µ: –ë–õ–û–ö–ò–†–û–í–ê–¢–¨ –ò –£–í–ï–î–û–ú–ò–¢–¨!")
        time.sleep(1)

    def simulate_sfm_request(self, threat: Dict) -> List[str]:
        """–°–∏–º—É–ª—è—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ SFM"""
        print(f"‚öôÔ∏è SFM: –ü–æ–ª—É—á–∞—é –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞—â–∏—Ç—É –æ—Ç {threat['type']}")
        functions_needed = self.protection_functions.get(threat['type'], [])
        print(f"   üéØ –ù—É–∂–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏: {', '.join(functions_needed)}")
        time.sleep(1)
        return functions_needed

    def check_function_status(self, function_name: str, registry: Dict) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Ä–µ–µ—Å—Ç—Ä–µ"""
        # –ò—â–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤ —Ä–µ–µ—Å—Ç—Ä–µ
        for func_id, func_data in registry.items():
            if func_data.get('name') == function_name:
                return {
                    "found": True,
                    "status": func_data.get('status', 'unknown'),
                    "function_id": func_id,
                    "data": func_data
                }
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é
        statuses = ['active', 'sleeping', 'disabled']
        status = random.choice(statuses)
        return {
            "found": False,
            "status": status,
            "function_id": f"sim_{function_name.lower()}",
            "data": {"name": function_name, "status": status}
        }

    def simulate_sfm_activation(self, functions: List[str], registry: Dict) -> None:
        """–°–∏–º—É–ª—è—Ü–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π —á–µ—Ä–µ–∑ SFM"""
        print(f"üìã –†–ï–ï–°–¢–†: –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å —Ñ—É–Ω–∫—Ü–∏–π...")
        time.sleep(1)
        
        for function in functions:
            status_info = self.check_function_status(function, registry)
            
            if status_info["found"]:
                print(f"   ‚úÖ {function}: –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ä–µ–µ—Å—Ç—Ä–µ, —Å—Ç–∞—Ç—É—Å: {status_info['status']}")
            else:
                print(f"   üîç {function}: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ä–µ–µ—Å—Ç—Ä–µ, —Å–∏–º—É–ª–∏—Ä—É—é —Å—Ç–∞—Ç—É—Å: {status_info['status']}")
            
            time.sleep(0.5)
        
        print(f"\n‚öôÔ∏è SFM: –ê–∫—Ç–∏–≤–∏—Ä—É—é –Ω—É–∂–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏...")
        time.sleep(1)
        
        for function in functions:
            status_info = self.check_function_status(function, registry)
            if status_info["status"] == "sleeping":
                print(f"   üîÑ {function}: –ü–†–û–ë–£–ñ–î–ê–Æ –∏–∑ —Å–ø—è—â–µ–≥–æ —Ä–µ–∂–∏–º–∞...")
                time.sleep(0.5)
                print(f"   ‚úÖ {function}: –ê–ö–¢–ò–í–ò–†–û–í–ê–ù–ê!")
            elif status_info["status"] == "active":
                print(f"   ‚úÖ {function}: —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞, –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
            else:
                print(f"   ‚ö†Ô∏è {function}: –æ—Ç–∫–ª—é—á–µ–Ω–∞, –∞–∫—Ç–∏–≤–∏—Ä—É—é –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ...")
                time.sleep(0.5)
                print(f"   ‚úÖ {function}: –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –ê–ö–¢–ò–í–ò–†–û–í–ê–ù–ê!")

    def simulate_protection_execution(self, functions: List[str], threat: Dict) -> None:
        """–°–∏–º—É–ª—è—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞—â–∏—Ç–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
        print(f"\nüõ°Ô∏è –ó–ê–©–ò–¢–ù–´–ï –§–£–ù–ö–¶–ò–ò: –í—ã–ø–æ–ª–Ω—è—é –∑–∞—â–∏—Ç—É...")
        time.sleep(1)
        
        for function in functions:
            print(f"   üîß {function}: ", end="")
            time.sleep(0.5)
            
            if "Blocker" in function:
                print("–ë–õ–û–ö–ò–†–£–Æ —É–≥—Ä–æ–∑—É!")
            elif "Notifier" in function:
                print("–£–í–ï–î–û–ú–õ–Ø–Æ —Ä–æ–¥–∏—Ç–µ–ª–µ–π!")
            elif "Log" in function:
                print("–ó–ê–ü–ò–°–´–í–ê–Æ –≤ –∂—É—Ä–Ω–∞–ª –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏!")
            elif "Analyzer" in function:
                print("–ê–ù–ê–õ–ò–ó–ò–†–£–Æ –ø–æ–≤–µ–¥–µ–Ω–∏–µ!")
            elif "Scanner" in function:
                print("–°–ö–ê–ù–ò–†–£–Æ —Å–∏—Å—Ç–µ–º—É –Ω–∞ —É–≥—Ä–æ–∑—ã!")
            elif "Protector" in function:
                print("–ó–ê–©–ò–©–ê–Æ —Å–∏—Å—Ç–µ–º—É!")
            else:
                print("–í–´–ü–û–õ–ù–Ø–Æ –∑–∞—â–∏—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è!")
            
            time.sleep(0.5)

    def simulate_result(self, threat: Dict) -> None:
        """–°–∏–º—É–ª—è—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∑–∞—â–∏—Ç—ã"""
        print(f"\n‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢ –ó–ê–©–ò–¢–´:")
        print(f"   üõ°Ô∏è –£–≥—Ä–æ–∑–∞ –Ω–µ–π—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–∞: {threat['type'].upper()}")
        print(f"   üë∂ –†–µ–±–µ–Ω–æ–∫ –∑–∞—â–∏—â–µ–Ω –æ—Ç: {threat['message'][:50]}...")
        print(f"   üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –†–æ–¥–∏—Ç–µ–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã –æ –ø–æ–ø—ã—Ç–∫–µ –∞—Ç–∞–∫–∏")
        print(f"   üìä –î–µ–π—Å—Ç–≤–∏—è –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –∂—É—Ä–Ω–∞–ª –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
        print(f"   üîí –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
        print(f"   ‚è∞ –í—Ä–µ–º—è —Ä–µ–∞–∫—Ü–∏–∏: {random.randint(50, 200)} –º—Å")

    def run_demo(self) -> None:
        """–ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
        print("üé¨ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò ALADDIN")
        print("=" * 60)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–µ—Å—Ç—Ä SFM
        print("üìã –ó–∞–≥—Ä—É–∂–∞—é —Ä–µ–µ—Å—Ç—Ä SFM...")
        registry = self.load_sfm_registry()
        print(f"   ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(registry)} —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞")
        time.sleep(1)
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —É–≥—Ä–æ–∑—É
        threat = random.choice(self.threats)
        print(f"\nüéØ –°–ò–ú–£–õ–Ø–¶–ò–Ø –£–ì–†–û–ó–´: {threat['type'].upper()}")
        print("=" * 60)
        
        # –®–∞–≥ 1: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —É–≥—Ä–æ–∑—ã
        print("1Ô∏è‚É£ –û–ë–ù–ê–†–£–ñ–ï–ù–ò–ï –£–ì–†–û–ó–´:")
        self.simulate_threat_detection(threat)
        
        # –®–∞–≥ 2: AI –∞–Ω–∞–ª–∏–∑
        print(f"\n2Ô∏è‚É£ AI –ê–ù–ê–õ–ò–ó:")
        self.simulate_ai_analysis(threat)
        
        # –®–∞–≥ 3: –ó–∞–ø—Ä–æ—Å –∫ SFM
        print(f"\n3Ô∏è‚É£ –ó–ê–ü–†–û–° –ö SFM:")
        functions_needed = self.simulate_sfm_request(threat)
        
        # –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∞–∫—Ç–∏–≤–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π
        print(f"\n4Ô∏è‚É£ –ê–ö–¢–ò–í–ê–¶–ò–Ø –§–£–ù–ö–¶–ò–ô:")
        self.simulate_sfm_activation(functions_needed, registry)
        
        # –®–∞–≥ 5: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞—â–∏—Ç—ã
        print(f"\n5Ô∏è‚É£ –í–´–ü–û–õ–ù–ï–ù–ò–ï –ó–ê–©–ò–¢–´:")
        self.simulate_protection_execution(functions_needed, threat)
        
        # –®–∞–≥ 6: –†–µ–∑—É–ª—å—Ç–∞—Ç
        print(f"\n6Ô∏è‚É£ –†–ï–ó–£–õ–¨–¢–ê–¢:")
        self.simulate_result(threat)
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò:")
        print(f"   üéØ –¢–∏–ø —É–≥—Ä–æ–∑—ã: {threat['type']}")
        print(f"   üîß –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ —Ñ—É–Ω–∫—Ü–∏–π: {len(functions_needed)}")
        print(f"   ‚ö° –í—Ä–µ–º—è —Ä–µ–∞–∫—Ü–∏–∏: < 1 —Å–µ–∫—É–Ω–¥—ã")
        print(f"   üõ°Ô∏è –£—Ä–æ–≤–µ–Ω—å –∑–∞—â–∏—Ç—ã: –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–´–ô")
        print(f"   ‚úÖ –°—Ç–∞—Ç—É—Å: –£–ì–†–û–ó–ê –ù–ï–ô–¢–†–ê–õ–ò–ó–û–í–ê–ù–ê")
        
        print(f"\nüèÜ –°–ò–°–¢–ï–ú–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò ALADDIN –†–ê–ë–û–¢–ê–ï–¢ –ò–î–ï–ê–õ–¨–ù–û!")
        print("=" * 60)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    demo = SecuritySystemDemo()
    demo.run_demo()

if __name__ == "__main__":
    main()