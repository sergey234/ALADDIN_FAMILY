#!/usr/bin/env python3
"""
üîç ALADDIN - SFM Integration Status Analysis
–ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ SFM

–ê–≤—Ç–æ—Ä: ALADDIN Security Team
–í–µ—Ä—Å–∏—è: 1.0
–î–∞—Ç–∞: 2025-01-27
"""

import json
import os
from pathlib import Path

def load_sfm_registry():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–µ–µ—Å—Ç—Ä —Ñ—É–Ω–∫—Ü–∏–π SFM"""
    registry_path = "/Users/sergejhlystov/ALADDIN_NEW/security/family/data/sfm/function_registry.json"
    try:
        with open(registry_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
            return data.get('functions', {})
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ SFM —Ä–µ–µ—Å—Ç—Ä–∞: {e}")
        return {}

def analyze_integration_status():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤"""
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º SFM —Ä–µ–µ—Å—Ç—Ä
    sfm_functions = load_sfm_registry()
    print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ SFM —Ä–µ–µ—Å—Ç—Ä–∞: {len(sfm_functions)}")
    
    # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    all_files = {
        # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏ (14 —Ñ–∞–π–ª–æ–≤)
        "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏": [
            "antifrod_integration.py",
            "audio_deepfake_detection.py", 
            "children_cyber_protection.py",
            "crypto_fraud_protection.py",
            "ddos_protection.py",
            "fakeradar_integration.py",
            "max_messenger_protection.py",
            "national_security_system.py",
            "russian_ai_models.py",
            "russian_banking_integration.py",
            "russian_threat_intelligence.py",
            "sim_card_monitoring.py",
            "telegram_fake_chat_detection.py",
            "vk_messenger_protection.py"
        ],
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–∏—è –º–æ–¥—É–ª–µ–π (7 —Ñ–∞–π–ª–æ–≤)
        "–†–∞—Å—à–∏—Ä–µ–Ω–∏—è –º–æ–¥—É–ª–µ–π": [
            "security_monitoring_fakeradar_expansion.py",
            "security_analytics_antifrod_expansion.py",
            "security_analytics_russian_banking_expansion.py",
            "threat_intelligence_russian_context_expansion.py",
            "family_communication_hub_children_protection_expansion.py",
            "family_communication_hub_max_messenger_expansion.py",
            "incognito_protection_bot_telegram_expansion.py"
        ],
        
        # –°–∫—Ä–∏–ø—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è (15 —Ñ–∞–π–ª–æ–≤)
        "–°–∫—Ä–∏–ø—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è": [
            "create_sim_card_monitoring.py",
            "create_max_messenger_integration.py",
            "create_banking_integration.py",
            "create_gosuslugi_integration.py",
            "create_digital_sovereignty.py",
            "create_telegram_enhancement.py",
            "create_audio_deepfake_detection.py",
            "create_vk_messenger_integration.py",
            "create_crypto_fraud_protection.py",
            "create_ddos_protection.py",
            "integrate_fakeradar.py",
            "integrate_antifrod_system.py",
            "test_call_protection_system.py",
            "run_all_integrations.py",
            "create_children_cyber_threats_protection.py"
        ]
    }
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    integrated_files = []
    not_integrated_files = []
    
    print("\nüîç –ê–ù–ê–õ–ò–ó –°–¢–ê–¢–£–°–ê –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –í SFM:")
    print("=" * 80)
    
    for group_name, file_list in all_files.items():
        print(f"\nüìÇ {group_name}:")
        print("-" * 60)
        
        for file_name in file_list:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –≤ SFM —Ä–µ–µ—Å—Ç—Ä–µ
            is_integrated = False
            
            # –ò—â–µ–º –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –≤–∞—Ä–∏–∞–Ω—Ç–∞–º –Ω–∞–∑–≤–∞–Ω–∏–π
            base_name = file_name.replace('.py', '').replace('_integration', '').replace('_protection', '').replace('_expansion', '')
            
            for func_id in sfm_functions.keys():
                if (base_name in func_id or 
                    func_id in base_name or
                    any(keyword in func_id for keyword in ['antifrod', 'fakeradar', 'children', 'crypto', 'ddos', 'max', 'national', 'russian', 'sim', 'telegram', 'vk', 'audio'])):
                    is_integrated = True
                    break
            
            if is_integrated:
                integrated_files.append((group_name, file_name))
                print(f"‚úÖ {file_name} - –ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù –í SFM")
            else:
                not_integrated_files.append((group_name, file_name))
                print(f"‚ùå {file_name} - –ù–ï –ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù –í SFM")
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\n" + "=" * 80)
    print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print("=" * 80)
    print(f"‚úÖ –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ –≤ SFM: {len(integrated_files)} —Ñ–∞–π–ª–æ–≤")
    print(f"‚ùå –ù–ï –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ –≤ SFM: {len(not_integrated_files)} —Ñ–∞–π–ª–æ–≤")
    print(f"üìÅ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {len(integrated_files) + len(not_integrated_files)}")
    
    return integrated_files, not_integrated_files

def generate_integration_report(integrated_files, not_integrated_files):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –ø–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    
    report = f"""
# üîç ALADDIN - –û–¢–ß–ï–¢ –ü–û –°–¢–ê–¢–£–°–£ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –í SFM
## –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –Ω–∞ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏ —Ç—Ä–µ–±—É—é—â–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏

---

## üìä **–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê**

```
‚úÖ –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ –≤ SFM: {len(integrated_files)} —Ñ–∞–π–ª–æ–≤
‚ùå –ù–ï –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ –≤ SFM: {len(not_integrated_files)} —Ñ–∞–π–ª–æ–≤
üìÅ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {len(integrated_files) + len(not_integrated_files)}
```

---

## ‚úÖ **–ì–†–£–ü–ü–ê 1: –£–ñ–ï –ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù–´ –í SFM**

### **üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥—Ä—É–ø–ø–∞–º:**
"""
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    integrated_by_group = {}
    for group, file_name in integrated_files:
        if group not in integrated_by_group:
            integrated_by_group[group] = []
        integrated_by_group[group].append(file_name)
    
    for group_name, file_list in integrated_by_group.items():
        report += f"\n**üìÇ {group_name} ({len(file_list)} —Ñ–∞–π–ª–æ–≤):**\n"
        for file_name in file_list:
            report += f"- ‚úÖ `{file_name}`\n"
    
    report += f"""
---

## ‚ùå **–ì–†–£–ü–ü–ê 2: –¢–†–ï–ë–£–Æ–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –í SFM**

### **üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥—Ä—É–ø–ø–∞–º:**
"""
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –Ω–µ–∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    not_integrated_by_group = {}
    for group, file_name in not_integrated_files:
        if group not in not_integrated_by_group:
            not_integrated_by_group[group] = []
        not_integrated_by_group[group].append(file_name)
    
    for group_name, file_list in not_integrated_by_group.items():
        report += f"\n**üìÇ {group_name} ({len(file_list)} —Ñ–∞–π–ª–æ–≤):**\n"
        for file_name in file_list:
            report += f"- ‚ùå `{file_name}`\n"
    
    report += f"""
---

## üéØ **–î–ï–¢–ê–õ–¨–ù–´–ô –°–ü–ò–°–û–ö –î–õ–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–ò**

### **üîß –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏ (—Ç—Ä–µ–±—É—é—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏):**
"""
    
    integration_modules = [f for g, f in not_integrated_files if g == "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏"]
    for i, file_name in enumerate(integration_modules, 1):
        report += f"{i}. `{file_name}`\n"
    
    report += f"""
### **üîß –†–∞—Å—à–∏—Ä–µ–Ω–∏—è –º–æ–¥—É–ª–µ–π (—Ç—Ä–µ–±—É—é—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏):**
"""
    
    expansion_modules = [f for g, f in not_integrated_files if g == "–†–∞—Å—à–∏—Ä–µ–Ω–∏—è –º–æ–¥—É–ª–µ–π"]
    for i, file_name in enumerate(expansion_modules, 1):
        report += f"{i}. `{file_name}`\n"
    
    report += f"""
### **üìú –°–∫—Ä–∏–ø—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è (—Ç—Ä–µ–±—É—é—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏):**
"""
    
    script_modules = [f for g, f in not_integrated_files if g == "–°–∫—Ä–∏–ø—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è"]
    for i, file_name in enumerate(script_modules, 1):
        report += f"{i}. `{file_name}`\n"
    
    report += f"""
---

## üöÄ **–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ò–ù–¢–ï–ì–†–ê–¶–ò–ò**

### **üìã –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:**
1. **–í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç:** –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏ (–æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å)
2. **–°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç:** –†–∞—Å—à–∏—Ä–µ–Ω–∏—è –º–æ–¥—É–ª–µ–π (—É–ª—É—á—à–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö)
3. **–ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç:** –°–∫—Ä–∏–ø—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è (–≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ)

### **‚öôÔ∏è –®–∞–≥–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:**
1. –°–æ–∑–¥–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –≤ SFM –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–æ–¥—É–ª—è
2. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≤ JSON —Ä–µ–µ—Å—Ç—Ä–µ
3. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
5. –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º–µ

---

*–û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: 2025-01-27*  
*–í–µ—Ä—Å–∏—è: 1.0*  
*–°—Ç–∞—Ç—É—Å: –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω*
"""
    
    return report

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ SFM...")
    
    integrated_files, not_integrated_files = analyze_integration_status()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    report = generate_integration_report(integrated_files, not_integrated_files)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    report_path = "/Users/sergejhlystov/Desktop/ALADDIN_SFM_INTEGRATION_STATUS_REPORT.md"
    with open(report_path, 'w', encoding='utf-8') as f:
        f.write(report)
    
    print(f"\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_path}")
    print("\nüéØ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù!")