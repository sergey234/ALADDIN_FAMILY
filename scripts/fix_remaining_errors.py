#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –æ—à–∏–±–æ–∫ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import os
import re
import subprocess
import shutil
from pathlib import Path
from datetime import datetime

class RemainingErrorsFixer:
    def __init__(self, target_file):
        self.target_file = Path(target_file)
        self.backup_file = self.target_file.with_suffix('.py.backup2')
        self.stats = {
            "e302_fixed": 0,  # expected 2 blank lines
            "f401_fixed": 0,  # unused imports
            "e128_fixed": 0,  # continuation line indentation
            "e305_fixed": 0,  # expected 2 blank lines before class
            "errors_before": 0,
            "errors_after": 0
        }
        
    def create_backup(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ —Ñ–∞–π–ª–∞"""
        print(f"üîÑ –°–û–ó–î–ê–ù–ò–ï –†–ï–ó–ï–†–í–ù–û–ô –ö–û–ü–ò–ò: {self.target_file}")
        print("=" * 60)
        
        shutil.copy2(self.target_file, self.backup_file)
        print(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {self.backup_file}")
        
    def check_errors_before(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—à–∏–±–∫–∏ –î–û –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        print(f"\nüîç –ü–†–û–í–ï–†–ö–ê –û–®–ò–ë–û–ö –î–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø")
        print("=" * 60)
        
        cmd = [
            "python3", "-m", "flake8",
            "--max-line-length=120",
            str(self.target_file)
        ]
        
        try:
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=30)
            error_lines = [line for line in result.stdout.split('\n') if line.strip()]
            self.stats["errors_before"] = len(error_lines)
            
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ –æ—à–∏–±–æ–∫: {len(error_lines)}")
            
            if error_lines:
                print("üìã –í—Å–µ –æ—à–∏–±–∫–∏:")
                for i, error in enumerate(error_lines):
                    print(f"   {i+1}. {error}")
                    
                # –ü–æ–¥—Å—á–µ—Ç —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
                error_types = {}
                for line in error_lines:
                    match = re.match(r".*:(\d+):(\d+): ([A-Z]\d+)", line)
                    if match:
                        error_code = match.group(3)
                        error_types[error_code] = error_types.get(error_code, 0) + 1
                
                print(f"\nüìä –¢–ò–ü–´ –û–®–ò–ë–û–ö:")
                for code, count in sorted(error_types.items(), key=lambda x: x[1], reverse=True):
                    print(f"   ‚Ä¢ {code}: {count} –æ—à–∏–±–æ–∫")
                    
            return len(error_lines)
            
        except subprocess.TimeoutExpired:
            print("‚ùå Flake8 –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏")
            return 0
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ flake8: {e}")
            return 0
            
    def fix_remaining_errors(self):
        """–ò—Å–ø—Ä–∞–≤–∏—Ç—å –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –æ—à–∏–±–∫–∏"""
        print(f"\nüîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –û–°–¢–ê–í–®–ò–•–°–Ø –û–®–ò–ë–û–ö")
        print("=" * 60)
        
        try:
            with open(self.target_file, 'r', encoding='utf-8') as f:
                lines = f.readlines()
                
            print(f"üìÑ –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª: {len(lines)} —Å—Ç—Ä–æ–∫")
            
            new_lines = []
            i = 0
            
            while i < len(lines):
                line = lines[i]
                
                # E302: expected 2 blank lines before function/class
                if re.match(r'^(def |class )', line.strip()):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫–æ–ª—å–∫–æ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫ –ø–µ—Ä–µ–¥ —Ñ—É–Ω–∫—Ü–∏–µ–π/–∫–ª–∞—Å—Å–æ–º
                    blank_count = 0
                    j = i - 1
                    while j >= 0 and lines[j].strip() == '':
                        blank_count += 1
                        j -= 1
                    
                    # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥ —Ñ—É–Ω–∫—Ü–∏–µ–π/–∫–ª–∞—Å—Å–æ–º –µ—Å—Ç—å –∫–æ–¥ (–Ω–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏)
                    if j >= 0 and lines[j].strip() != '':
                        if blank_count < 2:
                            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                            for _ in range(2 - blank_count):
                                new_lines.append('\n')
                            self.stats["e302_fixed"] += 1
                
                # E305: expected 2 blank lines before class (–≤ –∫–æ–Ω—Ü–µ —Ñ–∞–π–ª–∞)
                if i == len(lines) - 1 and re.match(r'^class ', line.strip()):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫–æ–ª—å–∫–æ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫ –ø–µ—Ä–µ–¥ –∫–ª–∞—Å—Å–æ–º
                    blank_count = 0
                    j = i - 1
                    while j >= 0 and lines[j].strip() == '':
                        blank_count += 1
                        j -= 1
                    
                    if j >= 0 and lines[j].strip() != '':
                        if blank_count < 2:
                            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                            for _ in range(2 - blank_count):
                                new_lines.append('\n')
                            self.stats["e305_fixed"] += 1
                
                # E128: continuation line indentation
                if re.match(r'^\s+[^#\s]', line) and i > 0:
                    prev_line = lines[i-1].rstrip()
                    if prev_line.endswith('\\') or prev_line.endswith(','):
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—Ç—É–ø
                        expected_indent = len(prev_line) - len(prev_line.lstrip()) + 4
                        current_indent = len(line) - len(line.lstrip())
                        if current_indent != expected_indent:
                            new_lines.append(' ' * expected_indent + line.lstrip())
                            self.stats["e128_fixed"] += 1
                            i += 1
                            continue
                
                new_lines.append(line)
                i += 1
            
            # F401: unused imports - —É–¥–∞–ª—è–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã
            self._remove_unused_imports(new_lines)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with open(self.target_file, 'w', encoding='utf-8') as f:
                f.writelines(new_lines)
                
            print(f"‚úÖ –§–∞–π–ª –∏—Å–ø—Ä–∞–≤–ª–µ–Ω:")
            print(f"   ‚Ä¢ E302 (–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫): {self.stats['e302_fixed']}")
            print(f"   ‚Ä¢ F401 (–Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã): {self.stats['f401_fixed']}")
            print(f"   ‚Ä¢ E128 (–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç—Å—Ç—É–ø): {self.stats['e128_fixed']}")
            print(f"   ‚Ä¢ E305 (–ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –ø–µ—Ä–µ–¥ –∫–ª–∞—Å—Å–æ–º): {self.stats['e305_fixed']}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
            return False
            
    def _remove_unused_imports(self, lines):
        """–£–¥–∞–ª–∏—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã"""
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –µ—Å–ª–∏ –∏–º–ø–æ—Ä—Ç –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∫–æ–¥–µ
        import_lines = []
        for i, line in enumerate(lines):
            if re.match(r'^(from .* import|import )', line.strip()):
                import_lines.append((i, line.strip()))
        
        for i, import_line in import_lines:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∏–º–ø–æ—Ä—Ç–∞
            if 'from' in import_line:
                match = re.match(r'from .* import (.+)', import_line)
                if match:
                    imported_names = [name.strip() for name in match.group(1).split(',')]
                else:
                    continue
            else:
                match = re.match(r'import (.+)', import_line)
                if match:
                    imported_names = [name.strip() for name in match.group(1).split(',')]
                else:
                    continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ –∏–º–ø–æ—Ä—Ç
            used = False
            for line in lines:
                if line != lines[i]:  # –ù–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–∞–º—É —Å—Ç—Ä–æ–∫—É –∏–º–ø–æ—Ä—Ç–∞
                    for name in imported_names:
                        if name in line and not line.strip().startswith('#'):
                            used = True
                            break
                    if used:
                        break
            
            if not used:
                # –£–¥–∞–ª—è–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –∏–º–ø–æ—Ä—Ç
                lines[i] = ''
                self.stats["f401_fixed"] += 1
                
    def check_errors_after(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—à–∏–±–∫–∏ –ü–û–°–õ–ï –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        print(f"\nüîç –ü–†–û–í–ï–†–ö–ê –û–®–ò–ë–û–ö –ü–û–°–õ–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø")
        print("=" * 60)
        
        cmd = [
            "python3", "-m", "flake8",
            "--max-line-length=120",
            str(self.target_file)
        ]
        
        try:
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=30)
            error_lines = [line for line in result.stdout.split('\n') if line.strip()]
            self.stats["errors_after"] = len(error_lines)
            
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ –æ—à–∏–±–æ–∫: {len(error_lines)}")
            
            if error_lines:
                print("üìã –û—Å—Ç–∞–≤—à–∏–µ—Å—è –æ—à–∏–±–∫–∏:")
                for i, error in enumerate(error_lines):
                    print(f"   {i+1}. {error}")
            else:
                print("üéâ –û–¢–õ–ò–ß–ù–û! –û—à–∏–±–æ–∫ flake8 –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
                
            return len(error_lines)
            
        except subprocess.TimeoutExpired:
            print("‚ùå Flake8 –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏")
            return 0
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ flake8: {e}")
            return 0
            
    def show_comparison(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –î–û –∏ –ü–û–°–õ–ï"""
        print(f"\nüìä –°–†–ê–í–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
        print("=" * 60)
        
        errors_fixed = self.stats["errors_before"] - self.stats["errors_after"]
        improvement = (errors_fixed / self.stats["errors_before"] * 100) if self.stats["errors_before"] > 0 else 0
        
        print(f"üìà –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        print(f"   ‚Ä¢ –û—à–∏–±–æ–∫ –î–û: {self.stats['errors_before']}")
        print(f"   ‚Ä¢ –û—à–∏–±–æ–∫ –ü–û–°–õ–ï: {self.stats['errors_after']}")
        print(f"   ‚Ä¢ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: {errors_fixed}")
        print(f"   ‚Ä¢ –£–ª—É—á—à–µ–Ω–∏–µ: {improvement:.1f}%")
        
        total_fixes = sum([
            self.stats["e302_fixed"],
            self.stats["f401_fixed"],
            self.stats["e128_fixed"],
            self.stats["e305_fixed"]
        ])
        
        print(f"\nüîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–û –¢–ò–ü–ê–ú:")
        print(f"   ‚Ä¢ E302 (–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫): {self.stats['e302_fixed']}")
        print(f"   ‚Ä¢ F401 (–Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã): {self.stats['f401_fixed']}")
        print(f"   ‚Ä¢ E128 (–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç—Å—Ç—É–ø): {self.stats['e128_fixed']}")
        print(f"   ‚Ä¢ E305 (–ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –ø–µ—Ä–µ–¥ –∫–ª–∞—Å—Å–æ–º): {self.stats['e305_fixed']}")
        print(f"   ‚Ä¢ –í–°–ï–ì–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô: {total_fixes}")
        
        if self.stats["errors_after"] == 0:
            print("\nüéâ –£–°–ü–ï–•! –§–∞–π–ª –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω!")
        elif errors_fixed > 0:
            print(f"\n‚úÖ –•–û–†–û–®–û! –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ {errors_fixed} –æ—à–∏–±–æ–∫")
        else:
            print("\n‚ö†Ô∏è  –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞")
            
    def restore_backup(self):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–∞–π–ª –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
        print(f"\nüîÑ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ò–ó –†–ï–ó–ï–†–í–ù–û–ô –ö–û–ü–ò–ò")
        print("=" * 60)
        
        if self.backup_file.exists():
            shutil.copy2(self.backup_file, self.target_file)
            print(f"‚úÖ –§–∞–π–ª –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {self.target_file}")
        else:
            print(f"‚ùå –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {self.backup_file}")
            
    def run_test(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –Ω–∞ –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ"""
        print(f"üß™ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –û–°–¢–ê–í–®–ò–•–°–Ø –û–®–ò–ë–û–ö")
        print("=" * 60)
        print(f"üéØ –¶–µ–ª–µ–≤–æ–π —Ñ–∞–π–ª: {self.target_file}")
        print("=" * 60)
        
        start_time = datetime.now()
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
            self.create_backup()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫–∏ –î–û
            errors_before = self.check_errors_before()
            
            if errors_before == 0:
                print("‚úÖ –§–∞–π–ª —É–∂–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–æ–∫ flake8")
                return
                
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            if self.fix_remaining_errors():
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫–∏ –ü–û–°–õ–ï
                errors_after = self.check_errors_after()
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
                self.show_comparison()
                
            end_time = datetime.now()
            duration = end_time - start_time
            
            print(f"\n‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration}")
            
        except Exception as e:
            print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
            print("üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...")
            self.restore_backup()

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ —Ñ–∞–π–ª–µ vpn_protocols.py
    target_file = "security/vpn/interfaces/vpn_protocols.py"
    
    if not Path(target_file).exists():
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {target_file}")
    else:
        fixer = RemainingErrorsFixer(target_file)
        fixer.run_test()