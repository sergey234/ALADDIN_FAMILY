#!/usr/bin/env python3
"""
–§–ê–ó–ê 2: –£–±—Ä–∞—Ç—å sys.path.append() –∏–∑ —Ñ–∞–π–ª–æ–≤
–ü—Ä–æ—Å—Ç–æ–π –∏ –Ω–∞–¥–µ–∂–Ω—ã–π —Å–∫—Ä–∏–ø—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è sys.path.append()
"""

import os
import re
import subprocess
import shutil
from pathlib import Path
from datetime import datetime

class SysPathRemover:
    def __init__(self):
        self.security_dir = Path("/Users/sergejhlystov/ALADDIN_NEW/security")
        self.backup_dir = Path("/Users/sergejhlystov/ALADDIN_NEW/backup_sys_path_removal")
        self.stats = {
            "files_processed": 0,
            "sys_path_removed": 0,
            "files_with_sys_path": 0
        }
        
    def create_backup(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏"""
        print("üîÑ –§–ê–ó–ê 0: –°–û–ó–î–ê–ù–ò–ï –†–ï–ó–ï–†–í–ù–û–ô –ö–û–ü–ò–ò")
        print("=" * 50)
        
        if self.backup_dir.exists():
            shutil.rmtree(self.backup_dir)
        
        shutil.copytree(self.security_dir, self.backup_dir)
        print(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {self.backup_dir}")
        
    def find_files_with_sys_path(self):
        """–ù–∞–π—Ç–∏ –≤—Å–µ —Ñ–∞–π–ª—ã —Å sys.path.append()"""
        print("\nüîç –ü–û–ò–°–ö –§–ê–ô–õ–û–í –° sys.path.append()")
        print("=" * 50)
        
        python_files = self._get_python_files()
        files_with_sys_path = []
        
        for file_path in python_files:
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                    if "sys.path.append" in content:
                        files_with_sys_path.append(file_path)
                        self.stats["files_with_sys_path"] += 1
            except Exception as e:
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")
                
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ —Å sys.path.append(): {len(files_with_sys_path)}")
        
        if files_with_sys_path:
            print("üìã –§–∞–π–ª—ã —Å sys.path.append():")
            for i, file_path in enumerate(files_with_sys_path[:10]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                print(f"   {i+1}. {file_path}")
            if len(files_with_sys_path) > 10:
                print(f"   ... –∏ –µ—â–µ {len(files_with_sys_path) - 10} —Ñ–∞–π–ª–æ–≤")
                
        return files_with_sys_path
        
    def remove_sys_path_from_file(self, file_path):
        """–£–¥–∞–ª–∏—Ç—å sys.path.append() –∏–∑ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                lines = f.readlines()
                
            new_lines = []
            removed_count = 0
            
            for line in lines:
                if "sys.path.append" in line:
                    # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å sys.path.append()
                    removed_count += 1
                    print(f"   üóëÔ∏è  –£–¥–∞–ª–µ–Ω–æ: {line.strip()}")
                else:
                    new_lines.append(line)
                    
            if removed_count > 0:
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª –±–µ–∑ sys.path.append()
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.writelines(new_lines)
                    
                self.stats["sys_path_removed"] += removed_count
                return True
                
            return False
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {file_path}: {e}")
            return False
            
    def remove_sys_path_from_all_files(self):
        """–£–¥–∞–ª–∏—Ç—å sys.path.append() –∏–∑ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤"""
        print("\nüîß –£–î–ê–õ–ï–ù–ò–ï sys.path.append() –ò–ó –í–°–ï–• –§–ê–ô–õ–û–í")
        print("=" * 50)
        
        files_with_sys_path = self.find_files_with_sys_path()
        
        if not files_with_sys_path:
            print("‚úÖ –§–∞–π–ª–æ–≤ —Å sys.path.append() –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
            
        for file_path in files_with_sys_path:
            print(f"\nüìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞: {file_path}")
            if self.remove_sys_path_from_file(file_path):
                self.stats["files_processed"] += 1
                print(f"   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            else:
                print(f"   ‚ö†Ô∏è  –ù–µ —Ç—Ä–µ–±—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π")
                
    def verify_removal(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ sys.path.append() —É–¥–∞–ª–µ–Ω"""
        print("\nüîç –ü–†–û–í–ï–†–ö–ê –£–î–ê–õ–ï–ù–ò–Ø sys.path.append()")
        print("=" * 50)
        
        python_files = self._get_python_files()
        remaining_files = []
        
        for file_path in python_files:
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                    if "sys.path.append" in content:
                        remaining_files.append(file_path)
            except Exception as e:
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")
                
        if remaining_files:
            print(f"‚ö†Ô∏è  –û—Å—Ç–∞–ª–∏—Å—å —Ñ–∞–π–ª—ã —Å sys.path.append(): {len(remaining_files)}")
            for file_path in remaining_files:
                print(f"   ‚Ä¢ {file_path}")
        else:
            print("‚úÖ –í—Å–µ sys.path.append() —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!")
            
    def _get_python_files(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ Python —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        exclude_patterns = [
            "*/backup*", "*/test*", "*/logs*", "*/formatting_work*",
            "*_backup_*.py", "*_original_backup_*.py", "*_BACKUP.py",
            "test_*.py"
        ]
        
        python_files = []
        for p in self.security_dir.rglob("*.py"):
            if not any(re.search(pattern.replace('*', '.*'), str(p)) for pattern in exclude_patterns):
                python_files.append(p)
                
        return python_files
        
    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–¥–µ–ª–∞–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ"""
        print("\nüìä –û–¢–ß–ï–¢ –û –ü–†–û–î–ï–õ–ê–ù–ù–û–ô –†–ê–ë–û–¢–ï")
        print("=" * 50)
        
        print(f"üìà –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        print(f"   ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {self.stats['files_processed']}")
        print(f"   ‚Ä¢ –£–¥–∞–ª–µ–Ω–æ sys.path.append(): {self.stats['sys_path_removed']}")
        print(f"   ‚Ä¢ –§–∞–π–ª–æ–≤ —Å sys.path.append(): {self.stats['files_with_sys_path']}")
        print(f"   ‚Ä¢ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {self.backup_dir}")
        
        if self.stats["sys_path_removed"] > 0:
            print(f"\n‚úÖ –£–°–ü–ï–•! –£–¥–∞–ª–µ–Ω–æ {self.stats['sys_path_removed']} —Å—Ç—Ä–æ–∫ —Å sys.path.append()")
        else:
            print(f"\n‚ÑπÔ∏è  –§–∞–π–ª–æ–≤ —Å sys.path.append() –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
    def run_phase2(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –§–ê–ó–£ 2: –£–±—Ä–∞—Ç—å sys.path.append() –∏–∑ —Ñ–∞–π–ª–æ–≤"""
        print("üöÄ –§–ê–ó–ê 2: –£–î–ê–õ–ï–ù–ò–ï sys.path.append() –ò–ó –§–ê–ô–õ–û–í")
        print("=" * 60)
        print("üéØ –¶–µ–ª—å: –£–±—Ä–∞—Ç—å –≤—Å–µ sys.path.append() –∏–∑ –∫–æ–¥–∞")
        print("=" * 60)
        
        start_time = datetime.now()
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
            self.create_backup()
            
            # –£–¥–∞–ª—è–µ–º sys.path.append() –∏–∑ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
            self.remove_sys_path_from_all_files()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self.verify_removal()
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            self.generate_report()
            
            end_time = datetime.now()
            duration = end_time - start_time
            
            print(f"\n‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration}")
            print(f"\nüéØ –§–ê–ó–ê 2 –ó–ê–í–ï–†–®–ï–ù–ê!")
            print(f"üìã –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò (–í–†–£–ß–ù–£–Æ):")
            print(f"   ‚Ä¢ –§–ê–ó–ê 1: –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –∏–º–ø–æ—Ä—Ç—ã –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–æ–≤")
            print(f"   ‚Ä¢ –§–ê–ó–ê 3: –ù–∞—Å—Ç—Ä–æ–∏—Ç—å PYTHONPATH")
            print(f"   ‚Ä¢ –§–ê–ó–ê 4: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏")
            print(f"   ‚Ä¢ –§–ê–ó–ê 5: –ù–∞—Å—Ç—Ä–æ–∏—Ç—å pre-commit hooks")
            
        except Exception as e:
            print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
            print(f"üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...")
            if self.backup_dir.exists():
                shutil.rmtree(self.security_dir)
                shutil.copytree(self.backup_dir, self.security_dir)
                print("‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

if __name__ == "__main__":
    remover = SysPathRemover()
    remover.run_phase2()