#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç –∫–∞—á–µ—Å—Ç–≤–∞ ComplianceAgent
"""

import os
import sys
import time
import json
from datetime import datetime

def test_compliance_quality():
    """–¢–µ—Å—Ç –∫–∞—á–µ—Å—Ç–≤–∞ ComplianceAgent"""
    print("üéØ –¢–ï–°–¢ –ö–ê–ß–ï–°–¢–í–ê COMPLIANCEAGENT")
    print("=" * 60)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
        agent_file = "security/ai_agents/compliance_agent.py"
        if not os.path.exists(agent_file):
            print("‚ùå –§–∞–π–ª ComplianceAgent –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        print("‚úÖ –§–∞–π–ª ComplianceAgent –Ω–∞–π–¥–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞
        with open(agent_file, 'r') as f:
            content = f.read()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        key_components = [
            # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã
            "class ComplianceAgent",
            "class ComplianceRequirement",
            "class ComplianceMetrics",
            
            # –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è
            "class ComplianceStandard(Enum)",
            "class ComplianceLevel(Enum)",
            "class ComplianceCategory(Enum)",
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã
            "def initialize(self)",
            "create_requirement",
            "assess_requirement",
            "def generate_compliance_report(self)",
            "def stop(self)",
            
            # AI –º–æ–¥–µ–ª–∏
            "def _initialize_ai_models(self)",
            "_analyze_compliance",
            "_analyze_evidence_quality",
            "_analyze_control_effectiveness",
            "_analyze_risk_level",
            
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
            "def _load_compliance_standards(self)",
            "_create_requirements_for_standard",
            "_map_category",
            "_calculate_priority",
            
            # –û—Ü–µ–Ω–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑
            "def _setup_monitoring(self)",
            "_update_metrics",
            "_recalculate_compliance_metrics",
            "_generate_recommendations",
            
            # –£—Ç–∏–ª–∏—Ç—ã
            "_save_data",
            "_validate_requirement_data"
        ]
        
        missing_components = []
        for component in key_components:
            if component not in content:
                missing_components.append(component)
        
        if missing_components:
            print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: {}".format(len(missing_components)))
            for missing in missing_components[:5]:
                print("   - {}".format(missing))
            if len(missing_components) > 5:
                print("   ... –∏ –µ—â–µ {} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤".format(len(missing_components) - 5))
            return False
        
        print("‚úÖ –í—Å–µ –∫–ª—é—á–µ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞
        lines = content.split('\n')
        code_lines = [line for line in lines if line.strip() and not line.strip().startswith('#')]
        total_lines = len(lines)
        code_line_count = len(code_lines)
        
        print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–û–î–ê:")
        print("   üìÑ –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {}".format(total_lines))
        print("   üíª –°—Ç—Ä–æ–∫ –∫–æ–¥–∞: {}".format(code_line_count))
        print("   üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {}".format(total_lines - code_line_count))
        print("   üìà –ü–ª–æ—Ç–Ω–æ—Å—Ç—å –∫–æ–¥–∞: {:.1f}%".format((code_line_count / total_lines) * 100))
        
        # –ü–æ–¥—Å—á–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        components = {
            "–ö–ª–∞—Å—Å—ã": content.count("class "),
            "–ú–µ—Ç–æ–¥—ã": content.count("def "),
            "–ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è": content.count("class.*Enum"),
            "AI –º–æ–¥–µ–ª–∏": content.count("model_type"),
            "–°—Ç–∞–Ω–¥–∞—Ä—Ç—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è": content.count("ComplianceStandard"),
            "–£—Ä–æ–≤–Ω–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è": content.count("ComplianceLevel"),
            "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è": content.count("ComplianceCategory"),
            "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è": content.count("ComplianceRequirement"),
            "–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫": content.count("except"),
            "–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ": content.count("log_activity"),
            "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è": content.count('"""'),
            "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è": content.count("self.")
        }
        
        print("\nüîß –ö–û–ú–ü–û–ù–ï–ù–¢–´ –°–ò–°–¢–ï–ú–´:")
        total_components = 0
        for component, count in components.items():
            print("   {}: {}".format(component, count))
            total_components += count
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤
        architecture_checks = {
            "SOLID –ø—Ä–∏–Ω—Ü–∏–ø—ã": content.count("def ") >= 30,  # –ú–Ω–æ–≥–æ –º–µ—Ç–æ–¥–æ–≤ = —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
            "DRY –ø—Ä–∏–Ω—Ü–∏–ø": content.count("def _") >= 20,  # –ú–Ω–æ–≥–æ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ = –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
            "–ú–æ–¥—É–ª—å–Ω–æ—Å—Ç—å": content.count("class ") >= 5,  # –ù–µ—Å–∫–æ–ª—å–∫–æ –∫–ª–∞—Å—Å–æ–≤ = –º–æ–¥—É–ª—å–Ω–æ—Å—Ç—å
            "–†–∞—Å—à–∏—Ä—è–µ–º–æ—Å—Ç—å": content.count("Enum") >= 3,  # –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è = —Ä–∞—Å—à–∏—Ä—è–µ–º–æ—Å—Ç—å
            "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è": content.count('"""') >= 15,  # –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
            "–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫": content.count("except") >= 20,  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
            "–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ": content.count("log_activity") >= 30,  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è": content.count("self.") >= 80  # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º–æ—Å—Ç—å
        }
        
        print("\nüèóÔ∏è –ê–†–•–ò–¢–ï–ö–¢–£–†–ù–´–ï –ü–†–ò–ù–¶–ò–ü–´:")
        architecture_score = 0
        for principle, passed in architecture_checks.items():
            status = "‚úÖ" if passed else "‚ùå"
            print("   {} {}: {}".format(status, principle, "–ü–†–û–ô–î–ï–ù–û" if passed else "–ù–ï –ü–†–û–ô–î–ï–ù–û"))
            if passed:
                architecture_score += 1
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
        functionality_checks = {
            "–°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π": "create_requirement" in content,
            "–û—Ü–µ–Ω–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π": "assess_requirement" in content,
            "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤": "generate_compliance_report" in content,
            "AI –∞–Ω–∞–ª–∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è": "_analyze_compliance" in content,
            "–ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤": "_analyze_evidence_quality" in content,
            "–ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç—Ä–æ–ª–µ–π": "_analyze_control_effectiveness" in content,
            "–ê–Ω–∞–ª–∏–∑ —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞": "_analyze_risk_level" in content,
            "–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤": "_load_compliance_standards" in content,
            "–°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞": "_create_requirements_for_standard" in content,
            "–ú–∞–ø–ø–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π": "_map_category" in content,
            "–†–∞—Å—á–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞": "_calculate_priority" in content,
            "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞": "_setup_monitoring" in content,
            "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫": "_update_metrics" in content,
            "–ü–µ—Ä–µ—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫": "_recalculate_compliance_metrics" in content,
            "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π": "_generate_recommendations" in content,
            "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö": "_save_data" in content,
            "–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö": "_validate_requirement_data" in content
        }
        
        print("\n‚öôÔ∏è –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–¨:")
        functionality_score = 0
        for function, implemented in functionality_checks.items():
            status = "‚úÖ" if implemented else "‚ùå"
            print("   {} {}: {}".format(status, function, "–†–ï–ê–õ–ò–ó–û–í–ê–ù–û" if implemented else "–ù–ï –†–ï–ê–õ–ò–ó–û–í–ê–ù–û"))
            if implemented:
                functionality_score += 1
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        security_checks = {
            "–í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö": "validation" in content.lower() or "validate" in content.lower() or "check" in content.lower(),
            "–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫": "except" in content,
            "–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ": "log_activity" in content,
            "–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö": "data" in content.lower(),
            "–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤": "compliance" in content.lower(),
            "–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö": "hash" in content.lower(),
            "–ö–æ–Ω—Ç—Ä–æ–ª—å –¥–æ—Å—Ç—É–ø–∞": "access" in content.lower(),
            "–ê—É–¥–∏—Ç –¥–µ–π—Å—Ç–≤–∏–π": "audit" in content.lower() or "evidence" in content.lower()
        }
        
        print("\nüîí –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨:")
        security_score = 0
        for security, implemented in security_checks.items():
            status = "‚úÖ" if implemented else "‚ùå"
            print("   {} {}: {}".format(status, security, "–†–ï–ê–õ–ò–ó–û–í–ê–ù–û" if implemented else "–ù–ï –†–ï–ê–õ–ò–ó–û–í–ê–ù–û"))
            if implemented:
                security_score += 1
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        test_file_content = ""
        if os.path.exists("tests/test_compliance_agent.py"):
            with open("tests/test_compliance_agent.py", 'r') as f:
                test_file_content = f.read()
        
        test_checks = {
            "Unit —Ç–µ—Å—Ç—ã": os.path.exists("tests/test_compliance_agent.py"),
            "–¢–µ—Å—Ç –∫–∞—á–µ—Å—Ç–≤–∞": os.path.exists("scripts/test_compliance_quality.py"),
            "–°–ø—è—â–∏–π —Ä–µ–∂–∏–º": os.path.exists("scripts/put_compliance_to_sleep.py"),
            "–ü–æ–∫—Ä—ã—Ç–∏–µ –∫–æ–¥–∞": code_line_count >= 800,
            "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤": "unittest" in test_file_content and "TestComplianceAgent" in test_file_content and '"""' in test_file_content
        }
        
        print("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï:")
        test_score = 0
        for test, exists in test_checks.items():
            status = "‚úÖ" if exists else "‚ùå"
            print("   {} {}: {}".format(status, test, "–ï–°–¢–¨" if exists else "–ù–ï–¢"))
            if exists:
                test_score += 1
        
        # –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
        total_score = 0
        max_score = 100
        
        # –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ (25 –±–∞–ª–ª–æ–≤)
        architecture_percentage = (architecture_score / len(architecture_checks)) * 25
        total_score += architecture_percentage
        
        # –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å (35 –±–∞–ª–ª–æ–≤)
        functionality_percentage = (functionality_score / len(functionality_checks)) * 35
        total_score += functionality_percentage
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å (20 –±–∞–ª–ª–æ–≤)
        security_percentage = (security_score / len(security_checks)) * 20
        total_score += security_percentage
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (20 –±–∞–ª–ª–æ–≤)
        test_percentage = (test_score / len(test_checks)) * 20
        total_score += test_percentage
        
        print("\nüèÜ –û–¶–ï–ù–ö–ê –ö–ê–ß–ï–°–¢–í–ê: {:.1f}/{}".format(total_score, max_score))
        
        if total_score >= 95:
            print("‚úÖ –ö–ê–ß–ï–°–¢–í–û: A+ (–û–¢–õ–ò–ß–ù–û)")
            quality_grade = "A+"
        elif total_score >= 90:
            print("‚úÖ –ö–ê–ß–ï–°–¢–í–û: A (–û–¢–õ–ò–ß–ù–û)")
            quality_grade = "A"
        elif total_score >= 80:
            print("‚ö†Ô∏è –ö–ê–ß–ï–°–¢–í–û: B (–•–û–†–û–®–û)")
            quality_grade = "B"
        elif total_score >= 70:
            print("‚ö†Ô∏è –ö–ê–ß–ï–°–¢–í–û: C (–£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û)")
            quality_grade = "C"
        else:
            print("‚ùå –ö–ê–ß–ï–°–¢–í–û: D (–¢–†–ï–ë–£–ï–¢ –£–õ–£–ß–®–ï–ù–ò–Ø)")
            quality_grade = "D"
        
        # –ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –±–∞–ª–ª–æ–≤
        missing_points = max_score - total_score
        print("\nüìä –ê–ù–ê–õ–ò–ó –ù–ï–î–û–°–¢–ê–Æ–©–ò–• –ë–ê–õ–õ–û–í:")
        print("   üéØ –¢–µ–∫—É—â–∏–π –±–∞–ª–ª: {:.1f}".format(total_score))
        print("   üéØ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª: {}".format(max_score))
        print("   üéØ –ù–µ–¥–æ—Å—Ç–∞–µ—Ç –±–∞–ª–ª–æ–≤: {:.1f}".format(missing_points))
        
        if missing_points > 0:
            print("\nüîß –ß–¢–û –ù–£–ñ–ù–û –î–õ–Ø 100%:")
            
            # –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            arch_missing = (25 - architecture_percentage)
            func_missing = (35 - functionality_percentage)
            sec_missing = (20 - security_percentage)
            test_missing = (20 - test_percentage)
            
            if arch_missing > 0:
                print("   üèóÔ∏è –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: +{:.1f} –±–∞–ª–ª–æ–≤".format(arch_missing))
            if func_missing > 0:
                print("   ‚öôÔ∏è –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: +{:.1f} –±–∞–ª–ª–æ–≤".format(func_missing))
            if sec_missing > 0:
                print("   üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: +{:.1f} –±–∞–ª–ª–æ–≤".format(sec_missing))
            if test_missing > 0:
                print("   üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: +{:.1f} –±–∞–ª–ª–æ–≤".format(test_missing))
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        report = {
            "test_timestamp": datetime.now().isoformat(),
            "agent_name": "ComplianceAgent",
            "total_score": total_score,
            "max_score": max_score,
            "quality_grade": quality_grade,
            "missing_points": missing_points,
            "components": components,
            "architecture_score": architecture_score,
            "architecture_max": len(architecture_checks),
            "functionality_score": functionality_score,
            "functionality_max": len(functionality_checks),
            "security_score": security_score,
            "security_max": len(security_checks),
            "test_score": test_score,
            "test_max": len(test_checks),
            "code_statistics": {
                "total_lines": total_lines,
                "code_lines": code_line_count,
                "comment_lines": total_lines - code_line_count,
                "code_density": (code_line_count / total_lines) * 100
            }
        }
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        report_dir = "data/quality_reports"
        if not os.path.exists(report_dir):
            os.makedirs(report_dir)
        
        report_file = os.path.join(report_dir, "compliance_quality_test_{}.json".format(int(time.time())))
        with open(report_file, 'w') as f:
            json.dump(report, f, indent=2, ensure_ascii=False)
        
        print("\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {}".format(report_file))
        
        return total_score >= 90
        
    except Exception as e:
        print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {}".format(str(e)))
        import traceback
        traceback.print_exc()
        return False


if __name__ == "__main__":
    success = test_compliance_quality()
    if success:
        print("\nüéâ COMPLIANCEAGENT –°–û–û–¢–í–ï–¢–°–¢–í–£–ï–¢ –°–¢–ê–ù–î–ê–†–¢–ê–ú A+ –ö–ê–ß–ï–°–¢–í–ê!")
    else:
        print("\n‚ö†Ô∏è COMPLIANCEAGENT –¢–†–ï–ë–£–ï–¢ –£–õ–£–ß–®–ï–ù–ò–Ø!")
    exit(0 if success else 1)