#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üîç –ü–†–û–í–ï–†–ö–ê –†–ï–ê–õ–¨–ù–û–ì–û –°–¢–ê–¢–£–°–ê –°–ò–°–¢–ï–ú–´
====================================

–ê–Ω–∞–ª–∏–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π –≤ SFM
"""

import json
import os
from collections import Counter
from datetime import datetime

def check_real_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
    
    print("üîç –ü–†–û–í–ï–†–ö–ê –†–ï–ê–õ–¨–ù–û–ì–û –°–¢–ê–¢–£–°–ê –°–ò–°–¢–ï–ú–´")
    print("=" * 50)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º SFM —Ä–µ–µ—Å—Ç—Ä
    sfm_path = "data/sfm/function_registry.json"
    
    if not os.path.exists(sfm_path):
        print(f"‚ùå –§–∞–π–ª {sfm_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    with open(sfm_path, 'r', encoding='utf-8') as f:
        data = json.load(f)
    
    functions = data.get('functions', {})
    total_functions = len(functions)
    
    print(f"üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π –≤ —Ä–µ–µ—Å—Ç—Ä–µ: {total_functions}")
    print()
    
    # –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç—É—Å–æ–≤
    statuses = Counter()
    critical_statuses = Counter()
    security_levels = Counter()
    function_types = Counter()
    
    active_functions = []
    sleeping_functions = []
    critical_functions = []
    ml_functions = []
    
    for func_id, func_data in functions.items():
        status = func_data.get('status', 'unknown')
        is_critical = func_data.get('is_critical', False)
        security_level = func_data.get('security_level', 'unknown')
        function_type = func_data.get('function_type', 'unknown')
        
        statuses[status] += 1
        security_levels[security_level] += 1
        function_types[function_type] += 1
        
        if is_critical:
            critical_statuses[status] += 1
            critical_functions.append(func_id)
        
        if status == 'active':
            active_functions.append(func_id)
        elif status == 'sleeping':
            sleeping_functions.append(func_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º ML —Ñ—É–Ω–∫—Ü–∏–∏
        if 'ml' in func_id.lower() or 'ai' in func_id.lower() or 'model' in func_id.lower():
            ml_functions.append(func_id)
    
    print("üìà –°–¢–ê–¢–£–°–´ –§–£–ù–ö–¶–ò–ô:")
    for status, count in statuses.items():
        percentage = (count / total_functions) * 100
        print(f"   {status.upper()}: {count} ({percentage:.1f}%)")
    
    print()
    print("üîí –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –§–£–ù–ö–¶–ò–ò:")
    for status, count in critical_statuses.items():
        percentage = (count / len(critical_functions)) * 100 if critical_functions else 0
        print(f"   {status.upper()}: {count} ({percentage:.1f}%)")
    
    print()
    print("üõ°Ô∏è –£–†–û–í–ù–ò –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò:")
    for level, count in security_levels.items():
        percentage = (count / total_functions) * 100
        print(f"   {level.upper()}: {count} ({percentage:.1f}%)")
    
    print()
    print("‚öôÔ∏è –¢–ò–ü–´ –§–£–ù–ö–¶–ò–ô:")
    for ftype, count in function_types.items():
        percentage = (count / total_functions) * 100
        print(f"   {ftype.upper()}: {count} ({percentage:.1f}%)")
    
    print()
    print("ü§ñ ML –§–£–ù–ö–¶–ò–ò:")
    print(f"   –ù–∞–π–¥–µ–Ω–æ ML —Ñ—É–Ω–∫—Ü–∏–π: {len(ml_functions)}")
    for ml_func in ml_functions[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
        func_data = functions.get(ml_func, {})
        status = func_data.get('status', 'unknown')
        print(f"   - {ml_func}: {status}")
    
    print()
    print("üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –§–£–ù–ö–¶–ò–ò –í –°–ü–Ø–©–ï–ú –†–ï–ñ–ò–ú–ï:")
    critical_sleeping = [f for f in critical_functions if functions.get(f, {}).get('status') == 'sleeping']
    print(f"   –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –≤ —Å–ø—è—â–µ–º —Ä–µ–∂–∏–º–µ: {len(critical_sleeping)}")
    
    if critical_sleeping:
        print("   ‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï! –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Å–ø—è—â–µ–º —Ä–µ–∂–∏–º–µ:")
        for func in critical_sleeping[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            print(f"   - {func}")
    
    print()
    print("‚úÖ –ê–ö–¢–ò–í–ù–´–ï –§–£–ù–ö–¶–ò–ò:")
    print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π: {len(active_functions)}")
    for func in active_functions[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
        func_data = functions.get(func, {})
        is_critical = func_data.get('is_critical', False)
        critical_mark = " üî¥" if is_critical else ""
        print(f"   - {func}{critical_mark}")
    
    print()
    print("üò¥ –°–ü–Ø–©–ò–ï –§–£–ù–ö–¶–ò–ò:")
    print(f"   –°–ø—è—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π: {len(sleeping_functions)}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    report = {
        "timestamp": datetime.now().isoformat(),
        "total_functions": total_functions,
        "statuses": dict(statuses),
        "critical_statuses": dict(critical_statuses),
        "security_levels": dict(security_levels),
        "function_types": dict(function_types),
        "active_functions": active_functions,
        "sleeping_functions": sleeping_functions,
        "critical_functions": critical_functions,
        "ml_functions": ml_functions,
        "critical_sleeping": critical_sleeping
    }
    
    report_path = f"logs/real_status_check_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
    os.makedirs("logs", exist_ok=True)
    
    with open(report_path, 'w', encoding='utf-8') as f:
        json.dump(report, f, ensure_ascii=False, indent=2)
    
    print(f"üìã –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_path}")
    
    return report

if __name__ == "__main__":
    check_real_status()