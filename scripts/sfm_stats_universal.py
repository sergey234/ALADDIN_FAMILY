#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
SFM Universal Statistics - –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ SFM
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Ö–æ–¥–∏—Ç –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç SFM —Ä–µ–µ—Å—Ç—Ä
"""

import json
import os
import sys
from datetime import datetime
from pathlib import Path

class SFMUniversalStats:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ SFM"""
    
    def __init__(self):
        self.registry_path = None
        self.registry_data = None
        self.find_registry()
    
    def find_registry(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ SFM —Ä–µ–µ—Å—Ç—Ä–∞"""
        possible_paths = [
            'data/sfm/function_registry.json',
            '../data/sfm/function_registry.json',
            '../../data/sfm/function_registry.json',
            'ALADDIN_NEW/data/sfm/function_registry.json'
        ]
        
        for path in possible_paths:
            if os.path.exists(path):
                self.registry_path = path
                print(f"‚úÖ SFM —Ä–µ–µ—Å—Ç—Ä –Ω–∞–π–¥–µ–Ω: {path}")
                break
        
        if not self.registry_path:
            print("‚ùå SFM —Ä–µ–µ—Å—Ç—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            print("–ü–æ–∏—Å–∫ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –º–µ—Å—Ç–∞—Ö:")
            for path in possible_paths:
                print(f"  - {path}")
            sys.exit(1)
    
    def load_registry(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ SFM —Ä–µ–µ—Å—Ç—Ä–∞"""
        try:
            with open(self.registry_path, 'r', encoding='utf-8') as f:
                self.registry_data = json.load(f)
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–µ—Å—Ç—Ä–∞: {e}")
            return False
    
    def get_basic_stats(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        if not self.registry_data:
            return None
        
        functions = self.registry_data.get('functions', {})
        
        stats = {
            'total_functions': len(functions),
            'active_functions': 0,
            'sleeping_functions': 0,
            'critical_functions': 0,
            'functions_by_type': {},
            'functions_by_status': {},
            'last_updated': self.registry_data.get('last_updated', 'unknown')
        }
        
        for func_id, func_data in functions.items():
            if isinstance(func_data, dict):
                status = func_data.get('status', 'unknown')
                func_type = func_data.get('function_type', 'unknown')
                is_critical = func_data.get('is_critical', False)
                
                # –ü–æ–¥—Å—á–µ—Ç –ø–æ —Å—Ç–∞—Ç—É—Å—É
                if status == 'active':
                    stats['active_functions'] += 1
                elif status == 'sleeping':
                    stats['sleeping_functions'] += 1
                
                # –ü–æ–¥—Å—á–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö
                if is_critical:
                    stats['critical_functions'] += 1
                
                # –ü–æ–¥—Å—á–µ—Ç –ø–æ —Ç–∏–ø–∞–º
                stats['functions_by_type'][func_type] = stats['functions_by_type'].get(func_type, 0) + 1
                stats['functions_by_status'][status] = stats['functions_by_status'].get(status, 0) + 1
        
        return stats
    
    def get_detailed_analysis(self):
        """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ SFM"""
        if not self.registry_data:
            return None
        
        functions = self.registry_data.get('functions', {})
        
        analysis = {
            'total_functions': len(functions),
            'valid_functions': 0,
            'invalid_functions': 0,
            'functions_with_errors': [],
            'quality_metrics': {
                'a_plus_functions': 0,
                'functions_with_tests': 0,
                'functions_with_docs': 0
            },
            'security_analysis': {
                'high_security': 0,
                'critical_functions': 0,
                'auto_enable_functions': 0
            }
        }
        
        for func_id, func_data in functions.items():
            if isinstance(func_data, dict) and 'function_id' in func_data:
                analysis['valid_functions'] += 1
                
                # –ö–∞—á–µ—Å—Ç–≤–æ
                quality_grade = func_data.get('quality_grade', '')
                if quality_grade == 'A+':
                    analysis['quality_metrics']['a_plus_functions'] += 1
                
                test_coverage = func_data.get('test_coverage', '')
                if test_coverage and test_coverage != '0%':
                    analysis['quality_metrics']['functions_with_tests'] += 1
                
                if 'description' in func_data and func_data['description']:
                    analysis['quality_metrics']['functions_with_docs'] += 1
                
                # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
                security_level = func_data.get('security_level', '')
                if security_level in ['high', 'critical']:
                    analysis['security_analysis']['high_security'] += 1
                
                if func_data.get('is_critical', False):
                    analysis['security_analysis']['critical_functions'] += 1
                
                if func_data.get('auto_enable', False):
                    analysis['security_analysis']['auto_enable_functions'] += 1
            else:
                analysis['invalid_functions'] += 1
                analysis['functions_with_errors'].append(func_id)
        
        return analysis
    
    def print_basic_stats(self):
        """–í—ã–≤–æ–¥ –±–∞–∑–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        stats = self.get_basic_stats()
        if not stats:
            return
        
        print("üìä –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê SFM")
        print("=" * 50)
        print(f"–†–µ–µ—Å—Ç—Ä: {self.registry_path}")
        print(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ: {stats['last_updated']}")
        print()
        
        print("–ü–∞—Ä–∞–º–µ—Ç—Ä                –ó–Ω–∞—á–µ–Ω–∏–µ        –ü—Ä–æ—Ü–µ–Ω—Ç")
        print("-" * 50)
        print(f"{'–í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π':<25} {stats['total_functions']:<15} 100.0%")
        
        if stats['total_functions'] > 0:
            active_pct = (stats['active_functions'] / stats['total_functions']) * 100
            sleeping_pct = (stats['sleeping_functions'] / stats['total_functions']) * 100
            critical_pct = (stats['critical_functions'] / stats['total_functions']) * 100
            
            print(f"{'–ê–∫—Ç–∏–≤–Ω—ã–µ':<25} {stats['active_functions']:<15} {active_pct:.1f}%")
            print(f"{'–°–ø—è—â–∏–µ':<25} {stats['sleeping_functions']:<15} {sleeping_pct:.1f}%")
            print(f"{'–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ':<25} {stats['critical_functions']:<15} {critical_pct:.1f}%")
        
        print()
        print("–§—É–Ω–∫—Ü–∏–∏ –ø–æ —Ç–∏–ø–∞–º:")
        for func_type, count in sorted(stats['functions_by_type'].items()):
            pct = (count / stats['total_functions']) * 100 if stats['total_functions'] > 0 else 0
            print(f"  {func_type:<20} {count:<10} {pct:.1f}%")
    
    def print_detailed_analysis(self):
        """–í—ã–≤–æ–¥ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        analysis = self.get_detailed_analysis()
        if not analysis:
            return
        
        print("\nüîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó SFM")
        print("=" * 50)
        
        print(f"–í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π: {analysis['total_functions']}")
        print(f"–í–∞–ª–∏–¥–Ω—ã—Ö: {analysis['valid_functions']}")
        print(f"–ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö: {analysis['invalid_functions']}")
        
        if analysis['functions_with_errors']:
            print(f"–§—É–Ω–∫—Ü–∏–∏ —Å –æ—à–∏–±–∫–∞–º–∏: {', '.join(analysis['functions_with_errors'])}")
        
        print("\n–ö–∞—á–µ—Å—Ç–≤–æ:")
        print(f"  A+ —Ñ—É–Ω–∫—Ü–∏–∏: {analysis['quality_metrics']['a_plus_functions']}")
        print(f"  –° —Ç–µ—Å—Ç–∞–º–∏: {analysis['quality_metrics']['functions_with_tests']}")
        print(f"  –° –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π: {analysis['quality_metrics']['functions_with_docs']}")
        
        print("\n–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:")
        print(f"  –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å: {analysis['security_analysis']['high_security']}")
        print(f"  –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ: {analysis['security_analysis']['critical_functions']}")
        print(f"  –ê–≤—Ç–æ–≤–∫–ª—é—á–µ–Ω–∏–µ: {analysis['security_analysis']['auto_enable_functions']}")
    
    def save_report(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞"""
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        report_file = f"data/sfm/universal_stats_report_{timestamp}.json"
        
        report = {
            'timestamp': datetime.now().isoformat(),
            'registry_path': self.registry_path,
            'basic_stats': self.get_basic_stats(),
            'detailed_analysis': self.get_detailed_analysis()
        }
        
        try:
            os.makedirs(os.path.dirname(report_file), exist_ok=True)
            with open(report_file, 'w', encoding='utf-8') as f:
                json.dump(report, f, indent=2, ensure_ascii=False)
            print(f"\n‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ SFM UNIVERSAL STATISTICS")
    print("=" * 50)
    
    sfm = SFMUniversalStats()
    
    if not sfm.load_registry():
        sys.exit(1)
    
    sfm.print_basic_stats()
    sfm.print_detailed_analysis()
    sfm.save_report()
    
    print("\nüéâ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == "__main__":
    main()