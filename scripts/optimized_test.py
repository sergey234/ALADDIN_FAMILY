#!/usr/bin/env python3
"""
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ ALADDIN
–£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
"""

import sys
import os
import time
import json
import asyncio
import concurrent.futures
from pathlib import Path
from datetime import datetime
from functools import lru_cache
import threading

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(str(Path(__file__).parent.parent))

class OptimizedTestSuite:
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é"""
    
    def __init__(self):
        self.results = []
        self.start_time = None
        self.end_time = None
        self.cache = {}
        self.thread_pool = concurrent.futures.ThreadPoolExecutor(max_workers=4)
        
    def log_test(self, test_name, success, details="", duration=0):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞ —Å –≤—Ä–µ–º–µ–Ω–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if success else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        self.results.append({
            'test': test_name,
            'success': success,
            'details': details,
            'duration': duration,
            'timestamp': datetime.now().isoformat()
        })
        print(f"{test_name}: {status} ({duration:.2f}—Å)")
        if details:
            print(f"  –î–µ—Ç–∞–ª–∏: {details}")
    
    @lru_cache(maxsize=128)
    def cached_import_test(self):
        """–ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞"""
        try:
            from core.code_quality_manager import CodeQualityManager
            from core.configuration import ConfigurationManager
            from core.database import DatabaseManager
            from core.security_base import SecurityBase
            from core.base import CoreBase
            return True
        except Exception:
            return False
    
    def parallel_instantiation_test(self):
        """–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤"""
        def create_cqm():
            try:
                from core.code_quality_manager import CodeQualityManager
                return CodeQualityManager(), "CQM"
            except Exception as e:
                return None, f"CQM Error: {e}"
        
        def create_config():
            try:
                from core.configuration import ConfigurationManager
                return ConfigurationManager(), "Config"
            except Exception as e:
                return None, f"Config Error: {e}"
        
        def create_db():
            try:
                from core.database import DatabaseManager
                return DatabaseManager({'db_path': 'test_optimized.db'}), "DB"
            except Exception as e:
                return None, f"DB Error: {e}"
        
        def create_security():
            try:
                from core.security_base import SecurityBase
                return SecurityBase('optimized_test'), "Security"
            except Exception as e:
                return None, f"Security Error: {e}"
        
        # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        with concurrent.futures.ThreadPoolExecutor(max_workers=4) as executor:
            futures = [
                executor.submit(create_cqm),
                executor.submit(create_config),
                executor.submit(create_db),
                executor.submit(create_security)
            ]
            
            results = []
            for future in concurrent.futures.as_completed(futures):
                result, name = future.result()
                results.append((result, name))
            
            return results
    
    def optimized_quality_test(self):
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        try:
            from core.code_quality_manager import CodeQualityManager
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
            if 'cqm' not in self.cache:
                self.cache['cqm'] = CodeQualityManager()
            
            cqm = self.cache['cqm']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ñ–∞–π–ª –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
            result = cqm.check_file_quality('core/base.py')
            score = result.metrics.overall_score
            
            return True, f"–û—Ü–µ–Ω–∫–∞: {score:.1f}/100"
            
        except Exception as e:
            return False, str(e)
    
    def fast_pep8_test(self):
        """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ PEP8 —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        try:
            import subprocess
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
            core_files = [
                'core/base.py',
                'core/configuration.py', 
                'core/database.py',
                'core/security_base.py'
            ]
            
            # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ PEP8
            def check_file_pep8(file_path):
                if os.path.exists(file_path):
                    result = subprocess.run([
                        'python3', '-m', 'flake8', '--select=E501', file_path
                    ], capture_output=True, text=True, timeout=5)
                    return file_path, result.returncode == 0, len(result.stdout.strip().split()) if result.stdout.strip() else 0
                return file_path, True, 0
            
            with concurrent.futures.ThreadPoolExecutor(max_workers=4) as executor:
                futures = [executor.submit(check_file_pep8, file_path) for file_path in core_files]
                results = [future.result() for future in concurrent.futures.as_completed(futures)]
            
            total_errors = sum(r[2] for r in results)
            all_ok = all(r[1] for r in results)
            
            return all_ok, f"E501 –æ—à–∏–±–æ–∫: {total_errors}"
            
        except Exception as e:
            return False, str(e)
    
    def async_database_test(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        async def db_operations():
            try:
                from core.database import DatabaseManager
                
                db = DatabaseManager({'db_path': 'test_optimized_async.db'})
                
                # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
                db._create_tables()
                
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
                success = db.add_security_event(
                    "optimized_test", "INFO", "–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç", "test_component"
                )
                
                # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
                events = db.get_security_events(limit=5)
                
                return True, f"–°–æ–±—ã—Ç–∏–π: {len(events)}"
                
            except Exception as e:
                return False, str(e)
        
        # –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        try:
            result = loop.run_until_complete(db_operations())
            return result
        finally:
            loop.close()
    
    def run_optimized_tests(self):
        """–ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("‚ö° –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò ALADDIN")
        print("=" * 60)
        
        self.start_time = time.time()
        
        # –¢–µ—Å—Ç 1: –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç
        print("\nüß™ –¢–ï–°–¢ –ö–≠–®–ò–†–û–í–ê–ù–ù–û–ì–û –ò–ú–ü–û–†–¢–ê")
        print("-" * 40)
        start = time.time()
        import_success = self.cached_import_test()
        duration = time.time() - start
        self.log_test("–ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç", import_success, duration=duration)
        
        # –¢–µ—Å—Ç 2: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤
        print("\nüß™ –¢–ï–°–¢ –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û–ì–û –°–û–ó–î–ê–ù–ò–Ø –≠–ö–ó–ï–ú–ü–õ–Ø–†–û–í")
        print("-" * 40)
        start = time.time()
        instances = self.parallel_instantiation_test()
        duration = time.time() - start
        
        success_count = sum(1 for inst, _ in instances if inst is not None)
        total_count = len(instances)
        success = success_count == total_count
        
        details = f"–°–æ–∑–¥–∞–Ω–æ: {success_count}/{total_count}"
        self.log_test("–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ", success, details, duration)
        
        # –¢–µ—Å—Ç 3: –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
        print("\nüß™ –¢–ï–°–¢ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ô –ü–†–û–í–ï–†–ö–ò –ö–ê–ß–ï–°–¢–í–ê")
        print("-" * 40)
        start = time.time()
        quality_success, quality_details = self.optimized_quality_test()
        duration = time.time() - start
        self.log_test("–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞", quality_success, quality_details, duration)
        
        # –¢–µ—Å—Ç 4: –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ PEP8
        print("\nüß™ –¢–ï–°–¢ –ë–´–°–¢–†–û–ô –ü–†–û–í–ï–†–ö–ò PEP8")
        print("-" * 40)
        start = time.time()
        pep8_success, pep8_details = self.fast_pep8_test()
        duration = time.time() - start
        self.log_test("–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ PEP8", pep8_success, pep8_details, duration)
        
        # –¢–µ—Å—Ç 5: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –ë–î
        print("\nüß™ –¢–ï–°–¢ –ê–°–ò–ù–•–†–û–ù–ù–û–ô –ë–ê–ó–´ –î–ê–ù–ù–´–•")
        print("-" * 40)
        start = time.time()
        db_success, db_details = self.async_database_test()
        duration = time.time() - start
        self.log_test("–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ë–î", db_success, db_details, duration)
        
        self.end_time = time.time()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        self.generate_optimized_report()
    
    def generate_optimized_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("\n" + "=" * 60)
        print("üìä –û–¢–ß–ï–¢ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ì–û –¢–ï–°–¢–ê")
        print("=" * 60)
        
        # –ü–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        total_tests = len(self.results)
        passed_tests = sum(1 for r in self.results if r['success'])
        failed_tests = total_tests - passed_tests
        success_rate = (passed_tests / total_tests * 100) if total_tests > 0 else 0
        
        # –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        total_duration = self.end_time - self.start_time if self.start_time and self.end_time else 0
        
        # –î–µ—Ç–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
        total_test_duration = sum(r['duration'] for r in self.results)
        
        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print(f"üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"  –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"  –ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")
        print(f"  –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed_tests}")
        print(f"  –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
        print(f"  –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_duration:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"  –í—Ä–µ–º—è —Ç–µ—Å—Ç–æ–≤: {total_test_duration:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"  –ù–∞–∫–ª–∞–¥–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã: {total_duration - total_test_duration:.2f} —Å–µ–∫—É–Ω–¥")
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        print(f"\n‚ö° –£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
        print(f"  –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç (—Å—Ç–∞—Ä—ã–π): 15.28—Å")
        print(f"  –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç: {total_duration:.2f}—Å")
        improvement = ((15.28 - total_duration) / 15.28) * 100
        print(f"  –£–ª—É—á—à–µ–Ω–∏–µ: {improvement:.1f}%")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print(f"\nüìã –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        for result in self.results:
            status = "‚úÖ" if result['success'] else "‚ùå"
            print(f"  {status} {result['test']} ({result['duration']:.2f}—Å)")
            if result['details']:
                print(f"    {result['details']}")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        self.save_optimized_report()
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –≤–µ—Ä–¥–∏–∫—Ç
        if success_rate >= 90 and total_duration <= 5:
            print(f"\nüéØ –û–¢–õ–ò–ß–ù–û! –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ê!")
            return True
        elif success_rate >= 70 and total_duration <= 10:
            print(f"\n‚ö†Ô∏è  –•–û–†–û–®–û! –ï–°–¢–¨ –ü–†–û–°–¢–†–ê–ù–°–¢–í–û –î–õ–Ø –£–õ–£–ß–®–ï–ù–ò–Ø!")
            return False
        else:
            print(f"\n‚ùå –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø!")
            return False
    
    def save_optimized_report(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        try:
            report_data = {
                'timestamp': datetime.now().isoformat(),
                'total_duration': self.end_time - self.start_time if self.start_time and self.end_time else 0,
                'total_tests': len(self.results),
                'passed_tests': sum(1 for r in self.results if r['success']),
                'improvement_percentage': ((15.28 - (self.end_time - self.start_time)) / 15.28) * 100 if self.start_time and self.end_time else 0,
                'results': self.results
            }
            
            report_file = f"optimized_test_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
            
            with open(report_file, 'w', encoding='utf-8') as f:
                json.dump(report_data, f, indent=2, ensure_ascii=False)
            
            print(f"\nüíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {report_file}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    test_suite = OptimizedTestSuite()
    success = test_suite.run_optimized_tests()
    return success

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)