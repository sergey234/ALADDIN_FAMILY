#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–æ–∫ —Ä–∞–∑–Ω—ã–º–∏ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞–º–∏
"""

import subprocess
import sys
from pathlib import Path

def check_with_different_linters():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ –ª–∏–Ω—Ç–µ—Ä–∞–º–∏"""
    test_file = "security/ai_agents/family_communication_hub_children_protection_expansion.py"
    
    print("üîç –ü–†–û–í–ï–†–ö–ê –û–®–ò–ë–û–ö –†–ê–ó–ù–´–ú–ò –ê–ù–ê–õ–ò–ó–ê–¢–û–†–ê–ú–ò")
    print("=" * 60)
    
    # 1. Flake8 —Å —Ä–∞–∑–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    print("\n1Ô∏è‚É£ FLAKE8 - –ë–ê–ó–û–í–´–ï –ù–ê–°–¢–†–û–ô–ö–ò:")
    try:
        result = subprocess.run([
            "python3", "-m", "flake8", test_file
        ], capture_output=True, text=True, timeout=30)
        
        if result.returncode == 0:
            print("‚úÖ –û—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        else:
            print(f"‚ùå –ù–∞–π–¥–µ–Ω–æ –æ—à–∏–±–æ–∫: {len(result.stdout.splitlines())}")
            print("–ü–µ—Ä–≤—ã–µ 3 –æ—à–∏–±–∫–∏:")
            for line in result.stdout.splitlines()[:3]:
                print(f"  ‚Ä¢ {line}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # 2. Flake8 —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ 120 —Å–∏–º–≤–æ–ª–æ–≤
    print("\n2Ô∏è‚É£ FLAKE8 - 120 –°–ò–ú–í–û–õ–û–í:")
    try:
        result = subprocess.run([
            "python3", "-m", "flake8", "--max-line-length=120", test_file
        ], capture_output=True, text=True, timeout=30)
        
        if result.returncode == 0:
            print("‚úÖ –û—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        else:
            print(f"‚ùå –ù–∞–π–¥–µ–Ω–æ –æ—à–∏–±–æ–∫: {len(result.stdout.splitlines())}")
            print("–ü–µ—Ä–≤—ã–µ 3 –æ—à–∏–±–∫–∏:")
            for line in result.stdout.splitlines()[:3]:
                print(f"  ‚Ä¢ {line}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # 3. Pylint
    print("\n3Ô∏è‚É£ PYLINT:")
    try:
        result = subprocess.run([
            "python3", "-m", "pylint", "--disable=import-error", test_file
        ], capture_output=True, text=True, timeout=30)
        
        if result.returncode == 0:
            print("‚úÖ –û—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        else:
            lines = result.stdout.splitlines()
            error_lines = [line for line in lines if ':' in line and any(x in line for x in ['E', 'W', 'C', 'R'])]
            print(f"‚ùå –ù–∞–π–¥–µ–Ω–æ –æ—à–∏–±–æ–∫: {len(error_lines)}")
            print("–ü–µ—Ä–≤—ã–µ 3 –æ—à–∏–±–∫–∏:")
            for line in error_lines[:3]:
                print(f"  ‚Ä¢ {line}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # 4. Black (–ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    print("\n4Ô∏è‚É£ BLACK - –ü–†–û–í–ï–†–ö–ê –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø:")
    try:
        result = subprocess.run([
            "python3", "-m", "black", "--check", test_file
        ], capture_output=True, text=True, timeout=30)
        
        if result.returncode == 0:
            print("‚úÖ –§–∞–π–ª –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        else:
            print("‚ùå –§–∞–π–ª –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏")
            print("Black –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è:")
            print(result.stdout)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # 5. Autopep8 (–ø—Ä–æ–≤–µ—Ä–∫–∞)
    print("\n5Ô∏è‚É£ AUTOPEP8 - –ü–†–û–í–ï–†–ö–ê:")
    try:
        result = subprocess.run([
            "python3", "-m", "autopep8", "--diff", test_file
        ], capture_output=True, text=True, timeout=30)
        
        if result.stdout.strip():
            print("‚ùå Autopep8 –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è:")
            print(result.stdout[:500] + "..." if len(result.stdout) > 500 else result.stdout)
        else:
            print("‚úÖ –§–∞–π–ª –Ω–µ –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å—Ç—Ä–æ–∫
    print("\n6Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–ù–´–• –°–¢–†–û–ö:")
    try:
        with open(test_file, 'r', encoding='utf-8') as f:
            lines = f.readlines()
        
        print("–°—Ç—Ä–æ–∫–∏ 12-25:")
        for i, line in enumerate(lines[11:25], 12):
            print(f"  {i:2d}: {line.rstrip()}")
        
        print("\n–ü—Ä–æ–±–ª–µ–º–∞: –ò–º–ø–æ—Ä—Ç—ã –ø–æ—Å–ª–µ sys.path.append()")
        print("–†–µ—à–µ–Ω–∏–µ: –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤—Å–µ –∏–º–ø–æ—Ä—Ç—ã –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")

if __name__ == "__main__":
    check_with_different_linters()