#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ALADDIN Security System - –ê–ª–≥–æ—Ä–∏—Ç–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π –≤ SFM
–ü–æ–ª–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –≤ Safe Function Manager

–ê–≤—Ç–æ—Ä: ALADDIN Security Team
–í–µ—Ä—Å–∏—è: 1.0
–î–∞—Ç–∞: 2025-09-11
"""

import os
import sys
import json
import importlib
import inspect
import ast
from typing import Dict, List, Tuple, Optional, Any
from pathlib import Path
from enum import Enum

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append('/Users/sergejhlystov/ALADDIN_NEW')

class SafeFunctionIntegrationAlgorithm:
    """–ê–ª–≥–æ—Ä–∏—Ç–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π –≤ SFM"""
    
    def __init__(self):
        self.project_root = Path('/Users/sergejhlystov/ALADDIN_NEW')
        self.sfm_path = self.project_root / 'security' / 'safe_function_manager.py'
        self.data_dir = self.project_root / 'data' / 'sfm'
        self.function_registry = self.data_dir / 'function_registry.json'
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'total_checked': 0,
            'successful_integrations': 0,
            'failed_integrations': 0,
            'warnings': 0,
            'errors': []
        }
    
    def run_full_integration_algorithm(self, function_path: str) -> Dict[str, Any]:
        """
        –ü–æ–ª–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
        
        Args:
            function_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å —Ñ—É–Ω–∫—Ü–∏–µ–π
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        """
        print(f"üöÄ –ó–ê–ü–£–°–ö –ê–õ–ì–û–†–ò–¢–ú–ê –ò–ù–¢–ï–ì–†–ê–¶–ò–ò: {function_path}")
        print("=" * 80)
        
        results = {
            'function_path': function_path,
            'steps_completed': [],
            'errors': [],
            'warnings': [],
            'success': False
        }
        
        try:
            # –≠–¢–ê–ü 1: –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê
            print("\nüìã –≠–¢–ê–ü 1: –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê")
            step1_result = self._step1_preliminary_check(function_path)
            results['steps_completed'].append(('step1', step1_result))
            if not step1_result['success']:
                results['errors'].extend(step1_result['errors'])
                return results
            
            # –≠–¢–ê–ü 2: –ê–ù–ê–õ–ò–ó –ê–†–•–ò–¢–ï–ö–¢–£–†–´ –ò –î–ò–†–ï–ö–¢–û–†–ò–ô
            print("\nüìã –≠–¢–ê–ü 2: –ê–ù–ê–õ–ò–ó –ê–†–•–ò–¢–ï–ö–¢–£–†–´ –ò –î–ò–†–ï–ö–¢–û–†–ò–ô")
            step2_result = self._step2_architecture_analysis(function_path)
            results['steps_completed'].append(('step2', step2_result))
            if not step2_result['success']:
                results['errors'].extend(step2_result['errors'])
                return results
            
            # –≠–¢–ê–ü 3: –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô –ò –ò–ú–ü–û–†–¢–û–í
            print("\nüìã –≠–¢–ê–ü 3: –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô –ò –ò–ú–ü–û–†–¢–û–í")
            step3_result = self._step3_dependencies_check(function_path)
            results['steps_completed'].append(('step3', step3_result))
            if not step3_result['success']:
                results['errors'].extend(step3_result['errors'])
                return results
            
            # –≠–¢–ê–ü 4: –í–ê–õ–ò–î–ê–¶–ò–Ø –ö–û–î–ê –ò –°–ò–ù–¢–ê–ö–°–ò–°–ê
            print("\nüìã –≠–¢–ê–ü 4: –í–ê–õ–ò–î–ê–¶–ò–Ø –ö–û–î–ê –ò –°–ò–ù–¢–ê–ö–°–ò–°–ê")
            step4_result = self._step4_code_validation(function_path)
            results['steps_completed'].append(('step4', step4_result))
            if not step4_result['success']:
                results['errors'].extend(step4_result['errors'])
                return results
            
            # –≠–¢–ê–ü 5: –ê–ù–ê–õ–ò–ó –ö–õ–ê–°–°–û–í –ò –ú–ï–¢–û–î–û–í
            print("\nüìã –≠–¢–ê–ü 5: –ê–ù–ê–õ–ò–ó –ö–õ–ê–°–°–û–í –ò –ú–ï–¢–û–î–û–í")
            step5_result = self._step5_class_analysis(function_path)
            results['steps_completed'].append(('step5', step5_result))
            if not step5_result['success']:
                results['errors'].extend(step5_result['errors'])
                return results
            
            # –≠–¢–ê–ü 6: –ü–û–î–ì–û–¢–û–í–ö–ê –ö –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò
            print("\nüìã –≠–¢–ê–ü 6: –ü–û–î–ì–û–¢–û–í–ö–ê –ö –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò")
            step6_result = self._step6_registration_preparation(function_path, step5_result['classes'])
            results['steps_completed'].append(('step6', step6_result))
            if not step6_result['success']:
                results['errors'].extend(step6_result['errors'])
                return results
            
            # –≠–¢–ê–ü 7: –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –í SFM
            print("\nüìã –≠–¢–ê–ü 7: –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –í SFM")
            step7_result = self._step7_safe_registration(step6_result['registration_data'])
            results['steps_completed'].append(('step7', step7_result))
            if not step7_result['success']:
                results['errors'].extend(step7_result['errors'])
                return results
            
            # –≠–¢–ê–ü 8: –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï
            print("\nüìã –≠–¢–ê–ü 8: –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï")
            step8_result = self._step8_integration_testing(step7_result['registered_functions'])
            results['steps_completed'].append(('step8', step8_result))
            if not step8_result['success']:
                results['errors'].extend(step8_result['errors'])
                return results
            
            # –≠–¢–ê–ü 9: –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø
            print("\nüìã –≠–¢–ê–ü 9: –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø")
            step9_result = self._step9_final_validation()
            results['steps_completed'].append(('step9', step9_result))
            if not step9_result['success']:
                results['errors'].extend(step9_result['errors'])
                return results
            
            # –£–°–ü–ï–®–ù–û–ï –ó–ê–í–ï–†–®–ï–ù–ò–ï
            results['success'] = True
            self.stats['successful_integrations'] += 1
            print(f"\nüéâ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–ê!")
            
        except Exception as e:
            error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∞–ª–≥–æ—Ä–∏—Ç–º–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}"
            results['errors'].append(error_msg)
            self.stats['failed_integrations'] += 1
            print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {error_msg}")
        
        finally:
            self.stats['total_checked'] += 1
            results['stats'] = self.stats.copy()
        
        return results
    
    def _step1_preliminary_check(self, function_path: str) -> Dict[str, Any]:
        """–≠–¢–ê–ü 1: –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞"""
        print("  üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞...")
        
        if not os.path.exists(function_path):
            return {
                'success': False,
                'errors': [f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {function_path}"]
            }
        
        print("  üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞...")
        if not function_path.endswith('.py'):
            return {
                'success': False,
                'errors': [f"–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .py: {function_path}"]
            }
        
        print("  üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞...")
        file_size = os.path.getsize(function_path)
        if file_size == 0:
            return {
                'success': False,
                'errors': [f"–§–∞–π–ª –ø—É—Å—Ç–æ–π: {function_path}"]
            }
        
        if file_size > 1024 * 1024:  # 1MB
            return {
                'success': False,
                'errors': [f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {file_size} –±–∞–π—Ç"]
            }
        
        print("  ‚úÖ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞")
        return {
            'success': True,
            'file_size': file_size,
            'errors': []
        }
    
    def _step2_architecture_analysis(self, function_path: str) -> Dict[str, Any]:
        """–≠–¢–ê–ü 2: –ê–Ω–∞–ª–∏–∑ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
        print("  üîç –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...")
        
        path_obj = Path(function_path)
        relative_path = path_obj.relative_to(self.project_root)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
        valid_directories = [
            'security/ai_agents/',
            'security/ai_bots/',
            'security/managers/',
            'security/microservices/',
            'security/orchestration/',
            'security/scaling/',
            'core/',
            'services/',
            'ai/',
            'bots/'
        ]
        
        is_valid_location = any(str(relative_path).startswith(d) for d in valid_directories)
        
        if not is_valid_location:
            return {
                'success': False,
                'errors': [f"–§–∞–π–ª —Ä–∞–∑–º–µ—â–µ–Ω –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {relative_path}"]
            }
        
        print("  üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ...")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –ø–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        component_type = self._determine_component_type(str(relative_path))
        
        print(f"  ‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫: {component_type}")
        return {
            'success': True,
            'relative_path': str(relative_path),
            'component_type': component_type,
            'errors': []
        }
    
    def _step3_dependencies_check(self, function_path: str) -> Dict[str, Any]:
        """–≠–¢–ê–ü 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏ –∏–º–ø–æ—Ä—Ç–æ–≤"""
        print("  üîç –ê–Ω–∞–ª–∏–∑ –∏–º–ø–æ—Ä—Ç–æ–≤...")
        
        try:
            with open(function_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –ü–∞—Ä—Å–∏–º AST –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–º–ø–æ—Ä—Ç–æ–≤
            tree = ast.parse(content)
            imports = []
            import_errors = []
            
            for node in ast.walk(tree):
                if isinstance(node, ast.Import):
                    for alias in node.names:
                        imports.append({
                            'type': 'import',
                            'module': alias.name,
                            'alias': alias.asname,
                            'line': node.lineno
                        })
                elif isinstance(node, ast.ImportFrom):
                    module = node.module or ''
                    for alias in node.names:
                        imports.append({
                            'type': 'from_import',
                            'module': module,
                            'name': alias.name,
                            'alias': alias.asname,
                            'line': node.lineno
                        })
            
            print(f"  üìä –ù–∞–π–¥–µ–Ω–æ –∏–º–ø–æ—Ä—Ç–æ–≤: {len(imports)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –∏–º–ø–æ—Ä—Ç
            for imp in imports:
                if not self._validate_import(imp):
                    import_errors.append(f"–ü—Ä–æ–±–ª–µ–º–Ω—ã–π –∏–º–ø–æ—Ä—Ç: {imp}")
            
            if import_errors:
                return {
                    'success': False,
                    'errors': import_errors
                }
            
            print("  ‚úÖ –í—Å–µ –∏–º–ø–æ—Ä—Ç—ã –≤–∞–ª–∏–¥–Ω—ã")
            return {
                'success': True,
                'imports': imports,
                'errors': []
            }
            
        except SyntaxError as e:
            return {
                'success': False,
                'errors': [f"–°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∏–º–ø–æ—Ä—Ç–∞—Ö: {e}"]
            }
    
    def _step4_code_validation(self, function_path: str) -> Dict[str, Any]:
        """–≠–¢–ê–ü 4: –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–¥–∞ –∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞"""
        print("  üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ Python...")
        
        try:
            with open(function_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
            ast.parse(content)
            print("  ‚úÖ –°–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É
            if not content.startswith('# -*- coding: utf-8 -*-'):
                print("  ‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–µ–∫–ª–∞—Ä–∞—Ü–∏—è –∫–æ–¥–∏—Ä–æ–≤–∫–∏")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º docstring
            tree = ast.parse(content)
            has_docstring = False
            if (tree.body and isinstance(tree.body[0], ast.Expr) 
                and isinstance(tree.body[0].value, ast.Constant)):
                has_docstring = True
            
            if not has_docstring:
                print("  ‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç docstring –º–æ–¥—É–ª—è")
            
            return {
                'success': True,
                'has_encoding': content.startswith('# -*- coding: utf-8 -*-'),
                'has_docstring': has_docstring,
                'errors': []
            }
            
        except SyntaxError as e:
            return {
                'success': False,
                'errors': [f"–°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}"]
            }
    
    def _step5_class_analysis(self, function_path: str) -> Dict[str, Any]:
        """–≠–¢–ê–ü 5: –ê–Ω–∞–ª–∏–∑ –∫–ª–∞—Å—Å–æ–≤ –∏ –º–µ—Ç–æ–¥–æ–≤"""
        print("  üîç –ê–Ω–∞–ª–∏–∑ –∫–ª–∞—Å—Å–æ–≤ –∏ –º–µ—Ç–æ–¥–æ–≤...")
        
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å
            module_name = self._get_module_name(function_path)
            spec = importlib.util.spec_from_file_location(module_name, function_path)
            module = importlib.util.module_from_spec(spec)
            spec.loader.exec_module(module)
            
            classes = []
            functions = []
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–æ–¥—É–ª—è
            for name, obj in inspect.getmembers(module):
                if inspect.isclass(obj) and not name.startswith('_'):
                    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã, –∏—Å–∫–ª—é—á–∞–µ–º Enum, dataclass, –±–∞–∑–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã
                    if (not issubclass(obj, Enum) and 
                        not hasattr(obj, '__dataclass_fields__') and
                        name not in ['ComponentStatus', 'SecurityBase', 'datetime'] and
                        not name.startswith('Optimization') or name == 'PerformanceOptimizationAgent'):
                        classes.append({
                            'name': name,
                            'class': obj,
                            'methods': [method for method in dir(obj) if not method.startswith('_')],
                            'docstring': obj.__doc__
                        })
                elif inspect.isfunction(obj) and not name.startswith('_'):
                    functions.append({
                        'name': name,
                        'function': obj,
                        'docstring': obj.__doc__
                    })
            
            print(f"  üìä –ù–∞–π–¥–µ–Ω–æ –∫–ª–∞—Å—Å–æ–≤: {len(classes)}")
            print(f"  üìä –ù–∞–π–¥–µ–Ω–æ —Ñ—É–Ω–∫—Ü–∏–π: {len(functions)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
            for cls in classes:
                required_methods = ['__init__', 'execute', 'run', 'perform']
                has_required = any(any(method.startswith(req) for method in cls['methods']) 
                                 for req in required_methods)
                
                if not has_required:
                    print(f"  ‚ö†Ô∏è  –ö–ª–∞—Å—Å {cls['name']} –Ω–µ –∏–º–µ–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤")
            
            return {
                'success': True,
                'classes': classes,
                'functions': functions,
                'errors': []
            }
            
        except Exception as e:
            return {
                'success': False,
                'errors': [f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–ª–∞—Å—Å–æ–≤: {e}"]
            }
    
    def _step6_registration_preparation(self, function_path: str, classes: List[Dict]) -> Dict[str, Any]:
        """–≠–¢–ê–ü 6: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        print("  üîç –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...")
        
        registration_data = []
        
        for cls in classes:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ—É–Ω–∫—Ü–∏–∏
            function_type = self._determine_function_type(cls['name'])
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            security_level = self._determine_security_level(cls['name'], function_type)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å
            is_critical = self._is_critical_component(cls['name'], function_type)
            
            registration_data.append({
                'function_id': cls['name'].lower().replace('agent', '_agent').replace('bot', '_bot').replace('manager', '_manager'),
                'name': cls['name'],
                'description': cls['docstring'] or f"–ö–æ–º–ø–æ–Ω–µ–Ω—Ç {cls['name']}",
                'function_type': function_type,
                'security_level': security_level,
                'is_critical': is_critical,
                'auto_enable': is_critical,  # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                'class': cls['class']
            })
        
        print(f"  üìä –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {len(registration_data)} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
        
        return {
            'success': True,
            'registration_data': registration_data,
            'errors': []
        }
    
    def _step7_safe_registration(self, registration_data: List[Dict]) -> Dict[str, Any]:
        """–≠–¢–ê–ü 7: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ SFM"""
        print("  üîç –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤ SFM...")
        
        try:
            from security.safe_function_manager import SafeFunctionManager
            
            sfm = SafeFunctionManager()
            registered_functions = []
            
            for data in registration_data:
                try:
                    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
                    try:
                        # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
                        instance = data['class']()
                    except TypeError as e:
                        if "missing" in str(e) and "required" in str(e):
                            # –ï—Å–ª–∏ –Ω—É–∂–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã, –ø—Ä–æ–±—É–µ–º —Å –∏–º–µ–Ω–µ–º –∫–ª–∞—Å—Å–∞
                            try:
                                instance = data['class'](data['name'])
                            except TypeError:
                                # –ï—Å–ª–∏ –∏ —ç—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, —Å–æ–∑–¥–∞–µ–º —Å –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π
                                instance = data['class']("")
                        else:
                            raise e
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
                    handler = self._create_handler(instance, data['class'])
                    
                    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é
                    success = sfm.register_function(
                        function_id=data['function_id'],
                        name=data['name'],
                        description=data['description'],
                        function_type=data['function_type'],
                        security_level=data['security_level'],
                        is_critical=data['is_critical'],
                        auto_enable=data['auto_enable'],
                        handler=handler
                    )
                    
                    if success:
                        registered_functions.append(data['function_id'])
                        print(f"    ‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {data['name']}")
                    else:
                        print(f"    ‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {data['name']}")
                        
                except Exception as e:
                    print(f"    ‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ {data['name']}: {e}")
            
            print(f"  üìä –£—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {len(registered_functions)}/{len(registration_data)}")
            
            return {
                'success': len(registered_functions) > 0,
                'registered_functions': registered_functions,
                'errors': []
            }
            
        except Exception as e:
            return {
                'success': False,
                'errors': [f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ SFM: {e}"]
            }
    
    def _step8_integration_testing(self, registered_functions: List[str]) -> Dict[str, Any]:
        """–≠–¢–ê–ü 8: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        print("  üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π...")
        
        try:
            from security.safe_function_manager import SafeFunctionManager
            
            sfm = SafeFunctionManager()
            test_results = []
            
            for func_id in registered_functions:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
                    if func_id in sfm.functions:
                        func = sfm.functions[func_id]
                        print(f"    ‚úÖ –§—É–Ω–∫—Ü–∏—è {func_id} –Ω–∞–π–¥–µ–Ω–∞ –≤ SFM")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
                        if func_id in sfm.function_handlers:
                            handler = sfm.function_handlers[func_id]
                            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
                            try:
                                result = handler()
                                test_results.append({
                                    'function_id': func_id,
                                    'status': 'success',
                                    'result': result
                                })
                                print(f"    ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ {func_id} —Ä–∞–±–æ—Ç–∞–µ—Ç")
                            except Exception as e:
                                test_results.append({
                                    'function_id': func_id,
                                    'status': 'error',
                                    'error': str(e)
                                })
                                print(f"    ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ {func_id}: {e}")
                        else:
                            print(f"    ‚ö†Ô∏è  –û–±—Ä–∞–±–æ—Ç—á–∏–∫ {func_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    else:
                        print(f"    ‚ùå –§—É–Ω–∫—Ü–∏—è {func_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ SFM")
                        
                except Exception as e:
                    print(f"    ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è {func_id}: {e}")
            
            successful_tests = len([r for r in test_results if r['status'] == 'success'])
            
            return {
                'success': successful_tests > 0,
                'test_results': test_results,
                'successful_tests': successful_tests,
                'total_tests': len(test_results),
                'errors': []
            }
            
        except Exception as e:
            return {
                'success': False,
                'errors': [f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}"]
            }
    
    def _step9_final_validation(self) -> Dict[str, Any]:
        """–≠–¢–ê–ü 9: –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è"""
        print("  üîç –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã...")
        
        try:
            from security.safe_function_manager import SafeFunctionManager
            
            sfm = SafeFunctionManager()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ SFM
            total_functions = len(sfm.functions)
            total_handlers = len(sfm.function_handlers)
            
            print(f"  üìä –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π –≤ SFM: {total_functions}")
            print(f"  üìä –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤ SFM: {total_handlers}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
            if os.path.exists(self.function_registry):
                with open(self.function_registry, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                
                saved_functions = len(data.get('functions', {}))
                saved_handlers = len(data.get('handlers', {}))
                
                print(f"  üìä –§—É–Ω–∫—Ü–∏–π –≤ —Ñ–∞–π–ª–µ: {saved_functions}")
                print(f"  üìä –û–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤ —Ñ–∞–π–ª–µ: {saved_handlers}")
                
                if saved_functions == total_functions and saved_handlers == total_handlers:
                    print("  ‚úÖ –ü–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                else:
                    print("  ‚ö†Ô∏è  –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª–µ –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏")
            
            return {
                'success': True,
                'total_functions': total_functions,
                'total_handlers': total_handlers,
                'errors': []
            }
            
        except Exception as e:
            return {
                'success': False,
                'errors': [f"–û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}"]
            }
    
    # –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´
    
    def _determine_component_type(self, relative_path: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –ø–æ –ø—É—Ç–∏"""
        if 'ai_agents' in relative_path:
            return 'ai_agent'
        elif 'ai_bots' in relative_path or 'bots' in relative_path:
            return 'ai_bot'
        elif 'managers' in relative_path:
            return 'manager'
        elif 'microservices' in relative_path:
            return 'microservice'
        elif 'orchestration' in relative_path:
            return 'orchestrator'
        elif 'scaling' in relative_path:
            return 'scaling_engine'
        elif 'core' in relative_path:
            return 'core'
        elif 'services' in relative_path:
            return 'service'
        else:
            return 'unknown'
    
    def _determine_function_type(self, class_name: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ –∏–º–µ–Ω–∏ –∫–ª–∞—Å—Å–∞"""
        if 'Agent' in class_name:
            return 'ai_agent'
        elif 'Bot' in class_name:
            return 'ai_bot'
        elif 'Manager' in class_name:
            return 'manager'
        else:
            return 'component'
    
    def _determine_security_level(self, class_name: str, function_type: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        if 'Security' in class_name or 'Auth' in class_name:
            return 'high'
        elif 'Manager' in class_name or 'Core' in class_name:
            return 'high'
        elif 'Agent' in class_name or 'Bot' in class_name:
            return 'medium'
        else:
            return 'low'
    
    def _is_critical_component(self, class_name: str, function_type: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
        critical_keywords = ['Security', 'Auth', 'Core', 'Manager', 'Base']
        return any(keyword in class_name for keyword in critical_keywords)
    
    def _validate_import(self, imp: Dict) -> bool:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∏–º–ø–æ—Ä—Ç"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ Python
        standard_libs = [
            'os', 'sys', 'json', 'time', 'datetime', 'threading', 'typing',
            'hashlib', 'enum', 'collections', 'itertools', 'functools',
            'pathlib', 'uuid', 'base64', 'urllib', 'http', 'socket',
            'subprocess', 'shutil', 'tempfile', 'logging', 'warnings',
            're', 'math', 'random', 'statistics', 'decimal', 'fractions',
            'io', 'pickle', 'csv', 'xml', 'html', 'urllib.parse',
            'asyncio', 'concurrent', 'concurrent.futures', 'multiprocessing', 'queue',
            'sqlite3', 'configparser', 'argparse', 'getopt',
            'glob', 'fnmatch', 'linecache', 'fileinput', 'codecs',
            'dataclasses', 'psutil'
        ]
        
        # –î–ª—è from_import –ø—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥—É–ª—å, –¥–ª—è import –ø—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥—É–ª—å
        module_name = imp.get('module', '')
        if module_name in standard_libs:
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –º–æ–¥—É–ª–∏
        internal_modules = ['core.', 'security.', 'ai.', 'services.']
        if any(module_name.startswith(mod) for mod in internal_modules):
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–Ω–µ—à–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
        external_libs = [
            'requests', 'numpy', 'pandas', 'flask', 'fastapi', 'psutil',
            'redis', 'sqlalchemy', 'uvicorn', 'httpx', 'prometheus_client',
            'abc', 'fastapi.middleware.cors', 'fastapi.middleware.trustedhost',
            'sqlalchemy.ext.declarative', 'sqlalchemy.orm'
        ]
        if module_name in external_libs:
            return True
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –ø—É—Å—Ç—ã—Ö –º–æ–¥—É–ª–µ–π (from . import)
        if not module_name and imp.get('type') == 'from_import':
            return True
        
        return False
    
    def _get_module_name(self, file_path: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–º—è –º–æ–¥—É–ª—è –∏–∑ –ø—É—Ç–∏"""
        return Path(file_path).stem
    
    def _create_handler(self, instance: Any, class_obj: Any) -> callable:
        """–°–æ–∑–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∞"""
        # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –º–µ—Ç–æ–¥
        methods = ['execute', 'run', 'perform', 'start', 'process']
        
        for method_name in methods:
            if hasattr(instance, method_name):
                method = getattr(instance, method_name)
                if callable(method):
                    return method
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –º–µ—Ç–æ–¥, —Å–æ–∑–¥–∞–µ–º –æ–±–µ—Ä—Ç–∫—É
        def wrapper(*args, **kwargs):
            return {
                'status': 'success',
                'class': class_obj.__name__,
                'message': f'–ö–æ–º–ø–æ–Ω–µ–Ω—Ç {class_obj.__name__} –≤—ã–ø–æ–ª–Ω–µ–Ω'
            }
        
        return wrapper


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞"""
    algorithm = SafeFunctionIntegrationAlgorithm()
    
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    test_file = '/Users/sergejhlystov/ALADDIN_NEW/security/ai_agents/mobile_security_agent.py'
    
    if os.path.exists(test_file):
        print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ê–õ–ì–û–†–ò–¢–ú–ê –ò–ù–¢–ï–ì–†–ê–¶–ò–ò")
        print("=" * 50)
        
        result = algorithm.run_full_integration_algorithm(test_file)
        
        print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò:")
        print(f"  –£—Å–ø–µ—Ö: {'‚úÖ –î–ê' if result['success'] else '‚ùå –ù–ï–¢'}")
        print(f"  –≠—Ç–∞–ø–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {len(result['steps_completed'])}")
        print(f"  –û—à–∏–±–æ–∫: {len(result['errors'])}")
        print(f"  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {len(result['warnings'])}")
        
        if result['errors']:
            print("\n‚ùå –û–®–ò–ë–ö–ò:")
            for error in result['errors']:
                print(f"  - {error}")
    else:
        print(f"‚ùå –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {test_file}")


if __name__ == "__main__":
    main()