#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Log Rotation Manager - –ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–æ—Ç–∞—Ü–∏–∏ –ª–æ–≥–æ–≤
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∏ —Ä–æ—Ç–∞—Ü–∏—è –ª–æ–≥-—Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
"""

import os
import gzip
import shutil
import time
from datetime import datetime, timedelta
from pathlib import Path
from typing import List, Dict, Any


class LogRotationManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–æ—Ç–∞—Ü–∏–∏ –ª–æ–≥–æ–≤"""
    
    def __init__(self, logs_dir: str = "logs", max_size_mb: int = 10, keep_days: int = 7):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ä–æ—Ç–∞—Ü–∏–∏ –ª–æ–≥–æ–≤
        
        Args:
            logs_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –ª–æ–≥–∞–º–∏
            max_size_mb: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ª–æ–≥-—Ñ–∞–π–ª–∞ –≤ MB
            keep_days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π —Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–æ–≤
        """
        self.logs_dir = Path(logs_dir)
        self.max_size_bytes = max_size_mb * 1024 * 1024
        self.keep_days = keep_days
        self.rotation_stats = {
            "files_rotated": 0,
            "files_compressed": 0,
            "files_deleted": 0,
            "space_freed_mb": 0
        }
    
    def rotate_logs(self) -> Dict[str, Any]:
        """–†–æ—Ç–∞—Ü–∏—è –≤—Å–µ—Ö –ª–æ–≥-—Ñ–∞–π–ª–æ–≤"""
        print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Ä–æ—Ç–∞—Ü–∏—é –ª–æ–≥–æ–≤...")
        
        if not self.logs_dir.exists():
            print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {self.logs_dir} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return self.rotation_stats
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ª–æ–≥-—Ñ–∞–π–ª—ã
        log_files = list(self.logs_dir.glob("*.log"))
        
        for log_file in log_files:
            try:
                self._rotate_single_log(log_file)
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–æ—Ç–∞—Ü–∏–∏ {log_file}: {e}")
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∞—Ä—Ö–∏–≤—ã
        self._cleanup_old_archives()
        
        print(f"‚úÖ –†–æ—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {self.rotation_stats}")
        return self.rotation_stats
    
    def _rotate_single_log(self, log_file: Path):
        """–†–æ—Ç–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ –ª–æ–≥-—Ñ–∞–π–ª–∞"""
        file_size = log_file.stat().st_size
        
        if file_size < self.max_size_bytes:
            return  # –§–∞–π–ª –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç
        
        print(f"üîÑ –†–æ—Ç–∏—Ä—É–µ–º {log_file.name} ({file_size / 1024 / 1024:.1f} MB)")
        
        # –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤–Ω–æ–µ –∏–º—è —Å timestamp
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        archive_name = f"{log_file.stem}_{timestamp}.log.gz"
        archive_path = log_file.parent / archive_name
        
        # –°–∂–∏–º–∞–µ–º —Ñ–∞–π–ª
        with open(log_file, 'rb') as f_in:
            with gzip.open(archive_path, 'wb') as f_out:
                shutil.copyfileobj(f_in, f_out)
        
        # –û—á–∏—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
        with open(log_file, 'w') as f:
            f.write("")
        
        self.rotation_stats["files_rotated"] += 1
        self.rotation_stats["files_compressed"] += 1
        self.rotation_stats["space_freed_mb"] += file_size / 1024 / 1024
        
        print(f"‚úÖ {log_file.name} —Å–∂–∞—Ç –≤ {archive_name}")
    
    def _cleanup_old_archives(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∞—Ä—Ö–∏–≤–æ–≤"""
        cutoff_date = datetime.now() - timedelta(days=self.keep_days)
        
        for archive in self.logs_dir.glob("*.log.gz"):
            try:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
                name_parts = archive.stem.split('_')
                if len(name_parts) >= 2:
                    date_str = f"{name_parts[-2]}_{name_parts[-1]}"
                    archive_date = datetime.strptime(date_str, "%Y%m%d_%H%M%S")
                    
                    if archive_date < cutoff_date:
                        file_size = archive.stat().st_size
                        archive.unlink()
                        self.rotation_stats["files_deleted"] += 1
                        self.rotation_stats["space_freed_mb"] += file_size / 1024 / 1024
                        print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –∞—Ä—Ö–∏–≤: {archive.name}")
                        
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {archive}: {e}")
    
    def get_log_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ª–æ–≥–æ–≤"""
        if not self.logs_dir.exists():
            return {"error": "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ª–æ–≥–æ–≤ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"}
        
        stats = {
            "total_files": 0,
            "total_size_mb": 0,
            "largest_file": None,
            "largest_size_mb": 0,
            "files_over_limit": 0
        }
        
        for log_file in self.logs_dir.glob("*.log"):
            file_size = log_file.stat().st_size
            size_mb = file_size / 1024 / 1024
            
            stats["total_files"] += 1
            stats["total_size_mb"] += size_mb
            
            if size_mb > stats["largest_size_mb"]:
                stats["largest_file"] = log_file.name
                stats["largest_size_mb"] = size_mb
            
            if file_size > self.max_size_bytes:
                stats["files_over_limit"] += 1
        
        return stats


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ä–æ—Ç–∞—Ü–∏–∏ –ª–æ–≥–æ–≤ ALADDIN")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Ä–æ—Ç–∞—Ü–∏–∏
    rotation_manager = LogRotationManager(
        logs_dir="logs",
        max_size_mb=10,  # 10 MB –ª–∏–º–∏—Ç
        keep_days=7      # –•—Ä–∞–Ω–∏–º 7 –¥–Ω–µ–π
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print("üìä –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–æ–≥–æ–≤:")
    stats = rotation_manager.get_log_statistics()
    for key, value in stats.items():
        print(f"   {key}: {value}")
    
    print("\n" + "=" * 50)
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–æ—Ç–∞—Ü–∏—é
    rotation_result = rotation_manager.rotate_logs()
    
    print("\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–æ—Ç–∞—Ü–∏–∏:")
    for key, value in rotation_result.items():
        print(f"   {key}: {value}")
    
    print(f"\nüíæ –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ –º–µ—Å—Ç–∞: {rotation_result['space_freed_mb']:.1f} MB")
    print("‚úÖ –†–æ—Ç–∞—Ü–∏—è –ª–æ–≥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")


if __name__ == "__main__":
    main()