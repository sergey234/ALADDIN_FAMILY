#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ MonitorManager —Å SafeFunctionManager
"""

import asyncio
import uuid
from datetime import datetime
import sys
import os

sys.path.insert(0, '/Users/sergejhlystov/ALADDIN_NEW')

from security.safe_function_manager import SafeFunctionManager, SecurityLevel
from security.managers.monitor_manager import (
    MonitorManager, MonitorConfig, AlertRule, AlertSeverity
)


async def run_integration_test():
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ MonitorManager —Å SFM"""
    print("üîß –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ MonitorManager —Å SafeFunctionManager")
    print("============================================================")
    
    # –°–æ–∑–¥–∞–µ–º SFM
    sfm = SafeFunctionManager(name="ALADDIN")
    print("‚úÖ SafeFunctionManager —Å–æ–∑–¥–∞–Ω!")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º MonitorManager –≤ SFM
    registration_success = sfm.register_function(
        function_id="monitor_manager",
        name="MonitorManager",
        description="–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã",
        function_type="ai_agent",
        security_level=SecurityLevel.HIGH,
        is_critical=True,
        auto_enable=False
    )
    print(f"‚úÖ MonitorManager –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! –†–µ–∑—É–ª—å—Ç–∞—Ç: {registration_success}")
    
    # –í–∫–ª—é—á–∞–µ–º MonitorManager
    enable_success = sfm.enable_function("monitor_manager")
    print(f"‚úÖ MonitorManager –≤–∫–ª—é—á–µ–Ω! –†–µ–∑—É–ª—å—Ç–∞—Ç: {enable_success}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å
    manager_status = sfm.get_function_status("monitor_manager")
    print(f"\nüìà –°—Ç–∞—Ç—É—Å MonitorManager: {manager_status['status']}")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    config = MonitorConfig(
        collection_interval=30,
        retention_days=30,
        anomaly_detection_enabled=True,
        alerting_enabled=True,
        cpu_threshold=80.0,
        memory_threshold=85.0,
        disk_threshold=90.0
    )
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä MonitorManager
    manager = MonitorManager(config)
    print("‚úÖ MonitorManager —Å–æ–∑–¥–∞–Ω!")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
    init_success = await manager.initialize()
    print(f"‚úÖ MonitorManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω! –†–µ–∑—É–ª—å—Ç–∞—Ç: {init_success}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
    system_status = await manager.get_system_status()
    print(f"‚úÖ –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –ø–æ–ª—É—á–µ–Ω! –†–µ–∑—É–ª—å—Ç–∞—Ç: {system_status}")
    print(f"   ‚Ä¢ –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: {system_status.get('overall_status', 'N/A')}")
    print(f"   ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤: {system_status.get('active_alerts_count', 0)}")
    print(f"   ‚Ä¢ –ú–µ—Ç—Ä–∏–∫ –≤ –∏—Å—Ç–æ—Ä–∏–∏: {system_status.get('metrics_count', 0)}")
    print(f"   ‚Ä¢ –°–±–æ—Ä—â–∏–∫–æ–≤: {system_status.get('collectors_count', 0)}")
    
    # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
    metrics = await manager.get_metrics(limit=5)
    print(f"‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã! –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {len(metrics)}")
    for metric in metrics:
        print(f"   ‚Ä¢ {metric.name}: {metric.value} {metric.unit} ({metric.status.value})")
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–ª–µ—Ä—Ç—ã
    alerts = await manager.get_alerts()
    print(f"‚úÖ –ê–ª–µ—Ä—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã! –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {len(alerts)}")
    for alert in alerts:
        print(f"   ‚Ä¢ {alert.rule_name}: {alert.message}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –ø—Ä–∞–≤–∏–ª–æ –∞–ª–µ—Ä—Ç–∞
    new_rule = AlertRule(
        name="test_high_cpu",
        metric_name="cpu_usage",
        threshold=50.0,
        operator=">",
        severity=AlertSeverity.MEDIUM,
        enabled=True,
        cooldown=60
    )
    
    await manager.add_alert_rule(new_rule)
    print("‚úÖ –ù–æ–≤–æ–µ –ø—Ä–∞–≤–∏–ª–æ –∞–ª–µ—Ä—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if alerts:
        first_alert = alerts[0]
        resolve_success = await manager.resolve_alert(first_alert.id)
        print(f"‚úÖ –ê–ª–µ—Ä—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω! –†–µ–∑—É–ª—å—Ç–∞—Ç: {resolve_success}")
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É
    await manager.shutdown()
    print("‚úÖ MonitorManager –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É!")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ SFM
    sfm_test_result = sfm.test_function("monitor_manager")
    print(f"‚úÖ –¢–µ—Å—Ç SFM –∑–∞–≤–µ—Ä—à–µ–Ω! –†–µ–∑—É–ª—å—Ç–∞—Ç: {sfm_test_result}")
    
    # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ SFM
    sfm_metrics = sfm.get_performance_metrics()
    print("‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ SFM –ø–æ–ª—É—á–µ–Ω—ã!")
    print(f"   ‚Ä¢ –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π: {sfm_metrics['current_metrics']['total_functions']}")
    print(f"   ‚Ä¢ –í–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π: {sfm_metrics['current_metrics']['enabled_functions']}")
    print(f"   ‚Ä¢ –°–ø—è—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π: {sfm_metrics['current_metrics']['sleeping_functions']}")
    print(f"   ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π: {sfm_metrics['current_metrics']['active_executions']}")
    
    print("\n============================================================")
    print("üéâ –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ MonitorManager –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    
    if registration_success and enable_success and init_success:
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        return True
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å.")
        return False


if __name__ == "__main__":
    asyncio.run(run_integration_test())