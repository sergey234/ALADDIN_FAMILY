#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —ç–∫—Å–ø–æ—Ä—Ç–∞
–ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã

–ê–≤—Ç–æ—Ä: ALADDIN Security Team
–í–µ—Ä—Å–∏—è: 1.0
–î–∞—Ç–∞: 2025-09-08
"""

import requests
import json
import time
import os
import sys
from datetime import datetime, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from export_manager import ExportManager
from elasticsearch_simulator import ElasticsearchSimulator, LogLevel, LogEntry

EXPORT_API_URL = "http://localhost:5002/api/export"


def test_export_manager():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ExportManager"""
    print("üì§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Export Manager")
    print("=" * 40)
    
    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —ç–∫—Å–ø–æ—Ä—Ç–∞
    export_manager = ExportManager()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ª–æ–≥–∏
    test_logs = [
        LogEntry(
            timestamp=datetime.now() - timedelta(minutes=5),
            level=LogLevel.INFO,
            component="TestComponent",
            message="–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞",
            metadata={"test": True, "value": 123, "category": "test"},
            log_id="test_001"
        ),
        LogEntry(
            timestamp=datetime.now() - timedelta(minutes=3),
            level=LogLevel.WARNING,
            component="AnotherComponent",
            message="–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏",
            metadata={"warning_type": "test", "severity": "medium", "user_id": "user_123"},
            log_id="test_002"
        ),
        LogEntry(
            timestamp=datetime.now() - timedelta(minutes=1),
            level=LogLevel.ERROR,
            component="ErrorComponent",
            message="–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞",
            metadata={"error_code": "EXP_001", "retry_count": 3, "timestamp": "2025-09-08"},
            log_id="test_003"
        )
    ]
    
    try:
        print("1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ CSV...")
        csv_file = export_manager.export_logs_csv(test_logs)
        print(f"   ‚úÖ CSV —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {os.path.basename(csv_file)}")
        
        print("2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ JSON...")
        json_file = export_manager.export_logs_json(test_logs)
        print(f"   ‚úÖ JSON —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {os.path.basename(json_file)}")
        
        print("3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ PDF...")
        try:
            pdf_file = export_manager.export_logs_pdf(test_logs)
            print(f"   ‚úÖ PDF —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {os.path.basename(pdf_file)}")
        except ImportError:
            print("   ‚ö†Ô∏è PDF —ç–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–ø—É—â–µ–Ω (ReportLab –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)")
        
        print("4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
        stats = {
            "total_logs": len(test_logs),
            "level_distribution": {"INFO": 1, "WARNING": 1, "ERROR": 1},
            "component_distribution": {"TestComponent": 1, "AnotherComponent": 1, "ErrorComponent": 1},
            "export_timestamp": datetime.now().isoformat()
        }
        stats_file = export_manager.export_system_stats(stats)
        print(f"   ‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞: {os.path.basename(stats_file)}")
        
        print("5. –°–ø–∏—Å–æ–∫ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:")
        files = export_manager.get_export_list()
        for file_info in files:
            size_kb = file_info['size'] / 1024
            print(f"   üìÑ {file_info['filename']} ({size_kb:.1f} KB)")
        
        print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Export Manager –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Export Manager: {e}")


def test_export_api():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Export API"""
    print("\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Export API")
    print("=" * 40)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API
    try:
        response = requests.get(f"{EXPORT_API_URL}/health", timeout=5)
        if response.status_code == 200:
            data = response.json()
            print(f"1. ‚úÖ API –∑–¥–æ—Ä–æ–≤: {data['status']}")
            print(f"   üìä –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: {', '.join(data['formats'])}")
        else:
            print(f"1. ‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
            return
    except Exception as e:
        print(f"1. ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}")
        return
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ CSV
    print("\n2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ CSV...")
    try:
        params = {
            'q': 'test',
            'limit': '10'
        }
        response = requests.get(f"{EXPORT_API_URL}/logs/csv", params=params, timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            if data.get('success'):
                print(f"   ‚úÖ CSV —ç–∫—Å–ø–æ—Ä—Ç —É—Å–ø–µ—à–µ–Ω: {data['filename']}")
                print(f"   üìä –õ–æ–≥–æ–≤ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {data['total_logs']}")
                print(f"   üîó URL —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {data['download_url']}")
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {data.get('error')}")
        else:
            print(f"   ‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ CSV: {e}")
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ JSON
    print("\n3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ JSON...")
    try:
        params = {
            'q': 'error',
            'level': 'ERROR',
            'limit': '5'
        }
        response = requests.get(f"{EXPORT_API_URL}/logs/json", params=params, timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            if data.get('success'):
                print(f"   ‚úÖ JSON —ç–∫—Å–ø–æ—Ä—Ç —É—Å–ø–µ—à–µ–Ω: {data['filename']}")
                print(f"   üìä –õ–æ–≥–æ–≤ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {data['total_logs']}")
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {data.get('error')}")
        else:
            print(f"   ‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ JSON: {e}")
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ PDF
    print("\n4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ PDF...")
    try:
        params = {
            'q': 'security',
            'limit': '5'
        }
        response = requests.get(f"{EXPORT_API_URL}/logs/pdf", params=params, timeout=15)
        
        if response.status_code == 200:
            data = response.json()
            if data.get('success'):
                print(f"   ‚úÖ PDF —ç–∫—Å–ø–æ—Ä—Ç —É—Å–ø–µ—à–µ–Ω: {data['filename']}")
                print(f"   üìä –õ–æ–≥–æ–≤ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {data['total_logs']}")
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {data.get('error')}")
        else:
            print(f"   ‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ PDF: {e}")
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    print("\n5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
    try:
        response = requests.get(f"{EXPORT_API_URL}/stats", timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            if data.get('success'):
                print(f"   ‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞: {data['filename']}")
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {data.get('error')}")
        else:
            print(f"   ‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
    print("\n6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤...")
    try:
        response = requests.get(f"{EXPORT_API_URL}/files", timeout=5)
        
        if response.status_code == 200:
            data = response.json()
            if data.get('success'):
                files = data.get('files', [])
                print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(files)}")
                for file_info in files[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                    size_kb = file_info['size'] / 1024
                    print(f"      üìÑ {file_info['filename']} ({size_kb:.1f} KB)")
                if len(files) > 3:
                    print(f"      ... –∏ –µ—â–µ {len(files) - 3} —Ñ–∞–π–ª–æ–≤")
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞: {data.get('error')}")
        else:
            print(f"   ‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: {e}")


def test_export_performance():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞"""
    print("\n‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
    test_sizes = [10, 50, 100, 500]
    
    for size in test_sizes:
        print(f"\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ {size} –ª–æ–≥–æ–≤:")
        
        # CSV —ç–∫—Å–ø–æ—Ä—Ç
        start_time = time.time()
        try:
            params = {'limit': str(size)}
            response = requests.get(f"{EXPORT_API_URL}/logs/csv", params=params, timeout=30)
            csv_time = time.time() - start_time
            
            if response.status_code == 200:
                data = response.json()
                if data.get('success'):
                    print(f"   üìä CSV: {csv_time:.2f}s ({data['total_logs']} –ª–æ–≥–æ–≤)")
                else:
                    print(f"   ‚ùå CSV: –û—à–∏–±–∫–∞ - {data.get('error')}")
            else:
                print(f"   ‚ùå CSV: HTTP {response.status_code}")
        except Exception as e:
            print(f"   ‚ùå CSV: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ - {e}")
        
        # JSON —ç–∫—Å–ø–æ—Ä—Ç
        start_time = time.time()
        try:
            params = {'limit': str(size)}
            response = requests.get(f"{EXPORT_API_URL}/logs/json", params=params, timeout=30)
            json_time = time.time() - start_time
            
            if response.status_code == 200:
                data = response.json()
                if data.get('success'):
                    print(f"   üìÑ JSON: {json_time:.2f}s ({data['total_logs']} –ª–æ–≥–æ–≤)")
                else:
                    print(f"   ‚ùå JSON: –û—à–∏–±–∫–∞ - {data.get('error')}")
            else:
                print(f"   ‚ùå JSON: HTTP {response.status_code}")
        except Exception as e:
            print(f"   ‚ùå JSON: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ - {e}")


if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã —ç–∫—Å–ø–æ—Ä—Ç–∞")
    print("=" * 60)
    
    # 1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ExportManager
    test_export_manager()
    
    # 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Export API
    test_export_api()
    
    # 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    test_export_performance()
    
    print("\n" + "=" * 60)
    print("üéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –≠–ö–°–ü–û–†–¢–ê –ó–ê–í–ï–†–®–ï–ù–û!")
    print("\nüí° –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞:")
    print("   ‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV —Ñ–æ—Ä–º–∞—Ç (–¥–ª—è Excel)")
    print("   ‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –≤ JSON —Ñ–æ—Ä–º–∞—Ç (—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)")
    print("   ‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –≤ PDF —Ñ–æ—Ä–º–∞—Ç (–¥–ª—è –ø–µ—á–∞—Ç–∏)")
    print("   ‚úÖ –≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã")
    print("   ‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ —ç–∫—Å–ø–æ—Ä—Ç–æ–º")
    print("   ‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏")
    print("   ‚úÖ API –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –¥—Ä—É–≥–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏")
    print("\nüåê –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —ç–∫—Å–ø–æ—Ä—Ç–∞: http://localhost:5002")
    print("üìä –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ API: http://localhost:5002/api/export/health")