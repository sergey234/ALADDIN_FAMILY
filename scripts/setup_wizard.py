#!/usr/bin/env python3
"""
–ú–∞—Å—Ç–µ—Ä –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ ALADDIN
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∑–∞ 5 –º–∏–Ω—É—Ç
"""

import sys
import os
import time
import json
from pathlib import Path
from datetime import datetime
import getpass

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(str(Path(__file__).parent.parent))


class SetupWizard:
    """–ú–∞—Å—Ç–µ—Ä –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã ALADDIN"""

    def __init__(self):
        self.config = {}
        self.setup_type = None
        self.start_time = time.time()

    def print_header(self):
        """–í—ã–≤–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –º–∞—Å—Ç–µ—Ä–∞"""
        print("=" * 60)
        print("üßô‚Äç‚ôÇÔ∏è –ú–ê–°–¢–ï–† –ù–ê–°–¢–†–û–ô–ö–ò –°–ò–°–¢–ï–ú–´ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò ALADDIN")
        print("=" * 60)
        print("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –≠—Ç–æ—Ç –º–∞—Å—Ç–µ—Ä –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å")
        print("—Å–∏—Å—Ç–µ–º—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ ALADDIN –∑–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.")
        print("=" * 60)
        print()

    def select_setup_type(self):
        """–í—ã–±–æ—Ä —Ç–∏–ø–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏"""
        print("üìã –í–´–ë–ï–†–ò–¢–ï –¢–ò–ü –£–°–¢–ê–ù–û–í–ö–ò:")
        print()
        print("1. üè† –î–æ–º–∞—à–Ω—è—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å")
        print("   - –°–µ–º–µ–π–Ω–∞—è –∑–∞—â–∏—Ç–∞")
        print("   - –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å")
        print("   - –ó–∞—â–∏—Ç–∞ –¥–µ—Ç–µ–π")
        print()
        print("2. üè¢ –ë–∏–∑–Ω–µ—Å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å")
        print("   - –ó–∞—â–∏—Ç–∞ –º–∞–ª–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞")
        print("   - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
        print("   - –°–µ—Ç–µ–≤–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å")
        print()
        print("3. üè≠ –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å")
        print("   - Enterprise —Ñ—É–Ω–∫—Ü–∏–∏")
        print("   - Zero Trust –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞")
        print("   - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å SIEM")
        print()

        while True:
            try:
                choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-3): ").strip()
                if choice in ['1', '2', '3']:
                    self.setup_type = int(choice)
                    break
                else:
                    print("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 1, 2 –∏–ª–∏ 3")
            except KeyboardInterrupt:
                print("\n\n‚ùå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                sys.exit(1)

        print(f"\n‚úÖ –í—ã–±—Ä–∞–Ω —Ç–∏–ø —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {self.get_setup_type_name()}")
        print()

    def get_setup_type_name(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∏–ø–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏"""
        types = {
            1: "–î–æ–º–∞—à–Ω—è—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å",
            2: "–ë–∏–∑–Ω–µ—Å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å",
            3: "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å"
        }
        return types.get(self.setup_type, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

    def configure_basic_settings(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        print("‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ê –ë–ê–ó–û–í–´–• –ü–ê–†–ê–ú–ï–¢–†–û–í:")
        print()

        # –£—Ä–æ–≤–µ–Ω—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        print("üõ°Ô∏è –£—Ä–æ–≤–µ–Ω—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:")
        print("1. –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)")
        print("2. –í—ã—Å–æ–∫–∏–π")
        print("3. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π")

        while True:
            try:
                security_choice = input("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å (1-3): ").strip()
                if security_choice in ['1', '2', '3']:
                    security_levels = {
                        '1': 'standard',
                        '2': 'high',
                        '3': 'maximum'
                    }
                    self.config['security_level'] = (
                        security_levels[security_choice]
                    )
                    break
                else:
                    print("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 1, 2 –∏–ª–∏ 3")
            except KeyboardInterrupt:
                print("\n\n‚ùå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                sys.exit(1)

        # –ú–æ–±–∏–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
        print("\nüì± –ú–æ–±–∏–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞:")
        mobile_support = input(
            "–í–∫–ª—é—á–∏—Ç—å –º–æ–±–∏–ª—å–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É? (y/n): ").strip().lower()
        self.config['mobile_support'] = mobile_support in [
            'y', 'yes', '–¥–∞', '–¥']

        # AI –∞–Ω–∞–ª–∏–∑
        print("\nü§ñ AI –∞–Ω–∞–ª–∏–∑ —É–≥—Ä–æ–∑:")
        ai_analysis = input("–í–∫–ª—é—á–∏—Ç—å AI –∞–Ω–∞–ª–∏–∑? (y/n): ").strip().lower()
        self.config['ai_analysis'] = ai_analysis in ['y', 'yes', '–¥–∞', '–¥']

        print(f"\n‚úÖ –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        print()

    def configure_family_settings(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ–º–µ–π–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        if self.setup_type != 1:
            return

        print("üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ù–ê–°–¢–†–û–ô–ö–ê –°–ï–ú–ï–ô–ù–´–• –ü–ê–†–ê–ú–ï–¢–†–û–í:")
        print()

        # –†–µ–∂–∏–º —Å–µ–º—å–∏
        self.config['family_mode'] = True

        # –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å
        print("üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å:")
        parental_controls = input(
            "–í–∫–ª—é—á–∏—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å? (y/n): ").strip().lower()
        self.config['parental_controls'] = parental_controls in [
            'y', 'yes', '–¥–∞', '–¥']

        if self.config['parental_controls']:
            # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —ç–∫—Ä–∞–Ω–∞
            print("\n‚è∞ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —ç–∫—Ä–∞–Ω–∞ (–º–∏–Ω—É—Ç—ã –≤ –¥–µ–Ω—å):")
            while True:
                try:
                    screen_time = input(
                        "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 120): ").strip()
                    if not screen_time:
                        screen_time = 120
                    else:
                        screen_time = int(screen_time)
                    if screen_time > 0:
                        self.config['max_screen_time'] = screen_time
                        break
                    else:
                        print("‚ùå –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
                except ValueError:
                    print("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
                except KeyboardInterrupt:
                    print("\n\n‚ùå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                    sys.exit(1)

            # –í—Ä–µ–º—è –æ—Ç—Ö–æ–¥–∞ –∫–æ —Å–Ω—É
            print("\nüåô –í—Ä–µ–º—è –æ—Ç—Ö–æ–¥–∞ –∫–æ —Å–Ω—É (HH:MM):")
            while True:
                bedtime = input("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 21:00): ").strip()
                if not bedtime:
                    bedtime = "21:00"
                if self.validate_time(bedtime):
                    self.config['bedtime'] = bedtime
                    break
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HH:MM")

        # –ó–∞—â–∏—Ç–∞ –¥–µ—Ç–µ–π
        print("\nüë∂ –ó–∞—â–∏—Ç–∞ –¥–µ—Ç–µ–π:")
        child_protection = input(
            "–í–∫–ª—é—á–∏—Ç—å –∑–∞—â–∏—Ç—É –¥–µ—Ç–µ–π? (y/n): ").strip().lower()
        self.config['child_protection'] = child_protection in [
            'y', 'yes', '–¥–∞', '–¥']

        if self.config['child_protection']:
            # –í–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
            print("\nüîû –í–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:")
            age_restrictions = input(
                "–í–∫–ª—é—á–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è? (y/n): ").strip().lower()
            self.config['age_restrictions'] = age_restrictions in [
                'y', 'yes', '–¥–∞', '–¥']

            # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
            print("\nüìç –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è:")
            location_tracking = input(
                "–í–∫–ª—é—á–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ? (y/n): ").strip().lower()
            self.config['location_tracking'] = location_tracking in [
                'y', 'yes', '–¥–∞', '–¥']

        print(f"\n‚úÖ –°–µ–º–µ–π–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        print()

    def configure_business_settings(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∏–∑–Ω–µ—Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        if self.setup_type not in [2, 3]:
            return

        print("üè¢ –ù–ê–°–¢–†–û–ô–ö–ê –ë–ò–ó–ù–ï–° –ü–ê–†–ê–ú–ï–¢–†–û–í:")
        print()

        # –†–µ–∂–∏–º –±–∏–∑–Ω–µ—Å–∞
        self.config['business_mode'] = True

        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        print("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:")
        user_management = input(
            "–í–∫–ª—é—á–∏—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏? (y/n): ").strip().lower()
        self.config['user_management'] = user_management in [
            'y', 'yes', '–¥–∞', '–¥']

        if self.config['user_management']:
            # –ü–æ–ª–∏—Ç–∏–∫–∞ –ø–∞—Ä–æ–ª–µ–π
            print("\nüîê –ü–æ–ª–∏—Ç–∏–∫–∞ –ø–∞—Ä–æ–ª–µ–π:")
            print("1. –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è (8 —Å–∏–º–≤–æ–ª–æ–≤)")
            print("2. –°—Ç—Ä–æ–≥–∞—è (12 —Å–∏–º–≤–æ–ª–æ–≤)")
            print("3. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è (16 —Å–∏–º–≤–æ–ª–æ–≤)")

            while True:
                try:
                    password_choice = input(
                        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–∏—Ç–∏–∫—É (1-3): ").strip()
                    if password_choice in ['1', '2', '3']:
                        password_policies = {
                            '1': {'min_length': 8, 'require_special': False},
                            '2': {'min_length': 12, 'require_special': True},
                            '3': {'min_length': 16, 'require_special': True}
                        }
                        self.config['password_policy'] = (
                            password_policies[password_choice]
                        )
                        break
                    else:
                        print("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 1, 2 –∏–ª–∏ 3")
                except KeyboardInterrupt:
                    print("\n\n‚ùå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                    sys.exit(1)

        # –°–µ—Ç–µ–≤–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
        print("\nüåê –°–µ—Ç–µ–≤–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:")
        network_security = input(
            "–í–∫–ª—é—á–∏—Ç—å —Å–µ—Ç–µ–≤—É—é –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å? (y/n): ").strip().lower()
        self.config['network_security'] = network_security in [
            'y', 'yes', '–¥–∞', '–¥']

        if self.config['network_security']:
            # Firewall
            print("\nüî• Firewall:")
            firewall = input("–í–∫–ª—é—á–∏—Ç—å firewall? (y/n): ").strip().lower()
            self.config['firewall'] = firewall in ['y', 'yes', '–¥–∞', '–¥']

            # VPN
            print("\nüîí VPN:")
            vpn = input("–í–∫–ª—é—á–∏—Ç—å VPN? (y/n): ").strip().lower()
            self.config['vpn'] = vpn in ['y', 'yes', '–¥–∞', '–¥']

        # –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º
        if self.setup_type == 3:
            print("\nüìã –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º:")
            gdpr = input("–í–∫–ª—é—á–∏—Ç—å GDPR? (y/n): ").strip().lower()
            self.config['gdpr'] = gdpr in ['y', 'yes', '–¥–∞', '–¥']

            iso27001 = input("–í–∫–ª—é—á–∏—Ç—å ISO 27001? (y/n): ").strip().lower()
            self.config['iso27001'] = iso27001 in ['y', 'yes', '–¥–∞', '–¥']

        print(f"\n‚úÖ –ë–∏–∑–Ω–µ—Å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        print()

    def configure_enterprise_settings(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        if self.setup_type != 3:
            return

        print("üè≠ –ù–ê–°–¢–†–û–ô–ö–ê –ö–û–†–ü–û–†–ê–¢–ò–í–ù–´–• –ü–ê–†–ê–ú–ï–¢–†–û–í:")
        print()

        # –†–µ–∂–∏–º –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏–∏
        self.config['enterprise_mode'] = True

        # Zero Trust
        print("üîê Zero Trust –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:")
        zero_trust = input("–í–∫–ª—é—á–∏—Ç—å Zero Trust? (y/n): ").strip().lower()
        self.config['zero_trust'] = zero_trust in ['y', 'yes', '–¥–∞', '–¥']

        if self.config['zero_trust']:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            print("\nüì± –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤:")
            device_verification = input(
                "–í–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤? (y/n): ").strip().lower()
            self.config['device_verification'] = device_verification in [
                'y', 'yes', '–¥–∞', '–¥']

            # –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            print("\nüëÅÔ∏è –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:")
            continuous_monitoring = input(
                "–í–∫–ª—é—á–∏—Ç—å –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥? (y/n): ").strip().lower()
            self.config['continuous_monitoring'] = continuous_monitoring in [
                'y', 'yes', '–¥–∞', '–¥']

        # –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç —É–≥—Ä–æ–∑
        print("\nüõ°Ô∏è –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç —É–≥—Ä–æ–∑:")
        advanced_threat_protection = input(
            "–í–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—É—é –∑–∞—â–∏—Ç—É? (y/n): "
        ).strip().lower()
        self.config['advanced_threat_protection'] = (
            advanced_threat_protection in ['y', 'yes', '–¥–∞', '–¥']
        )

        if self.config['advanced_threat_protection']:
            # AI –∞–Ω–∞–ª–∏–∑
            print("\nü§ñ AI –∞–Ω–∞–ª–∏–∑:")
            ai_analysis = input("–í–∫–ª—é—á–∏—Ç—å AI –∞–Ω–∞–ª–∏–∑? (y/n): ").strip().lower()
            self.config['ai_analysis'] = ai_analysis in ['y', 'yes', '–¥–∞', '–¥']

            # –ê–Ω–∞–ª–∏–∑ –ø–æ–≤–µ–¥–µ–Ω–∏—è
            print("\nüß† –ê–Ω–∞–ª–∏–∑ –ø–æ–≤–µ–¥–µ–Ω–∏—è:")
            behavioral_analysis = input(
                "–í–∫–ª—é—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –ø–æ–≤–µ–¥–µ–Ω–∏—è? (y/n): ").strip().lower()
            self.config['behavioral_analysis'] = behavioral_analysis in [
                'y', 'yes', '–¥–∞', '–¥']

        # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        print("\nüîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:")
        siem = input("–í–∫–ª—é—á–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å SIEM? (y/n): ").strip().lower()
        self.config['siem_integration'] = siem in ['y', 'yes', '–¥–∞', '–¥']

        ldap = input("–í–∫–ª—é—á–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å LDAP? (y/n): ").strip().lower()
        self.config['ldap_integration'] = ldap in ['y', 'yes', '–¥–∞', '–¥']

        print(f"\n‚úÖ –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        print()

    def configure_notifications(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        print("üìß –ù–ê–°–¢–†–û–ô–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô:")
        print()

        # Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        print("üìß Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:")
        email_notifications = input(
            "–í–∫–ª—é—á–∏—Ç—å email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è? (y/n): ").strip().lower()
        self.config['email_notifications'] = email_notifications in [
            'y', 'yes', '–¥–∞', '–¥']

        if self.config['email_notifications']:
            email = input("–í–≤–µ–¥–∏—Ç–µ email –∞–¥—Ä–µ—Å: ").strip()
            if self.validate_email(email):
                self.config['email_address'] = email
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email")
                self.config['email_notifications'] = False

        # SMS —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        print("\nüì± SMS —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:")
        sms_notifications = input(
            "–í–∫–ª—é—á–∏—Ç—å SMS —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è? (y/n): ").strip().lower()
        self.config['sms_notifications'] = sms_notifications in [
            'y', 'yes', '–¥–∞', '–¥']

        if self.config['sms_notifications']:
            phone = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ").strip()
            if self.validate_phone(phone):
                self.config['phone_number'] = phone
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
                self.config['sms_notifications'] = False

        # Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        print("\nüîî Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:")
        push_notifications = input(
            "–í–∫–ª—é—á–∏—Ç—å push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è? (y/n): ").strip().lower()
        self.config['push_notifications'] = push_notifications in [
            'y', 'yes', '–¥–∞', '–¥']

        print(f"\n‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        print()

    def configure_admin_user(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        print("üë§ –ù–ê–°–¢–†–û–ô–ö–ê –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê:")
        print()

        # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print("üë§ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
        while True:
            username = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ").strip()
            if username and len(username) >= 3:
                self.config['admin_username'] = username
                break
            else:
                print("‚ùå –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞")

        # –ü–∞—Ä–æ–ª—å
        print("\nüîê –ü–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
        while True:
            password = getpass.getpass("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ")
            if len(password) >= 8:
                confirm_password = getpass.getpass("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ")
                if password == confirm_password:
                    self.config['admin_password'] = password
                    break
                else:
                    print("‚ùå –ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
            else:
                print("‚ùå –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤")

        # Email –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        print("\nüìß Email –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
        while True:
            email = input("–í–≤–µ–¥–∏—Ç–µ email (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ): ").strip()
            if not email:
                break
            elif self.validate_email(email):
                self.config['admin_email'] = email
                break
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email")

        print(f"\n‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        print()

    def validate_time(self, time_str):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏"""
        try:
            time.strptime(time_str, '%H:%M')
            return True
        except ValueError:
            return False

    def validate_email(self, email):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è email"""
        import re
        pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
        return re.match(pattern, email) is not None

    def validate_phone(self, phone):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        import re
        pattern = r'^\+?[1-9]\d{1,14}$'
        return re.match(pattern, phone) is not None

    def save_configuration(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        print("üíæ –°–û–•–†–ê–ù–ï–ù–ò–ï –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò:")
        print()

        try:
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            config_dir = Path('config')
            config_dir.mkdir(exist_ok=True)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            config_file = config_dir / 'setup_config.json'
            with open(config_file, 'w', encoding='utf-8') as f:
                json.dump(self.config, f, indent=2, ensure_ascii=False)

            print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {config_file}")

            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫ —Å–∏—Å—Ç–µ–º–µ
            self.apply_configuration()

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return False

        return True

    def apply_configuration(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫ —Å–∏—Å—Ç–µ–º–µ"""
        print("\nüîß –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò:")
        print()

        try:
            from core.configuration import ConfigurationManager

            # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            config_manager = ConfigurationManager()

            # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            for key, value in self.config.items():
                config_manager.set_configuration(key, value)

            print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –∫ —Å–∏—Å—Ç–µ–º–µ")

            # –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            if 'admin_username' in self.config:
                self.create_admin_user()

            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
            self.run_initial_test()

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")

    def create_admin_user(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        try:
            from security.authentication import AuthenticationManager

            auth_manager = AuthenticationManager()
            auth_manager.create_user(
                username=self.config['admin_username'],
                password=self.config['admin_password'],
                role='admin',
                email=self.config.get('admin_email', '')
            )

            print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–æ–∑–¥–∞–Ω")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")

    def run_initial_test(self):
        """–ó–∞–ø—É—Å–∫ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        print("\nüß™ –ó–ê–ü–£–°–ö –ù–ê–ß–ê–õ–¨–ù–û–ì–û –¢–ï–°–¢–ê:")
        print()

        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º —É–ª—å—Ç—Ä–∞-–±—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç
            import subprocess
            result = subprocess.run([
                'python3', 'scripts/ultra_fast_test.py'
            ], capture_output=True, text=True, timeout=30)

            if result.returncode == 0:
                print("‚úÖ –ù–∞—á–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
            else:
                print("‚ùå –ù–∞—á–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω")
                print("‚ùå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞: {e}")

    def show_summary(self):
        """–ü–æ–∫–∞–∑ —Å–≤–æ–¥–∫–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        print("\n" + "=" * 60)
        print("üìä –°–í–û–î–ö–ê –ù–ê–°–¢–†–û–ô–ö–ò")
        print("=" * 60)

        setup_time = time.time() - self.start_time

        print(f"–¢–∏–ø —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {self.get_setup_type_name()}")
        print(f"–í—Ä–µ–º—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {setup_time:.1f} —Å–µ–∫—É–Ω–¥")
        print(f"–ù–∞—Å—Ç—Ä–æ–µ–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {len(self.config)}")
        print()

        print("üìã –ù–ê–°–¢–†–û–ï–ù–ù–´–ï –ü–ê–†–ê–ú–ï–¢–†–´:")
        for key, value in self.config.items():
            if 'password' not in key.lower():
                print(f"  ‚úÖ {key}: {value}")

        print()
        print("üéØ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!")
        print("=" * 60)

    def run(self):
        """–ó–∞–ø—É—Å–∫ –º–∞—Å—Ç–µ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        try:
            self.print_header()
            self.select_setup_type()
            self.configure_basic_settings()
            self.configure_family_settings()
            self.configure_business_settings()
            self.configure_enterprise_settings()
            self.configure_notifications()
            self.configure_admin_user()

            if self.save_configuration():
                self.show_summary()
                return True
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã")
                return False

        except KeyboardInterrupt:
            print("\n\n‚ùå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            return False
        except Exception as e:
            print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            return False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    wizard = SetupWizard()
    success = wizard.run()
    sys.exit(0 if success else 1)


if __name__ == "__main__":
    main()
