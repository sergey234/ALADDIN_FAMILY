#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
SFM Conflict Analyzer - –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π –≤ SFM
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π, –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –∏–º–µ–Ω –∏ –Ω–∞–ª–æ–∂–µ–Ω–∏—è

–ê–≤—Ç–æ—Ä: ALADDIN Security Team
–í–µ—Ä—Å–∏—è: 1.0
–î–∞—Ç–∞: 2025-09-11
"""

import os
import sys
import ast
import hashlib
from typing import Dict, List, Set, Tuple, Any
from collections import defaultdict
import json
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append('/Users/sergejhlystov/ALADDIN_NEW')

class SFMConflictAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π –≤ SFM"""
    
    def __init__(self):
        self.conflicts = []
        self.function_registry = {}
        self.class_registry = {}
        self.method_registry = defaultdict(list)
        self.file_checksums = {}
        self.duplicate_files = []
        
    def analyze_sfm_conflicts(self) -> Dict[str, Any]:
        """–û—Å–Ω–æ–≤–Ω–æ–π –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –≤ SFM"""
        print("üîç –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π –≤ SFM...")
        
        # 1. –ê–Ω–∞–ª–∏–∑ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –≤ SFM
        sfm_functions = self.analyze_sfm_registry()
        
        # 2. –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤ —Å–∏—Å—Ç–µ–º—ã
        system_functions = self.analyze_system_files()
        
        # 3. –ü–æ–∏—Å–∫ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π
        duplicates = self.find_function_duplicates(sfm_functions, system_functions)
        
        # 4. –ü–æ–∏—Å–∫ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –∏–º–µ–Ω –∫–ª–∞—Å—Å–æ–≤
        class_conflicts = self.find_class_conflicts()
        
        # 5. –ü–æ–∏—Å–∫ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –º–µ—Ç–æ–¥–æ–≤
        method_conflicts = self.find_method_conflicts()
        
        # 6. –ü–æ–∏—Å–∫ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Ñ–∞–π–ª–æ–≤
        file_duplicates = self.find_file_duplicates()
        
        # 7. –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        dependency_conflicts = self.analyze_dependencies()
        
        # 8. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
        report = self.generate_conflict_report({
            'sfm_functions': sfm_functions,
            'system_functions': system_functions,
            'duplicates': duplicates,
            'class_conflicts': class_conflicts,
            'method_conflicts': method_conflicts,
            'file_duplicates': file_duplicates,
            'dependency_conflicts': dependency_conflicts
        })
        
        return report
    
    def analyze_sfm_registry(self) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –≤ SFM"""
        print("üìã –ê–Ω–∞–ª–∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞ SFM...")
        
        try:
            from security.safe_function_manager import SafeFunctionManager
            
            # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä SFM
            sfm = SafeFunctionManager("ConflictAnalyzer")
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
            registered_functions = {}
            for func_id, func_info in sfm.functions.items():
                registered_functions[func_id] = {
                    'name': func_info.name,
                    'type': func_info.function_type,
                    'status': func_info.status.value,
                    'security_level': func_info.security_level.value,
                    'is_critical': getattr(func_info, 'is_critical', False),
                    'file_path': getattr(func_info, 'file_path', 'unknown')
                }
            
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(registered_functions)} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –≤ SFM")
            return registered_functions
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ SFM: {e}")
            return {}
    
    def analyze_system_files(self) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤ —Å–∏—Å—Ç–µ–º—ã –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —Ñ—É–Ω–∫—Ü–∏–π"""
        print("üìÅ –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤ —Å–∏—Å—Ç–µ–º—ã...")
        
        system_functions = {}
        directories = [
            '/Users/sergejhlystov/ALADDIN_NEW/security',
            '/Users/sergejhlystov/ALADDIN_NEW/core',
            '/Users/sergejhlystov/ALADDIN_NEW/family'
        ]
        
        for directory in directories:
            if os.path.exists(directory):
                for root, dirs, files in os.walk(directory):
                    for file in files:
                        if file.endswith('.py'):
                            file_path = os.path.join(root, file)
                            functions = self.extract_functions_from_file(file_path)
                            if functions:
                                system_functions[file_path] = functions
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(system_functions)} —Ñ–∞–π–ª–æ–≤ —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏")
        return system_functions
    
    def extract_functions_from_file(self, file_path: str) -> List[Dict[str, Any]]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            tree = ast.parse(content)
            functions = []
            
            for node in ast.walk(tree):
                if isinstance(node, ast.ClassDef):
                    # –ê–Ω–∞–ª–∏–∑ –∫–ª–∞—Å—Å–æ–≤
                    class_info = {
                        'type': 'class',
                        'name': node.name,
                        'line': node.lineno,
                        'methods': []
                    }
                    
                    for item in node.body:
                        if isinstance(item, ast.FunctionDef):
                            method_info = {
                                'type': 'method',
                                'name': item.name,
                                'line': item.lineno,
                                'class': node.name
                            }
                            class_info['methods'].append(method_info)
                            functions.append(method_info)
                    
                    functions.append(class_info)
                
                elif isinstance(node, ast.FunctionDef):
                    # –ê–Ω–∞–ª–∏–∑ —Ñ—É–Ω–∫—Ü–∏–π
                    func_info = {
                        'type': 'function',
                        'name': node.name,
                        'line': node.lineno,
                        'class': None
                    }
                    functions.append(func_info)
            
            return functions
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞ {file_path}: {e}")
            return []
    
    def find_function_duplicates(self, sfm_functions: Dict, system_functions: Dict) -> List[Dict]:
        """–ü–æ–∏—Å–∫ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Ñ—É–Ω–∫—Ü–∏–π"""
        print("üîç –ü–æ–∏—Å–∫ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Ñ—É–Ω–∫—Ü–∏–π...")
        
        duplicates = []
        sfm_names = set(sfm_functions.keys())
        
        for file_path, functions in system_functions.items():
            for func in functions:
                func_name = func['name']
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å SFM
                if func_name in sfm_names:
                    duplicates.append({
                        'type': 'sfm_duplicate',
                        'function_name': func_name,
                        'sfm_id': func_name,
                        'file_path': file_path,
                        'line': func['line'],
                        'severity': 'high'
                    })
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –≤–Ω—É—Ç—Ä–∏ —Ñ–∞–π–ª–∞
                same_name_functions = [f for f in functions if f['name'] == func_name]
                if len(same_name_functions) > 1:
                    duplicates.append({
                        'type': 'file_duplicate',
                        'function_name': func_name,
                        'file_path': file_path,
                        'count': len(same_name_functions),
                        'lines': [f['line'] for f in same_name_functions],
                        'severity': 'medium'
                    })
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(duplicates)} –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Ñ—É–Ω–∫—Ü–∏–π")
        return duplicates
    
    def find_class_conflicts(self) -> List[Dict]:
        """–ü–æ–∏—Å–∫ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –∏–º–µ–Ω –∫–ª–∞—Å—Å–æ–≤"""
        print("üèóÔ∏è –ü–æ–∏—Å–∫ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –∏–º–µ–Ω –∫–ª–∞—Å—Å–æ–≤...")
        
        class_conflicts = []
        class_locations = defaultdict(list)
        
        # –°–±–æ—Ä –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
        directories = [
            '/Users/sergejhlystov/ALADDIN_NEW/security',
            '/Users/sergejhlystov/ALADDIN_NEW/core',
            '/Users/sergejhlystov/ALADDIN_NEW/family'
        ]
        
        for directory in directories:
            if os.path.exists(directory):
                for root, dirs, files in os.walk(directory):
                    for file in files:
                        if file.endswith('.py'):
                            file_path = os.path.join(root, file)
                            classes = self.extract_classes_from_file(file_path)
                            
                            for class_info in classes:
                                class_locations[class_info['name']].append({
                                    'file_path': file_path,
                                    'line': class_info['line']
                                })
        
        # –ü–æ–∏—Å–∫ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
        for class_name, locations in class_locations.items():
            if len(locations) > 1:
                class_conflicts.append({
                    'class_name': class_name,
                    'locations': locations,
                    'count': len(locations),
                    'severity': 'high' if len(locations) > 2 else 'medium'
                })
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(class_conflicts)} –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –∏–º–µ–Ω –∫–ª–∞—Å—Å–æ–≤")
        return class_conflicts
    
    def extract_classes_from_file(self, file_path: str) -> List[Dict[str, Any]]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            tree = ast.parse(content)
            classes = []
            
            for node in ast.walk(tree):
                if isinstance(node, ast.ClassDef):
                    classes.append({
                        'name': node.name,
                        'line': node.lineno,
                        'file_path': file_path
                    })
            
            return classes
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–ª–∞—Å—Å–æ–≤ –∏–∑ {file_path}: {e}")
            return []
    
    def find_method_conflicts(self) -> List[Dict]:
        """–ü–æ–∏—Å–∫ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –º–µ—Ç–æ–¥–æ–≤"""
        print("‚öôÔ∏è –ü–æ–∏—Å–∫ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –º–µ—Ç–æ–¥–æ–≤...")
        
        method_conflicts = []
        method_locations = defaultdict(list)
        
        # –°–±–æ—Ä –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
        directories = [
            '/Users/sergejhlystov/ALADDIN_NEW/security',
            '/Users/sergejhlystov/ALADDIN_NEW/core',
            '/Users/sergejhlystov/ALADDIN_NEW/family'
        ]
        
        for directory in directories:
            if os.path.exists(directory):
                for root, dirs, files in os.walk(directory):
                    for file in files:
                        if file.endswith('.py'):
                            file_path = os.path.join(root, file)
                            methods = self.extract_methods_from_file(file_path)
                            
                            for method_info in methods:
                                method_key = f"{method_info['class']}.{method_info['name']}"
                                method_locations[method_key].append({
                                    'file_path': file_path,
                                    'line': method_info['line'],
                                    'class': method_info['class']
                                })
        
        # –ü–æ–∏—Å–∫ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
        for method_key, locations in method_locations.items():
            if len(locations) > 1:
                method_conflicts.append({
                    'method_key': method_key,
                    'locations': locations,
                    'count': len(locations),
                    'severity': 'high' if len(locations) > 2 else 'medium'
                })
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(method_conflicts)} –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –º–µ—Ç–æ–¥–æ–≤")
        return method_conflicts
    
    def extract_methods_from_file(self, file_path: str) -> List[Dict[str, Any]]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            tree = ast.parse(content)
            methods = []
            
            for node in ast.walk(tree):
                if isinstance(node, ast.ClassDef):
                    for item in node.body:
                        if isinstance(item, ast.FunctionDef):
                            methods.append({
                                'name': item.name,
                                'class': node.name,
                                'line': item.lineno,
                                'file_path': file_path
                            })
            
            return methods
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –º–µ—Ç–æ–¥–æ–≤ –∏–∑ {file_path}: {e}")
            return []
    
    def find_file_duplicates(self) -> List[Dict]:
        """–ü–æ–∏—Å–∫ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Ñ–∞–π–ª–æ–≤"""
        print("üìÑ –ü–æ–∏—Å–∫ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Ñ–∞–π–ª–æ–≤...")
        
        file_duplicates = []
        file_checksums = {}
        
        directories = [
            '/Users/sergejhlystov/ALADDIN_NEW/security',
            '/Users/sergejhlystov/ALADDIN_NEW/core',
            '/Users/sergejhlystov/ALADDIN_NEW/family'
        ]
        
        for directory in directories:
            if os.path.exists(directory):
                for root, dirs, files in os.walk(directory):
                    for file in files:
                        if file.endswith('.py'):
                            file_path = os.path.join(root, file)
                            checksum = self.calculate_file_checksum(file_path)
                            
                            if checksum in file_checksums:
                                file_duplicates.append({
                                    'checksum': checksum,
                                    'original_file': file_checksums[checksum],
                                    'duplicate_file': file_path,
                                    'severity': 'high'
                                })
                            else:
                                file_checksums[checksum] = file_path
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(file_duplicates)} –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Ñ–∞–π–ª–æ–≤")
        return file_duplicates
    
    def calculate_file_checksum(self, file_path: str) -> str:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Å—É–º–º—ã —Ñ–∞–π–ª–∞"""
        try:
            with open(file_path, 'rb') as f:
                content = f.read()
            return hashlib.md5(content).hexdigest()
        except Exception:
            return ""
    
    def analyze_dependencies(self) -> List[Dict]:
        """–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        print("üîó –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
        
        dependency_conflicts = []
        
        # –ê–Ω–∞–ª–∏–∑ –∏–º–ø–æ—Ä—Ç–æ–≤
        import_conflicts = self.analyze_import_conflicts()
        dependency_conflicts.extend(import_conflicts)
        
        # –ê–Ω–∞–ª–∏–∑ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        circular_deps = self.analyze_circular_dependencies()
        dependency_conflicts.extend(circular_deps)
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(dependency_conflicts)} –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
        return dependency_conflicts
    
    def analyze_import_conflicts(self) -> List[Dict]:
        """–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –∏–º–ø–æ—Ä—Ç–æ–≤"""
        import_conflicts = []
        import_usage = defaultdict(list)
        
        directories = [
            '/Users/sergejhlystov/ALADDIN_NEW/security',
            '/Users/sergejhlystov/ALADDIN_NEW/core',
            '/Users/sergejhlystov/ALADDIN_NEW/family'
        ]
        
        for directory in directories:
            if os.path.exists(directory):
                for root, dirs, files in os.walk(directory):
                    for file in files:
                        if file.endswith('.py'):
                            file_path = os.path.join(root, file)
                            imports = self.extract_imports_from_file(file_path)
                            
                            for import_name in imports:
                                import_usage[import_name].append(file_path)
        
        # –ü–æ–∏—Å–∫ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –∏–º–ø–æ—Ä—Ç–æ–≤
        for import_name, files in import_usage.items():
            if len(files) > 5:  # –ï—Å–ª–∏ –∏–º–ø–æ—Ä—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –±–æ–ª–µ–µ —á–µ–º 5 —Ñ–∞–π–ª–∞—Ö
                import_conflicts.append({
                    'import_name': import_name,
                    'usage_count': len(files),
                    'files': files,
                    'severity': 'medium'
                })
        
        return import_conflicts
    
    def extract_imports_from_file(self, file_path: str) -> List[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            tree = ast.parse(content)
            imports = []
            
            for node in ast.walk(tree):
                if isinstance(node, ast.Import):
                    for alias in node.names:
                        imports.append(alias.name)
                elif isinstance(node, ast.ImportFrom):
                    if node.module:
                        imports.append(node.module)
            
            return imports
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–º–ø–æ—Ä—Ç–æ–≤ –∏–∑ {file_path}: {e}")
            return []
    
    def analyze_circular_dependencies(self) -> List[Dict]:
        """–ê–Ω–∞–ª–∏–∑ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω—É–∂–µ–Ω –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º
        return []
    
    def generate_conflict_report(self, analysis_data: Dict[str, Any]) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞—Ö"""
        print("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞—Ö...")
        
        report = {
            'timestamp': datetime.now().isoformat(),
            'summary': {
                'total_sfm_functions': len(analysis_data['sfm_functions']),
                'total_system_functions': len(analysis_data['system_functions']),
                'duplicate_functions': len(analysis_data['duplicates']),
                'class_conflicts': len(analysis_data['class_conflicts']),
                'method_conflicts': len(analysis_data['method_conflicts']),
                'file_duplicates': len(analysis_data['file_duplicates']),
                'dependency_conflicts': len(analysis_data['dependency_conflicts'])
            },
            'conflicts': {
                'duplicate_functions': analysis_data['duplicates'],
                'class_conflicts': analysis_data['class_conflicts'],
                'method_conflicts': analysis_data['method_conflicts'],
                'file_duplicates': analysis_data['file_duplicates'],
                'dependency_conflicts': analysis_data['dependency_conflicts']
            },
            'recommendations': self.generate_recommendations(analysis_data)
        }
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        report_path = '/Users/sergejhlystov/ALADDIN_NEW/SFM_CONFLICT_ANALYSIS_REPORT.json'
        with open(report_path, 'w', encoding='utf-8') as f:
            json.dump(report, f, indent=2, ensure_ascii=False)
        
        print(f"‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_path}")
        return report
    
    def generate_recommendations(self, analysis_data: Dict[str, Any]) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤"""
        recommendations = []
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥—É–±–ª–∏—Ä—É—é—â–∏–º—Å—è —Ñ—É–Ω–∫—Ü–∏—è–º
        if analysis_data['duplicates']:
            recommendations.append("üîß –£—Å—Ç—Ä–∞–Ω–∏—Ç—å –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Ñ—É–Ω–∫—Ü–∏–∏ –≤ SFM")
            recommendations.append("üîß –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å function_id")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞–º –∫–ª–∞—Å—Å–æ–≤
        if analysis_data['class_conflicts']:
            recommendations.append("üèóÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ –∫–ª–∞—Å—Å—ã")
            recommendations.append("üèóÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –∏–º–µ–Ω")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞–º –º–µ—Ç–æ–¥–æ–≤
        if analysis_data['method_conflicts']:
            recommendations.append("‚öôÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ –º–µ—Ç–æ–¥—ã")
            recommendations.append("‚öôÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–ª–Ω—ã–µ –∏–º–µ–Ω–∞ –º–µ—Ç–æ–¥–æ–≤")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥—É–±–ª–∏—Ä—É—é—â–∏–º—Å—è —Ñ–∞–π–ª–∞–º
        if analysis_data['file_duplicates']:
            recommendations.append("üìÑ –£–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Ñ–∞–π–ª—ã")
            recommendations.append("üìÑ –°–æ–∑–¥–∞—Ç—å –µ–¥–∏–Ω—É—é –≤–µ—Ä—Å–∏—é —Ñ–∞–π–ª–æ–≤")
        
        # –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations.extend([
            "üõ°Ô∏è –í–Ω–µ–¥—Ä–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –≤ CI/CD",
            "üõ°Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã –¥–ª—è –º–æ–¥—É–ª–µ–π",
            "üõ°Ô∏è –†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–æ–¥–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤",
            "üõ°Ô∏è –°–æ–∑–¥–∞—Ç—å –ø–æ–ª–∏—Ç–∏–∫—É –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"
        ])
        
        return recommendations

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ SFM Conflict Analyzer - –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤")
    print("=" * 60)
    
    analyzer = SFMConflictAnalyzer()
    report = analyzer.analyze_sfm_conflicts()
    
    print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:")
    print("=" * 60)
    
    summary = report['summary']
    print(f"üìã –§—É–Ω–∫—Ü–∏–π –≤ SFM: {summary['total_sfm_functions']}")
    print(f"üìÅ –§—É–Ω–∫—Ü–∏–π –≤ —Å–∏—Å—Ç–µ–º–µ: {summary['total_system_functions']}")
    print(f"üîç –î—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Ñ—É–Ω–∫—Ü–∏–π: {summary['duplicate_functions']}")
    print(f"üèóÔ∏è –ö–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –∫–ª–∞—Å—Å–æ–≤: {summary['class_conflicts']}")
    print(f"‚öôÔ∏è –ö–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –º–µ—Ç–æ–¥–æ–≤: {summary['method_conflicts']}")
    print(f"üìÑ –î—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Ñ–∞–π–ª–æ–≤: {summary['file_duplicates']}")
    print(f"üîó –ö–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {summary['dependency_conflicts']}")
    
    print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("=" * 60)
    for i, rec in enumerate(report['recommendations'], 1):
        print(f"{i}. {rec}")
    
    print(f"\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ SFM_CONFLICT_ANALYSIS_REPORT.json")

if __name__ == "__main__":
    main()