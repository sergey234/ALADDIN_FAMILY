#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ä–µ–µ—Å—Ç—Ä–∞ —Ñ—É–Ω–∫—Ü–∏–π ALADDIN
–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ —Å–∏—Å—Ç–µ–º—ã –∑–∞—â–∏—Ç—ã, –≤–∞–ª–∏–¥–∞—Ü–∏–∏, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –æ—Ç—á—ë—Ç–æ–≤
"""

import json
import logging
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Any, Optional

# –ò–º–ø–æ—Ä—Ç –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from registry_protection_system import RegistryProtectionSystem
from registry_format_validator import RegistryFormatValidator
from registry_monitor import RegistryMonitor
from registry_problem_reporter import RegistryProblemReporter

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/registry_security_manager.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class RegistrySecurityManager:
    """–ì–ª–∞–≤–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ä–µ–µ—Å—Ç—Ä–∞ —Ñ—É–Ω–∫—Ü–∏–π"""
    
    def __init__(self, registry_path: str = "data/sfm/function_registry.json"):
        self.registry_path = registry_path
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º
        self.protection = RegistryProtectionSystem(registry_path)
        self.validator = RegistryFormatValidator(registry_path)
        self.monitor = RegistryMonitor(registry_path)
        self.reporter = RegistryProblemReporter()
        
        logger.info("üõ°Ô∏è –ú–µ–Ω–µ–¥–∂–µ—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ä–µ–µ—Å—Ç—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        logger.info(f"üìÅ –ó–∞—â–∏—â–∞–µ–º—ã–π —Ä–µ–µ—Å—Ç—Ä: {registry_path}")
    
    def start_full_protection(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –∑–∞—â–∏—Ç—ã —Ä–µ–µ—Å—Ç—Ä–∞"""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –∑–∞—â–∏—Ç—ã —Ä–µ–µ—Å—Ç—Ä–∞")
            
            # 1. –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–µ—Å—Ç—Ä–∞
            logger.info("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ —Ä–µ–µ—Å—Ç—Ä–∞...")
            success, registry, errors = self.validator.validate_file()
            
            if not success:
                logger.error(f"‚ùå –†–µ–µ—Å—Ç—Ä –Ω–µ –ø—Ä–æ—à—ë–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é: {len(errors)} –æ—à–∏–±–æ–∫")
                for error in errors:
                    logger.error(f"   {error}")
                return False
            
            if errors:
                logger.warning(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(errors)} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
                for error in errors:
                    logger.warning(f"   {error}")
            
            # 2. –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            logger.info("üìä –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–µ–µ—Å—Ç—Ä–∞...")
            if not self.monitor.start_monitoring():
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
                return False
            
            # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—â–∏—Ç—ã
            protection_status = self.protection.get_registry_status()
            logger.info(f"üõ°Ô∏è –°—Ç–∞—Ç—É—Å –∑–∞—â–∏—Ç—ã: {protection_status['current_functions_count']} —Ñ—É–Ω–∫—Ü–∏–π –ø–æ–¥ –∑–∞—â–∏—Ç–æ–π")
            
            logger.info("‚úÖ –ü–æ–ª–Ω–∞—è –∑–∞—â–∏—Ç–∞ —Ä–µ–µ—Å—Ç—Ä–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∑–∞—â–∏—Ç—ã: {e}")
            return False
    
    def stop_protection(self) -> bool:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞—â–∏—Ç—ã —Ä–µ–µ—Å—Ç—Ä–∞"""
        try:
            logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞—â–∏—Ç—ã —Ä–µ–µ—Å—Ç—Ä–∞")
            
            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            if not self.monitor.stop_monitoring():
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
            
            logger.info("‚úÖ –ó–∞—â–∏—Ç–∞ —Ä–µ–µ—Å—Ç—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞—â–∏—Ç—ã: {e}")
            return False
    
    def safe_registry_update(self, new_registry: Dict[str, Any], force: bool = False) -> bool:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–µ—Å—Ç—Ä–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏"""
        try:
            logger.info("üîÑ –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–µ—Å—Ç—Ä–∞")
            
            # 1. –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ —Ä–µ–µ—Å—Ç—Ä–∞
            logger.info("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ —Ä–µ–µ—Å—Ç—Ä–∞...")
            is_valid, errors, fixed_registry = self.validator.validate_registry(new_registry)
            
            if not is_valid:
                logger.error(f"‚ùå –ù–æ–≤—ã–π —Ä–µ–µ—Å—Ç—Ä –Ω–µ –ø—Ä–æ—à—ë–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é: {len(errors)} –æ—à–∏–±–æ–∫")
                for error in errors:
                    logger.error(f"   {error}")
                return False
            
            if errors:
                logger.warning(f"‚ö†Ô∏è –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ {len(errors)} –æ—à–∏–±–æ–∫ –≤ –Ω–æ–≤–æ–º —Ä–µ–µ—Å—Ç—Ä–µ")
                for error in errors:
                    logger.warning(f"   {error}")
            
            # 2. –ó–∞—â–∏—â—ë–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å
            logger.info("üõ°Ô∏è –ó–∞—â–∏—â—ë–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å —Ä–µ–µ—Å—Ç—Ä–∞...")
            if not self.protection.protect_registry_write(fixed_registry, force):
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å —Ä–µ–µ—Å—Ç—Ä (–∑–∞—â–∏—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∞)")
                return False
            
            logger.info("‚úÖ –†–µ–µ—Å—Ç—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–µ—Å—Ç—Ä–∞: {e}")
            return False
    
    def get_system_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            protection_status = self.protection.get_registry_status()
            monitor_status = self.monitor.get_monitoring_status()
            validation_report = self.validator.get_validation_report()
            
            return {
                "timestamp": datetime.now().isoformat(),
                "registry_path": self.registry_path,
                "protection": protection_status,
                "monitoring": monitor_status,
                "validation": validation_report,
                "system_health": self._calculate_system_health(protection_status, monitor_status, validation_report)
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return {"error": str(e)}
    
    def _calculate_system_health(self, protection: Dict, monitoring: Dict, validation: Dict) -> Dict[str, Any]:
        """–†–∞—Å—á—ë—Ç –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
        health_score = 100
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—â–∏—Ç—ã
        if protection.get("functions_lost", 0) > 0:
            health_score -= protection["functions_lost"] * 10
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        if not monitoring.get("is_monitoring", False):
            health_score -= 20
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        if not validation.get("validation_success", True):
            health_score -= 15
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        if health_score >= 90:
            status = "excellent"
        elif health_score >= 70:
            status = "good"
        elif health_score >= 50:
            status = "fair"
        elif health_score >= 30:
            status = "poor"
        else:
            status = "critical"
        
        return {
            "score": max(0, min(100, health_score)),
            "status": status,
            "recommendations": self._get_health_recommendations(health_score, protection, monitoring, validation)
        }
    
    def _get_health_recommendations(self, score: int, protection: Dict, monitoring: Dict, validation: Dict) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –∑–¥–æ—Ä–æ–≤—å—é —Å–∏—Å—Ç–µ–º—ã"""
        recommendations = []
        
        if score < 50:
            recommendations.append("üö® –ö—Ä–∏—Ç–∏—á–Ω–æ: –°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è")
        
        if protection.get("functions_lost", 0) > 0:
            recommendations.append("‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –ü–æ—Ç–µ—Ä—è–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞")
        
        if not monitoring.get("is_monitoring", False):
            recommendations.append("üìä –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ó–∞–ø—É—Å—Ç–∏—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ–µ—Å—Ç—Ä–∞")
        
        if not validation.get("validation_success", True):
            recommendations.append("üîç –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
        
        if not recommendations:
            recommendations.append("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ")
        
        return recommendations
    
    def generate_problem_report(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞ –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö"""
        try:
            logger.info("üìã –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞ –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö")
            report_path = self.reporter.generate_and_save_report()
            
            if report_path:
                logger.info(f"‚úÖ –û—Ç—á—ë—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {report_path}")
                return report_path
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç")
                return ""
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞: {e}")
            return ""
    
    def emergency_protection_check(self) -> Dict[str, Any]:
        """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—â–∏—Ç—ã —Ä–µ–µ—Å—Ç—Ä–∞"""
        try:
            logger.critical("üö® –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ó–ê–©–ò–¢–´ –†–ï–ï–°–¢–†–ê")
            
            # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º
            protection_status = self.protection.get_registry_status()
            monitor_status = self.monitor.get_monitoring_status()
            validation_report = self.validator.get_validation_report()
            
            # –ê–Ω–∞–ª–∏–∑ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º
            critical_issues = []
            
            if protection_status.get("functions_lost", 0) > 0:
                critical_issues.append(f"üö® –ö–†–ò–¢–ò–ß–ù–û: –ü–æ—Ç–µ—Ä—è–Ω–æ {protection_status['functions_lost']} —Ñ—É–Ω–∫—Ü–∏–π")
            
            if not monitor_status.get("is_monitoring", False):
                critical_issues.append("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω")
            
            if not validation_report.get("validation_success", True):
                critical_issues.append("üîç –ü–†–û–ë–õ–ï–ú–ê: –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–µ–µ—Å—Ç—Ä–∞")
            
            if not Path(self.registry_path).exists():
                critical_issues.append("üí• –ö–ê–¢–ê–°–¢–†–û–§–ê: –§–∞–π–ª —Ä–µ–µ—Å—Ç—Ä–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            
            return {
                "timestamp": datetime.now().isoformat(),
                "critical_issues": critical_issues,
                "protection_status": protection_status,
                "monitoring_status": monitor_status,
                "validation_status": validation_report,
                "emergency_level": "critical" if critical_issues else "normal"
            }
            
        except Exception as e:
            logger.critical(f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ü–†–û–í–ï–†–ö–ò: {e}")
            return {
                "timestamp": datetime.now().isoformat(),
                "critical_issues": [f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}"],
                "emergency_level": "critical"
            }

def main():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ä–µ–µ—Å—Ç—Ä–∞"""
    print("üõ°Ô∏è –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–ï–ù–ï–î–ñ–ï–†–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò –†–ï–ï–°–¢–†–ê")
    print("=" * 60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    manager = RegistrySecurityManager()
    
    # –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –∑–∞—â–∏—Ç—ã
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –∑–∞—â–∏—Ç—ã...")
    if manager.start_full_protection():
        print("‚úÖ –ó–∞—â–∏—Ç–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∑–∞—â–∏—Ç—ã")
        return
    
    # –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã
    print("\nüìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:")
    status = manager.get_system_status()
    
    print(f"   ‚Ä¢ –ü—É—Ç—å –∫ —Ä–µ–µ—Å—Ç—Ä—É: {status['registry_path']}")
    print(f"   ‚Ä¢ –§—É–Ω–∫—Ü–∏–π –ø–æ–¥ –∑–∞—â–∏—Ç–æ–π: {status['protection']['current_functions_count']}")
    print(f"   ‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω: {'‚úÖ' if status['monitoring']['is_monitoring'] else '‚ùå'}")
    print(f"   ‚Ä¢ –í–∞–ª–∏–¥–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: {'‚úÖ' if status['validation']['validation_success'] else '‚ùå'}")
    
    health = status['system_health']
    print(f"   ‚Ä¢ –û—Ü–µ–Ω–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è: {health['score']}/100 ({health['status']})")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if health['recommendations']:
        print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        for rec in health['recommendations']:
            print(f"   {rec}")
    
    # –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    print(f"\nüö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞:")
    emergency = manager.emergency_protection_check()
    print(f"   ‚Ä¢ –£—Ä–æ–≤–µ–Ω—å —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ—Å—Ç–∏: {emergency['emergency_level']}")
    print(f"   ‚Ä¢ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º: {len(emergency['critical_issues'])}")
    
    if emergency['critical_issues']:
        for issue in emergency['critical_issues']:
            print(f"   {issue}")
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞
    print(f"\nüìã –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞ –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö...")
    report_path = manager.generate_problem_report()
    if report_path:
        print(f"‚úÖ –û—Ç—á—ë—Ç: {report_path}")
    
    print(f"\nüõ°Ô∏è –°–∏—Å—Ç–µ–º–∞ –∑–∞—â–∏—Ç—ã —Ä–µ–µ—Å—Ç—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞!")
    print(f"üìÅ –õ–æ–≥–∏: logs/registry_security_manager.log")

if __name__ == "__main__":
    main()