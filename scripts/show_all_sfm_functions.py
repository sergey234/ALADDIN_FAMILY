#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –≤ SafeFunctionManager
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ, —Å–ø—è—â–∏–µ –∏ –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
"""

import sys
import os
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append('/Users/sergejhlystov/ALADDIN_NEW')

try:
    from security.safe_function_manager import SafeFunctionManager, FunctionStatus
    from core.base import SecurityLevel
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    sys.exit(1)

def show_all_functions():
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ SafeFunctionManager"""
    print("üîç –ü–û–õ–ù–´–ô –°–ü–ò–°–û–ö –§–£–ù–ö–¶–ò–ô –í SAFEFUNCTIONMANAGER")
    print("=" * 60)
    
    try:
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä SafeFunctionManager
        sfm = SafeFunctionManager("MainSafeFunctionManager")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
        if not sfm.initialize():
            print("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SafeFunctionManager")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏
        all_functions = sfm.get_all_functions_status()
        
        if not all_functions:
            print("üì≠ –§—É–Ω–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ SafeFunctionManager")
            return
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É
        enabled_functions = []
        sleeping_functions = []
        disabled_functions = []
        testing_functions = []
        error_functions = []
        maintenance_functions = []
        
        for func in all_functions:
            status = func.get('status', 'unknown')
            if status == 'enabled':
                enabled_functions.append(func)
            elif status == 'sleeping':
                sleeping_functions.append(func)
            elif status == 'disabled':
                disabled_functions.append(func)
            elif status == 'testing':
                testing_functions.append(func)
            elif status == 'error':
                error_functions.append(func)
            elif status == 'maintenance':
                maintenance_functions.append(func)
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print(f"üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π: {len(all_functions)}")
        print(f"   ‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {len(enabled_functions)}")
        print(f"   üò¥ –°–ø—è—â–∏—Ö: {len(sleeping_functions)}")
        print(f"   ‚ùå –û—Ç–∫–ª—é—á–µ–Ω–Ω—ã—Ö: {len(disabled_functions)}")
        print(f"   üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º—ã—Ö: {len(testing_functions)}")
        print(f"   ‚ö†Ô∏è  –° –æ—à–∏–±–∫–∞–º–∏: {len(error_functions)}")
        print(f"   üîß –ù–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏: {len(maintenance_functions)}")
        print()
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        if enabled_functions:
            print("‚úÖ –ê–ö–¢–ò–í–ù–´–ï –§–£–ù–ö–¶–ò–ò:")
            print("-" * 40)
            for func in enabled_functions:
                critical = "üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø" if func.get('is_critical', False) else "üü¢ –û–±—ã—á–Ω–∞—è"
                security_level = func.get('security_level', 'unknown')
                func_type = func.get('function_type', 'unknown')
                print(f"   ‚Ä¢ {func.get('name', 'Unknown')} ({func.get('function_id', 'unknown')})")
                print(f"     {critical} | –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: {security_level} | –¢–∏–ø: {func_type}")
                print(f"     –û–ø–∏—Å–∞–Ω–∏–µ: {func.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}")
                if func.get('execution_count', 0) > 0:
                    print(f"     –í—ã–ø–æ–ª–Ω–µ–Ω–∏–π: {func.get('execution_count', 0)} | –£—Å–ø–µ—à–Ω—ã—Ö: {func.get('success_count', 0)}")
                print()
        
        # –°–ø—è—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
        if sleeping_functions:
            print("üò¥ –°–ü–Ø–©–ò–ï –§–£–ù–ö–¶–ò–ò:")
            print("-" * 40)
            for func in sleeping_functions:
                critical = "üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø" if func.get('is_critical', False) else "üü¢ –û–±—ã—á–Ω–∞—è"
                security_level = func.get('security_level', 'unknown')
                func_type = func.get('function_type', 'unknown')
                auto_sleep = "ü§ñ –ê–≤—Ç–æ-—Å–æ–Ω" if func.get('auto_sleep', False) else "üë§ –†—É—á–Ω–æ–π —Å–æ–Ω"
                sleep_hours = func.get('sleep_after_hours', 24)
                print(f"   ‚Ä¢ {func.get('name', 'Unknown')} ({func.get('function_id', 'unknown')})")
                print(f"     {critical} | –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: {security_level} | –¢–∏–ø: {func_type}")
                print(f"     {auto_sleep} | –°–æ–Ω —á–µ—Ä–µ–∑: {sleep_hours}—á")
                print(f"     –û–ø–∏—Å–∞–Ω–∏–µ: {func.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}")
                if func.get('last_activity'):
                    print(f"     –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {func.get('last_activity')}")
                print()
        
        # –û—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        if disabled_functions:
            print("‚ùå –û–¢–ö–õ–Æ–ß–ï–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò:")
            print("-" * 40)
            for func in disabled_functions:
                critical = "üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø" if func.get('is_critical', False) else "üü¢ –û–±—ã—á–Ω–∞—è"
                security_level = func.get('security_level', 'unknown')
                func_type = func.get('function_type', 'unknown')
                print(f"   ‚Ä¢ {func.get('name', 'Unknown')} ({func.get('function_id', 'unknown')})")
                print(f"     {critical} | –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: {security_level} | –¢–∏–ø: {func_type}")
                print(f"     –û–ø–∏—Å–∞–Ω–∏–µ: {func.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}")
                print()
        
        # –§—É–Ω–∫—Ü–∏–∏ —Å –æ—à–∏–±–∫–∞–º–∏
        if error_functions:
            print("‚ö†Ô∏è  –§–£–ù–ö–¶–ò–ò –° –û–®–ò–ë–ö–ê–ú–ò:")
            print("-" * 40)
            for func in error_functions:
                critical = "üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø" if func.get('is_critical', False) else "üü¢ –û–±—ã—á–Ω–∞—è"
                security_level = func.get('security_level', 'unknown')
                func_type = func.get('function_type', 'unknown')
                error_count = func.get('error_count', 0)
                print(f"   ‚Ä¢ {func.get('name', 'Unknown')} ({func.get('function_id', 'unknown')})")
                print(f"     {critical} | –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: {security_level} | –¢–∏–ø: {func_type}")
                print(f"     –û—à–∏–±–æ–∫: {error_count}")
                print(f"     –û–ø–∏—Å–∞–Ω–∏–µ: {func.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}")
                print()
        
        # –§—É–Ω–∫—Ü–∏–∏ –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏
        if maintenance_functions:
            print("üîß –§–£–ù–ö–¶–ò–ò –ù–ê –û–ë–°–õ–£–ñ–ò–í–ê–ù–ò–ò:")
            print("-" * 40)
            for func in maintenance_functions:
                critical = "üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø" if func.get('is_critical', False) else "üü¢ –û–±—ã—á–Ω–∞—è"
                security_level = func.get('security_level', 'unknown')
                func_type = func.get('function_type', 'unknown')
                print(f"   ‚Ä¢ {func.get('name', 'Unknown')} ({func.get('function_id', 'unknown')})")
                print(f"     {critical} | –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: {security_level} | –¢–∏–ø: {func_type}")
                print(f"     –û–ø–∏—Å–∞–Ω–∏–µ: {func.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}")
                print()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        if testing_functions:
            print("üß™ –¢–ï–°–¢–ò–†–£–ï–ú–´–ï –§–£–ù–ö–¶–ò–ò:")
            print("-" * 40)
            for func in testing_functions:
                critical = "üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø" if func.get('is_critical', False) else "üü¢ –û–±—ã—á–Ω–∞—è"
                security_level = func.get('security_level', 'unknown')
                func_type = func.get('function_type', 'unknown')
                print(f"   ‚Ä¢ {func.get('name', 'Unknown')} ({func.get('function_id', 'unknown')})")
                print(f"     {critical} | –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: {security_level} | –¢–∏–ø: {func_type}")
                print(f"     –û–ø–∏—Å–∞–Ω–∏–µ: {func.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}")
                print()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —Ñ—É–Ω–∫—Ü–∏–π
        print("üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –¢–ò–ü–ê–ú –§–£–ù–ö–¶–ò–ô:")
        print("-" * 40)
        function_types = {}
        for func in all_functions:
            func_type = func.get('function_type', 'unknown')
            if func_type not in function_types:
                function_types[func_type] = {'total': 0, 'enabled': 0, 'sleeping': 0, 'disabled': 0, 'error': 0}
            
            function_types[func_type]['total'] += 1
            status = func.get('status', 'unknown')
            if status in function_types[func_type]:
                function_types[func_type][status] += 1
        
        for func_type, stats in function_types.items():
            print(f"   üì¶ {func_type.upper()}:")
            print(f"      –í—Å–µ–≥–æ: {stats['total']} | –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['enabled']} | –°–ø—è—â–∏—Ö: {stats['sleeping']} | –û—Ç–∫–ª—é—á–µ–Ω–Ω—ã—Ö: {stats['disabled']}")
            if stats['error'] > 0:
                print(f"      ‚ö†Ô∏è  –° –æ—à–∏–±–∫–∞–º–∏: {stats['error']}")
            print()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—Ä–æ–≤–Ω—è–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        print("üõ°Ô∏è  –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –£–†–û–í–ù–Ø–ú –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò:")
        print("-" * 40)
        security_levels = {}
        for func in all_functions:
            level = func.get('security_level', 'unknown')
            if level not in security_levels:
                security_levels[level] = {'total': 0, 'enabled': 0, 'sleeping': 0, 'disabled': 0}
            
            security_levels[level]['total'] += 1
            status = func.get('status', 'unknown')
            if status in security_levels[level]:
                security_levels[level][status] += 1
        
        for level, stats in security_levels.items():
            level_name = {
                'high': 'üî¥ –í–´–°–û–ö–ò–ô',
                'medium': 'üü° –°–†–ï–î–ù–ò–ô', 
                'low': 'üü¢ –ù–ò–ó–ö–ò–ô'
            }.get(level, f'‚ùì {level.upper()}')
            
            print(f"   {level_name}:")
            print(f"      –í—Å–µ–≥–æ: {stats['total']} | –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['enabled']} | –°–ø—è—â–∏—Ö: {stats['sleeping']} | –û—Ç–∫–ª—é—á–µ–Ω–Ω—ã—Ö: {stats['disabled']}")
            print()
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ SFM
        print("üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê SFM:")
        print("-" * 40)
        sfm_stats = sfm.get_safe_function_stats()
        print(f"   –í—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π: {sfm_stats.get('total_executions', 0)}")
        print(f"   –£—Å–ø–µ—à–Ω—ã—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π: {sfm_stats.get('successful_executions', 0)}")
        print(f"   –ù–µ—É–¥–∞—á–Ω—ã—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π: {sfm_stats.get('failed_executions', 0)}")
        print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π: {sfm_stats.get('active_executions', 0)}")
        success_rate = sfm_stats.get('execution_success_rate', 0)
        print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
        print()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–ø—è—â–µ–≥–æ —Ä–µ–∂–∏–º–∞
        print("üò¥ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ü–Ø–©–ï–ì–û –†–ï–ñ–ò–ú–ê:")
        print("-" * 40)
        sleep_stats = sfm.get_sleep_statistics()
        print(f"   –ü–µ—Ä–µ—Ö–æ–¥–æ–≤ –≤ —Å–æ–Ω: {sleep_stats.get('sleep_transitions', 0)}")
        print(f"   –ü—Ä–æ–±—É–∂–¥–µ–Ω–∏–π: {sleep_stats.get('wake_transitions', 0)}")
        print(f"   –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–Ω–æ–≤: {sleep_stats.get('auto_sleep_count', 0)}")
        print(f"   –†—É—á–Ω—ã—Ö —Å–Ω–æ–≤: {sleep_stats.get('manual_sleep_count', 0)}")
        print(f"   –†—É—á–Ω—ã—Ö –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–π: {sleep_stats.get('manual_wake_count', 0)}")
        print(f"   –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–Ω–æ–º –∞–∫—Ç–∏–≤–Ω–æ: {'–î–∞' if sleep_stats.get('sleep_management_active', False) else '–ù–µ—Ç'}")
        print(f"   –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {sleep_stats.get('sleep_check_interval', 0)}—Å")
        print(f"   –í—Ä–µ–º—è –¥–æ —Å–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {sleep_stats.get('default_sleep_hours', 0)}—á")
        print()
        
        print("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    show_all_functions()