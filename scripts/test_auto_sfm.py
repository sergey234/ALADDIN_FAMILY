#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Safe Function Manager (SFM)
–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ SFM –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
"""

import sys
import os
sys.path.insert(0, '/Users/sergejhlystov/ALADDIN_NEW')

from security.safe_function_manager import SafeFunctionManager
import time

def test_auto_sfm():
    """–¢–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SFM"""
    print("=" * 80)
    print("üß™ –¢–ï–°–¢ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ô –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò SFM")
    print("=" * 80)
    
    try:
        # –°–æ–∑–¥–∞–µ–º SFM - –¥–æ–ª–∂–µ–Ω –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        print("1. –°–æ–∑–¥–∞–Ω–∏–µ SFM (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è)...")
        sfm = SafeFunctionManager("AutoSFM")
        
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        print("2. –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏...")
        time.sleep(2)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        print("3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ SFM...")
        status = sfm.get_status()
        print(f"   –°—Ç–∞—Ç—É—Å: {status.get('status', 'N/A')}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
        print("4. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π...")
        all_functions = sfm.get_all_functions_status()
        
        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ô –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò:")
        print(f"   –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π: {len(all_functions)}")
        
        if len(all_functions) > 0:
            print("‚úÖ SFM –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!")
            print("‚úÖ –§—É–Ω–∫—Ü–∏–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!")
        else:
            print("‚ùå SFM –ù–ï –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!")
            print("‚ùå –§—É–Ω–∫—Ü–∏–∏ –ù–ï –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
        print(f"\nüìã –ó–ê–†–ï–ì–ò–°–¢–†–ò–†–û–í–ê–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò:")
        print("-" * 60)
        
        for i, function in enumerate(all_functions, 1):
            function_id = function.get('function_id', 'N/A')
            name = function.get('name', 'N/A')
            status = function.get('status', 'N/A')
            is_critical = function.get('is_critical', False)
            
            # –°—Ç–∞—Ç—É—Å –∏–∫–æ–Ω–∫–∞
            status_icon = "üü¢" if status == 'enabled' else "üî¥" if status == 'disabled' else "üò¥"
            critical_icon = "‚ö†Ô∏è" if is_critical else "  "
            
            print(f"{i:2d}. {status_icon} {critical_icon} {name} ({function_id})")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        enabled_count = len([f for f in all_functions if f.get('status') == 'enabled'])
        disabled_count = len([f for f in all_functions if f.get('status') == 'disabled'])
        sleeping_count = len([f for f in all_functions if f.get('status') == 'sleeping'])
        
        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   üü¢ –ê–∫—Ç–∏–≤–Ω—ã–µ: {enabled_count}")
        print(f"   üî¥ –û—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ: {disabled_count}")
        print(f"   üò¥ –í —Å–ø—è—â–µ–º —Ä–µ–∂–∏–º–µ: {sleeping_count}")
        
        print("\n" + "=" * 80)
        if len(all_functions) > 0:
            print("‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù - SFM —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!")
        else:
            print("‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù - SFM –ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!")
        print("=" * 80)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_auto_sfm()