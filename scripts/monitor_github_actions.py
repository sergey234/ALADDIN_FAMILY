#!/usr/bin/env python3
"""
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Å–µ—Ö GitHub Actions workflow
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö workflow –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ
"""

import requests
import json
import time
from datetime import datetime
import os

class GitHubActionsMonitor:
    def __init__(self, repo_owner="sergey234", repo_name="ALADDIN_FAMILY"):
        self.repo_owner = repo_owner
        self.repo_name = repo_name
        self.base_url = f"https://api.github.com/repos/{repo_owner}/{repo_name}"
        self.headers = {
            "Accept": "application/vnd.github.v3+json",
            "User-Agent": "ALADDIN-Monitor"
        }
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        token = os.getenv("GITHUB_TOKEN")
        if token:
            self.headers["Authorization"] = f"token {token}"

    def get_workflow_runs(self, limit=10):
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—É—Å–∫–∏ workflow"""
        try:
            url = f"{self.base_url}/actions/runs"
            params = {"per_page": limit}
            
            response = requests.get(url, headers=self.headers, params=params)
            response.raise_for_status()
            
            return response.json()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è workflow runs: {e}")
            return None

    def get_workflow_jobs(self, run_id):
        """–ü–æ–ª—É—á–∏—Ç—å jobs –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ workflow run"""
        try:
            url = f"{self.base_url}/actions/runs/{run_id}/jobs"
            response = requests.get(url, headers=self.headers)
            response.raise_for_status()
            
            return response.json()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è jobs –¥–ª—è run {run_id}: {e}")
            return None

    def get_workflow_logs(self, run_id, job_id):
        """–ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ job"""
        try:
            url = f"{self.base_url}/actions/jobs/{job_id}/logs"
            response = requests.get(url, headers=self.headers)
            response.raise_for_status()
            
            return response.text
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤ –¥–ª—è job {job_id}: {e}")
            return None

    def format_status(self, status, conclusion):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å —ç–º–æ–¥–∑–∏"""
        if conclusion == "success":
            return "‚úÖ SUCCESS"
        elif conclusion == "failure":
            return "‚ùå FAILURE"
        elif conclusion == "cancelled":
            return "‚èπÔ∏è CANCELLED"
        elif status == "in_progress":
            return "üîÑ IN PROGRESS"
        elif status == "queued":
            return "‚è≥ QUEUED"
        else:
            return f"‚ö†Ô∏è {status.upper()}"

    def monitor_all_workflows(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –≤—Å–µ workflow"""
        print("üöÄ ALADDIN GITHUB ACTIONS MONITOR")
        print("=" * 60)
        print(f"üìÅ Repository: {self.repo_owner}/{self.repo_name}")
        print(f"üïê Time: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print("=" * 60)
        
        # –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ workflow runs
        runs_data = self.get_workflow_runs(20)
        if not runs_data:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ workflow runs")
            return
        
        workflow_runs = runs_data.get("workflow_runs", [])
        
        if not workflow_runs:
            print("üì≠ –ù–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö workflow")
            return
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(workflow_runs)} –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø—É—Å–∫–æ–≤")
        print()
        
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –ø–æ workflow
        workflows = {}
        for run in workflow_runs:
            workflow_name = run.get("name", "Unknown")
            if workflow_name not in workflows:
                workflows[workflow_name] = []
            workflows[workflow_name].append(run)
        
        # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥–æ–≥–æ workflow
        for workflow_name, runs in workflows.items():
            print(f"üîß WORKFLOW: {workflow_name}")
            print("-" * 40)
            
            for run in runs[:3]:  # –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –∑–∞–ø—É—Å–∫–∞
                run_id = run.get("id")
                status = run.get("status")
                conclusion = run.get("conclusion")
                created_at = run.get("created_at", "")
                head_sha = run.get("head_sha", "")[:8]
                html_url = run.get("html_url", "")
                
                status_emoji = self.format_status(status, conclusion)
                
                print(f"  {status_emoji} Run #{run_id}")
                print(f"     Commit: {head_sha}")
                print(f"     Time: {created_at}")
                print(f"     URL: {html_url}")
                
                # –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ jobs
                jobs_data = self.get_workflow_jobs(run_id)
                if jobs_data and "jobs" in jobs_data:
                    jobs = jobs_data["jobs"]
                    for job in jobs:
                        job_name = job.get("name", "Unknown Job")
                        job_status = job.get("status")
                        job_conclusion = job.get("conclusion")
                        job_status_emoji = self.format_status(job_status, job_conclusion)
                        
                        print(f"     ‚îî‚îÄ {job_status_emoji} {job_name}")
                        
                        # –ï—Å–ª–∏ job —É–ø–∞–ª, –ø–æ–∫–∞–∑–∞—Ç—å –∫—Ä–∞—Ç–∫—É—é –æ—à–∏–±–∫—É
                        if job_conclusion == "failure":
                            print(f"        ‚ö†Ô∏è Job failed - check logs for details")
                
                print()
            
            print()
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print("üìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
        print("-" * 40)
        
        total_runs = len(workflow_runs)
        success_runs = len([r for r in workflow_runs if r.get("conclusion") == "success"])
        failure_runs = len([r for r in workflow_runs if r.get("conclusion") == "failure"])
        in_progress_runs = len([r for r in workflow_runs if r.get("status") == "in_progress"])
        
        print(f"üìä –í—Å–µ–≥–æ –∑–∞–ø—É—Å–∫–æ–≤: {total_runs}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {success_runs}")
        print(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: {failure_runs}")
        print(f"üîÑ –í –ø—Ä–æ—Ü–µ—Å—Å–µ: {in_progress_runs}")
        
        if total_runs > 0:
            success_rate = (success_runs / total_runs) * 100
            print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
        
        print("=" * 60)
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if failure_runs > 0:
            print("üîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –Ω–µ—É–¥–∞—á–Ω—ã—Ö workflow")
            print("2. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã –Ω–∞ –º–µ—Å—Ç–µ")
            print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
        else:
            print("üéâ –í–°–ï WORKFLOW –†–ê–ë–û–¢–ê–Æ–¢ –û–¢–õ–ò–ß–ù–û!")

    def check_specific_workflow(self, workflow_name):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π workflow"""
        print(f"üîç –ü–†–û–í–ï–†–ö–ê WORKFLOW: {workflow_name}")
        print("=" * 50)
        
        runs_data = self.get_workflow_runs(50)
        if not runs_data:
            return
        
        workflow_runs = runs_data.get("workflow_runs", [])
        matching_runs = [r for r in workflow_runs if r.get("name") == workflow_name]
        
        if not matching_runs:
            print(f"‚ùå Workflow '{workflow_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        latest_run = matching_runs[0]
        run_id = latest_run.get("id")
        status = latest_run.get("status")
        conclusion = latest_run.get("conclusion")
        
        print(f"üìä –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—É—Å–∫: #{run_id}")
        print(f"üìà –°—Ç–∞—Ç—É—Å: {self.format_status(status, conclusion)}")
        print(f"üïê –í—Ä–µ–º—è: {latest_run.get('created_at', 'Unknown')}")
        print(f"üîó URL: {latest_run.get('html_url', 'N/A')}")
        
        # –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ jobs
        jobs_data = self.get_workflow_jobs(run_id)
        if jobs_data and "jobs" in jobs_data:
            jobs = jobs_data["jobs"]
            print(f"\nüìã JOBS ({len(jobs)}):")
            for job in jobs:
                job_name = job.get("name", "Unknown")
                job_status = job.get("status")
                job_conclusion = job.get("conclusion")
                job_status_emoji = self.format_status(job_status, job_conclusion)
                
                print(f"  {job_status_emoji} {job_name}")
                
                if job_conclusion == "failure":
                    print(f"     ‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ job - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏")

def main():
    monitor = GitHubActionsMonitor()
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    print("üöÄ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ú–û–ù–ò–¢–û–†–ò–ù–ì GITHUB ACTIONS")
    print("=" * 60)
    
    # –°–Ω–∞—á–∞–ª–∞ –±—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    print("üîç –ë–´–°–¢–†–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê...")
    runs_data = monitor.get_workflow_runs(10)
    if runs_data:
        workflow_runs = runs_data.get("workflow_runs", [])
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(workflow_runs)} –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø—É—Å–∫–æ–≤:")
        print()
        
        for run in workflow_runs[:5]:
            name = run.get("name", "Unknown")
            status = run.get("status")
            conclusion = run.get("conclusion")
            status_emoji = monitor.format_status(status, conclusion)
            created_at = run.get("created_at", "")[:19].replace("T", " ")
            head_sha = run.get("head_sha", "")[:8]
            print(f"  {status_emoji} {name} | {head_sha} | {created_at}")
        
        print()
    
    # –ó–∞—Ç–µ–º –ø–æ–ª–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    print("üìã –ü–û–õ–ù–´–ô –ú–û–ù–ò–¢–û–†–ò–ù–ì...")
    print()
    monitor.monitor_all_workflows()

if __name__ == "__main__":
    main()
