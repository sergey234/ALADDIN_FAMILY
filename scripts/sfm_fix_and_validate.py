#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
SFM Fix and Validate - –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ SFM —Ä–µ–µ—Å—Ç—Ä–∞
"""

import json
import os
import sys
import re
from datetime import datetime
from pathlib import Path

class SFMFixAndValidate:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ SFM —Ä–µ–µ—Å—Ç—Ä–∞"""
    
    def __init__(self):
        self.registry_path = "data/sfm/function_registry.json"
        self.registry_data = None
        self.backup_path = None
        self.errors = []
        self.fixes_applied = []
    
    def create_backup(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        self.backup_path = f"data/sfm/function_registry_backup_fix_{timestamp}.json"
        
        try:
            os.makedirs(os.path.dirname(self.backup_path), exist_ok=True)
            with open(self.registry_path, 'r', encoding='utf-8') as src:
                with open(self.backup_path, 'w', encoding='utf-8') as dst:
                    dst.write(src.read())
            print(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {self.backup_path}")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
            return False
    
    def load_registry(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ SFM —Ä–µ–µ—Å—Ç—Ä–∞"""
        try:
            with open(self.registry_path, 'r', encoding='utf-8') as f:
                self.registry_data = json.load(f)
            return True
        except json.JSONDecodeError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ JSON: {e}")
            print(f"–°—Ç—Ä–æ–∫–∞: {e.lineno if hasattr(e, 'lineno') else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}")
            return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–µ—Å—Ç—Ä–∞: {e}")
            return False
    
    def save_registry(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ SFM —Ä–µ–µ—Å—Ç—Ä–∞"""
        try:
            with open(self.registry_path, 'w', encoding='utf-8') as f:
                json.dump(self.registry_data, f, indent=2, ensure_ascii=False)
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–µ—Å—Ç—Ä–∞: {e}")
            return False
    
    def validate_structure(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ä–µ–µ—Å—Ç—Ä–∞"""
        print("üîç –í–ê–õ–ò–î–ê–¶–ò–Ø –°–¢–†–£–ö–¢–£–†–´ SFM –†–ï–ï–°–¢–†–ê")
        print("=" * 50)
        
        if not self.registry_data:
            self.errors.append("–†–µ–µ—Å—Ç—Ä –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –±–ª–æ–∫–æ–≤
        required_blocks = ['functions', 'statistics']
        for block in required_blocks:
            if block not in self.registry_data:
                self.errors.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –±–ª–æ–∫: {block}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∞ functions
        functions = self.registry_data.get('functions', {})
        if not isinstance(functions, dict):
            self.errors.append("–ë–ª–æ–∫ functions –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º")
            return False
        
        print(f"‚úÖ –ë–ª–æ–∫ functions –Ω–∞–π–¥–µ–Ω: {len(functions)} —Ñ—É–Ω–∫—Ü–∏–π")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
        invalid_functions = []
        for func_id, func_data in functions.items():
            if not isinstance(func_data, dict):
                invalid_functions.append(f"{func_id}: –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º")
                continue
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            required_fields = ['function_id', 'name', 'function_type', 'status']
            for field in required_fields:
                if field not in func_data:
                    invalid_functions.append(f"{func_id}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ {field}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ function_id
            if 'function_id' in func_data and func_data['function_id'] != func_id:
                invalid_functions.append(f"{func_id}: function_id –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∫–ª—é—á–æ–º")
        
        if invalid_functions:
            self.errors.extend(invalid_functions)
            print(f"‚ùå –ù–∞–π–¥–µ–Ω–æ {len(invalid_functions)} –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π")
            for error in invalid_functions:
                print(f"  - {error}")
        else:
            print("‚úÖ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–º–µ—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É")
        
        return len(invalid_functions) == 0
    
    def fix_structure_issues(self):
        """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
        print("\nüîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú –°–¢–†–£–ö–¢–£–†–´")
        print("=" * 50)
        
        if not self.registry_data:
            return False
        
        functions = self.registry_data.get('functions', {})
        fixes_applied = 0
        
        for func_id, func_data in functions.items():
            if not isinstance(func_data, dict):
                continue
            
            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–≥–æ function_id
            if 'function_id' not in func_data:
                func_data['function_id'] = func_id
                self.fixes_applied.append(f"{func_id}: –¥–æ–±–∞–≤–ª–µ–Ω function_id")
                fixes_applied += 1
            
            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ—Å–æ–≤–ø–∞–¥–∞—é—â–µ–≥–æ function_id
            elif func_data.get('function_id') != func_id:
                func_data['function_id'] = func_id
                self.fixes_applied.append(f"{func_id}: –∏—Å–ø—Ä–∞–≤–ª–µ–Ω function_id")
                fixes_applied += 1
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            if 'name' not in func_data:
                func_data['name'] = func_id.replace('_', ' ').title()
                self.fixes_applied.append(f"{func_id}: –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ name")
                fixes_applied += 1
            
            if 'function_type' not in func_data:
                func_data['function_type'] = 'unknown'
                self.fixes_applied.append(f"{func_id}: –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ function_type")
                fixes_applied += 1
            
            if 'status' not in func_data:
                func_data['status'] = 'sleeping'
                self.fixes_applied.append(f"{func_id}: –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ status")
                fixes_applied += 1
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø–æ–ª–µ–π
            if 'created_at' not in func_data:
                func_data['created_at'] = datetime.now().isoformat()
                self.fixes_applied.append(f"{func_id}: –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ created_at")
                fixes_applied += 1
            
            if 'is_critical' not in func_data:
                func_data['is_critical'] = False
                self.fixes_applied.append(f"{func_id}: –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ is_critical")
                fixes_applied += 1
            
            if 'auto_enable' not in func_data:
                func_data['auto_enable'] = False
                self.fixes_applied.append(f"{func_id}: –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ auto_enable")
                fixes_applied += 1
        
        if fixes_applied > 0:
            print(f"‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω–æ {fixes_applied} –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
            for fix in self.fixes_applied:
                print(f"  - {fix}")
        else:
            print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è")
        
        return True
    
    def update_statistics(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        print("\nüìä –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–¢–ê–¢–ò–°–¢–ò–ö–ò")
        print("=" * 50)
        
        if not self.registry_data:
            return False
        
        functions = self.registry_data.get('functions', {})
        
        stats = {
            'total_functions': len(functions),
            'active_functions': sum(1 for f in functions.values() if isinstance(f, dict) and f.get('status') == 'active'),
            'sleeping_functions': sum(1 for f in functions.values() if isinstance(f, dict) and f.get('status') == 'sleeping'),
            'critical_functions': sum(1 for f in functions.values() if isinstance(f, dict) and f.get('is_critical', False)),
            'auto_enable_functions': sum(1 for f in functions.values() if isinstance(f, dict) and f.get('auto_enable', False))
        }
        
        self.registry_data['statistics'] = stats
        self.registry_data['last_updated'] = datetime.now().isoformat()
        
        print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:")
        print(f"  - –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π: {stats['total_functions']}")
        print(f"  - –ê–∫—Ç–∏–≤–Ω—ã–µ: {stats['active_functions']}")
        print(f"  - –°–ø—è—â–∏–µ: {stats['sleeping_functions']}")
        print(f"  - –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ: {stats['critical_functions']}")
        print(f"  - –ê–≤—Ç–æ–≤–∫–ª—é—á–µ–Ω–∏–µ: {stats['auto_enable_functions']}")
        
        return True
    
    def validate_json_syntax(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è JSON —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞"""
        print("\nüîç –í–ê–õ–ò–î–ê–¶–ò–Ø JSON –°–ò–ù–¢–ê–ö–°–ò–°–ê")
        print("=" * 50)
        
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            json_str = json.dumps(self.registry_data, indent=2, ensure_ascii=False)
            parsed_data = json.loads(json_str)
            
            print("‚úÖ JSON —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ JSON —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞: {e}")
            return False
    
    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞"""
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        report_file = f"data/sfm/fix_validate_report_{timestamp}.json"
        
        report = {
            'timestamp': datetime.now().isoformat(),
            'registry_path': self.registry_path,
            'backup_path': self.backup_path,
            'errors_found': self.errors,
            'fixes_applied': self.fixes_applied,
            'final_stats': self.registry_data.get('statistics', {}) if self.registry_data else {}
        }
        
        try:
            os.makedirs(os.path.dirname(report_file), exist_ok=True)
            with open(report_file, 'w', encoding='utf-8') as f:
                json.dump(report, f, indent=2, ensure_ascii=False)
            print(f"\n‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ SFM FIX AND VALIDATE")
    print("=" * 50)
    
    fixer = SFMFixAndValidate()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
    if not fixer.create_backup():
        sys.exit(1)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–µ—Å—Ç—Ä–∞
    if not fixer.load_registry():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–µ—Å—Ç—Ä")
        sys.exit(1)
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    structure_valid = fixer.validate_structure()
    
    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º
    if not structure_valid:
        fixer.fix_structure_issues()
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    fixer.update_statistics()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è JSON —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
    json_valid = fixer.validate_json_syntax()
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–µ—Å—Ç—Ä–∞
    if fixer.save_registry():
        print("\n‚úÖ –†–µ–µ—Å—Ç—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
    else:
        print("\n‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–µ—Å—Ç—Ä–∞")
        sys.exit(1)
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
    fixer.generate_report()
    
    if structure_valid and json_valid:
        print("\nüéâ –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\n‚ö†Ô∏è  –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏")

if __name__ == "__main__":
    main()