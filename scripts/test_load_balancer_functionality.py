#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ LoadBalancer
"""

import asyncio
import sys
import os
import time
import json
from datetime import datetime, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from security.microservices.load_balancer import (
    LoadBalancer, 
    LoadBalancingAlgorithm, 
    ServiceEndpoint, 
    LoadBalancingRequest,
    LoadBalancingResponse
)

class LoadBalancerTester:
    """–¢–µ—Å—Ç–µ—Ä —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ LoadBalancer"""
    
    def __init__(self):
        self.test_results = []
        self.load_balancer = None
        
    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üß™ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï LOADBALANCER")
        print("=" * 60)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ LoadBalancer
        await self.test_initialization()
        
        # –¢–µ—Å—Ç—ã –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
        await self.test_service_management()
        await self.test_algorithm_selection()
        await self.test_load_balancing()
        await self.test_health_checks()
        await self.test_metrics_collection()
        
        # –¢–µ—Å—Ç—ã –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
        await self.test_ml_optimization()
        await self.test_adaptive_balancing()
        await self.test_error_handling()
        
        # –¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        await self.test_performance()
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        self.print_test_summary()
        
    async def test_initialization(self):
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ LoadBalancer"""
        print("\nüîß –¢–ï–°–¢ 1: –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø")
        print("-" * 30)
        
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ LoadBalancer —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
            config = {
                'health_check_interval': 5,
                'health_check_timeout': 3,
                'health_check_path': '/health',
                'default_algorithm': 'round_robin',
                'database_url': 'sqlite:///test_load_balancer.db',
                'redis_url': 'redis://localhost:6379/1'
            }
            
            self.load_balancer = LoadBalancer(name="TestLoadBalancer", config=config)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            assert self.load_balancer is not None, "LoadBalancer –Ω–µ —Å–æ–∑–¥–∞–Ω"
            assert self.load_balancer.name == "TestLoadBalancer", "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è"
            assert self.load_balancer.config == config, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"
            
            print("‚úÖ LoadBalancer —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            self.test_results.append(("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è", True, "–£—Å–ø–µ—à–Ω–æ"))
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            self.test_results.append(("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è", False, str(e)))
    
    async def test_service_management(self):
        """–¢–µ—Å—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞–º–∏"""
        print("\nüîß –¢–ï–°–¢ 2: –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ï–†–í–ò–°–ê–ú–ò")
        print("-" * 35)
        
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
            service1 = ServiceEndpoint(
                id="service_1",
                name="Test Service 1",
                url="localhost",
                port=8001,
                protocol="http",
                health_check_url="/health",
                max_connections=100,
                weight=1.0
            )
            
            service2 = ServiceEndpoint(
                id="service_2", 
                name="Test Service 2",
                url="localhost",
                port=8002,
                protocol="http",
                health_check_url="/health",
                max_connections=150,
                weight=1.5
            )
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤
            await self.load_balancer.add_service(service1)
            await self.load_balancer.add_service(service2)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            services = self.load_balancer.get_services()
            assert len(services) == 2, f"–û–∂–∏–¥–∞–ª–æ—Å—å 2 —Å–µ—Ä–≤–∏—Å–∞, –ø–æ–ª—É—á–µ–Ω–æ {len(services)}"
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞
            retrieved_service = self.load_balancer.get_service("service_1")
            assert retrieved_service is not None, "–°–µ—Ä–≤–∏—Å –Ω–µ –Ω–∞–π–¥–µ–Ω"
            assert retrieved_service.name == "Test Service 1", "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è —Å–µ—Ä–≤–∏—Å–∞"
            
            # –£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞
            await self.load_balancer.remove_service("service_1")
            services_after_removal = self.load_balancer.get_services()
            assert len(services_after_removal) == 1, "–°–µ—Ä–≤–∏—Å –Ω–µ —É–¥–∞–ª–µ–Ω"
            
            print("‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞–º–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            self.test_results.append(("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞–º–∏", True, "–£—Å–ø–µ—à–Ω–æ"))
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞–º–∏: {e}")
            self.test_results.append(("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞–º–∏", False, str(e)))
    
    async def test_algorithm_selection(self):
        """–¢–µ—Å—Ç –≤—ã–±–æ—Ä–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤"""
        print("\nüîß –¢–ï–°–¢ 3: –í–´–ë–û–† –ê–õ–ì–û–†–ò–¢–ú–û–í")
        print("-" * 30)
        
        try:
            # –¢–µ—Å—Ç –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤
            algorithms = [
                LoadBalancingAlgorithm.ROUND_ROBIN,
                LoadBalancingAlgorithm.LEAST_CONNECTIONS,
                LoadBalancingAlgorithm.WEIGHTED_ROUND_ROBIN,
                LoadBalancingAlgorithm.IP_HASH,
                LoadBalancingAlgorithm.LEAST_RESPONSE_TIME
            ]
            
            for algorithm in algorithms:
                # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
                success = self.load_balancer.set_algorithm(algorithm)
                assert success, f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º {algorithm.value}"
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
                current_algorithm = self.load_balancer.get_current_algorithm()
                assert current_algorithm == algorithm, f"–ê–ª–≥–æ—Ä–∏—Ç–º –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {algorithm.value}"
                
                print(f"  ‚úÖ {algorithm.value} - —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            print("‚úÖ –í—Å–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            self.test_results.append(("–í—ã–±–æ—Ä –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤", True, "–£—Å–ø–µ—à–Ω–æ"))
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤: {e}")
            self.test_results.append(("–í—ã–±–æ—Ä –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤", False, str(e)))
    
    async def test_load_balancing(self):
        """–¢–µ—Å—Ç –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ –Ω–∞–≥—Ä—É–∑–∫–∏"""
        print("\nüîß –¢–ï–°–¢ 4: –ë–ê–õ–ê–ù–°–ò–†–û–í–ö–ê –ù–ê–ì–†–£–ó–ö–ò")
        print("-" * 35)
        
        try:
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
            service1 = ServiceEndpoint(
                id="lb_service_1",
                name="LB Service 1", 
                url="localhost",
                port=8001,
                protocol="http",
                health_check_url="/health",
                max_connections=100,
                weight=1.0,
                is_healthy=True
            )
            
            service2 = ServiceEndpoint(
                id="lb_service_2",
                name="LB Service 2",
                url="localhost", 
                port=8002,
                protocol="http",
                health_check_url="/health",
                max_connections=100,
                weight=1.0,
                is_healthy=True
            )
            
            await self.load_balancer.add_service(service1)
            await self.load_balancer.add_service(service2)
            
            # –¢–µ—Å—Ç Round Robin
            self.load_balancer.set_algorithm(LoadBalancingAlgorithm.ROUND_ROBIN)
            
            selected_services = []
            for i in range(10):
                request = LoadBalancingRequest(
                    request_id=f"test_req_{i}",
                    service_name="default",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥—Ä—É–ø–ø—É 'default'
                    algorithm=LoadBalancingAlgorithm.ROUND_ROBIN,
                    client_ip="192.168.1.100",
                    headers={"User-Agent": "TestClient/1.0"},
                    body=None
                )
                
                response = await self.load_balancer.balance_load(request)
                if response and response.selected_service:
                    selected_services.append(response.selected_service.service_id)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä–∏–º–µ—Ä–Ω–æ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω—ã–º)
            service1_count = selected_services.count("lb_service_1")
            service2_count = selected_services.count("lb_service_2")
            
            print(f"  üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: Service 1: {service1_count}, Service 2: {service2_count}")
            
            # –¢–µ—Å—Ç Least Connections
            self.load_balancer.set_algorithm(LoadBalancingAlgorithm.LEAST_CONNECTIONS)
            
            # –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–∑–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏
            service1.current_connections = 5
            service2.current_connections = 15
            
            request = LoadBalancingRequest(
                request_id="test_least_conn",
                service_name="default",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥—Ä—É–ø–ø—É 'default'
                algorithm=LoadBalancingAlgorithm.LEAST_CONNECTIONS,
                client_ip="192.168.1.101"
            )
            
            response = await self.load_balancer.balance_load(request)
            if response and response.selected_service:
                # –î–æ–ª–∂–µ–Ω –≤—ã–±—Ä–∞—Ç—å —Å–µ—Ä–≤–∏—Å —Å –º–µ–Ω—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
                assert response.selected_service.service_id == "lb_service_1", "–ù–µ –≤—ã–±—Ä–∞–Ω —Å–µ—Ä–≤–∏—Å —Å –º–µ–Ω—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"
                print("  ‚úÖ Least Connections —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            
            print("‚úÖ –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –Ω–∞–≥—Ä—É–∑–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            self.test_results.append(("–ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –Ω–∞–≥—Ä—É–∑–∫–∏", True, "–£—Å–ø–µ—à–Ω–æ"))
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ –Ω–∞–≥—Ä—É–∑–∫–∏: {e}")
            self.test_results.append(("–ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –Ω–∞–≥—Ä—É–∑–∫–∏", False, str(e)))
    
    async def test_health_checks(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–æ–∫ –∑–¥–æ—Ä–æ–≤—å—è"""
        print("\nüîß –¢–ï–°–¢ 5: –ü–†–û–í–ï–†–ö–ò –ó–î–û–†–û–í–¨–Ø")
        print("-" * 30)
        
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ —Å health check
            health_service = ServiceEndpoint(
                id="health_service",
                name="Health Check Service",
                url="httpbin.org",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ç–µ—Å—Ç–∞
                port=80,
                protocol="http",
                health_check_url="/status/200",  # HTTPBin endpoint
                max_connections=100,
                weight=1.0
            )
            
            await self.load_balancer.add_service(health_service)
            
            # –ó–∞–ø—É—Å–∫ LoadBalancer –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ health checks
            await self.load_balancer.start()
            
            # –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è health check
            await asyncio.sleep(2)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–¥–æ—Ä–æ–≤—å—è
            service_status = self.load_balancer.get_service_status("health_service")
            print(f"  üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞: {service_status}")
            
            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ LoadBalancer
            await self.load_balancer.stop()
            
            print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            self.test_results.append(("–ü—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è", True, "–£—Å–ø–µ—à–Ω–æ"))
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–æ–∫ –∑–¥–æ—Ä–æ–≤—å—è: {e}")
            self.test_results.append(("–ü—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è", False, str(e)))
    
    async def test_metrics_collection(self):
        """–¢–µ—Å—Ç —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫"""
        print("\nüîß –¢–ï–°–¢ 6: –°–ë–û–† –ú–ï–¢–†–ò–ö")
        print("-" * 25)
        
        try:
            # –ó–∞–ø—É—Å–∫ LoadBalancer –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫
            await self.load_balancer.start()
            
            # –û–∂–∏–¥–∞–Ω–∏–µ —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫
            await asyncio.sleep(3)
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
            metrics = await self.load_balancer.get_metrics()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –º–µ—Ç—Ä–∏–∫
            assert metrics is not None, "–ú–µ—Ç—Ä–∏–∫–∏ –Ω–µ —Å–æ–±—Ä–∞–Ω—ã"
            assert 'total_requests' in metrics, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç total_requests"
            assert 'successful_requests' in metrics, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç successful_requests"
            assert 'failed_requests' in metrics, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç failed_requests"
            
            print(f"  üìä –ú–µ—Ç—Ä–∏–∫–∏: {json.dumps(metrics, indent=2)}")
            
            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ LoadBalancer
            await self.load_balancer.stop()
            
            print("‚úÖ –°–±–æ—Ä –º–µ—Ç—Ä–∏–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            self.test_results.append(("–°–±–æ—Ä –º–µ—Ç—Ä–∏–∫", True, "–£—Å–ø–µ—à–Ω–æ"))
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫: {e}")
            self.test_results.append(("–°–±–æ—Ä –º–µ—Ç—Ä–∏–∫", False, str(e)))
    
    async def test_ml_optimization(self):
        """–¢–µ—Å—Ç ML –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        print("\nüîß –¢–ï–°–¢ 7: ML –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø")
        print("-" * 30)
        
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ML
            test_services = {
                "ml_service_1": 85.0,
                "ml_service_2": 92.0,
                "ml_service_3": 78.0,
                "ml_service_4": 88.0
            }
            
            # –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
            current_load = 65.0
            optimal_algorithm = self.load_balancer._calculate_optimal_algorithm(
                current_load, test_services
            )
            
            assert optimal_algorithm is not None, "–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –Ω–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω"
            print(f"  ü§ñ –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º: {optimal_algorithm.value}")
            
            # –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏
            distribution_factor = self.load_balancer._analyze_load_distribution(test_services)
            print(f"  üìä –§–∞–∫—Ç–æ—Ä —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: {distribution_factor:.2f}")
            
            # –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
            correlation = self.load_balancer._calculate_health_correlation(test_services)
            print(f"  üîó –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –∑–¥–æ—Ä–æ–≤—å—è: {correlation:.2f}")
            
            print("‚úÖ ML –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            self.test_results.append(("ML –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è", True, "–£—Å–ø–µ—à–Ω–æ"))
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ ML –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}")
            self.test_results.append(("ML –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è", False, str(e)))
    
    async def test_adaptive_balancing(self):
        """–¢–µ—Å—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏"""
        print("\nüîß –¢–ï–°–¢ 8: –ê–î–ê–ü–¢–ò–í–ù–ê–Ø –ë–ê–õ–ê–ù–°–ò–†–û–í–ö–ê")
        print("-" * 35)
        
        try:
            # –í–∫–ª—é—á–µ–Ω–∏–µ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏
            await self.load_balancer.enable_adaptive_balancing()
            
            # –û–∂–∏–¥–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏
            await asyncio.sleep(2)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏
            status = self.load_balancer.get_status()
            print(f"  üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã: {json.dumps(status, indent=2, default=str)}")
            
            # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏
            await self.load_balancer.disable_adaptive_balancing()
            
            print("‚úÖ –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            self.test_results.append(("–ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞", True, "–£—Å–ø–µ—à–Ω–æ"))
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏: {e}")
            self.test_results.append(("–ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞", False, str(e)))
    
    async def test_error_handling(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
        print("\nüîß –¢–ï–°–¢ 9: –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö")
        print("-" * 30)
        
        try:
            # –¢–µ—Å—Ç —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Å–µ—Ä–≤–∏—Å–æ–º
            request = LoadBalancingRequest(
                request_id="error_test",
                service_name="nonexistent_service",  # –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –≥—Ä—É–ø–ø–∞
                algorithm=LoadBalancingAlgorithm.ROUND_ROBIN
            )
            
            response = await self.load_balancer.balance_load(request)
            # –î–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å None –∏–ª–∏ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç
            print(f"  ‚ö†Ô∏è –û—Ç–≤–µ—Ç –Ω–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–µ—Ä–≤–∏—Å: {response}")
            
            # –¢–µ—Å—Ç —Å –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º
            try:
                self.load_balancer.set_algorithm("invalid_algorithm")
                print("  ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ –ø—Ä–∏–Ω—è–ª –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º")
            except Exception:
                print("  ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–∏–ª –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º")
            
            # –¢–µ—Å—Ç —Å –ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º —Å–µ—Ä–≤–∏—Å–æ–≤
            await self.load_balancer.clear_services()
            request = LoadBalancingRequest(
                request_id="empty_test",
                service_name="default",  # –ì—Ä—É–ø–ø–∞ 'default' –±—É–¥–µ—Ç –ø—É—Å—Ç–æ–π
                algorithm=LoadBalancingAlgorithm.ROUND_ROBIN
            )
            
            response = await self.load_balancer.balance_load(request)
            print(f"  ‚ö†Ô∏è –û—Ç–≤–µ—Ç –ø—Ä–∏ –ø—É—Å—Ç–æ–º —Å–ø–∏—Å–∫–µ —Å–µ—Ä–≤–∏—Å–æ–≤: {response}")
            
            print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            self.test_results.append(("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫", True, "–£—Å–ø–µ—à–Ω–æ"))
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫: {e}")
            self.test_results.append(("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫", False, str(e)))
    
    async def test_performance(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        print("\nüîß –¢–ï–°–¢ 10: –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨")
        print("-" * 35)
        
        try:
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            for i in range(5):
                service = ServiceEndpoint(
                    id=f"perf_service_{i}",
                    name=f"Performance Service {i}",
                    url="localhost",
                    port=8000 + i,
                    protocol="http",
                    health_check_url="/health",
                    max_connections=100,
                    weight=1.0,
                    is_healthy=True
                )
                await self.load_balancer.add_service(service)
            
            # –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏
            start_time = time.time()
            request_count = 1000
            
            for i in range(request_count):
                request = LoadBalancingRequest(
                    request_id=f"perf_req_{i}",
                    service_name="default",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥—Ä—É–ø–ø—É 'default'
                    algorithm=LoadBalancingAlgorithm.ROUND_ROBIN,
                    client_ip=f"192.168.1.{i % 255}"
                )
                
                response = await self.load_balancer.balance_load(request)
                if not response:
                    print(f"  ‚ö†Ô∏è –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ {i}")
            
            end_time = time.time()
            duration = end_time - start_time
            requests_per_second = request_count / duration
            
            print(f"  ‚ö° –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {request_count} –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ {duration:.2f} —Å–µ–∫—É–Ω–¥")
            print(f"  üöÄ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {requests_per_second:.0f} –∑–∞–ø—Ä–æ—Å–æ–≤/—Å–µ–∫")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            if requests_per_second > 100:  # –ú–∏–Ω–∏–º—É–º 100 RPS
                print("  ‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–∞—è")
                self.test_results.append(("–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", True, f"{requests_per_second:.0f} RPS"))
            else:
                print("  ‚ö†Ô∏è –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∏–∂–µ –æ–∂–∏–¥–∞–µ–º–æ–π")
                self.test_results.append(("–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", False, f"–¢–æ–ª—å–∫–æ {requests_per_second:.0f} RPS"))
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
            self.test_results.append(("–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", False, str(e)))
    
    def print_test_summary(self):
        """–í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("\n" + "=" * 60)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 60)
        
        total_tests = len(self.test_results)
        passed_tests = sum(1 for _, passed, _ in self.test_results if passed)
        failed_tests = total_tests - passed_tests
        
        print(f"üìà –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")
        print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed_tests}")
        print(f"üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(passed_tests/total_tests)*100:.1f}%")
        
        print("\nüìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        print("-" * 40)
        
        for test_name, passed, message in self.test_results:
            status = "‚úÖ" if passed else "‚ùå"
            print(f"  {status} {test_name}: {message}")
        
        if failed_tests == 0:
            print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
            print("üöÄ LoadBalancer –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        else:
            print(f"\n‚ö†Ô∏è {failed_tests} –¢–ï–°–¢–û–í –ü–†–û–í–ê–õ–ï–ù–û")
            print("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ LoadBalancer")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        report_file = f"data/test_reports/load_balancer_test_report_{int(time.time())}.json"
        os.makedirs("data/test_reports", exist_ok=True)
        
        report_data = {
            "timestamp": datetime.now().isoformat(),
            "total_tests": total_tests,
            "passed_tests": passed_tests,
            "failed_tests": failed_tests,
            "success_rate": (passed_tests/total_tests)*100,
            "test_results": [
                {"test_name": name, "passed": passed, "message": message}
                for name, passed, message in self.test_results
            ]
        }
        
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(report_data, f, indent=2, ensure_ascii=False)
        
        print(f"\nüíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = LoadBalancerTester()
    await tester.run_all_tests()

if __name__ == "__main__":
    asyncio.run(main())