#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö —Å–µ–º–µ–π–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
"""

import json
import os
import shutil
from datetime import datetime
from typing import Dict, Any, List

def safe_remove_old_family_functions():
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Å–µ–º–µ–π–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
    
    print("üóëÔ∏è –ë–ï–ó–û–ü–ê–°–ù–û–ï –£–î–ê–õ–ï–ù–ò–ï –°–¢–ê–†–´–• –°–ï–ú–ï–ô–ù–´–• –§–£–ù–ö–¶–ò–ô")
    print("=" * 50)
    
    # –ü—É—Ç—å –∫ —Ä–µ–µ—Å—Ç—Ä—É
    registry_path = "data/sfm/function_registry.json"
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ —Ä–µ–µ—Å—Ç—Ä–∞
    backup_path = f"data/sfm/function_registry_backup_before_cleanup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
    shutil.copy2(registry_path, backup_path)
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–µ—Å—Ç—Ä–∞
    with open(registry_path, 'r', encoding='utf-8') as f:
        registry = json.load(f)
    
    # –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    functions_to_remove = [
        "family_communication_hub",  # –°—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è
        # "family_group_manager" - —É–∂–µ —É–¥–∞–ª–µ–Ω–∞
    ]
    
    # –§–∞–π–ª—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    files_to_remove = [
        "security/ai_agents/family_communication_hub.py",
        # "security/family/family_group_manager.py" - —É–∂–µ —É–¥–∞–ª–µ–Ω
    ]
    
    removed_functions = []
    removed_files = []
    
    # –£–¥–∞–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞
    for function_id in functions_to_remove:
        if function_id in registry["functions"]:
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É–¥–∞–ª–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
            removed_function = registry["functions"][function_id].copy()
            removed_function["removed_at"] = datetime.now().isoformat()
            removed_function["removal_reason"] = "–ó–∞–º–µ–Ω–µ–Ω–∞ –Ω–∞ enhanced –≤–µ—Ä—Å–∏—é"
            removed_functions.append(removed_function)
            
            # –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞
            del registry["functions"][function_id]
            print(f"‚úÖ –£–¥–∞–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞: {function_id}")
        else:
            print(f"‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ä–µ–µ—Å—Ç—Ä–µ: {function_id}")
    
    # –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
    for file_path in files_to_remove:
        if os.path.exists(file_path):
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ —Ñ–∞–π–ª–∞
            backup_file_path = f"formatting_work/family_integration_analysis/removed_{os.path.basename(file_path)}"
            shutil.copy2(file_path, backup_file_path)
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Ñ–∞–π–ª–∞: {backup_file_path}")
            
            # –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            os.remove(file_path)
            removed_files.append(file_path)
            print(f"‚úÖ –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {file_path}")
        else:
            print(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Ä–µ–µ—Å—Ç—Ä–∞
    registry["metadata"] = {
        "total_functions": len(registry["functions"]),
        "last_updated": datetime.now().isoformat(),
        "version": "2.5",
        "cleanup_performed": True,
        "removed_functions": len(removed_functions),
        "removed_files": len(removed_files)
    }
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–µ—Å—Ç—Ä–∞
    with open(registry_path, 'w', encoding='utf-8') as f:
        json.dump(registry, f, indent=2, ensure_ascii=False)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏
    cleanup_report = {
        "cleanup_date": datetime.now().isoformat(),
        "removed_functions": removed_functions,
        "removed_files": removed_files,
        "backup_files": [
            backup_path,
            f"formatting_work/family_integration_analysis/removed_family_communication_hub.py"
        ],
        "remaining_family_functions": [
            "family_profile_manager",
            "family_profile_manager_enhanced", 
            "family_communication_hub_a_plus",
            "family_integration_layer"
        ],
        "total_functions_after_cleanup": len(registry["functions"])
    }
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    report_path = f"formatting_work/family_integration_analysis/cleanup_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
    with open(report_path, 'w', encoding='utf-8') as f:
        json.dump(cleanup_report, f, indent=2, ensure_ascii=False)
    
    print(f"\nüéâ –û–ß–ò–°–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
    print(f"üìä –£–¥–∞–ª–µ–Ω–æ —Ñ—É–Ω–∫—Ü–∏–π: {len(removed_functions)}")
    print(f"üìÅ –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(removed_files)}")
    print(f"üìà –û—Å—Ç–∞–ª–æ—Å—å —Ñ—É–Ω–∫—Ü–∏–π –≤ —Ä–µ–µ—Å—Ç—Ä–µ: {len(registry['functions'])}")
    print(f"üìã –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_path}")
    
    return True

def verify_cleanup():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ—á–∏—Å—Ç–∫–∏"""
    
    print("\nüîç –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –û–ß–ò–°–¢–ö–ò")
    print("=" * 40)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤
    files_to_check = [
        "security/ai_agents/family_communication_hub.py",
        "security/family/family_group_manager.py"
    ]
    
    for file_path in files_to_check:
        if os.path.exists(file_path):
            print(f"‚ùå –§–∞–π–ª –≤—Å–µ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {file_path}")
        else:
            print(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω: {file_path}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–µ—Å—Ç—Ä–∞
    registry_path = "data/sfm/function_registry.json"
    with open(registry_path, 'r', encoding='utf-8') as f:
        registry = json.load(f)
    
    functions_to_check = [
        "family_communication_hub",
        "family_group_manager"
    ]
    
    for function_id in functions_to_check:
        if function_id in registry["functions"]:
            print(f"‚ùå –§—É–Ω–∫—Ü–∏—è –≤—Å–µ –µ—â–µ –≤ —Ä–µ–µ—Å—Ç—Ä–µ: {function_id}")
        else:
            print(f"‚úÖ –§—É–Ω–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞: {function_id}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
    new_functions = [
        "family_profile_manager_enhanced",
        "family_communication_hub_a_plus", 
        "family_integration_layer"
    ]
    
    print(f"\n‚úÖ –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –í –†–ï–ï–°–¢–†–ï:")
    for function_id in new_functions:
        if function_id in registry["functions"]:
            status = registry["functions"][function_id]["status"]
            quality = registry["functions"][function_id]["quality_grade"]
            print(f"  ‚úÖ {function_id}: {status} ({quality})")
        else:
            print(f"  ‚ùå {function_id}: –ù–ï –ù–ê–ô–î–ï–ù–ê")

if __name__ == "__main__":
    safe_remove_old_family_functions()
    verify_cleanup()