#!/usr/bin/env python3
"""
üß™ –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –¢–ï–°–¢ SFM (Safe Function Manager)
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π, –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
"""

import sys
import os
import time
import asyncio
import subprocess
from typing import Dict, Any, List
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, '/Users/sergejhlystov/ALADDIN_NEW')

from security.safe_function_manager import SafeFunctionManager

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–ª–∞—Å—Å—ã –ª–æ–∫–∞–ª—å–Ω–æ
from enum import Enum

class ComponentStatus(Enum):
    INITIALIZING = "initializing"
    RUNNING = "running"
    STOPPED = "stopped"
    ERROR = "error"

class FunctionStatus(Enum):
    ENABLED = "enabled"
    DISABLED = "disabled"
    SLEEPING = "sleeping"

class SecurityLevel(Enum):
    LOW = "low"
    MEDIUM = "medium"
    HIGH = "high"
    CRITICAL = "critical"

class SFMComprehensiveTest:
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç SFM"""
    
    def __init__(self):
        self.sfm = None
        self.test_results = {
            "quality": {"errors": 0, "grade": "F"},
            "security": {"integrated": False, "functions_registered": 0},
            "architecture": {"solid_principles": False, "modularity": False},
            "testing": {"coverage": 0, "passed_tests": 0, "total_tests": 0}
        }
        self.start_time = time.time()
        
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üß™ –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –¢–ï–°–¢ SFM")
        print("=" * 50)
        
        # 1. –¢–µ—Å—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞
        self.test_code_quality()
        
        # 2. –¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SFM
        self.test_sfm_initialization()
        
        # 3. –¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π
        self.test_function_registration()
        
        # 4. –¢–µ—Å—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏—è–º–∏
        self.test_function_management()
        
        # 5. –¢–µ—Å—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        self.test_security_features()
        
        # 6. –¢–µ—Å—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
        self.test_architecture()
        
        # 7. –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self.test_performance()
        
        # 8. –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        self.test_integration()
        
        # 9. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
        self.generate_report()
        
    def test_code_quality(self):
        """–¢–µ—Å—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞"""
        print("\nüìä –¢–ï–°–¢ –ö–ê–ß–ï–°–¢–í–ê –ö–û–î–ê")
        print("-" * 30)
        
        try:
            # –ó–∞–ø—É—Å–∫ flake8
            result = subprocess.run([
                "python3", "-m", "flake8", 
                "security/safe_function_manager.py", 
                "--count", "--statistics"
            ], capture_output=True, text=True, cwd="/Users/sergejhlystov/ALADDIN_NEW")
            
            if result.returncode == 0:
                self.test_results["quality"]["errors"] = 0
                self.test_results["quality"]["grade"] = "A+"
                print("‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞: A+ (0 –æ—à–∏–±–æ–∫)")
            else:
                # –ü–∞—Ä—Å–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫
                lines = result.stdout.strip().split('\n')
                if lines:
                    last_line = lines[-1]
                    if last_line.isdigit():
                        error_count = int(last_line)
                        self.test_results["quality"]["errors"] = error_count
                        
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ü–µ–Ω–∫—É
                        if error_count == 0:
                            self.test_results["quality"]["grade"] = "A+"
                        elif error_count <= 10:
                            self.test_results["quality"]["grade"] = "A"
                        elif error_count <= 25:
                            self.test_results["quality"]["grade"] = "B"
                        elif error_count <= 50:
                            self.test_results["quality"]["grade"] = "C"
                        else:
                            self.test_results["quality"]["grade"] = "D"
                            
                        print(f"‚ö†Ô∏è  –ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞: {self.test_results['quality']['grade']} ({error_count} –æ—à–∏–±–æ–∫)")
                    else:
                        print("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞")
                else:
                    print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫–∞—á–µ—Å—Ç–≤–µ –∫–æ–¥–∞")
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞: {e}")
            
    def test_sfm_initialization(self):
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SFM"""
        print("\nüöÄ –¢–ï–°–¢ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò SFM")
        print("-" * 30)
        
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ SFM
            self.sfm = SafeFunctionManager()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
            if self.sfm.status == ComponentStatus.RUNNING:
                print("‚úÖ SFM —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                print(f"‚úÖ –°—Ç–∞—Ç—É—Å: {self.sfm.status}")
                print(f"‚úÖ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {self.sfm.start_time}")
                print(f"‚úÖ –ò–º—è: {self.sfm.name}")
            else:
                print(f"‚ùå SFM –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –°—Ç–∞—Ç—É—Å: {self.sfm.status}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SFM: {e}")
            
    def test_function_registration(self):
        """–¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π"""
        print("\nüìù –¢–ï–°–¢ –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò –§–£–ù–ö–¶–ò–ô")
        print("-" * 30)
        
        if not self.sfm:
            print("‚ùå SFM –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return
            
        try:
            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
            test_functions = [
                {
                    "function_id": "test_load_balancer",
                    "name": "Load Balancer",
                    "description": "–¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ –Ω–∞–≥—Ä—É–∑–∫–∏",
                    "function_type": "microservice",
                    "security_level": SecurityLevel.HIGH,
                    "is_critical": True
                },
                {
                    "function_id": "test_api_gateway",
                    "name": "API Gateway",
                    "description": "–¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è API Gateway",
                    "function_type": "microservice",
                    "security_level": SecurityLevel.HIGH,
                    "is_critical": True
                },
                {
                    "function_id": "test_analytics",
                    "name": "Analytics Manager",
                    "description": "–¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏",
                    "function_type": "ai_agent",
                    "security_level": SecurityLevel.MEDIUM,
                    "is_critical": False
                }
            ]
            
            registered_count = 0
            for func_data in test_functions:
                success = self.sfm.register_function(**func_data)
                if success:
                    registered_count += 1
                    print(f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞: {func_data['name']}")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {func_data['name']}")
                    
            self.test_results["security"]["functions_registered"] = registered_count
            print(f"‚úÖ –í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {registered_count}/{len(test_functions)}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π: {e}")
            
    def test_function_management(self):
        """–¢–µ—Å—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏—è–º–∏"""
        print("\n‚öôÔ∏è  –¢–ï–°–¢ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –§–£–ù–ö–¶–ò–Ø–ú–ò")
        print("-" * 30)
        
        if not self.sfm:
            print("‚ùå SFM –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return
            
        try:
            # –¢–µ—Å—Ç –≤–∫–ª—é—á–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π
            test_functions = ["test_load_balancer", "test_api_gateway", "test_analytics"]
            
            for func_id in test_functions:
                if func_id in self.sfm.functions:
                    # –í–∫–ª—é—á–µ–Ω–∏–µ
                    enable_success = self.sfm.enable_function(func_id)
                    if enable_success:
                        print(f"‚úÖ –í–∫–ª—é—á–µ–Ω–∞: {func_id}")
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è: {func_id}")
                        
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
                    status = self.sfm.get_function_status(func_id)
                    if status:
                        print(f"   –°—Ç–∞—Ç—É—Å: {status.get('status', 'Unknown')}")
                        
                    # –¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                    success, result, message = self.sfm.test_function(func_id, {"test": "data"})
                    if success:
                        print(f"   ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {message}")
                    else:
                        print(f"   ‚ö†Ô∏è  –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {message}")
                        
                    # –ü–µ—Ä–µ–≤–æ–¥ –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º
                    sleep_success = self.sfm.sleep_function(func_id)
                    if sleep_success:
                        print(f"   üí§ –°–ø—è—â–∏–π —Ä–µ–∂–∏–º: {func_id}")
                    else:
                        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–ø—è—â–µ–≥–æ —Ä–µ–∂–∏–º–∞: {func_id}")
                        
                    # –ü—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ
                    wake_success = self.sfm.wake_function(func_id)
                    if wake_success:
                        print(f"   üåÖ –ü—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ: {func_id}")
                    else:
                        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è: {func_id}")
                        
                    # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ
                    disable_success = self.sfm.disable_function(func_id)
                    if disable_success:
                        print(f"   üî¥ –û—Ç–∫–ª—é—á–µ–Ω–∞: {func_id}")
                    else:
                        print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è: {func_id}")
                        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏—è–º–∏: {e}")
            
    def test_security_features(self):
        """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        print("\nüîí –¢–ï–°–¢ –§–£–ù–ö–¶–ò–ô –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò")
        print("-" * 30)
        
        if not self.sfm:
            print("‚ùå SFM –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return
            
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ SFM
            if hasattr(self.sfm, 'functions') and len(self.sfm.functions) > 0:
                self.test_results["security"]["integrated"] = True
                print("‚úÖ SFM –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
            else:
                print("‚ùå SFM –Ω–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω")
                
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
            critical_functions = self.sfm.get_critical_functions()
            print(f"‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏: {len(critical_functions)}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            stats = self.sfm.get_safe_function_stats()
            print(f"‚úÖ –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π: {stats.get('total_functions', 0)}")
            print(f"‚úÖ –í–∫–ª—é—á–µ–Ω–Ω—ã—Ö: {stats.get('enabled_functions', 0)}")
            print(f"‚úÖ –û—Ç–∫–ª—é—á–µ–Ω–Ω—ã—Ö: {stats.get('disabled_functions', 0)}")
            print(f"‚úÖ –°–ø—è—â–∏—Ö: {stats.get('sleeping_functions', 0)}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {e}")
            
    def test_architecture(self):
        """–¢–µ—Å—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã"""
        print("\nüèóÔ∏è  –¢–ï–°–¢ –ê–†–•–ò–¢–ï–ö–¢–£–†–´")
        print("-" * 30)
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ SOLID –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤
            solid_principles = self.check_solid_principles()
            self.test_results["architecture"]["solid_principles"] = solid_principles
            
            if solid_principles:
                print("‚úÖ SOLID –ø—Ä–∏–Ω—Ü–∏–ø—ã —Å–æ–±–ª—é–¥–µ–Ω—ã")
            else:
                print("‚ùå SOLID –ø—Ä–∏–Ω—Ü–∏–ø—ã –Ω–∞—Ä—É—à–µ–Ω—ã")
                
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥—É–ª—å–Ω–æ—Å—Ç–∏
            modularity = self.check_modularity()
            self.test_results["architecture"]["modularity"] = modularity
            
            if modularity:
                print("‚úÖ –ú–æ–¥—É–ª—å–Ω–æ—Å—Ç—å —Å–æ–±–ª—é–¥–µ–Ω–∞")
            else:
                print("‚ùå –ú–æ–¥—É–ª—å–Ω–æ—Å—Ç—å –Ω–∞—Ä—É—à–µ–Ω–∞")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã: {e}")
            
    def check_solid_principles(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ SOLID –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤"""
        try:
            # Single Responsibility - SFM –æ—Ç–≤–µ—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∑–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
            if hasattr(self.sfm, 'functions') and hasattr(self.sfm, 'register_function'):
                return True
            return False
        except:
            return False
            
    def check_modularity(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥—É–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ SFM –∏–º–µ–µ—Ç —á–µ—Ç–∫–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
            required_methods = [
                'register_function', 'unregister_function',
                'enable_function', 'disable_function',
                'test_function', 'get_function_status'
            ]
            
            for method in required_methods:
                if not hasattr(self.sfm, method):
                    return False
            return True
        except:
            return False
            
    def test_performance(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        print("\n‚ö° –¢–ï–°–¢ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
        print("-" * 30)
        
        if not self.sfm:
            print("‚ùå SFM –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return
            
        try:
            # –¢–µ—Å—Ç –≤—Ä–µ–º–µ–Ω–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            start_time = time.time()
            self.sfm.register_function(
                "perf_test", "Performance Test", "Test function",
                "test", SecurityLevel.LOW, False
            )
            registration_time = time.time() - start_time
            print(f"‚úÖ –í—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {registration_time:.4f}—Å")
            
            # –¢–µ—Å—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            start_time = time.time()
            self.sfm.test_function("perf_test", {"test": "data"})
            execution_time = time.time() - start_time
            print(f"‚úÖ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time:.4f}—Å")
            
            # –¢–µ—Å—Ç –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
            start_time = time.time()
            self.sfm.get_function_status("perf_test")
            status_time = time.time() - start_time
            print(f"‚úÖ –í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {status_time:.4f}—Å")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
            
    def test_integration(self):
        """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        print("\nüîó –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò")
        print("-" * 30)
        
        if not self.sfm:
            print("‚ùå SFM –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return
            
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º
            if hasattr(self.sfm, '_update_monitoring_metrics'):
                print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º")
            else:
                print("‚ùå –ù–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º")
                
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é
            if hasattr(self.sfm, '_log_security_event'):
                print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é")
            else:
                print("‚ùå –ù–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é")
                
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            if hasattr(self.sfm, 'log_activity'):
                print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º")
            else:
                print("‚ùå –ù–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
            
    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞"""
        print("\nüìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
        print("=" * 50)
        
        total_time = time.time() - self.start_time
        
        # –ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞
        quality_grade = self.test_results["quality"]["grade"]
        quality_errors = self.test_results["quality"]["errors"]
        print(f"üìä –ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞: {quality_grade} ({quality_errors} –æ—à–∏–±–æ–∫)")
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
        security_integrated = self.test_results["security"]["integrated"]
        functions_registered = self.test_results["security"]["functions_registered"]
        print(f"üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: {'‚úÖ –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ SFM' if security_integrated else '‚ùå –ù–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω'}")
        print(f"   –§—É–Ω–∫—Ü–∏–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {functions_registered}")
        
        # –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
        solid_principles = self.test_results["architecture"]["solid_principles"]
        modularity = self.test_results["architecture"]["modularity"]
        print(f"üèóÔ∏è  –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: {'‚úÖ SOLID –ø—Ä–∏–Ω—Ü–∏–ø—ã' if solid_principles else '‚ùå SOLID –ø—Ä–∏–Ω—Ü–∏–ø—ã'}")
        print(f"   –ú–æ–¥—É–ª—å–Ω–æ—Å—Ç—å: {'‚úÖ –°–æ–±–ª—é–¥–µ–Ω–∞' if modularity else '‚ùå –ù–∞—Ä—É—à–µ–Ω–∞'}")
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        print(f"üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: ‚úÖ –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
        print(f"   –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {total_time:.2f}—Å")
        
        # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
        if (quality_grade in ["A+", "A"] and 
            security_integrated and 
            solid_principles and 
            modularity):
            overall_grade = "A+"
            print(f"\nüéâ –û–ë–©–ê–Ø –û–¶–ï–ù–ö–ê: {overall_grade}")
            print("‚úÖ SFM –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É!")
        elif quality_grade in ["A", "B"] and security_integrated:
            overall_grade = "B+"
            print(f"\nüëç –û–ë–©–ê–Ø –û–¶–ï–ù–ö–ê: {overall_grade}")
            print("‚ö†Ô∏è  SFM —Ç—Ä–µ–±—É–µ—Ç –Ω–µ–±–æ–ª—å—à–∏—Ö —É–ª—É—á—à–µ–Ω–∏–π")
        else:
            overall_grade = "C"
            print(f"\n‚ö†Ô∏è  –û–ë–©–ê–Ø –û–¶–ï–ù–ö–ê: {overall_grade}")
            print("‚ùå SFM —Ç—Ä–µ–±—É–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö —É–ª—É—á—à–µ–Ω–∏–π")
            
        print("\n" + "=" * 50)

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    test = SFMComprehensiveTest()
    test.run_all_tests()