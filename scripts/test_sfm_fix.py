#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è SFM - –§–∞–∑–∞ 1
–ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ SFM –±–æ–ª—å—à–µ –Ω–µ –∑–∞–≤–∏—Å–∞–µ—Ç –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π
"""

import sys
import os
import time
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, '/Users/sergejhlystov/ALADDIN_NEW')

def test_sfm_fix():
    """–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è SFM"""
    print("üîß –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø SFM - –§–ê–ó–ê 1")
    print("=" * 50)
    print(f"–í—Ä–µ–º—è —Ç–µ—Å—Ç–∞: {datetime.now()}")
    print()
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º SFM
        from security.safe_function_manager import SafeFunctionManager, SecurityFunction, FunctionStatus
        from core.base import SecurityLevel
        
        print("‚úÖ SafeFunctionManager –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –°–æ–∑–¥–∞–µ–º SFM —Å –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ —Ñ–æ–Ω–æ–≤—ã–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏
        print("üîß –°–æ–∑–¥–∞–Ω–∏–µ SFM —Å –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ —Ñ–æ–Ω–æ–≤—ã–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏...")
        sfm = SafeFunctionManager("TestSFM")
        
        print("‚úÖ SFM —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        print(f"   ‚Ä¢ enable_auto_management: {sfm.enable_auto_management}")
        print(f"   ‚Ä¢ enable_sleep_mode: {sfm.enable_sleep_mode}")
        print(f"   ‚Ä¢ auto_sleep_enabled: {sfm.auto_sleep_enabled}")
        print(f"   ‚Ä¢ optimization_enabled: {sfm.optimization_enabled}")
        print(f"   ‚Ä¢ monitoring_integration_enabled: {sfm.monitoring_integration_enabled}")
        
        # –¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏
        print("\nüîß –¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏...")
        start_time = time.time()
        
        success = sfm.register_function(
            function_id="test_function",
            name="Test Function",
            description="–¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
            function_type="test",
            security_level=SecurityLevel.MEDIUM,
            is_critical=False,
            auto_enable=True
        )
        
        end_time = time.time()
        registration_time = end_time - start_time
        
        if success:
            print(f"‚úÖ –§—É–Ω–∫—Ü–∏—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞ {registration_time:.2f} —Å–µ–∫—É–Ω–¥")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞ {registration_time:.2f} —Å–µ–∫—É–Ω–¥")
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ñ—É–Ω–∫—Ü–∏–∏
        print("\nüîß –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ñ—É–Ω–∫—Ü–∏–∏...")
        function_status = sfm.get_function_status("test_function")
        print(f"   ‚Ä¢ –°—Ç–∞—Ç—É—Å —Ñ—É–Ω–∫—Ü–∏–∏: {function_status}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏
        print("\nüîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π...")
        all_functions = sfm.get_all_functions_status()
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π: {len(all_functions)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
        if isinstance(all_functions, dict):
            for func_id, func_data in all_functions.items():
                print(f"   ‚Ä¢ {func_id}: {func_data.get('status', 'unknown')}")
        elif isinstance(all_functions, list):
            for func_data in all_functions:
                func_id = func_data.get('function_id', 'unknown')
                status = func_data.get('status', 'unknown')
                print(f"   ‚Ä¢ {func_id}: {status}")
        else:
            print(f"   ‚Ä¢ –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø: {type(all_functions)}")
        
        # –¢–µ—Å—Ç —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±—ã—Å—Ç—Ä—ã–º)
        print("\nüîß –¢–µ—Å—Ç —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫...")
        start_time = time.time()
        
        try:
            metrics = sfm._collect_performance_metrics()
            end_time = time.time()
            metrics_time = end_time - start_time
            
            print(f"‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ —Å–æ–±—Ä–∞–Ω—ã –∑–∞ {metrics_time:.2f} —Å–µ–∫—É–Ω–¥")
            print(f"   ‚Ä¢ CPU: {metrics.get('cpu_usage', 'N/A')}%")
            print(f"   ‚Ä¢ Memory: {metrics.get('memory_usage', 'N/A')}%")
            print(f"   ‚Ä¢ Total functions: {metrics.get('total_functions', 'N/A')}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫: {e}")
            return False
        
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("‚úÖ SFM –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –∑–∞–≤–∏—Å–∞–Ω–∏–π")
        return True
        
    except Exception as e:
        print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = test_sfm_fix()
    if success:
        print("\nüöÄ –§–ê–ó–ê 1 –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        sys.exit(0)
    else:
        print("\nüí• –§–ê–ó–ê 1 –ü–†–û–í–ê–õ–ï–ù–ê!")
        sys.exit(1)