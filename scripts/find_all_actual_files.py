#!/usr/bin/env python3
"""
–ü–æ–∏—Å–∫ –≤—Å–µ—Ö —Ä–µ–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö ALADDIN
–ò—Å–∫–ª—é—á–∞–µ—Ç –±—ç–∫–∞–ø—ã, –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã, —Å–∫—Ä–∏–ø—Ç—ã –∏ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
"""

import json
import os
import sys
from pathlib import Path
from typing import Dict, List, Set
from datetime import datetime

def should_exclude_path(path: Path) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–∫–ª—é—á–∏—Ç—å –ø—É—Ç—å –∏–∑ –ø–æ–∏—Å–∫–∞"""
    path_str = str(path).lower()
    
    # –ò—Å–∫–ª—é—á–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    exclude_dirs = {
        'backups', 'backup', 'temp', 'tmp', 'cache', 'logs', 
        'scripts', '__pycache__', '.git', 'node_modules',
        'formatting_work', 'backup_sys_path_removal',
        'old_files_removal', 'registry_merge_backup',
        'fixed_registry_merge_backup', 'aladdin_',
        'test', 'tests', 'docs', 'documentation'
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å –ø—É—Ç–∏
    for part in path.parts:
        if any(exclude_dir in part.lower() for exclude_dir in exclude_dirs):
            return True
    
    # –ò—Å–∫–ª—é—á–∞–µ–º —Ñ–∞–π–ª—ã —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏
    exclude_patterns = {
        '.pyc', '.pyo', '.log', '.tmp', '.bak', '.backup',
        '.md', '.txt', '.json', '.yaml', '.yml', '.cfg',
        '.ini', '.env', '.gitignore', '.dockerignore'
    }
    
    if path.suffix.lower() in exclude_patterns:
        return True
    
    return False

def get_file_category(file_path: Path) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ –ø—É—Ç–∏"""
    path_str = str(file_path).lower()
    
    if 'ai_agents' in path_str or 'ai_agent' in path_str:
        return 'AI_AGENT'
    elif 'bots' in path_str or 'bot' in path_str:
        return 'BOT'
    elif 'managers' in path_str or 'manager' in path_str:
        return 'MANAGER'
    elif 'microservices' in path_str or 'microservice' in path_str:
        return 'MICROSERVICE'
    elif 'security' in path_str:
        if 'vpn' in path_str:
            return 'VPN'
        elif 'family' in path_str:
            return 'FAMILY'
        elif 'compliance' in path_str:
            return 'COMPLIANCE'
        else:
            return 'SECURITY'
    elif 'core' in path_str:
        return 'CORE'
    elif 'config' in path_str:
        return 'CONFIG'
    elif 'data' in path_str:
        return 'DATA'
    else:
        return 'OTHER'

def find_all_files():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤"""
    print("üîç –ü–û–ò–°–ö –í–°–ï–• –§–ê–ô–õ–û–í –í –°–ò–°–¢–ï–ú–ï ALADDIN")
    print("=" * 60)
    
    base_dir = Path.cwd()
    all_files = []
    categories = {}
    
    print(f"üìÅ –ë–∞–∑–æ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {base_dir}")
    print("üö´ –ò—Å–∫–ª—é—á–∞–µ–º: backups, scripts, logs, cache, temp, tests")
    print()
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
    search_dirs = [
        'security',
        'core', 
        'config',
        'data',
        'models'
    ]
    
    for search_dir in search_dirs:
        search_path = base_dir / search_dir
        if search_path.exists():
            print(f"üìÇ –°–∫–∞–Ω–∏—Ä—É–µ–º: {search_dir}/")
            
            for root, dirs, files in os.walk(search_path):
                # –ò—Å–∫–ª—é—á–∞–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                dirs[:] = [d for d in dirs if not should_exclude_path(Path(root) / d)]
                
                for file in files:
                    file_path = Path(root) / file
                    
                    # –ò—Å–∫–ª—é—á–∞–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ —Ñ–∞–π–ª—ã
                    if should_exclude_path(file_path):
                        continue
                    
                    # –¢–æ–ª—å–∫–æ Python —Ñ–∞–π–ª—ã
                    if file.endswith('.py'):
                        rel_path = file_path.relative_to(base_dir)
                        category = get_file_category(rel_path)
                        
                        file_info = {
                            'path': str(rel_path),
                            'full_path': str(file_path),
                            'name': file,
                            'category': category,
                            'size': file_path.stat().st_size,
                            'modified': datetime.fromtimestamp(file_path.stat().st_mtime).isoformat()
                        }
                        
                        all_files.append(file_info)
                        
                        if category not in categories:
                            categories[category] = []
                        categories[category].append(file_info)
    
    # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä–∏–º –∫–æ—Ä–Ω–µ–≤—ã–µ —Ñ–∞–π–ª—ã
    print(f"üìÇ –°–∫–∞–Ω–∏—Ä—É–µ–º –∫–æ—Ä–Ω–µ–≤—ã–µ —Ñ–∞–π–ª—ã")
    for file in os.listdir(base_dir):
        if file.endswith('.py') and not should_exclude_path(Path(file)):
            file_path = base_dir / file
            category = 'ROOT'
            
            file_info = {
                'path': file,
                'full_path': str(file_path),
                'name': file,
                'category': category,
                'size': file_path.stat().st_size,
                'modified': datetime.fromtimestamp(file_path.stat().st_mtime).isoformat()
            }
            
            all_files.append(file_info)
            
            if category not in categories:
                categories[category] = []
            categories[category].append(file_info)
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print(f"\nüìä –ù–ê–ô–î–ï–ù–ù–´–ï –§–ê–ô–õ–´ –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú:")
    print("-" * 60)
    
    total_files = 0
    for category, files in sorted(categories.items()):
        print(f"{category:15} | {len(files):3d} —Ñ–∞–π–ª–æ–≤")
        total_files += len(files)
    
    print(f"{'–í–°–ï–ì–û':15} | {total_files:3d} —Ñ–∞–π–ª–æ–≤")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤ –≤ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    print(f"\nüìã –ü–†–ò–ú–ï–†–´ –§–ê–ô–õ–û–í –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú:")
    print("-" * 60)
    
    for category, files in sorted(categories.items()):
        if files:
            print(f"\nüî∏ {category} ({len(files)} —Ñ–∞–π–ª–æ–≤):")
            for file_info in files[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Ñ–∞–π–ª–æ–≤
                size_kb = file_info['size'] / 1024
                print(f"   üìÑ {file_info['path']} ({size_kb:.1f} KB)")
            
            if len(files) > 5:
                print(f"   ... –∏ –µ—â–µ {len(files) - 5} —Ñ–∞–π–ª–æ–≤")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç
    report_data = {
        'timestamp': datetime.now().isoformat(),
        'base_directory': str(base_dir),
        'total_files': total_files,
        'categories': {
            category: {
                'count': len(files),
                'files': files
            }
            for category, files in categories.items()
        },
        'all_files': all_files
    }
    
    report_path = f"data/reports/all_files_found_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
    os.makedirs(os.path.dirname(report_path), exist_ok=True)
    
    with open(report_path, 'w', encoding='utf-8') as f:
        json.dump(report_data, f, ensure_ascii=False, indent=2)
    
    print(f"\nüìÑ –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_path}")
    
    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è SFM —Ä–µ–µ—Å—Ç—Ä–∞
    sfm_candidates = []
    for file_info in all_files:
        # –°–æ–∑–¥–∞–µ–º ID —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        func_id = Path(file_info['name']).stem.lower().replace(' ', '_').replace('-', '_')
        
        sfm_candidate = {
            'function_id': func_id,
            'name': func_id.replace('_', ' ').title(),
            'file_path': f"./{file_info['path']}",
            'category': file_info['category'],
            'size_bytes': file_info['size'],
            'last_modified': file_info['modified']
        }
        sfm_candidates.append(sfm_candidate)
    
    candidates_path = f"data/reports/sfm_candidates_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
    with open(candidates_path, 'w', encoding='utf-8') as f:
        json.dump(sfm_candidates, f, ensure_ascii=False, indent=2)
    
    print(f"üìã –ö–∞–Ω–¥–∏–¥–∞—Ç—ã –¥–ª—è SFM —Ä–µ–µ—Å—Ç—Ä–∞: {candidates_path}")
    
    return all_files, categories, sfm_candidates

if __name__ == "__main__":
    try:
        all_files, categories, sfm_candidates = find_all_files()
        print(f"\nüéØ –ü–û–ò–°–ö –ó–ê–í–ï–†–®–ï–ù")
        print(f"–ù–∞–π–¥–µ–Ω–æ {len(all_files)} —Ñ–∞–π–ª–æ–≤")
        print(f"–°–æ–∑–¥–∞–Ω–æ {len(sfm_candidates)} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è SFM")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
        sys.exit(1)