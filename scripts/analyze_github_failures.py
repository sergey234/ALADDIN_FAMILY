#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫ GitHub Actions
–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –ø–∞–¥–µ–Ω–∏—è workflow
"""

import requests
import json
import re
from datetime import datetime

class GitHubFailureAnalyzer:
    def __init__(self, repo_owner="sergey234", repo_name="ALADDIN_FAMILY"):
        self.repo_owner = repo_owner
        self.repo_name = repo_name
        self.base_url = f"https://api.github.com/repos/{repo_owner}/{repo_name}"
        self.headers = {
            "Accept": "application/vnd.github.v3+json",
            "User-Agent": "ALADDIN-Analyzer"
        }

    def analyze_common_failures(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–±—â–∏–µ –ø—Ä–∏—á–∏–Ω—ã –ø–∞–¥–µ–Ω–∏—è"""
        print("üîç –ê–ù–ê–õ–ò–ó –û–®–ò–ë–û–ö GITHUB ACTIONS")
        print("=" * 60)
        
        # –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–µ—É–¥–∞—á–Ω—ã–µ –∑–∞–ø—É—Å–∫–∏
        url = f"{self.base_url}/actions/runs"
        params = {"status": "failure", "per_page": 10}
        
        try:
            response = requests.get(url, headers=self.headers, params=params)
            response.raise_for_status()
            runs_data = response.json()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
            return
        
        workflow_runs = runs_data.get("workflow_runs", [])
        
        if not workflow_runs:
            print("üì≠ –ù–µ—Ç –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–ø—É—Å–∫–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return
        
        print(f"üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {len(workflow_runs)} –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–ø—É—Å–∫–æ–≤")
        print()
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–∏–ø–∞–º –æ—à–∏–±–æ–∫
        error_patterns = {
            "xcodebuild": 0,
            "python": 0,
            "docker": 0,
            "flake8": 0,
            "import": 0,
            "permission": 0,
            "timeout": 0,
            "not_found": 0,
            "syntax": 0,
            "other": 0
        }
        
        workflow_errors = {}
        
        for run in workflow_runs:
            workflow_name = run.get("name", "Unknown")
            run_id = run.get("id")
            
            # –ü–æ–ª—É—á–∏—Ç—å jobs –¥–ª—è —ç—Ç–æ–≥–æ run
            jobs_url = f"{self.base_url}/actions/runs/{run_id}/jobs"
            try:
                jobs_response = requests.get(jobs_url, headers=self.headers)
                jobs_response.raise_for_status()
                jobs_data = jobs_response.json()
                
                if "jobs" in jobs_data:
                    for job in jobs_data["jobs"]:
                        if job.get("conclusion") == "failure":
                            job_name = job.get("name", "Unknown")
                            
                            # –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏ job (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)
                            logs_url = f"{self.base_url}/actions/jobs/{job['id']}/logs"
                            try:
                                logs_response = requests.get(logs_url, headers=self.headers)
                                if logs_response.status_code == 200:
                                    logs = logs_response.text
                                    
                                    # –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –æ—à–∏–±–∫–∏
                                    error_type = self.classify_error(logs)
                                    error_patterns[error_type] += 1
                                    
                                    if workflow_name not in workflow_errors:
                                        workflow_errors[workflow_name] = []
                                    workflow_errors[workflow_name].append({
                                        "job": job_name,
                                        "error_type": error_type,
                                        "run_id": run_id
                                    })
                                    
                            except Exception as e:
                                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ –¥–ª—è job {job['id']}: {e}")
                                
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å jobs –¥–ª—è run {run_id}: {e}")
        
        # –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
        print("üìà –ê–ù–ê–õ–ò–ó –¢–ò–ü–û–í –û–®–ò–ë–û–ö:")
        print("-" * 40)
        
        for error_type, count in error_patterns.items():
            if count > 0:
                emoji = self.get_error_emoji(error_type)
                print(f"{emoji} {error_type.upper()}: {count} –æ—à–∏–±–æ–∫")
        
        print()
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ workflow
        print("üîß –ê–ù–ê–õ–ò–ó –ü–û WORKFLOW:")
        print("-" * 40)
        
        for workflow_name, errors in workflow_errors.items():
            print(f"\nüìã {workflow_name}:")
            for error in errors:
                emoji = self.get_error_emoji(error["error_type"])
                print(f"  {emoji} {error['job']} - {error['error_type']}")
        
        print()
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print("üîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Æ:")
        print("-" * 40)
        
        if error_patterns["xcodebuild"] > 0:
            print("üçé iOS BUILD –ü–†–û–ë–õ–ï–ú–´:")
            print("  - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Xcode –ø—Ä–æ–µ–∫—Ç (.xcodeproj)")
            print("  - –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—Å–µ Swift —Ñ–∞–π–ª—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
            print("  - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Bundle Identifier –∏ Signing")
        
        if error_patterns["python"] > 0:
            print("üêç PYTHON –ü–†–û–ë–õ–ï–ú–´:")
            print("  - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ requirements.txt")
            print("  - –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            print("  - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–µ—Ä—Å–∏–∏ Python")
        
        if error_patterns["flake8"] > 0:
            print("üîç FLAKE8 –ü–†–û–ë–õ–ï–ú–´:")
            print("  - –ò—Å–ø—Ä–∞–≤—å—Ç–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏")
            print("  - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–º–ø–æ—Ä—Ç—ã")
            print("  - –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python3 scripts/auto_format_all.py")
        
        if error_patterns["docker"] > 0:
            print("üê≥ DOCKER –ü–†–û–ë–õ–ï–ú–´:")
            print("  - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Dockerfile")
            print("  - –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã –Ω–∞ –º–µ—Å—Ç–µ")
            print("  - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Docker –∫–æ–Ω—Ç–µ–∫—Å—Ç")
        
        if error_patterns["import"] > 0:
            print("üì¶ IMPORT –ü–†–û–ë–õ–ï–ú–´:")
            print("  - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å–µ import statements")
            print("  - –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –º–æ–¥—É–ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
            print("  - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ PYTHONPATH")
        
        print()
        print("=" * 60)

    def classify_error(self, logs):
        """–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å —Ç–∏–ø –æ—à–∏–±–∫–∏ –ø–æ –ª–æ–≥–∞–º"""
        logs_lower = logs.lower()
        
        if "xcodebuild" in logs_lower or "xcode" in logs_lower:
            return "xcodebuild"
        elif "python" in logs_lower and ("error" in logs_lower or "failed" in logs_lower):
            return "python"
        elif "docker" in logs_lower and ("error" in logs_lower or "failed" in logs_lower):
            return "docker"
        elif "flake8" in logs_lower or "e999" in logs_lower or "f821" in logs_lower:
            return "flake8"
        elif "import" in logs_lower and ("error" in logs_lower or "failed" in logs_lower):
            return "import"
        elif "permission" in logs_lower or "denied" in logs_lower:
            return "permission"
        elif "timeout" in logs_lower or "timed out" in logs_lower:
            return "timeout"
        elif "not found" in logs_lower or "no such file" in logs_lower:
            return "not_found"
        elif "syntax" in logs_lower or "invalid" in logs_lower:
            return "syntax"
        else:
            return "other"

    def get_error_emoji(self, error_type):
        """–ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏"""
        emojis = {
            "xcodebuild": "üçé",
            "python": "üêç",
            "docker": "üê≥",
            "flake8": "üîç",
            "import": "üì¶",
            "permission": "üîí",
            "timeout": "‚è∞",
            "not_found": "‚ùì",
            "syntax": "üìù",
            "other": "‚ö†Ô∏è"
        }
        return emojis.get(error_type, "‚ùì")

    def suggest_fixes(self):
        """–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        print("üõ†Ô∏è –ö–û–ù–ö–†–ï–¢–ù–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:")
        print("=" * 60)
        
        print("1. üçé iOS BUILD:")
        print("   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å: mobile_apps/ALADDIN_iOS/ALADDIN.xcodeproj")
        print("   - –ò—Å–ø—Ä–∞–≤–∏—Ç—å: Bundle Identifier, Signing, Frameworks")
        print("   - –ö–æ–º–∞–Ω–¥–∞: cd mobile_apps/ALADDIN_iOS && xcodebuild -list")
        
        print("\n2. üîç QUALITY CHECK:")
        print("   - –ó–∞–ø—É—Å—Ç–∏—Ç—å: python3 scripts/auto_format_all.py")
        print("   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å: quality_report.txt —Å–æ–∑–¥–∞–µ—Ç—Å—è")
        print("   - –ò—Å–ø—Ä–∞–≤–∏—Ç—å: flake8 –æ—à–∏–±–∫–∏ –≤ Python —Ñ–∞–π–ª–∞—Ö")
        
        print("\n3. üê≥ DOCKER BUILD:")
        print("   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å: Dockerfile –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞")
        print("   - –£–±–µ–¥–∏—Ç—å—Å—è: –≤—Å–µ —Ñ–∞–π–ª—ã –≤ .dockerignore")
        print("   - –¢–µ—Å—Ç: docker build .")
        
        print("\n4. üì¶ PYTHON DEPENDENCIES:")
        print("   - –û–±–Ω–æ–≤–∏—Ç—å: requirements.txt")
        print("   - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å: pip install -r requirements.txt")
        print("   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å: python3 -c 'import sys; print(sys.version)'")
        
        print("\n5. üîß –û–ë–©–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:")
        print("   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å: .gitignore –∏—Å–∫–ª—é—á–∞–µ—Ç –Ω–µ–Ω—É–∂–Ω—ã–µ —Ñ–∞–π–ª—ã")
        print("   - –£–±–µ–¥–∏—Ç—å—Å—è: –≤—Å–µ —Ñ–∞–π–ª—ã –∑–∞–∫–æ–º–º–∏—á–µ–Ω—ã")
        print("   - –¢–µ—Å—Ç: git status --porcelain")

def main():
    analyzer = GitHubFailureAnalyzer()
    
    print("üöÄ –ê–ù–ê–õ–ò–ó –û–®–ò–ë–û–ö GITHUB ACTIONS")
    print("=" * 60)
    print(f"üìÅ Repository: {analyzer.repo_owner}/{analyzer.repo_name}")
    print(f"üïê Time: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 60)
    
    analyzer.analyze_common_failures()
    analyzer.suggest_fixes()

if __name__ == "__main__":
    main()
