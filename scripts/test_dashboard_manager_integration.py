#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ DashboardManager —Å SafeFunctionManager
"""

import asyncio
import uuid
from datetime import datetime
import sys
import os

sys.path.insert(0, '/Users/sergejhlystov/ALADDIN_NEW')

from security.safe_function_manager import SafeFunctionManager, SecurityLevel
from security.ai_agents.dashboard_manager import (
    DashboardManager, DashboardConfig, DashboardTheme, WidgetConfig, WidgetType, UserRole
)


async def run_integration_test():
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ DashboardManager —Å SFM"""
    print("üîß –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ DashboardManager —Å SafeFunctionManager")
    print("============================================================")
    
    # –°–æ–∑–¥–∞–µ–º SFM
    sfm = SafeFunctionManager(name="ALADDIN")
    print("‚úÖ SafeFunctionManager —Å–æ–∑–¥–∞–Ω!")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º DashboardManager –≤ SFM
    registration_success = sfm.register_function(
        function_id="dashboard_manager",
        name="DashboardManager",
        description="–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–µ–π",
        function_type="ai_agent",
        security_level=SecurityLevel.HIGH,
        is_critical=True,
        auto_enable=False
    )
    print(f"‚úÖ DashboardManager –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! –†–µ–∑—É–ª—å—Ç–∞—Ç: {registration_success}")
    
    # –í–∫–ª—é—á–∞–µ–º DashboardManager
    enable_success = sfm.enable_function("dashboard_manager")
    print(f"‚úÖ DashboardManager –≤–∫–ª—é—á–µ–Ω! –†–µ–∑—É–ª—å—Ç–∞—Ç: {enable_success}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å
    manager_status = sfm.get_function_status("dashboard_manager")
    print(f"\nüìà –°—Ç–∞—Ç—É—Å DashboardManager: {manager_status['status']}")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    widgets = [
        WidgetConfig(
            widget_id="security_score",
            widget_type=WidgetType.GAUGE,
            title="–£—Ä–æ–≤–µ–Ω—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
            position=(0, 0),
            size=(2, 2),
            data_source="security_metrics"
        ),
        WidgetConfig(
            widget_id="threats_chart",
            widget_type=WidgetType.CHART,
            title="–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ —É–≥—Ä–æ–∑—ã",
            position=(2, 0),
            size=(3, 2),
            data_source="threat_data"
        ),
        WidgetConfig(
            widget_id="incidents_metric",
            widget_type=WidgetType.METRIC,
            title="–ò–Ω—Ü–∏–¥–µ–Ω—Ç—ã",
            position=(0, 2),
            size=(1, 1),
            data_source="incident_data"
        )
    ]
    
    config = DashboardConfig(
        dashboard_id="test_dashboard",
        name="–¢–µ—Å—Ç–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
        description="–¢–µ—Å—Ç–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
        theme=DashboardTheme.SECURITY,
        widgets=widgets,
        user_roles=[UserRole.ADMIN, UserRole.ANALYST],
        auto_refresh=True,
        refresh_interval=30
    )
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä DashboardManager
    manager = DashboardManager(config)
    print("‚úÖ DashboardManager —Å–æ–∑–¥–∞–Ω!")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
    init_success = await manager.initialize()
    print(f"‚úÖ DashboardManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω! –†–µ–∑—É–ª—å—Ç–∞—Ç: {init_success}")
    
    # –†–µ–Ω–¥–µ—Ä–∏–º –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    dashboard = await manager.render_dashboard()
    print(f"‚úÖ –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω–∞! –í–∏–¥–∂–µ—Ç–æ–≤: {len(dashboard.get('widgets', []))}")
    print(f"   ‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {dashboard.get('name', 'N/A')}")
    print(f"   ‚Ä¢ –¢–µ–º–∞: {dashboard.get('theme', 'N/A')}")
    print(f"   ‚Ä¢ –°—Ç–∞—Ç—É—Å: {dashboard.get('status', 'N/A')}")
    
    # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
    metrics = await manager.get_metrics()
    print(f"‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã! –†–µ–∑—É–ª—å—Ç–∞—Ç: {metrics}")
    print(f"   ‚Ä¢ –í—Å–µ–≥–æ –≤–∏–¥–∂–µ—Ç–æ–≤: {metrics.get('widgets_count', 0)}")
    print(f"   ‚Ä¢ –í–∏–¥–∏–º—ã—Ö –≤–∏–¥–∂–µ—Ç–æ–≤: {metrics.get('visible_widgets', 0)}")
    print(f"   ‚Ä¢ –ê–ª–µ—Ä—Ç–æ–≤: {metrics.get('alerts_count', 0)}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–∞
    new_widget = WidgetConfig(
        widget_id="test_widget",
        widget_type=WidgetType.METRIC,
        title="–¢–µ—Å—Ç–æ–≤—ã–π –≤–∏–¥–∂–µ—Ç",
        position=(5, 5),
        size=(1, 1),
        data_source="test_data"
    )
    
    add_widget_success = await manager.add_widget(new_widget)
    print(f"‚úÖ –í–∏–¥–∂–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω! –†–µ–∑—É–ª—å—Ç–∞—Ç: {add_widget_success}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–∞
    remove_widget_success = await manager.remove_widget("test_widget")
    print(f"‚úÖ –í–∏–¥–∂–µ—Ç —É–¥–∞–ª–µ–Ω! –†–µ–∑—É–ª—å—Ç–∞—Ç: {remove_widget_success}")
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É
    await manager.shutdown()
    print("‚úÖ DashboardManager –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É!")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ SFM
    sfm_test_result = sfm.test_function("dashboard_manager")
    print(f"‚úÖ –¢–µ—Å—Ç SFM –∑–∞–≤–µ—Ä—à–µ–Ω! –†–µ–∑—É–ª—å—Ç–∞—Ç: {sfm_test_result}")
    
    # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ SFM
    sfm_metrics = sfm.get_performance_metrics()
    print("‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ SFM –ø–æ–ª—É—á–µ–Ω—ã!")
    print(f"   ‚Ä¢ –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π: {sfm_metrics['current_metrics']['total_functions']}")
    print(f"   ‚Ä¢ –í–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π: {sfm_metrics['current_metrics']['enabled_functions']}")
    print(f"   ‚Ä¢ –°–ø—è—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π: {sfm_metrics['current_metrics']['sleeping_functions']}")
    print(f"   ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π: {sfm_metrics['current_metrics']['active_executions']}")
    
    print("\n============================================================")
    print("üéâ –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ DashboardManager –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    
    if registration_success and enable_success and init_success:
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        return True
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å.")
        return False


if __name__ == "__main__":
    asyncio.run(run_integration_test())