#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
SFM Add Function - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –≤ SFM —Ä–µ–µ—Å—Ç—Ä
"""

import json
import os
import sys
import argparse
from datetime import datetime
from pathlib import Path

class SFMFunctionAdder:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –≤ SFM —Ä–µ–µ—Å—Ç—Ä"""
    
    def __init__(self):
        self.registry_path = "data/sfm/function_registry.json"
        self.registry_data = None
        self.backup_path = None
    
    def create_backup(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        self.backup_path = f"data/sfm/function_registry_backup_add_{timestamp}.json"
        
        try:
            os.makedirs(os.path.dirname(self.backup_path), exist_ok=True)
            with open(self.registry_path, 'r', encoding='utf-8') as src:
                with open(self.backup_path, 'w', encoding='utf-8') as dst:
                    dst.write(src.read())
            print(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {self.backup_path}")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
            return False
    
    def load_registry(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ SFM —Ä–µ–µ—Å—Ç—Ä–∞"""
        try:
            with open(self.registry_path, 'r', encoding='utf-8') as f:
                self.registry_data = json.load(f)
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–µ—Å—Ç—Ä–∞: {e}")
            return False
    
    def save_registry(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ SFM —Ä–µ–µ—Å—Ç—Ä–∞"""
        try:
            with open(self.registry_path, 'w', encoding='utf-8') as f:
                json.dump(self.registry_data, f, indent=2, ensure_ascii=False)
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–µ—Å—Ç—Ä–∞: {e}")
            return False
    
    def validate_function_data(self, func_data):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–∏"""
        required_fields = ['function_id', 'name', 'function_type', 'status']
        
        for field in required_fields:
            if field not in func_data:
                print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: {field}")
                return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤
        if not isinstance(func_data['function_id'], str):
            print("‚ùå function_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π")
            return False
        
        if not isinstance(func_data['name'], str):
            print("‚ùå name –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π")
            return False
        
        if func_data['function_type'] not in ['ai_agent', 'security', 'bot', 'manager', 'monitoring', 'service']:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ñ—É–Ω–∫—Ü–∏–∏: {func_data['function_type']}")
            return False
        
        if func_data['status'] not in ['active', 'sleeping', 'disabled']:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {func_data['status']}")
            return False
        
        return True
    
    def add_function(self, func_data):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Ä–µ–µ—Å—Ç—Ä"""
        if not self.validate_function_data(func_data):
            return False
        
        func_id = func_data['function_id']
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç
        if func_id in self.registry_data.get('functions', {}):
            print(f"‚ö†Ô∏è  –§—É–Ω–∫—Ü–∏—è {func_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å? (y/N): ", end='')
            response = input().strip().lower()
            if response != 'y':
                print("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
                return False
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
        if 'functions' not in self.registry_data:
            self.registry_data['functions'] = {}
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø–æ–ª–µ–π
        default_fields = {
            'created_at': datetime.now().isoformat(),
            'is_critical': func_data.get('is_critical', False),
            'auto_enable': func_data.get('auto_enable', False),
            'quality_grade': func_data.get('quality_grade', 'A'),
            'test_coverage': func_data.get('test_coverage', '0%'),
            'execution_count': 0,
            'success_count': 0,
            'error_count': 0
        }
        
        # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        final_func_data = {**default_fields, **func_data}
        
        self.registry_data['functions'][func_id] = final_func_data
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.update_statistics()
        
        print(f"‚úÖ –§—É–Ω–∫—Ü–∏—è {func_id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
        return True
    
    def update_statistics(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ä–µ–µ—Å—Ç—Ä–µ"""
        functions = self.registry_data.get('functions', {})
        
        stats = {
            'total_functions': len(functions),
            'active_functions': sum(1 for f in functions.values() if f.get('status') == 'active'),
            'sleeping_functions': sum(1 for f in functions.values() if f.get('status') == 'sleeping'),
            'critical_functions': sum(1 for f in functions.values() if f.get('is_critical', False)),
            'auto_enable_functions': sum(1 for f in functions.values() if f.get('auto_enable', False))
        }
        
        self.registry_data['statistics'] = stats
        self.registry_data['last_updated'] = datetime.now().isoformat()
    
    def add_function_from_file(self, file_path):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                func_data = json.load(f)
            
            if isinstance(func_data, list):
                # –ï—Å–ª–∏ —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –º–∞—Å—Å–∏–≤ —Ñ—É–Ω–∫—Ü–∏–π
                for func in func_data:
                    if not self.add_function(func):
                        return False
            else:
                # –ï—Å–ª–∏ —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–¥–Ω—É —Ñ—É–Ω–∫—Ü–∏—é
                if not self.add_function(func_data):
                    return False
            
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
            return False
    
    def add_function_interactive(self):
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏"""
        print("üîß –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–û–ï –î–û–ë–ê–í–õ–ï–ù–ò–ï –§–£–ù–ö–¶–ò–ò")
        print("=" * 50)
        
        func_data = {}
        
        # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        func_data['function_id'] = input("Function ID: ").strip()
        func_data['name'] = input("Name: ").strip()
        func_data['description'] = input("Description: ").strip()
        
        print("\n–¢–∏–ø —Ñ—É–Ω–∫—Ü–∏–∏:")
        print("1. ai_agent")
        print("2. security")
        print("3. bot")
        print("4. manager")
        print("5. monitoring")
        print("6. service")
        
        type_choice = input("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø (1-6): ").strip()
        type_map = {
            '1': 'ai_agent',
            '2': 'security',
            '3': 'bot',
            '4': 'manager',
            '5': 'monitoring',
            '6': 'service'
        }
        func_data['function_type'] = type_map.get(type_choice, 'ai_agent')
        
        print("\n–°—Ç–∞—Ç—É—Å:")
        print("1. active")
        print("2. sleeping")
        print("3. disabled")
        
        status_choice = input("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å (1-3): ").strip()
        status_map = {
            '1': 'active',
            '2': 'sleeping',
            '3': 'disabled'
        }
        func_data['status'] = status_map.get(status_choice, 'active')
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        func_data['file_path'] = input("File path (optional): ").strip() or None
        func_data['class_name'] = input("Class name (optional): ").strip() or None
        
        is_critical = input("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è? (y/N): ").strip().lower() == 'y'
        func_data['is_critical'] = is_critical
        
        auto_enable = input("–ê–≤—Ç–æ–≤–∫–ª—é—á–µ–Ω–∏–µ? (y/N): ").strip().lower() == 'y'
        func_data['auto_enable'] = auto_enable
        
        return self.add_function(func_data)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description='–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –≤ SFM —Ä–µ–µ—Å—Ç—Ä')
    parser.add_argument('-f', '--file', help='–§–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏–∏ (JSON)')
    parser.add_argument('-i', '--interactive', action='store_true', help='–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ')
    parser.add_argument('--function-id', help='ID —Ñ—É–Ω–∫—Ü–∏–∏')
    parser.add_argument('--name', help='–ò–º—è —Ñ—É–Ω–∫—Ü–∏–∏')
    parser.add_argument('--description', help='–û–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏')
    parser.add_argument('--type', choices=['ai_agent', 'security', 'bot', 'manager', 'monitoring', 'service'], help='–¢–∏–ø —Ñ—É–Ω–∫—Ü–∏–∏')
    parser.add_argument('--status', choices=['active', 'sleeping', 'disabled'], help='–°—Ç–∞—Ç—É—Å —Ñ—É–Ω–∫—Ü–∏–∏')
    parser.add_argument('--critical', action='store_true', help='–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è')
    parser.add_argument('--auto-enable', action='store_true', help='–ê–≤—Ç–æ–≤–∫–ª—é—á–µ–Ω–∏–µ')
    
    args = parser.parse_args()
    
    adder = SFMFunctionAdder()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
    if not adder.create_backup():
        sys.exit(1)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–µ—Å—Ç—Ä–∞
    if not adder.load_registry():
        sys.exit(1)
    
    success = False
    
    if args.file:
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞
        success = adder.add_function_from_file(args.file)
    elif args.interactive:
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
        success = adder.add_function_interactive()
    elif args.function_id and args.name and args.type and args.status:
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        func_data = {
            'function_id': args.function_id,
            'name': args.name,
            'description': args.description or '',
            'function_type': args.type,
            'status': args.status,
            'is_critical': args.critical,
            'auto_enable': args.auto_enable
        }
        success = adder.add_function(func_data)
    else:
        print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏")
        sys.exit(1)
    
    if success:
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–µ—Å—Ç—Ä–∞
        if adder.save_registry():
            print("‚úÖ –§—É–Ω–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ SFM —Ä–µ–µ—Å—Ç—Ä")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–µ—Å—Ç—Ä–∞")
            sys.exit(1)
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏")
        sys.exit(1)

if __name__ == "__main__":
    main()