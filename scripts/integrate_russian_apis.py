#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö API —Å SafeFunctionManager
–Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç—ã, –ì–õ–û–ù–ê–°–° –∏ –¥—Ä—É–≥–∏–µ —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ —Å–µ—Ä–≤–∏—Å—ã
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from security.russian_api_manager import russian_api_manager, RussianAPIType
from security.safe_function_manager import SafeFunctionManager
from core.base import SecurityLevel, ComponentStatus
from core.logging_module import LoggingManager

logger = LoggingManager(name="IntegrateRussianAPIs")


def integrate_russian_apis():
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö API —Å SafeFunctionManager"""
    logger.log("INFO", "üöÄ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö API...")
    print("=" * 60)
    print("üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö API —Å SafeFunctionManager...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º SafeFunctionManager
        safe_manager = SafeFunctionManager()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç—ã API
        print("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏: –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç—ã API")
        result_yandex = safe_manager.register_function(
            function_id="russian_yandex_maps",
            name="–Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç—ã API",
            description="–ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ì–õ–û–ù–ê–°–°",
            function_type="geolocation",
            security_level=SecurityLevel.HIGH,
            auto_enable=True
        )
        
        if result_yandex:
            logger.log("ERROR", "‚úÖ –§—É–Ω–∫—Ü–∏—è '–Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç—ã API' —É—Å–ø–µ—à–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞")
            print("‚úÖ –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç—ã API –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
        else:
            logger.log("INFO", "‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏ '–Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç—ã API'")
            print("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç—ã API")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ì–õ–û–ù–ê–°–° API
        print("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏: –ì–õ–û–ù–ê–°–° API")
        result_glonass = safe_manager.register_function(
            function_id="russian_glonass",
            name="–ì–õ–û–ù–ê–°–° API",
            description="–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —á–µ—Ä–µ–∑ —Ä–æ—Å—Å–∏–π—Å–∫—É—é —Å–ø—É—Ç–Ω–∏–∫–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –ì–õ–û–ù–ê–°–°",
            function_type="geolocation",
            security_level=SecurityLevel.HIGH,
            auto_enable=True
        )
        
        if result_glonass:
            logger.log("ERROR", "‚úÖ –§—É–Ω–∫—Ü–∏—è '–ì–õ–û–ù–ê–°–° API' —É—Å–ø–µ—à–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞")
            print("‚úÖ –ì–õ–û–ù–ê–°–° API –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
        else:
            logger.log("INFO", "‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏ '–ì–õ–û–ù–ê–°–° API'")
            print("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ì–õ–û–ù–ê–°–° API")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –û—Ç–∫—Ä—ã—Ç—ã–π –ì–õ–û–ù–ê–°–°
        print("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏: –û—Ç–∫—Ä—ã—Ç—ã–π –ì–õ–û–ù–ê–°–°")
        result_free_glonass = safe_manager.register_function(
            function_id="russian_free_glonass",
            name="–û—Ç–∫—Ä—ã—Ç—ã–π –ì–õ–û–ù–ê–°–°",
            description="–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ —á–µ—Ä–µ–∑ –ì–õ–û–ù–ê–°–°/GPS IoT",
            function_type="monitoring",
            security_level=SecurityLevel.MEDIUM,
            auto_enable=True
        )
        
        if result_free_glonass:
            logger.log("ERROR", "‚úÖ –§—É–Ω–∫—Ü–∏—è '–û—Ç–∫—Ä—ã—Ç—ã–π –ì–õ–û–ù–ê–°–°' —É—Å–ø–µ—à–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞")
            print("‚úÖ –û—Ç–∫—Ä—ã—Ç—ã–π –ì–õ–û–ù–ê–°–° –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
        else:
            logger.log("INFO", "‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏ '–û—Ç–∫—Ä—ã—Ç—ã–π –ì–õ–û–ù–ê–°–°'")
            print("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –û—Ç–∫—Ä—ã—Ç—ã–π –ì–õ–û–ù–ê–°–°")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º ALTOX Server
        print("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏: ALTOX Server")
        result_altox = safe_manager.register_function(
            function_id="russian_altox_server",
            name="ALTOX Server",
            description="–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ GPS-GLONASS –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞",
            function_type="monitoring",
            security_level=SecurityLevel.MEDIUM,
            auto_enable=True
        )
        
        if result_altox:
            logger.log("ERROR", "‚úÖ –§—É–Ω–∫—Ü–∏—è 'ALTOX Server' —É—Å–ø–µ—à–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞")
            print("‚úÖ ALTOX Server –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
        else:
            logger.log("INFO", "‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏ 'ALTOX Server'")
            print("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ALTOX Server")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
        print("\nüìä –°—Ç–∞—Ç—É—Å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π:")
        function_ids = [
            "russian_yandex_maps",
            "russian_glonass", 
            "russian_free_glonass",
            "russian_altox_server"
        ]
        
        for func_id in function_ids:
            status = safe_manager.get_function_status(func_id)
            if status:
                print(f"  - {status.get('name')}: {status.get('status')}")
                logger.log("WARNING", f"–§—É–Ω–∫—Ü–∏—è {func_id}: {status.get('status')}")
            else:
                print(f"  - {func_id}: –ù–µ –Ω–∞–π–¥–µ–Ω–∞")
                logger.log("INFO", f"–§—É–Ω–∫—Ü–∏—è {func_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ SafeFunctionManager
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π —á–µ—Ä–µ–∑ SafeFunctionManager:")
        
        # –¢–µ—Å—Ç –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
        print("  - –¢–µ—Å—Ç –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è (–ú–æ—Å–∫–≤–∞):")
        try:
            geocode_result = safe_manager.execute_function(
                "russian_yandex_maps", 
                address="–ú–æ—Å–∫–≤–∞, –ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å"
            )
            print(f"    –†–µ–∑—É–ª—å—Ç–∞—Ç: {geocode_result}")
            logger.log("ERROR", f"–¢–µ—Å—Ç –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: {geocode_result}")
        except Exception as e:
            print(f"    –û—à–∏–±–∫–∞: {e}")
            logger.log("INFO", f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        
        # –¢–µ—Å—Ç –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
        print("  - –¢–µ—Å—Ç –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ (–ú–æ—Å–∫–≤–∞ -> –°–ü–±):")
        try:
            route_result = safe_manager.execute_function(
                "russian_yandex_maps",
                from_point="–ú–æ—Å–∫–≤–∞",
                to_point="–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"
            )
            print(f"    –†–µ–∑—É–ª—å—Ç–∞—Ç: {route_result}")
            logger.log("ERROR", f"–¢–µ—Å—Ç –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏: {route_result}")
        except Exception as e:
            print(f"    –û—à–∏–±–∫–∞: {e}")
            logger.log("INFO", f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏: {e}")
        
        # –¢–µ—Å—Ç –ì–õ–û–ù–ê–°–°
        print("  - –¢–µ—Å—Ç –ì–õ–û–ù–ê–°–° –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç:")
        try:
            glonass_result = safe_manager.execute_function(
                "russian_glonass",
                device_id="test_device_001"
            )
            print(f"    –†–µ–∑—É–ª—å—Ç–∞—Ç: {glonass_result}")
            logger.log("ERROR", f"–¢–µ—Å—Ç –ì–õ–û–ù–ê–°–°: {glonass_result}")
        except Exception as e:
            print(f"    –û—à–∏–±–∫–∞: {e}")
            logger.log("INFO", f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –ì–õ–û–ù–ê–°–°: {e}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö API:")
        try:
            stats = russian_api_manager.get_usage_statistics()
            usage = stats.get('usage_stats', {})
            print(f"  üìà –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {usage.get('total_requests', 0)}")
            print(f"  ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {usage.get('successful_requests', 0)}")
            print(f"  ‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: {usage.get('failed_requests', 0)}")
            print(f"  üíæ –ö—ç—à –ø–æ–ø–∞–¥–∞–Ω–∏–π: {usage.get('cache_hits', 0)}")
            print(f"  üîß API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π: {len(stats.get('api_configs', {}))}")
            
            logger.log("ERROR", f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")
        except Exception as e:
            print(f"  –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            logger.log("INFO", f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        
        print("\n‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö API –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("=" * 60)
        
        return True
        
    except Exception as e:
        logger.log("CRITICAL", f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö API: {e}")
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö API: {e}")
        return False


def test_russian_apis_direct():
    """–ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö API –±–µ–∑ SafeFunctionManager"""
    print(f"\nüß™ –ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö API...")
    
    try:
        import asyncio
        
        # –¢–µ—Å—Ç –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
        print("üåç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è...")
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        geocode_result = loop.run_until_complete(
            russian_api_manager.geocode_address("–ú–æ—Å–∫–≤–∞, –ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å")
        )
        loop.close()
        
        if geocode_result:
            print("‚úÖ –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print(f"   üìç –ê–¥—Ä–µ—Å: {geocode_result.address}")
            print(f"   üìä –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {geocode_result.coordinates}")
            print(f"   üèôÔ∏è –ì–æ—Ä–æ–¥: {geocode_result.city}")
            print(f"   üåç –°—Ç—Ä–∞–Ω–∞: {geocode_result.country}")
            print(f"   üîß API: {geocode_result.api_source}")
        else:
            print("‚ùå –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –¢–µ—Å—Ç –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
        print("üõ£Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏...")
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        route_result = loop.run_until_complete(
            russian_api_manager.build_route("–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥")
        )
        loop.close()
        
        if route_result:
            print("‚úÖ –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print(f"   üöó –ú–∞—Ä—à—Ä—É—Ç: {route_result.from_point} -> {route_result.to_point}")
            print(f"   üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {route_result.distance:.0f} –º")
            print(f"   ‚è±Ô∏è –í—Ä–µ–º—è: {route_result.duration:.0f} —Å–µ–∫")
            print(f"   üîß API: {route_result.api_source}")
        else:
            print("‚ùå –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –¢–µ—Å—Ç –ì–õ–û–ù–ê–°–°
        print("üõ∞Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ì–õ–û–ù–ê–°–°...")
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        glonass_result = loop.run_until_complete(
            russian_api_manager.get_glonass_coordinates("test_device")
        )
        loop.close()
        
        if glonass_result:
            print("‚úÖ –ì–õ–û–ù–ê–°–° —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print(f"   üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {glonass_result}")
        else:
            print("‚ùå –ì–õ–û–ù–ê–°–° –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = russian_api_manager.get_usage_statistics()
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:")
        usage = stats.get('usage_stats', {})
        print(f"   üìà –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {usage.get('total_requests', 0)}")
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {usage.get('successful_requests', 0)}")
        print(f"   ‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: {usage.get('failed_requests', 0)}")
        print(f"   üíæ –ö—ç—à –ø–æ–ø–∞–¥–∞–Ω–∏–π: {usage.get('cache_hits', 0)}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        logger.log("ERROR", f"–û—à–∏–±–∫–∞ –ø—Ä—è–º–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False


if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö API...")
    print("=" * 60)
    
    # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å SafeFunctionManager
    integration_success = integrate_russian_apis()
    
    # –ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    direct_test_success = test_russian_apis_direct()
    
    print(f"\n" + "=" * 60)
    print(f"üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print(f"‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è SafeFunctionManager: {'–î–∞' if integration_success else '–ù–µ—Ç'}")
    print(f"‚úÖ –ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API: {'–î–∞' if direct_test_success else '–ù–µ—Ç'}")
    
    if integration_success and direct_test_success:
        print(f"\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print(f"‚úÖ –†–æ—Å—Å–∏–π—Å–∫–∏–µ API —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print(f"‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å SafeFunctionManager —É—Å–ø–µ—à–Ω–∞")
        print(f"üåê API –¥–æ—Å—Ç—É–ø–Ω–æ: http://localhost:5005/api/russian/")
    else:
        print(f"\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
    
    print("=" * 60)