#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ë—ã—Å—Ç—Ä—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã ALADDIN
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç CPU, RAM –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É SFM
"""

import sys
import os
import time
import psutil
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from security.safe_function_manager import SafeFunctionManager

def get_system_stats():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤"""
    cpu = psutil.cpu_percent(interval=0.1)
    ram = psutil.virtual_memory()
    
    return {
        'cpu_percent': cpu,
        'ram_percent': ram.percent,
        'ram_used_gb': ram.used / (1024**3),
        'ram_total_gb': ram.total / (1024**3),
        'ram_available_gb': ram.available / (1024**3)
    }

def get_sfm_stats():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ SFM"""
    config = {
        'thread_pool_enabled': True,
        'max_thread_pool_workers': 5,
        'async_io_enabled': True,
        'redis_cache_enabled': True,
        'enable_auto_management': False,
        'enable_sleep_mode': False
    }
    
    sfm = SafeFunctionManager('MonitorSFM', config)
    
    total = len(sfm.functions)
    active = 0
    sleeping = 0
    critical = 0
    critical_sleeping = 0
    
    for func_id, func_obj in sfm.functions.items():
        if getattr(func_obj, 'is_critical', False):
            critical += 1
            status = str(getattr(func_obj, 'status', ''))
            if 'sleep' in status.lower():
                critical_sleeping += 1
        
        status = str(getattr(func_obj, 'status', ''))
        if 'active' in status.lower():
            active += 1
        elif 'sleep' in status.lower():
            sleeping += 1
    
    return {
        'total_functions': total,
        'active_functions': active,
        'sleeping_functions': sleeping,
        'critical_functions': critical,
        'critical_sleeping': critical_sleeping,
        'active_percentage': (active / total * 100) if total > 0 else 0
    }

def test_sfm_performance():
    """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ SFM"""
    config = {
        'thread_pool_enabled': True,
        'max_thread_pool_workers': 5,
        'async_io_enabled': True,
        'redis_cache_enabled': True,
        'enable_auto_management': False,
        'enable_sleep_mode': False
    }
    
    sfm = SafeFunctionManager('PerfSFM', config)
    
    start_time = time.time()
    for i in range(10):
        _ = list(sfm.functions.keys())
        critical_functions = []
        for func_id, func_obj in sfm.functions.items():
            if getattr(func_obj, 'is_critical', False):
                critical_functions.append(func_id)
    end_time = time.time()
    
    avg_response = (end_time - start_time) / 10
    operations_per_sec = 10 / (end_time - start_time)
    
    return {
        'avg_response_ms': avg_response * 1000,
        'operations_per_sec': operations_per_sec,
        'total_time': end_time - start_time
    }

def main():
    print("üñ•Ô∏è  –ë–´–°–¢–†–´–ô –ú–û–ù–ò–¢–û–†–ò–ù–ì –°–ò–°–¢–ï–ú–´ ALADDIN")
    print("=" * 60)
    
    # –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
    sys_stats = get_system_stats()
    print("üíª –°–ò–°–¢–ï–ú–ù–´–ï –†–ï–°–£–†–°–´:")
    print(f"   üñ•Ô∏è  CPU: {sys_stats['cpu_percent']:.1f}%")
    print(f"   üíæ RAM: {sys_stats['ram_percent']:.1f}% ({sys_stats['ram_used_gb']:.2f}GB / {sys_stats['ram_total_gb']:.2f}GB)")
    print(f"   üìä –î–æ—Å—Ç—É–ø–Ω–æ RAM: {sys_stats['ram_available_gb']:.2f}GB")
    print()
    
    # SFM —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    sfm_stats = get_sfm_stats()
    print("üîß –°–¢–ê–¢–ò–°–¢–ò–ö–ê SFM:")
    print(f"   üì¶ –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π: {sfm_stats['total_functions']}")
    print(f"   ‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {sfm_stats['active_functions']} ({sfm_stats['active_percentage']:.1f}%)")
    print(f"   üí§ –°–ø—è—â–∏—Ö: {sfm_stats['sleeping_functions']}")
    print(f"   üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö: {sfm_stats['critical_functions']}")
    print(f"   ‚ö†Ô∏è  –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–ø—è—â–∏—Ö: {sfm_stats['critical_sleeping']}")
    print()
    
    # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å SFM
    perf_stats = test_sfm_performance()
    print("‚ö° –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨ SFM:")
    print(f"   üèÉ –°—Ä–µ–¥–Ω–∏–π –æ—Ç–∫–ª–∏–∫: {perf_stats['avg_response_ms']:.2f} –º—Å")
    print(f"   üöÄ –û–ø–µ—Ä–∞—Ü–∏–π/—Å–µ–∫: {perf_stats['operations_per_sec']:.1f}")
    print()
    
    # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
    print("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´:")
    if sfm_stats['critical_sleeping'] > 0:
        print(f"   ‚ùå {sfm_stats['critical_sleeping']} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π —Å–ø—è—Ç!")
    else:
        print("   ‚úÖ –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã")
    
    if sfm_stats['sleeping_functions'] > 0:
        print(f"   ‚ö†Ô∏è  {sfm_stats['sleeping_functions']} —Ñ—É–Ω–∫—Ü–∏–π –≤ —Å–ø—è—â–µ–º —Ä–µ–∂–∏–º–µ ({sfm_stats['sleeping_functions']/sfm_stats['total_functions']*100:.1f}%)")
    else:
        print("   ‚úÖ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã")
    
    print()
    print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    if sfm_stats['critical_sleeping'] > 0:
        print("   1. –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–ø—è—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏")
    if sfm_stats['sleeping_functions'] > sfm_stats['critical_sleeping']:
        print("   2. –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å–ø—è—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏")
    if sys_stats['cpu_percent'] > 80:
        print("   3. –í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ CPU - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É")
    if sys_stats['ram_percent'] > 90:
        print("   4. –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ RAM - –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –ø–∞–º—è—Ç—å")

if __name__ == "__main__":
    main()