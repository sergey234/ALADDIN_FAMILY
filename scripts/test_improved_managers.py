#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –≤—Å–µ—Ö 5 –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –ø–æ—Å–ª–µ —É–ª—É—á—à–µ–Ω–∏–π:
- MonitorManager
- AlertManager  
- ReportManager
- AnalyticsManager
- DashboardManager
"""

import sys
import os
import traceback
import time
from datetime import datetime

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

def test_imports():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –≤—Å–µ—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤...")
    
    managers = [
        ('MonitorManager', 'security.ai_agents.monitor_manager'),
        ('AlertManager', 'security.managers.alert_manager'),
        ('ReportManager', 'security.managers.report_manager'),
        ('AnalyticsManager', 'security.ai_agents.analytics_manager'),
        ('DashboardManager', 'security.ai_agents.dashboard_manager')
    ]
    
    results = {}
    
    for manager_name, module_path in managers:
        try:
            module = __import__(module_path, fromlist=[manager_name])
            manager_class = getattr(module, manager_name)
            results[manager_name] = {'status': 'success', 'class': manager_class}
            print(f"  ‚úÖ {manager_name}: –∏–º–ø–æ—Ä—Ç —É—Å–ø–µ—à–µ–Ω")
        except Exception as e:
            results[manager_name] = {'status': 'error', 'error': str(e)}
            print(f"  ‚ùå {manager_name}: –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ - {e}")
    
    return results

def test_initialization(import_results):
    """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤"""
    print("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤...")
    
    results = {}
    
    for manager_name, data in import_results.items():
        if data['status'] != 'success':
            results[manager_name] = {'status': 'skipped', 'reason': 'import_failed'}
            continue
            
        try:
            manager_class = data['class']
            manager = manager_class()
            results[manager_name] = {'status': 'success', 'instance': manager}
            print(f"  ‚úÖ {manager_name}: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
        except Exception as e:
            results[manager_name] = {'status': 'error', 'error': str(e)}
            print(f"  ‚ùå {manager_name}: –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ - {e}")
    
    return results

def test_basic_functionality(init_results):
    """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""
    print("\n‚öôÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏...")
    
    results = {}
    
    for manager_name, data in init_results.items():
        if data['status'] != 'success':
            results[manager_name] = {'status': 'skipped', 'reason': 'init_failed'}
            continue
            
        try:
            manager = data['instance']
            test_results = {}
            
            # –¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
            if hasattr(manager, 'get_stats'):
                stats = manager.get_stats()
                test_results['get_stats'] = 'success'
                print(f"    ‚úÖ {manager_name}.get_stats(): {len(stats)} –º–µ—Ç—Ä–∏–∫")
            
            if hasattr(manager, 'get_status'):
                status = manager.get_status()
                test_results['get_status'] = 'success'
                print(f"    ‚úÖ {manager_name}.get_status(): {status}")
            
            if hasattr(manager, 'get_health'):
                health = manager.get_health()
                test_results['get_health'] = 'success'
                print(f"    ‚úÖ {manager_name}.get_health(): {health}")
            
            # –¢–µ—Å—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
            if manager_name == 'MonitorManager':
                if hasattr(manager, 'start_monitoring'):
                    import asyncio
                    try:
                        asyncio.run(manager.start_monitoring())
                        test_results['start_monitoring'] = 'success'
                        print(f"    ‚úÖ {manager_name}.start_monitoring(): –∑–∞–ø—É—â–µ–Ω")
                    except Exception as e:
                        print(f"    ‚ö†Ô∏è {manager_name}.start_monitoring(): {e}")
                
                if hasattr(manager, 'stop_monitoring'):
                    import asyncio
                    try:
                        asyncio.run(manager.stop_monitoring())
                        test_results['stop_monitoring'] = 'success'
                        print(f"    ‚úÖ {manager_name}.stop_monitoring(): –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                    except Exception as e:
                        print(f"    ‚ö†Ô∏è {manager_name}.stop_monitoring(): {e}")
            
            elif manager_name == 'AlertManager':
                if hasattr(manager, 'process_alert'):
                    test_alert = {'id': 'test', 'message': 'Test alert', 'severity': 'low'}
                    result = manager.process_alert(test_alert)
                    test_results['process_alert'] = 'success'
                    print(f"    ‚úÖ {manager_name}.process_alert(): –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
            
            elif manager_name == 'ReportManager':
                if hasattr(manager, 'generate_report'):
                    report = manager.generate_report('test_report')
                    test_results['generate_report'] = 'success'
                    print(f"    ‚úÖ {manager_name}.generate_report(): —Å–æ–∑–¥–∞–Ω")
            
            elif manager_name == 'AnalyticsManager':
                if hasattr(manager, 'analyze_data'):
                    test_data = [1, 2, 3, 4, 5]
                    analysis = manager.analyze_data(test_data)
                    test_results['analyze_data'] = 'success'
                    print(f"    ‚úÖ {manager_name}.analyze_data(): –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
            
            elif manager_name == 'DashboardManager':
                if hasattr(manager, 'create_user'):
                    success = manager.create_user('test_user', 'Test User', 'viewer')
                    test_results['create_user'] = 'success'
                    print(f"    ‚úÖ {manager_name}.create_user(): —Å–æ–∑–¥–∞–Ω")
            
            results[manager_name] = {'status': 'success', 'tests': test_results}
            print(f"  ‚úÖ {manager_name}: –±–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
        except Exception as e:
            results[manager_name] = {'status': 'error', 'error': str(e)}
            print(f"  ‚ùå {manager_name}: –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - {e}")
            traceback.print_exc()
    
    return results

def test_ml_algorithms(init_results):
    """–¢–µ—Å—Ç ML –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤"""
    print("\nüß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ML –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤...")
    
    results = {}
    
    for manager_name, data in init_results.items():
        if data['status'] != 'success':
            results[manager_name] = {'status': 'skipped', 'reason': 'init_failed'}
            continue
            
        try:
            manager = data['instance']
            test_results = {}
            
            # –¢–µ—Å—Ç ML –º–µ—Ç–æ–¥–æ–≤
            if hasattr(manager, '_cluster_data'):
                test_data = [[1, 2], [2, 3], [3, 4], [4, 5]]
                clusters = manager._cluster_data(test_data)
                test_results['clustering'] = 'success'
                print(f"    ‚úÖ {manager_name}.clustering: {len(clusters)} –∫–ª–∞—Å—Ç–µ—Ä–æ–≤")
            
            if hasattr(manager, '_detect_anomalies'):
                test_data = [1, 2, 3, 100, 4, 5]  # 100 - –∞–Ω–æ–º–∞–ª–∏—è
                try:
                    anomalies = manager._detect_anomalies(test_data)
                    test_results['anomaly_detection'] = 'success'
                    print(f"    ‚úÖ {manager_name}.anomaly_detection: –Ω–∞–π–¥–µ–Ω–æ {len(anomalies)} –∞–Ω–æ–º–∞–ª–∏–π")
                except Exception as e:
                    print(f"    ‚ö†Ô∏è {manager_name}.anomaly_detection: {e}")
            
            if hasattr(manager, '_analyze_behavior'):
                test_data = [{'user_id': 'test', 'action': 'login', 'timestamp': datetime.now()}]
                try:
                    analysis = manager._analyze_behavior(test_data)
                    test_results['behavior_analysis'] = 'success'
                    print(f"    ‚úÖ {manager_name}.behavior_analysis: –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
                except Exception as e:
                    print(f"    ‚ö†Ô∏è {manager_name}.behavior_analysis: {e}")
            
            if hasattr(manager, '_optimize_layout'):
                # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –º–∞–∫–µ—Ç
                from security.ai_agents.dashboard_manager import DashboardLayout, DashboardWidget
                test_layout = DashboardLayout('test', (3, 3), [])
                test_widgets = {
                    'widget1': 0.8,
                    'widget2': 0.6,
                    'widget3': 0.4
                }
                manager._optimize_layout(test_layout, test_widgets)
                test_results['layout_optimization'] = 'success'
                print(f"    ‚úÖ {manager_name}.layout_optimization: –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            results[manager_name] = {'status': 'success', 'ml_tests': test_results}
            print(f"  ‚úÖ {manager_name}: ML –∞–ª–≥–æ—Ä–∏—Ç–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç")
            
        except Exception as e:
            results[manager_name] = {'status': 'error', 'error': str(e)}
            print(f"  ‚ùå {manager_name}: –æ—à–∏–±–∫–∞ ML —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - {e}")
    
    return results

def generate_report(import_results, init_results, functionality_results, ml_results):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
    print("\nüìä –û–¢–ß–ï–¢ –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò –£–õ–£–ß–®–ï–ù–ù–´–• –ú–ï–ù–ï–î–ñ–ï–†–û–í")
    print("=" * 60)
    
    total_managers = len(import_results)
    successful_imports = sum(1 for r in import_results.values() if r['status'] == 'success')
    successful_inits = sum(1 for r in init_results.values() if r['status'] == 'success')
    successful_tests = sum(1 for r in functionality_results.values() if r['status'] == 'success')
    successful_ml = sum(1 for r in ml_results.values() if r['status'] == 'success')
    
    print(f"üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"  –í—Å–µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤: {total_managers}")
    print(f"  –£—Å–ø–µ—à–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤: {successful_imports}/{total_managers}")
    print(f"  –£—Å–ø–µ—à–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π: {successful_inits}/{total_managers}")
    print(f"  –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏: {successful_tests}/{total_managers}")
    print(f"  –£—Å–ø–µ—à–Ω—ã—Ö ML —Ç–µ—Å—Ç–æ–≤: {successful_ml}/{total_managers}")
    
    print(f"\nüéØ –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
    success_rate = (successful_tests / total_managers) * 100
    print(f"  –£—Å–ø–µ—à–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {success_rate:.1f}%")
    
    if success_rate >= 80:
        print("  üèÜ –ö–ê–ß–ï–°–¢–í–û: –û–¢–õ–ò–ß–ù–û–ï")
    elif success_rate >= 60:
        print("  ‚úÖ –ö–ê–ß–ï–°–¢–í–û: –•–û–†–û–®–ï–ï")
    elif success_rate >= 40:
        print("  ‚ö†Ô∏è –ö–ê–ß–ï–°–¢–í–û: –£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û–ï")
    else:
        print("  ‚ùå –ö–ê–ß–ï–°–¢–í–û: –¢–†–ï–ë–£–ï–¢ –£–õ–£–ß–®–ï–ù–ò–Ø")
    
    print(f"\nüìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    for manager_name in import_results.keys():
        import_status = import_results[manager_name]['status']
        init_status = init_results[manager_name]['status']
        func_status = functionality_results[manager_name]['status']
        ml_status = ml_results[manager_name]['status']
        
        print(f"\n  {manager_name}:")
        print(f"    –ò–º–ø–æ—Ä—Ç: {'‚úÖ' if import_status == 'success' else '‚ùå'}")
        print(f"    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {'‚úÖ' if init_status == 'success' else '‚ùå'}")
        print(f"    –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {'‚úÖ' if func_status == 'success' else '‚ùå'}")
        print(f"    ML –∞–ª–≥–æ—Ä–∏—Ç–º—ã: {'‚úÖ' if ml_status == 'success' else '‚ùå'}")
    
    return {
        'total_managers': total_managers,
        'successful_imports': successful_imports,
        'successful_inits': successful_inits,
        'successful_tests': successful_tests,
        'successful_ml': successful_ml,
        'success_rate': success_rate
    }

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–õ–£–ß–®–ï–ù–ù–´–• –ú–ï–ù–ï–î–ñ–ï–†–û–í")
    print("=" * 50)
    print(f"–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    start_time = time.time()
    
    try:
        # –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤
        import_results = test_imports()
        
        # –¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        init_results = test_initialization(import_results)
        
        # –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
        functionality_results = test_basic_functionality(init_results)
        
        # –¢–µ—Å—Ç ML –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤
        ml_results = test_ml_algorithms(init_results)
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
        report = generate_report(import_results, init_results, functionality_results, ml_results)
        
        end_time = time.time()
        duration = end_time - start_time
        
        print(f"\n‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"üéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
        
        return report['success_rate'] >= 80
        
    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)