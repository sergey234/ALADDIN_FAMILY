#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π –≤ –ø–æ–∏—Å–∫–µ
–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –ø–æ–∏—Å–∫–∞

–ê–≤—Ç–æ—Ä: ALADDIN Security Team
–í–µ—Ä—Å–∏—è: 1.0
–î–∞—Ç–∞: 2025-09-08
"""

import requests
import json
import time
import os
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from elasticsearch_simulator import ElasticsearchSimulator, LogLevel, LogEntry
from datetime import datetime, timedelta

ELASTICSEARCH_API_URL = "http://localhost:5001/api/elasticsearch"


def test_regex_search_simulator():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π –≤ —Å–∏–º—É–ª—è—Ç–æ—Ä–µ"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π –≤ —Å–∏–º—É–ª—è—Ç–æ—Ä–µ")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º —Å–∏–º—É–ª—è—Ç–æ—Ä
    es = ElasticsearchSimulator()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    test_cases = [
        {
            "name": "–ü–æ–∏—Å–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É 'error|warning'",
            "query": "error|warning",
            "use_regex": True,
            "expected_min": 1
        },
        {
            "name": "–ü–æ–∏—Å–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É '^.*Manager.*$'",
            "query": "^.*Manager.*$",
            "use_regex": True,
            "expected_min": 1
        },
        {
            "name": "–ü–æ–∏—Å–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É '\\d{4}-\\d{2}-\\d{2}' (–¥–∞—Ç—ã)",
            "query": "\\d{4}-\\d{2}-\\d{2}",
            "use_regex": True,
            "expected_min": 0
        },
        {
            "name": "–ü–æ–∏—Å–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É 'user_\\d+' (ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)",
            "query": "user_\\d+",
            "use_regex": True,
            "expected_min": 0
        },
        {
            "name": "–ü–æ–∏—Å–∫ —Å —É—á–µ—Ç–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞ 'Security'",
            "query": "Security",
            "use_regex": False,
            "case_sensitive": True,
            "expected_min": 0
        },
        {
            "name": "–ü–æ–∏—Å–∫ –±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞ 'security'",
            "query": "security",
            "use_regex": False,
            "case_sensitive": False,
            "expected_min": 1
        }
    ]
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"{i}. {test_case['name']}")
        
        try:
            result = es.search(
                query=test_case['query'],
                use_regex=test_case.get('use_regex', False),
                case_sensitive=test_case.get('case_sensitive', False),
                limit=10
            )
            
            hits = result.get('hits', 0)
            expected = test_case.get('expected_min', 0)
            
            if hits >= expected:
                print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ {hits} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–æ–∂–∏–¥–∞–ª–æ—Å—å –º–∏–Ω–∏–º—É–º {expected})")
            else:
                print(f"   ‚ùå –ù–∞–π–¥–µ–Ω–æ {hits} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–æ–∂–∏–¥–∞–ª–æ—Å—å –º–∏–Ω–∏–º—É–º {expected})")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            logs = result.get('logs', [])
            if logs:
                print(f"   üìù –ü—Ä–∏–º–µ—Ä—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
                for j, log in enumerate(logs[:3]):
                    print(f"      - {log.get('component', 'Unknown')}: {log.get('message', 'No message')[:50]}...")
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        
        print()
    
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")


def test_regex_search_api():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ API"""
    print("\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ API")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è API
    test_cases = [
        {
            "name": "API: –ü–æ–∏—Å–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É 'error|warning'",
            "params": {"q": "error|warning", "regex": "true"},
            "expected_min": 1
        },
        {
            "name": "API: –ü–æ–∏—Å–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É '^.*Manager.*$'",
            "params": {"q": "^.*Manager.*$", "regex": "true"},
            "expected_min": 1
        },
        {
            "name": "API: –ü–æ–∏—Å–∫ —Å —É—á–µ—Ç–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞",
            "params": {"q": "Security", "case_sensitive": "true"},
            "expected_min": 0
        },
        {
            "name": "API: –ü–æ–∏—Å–∫ –±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞",
            "params": {"q": "security", "case_sensitive": "false"},
            "expected_min": 1
        },
        {
            "name": "API: –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫ (regex + —Ñ–∏–ª—å—Ç—Ä—ã)",
            "params": {"q": "error|warning", "regex": "true", "level": "ERROR", "limit": "5"},
            "expected_min": 0
        }
    ]
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"{i}. {test_case['name']}")
        
        try:
            response = requests.get(f"{ELASTICSEARCH_API_URL}/search", params=test_case['params'], timeout=5)
            
            if response.status_code == 200:
                data = response.json()
                hits = data.get('hits', 0)
                expected = test_case.get('expected_min', 0)
                
                if hits >= expected:
                    print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ {hits} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–æ–∂–∏–¥–∞–ª–æ—Å—å –º–∏–Ω–∏–º—É–º {expected})")
                else:
                    print(f"   ‚ùå –ù–∞–π–¥–µ–Ω–æ {hits} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–æ–∂–∏–¥–∞–ª–æ—Å—å –º–∏–Ω–∏–º—É–º {expected})")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                logs = data.get('logs', [])
                if logs:
                    print(f"   üìù –ü—Ä–∏–º–µ—Ä—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
                    for j, log in enumerate(logs[:2]):
                        print(f"      - {log.get('component', 'Unknown')}: {log.get('message', 'No message')[:50]}...")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                took = data.get('took', 0)
                print(f"   ‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {took}ms")
                
            else:
                print(f"   ‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
                print(f"   üìù –û—Ç–≤–µ—Ç: {response.text[:100]}...")
        
        except requests.exceptions.RequestException as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        
        print()
    
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∑–∞–≤–µ—Ä—à–µ–Ω–æ")


def test_invalid_regex():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π"""
    print("\nüö´ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π")
    print("=" * 50)
    
    invalid_regexes = [
        "[unclosed",
        "(unclosed",
        "\\",
        "?*+",
        "a{5,3}",
        "(?<name>invalid"
    ]
    
    for i, regex in enumerate(invalid_regexes, 1):
        print(f"{i}. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ regex: '{regex}'")
        
        try:
            response = requests.get(f"{ELASTICSEARCH_API_URL}/search", 
                                  params={"q": regex, "regex": "true"}, 
                                  timeout=5)
            
            if response.status_code == 200:
                data = response.json()
                if 'error' in data:
                    print(f"   ‚úÖ –û—à–∏–±–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞: {data['error']}")
                else:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞, –ø–æ–ª—É—á–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {data.get('hits', 0)}")
            else:
                print(f"   ‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
        
        except Exception as e:
            print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        
        print()


def test_performance():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π"""
    print("\n‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã —Ä–∞–∑–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    performance_tests = [
        {
            "name": "–ü—Ä–æ—Å—Ç–æ–π regex: 'error'",
            "query": "error",
            "use_regex": True
        },
        {
            "name": "–°–ª–æ–∂–Ω—ã–π regex: '^.*(error|warning|critical).*$'",
            "query": "^.*(error|warning|critical).*$",
            "use_regex": True
        },
        {
            "name": "–û—á–µ–Ω—å —Å–ª–æ–∂–Ω—ã–π regex: '\\b\\w{5,}\\b'",
            "query": "\\b\\w{5,}\\b",
            "use_regex": True
        },
        {
            "name": "–û–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫: 'error'",
            "query": "error",
            "use_regex": False
        }
    ]
    
    for test in performance_tests:
        print(f"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {test['name']}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è
        times = []
        for _ in range(5):
            start_time = time.time()
            
            try:
                response = requests.get(f"{ELASTICSEARCH_API_URL}/search", 
                                      params={"q": test['query'], "regex": str(test['use_regex']).lower()}, 
                                      timeout=5)
                
                if response.status_code == 200:
                    data = response.json()
                    hits = data.get('hits', 0)
                    took = data.get('took', 0)
                    times.append(took)
                else:
                    print(f"   ‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
                    break
                    
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
                break
        
        if times:
            avg_time = sum(times) / len(times)
            print(f"   ‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_time:.3f}ms")
            print(f"   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {hits}")
            print(f"   üîÑ –¢–µ—Å—Ç–æ–≤: {len(times)}")
        
        print()


if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π")
    print("=" * 60)
    
    # 1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞
    test_regex_search_simulator()
    
    # 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API
    test_regex_search_api()
    
    # 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö regex
    test_invalid_regex()
    
    # 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    test_performance()
    
    print("=" * 60)
    print("üéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ï–ì–£–õ–Ø–†–ù–´–• –í–´–†–ê–ñ–ï–ù–ò–ô –ó–ê–í–ï–†–®–ï–ù–û!")
    print("\nüí° –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–∏—Å–∫–∞:")
    print("   ‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π")
    print("   ‚úÖ –ü–æ–∏—Å–∫ —Å —É—á–µ—Ç–æ–º/–±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞")
    print("   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö regex")
    print("   ‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º")
    print("   ‚úÖ –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã")
    print("\nüåê –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤ –¥–∞—à–±–æ—Ä–¥–µ: http://localhost:5000")