#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ backup —Ñ–∞–π–ª–æ–≤ - Phase 2
–ü–µ—Ä–µ–Ω–æ—Å –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è 6 backup —Ñ–∞–π–ª–æ–≤ —Å –ø–æ–ª–Ω—ã–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
"""

import os
import shutil
import json
import sys
from datetime import datetime
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BASE_DIR = Path("/Users/sergejhlystov/ALADDIN_NEW")
BACKUP_DIR = BASE_DIR / "security" / "formatting_work" / "backup_files"
LOG_FILE = BACKUP_DIR / "FINAL_CLEANUP_LOG.json"

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
BACKUP_DIR.mkdir(parents=True, exist_ok=True)

# –§–∞–π–ª—ã –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ (Phase 2)
FILES_TO_MOVE = [
    {
        "source": "security/ai_agents/elderly_interface_manager_backup_original_backup_20250103.py",
        "target": "elderly_interface_manager_backup_original_backup_20250103.py",
        "original": "security/managers/elderly_interface_manager.py",
        "category": "ai_agents"
    },
    {
        "source": "security/bots/components/notification_service_original_backup_20250103.py",
        "target": "notification_service_original_backup_20250103.py",
        "original": "security/bots/components/notification_service.py",
        "category": "bots"
    },
    {
        "source": "security/bots/components/time_monitor_original_backup_20250103.py",
        "target": "time_monitor_original_backup_20250103.py",
        "original": "security/bots/components/time_monitor.py",
        "category": "bots"
    },
    {
        "source": "security/bots/components/content_analyzer_original_backup_20250103.py",
        "target": "content_analyzer_original_backup_20250103.py",
        "original": "security/bots/components/content_analyzer.py",
        "category": "bots"
    },
    {
        "source": "security/bots/components/performance_optimizer_original_backup_20250103.py",
        "target": "performance_optimizer_original_backup_20250103.py",
        "original": "security/bots/components/performance_optimizer.py",
        "category": "bots"
    },
    {
        "source": "security/microservices/put_to_sleep_backup.py",
        "target": "put_to_sleep_backup.py",
        "original": "security/formatting_work/duplicates/put_to_sleep.py",
        "category": "microservices"
    }
]

def log_operation(operation, status, details=""):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π"""
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    log_entry = {
        "timestamp": timestamp,
        "operation": operation,
        "status": status,
        "details": details
    }
    
    # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ª–æ–≥
    if LOG_FILE.exists():
        with open(LOG_FILE, 'r', encoding='utf-8') as f:
            log_data = json.load(f)
    else:
        log_data = {"phase": "final_cleanup", "operations": []}
    
    log_data["operations"].append(log_entry)
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ª–æ–≥
    with open(LOG_FILE, 'w', encoding='utf-8') as f:
        json.dump(log_data, f, ensure_ascii=False, indent=2)

def test_import(file_path):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ —Ñ–∞–π–ª–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å —Ñ–∞–π–ª–∞
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
        compile(content, str(file_path), 'exec')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        file_size = file_path.stat().st_size
        
        return True, f"–°–∏–Ω—Ç–∞–∫—Å–∏—Å OK, —Ä–∞–∑–º–µ—Ä: {file_size} –±–∞–π—Ç"
    except SyntaxError as e:
        return False, f"–°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
    except Exception as e:
        return False, f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {str(e)}"

def test_sfm_registration():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SFM —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    try:
        sfm_path = BASE_DIR / "data" / "sfm" / "function_registry.json"
        if not sfm_path.exists():
            return False, "SFM —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        with open(sfm_path, 'r', encoding='utf-8') as f:
            sfm_data = json.load(f)
        
        total_functions = len(sfm_data.get('functions', {}))
        active_functions = sum(1 for f in sfm_data.get('functions', {}).values() if f.get('status') == 'active')
        
        return True, f"SFM: {total_functions} —Ñ—É–Ω–∫—Ü–∏–π, {active_functions} –∞–∫—Ç–∏–≤–Ω—ã—Ö"
    except Exception as e:
        return False, f"–û—à–∏–±–∫–∞ SFM: {str(e)}"

def move_backup_file(file_info):
    """–ü–µ—Ä–µ–Ω–æ—Å backup —Ñ–∞–π–ª–∞ —Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    source_path = BASE_DIR / file_info["source"]
    target_path = BACKUP_DIR / file_info["target"]
    original_path = BASE_DIR / file_info["original"]
    
    print(f"\nüîÑ –ü–µ—Ä–µ–Ω–æ—Å: {file_info['source']}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
    if not source_path.exists():
        log_operation(f"move_{file_info['target']}", "ERROR", "Source —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False, "Source —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
    
    if not original_path.exists():
        log_operation(f"move_{file_info['target']}", "ERROR", "Original —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False, "Original —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –î–û –ø–µ—Ä–µ–Ω–æ—Å–∞
    print(f"  ‚úÖ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª: {file_info['original']}")
    original_works, original_msg = test_import(original_path)
    if not original_works:
        log_operation(f"test_original_{file_info['target']}", "ERROR", original_msg)
        return False, f"–û—Ä–∏–≥–∏–Ω–∞–ª –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {original_msg}"
    
    print(f"  ‚úÖ –û—Ä–∏–≥–∏–Ω–∞–ª —Ä–∞–±–æ—Ç–∞–µ—Ç: {original_msg}")
    
    # –ü–µ—Ä–µ–Ω–æ—Å–∏–º —Ñ–∞–π–ª
    try:
        shutil.move(str(source_path), str(target_path))
        print(f"  ‚úÖ –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω: {file_info['target']}")
        log_operation(f"move_{file_info['target']}", "SUCCESS", "–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –ü–û–°–õ–ï –ø–µ—Ä–µ–Ω–æ—Å–∞
        print(f"  üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –ø–æ—Å–ª–µ –ø–µ—Ä–µ–Ω–æ—Å–∞...")
        original_works_after, original_msg_after = test_import(original_path)
        if not original_works_after:
            log_operation(f"test_original_after_{file_info['target']}", "ERROR", original_msg_after)
            return False, f"–û—Ä–∏–≥–∏–Ω–∞–ª –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ—Å–ª–µ –ø–µ—Ä–µ–Ω–æ—Å–∞: {original_msg_after}"
        
        print(f"  ‚úÖ –û—Ä–∏–≥–∏–Ω–∞–ª —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ—Å–ª–µ –ø–µ—Ä–µ–Ω–æ—Å–∞: {original_msg_after}")
        log_operation(f"test_original_after_{file_info['target']}", "SUCCESS", original_msg_after)
        
        return True, "–£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω"
        
    except Exception as e:
        log_operation(f"move_{file_info['target']}", "ERROR", str(e))
        return False, f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞: {str(e)}"

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –§–ò–ù–ê–õ–¨–ù–ê–Ø –û–ß–ò–°–¢–ö–ê BACKUP –§–ê–ô–õ–û–í - PHASE 2")
    print("=" * 60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∞
    log_operation("init", "START", f"–ù–∞—á–∞–ª–æ Phase 2 - {len(FILES_TO_MOVE)} —Ñ–∞–π–ª–æ–≤")
    
    success_count = 0
    error_count = 0
    
    # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
    for i, file_info in enumerate(FILES_TO_MOVE, 1):
        print(f"\nüìÅ [{i}/{len(FILES_TO_MOVE)}] {file_info['source']}")
        
        success, message = move_backup_file(file_info)
        if success:
            success_count += 1
            print(f"  ‚úÖ –£–°–ü–ï–•: {message}")
        else:
            error_count += 1
            print(f"  ‚ùå –û–®–ò–ë–ö–ê: {message}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º SFM
    print(f"\nüîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï SFM...")
    sfm_works, sfm_msg = test_sfm_registration()
    if sfm_works:
        print(f"  ‚úÖ SFM —Ä–∞–±–æ—Ç–∞–µ—Ç: {sfm_msg}")
        log_operation("test_sfm", "SUCCESS", sfm_msg)
    else:
        print(f"  ‚ùå SFM –æ—à–∏–±–∫–∞: {sfm_msg}")
        log_operation("test_sfm", "ERROR", sfm_msg)
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    print(f"\nüìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:")
    print(f"  ‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ: {success_count}/{len(FILES_TO_MOVE)}")
    print(f"  ‚ùå –û—à–∏–±–æ–∫: {error_count}")
    print(f"  üîç SFM —Å—Ç–∞—Ç—É—Å: {'‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' if sfm_works else '‚ùå –û—à–∏–±–∫–∞'}")
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∏—Ç–æ–≥–∏
    log_operation("final_report", "COMPLETE", 
                 f"–£—Å–ø–µ—à–Ω–æ: {success_count}, –û—à–∏–±–æ–∫: {error_count}, SFM: {'OK' if sfm_works else 'ERROR'}")
    
    if error_count == 0 and sfm_works:
        print(f"\nüéâ –í–°–ï BACKUP –§–ê–ô–õ–´ –£–°–ü–ï–®–ù–û –ü–ï–†–ï–ù–ï–°–ï–ù–´!")
        print(f"üìÅ –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {BACKUP_DIR}")
        print(f"üìã –õ–æ–≥ –æ–ø–µ—Ä–∞—Ü–∏–π: {LOG_FILE}")
        return True
    else:
        print(f"\n‚ö†Ô∏è  –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´ - –ü–†–û–í–ï–†–¨–¢–ï –õ–û–ì–ò!")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)