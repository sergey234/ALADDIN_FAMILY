#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è ExternalAPIManager —Å SafeFunctionManager
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from security.managers.external_api_manager import external_api_manager
from security.safe_function_manager import SafeFunctionManager
from core.base import SecurityLevel


def integrate_external_apis_simple():
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤–Ω–µ—à–Ω–∏—Ö API"""
    print("üîó –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è ExternalAPIManager...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º SafeFunctionManager
        safe_manager = SafeFunctionManager()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–∞
        print("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏: External API Manager")
        
        result = safe_manager.register_function(
            function_id="external_api_manager",
            name="External API Manager",
            description="–ú–µ–Ω–µ–¥–∂–µ—Ä –≤–Ω–µ—à–Ω–∏—Ö API –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —É–≥—Ä–æ–∑, –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ email",
            function_type="security",
            security_level=SecurityLevel.HIGH,
            auto_enable=False  # –ù–µ –≤–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        )
        
        if result:
            print("‚úÖ External API Manager —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
            status = safe_manager.get_function_status("external_api_manager")
            if status:
                print(f"üìä –°—Ç–∞—Ç—É—Å: {status.get('status', 'unknown')}")
                print(f"üîí –£—Ä–æ–≤–µ–Ω—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {status.get('security_level', 'unknown')}")
                print(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {status.get('description', 'unknown')}")
            
            return True
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ External API Manager")
            return False
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        return False


def test_external_apis_direct():
    """–ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–Ω–µ—à–Ω–∏—Ö API –±–µ–∑ SafeFunctionManager"""
    print(f"\nüß™ –ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–Ω–µ—à–Ω–∏—Ö API...")
    
    try:
        import asyncio
        
        # –¢–µ—Å—Ç –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
        print("üåç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ IP –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏...")
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        geo_result = loop.run_until_complete(
            external_api_manager.get_ip_geolocation("8.8.8.8")
        )
        loop.close()
        
        if geo_result:
            print("‚úÖ IP –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print(f"   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {len(geo_result)} API –æ—Ç–≤–µ—Ç–∏–ª–∏")
            for api_name, data in geo_result.items():
                print(f"   - {api_name}: {type(data).__name__}")
        else:
            print("‚ùå IP –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ email
        print("üìß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ email...")
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        email_result = loop.run_until_complete(
            external_api_manager.validate_email("test@example.com")
        )
        loop.close()
        
        if email_result:
            print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è email —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print(f"   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {len(email_result)} API –æ—Ç–≤–µ—Ç–∏–ª–∏")
            for api_name, data in email_result.items():
                print(f"   - {api_name}: {type(data).__name__}")
        else:
            print("‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è email –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ —É–≥—Ä–æ–∑
        print("üõ°Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ —É–≥—Ä–æ–∑...")
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        threat_result = loop.run_until_complete(
            external_api_manager.check_threat_intelligence("8.8.8.8")
        )
        loop.close()
        
        if threat_result:
            print("‚úÖ –ê–Ω–∞–ª–∏–∑ —É–≥—Ä–æ–∑ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print(f"   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {len(threat_result)} API –æ—Ç–≤–µ—Ç–∏–ª–∏")
            for api_name, data in threat_result.items():
                print(f"   - {api_name}: {type(data).__name__}")
        else:
            print("‚ùå –ê–Ω–∞–ª–∏–∑ —É–≥—Ä–æ–∑ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = external_api_manager.get_usage_statistics()
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:")
        print(f"   üìà –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['usage_stats']['total_requests']}")
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {stats['usage_stats']['successful_requests']}")
        print(f"   ‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: {stats['usage_stats']['failed_requests']}")
        print(f"   üíæ –ö—ç—à –ø–æ–ø–∞–¥–∞–Ω–∏–π: {stats['usage_stats']['cache_hits']}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False


def test_external_apis_server():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ External APIs Server"""
    print(f"\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ External APIs Server...")
    
    try:
        import requests
        
        # Health check
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞...")
        response = requests.get("http://localhost:5004/api/external/health", timeout=5)
        
        if response.status_code == 200:
            print("‚úÖ External APIs Server —Ä–∞–±–æ—Ç–∞–µ—Ç")
            data = response.json()
            print(f"   üìä –°—Ç–∞—Ç—É—Å: {data.get('status', 'unknown')}")
            print(f"   üïí –í—Ä–µ–º—è: {data.get('timestamp', 'unknown')}")
        else:
            print(f"‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç: {response.status_code}")
            return False
        
        # –¢–µ—Å—Ç IP –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ API
        print("üåç –¢–µ—Å—Ç IP –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ API...")
        geo_response = requests.post(
            "http://localhost:5004/api/external/ip-geolocation",
            json={"ip": "8.8.8.8"},
            timeout=10
        )
        
        if geo_response.status_code == 200:
            print("‚úÖ IP –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è API —Ä–∞–±–æ—Ç–∞–µ—Ç")
            data = geo_response.json()
            print(f"   üìä –£—Å–ø–µ—Ö: {data.get('success', False)}")
            print(f"   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {len(data.get('results', {}))} API")
        else:
            print(f"‚ùå IP –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {geo_response.status_code}")
        
        # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ email —á–µ—Ä–µ–∑ API
        print("üìß –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ email —á–µ—Ä–µ–∑ API...")
        email_response = requests.post(
            "http://localhost:5004/api/external/email-validation",
            json={"email": "test@example.com"},
            timeout=10
        )
        
        if email_response.status_code == 200:
            print("‚úÖ Email validation API —Ä–∞–±–æ—Ç–∞–µ—Ç")
            data = email_response.json()
            print(f"   üìä –£—Å–ø–µ—Ö: {data.get('success', False)}")
            print(f"   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {len(data.get('results', {}))} API")
        else:
            print(f"‚ùå Email validation API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {email_response.status_code}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ API
        print("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ API...")
        stats_response = requests.get("http://localhost:5004/api/external/statistics", timeout=5)
        
        if stats_response.status_code == 200:
            print("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ API —Ä–∞–±–æ—Ç–∞–µ—Ç")
            data = stats_response.json()
            stats = data.get('statistics', {})
            usage = stats.get('usage_stats', {})
            print(f"   üìà –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {usage.get('total_requests', 0)}")
            print(f"   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {usage.get('successful_requests', 0)}")
            print(f"   ‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: {usage.get('failed_requests', 0)}")
        else:
            print(f"‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {stats_response.status_code}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        return False


if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ExternalAPIManager...")
    print("=" * 60)
    
    # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
    integration_success = integrate_external_apis_simple()
    
    if integration_success:
        print(f"\n‚úÖ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° SAFEFUNCTIONMANAGER –£–°–ü–ï–®–ù–ê!")
    else:
        print(f"\n‚ö†Ô∏è –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å SafeFunctionManager –Ω–µ —É–¥–∞–ª–∞—Å—å, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
    
    # –ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API
    direct_test_success = test_external_apis_direct()
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞
    server_test_success = test_external_apis_server()
    
    print(f"\n" + "=" * 60)
    print(f"üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print(f"‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è SafeFunctionManager: {'–î–∞' if integration_success else '–ù–µ—Ç'}")
    print(f"‚úÖ –ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API: {'–î–∞' if direct_test_success else '–ù–µ—Ç'}")
    print(f"‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞: {'–î–∞' if server_test_success else '–ù–µ—Ç'}")
    
    if direct_test_success and server_test_success:
        print(f"\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print(f"‚úÖ ExternalAPIManager —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print(f"‚úÖ External APIs Server —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print(f"üåê API –¥–æ—Å—Ç—É–ø–Ω–æ: http://localhost:5004/api/external/")
    else:
        print(f"\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
    
    print("=" * 60)