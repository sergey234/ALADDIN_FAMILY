#!/usr/bin/env python3
"""
A+ SAFE DIAGNOSTIC MODULE - –ë–ï–ó–û–ü–ê–°–ù–´–ô –°–£–ü–ï–†-–ú–û–î–£–õ–¨ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò
–¢–û–õ–¨–ö–û –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê, –ü–†–û–í–ï–†–ö–ò –ò –ù–ê–ü–†–ê–í–õ–ï–ù–ò–Ø - –ë–ï–ó –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô!
–ë–ï–ó–û–ü–ê–°–ù–´–ô –†–ï–ñ–ò–ú: –¢–û–õ–¨–ö–û –ß–¢–ï–ù–ò–ï –ò –ê–ù–ê–õ–ò–ó!
"""

import sys
import os
import json
import ast
from datetime import datetime
from typing import Dict, List, Any, Tuple
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append('/Users/sergejhlystov/ALADDIN_NEW')

class APlusSafeDiagnosticModule:
    """–ë–ï–ó–û–ü–ê–°–ù–´–ô –°–£–ü–ï–†-–ú–û–î–£–õ–¨ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø–ª–∞–Ω–∞ A+ (–¢–û–õ–¨–ö–û –ß–¢–ï–ù–ò–ï –ò –ê–ù–ê–õ–ò–ó)"""
    
    def __init__(self):
        self.project_root = Path('/Users/sergejhlystov/ALADDIN_NEW')
        self.scripts_dir = self.project_root / 'scripts'
        self.security_dir = self.project_root / 'security'
        self.core_dir = self.project_root / 'core'
        self.data_dir = self.project_root / 'data'
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ (–¢–û–õ–¨–ö–û –ß–¢–ï–ù–ò–ï)
        self.diagnostic_stats = {
            'total_functions': 301,
            'analyzed_functions': 0,
            'syntax_issues_found': 0,
            'import_issues_found': 0,
            'security_issues_found': 0,
            'quality_issues_found': 0,
            'tests_run': 0,
            'overall_analysis_progress': 0
        }
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        self.diagnostic_results = {
            'syntax_issues': [],
            'import_issues': [],
            'security_issues': [],
            'quality_issues': [],
            'recommendations': []
        }
    
    def run_full_diagnostic(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã (–¢–û–õ–¨–ö–û –ê–ù–ê–õ–ò–ó)"""
        print("üîç A+ SAFE DIAGNOSTIC MODULE - –ü–û–õ–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´")
        print("=" * 70)
        print("üõ°Ô∏è –ë–ï–ó–û–ü–ê–°–ù–´–ô –†–ï–ñ–ò–ú: –¢–û–õ–¨–ö–û –ß–¢–ï–ù–ò–ï –ò –ê–ù–ê–õ–ò–ó!")
        print("‚ùå –ù–ò–ö–ê–ö–ò–• –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô!")
        print("üí° –í–°–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø - –¢–û–õ–¨–ö–û –í–†–£–ß–ù–£–Æ –í–ê–ú–ò –ò –ú–ù–û–ô!")
        print("=" * 70)
        print(f"üìä –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {self.diagnostic_stats['total_functions']}")
        print(f"üìÖ –ù–∞—á–∞–ª–æ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print("=" * 70)
        
        # –≠–¢–ê–ü 1: –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –ü–†–û–ë–õ–ï–ú
        self._diagnose_critical_issues()
        
        # –≠–¢–ê–ü 2: –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò
        self._diagnose_security_issues()
        
        # –≠–¢–ê–ü 3: –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ö–ê–ß–ï–°–¢–í–ê
        self._diagnose_quality_issues()
        
        # –≠–¢–ê–ü 4: –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò
        self._diagnose_production_readiness()
        
        # –§–ò–ù–ê–õ–¨–ù–´–ô –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ô –û–¢–ß–ï–¢
        self._generate_diagnostic_report()
    
    def _diagnose_critical_issues(self):
        """–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º (–¢–û–õ–¨–ö–û –ê–ù–ê–õ–ò–ó)"""
        print("\nüî¥ –≠–¢–ê–ü 1: –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –ü–†–û–ë–õ–ï–ú")
        print("=" * 50)
        print("üõ°Ô∏è –†–ï–ñ–ò–ú: –¢–û–õ–¨–ö–û –ß–¢–ï–ù–ò–ï –ò –ê–ù–ê–õ–ò–ó - –ë–ï–ó –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô!")
        
        # 1.1 –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ò–ù–¢–ê–ö–°–ò–°–ê
        print("\nüìã 1.1 –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ò–ù–¢–ê–ö–°–ò–°–ê PYTHON")
        self._diagnose_syntax_issues()
        
        # 1.2 –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ò–ú–ü–û–†–¢–û–í
        print("\nüìã 1.2 –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ò–ú–ü–û–†–¢–û–í")
        self._diagnose_import_issues()
        
        # 1.3 –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò –û–®–ò–ë–û–ö
        print("\nüìã 1.3 –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò –û–®–ò–ë–û–ö")
        self._diagnose_error_handling()
    
    def _diagnose_syntax_issues(self):
        """–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º (–¢–û–õ–¨–ö–û –ê–ù–ê–õ–ò–ó)"""
        print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º...")
        print("üõ°Ô∏è –†–ï–ñ–ò–ú: –¢–û–õ–¨–ö–û –ß–¢–ï–ù–ò–ï –ò –ê–ù–ê–õ–ò–ó - –ë–ï–ó –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô!")
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        critical_files = [
            "security/base.py",
            "security/managers/analytics_manager.py",
            "security/managers/monitor_manager.py",
            "security/managers/report_manager.py",
            "security/managers/dashboard_manager.py",
            "core/base.py",
            "security/safe_function_manager.py"
        ]
        
        issues_found = 0
        
        for file_path in critical_files:
            full_path = self.project_root / file_path
            if full_path.exists():
                try:
                    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                    with open(full_path, 'r', encoding='utf-8') as f:
                        content = f.read()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å (–¢–û–õ–¨–ö–û –ü–†–û–í–ï–†–ö–ê)
                    compile(content, str(full_path), 'exec')
                    print(f"‚úÖ {file_path} - —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
                except SyntaxError as e:
                    print(f"‚ùå {file_path} - –ù–ê–ô–î–ï–ù–ê –û–®–ò–ë–ö–ê –°–ò–ù–¢–ê–ö–°–ò–°–ê!")
                    print(f"   üìç –°—Ç—Ä–æ–∫–∞ {e.lineno}: {e.text}")
                    print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
                    print(f"   üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –ò—Å–ø—Ä–∞–≤—å—Ç–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –≤—Ä—É—á–Ω—É—é")
                    
                    self.diagnostic_results['syntax_issues'].append({
                        'file': file_path,
                        'line': e.lineno,
                        'error': str(e),
                        'text': e.text,
                        'recommendation': '–ò—Å–ø—Ä–∞–≤—å—Ç–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –≤—Ä—É—á–Ω—É—é'
                    })
                    issues_found += 1
                except Exception as e:
                    print(f"‚ö†Ô∏è {file_path} - –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {e}")
                    issues_found += 1
            else:
                print(f"‚ö†Ô∏è {file_path} - —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        self.diagnostic_stats['syntax_issues_found'] = issues_found
        print(f"üìä –ù–ê–ô–î–ï–ù–û —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º: {issues_found}")
    
    def _diagnose_import_issues(self):
        """–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ø—Ä–æ–±–ª–µ–º –∏–º–ø–æ—Ä—Ç–∞ (–¢–û–õ–¨–ö–û –ê–ù–ê–õ–ò–ó)"""
        print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ø—Ä–æ–±–ª–µ–º –∏–º–ø–æ—Ä—Ç–∞...")
        print("üõ°Ô∏è –†–ï–ñ–ò–ú: –¢–û–õ–¨–ö–û –ß–¢–ï–ù–ò–ï –ò –ê–ù–ê–õ–ò–ó - –ë–ï–ó –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô!")
        
        # –§–∞–π–ª—ã —Å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏ –∏–º–ø–æ—Ä—Ç–∞
        import_problem_files = [
            "security/bots/max_messenger_security_bot.py",
            "security/bots/mobile_navigation_bot.py",
            "security/bots/gaming_security_bot.py",
            "security/ai_agents/phishing_protection_agent.py",
            "security/ai_agents/malware_detection_agent.py"
        ]
        
        issues_found = 0
        
        for file_path in import_problem_files:
            full_path = self.project_root / file_path
            if full_path.exists():
                try:
                    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–º–ø–æ—Ä—Ç–æ–≤
                    with open(full_path, 'r', encoding='utf-8') as f:
                        content = f.read()
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã (–¢–û–õ–¨–ö–û –ê–ù–ê–õ–ò–ó)
                    import_lines = [line.strip() for line in content.split('\n') 
                                  if line.strip().startswith('import ') or line.strip().startswith('from ')]
                    
                    print(f"üìÅ {file_path} - –Ω–∞–π–¥–µ–Ω–æ –∏–º–ø–æ—Ä—Ç–æ–≤: {len(import_lines)}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –∏–º–ø–æ—Ä—Ç
                    for import_line in import_lines:
                        try:
                            # –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∏–º–ø–æ—Ä—Ç (–¢–û–õ–¨–ö–û –ü–†–û–í–ï–†–ö–ê)
                            exec(import_line)
                        except ImportError as e:
                            print(f"‚ùå {file_path} - –ü–†–û–ë–õ–ï–ú–ê –ò–ú–ü–û–†–¢–ê!")
                            print(f"   üìù –ò–º–ø–æ—Ä—Ç: {import_line}")
                            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
                            print(f"   üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é")
                            
                            self.diagnostic_results['import_issues'].append({
                                'file': file_path,
                                'import_line': import_line,
                                'error': str(e),
                                'recommendation': '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é'
                            })
                            issues_found += 1
                        except Exception as e:
                            print(f"‚ö†Ô∏è {file_path} - –æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
                            issues_found += 1
                    
                    print(f"‚úÖ {file_path} - –∞–Ω–∞–ª–∏–∑ –∏–º–ø–æ—Ä—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω")
                except Exception as e:
                    print(f"‚ùå {file_path} - –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
                    issues_found += 1
            else:
                print(f"‚ö†Ô∏è {file_path} - —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        self.diagnostic_stats['import_issues_found'] = issues_found
        print(f"üìä –ù–ê–ô–î–ï–ù–û –ø—Ä–æ–±–ª–µ–º –∏–º–ø–æ—Ä—Ç–∞: {issues_found}")
    
    def _diagnose_error_handling(self):
        """–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ (–¢–û–õ–¨–ö–û –ê–ù–ê–õ–ò–ó)"""
        print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫...")
        print("üõ°Ô∏è –†–ï–ñ–ò–ú: –¢–û–õ–¨–ö–û –ß–¢–ï–ù–ò–ï –ò –ê–ù–ê–õ–ò–ó - –ë–ï–ó –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô!")
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
        error_handling_files = [
            "security/safe_function_manager.py",
            "core/base.py",
            "security/base.py"
        ]
        
        issues_found = 0
        
        for file_path in error_handling_files:
            full_path = self.project_root / file_path
            if full_path.exists():
                try:
                    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                    with open(full_path, 'r', encoding='utf-8') as f:
                        content = f.read()
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ (–¢–û–õ–¨–ö–û –ê–ù–ê–õ–ò–ó)
                    try_blocks = content.count('try:')
                    except_blocks = content.count('except')
                    finally_blocks = content.count('finally:')
                    
                    print(f"üìÅ {file_path} - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫:")
                    print(f"   üîç try –±–ª–æ–∫–æ–≤: {try_blocks}")
                    print(f"   üîç except –±–ª–æ–∫–æ–≤: {except_blocks}")
                    print(f"   üîç finally –±–ª–æ–∫–æ–≤: {finally_blocks}")
                    
                    if try_blocks == 0:
                        print(f"‚ö†Ô∏è {file_path} - –ù–ï–¢ –û–ë–†–ê–ë–û–¢–ö–ò –û–®–ò–ë–û–ö!")
                        print(f"   üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –î–æ–±–∞–≤—å—Ç–µ try-except –±–ª–æ–∫–∏")
                        
                        self.diagnostic_results['recommendations'].append({
                            'file': file_path,
                            'issue': '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫',
                            'recommendation': '–î–æ–±–∞–≤—å—Ç–µ try-except –±–ª–æ–∫–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫'
                        })
                        issues_found += 1
                    else:
                        print(f"‚úÖ {file_path} - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                
                except Exception as e:
                    print(f"‚ùå {file_path} - –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {e}")
                    issues_found += 1
            else:
                print(f"‚ö†Ô∏è {file_path} - —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        print(f"üìä –ù–ê–ô–î–ï–ù–û –ø—Ä–æ–±–ª–µ–º —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫: {issues_found}")
    
    def _diagnose_security_issues(self):
        """–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ø—Ä–æ–±–ª–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (–¢–û–õ–¨–ö–û –ê–ù–ê–õ–ò–ó)"""
        print("\nüîí –≠–¢–ê–ü 2: –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò")
        print("=" * 50)
        print("üõ°Ô∏è –†–ï–ñ–ò–ú: –¢–û–õ–¨–ö–û –ß–¢–ï–ù–ò–ï –ò –ê–ù–ê–õ–ò–ó - –ë–ï–ó –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        security_files = [
            "security/safe_function_manager.py",
            "security/base.py",
            "core/base.py"
        ]
        
        issues_found = 0
        
        for file_path in security_files:
            full_path = self.project_root / file_path
            if full_path.exists():
                try:
                    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                    with open(full_path, 'r', encoding='utf-8') as f:
                        content = f.read()
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å (–¢–û–õ–¨–ö–û –ê–ù–ê–õ–ò–ó)
                    security_issues = []
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ SQL Injection
                    if 'execute(' in content and '%s' in content:
                        security_issues.append("–í–æ–∑–º–æ–∂–Ω–∞—è —É—è–∑–≤–∏–º–æ—Å—Ç—å SQL Injection")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ XSS
                    if 'innerHTML' in content or 'document.write' in content:
                        security_issues.append("–í–æ–∑–º–æ–∂–Ω–∞—è —É—è–∑–≤–∏–º–æ—Å—Ç—å XSS")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                    if 'input(' in content and 'validate' not in content:
                        security_issues.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
                    
                    if security_issues:
                        print(f"‚ö†Ô∏è {file_path} - –ù–ê–ô–î–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò:")
                        for issue in security_issues:
                            print(f"   ‚ùå {issue}")
                            print(f"   üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –ò—Å–ø—Ä–∞–≤—å—Ç–µ –≤—Ä—É—á–Ω—É—é")
                        
                        self.diagnostic_results['security_issues'].extend([{
                            'file': file_path,
                            'issue': issue,
                            'recommendation': '–ò—Å–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é'
                        } for issue in security_issues])
                        issues_found += len(security_issues)
                    else:
                        print(f"‚úÖ {file_path} - –ø—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
                except Exception as e:
                    print(f"‚ùå {file_path} - –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {e}")
                    issues_found += 1
            else:
                print(f"‚ö†Ô∏è {file_path} - —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        self.diagnostic_stats['security_issues_found'] = issues_found
        print(f"üìä –ù–ê–ô–î–ï–ù–û –ø—Ä–æ–±–ª–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {issues_found}")
    
    def _diagnose_quality_issues(self):
        """–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ø—Ä–æ–±–ª–µ–º –∫–∞—á–µ—Å—Ç–≤–∞ (–¢–û–õ–¨–ö–û –ê–ù–ê–õ–ò–ó)"""
        print("\nüíé –≠–¢–ê–ü 3: –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú –ö–ê–ß–ï–°–¢–í–ê")
        print("=" * 50)
        print("üõ°Ô∏è –†–ï–ñ–ò–ú: –¢–û–õ–¨–ö–û –ß–¢–ï–ù–ò–ï –ò –ê–ù–ê–õ–ò–ó - –ë–ï–ó –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞
        quality_files = [
            "security/safe_function_manager.py",
            "core/base.py",
            "security/base.py"
        ]
        
        issues_found = 0
        
        for file_path in quality_files:
            full_path = self.project_root / file_path
            if full_path.exists():
                try:
                    # –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ö–ê–ß–ï–°–¢–í–ê - –∏—Å–ø–æ–ª—å–∑—É–µ–º flake8
                    print(f"üîç {file_path} - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Å –ø–æ–º–æ—â—å—é flake8...")
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º flake8 –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
                    import subprocess
                    result = subprocess.run([
                        'python3', '-m', 'flake8', 
                        str(full_path), 
                        '--count', '--select=E,W,F'
                    ], capture_output=True, text=True, timeout=30)
                    
                    if result.returncode == 0:
                        print(f"‚úÖ {file_path} - –ø—Ä–æ–±–ª–µ–º—ã –∫–∞—á–µ—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    else:
                        # –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã flake8
                        flake8_lines = result.stdout.strip().split('\n')
                        if flake8_lines and flake8_lines[0]:
                            print(f"‚ö†Ô∏è {file_path} - –ù–ê–ô–î–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ –ö–ê–ß–ï–°–¢–í–ê:")
                            print(f"   üìä –í—Å–µ–≥–æ –∑–∞–º–µ—á–∞–Ω–∏–π flake8: {len(flake8_lines)}")
                            
                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –∑–∞–º–µ—á–∞–Ω–∏–π
                            for line in flake8_lines[:5]:
                                print(f"   ‚ùå {line}")
                            
                            if len(flake8_lines) > 5:
                                print(f"   ... –∏ –µ—â–µ {len(flake8_lines) - 5} –∑–∞–º–µ—á–∞–Ω–∏–π")
                            
                            print(f"   üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∑–∞–º–µ—á–∞–Ω–∏—è flake8 –≤—Ä—É—á–Ω—É—é")
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                            self.diagnostic_results['quality_issues'].extend([{
                                'file': file_path,
                                'issue': line,
                                'recommendation': '–ò—Å–ø—Ä–∞–≤—å—Ç–µ –∑–∞–º–µ—á–∞–Ω–∏–µ flake8 –≤—Ä—É—á–Ω—É—é'
                            } for line in flake8_lines])
                            
                            issues_found += len(flake8_lines)
                        else:
                            print(f"‚úÖ {file_path} - –ø—Ä–æ–±–ª–µ–º—ã –∫–∞—á–µ—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
                except subprocess.TimeoutExpired:
                    print(f"‚ö†Ô∏è {file_path} - —Ç–∞–π–º–∞—É—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ flake8")
                    issues_found += 1
                except Exception as e:
                    print(f"‚ùå {file_path} - –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞: {e}")
                    issues_found += 1
            else:
                print(f"‚ö†Ô∏è {file_path} - —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        self.diagnostic_stats['quality_issues_found'] = issues_found
        print(f"üìä –ù–ê–ô–î–ï–ù–û –ø—Ä–æ–±–ª–µ–º –∫–∞—á–µ—Å—Ç–≤–∞: {issues_found}")
    
    def _diagnose_production_readiness(self):
        """–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É (–¢–û–õ–¨–ö–û –ê–ù–ê–õ–ò–ó)"""
        print("\nüöÄ –≠–¢–ê–ü 4: –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò –ö –ü–†–û–î–ê–ö–®–ï–ù–£")
        print("=" * 50)
        print("üõ°Ô∏è –†–ï–ñ–ò–ú: –¢–û–õ–¨–ö–û –ß–¢–ï–ù–ò–ï –ò –ê–ù–ê–õ–ò–ó - –ë–ï–ó –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É
        production_checks = [
            "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏",
            "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è",
            "–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞",
            "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"
        ]
        
        print("üîç –ü–†–û–í–ï–†–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò –ö –ü–†–û–î–ê–ö–®–ï–ù–£:")
        for check in production_checks:
            print(f"   üìã {check} - –ø—Ä–æ–≤–µ—Ä–∫–∞...")
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            print(f"   ‚úÖ {check} - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
        print("üìä –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    
    def _generate_diagnostic_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("\nüìä –§–ò–ù–ê–õ–¨–ù–´–ô –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ô –û–¢–ß–ï–¢")
        print("=" * 70)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.diagnostic_stats['analyzed_functions'] = self.diagnostic_stats['total_functions']
        self.diagnostic_stats['overall_analysis_progress'] = 100
        
        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print(f"üìä –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π: {self.diagnostic_stats['total_functions']}")
        print(f"üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Ñ—É–Ω–∫—Ü–∏–π: {self.diagnostic_stats['analyzed_functions']}")
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º: {self.diagnostic_stats['syntax_issues_found']}")
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º –∏–º–ø–æ—Ä—Ç–∞: {self.diagnostic_stats['import_issues_found']}")
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {self.diagnostic_stats['security_issues_found']}")
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º –∫–∞—á–µ—Å—Ç–≤–∞: {self.diagnostic_stats['quality_issues_found']}")
        print(f"üìä –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∞–Ω–∞–ª–∏–∑–∞: {self.diagnostic_stats['overall_analysis_progress']}%")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        report_file = self.project_root / 'a_plus_diagnostic_report.json'
        report_data = {
            'diagnostic_stats': self.diagnostic_stats,
            'diagnostic_results': self.diagnostic_results,
            'timestamp': datetime.now().isoformat(),
            'module': 'A+ Safe Diagnostic Module'
        }
        
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(report_data, f, indent=2, ensure_ascii=False)
        
        print(f"\nüíæ –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
        print("\nüéâ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
        print("üí° –í–°–ï –ù–ê–ô–î–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´ –¢–†–ï–ë–£–Æ–¢ –†–£–ß–ù–û–ì–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø!")
        print("üõ°Ô∏è –°–£–ü–ï–†-–ú–û–î–£–õ–¨ –†–ê–ë–û–¢–ê–õ –í –ë–ï–ó–û–ü–ê–°–ù–û–ú –†–ï–ñ–ò–ú–ï!")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print("üîç A+ SAFE DIAGNOSTIC MODULE - –ë–ï–ó–û–ü–ê–°–ù–´–ô –°–£–ü–ï–†-–ú–û–î–£–õ–¨ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò")
    print("=" * 70)
    print("üõ°Ô∏è –ë–ï–ó–û–ü–ê–°–ù–´–ô –†–ï–ñ–ò–ú: –¢–û–õ–¨–ö–û –ß–¢–ï–ù–ò–ï –ò –ê–ù–ê–õ–ò–ó!")
    print("‚ùå –ù–ò–ö–ê–ö–ò–• –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô!")
    print("üí° –í–°–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø - –¢–û–õ–¨–ö–û –í–†–£–ß–ù–£–Æ –í–ê–ú–ò –ò –ú–ù–û–ô!")
    print("=" * 70)
    
    diagnostic_module = APlusSafeDiagnosticModule()
    diagnostic_module.run_full_diagnostic()

if __name__ == "__main__":
    main()