#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü–õ–ê–ù A+ WORK OPTIMIZER - –û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞–Ω–æ–º A+
–û—Å—Ç–∞–≤–ª—è–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –∞–Ω–∞–ª–∏–∑–æ–º, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º, –ø—Ä–∞–≤–∫–æ–π –∫–æ–¥–∞

–ê–≤—Ç–æ—Ä: ALADDIN Security Team
–í–µ—Ä—Å–∏—è: 1.0
–î–∞—Ç–∞: 2025-01-13
"""

import json
import sys
import os
from typing import Dict, List, Any
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from security.safe_function_manager import SafeFunctionManager, FunctionStatus

class PlanAPlusWorkOptimizer:
    """–û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞–Ω–æ–º A+"""
    
    def __init__(self):
        self.sfm = SafeFunctionManager()
        
        # –ù–ï–û–ë–•–û–î–ò–ú–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ü–õ–ê–ù–û–ú A+
        self.essential_functions = [
            # SFM –ò –ë–ê–ó–û–í–´–ï –ú–û–î–£–õ–ò
            'security_safefunctionmanager',  # –ú–µ–Ω–µ–¥–∂–µ—Ä —Ñ—É–Ω–∫—Ü–∏–π - –û–°–ù–û–í–ê
            'security_base',                 # –ë–∞–∑–æ–≤–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å - –û–°–ù–û–í–ê
            'core_base',                     # –ë–∞–∑–æ–≤—ã–π –º–æ–¥—É–ª—å - –û–°–ù–û–í–ê
            'security_securityalert',        # –û–ø–æ–≤–µ—â–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ - –ö–†–ò–¢–ò–ß–ù–û
            'security_securityfunction',     # –§—É–Ω–∫—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ - –ö–†–ò–¢–ò–ß–ù–û
            'database',                      # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö - –ö–†–ò–¢–ò–ß–ù–û
            'authentication',                # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è - –ö–†–ò–¢–ò–ß–ù–û
            'security_authentication',       # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ - –ö–†–ò–¢–ò–ß–ù–û
            
            # –ê–ù–ê–õ–ò–ó –ò –ú–û–ù–ò–¢–û–†–ò–ù–ì
            'security_securityanalyticsmanager',  # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            'security_securitymetric',            # –ú–µ—Ç—Ä–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            'security_performancemetrics',        # –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            'security_performanceoptimizer',      # –û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            'security_optimizationresult',        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            'security_optimizationmetrics',       # –ú–µ—Ç—Ä–∏–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            
            # –ú–û–ù–ò–¢–û–†–ò–ù–ì –ò –û–¢–ß–ï–¢–ù–û–°–¢–¨
            'security_securityauditmanager',      # –ú–µ–Ω–µ–¥–∂–µ—Ä –∞—É–¥–∏—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            'security_securityaudit',             # –ê—É–¥–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            'security_auditfinding',              # –ù–∞—Ö–æ–¥–∫–∏ –∞—É–¥–∏—Ç–∞
            'security_incidentresponsemanager',   # –ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã
            'security_incident',                  # –ò–Ω—Ü–∏–¥–µ–Ω—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            
            # –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò –ö–ê–ß–ï–°–¢–í–û
            'security_testmanager',               # –ú–µ–Ω–µ–¥–∂–µ—Ä —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            'security_testfunction',              # –§—É–Ω–∫—Ü–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            'security_securityevent',             # –°–æ–±—ã—Ç–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            'security_securitylayer',             # –°–ª–æ–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            
            # –ù–ê–®–ò –ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò (–ö–ê–ß–ï–°–¢–í–û A+)
            'bot_website',                        # WebsiteNavigationBot (A+)
            'bot_browser',                        # BrowserSecurityBot (A+)
            'bot_cloud',                          # CloudStorageSecurityBot (A+)
            'bot_device',                         # DeviceSecurityBot (A+)
            'ai_agent_phishingprotection',        # PhishingProtectionAgent (A+)
            'ai_agent_malwaredetection',          # MalwareDetectionAgent (A+)
            
            # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ù–ê–®–ò –§–£–ù–ö–¶–ò–ò
            'bot_maxmessenger',                   # MaxMessengerSecurityBot
            'bot_mobilenavigation',               # MobileNavigationBot
            'bot_gaming',                         # GamingSecurityBot
            'bot_analytics',                      # AnalyticsBot
            
            # AI AGENTS –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê
            'ai_agent_behavioralanalysisagent',   # –ê–Ω–∞–ª–∏–∑ –ø–æ–≤–µ–¥–µ–Ω–∏—è
            'ai_agent_threatdetectionagent',      # –î–µ—Ç–µ–∫—Ü–∏—è —É–≥—Ä–æ–∑
            'ai_agent_networksecurityagent',      # –°–µ—Ç–µ–≤–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
            'ai_agent_dataprotectionagent',       # –ó–∞—â–∏—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
            'ai_agent_incidentresponseagent',     # –†–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã
            'ai_agent_threatintelligenceagent',   # –†–∞–∑–≤–µ–¥–∫–∞ —É–≥—Ä–æ–∑
            'ai_agent_passwordsecurityagent',     # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø–∞—Ä–æ–ª–µ–π
            'ai_agent_complianceagent',           # –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
            
            # MICROSERVICES –î–õ–Ø –†–ê–ë–û–¢–´
            'microservice_configurationmanager',  # –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            'microservice_databasemanager',       # –ú–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            'microservice_ratelimiter',           # –û–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—å —Å–∫–æ—Ä–æ—Å—Ç–∏
            'microservice_circuitbreaker',        # –ü—Ä–µ–¥–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª—å
            'microservice_fastapi',               # FastAPI
            'microservice_httpexception',         # HTTP –∏—Å–∫–ª—é—á–µ–Ω–∏—è
            
            # –ò–ù–¢–ï–†–§–ï–ô–°–´ –ò –£–ü–†–ê–í–õ–ï–ù–ò–ï
            'security_userinterfacemanager',      # –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
            'security_webinterface',              # –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            'security_apiinterface',              # API –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            'security_apigateway',                # API Gateway
            'security_loadbalancer',              # –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–≥—Ä—É–∑–∫–∏
            
            # –ö–≠–®–ò–†–û–í–ê–ù–ò–ï –ò –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨
            'security_rediscachemanager',         # –ú–µ–Ω–µ–¥–∂–µ—Ä Redis –∫—ç—à–∞
            'security_cacheentry',                # –ó–∞–ø–∏—Å–∏ –∫—ç—à–∞
            'security_cachemetrics',              # –ú–µ—Ç—Ä–∏–∫–∏ –∫—ç—à–∞
            
            # –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ò –†–ï–ó–ï–†–í–ù–û–ï –ö–û–ü–ò–†–û–í–ê–ù–ò–ï
            'security_recoveryservice',           # –°–µ—Ä–≤–∏—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            'security_recoveryplan',              # –ü–ª–∞–Ω –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            'security_recoverytask',              # –ó–∞–¥–∞—á–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            'security_recoveryreport',            # –û—Ç—á–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            
            # –§–û–†–ï–ù–ó–ò–ö–ê –ò –ò–°–°–õ–ï–î–û–í–ê–ù–ò–Ø
            'security_forensicsservice',          # –°–µ—Ä–≤–∏—Å —Ñ–æ—Ä–µ–Ω–∑–∏–∫–∏
            'security_forensicsreport',           # –û—Ç—á–µ—Ç —Ñ–æ—Ä–µ–Ω–∑–∏–∫–∏
            'security_investigation',             # –†–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
            'security_evidence',                  # –î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞
        ]
        
    def analyze_system(self) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã"""
        print("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã...")
        
        all_functions = list(self.sfm.functions.values())
        active_functions = [f for f in all_functions if f.status == FunctionStatus.ENABLED]
        sleeping_functions = [f for f in all_functions if f.status == FunctionStatus.SLEEPING]
        
        return {
            'total_functions': len(all_functions),
            'active_functions': len(active_functions),
            'sleeping_functions': len(sleeping_functions),
            'essential_functions': len(self.essential_functions)
        }
    
    def get_sleep_candidates(self) -> List[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º"""
        print("üìã –û–ø—Ä–µ–¥–µ–ª—è—é —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º...")
        
        sleep_candidates = []
        for func_id, func_data in self.sfm.functions.items():
            if func_id not in self.essential_functions:
                sleep_candidates.append(func_id)
        
        return sleep_candidates
    
    def safe_put_to_sleep(self, function_ids: List[str]) -> Dict[str, Any]:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º"""
        print(f"üåô –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–µ—Ä–µ–≤–æ–∂—É {len(function_ids)} —Ñ—É–Ω–∫—Ü–∏–π –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º...")
        
        results = {
            'successful': [],
            'failed': [],
            'already_sleeping': [],
            'essential_protected': []
        }
        
        for function_id in function_ids:
            try:
                # –ó–∞—â–∏—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
                if function_id in self.essential_functions:
                    results['essential_protected'].append(function_id)
                    continue
                
                function = self.sfm.functions.get(function_id)
                if not function:
                    results['failed'].append(f"{function_id}: —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    continue
                
                if function.status == FunctionStatus.SLEEPING:
                    results['already_sleeping'].append(function_id)
                    continue
                
                # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º
                success = self.sfm.sleep_function(function_id)
                
                if success:
                    results['successful'].append(function_id)
                    print(f"  ‚úÖ {function_id} -> —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º")
                else:
                    results['failed'].append(f"{function_id}: –æ—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞")
                    
            except Exception as e:
                results['failed'].append(f"{function_id}: {str(e)}")
        
        return results
    
    def ensure_essential_active(self) -> Dict[str, Any]:
        """–£–±–µ–∂–¥–∞–µ—Ç—Å—è, —á—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã"""
        print("üü¢ –ü—Ä–æ–≤–µ—Ä—è—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π...")
        
        results = {
            'activated': [],
            'already_active': [],
            'failed': []
        }
        
        for function_id in self.essential_functions:
            try:
                function = self.sfm.functions.get(function_id)
                if not function:
                    results['failed'].append(f"{function_id}: —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    continue
                
                if function.status == FunctionStatus.ENABLED:
                    results['already_active'].append(function_id)
                else:
                    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é
                    success = self.sfm.enable_function(function_id)
                    if success:
                        results['activated'].append(function_id)
                        print(f"  ‚úÖ {function_id} -> –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
                    else:
                        results['failed'].append(f"{function_id}: –æ—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏")
                        
            except Exception as e:
                results['failed'].append(f"{function_id}: {str(e)}")
        
        return results
    
    def generate_work_report(self) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã"""
        print("üìä –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç—á–µ—Ç –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã...")
        
        all_functions = list(self.sfm.functions.values())
        active_functions = [f for f in all_functions if f.status == FunctionStatus.ENABLED]
        sleeping_functions = [f for f in all_functions if f.status == FunctionStatus.SLEEPING]
        
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
        essential_active = [f for f in active_functions if f.function_id in self.essential_functions]
        other_active = [f for f in active_functions if f.function_id not in self.essential_functions]
        
        return {
            'total_functions': len(all_functions),
            'active_functions': len(active_functions),
            'sleeping_functions': len(sleeping_functions),
            'essential_active': len(essential_active),
            'other_active': len(other_active),
            'essential_percentage': (len(essential_active) / len(all_functions)) * 100,
            'sleeping_percentage': (len(sleeping_functions) / len(all_functions)) * 100,
            'resource_savings': ((len(all_functions) - len(essential_active)) / len(all_functions)) * 100
        }
    
    def optimize_for_plan_a_plus(self) -> bool:
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞–Ω–æ–º A+"""
        print("üéØ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –î–õ–Ø –†–ê–ë–û–¢–´ –° –ü–õ–ê–ù–û–ú A+")
        print("=" * 60)
        
        try:
            # 1. –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            analysis = self.analyze_system()
            print(f"üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:")
            print(f"  üìÑ –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π: {analysis['total_functions']}")
            print(f"  üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {analysis['active_functions']}")
            print(f"  üò¥ –°–ø—è—â–∏—Ö: {analysis['sleeping_functions']}")
            print(f"  üéØ –ù–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö: {analysis['essential_functions']}")
            
            # 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è —Å–ø—è—â–µ–≥–æ —Ä–µ–∂–∏–º–∞
            sleep_candidates = self.get_sleep_candidates()
            print(f"\\nüò¥ –ö–∞–Ω–¥–∏–¥–∞—Ç—ã –¥–ª—è —Å–ø—è—â–µ–≥–æ —Ä–µ–∂–∏–º–∞: {len(sleep_candidates)}")
            
            # 3. –ê–∫—Ç–∏–≤–∞—Ü–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
            print(f"\\nüü¢ –ê–∫—Ç–∏–≤–∏—Ä—É—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏...")
            essential_results = self.ensure_essential_active()
            print(f"  ‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ: {len(essential_results['activated'])}")
            print(f"  üü¢ –£–∂–µ –∞–∫—Ç–∏–≤–Ω—ã: {len(essential_results['already_active'])}")
            print(f"  ‚ùå –û—à–∏–±–∫–∏: {len(essential_results['failed'])}")
            
            # 4. –ü–µ—Ä–µ–≤–æ–¥ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º
            if sleep_candidates:
                print(f"\\nüåô –ü–µ—Ä–µ–≤–æ–∂—É –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º...")
                sleep_results = self.safe_put_to_sleep(sleep_candidates)
                
                print(f"  ‚úÖ –£—Å–ø–µ—à–Ω–æ: {len(sleep_results['successful'])}")
                print(f"  ‚ùå –û—à–∏–±–∫–∏: {len(sleep_results['failed'])}")
                print(f"  üò¥ –£–∂–µ —Å–ø—è—â–∏–µ: {len(sleep_results['already_sleeping'])}")
                print(f"  üõ°Ô∏è –ó–∞—â–∏—â–µ–Ω—ã: {len(sleep_results['essential_protected'])}")
            
            # 5. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
            report = self.generate_work_report()
            
            print(f"\\nüìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –î–õ–Ø –†–ê–ë–û–¢–´ –° –ü–õ–ê–ù–û–ú A+:")
            print(f"  üìÑ –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π: {report['total_functions']}")
            print(f"  üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {report['active_functions']} ({report['essential_percentage']:.1f}%)")
            print(f"  üò¥ –°–ø—è—â–∏—Ö: {report['sleeping_functions']} ({report['sleeping_percentage']:.1f}%)")
            print(f"  üéØ –ù–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö: {report['essential_active']}")
            print(f"  üìä –≠–∫–æ–Ω–æ–º–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤: {report['resource_savings']:.1f}%")
            
            # 6. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
            with open('plan_a_plus_work_report.json', 'w', encoding='utf-8') as f:
                json.dump({
                    'analysis': analysis,
                    'essential_results': essential_results,
                    'sleep_results': sleep_results if 'sleep_results' in locals() else {},
                    'final_report': report,
                    'timestamp': str(datetime.now())
                }, f, indent=2, ensure_ascii=False)
            
            print(f"\\nüíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: plan_a_plus_work_report.json")
            print(f"\\nüéâ –°–ò–°–¢–ï–ú–ê –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ê –î–õ–Ø –†–ê–ë–û–¢–´ –° –ü–õ–ê–ù–û–ú A+!")
            print(f"\\nüí° –í–û–ó–ú–û–ñ–ù–û–°–¢–ò –°–ò–°–¢–ï–ú–´:")
            print(f"  ‚úÖ –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã")
            print(f"  ‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –∫–∞—á–µ—Å—Ç–≤–∞")
            print(f"  ‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∞—É–¥–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
            print(f"  ‚úÖ –ù–∞—à–∏ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ A+")
            print(f"  ‚úÖ AI Agents –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —É–≥—Ä–æ–∑")
            print(f"  ‚úÖ –ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã")
            print(f"  ‚úÖ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –∏ API")
            print(f"  ‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ")
            print(f"  ‚úÖ –§–æ—Ä–µ–Ω–∑–∏–∫–∞ –∏ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è")
            
            return True
            
        except Exception as e:
            print(f"\\n‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}")
            return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üéØ ALADDIN Security System - –û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞–Ω–æ–º A+")
    print("=" * 80)
    
    try:
        optimizer = PlanAPlusWorkOptimizer()
        success = optimizer.optimize_for_plan_a_plus()
        
        if success:
            print("\\n‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞–Ω–æ–º A+!")
            print("üîß –î–ª—è –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: python3 wake_up_systems.py")
            print("üìä –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞: python3 scripts/sfm_complete_statistics.py")
        else:
            print("\\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã!")
            return 1
            
    except KeyboardInterrupt:
        print("\\n‚ö†Ô∏è –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return 1
    except Exception as e:
        print(f"\\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    exit(main())