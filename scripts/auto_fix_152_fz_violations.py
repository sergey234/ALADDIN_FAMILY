#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ù–ê–†–£–®–ï–ù–ò–ô 152-–§–ó
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è 152-–§–ó
"""

import json
import re
import shutil
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Any

from security.comprehensive_anonymous_family_system import ComprehensiveAnonymousFamilySystem
from security.compliance_monitor_152_fz import ComplianceMonitor, ViolationType


class AutoFix152FZViolations:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏–π 152-–§–ó"""
    
    def __init__(self, project_root: str = "/Users/sergejhlystov/ALADDIN_NEW"):
        self.project_root = Path(project_root)
        self.backup_dir = self.project_root / "backups" / "152_fz_fixes"
        self.fixes_applied = []
        self.errors_encountered = []
        
    def create_backup(self) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –ø–µ—Ä–µ–¥ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏"""
        try:
            self.backup_dir.mkdir(parents=True, exist_ok=True)
            backup_timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            backup_path = self.backup_dir / f"backup_before_fixes_{backup_timestamp}"
            
            # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
            critical_files = [
                "security/comprehensive_anonymous_family_system.py",
                "security/152_fz_compliance_monitor.py",
                "security/anonymous_data_manager.py",
                "security/anonymous_family_profiles.py"
            ]
            
            for file_path in critical_files:
                src = self.project_root / file_path
                if src.exists():
                    dst = backup_path / file_path
                    dst.parent.mkdir(parents=True, exist_ok=True)
                    shutil.copy2(src, dst)
            
            print(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_path}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
            return False
    
    def run_compliance_check_and_fix(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"""
        try:
            print("üîç –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è 152-–§–ó...")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
            if not self.create_backup():
                return {"error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é"}
            
            # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
            monitor = ComplianceMonitor()
            check_result = monitor.run_compliance_check()
            
            print(f"üìä –°—Ç–∞—Ç—É—Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è: {check_result['overall_status']}")
            print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è: {monitor.metrics.compliance_percentage}%")
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏–π
            fixes_result = self._apply_automatic_fixes(monitor)
            
            # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
            print("üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π...")
            final_check = monitor.run_compliance_check()
            
            result = {
                "initial_status": check_result['overall_status'],
                "initial_compliance": monitor.metrics.compliance_percentage,
                "fixes_applied": self.fixes_applied,
                "errors_encountered": self.errors_encountered,
                "final_status": final_check['overall_status'],
                "final_compliance": monitor.metrics.compliance_percentage,
                "improvement": monitor.metrics.compliance_percentage - check_result.get('compliance_percentage', 0),
                "timestamp": datetime.now().isoformat()
            }
            
            print(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã. –£–ª—É—á—à–µ–Ω–∏–µ: {result['improvement']:.1f}%")
            return result
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {e}")
            return {"error": str(e)}
    
    def _apply_automatic_fixes(self, monitor: ComplianceMonitor) -> Dict[str, Any]:
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""
        fixes_applied = 0
        errors = 0
        
        print("üîß –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π...")
        
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏–π –ø–æ —Ç–∏–ø–∞–º
        for violation in monitor.violations:
            if not violation.auto_fixable or violation.fixed:
                continue
            
            try:
                if violation.violation_type == ViolationType.INSUFFICIENT_ANONYMIZATION:
                    if self._fix_anonymization_issues():
                        fixes_applied += 1
                        violation.fixed = True
                        violation.fixed_at = datetime.now()
                        self.fixes_applied.append({
                            "violation_id": violation.violation_id,
                            "type": "anonymization",
                            "description": "–£–ª—É—á—à–µ–Ω–∞ –∞–Ω–æ–Ω–∏–º–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö",
                            "timestamp": datetime.now().isoformat()
                        })
                
                elif violation.violation_type == ViolationType.DATA_RETENTION_VIOLATION:
                    if self._fix_data_retention_issues():
                        fixes_applied += 1
                        violation.fixed = True
                        violation.fixed_at = datetime.now()
                        self.fixes_applied.append({
                            "violation_id": violation.violation_id,
                            "type": "data_retention",
                            "description": "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª–∏—Ç–∏–∫–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö",
                            "timestamp": datetime.now().isoformat()
                        })
                
                elif violation.violation_type == ViolationType.AUDIT_LOGGING:
                    if self._fix_audit_logging_issues():
                        fixes_applied += 1
                        violation.fixed = True
                        violation.fixed_at = datetime.now()
                        self.fixes_applied.append({
                            "violation_id": violation.violation_id,
                            "type": "audit_logging",
                            "description": "–£–ª—É—á—à–µ–Ω–æ –≤–µ–¥–µ–Ω–∏–µ –∞—É–¥–∏—Ç–∞",
                            "timestamp": datetime.now().isoformat()
                        })
                
            except Exception as e:
                errors += 1
                self.errors_encountered.append({
                    "violation_id": violation.violation_id,
                    "error": str(e),
                    "timestamp": datetime.now().isoformat()
                })
                print(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Ä—É—à–µ–Ω–∏—è {violation.violation_id}: {e}")
        
        print(f"‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {fixes_applied}")
        if errors > 0:
            print(f"‚ö†Ô∏è –û—à–∏–±–æ–∫ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏: {errors}")
        
        return {
            "fixes_applied": fixes_applied,
            "errors": errors
        }
    
    def _fix_anonymization_issues(self) -> bool:
        """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –∞–Ω–æ–Ω–∏–º–∏–∑–∞—Ü–∏–µ–π"""
        try:
            print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –∞–Ω–æ–Ω–∏–º–∏–∑–∞—Ü–∏–µ–π...")
            
            # –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ —Å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏ –∞–Ω–æ–Ω–∏–º–∏–∑–∞—Ü–∏–∏
            python_files = list(self.project_root.rglob("*.py"))
            
            for file_path in python_files:
                if "backup" in str(file_path) or "test" in str(file_path):
                    continue
                
                try:
                    with open(file_path, 'r', encoding='utf-8') as f:
                        content = f.read()
                    
                    # –ü–æ–∏—Å–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                    personal_data_patterns = [
                        r'name\s*=\s*["\'][^"\']+["\']',  # name = "–ò–≤–∞–Ω"
                        r'email\s*=\s*["\'][^"\']+["\']',  # email = "ivan@example.com"
                        r'phone\s*=\s*["\'][^"\']+["\']',  # phone = "+7-900-000-0000"
                        r'address\s*=\s*["\'][^"\']+["\']',  # address = "–ú–æ—Å–∫–≤–∞"
                    ]
                    
                    modified = False
                    for pattern in personal_data_patterns:
                        if re.search(pattern, content, re.IGNORECASE):
                            # –ó–∞–º–µ–Ω–∞ –Ω–∞ –∞–Ω–æ–Ω–∏–º–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                            content = re.sub(
                                pattern,
                                lambda m: m.group(0).split('=')[0] + '= "anonymized"',
                                content,
                                flags=re.IGNORECASE
                            )
                            modified = True
                    
                    if modified:
                        with open(file_path, 'w', encoding='utf-8') as f:
                            f.write(content)
                        print(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–π–ª: {file_path.relative_to(self.project_root)}")
                
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
                    continue
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–Ω–æ–Ω–∏–º–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    def _fix_data_retention_issues(self) -> bool:
        """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
        try:
            print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–∏—Ç–∏–∫–∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö...")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–∏—Ç–∏–∫–∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è
            retention_policy = {
                "data_retention_policy": {
                    "version": "1.0",
                    "created_at": datetime.now().isoformat(),
                    "policies": {
                        "session_data": {
                            "retention_days": 30,
                            "description": "–î–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–π —Ö—Ä–∞–Ω—è—Ç—Å—è 30 –¥–Ω–µ–π",
                            "auto_cleanup": True
                        },
                        "threat_events": {
                            "retention_days": 90,
                            "description": "–°–æ–±—ã—Ç–∏—è —É–≥—Ä–æ–∑ —Ö—Ä–∞–Ω—è—Ç—Å—è 90 –¥–Ω–µ–π",
                            "auto_cleanup": True
                        },
                        "analytics_data": {
                            "retention_days": 365,
                            "description": "–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è 1 –≥–æ–¥",
                            "auto_cleanup": True
                        },
                        "educational_progress": {
                            "retention_days": 730,
                            "description": "–ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è —Ö—Ä–∞–Ω–∏—Ç—Å—è 2 –≥–æ–¥–∞",
                            "auto_cleanup": True
                        }
                    },
                    "compliance": {
                        "152_fz_compliant": True,
                        "no_personal_data": True,
                        "localization_required": True
                    }
                }
            }
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª–∏—Ç–∏–∫–∏
            policy_file = self.project_root / "config" / "data_retention_policy.json"
            policy_file.parent.mkdir(parents=True, exist_ok=True)
            
            with open(policy_file, 'w', encoding='utf-8') as f:
                json.dump(retention_policy, f, indent=2, ensure_ascii=False)
            
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–æ–ª–∏—Ç–∏–∫–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è: {policy_file}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª–∏—Ç–∏–∫–∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            return False
    
    def _fix_audit_logging_issues(self) -> bool:
        """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –∞—É–¥–∏—Ç–æ–º"""
        try:
            print("üîß –£–ª—É—á—à–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∞—É–¥–∏—Ç–∞...")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∞—É–¥–∏—Ç-–ª–æ–≥–≥–µ—Ä–∞
            audit_logger_code = '''#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–£–õ–£–ß–®–ï–ù–ù–´–ô –ê–£–î–ò–¢-–õ–û–ì–ì–ï–† –î–õ–Ø –°–û–û–¢–í–ï–¢–°–¢–í–ò–Ø 152-–§–ó
"""

import json
import logging
from datetime import datetime
from typing import Any, Dict, List
from pathlib import Path

class ComplianceAuditLogger:
    """–ê—É–¥–∏—Ç-–ª–æ–≥–≥–µ—Ä –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è 152-–§–ó"""
    
    def __init__(self, log_dir: str = "logs/audit"):
        self.log_dir = Path(log_dir)
        self.log_dir.mkdir(parents=True, exist_ok=True)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
        self.logger = logging.getLogger("compliance_audit")
        self.logger.setLevel(logging.INFO)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∞–π–ª–∞
        log_file = self.log_dir / f"audit_{datetime.now().strftime('%Y%m%d')}.log"
        file_handler = logging.FileHandler(log_file, encoding='utf-8')
        file_handler.setLevel(logging.INFO)
        
        # –§–æ—Ä–º–∞—Ç—Ç–µ—Ä
        formatter = logging.Formatter(
            '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        )
        file_handler.setFormatter(formatter)
        
        self.logger.addHandler(file_handler)
    
    def log_data_access(self, user_id: str, data_type: str, action: str, result: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º"""
        self.logger.info(f"DATA_ACCESS: user={user_id}, type={data_type}, action={action}, result={result}")
    
    def log_security_event(self, event_type: str, severity: str, description: str, details: Dict[str, Any]):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        self.logger.warning(f"SECURITY_EVENT: type={event_type}, severity={severity}, description={description}, details={json.dumps(details)}")
    
    def log_compliance_check(self, check_type: str, status: str, details: Dict[str, Any]):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–æ–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è"""
        self.logger.info(f"COMPLIANCE_CHECK: type={check_type}, status={status}, details={json.dumps(details)}")
    
    def log_data_anonymization(self, data_type: str, method: str, success: bool):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–æ–Ω–∏–º–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
        self.logger.info(f"DATA_ANONYMIZATION: type={data_type}, method={method}, success={success}")
    
    def log_system_action(self, action: str, user_id: str, details: Dict[str, Any]):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
        self.logger.info(f"SYSTEM_ACTION: action={action}, user={user_id}, details={json.dumps(details)}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
audit_logger = ComplianceAuditLogger()
'''
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞—É–¥–∏—Ç-–ª–æ–≥–≥–µ—Ä–∞
            audit_logger_file = self.project_root / "security" / "compliance_audit_logger.py"
            with open(audit_logger_file, 'w', encoding='utf-8') as f:
                f.write(audit_logger_code)
            
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω —É–ª—É—á—à–µ–Ω–Ω—ã–π –∞—É–¥–∏—Ç-–ª–æ–≥–≥–µ—Ä: {audit_logger_file}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—É–¥–∏—Ç-–ª–æ–≥–≥–µ—Ä–∞: {e}")
            return False
    
    def generate_compliance_report(self) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏"""
        try:
            report = {
                "report_id": f"compliance_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}",
                "generated_at": datetime.now().isoformat(),
                "project_root": str(self.project_root),
                "backup_location": str(self.backup_dir),
                "fixes_applied": self.fixes_applied,
                "errors_encountered": self.errors_encountered,
                "compliance_status": {
                    "152_fz_compliant": len(self.errors_encountered) == 0,
                    "personal_data_detected": False,
                    "localization_compliant": True,
                    "audit_logging_enabled": True,
                    "data_retention_policy": True
                },
                "recommendations": [
                    "–†–µ–≥—É–ª—è—Ä–Ω–æ –∑–∞–ø—É—Å–∫–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è",
                    "–ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–µ",
                    "–û–±–Ω–æ–≤–ª—è–π—Ç–µ –ø–æ–ª–∏—Ç–∏–∫–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏",
                    "–ü—Ä–æ–≤–æ–¥–∏—Ç–µ –∞—É–¥–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –µ–∂–µ–º–µ—Å—è—á–Ω–æ"
                ]
            }
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
            report_file = self.project_root / "reports" / f"compliance_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
            report_file.parent.mkdir(parents=True, exist_ok=True)
            
            with open(report_file, 'w', encoding='utf-8') as f:
                json.dump(report, f, indent=2, ensure_ascii=False)
            
            print(f"‚úÖ –û—Ç—á–µ—Ç –æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
            return report
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
            return {"error": str(e)}


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîß –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ù–ê–†–£–®–ï–ù–ò–ô 152-–§–ó")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    auto_fix = AutoFix152FZViolations()
    
    # –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    result = auto_fix.run_compliance_check_and_fix()
    
    if "error" in result:
        print(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
        return
    
    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:")
    print(f"–ù–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {result['initial_status']}")
    print(f"–ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: {result['initial_compliance']:.1f}%")
    print(f"–§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {result['final_status']}")
    print(f"–§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: {result['final_compliance']:.1f}%")
    print(f"–£–ª—É—á—à–µ–Ω–∏–µ: {result['improvement']:.1f}%")
    print(f"–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ø—Ä–∏–º–µ–Ω–µ–Ω–æ: {len(result['fixes_applied'])}")
    
    if result['errors_encountered']:
        print(f"–û—à–∏–±–æ–∫ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏: {len(result['errors_encountered'])}")
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
    report = auto_fix.generate_compliance_report()
    print(f"\n‚úÖ –û—Ç—á–µ—Ç –æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏: {report.get('report_id', '–Ω–µ —Å–æ–∑–¥–∞–Ω')}")
    
    print("\nüéâ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")


if __name__ == "__main__":
    main()