#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ö–ê–ß–ï–°–¢–í–ê A+
–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è A+ –∫–∞—á–µ—Å—Ç–≤–∞ (95+/100)

–ê–≤—Ç–æ—Ä: ALADDIN Security Team
–í–µ—Ä—Å–∏—è: 1.0
–î–∞—Ç–∞: 2025-09-11
"""

import os
import sys
import subprocess
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, '/Users/sergejhlystov/ALADDIN_NEW')

def run_flake8_check():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É flake8"""
    print("üîç –ó–∞–ø—É—Å–∫ flake8...")
    try:
        result = subprocess.run(
            ['python3', '-m', 'flake8', '--count', '--select=E9,F63,F7,F82', '--show-source', '--statistics', '.'],
            cwd='/Users/sergejhlystov/ALADDIN_NEW',
            capture_output=True,
            text=True
        )
        
        if result.returncode == 0:
            print("‚úÖ flake8: –û—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return 0
        else:
            error_count = len(result.stdout.split('\n')) - 1
            print(f"‚ö†Ô∏è flake8: –ù–∞–π–¥–µ–Ω–æ {error_count} –æ—à–∏–±–æ–∫")
            return error_count
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ flake8: {e}")
        return 999

def run_pylint_check():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É pylint"""
    print("üîç –ó–∞–ø—É—Å–∫ pylint...")
    try:
        result = subprocess.run(
            ['python3', '-m', 'pylint', '--disable=all', '--enable=E,F', '--score=no', 'security/'],
            cwd='/Users/sergejhlystov/ALADDIN_NEW',
            capture_output=True,
            text=True
        )
        
        if result.returncode == 0:
            print("‚úÖ pylint: –û—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return 0
        else:
            error_count = result.stdout.count('E:') + result.stdout.count('F:')
            print(f"‚ö†Ô∏è pylint: –ù–∞–π–¥–µ–Ω–æ {error_count} –æ—à–∏–±–æ–∫")
            return error_count
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ pylint: {e}")
        return 999

def run_mypy_check():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É mypy"""
    print("üîç –ó–∞–ø—É—Å–∫ mypy...")
    try:
        result = subprocess.run(
            ['python3', '-m', 'mypy', '--ignore-missing-imports', 'security/'],
            cwd='/Users/sergejhlystov/ALADDIN_NEW',
            capture_output=True,
            text=True
        )
        
        if result.returncode == 0:
            print("‚úÖ mypy: –û—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return 0
        else:
            error_count = result.stdout.count('error:')
            print(f"‚ö†Ô∏è mypy: –ù–∞–π–¥–µ–Ω–æ {error_count} –æ—à–∏–±–æ–∫")
            return error_count
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ mypy: {e}")
        return 999

def count_python_files():
    """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ Python —Ñ–∞–π–ª–æ–≤"""
    count = 0
    for root, dirs, files in os.walk('/Users/sergejhlystov/ALADDIN_NEW'):
        for file in files:
            if file.endswith('.py') and not file.startswith('__'):
                count += 1
    return count

def count_lines_of_code():
    """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞"""
    total_lines = 0
    for root, dirs, files in os.walk('/Users/sergejhlystov/ALADDIN_NEW'):
        for file in files:
            if file.endswith('.py') and not file.startswith('__'):
                file_path = os.path.join(root, file)
                try:
                    with open(file_path, 'r', encoding='utf-8') as f:
                        lines = f.readlines()
                        total_lines += len(lines)
                except:
                    pass
    return total_lines

def calculate_quality_score(flake8_errors, pylint_errors, mypy_errors, total_files):
    """–í—ã—á–∏—Å–ª—è–µ—Ç –æ–±—â—É—é –æ—Ü–µ–Ω–∫—É –∫–∞—á–µ—Å—Ç–≤–∞"""
    total_errors = flake8_errors + pylint_errors + mypy_errors
    
    if total_errors == 0:
        return 100.0
    elif total_errors < 10:
        return 95.0
    elif total_errors < 50:
        return 90.0
    elif total_errors < 100:
        return 85.0
    elif total_errors < 200:
        return 80.0
    elif total_errors < 500:
        return 75.0
    else:
        return max(0, 100 - (total_errors / total_files) * 10)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞"""
    print("üöÄ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ö–ê–ß–ï–°–¢–í–ê A+")
    print("=" * 70)
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã –∏ —Å—Ç—Ä–æ–∫–∏ –∫–æ–¥–∞
    total_files = count_python_files()
    total_lines = count_lines_of_code()
    
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞:")
    print(f"   üìÅ Python —Ñ–∞–π–ª–æ–≤: {total_files}")
    print(f"   üìù –°—Ç—Ä–æ–∫ –∫–æ–¥–∞: {total_lines:,}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
    print(f"\nüîç –ó–ê–ü–£–°–ö –ü–†–û–í–ï–†–û–ö –ö–ê–ß–ï–°–¢–í–ê")
    print("-" * 50)
    
    flake8_errors = run_flake8_check()
    pylint_errors = run_pylint_check()
    mypy_errors = run_mypy_check()
    
    # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é –æ—Ü–µ–Ω–∫—É –∫–∞—á–µ—Å—Ç–≤–∞
    quality_score = calculate_quality_score(flake8_errors, pylint_errors, mypy_errors, total_files)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∫–∞—á–µ—Å—Ç–≤–∞
    if quality_score >= 95:
        quality_level = "A+"
        quality_emoji = "üéâ"
    elif quality_score >= 90:
        quality_level = "A"
        quality_emoji = "‚úÖ"
    elif quality_score >= 85:
        quality_level = "B+"
        quality_emoji = "üëç"
    elif quality_score >= 80:
        quality_level = "B"
        quality_emoji = "üëå"
    else:
        quality_level = "C"
        quality_emoji = "‚ö†Ô∏è"
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 70)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ö–ê–ß–ï–°–¢–í–ê:")
    print("=" * 70)
    print(f"üîç flake8 –æ—à–∏–±–æ–∫: {flake8_errors}")
    print(f"üîç pylint –æ—à–∏–±–æ–∫: {pylint_errors}")
    print(f"üîç mypy –æ—à–∏–±–æ–∫: {mypy_errors}")
    print(f"üìä –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {flake8_errors + pylint_errors + mypy_errors}")
    print(f"üìÅ –§–∞–π–ª–æ–≤ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {total_files}")
    print(f"üìù –°—Ç—Ä–æ–∫ –∫–æ–¥–∞: {total_lines:,}")
    print(f"üèÜ –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: {quality_score:.1f}/100")
    print(f"üéØ –£—Ä–æ–≤–µ–Ω—å –∫–∞—á–µ—Å—Ç–≤–∞: {quality_level} {quality_emoji}")
    
    if quality_score >= 95:
        print("\nüéâ A+ –ö–ê–ß–ï–°–¢–í–û –î–û–°–¢–ò–ì–ù–£–¢–û!")
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É")
        print("üöÄ –í—Å–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
    elif quality_score >= 90:
        print("\n‚úÖ –û–¢–õ–ò–ß–ù–û–ï –ö–ê–ß–ï–°–¢–í–û!")
        print("üëç –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        print("üîß –ù–µ–±–æ–ª—å—à–∏–µ —É–ª—É—á—à–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω—ã")
    else:
        print("\n‚ö†Ô∏è –¢–†–ï–ë–£–Æ–¢–°–Ø –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –£–õ–£–ß–®–ï–ù–ò–Ø")
        print("üîÑ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    report_data = {
        "timestamp": datetime.now().isoformat(),
        "quality_score": quality_score,
        "quality_level": quality_level,
        "flake8_errors": flake8_errors,
        "pylint_errors": pylint_errors,
        "mypy_errors": mypy_errors,
        "total_files": total_files,
        "total_lines": total_lines
    }
    
    try:
        import json
        os.makedirs('/Users/sergejhlystov/ALADDIN_NEW/data', exist_ok=True)
        with open('/Users/sergejhlystov/ALADDIN_NEW/data/final_quality_report.json', 'w', encoding='utf-8') as f:
            json.dump(report_data, f, indent=2, ensure_ascii=False)
        print(f"\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: /Users/sergejhlystov/ALADDIN_NEW/data/final_quality_report.json")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
    
    return quality_score >= 95

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)