#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Create Full Backup No Archive - –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –±—ç–∫–∞–ø–∞ –±–µ–∑ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è
–ü–æ–ª–Ω—ã–π –±—ç–∫–∞–ø –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫ —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

–§—É–Ω–∫—Ü–∏—è: Create Full Backup No Archive
–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô
–í–µ—Ä—Å–∏—è: 1.0
–î–∞—Ç–∞: 2025-09-07
"""

import os
import shutil
import json
import hashlib
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Any

class FullBackupNoArchive:
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –±—ç–∫–∞–ø–∞ –±–µ–∑ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self):
        self.source_dir = Path(".")
        self.backup_base = Path("../BACKUPS")
        self.timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        self.backup_name = f"ALADDIN_SECURITY_FULL_BACKUP_{self.timestamp}"
        self.backup_dir = self.backup_base / self.backup_name
        
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –ø–∞–ø–∫—É –¥–ª—è –±—ç–∫–∞–ø–æ–≤
        self.backup_base.mkdir(exist_ok=True)
    
    def create_manifest(self) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞ –±—ç–∫–∞–ø–∞"""
        manifest = {
            "backup_info": {
                "name": self.backup_name,
                "timestamp": self.timestamp,
                "created_at": datetime.now().isoformat(),
                "source_directory": str(self.source_dir.absolute()),
                "backup_type": "FULL_NO_ARCHIVE",
                "description": "–ü–æ–ª–Ω—ã–π –±—ç–∫–∞–ø —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ ALADDIN –±–µ–∑ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è"
            },
            "statistics": {
                "total_files": 0,
                "total_directories": 0,
                "total_size_bytes": 0,
                "python_files": 0,
                "json_files": 0,
                "txt_files": 0,
                "md_files": 0,
                "other_files": 0
            },
            "components": {
                "core_components": [],
                "security_components": [],
                "ai_agents": [],
                "security_bots": [],
                "microservices": [],
                "family_components": [],
                "compliance_components": [],
                "privacy_components": [],
                "ci_cd_components": [],
                "reactive_components": [],
                "active_components": [],
                "preliminary_components": [],
                "orchestration_components": [],
                "scaling_components": [],
                "tests": [],
                "scripts": [],
                "vpn_components": [],
                "antivirus_components": [],
                "other_components": []
            },
            "file_checksums": {},
            "directory_structure": {}
        }
        
        return manifest
    
    def calculate_file_checksum(self, file_path: Path) -> str:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Å—É–º–º—ã —Ñ–∞–π–ª–∞"""
        try:
            with open(file_path, 'rb') as f:
                return hashlib.sha256(f.read()).hexdigest()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Å—É–º–º—ã –¥–ª—è {file_path}: {e}")
            return ""
    
    def categorize_file(self, file_path: Path) -> str:
        """–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–∞ –ø–æ —Ç–∏–ø—É"""
        relative_path = file_path.relative_to(self.source_dir)
        path_str = str(relative_path)
        
        # VPN –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        if "vpn" in path_str.lower():
            return "vpn_components"
        
        # Antivirus –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        if "antivirus" in path_str.lower():
            return "antivirus_components"
        
        # Core –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        if path_str.startswith("security/core/") or "base.py" in path_str or "configuration.py" in path_str:
            return "core_components"
        
        # Security –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        if path_str.startswith("security/") and not any(x in path_str for x in ["ai_agents", "bots", "microservices", "family", "compliance", "privacy", "ci_cd", "reactive", "active", "preliminary", "orchestration", "scaling", "vpn", "antivirus"]):
            return "security_components"
        
        # AI –∞–≥–µ–Ω—Ç—ã
        if path_str.startswith("security/ai_agents/"):
            return "ai_agents"
        
        # –ë–æ—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        if path_str.startswith("security/bots/"):
            return "security_bots"
        
        # –ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—ã
        if path_str.startswith("security/microservices/"):
            return "microservices"
        
        # –°–µ–º–µ–π–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        if path_str.startswith("security/family/"):
            return "family_components"
        
        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
        if path_str.startswith("security/compliance/"):
            return "compliance_components"
        
        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏
        if path_str.startswith("security/privacy/"):
            return "privacy_components"
        
        # CI/CD –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        if path_str.startswith("security/ci_cd/"):
            return "ci_cd_components"
        
        # –†–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        if path_str.startswith("security/reactive/"):
            return "reactive_components"
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        if path_str.startswith("security/active/"):
            return "active_components"
        
        # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        if path_str.startswith("security/preliminary/"):
            return "preliminary_components"
        
        # –û—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏—è
        if path_str.startswith("security/orchestration/"):
            return "orchestration_components"
        
        # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
        if path_str.startswith("security/scaling/"):
            return "scaling_components"
        
        # –¢–µ—Å—Ç—ã
        if path_str.startswith("tests/"):
            return "tests"
        
        # –°–∫—Ä–∏–ø—Ç—ã
        if path_str.startswith("scripts/"):
            return "scripts"
        
        return "other_components"
    
    def copy_file(self, src: Path, dst: Path, manifest: Dict[str, Any]) -> bool:
        """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
            dst.parent.mkdir(parents=True, exist_ok=True)
            
            # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
            shutil.copy2(src, dst)
            
            # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é —Å—É–º–º—É
            checksum = self.calculate_file_checksum(src)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            file_size = src.stat().st_size
            manifest["statistics"]["total_files"] += 1
            manifest["statistics"]["total_size_bytes"] += file_size
            
            # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª
            category = self.categorize_file(src)
            relative_path = str(src.relative_to(self.source_dir))
            manifest["components"][category].append(relative_path)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é —Å—É–º–º—É
            manifest["file_checksums"][relative_path] = checksum
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –ø–æ —Ç–∏–ø–∞–º —Ñ–∞–π–ª–æ–≤
            if src.suffix == ".py":
                manifest["statistics"]["python_files"] += 1
            elif src.suffix == ".json":
                manifest["statistics"]["json_files"] += 1
            elif src.suffix == ".txt":
                manifest["statistics"]["txt_files"] += 1
            elif src.suffix == ".md":
                manifest["statistics"]["md_files"] += 1
            else:
                manifest["statistics"]["other_files"] += 1
            
            return True
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ {src}: {e}")
            return False
    
    def copy_directory(self, src: Path, dst: Path, manifest: Dict[str, Any]) -> bool:
        """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
            dst.mkdir(parents=True, exist_ok=True)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            manifest["statistics"]["total_directories"] += 1
            
            # –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            for item in src.iterdir():
                if item.is_file():
                    self.copy_file(item, dst / item.name, manifest)
                elif item.is_dir():
                    self.copy_directory(item, dst / item.name, manifest)
            
            return True
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {src}: {e}")
            return False
    
    def create_backup(self) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –±—ç–∫–∞–ø–∞"""
        print("üöÄ –ù–ê–ß–ê–õ–û –°–û–ó–î–ê–ù–ò–Ø –ü–û–õ–ù–û–ì–û –ë–≠–ö–ê–ü–ê –ë–ï–ó –ê–†–•–ò–í–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 70)
        print(f"üìÅ –ò—Å—Ç–æ—á–Ω–∏–∫: {self.source_dir.absolute()}")
        print(f"üìÅ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: {self.backup_dir.absolute()}")
        print(f"‚è∞ –í—Ä–µ–º—è: {self.timestamp}")
        print("")
        
        # –°–æ–∑–¥–∞–µ–º –º–∞–Ω–∏—Ñ–µ—Å—Ç
        manifest = self.create_manifest()
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –±—ç–∫–∞–ø–∞
        self.backup_dir.mkdir(parents=True, exist_ok=True)
        
        print("üìã –ö–û–ü–ò–†–û–í–ê–ù–ò–ï –§–ê–ô–õ–û–í –ò –ü–ê–ü–û–ö...")
        print("-" * 50)
        
        # –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏ –ø–∞–ø–∫–∏
        copied_files = 0
        failed_files = 0
        
        for item in self.source_dir.iterdir():
            if item.name.startswith('.') and item.name not in ['.git', '.gitignore']:
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∫—Ä—ã—Ç—ã–µ —Ñ–∞–π–ª—ã –∫—Ä–æ–º–µ .git
            
            if item.is_file():
                if self.copy_file(item, self.backup_dir / item.name, manifest):
                    copied_files += 1
                else:
                    failed_files += 1
            elif item.is_dir():
                if self.copy_directory(item, self.backup_dir / item.name, manifest):
                    copied_files += 1
                else:
                    failed_files += 1
        
        print(f"‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {copied_files}")
        print(f"‚ùå –û—à–∏–±–æ–∫: {failed_files}")
        print("")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–Ω–∏—Ñ–µ—Å—Ç
        manifest_file = self.backup_dir / "BACKUP_MANIFEST.json"
        with open(manifest_file, 'w', encoding='utf-8') as f:
            json.dump(manifest, f, indent=2, ensure_ascii=False)
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
        self.create_backup_report(manifest)
        
        print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–≠–ö–ê–ü–ê:")
        print(f"‚Ä¢ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {manifest['statistics']['total_files']}")
        print(f"‚Ä¢ –í—Å–µ–≥–æ –ø–∞–ø–æ–∫: {manifest['statistics']['total_directories']}")
        print(f"‚Ä¢ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {manifest['statistics']['total_size_bytes'] / (1024*1024):.1f} MB")
        print(f"‚Ä¢ Python —Ñ–∞–π–ª–æ–≤: {manifest['statistics']['python_files']}")
        print(f"‚Ä¢ JSON —Ñ–∞–π–ª–æ–≤: {manifest['statistics']['json_files']}")
        print(f"‚Ä¢ TXT —Ñ–∞–π–ª–æ–≤: {manifest['statistics']['txt_files']}")
        print(f"‚Ä¢ MD —Ñ–∞–π–ª–æ–≤: {manifest['statistics']['md_files']}")
        print(f"‚Ä¢ –î—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–æ–≤: {manifest['statistics']['other_files']}")
        print("")
        
        print("‚úÖ –ü–û–õ–ù–´–ô –ë–≠–ö–ê–ü –°–û–ó–î–ê–ù –£–°–ü–ï–®–ù–û!")
        print(f"üìÅ –ü—É—Ç—å –∫ –±—ç–∫–∞–ø—É: {self.backup_dir.absolute()}")
        
        return True
    
    def create_backup_report(self, manifest: Dict[str, Any]) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ –±—ç–∫–∞–ø–µ"""
        report_file = self.backup_dir / "BACKUP_REPORT.txt"
        
        with open(report_file, 'w', encoding='utf-8') as f:
            f.write("–ü–û–õ–ù–´–ô –ë–≠–ö–ê–ü –°–ò–°–¢–ï–ú–´ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò ALADDIN\n")
            f.write("=" * 50 + "\n\n")
            f.write(f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {manifest['backup_info']['created_at']}\n")
            f.write(f"–¢–∏–ø –±—ç–∫–∞–ø–∞: {manifest['backup_info']['backup_type']}\n")
            f.write(f"–ò—Å—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞: {manifest['backup_info']['source_directory']}\n\n")
            
            f.write("–°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n")
            f.write(f"‚Ä¢ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {manifest['statistics']['total_files']}\n")
            f.write(f"‚Ä¢ –í—Å–µ–≥–æ –ø–∞–ø–æ–∫: {manifest['statistics']['total_directories']}\n")
            f.write(f"‚Ä¢ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {manifest['statistics']['total_size_bytes'] / (1024*1024):.1f} MB\n")
            f.write(f"‚Ä¢ Python —Ñ–∞–π–ª–æ–≤: {manifest['statistics']['python_files']}\n")
            f.write(f"‚Ä¢ JSON —Ñ–∞–π–ª–æ–≤: {manifest['statistics']['json_files']}\n")
            f.write(f"‚Ä¢ TXT —Ñ–∞–π–ª–æ–≤: {manifest['statistics']['txt_files']}\n")
            f.write(f"‚Ä¢ MD —Ñ–∞–π–ª–æ–≤: {manifest['statistics']['md_files']}\n")
            f.write(f"‚Ä¢ –î—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–æ–≤: {manifest['statistics']['other_files']}\n\n")
            
            f.write("–ö–û–ú–ü–û–ù–ï–ù–¢–´ –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú:\n")
            for category, files in manifest['components'].items():
                if files:
                    f.write(f"\n{category.upper()} ({len(files)} —Ñ–∞–π–ª–æ–≤):\n")
                    for file_path in files[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —Ñ–∞–π–ª–æ–≤
                        f.write(f"  ‚Ä¢ {file_path}\n")
                    if len(files) > 10:
                        f.write(f"  ... –∏ –µ—â–µ {len(files) - 10} —Ñ–∞–π–ª–æ–≤\n")

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
if __name__ == "__main__":
    print("üöÄ –ó–ê–ü–£–°–ö –°–û–ó–î–ê–ù–ò–Ø –ü–û–õ–ù–û–ì–û –ë–≠–ö–ê–ü–ê –ë–ï–ó –ê–†–•–ò–í–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 70)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞
    backup = FullBackupNoArchive()
    success = backup.create_backup()
    
    if success:
        print(f"\nüéâ –ë–≠–ö–ê–ü –°–û–ó–î–ê–ù –£–°–ü–ï–®–ù–û!")
        print(f"üìÅ –ü—É—Ç—å: {backup.backup_dir.absolute()}")
    else:
        print("\n‚ùå –û–®–ò–ë–ö–ê –°–û–ó–î–ê–ù–ò–Ø –ë–≠–ö–ê–ü–ê!")
