#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –≤ SafeFunctionManager
–ë–µ–∑ —Å–ª–æ–∂–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
"""

import sys
import os
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append('/Users/sergejhlystov/ALADDIN_NEW')

def show_functions_from_code():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏, –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤ –∫–æ–¥–µ"""
    print("üîç –§–£–ù–ö–¶–ò–ò –í SAFEFUNCTIONMANAGER (–∏–∑ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞)")
    print("=" * 60)
    
    # –ë–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ SafeFunctionManager
    basic_functions = [
        {
            "function_id": "core_base",
            "name": "CoreBase", 
            "description": "–ë–∞–∑–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å–∏—Å—Ç–µ–º—ã",
            "function_type": "core",
            "security_level": "high",
            "is_critical": True,
            "status": "enabled"
        },
        {
            "function_id": "service_base",
            "name": "ServiceBase",
            "description": "–ë–∞–∑–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å", 
            "function_type": "core",
            "security_level": "high",
            "is_critical": True,
            "status": "enabled"
        },
        {
            "function_id": "security_base",
            "name": "SecurityBase",
            "description": "–ë–∞–∑–æ–≤–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å",
            "function_type": "security", 
            "security_level": "high",
            "is_critical": True,
            "status": "enabled"
        },
        {
            "function_id": "database",
            "name": "Database",
            "description": "–ú–æ–¥—É–ª—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
            "function_type": "core",
            "security_level": "high", 
            "is_critical": True,
            "status": "enabled"
        },
        {
            "function_id": "configuration",
            "name": "Configuration",
            "description": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π",
            "function_type": "core",
            "security_level": "medium",
            "is_critical": False,
            "status": "enabled"
        },
        {
            "function_id": "logging_module",
            "name": "LoggingModule", 
            "description": "–°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è",
            "function_type": "core",
            "security_level": "medium",
            "is_critical": False,
            "status": "enabled"
        },
        {
            "function_id": "authentication",
            "name": "Authentication",
            "description": "–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è",
            "function_type": "security",
            "security_level": "high",
            "is_critical": True,
            "status": "enabled"
        }
    ]
    
    # –§—É–Ω–∫—Ü–∏–∏ –∏–∑ —Å–∫—Ä–∏–ø—Ç–æ–≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    integrated_functions = [
        {
            "function_id": "russian_yandex_maps",
            "name": "Russian Yandex Maps",
            "description": "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞–º–∏",
            "function_type": "api",
            "security_level": "medium",
            "is_critical": False,
            "status": "sleeping"
        },
        {
            "function_id": "russian_glonass", 
            "name": "Russian GLONASS",
            "description": "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ì–õ–û–ù–ê–°–°",
            "function_type": "api",
            "security_level": "high",
            "is_critical": False,
            "status": "sleeping"
        },
        {
            "function_id": "russian_free_glonass",
            "name": "Russian Free GLONASS",
            "description": "–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ì–õ–û–ù–ê–°–°",
            "function_type": "api", 
            "security_level": "medium",
            "is_critical": False,
            "status": "sleeping"
        },
        {
            "function_id": "russian_altox_server",
            "name": "Russian Altox Server",
            "description": "–°–µ—Ä–≤–µ—Ä Altox –¥–ª—è –†–æ—Å—Å–∏–∏",
            "function_type": "api",
            "security_level": "medium",
            "is_critical": False,
            "status": "sleeping"
        },
        {
            "function_id": "family_profile_manager",
            "name": "Family Profile Manager",
            "description": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è–º–∏ —Å–µ–º—å–∏",
            "function_type": "family",
            "security_level": "high",
            "is_critical": True,
            "status": "enabled"
        },
        {
            "function_id": "child_protection",
            "name": "Child Protection",
            "description": "–ó–∞—â–∏—Ç–∞ –¥–µ—Ç–µ–π",
            "function_type": "family",
            "security_level": "high",
            "is_critical": True,
            "status": "enabled"
        },
        {
            "function_id": "elderly_protection",
            "name": "Elderly Protection", 
            "description": "–ó–∞—â–∏—Ç–∞ –ø–æ–∂–∏–ª—ã—Ö",
            "function_type": "family",
            "security_level": "high",
            "is_critical": True,
            "status": "enabled"
        },
        {
            "function_id": "trust_scoring",
            "name": "Trust Scoring",
            "description": "–°–∏—Å—Ç–µ–º–∞ –æ—Ü–µ–Ω–∫–∏ –¥–æ–≤–µ—Ä–∏—è",
            "function_type": "security",
            "security_level": "high",
            "is_critical": False,
            "status": "sleeping"
        },
        {
            "function_id": "context_aware_access",
            "name": "Context Aware Access",
            "description": "–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ-–∑–∞–≤–∏—Å–∏–º—ã–π –¥–æ—Å—Ç—É–ø",
            "function_type": "security",
            "security_level": "high",
            "is_critical": False,
            "status": "sleeping"
        },
        {
            "function_id": "advanced_alerting_system",
            "name": "Advanced Alerting System",
            "description": "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π",
            "function_type": "monitoring",
            "security_level": "medium",
            "is_critical": False,
            "status": "sleeping"
        },
        {
            "function_id": "notification_bot",
            "name": "Notification Bot",
            "description": "–ë–æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
            "function_type": "bot",
            "security_level": "medium",
            "is_critical": False,
            "status": "sleeping"
        },
        {
            "function_id": "emergency_response_interface",
            "name": "Emergency Response Interface",
            "description": "–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—è",
            "function_type": "emergency",
            "security_level": "high",
            "is_critical": True,
            "status": "sleeping"
        },
        {
            "function_id": "family_communication_hub",
            "name": "Family Communication Hub",
            "description": "–¶–µ–Ω—Ç—Ä —Å–µ–º–µ–π–Ω–æ–π –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏",
            "function_type": "family",
            "security_level": "medium",
            "is_critical": False,
            "status": "sleeping"
        },
        {
            "function_id": "russian_api_manager",
            "name": "Russian API Manager",
            "description": "–ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö API",
            "function_type": "api",
            "security_level": "medium",
            "is_critical": False,
            "status": "sleeping"
        },
        {
            "function_id": "external_api_manager",
            "name": "External API Manager",
            "description": "–ú–µ–Ω–µ–¥–∂–µ—Ä –≤–Ω–µ—à–Ω–∏—Ö API",
            "function_type": "api",
            "security_level": "medium",
            "is_critical": False,
            "status": "sleeping"
        }
    ]
    
    all_functions = basic_functions + integrated_functions
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å—É
    enabled_functions = [f for f in all_functions if f['status'] == 'enabled']
    sleeping_functions = [f for f in all_functions if f['status'] == 'sleeping']
    disabled_functions = [f for f in all_functions if f['status'] == 'disabled']
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π: {len(all_functions)}")
    print(f"   ‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {len(enabled_functions)}")
    print(f"   üò¥ –°–ø—è—â–∏—Ö: {len(sleeping_functions)}")
    print(f"   ‚ùå –û—Ç–∫–ª—é—á–µ–Ω–Ω—ã—Ö: {len(disabled_functions)}")
    print()
    
    # –ê–∫—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    print("‚úÖ –ê–ö–¢–ò–í–ù–´–ï –§–£–ù–ö–¶–ò–ò:")
    print("-" * 40)
    for func in enabled_functions:
        critical = "üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø" if func.get('is_critical', False) else "üü¢ –û–±—ã—á–Ω–∞—è"
        security_level = func.get('security_level', 'unknown')
        func_type = func.get('function_type', 'unknown')
        print(f"   ‚Ä¢ {func.get('name', 'Unknown')} ({func.get('function_id', 'unknown')})")
        print(f"     {critical} | –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: {security_level} | –¢–∏–ø: {func_type}")
        print(f"     –û–ø–∏—Å–∞–Ω–∏–µ: {func.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}")
        print()
    
    # –°–ø—è—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
    print("üò¥ –°–ü–Ø–©–ò–ï –§–£–ù–ö–¶–ò–ò:")
    print("-" * 40)
    for func in sleeping_functions:
        critical = "üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø" if func.get('is_critical', False) else "üü¢ –û–±—ã—á–Ω–∞—è"
        security_level = func.get('security_level', 'unknown')
        func_type = func.get('function_type', 'unknown')
        print(f"   ‚Ä¢ {func.get('name', 'Unknown')} ({func.get('function_id', 'unknown')})")
        print(f"     {critical} | –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: {security_level} | –¢–∏–ø: {func_type}")
        print(f"     –û–ø–∏—Å–∞–Ω–∏–µ: {func.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}")
        print()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º
    print("üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –¢–ò–ü–ê–ú –§–£–ù–ö–¶–ò–ô:")
    print("-" * 40)
    function_types = {}
    for func in all_functions:
        func_type = func.get('function_type', 'unknown')
        if func_type not in function_types:
            function_types[func_type] = {'total': 0, 'enabled': 0, 'sleeping': 0, 'disabled': 0}
        
        function_types[func_type]['total'] += 1
        status = func.get('status', 'unknown')
        if status in function_types[func_type]:
            function_types[func_type][status] += 1
    
    for func_type, stats in function_types.items():
        print(f"   üì¶ {func_type.upper()}:")
        print(f"      –í—Å–µ–≥–æ: {stats['total']} | –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['enabled']} | –°–ø—è—â–∏—Ö: {stats['sleeping']} | –û—Ç–∫–ª—é—á–µ–Ω–Ω—ã—Ö: {stats['disabled']}")
        print()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—Ä–æ–≤–Ω—è–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    print("üõ°Ô∏è  –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –£–†–û–í–ù–Ø–ú –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò:")
    print("-" * 40)
    security_levels = {}
    for func in all_functions:
        level = func.get('security_level', 'unknown')
        if level not in security_levels:
            security_levels[level] = {'total': 0, 'enabled': 0, 'sleeping': 0, 'disabled': 0}
        
        security_levels[level]['total'] += 1
        status = func.get('status', 'unknown')
        if status in security_levels[level]:
            security_levels[level][status] += 1
    
    for level, stats in security_levels.items():
        level_name = {
            'high': 'üî¥ –í–´–°–û–ö–ò–ô',
            'medium': 'üü° –°–†–ï–î–ù–ò–ô', 
            'low': 'üü¢ –ù–ò–ó–ö–ò–ô'
        }.get(level, f'‚ùì {level.upper()}')
        
        print(f"   {level_name}:")
        print(f"      –í—Å–µ–≥–æ: {stats['total']} | –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['enabled']} | –°–ø—è—â–∏—Ö: {stats['sleeping']} | –û—Ç–∫–ª—é—á–µ–Ω–Ω—ã—Ö: {stats['disabled']}")
        print()
    
    print("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")

if __name__ == "__main__":
    show_functions_from_code()