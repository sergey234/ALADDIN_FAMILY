#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ backup —Ñ–∞–π–ª–æ–≤ vs –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–≤
–î–µ—Ç–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–æ–¥–∞ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è —Ä–∞–∑–ª–∏—á–∏–π –≤ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
"""

import os
import json
import ast
import difflib
from pathlib import Path
from datetime import datetime

def analyze_file_structure(file_path):
    """–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–∞"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ü–∞—Ä—Å–∏–Ω–≥ AST
        tree = ast.parse(content)
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        classes = []
        functions = []
        imports = []
        
        for node in ast.walk(tree):
            if isinstance(node, ast.ClassDef):
                classes.append({
                    'name': node.name,
                    'line': node.lineno,
                    'methods': [n.name for n in node.body if isinstance(n, ast.FunctionDef)]
                })
            elif isinstance(node, ast.FunctionDef):
                functions.append({
                    'name': node.name,
                    'line': node.lineno,
                    'args': [arg.arg for arg in node.args.args]
                })
            elif isinstance(node, (ast.Import, ast.ImportFrom)):
                if isinstance(node, ast.Import):
                    imports.extend([alias.name for alias in node.names])
                else:
                    imports.append(f"{node.module or ''}.{', '.join([alias.name for alias in node.names])}")
        
        return {
            'classes': classes,
            'functions': functions,
            'imports': imports,
            'lines': len(content.splitlines()),
            'size': len(content)
        }
    except Exception as e:
        return {'error': str(e)}

def compare_files(backup_path, original_path):
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–≤—É—Ö —Ñ–∞–π–ª–æ–≤"""
    try:
        with open(backup_path, 'r', encoding='utf-8') as f:
            backup_content = f.read()
        with open(original_path, 'r', encoding='utf-8') as f:
            original_content = f.read()
        
        # –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        backup_structure = analyze_file_structure(backup_path)
        original_structure = analyze_file_structure(original_path)
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤
        backup_classes = {c['name']: c for c in backup_structure.get('classes', [])}
        original_classes = {c['name']: c for c in original_structure.get('classes', [])}
        
        class_comparison = {
            'backup_only': [name for name in backup_classes if name not in original_classes],
            'original_only': [name for name in original_classes if name not in backup_classes],
            'common': [name for name in backup_classes if name in original_classes]
        }
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π
        backup_functions = {f['name']: f for f in backup_structure.get('functions', [])}
        original_functions = {f['name']: f for f in original_structure.get('functions', [])}
        
        function_comparison = {
            'backup_only': [name for name in backup_functions if name not in original_functions],
            'original_only': [name for name in original_functions if name not in backup_functions],
            'common': [name for name in backup_functions if name in original_functions]
        }
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤
        backup_imports = set(backup_structure.get('imports', []))
        original_imports = set(original_structure.get('imports', []))
        
        import_comparison = {
            'backup_only': list(backup_imports - original_imports),
            'original_only': list(original_imports - backup_imports),
            'common': list(backup_imports & original_imports)
        }
        
        # –†–∞–∑–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤
        size_comparison = {
            'backup_size': backup_structure.get('size', 0),
            'original_size': original_structure.get('size', 0),
            'backup_lines': backup_structure.get('lines', 0),
            'original_lines': original_structure.get('lines', 0)
        }
        
        # –ü—Ä–æ—Ü–µ–Ω—Ç —Ä–∞–∑–ª–∏—á–∏–π
        diff_ratio = 0
        if original_content:
            diff_ratio = len(list(difflib.unified_diff(
                original_content.splitlines(keepends=True),
                backup_content.splitlines(keepends=True),
                fromfile='original',
                tofile='backup'
            ))) / len(original_content.splitlines()) * 100
        
        return {
            'class_comparison': class_comparison,
            'function_comparison': function_comparison,
            'import_comparison': import_comparison,
            'size_comparison': size_comparison,
            'diff_ratio': diff_ratio,
            'backup_structure': backup_structure,
            'original_structure': original_structure
        }
    except Exception as e:
        return {'error': str(e)}

def generate_recommendation(comparison, backup_name, original_name):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    if 'error' in comparison:
        return f"‚ùå –û–®–ò–ë–ö–ê –ê–ù–ê–õ–ò–ó–ê: {comparison['error']}"
    
    class_comp = comparison['class_comparison']
    func_comp = comparison['function_comparison']
    import_comp = comparison['import_comparison']
    size_comp = comparison['size_comparison']
    diff_ratio = comparison['diff_ratio']
    
    recommendations = []
    
    # –ê–Ω–∞–ª–∏–∑ –∫–ª–∞—Å—Å–æ–≤
    if class_comp['backup_only']:
        recommendations.append(f"üîç BACKUP —Å–æ–¥–µ—Ä–∂–∏—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–ª–∞—Å—Å—ã: {', '.join(class_comp['backup_only'])}")
    if class_comp['original_only']:
        recommendations.append(f"üîç –û–†–ò–ì–ò–ù–ê–õ —Å–æ–¥–µ—Ä–∂–∏—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–ª–∞—Å—Å—ã: {', '.join(class_comp['original_only'])}")
    
    # –ê–Ω–∞–ª–∏–∑ —Ñ—É–Ω–∫—Ü–∏–π
    if func_comp['backup_only']:
        recommendations.append(f"‚ö° BACKUP —Å–æ–¥–µ—Ä–∂–∏—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: {', '.join(func_comp['backup_only'][:5])}{'...' if len(func_comp['backup_only']) > 5 else ''}")
    if func_comp['original_only']:
        recommendations.append(f"‚ö° –û–†–ò–ì–ò–ù–ê–õ —Å–æ–¥–µ—Ä–∂–∏—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: {', '.join(func_comp['original_only'][:5])}{'...' if len(func_comp['original_only']) > 5 else ''}")
    
    # –ê–Ω–∞–ª–∏–∑ –∏–º–ø–æ—Ä—Ç–æ–≤
    if import_comp['backup_only']:
        recommendations.append(f"üì¶ BACKUP –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã: {', '.join(import_comp['backup_only'][:3])}{'...' if len(import_comp['backup_only']) > 3 else ''}")
    if import_comp['original_only']:
        recommendations.append(f"üì¶ –û–†–ò–ì–ò–ù–ê–õ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã: {', '.join(import_comp['original_only'][:3])}{'...' if len(import_comp['original_only']) > 3 else ''}")
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–∞
    size_diff = size_comp['backup_size'] - size_comp['original_size']
    if abs(size_diff) > 1000:  # –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ –≤ —Ä–∞–∑–º–µ—Ä–µ
        if size_diff > 0:
            recommendations.append(f"üìà BACKUP –±–æ–ª—å—à–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ –Ω–∞ {size_diff:,} –±–∞–π—Ç")
        else:
            recommendations.append(f"üìâ BACKUP –º–µ–Ω—å—à–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ –Ω–∞ {abs(size_diff):,} –±–∞–π—Ç")
    
    # –û–±—â–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
    if diff_ratio < 5:
        recommendations.append("‚úÖ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –§–∞–π–ª—ã –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –∏–¥–µ–Ω—Ç–∏—á–Ω—ã - –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å backup")
    elif diff_ratio < 20:
        recommendations.append("‚ö†Ô∏è –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –§–∞–π–ª—ã –∏–º–µ—é—Ç –Ω–µ–±–æ–ª—å—à–∏–µ —Ä–∞–∑–ª–∏—á–∏—è - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω–æ")
    elif diff_ratio < 50:
        recommendations.append("üîÑ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –§–∞–π–ª—ã –∏–º–µ—é—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–∑–ª–∏—á–∏—è - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±–∞")
    else:
        recommendations.append("üö® –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –§–∞–π–ª—ã –∫–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–æ —Ä–∞–∑–Ω—ã–µ - –ù–ï –£–î–ê–õ–Ø–¢–¨ backup")
    
    return recommendations

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞"""
    print("üîç –ê–ù–ê–õ–ò–ó –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–ò BACKUP –§–ê–ô–õ–û–í vs –û–†–ò–ì–ò–ù–ê–õ–´")
    print("=" * 80)
    
    # –ü—É—Ç–∏
    backup_dir = Path('/Users/sergejhlystov/ALADDIN_NEW/security/formatting_work/backup_files')
    base_dir = Path('/Users/sergejhlystov/ALADDIN_NEW')
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ backup —Ñ–∞–π–ª—ã
    backup_files = []
    for file in backup_dir.glob('*.py'):
        if file.is_file():
            backup_files.append(file)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É
    backup_files.sort(key=lambda x: x.stat().st_size, reverse=True)
    
    results = []
    
    for i, backup_file in enumerate(backup_files, 1):
        print(f"\nüìÅ [{i}/{len(backup_files)}] –ê–Ω–∞–ª–∏–∑: {backup_file.name}")
        
        # –û—á–∏—â–∞–µ–º –∏–º—è –æ—Ç backup —Å—É—Ñ—Ñ–∏–∫—Å–æ–≤
        original_name = backup_file.name
        for suffix in [
            '_original_backup_20250103',
            '.backup_20250909_212030',
            '.backup_20250909_212748', 
            '.backup_20250909_213215',
            '.backup_20250928_003043',
            '.backup_20250928_002228',
            '.backup_20250927_231340',
            '.backup_20250927_231341',
            '.backup_20250927_231342',
            '.backup_20250927_232629',
            '.backup_20250927_233351',
            '.backup_20250927_234000',
            '.backup_20250927_234616',
            '.backup_20250928_000215',
            '.backup_20250928_003940',
            '.backup_20250928_005946',
            '_before_formatting',
            '.backup_20250926_132307',
            '.backup_20250926_132405',
            '.backup_20250926_133258',
            '.backup_20250926_133317',
            '.backup_20250926_133733',
            '.backup_20250926_133852',
            '.backup_20250927_031442',
            '.backup_011225',
            '_BACKUP',
            '_backup',
            '.backup'
        ]:
            original_name = original_name.replace(suffix, '')
        
        # –ò—â–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
        original_path = None
        for root, dirs, files in os.walk(base_dir / 'security'):
            for file in files:
                if file == original_name:
                    original_path = Path(root) / file
                    break
            if original_path:
                break
        
        if not original_path:
            print(f"  ‚ùå –û—Ä–∏–≥–∏–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {original_name}")
            continue
        
        print(f"  üîç –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å: {original_path.name}")
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã
        comparison = compare_files(backup_file, original_path)
        
        if 'error' in comparison:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {comparison['error']}")
            continue
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = generate_recommendation(comparison, backup_file.name, original_path.name)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = {
            'backup_file': str(backup_file),
            'original_file': str(original_path),
            'backup_name': backup_file.name,
            'original_name': original_path.name,
            'comparison': comparison,
            'recommendations': recommendations
        }
        results.append(result)
        
        # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print(f"  üìä –†–∞–∑–º–µ—Ä: backup {comparison['size_comparison']['backup_size']:,} vs original {comparison['size_comparison']['original_size']:,}")
        print(f"  üìà –†–∞–∑–ª–∏—á–∏—è: {comparison['diff_ratio']:.1f}%")
        print(f"  üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {recommendations[-1] if recommendations else '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    report_file = backup_dir / f"FUNCTIONALITY_ANALYSIS_REPORT_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
    with open(report_file, 'w', encoding='utf-8') as f:
        json.dump(results, f, ensure_ascii=False, indent=2, default=str)
    
    print(f"\nüìã –î–ï–¢–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –°–û–•–†–ê–ù–ï–ù: {report_file}")
    print(f"üìä –ü–†–û–ê–ù–ê–õ–ò–ó–ò–†–û–í–ê–ù–û –§–ê–ô–õ–û–í: {len(results)}")
    
    return results

if __name__ == "__main__":
    main()