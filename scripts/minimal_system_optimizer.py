#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ú–ò–ù–ò–ú–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê ALADDIN - –û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã
–û—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ 8 –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—è—Ç –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º

–ê–≤—Ç–æ—Ä: ALADDIN Security Team
–í–µ—Ä—Å–∏—è: 1.0
–î–∞—Ç–∞: 2025-01-13
"""

import json
import sys
import os
from typing import Dict, List, Any
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from security.safe_function_manager import SafeFunctionManager, FunctionStatus

class MinimalSystemOptimizer:
    """–û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self):
        self.sfm = SafeFunctionManager()
        
        # –ú–ò–ù–ò–ú–ê–õ–¨–ù–û –ù–ï–û–ë–•–û–î–ò–ú–´–ï –§–£–ù–ö–¶–ò–ò - –¢–û–õ–¨–ö–û –û–°–ù–û–í–ê –°–ò–°–¢–ï–ú–´
        self.minimal_functions = [
            'security_safefunctionmanager',  # –ú–µ–Ω–µ–¥–∂–µ—Ä —Ñ—É–Ω–∫—Ü–∏–π - –û–°–ù–û–í–ê
            'security_base',                 # –ë–∞–∑–æ–≤–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å - –û–°–ù–û–í–ê
            'core_base',                     # –ë–∞–∑–æ–≤—ã–π –º–æ–¥—É–ª—å - –û–°–ù–û–í–ê
            'security_securityalert',        # –û–ø–æ–≤–µ—â–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ - –ö–†–ò–¢–ò–ß–ù–û
            'security_securityfunction',     # –§—É–Ω–∫—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ - –ö–†–ò–¢–ò–ß–ù–û
            'database',                      # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö - –ö–†–ò–¢–ò–ß–ù–û
            'authentication',                # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è - –ö–†–ò–¢–ò–ß–ù–û
            'security_authentication',       # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ - –ö–†–ò–¢–ò–ß–ù–û
        ]
        
    def analyze_system(self) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã"""
        print("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã...")
        
        all_functions = list(self.sfm.functions.values())
        active_functions = [f for f in all_functions if f.status == FunctionStatus.ENABLED]
        sleeping_functions = [f for f in all_functions if f.status == FunctionStatus.SLEEPING]
        
        return {
            'total_functions': len(all_functions),
            'active_functions': len(active_functions),
            'sleeping_functions': len(sleeping_functions),
            'minimal_functions': len(self.minimal_functions)
        }
    
    def get_sleep_candidates(self) -> List[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º"""
        print("üìã –û–ø—Ä–µ–¥–µ–ª—è—é —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º...")
        
        sleep_candidates = []
        for func_id, func_data in self.sfm.functions.items():
            if func_id not in self.minimal_functions:
                sleep_candidates.append(func_id)
        
        return sleep_candidates
    
    def safe_put_to_sleep(self, function_ids: List[str]) -> Dict[str, Any]:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º"""
        print(f"üåô –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–µ—Ä–µ–≤–æ–∂—É {len(function_ids)} —Ñ—É–Ω–∫—Ü–∏–π –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º...")
        
        results = {
            'successful': [],
            'failed': [],
            'already_sleeping': [],
            'minimal_protected': []
        }
        
        for function_id in function_ids:
            try:
                # –ó–∞—â–∏—Ç–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
                if function_id in self.minimal_functions:
                    results['minimal_protected'].append(function_id)
                    continue
                
                function = self.sfm.functions.get(function_id)
                if not function:
                    results['failed'].append(f"{function_id}: —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    continue
                
                if function.status == FunctionStatus.SLEEPING:
                    results['already_sleeping'].append(function_id)
                    continue
                
                # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º
                success = self.sfm.sleep_function(function_id)
                
                if success:
                    results['successful'].append(function_id)
                    print(f"  ‚úÖ {function_id} -> —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º")
                else:
                    results['failed'].append(f"{function_id}: –æ—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞")
                    
            except Exception as e:
                results['failed'].append(f"{function_id}: {str(e)}")
        
        return results
    
    def ensure_minimal_active(self) -> Dict[str, Any]:
        """–£–±–µ–∂–¥–∞–µ—Ç—Å—è, —á—Ç–æ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã"""
        print("üü¢ –ü—Ä–æ–≤–µ—Ä—è—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π...")
        
        results = {
            'activated': [],
            'already_active': [],
            'failed': []
        }
        
        for function_id in self.minimal_functions:
            try:
                function = self.sfm.functions.get(function_id)
                if not function:
                    results['failed'].append(f"{function_id}: —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    continue
                
                if function.status == FunctionStatus.ENABLED:
                    results['already_active'].append(function_id)
                else:
                    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é
                    success = self.sfm.enable_function(function_id)
                    if success:
                        results['activated'].append(function_id)
                        print(f"  ‚úÖ {function_id} -> –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
                    else:
                        results['failed'].append(f"{function_id}: –æ—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏")
                        
            except Exception as e:
                results['failed'].append(f"{function_id}: {str(e)}")
        
        return results
    
    def generate_minimal_report(self) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ"""
        print("üìä –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç—á–µ—Ç –æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ...")
        
        all_functions = list(self.sfm.functions.values())
        active_functions = [f for f in all_functions if f.status == FunctionStatus.ENABLED]
        sleeping_functions = [f for f in all_functions if f.status == FunctionStatus.SLEEPING]
        
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
        minimal_active = [f for f in active_functions if f.function_id in self.minimal_functions]
        other_active = [f for f in active_functions if f.function_id not in self.minimal_functions]
        
        return {
            'total_functions': len(all_functions),
            'active_functions': len(active_functions),
            'sleeping_functions': len(sleeping_functions),
            'minimal_active': len(minimal_active),
            'other_active': len(other_active),
            'minimal_percentage': (len(minimal_active) / len(all_functions)) * 100,
            'sleeping_percentage': (len(sleeping_functions) / len(all_functions)) * 100,
            'resource_savings': ((len(all_functions) - len(minimal_active)) / len(all_functions)) * 100
        }
    
    def optimize_to_minimal(self) -> bool:
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∫ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ"""
        print("üéØ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ö –ú–ò–ù–ò–ú–ê–õ–¨–ù–û–ô –°–ò–°–¢–ï–ú–ï")
        print("=" * 60)
        
        try:
            # 1. –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            analysis = self.analyze_system()
            print(f"üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:")
            print(f"  üìÑ –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π: {analysis['total_functions']}")
            print(f"  üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {analysis['active_functions']}")
            print(f"  üò¥ –°–ø—è—â–∏—Ö: {analysis['sleeping_functions']}")
            print(f"  üéØ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö: {analysis['minimal_functions']}")
            
            # 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è —Å–ø—è—â–µ–≥–æ —Ä–µ–∂–∏–º–∞
            sleep_candidates = self.get_sleep_candidates()
            print(f"\\nüò¥ –ö–∞–Ω–¥–∏–¥–∞—Ç—ã –¥–ª—è —Å–ø—è—â–µ–≥–æ —Ä–µ–∂–∏–º–∞: {len(sleep_candidates)}")
            
            # 3. –ê–∫—Ç–∏–≤–∞—Ü–∏—è –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
            print(f"\\nüü¢ –ê–∫—Ç–∏–≤–∏—Ä—É—é –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏...")
            minimal_results = self.ensure_minimal_active()
            print(f"  ‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ: {len(minimal_results['activated'])}")
            print(f"  üü¢ –£–∂–µ –∞–∫—Ç–∏–≤–Ω—ã: {len(minimal_results['already_active'])}")
            print(f"  ‚ùå –û—à–∏–±–∫–∏: {len(minimal_results['failed'])}")
            
            # 4. –ü–µ—Ä–µ–≤–æ–¥ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º
            if sleep_candidates:
                print(f"\\nüåô –ü–µ—Ä–µ–≤–æ–∂—É –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º...")
                sleep_results = self.safe_put_to_sleep(sleep_candidates)
                
                print(f"  ‚úÖ –£—Å–ø–µ—à–Ω–æ: {len(sleep_results['successful'])}")
                print(f"  ‚ùå –û—à–∏–±–∫–∏: {len(sleep_results['failed'])}")
                print(f"  üò¥ –£–∂–µ —Å–ø—è—â–∏–µ: {len(sleep_results['already_sleeping'])}")
                print(f"  üõ°Ô∏è –ó–∞—â–∏—â–µ–Ω—ã: {len(sleep_results['minimal_protected'])}")
            
            # 5. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
            report = self.generate_minimal_report()
            
            print(f"\\nüìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ú–ò–ù–ò–ú–ê–õ–¨–ù–û–ô –°–ò–°–¢–ï–ú–´:")
            print(f"  üìÑ –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π: {report['total_functions']}")
            print(f"  üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {report['active_functions']} ({report['minimal_percentage']:.1f}%)")
            print(f"  üò¥ –°–ø—è—â–∏—Ö: {report['sleeping_functions']} ({report['sleeping_percentage']:.1f}%)")
            print(f"  üéØ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö: {report['minimal_active']}")
            print(f"  üìä –≠–∫–æ–Ω–æ–º–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤: {report['resource_savings']:.1f}%")
            
            # 6. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
            with open('minimal_system_report.json', 'w', encoding='utf-8') as f:
                json.dump({
                    'analysis': analysis,
                    'minimal_results': minimal_results,
                    'sleep_results': sleep_results if 'sleep_results' in locals() else {},
                    'final_report': report,
                    'timestamp': str(datetime.now())
                }, f, indent=2, ensure_ascii=False)
            
            print(f"\\nüíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: minimal_system_report.json")
            print(f"\\nüéâ –ú–ò–ù–ò–ú–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ù–ê–°–¢–†–û–ï–ù–ê!")
            print(f"\\nüí° –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê:")
            print(f"  ‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤")
            print(f"  ‚úÖ –ë—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
            print(f"  ‚úÖ –õ–µ–≥–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π")
            print(f"  ‚úÖ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é")
            print(f"  ‚úÖ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
            
            return True
            
        except Exception as e:
            print(f"\\n‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}")
            return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üéØ ALADDIN Security System - –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞")
    print("=" * 80)
    
    try:
        optimizer = MinimalSystemOptimizer()
        success = optimizer.optimize_to_minimal()
        
        if success:
            print("\\n‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            print("üîß –î–ª—è –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: python3 wake_up_systems.py")
            print("üìä –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞: python3 scripts/sfm_complete_statistics.py")
        else:
            print("\\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã!")
            return 1
            
    except KeyboardInterrupt:
        print("\\n‚ö†Ô∏è –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return 1
    except Exception as e:
        print(f"\\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    exit(main())