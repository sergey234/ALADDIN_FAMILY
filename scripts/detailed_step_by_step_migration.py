#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–î–ï–¢–ê–õ–¨–ù–´–ô –ü–û–®–ê–ì–û–í–´–ô –ü–õ–ê–ù –ú–ò–ì–†–ê–¶–ò–ò
–°—Ç—Ä–æ–≥–æ –ø–æ 1 —Ñ–∞–π–ª—É –∑–∞ —Ä–∞–∑ —Å –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞
"""

import os
import shutil
import subprocess
from datetime import datetime

def create_backup(file_path, backup_dir="migration_backups"):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ —Ñ–∞–π–ª–∞"""
    if not os.path.exists(backup_dir):
        os.makedirs(backup_dir)
    
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    backup_name = f"{os.path.basename(file_path)}_{timestamp}.backup"
    backup_path = os.path.join(backup_dir, backup_name)
    
    shutil.copy2(file_path, backup_path)
    return backup_path

def check_file_exists(file_path):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞"""
    if os.path.exists(file_path):
        print(f"‚úÖ –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {file_path}")
        return True
    else:
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        return False

def check_syntax(file_path):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ —Ñ–∞–π–ª–∞"""
    result = subprocess.run(f"python3 -m py_compile {file_path}", 
                          shell=True, capture_output=True, text=True)
    if result.returncode == 0:
        print(f"‚úÖ –°–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: {file_path}")
        return True
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞: {result.stderr}")
        return False

def check_imports(file_path):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ —Ñ–∞–π–ª–∞"""
    module_name = os.path.basename(file_path)[:-3]  # —É–±–∏—Ä–∞–µ–º .py
    result = subprocess.run(f"python3 -c \"import {module_name}\"", 
                          shell=True, capture_output=True, text=True)
    if result.returncode == 0:
        print(f"‚úÖ –ò–º–ø–æ—Ä—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç: {module_name}")
        return True
    else:
        print(f"‚ö†Ô∏è  –ò–º–ø–æ—Ä—Ç—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç: {result.stderr}")
        return False

def move_file_safely(source_path, target_path, backup_path):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –æ—Ç–∫–∞—Ç–æ–º –ø—Ä–∏ –æ—à–∏–±–∫–µ"""
    try:
        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª
        shutil.move(source_path, target_path)
        print(f"‚úÖ –§–∞–π–ª –ø–µ—Ä–µ–º–µ—â–µ–Ω: {source_path} ‚Üí {target_path}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –Ω–∞ –Ω–æ–≤–æ–º –º–µ—Å—Ç–µ
        if not check_syntax(target_path):
            # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º—Å—è –ø—Ä–∏ –æ—à–∏–±–∫–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
            shutil.copy2(backup_path, source_path)
            os.remove(target_path)
            print(f"üîÑ –û—Ç–∫–∞—Ç: —Ñ–∞–π–ª –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è: {e}")
        # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º—Å—è –ø—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ
        if os.path.exists(backup_path):
            shutil.copy2(backup_path, source_path)
            print(f"üîÑ –û—Ç–∫–∞—Ç: —Ñ–∞–π–ª –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏")
        return False

def execute_file_migration(file_info, step_number):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π"""
    print(f"\n{'='*80}")
    print(f"üöÄ –®–ê–ì {step_number}: –ú–ò–ì–†–ê–¶–ò–Ø {file_info['file']}")
    print(f"{'='*80}")
    
    source_path = os.path.join(file_info['from'], file_info['file'])
    target_path = os.path.join(file_info['to'], file_info['file'])
    
    print(f"üìç –û—Ç–∫—É–¥–∞: {source_path}")
    print(f"üìç –ö—É–¥–∞: {target_path}")
    print(f"üí° –ü—Ä–∏—á–∏–Ω–∞: {file_info['reason']}")
    
    # –®–ê–ì 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    print(f"\nüìã –®–ê–ì 1: –ü–†–û–í–ï–†–ö–ê –ò–°–•–û–î–ù–û–ì–û –§–ê–ô–õ–ê")
    print("-" * 50)
    if not check_file_exists(source_path):
        return False
    
    # –®–ê–ì 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    print(f"\nüìã –®–ê–ì 2: –ü–†–û–í–ï–†–ö–ê –°–ò–ù–¢–ê–ö–°–ò–°–ê –ò–°–•–û–î–ù–û–ì–û –§–ê–ô–õ–ê")
    print("-" * 50)
    if not check_syntax(source_path):
        return False
    
    # –®–ê–ì 3: –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
    print(f"\nüìã –®–ê–ì 3: –°–û–ó–î–ê–ù–ò–ï –†–ï–ó–ï–†–í–ù–û–ô –ö–û–ü–ò–ò")
    print("-" * 50)
    backup_path = create_backup(source_path)
    print(f"üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")
    
    # –®–ê–ì 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–µ–≤–æ–π –ø–∞–ø–∫–∏
    print(f"\nüìã –®–ê–ì 4: –ü–†–û–í–ï–†–ö–ê –¶–ï–õ–ï–í–û–ô –ü–ê–ü–ö–ò")
    print("-" * 50)
    target_dir = os.path.dirname(target_path)
    if not os.path.exists(target_dir):
        os.makedirs(target_dir)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: {target_dir}")
    else:
        print(f"‚úÖ –ü–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {target_dir}")
    
    # –®–ê–ì 5: –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    print(f"\nüìã –®–ê–ì 5: –ü–ï–†–ï–ú–ï–©–ï–ù–ò–ï –§–ê–ô–õ–ê")
    print("-" * 50)
    if not move_file_safely(source_path, target_path, backup_path):
        return False
    
    # –®–ê–ì 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ –Ω–∞ –Ω–æ–≤–æ–º –º–µ—Å—Ç–µ
    print(f"\nüìã –®–ê–ì 6: –ü–†–û–í–ï–†–ö–ê –§–ê–ô–õ–ê –ù–ê –ù–û–í–û–ú –ú–ï–°–¢–ï")
    print("-" * 50)
    if not check_file_exists(target_path):
        return False
    
    # –®–ê–ì 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –Ω–∞ –Ω–æ–≤–æ–º –º–µ—Å—Ç–µ
    print(f"\nüìã –®–ê–ì 7: –ü–†–û–í–ï–†–ö–ê –°–ò–ù–¢–ê–ö–°–ò–°–ê –ù–ê –ù–û–í–û–ú –ú–ï–°–¢–ï")
    print("-" * 50)
    if not check_syntax(target_path):
        return False
    
    # –®–ê–ì 8: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤
    print(f"\nüìã –®–ê–ì 8: –ü–†–û–í–ï–†–ö–ê –ò–ú–ü–û–†–¢–û–í")
    print("-" * 50)
    check_imports(target_path)  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –µ—Å–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
    
    # –®–ê–ì 9: –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    print(f"\nüìã –®–ê–ì 9: –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê")
    print("-" * 50)
    if os.path.exists(target_path) and not os.path.exists(source_path):
        print("‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω –∏ —É–¥–∞–ª–µ–Ω –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞")
        print(f"üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {backup_path}")
        return True
    else:
        print("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ü–µ–ª–µ–≤–æ–º –º–µ—Å—Ç–µ –∏–ª–∏ –æ—Å—Ç–∞–ª—Å—è –≤ –∏—Å—Ö–æ–¥–Ω–æ–º")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏"""
    print("üöÄ –î–ï–¢–ê–õ–¨–ù–´–ô –ü–û–®–ê–ì–û–í–´–ô –ü–õ–ê–ù –ú–ò–ì–†–ê–¶–ò–ò")
    print("=" * 80)
    print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ú–∏–≥—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –°–¢–†–û–ì–û –ü–û 1 –§–ê–ô–õ–£ –ó–ê –†–ê–ó!")
    print("‚ö†Ô∏è  –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞ - –ø–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø–∞—É–∑–∞!")
    print("‚ö†Ô∏è  –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–∫–∞—Ç!")
    
    # –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
    files_to_move = [
        {
            'file': 'emergency_formatters.py',
            'from': 'security/ai_agents/',
            'to': 'security/microservices/',
            'reason': '–ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö'
        },
        {
            'file': 'emergency_base_models.py',
            'from': 'security/ai_agents/',
            'to': 'security/microservices/',
            'reason': '–ë–∞–∑–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤'
        },
        {
            'file': 'emergency_base_models_refactored.py',
            'from': 'security/ai_agents/',
            'to': 'security/microservices/',
            'reason': '–†–µ—Ñ–∞–∫—Ç–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–∞–∑–æ–≤—ã–µ –º–æ–¥–µ–ª–∏'
        },
        {
            'file': 'emergency_service.py',
            'from': 'security/ai_agents/',
            'to': 'security/managers/',
            'reason': '–ú–µ–Ω–µ–¥–∂–µ—Ä —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤'
        },
        {
            'file': 'emergency_service_caller.py',
            'from': 'security/ai_agents/',
            'to': 'security/microservices/',
            'reason': '–ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å –≤—ã–∑–æ–≤–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤'
        },
        {
            'file': 'messenger_integration.py',
            'from': 'security/ai_agents/',
            'to': 'security/bots/',
            'reason': '–ë–æ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞–º–∏'
        }
    ]
    
    print(f"\nüìã –ü–õ–ê–ù –ú–ò–ì–†–ê–¶–ò–ò:")
    print("-" * 50)
    for i, file_info in enumerate(files_to_move, 1):
        print(f"{i}. {file_info['file']}")
        print(f"   {file_info['from']} ‚Üí {file_info['to']}")
        print(f"   {file_info['reason']}")
        print()
    
    input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –Ω–∞—á–∞–ª–∞ –º–∏–≥—Ä–∞—Ü–∏–∏...")
    
    success_count = 0
    total_files = len(files_to_move)
    
    for i, file_info in enumerate(files_to_move, 1):
        success = execute_file_migration(file_info, i)
        
        if success:
            success_count += 1
            print(f"\nüéâ –®–ê–ì {i} –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
        else:
            print(f"\n‚ùå –®–ê–ì {i} –ó–ê–í–ï–†–®–ï–ù –° –û–®–ò–ë–ö–û–ô!")
            print("üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω –æ—Ç–∫–∞—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é")
        
        if i < total_files:
            input(f"\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ñ–∞–π–ª—É...")
    
    print(f"\nüéØ –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print("=" * 50)
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–æ: {success_count}/{total_files} —Ñ–∞–π–ª–æ–≤")
    
    if success_count == total_files:
        print("üéâ –í–°–ï –§–ê–ô–õ–´ –£–°–ü–ï–®–ù–û –ü–ï–†–ï–ú–ï–©–ï–ù–´!")
        print("‚úÖ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å–∏—Å—Ç–µ–º—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞!")
    else:
        print("‚ö†Ô∏è  –ù–ï–ö–û–¢–û–†–´–ï –§–ê–ô–õ–´ –ù–ï –£–î–ê–õ–û–°–¨ –ü–ï–†–ï–ú–ï–°–¢–ò–¢–¨")
        print("üìÅ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –≤ –ø–∞–ø–∫–µ migration_backups/")

if __name__ == "__main__":
    main()