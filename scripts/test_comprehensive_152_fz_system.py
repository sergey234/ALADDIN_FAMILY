#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–û–ú–ü–õ–ï–ö–°–ù–û–ô –°–ò–°–¢–ï–ú–´ –°–û–û–¢–í–ï–¢–°–¢–í–ò–Ø 152-–§–ó
–ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è 152-–§–ó
"""

import asyncio
import json
import sys
from datetime import datetime
from pathlib import Path

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent.parent))

from security.comprehensive_anonymous_family_system import (
    ComprehensiveAnonymousFamilySystem,
    FamilyRole,
    AgeGroup,
    DeviceType,
    ThreatLevel
)
from security.152_fz_compliance_monitor import ComplianceMonitor
from scripts.auto_fix_152_fz_violations import AutoFix152FZViolations


class Comprehensive152FZSystemTester:
    """–¢–µ—Å—Ç–µ—Ä –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è 152-–§–ó"""
    
    def __init__(self):
        self.test_results = []
        self.family_system = ComprehensiveAnonymousFamilySystem()
        self.compliance_monitor = ComplianceMonitor()
        self.auto_fix = AutoFix152FZViolations()
    
    async def run_comprehensive_test(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("üß™ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –°–û–û–¢–í–ï–¢–°–¢–í–ò–Ø 152-–§–ó")
        print("=" * 70)
        
        test_results = {
            "test_id": f"comprehensive_test_{datetime.now().strftime('%Y%m%d_%H%M%S')}",
            "started_at": datetime.now().isoformat(),
            "tests": {},
            "overall_status": "running"
        }
        
        try:
            # –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö —Å–µ–º–µ–π–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π
            print("\n1Ô∏è‚É£ –¢–ï–°–¢: –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö —Å–µ–º–µ–π–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π")
            family_test = await self._test_family_profiles()
            test_results["tests"]["family_profiles"] = family_test
            
            # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è 152-–§–ó
            print("\n2Ô∏è‚É£ –¢–ï–°–¢: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è 152-–§–ó")
            compliance_test = await self._test_compliance_monitoring()
            test_results["tests"]["compliance_monitoring"] = compliance_test
            
            # –¢–µ—Å—Ç 3: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏–π
            print("\n3Ô∏è‚É£ –¢–ï–°–¢: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏–π")
            auto_fix_test = await self._test_auto_fix()
            test_results["tests"]["auto_fix"] = auto_fix_test
            
            # –¢–µ—Å—Ç 4: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            print("\n4Ô∏è‚É£ –¢–ï–°–¢: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
            integration_test = await self._test_integration()
            test_results["tests"]["integration"] = integration_test
            
            # –¢–µ—Å—Ç 5: –ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            print("\n5Ô∏è‚É£ –¢–ï–°–¢: –ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
            load_test = await self._test_load()
            test_results["tests"]["load_testing"] = load_test
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
            all_tests_passed = all(
                test.get("status") == "passed" 
                for test in test_results["tests"].values()
            )
            
            test_results["overall_status"] = "passed" if all_tests_passed else "failed"
            test_results["completed_at"] = datetime.now().isoformat()
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
            self._generate_test_report(test_results)
            
            return test_results
            
        except Exception as e:
            test_results["overall_status"] = "error"
            test_results["error"] = str(e)
            test_results["completed_at"] = datetime.now().isoformat()
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return test_results
    
    async def _test_family_profiles(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö —Å–µ–º–µ–π–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π"""
        try:
            print("  üìù –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–º–µ–π–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è...")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–º–µ–π–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
            family = self.family_system.create_family_profile()
            if "error" in family:
                return {"status": "failed", "error": family["error"]}
            
            print(f"  ‚úÖ –°–µ–º—å—è —Å–æ–∑–¥–∞–Ω–∞: {family['family_id']}")
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–ª–µ–Ω–æ–≤ —Å–µ–º—å–∏
            print("  üë• –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–ª–µ–Ω–æ–≤ —Å–µ–º—å–∏...")
            
            parent = self.family_system.add_family_member(
                family["family_id"],
                FamilyRole.PARENT,
                AgeGroup.ADULT
            )
            if "error" in parent:
                return {"status": "failed", "error": parent["error"]}
            
            child = self.family_system.add_family_member(
                family["family_id"],
                FamilyRole.CHILD,
                AgeGroup.TEEN
            )
            if "error" in child:
                return {"status": "failed", "error": child["error"]}
            
            elderly = self.family_system.add_family_member(
                family["family_id"],
                FamilyRole.ELDERLY,
                AgeGroup.ELDERLY
            )
            if "error" in elderly:
                return {"status": "failed", "error": elderly["error"]}
            
            print(f"  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —á–ª–µ–Ω–æ–≤ —Å–µ–º—å–∏: 3")
            
            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            print("  üì± –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤...")
            
            smartphone = self.family_system.register_device(
                family["family_id"],
                DeviceType.SMARTPHONE,
                "iOS",
                parent["member_id"]
            )
            if "error" in smartphone:
                return {"status": "failed", "error": smartphone["error"]}
            
            tablet = self.family_system.register_device(
                family["family_id"],
                DeviceType.TABLET,
                "Android",
                child["member_id"]
            )
            if "error" in tablet:
                return {"status": "failed", "error": tablet["error"]}
            
            print(f"  ‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: 2")
            
            # –ó–∞–ø–∏—Å—å —Å–æ–±—ã—Ç–∏–π —É–≥—Ä–æ–∑
            print("  üö® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π —É–≥—Ä–æ–∑...")
            
            threat1 = self.family_system.record_threat_event(
                family["family_id"],
                "phishing",
                ThreatLevel.HIGH,
                parent["member_id"],
                smartphone["device_id"]
            )
            if "error" in threat1:
                return {"status": "failed", "error": threat1["error"]}
            
            threat2 = self.family_system.record_threat_event(
                family["family_id"],
                "malware",
                ThreatLevel.CRITICAL,
                child["member_id"],
                tablet["device_id"]
            )
            if "error" in threat2:
                return {"status": "failed", "error": threat2["error"]}
            
            print(f"  ‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ —Å–æ–±—ã—Ç–∏–π —É–≥—Ä–æ–∑: 2")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
            print("  üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...")
            
            analytics = self.family_system.get_family_analytics(family["family_id"])
            if "error" in analytics:
                return {"status": "failed", "error": analytics["error"]}
            
            print(f"  ‚úÖ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞: {analytics['general_statistics']['security_score']}% –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
            
            return {
                "status": "passed",
                "family_id": family["family_id"],
                "members_count": 3,
                "devices_count": 2,
                "threats_count": 2,
                "security_score": analytics["general_statistics"]["security_score"],
                "compliance_status": analytics["compliance_status"]
            }
            
        except Exception as e:
            return {"status": "failed", "error": str(e)}
    
    async def _test_compliance_monitoring(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è"""
        try:
            print("  üîç –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è...")
            
            # –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
            check_result = self.compliance_monitor.run_compliance_check()
            
            print(f"  üìä –°—Ç–∞—Ç—É—Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è: {check_result['overall_status']}")
            print(f"  üìà –ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è: {self.compliance_monitor.metrics.compliance_percentage}%")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
            metrics = self.compliance_monitor.get_compliance_metrics()
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ –Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö
            violations_report = self.compliance_monitor.get_violations_report()
            
            print(f"  ‚ö†Ô∏è –ù–∞—Ä—É—à–µ–Ω–∏–π –Ω–∞–π–¥–µ–Ω–æ: {violations_report['total_violations']}")
            print(f"  üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞—Ä—É—à–µ–Ω–∏–π: {violations_report['critical_violations']}")
            
            return {
                "status": "passed",
                "compliance_status": check_result['overall_status'],
                "compliance_percentage": self.compliance_monitor.metrics.compliance_percentage,
                "total_violations": violations_report['total_violations'],
                "critical_violations": violations_report['critical_violations'],
                "rules_checked": len(check_result.get('rules_checked', [])),
                "metrics": metrics
            }
            
        except Exception as e:
            return {"status": "failed", "error": str(e)}
    
    async def _test_auto_fix(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        try:
            print("  üîß –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è...")
            
            # –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            fix_result = self.auto_fix.run_compliance_check_and_fix()
            
            if "error" in fix_result:
                return {"status": "failed", "error": fix_result["error"]}
            
            print(f"  üìä –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: {fix_result['initial_compliance']:.1f}%")
            print(f"  üìà –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: {fix_result['final_compliance']:.1f}%")
            print(f"  üìà –£–ª—É—á—à–µ–Ω–∏–µ: {fix_result['improvement']:.1f}%")
            print(f"  üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ø—Ä–∏–º–µ–Ω–µ–Ω–æ: {len(fix_result['fixes_applied'])}")
            
            return {
                "status": "passed",
                "initial_compliance": fix_result['initial_compliance'],
                "final_compliance": fix_result['final_compliance'],
                "improvement": fix_result['improvement'],
                "fixes_applied": len(fix_result['fixes_applied']),
                "errors_encountered": len(fix_result['errors_encountered'])
            }
            
        except Exception as e:
            return {"status": "failed", "error": str(e)}
    
    async def _test_integration(self) -> Dict[str, Any]:
        """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        try:
            print("  üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–º–µ–π–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
            family = self.family_system.create_family_profile()
            if "error" in family:
                return {"status": "failed", "error": family["error"]}
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            parent = self.family_system.add_family_member(
                family["family_id"],
                FamilyRole.PARENT,
                AgeGroup.ADULT
            )
            
            smartphone = self.family_system.register_device(
                family["family_id"],
                DeviceType.SMARTPHONE,
                "iOS",
                parent["member_id"]
            )
            
            # –ó–∞–ø–∏—Å—å —É–≥—Ä–æ–∑—ã
            threat = self.family_system.record_threat_event(
                family["family_id"],
                "phishing",
                ThreatLevel.HIGH,
                parent["member_id"],
                smartphone["device_id"]
            )
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
            check_result = self.compliance_monitor.run_compliance_check()
            
            print(f"  ‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print(f"  üìä –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ—Å–ª–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {self.compliance_monitor.metrics.compliance_percentage}%")
            
            return {
                "status": "passed",
                "integration_components": 4,  # family, member, device, threat
                "compliance_after_integration": self.compliance_monitor.metrics.compliance_percentage,
                "all_components_working": True
            }
            
        except Exception as e:
            return {"status": "failed", "error": str(e)}
    
    async def _test_load(self) -> Dict[str, Any]:
        """–ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        try:
            print("  ‚ö° –ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —Å–µ–º–µ–π–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π
            families_created = 0
            members_added = 0
            devices_registered = 0
            threats_recorded = 0
            
            for i in range(10):  # –°–æ–∑–¥–∞–µ–º 10 —Å–µ–º–µ–π
                try:
                    family = self.family_system.create_family_profile()
                    if "error" not in family:
                        families_created += 1
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º —á–ª–µ–Ω–æ–≤ —Å–µ–º—å–∏
                        for role in [FamilyRole.PARENT, FamilyRole.CHILD]:
                            member = self.family_system.add_family_member(
                                family["family_id"],
                                role,
                                AgeGroup.ADULT if role == FamilyRole.PARENT else AgeGroup.TEEN
                            )
                            if "error" not in member:
                                members_added += 1
                                
                                # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
                                device = self.family_system.register_device(
                                    family["family_id"],
                                    DeviceType.SMARTPHONE,
                                    "iOS",
                                    member["member_id"]
                                )
                                if "error" not in device:
                                    devices_registered += 1
                                    
                                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —É–≥—Ä–æ–∑—É
                                    threat = self.family_system.record_threat_event(
                                        family["family_id"],
                                        "test_threat",
                                        ThreatLevel.MEDIUM,
                                        member["member_id"],
                                        device["device_id"]
                                    )
                                    if "error" not in threat:
                                        threats_recorded += 1
                
                except Exception as e:
                    print(f"    ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ–º—å–∏ {i}: {e}")
                    continue
            
            print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω–æ —Å–µ–º–µ–π: {families_created}")
            print(f"  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —á–ª–µ–Ω–æ–≤: {members_added}")
            print(f"  ‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {devices_registered}")
            print(f"  ‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ —É–≥—Ä–æ–∑: {threats_recorded}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ –Ω–∞–≥—Ä—É–∑–∫–∏
            check_result = self.compliance_monitor.run_compliance_check()
            
            return {
                "status": "passed",
                "families_created": families_created,
                "members_added": members_added,
                "devices_registered": devices_registered,
                "threats_recorded": threats_recorded,
                "compliance_under_load": self.compliance_monitor.metrics.compliance_percentage,
                "performance_stable": True
            }
            
        except Exception as e:
            return {"status": "failed", "error": str(e)}
    
    def _generate_test_report(self, test_results: Dict[str, Any]) -> None:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        try:
            report_file = Path("reports") / f"comprehensive_test_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
            report_file.parent.mkdir(parents=True, exist_ok=True)
            
            with open(report_file, 'w', encoding='utf-8') as f:
                json.dump(test_results, f, indent=2, ensure_ascii=False)
            
            print(f"\nüìÑ –û—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –°–ò–°–¢–ï–ú–´ –°–û–û–¢–í–ï–¢–°–¢–í–ò–Ø 152-–§–ó")
    print("=" * 80)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–µ—Ä–∞
    tester = Comprehensive152FZSystemTester()
    
    # –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    results = await tester.run_comprehensive_test()
    
    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("\n" + "=" * 80)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 80)
    
    print(f"üÜî ID —Ç–µ—Å—Ç–∞: {results['test_id']}")
    print(f"‚è∞ –ù–∞—á–∞—Ç–æ: {results['started_at']}")
    print(f"‚è∞ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {results['completed_at']}")
    print(f"üìä –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: {results['overall_status'].upper()}")
    
    print("\nüìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û –¢–ï–°–¢–ê–ú:")
    for test_name, test_result in results['tests'].items():
        status_emoji = "‚úÖ" if test_result['status'] == "passed" else "‚ùå"
        print(f"  {status_emoji} {test_name}: {test_result['status']}")
        
        if test_result['status'] == "failed" and "error" in test_result:
            print(f"    ‚ùå –û—à–∏–±–∫–∞: {test_result['error']}")
    
    # –ü–æ–¥—Å—á–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    passed_tests = sum(1 for test in results['tests'].values() if test['status'] == "passed")
    total_tests = len(results['tests'])
    
    print(f"\nüìà –ò–¢–û–ì–û: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if results['overall_status'] == "passed":
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º 152-–§–ó")
        print("‚úÖ –ì–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ")
    else:
        print("\n‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´")
        print("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")
    
    print("\n" + "=" * 80)


if __name__ == "__main__":
    asyncio.run(main())