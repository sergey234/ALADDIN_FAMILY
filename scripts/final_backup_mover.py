#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–§–ò–ù–ê–õ–¨–ù–´–ô –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç–µ–ª—å –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è backup —Ñ–∞–π–ª–æ–≤
–ü–µ—Ä–µ–Ω–æ—Å–∏—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ 9 backup —Ñ–∞–π–ª–æ–≤ —Å –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π

–ê–≤—Ç–æ—Ä: ALADDIN Security Team
–í–µ—Ä—Å–∏—è: 3.0 Final
–î–∞—Ç–∞: 2025-01-30
–ö–∞—á–µ—Å—Ç–≤–æ: A+
"""

import os
import shutil
import json
import time
from datetime import datetime
from pathlib import Path
from typing import List, Dict, Any, Tuple

class FinalBackupMover:
    """–§–∏–Ω–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç–µ–ª—å –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è backup —Ñ–∞–π–ª–æ–≤"""
    
    def __init__(self):
        self.project_root = Path("/Users/sergejhlystov/ALADDIN_NEW")
        self.backup_dir = self.project_root / "security" / "formatting_work" / "backup_files"
        self.moved_files = []
        self.failed_files = []
        self.log_file = self.backup_dir / "FINAL_MOVEMENT_LOG.json"
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        self.backup_dir.mkdir(parents=True, exist_ok=True)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º SFM registry –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        self.sfm_registry = self._load_sfm_registry()
        
    def _load_sfm_registry(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å SFM registry"""
        try:
            sfm_path = self.project_root / "data" / "sfm" / "function_registry.json"
            with open(sfm_path, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å SFM registry: {e}")
            return {}
    
    def find_remaining_backup_files(self) -> List[Tuple[Path, Path]]:
        """–ù–∞–π—Ç–∏ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è 9 backup —Ñ–∞–π–ª–æ–≤"""
        backup_files = [
            # MICROSERVICES (1 —Ñ–∞–π–ª)
            ("security/microservices/user_interface_manager_extra.py.backup_20250927_031442", "security/microservices/user_interface_manager.py"),
            
            # SECURITY MONITORING (4 —Ñ–∞–π–ª–∞)
            ("security/security_monitoring.py.backup_20250909_212030", "security/security_monitoring.py"),
            ("security/security_monitoring.py.backup_20250909_212748", "security/security_monitoring.py"),
            ("security/security_monitoring.py.backup_20250909_213215", "security/security_monitoring.py"),
            ("security/security_monitoring_ultimate_a_plus.py.backup_20250927_031440", "security/security_monitoring_ultimate_a_plus.py"),
            
            # MANAGERS (3 —Ñ–∞–π–ª–∞)
            ("security/managers/compliance_manager.py.backup", "security/managers/compliance_manager.py"),
            ("security/ai_agents/analytics_manager.py.backup_011225", "security/managers/analytics_manager.py"),
            ("security/ai_agents/monitor_manager.py.backup_011225", "security/managers/monitor_manager.py"),
            
            # AI (1 —Ñ–∞–π–ª)
            ("security/ai/super_ai_support_assistant.py.backup_20250927_231340", "security/ai/super_ai_support_assistant.py"),
        ]
        
        found_files = []
        for backup_path, main_path in backup_files:
            backup_file = self.project_root / backup_path
            main_file = self.project_root / main_path
            
            if backup_file.exists():
                if main_file.exists():
                    found_files.append((backup_file, main_file))
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω: {backup_path}")
                else:
                    print(f"‚ö†Ô∏è  –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è: {backup_path}")
            else:
                print(f"‚ùå Backup —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {backup_path}")
        
        return found_files
    
    def move_backup_file(self, backup_file: Path, main_file: Path) -> bool:
        """–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å backup —Ñ–∞–π–ª —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏"""
        try:
            print(f"\nüîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞: {backup_file.name}")
            print("-" * 50)
            
            # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            if not main_file.exists():
                print(f"‚ùå –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {main_file}")
                return False
            
            print(f"‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª —á–∏—Ç–∞–µ—Ç—Å—è: {main_file.name}")
            
            # 2. –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ backup —Ñ–∞–π–ª–∞
            destination = self.backup_dir / backup_file.name
            shutil.move(str(backup_file), str(destination))
            print(f"‚úÖ Backup —Ñ–∞–π–ª –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤: {destination}")
            
            # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –æ—Å—Ç–∞–ª—Å—è
            if not main_file.exists():
                print(f"‚ùå –û–®–ò–ë–ö–ê: –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –∏—Å—á–µ–∑ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è!")
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º backup —Ñ–∞–π–ª
                shutil.move(str(destination), str(backup_file))
                return False
            
            print(f"‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –æ—Å—Ç–∞–ª—Å—è –Ω–∞ –º–µ—Å—Ç–µ: {main_file.name}")
            
            # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ SFM —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            main_name = main_file.stem
            if main_name in self.sfm_registry:
                sfm_info = self.sfm_registry[main_name]
                print(f"‚úÖ –§—É–Ω–∫—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞ –≤ SFM: {main_name}")
                print(f"  - –°—Ç–∞—Ç—É—Å: {sfm_info.get('status', 'unknown')}")
            else:
                print(f"‚ö†Ô∏è  –§—É–Ω–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ SFM: {main_name}")
            
            # 5. –ó–∞–ø–∏—Å—å –≤ –ª–æ–≥
            self.moved_files.append({
                'backup_file': str(backup_file),
                'main_file': str(main_file),
                'destination': str(destination),
                'timestamp': datetime.now().isoformat(),
                'status': 'success'
            })
            
            print(f"‚úÖ –£–°–ü–ï–®–ù–û –ü–ï–†–ï–ú–ï–©–ï–ù: {backup_file.name}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ {backup_file.name}: {e}")
            self.failed_files.append({
                'backup_file': str(backup_file),
                'main_file': str(main_file),
                'error': str(e),
                'timestamp': datetime.now().isoformat(),
                'status': 'failed'
            })
            return False
    
    def save_log(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –ª–æ–≥"""
        log_data = {
            'execution_info': {
                'timestamp': datetime.now().isoformat(),
                'total_files': len(self.moved_files) + len(self.failed_files),
                'moved_files': len(self.moved_files),
                'failed_files': len(self.failed_files),
                'success_rate': len(self.moved_files) / (len(self.moved_files) + len(self.failed_files)) * 100 if (len(self.moved_files) + len(self.failed_files)) > 0 else 0
            },
            'moved_files': self.moved_files,
            'failed_files': self.failed_files
        }
        
        with open(self.log_file, 'w', encoding='utf-8') as f:
            json.dump(log_data, f, indent=2, ensure_ascii=False)
        
        print(f"üìã –î–µ—Ç–∞–ª—å–Ω—ã–π –ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {self.log_file}")
    
    def run(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ"""
        print("üîí ALADDIN Security System - Final Backup Mover v3.0")
        print("–ü–µ—Ä–µ–Ω–æ—Å –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è 9 backup —Ñ–∞–π–ª–æ–≤ —Å –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π")
        print("=" * 70)
        
        start_time = time.time()
        
        # –ù–∞–π—Ç–∏ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è backup —Ñ–∞–π–ª—ã
        print("üîç –ü–æ–∏—Å–∫ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è backup —Ñ–∞–π–ª–æ–≤...")
        backup_files = self.find_remaining_backup_files()
        
        if not backup_files:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ backup —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è")
            return False
        
        print(f"üìã –ù–∞–π–¥–µ–Ω–æ backup —Ñ–∞–π–ª–æ–≤: {len(backup_files)}")
        
        # –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Ñ–∞–π–ª—ã
        print(f"\nüîÑ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ backup —Ñ–∞–π–ª–æ–≤ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π...")
        success_count = 0
        
        for i, (backup_file, main_file) in enumerate(backup_files, 1):
            print(f"\n[{i}/{len(backup_files)}] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞")
            if self.move_backup_file(backup_file, main_file):
                success_count += 1
        
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–≥
        self.save_log()
        
        # –ò—Ç–æ–≥–∏
        end_time = time.time()
        execution_time = end_time - start_time
        
        print("\n" + "=" * 70)
        print("üìä –ò–¢–û–ì–ò –§–ò–ù–ê–õ–¨–ù–û–ì–û –ü–ï–†–ï–ú–ï–©–ï–ù–ò–Ø:")
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"üìÅ –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {len(backup_files)} —Ñ–∞–π–ª–æ–≤")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–æ: {success_count} —Ñ–∞–π–ª–æ–≤")
        print(f"‚ùå –û—à–∏–±–æ–∫: {len(backup_files) - success_count} —Ñ–∞–π–ª–æ–≤")
        print(f"üìã –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_count/len(backup_files)*100:.1f}%")
        print("=" * 70)
        
        if success_count == len(backup_files):
            print("üéâ –§–ò–ù–ê–õ–¨–ù–û–ï –ü–ï–†–ï–ú–ï–©–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
            print(f"üìÅ –ü–µ—Ä–µ–º–µ—â–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {success_count}")
            print(f"‚è±Ô∏è  –í—Ä–µ–º—è: {execution_time:.2f} —Å–µ–∫—É–Ω–¥")
            print(f"üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: 100.0%")
            return True
        else:
            print("‚ö†Ô∏è  –§–ò–ù–ê–õ–¨–ù–û–ï –ü–ï–†–ï–ú–ï–©–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –° –û–®–ò–ë–ö–ê–ú–ò!")
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}")
            print(f"‚ùå –û—à–∏–±–æ–∫: {len(backup_files) - success_count}")
            return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    mover = FinalBackupMover()
    success = mover.run()
    return 0 if success else 1

if __name__ == "__main__":
    exit(main())