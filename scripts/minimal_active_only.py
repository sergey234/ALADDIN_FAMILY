#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üéØ –ú–ò–ù–ò–ú–ê–õ–¨–ù–ê–Ø –ê–ö–¢–ò–í–ù–ê–Ø –°–ò–°–¢–ï–ú–ê
===============================

–û—Å—Ç–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Ç–æ–ª—å–∫–æ:
- –Ø–¥—Ä–æ —Å–∏—Å—Ç–µ–º—ã (core_base, database, authentication)
- ML –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (AI –∞–≥–µ–Ω—Ç—ã, –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—ã, –±–æ—Ç—ã)
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π (SleepModeManager, SafeFunctionManager)
"""

import json
import os
from datetime import datetime
from typing import Set

def minimal_active_system():
    """–°–æ–∑–¥–∞–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    
    print("üéØ –°–û–ó–î–ê–ù–ò–ï –ú–ò–ù–ò–ú–ê–õ–¨–ù–û–ô –ê–ö–¢–ò–í–ù–û–ô –°–ò–°–¢–ï–ú–´")
    print("=" * 50)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º SFM —Ä–µ–µ—Å—Ç—Ä
    sfm_path = "data/sfm/function_registry.json"
    
    if not os.path.exists(sfm_path):
        print(f"‚ùå –§–∞–π–ª {sfm_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    with open(sfm_path, 'r', encoding='utf-8') as f:
        data = json.load(f)
    
    functions = data.get('functions', {})
    total_functions = len(functions)
    
    print(f"üìä –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π: {total_functions}")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    active_functions: Set[str] = set()
    
    # 1. –Ø–î–†–û –°–ò–°–¢–ï–ú–´
    core_functions = {
        'core_base', 'service_base', 'security_base', 
        'database', 'authentication'
    }
    active_functions.update(core_functions)
    print(f"üèóÔ∏è  –Ø–¥—Ä–æ —Å–∏—Å—Ç–µ–º—ã: {len(core_functions)} —Ñ—É–Ω–∫—Ü–∏–π")
    
    # 2. ML –ö–û–ú–ü–û–ù–ï–ù–¢–´ - AI –ê–ì–ï–ù–¢–´
    ai_agent_functions = set()
    for func_id in functions.keys():
        if func_id.startswith('ai_agent_') and 'ml' in func_id.lower():
            ai_agent_functions.add(func_id)
    active_functions.update(ai_agent_functions)
    print(f"ü§ñ AI –∞–≥–µ–Ω—Ç—ã —Å ML: {len(ai_agent_functions)} —Ñ—É–Ω–∫—Ü–∏–π")
    
    # 3. ML –ö–û–ú–ü–û–ù–ï–ù–¢–´ - –ú–ò–ö–†–û–°–ï–†–í–ò–°–´
    microservice_ml_functions = set()
    for func_id in functions.keys():
        if (func_id.startswith('microservice_') and 
            ('ml' in func_id.lower() or 'model' in func_id.lower() or 
             'analyzer' in func_id.lower() or 'isolation' in func_id.lower())):
            microservice_ml_functions.add(func_id)
    active_functions.update(microservice_ml_functions)
    print(f"‚öôÔ∏è  –ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—ã —Å ML: {len(microservice_ml_functions)} —Ñ—É–Ω–∫—Ü–∏–π")
    
    # 4. ML –ö–û–ú–ü–û–ù–ï–ù–¢–´ - –ë–û–¢–´
    bot_ml_functions = set()
    for func_id in functions.keys():
        if (func_id.startswith('bot_') and 
            ('ml' in func_id.lower() or 'ai' in func_id.lower() or 
             'analyzer' in func_id.lower())):
            bot_ml_functions.add(func_id)
    active_functions.update(bot_ml_functions)
    print(f"ü§ñ –ë–æ—Ç—ã —Å ML: {len(bot_ml_functions)} —Ñ—É–Ω–∫—Ü–∏–π")
    
    # 5. –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ò–°–¢–ï–ú–û–ô
    management_functions = {
        'sleep_mode_manager', 'safe_function_manager', 'enhanced_safe_function_manager',
        'all_bots_sleep_manager', 'safe_sleep_mode_optimizer'
    }
    active_functions.update(management_functions)
    print(f"üéõÔ∏è  –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π: {len(management_functions)} —Ñ—É–Ω–∫—Ü–∏–π")
    
    # 6. –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï ML –ê–ù–ê–õ–ò–ó–ê–¢–û–†–´
    ml_analyzer_functions = set()
    for func_id in functions.keys():
        if ('ml' in func_id.lower() and 'analyzer' in func_id.lower()):
            ml_analyzer_functions.add(func_id)
    active_functions.update(ml_analyzer_functions)
    print(f"üî¨ ML –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä—ã: {len(ml_analyzer_functions)} —Ñ—É–Ω–∫—Ü–∏–π")
    
    # 7. –°–ò–°–¢–ï–ú–´ –û–ü–û–í–ï–©–ï–ù–ò–ô
    alerting_functions = {
        'enhanced_alerting_system', 'advanced_alerting_system',
        'emergency_notification_manager'
    }
    active_functions.update(alerting_functions)
    print(f"üö® –°–∏—Å—Ç–µ–º—ã –æ–ø–æ–≤–µ—â–µ–Ω–∏–π: {len(alerting_functions)} —Ñ—É–Ω–∫—Ü–∏–π")
    
    print(f"\nüìã –ò–¢–û–ì–û –î–õ–Ø –ê–ö–¢–ò–í–ê–¶–ò–ò: {len(active_functions)} —Ñ—É–Ω–∫—Ü–∏–π")
    
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º
    sleeping_count = 0
    active_count = 0
    
    for func_id, func_data in functions.items():
        if func_id in active_functions:
            func_data['status'] = 'active'
            func_data['wake_time'] = datetime.now().isoformat()
            func_data['minimal_system_active'] = True
            active_count += 1
            print(f"‚úÖ {func_id} - –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
        else:
            func_data['status'] = 'sleeping'
            func_data['sleep_time'] = datetime.now().isoformat()
            func_data['minimal_system_sleep'] = True
            sleeping_count += 1
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ä–µ–µ—Å—Ç—Ä
    data['functions'] = functions
    data['last_updated'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    data['minimal_system_mode'] = True
    data['active_functions_count'] = active_count
    data['sleeping_functions_count'] = sleeping_count
    
    with open(sfm_path, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)
    
    print(f"\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print(f"   –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ: {active_count}")
    print(f"   –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –≤ —Å–æ–Ω: {sleeping_count}")
    print(f"   SFM —Ä–µ–µ—Å—Ç—Ä –æ–±–Ω–æ–≤–ª–µ–Ω: {sfm_path}")
    
    # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
    report = {
        "timestamp": datetime.now().isoformat(),
        "minimal_system_mode": True,
        "total_functions": total_functions,
        "active_functions": list(active_functions),
        "active_count": active_count,
        "sleeping_count": sleeping_count,
        "core_functions": list(core_functions),
        "ai_agent_functions": list(ai_agent_functions),
        "microservice_ml_functions": list(microservice_ml_functions),
        "bot_ml_functions": list(bot_ml_functions),
        "management_functions": list(management_functions),
        "ml_analyzer_functions": list(ml_analyzer_functions),
        "alerting_functions": list(alerting_functions)
    }
    
    report_path = f"logs/minimal_system_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
    os.makedirs("logs", exist_ok=True)
    
    with open(report_path, 'w', encoding='utf-8') as f:
        json.dump(report, f, ensure_ascii=False, indent=2)
    
    print(f"üìã –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_path}")
    
    return active_count, sleeping_count

if __name__ == "__main__":
    minimal_active_system()