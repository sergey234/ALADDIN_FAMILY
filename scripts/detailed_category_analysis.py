#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–∏—Å—Ç–µ–º—ã ALADDIN –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
–ü–æ–ª–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø–æ –∏—Ö —Ä–µ–∞–ª—å–Ω–æ–º—É —Ç–∏–ø—É
"""

import sys
import os
import json
from pathlib import Path
from collections import defaultdict

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(str(Path(__file__).parent.parent))

def analyze_ai_agents_detailed():
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ AI Agents —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –ø–æ —Ç–∏–ø–∞–º"""
    print("ü§ñ –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó AI AGENTS:")
    print("=" * 60)
    
    ai_agents_path = "security/ai_agents/"
    
    if not os.path.exists(ai_agents_path):
        print("‚ùå –ü–∞–ø–∫–∞ AI Agents –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    categories = {
        "ü§ñ –ù–ê–°–¢–û–Ø–©–ò–ï AI –ê–ì–ï–ù–¢–´": ["agent"],
        "‚öôÔ∏è –ú–ï–ù–ï–î–ñ–ï–†–´": ["manager"],
        "üîß –î–í–ò–ñ–ö–ò –ò –°–ò–°–¢–ï–ú–´": ["engine", "system", "hub", "interface"],
        "ü§ñ –ë–û–¢–´": ["bot"],
        "üîç –ê–ù–ê–õ–ò–ó–ê–¢–û–†–´ –ò –î–ï–¢–ï–ö–¢–û–†–´": ["analyzer", "detector", "protector", "validator"],
        "üìä –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï": ["extra", "main", "utils", "backup", "__init__"]
    }
    
    files_by_category = defaultdict(list)
    total_files = 0
    
    # –°–∫–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
    for file in os.listdir(ai_agents_path):
        if file.endswith('.py'):
            total_files += 1
            file_lower = file.lower()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            categorized = False
            for category, keywords in categories.items():
                for keyword in keywords:
                    if keyword in file_lower:
                        files_by_category[category].append(file)
                        categorized = True
                        break
                if categorized:
                    break
            
            # –ï—Å–ª–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            if not categorized:
                files_by_category["‚ùì –ù–ï–û–ü–†–ï–î–ï–õ–ï–ù–ù–´–ï"].append(file)
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    for category, files in files_by_category.items():
        if files:
            print(f"\n{category} ({len(files)} —Ñ–∞–π–ª–æ–≤):")
            print("-" * 40)
            for file in sorted(files):
                print(f"  ‚Ä¢ {file}")
    
    print(f"\nüìä –ò–¢–û–ì–û –§–ê–ô–õ–û–í: {total_files}")
    
    return files_by_category, total_files

def analyze_security_bots_detailed():
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ Security Bots"""
    print("\nü§ñ –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó SECURITY BOTS:")
    print("=" * 60)
    
    bots_path = "security/bots/"
    
    if not os.path.exists(bots_path):
        print("‚ùå –ü–∞–ø–∫–∞ Security Bots –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    categories = {
        "ü§ñ –û–°–ù–û–í–ù–´–ï –ë–û–¢–´": ["bot"],
        "üîß –î–í–ò–ñ–ö–ò –ò –°–ò–°–¢–ï–ú–´": ["engine", "system"],
        "‚öôÔ∏è –ú–ï–ù–ï–î–ñ–ï–†–´": ["manager"],
        "üîç –ê–ù–ê–õ–ò–ó–ê–¢–û–†–´": ["analyzer", "detector"],
        "üìä –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï": ["extra", "main", "utils", "backup", "__init__"]
    }
    
    files_by_category = defaultdict(list)
    total_files = 0
    
    for file in os.listdir(bots_path):
        if file.endswith('.py'):
            total_files += 1
            file_lower = file.lower()
            
            categorized = False
            for category, keywords in categories.items():
                for keyword in keywords:
                    if keyword in file_lower:
                        files_by_category[category].append(file)
                        categorized = True
                        break
                if categorized:
                    break
            
            if not categorized:
                files_by_category["‚ùì –ù–ï–û–ü–†–ï–î–ï–õ–ï–ù–ù–´–ï"].append(file)
    
    for category, files in files_by_category.items():
        if files:
            print(f"\n{category} ({len(files)} —Ñ–∞–π–ª–æ–≤):")
            print("-" * 40)
            for file in sorted(files):
                print(f"  ‚Ä¢ {file}")
    
    print(f"\nüìä –ò–¢–û–ì–û –§–ê–ô–õ–û–í: {total_files}")
    
    return files_by_category, total_files

def analyze_managers_detailed():
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ Managers"""
    print("\n‚öôÔ∏è –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó MANAGERS:")
    print("=" * 60)
    
    managers_path = "security/managers/"
    
    if not os.path.exists(managers_path):
        print("‚ùå –ü–∞–ø–∫–∞ Managers –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    categories = {
        "‚öôÔ∏è –û–°–ù–û–í–ù–´–ï –ú–ï–ù–ï–î–ñ–ï–†–´": ["manager"],
        "üîß –î–í–ò–ñ–ö–ò –ò –°–ò–°–¢–ï–ú–´": ["engine", "system"],
        "ü§ñ –ë–û–¢–´": ["bot"],
        "üîç –ê–ù–ê–õ–ò–ó–ê–¢–û–†–´": ["analyzer", "detector"],
        "üìä –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï": ["extra", "main", "utils", "backup", "__init__"]
    }
    
    files_by_category = defaultdict(list)
    total_files = 0
    
    for file in os.listdir(managers_path):
        if file.endswith('.py'):
            total_files += 1
            file_lower = file.lower()
            
            categorized = False
            for category, keywords in categories.items():
                for keyword in keywords:
                    if keyword in file_lower:
                        files_by_category[category].append(file)
                        categorized = True
                        break
                if categorized:
                    break
            
            if not categorized:
                files_by_category["‚ùì –ù–ï–û–ü–†–ï–î–ï–õ–ï–ù–ù–´–ï"].append(file)
    
    for category, files in files_by_category.items():
        if files:
            print(f"\n{category} ({len(files)} —Ñ–∞–π–ª–æ–≤):")
            print("-" * 40)
            for file in sorted(files):
                print(f"  ‚Ä¢ {file}")
    
    print(f"\nüìä –ò–¢–û–ì–û –§–ê–ô–õ–û–í: {total_files}")
    
    return files_by_category, total_files

def analyze_microservices_detailed():
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ Microservices"""
    print("\nüîß –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó MICROSERVICES:")
    print("=" * 60)
    
    microservices_path = "security/microservices/"
    
    if not os.path.exists(microservices_path):
        print("‚ùå –ü–∞–ø–∫–∞ Microservices –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    categories = {
        "üîß –û–°–ù–û–í–ù–´–ï –ú–ò–ö–†–û–°–ï–†–í–ò–°–´": ["service", "microservice"],
        "‚öôÔ∏è –ú–ï–ù–ï–î–ñ–ï–†–´": ["manager"],
        "üîç –ê–ù–ê–õ–ò–ó–ê–¢–û–†–´": ["analyzer", "detector"],
        "üìä –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï": ["extra", "main", "utils", "backup", "__init__"]
    }
    
    files_by_category = defaultdict(list)
    total_files = 0
    
    for file in os.listdir(microservices_path):
        if file.endswith('.py'):
            total_files += 1
            file_lower = file.lower()
            
            categorized = False
            for category, keywords in categories.items():
                for keyword in keywords:
                    if keyword in file_lower:
                        files_by_category[category].append(file)
                        categorized = True
                        break
                if categorized:
                    break
            
            if not categorized:
                files_by_category["‚ùì –ù–ï–û–ü–†–ï–î–ï–õ–ï–ù–ù–´–ï"].append(file)
    
    for category, files in files_by_category.items():
        if files:
            print(f"\n{category} ({len(files)} —Ñ–∞–π–ª–æ–≤):")
            print("-" * 40)
            for file in sorted(files):
                print(f"  ‚Ä¢ {file}")
    
    print(f"\nüìä –ò–¢–û–ì–û –§–ê–ô–õ–û–í: {total_files}")
    
    return files_by_category, total_files

def analyze_all_categories_detailed():
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    print("üöÄ –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –í–°–ï–• –ö–ê–¢–ï–ì–û–†–ò–ô ALADDIN")
    print("=" * 80)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    ai_agents_data = analyze_ai_agents_detailed()
    bots_data = analyze_security_bots_detailed()
    managers_data = analyze_managers_detailed()
    microservices_data = analyze_microservices_detailed()
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\nüéØ –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú:")
    print("=" * 60)
    
    total_files = 0
    if ai_agents_data:
        total_files += ai_agents_data[1]
        print(f"ü§ñ AI Agents: {ai_agents_data[1]} —Ñ–∞–π–ª–æ–≤")
    if bots_data:
        total_files += bots_data[1]
        print(f"ü§ñ Security Bots: {bots_data[1]} —Ñ–∞–π–ª–æ–≤")
    if managers_data:
        total_files += managers_data[1]
        print(f"‚öôÔ∏è Managers: {managers_data[1]} —Ñ–∞–π–ª–æ–≤")
    if microservices_data:
        total_files += microservices_data[1]
        print(f"üîß Microservices: {microservices_data[1]} —Ñ–∞–π–ª–æ–≤")
    
    print(f"\nüìä –í–°–ï–ì–û –§–ê–ô–õ–û–í: {total_files}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) > 1:
        category = sys.argv[1].lower()
        
        if category == "ai_agents" or category == "agents":
            analyze_ai_agents_detailed()
        elif category == "bots":
            analyze_security_bots_detailed()
        elif category == "managers":
            analyze_managers_detailed()
        elif category == "microservices":
            analyze_microservices_detailed()
        else:
            print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: ai_agents, bots, managers, microservices")
    else:
        analyze_all_categories_detailed()

if __name__ == "__main__":
    main()