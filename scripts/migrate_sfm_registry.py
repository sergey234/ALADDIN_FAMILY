#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
SFM Registry Migration Script - –ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã SFM —Ä–µ–µ—Å—Ç—Ä–∞
–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç 115 —Ñ—É–Ω–∫—Ü–∏–π —Å–æ —Å—Ç–∞—Ä–æ–π —Å—Ö–µ–º—ã –Ω–∞ –Ω–æ–≤—É—é
"""

import json
import shutil
from datetime import datetime
from pathlib import Path

def backup_registry():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ —Ä–µ–µ—Å—Ç—Ä–∞"""
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    backup_file = f"data/sfm/function_registry_backup_{timestamp}.json"
    
    shutil.copy2('data/sfm/function_registry.json', backup_file)
    print(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_file}")
    return backup_file

def analyze_problem_functions():
    """–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
    with open('data/sfm/function_registry.json', 'r', encoding='utf-8') as f:
        registry = json.load(f)
    
    functions = registry.get('functions', {})
    problem_functions = []
    
    for name, func in functions.items():
        if not isinstance(func, dict):
            continue
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä—É—é —Å—Ö–µ–º—É
        if 'id' in func and 'function_id' not in func:
            problem_functions.append((name, func))
    
    print(f"üîç –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π: {len(problem_functions)}")
    return problem_functions

def migrate_single_function(func_name, func_data):
    """–ú–∏–≥—Ä–∞—Ü–∏—è –æ–¥–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ —Å—Ç–∞—Ä–æ–π —Å—Ö–µ–º—ã –Ω–∞ –Ω–æ–≤—É—é"""
    print(f"\nüîß –ú–∏–≥—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏: {func_name}")
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    new_func = {
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
        "function_id": func_data.get('id', func_name),
        "name": func_data.get('name', func_name),
        "description": func_data.get('description', ''),
        "function_type": func_data.get('category', 'security_analytics').lower(),
        "security_level": func_data.get('security_level', 'high').lower(),
        "status": "active" if func_data.get('status') == 'ENABLED' else 'inactive',
        "is_critical": True,  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–µ–µ –ø–æ–ª–µ
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        "execution_count": 0,
        "success_count": 0,
        "error_count": 0,
        
        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
        "created_at": func_data.get('created_at', datetime.now().isoformat()),
        "last_execution": None,
        "last_status_check": None,
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        "auto_enable": False,
        "wake_time": None,
        "emergency_wake_up": False,
        
        # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        "features": [],
        "dependencies": [],
        "config": {},
        "metrics": {},
        "version": "1.0.0",
        "author": "AI Agent",
        "license": "Proprietary",
        "tags": [],
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–Ω–∞
        "sleep_state": {
            "sleep_time": None,
            "previous_status": "active",
            "minimal_system_sleep": False
        }
    }
    
    print(f"‚úÖ –§—É–Ω–∫—Ü–∏—è {func_name} –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞")
    print(f"  - function_id: {new_func['function_id']}")
    print(f"  - function_type: {new_func['function_type']}")
    print(f"  - status: {new_func['status']}")
    print(f"  - is_critical: {new_func['is_critical']}")
    
    return new_func

def test_migration():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–∞ –æ–¥–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏"""
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–ò–ì–†–ê–¶–ò–ò SFM –†–ï–ï–°–¢–†–ê")
    print("=" * 60)
    
    # 1. –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    backup_file = backup_registry()
    
    # 2. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    problem_functions = analyze_problem_functions()
    
    if not problem_functions:
        print("‚úÖ –ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
        return True
    
    # 3. –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    test_func_name, test_func_data = problem_functions[0]
    print(f"\nüéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ —Ñ—É–Ω–∫—Ü–∏–∏: {test_func_name}")
    
    # 4. –ú–∏–≥—Ä–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é
    migrated_func = migrate_single_function(test_func_name, test_func_data)
    
    # 5. –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–µ—Å—Ç—Ä
    with open('data/sfm/function_registry.json', 'r', encoding='utf-8') as f:
        registry = json.load(f)
    
    # 6. –ó–∞–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤ —Ä–µ–µ—Å—Ç—Ä–µ
    registry['functions'][test_func_name] = migrated_func
    
    # 7. –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ä–µ–µ—Å—Ç—Ä
    with open('data/sfm/function_registry.json', 'w', encoding='utf-8') as f:
        json.dump(registry, f, indent=2, ensure_ascii=False)
    
    print(f"\n‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"üìÅ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_file}")
    
    return True

def validate_migration():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏–∏"""
    print("\nüîç –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–ê –ú–ò–ì–†–ê–¶–ò–ò")
    print("=" * 50)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–∞–ª–∏–¥–∞—Ç–æ—Ä
    import subprocess
    result = subprocess.run(['python3', 'scripts/sfm_structure_validator.py'], 
                          capture_output=True, text=True)
    
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢ –í–ê–õ–ò–î–ê–¶–ò–ò:")
    print(result.stdout)
    
    if result.returncode == 0:
        print("‚úÖ –í–ê–õ–ò–î–ê–¶–ò–Ø –ü–†–û–ô–î–ï–ù–ê!")
        return True
    else:
        print("‚ùå –í–ê–õ–ò–î–ê–¶–ò–Ø –ù–ï –ü–†–û–ô–î–ï–ù–ê!")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîß –ú–ò–ì–†–ê–¶–ò–Ø SFM –†–ï–ï–°–¢–†–ê")
    print("=" * 40)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
    if test_migration():
        print("\nüéØ –¢–ï–°–¢–û–í–ê–Ø –ú–ò–ì–†–ê–¶–ò–Ø –£–°–ü–ï–®–ù–ê!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if validate_migration():
            print("\nüéâ –ú–ò–ì–†–ê–¶–ò–Ø –ü–†–û–®–õ–ê –£–°–ü–ï–®–ù–û!")
            print("‚úÖ –ú–æ–∂–Ω–æ –ø—Ä–∏–º–µ–Ω—è—Ç—å –∫–æ –≤—Å–µ–º 115 —Ñ—É–Ω–∫—Ü–∏—è–º")
        else:
            print("\n‚ùå –ú–ò–ì–†–ê–¶–ò–Ø –ù–ï –£–î–ê–õ–ê–°–¨!")
            print("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞")
    else:
        print("\n‚ùå –û–®–ò–ë–ö–ê –¢–ï–°–¢–û–í–û–ô –ú–ò–ì–†–ê–¶–ò–ò!")

if __name__ == "__main__":
    main()