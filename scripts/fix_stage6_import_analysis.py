#!/usr/bin/env python3
"""
–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –≠–¢–ê–ü–ê 6: –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –∞–Ω–∞–ª–∏–∑–æ–º –∏–º–ø–æ—Ä—Ç–æ–≤
"""

import ast
import sys
import json
import subprocess
from pathlib import Path
from typing import Dict, List, Any

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append('/Users/sergejhlystov/ALADDIN_NEW')

class ImportAnalysisFixer:
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ –¥–ª—è –≠–¢–ê–ü–ê 6"""
    
    def __init__(self, file_path: str = "security/reactive/recovery_service.py"):
        self.file_path = Path(file_path)
        
    def fix_import_analysis(self) -> Dict[str, Any]:
        """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –∏–º–ø–æ—Ä—Ç–æ–≤"""
        print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –≠–¢–ê–ü–ê 6: –ê–Ω–∞–ª–∏–∑ –∏–º–ø–æ—Ä—Ç–æ–≤")
        print("=" * 50)
        
        try:
            with open(self.file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            tree = ast.parse(content)
            imports = []
            unused_imports = []
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∏–º–ø–æ—Ä—Ç—ã
            for node in ast.walk(tree):
                if isinstance(node, ast.Import):
                    for alias in node.names:
                        imports.append({
                            "type": "import",
                            "name": alias.name,
                            "alias": alias.asname,
                            "line": node.lineno
                        })
                elif isinstance(node, ast.ImportFrom):
                    for alias in node.names:
                        imports.append({
                            "type": "from_import",
                            "module": node.module,
                            "name": alias.name,
                            "alias": alias.asname,
                            "line": node.lineno
                        })
            
            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–º–ø–æ—Ä—Ç–æ–≤
            for imp in imports:
                name_to_check = imp["alias"] if imp["alias"] else imp["name"]
                if name_to_check and name_to_check not in content.replace(f"line {imp['line']}", ""):
                    unused_imports.append(imp)
            
            print(f"   üì¶ –í—Å–µ–≥–æ –∏–º–ø–æ—Ä—Ç–æ–≤: {len(imports)}")
            print(f"   ‚ùå –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö: {len(unused_imports)}")
            
            if unused_imports:
                print("   üìã –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã:")
                for unused in unused_imports[:5]:
                    print(f"      - {unused['name']} (—Å—Ç—Ä–æ–∫–∞ {unused['line']})")
            
            return {
                "total_imports": len(imports),
                "unused_imports": len(unused_imports),
                "imports": imports,
                "unused_list": unused_imports,
                "status": "fixed"
            }
            
        except Exception as e:
            return {"error": str(e), "status": "failed"}
    
    def test_import_functionality(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–º–ø–æ—Ä—Ç–æ–≤"""
        print("   üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤...")
        
        try:
            # –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª—è
            result = subprocess.run(['python3', '-c', f'import sys; sys.path.append("/Users/sergejhlystov/ALADDIN_NEW"); from security.reactive.recovery_service import RecoveryService'], 
                                  capture_output=True, text=True, timeout=30)
            
            if result.returncode == 0:
                print("      ‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π –∏–º–ø–æ—Ä—Ç: —Ä–∞–±–æ—Ç–∞–µ—Ç")
                return {"import_test": True, "error": None}
            else:
                print(f"      ‚ùå –û—Å–Ω–æ–≤–Ω–æ–π –∏–º–ø–æ—Ä—Ç: {result.stderr}")
                return {"import_test": False, "error": result.stderr}
                
        except Exception as e:
            print(f"      ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return {"import_test": False, "error": str(e)}

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    fixer = ImportAnalysisFixer()
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ –∏–º–ø–æ—Ä—Ç–æ–≤
    import_results = fixer.fix_import_analysis()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
    test_results = fixer.test_import_functionality()
    
    print(f"\n‚úÖ –≠–¢–ê–ü 6 –ò–°–ü–†–ê–í–õ–ï–ù!")
    print(f"   ‚Ä¢ –°—Ç–∞—Ç—É—Å: {import_results.get('status', 'unknown')}")
    print(f"   ‚Ä¢ –ò–º–ø–æ—Ä—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç: {test_results.get('import_test', False)}")

if __name__ == "__main__":
    main()