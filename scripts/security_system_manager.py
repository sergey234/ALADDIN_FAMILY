#!/usr/bin/env python3
"""
üîí –ú–ï–ù–ï–î–ñ–ï–† –°–ò–°–¢–ï–ú–´ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò ALADDIN
========================================

–ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ–º–∏ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞–º–∏ —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.
–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ.

–ê–≤—Ç–æ—Ä: AI Assistant
–î–∞—Ç–∞: 2024
–í–µ—Ä—Å–∏—è: 1.0
"""

import os
import sys
import subprocess
from pathlib import Path
from datetime import datetime

class SecuritySystemManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    
    def __init__(self):
        self.scripts_dir = Path("scripts")
        self.analyzers = {
            'comprehensive': 'comprehensive_security_analyzer.py',
            'quick_finder': 'quick_function_finder.py',
            'sfm_scanner': 'sfm_function_scanner.py'
        }
        self.results_dir = Path("analysis_results")
        self.results_dir.mkdir(exist_ok=True)

    def print_menu(self) -> None:
        """–í—ã–≤–æ–¥–∏—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        print("\nüîí –ú–ï–ù–ï–î–ñ–ï–† –°–ò–°–¢–ï–ú–´ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò ALADDIN")
        print("=" * 50)
        print("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        print("1. üîç –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
        print("2. ‚ö° –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ —Ñ—É–Ω–∫—Ü–∏–π")
        print("3. üîß –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ SFM —Ñ—É–Ω–∫—Ü–∏–π")
        print("4. üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
        print("5. üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä—ã")
        print("6. üìÅ –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
        print("7. üßπ –û—á–∏—Å—Ç–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
        print("0. ‚ùå –í—ã—Ö–æ–¥")
        print("-" * 50)

    def run_analyzer(self, analyzer_name: str) -> bool:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä"""
        if analyzer_name not in self.analyzers:
            print(f"‚ùå –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä {analyzer_name} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return False
        
        script_path = self.scripts_dir / self.analyzers[analyzer_name]
        
        if not script_path.exists():
            print(f"‚ùå –°–∫—Ä–∏–ø—Ç {script_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return False
        
        print(f"üöÄ –ó–∞–ø—É—Å–∫–∞—é {analyzer_name}...")
        
        try:
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            os.chdir(self.results_dir)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
            result = subprocess.run([
                sys.executable, 
                str(script_path.absolute())
            ], capture_output=True, text=True, encoding='utf-8')
            
            if result.returncode == 0:
                print("‚úÖ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                if result.stdout:
                    print("üìÑ –í—ã–≤–æ–¥:")
                    print(result.stdout)
                return True
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞!")
                if result.stderr:
                    print("üìÑ –û—à–∏–±–∫–∏:")
                    print(result.stderr)
                return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
            return False
        finally:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∏—Å—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            os.chdir("..")

    def show_statistics(self) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã"""
        print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò ALADDIN")
        print("=" * 50)
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
        total_files = 0
        python_files = 0
        directories = {}
        
        for root, dirs, files in os.walk("."):
            # –ò—Å–∫–ª—é—á–∞–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            dirs[:] = [d for d in dirs if d.lower() not in {
                'backups', 'tests', 'logs', 'formatting_work', 
                '__pycache__', '.git', '.pytest_cache', 'node_modules',
                'venv', 'env', '.env', 'temp', 'tmp', 'analysis_results'
            }]
            
            for file in files:
                total_files += 1
                if file.endswith('.py'):
                    python_files += 1
                
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º
                rel_path = Path(root).relative_to(".")
                if str(rel_path) not in directories:
                    directories[str(rel_path)] = 0
                directories[str(rel_path)] += 1
        
        print(f"üìÑ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {total_files}")
        print(f"üêç Python —Ñ–∞–π–ª–æ–≤: {python_files}")
        print(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–π: {len(directories)}")
        
        print(f"\nüìÅ –¢–æ–ø –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ñ–∞–π–ª–æ–≤:")
        sorted_dirs = sorted(directories.items(), key=lambda x: x[1], reverse=True)
        for dir_path, count in sorted_dirs[:10]:
            if count > 0:
                print(f"   {dir_path}: {count} —Ñ–∞–π–ª–æ–≤")

    def show_results(self) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞"""
        print("\nüìÅ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê")
        print("=" * 30)
        
        if not self.results_dir.exists():
            print("‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return
        
        files = list(self.results_dir.glob("*"))
        if not files:
            print("üì≠ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            return
        
        print(f"üìÑ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(files)}")
        for file in sorted(files):
            size = file.stat().st_size
            print(f"   {file.name} ({size:,} –±–∞–π—Ç)")

    def clear_results(self) -> None:
        """–û—á–∏—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞"""
        if not self.results_dir.exists():
            print("üì≠ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–∂–µ –æ—á–∏—â–µ–Ω—ã!")
            return
        
        try:
            import shutil
            shutil.rmtree(self.results_dir)
            self.results_dir.mkdir(exist_ok=True)
            print("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—á–∏—â–µ–Ω—ã!")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")

    def run_all_analyzers(self) -> None:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä—ã"""
        print("\nüöÄ –ó–ê–ü–£–°–ö –í–°–ï–• –ê–ù–ê–õ–ò–ó–ê–¢–û–†–û–í")
        print("=" * 40)
        
        success_count = 0
        total_count = len(self.analyzers)
        
        for analyzer_name in self.analyzers:
            print(f"\nüîç –ó–∞–ø—É—Å–∫–∞—é {analyzer_name}...")
            if self.run_analyzer(analyzer_name):
                success_count += 1
            print("-" * 30)
        
        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}/{total_count}")
        print(f"   ‚ùå –û—à–∏–±–æ–∫: {total_count - success_count}/{total_count}")

    def run(self) -> None:
        """–ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
        while True:
            self.print_menu()
            
            try:
                choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–µ–π—Å—Ç–≤–∏—è: ").strip()
                
                if choice == "0":
                    print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                    break
                elif choice == "1":
                    self.run_analyzer('comprehensive')
                elif choice == "2":
                    self.run_analyzer('quick_finder')
                elif choice == "3":
                    self.run_analyzer('sfm_scanner')
                elif choice == "4":
                    self.show_statistics()
                elif choice == "5":
                    self.run_all_analyzers()
                elif choice == "6":
                    self.show_results()
                elif choice == "7":
                    self.clear_results()
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                
            except KeyboardInterrupt:
                print("\n\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º!")
                break
            except Exception as e:
                print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
                input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîí –ú–ï–ù–ï–î–ñ–ï–† –°–ò–°–¢–ï–ú–´ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò ALADDIN")
    print("=" * 50)
    print("–í–µ—Ä—Å–∏—è: 1.0")
    print("–î–∞—Ç–∞:", datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if not Path("scripts").exists():
        print("‚ùå –û—à–∏–±–∫–∞: –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ALADDIN_NEW!")
        return
    
    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∏ –∑–∞–ø—É—Å–∫–∞–µ–º
    manager = SecuritySystemManager()
    manager.run()

if __name__ == "__main__":
    main()