#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö 326 —Ñ—É–Ω–∫—Ü–∏–π —Å flake8
–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ –∫–∞–∂–¥–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
"""

import os
import subprocess
import json
from pathlib import Path
from collections import defaultdict
import re

def run_flake8_on_file(file_path, max_line_length=120):
    """–ó–∞–ø—É—Å–∫ flake8 –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Ñ–∞–π–ª–µ"""
    try:
        result = subprocess.run([
            'python3', '-m', 'flake8', 
            str(file_path), 
            f'--max-line-length={max_line_length}'
        ], capture_output=True, text=True, cwd='/Users/sergejhlystov/ALADDIN_NEW')
        
        return result.returncode, result.stdout, result.stderr
    except Exception as e:
        return -1, "", str(e)

def analyze_flake8_output(output):
    """–ê–Ω–∞–ª–∏–∑ –≤—ã–≤–æ–¥–∞ flake8"""
    errors = defaultdict(int)
    error_details = []
    
    if not output.strip():
        return errors, error_details
    
    lines = output.strip().split('\n')
    for line in lines:
        if ':' in line:
            parts = line.split(':')
            if len(parts) >= 4:
                error_code = parts[3].strip().split()[0]
                errors[error_code] += 1
                error_details.append({
                    'line': parts[1],
                    'column': parts[2],
                    'error': error_code,
                    'message': ':'.join(parts[3:]).strip(),
                    'file': parts[0]
                })
    
    return errors, error_details

def find_python_files():
    """–ü–æ–∏—Å–∫ –≤—Å–µ—Ö Python —Ñ–∞–π–ª–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ"""
    python_files = []
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    directories = [
        'core',
        'security',
        'security/ai_agents',
        'security/bots',
        'security/microservices',
        'security/managers',
        'security/privacy',
        'security/ci_cd',
        'tests'
    ]
    
    for directory in directories:
        if os.path.exists(directory):
            for root, dirs, files in os.walk(directory):
                for file in files:
                    if file.endswith('.py') and not file.startswith('__'):
                        python_files.append(os.path.join(root, file))
    
    return python_files

def get_function_info_from_file(file_path):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ—É–Ω–∫—Ü–∏—è—Ö –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ü–æ–∏—Å–∫ –∫–ª–∞—Å—Å–æ–≤
        class_pattern = r'^class\s+(\w+)'
        classes = re.findall(class_pattern, content, re.MULTILINE)
        
        # –ü–æ–∏—Å–∫ —Ñ—É–Ω–∫—Ü–∏–π
        func_pattern = r'^def\s+(\w+)'
        functions = re.findall(func_pattern, content, re.MULTILINE)
        
        return classes, functions
    except Exception as e:
        return [], []

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞"""
    print("üîç –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –ê–ù–ê–õ–ò–ó –í–°–ï–• –§–£–ù–ö–¶–ò–ô –° FLAKE8")
    print("=" * 60)
    
    # –ü–æ–∏—Å–∫ –≤—Å–µ—Ö Python —Ñ–∞–π–ª–æ–≤
    python_files = find_python_files()
    print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(python_files)} Python —Ñ–∞–π–ª–æ–≤")
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
    analysis_results = {
        'total_files': len(python_files),
        'clean_files': 0,
        'files_with_errors': 0,
        'total_errors': 0,
        'error_types': defaultdict(int),
        'file_details': [],
        'summary_by_category': defaultdict(lambda: {
            'total_files': 0,
            'clean_files': 0,
            'files_with_errors': 0,
            'total_errors': 0,
            'error_types': defaultdict(int)
        })
    }
    
    print(f"\nüîç –ê–ù–ê–õ–ò–ó –§–ê–ô–õ–û–í:")
    print("-" * 60)
    
    for i, file_path in enumerate(python_files, 1):
        print(f"[{i:3d}/{len(python_files)}] {file_path}")
        
        # –ó–∞–ø—É—Å–∫ flake8
        returncode, stdout, stderr = run_flake8_on_file(file_path)
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        errors, error_details = analyze_flake8_output(stdout)
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ñ–∞–π–ª–∞
        category = 'other'
        if '/core/' in file_path:
            category = 'core'
        elif '/security/ai_agents/' in file_path:
            category = 'ai_agent'
        elif '/security/bots/' in file_path:
            category = 'bot'
        elif '/security/microservices/' in file_path:
            category = 'microservice'
        elif '/security/managers/' in file_path:
            category = 'manager'
        elif '/security/privacy/' in file_path:
            category = 'privacy'
        elif '/security/' in file_path:
            category = 'security'
        elif '/tests/' in file_path:
            category = 'test'
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ—É–Ω–∫—Ü–∏—è—Ö
        classes, functions = get_function_info_from_file(file_path)
        
        # –ü–æ–¥—Å—á–µ—Ç –æ—à–∏–±–æ–∫
        total_errors = sum(errors.values())
        
        # –°—Ç–∞—Ç—É—Å —Ñ–∞–π–ª–∞
        is_clean = total_errors == 0
        if is_clean:
            analysis_results['clean_files'] += 1
            analysis_results['summary_by_category'][category]['clean_files'] += 1
        else:
            analysis_results['files_with_errors'] += 1
            analysis_results['summary_by_category'][category]['files_with_errors'] += 1
        
        analysis_results['total_errors'] += total_errors
        analysis_results['summary_by_category'][category]['total_errors'] += total_errors
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤
        analysis_results['summary_by_category'][category]['total_files'] += 1
        
        for error_type, count in errors.items():
            analysis_results['error_types'][error_type] += count
            analysis_results['summary_by_category'][category]['error_types'][error_type] += count
        
        # –î–µ—Ç–∞–ª–∏ —Ñ–∞–π–ª–∞
        file_detail = {
            'file_path': file_path,
            'category': category,
            'is_clean': is_clean,
            'total_errors': total_errors,
            'error_types': dict(errors),
            'error_details': error_details,
            'classes': classes,
            'functions': functions,
            'classes_count': len(classes),
            'functions_count': len(functions)
        }
        
        analysis_results['file_details'].append(file_detail)
        
        # –í—ã–≤–æ–¥ —Å—Ç–∞—Ç—É—Å–∞
        status = "‚úÖ –ß–ò–°–¢–´–ô" if is_clean else f"‚ùå {total_errors} –æ—à–∏–±–æ–∫"
        print(f"     {status}")
        
        if not is_clean and total_errors <= 5:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –¥–ª—è —Ñ–∞–π–ª–æ–≤ —Å –Ω–µ–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –æ—à–∏–±–æ–∫
            for error_type, count in errors.items():
                print(f"       {error_type}: {count}")
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    with open('COMPREHENSIVE_FLAKE8_ANALYSIS_REPORT.json', 'w', encoding='utf-8') as f:
        json.dump(analysis_results, f, indent=2, ensure_ascii=False)
    
    # –í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    print(f"\nüìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:")
    print("=" * 60)
    print(f"–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {analysis_results['total_files']}")
    print(f"–ß–∏—Å—Ç—ã—Ö —Ñ–∞–π–ª–æ–≤: {analysis_results['clean_files']} ({analysis_results['clean_files']/analysis_results['total_files']*100:.1f}%)")
    print(f"–§–∞–π–ª–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏: {analysis_results['files_with_errors']} ({analysis_results['files_with_errors']/analysis_results['total_files']*100:.1f}%)")
    print(f"–í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {analysis_results['total_errors']}")
    
    print(f"\nüìà –û–®–ò–ë–ö–ò –ü–û –¢–ò–ü–ê–ú:")
    for error_type, count in sorted(analysis_results['error_types'].items(), key=lambda x: x[1], reverse=True):
        print(f"  {error_type}: {count}")
    
    print(f"\nüìÅ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú:")
    for category, stats in analysis_results['summary_by_category'].items():
        if stats['total_files'] > 0:
            clean_percent = stats['clean_files'] / stats['total_files'] * 100
            print(f"  {category}: {stats['clean_files']}/{stats['total_files']} —á–∏—Å—Ç—ã—Ö ({clean_percent:.1f}%), {stats['total_errors']} –æ—à–∏–±–æ–∫")
    
    print(f"\nüíæ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: COMPREHENSIVE_FLAKE8_ANALYSIS_REPORT.json")

if __name__ == "__main__":
    main()