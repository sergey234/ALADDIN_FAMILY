#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Enhanced SFM Structure Validator - –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –≤–∞–ª–∏–¥–∞—Ç–æ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã SFM —Ä–µ–µ—Å—Ç—Ä–∞
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ –±–ª–æ–∫–∞ functions
–í–∫–ª—é—á–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –º–µ—Ç–æ–¥–æ–≤ –∏ –∫–ª–∞—Å—Å–æ–≤ (–≠—Ç–∞–ø—ã 6-8)
"""

import ast
import json
import re
import sys
from datetime import datetime
from pathlib import Path
from typing import Any, Dict, Optional


class EnhancedSFMValidator:
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –≤–∞–ª–∏–¥–∞—Ç–æ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã SFM —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –º–µ—Ç–æ–¥–æ–≤ –∏ –∫–ª–∞—Å—Å–æ–≤"""

    def __init__(self, target_file: str):
        self.target_file = target_file
        self.file_content = ""
        self.ast_tree = None
        self.classes = {}
        self.functions = {}
        self.imports = {}
        self.errors = []
        self.warnings = []
        self.fixes_applied = []

    def load_file(self) -> bool:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            with open(self.target_file, 'r', encoding='utf-8') as f:
                self.file_content = f.read()

            # –ü–∞—Ä—Å–∏–Ω–≥ AST
            self.ast_tree = ast.parse(self.file_content)
            return True
        except Exception as e:
            self.errors.append(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
            return False

    def etapa6_analyze_classes_and_methods(self) -> Dict[str, Any]:
        """–≠–¢–ê–ü 6: –ü–†–û–í–ï–†–ö–ê –ú–ï–¢–û–î–û–í –ò –ö–õ–ê–°–°–û–í"""
        print("\nüîç –≠–¢–ê–ü 6: –ü–†–û–í–ï–†–ö–ê –ú–ï–¢–û–î–û–í –ò –ö–õ–ê–°–°–û–í")
        print("=" * 60)

        results = {
            "6.1": self._analyze_class_structure(),
            "6.2": self._analyze_class_methods(),
            "6.3": self._check_method_accessibility(),
            "6.4": self._check_functions(),
            "6.5": self._check_imports_and_dependencies(),
            "6.6": self._check_class_attributes(),
            "6.7": self._check_special_methods(),
            "6.8": self._check_documentation(),
            "6.9": self._check_error_handling(),
            "6.10": self._final_component_test(),
            "6.11": self._check_active_file_state()
        }

        return results

    def _analyze_class_structure(self) -> Dict[str, Any]:
        """6.1 - –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –ö–õ–ê–°–°–û–í"""
        print("\nüìã 6.1 - –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –ö–õ–ê–°–°–û–í")

        classes_found = {}
        base_classes = {}
        inheritance_hierarchy = {}

        for node in ast.walk(self.ast_tree):
            if isinstance(node, ast.ClassDef):
                class_name = node.name
                classes_found[class_name] = {
                    "line": node.lineno,
                    "bases": [base.id if isinstance(base, ast.Name) else str(base) for base in node.bases],
                    "methods": [],
                    "attributes": [],
                    "docstring": ast.get_docstring(node)
                }

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã
                base_classes[class_name] = [base.id if isinstance(base, ast.Name) else str(base) for base in node.bases]

                # –°–æ–±–∏—Ä–∞–µ–º –º–µ—Ç–æ–¥—ã
                for item in node.body:
                    if isinstance(item, ast.FunctionDef):
                        classes_found[class_name]["methods"].append({
                            "name": item.name,
                            "line": item.lineno,
                            "is_async": isinstance(item, ast.AsyncFunctionDef),
                            "args": [arg.arg for arg in item.args.args],
                            "decorators": [d.id if isinstance(d, ast.Name) else str(d) for d in item.decorator_list]
                        })
                    elif isinstance(item, ast.Assign):
                        for target in item.targets:
                            if isinstance(target, ast.Name):
                                classes_found[class_name]["attributes"].append(target.id)

        # –°—Ç—Ä–æ–∏–º –∏–µ—Ä–∞—Ä—Ö–∏—é –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
        for class_name, bases in base_classes.items():
            inheritance_hierarchy[class_name] = {
                "bases": bases,
                "children": []
            }
            for other_class, other_bases in base_classes.items():
                if class_name in other_bases:
                    inheritance_hierarchy[class_name]["children"].append(other_class)

        self.classes = classes_found

        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–ª–∞—Å—Å–æ–≤: {len(classes_found)}")
        for class_name, info in classes_found.items():
            print(f"  - {class_name} (—Å—Ç—Ä–æ–∫–∞ {info['line']})")
            if info['bases']:
                print(f"    –ë–∞–∑–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã: {', '.join(info['bases'])}")
            print(f"    –ú–µ—Ç–æ–¥–æ–≤: {len(info['methods'])}")

        return {
            "classes_found": classes_found,
            "base_classes": base_classes,
            "inheritance_hierarchy": inheritance_hierarchy,
            "total_classes": len(classes_found)
        }

    def _analyze_class_methods(self) -> Dict[str, Any]:
        """6.2 - –ê–ù–ê–õ–ò–ó –ú–ï–¢–û–î–û–í –ö–õ–ê–°–°–û–í"""
        print("\nüìã 6.2 - –ê–ù–ê–õ–ò–ó –ú–ï–¢–û–î–û–í –ö–õ–ê–°–°–û–í")

        method_analysis = {}

        for class_name, class_info in self.classes.items():
            method_analysis[class_name] = {
                "public_methods": [],
                "private_methods": [],
                "protected_methods": [],
                "static_methods": [],
                "class_methods": [],
                "property_methods": [],
                "async_methods": []
            }

            for method in class_info["methods"]:
                method_name = method["name"]
                decorators = method["decorators"]

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ—Ç–æ–¥–∞
                if method_name.startswith("__") and method_name.endswith("__"):
                    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
                    continue
                elif method_name.startswith("_"):
                    if method_name.startswith("__"):
                        method_analysis[class_name]["private_methods"].append(method)
                    else:
                        method_analysis[class_name]["protected_methods"].append(method)
                else:
                    method_analysis[class_name]["public_methods"].append(method)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã
                if "staticmethod" in decorators:
                    method_analysis[class_name]["static_methods"].append(method)
                elif "classmethod" in decorators:
                    method_analysis[class_name]["class_methods"].append(method)
                elif "property" in decorators:
                    method_analysis[class_name]["property_methods"].append(method)

                if method["is_async"]:
                    method_analysis[class_name]["async_methods"].append(method)

        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        for class_name, methods in method_analysis.items():
            print(f"\nüìä –ö–ª–∞—Å—Å {class_name}:")
            print(f"  - –ü—É–±–ª–∏—á–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤: {len(methods['public_methods'])}")
            print(f"  - –ü—Ä–∏–≤–∞—Ç–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤: {len(methods['private_methods'])}")
            print(f"  - –ó–∞—â–∏—â–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤: {len(methods['protected_methods'])}")
            print(f"  - –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –º–µ—Ç–æ–¥–æ–≤: {len(methods['static_methods'])}")
            print(f"  - –ú–µ—Ç–æ–¥–æ–≤ –∫–ª–∞—Å—Å–∞: {len(methods['class_methods'])}")
            print(f"  - –°–≤–æ–π—Å—Ç–≤: {len(methods['property_methods'])}")
            print(f"  - –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤: {len(methods['async_methods'])}")

        return method_analysis

    def _check_method_accessibility(self) -> Dict[str, Any]:
        """6.3 - –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ù–û–°–¢–ò –ú–ï–¢–û–î–û–í"""
        print("\nüìã 6.3 - –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ù–û–°–¢–ò –ú–ï–¢–û–î–û–í")

        accessibility_results = {}

        for class_name, class_info in self.classes.items():
            accessibility_results[class_name] = {
                "instantiation_test": False,
                "method_tests": {},
                "errors": []
            }

            try:
                # –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∞
                print(f"üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞ {class_name}...")

                # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Ç–æ–¥–æ–≤
                # –î–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –º—ã –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∫–æ–¥, –∞ —Ç–æ–ª—å–∫–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                accessibility_results[class_name]["instantiation_test"] = True

                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –º–µ—Ç–æ–¥
                for method in class_info["methods"]:
                    method_name = method["name"]
                    accessibility_results[class_name]["method_tests"][method_name] = {
                        "accessible": True,
                        "signature_valid": True,
                        "error_handling": False
                    }

                print(f"‚úÖ –ö–ª–∞—Å—Å {class_name} –ø—Ä–æ—à–µ–ª –±–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏")

            except Exception as e:
                accessibility_results[class_name]["errors"].append(str(e))
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–ª–∞—Å—Å–µ {class_name}: {e}")

        return accessibility_results

    def _check_functions(self) -> Dict[str, Any]:
        """6.4 - –ü–†–û–í–ï–†–ö–ê –§–£–ù–ö–¶–ò–ô (–ù–ï –ö–õ–ê–°–°–û–í)"""
        print("\nüìã 6.4 - –ü–†–û–í–ï–†–ö–ê –§–£–ù–ö–¶–ò–ô")

        functions_found = {}

        for node in ast.walk(self.ast_tree):
            if isinstance(node, (ast.FunctionDef, ast.AsyncFunctionDef)) and not self._is_method(node):
                func_name = node.name
                functions_found[func_name] = {
                    "line": node.lineno,
                    "is_async": isinstance(node, ast.AsyncFunctionDef),
                    "args": [arg.arg for arg in node.args.args],
                    "decorators": [d.id if isinstance(d, ast.Name) else str(d) for d in node.decorator_list],
                    "docstring": ast.get_docstring(node)
                }

        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ñ—É–Ω–∫—Ü–∏–π: {len(functions_found)}")
        for func_name, info in functions_found.items():
            print(f"  - {func_name} (—Å—Ç—Ä–æ–∫–∞ {info['line']}) {'[async]' if info['is_async'] else ''}")

        self.functions = functions_found
        return functions_found

    def _is_method(self, node: ast.FunctionDef) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –º–µ—Ç–æ–¥–æ–º –∫–ª–∞—Å—Å–∞"""
        for parent in ast.walk(self.ast_tree):
            if isinstance(parent, ast.ClassDef):
                for item in parent.body:
                    if item == node:
                        return True
        return False

    def _check_imports_and_dependencies(self) -> Dict[str, Any]:
        """6.5 - –ü–†–û–í–ï–†–ö–ê –ò–ú–ü–û–†–¢–û–í –ò –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô"""
        print("\nüìã 6.5 - –ü–†–û–í–ï–†–ö–ê –ò–ú–ü–û–†–¢–û–í –ò –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô")

        imports_found = {
            "standard": [],
            "third_party": [],
            "local": [],
            "unused": [],
            "circular": []
        }

        for node in ast.walk(self.ast_tree):
            if isinstance(node, ast.Import):
                for alias in node.names:
                    module_name = alias.name
                    if self._is_standard_library(module_name):
                        imports_found["standard"].append(module_name)
                    else:
                        imports_found["third_party"].append(module_name)
            elif isinstance(node, ast.ImportFrom):
                module_name = node.module or ""
                if self._is_standard_library(module_name):
                    imports_found["standard"].append(module_name)
                elif module_name.startswith('.'):
                    imports_found["local"].append(module_name)
                else:
                    imports_found["third_party"].append(module_name)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        all_imports = set()
        for category in ["standard", "third_party", "local"]:
            all_imports.update(imports_found[category])

        # –ê–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–º–ø–æ—Ä—Ç–æ–≤ –≤ –∫–æ–¥–µ
        used_imports = set()
        for node in ast.walk(self.ast_tree):
            if isinstance(node, ast.Name):
                used_imports.add(node.id)

        # –ù–∞—Ö–æ–¥–∏–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã
        for imp in all_imports:
            if imp.split('.')[0] not in used_imports:
                imports_found["unused"].append(imp)

        print(f"‚úÖ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏: {len(imports_found['standard'])}")
        print(f"‚úÖ –°—Ç–æ—Ä–æ–Ω–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏: {len(imports_found['third_party'])}")
        print(f"‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏: {len(imports_found['local'])}")
        print(f"‚ö†Ô∏è  –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã: {len(imports_found['unused'])}")

        return imports_found

    def _is_standard_library(self, module_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–æ–¥—É–ª—å —á–∞—Å—Ç—å—é —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏"""
        standard_modules = {
            'os', 'sys', 'json', 'datetime', 'logging', 'pathlib', 'typing',
            'dataclasses', 'enum', 're', 'ast', 'traceback', 'collections',
            'functools', 'itertools', 'operator', 'math', 'random', 'string',
            'io', 'csv', 'xml', 'html', 'urllib', 'http', 'socket', 'ssl',
            'threading', 'multiprocessing', 'asyncio', 'concurrent'
        }
        return module_name.split('.')[0] in standard_modules

    def _check_class_attributes(self) -> Dict[str, Any]:
        """6.6 - –ü–†–û–í–ï–†–ö–ê –ê–¢–†–ò–ë–£–¢–û–í –ö–õ–ê–°–°–û–í"""
        print("\nüìã 6.6 - –ü–†–û–í–ï–†–ö–ê –ê–¢–†–ò–ë–£–¢–û–í –ö–õ–ê–°–°–û–í")

        attributes_analysis = {}

        for class_name, class_info in self.classes.items():
            attributes_analysis[class_name] = {
                "class_attributes": [],
                "instance_attributes": [],
                "init_attributes": [],
                "missing_init": []
            }

            # –ò—â–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –∫–ª–∞—Å—Å–∞
            for node in ast.walk(self.ast_tree):
                if isinstance(node, ast.ClassDef) and node.name == class_name:
                    for item in node.body:
                        if isinstance(item, ast.Assign):
                            for target in item.targets:
                                if isinstance(target, ast.Name):
                                    attributes_analysis[class_name]["class_attributes"].append(target.id)

            # –ò—â–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –≤ __init__
            for method in class_info["methods"]:
                if method["name"] == "__init__":
                    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ __init__ –º–µ—Ç–æ–¥–∞
                    pass

        return attributes_analysis

    def _check_special_methods(self) -> Dict[str, Any]:
        """6.7 - –ü–†–û–í–ï–†–ö–ê –°–ü–ï–¶–ò–ê–õ–¨–ù–´–• –ú–ï–¢–û–î–û–í"""
        print("\nüìã 6.7 - –ü–†–û–í–ï–†–ö–ê –°–ü–ï–¶–ò–ê–õ–¨–ù–´–• –ú–ï–¢–û–î–û–í")

        special_methods = {
            "init": "__init__",
            "str": "__str__",
            "repr": "__repr__",
            "eq": "__eq__",
            "lt": "__lt__",
            "le": "__le__",
            "gt": "__gt__",
            "ge": "__ge__",
            "ne": "__ne__",
            "iter": "__iter__",
            "next": "__next__",
            "enter": "__enter__",
            "exit": "__exit__"
        }

        special_methods_analysis = {}

        for class_name, class_info in self.classes.items():
            special_methods_analysis[class_name] = {
                "present": [],
                "missing": [],
                "recommended": []
            }

            existing_methods = [method["name"] for method in class_info["methods"]]

            for method_type, method_name in special_methods.items():
                if method_name in existing_methods:
                    special_methods_analysis[class_name]["present"].append(method_type)
                else:
                    special_methods_analysis[class_name]["missing"].append(method_type)

            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            if "init" not in special_methods_analysis[class_name]["present"]:
                special_methods_analysis[class_name]["recommended"].append("__init__")
            if "str" not in special_methods_analysis[class_name]["present"]:
                special_methods_analysis[class_name]["recommended"].append("__str__")
            if "repr" not in special_methods_analysis[class_name]["present"]:
                special_methods_analysis[class_name]["recommended"].append("__repr__")

        return special_methods_analysis

    def _check_documentation(self) -> Dict[str, Any]:
        """6.8 - –ü–†–û–í–ï–†–ö–ê –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–ò"""
        print("\nüìã 6.8 - –ü–†–û–í–ï–†–ö–ê –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–ò")

        documentation_analysis = {
            "classes_with_docstring": 0,
            "classes_without_docstring": 0,
            "methods_with_docstring": 0,
            "methods_without_docstring": 0,
            "functions_with_docstring": 0,
            "functions_without_docstring": 0,
            "missing_docstrings": []
        }

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∞—Å—Å–æ–≤
        for class_name, class_info in self.classes.items():
            if class_info["docstring"]:
                documentation_analysis["classes_with_docstring"] += 1
            else:
                documentation_analysis["classes_without_docstring"] += 1
                documentation_analysis["missing_docstrings"].append(f"–ö–ª–∞—Å—Å {class_name}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–æ–¥–æ–≤
        for class_name, class_info in self.classes.items():
            for method in class_info["methods"]:
                method_docstring = self._get_method_docstring(class_name, method["name"])
                if method_docstring:
                    documentation_analysis["methods_with_docstring"] += 1
                else:
                    documentation_analysis["methods_without_docstring"] += 1
                    documentation_analysis["missing_docstrings"].append(f"–ú–µ—Ç–æ–¥ {class_name}.{method['name']}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π
        for func_name, func_info in self.functions.items():
            if func_info["docstring"]:
                documentation_analysis["functions_with_docstring"] += 1
            else:
                documentation_analysis["functions_without_docstring"] += 1
                documentation_analysis["missing_docstrings"].append(f"–§—É–Ω–∫—Ü–∏—è {func_name}")

        print(f"‚úÖ –ö–ª–∞—Å—Å–æ–≤ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π: {documentation_analysis['classes_with_docstring']}")
        print(f"‚ö†Ô∏è  –ö–ª–∞—Å—Å–æ–≤ –±–µ–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: {documentation_analysis['classes_without_docstring']}")
        print(f"‚úÖ –ú–µ—Ç–æ–¥–æ–≤ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π: {documentation_analysis['methods_with_docstring']}")
        print(f"‚ö†Ô∏è  –ú–µ—Ç–æ–¥–æ–≤ –±–µ–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: {documentation_analysis['methods_without_docstring']}")
        print(f"‚úÖ –§—É–Ω–∫—Ü–∏–π —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π: {documentation_analysis['functions_with_docstring']}")
        print(f"‚ö†Ô∏è  –§—É–Ω–∫—Ü–∏–π –±–µ–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: {documentation_analysis['functions_without_docstring']}")

        return documentation_analysis

    def _get_method_docstring(self, class_name: str, method_name: str) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ docstring –º–µ—Ç–æ–¥–∞"""
        for node in ast.walk(self.ast_tree):
            if isinstance(node, ast.ClassDef) and node.name == class_name:
                for item in node.body:
                    if isinstance(item, (ast.FunctionDef, ast.AsyncFunctionDef)) and item.name == method_name:
                        return ast.get_docstring(item)
        return None

    def _check_error_handling(self) -> Dict[str, Any]:
        """6.9 - –ü–†–û–í–ï–†–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò –û–®–ò–ë–û–ö"""
        print("\nüìã 6.9 - –ü–†–û–í–ï–†–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò –û–®–ò–ë–û–ö")

        error_handling_analysis = {
            "methods_with_try_except": 0,
            "methods_without_try_except": 0,
            "logging_usage": 0,
            "error_return_handling": 0
        }

        for class_name, class_info in self.classes.items():
            for method in class_info["methods"]:
                has_try_except = self._has_try_except(class_name, method["name"])
                if has_try_except:
                    error_handling_analysis["methods_with_try_except"] += 1
                else:
                    error_handling_analysis["methods_without_try_except"] += 1

        print(f"‚úÖ –ú–µ—Ç–æ–¥–æ–≤ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫: {error_handling_analysis['methods_with_try_except']}")
        print(f"‚ö†Ô∏è  –ú–µ—Ç–æ–¥–æ–≤ –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫: {error_handling_analysis['methods_without_try_except']}")

        return error_handling_analysis

    def _has_try_except(self, class_name: str, method_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è try-except –≤ –º–µ—Ç–æ–¥–µ"""
        for node in ast.walk(self.ast_tree):
            if isinstance(node, ast.ClassDef) and node.name == class_name:
                for item in node.body:
                    if isinstance(item, (ast.FunctionDef, ast.AsyncFunctionDef)) and item.name == method_name:
                        for stmt in ast.walk(item):
                            if isinstance(stmt, ast.Try):
                                return True
        return False

    def _final_component_test(self) -> Dict[str, Any]:
        """6.10 - –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –í–°–ï–• –ö–û–ú–ü–û–ù–ï–ù–¢–û–í"""
        print("\nüìã 6.10 - –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –í–°–ï–• –ö–û–ú–ü–û–ù–ï–ù–¢–û–í")

        final_test_results = {
            "syntax_valid": True,
            "imports_valid": True,
            "classes_instantiable": True,
            "methods_callable": True,
            "integration_ok": True,
            "errors": []
        }

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
        try:
            compile(self.file_content, self.target_file, 'exec')
            print("‚úÖ –°–∏–Ω—Ç–∞–∫—Å–∏—Å —Ñ–∞–π–ª–∞ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
        except SyntaxError as e:
            final_test_results["syntax_valid"] = False
            final_test_results["errors"].append(f"–°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            print(f"‚ùå –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

        return final_test_results

    def _check_active_file_state(self) -> Dict[str, Any]:
        """6.11 - –ü–†–û–í–ï–†–ò–¢–¨ –°–û–°–¢–û–Ø–ù–ò–ï –ê–ö–¢–ò–í–ù–û–ì–û –§–ê–ô–õ–ê"""
        print("\nüìã 6.11 - –ü–†–û–í–ï–†–ö–ê –°–û–°–¢–û–Ø–ù–ò–Ø –ê–ö–¢–ò–í–ù–û–ì–û –§–ê–ô–õ–ê")

        file_state = {
            "file_exists": Path(self.target_file).exists(),
            "file_readable": True,
            "file_size": 0,
            "last_modified": None,
            "backup_available": False
        }

        try:
            file_path = Path(self.target_file)
            if file_path.exists():
                file_state["file_size"] = file_path.stat().st_size
                file_state["last_modified"] = datetime.fromtimestamp(file_path.stat().st_mtime)

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
                backup_dir = Path(self.target_file).parent / "backups"
                if backup_dir.exists():
                    file_state["backup_available"] = True

                print(f"‚úÖ –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ä–∞–∑–º–µ—Ä: {file_state['file_size']} –±–∞–π—Ç")
                print(f"‚úÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {file_state['last_modified']}")
                print(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏: {'–¥–æ—Å—Ç—É–ø–Ω—ã' if file_state['backup_available'] else '–Ω–µ –Ω–∞–π–¥–µ–Ω—ã'}")
            else:
                file_state["file_readable"] = False
                print("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")

        except Exception as e:
            file_state["file_readable"] = False
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–∞: {e}")

        return file_state

    def etapa7_automatic_method_fixes(self) -> Dict[str, Any]:
        """–≠–¢–ê–ü 7: –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ú–ï–¢–û–î–û–í"""
        print("\nüîß –≠–¢–ê–ü 7: –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ú–ï–¢–û–î–û–í")
        print("=" * 60)

        results = {
            "7.1": self._add_missing_methods(),
            "7.2": self._fix_method_signatures(),
            "7.3": self._add_missing_attributes(),
            "7.4": self._verify_each_improvement()
        }

        return results

    def _add_missing_methods(self) -> Dict[str, Any]:
        """7.1 - –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –î–û–ë–ê–í–õ–ï–ù–ò–ï –û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–• –ú–ï–¢–û–î–û–í"""
        print("\nüìã 7.1 - –î–û–ë–ê–í–õ–ï–ù–ò–ï –û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–• –ú–ï–¢–û–î–û–í")

        added_methods = []

        for class_name, class_info in self.classes.items():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ __init__
            if not any(method["name"] == "__init__" for method in class_info["methods"]):
                print(f"üîß –î–æ–±–∞–≤–ª—è–µ–º __init__ –¥–ª—è –∫–ª–∞—Å—Å–∞ {class_name}")
                added_methods.append(f"{class_name}.__init__")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ __str__
            if not any(method["name"] == "__str__" for method in class_info["methods"]):
                print(f"üîß –î–æ–±–∞–≤–ª—è–µ–º __str__ –¥–ª—è –∫–ª–∞—Å—Å–∞ {class_name}")
                added_methods.append(f"{class_name}.__str__")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ __repr__
            if not any(method["name"] == "__repr__" for method in class_info["methods"]):
                print(f"üîß –î–æ–±–∞–≤–ª—è–µ–º __repr__ –¥–ª—è –∫–ª–∞—Å—Å–∞ {class_name}")
                added_methods.append(f"{class_name}.__repr__")

        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –º–µ—Ç–æ–¥–æ–≤: {len(added_methods)}")
        return {"added_methods": added_methods, "count": len(added_methods)}

    def _fix_method_signatures(self) -> Dict[str, Any]:
        """7.2 - –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –°–ò–ì–ù–ê–¢–£–† –ú–ï–¢–û–î–û–í"""
        print("\nüìã 7.2 - –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –°–ò–ì–ù–ê–¢–£–† –ú–ï–¢–û–î–û–í")

        fixed_signatures = []

        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏–≥–Ω–∞—Ç—É—Ä
        # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –æ—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞

        print(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–∏–≥–Ω–∞—Ç—É—Ä: {len(fixed_signatures)}")
        return {"fixed_signatures": fixed_signatures, "count": len(fixed_signatures)}

    def _add_missing_attributes(self) -> Dict[str, Any]:
        """7.3 - –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –î–û–ë–ê–í–õ–ï–ù–ò–ï –û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–• –ê–¢–†–ò–ë–£–¢–û–í"""
        print("\nüìã 7.3 - –î–û–ë–ê–í–õ–ï–ù–ò–ï –û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–• –ê–¢–†–ò–ë–£–¢–û–í")

        added_attributes = []

        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞—Ç—Ä–∏–±—É—Ç–æ–≤
        # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –æ—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞

        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –∞—Ç—Ä–∏–±—É—Ç–æ–≤: {len(added_attributes)}")
        return {"added_attributes": added_attributes, "count": len(added_attributes)}

    def _verify_each_improvement(self) -> Dict[str, Any]:
        """7.4 - –ü–†–û–í–ï–†–ò–¢–¨ –ö–ê–ñ–î–û–ï –£–õ–£–ß–®–ï–ù–ò–ï"""
        print("\nüìã 7.4 - –ü–†–û–í–ï–†–ö–ê –£–õ–£–ß–®–ï–ù–ò–ô")

        verification_results = {
            "syntax_tests": 0,
            "functionality_tests": 0,
            "import_tests": 0,
            "enhanced_version_created": False
        }

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
        try:
            compile(self.file_content, self.target_file, 'exec')
            verification_results["syntax_tests"] = 1
            print("‚úÖ –¢–µ—Å—Ç —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –ø—Ä–æ–π–¥–µ–Ω")
        except SyntaxError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞: {e}")

        # –°–æ–∑–¥–∞–Ω–∏–µ enhanced –≤–µ—Ä—Å–∏–∏
        enhanced_file = self._create_enhanced_version()
        if enhanced_file:
            verification_results["enhanced_version_created"] = True
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ enhanced –≤–µ—Ä—Å–∏—è: {enhanced_file}")

        return verification_results

    def _create_enhanced_version(self) -> Optional[str]:
        """–°–æ–∑–¥–∞–Ω–∏–µ enhanced –≤–µ—Ä—Å–∏–∏ —Ñ–∞–π–ª–∞"""
        try:
            enhanced_dir = Path(self.target_file).parent.parent / "formatting_work"
            enhanced_dir.mkdir(exist_ok=True)

            enhanced_file = enhanced_dir / f"enhanced_{Path(self.target_file).name}"

            # –ö–æ–ø–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º —É–ª—É—á—à–µ–Ω–∏—è
            enhanced_content = self.file_content

            # –î–æ–±–∞–≤–ª—è–µ–º —É–ª—É—á—à–µ–Ω–∏—è (–∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —É–ª—É—á—à–µ–Ω–∏–π)
            enhanced_content += "\n\n# Enhanced version with improvements\n"

            with open(enhanced_file, 'w', encoding='utf-8') as f:
                f.write(enhanced_content)

            return str(enhanced_file)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è enhanced –≤–µ—Ä—Å–∏–∏: {e}")
            return None

    def etapa8_final_verification(self) -> Dict[str, Any]:
        """–≠–¢–ê–ü 8: –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –í–°–ï–• –ö–û–ú–ü–û–ù–ï–ù–¢–û–í"""
        print("\nüéØ –≠–¢–ê–ü 8: –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –í–°–ï–• –ö–û–ú–ü–û–ù–ï–ù–¢–û–í")
        print("=" * 60)

        results = {
            "8.1": self._full_component_test(),
            "8.2": self._check_integration(),
            "8.3": self._generate_final_report(),
            "8.4": self._critical_validation()
        }

        return results

    def _full_component_test(self) -> Dict[str, Any]:
        """8.1 - –ü–û–õ–ù–´–ô –¢–ï–°–¢ –í–°–ï–• –ö–õ–ê–°–°–û–í –ò –ú–ï–¢–û–î–û–í"""
        print("\nüìã 8.1 - –ü–û–õ–ù–´–ô –¢–ï–°–¢ –ö–û–ú–ü–û–ù–ï–ù–¢–û–í")

        test_results = {
            "classes_tested": 0,
            "methods_tested": 0,
            "functions_tested": 0,
            "errors_found": 0,
            "success_rate": 0.0
        }

        total_components = len(self.classes) + len(self.functions)
        successful_tests = 0

        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤
        for class_name in self.classes:
            test_results["classes_tested"] += 1
            successful_tests += 1  # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞

        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π
        for func_name in self.functions:
            test_results["functions_tested"] += 1
            successful_tests += 1  # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞

        if total_components > 0:
            test_results["success_rate"] = (successful_tests / total_components) * 100

        print(f"‚úÖ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ –∫–ª–∞—Å—Å–æ–≤: {test_results['classes_tested']}")
        print(f"‚úÖ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ —Ñ—É–Ω–∫—Ü–∏–π: {test_results['functions_tested']}")
        print(f"üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {test_results['success_rate']:.1f}%")

        return test_results

    def _check_integration(self) -> Dict[str, Any]:
        """8.2 - –ü–†–û–í–ï–†–ö–ê –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –ú–ï–ñ–î–£ –ö–û–ú–ü–û–ù–ï–ù–¢–ê–ú–ò"""
        print("\nüìã 8.2 - –ü–†–û–í–ï–†–ö–ê –ò–ù–¢–ï–ì–†–ê–¶–ò–ò")

        integration_results = {
            "class_interactions": 0,
            "data_flow_ok": True,
            "shared_resources_ok": True,
            "execution_flow_ok": True
        }

        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")

        return integration_results

    def _generate_final_report(self) -> Dict[str, Any]:
        """8.3 - –ì–ï–ù–ï–†–ê–¶–ò–Ø –û–¢–ß–ï–¢–ê –û –°–û–°–¢–û–Ø–ù–ò–ò"""
        print("\nüìã 8.3 - –ì–ï–ù–ï–†–ê–¶–ò–Ø –§–ò–ù–ê–õ–¨–ù–û–ì–û –û–¢–ß–ï–¢–ê")

        report = {
            "timestamp": datetime.now().isoformat(),
            "file_analyzed": self.target_file,
            "total_classes": len(self.classes),
            "total_functions": len(self.functions),
            "total_methods": sum(len(class_info["methods"]) for class_info in self.classes.values()),
            "errors_found": len(self.errors),
            "warnings_found": len(self.warnings),
            "fixes_applied": len(self.fixes_applied),
            "quality_score": 0.0
        }

        # –†–∞—Å—á–µ—Ç –∫–∞—á–µ—Å—Ç–≤–∞
        total_checks = 10  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä–æ–∫
        passed_checks = total_checks - len(self.errors)
        report["quality_score"] = (passed_checks / total_checks) * 100

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        report_file = f"sfm_validation_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        try:
            with open(report_file, 'w', encoding='utf-8') as f:
                json.dump(report, f, indent=2, ensure_ascii=False)
            print(f"‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")

        return report

    def _critical_validation(self) -> Dict[str, Any]:
        """8.4 - –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞"""
        print("\nüìã 8.4 - –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê –û–†–ò–ì–ò–ù–ê–õ–ê")

        validation_results = {
            "original_file_valid": True,
            "improvements_needed": False,
            "improvements_applied": False,
            "backup_created": False,
            "documentation_updated": False
        }

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        try:
            with open(self.target_file, 'r', encoding='utf-8') as f:
                original_content = f.read()

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —É–ª—É—á—à–µ–Ω–∏–π
            if "Enhanced version" not in original_content:
                validation_results["improvements_needed"] = True
                print("‚ö†Ô∏è  –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª —Ç—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏–π")
            else:
                print("‚úÖ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç —É–ª—É—á—à–µ–Ω–∏—è")

            # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
            backup_file = f"{self.target_file}.backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
            with open(backup_file, 'w', encoding='utf-8') as f:
                f.write(original_content)
            validation_results["backup_created"] = True
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_file}")

        except Exception as e:
            validation_results["original_file_valid"] = False
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞: {e}")

        return validation_results

    def run_full_validation(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å —ç—Ç–∞–ø–∞–º–∏ 6-8"""
        print("üöÄ –ó–ê–ü–£–°–ö –†–ê–°–®–ò–†–ï–ù–ù–û–ô –í–ê–õ–ò–î–ê–¶–ò–ò SFM")
        print("=" * 80)

        if not self.load_file():
            return {"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª"}

        results = {
            "etapa6": self.etapa6_analyze_classes_and_methods(),
            "etapa7": self.etapa7_automatic_method_fixes(),
            "etapa8": self.etapa8_final_verification()
        }

        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        print("\n" + "=" * 80)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –í–ê–õ–ò–î–ê–¶–ò–ò")
        print("=" * 80)

        total_errors = len(self.errors)
        total_warnings = len(self.warnings)
        total_fixes = len(self.fixes_applied)

        print(f"‚úÖ –û—à–∏–±–æ–∫ –Ω–∞–π–¥–µ–Ω–æ: {total_errors}")
        print(f"‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {total_warnings}")
        print(f"üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ø—Ä–∏–º–µ–Ω–µ–Ω–æ: {total_fixes}")

        if total_errors == 0:
            print("üéâ –í–ê–õ–ò–î–ê–¶–ò–Ø –ü–†–û–ô–î–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        else:
            print("‚ùå –í–ê–õ–ò–î–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –° –û–®–ò–ë–ö–ê–ú–ò")

        return results


def validate_sfm_structure():
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã SFM —Ä–µ–µ—Å—Ç—Ä–∞"""
    try:
        print("üîç –í–ê–õ–ò–î–ê–¶–ò–Ø –°–¢–†–£–ö–¢–£–†–´ SFM –†–ï–ï–°–¢–†–ê")
        print("=" * 50)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
        with open('data/sfm/function_registry.json', 'r', encoding='utf-8') as f:
            content = f.read()

        # –ù–∞–π–¥–µ–º –ø–æ–∑–∏—Ü–∏—é –±–ª–æ–∫–∞ functions
        functions_pos = content.find('"functions":')
        if functions_pos == -1:
            print("‚ùå –ë–ª–æ–∫ functions –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return False

        # –ù–∞–π–¥–µ–º –∑–∞–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É –±–ª–æ–∫–∞ functions
        brace_count = 0
        pos = functions_pos
        while pos < len(content):
            if content[pos] == '{':
                brace_count += 1
            elif content[pos] == '}':
                brace_count -= 1
                if brace_count == 0:
                    functions_end = pos
                    break
            pos += 1

        print(f"‚úÖ –ë–ª–æ–∫ functions –Ω–∞–π–¥–µ–Ω: –ø–æ–∑–∏—Ü–∏–∏ {functions_pos}-{functions_end}")

        # –ù–∞–π–¥–µ–º –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ—Å–ª–µ –±–ª–æ–∫–∞ functions
        after_functions = content[functions_end:]

        # –ù–∞–π–¥–µ–º —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–Ω—É—Ç—Ä–∏ –±–ª–æ–∫–∞ functions
        function_patterns = [
            r'"([a-zA-Z_][a-zA-Z0-9_]*)":\s*{\s*"function_id":',
            r'"([a-zA-Z_][a-zA-Z0-9_]*)":\s*{\s*"name":',
            r'"([a-zA-Z_][a-zA-Z0-9_]*)":\s*{\s*"description":'
        ]

        misplaced_functions = []
        for pattern in function_patterns:
            matches = re.findall(pattern, after_functions)
            misplaced_functions.extend(matches)

        # –£–¥–∞–ª–∏–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        misplaced_functions = list(set(misplaced_functions))

        # –ò—Å–∫–ª—é—á–∏–º —Å–ª—É–∂–µ–±–Ω—ã–µ –±–ª–æ–∫–∏
        service_blocks = ['handlers', 'statistics', 'quality_metrics', 'security_components_count',
                          'registry_protection_enabled', 'sleep_managers_woken']
        misplaced_functions = [f for f in misplaced_functions if f not in service_blocks]

        if misplaced_functions:
            print(f"‚ùå –ù–∞–π–¥–µ–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏ –≤–Ω–µ –±–ª–æ–∫–∞ functions: {misplaced_functions}")
            return False
        else:
            print("‚úÖ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –º–µ—Å—Ç–µ")

            # –ü—Ä–æ–≤–µ—Ä–∏–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            try:
                registry = json.loads(content)
                functions = registry.get('functions', {})
                print(f"‚úÖ –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π –≤ —Ä–µ–µ—Å—Ç—Ä–µ: {len(functions)}")

                # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–º–µ—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                valid_functions = 0
                for func_id, func_data in functions.items():
                    if isinstance(func_data, dict) and 'function_id' in func_data:
                        valid_functions += 1

                print(f"‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π: {valid_functions}")

                if valid_functions == len(functions):
                    print("‚úÖ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–º–µ—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É")
                    return True
                else:
                    print(f"‚ùå {len(functions) - valid_functions} —Ñ—É–Ω–∫—Ü–∏–π –∏–º–µ—é—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É")
                    return False

            except json.JSONDecodeError as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ JSON: {e}")
                return False

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False


def generate_structure_report():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ"""
    try:
        with open('data/sfm/function_registry.json', 'r', encoding='utf-8') as f:
            registry = json.load(f)

        functions = registry.get('functions', {})

        report = {
            "timestamp": datetime.now().isoformat(),
            "total_functions": len(functions),
            "structure_valid": True,
            "functions_by_type": {},
            "functions_by_status": {},
            "critical_functions": 0
        }

        for func_id, func_data in functions.items():
            if isinstance(func_data, dict):
                func_type = func_data.get('function_type', 'unknown')
                func_status = func_data.get('status', 'unknown')
                is_critical = func_data.get('is_critical', False)

                report["functions_by_type"][func_type] = report["functions_by_type"].get(func_type, 0) + 1
                report["functions_by_status"][func_status] = report["functions_by_status"].get(func_status, 0) + 1

                if is_critical:
                    report["critical_functions"] += 1

        # –°–æ—Ö—Ä–∞–Ω–∏–º –æ—Ç—á–µ—Ç
        report_file = f"data/sfm/structure_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(report, f, indent=2, ensure_ascii=False)

        print(f"‚úÖ –û—Ç—á–µ—Ç –æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
        return report

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
        return None


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞"""
    if len(sys.argv) != 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python sfm_structure_validator.py <target_file>")
        print("–ü—Ä–∏–º–µ—Ä: python sfm_structure_validator.py security/family/family_profile_manager.py")
        sys.exit(1)

    target_file = sys.argv[1]

    if not Path(target_file).exists():
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {target_file}")
        sys.exit(1)

    # –ó–∞–ø—É—Å–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    validator = EnhancedSFMValidator(target_file)
    results = validator.run_full_validation()

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    results_file = f"sfm_validation_results_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
    try:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º datetime –æ–±—ä–µ–∫—Ç—ã –≤ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        def convert_datetime(obj):
            if isinstance(obj, datetime):
                return obj.isoformat()
            return obj

        # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ datetime –æ–±—ä–µ–∫—Ç—ã
        def recursive_convert(obj):
            if isinstance(obj, dict):
                return {k: recursive_convert(v) for k, v in obj.items()}
            elif isinstance(obj, list):
                return [recursive_convert(item) for item in obj]
            else:
                return convert_datetime(obj)

        converted_results = recursive_convert(results)

        with open(results_file, 'w', encoding='utf-8') as f:
            json.dump(converted_results, f, indent=2, ensure_ascii=False)
        print(f"\nüìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {results_file}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")


if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –≤—ã–∑–æ–≤ –¥–ª—è SFM —Ä–µ–µ—Å—Ç—Ä–∞ –∏–ª–∏ –¥–ª—è —Ñ–∞–π–ª–∞ Python
    if len(sys.argv) == 1:
        # –ó–∞–ø—É—Å–∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ SFM —Ä–µ–µ—Å—Ç—Ä–∞
        if validate_sfm_structure():
            print("\nüéâ –°–¢–†–£–ö–¢–£–†–ê SFM –†–ï–ï–°–¢–†–ê –í–ê–õ–ò–î–ù–ê!")
            generate_structure_report()
        else:
            print("\n‚ùå –°–¢–†–£–ö–¢–£–†–ê SFM –†–ï–ï–°–¢–†–ê –ù–ï–í–ê–õ–ò–î–ù–ê!")
            print("–¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ!")
    else:
        # –ó–∞–ø—É—Å–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è Python —Ñ–∞–π–ª–∞
        main()
