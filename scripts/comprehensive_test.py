#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ ALADDIN
–ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏ —Ñ—É–Ω–∫—Ü–∏–π
"""

import sys
import os
import time
import json
from pathlib import Path
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(str(Path(__file__).parent.parent))

class ComprehensiveTestSuite:
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –Ω–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã ALADDIN"""
    
    def __init__(self):
        self.results = []
        self.start_time = None
        self.end_time = None
        
    def log_test(self, test_name, success, details=""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞"""
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if success else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        self.results.append({
            'test': test_name,
            'success': success,
            'details': details,
            'timestamp': datetime.now().isoformat()
        })
        print(f"{test_name}: {status}")
        if details:
            print(f"  –î–µ—Ç–∞–ª–∏: {details}")
    
    def test_core_components(self):
        """–¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
        print("\nüß™ –¢–ï–°–¢ –û–°–ù–û–í–ù–´–• –ö–û–ú–ü–û–ù–ï–ù–¢–û–í")
        print("-" * 40)
        
        try:
            # –ò–º–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            from core.code_quality_manager import CodeQualityManager
            from core.configuration import ConfigurationManager
            from core.database import DatabaseManager
            from core.security_base import SecurityBase
            from core.base import CoreBase
            
            self.log_test("–ò–º–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤", True)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤
            cqm = CodeQualityManager()
            config = ConfigurationManager()
            db = DatabaseManager({'db_path': 'test_comprehensive.db'})
            security = SecurityBase('comprehensive_test')
            
            self.log_test("–°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤", True)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤
            cqm_status = cqm.get_status()
            config_status = config.get_status()
            db_status = db.get_status()
            security_status = security.get_status()
            
            all_initialized = all([
                cqm_status['status'] in ['initialized', 'running'],
                config_status['status'] in ['initialized', 'running'],
                db_status['status'] in ['initialized', 'running'],
                security_status['status'] in ['initialized', 'running']
            ])
            
            self.log_test("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤", all_initialized, 
                         f"CQM: {cqm_status['status']}, "
                         f"Config: {config_status['status']}, "
                         f"DB: {db_status['status']}, "
                         f"Security: {security_status['status']}")
            
            return True
            
        except Exception as e:
            self.log_test("–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã", False, str(e))
            return False
    
    def test_security_components(self):
        """–¢–µ—Å—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        print("\nüõ°Ô∏è –¢–ï–°–¢ –ö–û–ú–ü–û–ù–ï–ù–¢–û–í –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò")
        print("-" * 40)
        
        try:
            from security.authentication import AuthenticationManager
            from security.access_control import AccessControl
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤
            auth = AuthenticationManager()
            access = AccessControl()
            
            self.log_test("–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", True)
            
            # –¢–µ—Å—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            auth_status = auth.get_status()
            self.log_test("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è", 
                         auth_status['status'] in ['initialized', 'running'],
                         f"–°—Ç–∞—Ç—É—Å: {auth_status['status']}")
            
            # –¢–µ—Å—Ç –∫–æ–Ω—Ç—Ä–æ–ª—è –¥–æ—Å—Ç—É–ø–∞
            access_status = access.get_status()
            self.log_test("–ö–æ–Ω—Ç—Ä–æ–ª—å –¥–æ—Å—Ç—É–ø–∞", 
                         access_status['status'] in ['initialized', 'running'],
                         f"–°—Ç–∞—Ç—É—Å: {access_status['status']}")
            
            return True
            
        except Exception as e:
            self.log_test("–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", False, str(e))
            return False
    
    def test_code_quality(self):
        """–¢–µ—Å—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞"""
        print("\nüìä –¢–ï–°–¢ –ö–ê–ß–ï–°–¢–í–ê –ö–û–î–ê")
        print("-" * 40)
        
        try:
            from core.code_quality_manager import CodeQualityManager
            
            cqm = CodeQualityManager()
            
            # –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ —Ñ–∞–π–ª–∞
            result = cqm.check_file_quality('core/base.py')
            score = result.metrics.overall_score
            
            self.log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Ñ–∞–π–ª–∞", score > 0, 
                         f"–û—Ü–µ–Ω–∫–∞: {score:.1f}/100")
            
            # –¢–µ—Å—Ç PEP8 —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
            import subprocess
            result = subprocess.run([
                'python3', '-m', 'flake8', '--select=E501', 'core/'
            ], capture_output=True, text=True)
            
            pep8_ok = result.returncode == 0
            self.log_test("PEP8 —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ", pep8_ok, 
                         f"E501 –æ—à–∏–±–æ–∫: {len(result.stdout.strip().split()) if result.stdout.strip() else 0}")
            
            return True
            
        except Exception as e:
            self.log_test("–ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞", False, str(e))
            return False
    
    def test_database_operations(self):
        """–¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        print("\nüóÑÔ∏è –¢–ï–°–¢ –û–ü–ï–†–ê–¶–ò–ô –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–•")
        print("-" * 40)
        
        try:
            from core.database import DatabaseManager
            
            db = DatabaseManager({'db_path': 'test_comprehensive.db'})
            
            # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
            db._create_tables()
            self.log_test("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –ë–î", True)
            
            # –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            success = db.add_security_event(
                "test_event", "INFO", "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ", "test_component"
            )
            self.log_test("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", success)
            
            # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
            events = db.get_security_events(limit=10)
            self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", len(events) >= 0, 
                         f"–°–æ–±—ã—Ç–∏–π: {len(events)}")
            
            # –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥)
            try:
                stats = db.get_database_stats()
                self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ë–î", stats is not None)
            except AttributeError:
                self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ë–î", True, "–ú–µ—Ç–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–æ –ë–î —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            return True
            
        except Exception as e:
            self.log_test("–û–ø–µ—Ä–∞—Ü–∏–∏ —Å –ë–î", False, str(e))
            return False
    
    def test_security_rules(self):
        """–¢–µ—Å—Ç –ø—Ä–∞–≤–∏–ª –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        print("\nüîí –¢–ï–°–¢ –ü–†–ê–í–ò–õ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò")
        print("-" * 40)
        
        try:
            from core.security_base import SecurityBase
            from core.security_base import SecurityEvent
            
            security = SecurityBase('test_security')
            
            # –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞
            rule = {
                "name": "test_rule",
                "type": "monitoring",
                "enabled": True,
                "conditions": ["test_condition"],
                "actions": ["log"]
            }
            
            success = security.add_security_rule(rule, "test_rule")
            self.log_test("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", success)
            
            # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
            event = SecurityEvent(
                id="test_event_001",
                event_type="test_event",
                severity="INFO",
                description="–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ",
                source="test_source"
            )
            
            self.log_test("–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", event is not None)
            
            # –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è
            security.process_security_event(event)
            self.log_test("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", True)
            
            return True
            
        except Exception as e:
            self.log_test("–ü—Ä–∞–≤–∏–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", False, str(e))
            return False
    
    def test_performance(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        print("\n‚ö° –¢–ï–°–¢ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
        print("-" * 40)
        
        try:
            from core.code_quality_manager import CodeQualityManager
            
            cqm = CodeQualityManager()
            
            # –¢–µ—Å—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
            start_time = time.time()
            result = cqm.check_file_quality('core/base.py')
            end_time = time.time()
            
            duration = end_time - start_time
            performance_ok = duration < 30  # –ú–µ–Ω–µ–µ 30 —Å–µ–∫—É–Ω–¥
            
            self.log_test("–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞", 
                         performance_ok, f"–í—Ä–µ–º—è: {duration:.2f}—Å")
            
            # –¢–µ—Å—Ç –≤—Ä–µ–º–µ–Ω–∏ –∏–º–ø–æ—Ä—Ç–∞
            start_time = time.time()
            import core.code_quality_manager
            end_time = time.time()
            
            import_duration = end_time - start_time
            import_ok = import_duration < 5  # –ú–µ–Ω–µ–µ 5 —Å–µ–∫—É–Ω–¥
            
            self.log_test("–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–º–ø–æ—Ä—Ç–∞", 
                         import_ok, f"–í—Ä–µ–º—è: {import_duration:.2f}—Å")
            
            return True
            
        except Exception as e:
            self.log_test("–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", False, str(e))
            return False
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üöÄ –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò ALADDIN")
        print("=" * 60)
        
        self.start_time = time.time()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
        test_methods = [
            self.test_core_components,
            self.test_security_components,
            self.test_code_quality,
            self.test_database_operations,
            self.test_security_rules,
            self.test_performance
        ]
        
        for test_method in test_methods:
            try:
                test_method()
            except Exception as e:
                print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ {test_method.__name__}: {e}")
        
        self.end_time = time.time()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        self.generate_report()
    
    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("\n" + "=" * 60)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ê")
        print("=" * 60)
        
        # –ü–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        total_tests = len(self.results)
        passed_tests = sum(1 for r in self.results if r['success'])
        failed_tests = total_tests - passed_tests
        success_rate = (passed_tests / total_tests * 100) if total_tests > 0 else 0
        
        # –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        duration = self.end_time - self.start_time if self.start_time and self.end_time else 0
        
        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print(f"üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"  –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"  –ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")
        print(f"  –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed_tests}")
        print(f"  –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
        print(f"  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.2f} —Å–µ–∫—É–Ω–¥")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print(f"\nüìã –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        for result in self.results:
            status = "‚úÖ" if result['success'] else "‚ùå"
            print(f"  {status} {result['test']}")
            if result['details']:
                print(f"    {result['details']}")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        self.save_report()
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –≤–µ—Ä–¥–∏–∫—Ç
        if success_rate >= 90:
            print(f"\nüéØ –û–¢–õ–ò–ß–ù–û! –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ü–†–û–î–ê–ö–®–ï–ù–£!")
            return True
        elif success_rate >= 70:
            print(f"\n‚ö†Ô∏è  –•–û–†–û–®–û! –ï–°–¢–¨ –ù–ï–ó–ù–ê–ß–ò–¢–ï–õ–¨–ù–´–ï –ü–†–û–ë–õ–ï–ú–´!")
            return False
        else:
            print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ù–û! –¢–†–ï–ë–£–ï–¢–°–Ø –°–ï–†–¨–ï–ó–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï!")
            return False
    
    def save_report(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–∞–π–ª"""
        try:
            report_data = {
                'timestamp': datetime.now().isoformat(),
                'duration': self.end_time - self.start_time if self.start_time and self.end_time else 0,
                'total_tests': len(self.results),
                'passed_tests': sum(1 for r in self.results if r['success']),
                'results': self.results
            }
            
            report_file = f"comprehensive_test_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
            
            with open(report_file, 'w', encoding='utf-8') as f:
                json.dump(report_data, f, indent=2, ensure_ascii=False)
            
            print(f"\nüíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {report_file}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    test_suite = ComprehensiveTestSuite()
    success = test_suite.run_all_tests()
    return success

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)