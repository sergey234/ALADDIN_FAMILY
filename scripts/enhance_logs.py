#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–£–ª—É—á—à–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–æ–≤
–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–æ–ª—å—à–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –ª–æ–≥–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏

–ê–≤—Ç–æ—Ä: ALADDIN Security Team
–í–µ—Ä—Å–∏—è: 1.0
–î–∞—Ç–∞: 2025-09-08
"""

import sys
import os
import time
import requests
from datetime import datetime, timedelta
from typing import List

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from elasticsearch_simulator import LogLevel, LogEntry


def create_enhanced_logs() -> List[LogEntry]:
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –ª–æ–≥–æ–≤"""
    
    logs = []
    base_time = datetime.now()
    
    # –°–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏
    system_logs = [
        ("SystemManager", "INFO", "–°–∏—Å—Ç–µ–º–∞ ALADDIN –∑–∞–ø—É—â–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"),
        ("SystemManager", "INFO", "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"),
        ("SystemManager", "INFO", "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–π–¥–µ–Ω–∞"),
        ("SystemManager", "WARNING", "–í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ —Å–∏—Å—Ç–µ–º—É"),
        ("SystemManager", "INFO", "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"),
        ("SystemManager", "ERROR", "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –≤–Ω–µ—à–Ω–µ–º—É API"),
        ("SystemManager", "INFO", "–°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ —Ä–µ–∂–∏–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è"),
        ("SystemManager", "INFO", "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Å–±–æ—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ"),
    ]
    
    # –õ–æ–≥–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    security_logs = [
        ("SecurityManager", "INFO", "–°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞"),
        ("SecurityManager", "WARNING", "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"),
        ("SecurityManager", "CRITICAL", "–ü–æ–ø—ã—Ç–∫–∞ –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞"),
        ("SecurityManager", "INFO", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"),
        ("SecurityManager", "WARNING", "–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –Ω–µ—É–¥–∞—á–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –≤—Ö–æ–¥–∞"),
        ("SecurityManager", "INFO", "–°–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞"),
        ("SecurityManager", "CRITICAL", "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∞—Ç–∞–∫–∞ —Ç–∏–ø–∞ DDoS"),
        ("SecurityManager", "INFO", "–£–≥—Ä–æ–∑–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞"),
        ("ThreatDetectionAgent", "INFO", "–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –≤–∏—Ä—É—Å—ã –∑–∞–≤–µ—Ä—à–µ–Ω–æ"),
        ("ThreatDetectionAgent", "WARNING", "–û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª"),
        ("ThreatDetectionAgent", "CRITICAL", "–û–±–Ω–∞—Ä—É–∂–µ–Ω —Ç—Ä–æ—è–Ω—Å–∫–∏–π –∫–æ–Ω—å"),
        ("ThreatDetectionAgent", "INFO", "–§–∞–π–ª –ø–æ–º–µ—â–µ–Ω –≤ –∫–∞—Ä–∞–Ω—Ç–∏–Ω"),
    ]
    
    # –õ–æ–≥–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    performance_logs = [
        ("PerformanceMonitor", "INFO", "CPU –∑–∞–≥—Ä—É–∑–∫–∞: 45%"),
        ("PerformanceMonitor", "WARNING", "CPU –∑–∞–≥—Ä—É–∑–∫–∞: 85%"),
        ("PerformanceMonitor", "INFO", "–ü–∞–º—è—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞: 2.1 GB"),
        ("PerformanceMonitor", "WARNING", "–ü–∞–º—è—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞: 7.8 GB"),
        ("PerformanceMonitor", "INFO", "–î–∏—Å–∫ –∑–∞–ø–æ–ª–Ω–µ–Ω –Ω–∞ 60%"),
        ("PerformanceMonitor", "WARNING", "–î–∏—Å–∫ –∑–∞–ø–æ–ª–Ω–µ–Ω –Ω–∞ 90%"),
        ("PerformanceMonitor", "INFO", "–°–µ—Ç–µ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: 1.2 MB/s"),
        ("PerformanceMonitor", "WARNING", "–í—ã—Å–æ–∫–∞—è —Å–µ—Ç–µ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: 15.3 MB/s"),
    ]
    
    # –°–µ–º–µ–π–Ω—ã–µ –ª–æ–≥–∏
    family_logs = [
        ("FamilyManager", "INFO", "–°–æ–∑–¥–∞–Ω –ø—Ä–æ—Ñ–∏–ª—å —Ä–µ–±–µ–Ω–∫–∞: –ê–Ω–Ω–∞, 8 –ª–µ—Ç"),
        ("FamilyManager", "INFO", "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Ä–µ–±–µ–Ω–∫–∞"),
        ("FamilyManager", "WARNING", "–†–µ–±–µ–Ω–æ–∫ –ø—ã—Ç–∞–µ—Ç—Å—è –∑–∞–π—Ç–∏ –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–π —Å–∞–π—Ç"),
        ("FamilyManager", "INFO", "–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"),
        ("FamilyManager", "INFO", "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—è–º"),
        ("FamilyManager", "INFO", "–°–æ–∑–¥–∞–Ω –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–∂–∏–ª–æ–≥–æ: –ò–≤–∞–Ω, 72 –≥–æ–¥–∞"),
        ("FamilyManager", "INFO", "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∑–∞—â–∏—Ç–∞ –æ—Ç –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞"),
        ("FamilyManager", "WARNING", "–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∑–≤–æ–Ω–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"),
    ]
    
    # –õ–æ–≥–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    database_logs = [
        ("DatabaseManager", "INFO", "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"),
        ("DatabaseManager", "INFO", "–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ"),
        ("DatabaseManager", "INFO", "–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ"),
        ("DatabaseManager", "ERROR", "–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"),
        ("DatabaseManager", "WARNING", "–ú–µ–¥–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"),
        ("DatabaseManager", "INFO", "–ò–Ω–¥–µ–∫—Å—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω—ã"),
        ("DatabaseManager", "INFO", "–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞"),
    ]
    
    # –õ–æ–≥–∏ API
    api_logs = [
        ("APIGateway", "INFO", "–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –∫ API –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"),
        ("APIGateway", "INFO", "–ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∑–∞ 45ms"),
        ("APIGateway", "WARNING", "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç IP"),
        ("APIGateway", "ERROR", "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞"),
        ("APIGateway", "INFO", "API –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É"),
        ("APIGateway", "WARNING", "–ú–µ–¥–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç API: 2.3s"),
    ]
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –ª–æ–≥–∏
    all_logs = system_logs + security_logs + performance_logs + family_logs + database_logs + api_logs
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã LogEntry
    for i, (component, level, message) in enumerate(all_logs):
        log_time = base_time - timedelta(minutes=i*2, seconds=i*30)
        
        # –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ª–æ–≥–∞
        metadata = {
            "log_id": f"enhanced_log_{i+1:03d}",
            "source": "enhancement_script",
            "timestamp": log_time.isoformat()
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        if "CPU" in message:
            metadata["cpu_usage"] = 45 + (i % 50)
        elif "–ü–∞–º—è—Ç—å" in message:
            metadata["memory_usage"] = 2.1 + (i % 5)
        elif "–î–∏—Å–∫" in message:
            metadata["disk_usage"] = 60 + (i % 30)
        elif "—Å–µ—Ç—å" in message.lower():
            metadata["network_speed"] = 1.2 + (i % 10)
        elif "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" in message.lower():
            metadata["user_id"] = f"user_{i % 100:03d}"
        elif "—Ä–µ–±–µ–Ω–æ–∫" in message.lower():
            metadata["child_id"] = f"child_{i % 10:02d}"
            metadata["age"] = 8 + (i % 10)
        
        log_entry = LogEntry(
            timestamp=log_time,
            level=LogLevel(level),
            component=component,
            message=message,
            metadata=metadata,
            log_id=metadata["log_id"]
        )
        
        logs.append(log_entry)
    
    return logs


def add_logs_to_elasticsearch(logs: List[LogEntry]):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –≤ Elasticsearch —á–µ—Ä–µ–∑ API"""
    
    base_url = "http://localhost:5001/api/elasticsearch"
    
    print(f"üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ {len(logs)} –ª–æ–≥–æ–≤ –≤ Elasticsearch...")
    
    success_count = 0
    error_count = 0
    
    for i, log in enumerate(logs):
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç API
            log_data = {
                "timestamp": log.timestamp.isoformat(),
                "level": log.level.value,
                "component": log.component,
                "message": log.message,
                "metadata": log.metadata,
                "log_id": log.log_id
            }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ API
            response = requests.post(f"{base_url}/index", json=log_data, timeout=5)
            
            if response.status_code == 200:
                result = response.json()
                if result.get('success'):
                    success_count += 1
                    if (i + 1) % 10 == 0:
                        print(f"   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {i + 1}/{len(logs)} –ª–æ–≥–æ–≤")
                else:
                    error_count += 1
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∞ {i + 1}: {result.get('error')}")
            else:
                error_count += 1
                print(f"   ‚ùå HTTP –æ—à–∏–±–∫–∞ {response.status_code} –¥–ª—è –ª–æ–≥–∞ {i + 1}")
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            time.sleep(0.1)
            
        except Exception as e:
            error_count += 1
            print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –ª–æ–≥–∞ {i + 1}: {e}")
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–æ–≤:")
    print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}")
    print(f"   ‚ùå –û—à–∏–±–æ–∫: {error_count}")
    print(f"   üìù –í—Å–µ–≥–æ: {len(logs)}")
    
    return success_count, error_count


def test_enhanced_search():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
    
    base_url = "http://localhost:5001/api/elasticsearch"
    
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞...")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    test_queries = [
        ("security", "–ü–æ–∏—Å–∫ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"),
        ("error", "–ü–æ–∏—Å–∫ –æ—à–∏–±–æ–∫"),
        ("warning", "–ü–æ–∏—Å–∫ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π"),
        ("child", "–ü–æ–∏—Å–∫ –ø–æ –¥–µ—Ç—è–º"),
        ("performance", "–ü–æ–∏—Å–∫ –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"),
        ("database", "–ü–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"),
        ("api", "–ü–æ–∏—Å–∫ –ø–æ API"),
        ("", "–í—Å–µ –ª–æ–≥–∏")
    ]
    
    for query, description in test_queries:
        try:
            response = requests.get(f"{base_url}/search?q={query}&limit=5", timeout=5)
            if response.status_code == 200:
                data = response.json()
                print(f"   {description}: {data['hits']} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ '{query}': {response.status_code}")
        except Exception as e:
            print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ '{query}': {e}")


def get_elasticsearch_stats():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Elasticsearch"""
    
    base_url = "http://localhost:5001/api/elasticsearch"
    
    try:
        response = requests.get(f"{base_url}/stats", timeout=5)
        if response.status_code == 200:
            stats = response.json()
            print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Elasticsearch:")
            print(f"   üìù –í—Å–µ–≥–æ –ª–æ–≥–æ–≤: {stats['total_logs']}")
            print(f"   üìÅ –ò–Ω–¥–µ–∫—Å–æ–≤: {len(stats['indices'])}")
            print(f"   üîç –ü–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['search_queries']}")
            print(f"   üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É—Ä–æ–≤–Ω—è–º:")
            for level, count in stats['level_distribution'].items():
                print(f"      - {level}: {count}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")


if __name__ == "__main__":
    print("üöÄ –£–ª—É—á—à–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–æ–≤ ALADDIN")
    print("=" * 50)
    
    # 1. –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –ª–æ–≥–æ–≤
    print("1. –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –ª–æ–≥–æ–≤...")
    enhanced_logs = create_enhanced_logs()
    print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(enhanced_logs)} –ª–æ–≥–æ–≤")
    
    # 2. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ Elasticsearch
    print("\n2. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –≤ Elasticsearch...")
    success, errors = add_logs_to_elasticsearch(enhanced_logs)
    
    # 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞
    test_enhanced_search()
    
    # 4. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    get_elasticsearch_stats()
    
    print("\n" + "=" * 50)
    if success > 0:
        print("üéâ –£–õ–£–ß–®–ï–ù–ò–ï –õ–û–ì–û–í –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
        print(f"üìù –î–æ–±–∞–≤–ª–µ–Ω–æ {success} –Ω–æ–≤—ã—Ö –ª–æ–≥–æ–≤")
        print("\nüí° –¢–µ–ø–µ—Ä—å –≤ —Å–∏—Å—Ç–µ–º–µ –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏:")
        print("   - –†–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –ª–æ–≥–æ–≤ (—Å–∏—Å—Ç–µ–º–∞, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å, —Å–µ–º—å—è)")
        print("   - –†–∞–∑–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏ (INFO, WARNING, ERROR, CRITICAL)")
        print("   - –ë–æ–≥–∞—Ç—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∏—Å–∫–∞")
        print("   - –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤")
        print("\nüåê –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É–ª—É—á—à–µ–Ω–∏—è –≤ –¥–∞—à–±–æ—Ä–¥–µ: http://localhost:5000")
    else:
        print("‚ùå –£–õ–£–ß–®–ï–ù–ò–ï –õ–û–ì–û–í –ù–ï –£–î–ê–õ–û–°–¨!")
        print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ Elasticsearch API –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 5001")