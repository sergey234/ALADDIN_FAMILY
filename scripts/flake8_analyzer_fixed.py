#!/usr/bin/env python3
"""
–¢–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫ flake8
"""

import re
import json
from collections import Counter
import matplotlib.pyplot as plt

def analyze_flake8_file(filename):
    """–ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ —Å –æ—à–∏–±–∫–∞–º–∏ flake8"""
    error_counts = Counter()
    total_errors = 0
    files_with_errors = set()
    
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()
                if not line:
                    continue
                
                # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω: file.py:line:col: E123 error message
                match = re.match(r'^([^:]+):(\d+):(\d+):\s+([EWF]\d+)\s+(.*)$', line)
                if match:
                    file_path = match.group(1)
                    error_code = match.group(4)
                    error_counts[error_code] += 1
                    total_errors += 1
                    files_with_errors.add(file_path)
                else:
                    # –ü–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π –ø–∞—Ç—Ç–µ—Ä–Ω
                    if ':' in line and any(code in line for code in ['E501', 'W293', 'E302', 'F401']):
                        parts = line.split(':')
                        if len(parts) >= 4:
                            file_path = parts[0]
                            error_part = parts[2].strip()
                            if error_part and any(code in error_part for code in ['E', 'W', 'F']):
                                error_code = error_part.split()[0]
                                if re.match(r'^[EWF]\d+$', error_code):
                                    error_counts[error_code] += 1
                                    total_errors += 1
                                    files_with_errors.add(file_path)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {filename}: {e}")
    
    return error_counts, total_errors, len(files_with_errors)

def create_error_chart(error_counts, title, filename):
    """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –æ—à–∏–±–æ–∫"""
    if not error_counts:
        print(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {title}")
        return
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É
    sorted_errors = sorted(error_counts.items(), key=lambda x: x[1], reverse=True)
    
    # –ë–µ—Ä–µ–º —Ç–æ–ø-15 –æ—à–∏–±–æ–∫
    top_errors = sorted_errors[:15]
    error_codes = [item[0] for item in top_errors]
    error_counts_list = [item[1] for item in top_errors]
    
    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
    plt.figure(figsize=(12, 8))
    bars = plt.bar(range(len(error_codes)), error_counts_list, color='skyblue', edgecolor='navy', alpha=0.7)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
    plt.title(f'{title}\n–í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {sum(error_counts_list)}', fontsize=14, fontweight='bold')
    plt.xlabel('–ö–æ–¥—ã –æ—à–∏–±–æ–∫ flake8', fontsize=12)
    plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫', fontsize=12)
    plt.xticks(range(len(error_codes)), error_codes, rotation=45, ha='right')
    plt.grid(axis='y', alpha=0.3)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
    for i, (bar, count) in enumerate(zip(bars, error_counts_list)):
        plt.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 0.5, 
                str(count), ha='center', va='bottom', fontsize=10)
    
    plt.tight_layout()
    plt.savefig(filename, dpi=300, bbox_inches='tight')
    plt.close()
    
    print(f"–ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")

def create_comparison_chart(data, filename):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞"""
    categories = list(data.keys())
    error_types = ['E501', 'W293', 'E302', 'F401', 'E128', 'F811', 'E402', 'W291', 'E302', 'E305']
    
    # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
    chart_data = {}
    for category in categories:
        chart_data[category] = [data[category].get(error_type, 0) for error_type in error_types]
    
    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
    fig, ax = plt.subplots(figsize=(14, 8))
    
    x = range(len(error_types))
    width = 0.25
    
    colors = ['#FF6B6B', '#4ECDC4', '#45B7D1']
    
    for i, (category, values) in enumerate(chart_data.items()):
        ax.bar([pos + width * i for pos in x], values, width, 
               label=category, color=colors[i % len(colors)], alpha=0.8)
    
    ax.set_xlabel('–¢–∏–ø—ã –æ—à–∏–±–æ–∫ flake8', fontsize=12)
    ax.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫', fontsize=12)
    ax.set_title('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ flake8 –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º', fontsize=14, fontweight='bold')
    ax.set_xticks([pos + width for pos in x])
    ax.set_xticklabels(error_types, rotation=45, ha='right')
    ax.legend()
    ax.grid(axis='y', alpha=0.3)
    
    plt.tight_layout()
    plt.savefig(filename, dpi=300, bbox_inches='tight')
    plt.close()
    
    print(f"–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç –¢–û–ß–ù–´–ô –ê–ù–ê–õ–ò–ó –û–®–ò–ë–û–ö FLAKE8")
    print("=" * 50)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–∏ —Ñ–∞–π–ª–∞
    files_to_analyze = [
        ("flake8_all_474_files.txt", "–í—Å–µ 474 —Ñ–∞–π–ª–∞ —Å–∏—Å—Ç–µ–º—ã"),
        ("flake8_security_242_files.txt", "242 —Ñ–∞–π–ª–∞ —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"),
        ("flake8_sfm_only.txt", "Safe Function Manager")
    ]
    
    all_data = {}
    
    for filename, title in files_to_analyze:
        print(f"\nüìä –ê–Ω–∞–ª–∏–∑: {title}")
        print("-" * 30)
        
        error_counts, total_errors, files_with_errors = analyze_flake8_file(filename)
        all_data[title] = error_counts
        
        print(f"–í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {total_errors}")
        print(f"–§–∞–π–ª–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏: {files_with_errors}")
        print(f"–¢–æ–ø-10 –æ—à–∏–±–æ–∫:")
        
        for error_code, count in list(error_counts.most_common(10)):
            print(f"  {error_code}: {count}")
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫
        chart_filename = f"flake8_chart_{filename.replace('.txt', '')}.png"
        create_error_chart(error_counts, title, chart_filename)
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫
    print(f"\nüìà –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞...")
    create_comparison_chart(all_data, "flake8_comparison_chart.png")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    report = {
        "analysis_timestamp": "2025-09-13T22:55:00",
        "categories": {}
    }
    
    for filename, title in files_to_analyze:
        error_counts, total_errors, files_with_errors = analyze_flake8_file(filename)
        report["categories"][title] = {
            "total_errors": total_errors,
            "files_with_errors": files_with_errors,
            "error_breakdown": dict(error_counts)
        }
    
    with open("flake8_analysis_report.json", "w", encoding="utf-8") as f:
        json.dump(report, f, indent=2, ensure_ascii=False)
    
    print(f"\nüíæ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: flake8_analysis_report.json")
    print("\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == "__main__":
    main()