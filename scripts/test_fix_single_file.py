#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–º–ø–æ—Ä—Ç–æ–≤ –Ω–∞ –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ
"""

import os
import re
import subprocess
import shutil
from pathlib import Path
from datetime import datetime

class SingleFileFixer:
    def __init__(self, target_file):
        self.target_file = Path(target_file)
        self.backup_file = self.target_file.with_suffix('.py.backup')
        self.stats = {
            "imports_moved": 0,
            "sys_path_removed": 0,
            "errors_before": 0,
            "errors_after": 0
        }
        
    def create_backup(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ —Ñ–∞–π–ª–∞"""
        print(f"üîÑ –°–û–ó–î–ê–ù–ò–ï –†–ï–ó–ï–†–í–ù–û–ô –ö–û–ü–ò–ò: {self.target_file}")
        print("=" * 60)
        
        shutil.copy2(self.target_file, self.backup_file)
        print(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {self.backup_file}")
        
    def check_errors_before(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—à–∏–±–∫–∏ –î–û –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        print(f"\nüîç –ü–†–û–í–ï–†–ö–ê –û–®–ò–ë–û–ö –î–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø")
        print("=" * 60)
        
        cmd = [
            "python3", "-m", "flake8",
            "--max-line-length=120",
            str(self.target_file)
        ]
        
        try:
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=30)
            error_lines = [line for line in result.stdout.split('\n') if line.strip()]
            self.stats["errors_before"] = len(error_lines)
            
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ –æ—à–∏–±–æ–∫: {len(error_lines)}")
            
            if error_lines:
                print("üìã –ü–µ—Ä–≤—ã–µ 10 –æ—à–∏–±–æ–∫:")
                for i, error in enumerate(error_lines[:10]):
                    print(f"   {i+1}. {error}")
                    
                # –ü–æ–¥—Å—á–µ—Ç —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
                error_types = {}
                for line in error_lines:
                    match = re.match(r".*:(\d+):(\d+): ([A-Z]\d+)", line)
                    if match:
                        error_code = match.group(3)
                        error_types[error_code] = error_types.get(error_code, 0) + 1
                
                print(f"\nüìä –¢–ò–ü–´ –û–®–ò–ë–û–ö:")
                for code, count in sorted(error_types.items(), key=lambda x: x[1], reverse=True):
                    print(f"   ‚Ä¢ {code}: {count} –æ—à–∏–±–æ–∫")
                    
            return len(error_lines)
            
        except subprocess.TimeoutExpired:
            print("‚ùå Flake8 –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏")
            return 0
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ flake8: {e}")
            return 0
            
    def fix_imports(self):
        """–ò—Å–ø—Ä–∞–≤–∏—Ç—å –∏–º–ø–æ—Ä—Ç—ã –≤ —Ñ–∞–π–ª–µ"""
        print(f"\nüîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ò–ú–ü–û–†–¢–û–í –í {self.target_file}")
        print("=" * 60)
        
        try:
            with open(self.target_file, 'r', encoding='utf-8') as f:
                lines = f.readlines()
                
            print(f"üìÑ –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª: {len(lines)} —Å—Ç—Ä–æ–∫")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–∞
            imports = []
            sys_path_lines = []
            other_lines = []
            in_header = True
            
            for i, line in enumerate(lines):
                if in_header and (line.strip().startswith('#') or line.strip().startswith('"""') or line.strip().startswith("'''")):
                    other_lines.append((i, line))
                elif in_header and not (line.strip().startswith('#') or line.strip().startswith('"""') or line.strip().startswith("'''")):
                    in_header = False
                    other_lines.append((i, line))
                elif "sys.path.append" in line:
                    sys_path_lines.append((i, line))
                elif "import " in line or "from " in line:
                    imports.append((i, line))
                else:
                    other_lines.append((i, line))
                    
            print(f"üìä –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞:")
            print(f"   ‚Ä¢ –ò–º–ø–æ—Ä—Ç—ã: {len(imports)}")
            print(f"   ‚Ä¢ sys.path.append: {len(sys_path_lines)}")
            print(f"   ‚Ä¢ –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏: {len(other_lines)}")
            
            if not imports and not sys_path_lines:
                print("‚úÖ –§–∞–π–ª –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
                return False
                
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
            if sys_path_lines:
                print(f"\nüö® –ù–ê–ô–î–ï–ù–´ sys.path.append:")
                for i, line in sys_path_lines:
                    print(f"   –°—Ç—Ä–æ–∫–∞ {i+1}: {line.strip()}")
                    
            if imports:
                print(f"\nüì¶ –ù–ê–ô–î–ï–ù–´ –ò–ú–ü–û–†–¢–´:")
                for i, line in imports[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                    print(f"   –°—Ç—Ä–æ–∫–∞ {i+1}: {line.strip()}")
                if len(imports) > 5:
                    print(f"   ... –∏ –µ—â–µ {len(imports) - 5} –∏–º–ø–æ—Ä—Ç–æ–≤")
                    
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            new_lines = []
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            header_end = 0
            for i, line in other_lines:
                if not (line.strip().startswith('#') or line.strip().startswith('"""') or line.strip().startswith("'''")):
                    header_end = i
                    break
                new_lines.append(line)
                
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if imports:
                new_lines.extend([line for _, line in imports])
                self.stats["imports_moved"] = len(imports)
                
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ (–∏—Å–∫–ª—é—á–∞—è sys.path.append)
            for i, line in other_lines:
                if "sys.path.append" not in line:
                    new_lines.append(line)
                else:
                    self.stats["sys_path_removed"] += 1
                    
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with open(self.target_file, 'w', encoding='utf-8') as f:
                f.writelines(new_lines)
                
            print(f"‚úÖ –§–∞–π–ª –∏—Å–ø—Ä–∞–≤–ª–µ–Ω:")
            print(f"   ‚Ä¢ –ü–µ—Ä–µ–º–µ—â–µ–Ω–æ –∏–º–ø–æ—Ä—Ç–æ–≤: {self.stats['imports_moved']}")
            print(f"   ‚Ä¢ –£–¥–∞–ª–µ–Ω–æ sys.path.append: {self.stats['sys_path_removed']}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
            return False
            
    def check_errors_after(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—à–∏–±–∫–∏ –ü–û–°–õ–ï –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        print(f"\nüîç –ü–†–û–í–ï–†–ö–ê –û–®–ò–ë–û–ö –ü–û–°–õ–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø")
        print("=" * 60)
        
        cmd = [
            "python3", "-m", "flake8",
            "--max-line-length=120",
            str(self.target_file)
        ]
        
        try:
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=30)
            error_lines = [line for line in result.stdout.split('\n') if line.strip()]
            self.stats["errors_after"] = len(error_lines)
            
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ –æ—à–∏–±–æ–∫: {len(error_lines)}")
            
            if error_lines:
                print("üìã –û—Å—Ç–∞–≤—à–∏–µ—Å—è –æ—à–∏–±–∫–∏:")
                for i, error in enumerate(error_lines[:10]):
                    print(f"   {i+1}. {error}")
                    
                # –ü–æ–¥—Å—á–µ—Ç —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
                error_types = {}
                for line in error_lines:
                    match = re.match(r".*:(\d+):(\d+): ([A-Z]\d+)", line)
                    if match:
                        error_code = match.group(3)
                        error_types[error_code] = error_types.get(error_code, 0) + 1
                
                print(f"\nüìä –¢–ò–ü–´ –û–°–¢–ê–í–®–ò–•–°–Ø –û–®–ò–ë–û–ö:")
                for code, count in sorted(error_types.items(), key=lambda x: x[1], reverse=True):
                    print(f"   ‚Ä¢ {code}: {count} –æ—à–∏–±–æ–∫")
            else:
                print("üéâ –û–¢–õ–ò–ß–ù–û! –û—à–∏–±–æ–∫ flake8 –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
                
            return len(error_lines)
            
        except subprocess.TimeoutExpired:
            print("‚ùå Flake8 –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏")
            return 0
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ flake8: {e}")
            return 0
            
    def show_comparison(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –î–û –∏ –ü–û–°–õ–ï"""
        print(f"\nüìä –°–†–ê–í–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
        print("=" * 60)
        
        errors_fixed = self.stats["errors_before"] - self.stats["errors_after"]
        improvement = (errors_fixed / self.stats["errors_before"] * 100) if self.stats["errors_before"] > 0 else 0
        
        print(f"üìà –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        print(f"   ‚Ä¢ –û—à–∏–±–æ–∫ –î–û: {self.stats['errors_before']}")
        print(f"   ‚Ä¢ –û—à–∏–±–æ–∫ –ü–û–°–õ–ï: {self.stats['errors_after']}")
        print(f"   ‚Ä¢ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: {errors_fixed}")
        print(f"   ‚Ä¢ –£–ª—É—á—à–µ–Ω–∏–µ: {improvement:.1f}%")
        print(f"   ‚Ä¢ –ü–µ—Ä–µ–º–µ—â–µ–Ω–æ –∏–º–ø–æ—Ä—Ç–æ–≤: {self.stats['imports_moved']}")
        print(f"   ‚Ä¢ –£–¥–∞–ª–µ–Ω–æ sys.path.append: {self.stats['sys_path_removed']}")
        
        if self.stats["errors_after"] == 0:
            print("\nüéâ –£–°–ü–ï–•! –§–∞–π–ª –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω!")
        elif errors_fixed > 0:
            print(f"\n‚úÖ –•–û–†–û–®–û! –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ {errors_fixed} –æ—à–∏–±–æ–∫")
        else:
            print("\n‚ö†Ô∏è  –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞")
            
    def restore_backup(self):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–∞–π–ª –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
        print(f"\nüîÑ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ò–ó –†–ï–ó–ï–†–í–ù–û–ô –ö–û–ü–ò–ò")
        print("=" * 60)
        
        if self.backup_file.exists():
            shutil.copy2(self.backup_file, self.target_file)
            print(f"‚úÖ –§–∞–π–ª –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {self.target_file}")
        else:
            print(f"‚ùå –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {self.backup_file}")
            
    def run_test(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –Ω–∞ –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ"""
        print(f"üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ù–ê –û–î–ù–û–ú –§–ê–ô–õ–ï")
        print("=" * 60)
        print(f"üéØ –¶–µ–ª–µ–≤–æ–π —Ñ–∞–π–ª: {self.target_file}")
        print("=" * 60)
        
        start_time = datetime.now()
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
            self.create_backup()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫–∏ –î–û
            errors_before = self.check_errors_before()
            
            if errors_before == 0:
                print("‚úÖ –§–∞–π–ª —É–∂–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–æ–∫ flake8")
                return
                
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            if self.fix_imports():
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫–∏ –ü–û–°–õ–ï
                errors_after = self.check_errors_after()
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
                self.show_comparison()
                
            end_time = datetime.now()
            duration = end_time - start_time
            
            print(f"\n‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration}")
            
        except Exception as e:
            print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
            print("üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...")
            self.restore_backup()

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ —Ñ–∞–π–ª–µ vpn_protocols.py
    target_file = "security/vpn/interfaces/vpn_protocols.py"
    
    if not Path(target_file).exists():
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {target_file}")
        print("üìÅ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ security/vpn/protocols/:")
        protocols_dir = Path("security/vpn/protocols/")
        if protocols_dir.exists():
            for f in protocols_dir.glob("*.py"):
                print(f"   ‚Ä¢ {f}")
    else:
        fixer = SingleFileFixer(target_file)
        fixer.run_test()