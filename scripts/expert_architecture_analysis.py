#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Å–∏—Å—Ç–µ–º—ã ALADDIN
–¢—â–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –º–µ—Å—Ç–∞
"""

import sys
import os
import re
from pathlib import Path
from collections import defaultdict

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(str(Path(__file__).parent.parent))

def analyze_file_content(file_path):
    """–ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        analysis = {
            'classes': [],
            'functions': [],
            'imports': [],
            'dependencies': [],
            'purpose': 'unknown',
            'category': 'unknown'
        }
        
        # –ü–æ–∏—Å–∫ –∫–ª–∞—Å—Å–æ–≤
        class_matches = re.findall(r'class\s+(\w+)', content)
        analysis['classes'] = class_matches
        
        # –ü–æ–∏—Å–∫ —Ñ—É–Ω–∫—Ü–∏–π
        func_matches = re.findall(r'def\s+(\w+)', content)
        analysis['functions'] = func_matches
        
        # –ü–æ–∏—Å–∫ –∏–º–ø–æ—Ä—Ç–æ–≤
        import_matches = re.findall(r'from\s+(\S+)\s+import|import\s+(\S+)', content)
        analysis['imports'] = [imp[0] or imp[1] for imp in import_matches]
        
        # –ê–Ω–∞–ª–∏–∑ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        content_lower = content.lower()
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
        if any(keyword in content_lower for keyword in ['class', 'agent', 'ai', 'intelligence']):
            if 'agent' in content_lower and 'ai' in content_lower:
                analysis['category'] = 'ai_agent'
            elif 'manager' in content_lower:
                analysis['category'] = 'manager'
            elif 'engine' in content_lower or 'system' in content_lower:
                analysis['category'] = 'engine'
            elif 'bot' in content_lower:
                analysis['category'] = 'bot'
            elif 'analyzer' in content_lower or 'detector' in content_lower:
                analysis['category'] = 'analyzer'
            elif 'service' in content_lower or 'microservice' in content_lower:
                analysis['category'] = 'microservice'
            elif 'model' in content_lower or 'base' in content_lower:
                analysis['category'] = 'model'
            elif 'integration' in content_lower:
                analysis['category'] = 'integration'
            elif 'utils' in content_lower or 'helper' in content_lower:
                analysis['category'] = 'utils'
            elif 'config' in content_lower:
                analysis['category'] = 'config'
            elif 'core' in content_lower or 'singleton' in content_lower:
                analysis['category'] = 'core'
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        if 'emergency' in content_lower:
            analysis['purpose'] = 'emergency'
        elif 'security' in content_lower:
            analysis['purpose'] = 'security'
        elif 'notification' in content_lower:
            analysis['purpose'] = 'notification'
        elif 'analytics' in content_lower:
            analysis['purpose'] = 'analytics'
        elif 'voice' in content_lower or 'speech' in content_lower:
            analysis['purpose'] = 'voice'
        elif 'family' in content_lower:
            analysis['purpose'] = 'family'
        elif 'elderly' in content_lower:
            analysis['purpose'] = 'elderly'
        elif 'child' in content_lower or 'parental' in content_lower:
            analysis['purpose'] = 'parental'
        
        return analysis
        
    except Exception as e:
        return {'error': str(e)}

def analyze_existing_structure():
    """–ê–Ω–∞–ª–∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫"""
    print("üîç –ê–ù–ê–õ–ò–ó –°–£–©–ï–°–¢–í–£–Æ–©–ï–ô –°–¢–†–£–ö–¢–£–†–´ –ü–ê–ü–û–ö")
    print("=" * 80)
    
    existing_folders = {
        "security/ai_agents/": "AI –∞–≥–µ–Ω—Ç—ã",
        "security/bots/": "–ë–æ—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", 
        "security/managers/": "–ú–µ–Ω–µ–¥–∂–µ—Ä—ã",
        "security/microservices/": "–ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—ã",
        "security/privacy/": "–ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å",
        "security/ci_cd/": "CI/CD",
        "core/": "–û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏",
        "config/": "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"
    }
    
    for folder, description in existing_folders.items():
        if os.path.exists(folder):
            files_count = len([f for f in os.listdir(folder) if f.endswith('.py')])
            print(f"‚úÖ {folder} - {description} ({files_count} —Ñ–∞–π–ª–æ–≤)")
        else:
            print(f"‚ùå {folder} - {description} (–ù–ï –°–£–©–ï–°–¢–í–£–ï–¢)")
    
    return existing_folders

def analyze_undefined_files_detailed():
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    print("\nüîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ù–ï–û–ü–†–ï–î–ï–õ–ï–ù–ù–´–• –§–ê–ô–õ–û–í")
    print("=" * 80)
    
    undefined_files = [
        "anti_fraud_master_ai.py",
        "voice_response_generator.py", 
        "natural_language_processor.py",
        "family_communication_replacement.py",
        "emergency_id_generator.py",
        "parent_control_panel.py",
        "emergency_models.py",
        "emergency_ml_models.py",
        "emergency_formatters.py",
        "emergency_base_models.py",
        "emergency_base_models_refactored.py",
        "emergency_statistics_models.py",
        "emergency_service.py",
        "emergency_service_caller.py",
        "messenger_integration.py",
        "circuit_breaker.py",
        "rate_limiter.py",
        "put_to_sleep.py",
        "simple_sleep.py",
        "configuration.py",
        "singleton.py",
        "logging_module.py",
        "code_quality_config.py",
        "safe_config.py",
        "replacement_components_config.py"
    ]
    
    file_analysis = {}
    
    for file_name in undefined_files:
        print(f"\nüìÅ –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞: {file_name}")
        print("-" * 60)
        
        # –ò—â–µ–º —Ñ–∞–π–ª
        found_path = None
        for root, dirs, files in os.walk("."):
            if file_name in files:
                found_path = os.path.join(root, file_name)
                break
        
        if not found_path:
            print("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            continue
            
        print(f"üìç –ù–∞–π–¥–µ–Ω: {found_path}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        analysis = analyze_file_content(found_path)
        
        if 'error' in analysis:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {analysis['error']}")
            continue
        
        print(f"üè∑Ô∏è  –ö–ª–∞—Å—Å—ã: {analysis['classes']}")
        print(f"‚öôÔ∏è  –§—É–Ω–∫—Ü–∏–∏: {len(analysis['functions'])} —Ñ—É–Ω–∫—Ü–∏–π")
        print(f"üì¶ –ò–º–ø–æ—Ä—Ç—ã: {len(analysis['imports'])} –∏–º–ø–æ—Ä—Ç–æ–≤")
        print(f"üéØ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {analysis['category']}")
        print(f"üí° –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: {analysis['purpose']}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ
        suggested_location = determine_correct_location(file_name, analysis)
        print(f"‚úÖ –î–û–õ–ñ–ï–ù –ë–´–¢–¨: {suggested_location}")
        
        file_analysis[file_name] = {
            'current_path': found_path,
            'analysis': analysis,
            'suggested_location': suggested_location
        }
    
    return file_analysis

def determine_correct_location(file_name, analysis):
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –¥–ª—è —Ñ–∞–π–ª–∞"""
    file_lower = file_name.lower()
    category = analysis['category']
    purpose = analysis['purpose']
    classes = analysis['classes']
    
    # –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Å—Ç–∞
    if category == 'ai_agent':
        return "security/ai_agents/"
    elif category == 'manager':
        return "security/managers/"
    elif category == 'engine':
        return "security/ai_agents/"  # –î–≤–∏–∂–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è –≤ ai_agents
    elif category == 'bot':
        return "security/bots/"
    elif category == 'analyzer':
        return "security/ai_agents/"  # –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä—ã –æ—Å—Ç–∞—é—Ç—Å—è –≤ ai_agents
    elif category == 'microservice':
        return "security/microservices/"
    elif category == 'model':
        return "security/ai_agents/"  # –ú–æ–¥–µ–ª–∏ –æ—Å—Ç–∞—é—Ç—Å—è –≤ ai_agents
    elif category == 'integration':
        return "security/ai_agents/"  # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –≤ ai_agents
    elif category == 'utils':
        return "security/ai_agents/"  # –£—Ç–∏–ª–∏—Ç—ã –æ—Å—Ç–∞—é—Ç—Å—è –≤ ai_agents
    elif category == 'config':
        return "config/"
    elif category == 'core':
        return "core/"
    else:
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏
        if 'anti_fraud' in file_lower:
            return "security/ai_agents/"  # AI –∞–≥–µ–Ω—Ç
        elif 'voice' in file_lower or 'speech' in file_lower:
            return "security/ai_agents/"  # AI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
        elif 'natural_language' in file_lower:
            return "security/ai_agents/"  # AI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
        elif 'family_communication' in file_lower:
            return "security/ai_agents/"  # AI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
        elif 'parent_control' in file_lower:
            return "security/ai_agents/"  # AI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
        elif 'emergency_id' in file_lower:
            return "security/ai_agents/"  # –£—Ç–∏–ª–∏—Ç–∞
        elif 'circuit_breaker' in file_lower:
            return "security/ci_cd/"  # CI/CD –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
        elif 'rate_limiter' in file_lower:
            return "security/microservices/"  # –ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å
        elif 'sleep' in file_lower:
            return "security/microservices/"  # –ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å
        else:
            return "security/ai_agents/"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é

def create_detailed_migration_plan(file_analysis):
    """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –º–∏–≥—Ä–∞—Ü–∏–∏"""
    print("\nüìã –î–ï–¢–ê–õ–¨–ù–´–ô –ü–õ–ê–ù –ú–ò–ì–†–ê–¶–ò–ò")
    print("=" * 80)
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ –¥–µ–π—Å—Ç–≤–∏—è–º
    actions = {
        "‚úÖ –û–°–¢–ê–í–ò–¢–¨ –ù–ê –ú–ï–°–¢–ï": [],
        "üîÑ –ü–ï–†–ï–ú–ï–°–¢–ò–¢–¨": [],
        "‚ùì –¢–†–ï–ë–£–ï–¢ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê": []
    }
    
    for file_name, data in file_analysis.items():
        current_path = data['current_path']
        suggested_location = data['suggested_location']
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é –ø–∞–ø–∫—É
        current_folder = os.path.dirname(current_path)
        if current_folder.endswith('/'):
            current_folder = current_folder[:-1]
        
        if suggested_location in current_folder:
            actions["‚úÖ –û–°–¢–ê–í–ò–¢–¨ –ù–ê –ú–ï–°–¢–ï"].append(file_name)
        elif suggested_location != "‚ùì –ù–ï–û–ü–†–ï–î–ï–õ–ï–ù–ù–û":
            actions["üîÑ –ü–ï–†–ï–ú–ï–°–¢–ò–¢–¨"].append((file_name, current_path, suggested_location))
        else:
            actions["‚ùì –¢–†–ï–ë–£–ï–¢ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê"].append(file_name)
    
    # –í—ã–≤–æ–¥–∏–º –ø–ª–∞–Ω
    for action_type, files in actions.items():
        if files:
            print(f"\n{action_type} ({len(files)} —Ñ–∞–π–ª–æ–≤):")
            for item in files:
                if isinstance(item, tuple):
                    file_name, current_path, suggested_location = item
                    print(f"  ‚Ä¢ {file_name}")
                    print(f"    –û—Ç–∫—É–¥–∞: {current_path}")
                    print(f"    –ö—É–¥–∞: {suggested_location}")
                else:
                    print(f"  ‚Ä¢ {item}")
    
    return actions

def create_step_by_step_migration_plan(actions):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞ –º–∏–≥—Ä–∞—Ü–∏–∏"""
    print("\nüöÄ –ü–û–®–ê–ì–û–í–´–ô –ü–õ–ê–ù –ú–ò–ì–†–ê–¶–ò–ò")
    print("=" * 80)
    
    print("\nüìã –≠–¢–ê–ü 1: –ü–û–î–ì–û–¢–û–í–ö–ê")
    print("-" * 40)
    print("1.1 –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã")
    print("1.2 –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –º–µ–∂–¥—É —Ñ–∞–π–ª–∞–º–∏")
    print("1.3 –°–æ–∑–¥–∞—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–∞–ø–∫–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)")
    
    print("\nüìã –≠–¢–ê–ü 2: –ü–ï–†–ï–ú–ï–©–ï–ù–ò–ï –§–ê–ô–õ–û–í")
    print("-" * 40)
    
    step = 1
    for file_name, current_path, suggested_location in actions["üîÑ –ü–ï–†–ï–ú–ï–°–¢–ò–¢–¨"]:
        print(f"\n{step}. –ü–ï–†–ï–ú–ï–©–ï–ù–ò–ï: {file_name}")
        print(f"   üìç –û—Ç–∫—É–¥–∞: {current_path}")
        print(f"   üìç –ö—É–¥–∞: {suggested_location}")
        print(f"   üîß –ö–æ–º–∞–Ω–¥–∞: mv {current_path} {suggested_location}")
        print(f"   ‚ö†Ô∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞: python3 -c \"import {file_name[:-3]}\"")
        step += 1
    
    print("\nüìã –≠–¢–ê–ü 3: –û–ë–ù–û–í–õ–ï–ù–ò–ï –ò–ú–ü–û–†–¢–û–í")
    print("-" * 40)
    print("3.1 –ù–∞–π—Ç–∏ –≤—Å–µ —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç –ø–µ—Ä–µ–º–µ—â–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏")
    print("3.2 –û–±–Ω–æ–≤–∏—Ç—å –ø—É—Ç–∏ –∏–º–ø–æ—Ä—Ç–æ–≤")
    print("3.3 –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤")
    
    print("\nüìã –≠–¢–ê–ü 4: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï")
    print("-" * 40)
    print("4.1 –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã –∏–º–ø–æ—Ä—Ç–æ–≤")
    print("4.2 –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã")
    print("4.3 –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É SFM")
    
    print("\nüìã –≠–¢–ê–ü 5: –í–ê–õ–ò–î–ê–¶–ò–Ø")
    print("-" * 40)
    print("5.1 –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã –Ω–∞ —Å–≤–æ–∏—Ö –º–µ—Å—Ç–∞—Ö")
    print("5.2 –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    print("5.3 –û–±–Ω–æ–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –≠–ö–°–ü–ï–†–¢–ù–´–ô –ê–ù–ê–õ–ò–ó –ê–†–•–ò–¢–ï–ö–¢–£–†–´ –°–ò–°–¢–ï–ú–´ ALADDIN")
    print("=" * 80)
    
    # –ê–Ω–∞–ª–∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    existing_folders = analyze_existing_structure()
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    file_analysis = analyze_undefined_files_detailed()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –º–∏–≥—Ä–∞—Ü–∏–∏
    actions = create_detailed_migration_plan(file_analysis)
    
    # –ü–æ—à–∞–≥–æ–≤—ã–π –ø–ª–∞–Ω
    create_step_by_step_migration_plan(actions)
    
    print("\nüéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:")
    print("=" * 50)
    print("‚úÖ –ü—Ä–æ–≤–µ–¥–µ–Ω —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞")
    print("‚úÖ –û–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –º–µ—Å—Ç–∞ –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
    print("‚úÖ –°–æ–∑–¥–∞–Ω –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –º–∏–≥—Ä–∞—Ü–∏–∏")
    print("‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω—ã –ø–æ—à–∞–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏")

if __name__ == "__main__":
    main()