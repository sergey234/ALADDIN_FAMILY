#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º
–û—Å—Ç–∞–≤–ª—è–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Ç–æ–ª—å–∫–æ 50 —Å–∞–º—ã—Ö –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
"""

import json
import os
import sys
from datetime import datetime
from typing import Dict, List, Tuple

def load_sfm_registry() -> Dict:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–µ–µ—Å—Ç—Ä SFM"""
    try:
        with open('data/sfm/function_registry.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–µ—Å—Ç—Ä–∞ SFM: {e}")
        return None

def load_critical_functions_config() -> Dict:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
    try:
        with open('CRITICAL_FUNCTIONS_SLEEP_MODE_CONFIG.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return None

def identify_functions_to_sleep(registry: Dict, config: Dict) -> Tuple[List[str], List[str]]:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º –∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏"""
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    critical_functions = [func['id'] for func in config['top_50_critical_functions']]
    
    active_functions = []
    sleep_functions = []
    
    for func_id, func_data in registry['functions'].items():
        is_critical = func_data.get('is_critical', False)
        security_level = func_data.get('security_level', 'unknown')
        status = func_data.get('status', 'unknown')
        
        # –§—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–æ–π –µ—Å–ª–∏:
        # 1. –û–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –ò–õ–ò
        # 2. –û–Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –ò –∏–º–µ–µ—Ç –≤—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ò–õ–ò
        # 3. –û–Ω–∞ —É–∂–µ –æ—Ç–∫–ª—é—á–µ–Ω–∞ (–Ω–µ —Ç—Ä–æ–≥–∞–µ–º)
        if (func_id in critical_functions or 
            (is_critical and security_level in ['critical', 'high']) or
            status == 'disabled'):
            active_functions.append(func_id)
        else:
            sleep_functions.append(func_id)
    
    return active_functions, sleep_functions

def update_function_status(registry: Dict, function_ids: List[str], new_status: str) -> Dict:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Ñ—É–Ω–∫—Ü–∏–π –≤ —Ä–µ–µ—Å—Ç—Ä–µ"""
    updated_count = 0
    
    for func_id in function_ids:
        if func_id in registry['functions']:
            registry['functions'][func_id]['status'] = new_status
            registry['functions'][func_id]['last_updated'] = datetime.now().isoformat()
            if new_status == 'sleeping':
                registry['functions'][func_id]['sleep_start_time'] = datetime.now().isoformat()
                registry['functions'][func_id]['sleep_reason'] = '–ü–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤'
            updated_count += 1
    
    return updated_count

def save_updated_registry(registry: Dict) -> bool:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ä–µ–µ—Å—Ç—Ä"""
    try:
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        backup_file = f"data/sfm/function_registry_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(backup_file, 'w', encoding='utf-8') as f:
            json.dump(registry, f, ensure_ascii=False, indent=2)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ä–µ–µ—Å—Ç—Ä
        with open('data/sfm/function_registry.json', 'w', encoding='utf-8') as f:
            json.dump(registry, f, ensure_ascii=False, indent=2)
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_file}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–µ—Å—Ç—Ä–∞: {e}")
        return False

def generate_sleep_mode_report(active_functions: List[str], sleep_functions: List[str], 
                             config: Dict) -> Dict:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ –ø–µ—Ä–µ–≤–æ–¥–µ –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º"""
    
    report = {
        'timestamp': datetime.now().isoformat(),
        'strategy': config['sleep_mode_strategy']['strategy'],
        'total_functions': len(active_functions) + len(sleep_functions),
        'active_functions': {
            'count': len(active_functions),
            'percentage': round(len(active_functions) / (len(active_functions) + len(sleep_functions)) * 100, 2),
            'list': active_functions
        },
        'sleep_functions': {
            'count': len(sleep_functions),
            'percentage': round(len(sleep_functions) / (len(active_functions) + len(sleep_functions)) * 100, 2),
            'list': sleep_functions
        },
        'expected_benefits': config['expected_benefits'],
        'implementation_phases': config['implementation_plan']
    }
    
    return report

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üåô –ü–ï–†–ï–í–û–î –ù–ï –ö–†–ò–¢–ò–ß–ù–´–• –§–£–ù–ö–¶–ò–ô –í –°–ü–Ø–©–ò–ô –†–ï–ñ–ò–ú")
    print("=" * 60)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    print("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
    registry = load_sfm_registry()
    if not registry:
        return False
    
    config = load_critical_functions_config()
    if not config:
        return False
    
    print("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
    print("\nüîç –ê–Ω–∞–ª–∏–∑ —Ñ—É–Ω–∫—Ü–∏–π...")
    active_functions, sleep_functions = identify_functions_to_sleep(registry, config)
    
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ñ—É–Ω–∫—Ü–∏–π:")
    print(f"   ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {len(active_functions)}")
    print(f"   ‚Ä¢ –î–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º: {len(sleep_functions)}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-10 –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
    print(f"\nüèÜ –¢–û–ü-10 –ê–ö–¢–ò–í–ù–´–• –§–£–ù–ö–¶–ò–ô:")
    print("-" * 40)
    for i, func_id in enumerate(active_functions[:10], 1):
        func_data = registry['functions'].get(func_id, {})
        name = func_data.get('name', func_id)
        security_level = func_data.get('security_level', 'unknown')
        print(f"{i:2d}. {func_id} - {name} ({security_level})")
    
    if len(active_functions) > 10:
        print(f"    ... –∏ –µ—â–µ {len(active_functions) - 10} —Ñ—É–Ω–∫—Ü–∏–π")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º
    print(f"\nüò¥ –ü–ï–†–í–´–ï 10 –§–£–ù–ö–¶–ò–ô –î–õ–Ø –ü–ï–†–ï–í–û–î–ê –í –°–ü–Ø–©–ò–ô –†–ï–ñ–ò–ú:")
    print("-" * 50)
    for i, func_id in enumerate(sleep_functions[:10], 1):
        func_data = registry['functions'].get(func_id, {})
        name = func_data.get('name', func_id)
        security_level = func_data.get('security_level', 'unknown')
        print(f"{i:2d}. {func_id} - {name} ({security_level})")
    
    if len(sleep_functions) > 10:
        print(f"    ... –∏ –µ—â–µ {len(sleep_functions) - 10} —Ñ—É–Ω–∫—Ü–∏–π")
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    print(f"\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï!")
    print(f"–ë—É–¥–µ—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º: {len(sleep_functions)} —Ñ—É–Ω–∫—Ü–∏–π")
    print(f"–û—Å—Ç–∞–Ω–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º–∏: {len(active_functions)} —Ñ—É–Ω–∫—Ü–∏–π")
    
    confirm = input("\n‚ùì –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): ").strip().lower()
    if confirm != 'y':
        print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return False
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã —Ñ—É–Ω–∫—Ü–∏–π
    print(f"\nüîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π...")
    
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º
    sleep_updated = update_function_status(registry, sleep_functions, 'sleeping')
    print(f"‚úÖ –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º: {sleep_updated} —Ñ—É–Ω–∫—Ü–∏–π")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    registry['last_updated'] = datetime.now().isoformat()
    registry['total_functions'] = len(registry['functions'])
    registry['active_functions'] = len(active_functions)
    registry['sleeping_functions'] = len(sleep_functions)
    registry['disabled_functions'] = sum(1 for f in registry['functions'].values() if f.get('status') == 'disabled')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ä–µ–µ—Å—Ç—Ä
    if save_updated_registry(registry):
        print("‚úÖ –†–µ–µ—Å—Ç—Ä SFM –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–µ—Å—Ç—Ä–∞")
        return False
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    print(f"\nüìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞...")
    report = generate_sleep_mode_report(active_functions, sleep_functions, config)
    
    report_file = f"CRITICAL_FUNCTIONS_SLEEP_MODE_REPORT_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
    with open(report_file, 'w', encoding='utf-8') as f:
        json.dump(report, f, ensure_ascii=False, indent=2)
    
    print(f"‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"\nüéâ –ü–ï–†–ï–í–û–î –í –°–ü–Ø–©–ò–ô –†–ï–ñ–ò–ú –ó–ê–í–ï–†–®–ï–ù!")
    print("=" * 60)
    print(f"üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   ‚Ä¢ –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π: {report['total_functions']}")
    print(f"   ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {report['active_functions']['count']} ({report['active_functions']['percentage']}%)")
    print(f"   ‚Ä¢ –í —Å–ø—è—â–µ–º —Ä–µ–∂–∏–º–µ: {report['sleep_functions']['count']} ({report['sleep_functions']['percentage']}%)")
    print(f"   ‚Ä¢ –û—Ç–∫–ª—é—á–µ–Ω–Ω—ã—Ö: {registry['disabled_functions']}")
    
    print(f"\nüí° –û–∂–∏–¥–∞–µ–º—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:")
    for benefit, description in report['expected_benefits'].items():
        print(f"   ‚Ä¢ {benefit}: {description}")
    
    print(f"\nüìÅ –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
    print(f"   ‚Ä¢ {report_file} - –û—Ç—á–µ—Ç –æ –ø–µ—Ä–µ–≤–æ–¥–µ –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º")
    print(f"   ‚Ä¢ data/sfm/function_registry_backup_*.json - –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è")
    print(f"   ‚Ä¢ data/sfm/function_registry.json - –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ä–µ–µ—Å—Ç—Ä")
    
    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)