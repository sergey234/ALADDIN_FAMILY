#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ü§ñ –ü–†–û–ë–£–ñ–î–ï–ù–ò–ï ML –ö–û–ú–ü–û–ù–ï–ù–¢–û–í
=============================

–ü—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ –≤—Å–µ—Ö ML –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏ AI –∞–≥–µ–Ω—Ç–æ–≤
"""

import json
import os
from datetime import datetime
from typing import Set

def wake_up_ml_components():
    """–ü—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ –≤—Å–µ—Ö ML –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    
    print("ü§ñ –ü–†–û–ë–£–ñ–î–ï–ù–ò–ï ML –ö–û–ú–ü–û–ù–ï–ù–¢–û–í")
    print("=" * 50)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º SFM —Ä–µ–µ—Å—Ç—Ä
    sfm_path = "data/sfm/function_registry.json"
    
    if not os.path.exists(sfm_path):
        print(f"‚ùå –§–∞–π–ª {sfm_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    with open(sfm_path, 'r', encoding='utf-8') as f:
        data = json.load(f)
    
    functions = data.get('functions', {})
    total_functions = len(functions)
    
    print(f"üìä –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π: {total_functions}")
    
    # –ù–∞—Ö–æ–¥–∏–º ML –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    ml_functions = set()
    ai_agent_functions = set()
    bot_ml_functions = set()
    microservice_ml_functions = set()
    
    for func_id, func_data in functions.items():
        # ML —Ñ—É–Ω–∫—Ü–∏–∏
        if ('ml' in func_id.lower() or 'analyzer' in func_id.lower() or 
            'model' in func_id.lower() or 'isolation' in func_id.lower()):
            ml_functions.add(func_id)
        
        # AI –∞–≥–µ–Ω—Ç—ã
        if func_id.startswith('ai_agent_'):
            ai_agent_functions.add(func_id)
        
        # –ë–æ—Ç—ã —Å ML
        if (func_id.startswith('bot_') and 
            ('ml' in func_id.lower() or 'ai' in func_id.lower() or 
             'analyzer' in func_id.lower())):
            bot_ml_functions.add(func_id)
        
        # –ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—ã —Å ML
        if (func_id.startswith('microservice_') and 
            ('ml' in func_id.lower() or 'model' in func_id.lower() or 
             'analyzer' in func_id.lower() or 'isolation' in func_id.lower())):
            microservice_ml_functions.add(func_id)
    
    print(f"üî¨ ML —Ñ—É–Ω–∫—Ü–∏–π –Ω–∞–π–¥–µ–Ω–æ: {len(ml_functions)}")
    print(f"ü§ñ AI –∞–≥–µ–Ω—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {len(ai_agent_functions)}")
    print(f"ü§ñ –ë–æ—Ç–æ–≤ —Å ML –Ω–∞–π–¥–µ–Ω–æ: {len(bot_ml_functions)}")
    print(f"‚öôÔ∏è  –ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤ —Å ML –Ω–∞–π–¥–µ–Ω–æ: {len(microservice_ml_functions)}")
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ ML –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    all_ml_components = ml_functions | ai_agent_functions | bot_ml_functions | microservice_ml_functions
    
    print(f"\nüìã –í–°–ï–ì–û ML –ö–û–ú–ü–û–ù–ï–ù–¢–û–í –î–õ–Ø –ü–†–û–ë–£–ñ–î–ï–ù–ò–Ø: {len(all_ml_components)}")
    
    # –ü—Ä–æ–±—É–∂–¥–∞–µ–º ML –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    woken_up = 0
    for func_id in all_ml_components:
        if func_id in functions:
            functions[func_id]['status'] = 'active'
            functions[func_id]['wake_time'] = datetime.now().isoformat()
            functions[func_id]['ml_component_wake'] = True
            woken_up += 1
            print(f"‚úÖ {func_id} - –ø—Ä–æ–±—É–∂–¥–µ–Ω")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ä–µ–µ—Å—Ç—Ä
    data['functions'] = functions
    data['last_updated'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    data['ml_components_woken'] = woken_up
    
    with open(sfm_path, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)
    
    print(f"\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print(f"   –ü—Ä–æ–±—É–∂–¥–µ–Ω–æ ML –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {woken_up}")
    print(f"   SFM —Ä–µ–µ—Å—Ç—Ä –æ–±–Ω–æ–≤–ª–µ–Ω: {sfm_path}")
    
    return woken_up

if __name__ == "__main__":
    wake_up_ml_components()