#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
SFM Analyzer - –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ä–µ–µ—Å—Ç—Ä–∞ —Ñ—É–Ω–∫—Ü–∏–π SFM
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ñ—É–Ω–∫—Ü–∏—è–º –≤ System Function Manager

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python3 scripts/sfm_analyzer.py
    python3 scripts/sfm_analyzer.py --detailed
    python3 scripts/sfm_analyzer.py --export csv
    python3 scripts/sfm_analyzer.py --status active
"""

import json
import argparse
import csv
from collections import Counter
from datetime import datetime
from pathlib import Path


class SFMAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ä–µ–µ—Å—Ç—Ä–∞ —Ñ—É–Ω–∫—Ü–∏–π SFM"""
    
    def __init__(self, registry_path: str = "data/sfm/function_registry.json"):
        self.registry_path = registry_path
        self.registry = None
        self.functions = {}
        self.load_registry()
    
    def load_registry(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–µ—Å—Ç—Ä–∞ —Ñ—É–Ω–∫—Ü–∏–π"""
        try:
            with open(self.registry_path, 'r', encoding='utf-8') as f:
                self.registry = json.load(f)
            self.functions = self.registry.get('functions', {})
        except FileNotFoundError:
            print(f"‚ùå –§–∞–π–ª —Ä–µ–µ—Å—Ç—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.registry_path}")
            exit(1)
        except json.JSONDecodeError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            exit(1)
    
    def get_basic_stats(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        total = len(self.functions)
        
        # –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç—É—Å–æ–≤
        statuses = Counter()
        for func_data in self.functions.values():
            status = func_data.get('status', 'unknown')
            statuses[status] += 1
        
        return {
            'total': total,
            'statuses': statuses,
            'version': self.registry.get('version', 'unknown'),
            'last_updated': self.registry.get('last_updated', 'unknown')
        }
    
    def get_detailed_stats(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        stats = self.get_basic_stats()
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        critical_count = sum(1 for f in self.functions.values() if f.get('is_critical', False))
        auto_enable_count = sum(1 for f in self.functions.values() if f.get('auto_enable', False))
        emergency_wake_count = sum(1 for f in self.functions.values() if f.get('emergency_wake_up', False))
        
        # –¢–∏–ø—ã —Ñ—É–Ω–∫—Ü–∏–π
        function_types = Counter(f.get('function_type', 'unknown') for f in self.functions.values())
        
        # –£—Ä–æ–≤–Ω–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        security_levels = Counter(f.get('security_level', 'unknown') for f in self.functions.values())
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ –¥–∞—Ç–∞–º —Å–æ–∑–¥–∞–Ω–∏—è
        creation_dates = []
        for func_data in self.functions.values():
            created_at = func_data.get('created_at', '')
            if created_at:
                try:
                    date_obj = datetime.fromisoformat(created_at.replace('Z', '+00:00'))
                    creation_dates.append(date_obj.strftime('%Y-%m-%d'))
                except:
                    pass
        
        date_counts = Counter(creation_dates)
        
        stats.update({
            'critical_functions': critical_count,
            'auto_enable_functions': auto_enable_count,
            'emergency_wake_functions': emergency_wake_count,
            'function_types': function_types,
            'security_levels': security_levels,
            'creation_dates': date_counts
        })
        
        return stats
    
    def print_basic_report(self):
        """–í—ã–≤–æ–¥ –±–∞–∑–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        stats = self.get_basic_stats()
        
        print("=" * 50)
        print("üìä –ê–ö–¢–£–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê SFM")
        print("=" * 50)
        print(f"–í–µ—Ä—Å–∏—è —Ä–µ–µ—Å—Ç—Ä–∞: {stats['version']}")
        print(f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {stats['last_updated']}")
        print()
        
        total = stats['total']
        statuses = stats['statuses']
        
        print("–ü–∞—Ä–∞–º–µ—Ç—Ä\t\t–ó–Ω–∞—á–µ–Ω–∏–µ\t–ü—Ä–æ—Ü–µ–Ω—Ç")
        print("-" * 50)
        print(f"–í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π\t\t{total}\t\t100.0%")
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
        active = statuses.get('active', 0)
        sleeping = statuses.get('sleeping', 0)
        running = statuses.get('running', 0)
        
        print(f"–ê–∫—Ç–∏–≤–Ω—ã–µ\t\t{active}\t\t{(active/total)*100:.1f}%")
        print(f"–°–ø—è—â–∏–µ\t\t\t{sleeping}\t\t{(sleeping/total)*100:.1f}%")
        print(f"–†–∞–±–æ—Ç–∞—é—â–∏–µ\t\t{running}\t\t{(running/total)*100:.1f}%")
        
        # –î—Ä—É–≥–∏–µ —Å—Ç–∞—Ç—É—Å—ã
        other_statuses = {k: v for k, v in statuses.items() if k not in ['active', 'sleeping', 'running']}
        if other_statuses:
            print("\n–î—Ä—É–≥–∏–µ —Å—Ç–∞—Ç—É—Å—ã:")
            for status, count in sorted(other_statuses.items()):
                print(f"{status}\t\t\t{count}\t\t{(count/total)*100:.1f}%")
    
    def print_detailed_report(self):
        """–í—ã–≤–æ–¥ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        self.print_basic_report()
        
        stats = self.get_detailed_stats()
        total = stats['total']
        
        print("\n" + "=" * 50)
        print("üìà –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
        print("=" * 50)
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
        print(f"\nüî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏: {stats['critical_functions']} ({(stats['critical_functions']/total)*100:.1f}%)")
        print(f"üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∫–ª—é—á–∞–µ–º—ã–µ: {stats['auto_enable_functions']} ({(stats['auto_enable_functions']/total)*100:.1f}%)")
        print(f"üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ: {stats['emergency_wake_functions']} ({(stats['emergency_wake_functions']/total)*100:.1f}%)")
        
        # –¢–∏–ø—ã —Ñ—É–Ω–∫—Ü–∏–π
        print(f"\nüìã –¢–æ–ø-5 —Ç–∏–ø–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π:")
        for func_type, count in stats['function_types'].most_common(5):
            print(f"  {func_type}: {count} ({(count/total)*100:.1f}%)")
        
        # –£—Ä–æ–≤–Ω–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        print(f"\nüõ°Ô∏è –£—Ä–æ–≤–Ω–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:")
        for level, count in stats['security_levels'].most_common():
            print(f"  {level}: {count} ({(count/total)*100:.1f}%)")
        
        # –î–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è
        if stats['creation_dates']:
            print(f"\nüìÖ –§—É–Ω–∫—Ü–∏–∏ –ø–æ –¥–∞—Ç–∞–º —Å–æ–∑–¥–∞–Ω–∏—è:")
            for date, count in sorted(stats['creation_dates'].items()):
                print(f"  {date}: {count} —Ñ—É–Ω–∫—Ü–∏–π")
    
    def print_functions_by_status(self, status: str):
        """–í—ã–≤–æ–¥ —Ñ—É–Ω–∫—Ü–∏–π –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Å—Ç–∞—Ç—É—Å—É"""
        functions_with_status = {
            func_id: func_data for func_id, func_data in self.functions.items()
            if func_data.get('status') == status
        }
        
        if not functions_with_status:
            print(f"‚ùå –§—É–Ω–∫—Ü–∏–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '{status}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        print(f"\nüìã –§–£–ù–ö–¶–ò–ò –°–û –°–¢–ê–¢–£–°–û–ú: {status.upper()} ({len(functions_with_status)} —Ñ—É–Ω–∫—Ü–∏–π)")
        print("=" * 60)
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º
        type_groups = {}
        for func_id, func_data in functions_with_status.items():
            func_type = func_data.get('function_type', 'unknown')
            if func_type not in type_groups:
                type_groups[func_type] = []
            type_groups[func_type].append({
                'id': func_id,
                'name': func_data.get('name', 'Unknown'),
                'critical': func_data.get('is_critical', False)
            })
        
        for func_type, funcs in type_groups.items():
            print(f"\n--- {func_type.upper()} ({len(funcs)} —Ñ—É–Ω–∫—Ü–∏–π) ---")
            critical_count = sum(1 for f in funcs if f['critical'])
            if critical_count > 0:
                print(f"  (–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö: {critical_count})")
            
            for func in funcs:
                critical_mark = ' [–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø]' if func['critical'] else ''
                print(f"  - {func['name']} ({func['id']}){critical_mark}")
    
    def export_to_csv(self, filename: str = None):
        """–≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ CSV"""
        if filename is None:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"sfm_statistics_{timestamp}.csv"
        
        stats = self.get_detailed_stats()
        
        with open(filename, 'w', newline='', encoding='utf-8') as csvfile:
            writer = csv.writer(csvfile)
            
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏
            writer.writerow(['–ü–∞—Ä–∞–º–µ—Ç—Ä', '–ó–Ω–∞—á–µ–Ω–∏–µ', '–ü—Ä–æ—Ü–µ–Ω—Ç'])
            writer.writerow([])
            
            # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total = stats['total']
            statuses = stats['statuses']
            
            writer.writerow(['–í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π', total, '100.0%'])
            writer.writerow(['–ê–∫—Ç–∏–≤–Ω—ã–µ', statuses.get('active', 0), f"{(statuses.get('active', 0)/total)*100:.1f}%"])
            writer.writerow(['–°–ø—è—â–∏–µ', statuses.get('sleeping', 0), f"{(statuses.get('sleeping', 0)/total)*100:.1f}%"])
            writer.writerow(['–†–∞–±–æ—Ç–∞—é—â–∏–µ', statuses.get('running', 0), f"{(statuses.get('running', 0)/total)*100:.1f}%"])
            writer.writerow([])
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            writer.writerow(['–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏', stats['critical_functions'], f"{(stats['critical_functions']/total)*100:.1f}%"])
            writer.writerow(['–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∫–ª—é—á–∞–µ–º—ã–µ', stats['auto_enable_functions'], f"{(stats['auto_enable_functions']/total)*100:.1f}%"])
            writer.writerow(['–≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ', stats['emergency_wake_functions'], f"{(stats['emergency_wake_functions']/total)*100:.1f}%"])
            writer.writerow([])
            
            # –¢–∏–ø—ã —Ñ—É–Ω–∫—Ü–∏–π
            writer.writerow(['–¢–ò–ü–´ –§–£–ù–ö–¶–ò–ô'])
            for func_type, count in stats['function_types'].most_common():
                writer.writerow([func_type, count, f"{(count/total)*100:.1f}%"])
            writer.writerow([])
            
            # –£—Ä–æ–≤–Ω–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            writer.writerow(['–£–†–û–í–ù–ò –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò'])
            for level, count in stats['security_levels'].most_common():
                writer.writerow([level, count, f"{(count/total)*100:.1f}%"])
        
        print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ —Ñ–∞–π–ª: {filename}")
    
    def get_quick_stats(self):
        """–ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è API"""
        stats = self.get_basic_stats()
        total = stats['total']
        statuses = stats['statuses']
        
        return {
            'total_functions': total,
            'active': statuses.get('active', 0),
            'sleeping': statuses.get('sleeping', 0),
            'running': statuses.get('running', 0),
            'active_percent': (statuses.get('active', 0)/total)*100,
            'sleeping_percent': (statuses.get('sleeping', 0)/total)*100,
            'running_percent': (statuses.get('running', 0)/total)*100,
            'last_updated': stats['last_updated']
        }


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description='–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ä–µ–µ—Å—Ç—Ä–∞ —Ñ—É–Ω–∫—Ü–∏–π SFM')
    parser.add_argument('--detailed', '-d', action='store_true', 
                       help='–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É')
    parser.add_argument('--status', '-s', type=str, 
                       help='–ü–æ–∫–∞–∑–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º (active, sleeping, running)')
    parser.add_argument('--export', '-e', type=str, choices=['csv'], 
                       help='–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Ñ–∞–π–ª')
    parser.add_argument('--registry', '-r', type=str, default='data/sfm/function_registry.json',
                       help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Ä–µ–µ—Å—Ç—Ä–∞ —Ñ—É–Ω–∫—Ü–∏–π')
    
    args = parser.parse_args()
    
    # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
    analyzer = SFMAnalyzer(args.registry)
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    if args.status:
        analyzer.print_functions_by_status(args.status)
    elif args.export:
        if args.export == 'csv':
            analyzer.export_to_csv()
    elif args.detailed:
        analyzer.print_detailed_report()
    else:
        analyzer.print_basic_report()


if __name__ == "__main__":
    main()