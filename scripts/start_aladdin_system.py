#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ALADDIN Security System Startup Script
–°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã ALADDIN
"""

import os
import sys
import subprocess
import time
import logging
import json
from datetime import datetime
from typing import Dict, List, Optional

class ALADDINSystemStarter:
    """–°—Ç–∞—Ä—Ç–µ—Ä —Å–∏—Å—Ç–µ–º—ã ALADDIN"""
    
    def __init__(self):
        self.logger = self._setup_logging()
        self.system_status = {}
        self.start_time = datetime.now()
        
    def _setup_logging(self) -> logging.Logger:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler('logs/aladdin_startup.log'),
                logging.StreamHandler()
            ]
        )
        return logging.getLogger('ALADDINStarter')
    
    def start_system(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã ALADDIN"""
        try:
            self.logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã ALADDIN Security")
            self.logger.info("=" * 60)
            
            # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            if not self._check_dependencies():
                return False
            
            # 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            if not self._initialize_database():
                return False
            
            # 3. –ó–∞–ø—É—Å–∫ Docker Compose
            if not self._start_docker_compose():
                return False
            
            # 4. –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
            if not self._wait_for_services():
                return False
            
            # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
            if not self._health_check_system():
                return False
            
            # 6. –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            self._start_monitoring()
            
            # 7. –û—Ç—á–µ—Ç –æ –∑–∞–ø—É—Å–∫–µ
            self._generate_startup_report()
            
            self.logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ ALADDIN —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞!")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã: {e}")
            return False
    
    def _check_dependencies(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        self.logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
        
        dependencies = [
            ('docker', 'Docker'),
            ('docker-compose', 'Docker Compose'),
            ('python3', 'Python 3'),
            ('git', 'Git')
        ]
        
        for command, name in dependencies:
            try:
                result = subprocess.run([command, '--version'], 
                                      capture_output=True, text=True)
                if result.returncode == 0:
                    self.logger.info(f"‚úÖ {name}: {result.stdout.split()[2]}")
                else:
                    self.logger.error(f"‚ùå {name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return False
            except FileNotFoundError:
                self.logger.error(f"‚ùå {name} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                return False
        
        return True
    
    def _initialize_database(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        self.logger.info("üóÑÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
            os.makedirs('data/postgres', exist_ok=True)
            os.makedirs('data/redis', exist_ok=True)
            os.makedirs('logs', exist_ok=True)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            init_sql = 'config/database/init.sql'
            if not os.path.exists(init_sql):
                self.logger.warning(f"‚ö†Ô∏è –§–∞–π–ª {init_sql} –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π")
                self._create_basic_init_sql(init_sql)
            
            self.logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
    
    def _create_basic_init_sql(self, file_path: str):
        """–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ SQL —Ñ–∞–π–ª–∞"""
        os.makedirs(os.path.dirname(file_path), exist_ok=True)
        
        sql_content = """
-- ALADDIN Security System Database Initialization
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ö–µ–º—ã –¥–ª—è ALADDIN
CREATE SCHEMA IF NOT EXISTS aladdin;

-- –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
CREATE TABLE IF NOT EXISTS aladdin.security_functions (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    function_id VARCHAR(255) UNIQUE NOT NULL,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    function_type VARCHAR(100),
    security_level VARCHAR(50),
    status VARCHAR(50) DEFAULT 'disabled',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    is_critical BOOLEAN DEFAULT FALSE,
    auto_enable BOOLEAN DEFAULT FALSE
);

-- –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –º–µ—Ç—Ä–∏–∫
CREATE TABLE IF NOT EXISTS aladdin.system_metrics (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    service_name VARCHAR(255) NOT NULL,
    metric_name VARCHAR(255) NOT NULL,
    metric_value DECIMAL(10,2),
    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    metadata JSONB
);

-- –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –ª–æ–≥–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
CREATE TABLE IF NOT EXISTS aladdin.security_logs (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    log_level VARCHAR(20) NOT NULL,
    message TEXT NOT NULL,
    service_name VARCHAR(255),
    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    metadata JSONB
);

-- –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
CREATE INDEX IF NOT EXISTS idx_security_functions_function_id ON aladdin.security_functions(function_id);
CREATE INDEX IF NOT EXISTS idx_system_metrics_service_timestamp ON aladdin.system_metrics(service_name, timestamp);
CREATE INDEX IF NOT EXISTS idx_security_logs_timestamp ON aladdin.security_logs(timestamp);

-- –í—Å—Ç–∞–≤–∫–∞ –±–∞–∑–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
INSERT INTO aladdin.security_functions (function_id, name, description, function_type, security_level, status, is_critical, auto_enable) VALUES
('safe_function_manager', 'Safe Function Manager', '–ì–ª–∞–≤–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π', 'core', 'high', 'enabled', TRUE, TRUE),
('api_gateway', 'API Gateway', '–®–ª—é–∑ API –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤', 'microservice', 'high', 'enabled', TRUE, TRUE),
('security_monitoring', 'Security Monitoring', '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã', 'monitoring', 'high', 'enabled', TRUE, TRUE)
ON CONFLICT (function_id) DO NOTHING;

COMMIT;
"""
        
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(sql_content)
    
    def _start_docker_compose(self) -> bool:
        """–ó–∞–ø—É—Å–∫ Docker Compose"""
        self.logger.info("üê≥ –ó–∞–ø—É—Å–∫ Docker Compose...")
        
        try:
            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
            subprocess.run(['docker-compose', 'down'], 
                         capture_output=True, text=True)
            
            # –°–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫
            result = subprocess.run([
                'docker-compose', 'up', '--build', '-d'
            ], capture_output=True, text=True)
            
            if result.returncode == 0:
                self.logger.info("‚úÖ Docker Compose –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                return True
            else:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Docker Compose: {result.stderr}")
                return False
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Docker Compose: {e}")
            return False
    
    def _wait_for_services(self) -> bool:
        """–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤"""
        self.logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤...")
        
        services = [
            ('aladdin-core', 8000),
            ('aladdin-sfm', 8002),
            ('aladdin-gateway', 8003),
            ('aladdin-mesh', 8004),
            ('aladdin-ai-agents', 8005),
            ('aladdin-bots', 8006),
            ('aladdin-visualizer', 8007),
            ('aladdin-docs', 8008)
        ]
        
        max_wait_time = 300  # 5 –º–∏–Ω—É—Ç
        start_time = time.time()
        
        while time.time() - start_time < max_wait_time:
            all_ready = True
            
            for service_name, port in services:
                if not self._check_service_health(service_name, port):
                    all_ready = False
                    break
            
            if all_ready:
                self.logger.info("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –≥–æ—Ç–æ–≤—ã")
                return True
            
            self.logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤...")
            time.sleep(10)
        
        self.logger.error("‚ùå –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤")
        return False
    
    def _check_service_health(self, service_name: str, port: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
        try:
            import requests
            response = requests.get(f'http://localhost:{port}/health', 
                                  timeout=5)
            return response.status_code == 200
        except:
            return False
    
    def _health_check_system(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
        self.logger.info("üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã...")
        
        health_checks = [
            ('Core System', 'http://localhost:8000/health'),
            ('Safe Function Manager', 'http://localhost:8002/health'),
            ('API Gateway', 'http://localhost:8003/health'),
            ('Service Mesh', 'http://localhost:8004/health'),
            ('AI Agents', 'http://localhost:8005/health'),
            ('Security Bots', 'http://localhost:8006/health'),
            ('Architecture Visualizer', 'http://localhost:8007/health'),
            ('API Documentation', 'http://localhost:8008/health'),
            ('Prometheus', 'http://localhost:9090/'),
            ('Grafana', 'http://localhost:3000/api/health')
        ]
        
        failed_services = []
        
        for service_name, url in health_checks:
            try:
                import requests
                response = requests.get(url, timeout=10)
                if response.status_code == 200:
                    self.logger.info(f"‚úÖ {service_name}: OK")
                else:
                    self.logger.warning(f"‚ö†Ô∏è {service_name}: HTTP {response.status_code}")
                    failed_services.append(service_name)
            except Exception as e:
                self.logger.error(f"‚ùå {service_name}: {e}")
                failed_services.append(service_name)
        
        if failed_services:
            self.logger.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–µ—Ä–≤–∏—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {failed_services}")
            return len(failed_services) < 3  # –†–∞–∑—Ä–µ—à–∞–µ–º –¥–æ 3 –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        
        return True
    
    def _start_monitoring(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.logger.info("üìä –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—É—Å–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        self.logger.info("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω")
    
    def _generate_startup_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –∑–∞–ø—É—Å–∫–µ"""
        self.logger.info("üìã –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –∑–∞–ø—É—Å–∫–µ...")
        
        end_time = datetime.now()
        startup_time = end_time - self.start_time
        
        report = {
            "startup_time": startup_time.total_seconds(),
            "timestamp": end_time.isoformat(),
            "services": [
                {
                    "name": "ALADDIN Core",
                    "url": "http://localhost:8000",
                    "status": "running"
                },
                {
                    "name": "Safe Function Manager",
                    "url": "http://localhost:8002",
                    "status": "running"
                },
                {
                    "name": "API Gateway",
                    "url": "http://localhost:8003",
                    "status": "running"
                },
                {
                    "name": "Service Mesh",
                    "url": "http://localhost:8004",
                    "status": "running"
                },
                {
                    "name": "AI Agents",
                    "url": "http://localhost:8005",
                    "status": "running"
                },
                {
                    "name": "Security Bots",
                    "url": "http://localhost:8006",
                    "status": "running"
                },
                {
                    "name": "Architecture Visualizer",
                    "url": "http://localhost:8007",
                    "status": "running"
                },
                {
                    "name": "API Documentation",
                    "url": "http://localhost:8008",
                    "status": "running"
                },
                {
                    "name": "Prometheus",
                    "url": "http://localhost:9090",
                    "status": "running"
                },
                {
                    "name": "Grafana",
                    "url": "http://localhost:3000",
                    "status": "running"
                }
            ]
        }
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        os.makedirs('reports', exist_ok=True)
        with open(f'reports/startup_report_{end_time.strftime("%Y%m%d_%H%M%S")}.json', 'w') as f:
            json.dump(report, f, indent=2)
        
        self.logger.info("‚úÖ –û—Ç—á–µ—Ç –æ –∑–∞–ø—É—Å–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ reports/")
        self.logger.info(f"‚è±Ô∏è –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {startup_time.total_seconds():.2f} —Å–µ–∫—É–Ω–¥")
    
    def stop_system(self) -> bool:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            self.logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã ALADDIN...")
            
            result = subprocess.run(['docker-compose', 'down'], 
                                  capture_output=True, text=True)
            
            if result.returncode == 0:
                self.logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ ALADDIN –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
                return True
            else:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∏—Å—Ç–µ–º—ã: {result.stderr}")
                return False
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∏—Å—Ç–µ–º—ã: {e}")
            return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) > 1 and sys.argv[1] == 'stop':
        starter = ALADDINSystemStarter()
        starter.stop_system()
    else:
        starter = ALADDINSystemStarter()
        starter.start_system()

if __name__ == "__main__":
    main()