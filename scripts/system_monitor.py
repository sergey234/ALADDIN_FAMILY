#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ SFM
–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ CPU, RAM –∏ —Å–∫–æ—Ä–æ—Å—Ç–∏ –æ—Ç–∫–ª–∏–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π
"""

import sys
import os
import time
import psutil
import threading
from datetime import datetime
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from security.safe_function_manager import SafeFunctionManager

class SystemMonitor:
    def __init__(self):
        self.monitoring = False
        self.start_time = None
        self.baseline_cpu = 0
        self.baseline_ram = 0
        self.sfm = None
        
    def get_system_stats(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤"""
        cpu_percent = psutil.cpu_percent(interval=1)
        ram = psutil.virtual_memory()
        ram_percent = ram.percent
        ram_used_gb = ram.used / (1024**3)
        ram_total_gb = ram.total / (1024**3)
        
        return {
            'cpu_percent': cpu_percent,
            'ram_percent': ram_percent,
            'ram_used_gb': ram_used_gb,
            'ram_total_gb': ram_total_gb,
            'ram_available_gb': ram.available / (1024**3)
        }
    
    def get_sfm_stats(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ SFM"""
        if not self.sfm:
            return None
            
        total_functions = len(self.sfm.functions)
        active_count = 0
        sleeping_count = 0
        critical_count = 0
        critical_sleeping = 0
        
        for func_id, func_obj in self.sfm.functions.items():
            if getattr(func_obj, 'is_critical', False):
                critical_count += 1
                status = str(getattr(func_obj, 'status', ''))
                if 'sleep' in status.lower():
                    critical_sleeping += 1
            
            status = str(getattr(func_obj, 'status', ''))
            if 'active' in status.lower():
                active_count += 1
            elif 'sleep' in status.lower():
                sleeping_count += 1
        
        return {
            'total_functions': total_functions,
            'active_functions': active_count,
            'sleeping_functions': sleeping_count,
            'critical_functions': critical_count,
            'critical_sleeping': critical_sleeping,
            'active_percentage': (active_count / total_functions * 100) if total_functions > 0 else 0
        }
    
    def test_sfm_response_time(self, iterations=10):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –æ—Ç–∫–ª–∏–∫–∞ SFM"""
        if not self.sfm:
            return None
            
        start_time = time.time()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ SFM
        for i in range(iterations):
            # –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π
            _ = list(self.sfm.functions.keys())
            
            # –¢–µ—Å—Ç 2: –ü–æ–∏—Å–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
            critical_functions = []
            for func_id, func_obj in self.sfm.functions.items():
                if getattr(func_obj, 'is_critical', False):
                    critical_functions.append(func_id)
            
            # –¢–µ—Å—Ç 3: –ü–æ–¥—Å—á–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
            active_count = 0
            for func_id, func_obj in self.sfm.functions.items():
                status = str(getattr(func_obj, 'status', ''))
                if 'active' in status.lower():
                    active_count += 1
        
        end_time = time.time()
        total_time = end_time - start_time
        avg_response_time = total_time / iterations
        
        return {
            'total_time': total_time,
            'avg_response_time': avg_response_time,
            'operations_per_second': iterations / total_time,
            'iterations': iterations
        }
    
    def print_dashboard(self):
        """–í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏"""
        os.system('clear' if os.name == 'posix' else 'cls')
        
        print("üñ•Ô∏è  –ú–û–ù–ò–¢–û–†–ò–ù–ì –°–ò–°–¢–ï–ú–´ ALADDIN")
        print("=" * 60)
        print(f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}")
        print(f"‚è±Ô∏è  –†–∞–±–æ—Ç–∞–µ—Ç: {time.time() - self.start_time:.1f} —Å–µ–∫" if self.start_time else "‚è±Ô∏è  –ù–µ –∑–∞–ø—É—â–µ–Ω")
        print()
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
        sys_stats = self.get_system_stats()
        print("üíª –°–ò–°–¢–ï–ú–ù–´–ï –†–ï–°–£–†–°–´:")
        print(f"   üñ•Ô∏è  CPU: {sys_stats['cpu_percent']:.1f}%")
        print(f"   üíæ RAM: {sys_stats['ram_percent']:.1f}% ({sys_stats['ram_used_gb']:.2f}GB / {sys_stats['ram_total_gb']:.2f}GB)")
        print(f"   üìä –î–æ—Å—Ç—É–ø–Ω–æ RAM: {sys_stats['ram_available_gb']:.2f}GB")
        print()
        
        # SFM —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        sfm_stats = self.get_sfm_stats()
        if sfm_stats:
            print("üîß –°–¢–ê–¢–ò–°–¢–ò–ö–ê SFM:")
            print(f"   üì¶ –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π: {sfm_stats['total_functions']}")
            print(f"   ‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {sfm_stats['active_functions']} ({sfm_stats['active_percentage']:.1f}%)")
            print(f"   üí§ –°–ø—è—â–∏—Ö: {sfm_stats['sleeping_functions']}")
            print(f"   üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö: {sfm_stats['critical_functions']}")
            print(f"   ‚ö†Ô∏è  –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–ø—è—â–∏—Ö: {sfm_stats['critical_sleeping']}")
            print()
            
            # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å SFM
            perf_stats = self.test_sfm_response_time(5)
            if perf_stats:
                print("‚ö° –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨ SFM:")
                print(f"   üèÉ –°—Ä–µ–¥–Ω–∏–π –æ—Ç–∫–ª–∏–∫: {perf_stats['avg_response_time']*1000:.2f} –º—Å")
                print(f"   üöÄ –û–ø–µ—Ä–∞—Ü–∏–π/—Å–µ–∫: {perf_stats['operations_per_second']:.1f}")
                print(f"   ‚è±Ô∏è  –í—Ä–µ–º—è —Ç–µ—Å—Ç–∞: {perf_stats['total_time']:.3f} —Å–µ–∫")
                print()
        
        # –ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç –±–∞–∑–æ–≤–æ–π –ª–∏–Ω–∏–∏
        if self.baseline_cpu > 0:
            cpu_change = sys_stats['cpu_percent'] - self.baseline_cpu
            ram_change = sys_stats['ram_percent'] - self.baseline_ram
            print("üìà –ò–ó–ú–ï–ù–ï–ù–ò–Ø –û–¢ –ë–ê–ó–û–í–û–ô –õ–ò–ù–ò–ò:")
            print(f"   üñ•Ô∏è  CPU: {cpu_change:+.1f}%")
            print(f"   üíæ RAM: {ram_change:+.1f}%")
            print()
    
    def set_baseline(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–∑–æ–≤–æ–π –ª–∏–Ω–∏–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
        sys_stats = self.get_system_stats()
        self.baseline_cpu = sys_stats['cpu_percent']
        self.baseline_ram = sys_stats['ram_percent']
        print(f"‚úÖ –ë–∞–∑–æ–≤–∞—è –ª–∏–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: CPU {self.baseline_cpu:.1f}%, RAM {self.baseline_ram:.1f}%")
    
    def initialize_sfm(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SFM –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SFM –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
        
        config = {
            'thread_pool_enabled': True,
            'max_thread_pool_workers': 5,
            'async_io_enabled': True,
            'redis_cache_enabled': True,
            'enable_auto_management': False,
            'enable_sleep_mode': False
        }
        
        try:
            self.sfm = SafeFunctionManager('MonitorSFM', config)
            print(f"‚úÖ SFM –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {len(self.sfm.functions)} —Ñ—É–Ω–∫—Ü–∏–π")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SFM: {e}")
            self.sfm = None
    
    def start_monitoring(self, interval=2):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.start_time = time.time()
        self.monitoring = True
        
        print("üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã...")
        print("   –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        print()
        
        try:
            while self.monitoring:
                self.print_dashboard()
                time.sleep(interval)
        except KeyboardInterrupt:
            print("\n‚èπÔ∏è  –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            self.monitoring = False
    
    def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.monitoring = False

def main():
    monitor = SystemMonitor()
    
    print("üñ•Ô∏è  –ú–û–ù–ò–¢–û–†–ò–ù–ì –°–ò–°–¢–ï–ú–´ ALADDIN")
    print("=" * 50)
    print()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SFM
    monitor.initialize_sfm()
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–∑–æ–≤–æ–π –ª–∏–Ω–∏–∏
    print("üìä –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–∑–æ–≤–æ–π –ª–∏–Ω–∏–∏...")
    monitor.set_baseline()
    
    print()
    print("üéØ –ì–æ—Ç–æ–≤ –∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É!")
    print("   –ö–æ–º–∞–Ω–¥—ã:")
    print("   - Enter: –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å")
    print("   - 'b': –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—É—é –±–∞–∑–æ–≤—É—é –ª–∏–Ω–∏—é")
    print("   - 'm': –ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
    print("   - 'q': –í—ã—Ö–æ–¥")
    print()
    
    while True:
        try:
            command = input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: ").strip().lower()
            
            if command == '' or command == 's':
                monitor.print_dashboard()
            elif command == 'b':
                monitor.set_baseline()
            elif command == 'm':
                monitor.start_monitoring()
            elif command == 'q':
                print("üëã –í—ã—Ö–æ–¥ –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
                break
            else:
                print("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
                
        except KeyboardInterrupt:
            print("\nüëã –í—ã—Ö–æ–¥ –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
            break
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()