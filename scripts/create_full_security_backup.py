#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü–æ–ª–Ω—ã–π –±–µ–∫–∞–ø —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ ALADDIN
100% —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞

–ê–≤—Ç–æ—Ä: ALADDIN Security Team
–í–µ—Ä—Å–∏—è: 1.0
–î–∞—Ç–∞: 2025-09-10
"""

import os
import sys
import shutil
import zipfile
import tarfile
import hashlib
import json
from datetime import datetime
from pathlib import Path
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

class FullSecurityBackup:
    """–ü–æ–ª–Ω—ã–π –±–µ–∫–∞–ø —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    
    def __init__(self, source_dir: str, backup_dir: str):
        self.source_dir = Path(source_dir)
        self.backup_dir = Path(backup_dir)
        self.timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        self.backup_name = f"ALADDIN_FULL_SECURITY_BACKUP_{self.timestamp}"
        self.backup_path = self.backup_dir / self.backup_name
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'total_files': 0,
            'total_dirs': 0,
            'total_size': 0,
            'python_files': 0,
            'config_files': 0,
            'test_files': 0,
            'script_files': 0,
            'backup_files': 0,
            'errors': []
        }
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –±–µ–∫–∞–ø–∞
        self.backup_path.mkdir(parents=True, exist_ok=True)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
        self.stats['files'] = []
        
    def create_manifest(self):
        """–°–æ–∑–¥–∞–µ–º –º–∞–Ω–∏—Ñ–µ—Å—Ç –±–µ–∫–∞–ø–∞"""
        manifest = {
            'backup_name': self.backup_name,
            'timestamp': self.timestamp,
            'source_directory': str(self.source_dir),
            'backup_directory': str(self.backup_dir),
            'created_by': 'ALADDIN Security Team',
            'version': '1.0',
            'description': '–ü–æ–ª–Ω—ã–π –±–µ–∫–∞–ø —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ ALADDIN',
            'statistics': self.stats,
            'files': []
        }
        
        manifest_file = self.backup_path / "BACKUP_MANIFEST.json"
        with open(manifest_file, 'w', encoding='utf-8') as f:
            json.dump(manifest, f, indent=2, ensure_ascii=False)
        
        return manifest_file
    
    def calculate_checksum(self, file_path: Path) -> str:
        """–í—ã—á–∏—Å–ª—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é —Å—É–º–º—É —Ñ–∞–π–ª–∞"""
        try:
            hash_md5 = hashlib.md5()
            with open(file_path, "rb") as f:
                for chunk in iter(lambda: f.read(4096), b""):
                    hash_md5.update(chunk)
            return hash_md5.hexdigest()
        except Exception as e:
            self.stats['errors'].append(f"–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è checksum –¥–ª—è {file_path}: {e}")
            return "ERROR"
    
    def copy_file(self, src: Path, dst: Path) -> bool:
        """–ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π"""
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
            dst.parent.mkdir(parents=True, exist_ok=True)
            
            # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
            shutil.copy2(src, dst)
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä
            file_size = dst.stat().st_size
            self.stats['total_size'] += file_size
            self.stats['total_files'] += 1
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤
            if src.suffix == '.py':
                self.stats['python_files'] += 1
            elif src.suffix in ['.json', '.yaml', '.yml', '.ini', '.cfg', '.conf']:
                self.stats['config_files'] += 1
            elif 'test' in src.name.lower():
                self.stats['test_files'] += 1
            elif 'script' in src.name.lower():
                self.stats['script_files'] += 1
            elif 'backup' in src.name.lower():
                self.stats['backup_files'] += 1
            
            return True
            
        except Exception as e:
            self.stats['errors'].append(f"–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è {src}: {e}")
            return False
    
    def backup_directory(self, src_dir: Path, dst_dir: Path, relative_path: Path = Path("")):
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∫–æ–ø–∏—Ä—É–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é"""
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
            dst_dir.mkdir(parents=True, exist_ok=True)
            self.stats['total_dirs'] += 1
            
            # –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏ –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            for item in src_dir.iterdir():
                src_item = src_dir / item.name
                dst_item = dst_dir / item.name
                current_relative = relative_path / item.name
                
                if item.is_file():
                    # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
                    if self.copy_file(src_item, dst_item):
                        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –º–∞–Ω–∏—Ñ–µ—Å—Ç
                        checksum = self.calculate_checksum(dst_item)
                        self.stats['files'].append({
                            'path': str(current_relative),
                            'size': dst_item.stat().st_size,
                            'checksum': checksum,
                            'timestamp': datetime.fromtimestamp(dst_item.stat().st_mtime).isoformat()
                        })
                elif item.is_dir():
                    # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∫–æ–ø–∏—Ä—É–µ–º –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
                    self.backup_directory(src_item, dst_item, current_relative)
                    
        except Exception as e:
            self.stats['errors'].append(f"–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {src_dir}: {e}")
    
    def create_archive(self):
        """–°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤–Ω—ã–π —Ñ–∞–π–ª"""
        try:
            archive_path = self.backup_dir / f"{self.backup_name}.tar.gz"
            
            with tarfile.open(archive_path, "w:gz") as tar:
                tar.add(self.backup_path, arcname=self.backup_name)
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –∞—Ä—Ö–∏–≤–∞
            archive_size = archive_path.stat().st_size
            self.stats['archive_size'] = archive_size
            self.stats['compression_ratio'] = (1 - archive_size / self.stats['total_size']) * 100
            
            return archive_path
            
        except Exception as e:
            self.stats['errors'].append(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞: {e}")
            return None
    
    def verify_backup(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –±–µ–∫–∞–ø–∞"""
        verification_results = {
            'total_files_verified': 0,
            'checksum_matches': 0,
            'size_matches': 0,
            'errors': []
        }
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
            for file_info in self.stats['files']:
                file_path = self.backup_path / file_info['path']
                
                if file_path.exists():
                    verification_results['total_files_verified'] += 1
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä
                    if file_path.stat().st_size == file_info['size']:
                        verification_results['size_matches'] += 1
                    else:
                        verification_results['errors'].append(f"–†–∞–∑–º–µ—Ä –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: {file_info['path']}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º checksum
                    current_checksum = self.calculate_checksum(file_path)
                    if current_checksum == file_info['checksum']:
                        verification_results['checksum_matches'] += 1
                    else:
                        verification_results['errors'].append(f"Checksum –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: {file_info['path']}")
                else:
                    verification_results['errors'].append(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_info['path']}")
            
            return verification_results
            
        except Exception as e:
            verification_results['errors'].append(f"–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
            return verification_results
    
    def create_backup(self):
        """–°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –±–µ–∫–∞–ø"""
        print("üöÄ –°–û–ó–î–ê–ù–ò–ï –ü–û–õ–ù–û–ì–û –ë–ï–ö–ê–ü–ê –°–ò–°–¢–ï–ú–´ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò")
        print("=" * 60)
        
        try:
            # 1. –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
            print("üìÅ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤...")
            self.backup_directory(self.source_dir, self.backup_path)
            
            # 2. –°–æ–∑–¥–∞–µ–º –º–∞–Ω–∏—Ñ–µ—Å—Ç
            print("üìã –°–æ–∑–¥–∞–Ω–∏–µ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞...")
            manifest_file = self.create_manifest()
            
            # 3. –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤
            print("üóúÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞...")
            archive_path = self.create_archive()
            
            # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å
            print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏...")
            verification = self.verify_backup()
            
            # 5. –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            self.print_results(archive_path, verification)
            
            return True
            
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–µ–∫–∞–ø–∞: {e}")
            return False
    
    def print_results(self, archive_path, verification):
        """–í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–µ–∫–∞–ø–∞"""
        print("\n" + "=" * 60)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ë–ï–ö–ê–ü–ê")
        print("=" * 60)
        
        print(f"üìÅ –ò—Å—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {self.source_dir}")
        print(f"üíæ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –±–µ–∫–∞–ø–∞: {self.backup_dir}")
        print(f"üì¶ –ò–º—è –±–µ–∫–∞–ø–∞: {self.backup_name}")
        print(f"‚è∞ –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {self.timestamp}")
        
        print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"  üìÑ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {self.stats['total_files']}")
        print(f"  üìÅ –í—Å–µ–≥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π: {self.stats['total_dirs']}")
        print(f"  üíæ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {self.stats['total_size'] / (1024*1024):.2f} MB")
        print(f"  üêç Python —Ñ–∞–π–ª–æ–≤: {self.stats['python_files']}")
        print(f"  ‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {self.stats['config_files']}")
        print(f"  üß™ –¢–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤: {self.stats['test_files']}")
        print(f"  üìú –°–∫—Ä–∏–ø—Ç–æ–≤: {self.stats['script_files']}")
        print(f"  üíæ –§–∞–π–ª–æ–≤ –±–µ–∫–∞–ø–∞: {self.stats['backup_files']}")
        
        if archive_path:
            print(f"\nüóúÔ∏è –ê–†–•–ò–í:")
            print(f"  üì¶ –ü—É—Ç—å –∫ –∞—Ä—Ö–∏–≤—É: {archive_path}")
            print(f"  üíæ –†–∞–∑–º–µ—Ä –∞—Ä—Ö–∏–≤–∞: {self.stats.get('archive_size', 0) / (1024*1024):.2f} MB")
            print(f"  üìä –°—Ç–µ–ø–µ–Ω—å —Å–∂–∞—Ç–∏—è: {self.stats.get('compression_ratio', 0):.1f}%")
        
        print(f"\nüîç –ü–†–û–í–ï–†–ö–ê –¶–ï–õ–û–°–¢–ù–û–°–¢–ò:")
        print(f"  ‚úÖ –§–∞–π–ª–æ–≤ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {verification['total_files_verified']}")
        print(f"  ‚úÖ –†–∞–∑–º–µ—Ä—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç: {verification['size_matches']}")
        print(f"  ‚úÖ Checksums —Å–æ–≤–ø–∞–¥–∞—é—Ç: {verification['checksum_matches']}")
        
        if verification['errors']:
            print(f"  ‚ùå –û—à–∏–±–æ–∫: {len(verification['errors'])}")
            for error in verification['errors'][:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –æ—à–∏–±–æ–∫
                print(f"    - {error}")
        else:
            print(f"  üéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
        if self.stats['errors']:
            print(f"\n‚ö†Ô∏è –û–®–ò–ë–ö–ò –ü–†–ò –ö–û–ü–ò–†–û–í–ê–ù–ò–ò:")
            for error in self.stats['errors'][:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –æ—à–∏–±–æ–∫
                print(f"  - {error}")
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
        success_rate = (verification['total_files_verified'] / max(self.stats['total_files'], 1)) * 100
        print(f"\nüéØ –û–ë–©–ê–Ø –û–¶–ï–ù–ö–ê: {success_rate:.1f}% —É—Å–ø–µ—à–Ω–æ")
        
        if success_rate >= 99.0:
            print("üéâ –ë–ï–ö–ê–ü –°–û–ó–î–ê–ù –£–°–ü–ï–®–ù–û! –í—Å–µ —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –Ω–∞ 100%!")
        elif success_rate >= 95.0:
            print("‚úÖ –ë–ï–ö–ê–ü –°–û–ó–î–ê–ù –•–û–†–û–®–û! –ù–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã.")
        else:
            print("‚ö†Ô∏è –ë–ï–ö–ê–ü –°–û–ó–î–ê–ù –° –ü–†–û–ë–õ–ï–ú–ê–ú–ò! –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞.")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    source_dir = "/Users/sergejhlystov/ALADDIN_NEW"
    backup_dir = "/Users/sergejhlystov/ALADDIN_BACKUPS"
    
    print("üõ°Ô∏è –ü–û–õ–ù–´–ô –ë–ï–ö–ê–ü –°–ò–°–¢–ï–ú–´ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò ALADDIN")
    print("=" * 60)
    print(f"üìÅ –ò—Å—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {source_dir}")
    print(f"üíæ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –±–µ–∫–∞–ø–∞: {backup_dir}")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –±–µ–∫–∞–ø
    backup = FullSecurityBackup(source_dir, backup_dir)
    success = backup.create_backup()
    
    if success:
        print("\nüéâ –ë–ï–ö–ê–ü –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
        return 0
    else:
        print("\nüí• –û–®–ò–ë–ö–ê –ü–†–ò –°–û–ó–î–ê–ù–ò–ò –ë–ï–ö–ê–ü–ê!")
        return 1

if __name__ == "__main__":
    exit(main())