#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ BehavioralAnalysisAgent –≤ SafeFunctionManager
"""
import sys
import os
from datetime import datetime, timedelta
import time
import statistics

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from security.safe_function_manager import SafeFunctionManager, FunctionStatus, SecurityLevel
from security.ai_agents.behavioral_analysis_agent import (
    BehavioralAnalysisAgent, BehaviorType, BehaviorCategory, RiskLevel
)

def test_behavioral_analysis_agent_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ BehavioralAnalysisAgent –≤ SFM"""
    print("üîç –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò BEHAVIORALANALYSISAGENT –í SFM")
    print("=" * 60)

    # –°–æ–∑–¥–∞–µ–º SFM
    sfm = SafeFunctionManager()
    print("‚úÖ SafeFunctionManager —Å–æ–∑–¥–∞–Ω")

    # –°–æ–∑–¥–∞–µ–º BehavioralAnalysisAgent
    behavioral_agent = BehavioralAnalysisAgent()
    print("‚úÖ BehavioralAnalysisAgent —Å–æ–∑–¥–∞–Ω")

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤ SFM
    success = sfm.register_function(
        function_id="behavioral_analysis_agent",
        name="BehavioralAnalysisAgent",
        description="AI –∞–≥–µ–Ω—Ç –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è –¥–ª—è —Å–µ–º–µ–π",
        function_type="AI Agent",
        security_level=SecurityLevel.HIGH,
        is_critical=True,
        auto_enable=True
    )
    assert success, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å BehavioralAnalysisAgent –≤ SFM"
    print("‚úÖ BehavioralAnalysisAgent –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ SFM")

    # –í–∫–ª—é—á–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
    sfm.enable_function("behavioral_analysis_agent")
    status = sfm.get_function_status("behavioral_analysis_agent")
    assert status == FunctionStatus.ENABLED, f"BehavioralAnalysisAgent –Ω–µ –≤–∫–ª—é—á–µ–Ω, —Å—Ç–∞—Ç—É—Å: {status}"
    print("‚úÖ BehavioralAnalysisAgent –≤–∫–ª—é—á–µ–Ω –≤ SFM")

    print("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–ò:")

    # –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∏–∑ SFM
    sfm_behavioral_agent = sfm.get_function_instance("behavioral_analysis_agent")
    assert sfm_behavioral_agent is not None, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä BehavioralAnalysisAgent –∏–∑ SFM"
    assert isinstance(sfm_behavioral_agent, BehavioralAnalysisAgent), "–ü–æ–ª—É—á–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–µ —è–≤–ª—è–µ—Ç—Å—è BehavioralAnalysisAgent"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
    current_status = sfm_behavioral_agent.get_status()
    assert current_status.status == "running", f"–°—Ç–∞—Ç—É—Å BehavioralAnalysisAgent –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω: {current_status.status}"
    print(f"‚úÖ –°—Ç–∞—Ç—É—Å BehavioralAnalysisAgent: {current_status.status}")

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ –ø–æ–≤–µ–¥–µ–Ω–∏—è
    user_id = "test_user"
    session_id = "test_session"
    event_data = {
        "event_type": "LOGIN",
        "timestamp": datetime.now().isoformat(),
        "ip_address": "192.168.1.100",
        "user_agent": "Mozilla/5.0",
        "location": "Moscow, Russia"
    }

    analysis_result = sfm_behavioral_agent.analyze_behavior(user_id, session_id, event_data)
    assert analysis_result is not None, "–ê–Ω–∞–ª–∏–∑ –ø–æ–≤–µ–¥–µ–Ω–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω"
    print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –ø–æ–≤–µ–¥–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω: {analysis_result.overall_risk.value}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
    metrics = sfm_behavioral_agent.get_metrics()
    assert metrics is not None, "–ú–µ—Ç—Ä–∏–∫–∏ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã"
    print(f"‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã: {metrics.total_analyses} –∞–Ω–∞–ª–∏–∑–æ–≤")

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º SFM
    sfm_test_result = sfm.test_function("behavioral_analysis_agent")
    assert sfm_test_result, "SFM —Ç–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ behavioral_analysis_agent –ø—Ä–æ–≤–∞–ª–µ–Ω"
    print("‚úÖ SFM —Ç–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ behavioral_analysis_agent: –£–°–ü–ï–•")

    print("\nüéâ –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò BEHAVIORALANALYSISAGENT –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
    print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")

if __name__ == "__main__":
    test_behavioral_analysis_agent_integration()