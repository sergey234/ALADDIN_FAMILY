#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–∞–º–∏
"""

import os
import ast
from pathlib import Path
import re

def analyze_file_functionality(file_path):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ü–æ–¥—Å—á–µ—Ç —Å—Ç—Ä–æ–∫
        lines = content.split('\n')
        total_lines = len(lines)
        code_lines = len([line for line in lines if line.strip() and not line.strip().startswith('#')])
        comment_lines = len([line for line in lines if line.strip().startswith('#')])
        empty_lines = len([line for line in lines if not line.strip()])
        
        # –ê–Ω–∞–ª–∏–∑ AST
        try:
            tree = ast.parse(content)
        except SyntaxError:
            return {
                'total_lines': total_lines,
                'code_lines': code_lines,
                'comment_lines': comment_lines,
                'empty_lines': empty_lines,
                'classes': 0,
                'functions': 0,
                'imports': 0,
                'syntax_error': True
            }
        
        # –ü–æ–¥—Å—á–µ—Ç –∫–ª–∞—Å—Å–æ–≤
        classes = [node for node in ast.walk(tree) if isinstance(node, ast.ClassDef)]
        
        # –ü–æ–¥—Å—á–µ—Ç —Ñ—É–Ω–∫—Ü–∏–π
        functions = [node for node in ast.walk(tree) if isinstance(node, ast.FunctionDef)]
        
        # –ü–æ–¥—Å—á–µ—Ç –∏–º–ø–æ—Ä—Ç–æ–≤
        imports = [node for node in ast.walk(tree) if isinstance(node, (ast.Import, ast.ImportFrom))]
        
        # –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        file_size = os.path.getsize(file_path)
        
        return {
            'total_lines': total_lines,
            'code_lines': code_lines,
            'comment_lines': comment_lines,
            'empty_lines': empty_lines,
            'classes': len(classes),
            'functions': len(functions),
            'imports': len(imports),
            'file_size': file_size,
            'syntax_error': False,
            'class_names': [cls.name for cls in classes],
            'function_names': [func.name for func in functions]
        }
        
    except Exception as e:
        return {
            'error': str(e),
            'total_lines': 0,
            'code_lines': 0,
            'comment_lines': 0,
            'empty_lines': 0,
            'classes': 0,
            'functions': 0,
            'imports': 0,
            'file_size': 0,
            'syntax_error': True
        }

def compare_duplicates():
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–∞–º–∏"""
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∞–π–ª—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    files_to_compare = [
        {
            'name': 'SECURITY_MONITORING',
            'original': 'security/security_monitoring.py',
            'duplicates': [
                'security/security_monitoring_backup.py',
                'security/security_monitoring_ultimate_a_plus.py.backup_20250927_031440'
            ]
        },
        {
            'name': 'SAFE_FUNCTION_MANAGER',
            'original': 'security/safe_function_manager.py',
            'duplicates': [
                'security/safe_function_manager.py.backup',
                'security/safe_function_manager.py.backup_20250928_195531',
                'security/safe_function_manager_backup_20250909_021153.py'
            ]
        }
    ]
    
    print("üîç –°–†–ê–í–ù–ï–ù–ò–ï –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–ò –î–£–ë–õ–ò–ö–ê–¢–û–í –° –û–†–ò–ì–ò–ù–ê–õ–ê–ú–ò")
    print("=" * 80)
    
    for group in files_to_compare:
        print(f"\nüìÅ {group['name']}")
        print("=" * 60)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
        original_path = group['original']
        if os.path.exists(original_path):
            original_data = analyze_file_functionality(original_path)
            print(f"\n‚úÖ –û–†–ò–ì–ò–ù–ê–õ: {os.path.basename(original_path)}")
            print(f"   üìä –°—Ç—Ä–æ–∫ –∫–æ–¥–∞: {original_data['code_lines']:,}")
            print(f"   ÔøΩÔøΩ –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {original_data['total_lines']:,}")
            print(f"   üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {original_data['comment_lines']:,}")
            print(f"   ÔøΩÔøΩ –ö–ª–∞—Å—Å–æ–≤: {original_data['classes']}")
            print(f"   üîß –§—É–Ω–∫—Ü–∏–π: {original_data['functions']}")
            print(f"   üì• –ò–º–ø–æ—Ä—Ç–æ–≤: {original_data['imports']}")
            print(f"   üíæ –†–∞–∑–º–µ—Ä: {original_data['file_size']:,} –±–∞–π—Ç")
            
            if original_data.get('syntax_error'):
                print(f"   ‚ùå –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞!")
        else:
            print(f"\n‚ùå –û–†–ò–ì–ò–ù–ê–õ –ù–ï –ù–ê–ô–î–ï–ù: {original_path}")
            continue
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        print(f"\nüìã –î–£–ë–õ–ò–ö–ê–¢–´:")
        for i, dup_path in enumerate(group['duplicates'], 1):
            if os.path.exists(dup_path):
                dup_data = analyze_file_functionality(dup_path)
                print(f"\n   {i}. {os.path.basename(dup_path)}")
                print(f"      üìä –°—Ç—Ä–æ–∫ –∫–æ–¥–∞: {dup_data['code_lines']:,}")
                print(f"      üìù –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {dup_data['total_lines']:,}")
                print(f"      üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {dup_data['comment_lines']:,}")
                print(f"      üì¶ –ö–ª–∞—Å—Å–æ–≤: {dup_data['classes']}")
                print(f"      üîß –§—É–Ω–∫—Ü–∏–π: {dup_data['functions']}")
                print(f"      üì• –ò–º–ø–æ—Ä—Ç–æ–≤: {dup_data['imports']}")
                print(f"      üíæ –†–∞–∑–º–µ—Ä: {dup_data['file_size']:,} –±–∞–π—Ç")
                
                if dup_data.get('syntax_error'):
                    print(f"      ‚ùå –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞!")
                
                # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–º
                if not original_data.get('syntax_error') and not dup_data.get('syntax_error'):
                    code_diff = dup_data['code_lines'] - original_data['code_lines']
                    size_diff = dup_data['file_size'] - original_data['file_size']
                    func_diff = dup_data['functions'] - original_data['functions']
                    class_diff = dup_data['classes'] - original_data['classes']
                    
                    print(f"      üìà –†–∞–∑–Ω–∏—Ü–∞ —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–º:")
                    print(f"         ‚Ä¢ –°—Ç—Ä–æ–∫ –∫–æ–¥–∞: {code_diff:+d}")
                    print(f"         ‚Ä¢ –†–∞–∑–º–µ—Ä: {size_diff:+,d} –±–∞–π—Ç")
                    print(f"         ‚Ä¢ –§—É–Ω–∫—Ü–∏–π: {func_diff:+d}")
                    print(f"         ‚Ä¢ –ö–ª–∞—Å—Å–æ–≤: {class_diff:+d}")
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥—É–±–ª–∏–∫–∞—Ç–∞
                    if abs(code_diff) < 10 and abs(func_diff) < 2:
                        print(f"      ‚úÖ –ò–î–ï–ù–¢–ò–ß–ù–´–ô (–Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–∑–ª–∏—á–∏—è)")
                    elif code_diff < -50 or func_diff < -5:
                        print(f"      ‚ö†Ô∏è  –£–ü–†–û–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø")
                    elif code_diff > 50 or func_diff > 5:
                        print(f"      üîÑ –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø")
                    else:
                        print(f"      ÔøΩÔøΩ –ú–û–î–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø")
            else:
                print(f"\n   {i}. ‚ùå –§–ê–ô–õ –ù–ï –ù–ê–ô–î–ï–ù: {os.path.basename(dup_path)}")

if __name__ == "__main__":
    compare_duplicates()
