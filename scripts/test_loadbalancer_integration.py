#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ LoadBalancer —Å SafeFunctionManager
"""

import sys
import asyncio
sys.path.append('/Users/sergejhlystov/ALADDIN_NEW')

from security.safe_function_manager import SafeFunctionManager
from security.microservices.load_balancer import LoadBalancer, LoadBalancingRequest, ServiceRequest
from core.base import SecurityLevel


async def test_loadbalancer_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ LoadBalancer —Å SFM"""
    print("üîß –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ LoadBalancer —Å SafeFunctionManager")
    print("=" * 60)
    
    try:
        # –°–æ–∑–¥–∞–µ–º SFM
        sfm = SafeFunctionManager()
        print("‚úÖ SafeFunctionManager —Å–æ–∑–¥–∞–Ω!")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º LoadBalancer
        print("\nüîÑ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º LoadBalancer...")
        result = sfm.register_function(
            function_id='load_balancer',
            name='LoadBalancer',
            description='–ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ –Ω–∞–≥—Ä—É–∑–∫–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤',
            function_type='microservice',
            security_level=SecurityLevel.HIGH,
            is_critical=True,
            auto_enable=False
        )
        print(f"‚úÖ LoadBalancer –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        
        # –í–∫–ª—é—á–∞–µ–º LoadBalancer
        print("\nüîÑ –í–∫–ª—é—á–∞–µ–º LoadBalancer...")
        enable_result = sfm.enable_function('load_balancer')
        print(f"‚úÖ LoadBalancer –≤–∫–ª—é—á–µ–Ω! –†–µ–∑—É–ª—å—Ç–∞—Ç: {enable_result}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        status = sfm.get_function_status('load_balancer')
        if status:
            print(f"\nüìà –°—Ç–∞—Ç—É—Å LoadBalancer: {status['status']}")
            
            # –°–æ–∑–¥–∞–µ–º LoadBalancer –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            print("\nüîÑ –°–æ–∑–¥–∞–µ–º LoadBalancer –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
            lb = LoadBalancer()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º LoadBalancer
            print("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º LoadBalancer...")
            init_result = await lb.initialize()
            print(f"‚úÖ LoadBalancer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω! –†–µ–∑—É–ª—å—Ç–∞—Ç: {init_result}")
            
            if init_result:
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å–µ—Ä–≤–∏—Å–∞
                print("\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å–µ—Ä–≤–∏—Å–∞...")
                service_request = ServiceRequest(
                    name="test_service",
                    url="localhost",
                    port=8080,
                    protocol="http",
                    weight=1,
                    max_connections=100,
                    health_check_url="/health",
                    health_check_interval=30
                )
                
                register_result = await lb.register_service(service_request)
                print(f"‚úÖ –°–µ—Ä–≤–∏—Å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! –†–µ–∑—É–ª—å—Ç–∞—Ç: {register_result}")
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫—É –Ω–∞–≥—Ä—É–∑–∫–∏
                print("\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫—É –Ω–∞–≥—Ä—É–∑–∫–∏...")
                balance_request = LoadBalancingRequest(
                    service_name="test_service",
                    client_ip="127.0.0.1",
                    session_id="test_session_123"
                )
                
                balance_result = await lb.balance_load(balance_request)
                if balance_result:
                    print(f"‚úÖ –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞! –†–µ–∑—É–ª—å—Ç–∞—Ç: {balance_result.service_url}")
                else:
                    print("‚ö†Ô∏è –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ (–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤)")
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
                print("\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫...")
                metrics = await lb.get_metrics()
                print(f"‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã! –†–µ–∑—É–ª—å—Ç–∞—Ç: {metrics}")
                
                # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É LoadBalancer
                print("\nüîÑ –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É LoadBalancer...")
                await lb.shutdown()
                print("‚úÖ LoadBalancer –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É!")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ SFM
            print("\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ SFM...")
            test_result = sfm.test_function('load_balancer')
            print(f"‚úÖ –¢–µ—Å—Ç SFM –∑–∞–≤–µ—Ä—à–µ–Ω! –†–µ–∑—É–ª—å—Ç–∞—Ç: {test_result}")
            
            # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ SFM
            print("\nüîÑ –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ SFM...")
            sfm_metrics = sfm.get_performance_metrics()
            print(f"‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ SFM –ø–æ–ª—É—á–µ–Ω—ã!")
            print(f"   ‚Ä¢ –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π: {sfm_metrics['current_metrics']['total_functions']}")
            print(f"   ‚Ä¢ –í–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π: {sfm_metrics['current_metrics']['enabled_functions']}")
            print(f"   ‚Ä¢ –°–ø—è—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π: {sfm_metrics['current_metrics']['sleeping_functions']}")
            print(f"   ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π: {sfm_metrics['current_metrics']['active_executions']}")
            
        else:
            print("‚ùå LoadBalancer –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ SFM")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    print("\n" + "=" * 60)
    print("üéâ –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ LoadBalancer –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    return True


if __name__ == "__main__":
    result = asyncio.run(test_loadbalancer_integration())
    if result:
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ùå –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏!")