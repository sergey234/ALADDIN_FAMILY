#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è A+ —É—Ä–æ–≤–Ω—è
"""

import sys
import os
import ast
import inspect
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

def analyze_code_quality(file_path: str) -> dict:
    """–ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞ —Ñ–∞–π–ª–∞"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ü–∞—Ä—Å–∏–Ω–≥ AST
        tree = ast.parse(content)
        
        # –ü–æ–¥—Å—á–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        classes = [node for node in ast.walk(tree) if isinstance(node, ast.ClassDef)]
        functions = [node for node in ast.walk(tree) if isinstance(node, ast.FunctionDef)]
        methods = [node for node in ast.walk(tree) if isinstance(node, ast.FunctionDef) and node.name != '__init__']
        
        # –ü–æ–¥—Å—á–µ—Ç —Å—Ç—Ä–æ–∫
        lines = content.split('\n')
        total_lines = len(lines)
        code_lines = len([line for line in lines if line.strip() and not line.strip().startswith('#')])
        comment_lines = len([line for line in lines if line.strip().startswith('#')])
        docstring_lines = len([line for line in lines if '"""' in line or "'''" in line])
        
        # –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        docstring_quality = 0
        for func in functions:
            if func.body and isinstance(func.body[0], ast.Expr) and isinstance(func.body[0].value, ast.Constant):
                if isinstance(func.body[0].value.value, str) and len(func.body[0].value.value) > 20:
                    docstring_quality += 1
        
        # –ê–Ω–∞–ª–∏–∑ type hints
        type_hint_quality = 0
        for func in functions:
            if func.returns or any(arg.annotation for arg in func.args.args):
                type_hint_quality += 1
        
        # –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        complexity_score = 0
        for func in functions:
            if len(func.body) > 5:  # –§—É–Ω–∫—Ü–∏–∏ —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
                complexity_score += 1
        
        # –ü–æ–¥—Å—á–µ—Ç –∏–º–ø–æ—Ä—Ç–æ–≤
        imports = [node for node in ast.walk(tree) if isinstance(node, (ast.Import, ast.ImportFrom))]
        
        # –†–∞—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤–æ–≥–æ –±–∞–ª–ª–∞
        size_score = min(100, (total_lines / 600) * 100)  # 600 —Å—Ç—Ä–æ–∫ = 100%
        docstring_score = (docstring_quality / max(len(functions), 1)) * 100
        type_hint_score = (type_hint_quality / max(len(functions), 1)) * 100
        complexity_score = (complexity_score / max(len(functions), 1)) * 100
        structure_score = min(100, (len(classes) + len(functions)) * 10)  # –ó–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª
        final_score = (
            size_score * 0.3 +
            docstring_score * 0.25 +
            type_hint_score * 0.2 +
            complexity_score * 0.15 +
            structure_score * 0.1
        )
        
        return {
            'total_lines': total_lines,
            'code_lines': code_lines,
            'comment_lines': comment_lines,
            'docstring_lines': docstring_lines,
            'classes': len(classes),
            'functions': len(functions),
            'methods': len(methods),
            'imports': len(imports),
            'size_score': round(size_score, 1),
            'docstring_score': round(docstring_score, 1),
            'type_hint_score': round(type_hint_score, 1),
            'complexity_score': round(complexity_score, 1),
            'structure_score': round(structure_score, 1),
            'final_score': round(final_score, 1)
        }
        
    except Exception as e:
        return {'error': str(e), 'final_score': 0}

def test_advanced_quality():
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –≤—Å–µ—Ö –Ω–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    
    components = [
        {
            'name': 'FamilyCommunicationHub',
            'file': 'security/ai_agents/family_communication_hub.py'
        },
        {
            'name': 'EmergencyResponseInterface', 
            'file': 'security/ai_agents/emergency_response_interface.py'
        },
        {
            'name': 'NotificationBot',
            'file': 'security/ai_agents/notification_bot.py'
        },
        {
            'name': 'APIGateway',
            'file': 'security/microservices/api_gateway.py'
        },
        {
            'name': 'LoadBalancer',
            'file': 'security/microservices/load_balancer.py'
        }
    ]
    
    print("üîç –ü–†–û–î–í–ò–ù–£–¢–ê–Ø –ü–†–û–í–ï–†–ö–ê –ö–ê–ß–ï–°–¢–í–ê –ö–û–î–ê")
    print("=" * 70)
    
    total_score = 0
    total_components = len(components)
    
    for component in components:
        print(f"\nüìã {component['name']}:")
        print("-" * 50)
        
        analysis = analyze_code_quality(component['file'])
        
        if 'error' in analysis:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {analysis['error']}")
            continue
        
        print(f"  üìä –°—Ç—Ä–æ–∫–∏ –∫–æ–¥–∞: {analysis['code_lines']}")
        print(f"  üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {analysis['comment_lines']}")
        print(f"  üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: {analysis['docstring_lines']}")
        print(f"  üèóÔ∏è  –ö–ª–∞—Å—Å—ã: {analysis['classes']}")
        print(f"  ‚öôÔ∏è  –§—É–Ω–∫—Ü–∏–∏: {analysis['functions']}")
        print(f"  üîß –ú–µ—Ç–æ–¥—ã: {analysis['methods']}")
        print(f"  üì¶ –ò–º–ø–æ—Ä—Ç—ã: {analysis['imports']}")
        print()
        
        print(f"  üéØ –†–∞–∑–º–µ—Ä: {analysis['size_score']}%")
        print(f"  üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: {analysis['docstring_score']}%")
        print(f"  üè∑Ô∏è  Type hints: {analysis['type_hint_score']}%")
        print(f"  üß† –°–ª–æ–∂–Ω–æ—Å—Ç—å: {analysis['complexity_score']}%")
        print(f"  üèóÔ∏è  –°—Ç—Ä—É–∫—Ç—É—Ä–∞: {analysis['structure_score']}%")
        print()
        
        final_score = analysis['final_score']
        print(f"  üéØ –ò–¢–û–ì–û–í–´–ô –ë–ê–õ–õ: {final_score}%")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
        if final_score >= 95:
            quality = "A+"
            emoji = "üèÜ"
        elif final_score >= 90:
            quality = "A"
            emoji = "ü•á"
        elif final_score >= 85:
            quality = "B+"
            emoji = "ü•à"
        elif final_score >= 80:
            quality = "B"
            emoji = "ü•â"
        else:
            quality = "C"
            emoji = "‚ö†Ô∏è"
        
        print(f"  {emoji} –ö–ê–ß–ï–°–¢–í–û: {quality}")
        
        total_score += final_score
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print("=" * 70)
    average_score = total_score / total_components
    
    print(f"üéØ –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {average_score:.1f}%")
    print(f"üìà –û–±—â–∏–π –±–∞–ª–ª: {total_score:.1f}%")
    print(f"üî¢ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {total_components}")
    
    if average_score >= 95:
        overall_quality = "A+"
        emoji = "üèÜ"
        message = "–û–¢–õ–ò–ß–ù–û–ï –ö–ê–ß–ï–°–¢–í–û! A+ –î–û–°–¢–ò–ì–ù–£–¢–û!"
    elif average_score >= 90:
        overall_quality = "A"
        emoji = "ü•á"
        message = "–û–ß–ï–ù–¨ –•–û–†–û–®–ï–ï –ö–ê–ß–ï–°–¢–í–û!"
    elif average_score >= 85:
        overall_quality = "B+"
        emoji = "ü•à"
        message = "–•–û–†–û–®–ï–ï –ö–ê–ß–ï–°–¢–í–û!"
    elif average_score >= 80:
        overall_quality = "B"
        emoji = "ü•â"
        message = "–£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û–ï –ö–ê–ß–ï–°–¢–í–û!"
    else:
        overall_quality = "C"
        emoji = "‚ö†Ô∏è"
        message = "–¢–†–ï–ë–£–ï–¢ –£–õ–£–ß–®–ï–ù–ò–Ø!"
    
    print(f"{emoji} –û–ë–©–ï–ï –ö–ê–ß–ï–°–¢–í–û: {overall_quality}")
    print(f"üí¨ {message}")
    
    return average_score, overall_quality

if __name__ == "__main__":
    score, quality = test_advanced_quality()
    print(f"\nüéâ –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {score:.1f}% ({quality})")