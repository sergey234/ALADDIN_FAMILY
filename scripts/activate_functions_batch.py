#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü–∞–∫–µ—Ç–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ 10 —à—Ç—É–∫ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –≤–ª–∏—è–Ω–∏–µ –Ω–∞ CPU/RAM
"""

import sys
import os
import time
import psutil
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from security.safe_function_manager import SafeFunctionManager

class FunctionActivator:
    def __init__(self):
        self.sfm = None
        self.baseline_stats = {}
        self.activation_log = []
        
    def get_system_stats(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤"""
        cpu_percent = psutil.cpu_percent(interval=0.1)
        ram = psutil.virtual_memory()
        
        return {
            'cpu_percent': cpu_percent,
            'ram_percent': ram.percent,
            'ram_used_gb': ram.used / (1024**3),
            'ram_available_gb': ram.available / (1024**3),
            'timestamp': time.time()
        }
    
    def set_baseline(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–∑–æ–≤–æ–π –ª–∏–Ω–∏–∏"""
        print("üìä –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–∑–æ–≤–æ–π –ª–∏–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã...")
        time.sleep(1)  # –î–∞–µ–º —Å–∏—Å—Ç–µ–º–µ —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è
        self.baseline_stats = self.get_system_stats()
        
        print(f"‚úÖ –ë–∞–∑–æ–≤–∞—è –ª–∏–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞:")
        print(f"   üñ•Ô∏è  CPU: {self.baseline_stats['cpu_percent']:.1f}%")
        print(f"   üíæ RAM: {self.baseline_stats['ram_percent']:.1f}% ({self.baseline_stats['ram_used_gb']:.2f}GB)")
        print(f"   üìä –î–æ—Å—Ç—É–ø–Ω–æ RAM: {self.baseline_stats['ram_available_gb']:.2f}GB")
        print()
    
    def initialize_sfm(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SFM"""
        print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SFM...")
        
        config = {
            'thread_pool_enabled': True,
            'max_thread_pool_workers': 5,
            'async_io_enabled': True,
            'redis_cache_enabled': True,
            'enable_auto_management': False,
            'enable_sleep_mode': False
        }
        
        try:
            self.sfm = SafeFunctionManager('BatchActivator', config)
            print(f"‚úÖ SFM –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {len(self.sfm.functions)} —Ñ—É–Ω–∫—Ü–∏–π")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SFM: {e}")
            return False
    
    def get_sleeping_functions(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–ø—è—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
        sleeping_functions = []
        critical_sleeping = []
        
        for func_id, func_obj in self.sfm.functions.items():
            status = str(getattr(func_obj, 'status', ''))
            if 'sleep' in status.lower():
                sleeping_functions.append(func_id)
                
                if getattr(func_obj, 'is_critical', False):
                    critical_sleeping.append(func_id)
        
        return sleeping_functions, critical_sleeping
    
    def activate_function_batch(self, function_ids, batch_number):
        """–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–∞–∫–µ—Ç–∞ —Ñ—É–Ω–∫—Ü–∏–π"""
        print(f"üöÄ –ê–ö–¢–ò–í–ê–¶–ò–Ø –ü–ê–ö–ï–¢–ê {batch_number}")
        print(f"   –§—É–Ω–∫—Ü–∏–π –≤ –ø–∞–∫–µ—Ç–µ: {len(function_ids)}")
        print(f"   –§—É–Ω–∫—Ü–∏–∏: {', '.join(function_ids[:3])}{'...' if len(function_ids) > 3 else ''}")
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        stats_before = self.get_system_stats()
        
        activated_count = 0
        failed_count = 0
        
        start_time = time.time()
        
        for func_id in function_ids:
            try:
                # –ü–æ–ø—ã—Ç–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏
                # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –∫–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
                # –ü–æ–∫–∞ —á—Ç–æ —Å–∏–º—É–ª–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏—é
                time.sleep(0.01)  # –°–∏–º—É–ª—è—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
                activated_count += 1
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ {func_id}: {e}")
                failed_count += 1
        
        activation_time = time.time() - start_time
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        time.sleep(0.5)  # –î–∞–µ–º —Å–∏—Å—Ç–µ–º–µ —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è
        stats_after = self.get_system_stats()
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        cpu_change = stats_after['cpu_percent'] - stats_before['cpu_percent']
        ram_change = stats_after['ram_percent'] - stats_before['ram_percent']
        ram_used_change = stats_after['ram_used_gb'] - stats_before['ram_used_gb']
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        log_entry = {
            'batch_number': batch_number,
            'functions_count': len(function_ids),
            'activated_count': activated_count,
            'failed_count': failed_count,
            'activation_time': activation_time,
            'cpu_change': cpu_change,
            'ram_change': ram_change,
            'ram_used_change_gb': ram_used_change,
            'stats_before': stats_before,
            'stats_after': stats_after
        }
        
        self.activation_log.append(log_entry)
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print(f"   ‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ: {activated_count}")
        print(f"   ‚ùå –û—à–∏–±–æ–∫: {failed_count}")
        print(f"   ‚è±Ô∏è  –í—Ä–µ–º—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {activation_time:.3f} —Å–µ–∫")
        print(f"   üìä –í–ª–∏—è–Ω–∏–µ –Ω–∞ —Å–∏—Å—Ç–µ–º—É:")
        print(f"      üñ•Ô∏è  CPU: {cpu_change:+.1f}% ({stats_before['cpu_percent']:.1f}% ‚Üí {stats_after['cpu_percent']:.1f}%)")
        print(f"      üíæ RAM: {ram_change:+.1f}% ({stats_before['ram_percent']:.1f}% ‚Üí {stats_after['ram_percent']:.1f}%)")
        print(f"      üìà RAM –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {ram_used_change:+.3f}GB")
        print()
        
        return activated_count, failed_count
    
    def print_current_stats(self):
        """–í—ã–≤–æ–¥ —Ç–µ–∫—É—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
        stats = self.get_system_stats()
        
        print("üìä –¢–ï–ö–£–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´:")
        print(f"   üñ•Ô∏è  CPU: {stats['cpu_percent']:.1f}%")
        print(f"   üíæ RAM: {stats['ram_percent']:.1f}% ({stats['ram_used_gb']:.2f}GB)")
        print(f"   üìä –î–æ—Å—Ç—É–ø–Ω–æ RAM: {stats['ram_available_gb']:.2f}GB")
        
        # –ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç –±–∞–∑–æ–≤–æ–π –ª–∏–Ω–∏–∏
        if self.baseline_stats:
            cpu_total_change = stats['cpu_percent'] - self.baseline_stats['cpu_percent']
            ram_total_change = stats['ram_percent'] - self.baseline_stats['ram_percent']
            ram_used_total_change = stats['ram_used_gb'] - self.baseline_stats['ram_used_gb']
            
            print(f"   üìà –ò–ó–ú–ï–ù–ï–ù–ò–Ø –û–¢ –ë–ê–ó–û–í–û–ô –õ–ò–ù–ò–ò:")
            print(f"      üñ•Ô∏è  CPU: {cpu_total_change:+.1f}%")
            print(f"      üíæ RAM: {ram_total_change:+.1f}%")
            print(f"      üìà RAM –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {ram_used_total_change:+.3f}GB")
        print()
    
    def activate_critical_functions_first(self):
        """–ê–∫—Ç–∏–≤–∞—Ü–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π –ø–µ—Ä–≤—ã–º–∏"""
        print("üö® –ê–ö–¢–ò–í–ê–¶–ò–Ø –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –§–£–ù–ö–¶–ò–ô")
        print("=" * 50)
        
        sleeping_functions, critical_sleeping = self.get_sleeping_functions()
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–ø—è—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π: {len(critical_sleeping)}")
        
        if not critical_sleeping:
            print("‚úÖ –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω—ã!")
            return True
        
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ 5 —à—Ç—É–∫
        batch_size = 5
        for i in range(0, len(critical_sleeping), batch_size):
            batch = critical_sleeping[i:i + batch_size]
            batch_number = (i // batch_size) + 1
            
            self.activate_function_batch(batch, f"–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï-{batch_number}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.print_current_stats()
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏
            print("‚è∏Ô∏è  –ü–∞—É–∑–∞ 3 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –ø–∞–∫–µ—Ç–æ–º...")
            time.sleep(3)
        
        return True
    
    def activate_remaining_functions(self):
        """–ê–∫—Ç–∏–≤–∞—Ü–∏—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Å–ø—è—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
        print("üí§ –ê–ö–¢–ò–í–ê–¶–ò–Ø –û–°–¢–ê–í–®–ò–•–°–Ø –°–ü–Ø–©–ò–• –§–£–ù–ö–¶–ò–ô")
        print("=" * 50)
        
        sleeping_functions, critical_sleeping = self.get_sleeping_functions()
        
        # –£–±–∏—Ä–∞–µ–º —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
        remaining_sleeping = [f for f in sleeping_functions if f not in critical_sleeping]
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Å–ø—è—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π: {len(remaining_sleeping)}")
        
        if not remaining_sleeping:
            print("‚úÖ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω—ã!")
            return True
        
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ 10 —à—Ç—É–∫
        batch_size = 10
        for i in range(0, len(remaining_sleeping), batch_size):
            batch = remaining_sleeping[i:i + batch_size]
            batch_number = (i // batch_size) + 1
            
            self.activate_function_batch(batch, f"–û–ë–´–ß–ù–´–ï-{batch_number}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.print_current_stats()
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏
            print("‚è∏Ô∏è  –ü–∞—É–∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –ø–∞–∫–µ—Ç–æ–º...")
            time.sleep(2)
        
        return True
    
    def print_final_report(self):
        """–í—ã–≤–æ–¥ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("üìã –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –ê–ö–¢–ò–í–ê–¶–ò–ò")
        print("=" * 60)
        
        total_activated = sum(log['activated_count'] for log in self.activation_log)
        total_failed = sum(log['failed_count'] for log in self.activation_log)
        total_batches = len(self.activation_log)
        
        print(f"üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   üì¶ –í—Å–µ–≥–æ –ø–∞–∫–µ—Ç–æ–≤: {total_batches}")
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ: {total_activated}")
        print(f"   ‚ùå –û—à–∏–±–æ–∫ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {total_failed}")
        
        if self.activation_log:
            total_time = sum(log['activation_time'] for log in self.activation_log)
            avg_time_per_batch = total_time / total_batches
            
            print(f"   ‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {total_time:.2f} —Å–µ–∫")
            print(f"   üìà –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –ø–∞–∫–µ—Ç: {avg_time_per_batch:.3f} —Å–µ–∫")
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
        final_stats = self.get_system_stats()
        if self.baseline_stats:
            cpu_final_change = final_stats['cpu_percent'] - self.baseline_stats['cpu_percent']
            ram_final_change = final_stats['ram_percent'] - self.baseline_stats['ram_percent']
            ram_used_final_change = final_stats['ram_used_gb'] - self.baseline_stats['ram_used_gb']
            
            print(f"   üìä –§–ò–ù–ê–õ–¨–ù–´–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø –°–ò–°–¢–ï–ú–´:")
            print(f"      üñ•Ô∏è  CPU: {cpu_final_change:+.1f}%")
            print(f"      üíæ RAM: {ram_final_change:+.1f}%")
            print(f"      üìà RAM –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {ram_used_final_change:+.3f}GB")
        
        print()
        print("üìã –î–ï–¢–ê–õ–ò –ü–û –ü–ê–ö–ï–¢–ê–ú:")
        for log in self.activation_log:
            print(f"   –ü–∞–∫–µ—Ç {log['batch_number']}: {log['activated_count']}/{log['functions_count']} —Ñ—É–Ω–∫—Ü–∏–π "
                  f"(CPU {log['cpu_change']:+.1f}%, RAM {log['ram_change']:+.1f}%)")

def main():
    activator = FunctionActivator()
    
    print("üöÄ –ü–ê–ö–ï–¢–ù–ê–Ø –ê–ö–¢–ò–í–ê–¶–ò–Ø –§–£–ù–ö–¶–ò–ô –° –ú–û–ù–ò–¢–û–†–ò–ù–ì–û–ú")
    print("=" * 60)
    print()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SFM
    if not activator.initialize_sfm():
        return
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–∑–æ–≤–æ–π –ª–∏–Ω–∏–∏
    activator.set_baseline()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    sleeping_functions, critical_sleeping = activator.get_sleeping_functions()
    print(f"üìä –ù–ê–ô–î–ï–ù–û –°–ü–Ø–©–ò–• –§–£–ù–ö–¶–ò–ô:")
    print(f"   üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö: {len(critical_sleeping)}")
    print(f"   üí§ –û–±—ã—á–Ω—ã—Ö: {len(sleeping_functions) - len(critical_sleeping)}")
    print(f"   üì¶ –í—Å–µ–≥–æ —Å–ø—è—â–∏—Ö: {len(sleeping_functions)}")
    print()
    
    try:
        # –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
        activator.activate_critical_functions_first()
        
        print("\n" + "="*60 + "\n")
        
        # –ê–∫—Ç–∏–≤–∞—Ü–∏—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Ñ—É–Ω–∫—Ü–∏–π
        activator.activate_remaining_functions()
        
        print("\n" + "="*60 + "\n")
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        activator.print_final_report()
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        activator.print_final_report()
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {e}")
        activator.print_final_report()

if __name__ == "__main__":
    main()