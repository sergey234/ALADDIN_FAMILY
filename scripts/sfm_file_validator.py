#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
SFM File Validator - –í–∞–ª–∏–¥–∞—Ç–æ—Ä —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –≤ SFM —Ä–µ–µ—Å—Ç—Ä–µ
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤—Å–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
"""

import json
import os
import re
from datetime import datetime
from typing import Dict, List, Tuple

def validate_file_existence():
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤"""
    try:
        print("üîç –í–ê–õ–ò–î–ê–¶–ò–Ø –°–£–©–ï–°–¢–í–û–í–ê–ù–ò–Ø –§–ê–ô–õ–û–í –í SFM –†–ï–ï–°–¢–†–ï")
        print("=" * 60)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
        with open('data/sfm/function_registry.json', 'r', encoding='utf-8') as f:
            registry = json.load(f)
        
        functions = registry.get('functions', {})
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_functions = len(functions)
        existing_files = 0
        missing_files = 0
        missing_functions = []
        
        print(f"üìä –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π –≤ —Ä–µ–µ—Å—Ç—Ä–µ: {total_functions}")
        print()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Ñ—É–Ω–∫—Ü–∏—é
        for func_id, func_data in functions.items():
            if isinstance(func_data, dict):
                file_path = func_data.get('file_path', '')
                
                if file_path:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
                    full_path = os.path.join('/Users/sergejhlystov/ALADDIN_NEW', file_path)
                    
                    if os.path.exists(full_path):
                        existing_files += 1
                        status = "‚úÖ"
                    else:
                        missing_files += 1
                        status = "‚ùå"
                        missing_functions.append({
                            'function_id': func_id,
                            'file_path': file_path,
                            'name': func_data.get('name', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                            'status': func_data.get('status', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                        })
                        print(f"{status} {func_id}: {file_path}")
                else:
                    missing_files += 1
                    missing_functions.append({
                        'function_id': func_id,
                        'file_path': '–ù–ï –£–ö–ê–ó–ê–ù',
                        'name': func_data.get('name', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                        'status': func_data.get('status', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                    })
                    print(f"‚ùå {func_id}: –ü–£–¢–¨ –ö –§–ê–ô–õ–£ –ù–ï –£–ö–ê–ó–ê–ù")
        
        print()
        print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã: {existing_files}")
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã: {missing_files}")
        print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏: {(existing_files/total_functions)*100:.1f}%")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = generate_file_validation_report(existing_files, missing_files, missing_functions)
        
        return missing_files == 0, report
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
        return False, None

def generate_file_validation_report(existing_files: int, missing_files: int, missing_functions: List[Dict]) -> Dict:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤"""
    try:
        report = {
            "timestamp": datetime.now().isoformat(),
            "validation_type": "file_existence",
            "total_functions": existing_files + missing_files,
            "existing_files": existing_files,
            "missing_files": missing_files,
            "validity_percentage": (existing_files / (existing_files + missing_files)) * 100,
            "missing_functions": missing_functions,
            "recommendations": []
        }
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if missing_files > 0:
            report["recommendations"].append("–£–¥–∞–ª–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏")
            report["recommendations"].append("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª–∞–º")
            report["recommendations"].append("–û–±–Ω–æ–≤–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Ñ—É–Ω–∫—Ü–∏–π")
        
        if missing_files == 0:
            report["recommendations"].append("–í—Å–µ —Ñ–∞–π–ª—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç - SFM —Ä–µ–µ—Å—Ç—Ä –≤–∞–ª–∏–¥–µ–Ω")
        
        # –°–æ—Ö—Ä–∞–Ω–∏–º –æ—Ç—á–µ—Ç
        report_file = f"data/sfm/file_validation_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(report, f, indent=2, ensure_ascii=False)
        
        print(f"‚úÖ –û—Ç—á–µ—Ç –æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
        return report
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
        return None

def fix_missing_functions():
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏"""
    try:
        print("\nüîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –§–£–ù–ö–¶–ò–ô –° –ù–ï–°–£–©–ï–°–¢–í–£–Æ–©–ò–ú–ò –§–ê–ô–õ–ê–ú–ò")
        print("=" * 60)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
        with open('data/sfm/function_registry.json', 'r', encoding='utf-8') as f:
            registry = json.load(f)
        
        functions = registry.get('functions', {})
        
        # –ù–∞—Ö–æ–¥–∏–º —Ñ—É–Ω–∫—Ü–∏–∏ —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏
        functions_to_remove = []
        
        for func_id, func_data in functions.items():
            if isinstance(func_data, dict):
                file_path = func_data.get('file_path', '')
                
                if file_path:
                    full_path = os.path.join('/Users/sergejhlystov/ALADDIN_NEW', file_path)
                    
                    if not os.path.exists(full_path):
                        functions_to_remove.append(func_id)
                        print(f"‚ùå –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {func_id} -> {file_path}")
        
        if functions_to_remove:
            print(f"\nüìä –ù–∞–π–¥–µ–Ω–æ {len(functions_to_remove)} —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
            backup_file = f"data/sfm/function_registry_backup_before_cleanup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
            with open(backup_file, 'w', encoding='utf-8') as f:
                json.dump(registry, f, indent=2, ensure_ascii=False)
            print(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_file}")
            
            # –£–¥–∞–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
            for func_id in functions_to_remove:
                del functions[func_id]
                print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è: {func_id}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ä–µ–µ—Å—Ç—Ä
            with open('data/sfm/function_registry.json', 'w', encoding='utf-8') as f:
                json.dump(registry, f, indent=2, ensure_ascii=False)
            
            print(f"‚úÖ –†–µ–µ—Å—Ç—Ä –æ—á–∏—â–µ–Ω –æ—Ç {len(functions_to_remove)} –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π")
            print(f"‚úÖ –û—Å—Ç–∞–ª–æ—Å—å —Ñ—É–Ω–∫—Ü–∏–π: {len(functions)}")
            
            return True
        else:
            print("‚úÖ –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {e}")
        return False

def suggest_alternatives():
    """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤"""
    try:
        print("\nüîç –ü–û–ò–°–ö –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í –î–õ–Ø –ù–ï–°–£–©–ï–°–¢–í–£–Æ–©–ò–• –§–ê–ô–õ–û–í")
        print("=" * 60)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
        with open('data/sfm/function_registry.json', 'r', encoding='utf-8') as f:
            registry = json.load(f)
        
        functions = registry.get('functions', {})
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏
        special_cases = {
            'security_authenticationinterface': {
                'suggested_path': 'security/microservices/api_gateway.py',
                'suggested_class': 'AuthenticationInterface',
                'reason': '–ö–ª–∞—Å—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ api_gateway.py –∫–∞–∫ –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å',
                'action': '–ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø—É—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é'
            }
        }
        
        for func_id, func_data in functions.items():
            if isinstance(func_data, dict):
                file_path = func_data.get('file_path', '')
                
                if file_path and func_id in special_cases:
                    case = special_cases[func_id]
                    print(f"\nüéØ –§—É–Ω–∫—Ü–∏—è: {func_id}")
                    print(f"   –¢–µ–∫—É—â–∏–π –ø—É—Ç—å: {file_path}")
                    print(f"   –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–π –ø—É—Ç—å: {case['suggested_path']}")
                    print(f"   –ö–ª–∞—Å—Å: {case['suggested_class']}")
                    print(f"   –ü—Ä–∏—á–∏–Ω–∞: {case['reason']}")
                    print(f"   –î–µ–π—Å—Ç–≤–∏–µ: {case['action']}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–π —Ñ–∞–π–ª
                    suggested_full_path = os.path.join('/Users/sergejhlystov/ALADDIN_NEW', case['suggested_path'])
                    if os.path.exists(suggested_full_path):
                        print(f"   ‚úÖ –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–π —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                    else:
                        print(f"   ‚ùå –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–π —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤: {e}")
        return False

if __name__ == "__main__":
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
    is_valid, report = validate_file_existence()
    
    if not is_valid:
        print("\n‚ùå –ù–ê–ô–î–ï–ù–´ –ù–ï–°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –§–ê–ô–õ–´!")
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
        suggest_alternatives()
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        print("\nüîß –•–æ—Ç–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏? (y/n)")
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã input()
        print("üí° –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ:")
        print("   python3 scripts/sfm_file_validator.py --fix")
    else:
        print("\nüéâ –í–°–ï –§–ê–ô–õ–´ –°–£–©–ï–°–¢–í–£–Æ–¢!")
        print("‚úÖ SFM —Ä–µ–µ—Å—Ç—Ä –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–∞–ª–∏–¥–µ–Ω")