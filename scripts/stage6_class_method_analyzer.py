#!/usr/bin/env python3
"""
–≠–¢–ê–ü 6: –ü–†–û–í–ï–†–ö–ê –ú–ï–¢–û–î–û–í –ò –ö–õ–ê–°–°–û–í
–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–ª–∞—Å—Å–æ–≤, –º–µ—Ç–æ–¥–æ–≤, –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
"""

import ast
import inspect
import sys
import json
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Any, Optional, Tuple

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append('/Users/sergejhlystov/ALADDIN_NEW')

class ClassMethodAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∫–ª–∞—Å—Å–æ–≤ –∏ –º–µ—Ç–æ–¥–æ–≤ –¥–ª—è recovery_service.py"""
    
    def __init__(self, file_path: str = "security/reactive/recovery_service.py"):
        self.file_path = Path(file_path)
        self.analysis_results = {}
        self.errors = []
        self.warnings = []
        
    def analyze_file(self) -> Dict[str, Any]:
        """–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞"""
        print("üîç –≠–¢–ê–ü 6: –ü–†–û–í–ï–†–ö–ê –ú–ï–¢–û–î–û–í –ò –ö–õ–ê–°–°–û–í")
        print("=" * 50)
        
        # 6.1 - –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–ª–∞—Å—Å–æ–≤
        print("üìã 6.1 - –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –ö–õ–ê–°–°–û–í:")
        classes_info = self._analyze_classes()
        
        # 6.2 - –ê–Ω–∞–ª–∏–∑ –º–µ—Ç–æ–¥–æ–≤ –∫–ª–∞—Å—Å–æ–≤
        print("üìã 6.2 - –ê–ù–ê–õ–ò–ó –ú–ï–¢–û–î–û–í –ö–õ–ê–°–°–û–í:")
        methods_info = self._analyze_methods()
        
        # 6.3 - –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–µ—Ç–æ–¥–æ–≤
        print("üìã 6.3 - –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ù–û–°–¢–ò –ú–ï–¢–û–î–û–í:")
        accessibility_info = self._check_method_accessibility()
        
        # 6.4 - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π (–Ω–µ –∫–ª–∞—Å—Å–æ–≤)
        print("üìã 6.4 - –ü–†–û–í–ï–†–ö–ê –§–£–ù–ö–¶–ò–ô (–ù–ï –ö–õ–ê–°–°–û–í):")
        functions_info = self._analyze_functions()
        
        # 6.5 - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        print("üìã 6.5 - –ü–†–û–í–ï–†–ö–ê –ò–ú–ü–û–†–¢–û–í –ò –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô:")
        imports_info = self._analyze_imports()
        
        # 6.6 - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –∫–ª–∞—Å—Å–æ–≤
        print("üìã 6.6 - –ü–†–û–í–ï–†–ö–ê –ê–¢–†–ò–ë–£–¢–û–í –ö–õ–ê–°–°–û–í:")
        attributes_info = self._analyze_attributes()
        
        # 6.7 - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
        print("üìã 6.7 - –ü–†–û–í–ï–†–ö–ê –°–ü–ï–¶–ò–ê–õ–¨–ù–´–• –ú–ï–¢–û–î–û–í:")
        special_methods_info = self._analyze_special_methods()
        
        # 6.8 - –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        print("üìã 6.8 - –ü–†–û–í–ï–†–ö–ê –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–ò:")
        documentation_info = self._analyze_documentation()
        
        # 6.9 - –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
        print("üìã 6.9 - –ü–†–û–í–ï–†–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò –û–®–ò–ë–û–ö:")
        error_handling_info = self._analyze_error_handling()
        
        # 6.10 - –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        print("üìã 6.10 - –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –í–°–ï–• –ö–û–ú–ü–û–ù–ï–ù–¢–û–í:")
        integration_test_info = self._run_integration_tests()
        
        # 6.11 - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        print("üìã 6.11 - –ü–†–û–í–ï–†–ö–ê –°–û–°–¢–û–Ø–ù–ò–Ø –ê–ö–¢–ò–í–ù–û–ì–û –§–ê–ô–õ–ê:")
        file_state_info = self._check_file_state()
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.analysis_results = {
            "timestamp": datetime.now().isoformat(),
            "file_path": str(self.file_path),
            "classes": classes_info,
            "methods": methods_info,
            "accessibility": accessibility_info,
            "functions": functions_info,
            "imports": imports_info,
            "attributes": attributes_info,
            "special_methods": special_methods_info,
            "documentation": documentation_info,
            "error_handling": error_handling_info,
            "integration_tests": integration_test_info,
            "file_state": file_state_info,
            "errors": self.errors,
            "warnings": self.warnings
        }
        
        return self.analysis_results
    
    def _analyze_classes(self) -> Dict[str, Any]:
        """6.1 - –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–ª–∞—Å—Å–æ–≤"""
        try:
            with open(self.file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            tree = ast.parse(content)
            classes = []
            
            for node in ast.walk(tree):
                if isinstance(node, ast.ClassDef):
                    class_info = {
                        "name": node.name,
                        "line_number": node.lineno,
                        "bases": [base.id if isinstance(base, ast.Name) else str(base) for base in node.bases],
                        "docstring": ast.get_docstring(node),
                        "methods_count": len([n for n in node.body if isinstance(n, ast.FunctionDef)]),
                        "attributes_count": len([n for n in node.body if isinstance(n, ast.Assign)])
                    }
                    classes.append(class_info)
                    print(f"   ‚úÖ –ö–ª–∞—Å—Å: {class_info['name']}")
                    print(f"      üìç –°—Ç—Ä–æ–∫–∞: {class_info['line_number']}")
                    print(f"      üèóÔ∏è –ë–∞–∑–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã: {class_info['bases']}")
                    print(f"      üìù –ú–µ—Ç–æ–¥–æ–≤: {class_info['methods_count']}")
                    print(f"      üîß –ê—Ç—Ä–∏–±—É—Ç–æ–≤: {class_info['attributes_count']}")
            
            return {
                "total_classes": len(classes),
                "classes": classes
            }
            
        except Exception as e:
            self.errors.append(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–ª–∞—Å—Å–æ–≤: {e}")
            return {"error": str(e)}
    
    def _analyze_methods(self) -> Dict[str, Any]:
        """6.2 - –ê–Ω–∞–ª–∏–∑ –º–µ—Ç–æ–¥–æ–≤ –∫–ª–∞—Å—Å–æ–≤"""
        try:
            with open(self.file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            tree = ast.parse(content)
            methods = []
            
            for node in ast.walk(tree):
                if isinstance(node, ast.FunctionDef):
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ—Ç–æ–¥–∞
                    method_type = "function"
                    if any(isinstance(parent, ast.ClassDef) for parent in ast.walk(tree) if hasattr(parent, 'body') and node in parent.body):
                        if node.name.startswith('_'):
                            if node.name.startswith('__'):
                                method_type = "private"
                            else:
                                method_type = "protected"
                        else:
                            method_type = "public"
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã
                    decorators = []
                    for decorator in node.decorator_list:
                        if isinstance(decorator, ast.Name):
                            decorators.append(decorator.id)
                        elif isinstance(decorator, ast.Attribute):
                            decorators.append(f"{decorator.attr}")
                    
                    method_info = {
                        "name": node.name,
                        "line_number": node.lineno,
                        "type": method_type,
                        "decorators": decorators,
                        "args": [arg.arg for arg in node.args.args],
                        "defaults_count": len(node.args.defaults),
                        "docstring": ast.get_docstring(node),
                        "is_async": isinstance(node, ast.AsyncFunctionDef)
                    }
                    methods.append(method_info)
                    print(f"   ‚úÖ –ú–µ—Ç–æ–¥: {method_info['name']} ({method_info['type']})")
                    print(f"      üìç –°—Ç—Ä–æ–∫–∞: {method_info['line_number']}")
                    print(f"      üîß –ê—Ä–≥—É–º–µ–Ω—Ç—ã: {method_info['args']}")
                    print(f"      üè∑Ô∏è –î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã: {method_info['decorators']}")
                    print(f"      ‚ö° Async: {'–î–∞' if method_info['is_async'] else '–ù–µ—Ç'}")
            
            return {
                "total_methods": len(methods),
                "methods": methods,
                "public_methods": len([m for m in methods if m['type'] == 'public']),
                "private_methods": len([m for m in methods if m['type'] == 'private']),
                "protected_methods": len([m for m in methods if m['type'] == 'protected']),
                "async_methods": len([m for m in methods if m['is_async']])
            }
            
        except Exception as e:
            self.errors.append(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –º–µ—Ç–æ–¥–æ–≤: {e}")
            return {"error": str(e)}
    
    def _check_method_accessibility(self) -> Dict[str, Any]:
        """6.3 - –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–µ—Ç–æ–¥–æ–≤"""
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            sys.path.append(str(self.file_path.parent))
            module_name = self.file_path.stem
            
            try:
                module = __import__(module_name)
                classes = [getattr(module, name) for name in dir(module) if isinstance(getattr(module, name), type)]
                
                accessibility_results = []
                
                for cls in classes:
                    if cls.__name__ != 'type':  # –ò—Å–∫–ª—é—á–∞–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã
                        print(f"   üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞: {cls.__name__}")
                        
                        try:
                            # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä
                            instance = cls()
                            print(f"      ‚úÖ –≠–∫–∑–µ–º–ø–ª—è—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                            
                            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–µ—Ç–æ–¥—ã
                            methods = [method for method in dir(instance) if not method.startswith('__')]
                            print(f"      üìã –î–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤: {len(methods)}")
                            
                            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –º–µ—Ç–æ–¥
                            working_methods = []
                            broken_methods = []
                            
                            for method_name in methods:
                                try:
                                    method = getattr(instance, method_name)
                                    if callable(method):
                                        # –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–∑–≤–∞—Ç—å –º–µ—Ç–æ–¥ —Å –ø—É—Å—Ç—ã–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
                                        try:
                                            method()
                                            working_methods.append(method_name)
                                        except TypeError:
                                            # –ú–µ—Ç–æ–¥ —Ç—Ä–µ–±—É–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
                                            working_methods.append(f"{method_name} (—Ç—Ä–µ–±—É–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã)")
                                        except Exception as e:
                                            broken_methods.append(f"{method_name}: {str(e)}")
                                except Exception as e:
                                    broken_methods.append(f"{method_name}: {str(e)}")
                            
                            accessibility_results.append({
                                "class_name": cls.__name__,
                                "instance_created": True,
                                "total_methods": len(methods),
                                "working_methods": working_methods,
                                "broken_methods": broken_methods
                            })
                            
                            print(f"      ‚úÖ –†–∞–±–æ—Ç–∞—é—â–∏—Ö –º–µ—Ç–æ–¥–æ–≤: {len(working_methods)}")
                            if broken_methods:
                                print(f"      ‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤: {len(broken_methods)}")
                                for broken in broken_methods[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                                    print(f"         - {broken}")
                            
                        except Exception as e:
                            print(f"      ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞: {e}")
                            accessibility_results.append({
                                "class_name": cls.__name__,
                                "instance_created": False,
                                "error": str(e)
                            })
                
                return {
                    "classes_tested": len(accessibility_results),
                    "successful_instances": len([r for r in accessibility_results if r.get("instance_created", False)]),
                    "results": accessibility_results
                }
                
            except ImportError as e:
                self.errors.append(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª—è: {e}")
                return {"error": str(e)}
                
        except Exception as e:
            self.errors.append(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏: {e}")
            return {"error": str(e)}
    
    def _analyze_functions(self) -> Dict[str, Any]:
        """6.4 - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π (–Ω–µ –∫–ª–∞—Å—Å–æ–≤)"""
        try:
            with open(self.file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            tree = ast.parse(content)
            functions = []
            
            for node in ast.walk(tree):
                if isinstance(node, ast.FunctionDef) and not any(isinstance(parent, ast.ClassDef) for parent in ast.walk(tree) if hasattr(parent, 'body') and node in parent.body):
                    function_info = {
                        "name": node.name,
                        "line_number": node.lineno,
                        "args": [arg.arg for arg in node.args.args],
                        "defaults_count": len(node.args.defaults),
                        "docstring": ast.get_docstring(node),
                        "is_async": isinstance(node, ast.AsyncFunctionDef)
                    }
                    functions.append(function_info)
                    print(f"   ‚úÖ –§—É–Ω–∫—Ü–∏—è: {function_info['name']}")
                    print(f"      üìç –°—Ç—Ä–æ–∫–∞: {function_info['line_number']}")
                    print(f"      üîß –ê—Ä–≥—É–º–µ–Ω—Ç—ã: {function_info['args']}")
                    print(f"      ‚ö° Async: {'–î–∞' if function_info['is_async'] else '–ù–µ—Ç'}")
            
            return {
                "total_functions": len(functions),
                "functions": functions,
                "async_functions": len([f for f in functions if f['is_async']])
            }
            
        except Exception as e:
            self.errors.append(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ—É–Ω–∫—Ü–∏–π: {e}")
            return {"error": str(e)}
    
    def _analyze_imports(self) -> Dict[str, Any]:
        """6.5 - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        try:
            with open(self.file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            tree = ast.parse(content)
            imports = []
            unused_imports = []
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∏–º–ø–æ—Ä—Ç—ã
            for node in ast.walk(tree):
                if isinstance(node, ast.Import):
                    for alias in node.names:
                        imports.append({
                            "type": "import",
                            "name": alias.name,
                            "alias": alias.asname,
                            "line": node.lineno
                        })
                elif isinstance(node, ast.ImportFrom):
                    for alias in node.names:
                        imports.append({
                            "type": "from_import",
                            "module": node.module,
                            "name": alias.name,
                            "alias": alias.asname,
                            "line": node.lineno
                        })
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤
            for imp in imports:
                name_to_check = imp["alias"] if imp["alias"] else imp["name"]
                if name_to_check not in content.replace(imp["line"], ""):  # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                    unused_imports.append(imp)
            
            print(f"   üì¶ –í—Å–µ–≥–æ –∏–º–ø–æ—Ä—Ç–æ–≤: {len(imports)}")
            print(f"   ‚ùå –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö: {len(unused_imports)}")
            
            if unused_imports:
                for unused in unused_imports[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                    print(f"      - {unused['name']} (—Å—Ç—Ä–æ–∫–∞ {unused['line']})")
            
            return {
                "total_imports": len(imports),
                "unused_imports": len(unused_imports),
                "imports": imports,
                "unused_list": unused_imports
            }
            
        except Exception as e:
            self.errors.append(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–º–ø–æ—Ä—Ç–æ–≤: {e}")
            return {"error": str(e)}
    
    def _analyze_attributes(self) -> Dict[str, Any]:
        """6.6 - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –∫–ª–∞—Å—Å–æ–≤"""
        try:
            with open(self.file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            tree = ast.parse(content)
            attributes = []
            
            for node in ast.walk(tree):
                if isinstance(node, ast.ClassDef):
                    class_attributes = []
                    for item in node.body:
                        if isinstance(item, ast.Assign):
                            for target in item.targets:
                                if isinstance(target, ast.Name):
                                    class_attributes.append({
                                        "name": target.id,
                                        "line": item.lineno,
                                        "value_type": type(item.value).__name__
                                    })
                    
                    if class_attributes:
                        attributes.append({
                            "class_name": node.name,
                            "attributes": class_attributes
                        })
                        print(f"   ‚úÖ –ö–ª–∞—Å—Å {node.name}: {len(class_attributes)} –∞—Ç—Ä–∏–±—É—Ç–æ–≤")
                        for attr in class_attributes:
                            print(f"      - {attr['name']} ({attr['value_type']})")
            
            return {
                "total_attributes": sum(len(cls["attributes"]) for cls in attributes),
                "class_attributes": attributes
            }
            
        except Exception as e:
            self.errors.append(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∞—Ç—Ä–∏–±—É—Ç–æ–≤: {e}")
            return {"error": str(e)}
    
    def _analyze_special_methods(self) -> Dict[str, Any]:
        """6.7 - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤"""
        special_methods = [
            "__init__", "__str__", "__repr__", "__eq__", "__lt__", "__le__", 
            "__gt__", "__ge__", "__ne__", "__iter__", "__next__", "__enter__", 
            "__exit__", "__len__", "__getitem__", "__setitem__", "__delitem__"
        ]
        
        try:
            with open(self.file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            tree = ast.parse(content)
            found_methods = []
            
            for node in ast.walk(tree):
                if isinstance(node, ast.FunctionDef) and node.name in special_methods:
                    found_methods.append({
                        "name": node.name,
                        "line": node.lineno,
                        "class": "unknown"  # –ú–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞
                    })
                    print(f"   ‚úÖ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥: {node.name} (—Å—Ç—Ä–æ–∫–∞ {node.lineno})")
            
            missing_methods = [method for method in special_methods if not any(m["name"] == method for m in found_methods)]
            
            if missing_methods:
                print(f"   ‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –º–µ—Ç–æ–¥—ã: {missing_methods}")
            
            return {
                "found_methods": found_methods,
                "missing_methods": missing_methods,
                "total_found": len(found_methods),
                "total_missing": len(missing_methods)
            }
            
        except Exception as e:
            self.errors.append(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤: {e}")
            return {"error": str(e)}
    
    def _analyze_documentation(self) -> Dict[str, Any]:
        """6.8 - –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
        try:
            with open(self.file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            tree = ast.parse(content)
            doc_stats = {
                "classes_with_docstring": 0,
                "methods_with_docstring": 0,
                "functions_with_docstring": 0,
                "total_classes": 0,
                "total_methods": 0,
                "total_functions": 0
            }
            
            for node in ast.walk(tree):
                if isinstance(node, ast.ClassDef):
                    doc_stats["total_classes"] += 1
                    if ast.get_docstring(node):
                        doc_stats["classes_with_docstring"] += 1
                        print(f"   ‚úÖ –ö–ª–∞—Å—Å {node.name}: –µ—Å—Ç—å docstring")
                    else:
                        print(f"   ‚ö†Ô∏è –ö–ª–∞—Å—Å {node.name}: –Ω–µ—Ç docstring")
                
                elif isinstance(node, ast.FunctionDef):
                    if any(isinstance(parent, ast.ClassDef) for parent in ast.walk(tree) if hasattr(parent, 'body') and node in parent.body):
                        doc_stats["total_methods"] += 1
                        if ast.get_docstring(node):
                            doc_stats["methods_with_docstring"] += 1
                    else:
                        doc_stats["total_functions"] += 1
                        if ast.get_docstring(node):
                            doc_stats["functions_with_docstring"] += 1
            
            print(f"   üìä –ö–ª–∞—Å—Å—ã —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π: {doc_stats['classes_with_docstring']}/{doc_stats['total_classes']}")
            print(f"   üìä –ú–µ—Ç–æ–¥—ã —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π: {doc_stats['methods_with_docstring']}/{doc_stats['total_methods']}")
            print(f"   üìä –§—É–Ω–∫—Ü–∏–∏ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π: {doc_stats['functions_with_docstring']}/{doc_stats['total_functions']}")
            
            return doc_stats
            
        except Exception as e:
            self.errors.append(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: {e}")
            return {"error": str(e)}
    
    def _analyze_error_handling(self) -> Dict[str, Any]:
        """6.9 - –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
        try:
            with open(self.file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            tree = ast.parse(content)
            error_handling = {
                "try_except_blocks": 0,
                "raise_statements": 0,
                "logging_statements": 0,
                "return_error_patterns": 0
            }
            
            for node in ast.walk(tree):
                if isinstance(node, ast.Try):
                    error_handling["try_except_blocks"] += 1
                    print(f"   ‚úÖ Try-except –±–ª–æ–∫ (—Å—Ç—Ä–æ–∫–∞ {node.lineno})")
                
                elif isinstance(node, ast.Raise):
                    error_handling["raise_statements"] += 1
                
                elif isinstance(node, ast.Call) and isinstance(node.func, ast.Attribute):
                    if node.func.attr in ['error', 'warning', 'critical', 'exception']:
                        error_handling["logging_statements"] += 1
            
            print(f"   üìä Try-except –±–ª–æ–∫–æ–≤: {error_handling['try_except_blocks']}")
            print(f"   üìä Raise statements: {error_handling['raise_statements']}")
            print(f"   üìä Logging statements: {error_handling['logging_statements']}")
            
            return error_handling
            
        except Exception as e:
            self.errors.append(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫: {e}")
            return {"error": str(e)}
    
    def _run_integration_tests(self) -> Dict[str, Any]:
        """6.10 - –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        try:
            print("   üß™ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤...")
            
            # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞
            try:
                sys.path.append(str(self.file_path.parent))
                module = __import__(self.file_path.stem)
                print("      ‚úÖ –ú–æ–¥—É–ª—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è —É—Å–ø–µ—à–Ω–æ")
                import_success = True
            except Exception as e:
                print(f"      ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
                import_success = False
            
            # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞—Å—Å–æ–≤
            class_creation_success = 0
            total_classes = 0
            
            if import_success:
                classes = [getattr(module, name) for name in dir(module) if isinstance(getattr(module, name), type) and name != 'type']
                total_classes = len(classes)
                
                for cls in classes:
                    try:
                        instance = cls()
                        class_creation_success += 1
                        print(f"      ‚úÖ –ö–ª–∞—Å—Å {cls.__name__}: —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–æ–∑–¥–∞–Ω")
                    except Exception as e:
                        print(f"      ‚ùå –ö–ª–∞—Å—Å {cls.__name__}: –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è - {e}")
            
            return {
                "import_success": import_success,
                "class_creation_success": class_creation_success,
                "total_classes": total_classes,
                "success_rate": (class_creation_success / total_classes * 100) if total_classes > 0 else 0
            }
            
        except Exception as e:
            self.errors.append(f"–û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {e}")
            return {"error": str(e)}
    
    def _check_file_state(self) -> Dict[str, Any]:
        """6.11 - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        try:
            if not self.file_path.exists():
                return {"error": "–§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"}
            
            stat = self.file_path.stat()
            
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ –∫–æ–ø–∏—è–º–∏
            backup_dir = Path("formatting_work")
            backups = list(backup_dir.glob(f"{self.file_path.stem}*.py")) if backup_dir.exists() else []
            
            print(f"   üìÅ –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {self.file_path}")
            print(f"   üìä –†–∞–∑–º–µ—Ä: {stat.st_size:,} –±–∞–π—Ç")
            print(f"   üìÖ –ò–∑–º–µ–Ω—ë–Ω: {datetime.fromtimestamp(stat.st_mtime)}")
            print(f"   üíæ –†–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π: {len(backups)}")
            
            return {
                "file_exists": True,
                "file_size": stat.st_size,
                "last_modified": stat.st_mtime,
                "backup_count": len(backups),
                "backups": [str(b) for b in backups]
            }
            
        except Exception as e:
            self.errors.append(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            return {"error": str(e)}
    
    def save_analysis_report(self) -> str:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á—ë—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            report_dir = Path("formatting_work")
            report_dir.mkdir(exist_ok=True)
            
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            report_path = report_dir / f"stage6_analysis_report_{timestamp}.json"
            
            with open(report_path, 'w', encoding='utf-8') as f:
                json.dump(self.analysis_results, f, indent=2, ensure_ascii=False)
            
            print(f"\nüìÑ –û—Ç—á—ë—Ç –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {report_path}")
            return str(report_path)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á—ë—Ç–∞: {e}")
            return ""

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    analyzer = ClassMethodAnalyzer()
    results = analyzer.analyze_file()
    
    print(f"\nüìä –ò–¢–û–ì–ò –ê–ù–ê–õ–ò–ó–ê:")
    print(f"   ‚Ä¢ –û—à–∏–±–æ–∫: {len(analyzer.errors)}")
    print(f"   ‚Ä¢ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {len(analyzer.warnings)}")
    
    if analyzer.errors:
        print(f"\n‚ùå –û–®–ò–ë–ö–ò:")
        for error in analyzer.errors:
            print(f"   - {error}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á—ë—Ç
    report_path = analyzer.save_analysis_report()
    
    print(f"\n‚úÖ –≠–¢–ê–ü 6 –ó–ê–í–ï–†–®–Å–ù!")
    print(f"üìÑ –û—Ç—á—ë—Ç: {report_path}")

if __name__ == "__main__":
    main()