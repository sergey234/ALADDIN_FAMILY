#!/usr/bin/env python3
"""
–°–∏—Å—Ç–µ–º–∞ –æ—Ç—á—ë—Ç–æ–≤ –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Ä–µ–µ—Å—Ç—Ä–∞ —Ñ—É–Ω–∫—Ü–∏–π ALADDIN
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ª–æ–≥–∏ –∏ —Å–æ–∑–¥–∞—ë—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ç—á—ë—Ç—ã
"""

import json
import logging
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, List, Any, Optional
from collections import defaultdict, Counter

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/registry_reports.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class RegistryProblemReporter:
    """–°–∏—Å—Ç–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á—ë—Ç–æ–≤ –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Ä–µ–µ—Å—Ç—Ä–∞"""
    
    def __init__(self, logs_dir: str = "logs"):
        self.logs_dir = Path(logs_dir)
        self.reports_dir = Path("reports/registry")
        
        # –°–æ–∑–¥–∞—ë–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        self.reports_dir.mkdir(parents=True, exist_ok=True)
        self.logs_dir.mkdir(parents=True, exist_ok=True)
        
        # –ü—É—Ç–∏ –∫ –ª–æ–≥–∞–º
        self.protection_log = self.logs_dir / "registry_protection.log"
        self.validation_log = self.logs_dir / "registry_validation.log"
        self.monitor_log = self.logs_dir / "registry_monitor.log"
        self.alert_log = self.logs_dir / "registry_alerts.log"
        
        logger.info("üìã –°–∏—Å—Ç–µ–º–∞ –æ—Ç—á—ë—Ç–æ–≤ –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def _read_log_file(self, log_path: Path) -> List[Dict[str, Any]]:
        """–ß—Ç–µ–Ω–∏–µ –ª–æ–≥-—Ñ–∞–π–ª–∞"""
        try:
            if not log_path.exists():
                return []
            
            entries = []
            with open(log_path, 'r', encoding='utf-8') as f:
                for line in f:
                    line = line.strip()
                    if not line:
                        continue
                    
                    try:
                        # –ü—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON
                        entry = json.loads(line)
                        entries.append(entry)
                    except json.JSONDecodeError:
                        # –ï—Å–ª–∏ –Ω–µ JSON, —Å–æ–∑–¥–∞—ë–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
                        entries.append({
                            "timestamp": datetime.now().isoformat(),
                            "message": line,
                            "type": "text_log"
                        })
            
            return entries
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–∞ {log_path}: {e}")
            return []
    
    def _analyze_protection_log(self) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –ª–æ–≥–∞ –∑–∞—â–∏—Ç—ã —Ä–µ–µ—Å—Ç—Ä–∞"""
        entries = self._read_log_file(self.protection_log)
        
        analysis = {
            "total_entries": len(entries),
            "registry_updates": 0,
            "functions_deleted": 0,
            "functions_added": 0,
            "backups_created": 0,
            "protection_violations": 0,
            "recent_activities": []
        }
        
        for entry in entries:
            if entry.get("action") == "registry_update":
                analysis["registry_updates"] += 1
                
                changes = entry.get("changes", {})
                analysis["functions_deleted"] += changes.get("deleted_count", 0)
                analysis["functions_added"] += changes.get("added_count", 0)
                
                if changes.get("deleted_count", 0) > 0:
                    analysis["protection_violations"] += 1
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–µ–¥–∞–≤–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                analysis["recent_activities"].append({
                    "timestamp": entry.get("timestamp"),
                    "action": "registry_update",
                    "deleted": changes.get("deleted_count", 0),
                    "added": changes.get("added_count", 0)
                })
        
        return analysis
    
    def _analyze_validation_log(self) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –ª–æ–≥–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        entries = self._read_log_file(self.validation_log)
        
        analysis = {
            "total_validations": len(entries),
            "successful_validations": 0,
            "failed_validations": 0,
            "total_errors": 0,
            "common_errors": Counter(),
            "validation_trends": []
        }
        
        for entry in entries:
            if entry.get("action") == "format_validation":
                errors_count = entry.get("errors_count", 0)
                analysis["total_errors"] += errors_count
                
                if errors_count == 0:
                    analysis["successful_validations"] += 1
                else:
                    analysis["failed_validations"] += 1
                
                # –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫
                for error in entry.get("errors", []):
                    analysis["common_errors"][error] += 1
                
                # –¢—Ä–µ–Ω–¥—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
                analysis["validation_trends"].append({
                    "timestamp": entry.get("timestamp"),
                    "errors_count": errors_count,
                    "functions_count": entry.get("functions_count", 0)
                })
        
        return analysis
    
    def _analyze_monitor_log(self) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –ª–æ–≥–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        entries = self._read_log_file(self.monitor_log)
        
        analysis = {
            "total_events": len(entries),
            "file_changes": 0,
            "function_count_changes": 0,
            "size_changes": 0,
            "monitoring_uptime": 0,
            "recent_events": []
        }
        
        for entry in entries:
            changes = entry.get("changes", [])
            analysis["file_changes"] += len([c for c in changes if c.get("type") in ["file_created", "file_deleted"]])
            analysis["function_count_changes"] += len([c for c in changes if c.get("type") in ["functions_added", "functions_removed"]])
            analysis["size_changes"] += len([c for c in changes if c.get("type") == "size_changed"])
            
            # –ù–µ–¥–∞–≤–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
            if changes:
                analysis["recent_events"].append({
                    "timestamp": entry.get("timestamp"),
                    "changes": changes,
                    "functions_count": entry.get("current_functions_count", 0)
                })
        
        return analysis
    
    def _analyze_alert_log(self) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –ª–æ–≥–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π"""
        entries = self._read_log_file(self.alert_log)
        
        analysis = {
            "total_alerts": len(entries),
            "critical_alerts": 0,
            "warning_alerts": 0,
            "info_alerts": 0,
            "alert_types": Counter(),
            "alert_timeline": []
        }
        
        for entry in entries:
            severity = entry.get("severity", "unknown")
            alert_type = entry.get("type", "unknown")
            
            analysis["alert_types"][alert_type] += 1
            
            if severity == "critical":
                analysis["critical_alerts"] += 1
            elif severity == "warning":
                analysis["warning_alerts"] += 1
            elif severity == "info":
                analysis["info_alerts"] += 1
            
            analysis["alert_timeline"].append({
                "timestamp": entry.get("timestamp"),
                "type": alert_type,
                "severity": severity,
                "message": entry.get("message", "")
            })
        
        return analysis
    
    def generate_comprehensive_report(self) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞"""
        logger.info("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞ –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Ä–µ–µ—Å—Ç—Ä–∞")
        
        # –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –ª–æ–≥–æ–≤
        protection_analysis = self._analyze_protection_log()
        validation_analysis = self._analyze_validation_log()
        monitor_analysis = self._analyze_monitor_log()
        alert_analysis = self._analyze_alert_log()
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_problems = (
            protection_analysis["protection_violations"] +
            validation_analysis["failed_validations"] +
            alert_analysis["critical_alerts"]
        )
        
        # –û—Ü–µ–Ω–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
        health_score = self._calculate_health_score(
            protection_analysis,
            validation_analysis,
            monitor_analysis,
            alert_analysis
        )
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = self._generate_recommendations(
            protection_analysis,
            validation_analysis,
            monitor_analysis,
            alert_analysis
        )
        
        report = {
            "report_metadata": {
                "generated_at": datetime.now().isoformat(),
                "report_type": "comprehensive_registry_analysis",
                "analysis_period": "all_time"
            },
            "system_health": {
                "health_score": health_score,
                "total_problems": total_problems,
                "status": self._get_health_status(health_score)
            },
            "protection_analysis": protection_analysis,
            "validation_analysis": validation_analysis,
            "monitoring_analysis": monitor_analysis,
            "alert_analysis": alert_analysis,
            "recommendations": recommendations,
            "summary": self._generate_summary(
                protection_analysis,
                validation_analysis,
                monitor_analysis,
                alert_analysis,
                health_score
            )
        }
        
        return report
    
    def _calculate_health_score(self, protection: Dict, validation: Dict, monitor: Dict, alerts: Dict) -> int:
        """–†–∞—Å—á—ë—Ç –æ—Ü–µ–Ω–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã (0-100)"""
        score = 100
        
        # –®—Ç—Ä–∞—Ñ—ã –∑–∞ –ø—Ä–æ–±–ª–µ–º—ã
        score -= protection["protection_violations"] * 10  # -10 –∑–∞ –∫–∞–∂–¥–æ–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –∑–∞—â–∏—Ç—ã
        score -= validation["failed_validations"] * 5      # -5 –∑–∞ –∫–∞–∂–¥—É—é –Ω–µ—É–¥–∞—á–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é
        score -= alerts["critical_alerts"] * 15            # -15 –∑–∞ –∫–∞–∂–¥–æ–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        score -= alerts["warning_alerts"] * 3              # -3 –∑–∞ –∫–∞–∂–¥–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        
        # –ë–æ–Ω—É—Å—ã –∑–∞ —Ö–æ—Ä–æ—à—É—é —Ä–∞–±–æ—Ç—É
        if protection["registry_updates"] > 0:
            score += min(10, protection["registry_updates"])  # +1 –∑–∞ –∫–∞–∂–¥–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (–º–∞–∫—Å +10)
        
        if validation["successful_validations"] > validation["failed_validations"]:
            score += 5  # +5 –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω—ã—Ö –≤–∞–ª–∏–¥–∞—Ü–∏–π –±–æ–ª—å—à–µ
        
        return max(0, min(100, score))
    
    def _get_health_status(self, score: int) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
        if score >= 90:
            return "excellent"
        elif score >= 70:
            return "good"
        elif score >= 50:
            return "fair"
        elif score >= 30:
            return "poor"
        else:
            return "critical"
    
    def _generate_recommendations(self, protection: Dict, validation: Dict, monitor: Dict, alerts: Dict) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —É–ª—É—á—à–µ–Ω–∏—é"""
        recommendations = []
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∑–∞—â–∏—Ç–µ
        if protection["protection_violations"] > 0:
            recommendations.append("üö® –ö—Ä–∏—Ç–∏—á–Ω–æ: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–∞—Ä—É—à–µ–Ω–∏—è –∑–∞—â–∏—Ç—ã —Ä–µ–µ—Å—Ç—Ä–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–µ –ø—Ä–∞–≤–∏–ª–∞.")
        
        if protection["functions_deleted"] > 0:
            recommendations.append("‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –£–¥–∞–ª–µ–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ –±—ã–ª–æ –Ω–∞–º–µ—Ä–µ–Ω–Ω–æ.")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        if validation["failed_validations"] > validation["successful_validations"]:
            recommendations.append("üîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ú–Ω–æ–≥–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –≤–∞–ª–∏–¥–∞—Ü–∏–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–µ—Å—Ç—Ä–µ.")
        
        if validation["common_errors"]:
            most_common_error = validation["common_errors"].most_common(1)[0]
            recommendations.append(f"üîç –ß–∞—Å—Ç–∞—è –æ—à–∏–±–∫–∞: '{most_common_error[0]}' –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è {most_common_error[1]} —Ä–∞–∑. –ò—Å–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É
        if alerts["critical_alerts"] > 0:
            recommendations.append("üö® –ö—Ä–∏—Ç–∏—á–Ω–æ: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è. –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏—Å—Ç–µ–º—É.")
        
        if alerts["warning_alerts"] > 5:
            recommendations.append("‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –ú–Ω–æ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Ñ–∏–ª—å—Ç—Ä–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.")
        
        # –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if not recommendations:
            recommendations.append("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥.")
        
        return recommendations
    
    def _generate_summary(self, protection: Dict, validation: Dict, monitor: Dict, alerts: Dict, health_score: int) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–∞—Ç–∫–æ–≥–æ —Ä–µ–∑—é–º–µ"""
        total_functions = protection.get("functions_added", 0) - protection.get("functions_deleted", 0)
        
        summary_parts = [
            f"–°–∏—Å—Ç–µ–º–∞ —Ä–µ–µ—Å—Ç—Ä–∞ —Ñ—É–Ω–∫—Ü–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –æ—Ü–µ–Ω–∫–æ–π {health_score}/100.",
            f"–í—Å–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ä–µ–µ—Å—Ç—Ä–∞: {protection['registry_updates']}",
            f"–í–∞–ª–∏–¥–∞—Ü–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {validation['total_validations']}",
            f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –ø–æ–ª—É—á–µ–Ω–æ: {alerts['total_alerts']}"
        ]
        
        if protection["functions_deleted"] > 0:
            summary_parts.append(f"‚ö†Ô∏è –£–¥–∞–ª–µ–Ω–æ —Ñ—É–Ω–∫—Ü–∏–π: {protection['functions_deleted']}")
        
        if alerts["critical_alerts"] > 0:
            summary_parts.append(f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {alerts['critical_alerts']}")
        
        return " ".join(summary_parts)
    
    def save_report(self, report: Dict[str, Any], filename: Optional[str] = None) -> str:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á—ë—Ç–∞ –≤ —Ñ–∞–π–ª"""
        if filename is None:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"registry_problems_report_{timestamp}.json"
        
        report_path = self.reports_dir / filename
        
        try:
            with open(report_path, 'w', encoding='utf-8') as f:
                json.dump(report, f, indent=2, ensure_ascii=False)
            
            logger.info(f"üìÑ –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {report_path}")
            return str(report_path)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á—ë—Ç–∞: {e}")
            return ""
    
    def generate_and_save_report(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á—ë—Ç–∞"""
        report = self.generate_comprehensive_report()
        return self.save_report(report)

def main():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –æ—Ç—á—ë—Ç–æ–≤"""
    print("üìã –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –û–¢–ß–Å–¢–û–í –û –ü–†–û–ë–õ–ï–ú–ê–•")
    print("=" * 50)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –æ—Ç—á—ë—Ç–æ–≤
    reporter = RegistryProblemReporter()
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞
    report_path = reporter.generate_and_save_report()
    
    if report_path:
        print(f"‚úÖ –û—Ç—á—ë—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {report_path}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É
        with open(report_path, 'r', encoding='utf-8') as f:
            report = json.load(f)
        
        print(f"\nüìä –ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞:")
        print(f"   ‚Ä¢ –û—Ü–µ–Ω–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è: {report['system_health']['health_score']}/100")
        print(f"   ‚Ä¢ –°—Ç–∞—Ç—É—Å: {report['system_health']['status']}")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ–±–ª–µ–º: {report['system_health']['total_problems']}")
        
        print(f"\nüîç –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        for i, rec in enumerate(report['recommendations'], 1):
            print(f"   {i}. {rec}")
        
        print(f"\nüìÑ –ü–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç: {report_path}")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞")

if __name__ == "__main__":
    main()