#!/usr/bin/env python3
"""
–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ flake8 —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
"""

import subprocess
import re
from collections import Counter
import json

def run_flake8_security():
    """–ó–∞–ø—É—Å–∫ flake8 —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    print("üîç –ó–ê–ü–£–°–ö FLAKE8 –î–õ–Ø –°–ò–°–¢–ï–ú–´ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò")
    print("=" * 50)
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º flake8 –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        result = subprocess.run([
            'python3', '-m', 'flake8', 
            '--count', '--statistics', '--max-line-length=79',
            'security/', 'core/', 'ai/', 'config/'
        ], capture_output=True, text=True, timeout=300)
        
        if result.returncode == 0:
            print("‚úÖ –û—à–∏–±–æ–∫ flake8 –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
            return Counter(), 0, 0
        else:
            # –ü–∞—Ä—Å–∏–º –æ—à–∏–±–∫–∏
            error_counts = Counter()
            total_errors = 0
            files_with_errors = set()
            
            for line in result.stdout.split('\n'):
                if ':' in line and any(code in line for code in ['E', 'W', 'F']):
                    # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞: file.py:line:col: E123 error message
                    match = re.match(r'^([^:]+):(\d+):(\d+):\s+([EWF]\d+)\s+(.*)$', line)
                    if match:
                        file_path = match.group(1)
                        error_code = match.group(4)
                        error_counts[error_code] += 1
                        total_errors += 1
                        files_with_errors.add(file_path)
            
            return error_counts, total_errors, len(files_with_errors)
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ flake8: {e}")
        return Counter(), 0, 0

def analyze_security_files():
    """–ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤ —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    print("\nüìä –ê–ù–ê–õ–ò–ó –§–ê–ô–õ–û–í –°–ò–°–¢–ï–ú–´ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò")
    print("-" * 40)
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
    import os
    from pathlib import Path
    
    security_dirs = ['security', 'core', 'ai', 'config']
    total_files = 0
    python_files = []
    
    for dir_name in security_dirs:
        if os.path.exists(dir_name):
            for root, dirs, files in os.walk(dir_name):
                for file in files:
                    if file.endswith('.py'):
                        python_files.append(os.path.join(root, file))
                        total_files += 1
    
    print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ Python —Ñ–∞–π–ª–æ–≤: {total_files}")
    print(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {', '.join(security_dirs)}")
    
    return total_files, python_files

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîí –ü–†–ê–í–ò–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –°–ò–°–¢–ï–ú–´ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò")
    print("=" * 60)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
    total_files, python_files = analyze_security_files()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º flake8
    error_counts, total_errors, files_with_errors = run_flake8_security()
    
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê FLAKE8")
    print("-" * 40)
    print(f"–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {total_files}")
    print(f"–§–∞–π–ª–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏: {files_with_errors}")
    print(f"–í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {total_errors}")
    print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —Ñ–∞–π–ª–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏: {(files_with_errors/total_files*100):.1f}%")
    
    if total_errors > 0:
        print(f"\nüî¥ –¢–û–ü-10 –û–®–ò–ë–û–ö:")
        print("-" * 20)
        for error_code, count in error_counts.most_common(10):
            percentage = (count / total_errors) * 100
            print(f"{error_code}: {count} ({percentage:.1f}%)")
        
        print(f"\nüìã –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print("-" * 30)
        for error_code, count in error_counts.most_common():
            percentage = (count / total_errors) * 100
            print(f"{error_code}: {count} –æ—à–∏–±–æ–∫ ({percentage:.1f}%)")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    results = {
        "analysis_timestamp": "2025-09-13T23:00:00",
        "total_files": total_files,
        "files_with_errors": files_with_errors,
        "total_errors": total_errors,
        "error_percentage": (files_with_errors/total_files*100) if total_files > 0 else 0,
        "error_breakdown": dict(error_counts)
    }
    
    with open("security_flake8_analysis.json", "w", encoding="utf-8") as f:
        json.dump(results, f, indent=2, ensure_ascii=False)
    
    print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: security_flake8_analysis.json")
    
    # –í—ã–≤–æ–¥ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    if total_errors > 0:
        print(f"\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Æ:")
        print("-" * 40)
        
        if 'E501' in error_counts:
            print(f"1. –ò—Å–ø—Ä–∞–≤–∏—Ç—å –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ (E501): {error_counts['E501']} –æ—à–∏–±–æ–∫")
        if 'W293' in error_counts:
            print(f"2. –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–±–µ–ª—ã –∏–∑ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫ (W293): {error_counts['W293']} –æ—à–∏–±–æ–∫")
        if 'F401' in error_counts:
            print(f"3. –£–¥–∞–ª–∏—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã (F401): {error_counts['F401']} –æ—à–∏–±–æ–∫")
        if 'W291' in error_counts:
            print(f"4. –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–±–µ–ª—ã –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫ (W291): {error_counts['W291']} –æ—à–∏–±–æ–∫")
        if 'E302' in error_counts:
            print(f"5. –î–æ–±–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ (E302): {error_counts['E302']} –æ—à–∏–±–æ–∫")
    
    print(f"\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == "__main__":
    main()