#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π ALADDIN
"""

import subprocess
import sys
import os
from datetime import datetime

def check_quality():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
    
    # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    functions = [
        {
            "name": "LoadBalancer",
            "path": "security/microservices/load_balancer.py",
            "type": "Microservice"
        },
        {
            "name": "APIGateway", 
            "path": "security/microservices/api_gateway.py",
            "type": "Microservice"
        },
        {
            "name": "AnalyticsManager",
            "path": "security/ai_agents/analytics_manager.py", 
            "type": "AI Agent"
        },
        {
            "name": "DashboardManager",
            "path": "security/ai_agents/dashboard_manager.py",
            "type": "AI Agent"
        },
        {
            "name": "MonitorManager",
            "path": "security/ai_agents/monitor_manager.py",
            "type": "AI Agent"
        },
        {
            "name": "UniversalPrivacyManager",
            "path": "security/privacy/universal_privacy_manager.py",
            "type": "Privacy Manager"
        }
    ]
    
    print("üîç –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê –ö–ê–ß–ï–°–¢–í–ê ALADDIN")
    print("=" * 60)
    print(f"–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    total_errors = 0
    a_plus_functions = 0
    
    for func in functions:
        if not os.path.exists(func["path"]):
            print(f"‚ùå {func['name']}: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            continue
            
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º flake8
            result = subprocess.run(
                ["python3", "-m", "flake8", func["path"], "--count", "--statistics"],
                capture_output=True, text=True, cwd="/Users/sergejhlystov/ALADDIN_NEW"
            )
            
            # –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if result.returncode == 0:
                errors = 0
                print(f"‚úÖ {func['name']}: 0 –æ—à–∏–±–æ–∫ (A+)")
                a_plus_functions += 1
            else:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫
                lines = result.stdout.strip().split('\n')
                if lines and lines[-1].isdigit():
                    errors = int(lines[-1])
                else:
                    errors = 0
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
                if errors <= 50:
                    quality = "A+"
                    a_plus_functions += 1
                    status = "‚úÖ"
                elif errors <= 100:
                    quality = "A"
                    status = "‚ö†Ô∏è"
                elif errors <= 200:
                    quality = "B"
                    status = "‚ö†Ô∏è"
                else:
                    quality = "C"
                    status = "‚ùå"
                
                print(f"{status} {func['name']}: {errors} –æ—à–∏–±–æ–∫ ({quality})")
            
            total_errors += errors
            
        except Exception as e:
            print(f"‚ùå {func['name']}: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ - {e}")
    
    print()
    print("=" * 60)
    print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"‚Ä¢ –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π: {len(functions)}")
    print(f"‚Ä¢ –§—É–Ω–∫—Ü–∏–π —Å A+ –∫–∞—á–µ—Å—Ç–≤–æ–º: {a_plus_functions}")
    print(f"‚Ä¢ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫: {total_errors}")
    print(f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫: {total_errors // len(functions)}")
    
    if a_plus_functions == len(functions):
        print("üéâ –í–°–ï –§–£–ù–ö–¶–ò–ò –ò–ú–ï–Æ–¢ A+ –ö–ê–ß–ï–°–¢–í–û!")
    else:
        print(f"‚ö†Ô∏è  {len(functions) - a_plus_functions} —Ñ—É–Ω–∫—Ü–∏–π —Ç—Ä–µ–±—É—é—Ç —É–ª—É—á—à–µ–Ω–∏—è")
    
    return total_errors

if __name__ == "__main__":
    check_quality()
