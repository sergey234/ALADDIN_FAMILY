#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üìä –°–ò–°–¢–ï–ú–ê –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –°–ü–Ø–©–ï–ì–û –†–ï–ñ–ò–ú–ê
=====================================

–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞, –∞–ª–µ—Ä—Ç–æ–≤ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—è —Å–ø—è—â–µ–≥–æ —Ä–µ–∂–∏–º–∞
–í–∫–ª—é—á–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è, –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

–ê–≤—Ç–æ—Ä: ALADDIN Security System
–î–∞—Ç–∞: 2025-09-15
–í–µ—Ä—Å–∏—è: 1.0.0
"""

import asyncio
import json
import os
import time
import logging
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, List, Any, Optional
import psutil

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class SleepModeMonitoringSystem:
    """–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–ø—è—â–µ–≥–æ —Ä–µ–∂–∏–º–∞"""
    
    def __init__(self):
        self.monitoring_active = False
        self.alert_thresholds = {
            "cpu_usage": 80.0,
            "memory_usage": 85.0,
            "sleep_functions_count": 50,
            "error_rate": 5.0,
            "response_time": 2.0
        }
        self.alerts = []
        self.metrics = {}
        self.sleep_functions = self._load_sleep_functions()
        
    def _load_sleep_functions(self) -> List[Dict[str, Any]]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Å–ø—è—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
        sleep_functions = []
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ SFM —Ä–µ–µ—Å—Ç—Ä–∞
        try:
            with open("data/sfm/function_registry.json", "r", encoding="utf-8") as f:
                sfm_registry = json.load(f)
                
            if "functions" in sfm_registry:
                for func_id, func_data in sfm_registry["functions"].items():
                    if func_data.get("status") == "sleeping":
                        sleep_functions.append({
                            "function_id": func_id,
                            "name": func_data.get("name", func_id),
                            "sleep_time": func_data.get("sleep_time"),
                            "security_level": func_data.get("security_level", "medium"),
                            "is_critical": func_data.get("is_critical", False)
                        })
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø—è—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π: {e}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ —Ñ–∞–π–ª–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        state_dir = Path("data/sleep_states")
        if state_dir.exists():
            for state_file in state_dir.glob("*_state.json"):
                try:
                    with open(state_file, "r", encoding="utf-8") as f:
                        state = json.load(f)
                    sleep_functions.append({
                        "function_id": state.get("function_id", "unknown"),
                        "name": state.get("function_name", "unknown"),
                        "sleep_time": state.get("sleep_time"),
                        "security_level": state.get("security_level", "medium"),
                        "is_critical": state.get("is_critical", False),
                        "state_file": str(state_file)
                    })
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è {state_file}: {e}")
        
        return sleep_functions
    
    async def start_monitoring(self) -> None:
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        logger.info("üìä –ó–ê–ü–£–°–ö –°–ò–°–¢–ï–ú–´ –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –°–ü–Ø–©–ï–ì–û –†–ï–ñ–ò–ú–ê")
        logger.info("=" * 50)
        
        self.monitoring_active = True
        
        while self.monitoring_active:
            try:
                # –°–±–æ—Ä –º–µ—Ç—Ä–∏–∫
                await self._collect_metrics()
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤
                await self._check_alerts()
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–ø—è—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
                self.sleep_functions = self._load_sleep_functions()
                
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
                logger.info(f"üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω: {len(self.sleep_functions)} —Ñ—É–Ω–∫—Ü–∏–π –≤ —Å–ø—è—â–µ–º —Ä–µ–∂–∏–º–µ")
                
                # –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                await asyncio.sleep(30)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: {e}")
                await asyncio.sleep(10)
    
    async def stop_monitoring(self) -> None:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        logger.info("‚èπÔ∏è –û–°–¢–ê–ù–û–í–ö–ê –°–ò–°–¢–ï–ú–´ –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê")
        self.monitoring_active = False
    
    async def _collect_metrics(self) -> None:
        """–°–±–æ—Ä –º–µ—Ç—Ä–∏–∫ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            # –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            cpu_percent = psutil.cpu_percent(interval=1)
            memory = psutil.virtual_memory()
            disk = psutil.disk_usage('/')
            
            # –ú–µ—Ç—Ä–∏–∫–∏ —Å–ø—è—â–µ–≥–æ —Ä–µ–∂–∏–º–∞
            sleep_count = len(self.sleep_functions)
            critical_sleep = len([f for f in self.sleep_functions if f.get("is_critical", False)])
            
            self.metrics = {
                "timestamp": datetime.now().isoformat(),
                "system": {
                    "cpu_usage": cpu_percent,
                    "memory_usage": memory.percent,
                    "memory_available": memory.available,
                    "disk_usage": disk.percent,
                    "disk_free": disk.free
                },
                "sleep_mode": {
                    "sleep_functions_count": sleep_count,
                    "critical_sleep_count": critical_sleep,
                    "sleep_functions": self.sleep_functions
                }
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫: {e}")
    
    async def _check_alerts(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤"""
        try:
            current_time = datetime.now()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ CPU
            if self.metrics.get("system", {}).get("cpu_usage", 0) > self.alert_thresholds["cpu_usage"]:
                await self._create_alert(
                    "HIGH_CPU_USAGE",
                    f"–í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU: {self.metrics['system']['cpu_usage']:.1f}%",
                    "warning"
                )
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏
            if self.metrics.get("system", {}).get("memory_usage", 0) > self.alert_thresholds["memory_usage"]:
                await self._create_alert(
                    "HIGH_MEMORY_USAGE",
                    f"–í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {self.metrics['system']['memory_usage']:.1f}%",
                    "warning"
                )
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ø—è—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
            sleep_count = self.metrics.get("sleep_mode", {}).get("sleep_functions_count", 0)
            if sleep_count > self.alert_thresholds["sleep_functions_count"]:
                await self._create_alert(
                    "TOO_MANY_SLEEP_FUNCTIONS",
                    f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–ø—è—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π: {sleep_count}",
                    "info"
                )
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π –≤ —Å–ø—è—â–µ–º —Ä–µ–∂–∏–º–µ
            critical_sleep = self.metrics.get("sleep_mode", {}).get("critical_sleep_count", 0)
            if critical_sleep > 0:
                await self._create_alert(
                    "CRITICAL_FUNCTIONS_SLEEPING",
                    f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Å–ø—è—â–µ–º —Ä–µ–∂–∏–º–µ: {critical_sleep}",
                    "critical"
                )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤: {e}")
    
    async def _create_alert(self, alert_type: str, message: str, severity: str) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞"""
        alert = {
            "timestamp": datetime.now().isoformat(),
            "type": alert_type,
            "message": message,
            "severity": severity,
            "acknowledged": False
        }
        
        self.alerts.append(alert)
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞
        if severity == "critical":
            logger.critical(f"üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ê–õ–ï–†–¢: {message}")
        elif severity == "warning":
            logger.warning(f"‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: {message}")
        else:
            logger.info(f"‚ÑπÔ∏è –ò–ù–§–û–†–ú–ê–¶–ò–Ø: {message}")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞
        await self._save_alert(alert)
    
    async def _save_alert(self, alert: Dict[str, Any]) -> None:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞"""
        try:
            alerts_dir = Path("logs/sleep_mode_alerts")
            alerts_dir.mkdir(parents=True, exist_ok=True)
            
            alert_file = alerts_dir / f"alert_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
            with open(alert_file, "w", encoding="utf-8") as f:
                json.dump(alert, f, indent=2, ensure_ascii=False)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–∞: {e}")
    
    async def get_system_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        return {
            "monitoring_active": self.monitoring_active,
            "sleep_functions_count": len(self.sleep_functions),
            "alerts_count": len(self.alerts),
            "unacknowledged_alerts": len([a for a in self.alerts if not a.get("acknowledged", False)]),
            "metrics": self.metrics,
            "sleep_functions": self.sleep_functions
        }
    
    async def wake_up_function(self, function_name: str) -> Dict[str, Any]:
        """–ü—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏"""
        try:
            # –ù–∞—Ö–æ–¥–∏–º —Ñ—É–Ω–∫—Ü–∏—é –≤ —Å–ø–∏—Å–∫–µ —Å–ø—è—â–∏—Ö
            sleep_function = None
            for func in self.sleep_functions:
                if func.get("name") == function_name:
                    sleep_function = func
                    break
            
            if not sleep_function:
                return {
                    "success": False,
                    "message": f"–§—É–Ω–∫—Ü–∏—è {function_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø—è—â–∏—Ö"
                }
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ SFM —Ä–µ–µ—Å—Ç—Ä–µ
            try:
                with open("data/sfm/function_registry.json", "r", encoding="utf-8") as f:
                    sfm_registry = json.load(f)
                
                func_id = sleep_function.get("function_id")
                if func_id in sfm_registry.get("functions", {}):
                    sfm_registry["functions"][func_id]["status"] = "active"
                    sfm_registry["functions"][func_id]["wake_time"] = datetime.now().isoformat()
                
                with open("data/sfm/function_registry.json", "w", encoding="utf-8") as f:
                    json.dump(sfm_registry, f, indent=2, ensure_ascii=False)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è SFM —Ä–µ–µ—Å—Ç—Ä–∞: {e}")
            
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è
            state_file = sleep_function.get("state_file")
            if state_file and os.path.exists(state_file):
                os.remove(state_file)
            
            # –°–æ–∑–¥–∞–µ–º –∞–ª–µ—Ä—Ç –æ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–∏
            await self._create_alert(
                "FUNCTION_WOKE_UP",
                f"–§—É–Ω–∫—Ü–∏—è {function_name} –ø—Ä–æ–±—É–∂–¥–µ–Ω–∞",
                "info"
            )
            
            return {
                "success": True,
                "message": f"–§—É–Ω–∫—Ü–∏—è {function_name} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∞",
                "wake_time": datetime.now().isoformat()
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ {function_name}: {e}")
            return {
                "success": False,
                "message": f"–û—à–∏–±–∫–∞ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è: {str(e)}"
            }

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üìä –°–ò–°–¢–ï–ú–ê –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –°–ü–Ø–©–ï–ì–û –†–ï–ñ–ò–ú–ê")
    print("=" * 50)
    
    monitoring = SleepModeMonitoringSystem()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
    status = await monitoring.get_system_status()
    print(f"üìä –°–ø—è—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π: {status['sleep_functions_count']}")
    print(f"üö® –ê–ª–µ—Ä—Ç–æ–≤: {status['alerts_count']}")
    print(f"‚ö†Ô∏è –ù–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤: {status['unacknowledged_alerts']}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–∞ 2 –º–∏–Ω—É—Ç—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    print("\nüîÑ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–∞ 2 –º–∏–Ω—É—Ç—ã...")
    monitoring_task = asyncio.create_task(monitoring.start_monitoring())
    
    try:
        await asyncio.wait_for(monitoring_task, timeout=120)  # 2 –º–∏–Ω—É—Ç—ã
    except asyncio.TimeoutError:
        print("‚è∞ –í—Ä–µ–º—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏—Å—Ç–µ–∫–ª–æ")
    
    await monitoring.stop_monitoring()
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    final_status = await monitoring.get_system_status()
    print(f"\nüìä –§–ò–ù–ê–õ–¨–ù–´–ô –°–¢–ê–¢–£–°:")
    print(f"   –°–ø—è—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π: {final_status['sleep_functions_count']}")
    print(f"   –ê–ª–µ—Ä—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {final_status['alerts_count']}")
    
    return 0

if __name__ == "__main__":
    exit(asyncio.run(main()))