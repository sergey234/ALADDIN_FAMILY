#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ —Ñ–∞–π–ª–æ–≤ –≤ –±—ç–∫–∞–ø–∞—Ö –¥–ª—è –ø–æ–∏—Å–∫–∞ –ª—É—á—à–∏—Ö –≤–µ—Ä—Å–∏–π
"""

import os
import sys
import subprocess
from datetime import datetime

def analyze_backup_quality():
    """–ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ —Ñ–∞–π–ª–æ–≤ –≤ –±—ç–∫–∞–ø–∞—Ö"""
    print("üîç –ê–ù–ê–õ–ò–ó –ö–ê–ß–ï–°–¢–í–ê –§–ê–ô–õ–û–í –í –ë–≠–ö–ê–ü–ê–•")
    print("=" * 80)
    print(f"üìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    # –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã –∏–∑ —Ç–µ–∫—É—â–µ–π —Å–∏—Å—Ç–µ–º—ã
    problematic_files = [
        "security/safe_function_manager.py",
        "security/family/child_protection.py",
        "security/family/elderly_protection.py",
        "security/preliminary/policy_engine.py",
        "security/preliminary/risk_assessment.py",
        "security/preliminary/behavioral_analysis.py",
        "security/preliminary/mfa_service.py",
        "security/preliminary/zero_trust_service.py",
        "security/preliminary/trust_scoring.py",
        "security/preliminary/context_aware_access.py",
        "security/reactive/recovery_service.py",
        "security/microservices/api_gateway.py",
        "security/microservices/load_balancer.py",
        "security/microservices/rate_limiter.py",
        "security/microservices/circuit_breaker.py",
        "security/microservices/user_interface_manager.py",
        "security/ai_agents/monitor_manager.py",
        "security/ai_agents/alert_manager.py",
        "security/ai_agents/report_manager.py",
        "security/ai_agents/analytics_manager.py",
        "security/ai_agents/dashboard_manager.py",
        "security/privacy/universal_privacy_manager.py"
    ]
    
    # –î–æ—Å—Ç—É–ø–Ω—ã–µ –±—ç–∫–∞–ø—ã
    backups = [
        {
            "name": "ALADDIN_BACKUP_20250908_170629",
            "path": "/Users/sergejhlystov/ALADDIN_BACKUP_20250908_170629",
            "date": "2025-09-08 17:06:29"
        },
        {
            "name": "ALADDIN_CLEAN_BACKUP_20250903_202419",
            "path": "/Users/sergejhlystov/ALADDIN_CLEAN_BACKUP_20250903_202419",
            "date": "2025-09-03 20:24:19"
        },
        {
            "name": "ALADDIN_COMPLETE_BACKUP_20250903_175944",
            "path": "/Users/sergejhlystov/ALADDIN_COMPLETE_BACKUP_20250903_175944",
            "date": "2025-09-03 17:59:44"
        },
        {
            "name": "ALADDIN_FULL_BACKUP_20250903_173136",
            "path": "/Users/sergejhlystov/ALADDIN_FULL_BACKUP_20250903_173136",
            "date": "2025-09-03 17:31:36"
        },
        {
            "name": "ALADDIN_NEW_BACKUP_20250909_170539",
            "path": "/Users/sergejhlystov/ALADDIN_NEW_BACKUP_20250909_170539",
            "date": "2025-09-09 17:05:39"
        },
        {
            "name": "ALADDIN_REFACTORING_BACKUP_20250909_170742",
            "path": "/Users/sergejhlystov/ALADDIN_REFACTORING_BACKUP_20250909_170742",
            "date": "2025-09-09 17:07:42"
        },
        {
            "name": "ALADDIN_REFACTORING_BACKUP_20250909_171503",
            "path": "/Users/sergejhlystov/ALADDIN_REFACTORING_BACKUP_20250909_171503",
            "date": "2025-09-09 17:15:03"
        },
        {
            "name": "ALADDIN_SECURITY_FULL_BACKUP_20250909_122638",
            "path": "/Users/sergejhlystov/ALADDIN_SECURITY_FULL_BACKUP_20250909_122638",
            "date": "2025-09-09 12:26:38"
        },
        {
            "name": "ALADDIN_SECURITY_IDENTICAL_BACKUP_20250906_014537",
            "path": "/Users/sergejhlystov/ALADDIN_SECURITY_IDENTICAL_BACKUP_20250906_014537",
            "date": "2025-09-06 01:45:37"
        }
    ]
    
    # –¢–µ–∫—É—â–∞—è —Å–∏—Å—Ç–µ–º–∞
    current_system = {
        "name": "–¢–ï–ö–£–©–ê–Ø –°–ò–°–¢–ï–ú–ê",
        "path": "/Users/sergejhlystov/ALADDIN_NEW",
        "date": "2025-09-09 23:30:00"
    }
    
    all_systems = [current_system] + backups
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
    file_analysis = {}
    
    print("üîç –ê–ù–ê–õ–ò–ó –ö–ê–ß–ï–°–¢–í–ê –§–ê–ô–õ–û–í –ü–û –ë–≠–ö–ê–ü–ê–ú:")
    print("-" * 80)
    
    for file_path in problematic_files:
        print(f"\nüìÑ {file_path}:")
        file_analysis[file_path] = {}
        
        for system in all_systems:
            full_path = os.path.join(system["path"], file_path)
            
            if os.path.exists(full_path):
                try:
                    result = subprocess.run([
                        'python3', '-m', 'flake8', 
                        '--max-line-length=120',
                        full_path
                    ], capture_output=True, text=True, timeout=30)
                    
                    if result.returncode == 0:
                        issues = 0
                        grade = "A+"
                        desc = "–û—Ç–ª–∏—á–Ω–æ"
                    else:
                        output = result.stdout
                        lines = output.split('\n')
                        issues = len([l for l in lines if l.strip()])
                        
                        if issues <= 5:
                            grade = "A"
                            desc = "–•–æ—Ä–æ—à–æ"
                        elif issues <= 15:
                            grade = "B"
                            desc = "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ"
                        elif issues <= 30:
                            grade = "C"
                            desc = "–¢—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è"
                        else:
                            grade = "D"
                            desc = "–ö—Ä–∏—Ç–∏—á–Ω–æ"
                    
                    file_analysis[file_path][system["name"]] = {
                        "issues": issues,
                        "grade": grade,
                        "description": desc,
                        "path": full_path
                    }
                    
                    print(f"   {system['name']:30} | {grade:2} | {issues:3d} –ø—Ä–æ–±–ª–µ–º | {desc}")
                    
                except Exception as e:
                    print(f"   {system['name']:30} | ‚ùå | –û—à–∏–±–∫–∞: {str(e)}")
                    file_analysis[file_path][system["name"]] = {
                        "issues": 999,
                        "grade": "ERROR",
                        "description": f"–û—à–∏–±–∫–∞: {str(e)}",
                        "path": full_path
                    }
            else:
                print(f"   {system['name']:30} | ‚ùå | –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
                file_analysis[file_path][system["name"]] = {
                    "issues": 999,
                    "grade": "MISSING",
                    "description": "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    "path": full_path
                }
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("\n" + "=" * 80)
    print("üìä –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ó–ê–ú–ï–ù–ï –§–ê–ô–õ–û–í:")
    print("=" * 80)
    
    for file_path in problematic_files:
        print(f"\nüìÑ {file_path}:")
        print("-" * 60)
        
        # –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à—É—é –≤–µ—Ä—Å–∏—é
        best_version = None
        best_issues = 999
        
        for system_name, analysis in file_analysis[file_path].items():
            if analysis["issues"] < best_issues and analysis["grade"] != "ERROR" and analysis["grade"] != "MISSING":
                best_issues = analysis["issues"]
                best_version = system_name
        
        if best_version and best_issues < 999:
            print(f"üèÜ –õ–£–ß–®–ê–Ø –í–ï–†–°–ò–Ø: {best_version}")
            print(f"   üìä –ö–∞—á–µ—Å—Ç–≤–æ: {file_analysis[file_path][best_version]['grade']}")
            print(f"   üîç –ü—Ä–æ–±–ª–µ–º: {file_analysis[file_path][best_version]['issues']}")
            print(f"   üìÅ –ü—É—Ç—å: {file_analysis[file_path][best_version]['path']}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–µ–π
            if "–¢–ï–ö–£–©–ê–Ø –°–ò–°–¢–ï–ú–ê" in file_analysis[file_path]:
                current_issues = file_analysis[file_path]["–¢–ï–ö–£–©–ê–Ø –°–ò–°–¢–ï–ú–ê"]["issues"]
                improvement = current_issues - best_issues
                if improvement > 0:
                    print(f"   ‚úÖ –£–ª—É—á—à–µ–Ω–∏–µ: -{improvement} –ø—Ä–æ–±–ª–µ–º")
                elif improvement < 0:
                    print(f"   ‚ö†Ô∏è  –£—Ö—É–¥—à–µ–Ω–∏–µ: +{abs(improvement)} –ø—Ä–æ–±–ª–µ–º")
                else:
                    print(f"   ‚û°Ô∏è  –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
            
            # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–º–µ–Ω—ã
            if best_version != "–¢–ï–ö–£–©–ê–Ø –°–ò–°–¢–ï–ú–ê":
                source_path = file_analysis[file_path][best_version]["path"]
                target_path = f"/Users/sergejhlystov/ALADDIN_NEW/{file_path}"
                print(f"   üîß –ö–æ–º–∞–Ω–¥–∞ –∑–∞–º–µ–Ω—ã:")
                print(f"      cp '{source_path}' '{target_path}'")
        else:
            print("‚ùå –ü–æ–¥—Ö–æ–¥—è—â–∞—è –≤–µ—Ä—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\n" + "=" * 80)
    print("üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–≠–ö–ê–ü–û–í:")
    print("=" * 80)
    
    backup_stats = {}
    for backup in backups:
        backup_stats[backup["name"]] = {
            "total_files": 0,
            "excellent": 0,
            "good": 0,
            "fair": 0,
            "poor": 0,
            "critical": 0,
            "missing": 0
        }
    
    for file_path in problematic_files:
        for system_name, analysis in file_analysis[file_path].items():
            if system_name in backup_stats:
                backup_stats[system_name]["total_files"] += 1
                
                if analysis["grade"] == "A+":
                    backup_stats[system_name]["excellent"] += 1
                elif analysis["grade"] == "A":
                    backup_stats[system_name]["good"] += 1
                elif analysis["grade"] == "B":
                    backup_stats[system_name]["fair"] += 1
                elif analysis["grade"] == "C":
                    backup_stats[system_name]["poor"] += 1
                elif analysis["grade"] == "D":
                    backup_stats[system_name]["critical"] += 1
                else:
                    backup_stats[system_name]["missing"] += 1
    
    # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    for backup_name, stats in backup_stats.items():
        if stats["total_files"] > 0:
            print(f"\nüìÅ {backup_name}:")
            print(f"   üìä –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {stats['total_files']}")
            print(f"   ü•á A+ (–û—Ç–ª–∏—á–Ω–æ): {stats['excellent']}")
            print(f"   ü•à A  (–•–æ—Ä–æ—à–æ): {stats['good']}")
            print(f"   ü•â B  (–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ): {stats['fair']}")
            print(f"   ‚ö†Ô∏è  C  (–¢—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è): {stats['poor']}")
            print(f"   üö® D  (–ö—Ä–∏—Ç–∏—á–Ω–æ): {stats['critical']}")
            print(f"   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {stats['missing']}")
            
            # –û—Ü–µ–Ω–∫–∞ –±—ç–∫–∞–ø–∞
            total_issues = stats["critical"] * 4 + stats["poor"] * 3 + stats["fair"] * 2 + stats["good"]
            if total_issues == 0:
                backup_grade = "A+"
            elif total_issues <= 5:
                backup_grade = "A"
            elif total_issues <= 15:
                backup_grade = "B"
            elif total_issues <= 30:
                backup_grade = "C"
            else:
                backup_grade = "D"
            
            print(f"   üéØ –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: {backup_grade}")
    
    print("\n" + "=" * 80)
    print("‚úÖ –ê–ù–ê–õ–ò–ó –ë–≠–ö–ê–ü–û–í –ó–ê–í–ï–†–®–ï–ù!")
    print("=" * 80)
    print()
    print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª—É—á—à–∏–µ –≤–µ—Ä—Å–∏–∏ —Ñ–∞–π–ª–æ–≤ –∏–∑ –±—ç–∫–∞–ø–æ–≤")
    print("2. –ó–∞–º–µ–Ω–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã –∫–æ–º–∞–Ω–¥–∞–º–∏ cp")
    print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ –∑–∞–º–µ–Ω—ã")
    print("4. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –±—ç–∫–∞–ø –ø–æ—Å–ª–µ —É–ª—É—á—à–µ–Ω–∏–π")

if __name__ == "__main__":
    analyze_backup_quality()