#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Web Services Validator - –í–∞–ª–∏–¥–∞—Ç–æ—Ä —Ä–µ–µ—Å—Ç—Ä–∞ –≤–µ–±-—Å–µ—Ä–≤–∏—Å–æ–≤
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–µ–±-—Å–µ—Ä–≤–∏—Å–æ–≤
"""

import json
import os
import sys
from datetime import datetime

def validate_web_services_registry():
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–µ—Å—Ç—Ä–∞ –≤–µ–±-—Å–µ—Ä–≤–∏—Å–æ–≤"""
    try:
        print("üîç –í–ê–õ–ò–î–ê–¶–ò–Ø –†–ï–ï–°–¢–†–ê –í–ï–ë-–°–ï–†–í–ò–°–û–í")
        print("=" * 50)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
        registry_path = 'data/web_services_registry.json'
        if not os.path.exists(registry_path):
            print(f"‚ùå –§–∞–π–ª {registry_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return False
        
        with open(registry_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        if 'web_services' not in data:
            print("‚ùå –ë–ª–æ–∫ web_services –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return False
        
        if 'registry_info' not in data:
            print("‚ùå –ë–ª–æ–∫ registry_info –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Å–µ—Ä–≤–∏—Å
        services = data['web_services']
        total_services = len(services)
        valid_services = 0
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Å–µ—Ä–≤–∏—Å–æ–≤: {total_services}")
        
        for service_id, service_data in services.items():
            print(f"\nüîß –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–∞: {service_id}")
            
            # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            required_fields = [
                'service_id', 'name', 'description', 'service_type',
                'port', 'status', 'version', 'features', 'endpoints',
                'dependencies', 'created_at', 'last_updated'
            ]
            
            missing_fields = []
            for field in required_fields:
                if field not in service_data:
                    missing_fields.append(field)
            
            if missing_fields:
                print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: {missing_fields}")
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
            if not isinstance(service_data['port'], int):
                print(f"‚ùå –ü–æ—Ä—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º: {service_data['port']}")
                continue
            
            if not isinstance(service_data['features'], list):
                print(f"‚ùå Features –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º")
                continue
            
            if not isinstance(service_data['endpoints'], list):
                print(f"‚ùå Endpoints –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º")
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç–∞
            port = service_data['port']
            other_services = [s for sid, s in services.items() if sid != service_id]
            if any(s.get('port') == port for s in other_services):
                print(f"‚ùå –ü–æ—Ä—Ç {port} —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º —Å–µ—Ä–≤–∏—Å–æ–º")
                continue
            
            print(f"‚úÖ –°–µ—Ä–≤–∏—Å {service_id} –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
            valid_services += 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º registry_info
        registry_info = data['registry_info']
        if registry_info.get('total_services') != total_services:
            print(f"‚ùå –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–µ—Ä–≤–∏—Å–æ–≤: {registry_info.get('total_services')} != {total_services}")
            return False
        
        print(f"\nüìà –†–ï–ó–£–õ–¨–¢–ê–¢–´ –í–ê–õ–ò–î–ê–¶–ò–ò:")
        print(f"‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤: {valid_services}/{total_services}")
        print(f"üìä –ü—Ä–æ—Ü–µ–Ω—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏: {(valid_services/total_services)*100:.1f}%")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories = data.get('registry_info', {}).get('categories', {})
        if categories:
            print(f"\nüìã –ö–ê–¢–ï–ì–û–†–ò–ò –°–ï–†–í–ò–°–û–í:")
            for category, count in categories.items():
                print(f"  {category}: {count} —Å–µ—Ä–≤–∏—Å–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç—ã
        ports_used = data.get('registry_info', {}).get('ports_used', [])
        if ports_used:
            print(f"\nüîå –ò–°–ü–û–õ–¨–ó–£–ï–ú–´–ï –ü–û–†–¢–´: {len(ports_used)}")
            print(f"  –ü–æ—Ä—Ç 5000-5012: {len([p for p in ports_used if 5000 <= p <= 5012])}")
            print(f"  –ü–æ—Ä—Ç 8006-8012: {len([p for p in ports_used if 8006 <= p <= 8012])}")
            print(f"  –ü–æ—Ä—Ç 8080-8081: {len([p for p in ports_used if 8080 <= p <= 8081])}")
        
        if valid_services == total_services:
            print("üéâ –í–°–ï –°–ï–†–í–ò–°–´ –ö–û–†–†–ï–ö–¢–ù–´!")
            return True
        else:
            print("‚ö†Ô∏è  –ù–ï–ö–û–¢–û–†–´–ï –°–ï–†–í–ò–°–´ –¢–†–ï–ë–£–Æ–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø")
            return False
            
    except json.JSONDecodeError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ JSON: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
        return False

def check_service_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤–µ–±-—Å–µ—Ä–≤–∏—Å–æ–≤"""
    print("\nüåê –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê –í–ï–ë-–°–ï–†–í–ò–°–û–í")
    print("=" * 50)
    
    try:
        import requests
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–µ—Å—Ç—Ä
        with open('data/web_services_registry.json', 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        services = data['web_services']
        
        for service_id, service_data in services.items():
            port = service_data['port']
            name = service_data['name']
            
            try:
                response = requests.get(f"http://localhost:{port}/", timeout=5)
                if response.status_code == 200:
                    print(f"‚úÖ {name} (–ø–æ—Ä—Ç {port}): –†–ê–ë–û–¢–ê–ï–¢")
                else:
                    print(f"‚ö†Ô∏è  {name} (–ø–æ—Ä—Ç {port}): –û–¢–í–ï–ß–ê–ï–¢, –Ω–æ —Å—Ç–∞—Ç—É—Å {response.status_code}")
            except requests.exceptions.RequestException:
                print(f"‚ùå {name} (–ø–æ—Ä—Ç {port}): –ù–ï –î–û–°–¢–£–ü–ï–ù")
                
    except ImportError:
        print("‚ö†Ô∏è  requests –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")

if __name__ == "__main__":
    print("üõ°Ô∏è ALADDIN Web Services Validator")
    print("=" * 50)
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    structure_valid = validate_web_services_registry()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
    check_service_status()
    
    if structure_valid:
        print("\nüéâ –í–ê–õ–ò–î–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        sys.exit(0)
    else:
        print("\n‚ùå –í–ê–õ–ò–î–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –° –û–®–ò–ë–ö–ê–ú–ò!")
        sys.exit(1)