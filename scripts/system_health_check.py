#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üè• –ü–†–û–í–ï–†–ö–ê –†–ê–ë–û–¢–û–°–ü–û–°–û–ë–ù–û–°–¢–ò –°–ò–°–¢–ï–ú–´
====================================

–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
"""

import json
import os
import sys
from datetime import datetime
from pathlib import Path

def system_health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã"""
    
    print("üè• –ü–†–û–í–ï–†–ö–ê –†–ê–ë–û–¢–û–°–ü–û–°–û–ë–ù–û–°–¢–ò –°–ò–°–¢–ï–ú–´")
    print("=" * 50)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º SFM —Ä–µ–µ—Å—Ç—Ä
    sfm_path = "data/sfm/function_registry.json"
    
    if not os.path.exists(sfm_path):
        print(f"‚ùå –§–∞–π–ª {sfm_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    with open(sfm_path, 'r', encoding='utf-8') as f:
        data = json.load(f)
    
    functions = data.get('functions', {})
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    active_functions = []
    ml_functions = []
    critical_functions = []
    
    for func_id, func_data in functions.items():
        status = func_data.get('status', 'unknown')
        is_critical = func_data.get('is_critical', False)
        
        if status == 'active':
            active_functions.append(func_id)
            
            if is_critical:
                critical_functions.append(func_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º ML —Ñ—É–Ω–∫—Ü–∏–∏
            if ('ml' in func_id.lower() or 'ai' in func_id.lower() or 
                'model' in func_id.lower() or 'analyzer' in func_id.lower()):
                ml_functions.append(func_id)
    
    print(f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π: {len(functions)}")
    print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π: {len(active_functions)}")
    print(f"   –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö: {len(critical_functions)}")
    print(f"   ML —Ñ—É–Ω–∫—Ü–∏–π –∞–∫—Ç–∏–≤–Ω—ã—Ö: {len(ml_functions)}")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    key_components = {
        'core_base': '–Ø–¥—Ä–æ —Å–∏—Å—Ç–µ–º—ã',
        'database': '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö',
        'authentication': '–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è',
        'safe_function_manager': '–ú–µ–Ω–µ–¥–∂–µ—Ä —Ñ—É–Ω–∫—Ü–∏–π',
        'enhanced_alerting_system': '–°–∏—Å—Ç–µ–º–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π',
        'emergencymlanalyzer': 'ML –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä',
        'mobile_security_agent': '–ú–æ–±–∏–ª—å–Ω—ã–π –∞–≥–µ–Ω—Ç',
        'threat_detection_agent': '–ê–≥–µ–Ω—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —É–≥—Ä–æ–∑'
    }
    
    print("üîç –ü–†–û–í–ï–†–ö–ê –ö–õ–Æ–ß–ï–í–´–• –ö–û–ú–ü–û–ù–ï–ù–¢–û–í:")
    all_ok = True
    
    for component, description in key_components.items():
        if component in functions:
            func_data = functions[component]
            status = func_data.get('status', 'unknown')
            is_critical = func_data.get('is_critical', False)
            
            if status == 'active':
                critical_mark = " üî¥" if is_critical else ""
                print(f"   ‚úÖ {description} ({component}){critical_mark}")
            else:
                print(f"   ‚ùå {description} ({component}) - {status}")
                all_ok = False
        else:
            print(f"   ‚ö†Ô∏è  {description} ({component}) - –Ω–µ –Ω–∞–π–¥–µ–Ω")
            all_ok = False
    
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º ML –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    print("ü§ñ –ü–†–û–í–ï–†–ö–ê ML –ö–û–ú–ü–û–ù–ï–ù–¢–û–í:")
    ml_ok = True
    
    for ml_func in ml_functions[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
        func_data = functions.get(ml_func, {})
        status = func_data.get('status', 'unknown')
        
        if status == 'active':
            print(f"   ‚úÖ {ml_func}")
        else:
            print(f"   ‚ùå {ml_func} - {status}")
            ml_ok = False
    
    if len(ml_functions) > 10:
        print(f"   ... –∏ –µ—â–µ {len(ml_functions) - 10} ML —Ñ—É–Ω–∫—Ü–∏–π")
    
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø—è—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
    sleeping_functions = [f for f in functions.values() if f.get('status') == 'sleeping']
    critical_sleeping = [f for f in sleeping_functions if f.get('is_critical', False)]
    
    print("üò¥ –°–ü–Ø–©–ò–ï –§–£–ù–ö–¶–ò–ò:")
    print(f"   –í—Å–µ–≥–æ —Å–ø—è—â–∏—Ö: {len(sleeping_functions)}")
    print(f"   –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–ø—è—â–∏—Ö: {len(critical_sleeping)}")
    
    if critical_sleeping:
        print("   ‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï! –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Å–ø—è—â–µ–º —Ä–µ–∂–∏–º–µ:")
        for func in critical_sleeping[:5]:
            print(f"   - {func.get('name', 'Unknown')}")
        all_ok = False
    else:
        print("   ‚úÖ –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã")
    
    print()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if all_ok and ml_ok and len(critical_sleeping) == 0:
        print("üéâ –°–ò–°–¢–ï–ú–ê –†–ê–ë–û–¢–ê–ï–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
        print("   ‚úÖ –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∞–∫—Ç–∏–≤–Ω—ã")
        print("   ‚úÖ ML –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç")
        print("   ‚úÖ –ù–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π –≤ —Å–ø—è—â–µ–º —Ä–µ–∂–∏–º–µ")
        return True
    else:
        print("‚ö†Ô∏è  –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´!")
        if not all_ok:
            print("   ‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–ª—é—á–µ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã")
        if not ml_ok:
            print("   ‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ ML –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã")
        if critical_sleeping:
            print("   ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Å–ø—è—â–µ–º —Ä–µ–∂–∏–º–µ")
        return False

if __name__ == "__main__":
    success = system_health_check()
    sys.exit(0 if success else 1)