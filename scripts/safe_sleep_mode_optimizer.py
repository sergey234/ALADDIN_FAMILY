#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ë–ï–ó–û–ü–ê–°–ù–´–ô –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä —Å–ø—è—â–µ–≥–æ —Ä–µ–∂–∏–º–∞ –¥–ª—è ALADDIN Security System
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –º–æ–¥—É–ª–∏ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ñ—É–Ω–∫—Ü–∏–π –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º

–ê–≤—Ç–æ—Ä: ALADDIN Security Team
–í–µ—Ä—Å–∏—è: 1.0
–î–∞—Ç–∞: 2025-01-13
"""

import json
import sys
import os
from typing import Dict, List, Any

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from security.safe_function_manager import SafeFunctionManager, FunctionStatus

class SafeSleepModeOptimizer:
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä —Å–ø—è—â–µ–≥–æ —Ä–µ–∂–∏–º–∞"""
    
    def __init__(self):
        self.sfm = SafeFunctionManager()
        self.critical_functions = []
        self.high_priority_functions = []
        self.low_priority_functions = []
        
    def analyze_functions(self) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ—Ç –∏—Ö –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É"""
        print("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å–ø—è—â–µ–≥–æ —Ä–µ–∂–∏–º–∞...")
        
        all_functions = list(self.sfm.functions.values())
        
        # –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –§–£–ù–ö–¶–ò–ò - –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –û–°–¢–ê–í–ò–¢–¨ –ê–ö–¢–ò–í–ù–´–ú–ò
        self.critical_functions = [
            f for f in all_functions 
            if f.is_critical or 
               f.function_id in [
                   'security_safefunctionmanager',
                   'security_base',
                   'core_base',
                   'security_securityalert',
                   'security_securityfunction'
               ]
        ]
        
        # –§–£–ù–ö–¶–ò–ò –í–´–°–û–ö–û–ì–û –ü–†–ò–û–†–ò–¢–ï–¢–ê - –í–¢–û–†–ê–Ø –û–ß–ï–†–ï–î–¨
        self.high_priority_functions = [
            f for f in all_functions 
            if not f.is_critical and 
               f.function_id.startswith(('bot_', 'ai_agent_')) and
               f.security_level.value == 'high'
        ]
        
        # –§–£–ù–ö–¶–ò–ò –ù–ò–ó–ö–û–ì–û –ü–†–ò–û–†–ò–¢–ï–¢–ê - –ü–ï–†–ï–í–ï–°–¢–ò –í –°–ü–Ø–©–ò–ô –†–ï–ñ–ò–ú
        self.low_priority_functions = [
            f for f in all_functions 
            if not f.is_critical and 
               f.function_id.startswith(('bot_', 'ai_agent_')) and
               f.security_level.value == 'medium' and
               f.function_id not in [
                   'bot_website', 'bot_browser', 'bot_cloud', 'bot_device',
                   'ai_agent_phishingprotection', 'ai_agent_malwaredetection'
               ]
        ]
        
        return {
            'total_functions': len(all_functions),
            'critical_functions': len(self.critical_functions),
            'high_priority_functions': len(self.high_priority_functions),
            'low_priority_functions': len(self.low_priority_functions)
        }
    
    def get_sleep_recommendations(self) -> Dict[str, List[str]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–µ—Ä–µ–≤–æ–¥—É –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º"""
        print("üí° –§–æ—Ä–º–∏—Ä—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å–ø—è—â–µ–º—É —Ä–µ–∂–∏–º—É...")
        
        recommendations = {
            'keep_active': [f.function_id for f in self.critical_functions],
            'keep_active_second_priority': [f.function_id for f in self.high_priority_functions],
            'put_to_sleep': [f.function_id for f in self.low_priority_functions]
        }
        
        return recommendations
    
    def safe_put_to_sleep(self, function_ids: List[str]) -> Dict[str, Any]:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º"""
        print(f"üåô –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–µ—Ä–µ–≤–æ–∂—É {len(function_ids)} —Ñ—É–Ω–∫—Ü–∏–π –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º...")
        
        results = {
            'successful': [],
            'failed': [],
            'already_sleeping': []
        }
        
        for function_id in function_ids:
            try:
                function = self.sfm.functions.get(function_id)
                if not function:
                    results['failed'].append(f"{function_id}: —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    continue
                
                if function.status == FunctionStatus.SLEEPING:
                    results['already_sleeping'].append(function_id)
                    continue
                
                # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º
                success = self.sfm.sleep_function(function_id)
                
                if success:
                    results['successful'].append(function_id)
                    print(f"  ‚úÖ {function_id} -> —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º")
                else:
                    results['failed'].append(f"{function_id}: –æ—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞")
                    
            except Exception as e:
                results['failed'].append(f"{function_id}: {str(e)}")
        
        return results
    
    def generate_sleep_report(self) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ —Å–ø—è—â–µ–º —Ä–µ–∂–∏–º–µ"""
        print("üìä –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç—á–µ—Ç –æ —Å–ø—è—â–µ–º —Ä–µ–∂–∏–º–µ...")
        
        all_functions = list(self.sfm.functions.values())
        active_functions = [f for f in all_functions if f.status == FunctionStatus.ENABLED]
        sleeping_functions = [f for f in all_functions if f.status == FunctionStatus.SLEEPING]
        
        return {
            'total_functions': len(all_functions),
            'active_functions': len(active_functions),
            'sleeping_functions': len(sleeping_functions),
            'active_percentage': (len(active_functions) / len(all_functions)) * 100,
            'sleeping_percentage': (len(sleeping_functions) / len(all_functions)) * 100,
            'critical_active': len([f for f in active_functions if f.is_critical]),
            'critical_sleeping': len([f for f in sleeping_functions if f.is_critical])
        }
    
    def optimize_sleep_mode(self) -> bool:
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å–ø—è—â–µ–≥–æ —Ä–µ–∂–∏–º–∞"""
        print("üéØ –ù–ê–ß–ò–ù–ê–Æ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Æ –°–ü–Ø–©–ï–ì–û –†–ï–ñ–ò–ú–ê")
        print("=" * 60)
        
        try:
            # 1. –ê–Ω–∞–ª–∏–∑ —Ñ—É–Ω–∫—Ü–∏–π
            analysis = self.analyze_functions()
            print(f"üìä –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω:")
            print(f"  üìÑ –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π: {analysis['total_functions']}")
            print(f"  üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö: {analysis['critical_functions']}")
            print(f"  ‚≠ê –í—ã—Å–æ–∫–æ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞: {analysis['high_priority_functions']}")
            print(f"  üò¥ –ù–∏–∑–∫–æ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞: {analysis['low_priority_functions']}")
            
            # 2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            recommendations = self.get_sleep_recommendations()
            
            print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            print(f"  üü¢ –û—Å—Ç–∞–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–º–∏: {len(recommendations['keep_active'])}")
            print(f"  üü° –í—Ç–æ—Ä–∞—è –æ—á–µ—Ä–µ–¥—å: {len(recommendations['keep_active_second_priority'])}")
            print(f"  üî¥ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤ —Å–ø—è—â–∏–π: {len(recommendations['put_to_sleep'])}")
            
            # 3. –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º
            if recommendations['put_to_sleep']:
                print(f"\nüåô –ü–µ—Ä–µ–≤–æ–∂—É {len(recommendations['put_to_sleep'])} —Ñ—É–Ω–∫—Ü–∏–π –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º...")
                sleep_results = self.safe_put_to_sleep(recommendations['put_to_sleep'])
                
                print(f"  ‚úÖ –£—Å–ø–µ—à–Ω–æ: {len(sleep_results['successful'])}")
                print(f"  ‚ùå –û—à–∏–±–∫–∏: {len(sleep_results['failed'])}")
                print(f"  üò¥ –£–∂–µ —Å–ø—è—â–∏–µ: {len(sleep_results['already_sleeping'])}")
            
            # 4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
            report = self.generate_sleep_report()
            
            print(f"\nüìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:")
            print(f"  üìÑ –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π: {report['total_functions']}")
            print(f"  üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {report['active_functions']} ({report['active_percentage']:.1f}%)")
            print(f"  üò¥ –°–ø—è—â–∏—Ö: {report['sleeping_functions']} ({report['sleeping_percentage']:.1f}%)")
            print(f"  üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö: {report['critical_active']}")
            print(f"  üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–ø—è—â–∏—Ö: {report['critical_sleeping']}")
            
            # 5. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
            with open('sleep_mode_optimization_report.json', 'w', encoding='utf-8') as f:
                json.dump({
                    'analysis': analysis,
                    'recommendations': recommendations,
                    'sleep_results': sleep_results if 'sleep_results' in locals() else {},
                    'final_report': report,
                    'timestamp': str(datetime.now())
                }, f, indent=2, ensure_ascii=False)
            
            print(f"\nüíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: sleep_mode_optimization_report.json")
            print(f"\nüéâ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –°–ü–Ø–©–ï–ì–û –†–ï–ñ–ò–ú–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
            
            return True
            
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}")
            return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üåô ALADDIN Security System - –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä —Å–ø—è—â–µ–≥–æ —Ä–µ–∂–∏–º–∞")
    print("=" * 80)
    
    try:
        optimizer = SafeSleepModeOptimizer()
        success = optimizer.optimize_sleep_mode()
        
        if success:
            print("\n‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å–ø—è—â–µ–≥–æ —Ä–µ–∂–∏–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            print("üîß –î–ª—è –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: python3 wake_up_systems.py")
        else:
            print("\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å–ø—è—â–µ–≥–æ —Ä–µ–∂–∏–º–∞!")
            return 1
            
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return 1
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    from datetime import datetime
    exit(main())