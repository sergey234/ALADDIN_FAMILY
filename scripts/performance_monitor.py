#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Performance Monitor - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
"""

import psutil
import time
import threading
import json
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, List, Any, Optional
from dataclasses import dataclass, asdict


@dataclass
class PerformanceMetric:
    """–ú–µ—Ç—Ä–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    timestamp: str
    cpu_percent: float
    memory_percent: float
    memory_used_mb: float
    memory_available_mb: float
    disk_usage_percent: float
    network_bytes_sent: int
    network_bytes_recv: int
    active_threads: int
    load_average: List[float]
    python_processes: int
    log_files_size_mb: float


class PerformanceMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self, logs_dir: str = "logs", monitoring_interval: int = 30):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        
        Args:
            logs_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –ª–æ–≥–∞–º–∏
            monitoring_interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        self.logs_dir = Path(logs_dir)
        self.monitoring_interval = monitoring_interval
        self.is_running = False
        self.monitoring_thread: Optional[threading.Thread] = None
        self.metrics_history: List[PerformanceMetric] = []
        self.max_history_size = 1000  # –ú–∞–∫—Å–∏–º—É–º 1000 –∑–∞–ø–∏—Å–µ–π –≤ –ø–∞–º—è—Ç–∏
        
        # –ü–æ—Ä–æ–≥–∏ –¥–ª—è –∞–ª–µ—Ä—Ç–æ–≤
        self.cpu_threshold = 80.0
        self.memory_threshold = 85.0
        self.disk_threshold = 90.0
        
        self.alerts = []
    
    def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        if self.is_running:
            print("‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        self.is_running = True
        self.monitoring_thread = threading.Thread(target=self._monitoring_loop, daemon=True)
        self.monitoring_thread.start()
        print("üöÄ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–ø—É—â–µ–Ω")
    
    def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.is_running = False
        if self.monitoring_thread:
            self.monitoring_thread.join(timeout=5)
        print("üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def _monitoring_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        while self.is_running:
            try:
                metric = self._collect_metrics()
                self.metrics_history.append(metric)
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
                if len(self.metrics_history) > self.max_history_size:
                    self.metrics_history = self.metrics_history[-self.max_history_size:]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥–∏
                self._check_thresholds(metric)
                
                # –í—ã–≤–æ–¥–∏–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                self._print_current_stats(metric)
                
                time.sleep(self.monitoring_interval)
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                time.sleep(5)
    
    def _collect_metrics(self) -> PerformanceMetric:
        """–°–±–æ—Ä –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        # CPU –∏ –ø–∞–º—è—Ç—å
        cpu_percent = psutil.cpu_percent(interval=1)
        memory = psutil.virtual_memory()
        
        # –î–∏—Å–∫
        disk = psutil.disk_usage('/')
        
        # –°–µ—Ç—å
        network = psutil.net_io_counters()
        
        # –ü—Ä–æ—Ü–µ—Å—Å—ã
        python_processes = len([p for p in psutil.process_iter(['name']) 
                               if 'python' in p.info['name'].lower()])
        
        # Load average (—Ç–æ–ª—å–∫–æ –Ω–∞ Unix —Å–∏—Å—Ç–µ–º–∞—Ö)
        try:
            load_avg = list(psutil.getloadavg())
        except AttributeError:
            load_avg = [0.0, 0.0, 0.0]
        
        # –†–∞–∑–º–µ—Ä –ª–æ–≥-—Ñ–∞–π–ª–æ–≤
        log_size_mb = self._get_logs_size()
        
        return PerformanceMetric(
            timestamp=datetime.now().isoformat(),
            cpu_percent=cpu_percent,
            memory_percent=memory.percent,
            memory_used_mb=memory.used / 1024 / 1024,
            memory_available_mb=memory.available / 1024 / 1024,
            disk_usage_percent=disk.percent,
            network_bytes_sent=network.bytes_sent,
            network_bytes_recv=network.bytes_recv,
            active_threads=psutil.cpu_count(),
            load_average=load_avg,
            python_processes=python_processes,
            log_files_size_mb=log_size_mb
        )
    
    def _get_logs_size(self) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –ª–æ–≥-—Ñ–∞–π–ª–æ–≤ –≤ MB"""
        if not self.logs_dir.exists():
            return 0.0
        
        total_size = 0
        for log_file in self.logs_dir.glob("*.log"):
            total_size += log_file.stat().st_size
        
        return total_size / 1024 / 1024
    
    def _check_thresholds(self, metric: PerformanceMetric):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä–æ–≥–æ–≤ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–ª–µ—Ä—Ç–æ–≤"""
        alerts = []
        
        if metric.cpu_percent > self.cpu_threshold:
            alerts.append(f"üö® –í–´–°–û–ö–ê–Ø –ù–ê–ì–†–£–ó–ö–ê CPU: {metric.cpu_percent:.1f}%")
        
        if metric.memory_percent > self.memory_threshold:
            alerts.append(f"üö® –í–´–°–û–ö–û–ï –ü–û–¢–†–ï–ë–õ–ï–ù–ò–ï –ü–ê–ú–Ø–¢–ò: {metric.memory_percent:.1f}%")
        
        if metric.disk_usage_percent > self.disk_threshold:
            alerts.append(f"üö® –ú–ê–õ–û –ú–ï–°–¢–ê –ù–ê –î–ò–°–ö–ï: {metric.disk_usage_percent:.1f}%")
        
        if metric.log_files_size_mb > 100:  # 100 MB –ª–æ–≥–æ–≤
            alerts.append(f"üö® –ë–û–õ–¨–®–û–ô –†–ê–ó–ú–ï–† –õ–û–ì–û–í: {metric.log_files_size_mb:.1f} MB")
        
        if alerts:
            for alert in alerts:
                print(alert)
                self.alerts.append({
                    "timestamp": metric.timestamp,
                    "message": alert,
                    "metric": asdict(metric)
                })
    
    def _print_current_stats(self, metric: PerformanceMetric):
        """–í—ã–≤–æ–¥ —Ç–µ–∫—É—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        print(f"\nüìä [{datetime.now().strftime('%H:%M:%S')}] –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:")
        print(f"   CPU: {metric.cpu_percent:.1f}% | "
              f"RAM: {metric.memory_percent:.1f}% ({metric.memory_used_mb:.0f}MB) | "
              f"–î–∏—Å–∫: {metric.disk_usage_percent:.1f}%")
        print(f"   Python –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {metric.python_processes} | "
              f"–õ–æ–≥–∏: {metric.log_files_size_mb:.1f}MB | "
              f"Load: {metric.load_average[0]:.2f}")
    
    def get_performance_report(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        if not self.metrics_history:
            return {"error": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"}
        
        latest = self.metrics_history[-1]
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
        hour_ago = datetime.now() - timedelta(hours=1)
        recent_metrics = [
            m for m in self.metrics_history 
            if datetime.fromisoformat(m.timestamp) > hour_ago
        ]
        
        if recent_metrics:
            avg_cpu = sum(m.cpu_percent for m in recent_metrics) / len(recent_metrics)
            avg_memory = sum(m.memory_percent for m in recent_metrics) / len(recent_metrics)
            max_cpu = max(m.cpu_percent for m in recent_metrics)
            max_memory = max(m.memory_percent for m in recent_metrics)
        else:
            avg_cpu = latest.cpu_percent
            avg_memory = latest.memory_percent
            max_cpu = latest.cpu_percent
            max_memory = latest.memory_percent
        
        return {
            "current": asdict(latest),
            "statistics": {
                "avg_cpu_percent": avg_cpu,
                "avg_memory_percent": avg_memory,
                "max_cpu_percent": max_cpu,
                "max_memory_percent": max_memory,
                "total_alerts": len(self.alerts),
                "monitoring_duration_minutes": len(self.metrics_history) * self.monitoring_interval / 60
            },
            "alerts": self.alerts[-10:],  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∞–ª–µ—Ä—Ç–æ–≤
            "recommendations": self._get_recommendations(latest)
        }
    
    def _get_recommendations(self, metric: PerformanceMetric) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        recommendations = []
        
        if metric.cpu_percent > 70:
            recommendations.append("üîß –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é CPU-–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
        
        if metric.memory_percent > 80:
            recommendations.append("üîß –£–≤–µ–ª–∏—á—å—Ç–µ RAM –∏–ª–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏")
        
        if metric.disk_usage_percent > 85:
            recommendations.append("üîß –û—á–∏—Å—Ç–∏—Ç–µ –¥–∏—Å–∫ –∏–ª–∏ —É–≤–µ–ª–∏—á—å—Ç–µ –æ–±—ä–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–∞")
        
        if metric.log_files_size_mb > 50:
            recommendations.append("üîß –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ä–æ—Ç–∞—Ü–∏—é –ª–æ–≥–æ–≤ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞")
        
        if metric.python_processes > 10:
            recommendations.append("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö Python –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
        
        if not recommendations:
            recommendations.append("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ")
        
        return recommendations
    
    def save_report(self, filename: str = None):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–∞–π–ª"""
        if not filename:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"performance_report_{timestamp}.json"
        
        report = self.get_performance_report()
        
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(report, f, indent=2, ensure_ascii=False)
        
        print(f"üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ALADDIN")
    print("=" * 60)
    
    monitor = PerformanceMonitor(monitoring_interval=30)
    
    try:
        monitor.start_monitoring()
        
        print("üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        print("=" * 60)
        
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –¥–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
        while True:
            time.sleep(60)
            
    except KeyboardInterrupt:
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
        monitor.stop_monitoring()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        monitor.save_report()
        
        print("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


if __name__ == "__main__":
    main()