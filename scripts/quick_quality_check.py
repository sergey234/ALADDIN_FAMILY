#!/usr/bin/env python3
"""
–ë–´–°–¢–†–ê–Ø –ü–†–û–í–ï–†–ö–ê –ö–ê–ß–ï–°–¢–í–ê –ö–û–î–ê
–ü—Ä–æ—Å—Ç–æ–π –∏ –Ω–∞–¥–µ–∂–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
"""

import os
import re
from typing import Dict, Any

def quick_quality_check(filename: str) -> Dict[str, Any]:
    """
    –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞
    
    Args:
        filename: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
        
    Returns:
        Dict —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ –∫–∞—á–µ—Å—Ç–≤–∞
    """
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            content = f.read()
        
        lines = content.splitlines()
        total_lines = len(lines)
        
        # –ü–æ–¥—Å—á–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        doc_lines = 0
        for line in lines:
            line = line.strip()
            if line.startswith('#') or '"""' in line or "'''" in line:
                doc_lines += 1
        
        # –ü–æ–¥—Å—á–µ—Ç type hints
        type_hint_lines = 0
        for line in lines:
            if any(keyword in line for keyword in ['->', ': int', ': str', ': float', ': bool', ': List', ': Dict', ': Tuple', ': Optional', ': Union', ': Any', ': Callable']):
                type_hint_lines += 1
        
        # –ü–æ–¥—Å—á–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ (–ø—Ä–æ—Å—Ç–æ–π)
        complexity = 0
        for line in lines:
            line = line.strip()
            if any(keyword in line for keyword in ['if ', 'for ', 'while ', 'try:', 'except:', 'with ', 'def ', 'class ']):
                complexity += 1
        
        # –†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
        doc_percent = (doc_lines / total_lines) * 100
        type_hints_percent = (type_hint_lines / total_lines) * 100
        complexity_percent = (complexity / total_lines) * 100
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª
        final_score = (doc_percent * 0.3 + type_hints_percent * 0.2 + complexity_percent * 0.3 + 100 * 0.2)
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞
        if final_score >= 95:
            quality = "A+"
        elif final_score >= 90:
            quality = "A"
        elif final_score >= 85:
            quality = "B+"
        elif final_score >= 80:
            quality = "B"
        elif final_score >= 70:
            quality = "C"
        else:
            quality = "D"
        
        return {
            'filename': os.path.basename(filename),
            'total_lines': total_lines,
            'doc_percent': round(doc_percent, 1),
            'type_hints_percent': round(type_hints_percent, 1),
            'complexity_percent': round(complexity_percent, 1),
            'final_score': round(final_score, 1),
            'quality': quality
        }
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞ {filename}: {e}")
        return {}

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç –ë–´–°–¢–†–ê–Ø –ü–†–û–í–ï–†–ö–ê –ö–ê–ß–ï–°–¢–í–ê –ö–û–î–ê")
    print("=" * 50)
    
    files_to_check = [
        'security/ai_agents/family_communication_hub.py',
        'security/ai_agents/emergency_response_interface.py',
        'security/ai_agents/notification_bot.py',
        'security/ai_agents/family_communication_hub_a_plus.py'
    ]
    
    results = []
    total_score = 0
    
    for filename in files_to_check:
        if os.path.exists(filename):
            print(f"\nüìã {os.path.basename(filename)}:")
            print("-" * 30)
            
            result = quick_quality_check(filename)
            if result:
                results.append(result)
                total_score += result['final_score']
                
                print(f"  üìä –°—Ç—Ä–æ–∫–∏: {result['total_lines']}")
                print(f"  üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: {result['doc_percent']}%")
                print(f"  üè∑Ô∏è  Type hints: {result['type_hints_percent']}%")
                print(f"  üß† –°–ª–æ–∂–Ω–æ—Å—Ç—å: {result['complexity_percent']}%")
                print(f"  üéØ –ë–∞–ª–ª: {result['final_score']}%")
                print(f"  üèÜ –ö–∞—á–µ—Å—Ç–≤–æ: {result['quality']}")
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    if results:
        avg_score = total_score / len(results)
        print(f"\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print("=" * 50)
        print(f"üéØ –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {avg_score:.1f}%")
        print(f"üî¢ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {len(results)}")
        
        if avg_score >= 95:
            print(f"üèÜ –û–ë–©–ï–ï –ö–ê–ß–ï–°–¢–í–û: A+")
        elif avg_score >= 90:
            print(f"ü•á –û–ë–©–ï–ï –ö–ê–ß–ï–°–¢–í–û: A")
        elif avg_score >= 85:
            print(f"ü•à –û–ë–©–ï–ï –ö–ê–ß–ï–°–¢–í–û: B+")
        elif avg_score >= 80:
            print(f"ü•â –û–ë–©–ï–ï –ö–ê–ß–ï–°–¢–í–û: B")
        else:
            print(f"‚ö†Ô∏è –û–ë–©–ï–ï –ö–ê–ß–ï–°–¢–í–û: C")
        
        print(f"\nüéâ –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")

if __name__ == "__main__":
    main()