#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üìç –î–ï–¢–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –û –ü–£–¢–Ø–• –ö –ö–û–ú–ü–û–ù–ï–ù–¢–ê–ú
========================================

–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏ —Å–ø—è—â–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
"""

import json
import os
from datetime import datetime
from collections import defaultdict

def detailed_path_report():
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ –ø—É—Ç—è—Ö –∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º"""
    
    print("üìç –î–ï–¢–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –û –ü–£–¢–Ø–• –ö –ö–û–ú–ü–û–ù–ï–ù–¢–ê–ú")
    print("=" * 60)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º SFM —Ä–µ–µ—Å—Ç—Ä
    sfm_path = "data/sfm/function_registry.json"
    
    if not os.path.exists(sfm_path):
        print(f"‚ùå –§–∞–π–ª {sfm_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    with open(sfm_path, 'r', encoding='utf-8') as f:
        data = json.load(f)
    
    functions = data.get('functions', {})
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    active_components = []
    sleeping_components = []
    
    for func_id, func_data in functions.items():
        status = func_data.get('status', 'unknown')
        function_type = func_data.get('function_type', 'unknown')
        file_path = func_data.get('file_path', 'unknown')
        
        component_info = {
            'id': func_id,
            'name': func_data.get('name', 'Unknown'),
            'type': function_type,
            'status': status,
            'file_path': file_path,
            'is_critical': func_data.get('is_critical', False),
            'security_level': func_data.get('security_level', 'unknown')
        }
        
        if status == 'active':
            active_components.append(component_info)
        else:
            sleeping_components.append(component_info)
    
    print(f"üìä –¢–ï–ö–£–©–ò–ô –°–¢–ê–¢–£–°:")
    print(f"   –í—Å–µ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {len(functions)}")
    print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö: {len(active_components)} (21.5%)")
    print(f"   –°–ø—è—â–∏—Ö: {len(sleeping_components)} (78.5%)")
    print()
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–æ —Ç–∏–ø–∞–º
    active_by_type = defaultdict(list)
    for comp in active_components:
        active_by_type[comp['type']].append(comp)
    
    print("‚úÖ –ê–ö–¢–ò–í–ù–´–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´ (70 –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤):")
    print("=" * 50)
    
    for comp_type, comps in active_by_type.items():
        print(f"\nüìÅ {comp_type.upper()} ({len(comps)} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤):")
        for comp in comps:
            critical_mark = " üî¥" if comp['is_critical'] else ""
            status_mark = " ‚úÖ" if comp['status'] == 'active' else " üò¥"
            print(f"   {status_mark} {comp['name']} ({comp['id']}){critical_mark}")
            print(f"      üìÇ –ü—É—Ç—å: {comp['file_path']}")
            print(f"      üõ°Ô∏è  –£—Ä–æ–≤–µ–Ω—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {comp['security_level']}")
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–ø—è—â–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–æ —Ç–∏–ø–∞–º
    sleeping_by_type = defaultdict(list)
    for comp in sleeping_components:
        sleeping_by_type[comp['type']].append(comp)
    
    print(f"\nüò¥ –°–ü–Ø–©–ò–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´ (256 –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤):")
    print("=" * 50)
    
    for comp_type, comps in sleeping_by_type.items():
        print(f"\nüìÅ {comp_type.upper()} ({len(comps)} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤):")
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10 –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
        for comp in comps[:10]:
            critical_mark = " üî¥" if comp['is_critical'] else ""
            status_mark = " ‚úÖ" if comp['status'] == 'active' else " üò¥"
            print(f"   {status_mark} {comp['name']} ({comp['id']}){critical_mark}")
            print(f"      üìÇ –ü—É—Ç—å: {comp['file_path']}")
            print(f"      üõ°Ô∏è  –£—Ä–æ–≤–µ–Ω—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {comp['security_level']}")
        if len(comps) > 10:
            print(f"   ... –∏ –µ—â–µ {len(comps) - 10} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    print(f"\nüìÇ –û–°–ù–û–í–ù–´–ï –î–ò–†–ï–ö–¢–û–†–ò–ò –°–ò–°–¢–ï–ú–´:")
    print("=" * 50)
    
    directories = {
        "SFM —Ä–µ–µ—Å—Ç—Ä": "data/sfm/function_registry.json",
        "–Ø–¥—Ä–æ —Å–∏—Å—Ç–µ–º—ã": "core/",
        "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å": "security/",
        "AI –∞–≥–µ–Ω—Ç—ã": "security/ai_agents/",
        "–ë–æ—Ç—ã": "security/bots/",
        "–ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—ã": "security/microservices/",
        "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è": "config/",
        "–õ–æ–≥–∏": "logs/",
        "–°–∫—Ä–∏–ø—Ç—ã": "scripts/",
        "–¢–µ—Å—Ç—ã": "tests/",
        "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è": "docs/",
        "–î–∞–Ω–Ω—ã–µ": "data/"
    }
    
    for name, path in directories.items():
        if os.path.exists(path):
            print(f"   ‚úÖ {name}: {path}")
        else:
            print(f"   ‚ùå {name}: {path} (–Ω–µ –Ω–∞–π–¥–µ–Ω)")
    
    # –§–∞–π–ª—ã –æ—Ç—á–µ—Ç–æ–≤
    print(f"\nüìã –§–ê–ô–õ–´ –û–¢–ß–ï–¢–û–í –°–ò–°–¢–ï–ú–´:")
    print("=" * 50)
    
    report_files = {
        "–ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç SFM": "ALL_SFM_FUNCTIONS_COMPLETE_REPORT.md",
        "–î–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ JSON": "ALL_SFM_FUNCTIONS_DETAILED.json",
        "–ê–Ω–∞–ª–∏–∑ —Å–∏—Å—Ç–µ–º—ã": "COMPREHENSIVE_SYSTEM_ANALYSIS_REPORT.md",
        "–û—Ç—á–µ—Ç –æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–∏": "logs/component_location_report_*.json",
        "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞": "logs/real_status_check_*.json"
    }
    
    for name, path in report_files.items():
        if "*" in path:
            # –î–ª—è —Ñ–∞–π–ª–æ–≤ —Å –º–∞—Å–∫–æ–π
            import glob
            files = glob.glob(path)
            if files:
                latest_file = max(files, key=os.path.getctime)
                print(f"   ‚úÖ {name}: {latest_file}")
            else:
                print(f"   ‚ùå {name}: {path} (–Ω–µ –Ω–∞–π–¥–µ–Ω)")
        else:
            if os.path.exists(path):
                print(f"   ‚úÖ {name}: {path}")
            else:
                print(f"   ‚ùå {name}: {path} (–Ω–µ –Ω–∞–π–¥–µ–Ω)")
    
    # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    report = {
        "timestamp": datetime.now().isoformat(),
        "total_components": len(functions),
        "active_components": active_components,
        "sleeping_components": sleeping_components,
        "active_by_type": dict(active_by_type),
        "sleeping_by_type": dict(sleeping_by_type),
        "directories": directories,
        "report_files": report_files,
        "statistics": {
            "active_count": len(active_components),
            "sleeping_count": len(sleeping_components),
            "active_percentage": (len(active_components) / len(functions)) * 100,
            "sleeping_percentage": (len(sleeping_components) / len(functions)) * 100
        }
    }
    
    report_path = f"logs/detailed_path_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
    os.makedirs("logs", exist_ok=True)
    
    with open(report_path, 'w', encoding='utf-8') as f:
        json.dump(report, f, ensure_ascii=False, indent=2)
    
    print(f"\nüìã –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_path}")
    
    return report

if __name__ == "__main__":
    detailed_path_report()