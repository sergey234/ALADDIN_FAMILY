#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Safe Function Manager (SFM)
–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Ö —Å—Ç–∞—Ç—É—Å
"""

import sys
import os
sys.path.insert(0, '/Users/sergejhlystov/ALADDIN_NEW')

from security.safe_function_manager import SafeFunctionManager
import time

def initialize_sfm():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SFM"""
    print("=" * 80)
    print("üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø SAFE FUNCTION MANAGER (SFM)")
    print("=" * 80)
    
    try:
        # –°–æ–∑–¥–∞–µ–º SFM
        print("1. –°–æ–∑–¥–∞–Ω–∏–µ SFM...")
        sfm = SafeFunctionManager("MainSFM")
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
        print("2. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...")
        success = sfm.initialize()
        
        if success:
            print("‚úÖ SFM —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SFM!")
            return
        
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        print("3. –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏...")
        time.sleep(2)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print("4. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
        all_functions = sfm.get_all_functions_status()
        
        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò:")
        print(f"   –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π: {len(all_functions)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏
        print(f"\nüìã –ó–ê–†–ï–ì–ò–°–¢–†–ò–†–û–í–ê–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò:")
        print("-" * 60)
        
        for i, function in enumerate(all_functions, 1):
            function_id = function.get('function_id', 'N/A')
            name = function.get('name', 'N/A')
            status = function.get('status', 'N/A')
            function_type = function.get('function_type', 'N/A')
            security_level = function.get('security_level', 'N/A')
            is_critical = function.get('is_critical', False)
            
            # –°—Ç–∞—Ç—É—Å –∏–∫–æ–Ω–∫–∞
            status_icon = "üü¢" if status == 'enabled' else "üî¥" if status == 'disabled' else "üò¥"
            critical_icon = "‚ö†Ô∏è" if is_critical else "  "
            
            print(f"{i:2d}. {status_icon} {critical_icon} {name}")
            print(f"     ID: {function_id}")
            print(f"     –¢–∏–ø: {function_type}")
            print(f"     –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: {security_level}")
            print(f"     –°—Ç–∞—Ç—É—Å: {status}")
            print()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        enabled_count = len([f for f in all_functions if f.get('status') == 'enabled'])
        disabled_count = len([f for f in all_functions if f.get('status') == 'disabled'])
        sleeping_count = len([f for f in all_functions if f.get('status') == 'sleeping'])
        
        print("=" * 80)
        print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –°–¢–ê–¢–£–°–ê–ú:")
        print("=" * 80)
        print(f"üü¢ –ê–ö–¢–ò–í–ù–´–ï (enabled): {enabled_count}")
        print(f"üî¥ –û–¢–ö–õ–Æ–ß–ï–ù–ù–´–ï (disabled): {disabled_count}")
        print(f"üò¥ –í –°–ü–Ø–©–ï–ú –†–ï–ñ–ò–ú–ï (sleeping): {sleeping_count}")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É SFM
        print(f"\nüìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê SFM:")
        print("-" * 40)
        stats = sfm.get_safe_function_stats()
        for key, value in stats.items():
            print(f"   {key}: {value}")
        
        print("\n" + "=" * 80)
        print("‚úÖ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê")
        print("=" * 80)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SFM: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    initialize_sfm()