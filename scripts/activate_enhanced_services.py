#!/usr/bin/env python3
"""
üõ°Ô∏è ALADDIN Enhanced Services Activator
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ Enhanced —Å–µ—Ä–≤–∏—Å–æ–≤ –∏–∑ —Å–ø—è—â–µ–≥–æ —Ä–µ–∂–∏–º–∞
"""

import os
import sys
import json
import subprocess
import time
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent.parent))

def load_web_services_registry():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–µ–µ—Å—Ç—Ä –≤–µ–±-—Å–µ—Ä–≤–∏—Å–æ–≤"""
    registry_path = Path(__file__).parent.parent / "data" / "web_services_registry.json"
    with open(registry_path, 'r', encoding='utf-8') as f:
        return json.load(f)

def update_service_status(service_id, status):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞ –≤ —Ä–µ–µ—Å—Ç—Ä–µ"""
    registry_path = Path(__file__).parent.parent / "data" / "web_services_registry.json"
    
    with open(registry_path, 'r', encoding='utf-8') as f:
        registry = json.load(f)
    
    if service_id in registry['web_services']:
        registry['web_services'][service_id]['status'] = status
        registry['web_services'][service_id]['last_updated'] = time.strftime('%Y-%m-%dT%H:%M:%S.000000')
        
        with open(registry_path, 'w', encoding='utf-8') as f:
            json.dump(registry, f, indent=2, ensure_ascii=False)
        
        return True
    return False

def check_port_available(port):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç–∞"""
    import socket
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.bind(('localhost', port))
            return True
    except OSError:
        return False

def start_enhanced_api_docs():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Enhanced API Docs"""
    print("üöÄ –ó–∞–ø—É—Å–∫ Enhanced API Docs...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç–∞
    if not check_port_available(8080):
        print("‚ùå –ü–æ—Ä—Ç 8080 –∑–∞–Ω—è—Ç. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–µ—Ä–≤–∏—Å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –ø–æ—Ä—Ç.")
        return False
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å –≤ —Ñ–æ–Ω–µ
    try:
        cmd = ["python3", "enhanced_api_docs.py"]
        process = subprocess.Popen(
            cmd, 
            stdout=subprocess.PIPE, 
            stderr=subprocess.PIPE,
            cwd=Path(__file__).parent.parent
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ —Ä–µ–µ—Å—Ç—Ä–µ
        update_service_status("enhanced_api_docs", "running")
        
        print("‚úÖ Enhanced API Docs –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8080")
        print(f"üìã PID –ø—Ä–æ—Ü–µ—Å—Å–∞: {process.pid}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Enhanced API Docs: {e}")
        return False

def start_enhanced_architecture_visualizer():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Enhanced Architecture Visualizer"""
    print("üöÄ –ó–∞–ø—É—Å–∫ Enhanced Architecture Visualizer...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç–∞
    if not check_port_available(8081):
        print("‚ùå –ü–æ—Ä—Ç 8081 –∑–∞–Ω—è—Ç. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–µ—Ä–≤–∏—Å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –ø–æ—Ä—Ç.")
        return False
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å –≤ —Ñ–æ–Ω–µ
    try:
        cmd = ["python3", "enhanced_architecture_visualizer.py"]
        process = subprocess.Popen(
            cmd, 
            stdout=subprocess.PIPE, 
            stderr=subprocess.PIPE,
            cwd=Path(__file__).parent.parent
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ —Ä–µ–µ—Å—Ç—Ä–µ
        update_service_status("enhanced_architecture_visualizer", "running")
        
        print("‚úÖ Enhanced Architecture Visualizer –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8081")
        print(f"üìã PID –ø—Ä–æ—Ü–µ—Å—Å–∞: {process.pid}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Enhanced Architecture Visualizer: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üõ°Ô∏è ALADDIN Enhanced Services Activator")
    print("=" * 50)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–µ—Å—Ç—Ä —Å–µ—Ä–≤–∏—Å–æ–≤
    registry = load_web_services_registry()
    
    print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ Enhanced —Å–µ—Ä–≤–∏—Å—ã:")
    for service_id, service in registry['web_services'].items():
        if 'enhanced' in service_id:
            status_emoji = "üü¢" if service['status'] == 'running' else "üõå"
            print(f"  {status_emoji} {service['name']} - {service['status']} (–ø–æ—Ä—Ç {service['port']})")
    
    print("\nüéØ –ê–∫—Ç–∏–≤–∞—Ü–∏—è Enhanced —Å–µ—Ä–≤–∏—Å–æ–≤...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
    api_docs_success = start_enhanced_api_docs()
    time.sleep(2)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–∞–º–∏
    
    arch_viz_success = start_enhanced_architecture_visualizer()
    
    print("\n" + "=" * 50)
    if api_docs_success and arch_viz_success:
        print("üéâ –í—Å–µ Enhanced —Å–µ—Ä–≤–∏—Å—ã —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã!")
        print("\nüåê –î–æ—Å—Ç—É–ø–Ω—ã–µ URL:")
        print("  üìñ Enhanced API Docs: http://localhost:8080")
        print("  üèóÔ∏è  Architecture Visualizer: http://localhost:8081")
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–µ—Ä–≤–∏—Å—ã –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")
    
    print("\nüí° –î–ª—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: python3 scripts/deactivate_enhanced_services.py")

if __name__ == "__main__":
    main()