#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∞–ª–µ—Ä—Ç–æ–≤ ALADDIN
"""

import sys
import os
import json
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from security.advanced_alerting_system import alerting_system

def test_alerts_simple():
    """–ü—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∞–ª–µ—Ä—Ç–æ–≤"""
    print("üß™ –ü—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AdvancedAlertingSystem...")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_data = {
        'threat_level': 'critical',
        'cpu_usage': 95,
        'memory_usage': 90,
        'error_count': 15,
        'compliance_score': 75,
        'suspicious_activity': True,
        'backup_status': 'failed',
        'integration_status': 'failed'
    }
    
    print(f"üìä –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: {json.dumps(test_data, indent=2, ensure_ascii=False)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª–µ—Ä—Ç—ã
    alerts = alerting_system.check_alerts(test_data)
    
    print(f"\nüö® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∞–ª–µ—Ä—Ç–æ–≤: {len(alerts)}")
    
    for i, alert in enumerate(alerts, 1):
        print(f"\n{i}. {alert.title}")
        print(f"   –¢–∏–ø: {alert.alert_type.value}")
        print(f"   –ö—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å: {alert.severity.value}")
        print(f"   –ü—Ä–∞–≤–∏–ª–æ: {alert.rule_name}")
        print(f"   –í—Ä–µ–º—è: {alert.timestamp.strftime('%H:%M:%S')}")
        print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {alert.message[:100]}...")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = alerting_system.get_alert_statistics()
    print(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"  - –í—Å–µ–≥–æ –∞–ª–µ—Ä—Ç–æ–≤: {stats['total_alerts']}")
    print(f"  - –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active_alerts']}")
    print(f"  - –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö: {stats['resolved_alerts']}")
    print(f"  - –ü–æ —Ç–∏–ø–∞–º: {stats['type_statistics']}")
    print(f"  - –ü–æ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏: {stats['severity_statistics']}")
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã
    active_alerts = alerting_system.get_active_alerts()
    print(f"\nüî¥ –ê–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã: {len(active_alerts)}")
    
    for alert in active_alerts:
        print(f"  - {alert.title} ({alert.severity.value})")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞
    if active_alerts:
        first_alert = active_alerts[0]
        print(f"\nüîß –†–∞–∑—Ä–µ—à–∞–µ–º –∞–ª–µ—Ä—Ç: {first_alert.id}")
        success = alerting_system.resolve_alert(first_alert.id)
        if success:
            print("‚úÖ –ê–ª–µ—Ä—Ç —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–∞")
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    final_stats = alerting_system.get_alert_statistics()
    print(f"\nüìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"  - –í—Å–µ–≥–æ –∞–ª–µ—Ä—Ç–æ–≤: {final_stats['total_alerts']}")
    print(f"  - –ê–∫—Ç–∏–≤–Ω—ã—Ö: {final_stats['active_alerts']}")
    print(f"  - –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö: {final_stats['resolved_alerts']}")
    
    return len(alerts) > 0

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –∞–ª–µ—Ä—Ç–æ–≤")
    print("=" * 60)
    
    success = test_alerts_simple()
    
    print("\n" + "=" * 60)
    if success:
        print("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∞–ª–µ—Ä—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    else:
        print("üí• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –ø—Ä–æ—à–ª–æ!")
        print("‚ùå –°–∏—Å—Ç–µ–º–∞ –∞–ª–µ—Ä—Ç–æ–≤ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    return success

if __name__ == '__main__':
    success = main()
    sys.exit(0 if success else 1)