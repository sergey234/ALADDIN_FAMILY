#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
SFM REGISTRY VALIDATOR
–í–∞–ª–∏–¥–∞—Ç–æ—Ä —Ä–µ–µ—Å—Ç—Ä–∞ SFM —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º

–ê–≤—Ç–æ—Ä: ALADDIN Security Team
–í–µ—Ä—Å–∏—è: 1.0
–î–∞—Ç–∞: 2025-01-27
"""

import json
import os
import sys
from pathlib import Path
from datetime import datetime
from typing import Dict, List, Any, Optional

class SFMValidator:
    def __init__(self, project_root="/Users/sergejhlystov/ALADDIN_NEW"):
        self.project_root = Path(project_root)
        self.sfm_dir = self.project_root / "data" / "sfm"
        self.registry_file = self.sfm_dir / "function_registry.json"
        
        # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π
        self.required_fields = [
            'function_id', 'name', 'function_type', 'status'
        ]
        
        # –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –ø–æ–ª—è
        self.recommended_fields = [
            'description', 'security_level', 'created_at', 'version',
            'file_path', 'quality_score', 'dependencies'
        ]

    def validate_json_structure(self, data: Dict) -> List[str]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã JSON"""
        errors = []
        
        if not isinstance(data, dict):
            errors.append("–ö–æ—Ä–Ω–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º")
            return errors
        
        if "functions" not in data:
            errors.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á 'functions'")
            return errors
        
        if not isinstance(data["functions"], dict):
            errors.append("–ü–æ–ª–µ 'functions' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º")
            return errors
        
        return errors

    def validate_function(self, func_id: str, func_data: Dict) -> Dict[str, Any]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏"""
        validation = {
            "is_valid": True,
            "errors": [],
            "warnings": [],
            "missing_required": [],
            "missing_recommended": []
        }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        for field in self.required_fields:
            if field not in func_data:
                validation["missing_required"].append(field)
                validation["errors"].append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: {field}")
                validation["is_valid"] = False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö –ø–æ–ª–µ–π
        for field in self.recommended_fields:
            if field not in func_data:
                validation["missing_recommended"].append(field)
                validation["warnings"].append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –ø–æ–ª–µ: {field}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
        if 'status' in func_data:
            valid_statuses = ['active', 'sleeping', 'disabled', 'enabled']
            if func_data['status'] not in valid_statuses:
                validation["warnings"].append(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {func_data['status']}")
        
        if 'security_level' in func_data:
            valid_levels = ['low', 'medium', 'high', 'critical']
            if func_data['security_level'] not in valid_levels:
                validation["warnings"].append(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {func_data['security_level']}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ file_path
        if 'file_path' in func_data and func_data['file_path']:
            file_path = Path(func_data['file_path'])
            if not file_path.exists():
                validation["warnings"].append(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {func_data['file_path']}")
        
        return validation

    def analyze_categories(self, functions: Dict) -> Dict[str, int]:
        """–ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ñ—É–Ω–∫—Ü–∏–π"""
        categories = {}
        for func_data in functions.values():
            if isinstance(func_data, dict) and 'function_type' in func_data:
                category = func_data['function_type'].upper()
                categories[category] = categories.get(category, 0) + 1
        return categories

    def analyze_statuses(self, functions: Dict) -> Dict[str, int]:
        """–ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç—É—Å–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π"""
        statuses = {}
        for func_data in functions.values():
            if isinstance(func_data, dict) and 'status' in func_data:
                status = func_data['status']
                statuses[status] = statuses.get(status, 0) + 1
        return statuses

    def check_duplicates(self, functions: Dict) -> List[str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"""
        duplicates = []
        seen_ids = set()
        
        for func_id, func_data in functions.items():
            if func_id in seen_ids:
                duplicates.append(f"–î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ID: {func_id}")
            seen_ids.add(func_id)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ –∏–º–µ–Ω–∏
            if isinstance(func_data, dict) and 'name' in func_data:
                name = func_data['name']
                name_count = sum(1 for f in functions.values() 
                               if isinstance(f, dict) and f.get('name') == name)
                if name_count > 1:
                    duplicates.append(f"–î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–º—è: {name}")
        
        return duplicates

    def validate_registry(self) -> Dict[str, Any]:
        """–ü–æ–ª–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–µ—Å—Ç—Ä–∞"""
        result = {
            "is_valid": False,
            "total_functions": 0,
            "valid_functions": 0,
            "invalid_functions": 0,
            "categories": {},
            "statuses": {},
            "errors": [],
            "warnings": [],
            "duplicates": [],
            "file_info": {},
            "function_validations": {}
        }
        
        try:
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ
            if self.registry_file.exists():
                stat = self.registry_file.stat()
                result["file_info"] = {
                    "size_bytes": stat.st_size,
                    "size_kb": stat.st_size / 1024,
                    "last_modified": datetime.fromtimestamp(stat.st_mtime).strftime("%Y-%m-%d %H:%M:%S"),
                    "exists": True
                }
            else:
                result["errors"].append("–§–∞–π–ª —Ä–µ–µ—Å—Ç—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                result["file_info"]["exists"] = False
                return result
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ JSON
            with open(self.registry_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            structure_errors = self.validate_json_structure(data)
            result["errors"].extend(structure_errors)
            
            if structure_errors:
                return result
            
            functions = data["functions"]
            result["total_functions"] = len(functions)
            result["is_valid"] = True
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞–∂–¥–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
            for func_id, func_data in functions.items():
                func_validation = self.validate_function(func_id, func_data)
                result["function_validations"][func_id] = func_validation
                
                if func_validation["is_valid"]:
                    result["valid_functions"] += 1
                else:
                    result["invalid_functions"] += 1
                
                result["errors"].extend(func_validation["errors"])
                result["warnings"].extend(func_validation["warnings"])
            
            # –ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ —Å—Ç–∞—Ç—É—Å–æ–≤
            result["categories"] = self.analyze_categories(functions)
            result["statuses"] = self.analyze_statuses(functions)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            result["duplicates"] = self.check_duplicates(functions)
            
        except json.JSONDecodeError as e:
            result["errors"].append(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {str(e)}")
        except Exception as e:
            result["errors"].append(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {str(e)}")
        
        return result

    def generate_report(self) -> None:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        print("üîç –í–ê–õ–ò–î–ê–¶–ò–Ø SFM –†–ï–ï–°–¢–†–ê")
        print("=" * 50)
        
        validation = self.validate_registry()
        
        # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        print(f"üìÅ –§–∞–π–ª: {self.registry_file}")
        print(f"üìä –†–∞–∑–º–µ—Ä: {validation['file_info'].get('size_kb', 0):.1f} KB")
        print(f"üïí –ò–∑–º–µ–Ω–µ–Ω: {validation['file_info'].get('last_modified', 'N/A')}")
        print(f"‚úÖ –°—É—â–µ—Å—Ç–≤—É–µ—Ç: {'–î–∞' if validation['file_info'].get('exists', False) else '–ù–µ—Ç'}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π
        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –§–£–ù–ö–¶–ò–ô:")
        print(f"  ‚Ä¢ –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π: {validation['total_functions']}")
        print(f"  ‚Ä¢ –í–∞–ª–∏–¥–Ω—ã—Ö: {validation['valid_functions']}")
        print(f"  ‚Ä¢ –ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö: {validation['invalid_functions']}")
        print(f"  ‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏: {(validation['valid_functions'] / validation['total_functions'] * 100):.1f}%" if validation['total_functions'] > 0 else "  ‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏: 0%")
        
        # –°—Ç–∞—Ç—É—Å—ã —Ñ—É–Ω–∫—Ü–∏–π
        if validation['statuses']:
            print(f"\nüîÑ –°–¢–ê–¢–£–°–´ –§–£–ù–ö–¶–ò–ô:")
            for status, count in sorted(validation['statuses'].items()):
                print(f"  ‚Ä¢ {status:<12} : {count:>3} —Ñ—É–Ω–∫—Ü–∏–π")
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π
        if validation['categories']:
            print(f"\nüìÇ –ö–ê–¢–ï–ì–û–†–ò–ò –§–£–ù–ö–¶–ò–ô:")
            sorted_categories = sorted(validation['categories'].items(), key=lambda x: x[1], reverse=True)
            for category, count in sorted_categories[:15]:  # –¢–æ–ø 15
                print(f"  ‚Ä¢ {category:<25} : {count:>3} —Ñ—É–Ω–∫—Ü–∏–π")
        
        # –û—à–∏–±–∫–∏
        if validation['errors']:
            print(f"\n‚ùå –û–®–ò–ë–ö–ò ({len(validation['errors'])}):")
            for error in validation['errors'][:10]:  # –ü–µ—Ä–≤—ã–µ 10 –æ—à–∏–±–æ–∫
                print(f"  ‚Ä¢ {error}")
            if len(validation['errors']) > 10:
                print(f"  ... –∏ –µ—â–µ {len(validation['errors']) - 10} –æ—à–∏–±–æ–∫")
        
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        if validation['warnings']:
            print(f"\n‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø ({len(validation['warnings'])}):")
            for warning in validation['warnings'][:10]:  # –ü–µ—Ä–≤—ã–µ 10 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
                print(f"  ‚Ä¢ {warning}")
            if len(validation['warnings']) > 10:
                print(f"  ... –∏ –µ—â–µ {len(validation['warnings']) - 10} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π")
        
        # –î—É–±–ª–∏–∫–∞—Ç—ã
        if validation['duplicates']:
            print(f"\nüîÑ –î–£–ë–õ–ò–ö–ê–¢–´ ({len(validation['duplicates'])}):")
            for duplicate in validation['duplicates']:
                print(f"  ‚Ä¢ {duplicate}")
        
        # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
        print(f"\nüéØ –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê:")
        if validation['is_valid'] and validation['invalid_functions'] == 0:
            print(f"  ‚úÖ –†–ï–ï–°–¢–† –í–ê–õ–ò–î–ï–ù –ò –ö–û–†–†–ï–ö–¢–ï–ù")
        elif validation['is_valid']:
            print(f"  ‚ö†Ô∏è  –†–ï–ï–°–¢–† –í–ê–õ–ò–î–ï–ù, –ù–û –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´")
        else:
            print(f"  ‚ùå –†–ï–ï–°–¢–† –ù–ï–í–ê–õ–ò–î–ï–ù - –¢–†–ï–ë–£–ï–¢–°–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï")
        
        print("=" * 50)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    validator = SFMValidator()
    validator.generate_report()

if __name__ == "__main__":
    main()