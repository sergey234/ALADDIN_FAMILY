#!/usr/bin/env python3
"""
–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ backup —Ñ–∞–π–ª–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
"""

import os
import re
import json
import shutil
from pathlib import Path
from datetime import datetime

def analyze_dependencies(file_path):
    """–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —Ñ–∞–π–ª–∞"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ò—â–µ–º –∏–º–ø–æ—Ä—Ç—ã
        imports = []
        import_patterns = [
            r'from\s+([\w\.]+)\s+import',
            r'import\s+([\w\.]+)',
            r'from\s+([\w\.]+)\s+import\s+\*'
        ]
        
        for pattern in import_patterns:
            matches = re.findall(pattern, content)
            imports.extend(matches)
        
        # –ò—â–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        filename = Path(file_path).stem
        filename_mentions = []
        
        # –ò—â–µ–º –≤ —Å—Ç—Ä–æ–∫–∞—Ö
        string_patterns = [
            r'["\']([^"\']*' + re.escape(filename) + r'[^"\']*)["\']',
            r'["\']([^"\']*' + re.escape(filename.replace('_backup', '').replace('_BACKUP', '').replace('.backup', '')) + r'[^"\']*)["\']'
        ]
        
        for pattern in string_patterns:
            matches = re.findall(pattern, content)
            filename_mentions.extend(matches)
        
        return {
            'imports': list(set(imports)),
            'filename_mentions': list(set(filename_mentions)),
            'content_length': len(content)
        }
    except Exception as e:
        return {'error': str(e)}

def find_references_to_file(filename, search_dir):
    """–ü–æ–∏—Å–∫ —Å—Å—ã–ª–æ–∫ –Ω–∞ —Ñ–∞–π–ª –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö"""
    references = []
    
    for root, dirs, files in os.walk(search_dir):
        if 'formatting_work' in root:
            continue
            
        for file in files:
            if file.endswith('.py'):
                file_path = Path(root) / file
                try:
                    with open(file_path, 'r', encoding='utf-8') as f:
                        content = f.read()
                    
                    if filename in content:
                        references.append({
                            'file': str(file_path),
                            'line': content.count(filename)
                        })
                except:
                    continue
    
    return references

def generate_new_name(backup_filename):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞"""
    # –£–±–∏—Ä–∞–µ–º backup —Å—É—Ñ—Ñ–∏–∫—Å—ã
    new_name = backup_filename
    
    # –°–ø–∏—Å–æ–∫ —Å—É—Ñ—Ñ–∏–∫—Å–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    suffixes_to_remove = [
        '_original_backup_20250103',
        '.backup_20250909_212030',
        '.backup_20250909_212748', 
        '.backup_20250909_213215',
        '.backup_20250928_003043',
        '.backup_20250928_002228',
        '.backup_20250927_231340',
        '.backup_20250927_231341',
        '.backup_20250927_231342',
        '.backup_20250927_232629',
        '.backup_20250927_233351',
        '.backup_20250927_234000',
        '.backup_20250927_234616',
        '.backup_20250928_000215',
        '.backup_20250928_003940',
        '.backup_20250928_005946',
        '_before_formatting',
        '.backup_20250926_132307',
        '.backup_20250926_132405',
        '.backup_20250926_133258',
        '.backup_20250926_133317',
        '.backup_20250926_133733',
        '.backup_20250926_133852',
        '.backup_20250927_031442',
        '.backup_011225',
        '_BACKUP',
        '_backup',
        '.backup'
    ]
    
    for suffix in suffixes_to_remove:
        new_name = new_name.replace(suffix, '')
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—É—Ñ—Ñ–∏–∫—Å –¥–ª—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –≤–µ—Ä—Å–∏–π
    if 'original' in backup_filename.lower():
        new_name = new_name.replace('.py', '_original.py')
    elif 'backup' in backup_filename.lower():
        new_name = new_name.replace('.py', '_alternative.py')
    else:
        new_name = new_name.replace('.py', '_enhanced.py')
    
    return new_name

def safe_rename_backup_files():
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ backup —Ñ–∞–π–ª–æ–≤"""
    print("üîÑ –ë–ï–ó–û–ü–ê–°–ù–û–ï –ü–ï–†–ï–ò–ú–ï–ù–û–í–ê–ù–ò–ï BACKUP –§–ê–ô–õ–û–í")
    print("=" * 60)
    
    # –ü—É—Ç–∏
    backup_dir = Path('/Users/sergejhlystov/ALADDIN_NEW/security/formatting_work/backup_files')
    base_dir = Path('/Users/sergejhlystov/ALADDIN_NEW')
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ backup —Ñ–∞–π–ª—ã
    backup_files = []
    for file in backup_dir.glob('*.py'):
        if file.is_file():
            backup_files.append(file)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É
    backup_files.sort(key=lambda x: x.stat().st_size, reverse=True)
    
    print(f"üìä –ù–ê–ô–î–ï–ù–û BACKUP –§–ê–ô–õ–û–í: {len(backup_files)}")
    
    rename_plan = []
    risks = []
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
    for i, backup_file in enumerate(backup_files, 1):
        print(f"\nüìÅ [{i}/{len(backup_files)}] –ê–Ω–∞–ª–∏–∑: {backup_file.name}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –∏–º—è
        new_name = generate_new_name(backup_file.name)
        new_path = backup_file.parent / new_name
        
        print(f"  üîÑ –ù–æ–≤–æ–µ –∏–º—è: {new_name}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        dependencies = analyze_dependencies(backup_file)
        if 'error' in dependencies:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {dependencies['error']}")
            continue
        
        # –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–∞–π–ª
        references = find_references_to_file(backup_file.name, base_dir / 'security')
        
        # –û—Ü–µ–Ω–∏–≤–∞–µ–º —Ä–∏—Å–∫–∏
        risk_level = "LOW"
        if len(references) > 0:
            risk_level = "MEDIUM"
        if len(dependencies['imports']) > 10:
            risk_level = "HIGH"
        
        print(f"  üìä –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {len(dependencies['imports'])} –∏–º–ø–æ—Ä—Ç–æ–≤")
        print(f"  üîç –°—Å—ã–ª–∫–∏: {len(references)} —Ñ–∞–π–ª–æ–≤")
        print(f"  ‚ö†Ô∏è –†–∏—Å–∫: {risk_level}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞–Ω
        rename_plan.append({
            'old_name': backup_file.name,
            'new_name': new_name,
            'old_path': str(backup_file),
            'new_path': str(new_path),
            'dependencies': dependencies,
            'references': references,
            'risk_level': risk_level
        })
        
        if risk_level == "HIGH":
            risks.append(backup_file.name)
    
    # –í—ã–≤–æ–¥–∏–º –ø–ª–∞–Ω –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
    print(f"\nüìã –ü–õ–ê–ù –ü–ï–†–ï–ò–ú–ï–ù–û–í–ê–ù–ò–Ø:")
    print("=" * 60)
    
    for item in rename_plan:
        print(f"üìÅ {item['old_name']}")
        print(f"   ‚û°Ô∏è {item['new_name']}")
        print(f"   ‚ö†Ô∏è –†–∏—Å–∫: {item['risk_level']}")
        print()
    
    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ —Ä–∏—Å–∫–∞—Ö
    if risks:
        print(f"‚ö†Ô∏è –í–´–°–û–ö–ò–ô –†–ò–°–ö ({len(risks)} —Ñ–∞–π–ª–æ–≤):")
        for risk_file in risks:
            print(f"   ‚Ä¢ {risk_file}")
        print()
    
    # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
    script_content = f"""#!/usr/bin/env python3
\"\"\"
–°–∫—Ä–∏–ø—Ç –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è backup —Ñ–∞–π–ª–æ–≤
–°–æ–∑–¥–∞–Ω: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
\"\"\"

import os
import shutil
from pathlib import Path

def rename_files():
    \"\"\"–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤\"\"\"
    backup_dir = Path('/Users/sergejhlystov/ALADDIN_NEW/security/formatting_work/backup_files')
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    backup_backup_dir = backup_dir.parent / f"backup_files_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    if backup_backup_dir.exists():
        shutil.rmtree(backup_backup_dir)
    shutil.copytree(backup_dir, backup_backup_dir)
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {{backup_backup_dir}}")
    
    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
    rename_operations = {json.dumps([{'old': item['old_name'], 'new': item['new_name']} for item in rename_plan], indent=4)}
    
    for op in rename_operations:
        old_path = backup_dir / op['old']
        new_path = backup_dir / op['new']
        
        if old_path.exists():
            old_path.rename(new_path)
            print(f"‚úÖ {{op['old']}} ‚û°Ô∏è {{op['new']}}")
        else:
            print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {{op['old']}}")
    
    print(f"\\nüéâ –ü–ï–†–ï–ò–ú–ï–ù–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
    print(f"üìä –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {{len(rename_operations)}}")

if __name__ == "__main__":
    from datetime import datetime
    rename_files()
"""
    
    script_path = backup_dir / "rename_backup_files.py"
    with open(script_path, 'w', encoding='utf-8') as f:
        f.write(script_content)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω
    plan_path = backup_dir / f"RENAME_PLAN_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
    with open(plan_path, 'w', encoding='utf-8') as f:
        json.dump(rename_plan, f, ensure_ascii=False, indent=2, default=str)
    
    print(f"üìã –ü–õ–ê–ù –ü–ï–†–ï–ò–ú–ï–ù–û–í–ê–ù–ò–Ø –°–û–•–†–ê–ù–ï–ù: {plan_path}")
    print(f"üîß –°–ö–†–ò–ü–¢ –ü–ï–†–ï–ò–ú–ï–ù–û–í–ê–ù–ò–Ø: {script_path}")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print(f"1. üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–ª–∞–Ω –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è")
    print(f"2. üß™ –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç: python3 {script_path}")
    print(f"3. ‚úÖ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É —Å–∏—Å—Ç–µ–º—ã –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è")
    print(f"4. üîÑ –ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏")
    
    return rename_plan

if __name__ == "__main__":
    safe_rename_backup_files()