#!/usr/bin/env python3
"""
Registry Restore with Protection
–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–µ—Å—Ç—Ä–∞ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏ SFM
"""

import json
import os
import shutil
from datetime import datetime


class RegistryRestorer:
    """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–µ—Å—Ç—Ä–∞ —Å –∑–∞—â–∏—Ç–æ–π"""
    
    def __init__(self):
        self.timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        self.registry_path = "data/sfm/function_registry.json"
        self.merged_registry_path = "data/sfm/function_registry.json.backup_20250918_101310"
        self.protection_file = "data/sfm/.registry_protected"
        
    def create_protection(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—â–∏—Ç—ã –æ—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏"""
        try:
            print("üõ°Ô∏è  –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—â–∏—Ç—ã –æ—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏...")
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –∑–∞—â–∏—Ç—ã
            with open(self.protection_file, 'w') as f:
                f.write(f"Registry protected at {datetime.now().isoformat()}\n")
                f.write("DO NOT DELETE - Prevents SFM from overwriting merged registry\n")
            
            print("‚úÖ –ó–∞—â–∏—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—â–∏—Ç—ã: {e}")
            return False
    
    def restore_merged_registry(self):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ —Ä–µ–µ—Å—Ç—Ä–∞"""
        try:
            print("üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ —Ä–µ–µ—Å—Ç—Ä–∞...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ —Ä–µ–µ—Å—Ç—Ä–∞
            if not os.path.exists(self.merged_registry_path):
                print(f"‚ùå –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ä–µ–µ—Å—Ç—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.merged_registry_path}")
                return False
            
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–µ—Å—Ç—Ä–∞
            if os.path.exists(self.registry_path):
                backup_path = f"{self.registry_path}.backup_{self.timestamp}"
                shutil.copy2(self.registry_path, backup_path)
                print(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ä–µ–µ—Å—Ç—Ä
            shutil.copy2(self.merged_registry_path, self.registry_path)
            print("‚úÖ –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ä–µ–µ—Å—Ç—Ä –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            return False
    
    def verify_registry(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–µ—Å—Ç—Ä–∞"""
        try:
            print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–µ—Å—Ç—Ä–∞...")
            
            with open(self.registry_path, 'r') as f:
                registry = json.load(f)
            
            print(f"üìä –í–µ—Ä—Å–∏—è: {registry.get('version', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            print(f"üìä –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π: {len(registry.get('functions', {}))}")
            
            if 'statistics' in registry:
                stats = registry['statistics']
                print(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
                print(f"  –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats.get('active_functions', 0)}")
                print(f"  –°–ø—è—â–∏—Ö: {stats.get('sleeping_functions', 0)}")
                print(f"  –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö: {stats.get('critical_functions', 0)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–µ—Å—Ç—Ä —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∂–∏–¥–∞–µ–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
            functions = registry.get('functions', {})
            expected_functions = ['anti_fraud_master_ai', 'threat_detection_agent', 'advanced_monitoring_manager']
            
            found_expected = 0
            for func_id in expected_functions:
                if func_id in functions:
                    found_expected += 1
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è: {func_id}")
                else:
                    print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è: {func_id}")
            
            if found_expected == len(expected_functions):
                print("‚úÖ –í—Å–µ –æ–∂–∏–¥–∞–µ–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞–π–¥–µ–Ω—ã")
                return True
            else:
                print(f"‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ —Ç–æ–ª—å–∫–æ {found_expected}/{len(expected_functions)} –æ–∂–∏–¥–∞–µ–º—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
            return False
    
    def create_sfm_wrapper(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±–µ—Ä—Ç–∫–∏ –¥–ª—è SFM —Å –∑–∞—â–∏—Ç–æ–π —Ä–µ–µ—Å—Ç—Ä–∞"""
        try:
            print("üîß –°–æ–∑–¥–∞–Ω–∏–µ –æ–±–µ—Ä—Ç–∫–∏ SFM —Å –∑–∞—â–∏—Ç–æ–π...")
            
            wrapper_code = '''#!/usr/bin/env python3
"""
SFM Wrapper with Registry Protection
–û–±–µ—Ä—Ç–∫–∞ SFM —Å –∑–∞—â–∏—Ç–æ–π —Ä–µ–µ—Å—Ç—Ä–∞ –æ—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏
"""

import os
import json
from datetime import datetime

class SFMRegistryProtector:
    """–ó–∞—â–∏—Ç–∞ —Ä–µ–µ—Å—Ç—Ä–∞ –æ—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏ SFM"""
    
    def __init__(self):
        self.registry_path = "data/sfm/function_registry.json"
        self.protection_file = "data/sfm/.registry_protected"
        self.backup_dir = "data/sfm/backups"
        
    def is_protected(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—â–∏—Ç—ã —Ä–µ–µ—Å—Ç—Ä–∞"""
        return os.path.exists(self.protection_file)
    
    def backup_registry(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ —Ä–µ–µ—Å—Ç—Ä–∞"""
        if not os.path.exists(self.backup_dir):
            os.makedirs(self.backup_dir)
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_path = os.path.join(self.backup_dir, f"registry_backup_{timestamp}.json")
        
        if os.path.exists(self.registry_path):
            import shutil
            shutil.copy2(self.registry_path, backup_path)
            return backup_path
        return None
    
    def protect_registry(self):
        """–ó–∞—â–∏—Ç–∞ —Ä–µ–µ—Å—Ç—Ä–∞ –æ—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏"""
        if self.is_protected():
            print("üõ°Ô∏è  –†–µ–µ—Å—Ç—Ä —É–∂–µ –∑–∞—â–∏—â–µ–Ω")
            return True
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –∑–∞—â–∏—Ç—ã
        with open(self.protection_file, 'w') as f:
            f.write(f"Registry protected at {datetime.now().isoformat()}\\n")
            f.write("DO NOT DELETE - Prevents SFM from overwriting merged registry\\n")
        
        print("‚úÖ –†–µ–µ—Å—Ç—Ä –∑–∞—â–∏—â–µ–Ω –æ—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏")
        return True
    
    def restore_registry_if_needed(self):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–µ—Å—Ç—Ä–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
        if not os.path.exists(self.registry_path):
            print("‚ö†Ô∏è  –†–µ–µ—Å—Ç—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ä–µ–µ—Å—Ç—Ä–∞
        with open(self.registry_path, 'r') as f:
            registry = json.load(f)
        
        functions_count = len(registry.get('functions', {}))
        
        if functions_count < 100:  # –ï—Å–ª–∏ –º–µ–Ω—å—à–µ 100 —Ñ—É–Ω–∫—Ü–∏–π, –≤–æ–∑–º–æ–∂–Ω–æ —Ä–µ–µ—Å—Ç—Ä –±—ã–ª –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω
            print(f"‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –º–∞–ª–æ —Ñ—É–Ω–∫—Ü–∏–π ({functions_count}), –≤–æ–∑–º–æ–∂–Ω–æ —Ä–µ–µ—Å—Ç—Ä –±—ã–ª –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω")
            
            # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
            if os.path.exists(self.backup_dir):
                backup_files = [f for f in os.listdir(self.backup_dir) if f.startswith('registry_backup_')]
                if backup_files:
                    latest_backup = max(backup_files)
                    backup_path = os.path.join(self.backup_dir, latest_backup)
                    
                    print(f"üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {latest_backup}")
                    import shutil
                    shutil.copy2(backup_path, self.registry_path)
                    return True
        
        return True

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∑–∞—â–∏—Ç–Ω–∏–∫–∞
registry_protector = SFMRegistryProtector()

# –ó–∞—â–∏—â–∞–µ–º —Ä–µ–µ—Å—Ç—Ä –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
registry_protector.protect_registry()
registry_protector.restore_registry_if_needed()
'''
            
            wrapper_path = "security/sfm_registry_protector.py"
            with open(wrapper_path, 'w') as f:
                f.write(wrapper_code)
            
            print(f"‚úÖ –û–±–µ—Ä—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {wrapper_path}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±–µ—Ä—Ç–∫–∏: {e}")
            return False
    
    def run_restore(self):
        """–ó–∞–ø—É—Å–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å –∑–∞—â–∏—Ç–æ–π"""
        try:
            print("üöÄ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –†–ï–ï–°–¢–†–ê –° –ó–ê–©–ò–¢–û–ô")
            print("=" * 50)
            
            # 1. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—â–∏—Ç—ã
            if not self.create_protection():
                return False
            
            # 2. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–µ—Å—Ç—Ä–∞
            if not self.restore_merged_registry():
                return False
            
            # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–µ—Å—Ç—Ä–∞
            if not self.verify_registry():
                return False
            
            # 4. –°–æ–∑–¥–∞–Ω–∏–µ –æ–±–µ—Ä—Ç–∫–∏ SFM
            if not self.create_sfm_wrapper():
                return False
            
            print("=" * 50)
            print("‚úÖ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –° –ó–ê–©–ò–¢–û–ô –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
            print("üõ°Ô∏è  –†–µ–µ—Å—Ç—Ä –∑–∞—â–∏—â–µ–Ω –æ—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏ SFM")
            return True
            
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            return False


if __name__ == "__main__":
    restorer = RegistryRestorer()
    success = restorer.run_restore()
    
    if success:
        print("\nüéâ –†–ï–ï–°–¢–† –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù –ò –ó–ê–©–ò–©–ï–ù!")
        exit(0)
    else:
        print("\nüí• –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ò–õ–û–°–¨ –° –û–®–ò–ë–ö–ê–ú–ò!")
        exit(1)