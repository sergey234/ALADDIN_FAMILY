#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –í–°–ï–• —Å–ø—è—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º "–±—ã–ª–æ-—Å—Ç–∞–ª–æ"
–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –ø–∞–∫–µ—Ç–∞–º–∏ –ø–æ 10 –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ –∏ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –ø–∞–∫–µ—Ç–∞
"""

import sys
import os
import time
import psutil
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from security.safe_function_manager import SafeFunctionManager

def get_system_stats():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤"""
    cpu = psutil.cpu_percent(interval=0.1)
    ram = psutil.virtual_memory()
    
    return {
        'cpu_percent': cpu,
        'ram_percent': ram.percent,
        'ram_used_gb': ram.used / (1024**3),
        'ram_total_gb': ram.total / (1024**3),
        'ram_available_gb': ram.available / (1024**3)
    }

def get_sfm_performance(sfm_instance):
    """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ SFM"""
    try:
        start_time = time.time()
        for i in range(10):
            _ = list(sfm_instance.functions.keys())
            critical_functions = []
            for func_id, func_obj in sfm_instance.functions.items():
                if getattr(func_obj, 'is_critical', False):
                    critical_functions.append(func_id)
        end_time = time.time()
        
        avg_response = (end_time - start_time) / 10
        operations_per_sec = 10 / (end_time - start_time)
        
        return {
            'avg_response_ms': avg_response * 1000,
            'operations_per_sec': operations_per_sec
        }
    except Exception as e:
        return None

def get_function_stats(sfm_instance):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π"""
    total_functions = len(sfm_instance.functions)
    active_count = 0
    sleeping_count = 0
    critical_count = 0
    critical_sleeping_count = 0

    for func_id, func_obj in sfm_instance.functions.items():
        status_str = str(getattr(func_obj, 'status', 'UNKNOWN')).upper()
        is_critical = getattr(func_obj, 'is_critical', False)

        if 'ACTIVE' in status_str or 'ENABLED' in status_str:
            active_count += 1
        elif 'SLEEPING' in status_str or 'DISABLED' in status_str:
            sleeping_count += 1

        if is_critical:
            critical_count += 1
            if 'SLEEPING' in status_str or 'DISABLED' in status_str:
                critical_sleeping_count += 1

    return {
        'total_functions': total_functions,
        'active_count': active_count,
        'sleeping_count': sleeping_count,
        'critical_count': critical_count,
        'critical_sleeping_count': critical_sleeping_count
    }

def print_comparison(before_stats, after_stats, before_sys, after_sys, before_perf, after_perf, batch_num, activated_count):
    """–í—ã–≤–æ–¥ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–æ –∏ –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏"""
    print("=" * 80)
    print(f"üì¶ –ü–ê–ö–ï–¢ {batch_num}: –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ {activated_count} —Ñ—É–Ω–∫—Ü–∏–π")
    print("=" * 80)
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
    print("üíª –°–ò–°–¢–ï–ú–ù–´–ï –†–ï–°–£–†–°–´:")
    print(f"   CPU: {before_sys['cpu_percent']:.1f}% ‚Üí {after_sys['cpu_percent']:.1f}% ({after_sys['cpu_percent']-before_sys['cpu_percent']:+.1f}%)")
    print(f"   RAM: {before_sys['ram_percent']:.1f}% ‚Üí {after_sys['ram_percent']:.1f}% ({after_sys['ram_percent']-before_sys['ram_percent']:+.1f}%)")
    print(f"   RAM: {before_sys['ram_used_gb']:.2f}GB ‚Üí {after_sys['ram_used_gb']:.2f}GB ({after_sys['ram_used_gb']-before_sys['ram_used_gb']:+.2f}GB)")
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ SFM
    if before_perf and after_perf:
        print(f"\n‚ö° –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨ SFM:")
        print(f"   –û—Ç–∫–ª–∏–∫: {before_perf['avg_response_ms']:.2f} –º—Å ‚Üí {after_perf['avg_response_ms']:.2f} –º—Å ({after_perf['avg_response_ms']-before_perf['avg_response_ms']:+.2f} –º—Å)")
        print(f"   –û–ø–µ—Ä–∞—Ü–∏–π/—Å–µ–∫: {before_perf['operations_per_sec']:.0f} ‚Üí {after_perf['operations_per_sec']:.0f} ({after_perf['operations_per_sec']-before_perf['operations_per_sec']:+.0f})")
        
        # –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if after_perf['avg_response_ms'] < 1.0:
            print("   ‚úÖ –û—Ç–ª–∏—á–Ω–æ!")
        elif after_perf['avg_response_ms'] < 5.0:
            print("   ‚úÖ –•–æ—Ä–æ—à–æ")
        else:
            print("   ‚ö†Ô∏è  –¢—Ä–µ–±—É–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
    else:
        print("\n‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ SFM")
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π
    print(f"\nüì¶ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –§–£–ù–ö–¶–ò–ô:")
    print(f"   –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π: {before_stats['total_functions']} ‚Üí {after_stats['total_functions']} (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)")
    print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö: {before_stats['active_count']} ‚Üí {after_stats['active_count']} (+{after_stats['active_count']-before_stats['active_count']})")
    print(f"   –°–ø—è—â–∏—Ö: {before_stats['sleeping_count']} ‚Üí {after_stats['sleeping_count']} ({after_stats['sleeping_count']-before_stats['sleeping_count']:+d})")
    print(f"   –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–ø—è—â–∏—Ö: {before_stats['critical_sleeping_count']} ‚Üí {after_stats['critical_sleeping_count']} ({after_stats['critical_sleeping_count']-before_stats['critical_sleeping_count']:+d})")
    
    # –ü—Ä–æ–≥—Ä–µ—Å—Å –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    total_sleeping_before = before_stats['sleeping_count']
    total_sleeping_after = after_stats['sleeping_count']
    activated_total = total_sleeping_before - total_sleeping_after
    progress_percent = (activated_total / total_sleeping_before * 100) if total_sleeping_before > 0 else 0
    
    print(f"\nüìà –ü–†–û–ì–†–ï–°–° –ê–ö–¢–ò–í–ê–¶–ò–ò:")
    print(f"   –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –≤ –ø–∞–∫–µ—Ç–µ: {activated_count}")
    print(f"   –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –≤—Å–µ–≥–æ: {activated_total}")
    print(f"   –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_percent:.1f}% ({activated_total}/{total_sleeping_before})")
    print(f"   –û—Å—Ç–∞–ª–æ—Å—å —Å–ø—è—â–∏—Ö: {total_sleeping_after}")
    
    print("=" * 80)

def get_sleeping_functions(sfm_instance):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Å–ø—è—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
    sleeping_functions = []
    
    for func_id, func_obj in sfm_instance.functions.items():
        status_str = str(getattr(func_obj, 'status', 'UNKNOWN')).upper()
        if 'SLEEPING' in status_str or 'DISABLED' in status_str:
            sleeping_functions.append(func_id)
    
    return sleeping_functions

def activate_functions_batch(sfm_instance, function_list, batch_size=10):
    """–ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π –ø–∞–∫–µ—Ç–∞–º–∏ —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º –¥–æ/–ø–æ—Å–ª–µ"""
    total_activated = 0
    
    for i in range(0, len(function_list), batch_size):
        batch = function_list[i:i+batch_size]
        batch_num = (i // batch_size) + 1
        
        print(f"\nüöÄ –ê–ö–¢–ò–í–ê–¶–ò–Ø –ü–ê–ö–ï–¢–ê {batch_num}")
        print(f"   –§—É–Ω–∫—Ü–∏–π –≤ –ø–∞–∫–µ—Ç–µ: {len(batch)}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –î–û –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        before_stats = get_function_stats(sfm_instance)
        before_sys = get_system_stats()
        before_perf = get_sfm_performance(sfm_instance)
        
        activated_in_batch = 0
        start_time = time.time()
        
        for func_id in batch:
            try:
                if func_id in sfm_instance.functions:
                    func_obj = sfm_instance.functions[func_id]
                    current_status = str(getattr(func_obj, 'status', 'UNKNOWN')).upper()
                    
                    if 'SLEEPING' in current_status or 'DISABLED' in current_status:
                        # –ü–æ–ø—ã—Ç–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
                        sfm_instance.wake_function(func_id)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                        new_status = str(getattr(func_obj, 'status', 'UNKNOWN')).upper()
                        if 'ACTIVE' in new_status or 'ENABLED' in new_status:
                            activated_in_batch += 1
                            print(f"   ‚úÖ {func_id}: {current_status} ‚Üí {new_status}")
                        else:
                            print(f"   ‚ùå {func_id}: –æ—Å—Ç–∞–ª—Å—è {new_status}")
                    else:
                        print(f"   ‚ÑπÔ∏è  {func_id}: —É–∂–µ {current_status}")
                else:
                    print(f"   ‚ùå {func_id}: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ SFM")
            except Exception as e:
                print(f"   ‚ùå {func_id}: –æ—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ - {e}")
        
        end_time = time.time()
        activation_time = end_time - start_time
        
        print(f"   ‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ: {activated_in_batch}")
        print(f"   ‚è±Ô∏è  –í—Ä–µ–º—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {activation_time:.3f} —Å–µ–∫")
        
        total_activated += activated_in_batch
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ü–û–°–õ–ï –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        after_stats = get_function_stats(sfm_instance)
        after_sys = get_system_stats()
        after_perf = get_sfm_performance(sfm_instance)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–æ/–ø–æ—Å–ª–µ
        print_comparison(
            before_stats, after_stats,
            before_sys, after_sys,
            before_perf, after_perf,
            batch_num, total_activated
        )
        
        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏
        if i + batch_size < len(function_list):
            print(f"\n‚è∏Ô∏è  –ü–∞—É–∑–∞ 3 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –ø–∞–∫–µ—Ç–æ–º...")
            time.sleep(3)
    
    return total_activated

def main():
    print("üöÄ –ó–ê–ü–£–°–ö –ê–ö–¢–ò–í–ê–¶–ò–ò –í–°–ï–• –°–ü–Ø–©–ò–• –§–£–ù–ö–¶–ò–ô –° –ú–û–ù–ò–¢–û–†–ò–ù–ì–û–ú '–ë–´–õ–û-–°–¢–ê–õ–û'")
    print()
    
    config = {
        'thread_pool_enabled': True,
        'max_thread_pool_workers': 5,
        'async_io_enabled': True,
        'redis_cache_enabled': True,
        'enable_auto_management': False,
        'enable_sleep_mode': False
    }
    
    sfm = SafeFunctionManager('FullActivationMonitorSFM', config)
    print(f"‚úÖ SFM –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {len(sfm.functions)} —Ñ—É–Ω–∫—Ü–∏–π")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–ø—è—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
    sleeping_functions = get_sleeping_functions(sfm)
    print(f"üì¶ –ù–∞–π–¥–µ–Ω–æ —Å–ø—è—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π: {len(sleeping_functions)}")
    
    if not sleeping_functions:
        print("‚úÖ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω—ã!")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    initial_stats = get_function_stats(sfm)
    initial_sys = get_system_stats()
    initial_perf = get_sfm_performance(sfm)
    
    print("\n" + "=" * 80)
    print("üìä –ù–ê–ß–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    print("=" * 80)
    print(f"üíª CPU: {initial_sys['cpu_percent']:.1f}%")
    print(f"üíæ RAM: {initial_sys['ram_percent']:.1f}% ({initial_sys['ram_used_gb']:.2f}GB / {initial_sys['ram_total_gb']:.2f}GB)")
    if initial_perf:
        print(f"‚ö° SFM –æ—Ç–∫–ª–∏–∫: {initial_perf['avg_response_ms']:.2f} –º—Å")
        print(f"üöÄ –û–ø–µ—Ä–∞—Ü–∏–π/—Å–µ–∫: {initial_perf['operations_per_sec']:.0f}")
    print(f"üì¶ –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π: {initial_stats['total_functions']}")
    print(f"üí§ –°–ø—è—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π: {initial_stats['sleeping_count']}")
    print(f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–ø—è—â–∏—Ö: {initial_stats['critical_sleeping_count']}")
    print("=" * 80)
    
    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –ø–∞–∫–µ—Ç–∞–º–∏ –ø–æ 10
    print(f"\nüéØ –ê–ö–¢–ò–í–ê–¶–ò–Ø {len(sleeping_functions)} –°–ü–Ø–©–ò–• –§–£–ù–ö–¶–ò–ô –ü–û 10 –®–¢–£–ö...")
    
    try:
        total_activated = activate_functions_batch(sfm, sleeping_functions, 10)
        
        print(f"\nüéâ –ó–ê–í–ï–†–®–ï–ù–û!")
        print(f"üìä –ò—Ç–æ–≥–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ: {total_activated} –∏–∑ {len(sleeping_functions)} —Å–ø—è—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π")
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        final_stats = get_function_stats(sfm)
        final_sys = get_system_stats()
        final_perf = get_sfm_performance(sfm)
        
        print(f"\nüìà –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–ø—è—â–∏—Ö: {final_stats['critical_sleeping_count']}")
        print(f"   üí§ –í—Å–µ–≥–æ —Å–ø—è—â–∏—Ö: {final_stats['sleeping_count']}")
        print(f"   ‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –≤—Å–µ–≥–æ: {total_activated}")
        
        if final_stats['sleeping_count'] == 0:
            print("‚úÖ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã!")
        else:
            print(f"‚ö†Ô∏è  –û—Å—Ç–∞–ª–æ—Å—å {final_stats['sleeping_count']} —Ñ—É–Ω–∫—Ü–∏–π –≤ —Å–ø—è—â–µ–º —Ä–µ–∂–∏–º–µ")
            
    except KeyboardInterrupt:
        print(f"\n‚èπÔ∏è  –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        final_stats = get_function_stats(sfm)
        print(f"üìä –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –¥–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è: {len(sleeping_functions) - final_stats['sleeping_count']} —Ñ—É–Ω–∫—Ü–∏–π")

if __name__ == "__main__":
    main()