#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫ (E501) –≤ LoadBalancer
–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç 155 –æ—à–∏–±–æ–∫ E501 –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
"""

import re
import os

def fix_long_lines(file_path: str):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫"""
    print(f"üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ {file_path}")
    
    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    lines = content.split('\n')
    fixed_lines = []
    fixes_applied = 0
    
    for i, line in enumerate(lines, 1):
        original_line = line
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å—Ç—Ä–æ–∫–∏ (–±–æ–ª—å—à–µ 79 —Å–∏–º–≤–æ–ª–æ–≤)
        if len(line) > 79:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ docstrings
            if line.strip().startswith('#') or '"""' in line or "'''" in line:
                fixed_lines.append(line)
                continue
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å URL –∏–ª–∏ –¥–ª–∏–Ω–Ω—ã–º–∏ –ø—É—Ç—è–º–∏
            if 'http' in line or 'file://' in line or len(line.split()) < 3:
                fixed_lines.append(line)
                continue
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
            if '=' in line and not line.strip().startswith('#'):
                # –†–∞–∑–±–∏–≤–∞–µ–º –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏—è
                if ' = ' in line:
                    parts = line.split(' = ', 1)
                    if len(parts) == 2:
                        var_name = parts[0].strip()
                        value = parts[1].strip()
                        
                        # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω–æ–µ, —Ä–∞–∑–±–∏–≤–∞–µ–º –µ–≥–æ
                        if len(value) > 50:
                            # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –º–µ—Å—Ç–æ –¥–ª—è —Ä–∞–∑–±–∏–≤–∫–∏
                            if '(' in value and ')' in value:
                                # –§—É–Ω–∫—Ü–∏–∏ - —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ –∑–∞–ø—è—Ç—ã–º
                                if ',' in value:
                                    # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø—è—Ç—É—é –ø–µ—Ä–µ–¥ 70 —Å–∏–º–≤–æ–ª–æ–º
                                    last_comma = value.rfind(',', 0, 70)
                                    if last_comma > 0:
                                        indent = ' ' * (len(var_name) + 3)
                                        new_line = f"{var_name} = {value[:last_comma + 1]}\n{indent}{value[last_comma + 1:].strip()}"
                                        fixed_lines.append(new_line)
                                        fixes_applied += 1
                                        continue
                            
                            # –ü—Ä–æ—Å—Ç–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –ø–æ —Å–ª–æ–≤–∞–º
                            words = value.split()
                            if len(words) > 1:
                                mid_point = len(words) // 2
                                indent = ' ' * (len(var_name) + 3)
                                new_line = f"{var_name} = {' '.join(words[:mid_point])}\n{indent}{' '.join(words[mid_point:])}"
                                fixed_lines.append(new_line)
                                fixes_applied += 1
                                continue
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º–∏
            elif any(op in line for op in [' and ', ' or ', ' + ', ' - ', ' * ', ' / ']):
                # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä –ø–µ—Ä–µ–¥ 70 —Å–∏–º–≤–æ–ª–æ–º
                for op in [' and ', ' or ', ' + ', ' - ', ' * ', ' / ']:
                    if op in line:
                        last_op = line.rfind(op, 0, 70)
                        if last_op > 0:
                            indent = ' ' * 4  # –ë–∞–∑–æ–≤—ã–π –æ—Ç—Å—Ç—É–ø
                            new_line = f"{line[:last_op]}\n{indent}{line[last_op:].strip()}"
                            fixed_lines.append(new_line)
                            fixes_applied += 1
                            break
                else:
                    fixed_lines.append(line)
            else:
                # –ü—Ä–æ—Å—Ç–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –ø–æ —Å–ª–æ–≤–∞–º –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
                words = line.split()
                if len(words) > 1:
                    # –ù–∞—Ö–æ–¥–∏–º —Å–µ—Ä–µ–¥–∏–Ω—É
                    mid_point = len(words) // 2
                    indent = ' ' * 4
                    new_line = f"{' '.join(words[:mid_point])}\n{indent}{' '.join(words[mid_point:])}"
                    fixed_lines.append(new_line)
                    fixes_applied += 1
                else:
                    fixed_lines.append(line)
        else:
            fixed_lines.append(line)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        if i % 100 == 0:
            print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: {i}, –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {fixes_applied}")
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with open(file_path, 'w', encoding='utf-8') as f:
        f.write('\n'.join(fixed_lines))
    
    print(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print(f"   –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å—Ç—Ä–æ–∫: {fixes_applied}")
    print(f"   E501 (–¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏): ~{fixes_applied}")

if __name__ == "__main__":
    fix_long_lines('/Users/sergejhlystov/ALADDIN_NEW/security/microservices/load_balancer.py')