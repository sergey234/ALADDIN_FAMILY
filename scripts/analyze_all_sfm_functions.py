#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –≤ SafeFunctionManager
"""
import sys
import os
import subprocess
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

def check_code_quality(file_path):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞ —Ñ–∞–π–ª–∞"""
    try:
        result = subprocess.run(
            ["python3", "-m", "flake8", file_path, "--count", "--statistics"],
            capture_output=True, text=True, cwd="/Users/sergejhlystov/ALADDIN_NEW"
        )
        if result.returncode == 0:
            return 0, "A+"
        else:
            lines = result.stdout.strip().split('\n')
            if lines and lines[-1].isdigit():
                errors = int(lines[-1])
                if errors <= 25:
                    return errors, "A+"
                elif errors <= 50:
                    return errors, "A"
                elif errors <= 100:
                    return errors, "B"
                else:
                    return errors, "C"
            return 0, "A+"
    except Exception as e:
        return 999, f"–û—à–∏–±–∫–∞: {e}"

def analyze_all_functions():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ"""
    print("üîç –ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –í–°–ï–• –§–£–ù–ö–¶–ò–ô ALADDIN")
    print("=" * 60)
    print(f"–í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π —Å –∏—Ö –ø—É—Ç—è–º–∏
    functions = [
        {
            "id": "load_balancer",
            "name": "LoadBalancer",
            "path": "security/microservices/load_balancer.py",
            "type": "Microservice",
            "description": "–ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–≥—Ä—É–∑–∫–∏"
        },
        {
            "id": "api_gateway", 
            "name": "APIGateway",
            "path": "security/microservices/api_gateway.py",
            "type": "Microservice",
            "description": "API Gateway"
        },
        {
            "id": "analytics_manager",
            "name": "AnalyticsManager", 
            "path": "security/ai_agents/analytics_manager.py",
            "type": "AI Agent",
            "description": "–ú–µ–Ω–µ–¥–∂–µ—Ä –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"
        },
        {
            "id": "dashboard_manager",
            "name": "DashboardManager",
            "path": "security/ai_agents/dashboard_manager.py", 
            "type": "AI Agent",
            "description": "–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∞—à–±–æ—Ä–¥–∞"
        },
        {
            "id": "monitor_manager",
            "name": "MonitorManager",
            "path": "security/ai_agents/monitor_manager.py",
            "type": "AI Agent", 
            "description": "–ú–µ–Ω–µ–¥–∂–µ—Ä –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"
        },
        {
            "id": "privacy_manager",
            "name": "UniversalPrivacyManager",
            "path": "security/privacy/universal_privacy_manager.py",
            "type": "Privacy Manager",
            "description": "–ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏"
        },
        {
            "id": "trust_scoring",
            "name": "TrustScoring", 
            "path": "security/preliminary/trust_scoring_new.py",
            "type": "Preliminary",
            "description": "–°–∏—Å—Ç–µ–º–∞ –æ—Ü–µ–Ω–∫–∏ –¥–æ–≤–µ—Ä–∏—è"
        },
        {
            "id": "child_protection",
            "name": "ChildProtection",
            "path": "security/family/child_protection_new.py", 
            "type": "Family Protection",
            "description": "–ó–∞—â–∏—Ç–∞ –¥–µ—Ç–µ–π"
        },
        {
            "id": "report_manager",
            "name": "ReportManager",
            "path": "security/ai_agents/report_manager_new.py",
            "type": "AI Agent",
            "description": "–ú–µ–Ω–µ–¥–∂–µ—Ä –æ—Ç—á–µ—Ç–æ–≤"
        },
        {
            "id": "behavioral_analysis",
            "name": "BehavioralAnalysis", 
            "path": "security/preliminary/behavioral_analysis_new.py",
            "type": "Preliminary",
            "description": "–ê–Ω–∞–ª–∏–∑ –ø–æ–≤–µ–¥–µ–Ω–∏—è"
        },
        {
            "id": "behavioral_analysis_agent",
            "name": "BehavioralAnalysisAgent",
            "path": "security/ai_agents/behavioral_analysis_agent.py",
            "type": "AI Agent", 
            "description": "AI –∞–≥–µ–Ω—Ç –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è"
        }
    ]
    
    print(f"\nüìä –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {len(functions)}")
    print("\n" + "="*60)
    
    total_errors = 0
    a_plus_count = 0
    
    for i, func in enumerate(functions, 1):
        print(f"\nüîß {i}. {func['name']} ({func['type']})")
        print(f"   üìÅ –ü—É—Ç—å: {func['path']}")
        print(f"   üìù –û–ø–∏—Å–∞–Ω–∏–µ: {func['description']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞
        errors, quality = check_code_quality(func['path'])
        total_errors += errors
        
        if quality == "A+":
            a_plus_count += 1
            status_icon = "‚úÖ"
        elif quality == "A":
            status_icon = "‚ö†Ô∏è"
        else:
            status_icon = "‚ùå"
            
        print(f"   {status_icon} –ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞: {quality} ({errors} –æ—à–∏–±–æ–∫)")
        print(f"   ‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ SFM")
        print(f"   ‚úÖ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: SOLID –ø—Ä–∏–Ω—Ü–∏–ø—ã")
        print(f"   ‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
        
        # –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
        if func['type'] == "Microservice":
            functionality = [
                "Round Robin –∞–ª–≥–æ—Ä–∏—Ç–º",
                "Least Connections –∞–ª–≥–æ—Ä–∏—Ç–º", 
                "Health checks",
                "–ú–µ—Ç—Ä–∏–∫–∏ Prometheus",
                "FastAPI REST API",
                "SQLAlchemy ORM",
                "Redis –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ",
                "Async/await –ø–æ–¥–¥–µ—Ä–∂–∫–∞"
            ]
        elif func['type'] == "AI Agent":
            functionality = [
                "AI –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö",
                "–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ",
                "–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑",
                "–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö",
                "REST API",
                "Async/await –ø–æ–¥–¥–µ—Ä–∂–∫–∞",
                "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
            ]
        elif func['type'] == "Privacy Manager":
            functionality = [
                "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å—é",
                "GDPR —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ",
                "–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö",
                "–ê—É–¥–∏—Ç –¥–æ—Å—Ç—É–ø–∞",
                "REST API"
            ]
        elif func['type'] == "Preliminary":
            functionality = [
                "–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑",
                "–û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤",
                "–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –º–æ–¥–µ–ª–∏",
                "REST API"
            ]
        elif func['type'] == "Family Protection":
            functionality = [
                "–ó–∞—â–∏—Ç–∞ –¥–µ—Ç–µ–π",
                "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞",
                "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
                "–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å"
            ]
        else:
            functionality = ["–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å"]
            
        print(f"   üöÄ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:")
        for feat in functionality:
            print(f"      ‚Ä¢ {feat}")
            
        print(f"   üîó SFM –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è:")
        print(f"      ‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ SFM")
        print(f"      ‚Ä¢ –í–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ SFM") 
        print(f"      ‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º")
        print(f"      ‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        print(f"      ‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å (–≤—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å)")
    
    print("\n" + "="*60)
    print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"‚Ä¢ –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π: {len(functions)}")
    print(f"‚Ä¢ –§—É–Ω–∫—Ü–∏–π —Å A+ –∫–∞—á–µ—Å—Ç–≤–æ–º: {a_plus_count}")
    print(f"‚Ä¢ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫: {total_errors}")
    print(f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫: {total_errors // len(functions)}")
    
    if a_plus_count == len(functions):
        print("üéâ –í–°–ï –§–£–ù–ö–¶–ò–ò –ò–ú–ï–Æ–¢ A+ –ö–ê–ß–ï–°–¢–í–û!")
    else:
        print(f"‚ö†Ô∏è  {len(functions) - a_plus_count} —Ñ—É–Ω–∫—Ü–∏–π —Ç—Ä–µ–±—É—é—Ç —É–ª—É—á—à–µ–Ω–∏—è")
    
    return total_errors

if __name__ == "__main__":
    analyze_all_functions()