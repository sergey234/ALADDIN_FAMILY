#!/usr/bin/env python3
"""
üîç –ë–´–°–¢–†–´–ô –ü–û–ò–°–ö–û–í–ò–ö –§–£–ù–ö–¶–ò–ô –°–ò–°–¢–ï–ú–´ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò ALADDIN
=======================================================

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –±—ã—Å—Ç—Ä–æ –Ω–∞—Ö–æ–¥–∏—Ç –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ ALADDIN.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞ —Ñ—É–Ω–∫—Ü–∏–π.

–ê–≤—Ç–æ—Ä: AI Assistant
–î–∞—Ç–∞: 2024
–í–µ—Ä—Å–∏—è: 1.0
"""

import os
import re
from pathlib import Path
from collections import defaultdict
from typing import List, Dict, Tuple

class QuickFunctionFinder:
    """–ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫–æ–≤–∏–∫ —Ñ—É–Ω–∫—Ü–∏–π"""
    
    def __init__(self, base_path: str = "."):
        self.base_path = Path(base_path)
        self.exclude_dirs = {
            'backups', 'tests', 'logs', 'formatting_work', 
            '__pycache__', '.git', '.pytest_cache', 'node_modules',
            'venv', 'env', '.env', 'temp', 'tmp'
        }
        self.functions = []
        self.sfm_functions = []
        self.classes = []
        self.imports = []

    def should_exclude_path(self, path: Path) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–∫–ª—é—á–∏—Ç—å –ø—É—Ç—å"""
        for part in path.parts:
            if part.lower() in self.exclude_dirs:
                return True
        return False

    def find_functions_in_file(self, file_path: Path) -> List[Dict]:
        """–ù–∞—Ö–æ–¥–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Ñ–∞–π–ª–µ"""
        functions = []
        
        try:
            with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
                content = f.read()
                lines = content.split('\n')
                
                for i, line in enumerate(lines):
                    line = line.strip()
                    
                    # –û–±—ã—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
                    if line.startswith('def '):
                        func_match = re.match(r'def\s+(\w+)\s*\(', line)
                        if func_match:
                            func_name = func_match.group(1)
                            functions.append({
                                'name': func_name,
                                'line': i + 1,
                                'type': 'function',
                                'file': str(file_path),
                                'content': line
                            })
                    
                    # –ú–µ—Ç–æ–¥—ã –∫–ª–∞—Å—Å–æ–≤
                    elif re.match(r'^\s+def\s+\w+', line):
                        func_match = re.match(r'def\s+(\w+)\s*\(', line)
                        if func_match:
                            func_name = func_match.group(1)
                            functions.append({
                                'name': func_name,
                                'line': i + 1,
                                'type': 'method',
                                'file': str(file_path),
                                'content': line
                            })
                    
                    # –ö–ª–∞—Å—Å—ã
                    elif line.startswith('class '):
                        class_match = re.match(r'class\s+(\w+)', line)
                        if class_match:
                            class_name = class_match.group(1)
                            self.classes.append({
                                'name': class_name,
                                'line': i + 1,
                                'file': str(file_path),
                                'content': line
                            })
                    
                    # –ò–º–ø–æ—Ä—Ç—ã
                    elif line.startswith(('import ', 'from ')):
                        self.imports.append({
                            'line': i + 1,
                            'file': str(file_path),
                            'content': line
                        })
                    
                    # SFM —Ñ—É–Ω–∫—Ü–∏–∏ - —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                    if 'register_function' in line and 'function_id' in line:
                        # –ò—â–µ–º function_id –≤ —Å—Ç—Ä–æ–∫–µ
                        func_id_match = re.search(r'function_id\s*[:=]\s*["\']([^"\']+)["\']', line)
                        if func_id_match:
                            func_id = func_id_match.group(1)
                            if func_id not in [sfm['function_id'] for sfm in self.sfm_functions]:
                                self.sfm_functions.append({
                                    'function_id': func_id,
                                    'file': str(file_path),
                                    'line': i + 1,
                                    'content': line
                                })
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {file_path}: {e}")
        
        return functions

    def scan_all_files(self) -> None:
        """–°–∫–∞–Ω–∏—Ä—É–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã"""
        print("üîç –°–∫–∞–Ω–∏—Ä—É—é –≤—Å–µ —Ñ–∞–π–ª—ã...")
        
        for root, dirs, files in os.walk(self.base_path):
            # –ò—Å–∫–ª—é—á–∞–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            dirs[:] = [d for d in dirs if d.lower() not in self.exclude_dirs]
            
            for file in files:
                if file.endswith('.py'):
                    file_path = Path(root) / file
                    if not self.should_exclude_path(file_path):
                        functions = self.find_functions_in_file(file_path)
                        self.functions.extend(functions)

    def get_statistics(self) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        stats = {
            'total_functions': len(self.functions),
            'total_classes': len(self.classes),
            'total_imports': len(self.imports),
            'total_sfm_functions': len(self.sfm_functions),
            'functions_by_type': defaultdict(int),
            'functions_by_file': defaultdict(int)
        }
        
        for func in self.functions:
            stats['functions_by_type'][func['type']] += 1
            stats['functions_by_file'][func['file']] += 1
        
        return stats

    def print_summary(self) -> None:
        """–í—ã–≤–æ–¥–∏—Ç –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É"""
        stats = self.get_statistics()
        
        print("\nüìä –ö–†–ê–¢–ö–ê–Ø –°–í–û–î–ö–ê:")
        print(f"   ‚öôÔ∏è  –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π: {stats['total_functions']}")
        print(f"   üèóÔ∏è  –í—Å–µ–≥–æ –∫–ª–∞—Å—Å–æ–≤: {stats['total_classes']}")
        print(f"   üì¶ –í—Å–µ–≥–æ –∏–º–ø–æ—Ä—Ç–æ–≤: {stats['total_imports']}")
        print(f"   üîß SFM —Ñ—É–Ω–∫—Ü–∏–π: {stats['total_sfm_functions']}")
        
        print(f"\nüìÅ –§—É–Ω–∫—Ü–∏–∏ –ø–æ —Ç–∏–ø–∞–º:")
        for func_type, count in stats['functions_by_type'].items():
            print(f"   {func_type}: {count}")
        
        print(f"\nüìÑ –¢–æ–ø —Ñ–∞–π–ª–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ñ—É–Ω–∫—Ü–∏–π:")
        top_files = sorted(stats['functions_by_file'].items(), key=lambda x: x[1], reverse=True)[:10]
        for file_path, count in top_files:
            print(f"   {file_path}: {count} —Ñ—É–Ω–∫—Ü–∏–π")

    def find_functions_by_name(self, name_pattern: str) -> List[Dict]:
        """–ù–∞—Ö–æ–¥–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ –∏–º–µ–Ω–∏"""
        pattern = re.compile(name_pattern, re.IGNORECASE)
        found = []
        
        for func in self.functions:
            if pattern.search(func['name']):
                found.append(func)
        
        return found

    def find_functions_by_file(self, file_pattern: str) -> List[Dict]:
        """–ù–∞—Ö–æ–¥–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ —Ñ–∞–π–ª—É"""
        pattern = re.compile(file_pattern, re.IGNORECASE)
        found = []
        
        for func in self.functions:
            if pattern.search(func['file']):
                found.append(func)
        
        return found

    def export_to_file(self, filename: str = "functions_export.txt") -> None:
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª"""
        with open(filename, 'w', encoding='utf-8') as f:
            f.write("üîç –≠–ö–°–ü–û–†–¢ –§–£–ù–ö–¶–ò–ô –°–ò–°–¢–ï–ú–´ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò ALADDIN\n")
            f.write("=" * 60 + "\n\n")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            stats = self.get_statistics()
            f.write("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n")
            f.write(f"   –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π: {stats['total_functions']}\n")
            f.write(f"   –í—Å–µ–≥–æ –∫–ª–∞—Å—Å–æ–≤: {stats['total_classes']}\n")
            f.write(f"   –í—Å–µ–≥–æ –∏–º–ø–æ—Ä—Ç–æ–≤: {stats['total_imports']}\n")
            f.write(f"   SFM —Ñ—É–Ω–∫—Ü–∏–π: {stats['total_sfm_functions']}\n\n")
            
            # –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏
            f.write("‚öôÔ∏è  –í–°–ï –§–£–ù–ö–¶–ò–ò:\n")
            for func in self.functions:
                f.write(f"   {func['name']} ({func['type']}) - {func['file']}:{func['line']}\n")
            
            f.write("\nüèóÔ∏è  –í–°–ï –ö–õ–ê–°–°–´:\n")
            for cls in self.classes:
                f.write(f"   {cls['name']} - {cls['file']}:{cls['line']}\n")
            
            f.write("\nüîß SFM –§–£–ù–ö–¶–ò–ò:\n")
            for sfm_func in self.sfm_functions:
                f.write(f"   {sfm_func['file']}:{sfm_func['line']} - {sfm_func['content']}\n")
        
        print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤: {filename}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç –ë–´–°–¢–†–´–ô –ü–û–ò–°–ö–û–í–ò–ö –§–£–ù–ö–¶–ò–ô ALADDIN")
    print("=" * 40)
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–∏—Å–∫–æ–≤–∏–∫
    finder = QuickFunctionFinder()
    
    # –°–∫–∞–Ω–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
    finder.scan_all_files()
    
    # –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É
    finder.print_summary()
    
    # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    finder.export_to_file()
    
    print("\nüéâ –ü–û–ò–°–ö –ó–ê–í–ï–†–®–ï–ù!")

if __name__ == "__main__":
    main()