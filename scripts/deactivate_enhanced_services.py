#!/usr/bin/env python3
"""
üõ°Ô∏è ALADDIN Enhanced Services Deactivator
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ Enhanced —Å–µ—Ä–≤–∏—Å–æ–≤ –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º
"""

import os
import sys
import json
import subprocess
import time
import signal
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent.parent))

def load_web_services_registry():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–µ–µ—Å—Ç—Ä –≤–µ–±-—Å–µ—Ä–≤–∏—Å–æ–≤"""
    registry_path = Path(__file__).parent.parent / "data" / "web_services_registry.json"
    with open(registry_path, 'r', encoding='utf-8') as f:
        return json.load(f)

def update_service_status(service_id, status):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞ –≤ —Ä–µ–µ—Å—Ç—Ä–µ"""
    registry_path = Path(__file__).parent.parent / "data" / "web_services_registry.json"
    
    with open(registry_path, 'r', encoding='utf-8') as f:
        registry = json.load(f)
    
    if service_id in registry['web_services']:
        registry['web_services'][service_id]['status'] = status
        registry['web_services'][service_id]['last_updated'] = time.strftime('%Y-%m-%dT%H:%M:%S.000000')
        
        with open(registry_path, 'w', encoding='utf-8') as f:
            json.dump(registry, f, indent=2, ensure_ascii=False)
        
        return True
    return False

def find_enhanced_processes():
    """–ù–∞—Ö–æ–¥–∏—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã Enhanced —Å–µ—Ä–≤–∏—Å–æ–≤"""
    try:
        result = subprocess.run(
            ["ps", "aux"], 
            capture_output=True, 
            text=True
        )
        
        processes = []
        for line in result.stdout.split('\n'):
            if 'enhanced_api_docs.py' in line or 'enhanced_architecture_visualizer.py' in line:
                if 'grep' not in line:  # –ò—Å–∫–ª—é—á–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å grep
                    parts = line.split()
                    if len(parts) > 1:
                        pid = int(parts[1])
                        service_name = "Enhanced API Docs" if 'enhanced_api_docs.py' in line else "Enhanced Architecture Visualizer"
                        processes.append((pid, service_name))
        
        return processes
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}")
        return []

def stop_enhanced_service(pid, service_name):
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç Enhanced —Å–µ—Ä–≤–∏—Å"""
    try:
        print(f"üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ {service_name} (PID: {pid})...")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º SIGTERM
        os.kill(pid, signal.SIGTERM)
        time.sleep(2)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å
        try:
            os.kill(pid, 0)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
            print(f"‚ö†Ô∏è  –ü—Ä–æ—Ü–µ—Å—Å {service_name} –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º SIGKILL...")
            os.kill(pid, signal.SIGKILL)
            time.sleep(1)
        except ProcessLookupError:
            print(f"‚úÖ {service_name} —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return True
        
        return True
        
    except ProcessLookupError:
        print(f"‚úÖ {service_name} —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ {service_name}: {e}")
        return False

def deactivate_enhanced_services():
    """–î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –≤—Å–µ Enhanced —Å–µ—Ä–≤–∏—Å—ã"""
    print("üõå –ü–µ—Ä–µ—Ö–æ–¥ Enhanced —Å–µ—Ä–≤–∏—Å–æ–≤ –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º...")
    
    # –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
    processes = find_enhanced_processes()
    
    if not processes:
        print("‚ÑπÔ∏è  Enhanced —Å–µ—Ä–≤–∏—Å—ã –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã")
        return True
    
    print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(processes)} –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö Enhanced —Å–µ—Ä–≤–∏—Å–æ–≤:")
    for pid, service_name in processes:
        print(f"  - {service_name} (PID: {pid})")
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Å–µ—Ä–≤–∏—Å
    success_count = 0
    for pid, service_name in processes:
        if stop_enhanced_service(pid, service_name):
            success_count += 1
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ —Ä–µ–µ—Å—Ç—Ä–µ
    update_service_status("enhanced_api_docs", "dormant")
    update_service_status("enhanced_architecture_visualizer", "dormant")
    
    return success_count == len(processes)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üõ°Ô∏è ALADDIN Enhanced Services Deactivator")
    print("=" * 50)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–µ—Å—Ç—Ä —Å–µ—Ä–≤–∏—Å–æ–≤
    registry = load_web_services_registry()
    
    print("\nüìã –°—Ç–∞—Ç—É—Å Enhanced —Å–µ—Ä–≤–∏—Å–æ–≤:")
    for service_id, service in registry['web_services'].items():
        if 'enhanced' in service_id:
            status_emoji = "üü¢" if service['status'] == 'running' else "üõå"
            print(f"  {status_emoji} {service['name']} - {service['status']}")
    
    print("\nüéØ –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è Enhanced —Å–µ—Ä–≤–∏—Å–æ–≤...")
    
    # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
    success = deactivate_enhanced_services()
    
    print("\n" + "=" * 50)
    if success:
        print("üéâ –í—Å–µ Enhanced —Å–µ—Ä–≤–∏—Å—ã –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º!")
        print("\nüí° –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: python3 scripts/activate_enhanced_services.py")
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–µ—Ä–≤–∏—Å—ã –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –≤—Ä—É—á–Ω—É—é.")

if __name__ == "__main__":
    main()