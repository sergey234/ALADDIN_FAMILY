#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –í–°–ï–• —Ñ—É–Ω–∫—Ü–∏–π –≤ ALADDIN Security System
"""
import sys
import os
import subprocess
from datetime import datetime
import re

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

def check_code_quality(file_path):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞ —Ñ–∞–π–ª–∞"""
    try:
        if not os.path.exists(file_path):
            return 999, "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
            
        result = subprocess.run(
            ["python3", "-m", "flake8", file_path, "--count", "--statistics"],
            capture_output=True, text=True, cwd="/Users/sergejhlystov/ALADDIN_NEW"
        )
        if result.returncode == 0:
            return 0, "A+"
        else:
            lines = result.stdout.strip().split('\n')
            if lines and lines[-1].isdigit():
                errors = int(lines[-1])
                if errors <= 25:
                    return errors, "A+"
                elif errors <= 50:
                    return errors, "A"
                elif errors <= 100:
                    return errors, "B"
                elif errors <= 200:
                    return errors, "C"
                else:
                    return errors, "D"
            return 0, "A+"
    except Exception as e:
        return 999, f"–û—à–∏–±–∫–∞: {e}"

def get_function_type(file_path):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ –ø—É—Ç–∏"""
    if "microservices" in file_path:
        return "Microservice"
    elif "ai_agents" in file_path:
        return "AI Agent"
    elif "bots" in file_path:
        return "Security Bot"
    elif "privacy" in file_path:
        return "Privacy Manager"
    elif "family" in file_path:
        return "Family Protection"
    elif "preliminary" in file_path:
        return "Preliminary"
    elif "antivirus" in file_path:
        return "Antivirus"
    elif "vpn" in file_path:
        return "VPN"
    elif "compliance" in file_path:
        return "Compliance"
    elif "active" in file_path:
        return "Active Security"
    elif "reactive" in file_path:
        return "Reactive Security"
    elif "mobile" in file_path:
        return "Mobile Security"
    elif "orchestration" in file_path:
        return "Orchestration"
    elif "scaling" in file_path:
        return "Scaling"
    else:
        return "Core Security"

def get_function_status(file_path):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Ñ—É–Ω–∫—Ü–∏–∏"""
    if "_new" in file_path:
        return "üÜï –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è"
    elif "_old" in file_path or "_backup" in file_path:
        return "üí§ –ê—Ä—Ö–∏–≤–Ω–∞—è"
    elif "integration" in file_path or "test" in file_path:
        return "üß™ –¢–µ—Å—Ç–æ–≤–∞—è"
    else:
        return "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞—è"

def analyze_all_functions():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ"""
    print("üîç –ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –í–°–ï–• –§–£–ù–ö–¶–ò–ô ALADDIN SECURITY SYSTEM")
    print("=" * 80)
    print(f"–í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
    result = subprocess.run(
        ["find", "security", "-name", "*.py", "-type", "f"],
        capture_output=True, text=True, cwd="/Users/sergejhlystov/ALADDIN_NEW"
    )
    
    all_files = result.stdout.strip().split('\n')
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ñ–∞–π–ª—ã
    functions = []
    for file_path in all_files:
        if (file_path and 
            not file_path.endswith('__init__.py') and
            not file_path.endswith('__pycache__') and
            not '/test_' in file_path and
            not '/integration_test' in file_path):
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏
            filename = os.path.basename(file_path)
            function_name = filename.replace('.py', '').replace('_', ' ').title()
            
            functions.append({
                "path": file_path,
                "name": function_name,
                "filename": filename
            })
    
    print(f"\nüìä –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {len(functions)}")
    print("\n" + "="*80)
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º
    by_type = {}
    for func in functions:
        func_type = get_function_type(func["path"])
        if func_type not in by_type:
            by_type[func_type] = []
        by_type[func_type].append(func)
    
    total_errors = 0
    a_plus_count = 0
    a_count = 0
    b_count = 0
    c_count = 0
    d_count = 0
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º
    for func_type, funcs in by_type.items():
        print(f"\nüîß {func_type.upper()} ({len(funcs)} —Ñ—É–Ω–∫—Ü–∏–π)")
        print("-" * 60)
        
        for i, func in enumerate(funcs, 1):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞
            errors, quality = check_code_quality(func["path"])
            total_errors += errors
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            status = get_function_status(func["path"])
            
            # –ò–∫–æ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
            if quality == "A+":
                a_plus_count += 1
                quality_icon = "‚úÖ"
            elif quality == "A":
                a_count += 1
                quality_icon = "‚ö†Ô∏è"
            elif quality == "B":
                b_count += 1
                quality_icon = "üî∂"
            elif quality == "C":
                c_count += 1
                quality_icon = "üî¥"
            else:
                d_count += 1
                quality_icon = "‚ùå"
            
            print(f"{i:2d}. {quality_icon} {func['name']}")
            print(f"    üìÅ {func['path']}")
            print(f"    üìä –ö–∞—á–µ—Å—Ç–≤–æ: {quality} ({errors} –æ—à–∏–±–æ–∫)")
            print(f"    üìç –°—Ç–∞—Ç—É—Å: {status}")
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            if quality == "A+":
                recommendation = "–û—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ! –ì–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É."
            elif quality == "A":
                recommendation = "–•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ. –ú–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –¥–æ A+."
            elif quality == "B":
                recommendation = "–°—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ. –¢—Ä–µ–±—É–µ—Ç —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞."
            elif quality == "C":
                recommendation = "–ü–ª–æ—Ö–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ. –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω—É–∂–µ–Ω —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥."
            else:
                recommendation = "–û—á–µ–Ω—å –ø–ª–æ—Ö–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ. –¢—Ä–µ–±—É–µ—Ç –ø–æ–ª–Ω–æ–π –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏."
            
            print(f"    üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {recommendation}")
            print()
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("="*80)
    print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"‚Ä¢ –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π: {len(functions)}")
    print(f"‚Ä¢ –§—É–Ω–∫—Ü–∏–π –ø–æ —Ç–∏–ø–∞–º:")
    for func_type, funcs in by_type.items():
        print(f"   - {func_type}: {len(funcs)}")
    print(f"‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞:")
    print(f"   - A+ (–æ—Ç–ª–∏—á–Ω–æ): {a_plus_count} ({a_plus_count/len(functions)*100:.1f}%)")
    print(f"   - A (—Ö–æ—Ä–æ—à–æ): {a_count} ({a_count/len(functions)*100:.1f}%)")
    print(f"   - B (—Å—Ä–µ–¥–Ω–µ): {b_count} ({b_count/len(functions)*100:.1f}%)")
    print(f"   - C (–ø–ª–æ—Ö–æ): {c_count} ({c_count/len(functions)*100:.1f}%)")
    print(f"   - D (–æ—á–µ–Ω—å –ø–ª–æ—Ö–æ): {d_count} ({d_count/len(functions)*100:.1f}%)")
    print(f"‚Ä¢ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫: {total_errors}")
    print(f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫: {total_errors // len(functions) if functions else 0}")
    
    if a_plus_count == len(functions):
        print("üéâ –í–°–ï –§–£–ù–ö–¶–ò–ò –ò–ú–ï–Æ–¢ A+ –ö–ê–ß–ï–°–¢–í–û!")
    else:
        print(f"‚ö†Ô∏è  {len(functions) - a_plus_count} —Ñ—É–Ω–∫—Ü–∏–π —Ç—Ä–µ–±—É—é—Ç —É–ª—É—á—à–µ–Ω–∏—è")
    
    return total_errors, len(functions)

if __name__ == "__main__":
    analyze_all_functions()