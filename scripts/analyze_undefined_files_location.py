#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–¥–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è —Ñ–∞–π–ª—ã –∏ –≥–¥–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ
"""

import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(str(Path(__file__).parent.parent))

def find_undefined_files():
    """–ù–∞–π—Ç–∏ –≤—Å–µ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ –∏—Ö —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ"""
    print("üîç –ê–ù–ê–õ–ò–ó –†–ê–°–ü–û–õ–û–ñ–ï–ù–ò–Ø –ù–ï–û–ü–†–ï–î–ï–õ–ï–ù–ù–´–• –§–ê–ô–õ–û–í")
    print("=" * 80)
    
    # –°–ø–∏—Å–æ–∫ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ –∞–Ω–∞–ª–∏–∑–∞
    undefined_files = [
        "anti_fraud_master_ai.py",
        "voice_response_generator.py", 
        "natural_language_processor.py",
        "family_communication_replacement.py",
        "emergency_id_generator.py",
        "parent_control_panel.py",
        "emergency_models.py",
        "emergency_ml_models.py",
        "emergency_formatters.py",
        "emergency_base_models.py",
        "emergency_base_models_refactored.py",
        "emergency_statistics_models.py",
        "emergency_service.py",
        "emergency_service_caller.py",
        "messenger_integration.py",
        "circuit_breaker.py",
        "rate_limiter.py",
        "put_to_sleep.py",
        "simple_sleep.py",
        "configuration.py",
        "singleton.py",
        "logging_module.py",
        "code_quality_config.py",
        "safe_config.py",
        "replacement_components_config.py"
    ]
    
    # –ê–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
    file_analysis = {}
    
    for file_name in undefined_files:
        print(f"\nüìÅ –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞: {file_name}")
        print("-" * 50)
        
        # –ò—â–µ–º —Ñ–∞–π–ª –≤ —Å–∏—Å—Ç–µ–º–µ
        found_locations = []
        for root, dirs, files in os.walk("."):
            if file_name in files:
                found_locations.append(root)
        
        if found_locations:
            print(f"‚úÖ –ù–ê–ô–î–ï–ù –≤ {len(found_locations)} –º–µ—Å—Ç–∞—Ö:")
            for location in found_locations:
                print(f"   ‚Ä¢ {location}")
        else:
            print("‚ùå –ù–ï –ù–ê–ô–î–ï–ù")
            continue
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–¥–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ñ–∞–π–ª
        file_lower = file_name.lower()
        suggested_location = "‚ùì –ù–ï–û–ü–†–ï–î–ï–õ–ï–ù–ù–û"
        
        if "agent" in file_lower or "ai" in file_lower:
            suggested_location = "security/ai_agents/"
        elif "manager" in file_lower:
            suggested_location = "security/managers/"
        elif "engine" in file_lower or "system" in file_lower:
            suggested_location = "security/engines/"
        elif "bot" in file_lower:
            suggested_location = "security/bots/"
        elif "analyzer" in file_lower or "detector" in file_lower:
            suggested_location = "security/analyzers/"
        elif "service" in file_lower or "microservice" in file_lower:
            suggested_location = "security/microservices/"
        elif "model" in file_lower or "base" in file_lower:
            suggested_location = "security/models/"
        elif "integration" in file_lower:
            suggested_location = "security/integrations/"
        elif "utils" in file_lower or "helper" in file_lower:
            suggested_location = "security/utils/"
        elif "config" in file_lower:
            suggested_location = "config/"
        elif "core" in file_lower or "singleton" in file_lower or "logging" in file_lower:
            suggested_location = "core/"
        elif "privacy" in file_lower:
            suggested_location = "security/privacy/"
        elif "ci" in file_lower or "cd" in file_lower:
            suggested_location = "security/ci_cd/"
        
        print(f"üéØ –î–û–õ–ñ–ï–ù –ë–´–¢–¨: {suggested_location}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è
        current_location = found_locations[0] if found_locations else ""
        is_correct = suggested_location in current_location
        
        if is_correct:
            print("‚úÖ –†–ê–°–ü–û–õ–û–ñ–ï–ù–ò–ï –ü–†–ê–í–ò–õ–¨–ù–û–ï")
        else:
            print("‚ùå –†–ê–°–ü–û–õ–û–ñ–ï–ù–ò–ï –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û–ï")
            print(f"   –¢–µ–∫—É—â–µ–µ: {current_location}")
            print(f"   –î–æ–ª–∂–Ω–æ –±—ã—Ç—å: {suggested_location}")
        
        file_analysis[file_name] = {
            "current_location": current_location,
            "suggested_location": suggested_location,
            "is_correct": is_correct,
            "found_locations": found_locations
        }
    
    return file_analysis

def analyze_architecture_violations():
    """–ê–Ω–∞–ª–∏–∑ –Ω–∞—Ä—É—à–µ–Ω–∏–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã"""
    print("\nüö® –ê–ù–ê–õ–ò–ó –ù–ê–†–£–®–ï–ù–ò–ô –ê–†–•–ò–¢–ï–ö–¢–£–†–´")
    print("=" * 80)
    
    file_analysis = find_undefined_files()
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –Ω–∞—Ä—É—à–µ–Ω–∏—è–º
    violations = {
        "‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û–ï –†–ê–°–ü–û–õ–û–ñ–ï–ù–ò–ï": [],
        "‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û–ï –†–ê–°–ü–û–õ–û–ñ–ï–ù–ò–ï": [],
        "‚ùì –¢–†–ï–ë–£–ï–¢ –†–£–ß–ù–û–ô –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–ò": []
    }
    
    for file_name, analysis in file_analysis.items():
        if analysis["is_correct"]:
            violations["‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û–ï –†–ê–°–ü–û–õ–û–ñ–ï–ù–ò–ï"].append(file_name)
        elif analysis["suggested_location"] == "‚ùì –ù–ï–û–ü–†–ï–î–ï–õ–ï–ù–ù–û":
            violations["‚ùì –¢–†–ï–ë–£–ï–¢ –†–£–ß–ù–û–ô –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–ò"].append(file_name)
        else:
            violations["‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û–ï –†–ê–°–ü–û–õ–û–ñ–ï–ù–ò–ï"].append(file_name)
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    for violation_type, files in violations.items():
        if files:
            print(f"\n{violation_type} ({len(files)} —Ñ–∞–π–ª–æ–≤):")
            for file_name in files:
                analysis = file_analysis[file_name]
                print(f"  ‚Ä¢ {file_name}")
                if not analysis["is_correct"] and analysis["suggested_location"] != "‚ùì –ù–ï–û–ü–†–ï–î–ï–õ–ï–ù–ù–û":
                    print(f"    –¢–µ–∫—É—â–µ–µ: {analysis['current_location']}")
                    print(f"    –î–æ–ª–∂–Ω–æ –±—ã—Ç—å: {analysis['suggested_location']}")
    
    return violations

def suggest_architecture_fixes():
    """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã"""
    print("\nüîß –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø –ü–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Æ –ê–†–•–ò–¢–ï–ö–¢–£–†–´")
    print("=" * 80)
    
    violations = analyze_architecture_violations()
    
    print("\nüìã –ü–õ–ê–ù –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô:")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–∞–ø–∫–∏
    missing_folders = [
        "security/engines/",
        "security/analyzers/", 
        "security/models/",
        "security/integrations/",
        "security/utils/"
    ]
    
    print("1Ô∏è‚É£ –°–û–ó–î–ê–¢–¨ –ù–ï–î–û–°–¢–ê–Æ–©–ò–ï –ü–ê–ü–ö–ò:")
    for folder in missing_folders:
        if not os.path.exists(folder):
            print(f"   mkdir -p {folder}")
        else:
            print(f"   ‚úÖ {folder} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    print("\n2Ô∏è‚É£ –ü–ï–†–ï–ú–ï–°–¢–ò–¢–¨ –§–ê–ô–õ–´:")
    
    # –§–∞–π–ª—ã –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
    move_commands = [
        ("security/ai_agents/emergency_models.py", "security/models/"),
        ("security/ai_agents/emergency_ml_models.py", "security/models/"),
        ("security/ai_agents/emergency_formatters.py", "security/models/"),
        ("security/ai_agents/emergency_base_models.py", "security/models/"),
        ("security/ai_agents/emergency_base_models_refactored.py", "security/models/"),
        ("security/ai_agents/emergency_statistics_models.py", "security/models/"),
        ("security/ai_agents/emergency_service.py", "security/microservices/"),
        ("security/ai_agents/emergency_service_caller.py", "security/microservices/"),
        ("security/ai_agents/messenger_integration.py", "security/integrations/"),
        ("security/ai_agents/emergency_location_utils.py", "security/utils/"),
        ("security/ai_agents/emergency_security_utils.py", "security/utils/"),
        ("security/ai_agents/emergency_time_utils.py", "security/utils/"),
        ("security/ai_agents/emergency_utils.py", "security/utils/"),
        ("security/ai_agents/emergency_ml_analyzer.py", "security/analyzers/"),
        ("security/ai_agents/emergency_performance_analyzer.py", "security/analyzers/"),
        ("security/ai_agents/emergency_risk_analyzer.py", "security/analyzers/"),
        ("security/ai_agents/emergency_validators.py", "security/analyzers/"),
        ("security/ai_agents/voice_security_validator.py", "security/analyzers/"),
        ("security/ai_agents/behavioral_analytics_engine.py", "security/engines/"),
        ("security/ai_agents/contextual_alert_system.py", "security/engines/"),
        ("security/ai_agents/deepfake_protection_system.py", "security/engines/"),
        ("security/ai_agents/voice_analysis_engine.py", "security/engines/"),
        ("security/ai_agents/speech_recognition_engine.py", "security/engines/")
    ]
    
    for source, destination in move_commands:
        if os.path.exists(source):
            print(f"   mv {source} {destination}")
        else:
            print(f"   ‚ùå {source} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    print("\n3Ô∏è‚É£ –û–ë–ù–û–í–ò–¢–¨ –ò–ú–ü–û–†–¢–´:")
    print("   –ü–æ—Å–ª–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ –∏–º–ø–æ—Ä—Ç—ã")
    print("   –≤ —Ñ–∞–π–ª–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –ø–µ—Ä–µ–º–µ—â–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏")
    
    print("\n4Ô∏è‚É£ –ü–†–û–í–ï–†–ò–¢–¨ –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–¨:")
    print("   –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã –ø–æ—Å–ª–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ê–ù–ê–õ–ò–ó –ê–†–•–ò–¢–ï–ö–¢–£–†–´ –ù–ï–û–ü–†–ï–î–ï–õ–ï–ù–ù–´–• –§–ê–ô–õ–û–í")
    print("=" * 80)
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
    file_analysis = find_undefined_files()
    
    # –ê–Ω–∞–ª–∏–∑ –Ω–∞—Ä—É—à–µ–Ω–∏–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
    violations = analyze_architecture_violations()
    
    # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é
    suggest_architecture_fixes()
    
    print("\nüéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:")
    print("=" * 50)
    print("‚úÖ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –≤—Å–µ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã")
    print("‚úÖ –í—ã—è–≤–ª–µ–Ω—ã –Ω–∞—Ä—É—à–µ–Ω–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã")
    print("‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω –ø–ª–∞–Ω –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
    print("‚úÖ –û–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è")

if __name__ == "__main__":
    main()