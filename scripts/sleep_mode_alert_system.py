#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üö® –°–ò–°–¢–ï–ú–ê –ê–õ–ï–†–¢–û–í –°–ü–Ø–©–ï–ì–û –†–ï–ñ–ò–ú–ê
=================================

–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è —Å–ø—è—â–µ–≥–æ —Ä–µ–∂–∏–º–∞
–í–∫–ª—é—á–∞–µ—Ç email, SMS, push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏

–ê–≤—Ç–æ—Ä: ALADDIN Security System
–î–∞—Ç–∞: 2025-09-15
–í–µ—Ä—Å–∏—è: 1.0.0
"""

import asyncio
import json
import os
import smtplib
import logging
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Any, Optional
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class SleepModeAlertSystem:
    """–°–∏—Å—Ç–µ–º–∞ –∞–ª–µ—Ä—Ç–æ–≤ —Å–ø—è—â–µ–≥–æ —Ä–µ–∂–∏–º–∞"""
    
    def __init__(self):
        self.alert_config = self._load_alert_config()
        self.notification_channels = {
            "email": self._send_email_alert,
            "console": self._send_console_alert,
            "file": self._send_file_alert,
            "webhook": self._send_webhook_alert
        }
        
    def _load_alert_config(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–ª–µ—Ä—Ç–æ–≤"""
        default_config = {
            "email": {
                "enabled": False,
                "smtp_server": "smtp.gmail.com",
                "smtp_port": 587,
                "username": "",
                "password": "",
                "recipients": []
            },
            "console": {
                "enabled": True,
                "log_level": "INFO"
            },
            "file": {
                "enabled": True,
                "log_file": "logs/sleep_mode_alerts.log"
            },
            "webhook": {
                "enabled": False,
                "url": "",
                "headers": {}
            },
            "alert_rules": {
                "critical_functions_sleeping": {
                    "enabled": True,
                    "channels": ["console", "file", "email"],
                    "message_template": "üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ê–õ–ï–†–¢: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Å–ø—è—â–µ–º —Ä–µ–∂–∏–º–µ: {count}"
                },
                "high_cpu_usage": {
                    "enabled": True,
                    "channels": ["console", "file"],
                    "message_template": "‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU: {cpu_usage}%"
                },
                "high_memory_usage": {
                    "enabled": True,
                    "channels": ["console", "file"],
                    "message_template": "‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {memory_usage}%"
                },
                "function_woke_up": {
                    "enabled": True,
                    "channels": ["console", "file"],
                    "message_template": "‚ÑπÔ∏è –ò–ù–§–û–†–ú–ê–¶–ò–Ø: –§—É–Ω–∫—Ü–∏—è {function_name} –ø—Ä–æ–±—É–∂–¥–µ–Ω–∞"
                },
                "function_sleeping": {
                    "enabled": True,
                    "channels": ["console", "file"],
                    "message_template": "üò¥ –ò–ù–§–û–†–ú–ê–¶–ò–Ø: –§—É–Ω–∫—Ü–∏—è {function_name} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º"
                }
            }
        }
        
        try:
            config_file = Path("config/sleep_mode_alerts.json")
            if config_file.exists():
                with open(config_file, "r", encoding="utf-8") as f:
                    return json.load(f)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∞–ª–µ—Ä—Ç–æ–≤: {e}")
        
        return default_config
    
    async def send_alert(self, alert_type: str, data: Dict[str, Any]) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞"""
        try:
            if alert_type not in self.alert_config.get("alert_rules", {}):
                logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∞–ª–µ—Ä—Ç–∞: {alert_type}")
                return False
            
            rule = self.alert_config["alert_rules"][alert_type]
            if not rule.get("enabled", False):
                return True
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = rule["message_template"].format(**data)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
            success = True
            for channel in rule.get("channels", []):
                if channel in self.notification_channels:
                    try:
                        await self.notification_channels[channel](message, alert_type, data)
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ {channel}: {e}")
                        success = False
                else:
                    logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {channel}")
            
            return success
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞ {alert_type}: {e}")
            return False
    
    async def _send_console_alert(self, message: str, alert_type: str, data: Dict[str, Any]) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞ –≤ –∫–æ–Ω—Å–æ–ª—å"""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        print(f"[{timestamp}] {message}")
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        log_level = self.alert_config.get("console", {}).get("log_level", "INFO")
        if log_level == "DEBUG":
            logger.debug(message)
        elif log_level == "INFO":
            logger.info(message)
        elif log_level == "WARNING":
            logger.warning(message)
        elif log_level == "ERROR":
            logger.error(message)
        elif log_level == "CRITICAL":
            logger.critical(message)
    
    async def _send_file_alert(self, message: str, alert_type: str, data: Dict[str, Any]) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞ –≤ —Ñ–∞–π–ª"""
        try:
            log_file = self.alert_config.get("file", {}).get("log_file", "logs/sleep_mode_alerts.log")
            log_path = Path(log_file)
            log_path.parent.mkdir(parents=True, exist_ok=True)
            
            timestamp = datetime.now().isoformat()
            alert_entry = {
                "timestamp": timestamp,
                "type": alert_type,
                "message": message,
                "data": data
            }
            
            with open(log_path, "a", encoding="utf-8") as f:
                f.write(f"{json.dumps(alert_entry, ensure_ascii=False)}\n")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∞–ª–µ—Ä—Ç–∞ –≤ —Ñ–∞–π–ª: {e}")
    
    async def _send_email_alert(self, message: str, alert_type: str, data: Dict[str, Any]) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞ –ø–æ email"""
        try:
            email_config = self.alert_config.get("email", {})
            if not email_config.get("enabled", False):
                return
            
            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            msg = MIMEMultipart()
            msg['From'] = email_config.get("username", "")
            msg['To'] = ", ".join(email_config.get("recipients", []))
            msg['Subject'] = f"ALADDIN Sleep Mode Alert: {alert_type}"
            
            # –¢–µ–ª–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            body = f"""
ALADDIN Security System - Sleep Mode Alert

–¢–∏–ø –∞–ª–µ—Ä—Ç–∞: {alert_type}
–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
–°–æ–æ–±—â–µ–Ω–∏–µ: {message}

–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:
{json.dumps(data, indent=2, ensure_ascii=False)}

---
–°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ ALADDIN
            """
            
            msg.attach(MIMEText(body, 'plain', 'utf-8'))
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email
            server = smtplib.SMTP(email_config.get("smtp_server", ""), email_config.get("smtp_port", 587))
            server.starttls()
            server.login(email_config.get("username", ""), email_config.get("password", ""))
            
            text = msg.as_string()
            server.sendmail(email_config.get("username", ""), email_config.get("recipients", []), text)
            server.quit()
            
            logger.info(f"Email –∞–ª–µ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {alert_type}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email –∞–ª–µ—Ä—Ç–∞: {e}")
    
    async def _send_webhook_alert(self, message: str, alert_type: str, data: Dict[str, Any]) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞ —á–µ—Ä–µ–∑ webhook"""
        try:
            webhook_config = self.alert_config.get("webhook", {})
            if not webhook_config.get("enabled", False):
                return
            
            import aiohttp
            
            payload = {
                "timestamp": datetime.now().isoformat(),
                "type": alert_type,
                "message": message,
                "data": data,
                "source": "ALADDIN_SLEEP_MODE"
            }
            
            headers = {
                "Content-Type": "application/json",
                **webhook_config.get("headers", {})
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    webhook_config.get("url", ""),
                    json=payload,
                    headers=headers
                ) as response:
                    if response.status == 200:
                        logger.info(f"Webhook –∞–ª–µ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {alert_type}")
                    else:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ webhook: {response.status}")
                        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ webhook –∞–ª–µ—Ä—Ç–∞: {e}")
    
    async def test_alerts(self) -> None:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∞–ª–µ—Ä—Ç–æ–≤"""
        logger.info("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ê–õ–ï–†–¢–û–í")
        logger.info("=" * 40)
        
        test_alerts = [
            ("critical_functions_sleeping", {"count": 5}),
            ("high_cpu_usage", {"cpu_usage": 85.5}),
            ("high_memory_usage", {"memory_usage": 90.2}),
            ("function_woke_up", {"function_name": "test_function"}),
            ("function_sleeping", {"function_name": "test_function"})
        ]
        
        for alert_type, data in test_alerts:
            logger.info(f"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞: {alert_type}")
            success = await self.send_alert(alert_type, data)
            if success:
                logger.info(f"‚úÖ –ê–ª–µ—Ä—Ç {alert_type} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞ {alert_type}")
            
            await asyncio.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
        
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üö® –°–ò–°–¢–ï–ú–ê –ê–õ–ï–†–¢–û–í –°–ü–Ø–©–ï–ì–û –†–ï–ñ–ò–ú–ê")
    print("=" * 40)
    
    alert_system = SleepModeAlertSystem()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –∞–ª–µ—Ä—Ç–æ–≤
    await alert_system.test_alerts()
    
    return 0

if __name__ == "__main__":
    exit(asyncio.run(main()))