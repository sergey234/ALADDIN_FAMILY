#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –∫–∞—á–µ—Å—Ç–≤—É –∫–∞–∂–¥–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –≤ SafeFunctionManager
"""

import os
import sys
import subprocess
from datetime import datetime

def analyze_function_quality():
    """–ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–∞–∂–¥–æ–π —Ñ—É–Ω–∫—Ü–∏–∏"""
    print("üìä –î–ï–¢–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –ü–û –ö–ê–ß–ï–°–¢–í–£ –§–£–ù–ö–¶–ò–ô –í SAFEFUNCTIONMANAGER")
    print("=" * 80)
    print(f"üìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    # –í—Å–µ —Ñ–∞–π–ª—ã —Å–∏—Å—Ç–µ–º—ã
    all_files = [
        # Core —Ñ–∞–π–ª—ã
        "core/base.py",
        "core/service_base.py", 
        "core/database.py",
        "core/configuration.py",
        "core/logging_module.py",
        "core/security_base.py",
        
        # Security –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
        "security/safe_function_manager.py",
        "security/security_monitoring.py",
        "security/authentication.py",
        "security/access_control.py",
        "security/security_policy.py",
        "security/security_reporting.py",
        
        # Family —Ñ—É–Ω–∫—Ü–∏–∏
        "security/family/family_profile_manager.py",
        "security/family/child_protection.py",
        "security/family/elderly_protection.py",
        
        # Preliminary —Ñ—É–Ω–∫—Ü–∏–∏
        "security/preliminary/policy_engine.py",
        "security/preliminary/risk_assessment.py",
        "security/preliminary/behavioral_analysis.py",
        "security/preliminary/mfa_service.py",
        "security/preliminary/zero_trust_service.py",
        "security/preliminary/trust_scoring.py",
        "security/preliminary/context_aware_access.py",
        
        # Reactive —Ñ—É–Ω–∫—Ü–∏–∏
        "security/reactive/recovery_service.py",
        "security/reactive/threat_intelligence.py",
        "security/reactive/forensics_service.py",
        
        # Microservices
        "security/microservices/api_gateway.py",
        "security/microservices/load_balancer.py",
        "security/microservices/rate_limiter.py",
        "security/microservices/circuit_breaker.py",
        "security/microservices/user_interface_manager.py",
        "security/microservices/redis_cache_manager.py",
        "security/microservices/service_mesh_manager.py",
        
        # AI Agents
        "security/ai_agents/monitor_manager.py",
        "security/ai_agents/alert_manager.py",
        "security/ai_agents/report_manager.py",
        "security/ai_agents/analytics_manager.py",
        "security/ai_agents/dashboard_manager.py",
        "security/ai_agents/data_protection_agent.py",
        "security/ai_agents/mobile_security_agent.py",
        
        # Bots
        "security/bots/mobile_navigation_bot.py",
        "security/bots/gaming_security_bot.py",
        "security/bots/emergency_response_bot.py",
        "security/bots/parental_control_bot.py",
        "security/bots/notification_bot.py",
        "security/bots/whatsapp_security_bot.py",
        "security/bots/telegram_security_bot.py",
        "security/bots/instagram_security_bot.py",
        "security/bots/analytics_bot.py",
        "security/bots/website_navigation_bot.py",
        "security/bots/browser_security_bot.py",
        "security/bots/cloud_storage_security_bot.py",
        "security/bots/network_security_bot.py",
        "security/bots/device_security_bot.py",
        
        # Privacy
        "security/privacy/universal_privacy_manager.py",
        
        # Compliance
        "security/compliance/russian_child_protection_manager.py",
        "security/compliance/russian_data_protection_manager.py",
        
        # CI/CD
        "security/ci_cd/ci_pipeline_manager.py",
        
        # Scaling
        "security/scaling/auto_scaling_engine.py",
        
        # Orchestration
        "security/orchestration/kubernetes_orchestrator.py"
    ]
    
    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–∞—á–µ—Å—Ç–≤–∞
    excellent_files = []  # A+ (0 –ø—Ä–æ–±–ª–µ–º)
    good_files = []       # A (1-5 –ø—Ä–æ–±–ª–µ–º)
    fair_files = []       # B (6-15 –ø—Ä–æ–±–ª–µ–º)
    poor_files = []       # C (16-30 –ø—Ä–æ–±–ª–µ–º)
    critical_files = []   # D (30+ –ø—Ä–æ–±–ª–µ–º)
    
    total_files = 0
    total_issues = 0
    
    print("üîç –ê–ù–ê–õ–ò–ó –ö–ê–ß–ï–°–¢–í–ê –ü–û –§–ê–ô–õ–ê–ú:")
    print("-" * 80)
    
    for file_path in all_files:
        full_path = os.path.join("/Users/sergejhlystov/ALADDIN_NEW", file_path)
        if os.path.exists(full_path):
            total_files += 1
            print(f"\nüìÑ {file_path}:")
            
            try:
                result = subprocess.run([
                    'python3', '-m', 'flake8', 
                    '--max-line-length=120',
                    full_path
                ], capture_output=True, text=True, timeout=30)
                
                if result.returncode == 0:
                    print("   ‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ: A+ (0 –ø—Ä–æ–±–ª–µ–º)")
                    excellent_files.append(file_path)
                else:
                    output = result.stdout
                    lines = output.split('\n')
                    file_issues = len([l for l in lines if l.strip()])
                    total_issues += file_issues
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–∞—á–µ—Å—Ç–≤–∞
                    if file_issues == 0:
                        grade = "A+"
                        category = "–û—Ç–ª–∏—á–Ω–æ"
                        excellent_files.append(file_path)
                    elif file_issues <= 5:
                        grade = "A"
                        category = "–•–æ—Ä–æ—à–æ"
                        good_files.append(file_path)
                    elif file_issues <= 15:
                        grade = "B"
                        category = "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ"
                        fair_files.append(file_path)
                    elif file_issues <= 30:
                        grade = "C"
                        category = "–¢—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è"
                        poor_files.append(file_path)
                    else:
                        grade = "D"
                        category = "–ö—Ä–∏—Ç–∏—á–Ω–æ"
                        critical_files.append(file_path)
                    
                    print(f"   üìä –ö–∞—á–µ—Å—Ç–≤–æ: {grade} ({file_issues} –ø—Ä–æ–±–ª–µ–º) - {category}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
                    if file_issues > 0:
                        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—ã –ø–æ —Ç–∏–ø–∞–º
                        issue_types = {}
                        for line in lines:
                            if line.strip() and ':' in line:
                                parts = line.split(':')
                                if len(parts) >= 3:
                                    error_code = parts[3].strip().split()[0] if parts[3].strip() else ''
                                    if error_code:
                                        issue_types[error_code] = issue_types.get(error_code, 0) + 1
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø –ø—Ä–æ–±–ª–µ–º
                        if issue_types:
                            top_issues = sorted(issue_types.items(), key=lambda x: x[1], reverse=True)[:3]
                            for error_code, count in top_issues:
                                print(f"   ‚ö†Ô∏è  {error_code}: {count} –ø—Ä–æ–±–ª–µ–º")
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
                        for i, line in enumerate(lines[:3]):
                            if line.strip():
                                print(f"   üîç {line}")
                        if len(lines) > 3:
                            print(f"   ... –∏ –µ—â–µ {len(lines) - 3} –ø—Ä–æ–±–ª–µ–º")
                            
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")
        else:
            print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\n" + "=" * 80)
    print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–ê–ß–ï–°–¢–í–ê:")
    print("=" * 80)
    print(f"üìÅ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {total_files}")
    print(f"üîç –í—Å–µ–≥–æ –ø—Ä–æ–±–ª–µ–º –Ω–∞–π–¥–µ–Ω–æ: {total_issues}")
    print()
    
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    print("üèÜ –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú –ö–ê–ß–ï–°–¢–í–ê:")
    print("-" * 80)
    print(f"ü•á A+ (–û—Ç–ª–∏—á–Ω–æ):     {len(excellent_files):2d} —Ñ–∞–π–ª–æ–≤")
    print(f"ü•à A  (–•–æ—Ä–æ—à–æ):      {len(good_files):2d} —Ñ–∞–π–ª–æ–≤")
    print(f"ü•â B  (–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ): {len(fair_files):2d} —Ñ–∞–π–ª–æ–≤")
    print(f"‚ö†Ô∏è  C  (–¢—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è): {len(poor_files):2d} —Ñ–∞–π–ª–æ–≤")
    print(f"üö® D  (–ö—Ä–∏—Ç–∏—á–Ω–æ):    {len(critical_files):2d} —Ñ–∞–π–ª–æ–≤")
    print()
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Å–ø–∏—Å–∫–∏
    if excellent_files:
        print("ü•á –§–ê–ô–õ–´ –° –û–¢–õ–ò–ß–ù–´–ú –ö–ê–ß–ï–°–¢–í–û–ú (A+):")
        print("-" * 80)
        for file_path in excellent_files:
            print(f"   ‚úÖ {file_path}")
        print()
    
    if good_files:
        print("ü•à –§–ê–ô–õ–´ –° –•–û–†–û–®–ò–ú –ö–ê–ß–ï–°–¢–í–û–ú (A):")
        print("-" * 80)
        for file_path in good_files:
            print(f"   ‚úÖ {file_path}")
        print()
    
    if fair_files:
        print("ü•â –§–ê–ô–õ–´ –° –£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–´–ú –ö–ê–ß–ï–°–¢–í–û–ú (B):")
        print("-" * 80)
        for file_path in fair_files:
            print(f"   ‚ö†Ô∏è  {file_path}")
        print()
    
    if poor_files:
        print("‚ö†Ô∏è  –§–ê–ô–õ–´ –¢–†–ï–ë–£–Æ–©–ò–ï –£–õ–£–ß–®–ï–ù–ò–Ø (C):")
        print("-" * 80)
        for file_path in poor_files:
            print(f"   üîß {file_path}")
        print()
    
    if critical_files:
        print("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –§–ê–ô–õ–´ (D):")
        print("-" * 80)
        for file_path in critical_files:
            print(f"   üö® {file_path}")
        print()
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –£–õ–£–ß–®–ï–ù–ò–Æ:")
    print("-" * 80)
    
    if critical_files:
        print("üö® –ö–†–ò–¢–ò–ß–ù–û: –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã —Å –æ—Ü–µ–Ω–∫–æ–π D")
        for file_path in critical_files:
            print(f"   - {file_path}")
        print()
    
    if poor_files:
        print("‚ö†Ô∏è  –í–ê–ñ–ù–û: –ò—Å–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã —Å –æ—Ü–µ–Ω–∫–æ–π C")
        for file_path in poor_files:
            print(f"   - {file_path}")
        print()
    
    if fair_files:
        print("üìù –†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø: –£–ª—É—á—à–∏—Ç—å —Ñ–∞–π–ª—ã —Å –æ—Ü–µ–Ω–∫–æ–π B")
        for file_path in fair_files:
            print(f"   - {file_path}")
        print()
    
    # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ —Å–∏—Å—Ç–µ–º—ã
    if len(excellent_files) + len(good_files) >= total_files * 0.8:
        system_grade = "A+"
        system_desc = "–û—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Å–∏—Å—Ç–µ–º—ã"
    elif len(excellent_files) + len(good_files) >= total_files * 0.6:
        system_grade = "A"
        system_desc = "–•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Å–∏—Å—Ç–µ–º—ã"
    elif len(excellent_files) + len(good_files) >= total_files * 0.4:
        system_grade = "B"
        system_desc = "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Å–∏—Å—Ç–µ–º—ã"
    elif len(critical_files) <= total_files * 0.2:
        system_grade = "C"
        system_desc = "–¢—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è"
    else:
        system_grade = "D"
        system_desc = "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ"
    
    print(f"üéØ –û–ë–©–ê–Ø –û–¶–ï–ù–ö–ê –°–ò–°–¢–ï–ú–´: {system_grade} - {system_desc}")
    print()
    
    # –ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π
    print("üìã –ü–õ–ê–ù –î–ï–ô–°–¢–í–ò–ô:")
    print("-" * 80)
    print("1. üö® –ù–ï–ú–ï–î–õ–ï–ù–ù–û: –ò—Å–ø—Ä–∞–≤–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã (D)")
    print("2. ‚ö†Ô∏è  –ö–†–ê–¢–ö–û–°–†–û–ß–ù–û: –£–ª—É—á—à–∏—Ç—å —Ñ–∞–π–ª—ã (C)")
    print("3. üìù –°–†–ï–î–ù–ï–°–†–û–ß–ù–û: –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã (B)")
    print("4. üèÜ –î–û–õ–ì–û–°–†–û–ß–ù–û: –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ A+")
    
    print()
    print("=" * 80)
    print("‚úÖ –ê–ù–ê–õ–ò–ó –ö–ê–ß–ï–°–¢–í–ê –§–£–ù–ö–¶–ò–ô –ó–ê–í–ï–†–®–ï–ù!")
    print("=" * 80)

if __name__ == "__main__":
    analyze_function_quality()