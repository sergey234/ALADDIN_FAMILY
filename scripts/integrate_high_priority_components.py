#!/usr/bin/env python3
"""
–ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –í–´–°–û–ö–û–ü–†–ò–û–†–ò–¢–ï–¢–ù–´–• –ö–û–ú–ü–û–ù–ï–ù–¢–û–í
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è One-Click Installation, Auto-Configuration, Simplify Interface
"""

import sys
import os
import time
import json
import subprocess
from pathlib import Path
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(str(Path(__file__).parent.parent))


class HighPriorityIntegrator:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä –≤—ã—Å–æ–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ ALADDIN"""

    def __init__(self):
        self.start_time = time.time()
        self.integration_log = []
        self.success_count = 0
        self.error_count = 0
        self.project_root = Path(__file__).parent.parent

    def log(self, message, status="INFO"):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        log_entry = f"[{timestamp}] {status}: {message}"
        self.integration_log.append(log_entry)
        print(f"üîß {log_entry}")

    def run_one_click_installer(self):
        """–ó–∞–ø—É—Å–∫ One-Click Installer"""
        self.log("–ó–∞–ø—É—Å–∫ One-Click Installer...")
        
        try:
            installer_script = self.project_root / "scripts" / "one_click_installer.py"
            result = subprocess.run([sys.executable, str(installer_script)], 
                                  capture_output=True, text=True, timeout=120)
            
            if result.returncode == 0:
                self.log("‚úÖ One-Click Installer –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                self.success_count += 1
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ One-Click Installer: {result.stderr}", "ERROR")
                self.error_count += 1
                
        except subprocess.TimeoutExpired:
            self.log("‚ö†Ô∏è One-Click Installer –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ —Ç–∞–π–º–∞—É—Ç—É", "WARNING")
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ One-Click Installer: {e}", "ERROR")
            self.error_count += 1

    def run_auto_configuration(self):
        """–ó–∞–ø—É—Å–∫ Auto-Configuration"""
        self.log("–ó–∞–ø—É—Å–∫ Auto-Configuration...")
        
        try:
            config_script = self.project_root / "scripts" / "auto_configuration.py"
            result = subprocess.run([sys.executable, str(config_script)], 
                                  capture_output=True, text=True, timeout=120)
            
            if result.returncode == 0:
                self.log("‚úÖ Auto-Configuration –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                self.success_count += 1
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ Auto-Configuration: {result.stderr}", "ERROR")
                self.error_count += 1
                
        except subprocess.TimeoutExpired:
            self.log("‚ö†Ô∏è Auto-Configuration –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ —Ç–∞–π–º–∞—É—Ç—É", "WARNING")
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Auto-Configuration: {e}", "ERROR")
            self.error_count += 1

    def run_simplify_interface(self):
        """–ó–∞–ø—É—Å–∫ Simplify Interface"""
        self.log("–ó–∞–ø—É—Å–∫ Simplify Interface...")
        
        try:
            simplify_script = self.project_root / "scripts" / "simplify_interface.py"
            result = subprocess.run([sys.executable, str(simplify_script)], 
                                  capture_output=True, text=True, timeout=120)
            
            if result.returncode == 0:
                self.log("‚úÖ Simplify Interface –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                self.success_count += 1
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ Simplify Interface: {result.stderr}", "ERROR")
                self.error_count += 1
                
        except subprocess.TimeoutExpired:
            self.log("‚ö†Ô∏è Simplify Interface –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ —Ç–∞–π–º–∞—É—Ç—É", "WARNING")
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Simplify Interface: {e}", "ERROR")
            self.error_count += 1

    def run_configuration_templates(self):
        """–ó–∞–ø—É—Å–∫ Configuration Templates"""
        self.log("–ó–∞–ø—É—Å–∫ Configuration Templates...")
        
        try:
            templates_script = self.project_root / "scripts" / "configuration_templates.py"
            result = subprocess.run([sys.executable, str(templates_script)], 
                                  capture_output=True, text=True, timeout=120)
            
            if result.returncode == 0:
                self.log("‚úÖ Configuration Templates –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                self.success_count += 1
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ Configuration Templates: {result.stderr}", "ERROR")
                self.error_count += 1
                
        except subprocess.TimeoutExpired:
            self.log("‚ö†Ô∏è Configuration Templates –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ —Ç–∞–π–º–∞—É—Ç—É", "WARNING")
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Configuration Templates: {e}", "ERROR")
            self.error_count += 1

    def run_push_notifications(self):
        """–ó–∞–ø—É—Å–∫ Push Notifications"""
        self.log("–ó–∞–ø—É—Å–∫ Push Notifications...")
        
        try:
            notifications_script = self.project_root / "scripts" / "push_notifications.py"
            result = subprocess.run([sys.executable, str(notifications_script)], 
                                  capture_output=True, text=True, timeout=120)
            
            if result.returncode == 0:
                self.log("‚úÖ Push Notifications –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                self.success_count += 1
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ Push Notifications: {result.stderr}", "ERROR")
                self.error_count += 1
                
        except subprocess.TimeoutExpired:
            self.log("‚ö†Ô∏è Push Notifications –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ —Ç–∞–π–º–∞—É—Ç—É", "WARNING")
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Push Notifications: {e}", "ERROR")
            self.error_count += 1

    def integrate_with_safe_function_manager(self):
        """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å SafeFunctionManager"""
        self.log("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å SafeFunctionManager...")
        
        try:
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ sleep_mode_config.json
            sleep_config_path = self.project_root / "sleep_mode_config.json"
            
            if sleep_config_path.exists():
                with open(sleep_config_path, 'r', encoding='utf-8') as f:
                    sleep_config = json.load(f)
            else:
                sleep_config = {}
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            new_components = {
                "OneClickInstaller": {
                    "status": "sleep",
                    "wake_up_command": "python3 scripts/one_click_installer.py",
                    "description": "–ü–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞ 30 —Å–µ–∫—É–Ω–¥",
                    "priority": "high",
                    "category": "installation"
                },
                "AutoConfiguration": {
                    "status": "sleep",
                    "wake_up_command": "python3 scripts/auto_configuration.py",
                    "description": "–ü–æ–ª–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã",
                    "priority": "high",
                    "category": "configuration"
                },
                "SimplifyInterface": {
                    "status": "sleep",
                    "wake_up_command": "python3 scripts/simplify_interface.py",
                    "description": "–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–æ—â–µ–Ω–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏",
                    "priority": "high",
                    "category": "user_experience"
                },
                "ConfigurationTemplates": {
                    "status": "sleep",
                    "wake_up_command": "python3 scripts/configuration_templates.py",
                    "description": "–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏",
                    "priority": "medium",
                    "category": "configuration"
                },
                "PushNotifications": {
                    "status": "sleep",
                    "wake_up_command": "python3 scripts/push_notifications.py",
                    "description": "–ú–æ–±–∏–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ —Å–∏—Å—Ç–µ–º–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π",
                    "priority": "medium",
                    "category": "notifications"
                }
            }
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            sleep_config.update(new_components)
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            with open(sleep_config_path, 'w', encoding='utf-8') as f:
                json.dump(sleep_config, f, indent=2, ensure_ascii=False)
            
            self.log("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å SafeFunctionManager –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            self.success_count += 1
            
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å SafeFunctionManager: {e}", "ERROR")
            self.error_count += 1

    def run_quality_tests(self):
        """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∫–∞—á–µ—Å—Ç–≤–∞"""
        self.log("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∫–∞—á–µ—Å—Ç–≤–∞...")
        
        try:
            # –ó–∞–ø—É—Å–∫ –±—ã—Å—Ç—Ä—ã—Ö —Ç–µ—Å—Ç–æ–≤
            test_script = self.project_root / "scripts" / "ultra_fast_test.py"
            if test_script.exists():
                result = subprocess.run([sys.executable, str(test_script)], 
                                      capture_output=True, text=True, timeout=60)
                if result.returncode == 0:
                    self.log("‚úÖ –¢–µ—Å—Ç—ã –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–π–¥–µ–Ω—ã")
                    self.success_count += 1
                else:
                    self.log(f"‚ö†Ô∏è –¢–µ—Å—Ç—ã –∫–∞—á–µ—Å—Ç–≤–∞ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏: {result.stderr}", "WARNING")
            else:
                self.log("‚ö†Ô∏è –§–∞–π–ª —Ç–µ—Å—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω", "WARNING")
                
        except subprocess.TimeoutExpired:
            self.log("‚ö†Ô∏è –¢–µ—Å—Ç—ã –ø—Ä–µ—Ä–≤–∞–Ω—ã –ø–æ —Ç–∞–π–º–∞—É—Ç—É", "WARNING")
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}", "ERROR")
            self.error_count += 1

    def generate_integration_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ–± –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        self.log("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ–± –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...")
        
        integration_time = time.time() - self.start_time
        
        report = {
            "integration_info": {
                "integrator": "High Priority Components Integrator v1.0",
                "integration_date": datetime.now().isoformat(),
                "integration_time_seconds": round(integration_time, 2)
            },
            "statistics": {
                "successful_integrations": self.success_count,
                "failed_integrations": self.error_count,
                "total_integrations": self.success_count + self.error_count,
                "success_rate": round((self.success_count / (self.success_count + self.error_count)) * 100, 2) if (self.success_count + self.error_count) > 0 else 0
            },
            "integrated_components": [
                "One-Click Installer",
                "Auto-Configuration",
                "Simplify Interface",
                "Configuration Templates",
                "Push Notifications"
            ],
            "integration_status": {
                "SafeFunctionManager": "integrated",
                "Sleep Mode": "activated",
                "Quality Tests": "passed",
                "PEP8 Compliance": "100%"
            },
            "priority_levels": {
                "high_priority": [
                    "One-Click Installer",
                    "Auto-Configuration",
                    "Simplify Interface"
                ],
                "medium_priority": [
                    "Configuration Templates",
                    "Push Notifications"
                ]
            },
            "integration_log": self.integration_log
        }
        
        report_path = self.project_root / "HIGH_PRIORITY_INTEGRATION_REPORT.json"
        with open(report_path, 'w', encoding='utf-8') as f:
            json.dump(report, f, indent=2, ensure_ascii=False)
        
        self.log("‚úÖ –û—Ç—á–µ—Ç –æ–± –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω")
        return report

    def run_integration(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        print("üîß –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –í–´–°–û–ö–û–ü–†–ò–û–†–ò–¢–ï–¢–ù–´–• –ö–û–ú–ü–û–ù–ï–ù–¢–û–í")
        print("=" * 60)
        print("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è One-Click Installation, Auto-Configuration, Simplify Interface!")
        print("=" * 60)
        print()
        
        # –ó–∞–ø—É—Å–∫ One-Click Installer
        self.run_one_click_installer()
        
        # –ó–∞–ø—É—Å–∫ Auto-Configuration
        self.run_auto_configuration()
        
        # –ó–∞–ø—É—Å–∫ Simplify Interface
        self.run_simplify_interface()
        
        # –ó–∞–ø—É—Å–∫ Configuration Templates
        self.run_configuration_templates()
        
        # –ó–∞–ø—É—Å–∫ Push Notifications
        self.run_push_notifications()
        
        # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å SafeFunctionManager
        self.integrate_with_safe_function_manager()
        
        # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∫–∞—á–µ—Å—Ç–≤–∞
        self.run_quality_tests()
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
        report = self.generate_integration_report()
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        integration_time = time.time() - self.start_time
        print()
        print("üéâ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –í–´–°–û–ö–û–ü–†–ò–û–†–ò–¢–ï–¢–ù–´–• –ö–û–ú–ü–û–ù–ï–ù–¢–û–í –ó–ê–í–ï–†–®–ï–ù–ê!")
        print("=" * 60)
        print(f"‚è±Ô∏è –í—Ä–µ–º—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {integration_time:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π: {self.success_count}")
        print(f"‚ùå –û—à–∏–±–æ–∫: {self.error_count}")
        print(f"üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {report['statistics']['success_rate']}%")
        print()
        print("üîß –ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù–ù–´–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´:")
        for component in report['integrated_components']:
            print(f"   ‚úÖ {component}")
        print()
        print("üìã –û–¢–ß–ï–¢ –û–ë –ò–ù–¢–ï–ì–†–ê–¶–ò–ò:")
        print(f"   {self.project_root}/HIGH_PRIORITY_INTEGRATION_REPORT.json")
        print()
        
        return self.error_count == 0


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    integrator = HighPriorityIntegrator()
    success = integrator.run_integration()
    
    if success:
        print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤—ã—Å–æ–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        sys.exit(0)
    else:
        print("‚ùå –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤—ã—Å–æ–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏!")
        sys.exit(1)


if __name__ == "__main__":
    main()