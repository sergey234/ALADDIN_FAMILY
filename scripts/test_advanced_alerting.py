#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∞–ª–µ—Ä—Ç–æ–≤ ALADDIN
"""

import sys
import os
import time
import requests
import json
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from security.advanced_alerting_system import alerting_system

def test_alerting_system():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∞–ª–µ—Ä—Ç–æ–≤"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AdvancedAlertingSystem...")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
    test_scenarios = [
        {
            'name': '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —É–≥—Ä–æ–∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏',
            'data': {
                'threat_level': 'critical',
                'attack_type': 'ddos',
                'source_ip': '192.168.1.100'
            }
        },
        {
            'name': '–í—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ CPU',
            'data': {
                'cpu_usage': 95,
                'memory_usage': 60,
                'disk_usage': 45
            }
        },
        {
            'name': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –ø–∞–º—è—Ç–∏',
            'data': {
                'cpu_usage': 50,
                'memory_usage': 90,
                'disk_usage': 30
            }
        },
        {
            'name': '–°–∏—Å—Ç–µ–º–Ω—ã–µ –æ—à–∏–±–∫–∏',
            'data': {
                'error_count': 15,
                'error_types': ['database', 'network', 'auth'],
                'last_error': 'Connection timeout'
            }
        },
        {
            'name': '–ù–∞—Ä—É—à–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è',
            'data': {
                'compliance_score': 75,
                'violations': ['data_retention', 'access_control'],
                'audit_date': '2025-09-08'
            }
        },
        {
            'name': '–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
            'data': {
                'suspicious_activity': True,
                'user_id': 'user123',
                'activity_type': 'unusual_login_time',
                'location': 'Unknown'
            }
        },
        {
            'name': '–û—à–∏–±–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è',
            'data': {
                'backup_status': 'failed',
                'backup_type': 'full',
                'error_message': 'Disk space insufficient'
            }
        },
        {
            'name': '–û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏',
            'data': {
                'integration_status': 'failed',
                'service': 'external_api',
                'error_code': 500
            }
        }
    ]
    
    total_alerts = 0
    
    for scenario in test_scenarios:
        print(f"\nüîç –¢–µ—Å—Ç: {scenario['name']}")
        print(f"üìä –î–∞–Ω–Ω—ã–µ: {json.dumps(scenario['data'], indent=2, ensure_ascii=False)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª–µ—Ä—Ç—ã
        alerts = alerting_system.check_alerts(scenario['data'])
        
        if alerts:
            print(f"üö® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∞–ª–µ—Ä—Ç–æ–≤: {len(alerts)}")
            for alert in alerts:
                print(f"  - {alert.title} ({alert.severity.value})")
                print(f"    –ü—Ä–∞–≤–∏–ª–æ: {alert.rule_name}")
                print(f"    –í—Ä–µ–º—è: {alert.timestamp.strftime('%H:%M:%S')}")
            total_alerts += len(alerts)
        else:
            print("‚úÖ –ê–ª–µ—Ä—Ç–æ–≤ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ")
        
        time.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
    
    print(f"\nüìä –ò—Ç–æ–≥–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∞–ª–µ—Ä—Ç–æ–≤: {total_alerts}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = alerting_system.get_alert_statistics()
    print(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∞–ª–µ—Ä—Ç–æ–≤:")
    print(f"  - –í—Å–µ–≥–æ –∞–ª–µ—Ä—Ç–æ–≤: {stats['total_alerts']}")
    print(f"  - –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active_alerts']}")
    print(f"  - –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö: {stats['resolved_alerts']}")
    print(f"  - –ü–æ —Ç–∏–ø–∞–º: {stats['type_statistics']}")
    print(f"  - –ü–æ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏: {stats['severity_statistics']}")
    
    return total_alerts > 0

def test_alerts_api():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∞–ª–µ—Ä—Ç–æ–≤"""
    print("\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Alerts API...")
    
    api_url = "http://localhost:5003"
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API
        response = requests.get(f"{api_url}/api/alerts/health", timeout=5)
        if response.status_code == 200:
            print("‚úÖ API –∞–ª–µ—Ä—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            print(f"‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
            return False
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤
        response = requests.get(f"{api_url}/api/alerts/active", timeout=5)
        if response.status_code == 200:
            data = response.json()
            print(f"üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤: {data.get('count', 0)}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤: {response.status_code}")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        response = requests.get(f"{api_url}/api/alerts/statistics", timeout=5)
        if response.status_code == 200:
            data = response.json()
            stats = data.get('statistics', {})
            print(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats.get('total_alerts', 0)} –≤—Å–µ–≥–æ, {stats.get('active_alerts', 0)} –∞–∫—Ç–∏–≤–Ω—ã—Ö")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {response.status_code}")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª
        response = requests.get(f"{api_url}/api/alerts/rules", timeout=5)
        if response.status_code == 200:
            data = response.json()
            print(f"üìã –ü—Ä–∞–≤–∏–ª –∞–ª–µ—Ä—Ç–æ–≤: {data.get('count', 0)}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª: {response.status_code}")
        
        return True
        
    except requests.exceptions.ConnectionError:
        print("‚ùå API –∞–ª–µ—Ä—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω)")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è AdvancedAlertingSystem")
    print("=" * 50)
    
    # –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –∞–ª–µ—Ä—Ç–æ–≤
    system_success = test_alerting_system()
    
    # –¢–µ—Å—Ç API
    api_success = test_alerts_api()
    
    print("\n" + "=" * 50)
    print("üìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"  –°–∏—Å—Ç–µ–º–∞ –∞–ª–µ—Ä—Ç–æ–≤: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if system_success else '‚ùå –û—à–∏–±–∫–∞'}")
    print(f"  API –∞–ª–µ—Ä—Ç–æ–≤: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if api_success else '‚ùå –û—à–∏–±–∫–∞'}")
    
    if system_success and api_success:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return True
    else:
        print("\nüí• –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏!")
        return False

if __name__ == '__main__':
    success = main()
    sys.exit(0 if success else 1)