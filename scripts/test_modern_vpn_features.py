#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π VPN - ChaCha20-Poly1305, IPv6 –∑–∞—â–∏—Ç–∞, Kill Switch
"""

import asyncio
import logging
import sys
import os
from datetime import datetime

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_modern_vpn_features():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π VPN"""
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–û–í–†–ï–ú–ï–ù–ù–´–• –§–£–ù–ö–¶–ò–ô VPN")
    print("=" * 60)
    print(f"–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 60)
    
    try:
        # –ò–º–ø–æ—Ä—Ç —Å–∏—Å—Ç–µ–º
        from security.vpn.encryption.modern_encryption import (
            ModernEncryptionSystem, EncryptionAlgorithm, EncryptionMode
        )
        from security.vpn.protection.ipv6_dns_protection import (
            IPv6DNSProtectionSystem, ProtectionLevel
        )
        
        print("1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è...")
        encryption_system = ModernEncryptionSystem("TestModernEncryption")
        
        # –¢–µ—Å—Ç ChaCha20-Poly1305
        print("\n   üîê –¢–µ—Å—Ç ChaCha20-Poly1305:")
        test_data = b"ALADDIN VPN Security Test Data"
        result = encryption_system.encrypt_data(test_data, EncryptionAlgorithm.CHACHA20_POLY1305)
        
        if result.success:
            print(f"      ‚úÖ –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ: {len(result.encrypted_data)} –±–∞–π—Ç")
            print(f"      ‚úÖ Auth Tag: {len(result.auth_tag)} –±–∞–π—Ç")
            print(f"      ‚úÖ Nonce: {len(result.nonce)} –±–∞–π—Ç")
            
            # –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞
            decrypt_result = encryption_system.decrypt_data(
                result.encrypted_data, result.auth_tag, result.nonce,
                result.algorithm, result.key_id
            )
            if decrypt_result.success:
                print(f"      ‚úÖ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞: {decrypt_result.encrypted_data.decode()}")
            else:
                print(f"      ‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏: {decrypt_result.error_message}")
        else:
            print(f"      ‚ùå –û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {result.error_message}")
        
        # –¢–µ—Å—Ç AES-256-GCM
        print("\n   üîê –¢–µ—Å—Ç AES-256-GCM:")
        result = encryption_system.encrypt_data(test_data, EncryptionAlgorithm.AES_256_GCM)
        
        if result.success:
            print(f"      ‚úÖ –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ: {len(result.encrypted_data)} –±–∞–π—Ç")
            print(f"      ‚úÖ Auth Tag: {len(result.auth_tag)} –±–∞–π—Ç")
            
            # –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞
            decrypt_result = encryption_system.decrypt_data(
                result.encrypted_data, result.auth_tag, result.nonce,
                result.algorithm, result.key_id
            )
            if decrypt_result.success:
                print(f"      ‚úÖ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞: {decrypt_result.encrypted_data.decode()}")
            else:
                print(f"      ‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏: {decrypt_result.error_message}")
        else:
            print(f"      ‚ùå –û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {result.error_message}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
        print("\n   üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è:")
        stats = encryption_system.get_encryption_stats()
        for key, value in stats.items():
            print(f"      üìà {key}: {value}")
        
        print("\n2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ IPv6 –∏ DNS –∑–∞—â–∏—Ç—ã...")
        protection_system = IPv6DNSProtectionSystem("TestProtection")
        
        # –¢–µ—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—â–∏—Ç—ã
        print("\n   üõ°Ô∏è –°—Ç–∞—Ç—É—Å –∑–∞—â–∏—Ç—ã:")
        status = protection_system.get_protection_status()
        for key, value in status.items():
            if key != "recent_leaks":
                print(f"      üìä {key}: {value}")
        
        # –¢–µ—Å—Ç –∑–∞—â–∏—Ç—ã
        print("\n   üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—â–∏—Ç—ã:")
        test_results = protection_system.test_protection()
        for key, value in test_results.items():
            if key != "overall_status":
                status_icon = "‚úÖ" if value else "‚ùå"
                print(f"      {status_icon} {key}: {value}")
        
        print(f"\n      üéØ –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: {test_results['overall_status']}")
        
        # –¢–µ—Å—Ç —É—Ä–æ–≤–Ω–µ–π –∑–∞—â–∏—Ç—ã
        print("\n   üìä –¢–µ—Å—Ç —É—Ä–æ–≤–Ω–µ–π –∑–∞—â–∏—Ç—ã:")
        for level in ProtectionLevel:
            protection_system.set_protection_level(level)
            print(f"      üìà {level.value}: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        print("\n3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∂–∏–º–æ–≤ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è...")
        print("\n   üîÑ –¢–µ—Å—Ç —Ä–µ–∂–∏–º–æ–≤ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è:")
        for mode in EncryptionMode:
            encryption_system.set_encryption_mode(mode)
            print(f"      üìà {mode.value}: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        print("\nüéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–û–í–†–ï–ú–ï–ù–ù–´–• –§–£–ù–ö–¶–ò–ô –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
        print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        print("   ‚úÖ ChaCha20-Poly1305 —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ: —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("   ‚úÖ AES-256-GCM —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ: —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("   ‚úÖ IPv6 –∑–∞—â–∏—Ç–∞: –∞–∫—Ç–∏–≤–Ω–∞")
        print("   ‚úÖ DNS –∑–∞—â–∏—Ç–∞: –∞–∫—Ç–∏–≤–Ω–∞")
        print("   ‚úÖ Kill Switch: –≥–æ—Ç–æ–≤")
        print("   ‚úÖ –†–æ—Ç–∞—Ü–∏—è –∫–ª—é—á–µ–π: —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("   ‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É—Ç–µ—á–µ–∫: –∞–∫—Ç–∏–≤–µ–Ω")
        
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ ALADDIN VPN - –°–û–í–†–ï–ú–ï–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
    success = await test_modern_vpn_features()
    
    print("\n" + "=" * 60)
    print(f"–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    if success:
        print("‚úÖ –°–û–í–†–ï–ú–ï–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò VPN –ì–û–¢–û–í–´!")
        print("\nüéØ –ù–û–í–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò ALADDIN VPN:")
        print("1. üîê ChaCha20-Poly1305 - —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –º–æ–±–∏–ª—å–Ω–æ–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ")
        print("2. üõ°Ô∏è IPv6 –∑–∞—â–∏—Ç–∞ - –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ IPv6 —É—Ç–µ—á–µ–∫")
        print("3. üåê DNS –∑–∞—â–∏—Ç–∞ - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ DNS")
        print("4. ‚ö° Kill Switch - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ä–∞–∑—Ä—ã–≤–µ")
        print("5. üîÑ –†–æ—Ç–∞—Ü–∏—è –∫–ª—é—á–µ–π - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–π")
        print("6. üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É—Ç–µ—á–µ–∫ - –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
        print("7. üì± –ú–æ–±–∏–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è - –±—ã—Å—Ç—Ä–∞—è —Ä–∞–±–æ—Ç–∞ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞—Ö")
        print("8. üîí –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å - –∑–∞—â–∏—Ç–∞ –æ—Ç –≤—Å–µ—Ö —É—Ç–µ—á–µ–∫")
    else:
        print("‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–û–í–†–ï–ú–ï–ù–ù–´–• –§–£–ù–ö–¶–ò–ô –ó–ê–í–ï–†–®–ï–ù–û –° –û–®–ò–ë–ö–ê–ú–ò!")
    print("=" * 60)

if __name__ == "__main__":
    asyncio.run(main())
