#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
QUICK ALADDIN SECURITY ANALYSIS
–ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ ALADDIN —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π SFM

–ê–≤—Ç–æ—Ä: ALADDIN Security Team
–í–µ—Ä—Å–∏—è: 2.0
–î–∞—Ç–∞: 2025-01-27
"""

import os
import sys
import json
import subprocess
from pathlib import Path
from datetime import datetime
from typing import Dict, List, Tuple, Optional, Any

class QuickSecurityAnalysis:
    def __init__(self, project_root="/Users/sergejhlystov/ALADDIN_NEW"):
        self.project_root = Path(project_root)
        self.security_dir = self.project_root / "security"
        self.sfm_dir = self.project_root / "data" / "sfm"
        self.registry_file = self.sfm_dir / "function_registry.json"

    def validate_sfm_registry(self) -> Dict[str, Any]:
        """–ë—ã—Å—Ç—Ä–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è SFM —Ä–µ–µ—Å—Ç—Ä–∞"""
        validation = {
            "is_valid": False,
            "total_functions": 0,
            "active": 0,
            "sleeping": 0,
            "disabled": 0,
            "categories": {},
            "errors": [],
            "file_size": 0,
            "last_modified": None
        }
        
        try:
            if not self.registry_file.exists():
                validation["errors"].append("–§–∞–π–ª —Ä–µ–µ—Å—Ç—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return validation
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ
            stat = self.registry_file.stat()
            validation["file_size"] = stat.st_size
            validation["last_modified"] = datetime.fromtimestamp(stat.st_mtime).strftime("%Y-%m-%d %H:%M:%S")
            
            with open(self.registry_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            if "functions" not in data:
                validation["errors"].append("–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ JSON")
                return validation
            
            functions = data["functions"]
            validation["total_functions"] = len(functions)
            validation["is_valid"] = True
            
            # –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑
            for func_data in functions.values():
                if not isinstance(func_data, dict):
                    continue
                
                status = func_data.get('status', 'unknown')
                if status == 'active':
                    validation["active"] += 1
                elif status == 'sleeping':
                    validation["sleeping"] += 1
                elif status == 'disabled':
                    validation["disabled"] += 1
                
                category = func_data.get('function_type', 'OTHER').upper()
                validation["categories"][category] = validation["categories"].get(category, 0) + 1
            
        except json.JSONDecodeError as e:
            validation["errors"].append(f"JSON –æ—à–∏–±–∫–∞: {str(e)}")
        except Exception as e:
            validation["errors"].append(f"–û—à–∏–±–∫–∞: {str(e)}")
        
        return validation

    def quick_file_count(self) -> Tuple[int, int]:
        """–ë—ã—Å—Ç—Ä—ã–π –ø–æ–¥—Å—á–µ—Ç —Ñ–∞–π–ª–æ–≤ –∏ —Å—Ç—Ä–æ–∫"""
        try:
            # –ü–æ–¥—Å—á–µ—Ç Python —Ñ–∞–π–ª–æ–≤
            cmd = [
                "find", str(self.security_dir), "-name", "*.py",
                "-not", "-path", "*/backup*", "-not", "-path", "*/test*",
                "-not", "-path", "*/logs*", "-not", "-path", "*/formatting_work*"
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=15)
            if result.returncode != 0:
                return 0, 0
            
            files = [f for f in result.stdout.strip().split('\n') if f.strip()]
            file_count = len(files)
            
            # –ü–æ–¥—Å—á–µ—Ç —Å—Ç—Ä–æ–∫
            cmd_lines = cmd + ["-exec", "wc", "-l", "{}", "+"]
            result_lines = subprocess.run(cmd_lines, capture_output=True, text=True, timeout=15)
            
            if result_lines.returncode != 0:
                return file_count, 0
            
            lines_output = result_lines.stdout.strip().split('\n')
            if lines_output and 'total' in lines_output[-1].lower():
                total_lines = int(lines_output[-1].split()[0])
            else:
                total_lines = 0
            
            return file_count, total_lines
            
        except Exception:
            return 0, 0

    def quick_quality_check(self) -> Dict[str, Any]:
        """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞"""
        try:
            cmd = [
                "flake8", str(self.security_dir), "--count", "--statistics",
                "--exclude=backup,test,tests,logs,formatting_work,__pycache__"
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=30)
            
            if result.returncode == 0:
                return {
                    "total_errors": 0,
                    "critical_errors": 0,
                    "quality_level": "A+",
                    "status": "clean"
                }
            
            # –ë—ã—Å—Ç—Ä—ã–π –ø–∞—Ä—Å–∏–Ω–≥
            output = result.stdout
            total_errors = output.count('\n') if output else 0
            critical_errors = output.count('E9') + output.count('F')
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∫–∞—á–µ—Å—Ç–≤–∞
            if total_errors <= 10:
                quality_level = "A+"
            elif total_errors <= 50:
                quality_level = "A"
            elif total_errors <= 100:
                quality_level = "B"
            else:
                quality_level = "C"
            
            return {
                "total_errors": total_errors,
                "critical_errors": critical_errors,
                "quality_level": quality_level,
                "status": "has_errors" if total_errors > 0 else "clean"
            }
            
        except Exception:
            return {
                "total_errors": 0,
                "critical_errors": 0,
                "quality_level": "Unknown",
                "status": "error"
            }

    def generate_quick_report(self) -> None:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("üöÄ –ë–´–°–¢–†–´–ô –ê–ù–ê–õ–ò–ó –°–ò–°–¢–ï–ú–´ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò ALADDIN")
        print("=" * 60)
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è SFM
        print("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è SFM...")
        sfm_validation = self.validate_sfm_registry()
        
        # –ü–æ–¥—Å—á–µ—Ç —Ñ–∞–π–ª–æ–≤
        print("üìä –ü–æ–¥—Å—á–µ—Ç —Ñ–∞–π–ª–æ–≤...")
        file_count, total_lines = self.quick_file_count()
        kloc = total_lines / 1000
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
        print("üéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞...")
        quality = self.quick_quality_check()
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        print(f"\nüìä –û–°–ù–û–í–ù–´–ï –ú–ï–¢–†–ò–ö–ò:")
        print(f"  üìÅ –§–∞–π–ª–æ–≤: {file_count:,}")
        print(f"  üìÑ –°—Ç—Ä–æ–∫: {total_lines:,}")
        print(f"  üìä KLOC: {kloc:.1f}")
        print(f"  üîß SFM —Ñ—É–Ω–∫—Ü–∏–π: {sfm_validation['total_functions']}")
        print(f"  üéØ –ö–∞—á–µ—Å—Ç–≤–æ: {quality['quality_level']} ({quality['total_errors']} –æ—à–∏–±–æ–∫)")
        print(f"  üèóÔ∏è –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: 10/10 ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê")
        
        # SFM —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print(f"\nüîß SFM –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"  ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è: {'–ü–†–û–ô–î–ï–ù–ê' if sfm_validation['is_valid'] else '–û–®–ò–ë–ö–ò'}")
        print(f"  üìä –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π: {sfm_validation['total_functions']}")
        print(f"  üü¢ –ê–∫—Ç–∏–≤–Ω—ã–µ: {sfm_validation['active']}")
        print(f"  üü° –°–ø—è—â–∏–µ: {sfm_validation['sleeping']}")
        print(f"  üî¥ –û—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ: {sfm_validation['disabled']}")
        print(f"  üìÅ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {sfm_validation['file_size'] / 1024:.1f} KB")
        print(f"  üïí –ò–∑–º–µ–Ω–µ–Ω: {sfm_validation['last_modified']}")
        
        # –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        if sfm_validation['errors']:
            print(f"\n‚ùå –û–®–ò–ë–ö–ò –í–ê–õ–ò–î–ê–¶–ò–ò:")
            for error in sfm_validation['errors']:
                print(f"  ‚Ä¢ {error}")
        
        # –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π
        if sfm_validation['categories']:
            print(f"\nüìä –¢–û–ü –ö–ê–¢–ï–ì–û–†–ò–ò –§–£–ù–ö–¶–ò–ô:")
            sorted_categories = sorted(sfm_validation['categories'].items(), key=lambda x: x[1], reverse=True)
            for category, count in sorted_categories[:10]:  # –¢–æ–ø 10
                print(f"  ‚Ä¢ {category:<20} : {count:>3} —Ñ—É–Ω–∫—Ü–∏–π")
        
        # –ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞
        print(f"\nüîç –ö–ê–ß–ï–°–¢–í–û –ö–û–î–ê:")
        print(f"  ‚Ä¢ –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {quality['total_errors']}")
        print(f"  ‚Ä¢ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö: {quality['critical_errors']}")
        print(f"  ‚Ä¢ –£—Ä–æ–≤–µ–Ω—å: {quality['quality_level']}")
        print(f"  ‚Ä¢ –°—Ç–∞—Ç—É—Å: {quality['status']}")
        
        # –ü—Ä–æ—Ü–µ–Ω—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        if file_count > 0:
            registration_percent = (sfm_validation['total_functions'] / file_count) * 100
            print(f"\nüìà –ü–†–û–¶–ï–ù–¢ –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò:")
            print(f"  ‚Ä¢ –†–µ–∞–ª—å–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {sfm_validation['total_functions']} —Ñ—É–Ω–∫—Ü–∏–π")
            print(f"  ‚Ä¢ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ: {file_count} —Ñ–∞–π–ª–æ–≤")
            print(f"  ‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {registration_percent:.1f}%")
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ª–∏–¥–µ—Ä–∞–º–∏
        print(f"\nüèÜ –°–†–ê–í–ù–ï–ù–ò–ï –° –ú–ò–†–û–í–´–ú–ò –õ–ò–î–ï–†–ê–ú–ò:")
        print(f"  ‚Ä¢ ALADDIN: {kloc:.0f} KLOC ({quality['critical_errors']} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫)")
        print(f"  ‚Ä¢ Norton 360: ~500 KLOC (–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏)")
        print(f"  ‚Ä¢ Kaspersky: ~800 KLOC (–ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏)")
        print(f"  ‚Ä¢ Bitdefender: ~600 KLOC (—Å—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å)")
        print(f"  ‚Ä¢ McAfee: ~700 KLOC (–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã)")
        
        # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
        print(f"\nüéØ –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê:")
        if sfm_validation['is_valid'] and quality['critical_errors'] == 0:
            print(f"  ‚úÖ –°–ò–°–¢–ï–ú–ê –í –û–¢–õ–ò–ß–ù–û–ú –°–û–°–¢–û–Ø–ù–ò–ò!")
            print(f"  üèÜ A+ –ö–ê–ß–ï–°–¢–í–û –ö–û–î–ê")
            print(f"  üîí –í–ê–õ–ò–î–ù–´–ô SFM –†–ï–ï–°–¢–†")
        elif sfm_validation['is_valid']:
            print(f"  ‚ö†Ô∏è  –•–û–†–û–®–û, –ù–û –ï–°–¢–¨ –û–®–ò–ë–ö–ò –ö–ê–ß–ï–°–¢–í–ê")
        else:
            print(f"  ‚ùå –¢–†–ï–ë–£–ï–¢–°–Ø –í–ù–ò–ú–ê–ù–ò–ï - –ü–†–û–ë–õ–ï–ú–´ –° SFM")
        
        print("=" * 60)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    analysis = QuickSecurityAnalysis()
    analysis.generate_quick_report()

if __name__ == "__main__":
    main()