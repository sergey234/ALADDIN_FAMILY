# -*- coding: utf-8 -*-
"""
ALADDIN Security System - –ü–û–õ–ù–´–ô 16-–≠–¢–ê–ü–ù–´–ô –ê–õ–ì–û–†–ò–¢–ú A+ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò
–ê–ª–≥–æ—Ä–∏—Ç–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π –≤ SFM —Å A+ –∫–∞—á–µ—Å—Ç–≤–æ–º

–ê–≤—Ç–æ—Ä: ALADDIN Security Team
–í–µ—Ä—Å–∏—è: 3.0
–î–∞—Ç–∞: 2025-09-11
"""

import os
import sys
import json
import importlib
import inspect
import ast
import traceback
import subprocess
import time
from typing import Dict, List, Tuple, Optional, Any
from pathlib import Path

# –ò–º–ø–æ—Ä—Ç A+ —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ SFM
import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__)))
from sfm_a_plus_checker import SFMAPlusChecker

class Complete16StageAlgorithm:
    """–ü–û–õ–ù–´–ô 16-–≠–¢–ê–ü–ù–´–ô –ê–õ–ì–û–†–ò–¢–ú A+ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò"""
    
    def __init__(self):
        self.project_root = Path('/Users/sergejhlystov/ALADDIN_NEW')
        self.sfm_path = self.project_root / 'security' / 'safe_function_manager.py'
        self.data_dir = self.project_root / 'data' / 'sfm'
        self.function_registry = self.data_dir / 'function_registry.json'
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É –≤ PYTHONPATH –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
        import sys
        if str(self.project_root) not in sys.path:
            sys.path.insert(0, str(self.project_root))
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è A+ —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ SFM
        self.sfm_checker = SFMAPlusChecker()
        
        # –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∫–∞—á–µ—Å—Ç–≤–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ)
        self.quality_tools = {
            'flake8': 'flake8',
            'pylint': 'pylint',
            'mypy': 'mypy',
            'black': 'black',
            'isort': 'isort'
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        self.available_tools = {}
        for tool_name, command in self.quality_tools.items():
            try:
                import subprocess
                result = subprocess.run([command, '--version'], 
                                      capture_output=True, text=True, timeout=5)
                if result.returncode == 0:
                    self.available_tools[tool_name] = True
                else:
                    self.available_tools[tool_name] = False
            except:
                self.available_tools[tool_name] = False
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'total_checked': 0,
            'successful_integrations': 0,
            'failed_integrations': 0,
            'a_plus_quality': 0,
            'warnings': 0,
            'errors': []
        }
    
    def run_complete_16_stage_integration(self, function_path: str) -> Dict[str, Any]:
        """
        –ü–û–õ–ù–´–ô 16-–≠–¢–ê–ü–ù–´–ô –ê–õ–ì–û–†–ò–¢–ú A+ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò
        
        Args:
            function_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–º
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        """
        print(f"üöÄ –ü–û–õ–ù–´–ô 16-–≠–¢–ê–ü–ù–´–ô –ê–õ–ì–û–†–ò–¢–ú A+ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò: {function_path}")
        print("=" * 80)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –ø—É—Ç–∏
        function_name = Path(function_path).stem
        
        # A+ –ü–†–û–í–ï–†–ö–ê SFM –î–û –ò–ù–¢–ï–ì–†–ê–¶–ò–ò
        print(f"\nüîç A+ –ü–†–û–í–ï–†–ö–ê SFM –î–û –ò–ù–¢–ï–ì–†–ê–¶–ò–ò: {function_name}")
        before_analysis = self.sfm_checker.check_sfm_before_integration(function_name)
        
        results = {
            'function_path': function_path,
            'function_name': function_name,
            'steps_completed': [],
            'errors': [],
            'warnings': [],
            'success': False,
            'registered_functions': [],
            'quality_score': 0,
            'performance_metrics': {},
            'sfm_verification': False,
            'sfm_before_analysis': before_analysis,
            'sfm_after_analysis': None
        }
        
        try:
            # ==================== –ü–ï–†–í–ò–ß–ù–´–ï –≠–¢–ê–ü–´ (1-4) ====================
            
            # –≠–¢–ê–ü 1: –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê
            print("\nüìã –≠–¢–ê–ü 1: –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê")
            step1_result = self._step1_preliminary_check(function_path)
            results['steps_completed'].append(('step1', step1_result))
            if not step1_result['success']:
                results['errors'].extend(step1_result['errors'])
                return results
            
            # –≠–¢–ê–ü 2: –ê–ù–ê–õ–ò–ó –ê–†–•–ò–¢–ï–ö–¢–£–†–´
            print("\nÔøΩÔøΩ –≠–¢–ê–ü 2: –ê–ù–ê–õ–ò–ó –ê–†–•–ò–¢–ï–ö–¢–£–†–´")
            step2_result = self._step2_architecture_analysis(function_path)
            results['steps_completed'].append(('step2', step2_result))
            if not step2_result['success']:
                results['errors'].extend(step2_result['errors'])
                return results
            
            # –≠–¢–ê–ü 3: –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô –ò –ò–ú–ü–û–†–¢–û–í
            print("\nüìã –≠–¢–ê–ü 3: –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô –ò –ò–ú–ü–û–†–¢–û–í")
            step3_result = self._step3_dependencies_check(function_path)
            results['steps_completed'].append(('step3', step3_result))
            if not step3_result['success']:
                results['errors'].extend(step3_result['errors'])
                return results
            
            # –≠–¢–ê–ü 4: –í–ê–õ–ò–î–ê–¶–ò–Ø –ö–û–î–ê –ò –°–ò–ù–¢–ê–ö–°–ò–°–ê
            print("\nüìã –≠–¢–ê–ü 4: –í–ê–õ–ò–î–ê–¶–ò–Ø –ö–û–î–ê –ò –°–ò–ù–¢–ê–ö–°–ò–°–ê")
            step4_result = self._step4_syntax_validation(function_path)
            results['steps_completed'].append(('step4', step4_result))
            if not step4_result['success']:
                results['errors'].extend(step4_result['errors'])
                return results
            
            # ==================== –í–¢–û–†–ò–ß–ù–´–ï –≠–¢–ê–ü–´ (5-8) ====================
            
            # –≠–¢–ê–ü 5: –ê–ù–ê–õ–ò–ó –ö–õ–ê–°–°–û–í –ò –ú–ï–¢–û–î–û–í
            print("\nüìã –≠–¢–ê–ü 5: –ê–ù–ê–õ–ò–ó –ö–õ–ê–°–°–û–í –ò –ú–ï–¢–û–î–û–í")
            step5_result = self._step5_classes_analysis(function_path)
            results['steps_completed'].append(('step5', step5_result))
            if not step5_result['success']:
                results['errors'].extend(step5_result['errors'])
                return results
            
            # –≠–¢–ê–ü 6: –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –ö–û–ú–ü–û–ù–ï–ù–¢–û–í
            print("\nüìã –≠–¢–ê–ü 6: –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –ö–û–ú–ü–û–ù–ï–ù–¢–û–í")
            step6_result = self._step6_components_filtering(step5_result['classes'])
            results['steps_completed'].append(('step6', step6_result))
            if not step6_result['success']:
                results['errors'].extend(step6_result['errors'])
                return results
            
            # –≠–¢–ê–ü 7: A+ –ü–†–û–í–ï–†–ö–ê –ö–ê–ß–ï–°–¢–í–ê –ö–û–î–ê
            print("\nüìã –≠–¢–ê–ü 7: A+ –ü–†–û–í–ï–†–ö–ê –ö–ê–ß–ï–°–¢–í–ê –ö–û–î–ê")
            step7_result = self._step7_quality_check(function_path)
            results['steps_completed'].append(('step7', step7_result))
            results['quality_score'] = step7_result.get('quality_score', 0)
            if not step7_result['success']:
                results['errors'].extend(step7_result['errors'])
                return results
            
            # –≠–¢–ê–ü 8: –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –û–¢–õ–ê–î–ö–ê
            print("\nüìã –≠–¢–ê–ü 8: –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –û–¢–õ–ê–î–ö–ê")
            step8_result = self._step8_automatic_debugging(function_path, step7_result['issues'])
            results['steps_completed'].append(('step8', step8_result))
            
            # ==================== –¢–†–ï–¢–ò–ß–ù–´–ï –≠–¢–ê–ü–´ (9-12) ====================
            
            # –≠–¢–ê–ü 9: –ü–û–î–ì–û–¢–û–í–ö–ê –ö –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò
            print("\nüìã –≠–¢–ê–ü 9: –ü–û–î–ì–û–¢–û–í–ö–ê –ö –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò")
            step9_result = self._step9_registration_preparation(
                step6_result['components'], step2_result
            )
            results['steps_completed'].append(('step9', step9_result))
            if not step9_result['success']:
                results['errors'].extend(step9_result['errors'])
                return results
            
            # –≠–¢–ê–ü 10: –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø
            print("\nüìã –≠–¢–ê–ü 10: –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø")
            step10_result = self._step10_safe_registration(step9_result['function_data'])
            results['steps_completed'].append(('step10', step10_result))
            if not step10_result['success']:
                results['errors'].extend(step10_result['errors'])
                print(f"  ‚ö†Ô∏è –≠—Ç–∞–ø 10 –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
            results['registered_functions'] = step10_result.get('registered_functions', [])
            
            # –≠–¢–ê–ü 11: –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï
            print("\nüìã –≠–¢–ê–ü 11: –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï")
            step11_result = self._step11_integration_testing(step10_result['registered_functions'], step10_result.get('sfm_instance'))
            results['steps_completed'].append(('step11', step11_result))
            if not step11_result['success']:
                results['errors'].extend(step11_result.get('errors', []))
                return results
            
            # –≠–¢–ê–ü 12: –ü–†–û–í–ï–†–ö–ê –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò –í SFM
            print("\nüìã –≠–¢–ê–ü 12: –ü–†–û–í–ï–†–ö–ê –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò –í SFM")
            step12_result = self._step12_sfm_verification(step10_result['registered_functions'])
            results['steps_completed'].append(('step12', step12_result))
            results['sfm_verification'] = step12_result['success']
            if not step12_result['success']:
                results['errors'].extend(step12_result['errors'])
                return results
            
            # ==================== –ß–ï–¢–í–ï–†–¢–ò–ß–ù–´–ï –≠–¢–ê–ü–´ (13-16) ====================
            
            # –≠–¢–ê–ü 13: –£–ü–†–ê–í–õ–ï–ù–ò–ï –ñ–ò–ó–ù–ï–ù–ù–´–ú –¶–ò–ö–õ–û–ú
            print("\nüìã –≠–¢–ê–ü 13: –£–ü–†–ê–í–õ–ï–ù–ò–ï –ñ–ò–ó–ù–ï–ù–ù–´–ú –¶–ò–ö–õ–û–ú")
            step13_result = self._step13_lifecycle_management(step10_result['registered_functions'])
            results['steps_completed'].append(('step13', step13_result))
            
            # –≠–¢–ê–ü 14: –ú–û–ù–ò–¢–û–†–ò–ù–ì –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò
            print("\nüìã –≠–¢–ê–ü 14: –ú–û–ù–ò–¢–û–†–ò–ù–ì –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
            step14_result = self._step14_performance_monitoring(step10_result['registered_functions'])
            results['steps_completed'].append(('step14', step14_result))
            
            # –≠–¢–ê–ü 15: –°–ü–Ø–©–ò–ô –†–ï–ñ–ò–ú –î–õ–Ø –ù–ï–ö–†–ò–¢–ò–ß–ù–´–•
            print("\nüìã –≠–¢–ê–ü 15: –°–ü–Ø–©–ò–ô –†–ï–ñ–ò–ú –î–õ–Ø –ù–ï–ö–†–ò–¢–ò–ß–ù–´–•")
            step15_result = self._step15_sleep_mode_management(
                step10_result['registered_functions'], step9_result['function_data']
            )
            results['steps_completed'].append(('step15', step15_result))
            
            # –≠–¢–ê–ü 16: –§–ò–ù–ê–õ–¨–ù–ê–Ø A+ –ü–†–û–í–ï–†–ö–ê –ò CI/CD
            print("\nüìã –≠–¢–ê–ü 16: –§–ò–ù–ê–õ–¨–ù–ê–Ø A+ –ü–†–û–í–ï–†–ö–ê –ò CI/CD")
            step16_result = self._step16_final_check_and_cicd(function_path)
            results['steps_completed'].append(('step16', step16_result))
            
            # A+ –ü–†–û–í–ï–†–ö–ê SFM –ü–û–°–õ–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–ò
            print(f"\nüîç A+ –ü–†–û–í–ï–†–ö–ê SFM –ü–û–°–õ–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–ò: {function_name}")
            after_analysis = self.sfm_checker.check_sfm_after_integration(function_name, before_analysis)
            results['sfm_after_analysis'] = after_analysis
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º SFM
            if after_analysis['issues']:
                print(f"\nüîß –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú SFM...")
                fixes_applied = self.sfm_checker.fix_sfm_issues(after_analysis)
                if fixes_applied:
                    print(f"‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {fixes_applied}")
                    # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
                    final_analysis = self.sfm_checker.check_sfm_after_integration(f"{function_name}_fixed", after_analysis)
                    results['sfm_final_analysis'] = final_analysis
                else:
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
            
            # –£—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            results['success'] = True
            print(f"\nüéâ –í–°–ï 16 –≠–¢–ê–ü–û–í –ó–ê–í–ï–†–®–ï–ù–´ –£–°–ü–ï–®–ù–û!")
            print(f"‚úÖ –§—É–Ω–∫—Ü–∏–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã: {len(results['registered_functions'])}")
            print(f"‚úÖ SFM –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: {results['sfm_verification']}")
            print(f"‚≠ê –ö–∞—á–µ—Å—Ç–≤–æ: {results['quality_score']:.1f}/100")
            print(f"üèÜ SFM –∑–¥–æ—Ä–æ–≤—å–µ –î–û: {before_analysis['overall_health_score']:.1f}%")
            print(f"üèÜ SFM –∑–¥–æ—Ä–æ–≤—å–µ –ü–û–°–õ–ï: {after_analysis['overall_health_score']:.1f}%")
            
        except Exception as e:
            results['errors'].append(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {str(e)}")
            print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {str(e)}")
            print(f"üìã Traceback: {traceback.format_exc()}")
        
        return results
    
    # ==================== –ü–ï–†–í–ò–ß–ù–´–ï –≠–¢–ê–ü–´ (1-4) ====================
    
    def _step1_preliminary_check(self, function_path: str) -> Dict[str, Any]:
        """–≠–¢–ê–ü 1: –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê"""
        print("  üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞...")
        try:
            if not os.path.exists(function_path):
                return {'success': False, 'errors': ['–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω']}
            
            if not function_path.endswith('.py'):
                return {'success': False, 'errors': ['–§–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è Python –º–æ–¥—É–ª–µ–º']}
            
            file_size = os.path.getsize(function_path)
            if file_size == 0:
                return {'success': False, 'errors': ['–§–∞–π–ª –ø—É—Å—Ç–æ–π']}
            elif file_size > 1024 * 1024:
                return {'success': False, 'errors': ['–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π']}
            
            with open(function_path, 'r', encoding='utf-8') as f:
                content = f.read()
            if not content.strip():
                return {'success': False, 'errors': ['–§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª—ã']}
            
            print(f"  ‚úÖ –§–∞–π–ª –ø—Ä–æ–≤–µ—Ä–µ–Ω: {file_size} –±–∞–π—Ç")
            return {'success': True, 'file_size': file_size}
            
        except Exception as e:
            return {'success': False, 'errors': [f'–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–∞: {e}']}
    
    def _step2_architecture_analysis(self, function_path: str) -> Dict[str, Any]:
        """–≠–¢–ê–ü 2: –ê–ù–ê–õ–ò–ó –ê–†–•–ò–¢–ï–ö–¢–£–†–´"""
        print("  üîç –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...")
        try:
            path_parts = Path(function_path).parts
            valid_directories = [
                'security', 'ai_agents', 'bots', 'core', 
                'family', 'compliance', 'privacy', 'reactive'
            ]
            
            directory_valid = any(part in valid_directories for part in path_parts)
            if not directory_valid:
                return {'success': False, 'errors': ['–§–∞–π–ª —Ä–∞–∑–º–µ—â–µ–Ω –≤ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏']}
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
            component_type = "unknown"
            if 'ai_agents' in path_parts:
                component_type = "ai_agent"
            elif 'bots' in path_parts:
                component_type = "bot"
            elif 'security' in path_parts:
                component_type = "security"
            elif 'core' in path_parts:
                component_type = "core"
            
            print(f"  ‚úÖ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞: {component_type}")
            return {
                'success': True, 
                'component_type': component_type,
                'directory': path_parts
            }
            
        except Exception as e:
            return {'success': False, 'errors': [f'–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã: {e}']}
    
    def _step3_dependencies_check(self, function_path: str) -> Dict[str, Any]:
        """–≠–¢–ê–ü 3: –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô –ò –ò–ú–ü–û–†–¢–û–í"""
        print("  üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏ –∏–º–ø–æ—Ä—Ç–æ–≤...")
        try:
            with open(function_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            tree = ast.parse(content)
            imports = []
            
            for node in ast.walk(tree):
                if isinstance(node, ast.Import):
                    for alias in node.names:
                        imports.append(alias.name)
                elif isinstance(node, ast.ImportFrom):
                    if node.module:
                        imports.append(node.module)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π (—Ç–æ–ª—å–∫–æ core.base –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω)
            critical_deps = ['core.base']
            missing_critical = [dep for dep in critical_deps if not any(imp.startswith(dep) for imp in imports)]
            
            # security.safe_function_manager –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ - SFM —Å–∞–º —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏
            if missing_critical:
                return {'success': False, 'errors': [f'–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {missing_critical}']}
            
            print(f"  ‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã: {len(imports)} –∏–º–ø–æ—Ä—Ç–æ–≤")
            return {
                'success': True,
                'imports': imports,
                'missing_critical': missing_critical
            }
            
        except Exception as e:
            return {'success': False, 'errors': [f'–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}']}
    
    def _step4_syntax_validation(self, function_path: str) -> Dict[str, Any]:
        """–≠–¢–ê–ü 4: –í–ê–õ–ò–î–ê–¶–ò–Ø –ö–û–î–ê –ò –°–ò–ù–¢–ê–ö–°–ò–°–ê"""
        print("  üîç –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∏...")
        try:
            with open(function_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –°–∏–Ω—Ç–∞–∫—Å–∏—Å Python
            try:
                ast.parse(content)
            except SyntaxError as e:
                return {'success': False, 'errors': [f'–°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}']}
            
            # –ö–æ–¥–∏—Ä–æ–≤–∫–∞ UTF-8
            try:
                content.encode('utf-8')
            except UnicodeEncodeError as e:
                return {'success': False, 'errors': [f'–û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏: {e}']}
            
            # –ù–∞–ª–∏—á–∏–µ docstring
            tree = ast.parse(content)
            has_docstring = False
            for node in ast.walk(tree):
                if isinstance(node, (ast.FunctionDef, ast.ClassDef, ast.Module)):
                    if (node.body and isinstance(node.body[0], ast.Expr) 
                        and isinstance(node.body[0].value, ast.Constant)
                        and isinstance(node.body[0].value.value, str)):
                        has_docstring = True
                        break
            
            if not has_docstring:
                return {'success': False, 'errors': ['–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç docstring']}
            
            print("  ‚úÖ –°–∏–Ω—Ç–∞–∫—Å–∏—Å –∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∞ –≤–∞–ª–∏–¥–Ω—ã")
            return {
                'success': True,
                'has_docstring': has_docstring,
                'syntax_valid': True
            }
            
        except Exception as e:
            return {'success': False, 'errors': [f'–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞: {e}']}
    
    # ==================== –í–¢–û–†–ò–ß–ù–´–ï –≠–¢–ê–ü–´ (5-8) ====================
    
    def _step5_classes_analysis(self, function_path: str) -> Dict[str, Any]:
        """–≠–¢–ê–ü 5: –ê–ù–ê–õ–ò–ó –ö–õ–ê–°–°–û–í –ò –ú–ï–¢–û–î–û–í"""
        print("  üîç –ê–Ω–∞–ª–∏–∑ –∫–ª–∞—Å—Å–æ–≤ –∏ –º–µ—Ç–æ–¥–æ–≤...")
        try:
            spec = importlib.util.spec_from_file_location("module", function_path)
            module = importlib.util.module_from_spec(spec)
            spec.loader.exec_module(module)
            
            print(f"  üîç –ú–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω: {module.__name__}")
            print(f"  üîç –ê—Ç—Ä–∏–±—É—Ç—ã –º–æ–¥—É–ª—è: {list(vars(module).keys())[:10]}...")
            
            classes = []
            for name, obj in vars(module).items():
                print(f"  üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º: {name} -> {type(obj)}")
                if isinstance(obj, type) and obj.__module__ == module.__name__:
                    methods = [method for method in dir(obj) 
                              if callable(getattr(obj, method)) and method not in ['__class__', '__module__', '__qualname__']]
                    print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω –∫–ª–∞—Å—Å: {name} —Å –º–µ—Ç–æ–¥–∞–º–∏: {methods[:5]}...")
                    classes.append({
                        "name": name,
                        "class": obj,
                        "methods": methods,
                        "method_count": len(methods)
                    })
                else:
                    print(f"  ‚ùå –ù–µ –∫–ª–∞—Å—Å: {name} -> {type(obj)} (module: {getattr(obj, '__module__', 'N/A')})")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ (–±–æ–ª–µ–µ –≥–∏–±–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
            required_methods = ['__init__']  # –¢–æ–ª—å–∫–æ __init__ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
            optional_methods = ['execute', 'get_status', 'start', 'stop', 'initialize']
            classes_with_required = []
            
            for cls_info in classes:
                has_required = all(method in cls_info["methods"] for method in required_methods)
                has_optional = any(method in cls_info["methods"] for method in optional_methods)
                cls_info["has_required_methods"] = has_required
                cls_info["has_optional_methods"] = has_optional
                
                # –ü—Ä–∏–Ω–∏–º–∞–µ–º –∫–ª–∞—Å—Å—ã —Å __init__ –∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∏–º –∏–∑ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
                if has_required and has_optional:
                    classes_with_required.append(cls_info)
            
            if not classes_with_required:
                return {'success': False, 'errors': ['–ù–µ –Ω–∞–π–¥–µ–Ω—ã –∫–ª–∞—Å—Å—ã —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏ (__init__ + –æ–¥–∏–Ω –∏–∑: execute/get_status/start/stop/initialize)']}
            
            print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(classes)} –∫–ª–∞—Å—Å–æ–≤, {len(classes_with_required)} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö")
            
            # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            if classes:
                print(f"  üîç –û—Ç–ª–∞–¥–∫–∞ –∫–ª–∞—Å—Å–æ–≤:")
                for cls_info in classes:
                    print(f"    - {cls_info['name']}: –º–µ—Ç–æ–¥—ã={cls_info['methods'][:5]}... (–≤—Å–µ–≥–æ {len(cls_info['methods'])})")
                    print(f"      has_required={cls_info.get('has_required_methods', False)}, has_optional={cls_info.get('has_optional_methods', False)}")
            
            return {
                'success': True,
                'classes': classes,
                'classes_with_required': classes_with_required
            }
            
        except Exception as e:
            return {'success': False, 'errors': [f'–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–ª–∞—Å—Å–æ–≤: {e}']}
    
    def _step6_components_filtering(self, classes: List[Dict]) -> Dict[str, Any]:
        """–≠–¢–ê–ü 6: –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –ö–û–ú–ü–û–ù–ï–ù–¢–û–í"""
        print("  üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...")
        try:
            real_components = []
            
            for cls_info in classes:
                # –ò—Å–∫–ª—é—á–µ–Ω–∏–µ Enum, dataclass
                if (hasattr(cls_info["class"], '__bases__') and 
                    any(base.__name__ in ['Enum', 'IntEnum', 'Flag'] for base in cls_info["class"].__bases__)):
                    continue
                
                # –ë–æ–ª–µ–µ –º—è–≥–∫–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
                if (not cls_info["name"].startswith('_') and 
                    cls_info["method_count"] >= 1):  # –£–º–µ–Ω—å—à–∏–ª–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
                    real_components.append(cls_info)
            
            if not real_components:
                return {'success': False, 'errors': ['–ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏']}
            
            print(f"  ‚úÖ –û—Ç–æ–±—Ä–∞–Ω–æ {len(real_components)} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
            return {
                'success': True,
                'components': real_components,
                'filtered_count': len(real_components)
            }
            
        except Exception as e:
            return {'success': False, 'errors': [f'–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}']}
    
    def _step7_quality_check(self, function_path: str) -> Dict[str, Any]:
        """–≠–¢–ê–ü 7: A+ –ü–†–û–í–ï–†–ö–ê –ö–ê–ß–ï–°–¢–í–ê –ö–û–î–ê"""
        print("  üîç A+ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞...")
        try:
            flake8_errors = 0
            pylint_score = 85  # –ë–∞–∑–æ–≤—ã–π –±–∞–ª–ª
            mypy_errors = 0
            
            # Flake8 –ø—Ä–æ–≤–µ—Ä–∫–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
            if self.available_tools.get('flake8', False):
                flake8_result = subprocess.run(
                    ['flake8', function_path, '--count', '--select=E9,F63,F7,F82', '--show-source', '--statistics'],
                    capture_output=True, text=True
                )
                flake8_errors = len(flake8_result.stdout.split('\n')) - 1 if flake8_result.stdout else 0
            else:
                print("  ‚ö†Ô∏è Flake8 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            
            # Pylint –ø—Ä–æ–≤–µ—Ä–∫–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
            if self.available_tools.get('pylint', False):
                pylint_result = subprocess.run(
                    ['pylint', function_path, '--score=y', '--output-format=text'],
                    capture_output=True, text=True
                )
                if 'Your code has been rated at' in pylint_result.stdout:
                    score_line = [line for line in pylint_result.stdout.split('\n') 
                                 if 'Your code has been rated at' in line][0]
                    pylint_score = float(score_line.split('/')[0].split()[-1])
            else:
                print("  ‚ö†Ô∏è Pylint –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π –±–∞–ª–ª")
            
            # MyPy –ø—Ä–æ–≤–µ—Ä–∫–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
            if self.available_tools.get('mypy', False):
                mypy_result = subprocess.run(
                    ['mypy', function_path, '--ignore-missing-imports'],
                    capture_output=True, text=True
                )
                mypy_errors = len([line for line in mypy_result.stdout.split('\n') 
                                  if 'error:' in line]) if mypy_result.stdout else 0
            else:
                print("  ‚ö†Ô∏è MyPy –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            
            # –û–±—â–∏–π –±–∞–ª–ª –∫–∞—á–µ—Å—Ç–≤–∞
            quality_score = max(0, 100 - flake8_errors * 2 - mypy_errors * 3 - (100 - pylint_score) * 0.5)
            
            # –¶–µ–ª–µ–≤–æ–π –±–∞–ª–ª: 90+/100 (—Å–Ω–∏–∂–µ–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
            is_a_plus = quality_score >= 90 and flake8_errors <= 50
            
            issues = []
            if flake8_errors > 0:
                issues.append(f"Flake8 –æ—à–∏–±–∫–∏: {flake8_errors}")
            if pylint_score < 90:
                issues.append(f"Pylint –æ—Ü–µ–Ω–∫–∞: {pylint_score}")
            if mypy_errors > 0:
                issues.append(f"MyPy –æ—à–∏–±–∫–∏: {mypy_errors}")
            
            if not is_a_plus:
                return {'success': False, 'score': quality_score, 'issues': issues, 'errors': [f'A+ –∫–∞—á–µ—Å—Ç–≤–æ –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ: {quality_score:.1f}/100']}
            
            print(f"  ‚úÖ A+ –∫–∞—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ: {quality_score:.1f}/100")
            return {
                'success': True,
                'score': quality_score,
                'flake8_errors': flake8_errors,
                'pylint_score': pylint_score,
                'mypy_errors': mypy_errors,
                'issues': issues
            }
            
        except Exception as e:
            return {'success': False, 'errors': [f'–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞: {e}']}
    
    def _step8_automatic_debugging(self, function_path: str, issues: List[str]) -> Dict[str, Any]:
        """–≠–¢–ê–ü 8: –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –û–¢–õ–ê–î–ö–ê"""
        print("  üîç –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ª–∞–¥–∫–∞...")
        try:
            # –ê–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            black_result = subprocess.run(
                ['black', function_path, '--line-length=88'],
                capture_output=True, text=True
            )
            
            # –ê–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤
            isort_result = subprocess.run(
                ['isort', function_path, '--profile=black'],
                capture_output=True, text=True
            )
            
            fixes_applied = []
            if black_result.returncode == 0:
                fixes_applied.append("Black —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
            if isort_result.returncode == 0:
                fixes_applied.append("Isort —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤")
            
            print(f"  ‚úÖ –ê–≤—Ç–æ–æ—Ç–ª–∞–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {', '.join(fixes_applied)}")
            return {
                'success': True,
                'fixes_applied': fixes_applied,
                'black_success': black_result.returncode == 0,
                'isort_success': isort_result.returncode == 0
            }
            
        except Exception as e:
            return {'success': False, 'errors': [f'–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ—Ç–ª–∞–¥–∫–∏: {e}']}
    
    # ==================== –¢–†–ï–¢–ò–ß–ù–´–ï –≠–¢–ê–ü–´ (9-12) ====================
    
    def _step9_registration_preparation(self, components: List[Dict], architecture_info: Dict) -> Dict[str, Any]:
        """–≠–¢–ê–ü 9: –ü–û–î–ì–û–¢–û–í–ö–ê –ö –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò"""
        print("  üîç –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...")
        try:
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ñ—É–Ω–∫—Ü–∏–∏
            function_type = architecture_info.get("component_type", "unknown")
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            security_level = "medium"
            if function_type == "security":
                security_level = "high"
            elif function_type == "ai_agent":
                security_level = "high"
            elif function_type == "bot":
                security_level = "medium"
            elif function_type == "core":
                security_level = "critical"
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏
            is_critical = function_type in ["security", "ai_agent", "core"]
            
            function_data = {
                "function_type": function_type,
                "security_level": security_level,
                "is_critical": is_critical,
                "components": components
            }
            
            print(f"  ‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {function_type}, {security_level}, –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å: {is_critical}")
            return {
                'success': True,
                'function_data': function_data
            }
            
        except Exception as e:
            return {'success': False, 'errors': [f'–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}']}
    
    def _step10_safe_registration(self, function_data: Dict) -> Dict[str, Any]:
        """–≠–¢–ê–ü 10: –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø"""
        print("  üîç –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤ SFM...")
        try:
            from security.safe_function_manager import SafeFunctionManager
            
            sfm = SafeFunctionManager()
            registered_functions = []
            
            for component in function_data['components']:
                try:
                    function_id = f"{function_data['function_type']}_{component['name'].lower()}"
                    print(f"    üîÑ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º: {component['name']}...")
                    
                    # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
                    def safe_handler(params: Dict[str, Any]) -> Any:
                        try:
                            # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
                            cls = component['class']
                            try:
                                # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Å name –∫–∞–∫ –ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç (–¥–ª—è SecurityBase)
                                instance = cls(component['name'])
                            except TypeError:
                                try:
                                    # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Å name –∫–∞–∫ keyword –∞—Ä–≥—É–º–µ–Ω—Ç
                                    instance = cls(name=component['name'])
                                except TypeError:
                                    # –°–æ–∑–¥–∞–µ–º –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
                                    instance = cls()
                            if hasattr(instance, 'execute'):
                                return instance.execute(params)
                            elif hasattr(instance, 'run'):
                                return instance.run(params)
                            else:
                                return {"error": "–ú–µ—Ç–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω"}
                        except Exception as e:
                            return {"error": str(e)}
                    
                    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é
                    success = sfm.register_function(
                        function_id=function_id,
                        name=component['name'],
                        description=f"–ö–æ–º–ø–æ–Ω–µ–Ω—Ç {component['name']}",
                        function_type=function_data['function_type'],
                        security_level=function_data['security_level'],
                        is_critical=function_data['is_critical'],
                        auto_enable=True,
                        handler=safe_handler
                    )
                    
                    if success:
                        registered_functions.append(function_id)
                        print(f"    ‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {component['name']} ‚Üí {function_id}")
                    else:
                        print(f"    ‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {component['name']}")
                        
                except Exception as e:
                    print(f"    ‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ {component['name']}: {e}")
            
            print(f"  üìä –£—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {len(registered_functions)}/{len(function_data['components'])}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Ñ–∞–π–ª
            try:
                sfm._save_functions()
                print("  üíæ –§—É–Ω–∫—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
            except Exception as e:
                print(f"  ‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π: {e}")
            
            return {
                'success': len(registered_functions) > 0,
                'registered_functions': registered_functions,
                'sfm_instance': sfm,
                'errors': []
            }
            
        except Exception as e:
            return {'success': False, 'errors': [f'–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ SFM: {e}']}
    
    def _step11_integration_testing(self, registered_functions: List[str], sfm_instance=None) -> Dict[str, Any]:
        """–≠–¢–ê–ü 11: –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï"""
        print("  üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π...")
        try:
            if sfm_instance is None:
                from security.safe_function_manager import SafeFunctionManager
                sfm = SafeFunctionManager()
            else:
                sfm = sfm_instance
            
            test_results = []
            
            for function_id in registered_functions:
                try:
                    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é
                    test_params = {"test": True, "integration": True}
                    success, result, message = sfm.execute_function(function_id, test_params)
                    
                    test_results.append({
                        'function_id': function_id,
                        'success': success,
                        'result': result,
                        'message': message
                    })
                    
                    if success:
                        print(f"    ‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω: {function_id}")
                    else:
                        print(f"    ‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: {function_id} - {message}")
                        
                except Exception as e:
                    print(f"    ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è {function_id}: {e}")
                    test_results.append({
                        'function_id': function_id,
                        'success': False,
                        'error': str(e)
                    })
            
            successful_tests = len([r for r in test_results if r['success']])
            print(f"  üìä –¢–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ: {successful_tests}/{len(registered_functions)}")
            
            return {
                'success': successful_tests > 0,
                'test_results': test_results,
                'successful_tests': successful_tests,
                'errors': []
            }
            
        except Exception as e:
            return {'success': False, 'errors': [f'–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}']}
    
    def _step12_sfm_verification(self, registered_functions: List[str]) -> Dict[str, Any]:
        """–≠–¢–ê–ü 12: –ü–†–û–í–ï–†–ö–ê –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò –í SFM"""
        print("  üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ SFM...")
        try:
            from security.safe_function_manager import SafeFunctionManager
            
            sfm = SafeFunctionManager()
            verification_results = []
            
            for function_id in registered_functions:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞
                    if function_id in sfm.functions:
                        function_info = sfm.functions[function_id]
                        verification_results.append({
                            'function_id': function_id,
                            'registered': True,
                            'status': function_info.status.value,
                            'is_critical': function_info.is_critical
                        })
                        print(f"    ‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω –≤ SFM: {function_id} ({function_info.status.value})")
                    else:
                        verification_results.append({
                            'function_id': function_id,
                            'registered': False,
                            'error': '–§—É–Ω–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ SFM'
                        })
                        print(f"    ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –≤ SFM: {function_id}")
                        
                except Exception as e:
                    print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ {function_id}: {e}")
                    verification_results.append({
                        'function_id': function_id,
                        'registered': False,
                        'error': str(e)
                    })
            
            verified_functions = len([r for r in verification_results if r['registered']])
            print(f"  üìä –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –≤ SFM: {verified_functions}/{len(registered_functions)}")
            
            return {
                'success': verified_functions > 0,
                'verification_results': verification_results,
                'verified_functions': verified_functions,
                'errors': []
            }
            
        except Exception as e:
            return {'success': False, 'errors': [f'–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ SFM: {e}']}
    
    # ==================== –ß–ï–¢–í–ï–†–¢–ò–ß–ù–´–ï –≠–¢–ê–ü–´ (13-16) ====================
    
    def _step13_lifecycle_management(self, registered_functions: List[str]) -> Dict[str, Any]:
        """–≠–¢–ê–ü 13: –£–ü–†–ê–í–õ–ï–ù–ò–ï –ñ–ò–ó–ù–ï–ù–ù–´–ú –¶–ò–ö–õ–û–ú"""
        print("  üîç –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º —Ñ—É–Ω–∫—Ü–∏–π...")
        try:
            lifecycle_config = {
                "auto_start": True,
                "auto_restart": True,
                "max_restarts": 3,
                "restart_delay": 5
            }
            
            print(f"  ‚úÖ –ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è {len(registered_functions)} —Ñ—É–Ω–∫—Ü–∏–π")
            return {
                'success': True,
                'lifecycle_config': lifecycle_config,
                'managed_functions': len(registered_functions)
            }
            
        except Exception as e:
            return {'success': False, 'errors': [f'–û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º: {e}']}
    
    def _step14_performance_monitoring(self, registered_functions: List[str]) -> Dict[str, Any]:
        """–≠–¢–ê–ü 14: –ú–û–ù–ò–¢–û–†–ò–ù–ì –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò"""
        print("  üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
        try:
            monitoring_config = {
                "metrics_enabled": True,
                "performance_tracking": True,
                "alert_thresholds": {
                    "execution_time": 5.0,
                    "memory_usage": 100,
                    "error_rate": 0.1
                }
            }
            
            print(f"  ‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è {len(registered_functions)} —Ñ—É–Ω–∫—Ü–∏–π")
            return {
                'success': True,
                'monitoring_config': monitoring_config,
                'monitored_functions': len(registered_functions)
            }
            
        except Exception as e:
            return {'success': False, 'errors': [f'–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}']}
    
    def _step15_sleep_mode_management(self, registered_functions: List[str], function_data: Dict) -> Dict[str, Any]:
        """–≠–¢–ê–ü 15: –°–ü–Ø–©–ò–ô –†–ï–ñ–ò–ú –î–õ–Ø –ù–ï–ö–†–ò–¢–ò–ß–ù–´–•"""
        print("  üîç –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø—è—â–∏–º —Ä–µ–∂–∏–º–æ–º...")
        try:
            is_critical = function_data.get("is_critical", False)
            sleep_mode_enabled = not is_critical
            
            if sleep_mode_enabled:
                sleep_config = {
                    "auto_sleep": True,
                    "sleep_after_idle": 300,  # 5 –º–∏–Ω—É—Ç
                    "wake_on_demand": True
                }
                print(f"  ‚úÖ –°–ø—è—â–∏–π —Ä–µ–∂–∏–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è {len(registered_functions)} —Ñ—É–Ω–∫—Ü–∏–π")
            else:
                print(f"  ‚úÖ –§—É–Ω–∫—Ü–∏–∏ –∫—Ä–∏—Ç–∏—á–Ω—ã, —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è {len(registered_functions)} —Ñ—É–Ω–∫—Ü–∏–π")
            
            return {
                'success': True,
                'sleep_mode_enabled': sleep_mode_enabled,
                'sleep_config': sleep_config if sleep_mode_enabled else None,
                'managed_functions': len(registered_functions)
            }
            
        except Exception as e:
            return {'success': False, 'errors': [f'–û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø—è—â–∏–º —Ä–µ–∂–∏–º–æ–º: {e}']}
    
    def _step16_final_check_and_cicd(self, function_path: str) -> Dict[str, Any]:
        """–≠–¢–ê–ü 16: –§–ò–ù–ê–õ–¨–ù–ê–Ø A+ –ü–†–û–í–ï–†–ö–ê –ò CI/CD"""
        print("  üîç –§–∏–Ω–∞–ª—å–Ω–∞—è A+ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ CI/CD –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è...")
        try:
            # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
            quality_result = self._step7_quality_check(function_path)
            
            # CI/CD –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
            cicd_config = {
                "auto_test": True,
                "auto_deploy": True,
                "quality_gate": 95,
                "security_scan": True
            }
            
            if quality_result['success']:
                print(f"  ‚úÖ –§–∏–Ω–∞–ª—å–Ω–∞—è A+ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞: {quality_result['score']:.1f}/100")
            else:
                print(f"  ‚ö†Ô∏è –§–∏–Ω–∞–ª—å–Ω–∞—è A+ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞: {quality_result['score']:.1f}/100")
            
            print("  ‚úÖ CI/CD –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
            
            return {
                'success': True,
                'final_quality': quality_result,
                'cicd_config': cicd_config
            }
            
        except Exception as e:
            return {'success': False, 'errors': [f'–û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}']}


# ==================== –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø ====================

if __name__ == "__main__":
    # –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
    algorithm = Complete16StageAlgorithm()
    
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    test_file = "security/safe_function_manager.py"
    
    print("üöÄ –ü–û–õ–ù–´–ô 16-–≠–¢–ê–ü–ù–´–ô –ê–õ–ì–û–†–ò–¢–ú A+ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò")
    print("=" * 80)
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    result = algorithm.run_complete_16_stage_integration(test_file)
    
    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò:")
    print(f"‚úÖ –£—Å–ø–µ—Ö: {result['success']}")
    print(f"üÜî –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: {len(result['registered_functions'])}")
    print(f"‚≠ê –ö–∞—á–µ—Å—Ç–≤–æ: {result['quality_score']:.1f}/100")
    print(f"üîç SFM –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: {result['sfm_verification']}")
    print(f"üìã –≠—Ç–∞–ø–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {len(result['steps_completed'])}/16")
    print(f"üîç –î–µ—Ç–∞–ª–∏ —ç—Ç–∞–ø–æ–≤: {[step[0] for step in result['steps_completed']]}")
    
    if result['errors']:
        print(f"‚ùå –û—à–∏–±–∫–∏: {len(result['errors'])}")
        for error in result['errors']:
            print(f"   - {error}")
    
    if result['warnings']:
        print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {len(result['warnings'])}")
        for warning in result['warnings']:
            print(f"   - {warning}")
    
    print("\nüéØ –ü–û–õ–ù–´–ô 16-–≠–¢–ê–ü–ù–´–ô –ê–õ–ì–û–†–ò–¢–ú A+ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –ó–ê–í–ï–†–®–ï–ù!")
