#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
SFM Integrity Check - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ SFM —Å–∫—Ä–∏–ø—Ç–æ–≤
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ SFM —Å–∫—Ä–∏–ø—Ç—ã –Ω–∞ –º–µ—Å—Ç–µ
"""

import os
import sys
from datetime import datetime

class SFMIntegrityChecker:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ SFM —Å–∫—Ä–∏–ø—Ç–æ–≤"""
    
    def __init__(self):
        self.scripts_dir = "scripts"
        self.critical_scripts = {
            # –û—Å–Ω–æ–≤–Ω—ã–µ SFM —Å–∫—Ä–∏–ø—Ç—ã
            'sfm_quick_stats.py': '–ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ SFM',
            'sfm_analyzer.py': '–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ SFM',
            'sfm_status': 'Shell —Å–∫—Ä–∏–ø—Ç —Å—Ç–∞—Ç—É—Å–∞ SFM',
            
            # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è
            'sfm_stats_universal.py': '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å –∞–≤—Ç–æ–ø–æ–∏—Å–∫–æ–º',
            'sfm_status.sh': 'Shell —Å–∫—Ä–∏–ø—Ç —Å –∞–≤—Ç–æ–ø–æ–∏—Å–∫–æ–º',
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
            'sfm_add_function.py': '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π',
            'sfm_fix_and_validate.py': '–í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ',
            'sfm_structure_validator.py': '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã',
            'sfm_manager.py': '–ì–ª–∞–≤–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä SFM'
        }
        
        self.missing_scripts = []
        self.corrupted_scripts = []
        self.healthy_scripts = []
    
    def check_script_exists(self, script_name):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞"""
        script_path = os.path.join(self.scripts_dir, script_name)
        return os.path.exists(script_path)
    
    def check_script_integrity(self, script_name):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Å–∫—Ä–∏–ø—Ç–∞"""
        script_path = os.path.join(self.scripts_dir, script_name)
        
        if not os.path.exists(script_path):
            return False, "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –ø—É—Å—Ç–æ–π
            if os.path.getsize(script_path) == 0:
                return False, "–§–∞–π–ª –ø—É—Å—Ç–æ–π"
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ñ–∞–π–ª —á–∏—Ç–∞–µ—Ç—Å—è
            with open(script_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            if len(content.strip()) == 0:
                return False, "–§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª—ã"
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ SFM –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
            if 'sfm' not in content.lower() and 'SFM' not in content:
                return False, "–§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç SFM —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å"
            
            return True, "OK"
            
        except Exception as e:
            return False, f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {e}"
    
    def check_all_scripts(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤"""
        print("üîç –ü–†–û–í–ï–†–ö–ê –¶–ï–õ–û–°–¢–ù–û–°–¢–ò SFM –°–ö–†–ò–ü–¢–û–í")
        print("=" * 50)
        
        for script_name, description in self.critical_scripts.items():
            exists = self.check_script_exists(script_name)
            
            if not exists:
                self.missing_scripts.append(script_name)
                print(f"‚ùå {script_name}: –ù–ï –ù–ê–ô–î–ï–ù - {description}")
                continue
            
            is_healthy, status = self.check_script_integrity(script_name)
            
            if is_healthy:
                self.healthy_scripts.append(script_name)
                print(f"‚úÖ {script_name}: OK - {description}")
            else:
                self.corrupted_scripts.append((script_name, status))
                print(f"‚ö†Ô∏è  {script_name}: –ü–û–í–†–ï–ñ–î–ï–ù - {status}")
        
        return len(self.missing_scripts) == 0 and len(self.corrupted_scripts) == 0
    
    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏"""
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        report_file = f"data/sfm/integrity_report_{timestamp}.json"
        
        report = {
            'timestamp': datetime.now().isoformat(),
            'total_scripts': len(self.critical_scripts),
            'healthy_scripts': len(self.healthy_scripts),
            'missing_scripts': len(self.missing_scripts),
            'corrupted_scripts': len(self.corrupted_scripts),
            'integrity_status': 'OK' if len(self.missing_scripts) == 0 and len(self.corrupted_scripts) == 0 else 'DEGRADED',
            'healthy_scripts_list': self.healthy_scripts,
            'missing_scripts_list': self.missing_scripts,
            'corrupted_scripts_list': self.corrupted_scripts
        }
        
        try:
            os.makedirs(os.path.dirname(report_file), exist_ok=True)
            import json
            with open(report_file, 'w', encoding='utf-8') as f:
                json.dump(report, f, indent=2, ensure_ascii=False)
            print(f"\n‚úÖ –û—Ç—á–µ—Ç –æ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
        
        return report
    
    def print_summary(self):
        """–í—ã–≤–æ–¥ —Å–≤–æ–¥–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        print("\nüìä –°–í–û–î–ö–ê –ü–†–û–í–ï–†–ö–ò –¶–ï–õ–û–°–¢–ù–û–°–¢–ò")
        print("=" * 50)
        
        total = len(self.critical_scripts)
        healthy = len(self.healthy_scripts)
        missing = len(self.missing_scripts)
        corrupted = len(self.corrupted_scripts)
        
        print(f"–í—Å–µ–≥–æ —Å–∫—Ä–∏–ø—Ç–æ–≤: {total}")
        print(f"–ó–¥–æ—Ä–æ–≤—ã—Ö: {healthy} ({healthy/total*100:.1f}%)")
        print(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö: {missing} ({missing/total*100:.1f}%)")
        print(f"–ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã—Ö: {corrupted} ({corrupted/total*100:.1f}%)")
        
        if missing > 0:
            print(f"\n‚ùå –û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–ï –°–ö–†–ò–ü–¢–´:")
            for script in self.missing_scripts:
                print(f"  - {script}")
        
        if corrupted > 0:
            print(f"\n‚ö†Ô∏è  –ü–û–í–†–ï–ñ–î–ï–ù–ù–´–ï –°–ö–†–ò–ü–¢–´:")
            for script, status in self.corrupted_scripts:
                print(f"  - {script}: {status}")
        
        if missing == 0 and corrupted == 0:
            print("\nüéâ –í–°–ï SFM –°–ö–†–ò–ü–¢–´ –í –ü–û–†–Ø–î–ö–ï!")
        else:
            print(f"\n‚ö†Ô∏è  –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ –° SFM –°–ö–†–ò–ü–¢–ê–ú–ò!")
    
    def suggest_fixes(self):
        """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é"""
        if len(self.missing_scripts) == 0 and len(self.corrupted_scripts) == 0:
            return
        
        print("\nüîß –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø –ü–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Æ")
        print("=" * 50)
        
        if self.missing_scripts:
            print("–î–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤:")
            print("1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–µ –±—ã–ª–∏ –ª–∏ –æ–Ω–∏ —Å–ª—É—á–∞–π–Ω–æ —É–¥–∞–ª–µ–Ω—ã")
            print("2. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏")
            print("3. –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å —Å–∫—Ä–∏–ø—Ç—ã –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏")
        
        if self.corrupted_scripts:
            print("–î–ª—è –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤:")
            print("1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤")
            print("2. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏")
            print("3. –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üõ°Ô∏è SFM INTEGRITY CHECK")
    print("=" * 50)
    
    checker = SFMIntegrityChecker()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤
    is_healthy = checker.check_all_scripts()
    
    # –í—ã–≤–æ–¥ —Å–≤–æ–¥–∫–∏
    checker.print_summary()
    
    # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é
    checker.suggest_fixes()
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
    checker.generate_report()
    
    if is_healthy:
        print("\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        sys.exit(0)
    else:
        print("\n‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å SFM —Å–∫—Ä–∏–ø—Ç–∞–º–∏!")
        sys.exit(1)

if __name__ == "__main__":
    main()