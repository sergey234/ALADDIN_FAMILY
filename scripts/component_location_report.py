#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üìç –û–¢–ß–ï–¢ –û –†–ê–°–ü–û–õ–û–ñ–ï–ù–ò–ò –ö–û–ú–ü–û–ù–ï–ù–¢–û–í
===================================

–ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏ —Å–ø—è—â–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
"""

import json
import os
from datetime import datetime
from collections import defaultdict

def component_location_report():
    """–û—Ç—á–µ—Ç –æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    
    print("üìç –û–¢–ß–ï–¢ –û –†–ê–°–ü–û–õ–û–ñ–ï–ù–ò–ò –ö–û–ú–ü–û–ù–ï–ù–¢–û–í")
    print("=" * 60)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º SFM —Ä–µ–µ—Å—Ç—Ä
    sfm_path = "data/sfm/function_registry.json"
    
    if not os.path.exists(sfm_path):
        print(f"‚ùå –§–∞–π–ª {sfm_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    with open(sfm_path, 'r', encoding='utf-8') as f:
        data = json.load(f)
    
    functions = data.get('functions', {})
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    active_components = []
    sleeping_components = []
    ml_components = []
    ai_agents = []
    bots = []
    microservices = []
    managers = []
    
    for func_id, func_data in functions.items():
        status = func_data.get('status', 'unknown')
        function_type = func_data.get('function_type', 'unknown')
        file_path = func_data.get('file_path', 'unknown')
        
        component_info = {
            'id': func_id,
            'name': func_data.get('name', 'Unknown'),
            'type': function_type,
            'status': status,
            'file_path': file_path,
            'is_critical': func_data.get('is_critical', False)
        }
        
        if status == 'active':
            active_components.append(component_info)
        else:
            sleeping_components.append(component_info)
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è
        if 'ml' in func_id.lower() or 'analyzer' in func_id.lower():
            ml_components.append(component_info)
        
        if func_id.startswith('ai_agent_'):
            ai_agents.append(component_info)
        
        if func_id.startswith('bot_'):
            bots.append(component_info)
        
        if func_id.startswith('microservice_'):
            microservices.append(component_info)
        
        if 'manager' in func_id.lower():
            managers.append(component_info)
    
    print(f"üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   –í—Å–µ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {len(functions)}")
    print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö: {len(active_components)}")
    print(f"   –°–ø—è—â–∏—Ö: {len(sleeping_components)}")
    print()
    
    # –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    print("‚úÖ –ê–ö–¢–ò–í–ù–´–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´:")
    print(f"   –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö: {len(active_components)}")
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º
    active_by_type = defaultdict(list)
    for comp in active_components:
        active_by_type[comp['type']].append(comp)
    
    for comp_type, comps in active_by_type.items():
        print(f"\n   üìÅ {comp_type.upper()} ({len(comps)} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤):")
        for comp in comps[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            critical_mark = " üî¥" if comp['is_critical'] else ""
            print(f"      ‚úÖ {comp['name']} ({comp['id']}){critical_mark}")
            print(f"         üìÇ –ü—É—Ç—å: {comp['file_path']}")
        if len(comps) > 5:
            print(f"      ... –∏ –µ—â–µ {len(comps) - 5} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
    
    # ML –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    print(f"\nü§ñ ML –ö–û–ú–ü–û–ù–ï–ù–¢–´:")
    print(f"   –í—Å–µ–≥–æ ML: {len(ml_components)}")
    ml_active = [c for c in ml_components if c['status'] == 'active']
    ml_sleeping = [c for c in ml_components if c['status'] == 'sleeping']
    print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö ML: {len(ml_active)}")
    print(f"   –°–ø—è—â–∏—Ö ML: {len(ml_sleeping)}")
    
    print(f"\n   üî¨ –ê–ö–¢–ò–í–ù–´–ï ML –ö–û–ú–ü–û–ù–ï–ù–¢–´:")
    for comp in ml_active[:10]:
        print(f"      ‚úÖ {comp['name']} ({comp['id']})")
        print(f"         üìÇ –ü—É—Ç—å: {comp['file_path']}")
    
    # AI –∞–≥–µ–Ω—Ç—ã
    print(f"\nü§ñ AI –ê–ì–ï–ù–¢–´:")
    print(f"   –í—Å–µ–≥–æ AI –∞–≥–µ–Ω—Ç–æ–≤: {len(ai_agents)}")
    ai_active = [c for c in ai_agents if c['status'] == 'active']
    ai_sleeping = [c for c in ai_agents if c['status'] == 'sleeping']
    print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö AI –∞–≥–µ–Ω—Ç–æ–≤: {len(ai_active)}")
    print(f"   –°–ø—è—â–∏—Ö AI –∞–≥–µ–Ω—Ç–æ–≤: {len(ai_sleeping)}")
    
    # –ë–æ—Ç—ã
    print(f"\nü§ñ –ë–û–¢–´:")
    print(f"   –í—Å–µ–≥–æ –±–æ—Ç–æ–≤: {len(bots)}")
    bot_active = [c for c in bots if c['status'] == 'active']
    bot_sleeping = [c for c in bots if c['status'] == 'sleeping']
    print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤: {len(bot_active)}")
    print(f"   –°–ø—è—â–∏—Ö –±–æ—Ç–æ–≤: {len(bot_sleeping)}")
    
    # –ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—ã
    print(f"\n‚öôÔ∏è  –ú–ò–ö–†–û–°–ï–†–í–ò–°–´:")
    print(f"   –í—Å–µ–≥–æ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤: {len(microservices)}")
    micro_active = [c for c in microservices if c['status'] == 'active']
    micro_sleeping = [c for c in microservices if c['status'] == 'sleeping']
    print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤: {len(micro_active)}")
    print(f"   –°–ø—è—â–∏—Ö –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤: {len(micro_sleeping)}")
    
    # –ú–µ–Ω–µ–¥–∂–µ—Ä—ã
    print(f"\nüéõÔ∏è  –ú–ï–ù–ï–î–ñ–ï–†–´:")
    print(f"   –í—Å–µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤: {len(managers)}")
    manager_active = [c for c in managers if c['status'] == 'active']
    manager_sleeping = [c for c in managers if c['status'] == 'sleeping']
    print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤: {len(manager_active)}")
    print(f"   –°–ø—è—â–∏—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤: {len(manager_sleeping)}")
    
    # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
    print(f"\nüìÇ –û–°–ù–û–í–ù–´–ï –ü–£–¢–ò –ö –§–ê–ô–õ–ê–ú:")
    print(f"   SFM —Ä–µ–µ—Å—Ç—Ä: {sfm_path}")
    print(f"   –Ø–¥—Ä–æ —Å–∏—Å—Ç–µ–º—ã: core/")
    print(f"   –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: security/")
    print(f"   AI –∞–≥–µ–Ω—Ç—ã: security/ai_agents/")
    print(f"   –ë–æ—Ç—ã: security/bots/")
    print(f"   –ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—ã: security/microservices/")
    print(f"   –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: config/")
    print(f"   –õ–æ–≥–∏: logs/")
    print(f"   –°–∫—Ä–∏–ø—Ç—ã: scripts/")
    
    # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    report = {
        "timestamp": datetime.now().isoformat(),
        "total_components": len(functions),
        "active_components": active_components,
        "sleeping_components": sleeping_components,
        "ml_components": ml_components,
        "ai_agents": ai_agents,
        "bots": bots,
        "microservices": microservices,
        "managers": managers,
        "statistics": {
            "active_count": len(active_components),
            "sleeping_count": len(sleeping_components),
            "ml_active": len(ml_active),
            "ml_sleeping": len(ml_sleeping),
            "ai_active": len(ai_active),
            "ai_sleeping": len(ai_sleeping),
            "bot_active": len(bot_active),
            "bot_sleeping": len(bot_sleeping),
            "micro_active": len(micro_active),
            "micro_sleeping": len(micro_sleeping),
            "manager_active": len(manager_active),
            "manager_sleeping": len(manager_sleeping)
        }
    }
    
    report_path = f"logs/component_location_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
    os.makedirs("logs", exist_ok=True)
    
    with open(report_path, 'w', encoding='utf-8') as f:
        json.dump(report, f, ensure_ascii=False, indent=2)
    
    print(f"\nüìã –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_path}")
    
    return report

if __name__ == "__main__":
    component_location_report()