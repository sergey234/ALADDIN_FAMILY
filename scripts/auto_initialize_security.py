#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò –î–õ–Ø –ü–†–û–î–ê–ö–®–ï–ù–ê
–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Å—Ç–∞—Ä—Ç–µ —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
"""

import sys
import os
import time
import json
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def auto_initialize_security():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    
    print("üõ°Ô∏è –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò")
    print("=" * 60)
    
    try:
        # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SafeFunctionManager
        from security.safe_function_manager import SafeFunctionManager
        sfm = SafeFunctionManager()
        print("‚úÖ SafeFunctionManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # 2. –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        critical_components = [
            "scripts/integrate_anti_fraud_master_ai.py",
            "scripts/integrate_advanced_monitoring_simple.py", 
            "scripts/integrate_external_apis_simple.py",
            "scripts/integrate_high_priority_components.py"
        ]
        
        success_count = 0
        total_count = len(critical_components)
        
        for component in critical_components:
            try:
                print(f"üîß –ó–∞–ø—É—Å–∫ {component}...")
                exec(open(component).read())
                success_count += 1
                print(f"‚úÖ {component} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ {component}: {e}")
        
        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò:")
        print(f"   –£—Å–ø–µ—à–Ω–æ: {success_count}/{total_count}")
        print(f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(success_count/total_count)*100:.1f}%")
        
        # 4. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        status = {
            "timestamp": datetime.now().isoformat(),
            "success_count": success_count,
            "total_count": total_count,
            "success_rate": (success_count/total_count)*100,
            "status": "SUCCESS" if success_count >= total_count * 0.8 else "PARTIAL"
        }
        
        with open("security_initialization_status.json", "w", encoding="utf-8") as f:
            json.dump(status, f, indent=2, ensure_ascii=False)
        
        print(f"üíæ –°—Ç–∞—Ç—É—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ security_initialization_status.json")
        
        if success_count >= total_count * 0.8:
            print("üéâ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨ –ê–ö–¢–ò–í–ù–ê! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
            return True
        else:
            print("‚ö†Ô∏è –ß–ê–°–¢–ò–ß–ù–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø! –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞")
            return False
            
    except Exception as e:
        print(f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò: {e}")
        return False

if __name__ == "__main__":
    success = auto_initialize_security()
    sys.exit(0 if success else 1)