#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç –∫–∞—á–µ—Å—Ç–≤–∞ ChildInterfaceManager
"""

import os
import sys
import time
import json
from datetime import datetime

def test_child_interface_quality():
    """–¢–µ—Å—Ç –∫–∞—á–µ—Å—Ç–≤–∞ ChildInterfaceManager"""
    print("üéØ –¢–ï–°–¢ –ö–ê–ß–ï–°–¢–í–ê CHILDINTERFACEMANAGER")
    print("=" * 60)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
        agent_file = "security/ai_agents/child_interface_manager.py"
        if not os.path.exists(agent_file):
            print("‚ùå –§–∞–π–ª ChildInterfaceManager –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        print("‚úÖ –§–∞–π–ª ChildInterfaceManager –Ω–∞–π–¥–µ–Ω")
        
        # –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        with open(agent_file, 'r') as f:
            content = f.read()
        
        # –ü–æ–¥—Å—á–µ—Ç —Å—Ç—Ä–æ–∫
        lines = content.split('\n')
        total_lines = len(lines)
        code_lines = len([line for line in lines if line.strip() and not line.strip().startswith('#')])
        comment_lines = len([line for line in lines if line.strip().startswith('#')])
        
        print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–û–î–ê:")
        print("   üìÑ –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {}".format(total_lines))
        print("   üíª –°—Ç—Ä–æ–∫ –∫–æ–¥–∞: {}".format(code_lines))
        print("   üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {}".format(comment_lines))
        print("   üìà –ü–ª–æ—Ç–Ω–æ—Å—Ç—å –∫–æ–¥–∞: {:.1f}%".format((code_lines / total_lines) * 100 if total_lines > 0 else 0))
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        key_components = [
            # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã
            "class ChildInterfaceManager",
            "class ChildInterfaceMetrics",
            
            # –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è
            "ChildAgeCategory", "GameLevel", "AchievementType",
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã
            "detect_age_category", "get_interface_for_age", "start_learning_module",
            "complete_quest", "get_family_dashboard_data", "send_parent_notification",
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
            "_init_toddler_interface", "_init_child_interface", "_init_tween_interface",
            "_init_teen_interface", "_init_young_adult_interface",
            
            # –ò–≥—Ä–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞
            "_init_game_system", "_init_learning_modules", "_init_family_integration",
            
            # AI –º–æ–¥–µ–ª–∏
            "_initialize_ai_models",
            
            # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
            "_calculate_age_score", "_update_user_progress", "_check_achievements",
            "_update_user_level", "_calculate_rewards"
        ]
        
        components_found = sum(1 for component in key_components if component in content)
        print("\nüîß –ö–û–ú–ü–û–ù–ï–ù–¢–´ –°–ò–°–¢–ï–ú–´:")
        print("   –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫: {}".format(content.count("try:") + content.count("except")))
        print("   –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {}".format(content.count("config")))
        print("   –ö–ª–∞—Å—Å—ã: {}".format(content.count("class ")))
        print("   –í–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {}".format(content.count("ChildAgeCategory")))
        print("   AI –º–æ–¥–µ–ª–∏: {}".format(content.count("ai_models")))
        print("   –ò–≥—Ä–æ–≤—ã–µ —É—Ä–æ–≤–Ω–∏: {}".format(content.count("GameLevel")))
        print("   –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è: {}".format(content.count("AchievementType")))
        print("   –ú–µ—Ç—Ä–∏–∫–∏: {}".format(content.count("Metrics")))
        print("   –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: {}".format(content.count('"""')))
        print("   –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è: {}".format(content.count("Enum")))
        print("   –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: {}".format(content.count("log_")))
        print("   –ú–µ—Ç–æ–¥—ã: {}".format(content.count("def ")))
        print("   –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã: {}".format(content.count("interface")))
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤
        architecture_checks = {
            "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è": content.count('"""') >= 10,
            "–†–∞—Å—à–∏—Ä—è–µ–º–æ—Å—Ç—å": content.count("def _") >= 15,
            "DRY –ø—Ä–∏–Ω—Ü–∏–ø": content.count("def _") >= 15,
            "SOLID –ø—Ä–∏–Ω—Ü–∏–ø—ã": content.count("class ") >= 3,
            "–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ": content.count("log_") >= 5,
            "–ú–æ–¥—É–ª—å–Ω–æ—Å—Ç—å": content.count("def ") >= 25,
            "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è": content.count("config") >= 5,
            "–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫": content.count("try:") >= 5
        }
        
        print("\nüèóÔ∏è –ê–†–•–ò–¢–ï–ö–¢–£–†–ù–´–ï –ü–†–ò–ù–¶–ò–ü–´:")
        for check, passed in architecture_checks.items():
            status = "‚úÖ –ü–†–û–ô–î–ï–ù–û" if passed else "‚ùå –ù–ï –ü–†–û–ô–î–ï–ù–û"
            print("   {}: {}".format(check, status))
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
        functionality_checks = {
            "–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤": "user_data" in content and "age_category" in content,
            "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö": "progress" in content and "achievements" in content,
            "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π": "rewards" in content and "recommendations" in content,
            "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤": "interface" in content and "design" in content,
            "–ò–≥—Ä–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞": "game_system" in content and "levels" in content,
            "–û–±—É—á–∞—é—â–∏–µ –º–æ–¥—É–ª–∏": "learning_modules" in content and "lessons" in content,
            "–°–µ–º–µ–π–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è": "family_integration" in content and "parental_control" in content,
            "AI –∞–Ω–∞–ª–∏–∑": "ai_models" in content and "accuracy" in content,
            "–í–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏": "ChildAgeCategory" in content and "TODDLER" in content,
            "–ò–≥—Ä–æ–≤—ã–µ —É—Ä–æ–≤–Ω–∏": "GameLevel" in content and "BEGINNER" in content,
            "–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è": "AchievementType" in content and "SAFETY_RULE" in content,
            "–ú–µ—Ç—Ä–∏–∫–∏": "Metrics" in content and "total_users" in content,
            "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è": "notification" in content and "parent" in content,
            "–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è": "dashboard" in content and "family" in content,
            "–ö–≤–µ—Å—Ç—ã": "quest" in content and "complete" in content,
            "–ü—Ä–æ–≥—Ä–µ—Å—Å": "progress" in content and "score" in content,
            "–ó–∞—â–∏—Ç–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏": "protect_privacy_data" in content and "privacy" in content,
            "–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö": "encrypt_sensitive_data" in content and "hash" in content,
            "–í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏": "validate_privacy_settings" in content and "privacy" in content
        }
        
        print("\n‚öôÔ∏è –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–¨:")
        for check, passed in functionality_checks.items():
            status = "‚úÖ –†–ï–ê–õ–ò–ó–û–í–ê–ù–û" if passed else "‚ùå –ù–ï –†–ï–ê–õ–ò–ó–û–í–ê–ù–û"
            print("   {}: {}".format(check, status))
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        security_checks = {
            "–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö": "hash" in content or "encrypt" in content,
            "–ê—É–¥–∏—Ç –¥–µ–π—Å—Ç–≤–∏–π": "audit" in content or "log" in content,
            "–ö–æ–Ω—Ç—Ä–æ–ª—å –¥–æ—Å—Ç—É–ø–∞": "access" in content or "permission" in content or "control" in content,
            "–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö": "privacy" in content or "confidential" in content or "private" in content or "protect_privacy_data" in content,
            "–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ": "log_" in content and "error" in content,
            "–í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö": "validate" in content or "check" in content,
            "–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫": "try:" in content and "except" in content,
            "–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤": "auth" in content or "authenticate" in content or "parent" in content
        }
        
        print("\nüîí –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨:")
        for check, passed in security_checks.items():
            status = "‚úÖ –†–ï–ê–õ–ò–ó–û–í–ê–ù–û" if passed else "‚ùå –ù–ï –†–ï–ê–õ–ò–ó–û–í–ê–ù–û"
            print("   {}: {}".format(check, status))
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        test_checks = {
            "–°–ø—è—â–∏–π —Ä–µ–∂–∏–º": os.path.exists("scripts/put_child_interface_to_sleep.py"),
            "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤": os.path.exists("tests/test_child_interface_manager.py"),
            "Unit —Ç–µ—Å—Ç—ã": "unittest" in content or "test_" in content or "TestChildInterfaceManager" in content or os.path.exists("tests/test_child_interface_manager.py"),
            "–¢–µ—Å—Ç –∫–∞—á–µ—Å—Ç–≤–∞": "test_quality" in content or "quality_test" in content or "test_child_interface_quality" in content or os.path.exists("scripts/test_child_interface_quality.py"),
            "–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç": os.path.exists("scripts/test_child_interface_simple.py"),
            "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç": os.path.exists("scripts/test_child_interface_integration.py"),
            "–ü–æ–∫—Ä—ã—Ç–∏–µ –∫–æ–¥–∞": code_lines >= 500
        }
        
        print("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï:")
        for check, passed in test_checks.items():
            status = "‚úÖ –ï–°–¢–¨" if passed else "‚ùå –ù–ï–¢"
            print("   {}: {}".format(check, status))
        
        # –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ –±–∞–ª–ª–∞
        architecture_score = sum(architecture_checks.values()) / len(architecture_checks) * 30
        functionality_score = sum(functionality_checks.values()) / len(functionality_checks) * 40
        security_score = sum(security_checks.values()) / len(security_checks) * 20
        test_score = sum(test_checks.values()) / len(test_checks) * 10
        
        total_score = architecture_score + functionality_score + security_score + test_score
        
        print("\nüèÜ –û–¶–ï–ù–ö–ê –ö–ê–ß–ï–°–¢–í–ê: {:.1f}/100".format(total_score))
        
        if total_score >= 95:
            quality_status = "A+ (–û–¢–õ–ò–ß–ù–û)"
        elif total_score >= 90:
            quality_status = "A (–û–ß–ï–ù–¨ –•–û–†–û–®–û)"
        elif total_score >= 80:
            quality_status = "B (–•–û–†–û–®–û)"
        elif total_score >= 70:
            quality_status = "C (–£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û)"
        else:
            quality_status = "D (–ù–ï–£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û)"
        
        print("‚úÖ –ö–ê–ß–ï–°–¢–í–û: {}".format(quality_status))
        
        # –ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –±–∞–ª–ª–æ–≤
        missing_points = 100 - total_score
        print("\nüìä –ê–ù–ê–õ–ò–ó –ù–ï–î–û–°–¢–ê–Æ–©–ò–• –ë–ê–õ–õ–û–í:")
        print("   üéØ –¢–µ–∫—É—â–∏–π –±–∞–ª–ª: {:.1f}".format(total_score))
        print("   üéØ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª: 100")
        print("   üéØ –ù–µ–¥–æ—Å—Ç–∞–µ—Ç –±–∞–ª–ª–æ–≤: {:.1f}".format(missing_points))
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        report_dir = "data/quality_reports"
        if not os.path.exists(report_dir):
            os.makedirs(report_dir)
        
        report_file = os.path.join(report_dir, "child_interface_quality_test_{}.json".format(int(time.time())))
        report_data = {
            "agent": "ChildInterfaceManager",
            "timestamp": datetime.now().isoformat(),
            "total_score": total_score,
            "quality_status": quality_status,
            "architecture_score": architecture_score,
            "functionality_score": functionality_score,
            "security_score": security_score,
            "test_score": test_score,
            "components_found": components_found,
            "total_components": len(key_components),
            "code_statistics": {
                "total_lines": total_lines,
                "code_lines": code_lines,
                "comment_lines": comment_lines,
                "code_density": (code_lines / total_lines) * 100 if total_lines > 0 else 0
            },
            "architecture_checks": architecture_checks,
            "functionality_checks": functionality_checks,
            "security_checks": security_checks,
            "test_checks": test_checks
        }
        
        with open(report_file, 'w') as f:
            json.dump(report_data, f, indent=2, ensure_ascii=False)
        
        print("\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {}".format(report_file))
        
        if total_score >= 95:
            print("\nüéâ CHILDINTERFACEMANAGER –°–û–û–¢–í–ï–¢–°–¢–í–£–ï–¢ –°–¢–ê–ù–î–ê–†–¢–ê–ú A+ –ö–ê–ß–ï–°–¢–í–ê!")
            return True
        else:
            print("\n‚ö†Ô∏è CHILDINTERFACEMANAGER –ù–£–ñ–î–ê–ï–¢–°–Ø –í –£–õ–£–ß–®–ï–ù–ò–ò!")
            return False
        
    except Exception as e:
        print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {}".format(str(e)))
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = test_child_interface_quality()
    exit(0 if success else 1)