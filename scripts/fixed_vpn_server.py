#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π VPN —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import http.server
import socketserver
import json
import asyncio
import sys
import os
import time
from datetime import datetime
from urllib.parse import urlparse, parse_qs

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from security.vpn.vpn_security_system import VPNSecuritySystem, VPNSecurityLevel

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è VPN —Å–∏—Å—Ç–µ–º—ã
vpn_system = None

class VPNRequestHandler(http.server.SimpleHTTPRequestHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è VPN —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def do_GET(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ GET –∑–∞–ø—Ä–æ—Å–æ–≤"""
        parsed_path = urlparse(self.path)
        
        if parsed_path.path == '/':
            self.serve_main_page()
        elif parsed_path.path == '/api/test_singapore':
            self.serve_test_singapore()
        elif parsed_path.path == '/api/status':
            self.serve_status()
        else:
            self.send_error(404, "Not Found")
    
    def serve_main_page(self):
        """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
        html_content = '''
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>VPN Test - Singapore</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            min-height: 100vh;
        }
        .container {
            max-width: 400px;
            margin: 0 auto;
            background: rgba(255, 255, 255, 0.1);
            padding: 30px;
            border-radius: 20px;
            backdrop-filter: blur(10px);
            text-align: center;
        }
        h1 { font-size: 2em; margin-bottom: 30px; }
        .button {
            background: #4CAF50;
            color: white;
            padding: 20px 40px;
            border: none;
            border-radius: 15px;
            cursor: pointer;
            font-size: 18px;
            margin: 20px 0;
            width: 100%;
            transition: background 0.3s;
        }
        .button:hover { background: #45a049; }
        .info { 
            background: rgba(255, 255, 255, 0.2); 
            padding: 15px; 
            border-radius: 10px; 
            margin: 20px 0; 
            text-align: left;
        }
        .status { font-size: 16px; margin: 10px 0; }
        .success { color: #4CAF50; }
        .error { color: #f44336; }
        .loading { color: #FFC107; }
    </style>
</head>
<body>
    <div class="container">
        <h1>üåç VPN Test</h1>
        <div class="info">
            <h3>üá∏üá¨ Singapore VPN</h3>
            <p>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Singapore</p>
        </div>
        
        <button class="button" onclick="testSingapore()">üöÄ –¢–µ—Å—Ç Singapore</button>
        
        <div class="info">
            <div class="status" id="status">–ì–æ—Ç–æ–≤ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é</div>
        </div>
        
        <div class="info">
            <h3>üì± –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:</h3>
            <p>1. –ù–∞–∂–º–∏—Ç–µ "–¢–µ—Å—Ç Singapore"</p>
            <p>2. –î–æ–∂–¥–∏—Ç–µ—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (5-10 —Å–µ–∫—É–Ω–¥)</p>
            <p>3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ IP –∞–¥—Ä–µ—Å</p>
            <p>4. –ü—Ä–∏ —É—Å–ø–µ—Ö–µ - VPN —Ä–∞–±–æ—Ç–∞–µ—Ç!</p>
        </div>
        
        <div class="info">
            <h3>üåê –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:</h3>
            <p>‚Ä¢ –õ–æ–∫–∞–ª—å–Ω–æ: http://localhost:8000</p>
            <p>‚Ä¢ –° —Ç–µ–ª–µ—Ñ–æ–Ω–∞: http://192.168.0.101:8000</p>
            <p>‚Ä¢ QR-–∫–æ–¥: –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ –∫–∞–º–µ—Ä–æ–π</p>
        </div>
    </div>

    <script>
        async function testSingapore() {
            const status = document.getElementById('status');
            const button = event.target;
            
            status.innerHTML = '<div class="loading">üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Singapore...</div>';
            button.disabled = true;
            button.textContent = 'üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...';
            
            try {
                const response = await fetch('/api/test_singapore');
                const data = await response.json();
                
                if (data.success) {
                    status.innerHTML = `
                        <div class="success">
                            ‚úÖ –¢–µ—Å—Ç Singapore —É—Å–ø–µ—à–µ–Ω!<br><br>
                            <strong>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:</strong> ${data.connect_message}<br>
                            <strong>–û—Ç–∫–ª—é—á–µ–Ω–∏–µ:</strong> ${data.disconnect_message}<br>
                            <strong>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</strong> ${data.test_duration}<br><br>
                            <strong>üéâ VPN —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!</strong>
                        </div>
                    `;
                } else {
                    status.innerHTML = `
                        <div class="error">
                            ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:<br>
                            ${data.error}
                        </div>
                    `;
                }
            } catch (error) {
                status.innerHTML = `
                    <div class="error">
                        ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:<br>
                        ${error.message}
                    </div>
                `;
            } finally {
                button.disabled = false;
                button.textContent = 'üöÄ –¢–µ—Å—Ç Singapore';
            }
        }
    </script>
</body>
</html>
        '''
        
        self.send_response(200)
        self.send_header('Content-type', 'text/html; charset=utf-8')
        self.end_headers()
        self.wfile.write(html_content.encode('utf-8'))
    
    def serve_test_singapore(self):
        """API —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Singapore"""
        try:
            if not vpn_system:
                self.send_json_response({'success': False, 'error': 'VPN —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞'})
                return
            
            test_user = f'test_singapore_{int(time.time())}'
            
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Singapore
            success, message, report = asyncio.run(vpn_system.connect(
                test_user, 
                country='Singapore',
                security_level=VPNSecurityLevel.HIGH
            ))
            
            if success:
                # –û–∂–∏–¥–∞–Ω–∏–µ 3 —Å–µ–∫—É–Ω–¥—ã
                time.sleep(3)
                
                # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ
                disconnect_success, disconnect_message = asyncio.run(vpn_system.disconnect(test_user))
                
                self.send_json_response({
                    'success': True,
                    'connect_message': message,
                    'disconnect_message': disconnect_message,
                    'report': report,
                    'test_duration': '3 —Å–µ–∫—É–Ω–¥—ã'
                })
            else:
                self.send_json_response({
                    'success': False,
                    'error': message
                })
                
        except Exception as e:
            self.send_json_response({
                'success': False,
                'error': str(e)
            })
    
    def serve_status(self):
        """API —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            if not vpn_system:
                self.send_json_response({'error': 'VPN —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞'})
                return
            
            status = vpn_system.get_status()
            stats = vpn_system.get_system_stats()
            
            self.send_json_response({
                'status': status['status'],
                'message': status['message'],
                'statistics': stats
            })
        except Exception as e:
            self.send_json_response({'error': str(e)})
    
    def send_json_response(self, data):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ JSON –æ—Ç–≤–µ—Ç–∞"""
        self.send_response(200)
        self.send_header('Content-type', 'application/json; charset=utf-8')
        self.end_headers()
        self.wfile.write(json.dumps(data, ensure_ascii=False).encode('utf-8'))

def init_vpn_system():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è VPN —Å–∏—Å—Ç–µ–º—ã"""
    global vpn_system
    try:
        vpn_system = VPNSecuritySystem("FixedVPNServer")
        print("‚úÖ VPN —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ VPN —Å–∏—Å—Ç–µ–º—ã: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üåç –ó–ê–ü–£–°–ö –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û VPN –°–ï–†–í–ï–†–ê")
    print("=" * 40)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è VPN —Å–∏—Å—Ç–µ–º—ã
    if not init_vpn_system():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å VPN —Å–∏—Å—Ç–µ–º—É")
        return
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
    PORT = 8000
    Handler = VPNRequestHandler
    
    try:
        with socketserver.TCPServer(("", PORT), Handler) as httpd:
            print(f"üåç VPN —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
            print(f"üì± –õ–æ–∫–∞–ª—å–Ω–æ: http://localhost:{PORT}")
            print(f"üåê –° —Ç–µ–ª–µ—Ñ–æ–Ω–∞: http://192.168.0.101:{PORT}")
            print(f"‚èπÔ∏è –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
            print("=" * 40)
            
            httpd.serve_forever()
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")

if __name__ == "__main__":
    main()
