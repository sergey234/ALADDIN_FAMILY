#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π VPN —Å–∏—Å—Ç–µ–º—ã
–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Å—Ç—Ä–∞–Ω –∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤
"""

import asyncio
import logging
import sys
import os
import time
from datetime import datetime

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from security.vpn.vpn_security_system import VPNSecuritySystem, VPNSecurityLevel
from security.vpn.core.vpn_core import VPNProtocol

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_vpn_extended():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π VPN —Å–∏—Å—Ç–µ–º—ã"""
    print("üåç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ê–°–®–ò–†–ï–ù–ù–û–ô VPN –°–ò–°–¢–ï–ú–´")
    print("=" * 60)
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ VPN —Å–∏—Å—Ç–µ–º—ã
        print("1. –°–æ–∑–¥–∞–Ω–∏–µ VPN Security System...")
        vpn_system = VPNSecuritySystem("ExtendedTestVPN")
        print("‚úÖ VPN Security System —Å–æ–∑–¥–∞–Ω")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
        print("\n2. –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤...")
        all_servers = vpn_system.get_available_servers()
        print(f"   –í—Å–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–æ–≤: {len(all_servers)}")
        
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º
        countries = {}
        protocols = {}
        
        for server in all_servers:
            country = server['country']
            protocol = server['protocol']
            
            if country not in countries:
                countries[country] = []
            countries[country].append(server)
            
            if protocol not in protocols:
                protocols[protocol] = []
            protocols[protocol].append(server)
        
        # –í—ã–≤–æ–¥ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—Ä–∞–Ω
        print("\n3. –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:")
        print("=" * 40)
        
        for country, servers in countries.items():
            print(f"\nüá∫üá≥ {country}:")
            for server in servers:
                print(f"   üìç {server['name']} ({server['city']})")
                print(f"      –ü—Ä–æ—Ç–æ–∫–æ–ª: {server['protocol']}")
                print(f"      –ó–∞–¥–µ—Ä–∂–∫–∞: {server['latency']:.1f}ms")
                print(f"      –ù–∞–≥—Ä—É–∑–∫–∞: {server['load']:.1%}")
                print(f"      –¢–∏–ø: {server['type']}")
        
        # –í—ã–≤–æ–¥ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤
        print("\n4. –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã:")
        print("=" * 30)
        
        for protocol, servers in protocols.items():
            print(f"\nüîå {protocol.upper()}:")
            print(f"   –°–µ—Ä–≤–µ—Ä–æ–≤: {len(servers)}")
            avg_latency = sum(s['latency'] for s in servers) / len(servers)
            print(f"   –°—Ä–µ–¥–Ω—è—è –∑–∞–¥–µ—Ä–∂–∫–∞: {avg_latency:.1f}ms")
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ä–∞–∑–Ω—ã–º —Å—Ç—Ä–∞–Ω–∞–º
        print("\n5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ä–∞–∑–Ω—ã–º —Å—Ç—Ä–∞–Ω–∞–º:")
        print("=" * 55)
        
        test_countries = ['Singapore', 'Russia', 'Netherlands', 'USA', 'Japan']
        
        for country in test_countries:
            if country in countries:
                print(f"\nüîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {country}...")
                
                # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                test_user = f"test_user_{country.lower()}_{int(time.time())}"
                success, message, report = await vpn_system.connect(
                    test_user, 
                    country=country,
                    security_level=VPNSecurityLevel.HIGH
                )
                
                if success:
                    print(f"   ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ: {message}")
                    print(f"   –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {report.get('provider', 'unknown')}")
                    print(f"   –í—Ä–µ–º—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {report.get('connection_time', 0):.2f}—Å")
                    
                    # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ
                    success, message = await vpn_system.disconnect(test_user)
                    if success:
                        print(f"   ‚úÖ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
                    else:
                        print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è: {message}")
                else:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {message}")
            else:
                print(f"   ‚ö†Ô∏è –°—Ç—Ä–∞–Ω–∞ {country} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ WireGuard –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
        print("\n6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ WireGuard –ø—Ä–æ—Ç–æ–∫–æ–ª–∞:")
        print("=" * 40)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ WireGuard —Å–µ—Ä–≤–µ—Ä–æ–≤
        wg_servers = [s for s in all_servers if s['protocol'] == 'wireguard']
        
        if wg_servers:
            print(f"   –ù–∞–π–¥–µ–Ω–æ WireGuard —Å–µ—Ä–≤–µ—Ä–æ–≤: {len(wg_servers)}")
            
            for server in wg_servers[:3]:  # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 3
                print(f"\n   üîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {server['name']}...")
                
                test_user = f"test_user_wg_{int(time.time())}"
                success, message, report = await vpn_system.connect(
                    test_user, 
                    country=server['country'],
                    security_level=VPNSecurityLevel.HIGH
                )
                
                if success:
                    print(f"      ‚úÖ WireGuard –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ: {message}")
                    print(f"      –í—Ä–µ–º—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {report.get('connection_time', 0):.2f}—Å")
                    
                    # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ
                    await vpn_system.disconnect(test_user)
                    print(f"      ‚úÖ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
                else:
                    print(f"      ‚ùå –û—à–∏–±–∫–∞ WireGuard –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {message}")
        else:
            print("   ‚ö†Ô∏è WireGuard —Å–µ—Ä–≤–µ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º
        print("\n7. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º:")
        print("=" * 30)
        
        for country, servers in countries.items():
            total_servers = len(servers)
            avg_latency = sum(s['latency'] for s in servers) / total_servers
            avg_load = sum(s['load'] for s in servers) / total_servers
            
            print(f"üá∫üá≥ {country}:")
            print(f"   –°–µ—Ä–≤–µ—Ä–æ–≤: {total_servers}")
            print(f"   –°—Ä–µ–¥–Ω—è—è –∑–∞–¥–µ—Ä–∂–∫–∞: {avg_latency:.1f}ms")
            print(f"   –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä—É–∑–∫–∞: {avg_load:.1%}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print("\n8. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:")
        print("=" * 50)
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∑–∞–¥–µ—Ä–∂–∫–µ
        sorted_countries = sorted(countries.items(), 
                                key=lambda x: sum(s['latency'] for s in x[1]) / len(x[1]))
        
        print("üèÜ –õ—É—á—à–∏–µ —Å—Ç—Ä–∞–Ω—ã –ø–æ –∑–∞–¥–µ—Ä–∂–∫–µ:")
        for i, (country, servers) in enumerate(sorted_countries[:5], 1):
            avg_latency = sum(s['latency'] for s in servers) / len(servers)
            print(f"   {i}. {country} - {avg_latency:.1f}ms")
        
        print("\nüì± –î–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º:")
        print("   - WireGuard –ø—Ä–æ—Ç–æ–∫–æ–ª (–±—ã—Å—Ç—Ä–µ–µ –∏ —Å—Ç–∞–±–∏–ª—å–Ω–µ–µ)")
        print("   - Singapore (–Ω–∏–∑–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞)")
        print("   - Europe (—Å—Ç–∞–±–∏–ª—å–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ)")
        print("   - Asia (–±–ª–∏–∑–∫–æ –∫ –†–æ—Å—Å–∏–∏)")
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("\n9. –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print("=" * 25)
        final_stats = vpn_system.get_system_stats()
        print(f"   –í—Å–µ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {final_stats['total_connections']}")
        print(f"   –£—Å–ø–µ—à–Ω—ã—Ö: {final_stats['successful_connections']}")
        print(f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {final_stats['success_rate']:.1f}%")
        print(f"   –£—Ä–æ–≤–µ–Ω—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {final_stats['security_level']}")
        
        print("\nüéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ê–°–®–ò–†–ï–ù–ù–û–ô VPN –°–ò–°–¢–ï–ú–´ –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üåç VPN SECURITY SYSTEM - –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ê–°–®–ò–†–ï–ù–ù–û–ô –°–ò–°–¢–ï–ú–´")
    print("=" * 80)
    print(f"–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 80)
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
    success = await test_vpn_extended()
    
    print("\n" + "=" * 80)
    print(f"–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    if success:
        print("‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ê–°–®–ò–†–ï–ù–ù–û–ô –°–ò–°–¢–ï–ú–´ –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
    else:
        print("‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ê–°–®–ò–†–ï–ù–ù–û–ô –°–ò–°–¢–ï–ú–´ –ó–ê–í–ï–†–®–ï–ù–û –° –û–®–ò–ë–ö–ê–ú–ò!")
    print("=" * 80)

if __name__ == "__main__":
    asyncio.run(main())
