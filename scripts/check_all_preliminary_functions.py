#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö Preliminary —Ñ—É–Ω–∫—Ü–∏–π
"""
import sys
import os
from typing import Dict, Any

sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from security.safe_function_manager import SafeFunctionManager
from core.base import SecurityLevel

def check_all_preliminary_functions() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö preliminary —Ñ—É–Ω–∫—Ü–∏–π"""
    print("üîç –ü–†–û–í–ï–†–ö–ê –í–°–ï–• PRELIMINARY –§–£–ù–ö–¶–ò–ô:")
    
    manager = SafeFunctionManager()
    manager.initialize()
    
    success = True
    
    functions_to_register = [
        ('zero_trust_service', 'ZeroTrustService', '–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è Zero Trust –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –¥–ª—è —Å–µ–º–µ–π'),
        ('mfa_service', 'MFAService', '–ú–Ω–æ–≥–æ—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è —Å–µ–º–µ–π'),
        ('behavioral_analysis', 'BehavioralAnalysis', '–ê–Ω–∞–ª–∏–∑ –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–π'),
        ('risk_assessment_service', 'RiskAssessmentService', '–û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏'),
        ('policy_engine', 'PolicyEngine', '–î–≤–∏–∂–æ–∫ –ø–æ–ª–∏—Ç–∏–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏'),
        ('trust_scoring', 'TrustScoring', '–°–∏—Å—Ç–µ–º–∞ –æ—Ü–µ–Ω–∫–∏ –¥–æ–≤–µ—Ä–∏—è –¥–ª—è —Å–µ–º–µ–π'),
        ('context_aware_access', 'ContextAwareAccess', '–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ-–∑–∞–≤–∏—Å–∏–º—ã–π –¥–æ—Å—Ç—É–ø –¥–ª—è —Å–µ–º–µ–π')
    ]
    
    for func_id, name, desc in functions_to_register:
        print(f"üìù –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º {name}...")
        result = manager.register_function(
            function_id=func_id,
            name=name,
            description=desc,
            function_type="preliminary",
            security_level=SecurityLevel.HIGH,
            is_critical=True,
            auto_enable=False
        )
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ –£–°–ü–ï–®–ù–û' if result else '‚ùå –û–®–ò–ë–ö–ê'}")
        if not result: success = False
    
    print("\nüìä –§–ò–ù–ê–õ–¨–ù–´–ô –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´:")
    status = manager.get_status()
    print(f"–í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π: {status.get('total_functions', 0)}")
    print(f"–í–∫–ª—é—á–µ–Ω–æ: {status.get('functions_enabled', 0)}")
    print(f"–û—Ç–∫–ª—é—á–µ–Ω–æ: {status.get('functions_disabled', 0)}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º
    types_stats = status.get('functions_by_type', {})
    if types_stats:
        print("–ü–æ —Ç–∏–ø–∞–º:")
        for func_type, count in types_stats.items():
            print(f"  {func_type}: {count}")
    
    print("\nüéâ –£–†–û–í–ï–ù–¨ 1 –ü–†–û–ì–†–ï–°–°:")
    print(f"Preliminary —Ñ—É–Ω–∫—Ü–∏–∏: {types_stats.get('preliminary', 0)}/7")
    
    return success

if __name__ == "__main__":
    success = check_all_preliminary_functions()
    sys.exit(0 if success else 1)