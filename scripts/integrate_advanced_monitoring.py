#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ SafeFunctionManager
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from security.advanced_monitoring_manager import advanced_monitoring_manager
from security.safe_function_manager import SafeFunctionManager
from core.base import SecurityLevel, ComponentStatus
from core.logging_module import LoggingManager
import time

logger = LoggingManager(name="IntegrateAdvancedMonitoring")

def integrate_advanced_monitoring():
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    logger.log("INFO", "üöÄ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SafeFunctionManager
        safe_manager = SafeFunctionManager()
        logger.log("INFO", "‚úÖ SafeFunctionManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        monitoring_functions = [
            {
                "function_id": "advanced_monitoring_manager",
                "name": "Advanced Monitoring Manager",
                "description": "–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ –∏ –∞–ª–µ—Ä—Ç–∞–º–∏",
                "function_type": "monitoring",
                "security_level": SecurityLevel.HIGH,
                "is_critical": True,
                "auto_enable": True
            },
            {
                "function_id": "get_system_metrics",
                "name": "Get System Metrics",
                "description": "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫",
                "function_type": "monitoring",
                "security_level": SecurityLevel.MEDIUM,
                "is_critical": False,
                "auto_enable": True
            },
            {
                "function_id": "get_alerts",
                "name": "Get Alerts",
                "description": "–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã",
                "function_type": "monitoring",
                "security_level": SecurityLevel.MEDIUM,
                "is_critical": False,
                "auto_enable": True
            },
            {
                "function_id": "get_dashboard_data",
                "name": "Get Dashboard Data",
                "description": "–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞",
                "function_type": "monitoring",
                "security_level": SecurityLevel.MEDIUM,
                "is_critical": False,
                "auto_enable": True
            },
            {
                "function_id": "get_monitoring_status",
                "name": "Get Monitoring Status",
                "description": "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞",
                "function_type": "monitoring",
                "security_level": SecurityLevel.MEDIUM,
                "is_critical": False,
                "auto_enable": True
            }
        ]
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π
        registered_count = 0
        for func_info in monitoring_functions:
            try:
                success = safe_manager.register_function(
                    function_id=func_info["function_id"],
                    name=func_info["name"],
                    description=func_info["description"],
                    function_type=func_info["function_type"],
                    security_level=func_info["security_level"],
                    is_critical=func_info["is_critical"],
                    auto_enable=func_info["auto_enable"]
                )
                
                if success:
                    registered_count += 1
                    logger.log("INFO", f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è: {func_info['name']}")
                else:
                    logger.log("WARNING", f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å: {func_info['name']}")
                    
            except Exception as e:
                logger.log("ERROR", f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ {func_info['name']}: {e}")
        
        logger.log("INFO", f"üìä –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ —Ñ—É–Ω–∫—Ü–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {registered_count}/{len(monitoring_functions)}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
        status = safe_manager.get_status()
        logger.log("INFO", f"üìà –°—Ç–∞—Ç—É—Å SafeFunctionManager: {status.get('status', 'unknown')}")
        logger.log("INFO", f"üîß –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π: {status.get('total_functions', 0)}")
        logger.log("INFO", f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π: {status.get('active_functions', 0)}")
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π
        logger.log("INFO", "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
        
        try:
            # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫
            metrics = advanced_monitoring_manager.get_metrics()
            logger.log("INFO", f"üìä –ú–µ—Ç—Ä–∏–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã: {len(metrics)} —Ç–∏–ø–æ–≤")
            
            # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–æ–≤
            alerts = advanced_monitoring_manager.get_alerts()
            logger.log("INFO", f"üö® –ê–ª–µ—Ä—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã: {len(alerts)} —à—Ç—É–∫")
            
            # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞—à–±–æ—Ä–¥–∞
            dashboard = advanced_monitoring_manager.get_dashboard_data()
            logger.log("INFO", f"üìà –î–∞–Ω–Ω—ã–µ –¥–∞—à–±–æ—Ä–¥–∞ –ø–æ–ª—É—á–µ–Ω—ã: {len(dashboard)} —Ä–∞–∑–¥–µ–ª–æ–≤")
            
            # –¢–µ—Å—Ç —Å—Ç–∞—Ç—É—Å–∞
            monitoring_status = advanced_monitoring_manager.get_status()
            logger.log("INFO", f"üîç –°—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {monitoring_status['status']}")
            
        except Exception as e:
            logger.log("ERROR", f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        
        logger.log("CRITICAL", "üéâ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        logger.log("CRITICAL", f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        return False

if __name__ == '__main__':
    success = integrate_advanced_monitoring()
    if success:
        print("\n‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("üöÄ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å Monitoring API Server:")
        print("   python3 monitoring_api_server.py")
        print("   –∏–ª–∏")
        print("   ./start_monitoring.sh")
    else:
        print("\n‚ùå –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
        sys.exit(1)