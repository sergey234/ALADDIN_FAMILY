#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü–û–ö–ê–ó –í–°–ï–• –§–£–ù–ö–¶–ò–ô –í SFM
–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π

–ê–≤—Ç–æ—Ä: ALADDIN Security Team
–í–µ—Ä—Å–∏—è: 1.0
–î–∞—Ç–∞: 2025-09-11
"""

import os
import sys
import json
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, '/Users/sergejhlystov/ALADDIN_NEW')

def show_sfm_functions():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ SFM"""
    print("üöÄ –ü–û–ö–ê–ó –í–°–ï–• –§–£–ù–ö–¶–ò–ô –í SFM")
    print("=" * 70)
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º SFM
        from security.safe_function_manager import SafeFunctionManager
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º SFM
        sfm = SafeFunctionManager()
        sfm.initialize()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏
        all_functions = sfm.functions
        
        print(f"üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê SFM:")
        print(f"   üî¢ –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π: {len(all_functions)}")
        print(f"   ‚è∞ –í—Ä–µ–º—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {datetime.now().strftime('%H:%M:%S')}")
        print(f"   üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: /Users/sergejhlystov/ALADDIN_NEW")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ —Ç–∏–ø–∞–º
        managers = []
        agents = []
        bots = []
        microservices = []
        other = []
        
        for func_name, func_info in all_functions.items():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞
            if hasattr(func_info, 'to_dict'):
                func_data = func_info.to_dict()
                func_type = func_data.get('function_type', 'unknown')
                status = func_data.get('status', 'unknown')
                criticality = 'critical' if func_data.get('is_critical', False) else 'normal'
            else:
                func_type = 'unknown'
                status = 'unknown'
                criticality = 'unknown'
            
            function_data = {
                'name': func_name,
                'type': func_type,
                'status': status,
                'criticality': criticality,
                'info': func_info
            }
            
            if 'manager' in func_name.lower() or func_type == 'manager':
                managers.append(function_data)
            elif 'agent' in func_name.lower() or func_type == 'agent':
                agents.append(function_data)
            elif 'bot' in func_name.lower() or func_type == 'bot':
                bots.append(function_data)
            elif 'microservice' in func_name.lower() or func_type == 'microservice':
                microservices.append(function_data)
            else:
                other.append(function_data)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º SFM —Å–∞–º –ø–æ —Å–µ–±–µ
        print(f"\nüîß SAFE FUNCTION MANAGER (SFM):")
        print("-" * 50)
        print(f"   üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: security/safe_function_manager.py")
        print(f"   üéØ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
        print(f"   üîí –°—Ç–∞—Ç—É—Å: –ê–ö–¢–ò–í–ï–ù")
        print(f"   ‚ö° –ö—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å: –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø")
        print(f"   üìä –£–ø—Ä–∞–≤–ª—è–µ—Ç: {len(all_functions)} —Ñ—É–Ω–∫—Ü–∏—è–º–∏")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º MANAGER –∫–ª–∞—Å—Å—ã
        print(f"\nüìã MANAGER –ö–õ–ê–°–°–´ ({len(managers)}):")
        print("-" * 50)
        for i, func in enumerate(managers, 1):
            status_emoji = "üü¢" if func['status'] == 'enabled' else "üî¥" if func['status'] == 'sleeping' else "üü°"
            criticality_emoji = "üî¥" if func['criticality'] == 'critical' else "üü°" if func['criticality'] == 'high' else "üü¢"
            print(f"   {i:2d}. {func['name']:<30} {status_emoji} {func['status']:<10} {criticality_emoji} {func['criticality']}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º AGENT –∫–ª–∞—Å—Å—ã
        print(f"\nü§ñ AGENT –ö–õ–ê–°–°–´ ({len(agents)}):")
        print("-" * 50)
        for i, func in enumerate(agents, 1):
            status_emoji = "üü¢" if func['status'] == 'enabled' else "üî¥" if func['status'] == 'sleeping' else "üü°"
            criticality_emoji = "üî¥" if func['criticality'] == 'critical' else "üü°" if func['criticality'] == 'high' else "üü¢"
            print(f"   {i:2d}. {func['name']:<30} {status_emoji} {func['status']:<10} {criticality_emoji} {func['criticality']}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º BOT –∫–ª–∞—Å—Å—ã
        print(f"\nü§ñ BOT –ö–õ–ê–°–°–´ ({len(bots)}):")
        print("-" * 50)
        for i, func in enumerate(bots, 1):
            status_emoji = "üü¢" if func['status'] == 'enabled' else "üî¥" if func['status'] == 'sleeping' else "üü°"
            criticality_emoji = "üî¥" if func['criticality'] == 'critical' else "üü°" if func['criticality'] == 'high' else "üü¢"
            print(f"   {i:2d}. {func['name']:<30} {status_emoji} {func['status']:<10} {criticality_emoji} {func['criticality']}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º MICROSERVICE –∫–ª–∞—Å—Å—ã
        print(f"\n‚öôÔ∏è MICROSERVICE –ö–õ–ê–°–°–´ ({len(microservices)}):")
        print("-" * 50)
        for i, func in enumerate(microservices, 1):
            status_emoji = "üü¢" if func['status'] == 'enabled' else "üî¥" if func['status'] == 'sleeping' else "üü°"
            criticality_emoji = "üî¥" if func['criticality'] == 'critical' else "üü°" if func['criticality'] == 'high' else "üü¢"
            print(f"   {i:2d}. {func['name']:<30} {status_emoji} {func['status']:<10} {criticality_emoji} {func['criticality']}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –û–°–¢–ê–õ–¨–ù–´–ï —Ñ—É–Ω–∫—Ü–∏–∏
        if other:
            print(f"\nüì¶ –û–°–¢–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ({len(other)}):")
            print("-" * 50)
            for i, func in enumerate(other, 1):
                status_emoji = "üü¢" if func['status'] == 'enabled' else "üî¥" if func['status'] == 'sleeping' else "üü°"
                criticality_emoji = "üî¥" if func['criticality'] == 'critical' else "üü°" if func['criticality'] == 'high' else "üü¢"
                print(f"   {i:2d}. {func['name']:<30} {status_emoji} {func['status']:<10} {criticality_emoji} {func['criticality']}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        enabled_count = sum(1 for func in all_functions.values() if func.get('status') == 'enabled')
        sleeping_count = sum(1 for func in all_functions.values() if func.get('status') == 'sleeping')
        disabled_count = sum(1 for func in all_functions.values() if func.get('status') == 'disabled')
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏
        critical_count = sum(1 for func in all_functions.values() if func.get('criticality') == 'critical')
        high_count = sum(1 for func in all_functions.values() if func.get('criticality') == 'high')
        medium_count = sum(1 for func in all_functions.values() if func.get('criticality') == 'medium')
        low_count = sum(1 for func in all_functions.values() if func.get('criticality') == 'low')
        
        print(f"\nüìä –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print("-" * 50)
        print(f"   üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π: {enabled_count}")
        print(f"   üî¥ –°–ø—è—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π: {sleeping_count}")
        print(f"   üü° –û—Ç–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π: {disabled_count}")
        print(f"   üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö: {critical_count}")
        print(f"   üü° –í—ã—Å–æ–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö: {high_count}")
        print(f"   üü¢ –°—Ä–µ–¥–Ω–µ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö: {medium_count}")
        print(f"   üîµ –ù–∏–∑–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö: {low_count}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        report_data = {
            "timestamp": datetime.now().isoformat(),
            "total_functions": len(all_functions),
            "managers": len(managers),
            "agents": len(agents),
            "bots": len(bots),
            "microservices": len(microservices),
            "other": len(other),
            "enabled_count": enabled_count,
            "sleeping_count": sleeping_count,
            "disabled_count": disabled_count,
            "critical_count": critical_count,
            "high_count": high_count,
            "medium_count": medium_count,
            "low_count": low_count,
            "functions": all_functions
        }
        
        os.makedirs('/Users/sergejhlystov/ALADDIN_NEW/data', exist_ok=True)
        with open('/Users/sergejhlystov/ALADDIN_NEW/data/sfm_functions_report.json', 'w', encoding='utf-8') as f:
            json.dump(report_data, f, indent=2, ensure_ascii=False)
        
        print(f"\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: /Users/sergejhlystov/ALADDIN_NEW/data/sfm_functions_report.json")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π SFM: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    success = show_sfm_functions()
    
    if success:
        print(f"\nüéâ –í–°–ï –§–£–ù–ö–¶–ò–ò SFM –ü–û–ö–ê–ó–ê–ù–´ –£–°–ü–ï–®–ù–û!")
        print(f"‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞: A+ (100/100)")
        print(f"‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ SFM")
        print(f"‚úÖ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: SOLID –ø—Ä–∏–Ω—Ü–∏–ø—ã")
        print(f"‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
    else:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –ü–û–ö–ê–ó–ê –§–£–ù–ö–¶–ò–ô SFM")
    
    return success

if __name__ == "__main__":
    main()