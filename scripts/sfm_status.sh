#!/bin/bash
# -*- coding: utf-8 -*-
# SFM Status Shell Script - Shell —Å–∫—Ä–∏–ø—Ç —Å –∞–≤—Ç–æ–ø–æ–∏—Å–∫–æ–º SFM

echo "üöÄ SFM STATUS SHELL SCRIPT"
echo "=================================================="

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ SFM —Ä–µ–µ—Å—Ç—Ä–∞
find_sfm_registry() {
    echo -e "${BLUE}üîç –ü–æ–∏—Å–∫ SFM —Ä–µ–µ—Å—Ç—Ä–∞...${NC}"
    
    # –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—É—Ç–∏ –∫ —Ä–µ–µ—Å—Ç—Ä—É
    POSSIBLE_PATHS=(
        "data/sfm/function_registry.json"
        "../data/sfm/function_registry.json"
        "../../data/sfm/function_registry.json"
        "ALADDIN_NEW/data/sfm/function_registry.json"
        "/Users/sergejhlystov/ALADDIN_NEW/data/sfm/function_registry.json"
    )
    
    SFM_REGISTRY=""
    for path in "${POSSIBLE_PATHS[@]}"; do
        if [ -f "$path" ]; then
            SFM_REGISTRY="$path"
            echo -e "${GREEN}‚úÖ SFM —Ä–µ–µ—Å—Ç—Ä –Ω–∞–π–¥–µ–Ω: $path${NC}"
            break
        fi
    done
    
    if [ -z "$SFM_REGISTRY" ]; then
        echo -e "${RED}‚ùå SFM —Ä–µ–µ—Å—Ç—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!${NC}"
        echo "–ü–æ–∏—Å–∫ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –º–µ—Å—Ç–∞—Ö:"
        for path in "${POSSIBLE_PATHS[@]}"; do
            echo "  - $path"
        done
        exit 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ JSON
check_json_validity() {
    echo -e "${BLUE}üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ JSON...${NC}"
    
    if python3 -c "import json; json.load(open('$SFM_REGISTRY'))" 2>/dev/null; then
        echo -e "${GREEN}‚úÖ JSON —Ñ–∞–π–ª –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω${NC}"
        return 0
    else
        echo -e "${RED}‚ùå JSON —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫–∏${NC}"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
get_basic_stats() {
    echo -e "${BLUE}üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...${NC}"
    
    python3 -c "
import json
try:
    with open('$SFM_REGISTRY', 'r', encoding='utf-8') as f:
        registry = json.load(f)
    
    functions = registry.get('functions', {})
    total = len(functions)
    active = sum(1 for f in functions.values() if isinstance(f, dict) and f.get('status') == 'active')
    sleeping = sum(1 for f in functions.values() if isinstance(f, dict) and f.get('status') == 'sleeping')
    critical = sum(1 for f in functions.values() if isinstance(f, dict) and f.get('is_critical', False))
    
    print(f'–í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π: {total}')
    print(f'–ê–∫—Ç–∏–≤–Ω—ã–µ: {active}')
    print(f'–°–ø—è—â–∏–µ: {sleeping}')
    print(f'–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ: {critical}')
    
    if total > 0:
        print(f'–ê–∫—Ç–∏–≤–Ω—ã–µ: {active/total*100:.1f}%')
        print(f'–°–ø—è—â–∏–µ: {sleeping/total*100:.1f}%')
        print(f'–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ: {critical/total*100:.1f}%')
    
except Exception as e:
    print(f'–û—à–∏–±–∫–∞: {e}')
    exit(1)
"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
check_structure() {
    echo -e "${BLUE}üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã SFM...${NC}"
    
    if [ -f "scripts/sfm_structure_validator.py" ]; then
        python3 scripts/sfm_structure_validator.py
    else
        echo -e "${YELLOW}‚ö†Ô∏è  –í–∞–ª–∏–¥–∞—Ç–æ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω${NC}"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
run_universal_analysis() {
    echo -e "${BLUE}üîç –ó–∞–ø—É—Å–∫ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...${NC}"
    
    if [ -f "scripts/sfm_stats_universal.py" ]; then
        python3 scripts/sfm_stats_universal.py
    else
        echo -e "${YELLOW}‚ö†Ô∏è  –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω${NC}"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–ø—Ä–∞–≤–∫–∏
show_help() {
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–æ–ø—Ü–∏–∏]"
    echo ""
    echo "–û–ø—Ü–∏–∏:"
    echo "  -h, --help     –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    echo "  -s, --stats    –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"
    echo "  -c, --check    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–ª—å–∫–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É"
    echo "  -a, --all      –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"
    echo "  -u, --universal –ó–∞–ø—É—Å—Ç–∏—Ç—å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä"
    echo ""
    echo "–ü—Ä–∏–º–µ—Ä—ã:"
    echo "  $0              # –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑"
    echo "  $0 --stats      # –¢–æ–ª—å–∫–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
    echo "  $0 --check      # –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"
    echo "  $0 --universal  # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä"
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    case "${1:-}" in
        -h|--help)
            show_help
            exit 0
            ;;
        -s|--stats)
            find_sfm_registry
            check_json_validity
            get_basic_stats
            ;;
        -c|--check)
            find_sfm_registry
            check_json_validity
            check_structure
            ;;
        -u|--universal)
            find_sfm_registry
            run_universal_analysis
            ;;
        -a|--all|"")
            find_sfm_registry
            check_json_validity
            get_basic_stats
            echo ""
            check_structure
            echo ""
            run_universal_analysis
            ;;
        *)
            echo -e "${RED}‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø—Ü–∏—è: $1${NC}"
            show_help
            exit 1
            ;;
    esac
    
    echo -e "${GREEN}üéâ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!${NC}"
}

# –ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main "$@"