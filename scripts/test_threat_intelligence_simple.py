#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç ThreatIntelligenceAgent
"""

import os
import sys
import time
import json
from datetime import datetime

def test_threat_intelligence_simple():
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç ThreatIntelligenceAgent"""
    print("üß™ –£–ü–†–û–©–ï–ù–ù–´–ô –¢–ï–°–¢ THREATINTELLIGENCEAGENT")
    print("=" * 50)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
        agent_file = "security/ai_agents/threat_intelligence_agent.py"
        if not os.path.exists(agent_file):
            print("‚ùå –§–∞–π–ª ThreatIntelligenceAgent –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        print("‚úÖ –§–∞–π–ª ThreatIntelligenceAgent –Ω–∞–π–¥–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞
        with open(agent_file, 'r') as f:
            content = f.read()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        components = {
            "–ö–ª–∞—Å—Å—ã": content.count("class "),
            "–ú–µ—Ç–æ–¥—ã": content.count("def "),
            "–ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è": content.count("class.*Enum"),
            "AI –º–æ–¥–µ–ª–∏": content.count("model_type"),
            "–ò—Å—Ç–æ—á–Ω–∏–∫–∏ —É–≥—Ä–æ–∑": content.count("source"),
            "IOC —Ç–∏–ø—ã": content.count("IOCType"),
            "–¢–∏–ø—ã —É–≥—Ä–æ–∑": content.count("ThreatType"),
            "–£—Ä–æ–≤–Ω–∏ —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏": content.count("ThreatSeverity"),
            "–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫": content.count("except"),
            "–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ": content.count("log_activity"),
            "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è": content.count('"""'),
            "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è": content.count("self.")
        }
        
        print("\nüìä –ö–û–ú–ü–û–ù–ï–ù–¢–´ –°–ò–°–¢–ï–ú–´:")
        total_components = 0
        for component, count in components.items():
            print("   {}: {}".format(component, count))
            total_components += count
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞
        lines = content.split('\n')
        code_lines = [line for line in lines if line.strip() and not line.strip().startswith('#')]
        total_lines = len(lines)
        code_line_count = len(code_lines)
        
        print("\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–û–î–ê:")
        print("   üìÑ –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {}".format(total_lines))
        print("   üíª –°—Ç—Ä–æ–∫ –∫–æ–¥–∞: {}".format(code_line_count))
        print("   üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {}".format(total_lines - code_line_count))
        print("   üìä –ü–ª–æ—Ç–Ω–æ—Å—Ç—å –∫–æ–¥–∞: {:.1f}%".format((code_line_count / total_lines) * 100))
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤
        architecture_checks = {
            "SOLID –ø—Ä–∏–Ω—Ü–∏–ø—ã": content.count("def ") >= 20,
            "DRY –ø—Ä–∏–Ω—Ü–∏–ø": content.count("def _") >= 15,
            "–ú–æ–¥—É–ª—å–Ω–æ—Å—Ç—å": content.count("class ") >= 4,
            "–†–∞—Å—à–∏—Ä—è–µ–º–æ—Å—Ç—å": content.count("Enum") >= 4,
            "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è": content.count('"""') >= 10,
            "–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫": content.count("except") >= 10,
            "–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ": content.count("log_activity") >= 15,
            "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è": content.count("self.") >= 50
        }
        
        print("\nüèóÔ∏è –ê–†–•–ò–¢–ï–ö–¢–£–†–ù–´–ï –ü–†–ò–ù–¶–ò–ü–´:")
        architecture_score = 0
        for principle, passed in architecture_checks.items():
            status = "‚úÖ" if passed else "‚ùå"
            print("   {} {}: {}".format(status, principle, "–ü–†–û–ô–î–ï–ù–û" if passed else "–ù–ï –ü–†–û–ô–î–ï–ù–û"))
            if passed:
                architecture_score += 1
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
        functionality_checks = {
            "–°–±–æ—Ä —É–≥—Ä–æ–∑": "collect_threats" in content,
            "–ê–Ω–∞–ª–∏–∑ —É–≥—Ä–æ–∑": "analyze_threats" in content,
            "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤": "generate_report" in content,
            "AI –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è": "_classify_threat" in content,
            "–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏": "_predict_severity" in content,
            "–ê–Ω–∞–ª–∏–∑ IOCs": "_analyze_iocs" in content,
            "–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏": "_collect_from_" in content,
            "–ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö": "_calculate_data_quality" in content,
            "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏": "_generate_recommendations" in content,
            "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö": "_save_data" in content
        }
        
        print("\n‚öôÔ∏è –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–¨:")
        functionality_score = 0
        for function, implemented in functionality_checks.items():
            status = "‚úÖ" if implemented else "‚ùå"
            print("   {} {}: {}".format(status, function, "–†–ï–ê–õ–ò–ó–û–í–ê–ù–û" if implemented else "–ù–ï –†–ï–ê–õ–ò–ó–û–í–ê–ù–û"))
            if implemented:
                functionality_score += 1
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        security_checks = {
            "–í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö": "validation" in content.lower(),
            "–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫": "except" in content,
            "–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ": "log_activity" in content,
            "–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö": "data" in content.lower(),
            "–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤": "source" in content.lower(),
            "–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö": "hash" in content.lower()
        }
        
        print("\nüîí –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨:")
        security_score = 0
        for security, implemented in security_checks.items():
            status = "‚úÖ" if implemented else "‚ùå"
            print("   {} {}: {}".format(status, security, "–†–ï–ê–õ–ò–ó–û–í–ê–ù–û" if implemented else "–ù–ï –†–ï–ê–õ–ò–ó–û–í–ê–ù–û"))
            if implemented:
                security_score += 1
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        test_file_content = ""
        if os.path.exists("tests/test_threat_intelligence_agent.py"):
            with open("tests/test_threat_intelligence_agent.py", 'r') as f:
                test_file_content = f.read()
        
        test_checks = {
            "Unit —Ç–µ—Å—Ç—ã": os.path.exists("tests/test_threat_intelligence_agent.py"),
            "–¢–µ—Å—Ç –∫–∞—á–µ—Å—Ç–≤–∞": os.path.exists("scripts/test_threat_intelligence_quality.py"),
            "–°–ø—è—â–∏–π —Ä–µ–∂–∏–º": os.path.exists("scripts/put_threat_intelligence_to_sleep.py"),
            "–ü–æ–∫—Ä—ã—Ç–∏–µ –∫–æ–¥–∞": code_line_count >= 500,
            "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤": "unittest" in test_file_content and "TestThreatIntelligenceAgent" in test_file_content and '"""' in test_file_content
        }
        
        print("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï:")
        test_score = 0
        for test, exists in test_checks.items():
            status = "‚úÖ" if exists else "‚ùå"
            print("   {} {}: {}".format(status, test, "–ï–°–¢–¨" if exists else "–ù–ï–¢"))
            if exists:
                test_score += 1
        
        # –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
        total_score = 0
        max_score = 100
        
        # –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ (25 –±–∞–ª–ª–æ–≤)
        architecture_percentage = (architecture_score / len(architecture_checks)) * 25
        total_score += architecture_percentage
        
        # –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å (35 –±–∞–ª–ª–æ–≤)
        functionality_percentage = (functionality_score / len(functionality_checks)) * 35
        total_score += functionality_percentage
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å (20 –±–∞–ª–ª–æ–≤)
        security_percentage = (security_score / len(security_checks)) * 20
        total_score += security_percentage
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (20 –±–∞–ª–ª–æ–≤)
        test_percentage = (test_score / len(test_checks)) * 20
        total_score += test_percentage
        
        print("\nüèÜ –û–¶–ï–ù–ö–ê –ö–ê–ß–ï–°–¢–í–ê: {:.1f}/{}".format(total_score, max_score))
        
        if total_score >= 95:
            print("‚úÖ –ö–ê–ß–ï–°–¢–í–û: A+ (–û–¢–õ–ò–ß–ù–û)")
            quality_grade = "A+"
        elif total_score >= 90:
            print("‚úÖ –ö–ê–ß–ï–°–¢–í–û: A (–û–¢–õ–ò–ß–ù–û)")
            quality_grade = "A"
        elif total_score >= 80:
            print("‚ö†Ô∏è –ö–ê–ß–ï–°–¢–í–û: B (–•–û–†–û–®–û)")
            quality_grade = "B"
        elif total_score >= 70:
            print("‚ö†Ô∏è –ö–ê–ß–ï–°–¢–í–û: C (–£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û)")
            quality_grade = "C"
        else:
            print("‚ùå –ö–ê–ß–ï–°–¢–í–û: D (–¢–†–ï–ë–£–ï–¢ –£–õ–£–ß–®–ï–ù–ò–Ø)")
            quality_grade = "D"
        
        # –ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –±–∞–ª–ª–æ–≤
        missing_points = max_score - total_score
        print("\nüìä –ê–ù–ê–õ–ò–ó –ù–ï–î–û–°–¢–ê–Æ–©–ò–• –ë–ê–õ–õ–û–í:")
        print("   üéØ –¢–µ–∫—É—â–∏–π –±–∞–ª–ª: {:.1f}".format(total_score))
        print("   üéØ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª: {}".format(max_score))
        print("   üéØ –ù–µ–¥–æ—Å—Ç–∞–µ—Ç –±–∞–ª–ª–æ–≤: {:.1f}".format(missing_points))
        
        if missing_points > 0:
            print("\nüîß –ß–¢–û –ù–£–ñ–ù–û –î–õ–Ø 100%:")
            
            # –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            arch_missing = (25 - architecture_percentage)
            func_missing = (35 - functionality_percentage)
            sec_missing = (20 - security_percentage)
            test_missing = (20 - test_percentage)
            
            if arch_missing > 0:
                print("   üèóÔ∏è –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: +{:.1f} –±–∞–ª–ª–æ–≤".format(arch_missing))
            if func_missing > 0:
                print("   ‚öôÔ∏è –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: +{:.1f} –±–∞–ª–ª–æ–≤".format(func_missing))
            if sec_missing > 0:
                print("   üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: +{:.1f} –±–∞–ª–ª–æ–≤".format(sec_missing))
            if test_missing > 0:
                print("   üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: +{:.1f} –±–∞–ª–ª–æ–≤".format(test_missing))
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        report = {
            "test_timestamp": datetime.now().isoformat(),
            "agent_name": "ThreatIntelligenceAgent",
            "total_score": total_score,
            "max_score": max_score,
            "quality_grade": quality_grade,
            "missing_points": missing_points,
            "components": components,
            "architecture_score": architecture_score,
            "architecture_max": len(architecture_checks),
            "functionality_score": functionality_score,
            "functionality_max": len(functionality_checks),
            "security_score": security_score,
            "security_max": len(security_checks),
            "test_score": test_score,
            "test_max": len(test_checks),
            "code_statistics": {
                "total_lines": total_lines,
                "code_lines": code_line_count,
                "comment_lines": total_lines - code_line_count,
                "code_density": (code_line_count / total_lines) * 100
            }
        }
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        report_dir = "data/quality_reports"
        if not os.path.exists(report_dir):
            os.makedirs(report_dir)
        
        report_file = os.path.join(report_dir, "threat_intelligence_simple_test_{}.json".format(int(time.time())))
        with open(report_file, 'w') as f:
            json.dump(report, f, indent=2, ensure_ascii=False)
        
        print("\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {}".format(report_file))
        
        return total_score >= 90
        
    except Exception as e:
        print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {}".format(str(e)))
        import traceback
        traceback.print_exc()
        return False


if __name__ == "__main__":
    success = test_threat_intelligence_simple()
    if success:
        print("\nüéâ THREATINTELLIGENCEAGENT –°–û–û–¢–í–ï–¢–°–¢–í–£–ï–¢ –°–¢–ê–ù–î–ê–†–¢–ê–ú A+ –ö–ê–ß–ï–°–¢–í–ê!")
    else:
        print("\n‚ö†Ô∏è THREATINTELLIGENCEAGENT –¢–†–ï–ë–£–ï–¢ –£–õ–£–ß–®–ï–ù–ò–Ø!")
    exit(0 if success else 1)