#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Complete Project Backup - –ü–æ–ª–Ω—ã–π –±—ç–∫–∞–ø –ø—Ä–æ–µ–∫—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ ALADDIN (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
–°–æ–∑–¥–∞–Ω–∏–µ 100% –±—ç–∫–∞–ø–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –∏ –∫–∞—á–µ—Å—Ç–≤–∞

–§—É–Ω–∫—Ü–∏—è: Complete Project Backup
–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô
–í–µ—Ä—Å–∏—è: 1.1
–î–∞—Ç–∞: 2025-09-07
"""

import os
import sys
import shutil
import hashlib
import json
import zipfile
import tarfile
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Any, Tuple

class CompleteBackupManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª–Ω–æ–≥–æ –±—ç–∫–∞–ø–∞ –ø—Ä–æ–µ–∫—Ç–∞"""
    
    def __init__(self, project_root: str = "."):
        self.project_root = Path(project_root).resolve()
        self.backup_timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        self.backup_name = f"ALADDIN_SECURITY_BACKUP_{self.backup_timestamp}"
        self.backup_dir = Path(f"../BACKUPS/{self.backup_name}")
        self.manifest_file = self.backup_dir / "BACKUP_MANIFEST.json"
        self.checksums_file = self.backup_dir / "CHECKSUMS.txt"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—ç–∫–∞–ø–∞
        self.stats = {
            'total_files': 0,
            'total_dirs': 0,
            'total_size': 0,
            'backup_size': 0,
            'errors': [],
            'warnings': [],
            'start_time': None,
            'end_time': None,
            'duration': 0
        }
        
        # –§–∞–π–ª—ã –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        self.exclude_patterns = {
            '__pycache__',
            '.pyc',
            '.pyo',
            '.pyd',
            '.git',
            '.gitignore',
            '.DS_Store',
            'Thumbs.db',
            '*.log',
            '*.tmp',
            '*.temp',
            'node_modules',
            '.venv',
            'venv',
            'env',
            '.env',
            '*.egg-info',
            '.pytest_cache',
            '.coverage',
            'htmlcov',
            '.tox',
            '.mypy_cache',
            '.ruff_cache'
        }
    
    def create_backup_directory(self) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –±—ç–∫–∞–ø–∞"""
        try:
            self.backup_dir.mkdir(parents=True, exist_ok=True)
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –±—ç–∫–∞–ø–∞: {self.backup_dir}")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –±—ç–∫–∞–ø–∞: {e}")
            self.stats['errors'].append(f"Directory creation error: {e}")
            return False
    
    def calculate_file_hash(self, file_path: Path) -> str:
        """–†–∞—Å—á–µ—Ç —Ö–µ—à–∞ —Ñ–∞–π–ª–∞"""
        try:
            hash_md5 = hashlib.md5()
            with open(file_path, "rb") as f:
                for chunk in iter(lambda: f.read(4096), b""):
                    hash_md5.update(chunk)
            return hash_md5.hexdigest()
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ö–µ—à–∞ –¥–ª—è {file_path}: {e}")
            return "ERROR"
    
    def should_exclude_file(self, file_path: Path) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–∫–ª—é—á–∏—Ç—å —Ñ–∞–π–ª"""
        file_name = file_path.name
        file_str = str(file_path)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        for pattern in self.exclude_patterns:
            if pattern.startswith('*'):
                if file_name.endswith(pattern[1:]):
                    return True
            elif pattern in file_name:
                return True
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –ø—É—Ç–∏
        for part in file_path.parts:
            if part in self.exclude_patterns:
                return True
        
        return False
    
    def scan_project_files(self) -> List[Dict[str, Any]]:
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞"""
        print("ÔøΩÔøΩ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞...")
        files_info = []
        
        for root, dirs, files in os.walk(self.project_root):
            # –ò—Å–∫–ª—é—á–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            dirs[:] = [d for d in dirs if not self.should_exclude_file(Path(d))]
            
            for file in files:
                file_path = Path(root) / file
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                if self.should_exclude_file(file_path):
                    continue
                
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
                    stat = file_path.stat()
                    relative_path = file_path.relative_to(self.project_root)
                    
                    file_info = {
                        'path': str(relative_path),
                        'full_path': str(file_path),
                        'size': stat.st_size,
                        'modified': stat.st_mtime,
                        'hash': self.calculate_file_hash(file_path),
                        'type': 'file'
                    }
                    
                    files_info.append(file_info)
                    self.stats['total_files'] += 1
                    self.stats['total_size'] += stat.st_size
                    
                except Exception as e:
                    error_msg = f"Error scanning {file_path}: {e}"
                    print(f"‚ö†Ô∏è {error_msg}")
                    self.stats['warnings'].append(error_msg)
        
        # –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        for root, dirs, files in os.walk(self.project_root):
            for dir_name in dirs:
                dir_path = Path(root) / dir_name
                if not self.should_exclude_file(dir_path):
                    try:
                        relative_path = dir_path.relative_to(self.project_root)
                        dir_info = {
                            'path': str(relative_path),
                            'full_path': str(dir_path),
                            'size': 0,
                            'modified': dir_path.stat().st_mtime,
                            'hash': 'DIRECTORY',
                            'type': 'directory'
                        }
                        files_info.append(dir_info)
                        self.stats['total_dirs'] += 1
                    except Exception as e:
                        error_msg = f"Error scanning directory {dir_path}: {e}"
                        self.stats['warnings'].append(error_msg)
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {self.stats['total_files']}")
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π: {self.stats['total_dirs']}")
        print(f"‚úÖ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {self.stats['total_size'] / (1024*1024):.2f} MB")
        
        return files_info
    
    def create_file_backup(self, files_info: List[Dict[str, Any]]) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –±—ç–∫–∞–ø–∞"""
        print("üìÅ –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –±—ç–∫–∞–ø–∞...")
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
            for file_info in files_info:
                if file_info['type'] == 'directory':
                    dir_path = self.backup_dir / file_info['path']
                    dir_path.mkdir(parents=True, exist_ok=True)
            
            # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
            for file_info in files_info:
                if file_info['type'] == 'file':
                    src_path = Path(file_info['full_path'])
                    dst_path = self.backup_dir / file_info['path']
                    
                    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
                    dst_path.parent.mkdir(parents=True, exist_ok=True)
                    
                    # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
                    shutil.copy2(src_path, dst_path)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å
                    if dst_path.exists():
                        dst_hash = self.calculate_file_hash(dst_path)
                        if dst_hash != file_info['hash']:
                            error_msg = f"Hash mismatch for {file_info['path']}"
                            print(f"‚ùå {error_msg}")
                            self.stats['errors'].append(error_msg)
                            return False
            
            print("‚úÖ –§–∞–π–ª–æ–≤—ã–π –±—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except Exception as e:
            error_msg = f"Error creating file backup: {e}"
            print(f"‚ùå {error_msg}")
            self.stats['errors'].append(error_msg)
            return False
    
    def create_archive_backup(self) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–Ω–æ–≥–æ –±—ç–∫–∞–ø–∞"""
        print("üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–Ω–æ–≥–æ –±—ç–∫–∞–ø–∞...")
        
        try:
            # –°–æ–∑–¥–∞–µ–º ZIP –∞—Ä—Ö–∏–≤
            zip_path = self.backup_dir.parent / f"{self.backup_name}.zip"
            with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED, compresslevel=9) as zipf:
                for root, dirs, files in os.walk(self.backup_dir):
                    for file in files:
                        file_path = Path(root) / file
                        arcname = file_path.relative_to(self.backup_dir)
                        zipf.write(file_path, arcname)
            
            # –°–æ–∑–¥–∞–µ–º TAR.GZ –∞—Ä—Ö–∏–≤
            tar_path = self.backup_dir.parent / f"{self.backup_name}.tar.gz"
            with tarfile.open(tar_path, 'w:gz') as tar:
                tar.add(self.backup_dir, arcname=self.backup_name)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∞—Ä—Ö–∏–≤–æ–≤
            zip_size = zip_path.stat().st_size
            tar_size = tar_path.stat().st_size
            
            self.stats['backup_size'] = min(zip_size, tar_size)
            
            print(f"‚úÖ ZIP –∞—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω: {zip_path} ({zip_size / (1024*1024):.2f} MB)")
            print(f"‚úÖ TAR.GZ –∞—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω: {tar_path} ({tar_size / (1024*1024):.2f} MB)")
            
            return True
            
        except Exception as e:
            error_msg = f"Error creating archive backup: {e}"
            print(f"‚ùå {error_msg}")
            self.stats['errors'].append(error_msg)
            return False
    
    def create_manifest(self, files_info: List[Dict[str, Any]]) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞ –±—ç–∫–∞–ø–∞"""
        print("üìã –°–æ–∑–¥–∞–Ω–∏–µ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞ –±—ç–∫–∞–ø–∞...")
        
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è JSON (—É–±–∏—Ä–∞–µ–º datetime –æ–±—ä–µ–∫—Ç—ã)
            manifest_stats = self.stats.copy()
            if manifest_stats['start_time']:
                manifest_stats['start_time'] = manifest_stats['start_time'].isoformat()
            if manifest_stats['end_time']:
                manifest_stats['end_time'] = manifest_stats['end_time'].isoformat()
            
            manifest = {
                'backup_info': {
                    'name': self.backup_name,
                    'timestamp': self.backup_timestamp,
                    'created_at': datetime.now().isoformat(),
                    'project_root': str(self.project_root),
                    'backup_dir': str(self.backup_dir)
                },
                'statistics': manifest_stats,
                'files': files_info,
                'exclude_patterns': list(self.exclude_patterns),
                'backup_quality': {
                    'total_files_backed_up': len([f for f in files_info if f['type'] == 'file']),
                    'total_dirs_backed_up': len([f for f in files_info if f['type'] == 'directory']),
                    'backup_completeness': 100.0,
                    'integrity_check': 'PASSED' if not self.stats['errors'] else 'FAILED'
                }
            }
            
            with open(self.manifest_file, 'w', encoding='utf-8') as f:
                json.dump(manifest, f, indent=2, ensure_ascii=False)
            
            print(f"‚úÖ –ú–∞–Ω–∏—Ñ–µ—Å—Ç —Å–æ–∑–¥–∞–Ω: {self.manifest_file}")
            return True
            
        except Exception as e:
            error_msg = f"Error creating manifest: {e}"
            print(f"‚ùå {error_msg}")
            self.stats['errors'].append(error_msg)
            return False
    
    def create_checksums(self, files_info: List[Dict[str, Any]]) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö —Å—É–º–º"""
        print("üîê –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö —Å—É–º–º...")
        
        try:
            with open(self.checksums_file, 'w', encoding='utf-8') as f:
                f.write(f"# ALADDIN Security Project Backup Checksums\n")
                f.write(f"# Created: {datetime.now().isoformat()}\n")
                f.write(f"# Total files: {len(files_info)}\n\n")
                
                for file_info in files_info:
                    if file_info['type'] == 'file':
                        f.write(f"{file_info['hash']}  {file_info['path']}\n")
            
            print(f"‚úÖ –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —Å—É–º–º—ã —Å–æ–∑–¥–∞–Ω—ã: {self.checksums_file}")
            return True
            
        except Exception as e:
            error_msg = f"Error creating checksums: {e}"
            print(f"‚ùå {error_msg}")
            self.stats['errors'].append(error_msg)
            return False
    
    def verify_backup_integrity(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –±—ç–∫–∞–ø–∞"""
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –±—ç–∫–∞–ø–∞...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞
            if not self.manifest_file.exists():
                print("‚ùå –ú–∞–Ω–∏—Ñ–µ—Å—Ç –±—ç–∫–∞–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞–Ω–∏—Ñ–µ—Å—Ç
            with open(self.manifest_file, 'r', encoding='utf-8') as f:
                manifest = json.load(f)
            
            files_info = manifest['files']
            errors = 0
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
            for file_info in files_info:
                if file_info['type'] == 'file':
                    file_path = self.backup_dir / file_info['path']
                    
                    if not file_path.exists():
                        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_info['path']}")
                        errors += 1
                        continue
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ö–µ—à
                    current_hash = self.calculate_file_hash(file_path)
                    if current_hash != file_info['hash']:
                        print(f"‚ùå –•–µ—à –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: {file_info['path']}")
                        errors += 1
                        continue
            
            if errors == 0:
                print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                return True
            else:
                print(f"‚ùå –ù–∞–π–¥–µ–Ω–æ –æ—à–∏–±–æ–∫ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏: {errors}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏: {e}")
            return False
    
    def create_backup_report(self) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ –±—ç–∫–∞–ø–µ"""
        report = []
        
        report.append("üíæ –û–¢–ß–ï–¢ –û –ü–û–õ–ù–û–ú –ë–≠–ö–ê–ü–ï –ü–†–û–ï–ö–¢–ê ALADDIN")
        report.append("=" * 60)
        report.append(f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        report.append(f"–ù–∞–∑–≤–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞: {self.backup_name}")
        report.append(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –±—ç–∫–∞–ø–∞: {self.backup_dir}")
        report.append("")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        report.append("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–≠–ö–ê–ü–ê:")
        report.append(f"–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {self.stats['total_files']}")
        report.append(f"–í—Å–µ–≥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π: {self.stats['total_dirs']}")
        report.append(f"–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {self.stats['total_size'] / (1024*1024):.2f} MB")
        report.append(f"–†–∞–∑–º–µ—Ä –±—ç–∫–∞–ø–∞: {self.stats['backup_size'] / (1024*1024):.2f} MB")
        if self.stats['total_size'] > 0:
            report.append(f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–∂–∞—Ç–∏—è: {(1 - self.stats['backup_size'] / self.stats['total_size']) * 100:.1f}%")
        report.append("")
        
        # –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        if self.stats['start_time'] and self.stats['end_time']:
            duration = (self.stats['end_time'] - self.stats['start_time']).total_seconds()
            report.append(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.2f} —Å–µ–∫—É–Ω–¥")
            report.append("")
        
        # –û—à–∏–±–∫–∏ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        if self.stats['errors']:
            report.append("‚ùå –û–®–ò–ë–ö–ò:")
            for error in self.stats['errors']:
                report.append(f"‚Ä¢ {error}")
            report.append("")
        
        if self.stats['warnings']:
            report.append("‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:")
            for warning in self.stats['warnings']:
                report.append(f"‚Ä¢ {warning}")
            report.append("")
        
        # –ö–∞—á–µ—Å—Ç–≤–æ –±—ç–∫–∞–ø–∞
        report.append("‚úÖ –ö–ê–ß–ï–°–¢–í–û –ë–≠–ö–ê–ü–ê:")
        if not self.stats['errors']:
            report.append("‚Ä¢ –¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å: –ü–†–û–ô–î–ï–ù–ê")
            report.append("‚Ä¢ –ü–æ–ª–Ω–æ—Ç–∞: 100%")
            report.append("‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ: –û–¢–õ–ò–ß–ù–û–ï")
        else:
            report.append("‚Ä¢ –¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å: –ù–ï –ü–†–û–ô–î–ï–ù–ê")
            report.append("‚Ä¢ –ü–æ–ª–Ω–æ—Ç–∞: –ß–ê–°–¢–ò–ß–ù–ê–Ø")
            report.append("‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ: –¢–†–ï–ë–£–ï–¢ –í–ù–ò–ú–ê–ù–ò–Ø")
        
        report.append("")
        report.append("üìÅ –§–ê–ô–õ–´ –ë–≠–ö–ê–ü–ê:")
        report.append(f"‚Ä¢ –ú–∞–Ω–∏—Ñ–µ—Å—Ç: {self.manifest_file}")
        report.append(f"‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —Å—É–º–º—ã: {self.checksums_file}")
        report.append(f"‚Ä¢ ZIP –∞—Ä—Ö–∏–≤: {self.backup_name}.zip")
        report.append(f"‚Ä¢ TAR.GZ –∞—Ä—Ö–∏–≤: {self.backup_name}.tar.gz")
        
        return "\n".join(report)
    
    def run_complete_backup(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –±—ç–∫–∞–ø–∞"""
        print("üíæ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –ë–≠–ö–ê–ü–ê –ü–†–û–ï–ö–¢–ê ALADDIN")
        print("=" * 60)
        
        self.stats['start_time'] = datetime.now()
        
        # 1. –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –±—ç–∫–∞–ø–∞
        if not self.create_backup_directory():
            return False
        
        # 2. –°–∫–∞–Ω–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞
        files_info = self.scan_project_files()
        if not files_info:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞")
            return False
        
        # 3. –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª–æ–≤—ã–π –±—ç–∫–∞–ø
        if not self.create_file_backup(files_info):
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤–æ–≥–æ –±—ç–∫–∞–ø–∞")
            return False
        
        # 4. –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤–Ω—ã–π –±—ç–∫–∞–ø
        if not self.create_archive_backup():
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–Ω–æ–≥–æ –±—ç–∫–∞–ø–∞")
            return False
        
        # 5. –°–æ–∑–¥–∞–µ–º –º–∞–Ω–∏—Ñ–µ—Å—Ç
        if not self.create_manifest(files_info):
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞")
            return False
        
        # 6. –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —Å—É–º–º—ã
        if not self.create_checksums(files_info):
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö —Å—É–º–º")
            return False
        
        # 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å
        if not self.verify_backup_integrity():
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏")
            return False
        
        self.stats['end_time'] = datetime.now()
        
        # 8. –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
        report = self.create_backup_report()
        print("\n" + report)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        report_file = self.backup_dir / "BACKUP_REPORT.txt"
        with open(report_file, 'w', encoding='utf-8') as f:
            f.write(report)
        
        print(f"\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
        print("üéâ –ü–û–õ–ù–´–ô –ë–≠–ö–ê–ü –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
        
        return True

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
if __name__ == "__main__":
    print("üíæ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –ë–≠–ö–ê–ü–ê –ü–†–û–ï–ö–¢–ê ALADDIN")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±—ç–∫–∞–ø–∞
    backup_manager = CompleteBackupManager(".")
    
    # –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –±—ç–∫–∞–ø–∞
    success = backup_manager.run_complete_backup()
    
    if success:
        print("\n‚úÖ –ë–≠–ö–ê–ü –°–û–ó–î–ê–ù –£–°–ü–ï–®–ù–û!")
        print(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –±—ç–∫–∞–ø–∞: {backup_manager.backup_dir}")
    else:
        print("\n‚ùå –û–®–ò–ë–ö–ê –°–û–ó–î–ê–ù–ò–Ø –ë–≠–ö–ê–ü–ê!")
        sys.exit(1)
