#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üéØ –ú–ò–ù–ò–ú–ê–õ–¨–ù–ê–Ø –ê–ö–¢–ò–í–ù–ê–Ø –°–ò–°–¢–ï–ú–ê
===============================

–ü–µ—Ä–µ–≤–æ–¥ –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –∫—Ä–æ–º–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö
–¥–ª—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã

–ê–≤—Ç–æ—Ä: ALADDIN Security System
–î–∞—Ç–∞: 2025-09-15
–í–µ—Ä—Å–∏—è: 1.0.0
"""

import asyncio
import json
import os
import logging
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Any, Set

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class MinimalActiveSystem:
    """–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞"""
    
    def __init__(self):
        self.minimal_active_functions = {
            # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π
            "safe_function_manager",
            "sleep_mode_manager",
            "all_bots_sleep_manager",
            "safe_sleep_mode_optimizer",
            
            # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏—Å—Ç–µ–º—ã
            "enhanced_alerting",
            "threat_detection",
            "incident_response",
            
            # ML –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (–≤—Å–µ AI –∞–≥–µ–Ω—Ç—ã)
            "behavioral_analysis_agent",
            "threat_detection_agent", 
            "password_security_agent",
            "incident_response_agent",
            "network_security_agent",
            "compliance_agent",
            "mobile_security_agent",
            "emergency_ml_analyzer",
            "analytics_manager",
            
            # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—ã
            "rate_limiter",
            "circuit_breaker",
            "user_interface_manager",
            
            # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –±–æ—Ç—ã
            "mobile_navigation_bot",
            "notification_bot",
            
            # –ë–∞–∑–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º—ã
            "authentication_manager",
            "access_control_manager",
            "data_protection_manager",
            "zero_trust_manager",
            "security_audit",
            "threat_intelligence",
            "malware_protection",
            "intrusion_prevention",
            "network_monitoring",
            "ransomware_protection",
            
            # –Ø–¥—Ä–æ —Å–∏—Å—Ç–µ–º—ã
            "configuration",
            "database",
            "logging_module",
            "security_base",
            "service_base"
        }
        
    async def create_minimal_system(self) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("üéØ –°–û–ó–î–ê–ù–ò–ï –ú–ò–ù–ò–ú–ê–õ–¨–ù–û–ô –ê–ö–¢–ò–í–ù–û–ô –°–ò–°–¢–ï–ú–´")
        logger.info("=" * 50)
        
        results = {
            "timestamp": datetime.now().isoformat(),
            "minimal_active": len(self.minimal_active_functions),
            "sleep_attempts": 0,
            "successful_sleep": 0,
            "errors": 0,
            "slept_functions": [],
            "error_functions": []
        }
        
        # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º SFM —Ä–µ–µ—Å—Ç—Ä
        sfm_registry = await self._load_sfm_registry()
        
        # 2. –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º –∫—Ä–æ–º–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö
        if "functions" in sfm_registry:
            for func_id, func_data in sfm_registry["functions"].items():
                func_name = func_data.get("name", func_id)
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
                if func_name in self.minimal_active_functions:
                    logger.info(f"‚úÖ {func_name} - –æ—Å—Ç–∞–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–æ–π")
                    continue
                
                # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º
                try:
                    result = await self._put_function_to_sleep(func_id, func_data, sfm_registry)
                    results["sleep_attempts"] += 1
                    
                    if result["success"]:
                        results["successful_sleep"] += 1
                        results["slept_functions"].append(func_name)
                        logger.info(f"üò¥ {func_name} - –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º")
                    else:
                        results["errors"] += 1
                        results["error_functions"].append({
                            "name": func_name,
                            "error": result["message"]
                        })
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ {func_name}: {result['message']}")
                        
                except Exception as e:
                    results["errors"] += 1
                    results["error_functions"].append({
                        "name": func_name,
                        "error": str(e)
                    })
                    logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ {func_name}: {e}")
        
        # 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ä–µ–µ—Å—Ç—Ä
        await self._save_sfm_registry(sfm_registry)
        
        # 4. –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
        report_path = f"logs/minimal_system_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(report_path, "w", encoding="utf-8") as f:
            json.dump(results, f, indent=2, ensure_ascii=False)
        
        logger.info(f"üìã –û—Ç—á–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã: {report_path}")
        logger.info(f"‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö: {results['minimal_active']}")
        logger.info(f"üò¥ –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –≤ —Å–æ–Ω: {results['successful_sleep']}")
        logger.info(f"‚ùå –û—à–∏–±–æ–∫: {results['errors']}")
        
        return results
    
    async def _load_sfm_registry(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ SFM —Ä–µ–µ—Å—Ç—Ä–∞"""
        try:
            with open("data/sfm/function_registry.json", "r", encoding="utf-8") as f:
                return json.load(f)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ SFM —Ä–µ–µ—Å—Ç—Ä–∞: {e}")
            return {}
    
    async def _save_sfm_registry(self, sfm_registry: Dict[str, Any]) -> None:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ SFM —Ä–µ–µ—Å—Ç—Ä–∞"""
        try:
            with open("data/sfm/function_registry.json", "w", encoding="utf-8") as f:
                json.dump(sfm_registry, f, indent=2, ensure_ascii=False)
            logger.info("‚úÖ SFM —Ä–µ–µ—Å—Ç—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è SFM —Ä–µ–µ—Å—Ç—Ä–∞: {e}")
    
    async def _put_function_to_sleep(self, func_id: str, func_data: Dict[str, Any], sfm_registry: Dict[str, Any]) -> Dict[str, Any]:
        """–ü–µ—Ä–µ–≤–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ SFM —Ä–µ–µ—Å—Ç—Ä–µ
            sfm_registry["functions"][func_id]["status"] = "sleeping"
            sfm_registry["functions"][func_id]["sleep_time"] = datetime.now().isoformat()
            sfm_registry["functions"][func_id]["minimal_system_sleep"] = True
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
            state_path = f"data/sleep_states/{func_data.get('name', func_id)}_state.json"
            os.makedirs(os.path.dirname(state_path), exist_ok=True)
            
            function_state = {
                "function_name": func_data.get("name", func_id),
                "function_id": func_id,
                "sleep_time": datetime.now().isoformat(),
                "previous_status": func_data.get("status", "active"),
                "security_level": func_data.get("security_level", "medium"),
                "is_critical": func_data.get("is_critical", False),
                "minimal_system_sleep": True
            }
            
            with open(state_path, "w", encoding="utf-8") as f:
                json.dump(function_state, f, indent=2, ensure_ascii=False)
            
            return {
                "success": True,
                "message": f"–§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º",
                "sleep_time": function_state["sleep_time"]
            }
            
        except Exception as e:
            return {
                "success": False,
                "message": f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ —Å–æ–Ω: {str(e)}"
            }
    
    async def get_system_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            sfm_registry = await self._load_sfm_registry()
            
            if "functions" not in sfm_registry:
                return {"error": "SFM —Ä–µ–µ—Å—Ç—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"}
            
            active_count = 0
            sleeping_count = 0
            minimal_active_count = 0
            
            for func_id, func_data in sfm_registry["functions"].items():
                func_name = func_data.get("name", func_id)
                status = func_data.get("status", "unknown")
                
                if func_name in self.minimal_active_functions:
                    minimal_active_count += 1
                elif status == "active":
                    active_count += 1
                elif status == "sleeping":
                    sleeping_count += 1
            
            return {
                "total_functions": len(sfm_registry["functions"]),
                "minimal_active": minimal_active_count,
                "other_active": active_count,
                "sleeping": sleeping_count,
                "minimal_functions": list(self.minimal_active_functions)
            }
            
        except Exception as e:
            return {"error": str(e)}

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üéØ –ú–ò–ù–ò–ú–ê–õ–¨–ù–ê–Ø –ê–ö–¢–ò–í–ù–ê–Ø –°–ò–°–¢–ï–ú–ê")
    print("=" * 40)
    
    minimal_system = MinimalActiveSystem()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞...")
    status_before = await minimal_system.get_system_status()
    print(f"   –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π: {status_before.get('total_functions', 0)}")
    print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö: {status_before.get('other_active', 0)}")
    print(f"   –°–ø—è—â–∏—Ö: {status_before.get('sleeping', 0)}")
    print(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö: {status_before.get('minimal_active', 0)}")
    
    # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É
    print("\nüéØ –°–æ–∑–¥–∞–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...")
    results = await minimal_system.create_minimal_system()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...")
    status_after = await minimal_system.get_system_status()
    print(f"   –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π: {status_after.get('total_functions', 0)}")
    print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö: {status_after.get('other_active', 0)}")
    print(f"   –°–ø—è—â–∏—Ö: {status_after.get('sleeping', 0)}")
    print(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö: {status_after.get('minimal_active', 0)}")
    
    print(f"\nüéØ –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö: {results['minimal_active']}")
    print(f"   –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –≤ —Å–æ–Ω: {results['successful_sleep']}")
    print(f"   –û—à–∏–±–æ–∫: {results['errors']}")
    
    if results['errors'] == 0:
        print("‚úÖ –ú–ò–ù–ò–ú–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –°–û–ó–î–ê–ù–ê!")
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è")
    
    return 0

if __name__ == "__main__":
    exit(asyncio.run(main()))