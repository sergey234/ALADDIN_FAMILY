#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è NotificationBotMain –≤ SafeFunctionManager
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Å–∏—Å—Ç–µ–º—É SFM
"""

import sys
import os
import asyncio
import logging
from pathlib import Path
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(str(Path(__file__).parent.parent))

from security.ai_agents.notification_bot_main import NotificationBotMain, Notification, NotificationChannel, NotificationPriority
from security.safe_function_manager import SafeFunctionManager
from core.base import SecurityLevel

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


async def test_notification_bot_main():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ NotificationBotMain"""
    try:
        logger.info("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ NotificationBotMain...")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
        bot = NotificationBotMain()
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        logger.info("üì± –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...")
        notification = Notification(
            id="test_001",
            user_id="user_123",
            title="–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ",
            message="–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç NotificationBotMain",
            channel=NotificationChannel.PUSH,
            priority=NotificationPriority.HIGH,
            created_at=datetime.now()
        )
        
        # –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        logger.info("üì§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...")
        success = bot.send_notification(notification)
        logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏: {success}")
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        logger.info("üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞...")
        status = await bot.get_status()
        logger.info(f"‚úÖ –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞: {status}")
        
        logger.info("‚úÖ NotificationBotMain —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω!")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è NotificationBotMain: {e}")
        return False


def integrate_with_safe_function_manager():
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å SafeFunctionManager"""
    try:
        logger.info("üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è NotificationBotMain —Å SafeFunctionManager...")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ SFM
        sfm = SafeFunctionManager()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è NotificationBotMain
        logger.info("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è NotificationBotMain...")
        success = sfm.register_function(
            function_id="notification_bot_main",
            name="NotificationBotMain",
            description="–û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π 8 –∫–∞–Ω–∞–ª–æ–≤",
            function_type="ai_agent",
            security_level=SecurityLevel.HIGH,
            is_critical=True,
            auto_enable=True
        )
        
        if success:
            logger.info("‚úÖ NotificationBotMain —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
            def notification_bot_main_handler(*args, **kwargs):
                """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è NotificationBotMain"""
                try:
                    from security.ai_agents.notification_bot_main import NotificationBotMain
                    bot = NotificationBotMain()
                    return {
                        'status': 'success',
                        'function_id': 'notification_bot_main',
                        'handler_name': 'NotificationBotMain',
                        'message': 'NotificationBotMain —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω',
                        'bot': bot
                    }
                except Exception as e:
                    return {
                        'status': 'error',
                        'function_id': 'notification_bot_main',
                        'handler_name': 'NotificationBotMain',
                        'message': f'–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ NotificationBotMain: {e}'
                    }
            
            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
            sfm.register_function_handler('notification_bot_main', notification_bot_main_handler)
            logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ NotificationBotMain –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")
            
            # –í–∫–ª—é—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
            sfm.enable_function('notification_bot_main')
            logger.info("‚úÖ NotificationBotMain –≤–∫–ª—é—á–µ–Ω!")
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ä–µ–µ—Å—Ç—Ä
            sfm._save_functions()
            logger.info("‚úÖ –§—É–Ω–∫—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ä–µ–µ—Å—Ç—Ä!")
            
            return True
        else:
            logger.error("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ NotificationBotMain")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å SafeFunctionManager: {e}")
        return False


def verify_integration():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    try:
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ NotificationBotMain...")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ SFM
        sfm = SafeFunctionManager()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        if 'notification_bot_main' in sfm.functions:
            logger.info("‚úÖ NotificationBotMain –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–µ—Å—Ç—Ä–µ SFM!")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
            status = sfm.get_function_status('notification_bot_main')
            logger.info(f"üìä –°—Ç–∞—Ç—É—Å: {status}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
            if 'notification_bot_main' in sfm.function_handlers:
                logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ NotificationBotMain –Ω–∞–π–¥–µ–Ω!")
                
                # –¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                result = sfm.execute_function('notification_bot_main')
                logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {result}")
                
                return True
            else:
                logger.error("‚ùå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ NotificationBotMain –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return False
        else:
            logger.error("‚ùå NotificationBotMain –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–µ—Å—Ç—Ä–µ SFM!")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        return False


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        logger.info("üöÄ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø NOTIFICATIONBOTMAIN –í SFM")
        logger.info("=" * 60)
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        logger.info("1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ NotificationBotMain...")
        test_success = await test_notification_bot_main()
        
        if test_success:
            # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
            logger.info("2Ô∏è‚É£ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å SafeFunctionManager...")
            integration_success = integrate_with_safe_function_manager()
            
            if integration_success:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞
                logger.info("3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...")
                verify_success = verify_integration()
                
                if verify_success:
                    logger.info("üéâ NotificationBotMain —É—Å–ø–µ—à–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ SFM!")
                    return True
                else:
                    logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
                    return False
            else:
                logger.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å SFM")
                return False
        else:
            logger.error("‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    success = asyncio.run(main())
    
    if success:
        print("\nüéâ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        print("‚úÖ NotificationBotMain –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ SFM")
        print("‚úÖ –§—É–Ω–∫—Ü–∏—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∏ –≤–∫–ª—é—á–µ–Ω–∞")
        print("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        print("‚úÖ –†–µ–µ—Å—Ç—Ä –æ–±–Ω–æ–≤–ª–µ–Ω")
    else:
        print("\n‚ùå –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –° –û–®–ò–ë–ö–ê–ú–ò!")
        print("‚ùå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π")
    
    sys.exit(0 if success else 1)