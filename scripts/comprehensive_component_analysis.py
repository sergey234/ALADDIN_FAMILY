#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ALADDIN Security System - –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ SFM
–ê–Ω–∞–ª–∏–∑ 191 –∫–ª–∞—Å—Å–∞ –≤ security + 9 –∫–ª–∞—Å—Å–æ–≤ –≤ core = 200 –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏

–ê–≤—Ç–æ—Ä: ALADDIN Security Team
–í–µ—Ä—Å–∏—è: 1.0
–î–∞—Ç–∞: 2025-09-11
"""

import os
import sys
import re
from pathlib import Path
from typing import Dict, List, Tuple, Set

def analyze_security_components():
    """–ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ SFM"""
    
    project_root = Path('/Users/sergejhlystov/ALADDIN_NEW')
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    categories = {
        'core': {'files': 0, 'classes': 0, 'functions': 0, 'components': []},
        'security_main': {'files': 0, 'classes': 0, 'functions': 0, 'components': []},
        'ai_agents': {'files': 0, 'classes': 0, 'functions': 0, 'components': []},
        'bots': {'files': 0, 'classes': 0, 'functions': 0, 'components': []},
        'microservices': {'files': 0, 'classes': 0, 'functions': 0, 'components': []},
        'family': {'files': 0, 'classes': 0, 'functions': 0, 'components': []},
        'compliance': {'files': 0, 'classes': 0, 'functions': 0, 'components': []},
        'privacy': {'files': 0, 'classes': 0, 'functions': 0, 'components': []},
        'reactive': {'files': 0, 'classes': 0, 'functions': 0, 'components': []},
        'active': {'files': 0, 'classes': 0, 'functions': 0, 'components': []},
        'preliminary': {'files': 0, 'classes': 0, 'functions': 0, 'components': []},
        'orchestration': {'files': 0, 'classes': 0, 'functions': 0, 'components': []},
        'scaling': {'files': 0, 'classes': 0, 'functions': 0, 'components': []}
    }
    
    # –ê–Ω–∞–ª–∏–∑ CORE –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    print("üîç –ê–ù–ê–õ–ò–ó CORE –ö–û–ú–ü–û–ù–ï–ù–¢–û–í...")
    core_files = list(project_root.glob('core/*.py'))
    for file_path in core_files:
        if file_path.name != '__init__.py':
            categories['core']['files'] += 1
            classes, functions = analyze_file(file_path)
            categories['core']['classes'] += classes
            categories['core']['functions'] += functions
            categories['core']['components'].append({
                'file': file_path.name,
                'path': str(file_path),
                'classes': classes,
                'functions': functions
            })
    
    # –ê–Ω–∞–ª–∏–∑ SECURITY –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    print("üîç –ê–ù–ê–õ–ò–ó SECURITY –ö–û–ú–ü–û–ù–ï–ù–¢–û–í...")
    security_files = list(project_root.glob('security/*.py'))
    for file_path in security_files:
        if file_path.name != '__init__.py':
            categories['security_main']['files'] += 1
            classes, functions = analyze_file(file_path)
            categories['security_main']['classes'] += classes
            categories['security_main']['functions'] += functions
            categories['security_main']['components'].append({
                'file': file_path.name,
                'path': str(file_path),
                'classes': classes,
                'functions': functions
            })
    
    # –ê–Ω–∞–ª–∏–∑ AI AGENTS
    print("üîç –ê–ù–ê–õ–ò–ó AI AGENTS...")
    ai_agent_files = list(project_root.glob('security/ai_agents/*.py'))
    for file_path in ai_agent_files:
        if file_path.name != '__init__.py':
            categories['ai_agents']['files'] += 1
            classes, functions = analyze_file(file_path)
            categories['ai_agents']['classes'] += classes
            categories['ai_agents']['functions'] += functions
            categories['ai_agents']['components'].append({
                'file': file_path.name,
                'path': str(file_path),
                'classes': classes,
                'functions': functions
            })
    
    # –ê–Ω–∞–ª–∏–∑ BOTS
    print("üîç –ê–ù–ê–õ–ò–ó BOTS...")
    bot_files = list(project_root.glob('security/bots/*.py'))
    for file_path in bot_files:
        if file_path.name != '__init__.py':
            categories['bots']['files'] += 1
            classes, functions = analyze_file(file_path)
            categories['bots']['classes'] += classes
            categories['bots']['functions'] += functions
            categories['bots']['components'].append({
                'file': file_path.name,
                'path': str(file_path),
                'classes': classes,
                'functions': functions
            })
    
    # –ê–Ω–∞–ª–∏–∑ MICROSERVICES
    print("üîç –ê–ù–ê–õ–ò–ó MICROSERVICES...")
    microservice_files = list(project_root.glob('security/microservices/*.py'))
    for file_path in microservice_files:
        if file_path.name != '__init__.py':
            categories['microservices']['files'] += 1
            classes, functions = analyze_file(file_path)
            categories['microservices']['classes'] += classes
            categories['microservices']['functions'] += functions
            categories['microservices']['components'].append({
                'file': file_path.name,
                'path': str(file_path),
                'classes': classes,
                'functions': functions
            })
    
    # –ê–Ω–∞–ª–∏–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    additional_categories = [
        ('family', 'security/family'),
        ('compliance', 'security/compliance'),
        ('privacy', 'security/privacy'),
        ('reactive', 'security/reactive'),
        ('active', 'security/active'),
        ('preliminary', 'security/preliminary'),
        ('orchestration', 'security/orchestration'),
        ('scaling', 'security/scaling')
    ]
    
    for cat_name, cat_path in additional_categories:
        print(f"üîç –ê–ù–ê–õ–ò–ó {cat_name.upper()}...")
        cat_files = list(project_root.glob(f'{cat_path}/*.py'))
        for file_path in cat_files:
            if file_path.name != '__init__.py':
                categories[cat_name]['files'] += 1
                classes, functions = analyze_file(file_path)
                categories[cat_name]['classes'] += classes
                categories[cat_name]['functions'] += functions
                categories[cat_name]['components'].append({
                    'file': file_path.name,
                    'path': str(file_path),
                    'classes': classes,
                    'functions': functions
                })
    
    return categories

def analyze_file(file_path: Path) -> Tuple[int, int]:
    """–ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Å–æ–≤ –∏ —Ñ—É–Ω–∫—Ü–∏–π"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ü–æ–¥—Å—á–µ—Ç –∫–ª–∞—Å—Å–æ–≤
        class_count = len(re.findall(r'^class\s+\w+', content, re.MULTILINE))
        
        # –ü–æ–¥—Å—á–µ—Ç —Ñ—É–Ω–∫—Ü–∏–π
        function_count = len(re.findall(r'^def\s+\w+', content, re.MULTILINE))
        
        return class_count, function_count
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞ {file_path}: {e}")
        return 0, 0

def generate_integration_plan(categories: Dict) -> None:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º"""
    
    print("\n" + "="*80)
    print("üìä –ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –ö–û–ú–ü–û–ù–ï–ù–¢–û–í –î–õ–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –í SFM")
    print("="*80)
    
    total_files = sum(cat['files'] for cat in categories.values())
    total_classes = sum(cat['classes'] for cat in categories.values())
    total_functions = sum(cat['functions'] for cat in categories.values())
    
    print(f"\nüéØ –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"  üìÅ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {total_files}")
    print(f"  üèóÔ∏è –í—Å–µ–≥–æ –∫–ª–∞—Å—Å–æ–≤: {total_classes}")
    print(f"  ‚öôÔ∏è –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π: {total_functions}")
    
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    priorities = {
        '–ü–ï–†–í–´–ô –ü–†–ò–û–†–ò–¢–ï–¢ (–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï)': ['core', 'security_main'],
        '–í–¢–û–†–û–ô –ü–†–ò–û–†–ò–¢–ï–¢ (–í–´–°–û–ö–ò–ï)': ['ai_agents', 'bots', 'microservices'],
        '–¢–†–ï–¢–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢ (–°–†–ï–î–ù–ò–ï)': ['family', 'compliance', 'privacy'],
        '–ß–ï–¢–í–ï–†–¢–´–ô –ü–†–ò–û–†–ò–¢–ï–¢ (–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï)': ['reactive', 'active', 'preliminary', 'orchestration', 'scaling']
    }
    
    for priority_name, priority_categories in priorities.items():
        print(f"\n{priority_name}:")
        print("-" * 50)
        
        priority_total_files = 0
        priority_total_classes = 0
        priority_total_functions = 0
        
        for cat_name in priority_categories:
            if cat_name in categories:
                cat = categories[cat_name]
                priority_total_files += cat['files']
                priority_total_classes += cat['classes']
                priority_total_functions += cat['functions']
                
                print(f"  üìÇ {cat_name.upper()}: {cat['files']} —Ñ–∞–π–ª–æ–≤, {cat['classes']} –∫–ª–∞—Å—Å–æ–≤, {cat['functions']} —Ñ—É–Ω–∫—Ü–∏–π")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-5 –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
                if cat['components']:
                    print(f"    üîù –¢–æ–ø-5 –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:")
                    sorted_components = sorted(cat['components'], key=lambda x: x['classes'], reverse=True)[:5]
                    for i, comp in enumerate(sorted_components, 1):
                        print(f"      {i}. {comp['file']} - {comp['classes']} –∫–ª–∞—Å—Å–æ–≤, {comp['functions']} —Ñ—É–Ω–∫—Ü–∏–π")
        
        print(f"  üìä –ò–¢–û–ì–û: {priority_total_files} —Ñ–∞–π–ª–æ–≤, {priority_total_classes} –∫–ª–∞—Å—Å–æ–≤, {priority_total_functions} —Ñ—É–Ω–∫—Ü–∏–π")
    
    # –î–µ—Ç–∞–ª—å–Ω–∞—è —Ä–∞–∑–±–∏–≤–∫–∞ –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º
    print(f"\nüìã –î–ï–¢–ê–õ–¨–ù–ê–Ø –†–ê–ó–ë–ò–í–ö–ê –ü–û –ö–û–ú–ü–û–ù–ï–ù–¢–ê–ú:")
    print("="*80)
    
    for cat_name, cat_data in categories.items():
        if cat_data['files'] > 0:
            print(f"\nüèóÔ∏è {cat_name.upper()} –ö–û–ú–ü–û–ù–ï–ù–¢–´ ({cat_data['files']} —Ñ–∞–π–ª–æ–≤):")
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–ª–∞—Å—Å–æ–≤
            sorted_components = sorted(cat_data['components'], key=lambda x: x['classes'], reverse=True)
            
            for i, comp in enumerate(sorted_components, 1):
                status = "‚úÖ" if comp['classes'] > 0 else "‚ö†Ô∏è"
                print(f"  {i:2d}. {status} {comp['file']} - {comp['classes']} –∫–ª–∞—Å—Å–æ–≤, {comp['functions']} —Ñ—É–Ω–∫—Ü–∏–π")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    print(f"\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ò–ù–¢–ï–ì–†–ê–¶–ò–ò:")
    print("="*80)
    
    critical_components = categories['core']['classes'] + categories['security_main']['classes']
    high_priority_components = categories['ai_agents']['classes'] + categories['bots']['classes'] + categories['microservices']['classes']
    medium_priority_components = categories['family']['classes'] + categories['compliance']['classes'] + categories['privacy']['classes']
    additional_components = (categories['reactive']['classes'] + categories['active']['classes'] + 
                           categories['preliminary']['classes'] + categories['orchestration']['classes'] + 
                           categories['scaling']['classes'])
    
    print(f"  üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï (–Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ): {critical_components} –∫–ª–∞—Å—Å–æ–≤")
    print(f"  üü° –í–´–°–û–ö–ò–ï (–≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏): {high_priority_components} –∫–ª–∞—Å—Å–æ–≤")
    print(f"  üü† –°–†–ï–î–ù–ò–ï (–≤ —Ç–µ—á–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞): {medium_priority_components} –∫–ª–∞—Å—Å–æ–≤")
    print(f"  üîµ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï (–ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏): {additional_components} –∫–ª–∞—Å—Å–æ–≤")
    
    total_for_integration = critical_components + high_priority_components + medium_priority_components + additional_components
    print(f"\n  üìä –í–°–ï–ì–û –î–õ–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–ò: {total_for_integration} –∫–ª–∞—Å—Å–æ–≤ –∏–∑ {total_classes} ({total_for_integration/total_classes*100:.1f}%)")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –ö–û–ú–ü–û–ù–ï–ù–¢–û–í ALADDIN SECURITY SYSTEM")
    print("="*80)
    
    # –ê–Ω–∞–ª–∏–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    categories = analyze_security_components()
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    generate_integration_plan(categories)
    
    print(f"\n‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù!")
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ {sum(cat['classes'] for cat in categories.values())} –∫–ª–∞—Å—Å–æ–≤ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ SFM")

if __name__ == "__main__":
    main()