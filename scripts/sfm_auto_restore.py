#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
SFM Auto Restore - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ SFM —Å–∫—Ä–∏–ø—Ç–æ–≤
–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ SFM —Å–∫—Ä–∏–ø—Ç—ã
"""

import os
import sys
import json
import shutil
from datetime import datetime
from pathlib import Path

class SFMAutoRestore:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ SFM —Å–∫—Ä–∏–ø—Ç–æ–≤"""
    
    def __init__(self):
        self.scripts_dir = "scripts"
        self.backup_dir = "data/sfm/backups"
        self.restore_log = []
        
        # –®–∞–±–ª–æ–Ω—ã –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–æ–≤
        self.script_templates = {
            'sfm_quick_stats.py': self._get_quick_stats_template(),
            'sfm_stats_universal.py': self._get_universal_stats_template(),
            'sfm_add_function.py': self._get_add_function_template(),
            'sfm_fix_and_validate.py': self._get_fix_validate_template(),
            'sfm_manager.py': self._get_manager_template(),
            'sfm_integrity_check.py': self._get_integrity_check_template()
        }
    
    def _get_quick_stats_template(self):
        """–®–∞–±–ª–æ–Ω –¥–ª—è sfm_quick_stats.py"""
        return '''#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
SFM Quick Stats - –ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ SFM
"""

import json
import os
from datetime import datetime

def get_sfm_stats():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –±—ã—Å—Ç—Ä–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ SFM"""
    try:
        with open('data/sfm/function_registry.json', 'r', encoding='utf-8') as f:
            registry = json.load(f)
        
        functions = registry.get('functions', {})
        total = len(functions)
        active = sum(1 for f in functions.values() if isinstance(f, dict) and f.get('status') == 'active')
        sleeping = sum(1 for f in functions.values() if isinstance(f, dict) and f.get('status') == 'sleeping')
        critical = sum(1 for f in functions.values() if isinstance(f, dict) and f.get('is_critical', False))
        
        print("üìä –ê–ö–¢–£–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê SFM")
        print("=" * 40)
        print(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ: {registry.get('last_updated', 'unknown')}")
        print()
        print("–ü–∞—Ä–∞–º–µ—Ç—Ä                –ó–Ω–∞—á–µ–Ω–∏–µ        –ü—Ä–æ—Ü–µ–Ω—Ç")
        print("-" * 40)
        print(f"{'–í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π':<25} {total:<15} 100.0%")
        
        if total > 0:
            print(f"{'–ê–∫—Ç–∏–≤–Ω—ã–µ':<25} {active:<15} {active/total*100:.1f}%")
            print(f"{'–°–ø—è—â–∏–µ':<25} {sleeping:<15} {sleeping/total*100:.1f}%")
            print(f"{'–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ':<25} {critical:<15} {critical/total*100:.1f}%")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    get_sfm_stats()
'''
    
    def _get_universal_stats_template(self):
        """–®–∞–±–ª–æ–Ω –¥–ª—è sfm_stats_universal.py"""
        return '''#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
SFM Universal Statistics - –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ SFM
"""

import json
import os
import sys
from datetime import datetime

def find_sfm_registry():
    """–ü–æ–∏—Å–∫ SFM —Ä–µ–µ—Å—Ç—Ä–∞"""
    possible_paths = [
        'data/sfm/function_registry.json',
        '../data/sfm/function_registry.json',
        '../../data/sfm/function_registry.json'
    ]
    
    for path in possible_paths:
        if os.path.exists(path):
            return path
    return None

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ SFM UNIVERSAL STATISTICS")
    print("=" * 50)
    
    registry_path = find_sfm_registry()
    if not registry_path:
        print("‚ùå SFM —Ä–µ–µ—Å—Ç—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        sys.exit(1)
    
    print(f"‚úÖ SFM —Ä–µ–µ—Å—Ç—Ä –Ω–∞–π–¥–µ–Ω: {registry_path}")
    
    try:
        with open(registry_path, 'r', encoding='utf-8') as f:
            registry = json.load(f)
        
        functions = registry.get('functions', {})
        print(f"üìä –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π: {len(functions)}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()
'''
    
    def _get_add_function_template(self):
        """–®–∞–±–ª–æ–Ω –¥–ª—è sfm_add_function.py"""
        return '''#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
SFM Add Function - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –≤ SFM —Ä–µ–µ—Å—Ç—Ä
"""

import json
import os
import sys
from datetime import datetime

def add_function_interactive():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏"""
    print("üîß –î–û–ë–ê–í–õ–ï–ù–ò–ï –ù–û–í–û–ô –§–£–ù–ö–¶–ò–ò")
    print("=" * 50)
    
    func_data = {
        'function_id': input("Function ID: ").strip(),
        'name': input("Name: ").strip(),
        'description': input("Description: ").strip(),
        'function_type': input("Type (ai_agent/security/bot/manager): ").strip(),
        'status': input("Status (active/sleeping): ").strip(),
        'is_critical': input("Critical? (y/N): ").strip().lower() == 'y',
        'created_at': datetime.now().isoformat()
    }
    
    try:
        with open('data/sfm/function_registry.json', 'r', encoding='utf-8') as f:
            registry = json.load(f)
        
        if 'functions' not in registry:
            registry['functions'] = {}
        
        registry['functions'][func_data['function_id']] = func_data
        
        with open('data/sfm/function_registry.json', 'w', encoding='utf-8') as f:
            json.dump(registry, f, indent=2, ensure_ascii=False)
        
        print("‚úÖ –§—É–Ω–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    add_function_interactive()
'''
    
    def _get_fix_validate_template(self):
        """–®–∞–±–ª–æ–Ω –¥–ª—è sfm_fix_and_validate.py"""
        return '''#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
SFM Fix and Validate - –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ SFM
"""

import json
import os
from datetime import datetime

def validate_and_fix():
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ SFM —Ä–µ–µ—Å—Ç—Ä–∞"""
    print("üîß –í–ê–õ–ò–î–ê–¶–ò–Ø –ò –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï SFM")
    print("=" * 50)
    
    try:
        with open('data/sfm/function_registry.json', 'r', encoding='utf-8') as f:
            registry = json.load(f)
        
        functions = registry.get('functions', {})
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ñ—É–Ω–∫—Ü–∏–π: {len(functions)}")
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats = {
            'total_functions': len(functions),
            'active_functions': sum(1 for f in functions.values() if isinstance(f, dict) and f.get('status') == 'active'),
            'sleeping_functions': sum(1 for f in functions.values() if isinstance(f, dict) and f.get('status') == 'sleeping'),
            'critical_functions': sum(1 for f in functions.values() if isinstance(f, dict) and f.get('is_critical', False))
        }
        
        registry['statistics'] = stats
        registry['last_updated'] = datetime.now().isoformat()
        
        with open('data/sfm/function_registry.json', 'w', encoding='utf-8') as f:
            json.dump(registry, f, indent=2, ensure_ascii=False)
        
        print("‚úÖ SFM —Ä–µ–µ—Å—Ç—Ä –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –∏ –æ–±–Ω–æ–≤–ª–µ–Ω!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    validate_and_fix()
'''
    
    def _get_manager_template(self):
        """–®–∞–±–ª–æ–Ω –¥–ª—è sfm_manager.py"""
        return '''#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
SFM Manager - –ì–ª–∞–≤–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä SFM
"""

import os
import sys
import subprocess

def run_command(command):
    """–ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã"""
    try:
        result = subprocess.run([sys.executable, f"scripts/{command}"], 
                              capture_output=True, text=True)
        print(result.stdout)
        if result.stderr:
            print(result.stderr)
        return result.returncode == 0
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ SFM MANAGER")
    print("=" * 50)
    
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python3 scripts/sfm_manager.py <command>")
        print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: stats, validate, fix, add")
        return
    
    command = sys.argv[1]
    
    if command == 'stats':
        run_command('sfm_quick_stats.py')
    elif command == 'validate':
        print("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è SFM...")
        # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
        try:
            import json
            with open('data/sfm/function_registry.json', 'r') as f:
                json.load(f)
            print("‚úÖ SFM —Ä–µ–µ—Å—Ç—Ä –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    elif command == 'fix':
        run_command('sfm_fix_and_validate.py')
    elif command == 'add':
        run_command('sfm_add_function.py')
    else:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")

if __name__ == "__main__":
    main()
'''
    
    def _get_integrity_check_template(self):
        """–®–∞–±–ª–æ–Ω –¥–ª—è sfm_integrity_check.py"""
        return '''#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
SFM Integrity Check - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ SFM —Å–∫—Ä–∏–ø—Ç–æ–≤
"""

import os
from datetime import datetime

def check_sfm_scripts():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ SFM —Å–∫—Ä–∏–ø—Ç–æ–≤"""
    print("üîç –ü–†–û–í–ï–†–ö–ê SFM –°–ö–†–ò–ü–¢–û–í")
    print("=" * 50)
    
    required_scripts = [
        'sfm_quick_stats.py',
        'sfm_analyzer.py',
        'sfm_add_function.py',
        'sfm_fix_and_validate.py',
        'sfm_manager.py'
    ]
    
    missing = []
    present = []
    
    for script in required_scripts:
        if os.path.exists(f"scripts/{script}"):
            present.append(script)
            print(f"‚úÖ {script}")
        else:
            missing.append(script)
            print(f"‚ùå {script}")
    
    print(f"\\n–í—Å–µ–≥–æ: {len(required_scripts)}")
    print(f"–ù–∞–π–¥–µ–Ω–æ: {len(present)}")
    print(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {len(missing)}")
    
    if missing:
        print("\\n‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Å–∫—Ä–∏–ø—Ç—ã!")
        return False
    else:
        print("\\nüéâ –í—Å–µ SFM —Å–∫—Ä–∏–ø—Ç—ã –Ω–∞ –º–µ—Å—Ç–µ!")
        return True

if __name__ == "__main__":
    check_sfm_scripts()
'''
    
    def restore_script(self, script_name):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞"""
        if script_name not in self.script_templates:
            print(f"‚ùå –®–∞–±–ª–æ–Ω –¥–ª—è {script_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        script_path = os.path.join(self.scripts_dir, script_name)
        
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            os.makedirs(self.scripts_dir, exist_ok=True)
            
            # –ó–∞–ø–∏—Å—å —Å–∫—Ä–∏–ø—Ç–∞
            with open(script_path, 'w', encoding='utf-8') as f:
                f.write(self.script_templates[script_name])
            
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            os.chmod(script_path, 0o755)
            
            self.restore_log.append(f"‚úÖ {script_name} –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            print(f"‚úÖ {script_name} –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return True
            
        except Exception as e:
            self.restore_log.append(f"‚ùå {script_name}: –æ—à–∏–±–∫–∞ - {e}")
            print(f"‚ùå {script_name}: –æ—à–∏–±–∫–∞ - {e}")
            return False
    
    def restore_all_missing_scripts(self):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤"""
        print("üîÑ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï SFM –°–ö–†–ò–ü–¢–û–í")
        print("=" * 50)
        
        restored_count = 0
        
        for script_name in self.script_templates:
            script_path = os.path.join(self.scripts_dir, script_name)
            
            if not os.path.exists(script_path):
                if self.restore_script(script_name):
                    restored_count += 1
            else:
                print(f"‚úÖ {script_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        print(f"\\nüìä –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–∫—Ä–∏–ø—Ç–æ–≤: {restored_count}")
        return restored_count > 0
    
    def create_backup(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –ø–µ—Ä–µ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º"""
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        backup_path = f"{self.backup_dir}/sfm_scripts_backup_{timestamp}"
        
        try:
            os.makedirs(self.backup_dir, exist_ok=True)
            shutil.copytree(self.scripts_dir, backup_path)
            print(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_path}")
            return backup_path
        except Exception as e:
            print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é: {e}")
            return None
    
    def generate_restore_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏"""
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        report_file = f"data/sfm/restore_report_{timestamp}.json"
        
        report = {
            'timestamp': datetime.now().isoformat(),
            'restore_log': self.restore_log,
            'total_restored': len([log for log in self.restore_log if log.startswith('‚úÖ')]),
            'total_errors': len([log for log in self.restore_log if log.startswith('‚ùå')])
        }
        
        try:
            os.makedirs(os.path.dirname(report_file), exist_ok=True)
            with open(report_file, 'w', encoding='utf-8') as f:
                json.dump(report, f, indent=2, ensure_ascii=False)
            print(f"‚úÖ –û—Ç—á–µ—Ç –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîÑ SFM AUTO RESTORE")
    print("=" * 50)
    
    restorer = SFMAutoRestore()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
    restorer.create_backup()
    
    # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤
    restored = restorer.restore_all_missing_scripts()
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
    restorer.generate_restore_report()
    
    if restored:
        print("\\nüéâ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    else:
        print("\\n‚úÖ –í—Å–µ —Å–∫—Ä–∏–ø—Ç—ã —É–∂–µ –Ω–∞ –º–µ—Å—Ç–µ!")

if __name__ == "__main__":
    main()