#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ SFM
"""

import sys
import os
sys.path.insert(0, '/Users/sergejhlystov/ALADDIN_NEW')

from security.safe_function_manager import SafeFunctionManager

def check_sfm_status_correct():
    """–ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ SFM"""
    print("üîç –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–û–í SFM:")
    print("================================================")
    
    try:
        # –°–æ–∑–¥–∞–µ–º SFM
        sfm = SafeFunctionManager()
        print("‚úÖ SFM —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏
        all_functions = sfm.get_all_functions_status()
        print(f"üìä –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π –≤ SFM: {len(all_functions)}")
        
        # –ü–†–ê–í–ò–õ–¨–ù–´–ô –ø–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç—É—Å–æ–≤
        enabled_count = sum(1 for func_info in all_functions 
                          if func_info.get('status') == 'enabled')
        sleeping_count = sum(1 for func_info in all_functions 
                           if func_info.get('status') == 'sleeping')
        disabled_count = sum(1 for func_info in all_functions 
                           if func_info.get('status') == 'disabled')
        testing_count = sum(1 for func_info in all_functions 
                          if func_info.get('status') == 'testing')
        error_count = sum(1 for func_info in all_functions 
                        if func_info.get('status') == 'error')
        maintenance_count = sum(1 for func_info in all_functions 
                              if func_info.get('status') == 'maintenance')
        
        print(f"\nüìä –ü–†–ê–í–ò–õ–¨–ù–´–ï –°–¢–ê–¢–£–°–´ –§–£–ù–ö–¶–ò–ô:")
        print(f"  ‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö (enabled): {enabled_count}")
        print(f"  üò¥ –°–ø—è—â–∏—Ö (sleeping): {sleeping_count}")
        print(f"  ‚ùå –û—Ç–∫–ª—é—á–µ–Ω–Ω—ã—Ö (disabled): {disabled_count}")
        print(f"  üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º—ã—Ö (testing): {testing_count}")
        print(f"  üí• –û—à–∏–±–æ–∫ (error): {error_count}")
        print(f"  üîß –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ (maintenance): {maintenance_count}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∫–∞–∂–¥–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
        print(f"\nüìã –î–ï–¢–ê–õ–ò –§–£–ù–ö–¶–ò–ô:")
        for i, func_info in enumerate(all_functions):
            print(f"  {i+1}. {func_info.get('name', 'N/A')} - {func_info.get('status', 'N/A')}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
        critical_functions = sfm.get_critical_functions()
        print(f"\nüö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –§–£–ù–ö–¶–ò–ò: {len(critical_functions)}")
        for func in critical_functions:
            print(f"  - {func.get('name', 'N/A')} ({func.get('status', 'N/A')})")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ SFM: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    check_sfm_status_correct()
