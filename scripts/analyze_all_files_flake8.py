#!/usr/bin/env python3
"""
üîç ALADDIN - Flake8 Analysis Script
–ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–∞ –æ—à–∏–±–∫–∏ flake8

–ê–≤—Ç–æ—Ä: ALADDIN Security Team
–í–µ—Ä—Å–∏—è: 1.0
–î–∞—Ç–∞: 2025-01-27
"""

import os
import subprocess
import sys
from pathlib import Path
from collections import defaultdict

def run_flake8_on_file(file_path):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç flake8 –Ω–∞ —Ñ–∞–π–ª–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫"""
    try:
        result = subprocess.run([
            'python3', '-m', 'flake8', str(file_path)
        ], capture_output=True, text=True, timeout=30)
        
        if result.returncode == 0:
            return 0, []
        else:
            lines = result.stdout.strip().split('\n') if result.stdout.strip() else []
            return len(lines), lines
    except Exception as e:
        return -1, [f"Error analyzing {file_path}: {str(e)}"]

def analyze_all_files():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"""
    
    # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    base_path = Path("/Users/sergejhlystov/ALADDIN_NEW")
    
    file_groups = {
        "üîß –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏": [
            base_path / "security" / "integrations" / "antifrod_integration.py",
            base_path / "security" / "integrations" / "audio_deepfake_detection.py",
            base_path / "security" / "integrations" / "children_cyber_protection.py",
            base_path / "security" / "integrations" / "crypto_fraud_protection.py",
            base_path / "security" / "integrations" / "ddos_protection.py",
            base_path / "security" / "integrations" / "fakeradar_integration.py",
            base_path / "security" / "integrations" / "max_messenger_protection.py",
            base_path / "security" / "integrations" / "national_security_system.py",
            base_path / "security" / "integrations" / "russian_ai_models.py",
            base_path / "security" / "integrations" / "russian_banking_integration.py",
            base_path / "security" / "integrations" / "russian_threat_intelligence.py",
            base_path / "security" / "integrations" / "sim_card_monitoring.py",
            base_path / "security" / "integrations" / "telegram_fake_chat_detection.py",
            base_path / "security" / "integrations" / "vk_messenger_protection.py",
        ],
        
        "üîß –†–∞—Å—à–∏—Ä–µ–Ω–∏—è –º–æ–¥—É–ª–µ–π": [
            base_path / "security" / "security_monitoring_fakeradar_expansion.py",
            base_path / "security" / "security_analytics_antifrod_expansion.py",
            base_path / "security" / "security_analytics_russian_banking_expansion.py",
            base_path / "security" / "threat_intelligence_russian_context_expansion.py",
            base_path / "security" / "ai_agents" / "family_communication_hub_children_protection_expansion.py",
            base_path / "security" / "ai_agents" / "family_communication_hub_max_messenger_expansion.py",
            base_path / "security" / "bots" / "incognito_protection_bot_telegram_expansion.py",
        ],
        
        "üìú –°–∫—Ä–∏–ø—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è": [
            base_path / "scripts" / "create_sim_card_monitoring.py",
            base_path / "scripts" / "create_max_messenger_integration.py",
            base_path / "scripts" / "create_banking_integration.py",
            base_path / "scripts" / "create_gosuslugi_integration.py",
            base_path / "scripts" / "create_digital_sovereignty.py",
            base_path / "scripts" / "create_telegram_enhancement.py",
            base_path / "scripts" / "create_audio_deepfake_detection.py",
            base_path / "scripts" / "create_vk_messenger_integration.py",
            base_path / "scripts" / "create_crypto_fraud_protection.py",
            base_path / "scripts" / "create_ddos_protection.py",
            base_path / "scripts" / "integrate_fakeradar.py",
            base_path / "scripts" / "integrate_antifrod_system.py",
            base_path / "scripts" / "test_call_protection_system.py",
            base_path / "scripts" / "run_all_integrations.py",
            base_path / "scripts" / "create_children_cyber_threats_protection.py",
        ]
    }
    
    results = {}
    total_files = 0
    total_errors = 0
    
    print("üîç –ê–ù–ê–õ–ò–ó –í–°–ï–• –°–û–ó–î–ê–ù–ù–´–• –§–ê–ô–õ–û–í –ù–ê –û–®–ò–ë–ö–ò FLAKE8")
    print("=" * 80)
    
    for group_name, file_list in file_groups.items():
        print(f"\nüìÇ {group_name}:")
        print("-" * 60)
        
        group_errors = 0
        group_files = 0
        
        for file_path in file_list:
            if file_path.exists():
                file_name = file_path.name
                error_count, error_details = run_flake8_on_file(file_path)
                
                if error_count == -1:
                    print(f"‚ùå {file_name}: –û–®–ò–ë–ö–ê –ê–ù–ê–õ–ò–ó–ê")
                elif error_count == 0:
                    print(f"‚úÖ {file_name}: 0 –æ—à–∏–±–æ–∫")
                else:
                    print(f"‚ö†Ô∏è  {file_name}: {error_count} –æ—à–∏–±–æ–∫")
                
                results[file_name] = error_count
                group_errors += max(0, error_count)
                group_files += 1
                total_files += 1
                total_errors += max(0, error_count)
            else:
                print(f"‚ùì {file_path.name}: –§–ê–ô–õ –ù–ï –ù–ê–ô–î–ï–ù")
        
        print(f"\nüìä {group_name} - –ò—Ç–æ–≥–æ: {group_files} —Ñ–∞–π–ª–æ–≤, {group_errors} –æ—à–∏–±–æ–∫")
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\n" + "=" * 80)
    print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print("=" * 80)
    print(f"üìÅ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {total_files}")
    print(f"‚ö†Ô∏è  –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫ flake8: {total_errors}")
    
    if total_files > 0:
        avg_errors = total_errors / total_files
        print(f"üìà –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ –Ω–∞ —Ñ–∞–π–ª: {avg_errors:.2f}")
    
    # –¢–æ–ø —Ñ–∞–π–ª–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏
    if results:
        print(f"\nüîù –¢–û–ü-10 –§–ê–ô–õ–û–í –° –ù–ê–ò–ë–û–õ–¨–®–ò–ú –ö–û–õ–ò–ß–ï–°–¢–í–û–ú –û–®–ò–ë–û–ö:")
        print("-" * 60)
        
        sorted_results = sorted(results.items(), key=lambda x: x[1], reverse=True)
        for i, (file_name, error_count) in enumerate(sorted_results[:10]):
            if error_count > 0:
                print(f"{i+1:2d}. {file_name}: {error_count} –æ—à–∏–±–æ–∫")
    
    # –§–∞–π–ª—ã –±–µ–∑ –æ—à–∏–±–æ–∫
    clean_files = [name for name, count in results.items() if count == 0]
    if clean_files:
        print(f"\n‚úÖ –§–ê–ô–õ–´ –ë–ï–ó –û–®–ò–ë–û–ö ({len(clean_files)}):")
        print("-" * 60)
        for file_name in clean_files:
            print(f"‚úÖ {file_name}")
    
    return results, total_files, total_errors

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤...")
    results, total_files, total_errors = analyze_all_files()
    
    print(f"\nüéØ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù!")
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {total_files} —Ñ–∞–π–ª–æ–≤, {total_errors} –æ—à–∏–±–æ–∫")