#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –≤ Safe Function Manager (SFM)
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç: –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, –∏—Ö —Å—Ç–∞—Ç—É—Å, —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
"""

import sys
import os
sys.path.insert(0, '/Users/sergejhlystov/ALADDIN_NEW')

from security.safe_function_manager import SafeFunctionManager

# –õ–æ–∫–∞–ª—å–Ω—ã–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
from enum import Enum

class FunctionStatus(Enum):
    ENABLED = "enabled"
    DISABLED = "disabled"
    SLEEPING = "sleeping"

class SecurityLevel(Enum):
    LOW = "low"
    MEDIUM = "medium"
    HIGH = "high"
    CRITICAL = "critical"
import json
from datetime import datetime

def analyze_sfm_functions():
    """–ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –≤ SFM"""
    print("=" * 80)
    print("üîç –ê–ù–ê–õ–ò–ó –í–°–ï–• –§–£–ù–ö–¶–ò–ô –í SAFE FUNCTION MANAGER (SFM)")
    print("=" * 80)
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º SFM
        sfm = SafeFunctionManager("MainSFM")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏
        all_functions = sfm.get_all_functions_status()
        
        print(f"\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π: {len(all_functions)}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        enabled_count = 0
        disabled_count = 0
        sleeping_count = 0
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º
        function_types = {}
        security_levels = {}
        
        print(f"\nüìã –î–ï–¢–ê–õ–¨–ù–´–ô –°–ü–ò–°–û–ö –§–£–ù–ö–¶–ò–ô:")
        print("-" * 80)
        
        for i, function in enumerate(all_functions, 1):
            function_id = function.get('function_id', 'N/A')
            name = function.get('name', 'N/A')
            status = function.get('status', 'N/A')
            function_type = function.get('function_type', 'N/A')
            security_level = function.get('security_level', 'N/A')
            is_critical = function.get('is_critical', False)
            last_activity = function.get('last_activity', 'N/A')
            
            # –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç—É—Å–æ–≤
            if status == 'enabled':
                enabled_count += 1
            elif status == 'disabled':
                disabled_count += 1
            elif status == 'sleeping':
                sleeping_count += 1
            
            # –ü–æ–¥—Å—á–µ—Ç —Ç–∏–ø–æ–≤
            if function_type not in function_types:
                function_types[function_type] = 0
            function_types[function_type] += 1
            
            # –ü–æ–¥—Å—á–µ—Ç —É—Ä–æ–≤–Ω–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            if security_level not in security_levels:
                security_levels[security_level] = 0
            security_levels[security_level] += 1
            
            # –°—Ç–∞—Ç—É—Å –∏–∫–æ–Ω–∫–∞
            status_icon = "üü¢" if status == 'enabled' else "üî¥" if status == 'disabled' else "üò¥"
            critical_icon = "‚ö†Ô∏è" if is_critical else "  "
            
            print(f"{i:2d}. {status_icon} {critical_icon} {name}")
            print(f"     ID: {function_id}")
            print(f"     –¢–∏–ø: {function_type}")
            print(f"     –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: {security_level}")
            print(f"     –°—Ç–∞—Ç—É—Å: {status}")
            print(f"     –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_activity}")
            print()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        print("=" * 80)
        print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –°–¢–ê–¢–£–°–ê–ú:")
        print("=" * 80)
        print(f"üü¢ –ê–ö–¢–ò–í–ù–´–ï (enabled): {enabled_count}")
        print(f"üî¥ –û–¢–ö–õ–Æ–ß–ï–ù–ù–´–ï (disabled): {disabled_count}")
        print(f"üò¥ –í –°–ü–Ø–©–ï–ú –†–ï–ñ–ò–ú–ï (sleeping): {sleeping_count}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º
        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –¢–ò–ü–ê–ú –§–£–ù–ö–¶–ò–ô:")
        print("-" * 40)
        for func_type, count in sorted(function_types.items()):
            print(f"   {func_type}: {count}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—Ä–æ–≤–Ω—è–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –£–†–û–í–ù–Ø–ú –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò:")
        print("-" * 40)
        for level, count in sorted(security_levels.items()):
            print(f"   {level}: {count}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø—è—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
        print(f"\nüò¥ –§–£–ù–ö–¶–ò–ò –í –°–ü–Ø–©–ï–ú –†–ï–ñ–ò–ú–ï:")
        print("-" * 40)
        sleeping_functions = [f for f in all_functions if f.get('status') == 'sleeping']
        if sleeping_functions:
            for i, function in enumerate(sleeping_functions, 1):
                print(f"{i}. {function.get('name', 'N/A')} ({function.get('function_id', 'N/A')})")
        else:
            print("   –ù–µ—Ç —Ñ—É–Ω–∫—Ü–∏–π –≤ —Å–ø—è—â–µ–º —Ä–µ–∂–∏–º–µ")
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        print(f"\nüü¢ –ê–ö–¢–ò–í–ù–´–ï –§–£–ù–ö–¶–ò–ò:")
        print("-" * 40)
        active_functions = [f for f in all_functions if f.get('status') == 'enabled']
        if active_functions:
            for i, function in enumerate(active_functions, 1):
                print(f"{i}. {function.get('name', 'N/A')} ({function.get('function_id', 'N/A')})")
        else:
            print("   –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        print(f"\nüî¥ –û–¢–ö–õ–Æ–ß–ï–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò:")
        print("-" * 40)
        disabled_functions = [f for f in all_functions if f.get('status') == 'disabled']
        if disabled_functions:
            for i, function in enumerate(disabled_functions, 1):
                print(f"{i}. {function.get('name', 'N/A')} ({function.get('function_id', 'N/A')})")
        else:
            print("   –ù–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
        print(f"\n‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –§–£–ù–ö–¶–ò–ò:")
        print("-" * 40)
        critical_functions = [f for f in all_functions if f.get('is_critical', False)]
        if critical_functions:
            for i, function in enumerate(critical_functions, 1):
                status = function.get('status', 'N/A')
                status_icon = "üü¢" if status == 'enabled' else "üî¥" if status == 'disabled' else "üò¥"
                print(f"{i}. {status_icon} {function.get('name', 'N/A')} ({function.get('function_id', 'N/A')})")
        else:
            print("   –ù–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É SFM
        print(f"\nüìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê SFM:")
        print("-" * 40)
        stats = sfm.get_safe_function_stats()
        for key, value in stats.items():
            print(f"   {key}: {value}")
        
        print("\n" + "=" * 80)
        print("‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù")
        print("=" * 80)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ SFM: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    analyze_sfm_functions()