#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ flake8 –¥–ª—è –∫–ª—é—á–µ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
"""

import subprocess
import json
from collections import defaultdict

def run_flake8_quick(file_path):
    """–ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ flake8"""
    try:
        result = subprocess.run([
            'python3', '-m', 'flake8', 
            file_path, 
            '--max-line-length=120',
            '--statistics'
        ], capture_output=True, text=True, timeout=30)
        
        return result.returncode, result.stdout, result.stderr
    except Exception as e:
        return -1, "", str(e)

def analyze_errors(output):
    """–ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫"""
    errors = defaultdict(int)
    total_errors = 0
    
    lines = output.strip().split('\n')
    for line in lines:
        if ':' in line and not line.startswith('['):
            parts = line.split(':')
            if len(parts) >= 4:
                error_code = parts[3].strip().split()[0]
                errors[error_code] += 1
                total_errors += 1
    
    return total_errors, dict(errors)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç –ë–´–°–¢–†–´–ô –ê–ù–ê–õ–ò–ó FLAKE8 –î–õ–Ø –ö–õ–Æ–ß–ï–í–´–• –ö–û–ú–ü–û–ù–ï–ù–¢–û–í")
    print("=" * 60)
    
    # –ö–ª—é—á–µ–≤—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    key_files = [
        # CORE (5 —Ñ—É–Ω–∫—Ü–∏–π)
        ('core/base.py', 'CORE - –ë–∞–∑–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞'),
        ('core/service_base.py', 'CORE - –ë–∞–∑–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å'),
        ('core/database.py', 'CORE - –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö'),
        ('core/configuration.py', 'CORE - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è'),
        ('core/logging_module.py', 'CORE - –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ'),
        
        # SECURITY - –æ—Å–Ω–æ–≤–Ω—ã–µ (—Ç–æ–ø 20)
        ('security/safe_function_manager.py', 'SECURITY - –ì–ª–∞–≤–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä'),
        ('security/enhanced_alerting.py', 'SECURITY - –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã'),
        ('security/authentication.py', 'SECURITY - –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è'),
        ('security/security_monitoring.py', 'SECURITY - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥'),
        ('security/incident_response.py', 'SECURITY - –†–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã'),
        ('security/threat_detection.py', 'SECURITY - –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —É–≥—Ä–æ–∑'),
        ('security/malware_protection.py', 'SECURITY - –ó–∞—â–∏—Ç–∞ –æ—Ç malware'),
        ('security/intrusion_prevention.py', 'SECURITY - –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –≤—Ç–æ—Ä–∂–µ–Ω–∏–π'),
        ('security/access_control_manager.py', 'SECURITY - –ö–æ–Ω—Ç—Ä–æ–ª—å –¥–æ—Å—Ç—É–ø–∞'),
        ('security/data_protection_manager.py', 'SECURITY - –ó–∞—â–∏—Ç–∞ –¥–∞–Ω–Ω—ã—Ö'),
        ('security/zero_trust_manager.py', 'SECURITY - Zero Trust'),
        ('security/security_audit.py', 'SECURITY - –ê—É–¥–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏'),
        ('security/compliance_manager.py', 'SECURITY - –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ'),
        ('security/threat_intelligence.py', 'SECURITY - –†–∞–∑–≤–µ–¥–∫–∞ —É–≥—Ä–æ–∑'),
        ('security/network_monitoring.py', 'SECURITY - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ç–∏'),
        ('security/ransomware_protection.py', 'SECURITY - –ó–∞—â–∏—Ç–∞ –æ—Ç ransomware'),
        ('security/advanced_alerting.py', 'SECURITY - –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –∞–ª–µ—Ä—Ç—ã'),
        
        # AI AGENTS - –æ—Å–Ω–æ–≤–Ω—ã–µ (—Ç–æ–ø 15)
        ('security/ai_agents/threat_detection_agent.py', 'AI_AGENT - –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —É–≥—Ä–æ–∑'),
        ('security/ai_agents/behavioral_analysis_agent.py', 'AI_AGENT - –ê–Ω–∞–ª–∏–∑ –ø–æ–≤–µ–¥–µ–Ω–∏—è'),
        ('security/ai_agents/password_security_agent.py', 'AI_AGENT - –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø–∞—Ä–æ–ª–µ–π'),
        ('security/ai_agents/incident_response_agent.py', 'AI_AGENT - –†–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã'),
        ('security/ai_agents/threat_intelligence_agent.py', 'AI_AGENT - –†–∞–∑–≤–µ–¥–∫–∞ —É–≥—Ä–æ–∑'),
        ('security/ai_agents/network_security_agent.py', 'AI_AGENT - –°–µ—Ç–µ–≤–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å'),
        ('security/ai_agents/data_protection_agent.py', 'AI_AGENT - –ó–∞—â–∏—Ç–∞ –¥–∞–Ω–Ω—ã—Ö'),
        ('security/ai_agents/compliance_agent.py', 'AI_AGENT - –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ'),
        ('security/ai_agents/voice_analysis_engine.py', 'AI_AGENT - –ê–Ω–∞–ª–∏–∑ –≥–æ–ª–æ—Å–∞'),
        ('security/ai_agents/deepfake_protection_system.py', 'AI_AGENT - –ó–∞—â–∏—Ç–∞ –æ—Ç deepfake'),
        ('security/ai_agents/financial_protection_hub.py', 'AI_AGENT - –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∑–∞—â–∏—Ç–∞'),
        ('security/ai_agents/emergency_response_system.py', 'AI_AGENT - –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏–µ'),
        ('security/ai_agents/elderly_protection_interface.py', 'AI_AGENT - –ó–∞—â–∏—Ç–∞ –ø–æ–∂–∏–ª—ã—Ö'),
        ('security/ai_agents/phishing_protection.py', 'AI_AGENT - –ó–∞—â–∏—Ç–∞ –æ—Ç —Ñ–∏—à–∏–Ω–≥–∞'),
        ('security/ai_agents/malware_detection.py', 'AI_AGENT - –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ malware'),
        
        # BOTS - –æ—Å–Ω–æ–≤–Ω—ã–µ (—Ç–æ–ø 15)
        ('security/bots/emergency_response_bot.py', 'BOT - –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏–µ'),
        ('security/bots/parental_control_bot.py', 'BOT - –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å'),
        ('security/bots/notification_bot.py', 'BOT - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'),
        ('security/bots/whatsapp_security_bot.py', 'BOT - WhatsApp –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å'),
        ('security/bots/telegram_security_bot.py', 'BOT - Telegram –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å'),
        ('security/bots/instagram_security_bot.py', 'BOT - Instagram –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å'),
        ('security/bots/mobile_navigation_bot.py', 'BOT - –ú–æ–±–∏–ª—å–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è'),
        ('security/bots/gaming_security_bot.py', 'BOT - –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏–≥—Ä'),
        ('security/bots/analytics_bot.py', 'BOT - –ê–Ω–∞–ª–∏—Ç–∏–∫–∞'),
        ('security/bots/website_navigation_bot.py', 'BOT - –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å–∞–π—Ç–∞–º'),
        ('security/bots/browser_security_bot.py', 'BOT - –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –±—Ä–∞—É–∑–µ—Ä–∞'),
        ('security/bots/cloud_storage_security_bot.py', 'BOT - –û–±–ª–∞—á–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ'),
        ('security/bots/device_security_bot.py', 'BOT - –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤'),
        ('security/bots/incognito_protection_bot.py', 'BOT - –ó–∞—â–∏—Ç–∞ –∏–Ω–∫–æ–≥–Ω–∏—Ç–æ'),
        ('security/bots/parental_control_bot.py', 'BOT - –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å'),
        
        # MICROSERVICES - –æ—Å–Ω–æ–≤–Ω—ã–µ (—Ç–æ–ø 10)
        ('security/microservices/api_gateway.py', 'MICROSERVICE - API Gateway'),
        ('security/microservices/load_balancer.py', 'MICROSERVICE - –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫'),
        ('security/microservices/rate_limiter.py', 'MICROSERVICE - –û–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—å —Å–∫–æ—Ä–æ—Å—Ç–∏'),
        ('security/microservices/circuit_breaker.py', 'MICROSERVICE - –ü—Ä–µ–¥–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª—å'),
        ('security/microservices/redis_cache_manager.py', 'MICROSERVICE - Redis –∫—ç—à'),
        ('security/microservices/service_mesh_manager.py', 'MICROSERVICE - –°–µ—Ä–≤–∏—Å–Ω–∞—è —Å–µ—Ç–∫–∞'),
        ('security/microservices/user_interface_manager.py', 'MICROSERVICE - UI –º–µ–Ω–µ–¥–∂–µ—Ä'),
        ('security/microservices/emergency_service_caller.py', 'MICROSERVICE - –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã'),
        ('security/microservices/wake_up_systems.py', 'MICROSERVICE - –°–∏—Å—Ç–µ–º—ã –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è'),
        ('security/microservices/safe_function_manager_integration.py', 'MICROSERVICE - SFM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è'),
    ]
    
    results = {
        'total_files': len(key_files),
        'clean_files': 0,
        'files_with_errors': 0,
        'total_errors': 0,
        'error_types': defaultdict(int),
        'files_by_category': defaultdict(list),
        'category_stats': defaultdict(lambda: {
            'total': 0,
            'clean': 0,
            'errors': 0,
            'total_error_count': 0
        }),
        'file_details': []
    }
    
    print(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º {len(key_files)} –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤...\n")
    
    for i, (file_path, description) in enumerate(key_files, 1):
        print(f"[{i:2d}/{len(key_files)}] {file_path}")
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category = 'other'
        if 'CORE' in description:
            category = 'core'
        elif 'SECURITY' in description:
            category = 'security'
        elif 'AI_AGENT' in description:
            category = 'ai_agent'
        elif 'BOT' in description:
            category = 'bot'
        elif 'MICROSERVICE' in description:
            category = 'microservice'
        
        # –ó–∞–ø—É—Å–∫ flake8
        returncode, stdout, stderr = run_flake8_quick(file_path)
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if returncode == 0:
            total_errors = 0
            errors = {}
            status = "‚úÖ –ß–ò–°–¢–´–ô"
            results['clean_files'] += 1
            results['category_stats'][category]['clean'] += 1
        else:
            total_errors, errors = analyze_errors(stdout)
            if total_errors == 0:
                status = "‚úÖ –ß–ò–°–¢–´–ô"
                results['clean_files'] += 1
                results['category_stats'][category]['clean'] += 1
            else:
                status = f"‚ùå {total_errors} –æ—à–∏–±–æ–∫"
                results['files_with_errors'] += 1
                results['category_stats'][category]['errors'] += 1
                results['category_stats'][category]['total_error_count'] += total_errors
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        results['total_errors'] += total_errors
        results['category_stats'][category]['total'] += 1
        
        for error_type, count in errors.items():
            results['error_types'][error_type] += count
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π
        file_detail = {
            'file_path': file_path,
            'description': description,
            'category': category,
            'is_clean': total_errors == 0,
            'total_errors': total_errors,
            'errors': errors
        }
        results['file_details'].append(file_detail)
        results['files_by_category'][category].append(file_detail)
        
        print(f"     {status}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-3 –æ—à–∏–±–∫–∏ –¥–ª—è —Ñ–∞–π–ª–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏
        if total_errors > 0 and total_errors <= 10:
            for error_type, count in sorted(errors.items(), key=lambda x: x[1], reverse=True)[:3]:
                print(f"       {error_type}: {count}")
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    with open('QUICK_FLAKE8_REPORT.json', 'w', encoding='utf-8') as f:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º defaultdict –≤ –æ–±—ã—á–Ω—ã–µ dict –¥–ª—è JSON
        json_results = {
            'total_files': results['total_files'],
            'clean_files': results['clean_files'],
            'files_with_errors': results['files_with_errors'],
            'total_errors': results['total_errors'],
            'error_types': dict(results['error_types']),
            'category_stats': dict(results['category_stats']),
            'file_details': results['file_details']
        }
        json.dump(json_results, f, indent=2, ensure_ascii=False)
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print(f"\nüìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:")
    print("=" * 60)
    print(f"–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {results['total_files']}")
    print(f"–ß–∏—Å—Ç—ã—Ö —Ñ–∞–π–ª–æ–≤: {results['clean_files']} ({results['clean_files']/results['total_files']*100:.1f}%)")
    print(f"–§–∞–π–ª–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏: {results['files_with_errors']} ({results['files_with_errors']/results['total_files']*100:.1f}%)")
    print(f"–í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {results['total_errors']}")
    
    print(f"\nüìà –¢–û–ü-10 –û–®–ò–ë–û–ö –ü–û –¢–ò–ü–ê–ú:")
    for error_type, count in sorted(results['error_types'].items(), key=lambda x: x[1], reverse=True)[:10]:
        print(f"  {error_type}: {count}")
    
    print(f"\nüìÅ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú:")
    for category, stats in results['category_stats'].items():
        if stats['total'] > 0:
            clean_percent = stats['clean'] / stats['total'] * 100
            print(f"  {category}: {stats['clean']}/{stats['total']} —á–∏—Å—Ç—ã—Ö ({clean_percent:.1f}%), {stats['total_error_count']} –æ—à–∏–±–æ–∫")
    
    print(f"\nüíæ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: QUICK_FLAKE8_REPORT.json")

if __name__ == "__main__":
    main()