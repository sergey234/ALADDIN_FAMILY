#!/usr/bin/env python3
"""
FIXED Registry Merge Manager
–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô —Å–∫—Ä–∏–ø—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Ä–µ–µ—Å—Ç—Ä–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π —Å–ø—è—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
"""

import json
import os
import glob
from datetime import datetime
from typing import Dict, Any, List, Optional
from pathlib import Path


class FixedRegistryMergeManager:
    """–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –º–µ–Ω–µ–¥–∂–µ—Ä –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Ä–µ–µ—Å—Ç—Ä–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π"""
    
    def __init__(self):
        self.timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        self.backup_dir = f"backups/fixed_registry_merge_backup_{self.timestamp}"
        self.old_registry_path = "data/functions_registry.json"
        self.new_registry_path = "data/sfm/function_registry.json"
        self.sleep_states_dir = "data/sleep_states"
        
    def create_backup(self) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –±—ç–∫–∞–ø–∞ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            print("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –±—ç–∫–∞–ø–∞ —Å–∏—Å—Ç–µ–º—ã...")
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –±—ç–∫–∞–ø–∞
            os.makedirs(self.backup_dir, exist_ok=True)
            
            # –ö–æ–ø–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            critical_dirs = ["data/sfm", "data/sleep_states", "security", "core", "ai"]
            for dir_name in critical_dirs:
                if os.path.exists(dir_name):
                    os.system(f"cp -r {dir_name} {self.backup_dir}/")
                    print(f"  ‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω {dir_name}")
                else:
                    print(f"  ‚ö†Ô∏è  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {dir_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
            print(f"‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: {self.backup_dir}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞: {e}")
            return False
    
    def convert_sleeping_functions(self) -> List[Dict[str, Any]]:
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å–ø—è—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç SFM"""
        try:
            print("üîÑ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å–ø—è—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π...")
            
            sleeping_functions = []
            sleep_files = glob.glob(f"{self.sleep_states_dir}/*_state.json")
            
            print(f"  üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ —Å–ø—è—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π: {len(sleep_files)}")
            
            for sleep_file in sleep_files:
                try:
                    with open(sleep_file, 'r') as f:
                        sleep_data = json.load(f)
                    
                    # –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç SFM
                    converted_func = self._convert_sleep_to_sfm_format_fixed(sleep_data)
                    sleeping_functions.append(converted_func)
                    
                    if len(sleeping_functions) % 50 == 0:
                        print(f"  üìä –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {len(sleeping_functions)} —Ñ—É–Ω–∫—Ü–∏–π...")
                    
                except Exception as e:
                    print(f"  ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ {sleep_file}: {e}")
                    continue
            
            print(f"  ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(sleeping_functions)} —Ñ—É–Ω–∫—Ü–∏–π")
            return sleeping_functions
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Å–ø—è—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π: {e}")
            return []
    
    def _convert_sleep_to_sfm_format_fixed(self, sleep_data: Dict[str, Any]) -> Dict[str, Any]:
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –æ–¥–Ω–æ–π —Å–ø—è—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç SFM"""
        function_name = sleep_data["function_name"]
        function_id = sleep_data["function_id"]
        
        return {
            "function_id": function_id,
            "name": function_name,
            "description": f"–°–ø—è—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è {function_name}",
            "function_type": self._determine_function_type_fixed(function_name),
            "security_level": sleep_data["security_level"],
            "status": "sleeping",
            "created_at": sleep_data["sleep_time"],
            "is_critical": sleep_data["is_critical"],
            "auto_enable": False,
            "wake_time": sleep_data["sleep_time"],
            "emergency_wake_up": sleep_data["is_critical"],
            "features": [],
            "dependencies": [],
            "file_path": self._determine_file_path_fixed(function_name),
            "class_name": function_name,
            "global_instance": f"{function_name.lower()}_instance",
            "sleep_state": {
                "sleep_time": sleep_data["sleep_time"],
                "previous_status": sleep_data["previous_status"],
                "minimal_system_sleep": sleep_data.get("minimal_system_sleep", False)
            },
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å SFM
            "execution_count": 0,
            "success_count": 0,
            "error_count": 0
        }
    
    def _determine_function_type_fixed(self, function_name: str) -> str:
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ –∏–º–µ–Ω–∏"""
        name_lower = function_name.lower()
        
        if "bot" in name_lower:
            return "bot"
        elif "agent" in name_lower:
            return "ai_agent"
        elif "manager" in name_lower:
            return "manager"
        elif "service" in name_lower:
            return "service"
        elif "security" in name_lower:
            return "security"
        else:
            return "unknown"
    
    def _determine_file_path_fixed(self, function_name: str) -> str:
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É —Ñ—É–Ω–∫—Ü–∏–∏"""
        name_lower = function_name.lower()
        
        if "bot" in name_lower:
            return f"bots/{name_lower}.py"
        elif "agent" in name_lower:
            return f"ai_agents/{name_lower}.py"
        elif "manager" in name_lower:
            return f"managers/{name_lower}.py"
        elif "service" in name_lower:
            return f"services/{name_lower}.py"
        else:
            return f"security/{name_lower}.py"
    
    def merge_registries_fixed(self, sleeping_functions: List[Dict[str, Any]]) -> Dict[str, Any]:
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–µ–µ—Å—Ç—Ä–æ–≤ –≤ –µ–¥–∏–Ω—ã–π"""
        try:
            print("üîÑ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–µ–µ—Å—Ç—Ä–æ–≤...")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–π —Ä–µ–µ—Å—Ç—Ä (–æ—Å–Ω–æ–≤–Ω–æ–π)
            with open(self.new_registry_path, 'r') as f:
                merged_registry = json.load(f)
            
            print(f"  üìä –ò—Å—Ö–æ–¥–Ω—ã–π —Ä–µ–µ—Å—Ç—Ä: {len(merged_registry.get('functions', {}))} —Ñ—É–Ω–∫—Ü–∏–π")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø—è—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
            added_count = 0
            skipped_count = 0
            
            for func in sleeping_functions:
                func_id = func["function_id"]
                if func_id not in merged_registry["functions"]:
                    merged_registry["functions"][func_id] = func
                    added_count += 1
                    if added_count % 50 == 0:
                        print(f"  üìä –î–æ–±–∞–≤–ª–µ–Ω–æ: {added_count} —Ñ—É–Ω–∫—Ü–∏–π...")
                else:
                    skipped_count += 1
            
            print(f"  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —Ñ—É–Ω–∫—Ü–∏–π: {added_count}")
            print(f"  ‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ —Ñ—É–Ω–∫—Ü–∏–π: {skipped_count}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            merged_registry["version"] = "2.0"
            merged_registry["last_updated"] = datetime.now().isoformat()
            merged_registry["security_components_count"] = len(merged_registry["functions"])
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            active_count = sum(1 for f in merged_registry["functions"].values() 
                             if f.get("status") in ["active", "enabled", "running"])
            sleeping_count = sum(1 for f in merged_registry["functions"].values() 
                               if f.get("status") == "sleeping")
            critical_count = sum(1 for f in merged_registry["functions"].values() 
                               if f.get("is_critical", False))
            
            merged_registry["statistics"] = {
                "total_functions": len(merged_registry["functions"]),
                "active_functions": active_count,
                "sleeping_functions": sleeping_count,
                "critical_functions": critical_count,
                "auto_enable_functions": sum(1 for f in merged_registry["functions"].values() 
                                           if f.get("auto_enable", False))
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å SFM
            merged_registry["handlers"] = {}
            merged_registry["registry_protection_enabled"] = True
            merged_registry["sleep_managers_woken"] = 0
            
            print(f"  üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
            print(f"    –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π: {merged_registry['statistics']['total_functions']}")
            print(f"    –ê–∫—Ç–∏–≤–Ω—ã—Ö: {merged_registry['statistics']['active_functions']}")
            print(f"    –°–ø—è—â–∏—Ö: {merged_registry['statistics']['sleeping_functions']}")
            print(f"    –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö: {merged_registry['statistics']['critical_functions']}")
            
            return merged_registry
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Ä–µ–µ—Å—Ç—Ä–æ–≤: {e}")
            return {}
    
    def save_merged_registry_fixed(self, merged_registry: Dict[str, Any]) -> bool:
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ —Ä–µ–µ—Å—Ç—Ä–∞"""
        try:
            print("üíæ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ —Ä–µ–µ—Å—Ç—Ä–∞...")
            
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–µ—Å—Ç—Ä–∞
            backup_path = f"{self.new_registry_path}.backup_{self.timestamp}"
            if os.path.exists(self.new_registry_path):
                os.system(f"cp {self.new_registry_path} {backup_path}")
                print(f"  ‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ä–µ–µ—Å—Ç—Ä
            with open(self.new_registry_path, 'w') as f:
                json.dump(merged_registry, f, indent=2, ensure_ascii=False)
            
            print(f"  ‚úÖ –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ä–µ–µ—Å—Ç—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {self.new_registry_path}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            file_size = os.path.getsize(self.new_registry_path)
            print(f"  üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size:,} –±–∞–π—Ç")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–µ—Å—Ç—Ä–∞: {e}")
            return False
    
    def validate_merged_registry_fixed(self, registry: Dict[str, Any]) -> bool:
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ —Ä–µ–µ—Å—Ç—Ä–∞"""
        try:
            print("üîç –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ —Ä–µ–µ—Å—Ç—Ä–∞...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            required_fields = ["version", "last_updated", "functions", "statistics"]
            for field in required_fields:
                if field not in registry:
                    print(f"  ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: {field}")
                    return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å function_id
            function_ids = list(registry["functions"].keys())
            if len(function_ids) != len(set(function_ids)):
                print("  ‚ùå –ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è function_id")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ—É–Ω–∫—Ü–∏–π
            required_func_fields = ["function_id", "name", "description", "function_type", 
                                  "security_level", "status", "created_at", "is_critical"]
            
            validation_errors = 0
            for func_id, func_data in registry["functions"].items():
                for field in required_func_fields:
                    if field not in func_data:
                        print(f"  ‚ùå –§—É–Ω–∫—Ü–∏—è {func_id} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–µ {field}")
                        validation_errors += 1
                        if validation_errors > 10:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–≤–æ–¥ –æ—à–∏–±–æ–∫
                            print("  ... –∏ –µ—â–µ –æ—à–∏–±–∫–∏ ...")
                            break
                
                if validation_errors > 10:
                    break
            
            if validation_errors > 0:
                print(f"  ‚ùå –ù–∞–π–¥–µ–Ω–æ {validation_errors} –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º JSON –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
            json.dumps(registry)
            
            print("  ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
            return False
    
    def run_fixed_merge_process(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è"""
        try:
            print("üöÄ –ó–ê–ü–£–°–ö –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –ü–†–û–¶–ï–°–°–ê –û–ë–™–ï–î–ò–ù–ï–ù–ò–Ø –†–ï–ï–°–¢–†–û–í")
            print("=" * 60)
            
            # 1. –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞
            if not self.create_backup():
                return False
            
            # 2. –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å–ø—è—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
            sleeping_functions = self.convert_sleeping_functions()
            if not sleeping_functions:
                print("‚ùå –ù–µ—Ç —Å–ø—è—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏")
                return False
            
            # 3. –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–µ–µ—Å—Ç—Ä–æ–≤
            merged_registry = self.merge_registries_fixed(sleeping_functions)
            if not merged_registry:
                return False
            
            # 4. –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–∞–ª–∏–¥–∞—Ü–∏—è
            if not self.validate_merged_registry_fixed(merged_registry):
                return False
            
            # 5. –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            if not self.save_merged_registry_fixed(merged_registry):
                return False
            
            print("=" * 60)
            print("‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ü–†–û–¶–ï–°–° –û–ë–™–ï–î–ò–ù–ï–ù–ò–Ø –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
            print(f"üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print(f"  –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π: {merged_registry['statistics']['total_functions']}")
            print(f"  –ê–∫—Ç–∏–≤–Ω—ã—Ö: {merged_registry['statistics']['active_functions']}")
            print(f"  –°–ø—è—â–∏—Ö: {merged_registry['statistics']['sleeping_functions']}")
            print(f"  –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö: {merged_registry['statistics']['critical_functions']}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
            return False


if __name__ == "__main__":
    manager = FixedRegistryMergeManager()
    success = manager.run_fixed_merge_process()
    
    if success:
        print("\nüéâ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –û–ë–™–ï–î–ò–ù–ï–ù–ò–ï –†–ï–ï–°–¢–†–û–í –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
        exit(0)
    else:
        print("\nüí• –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –û–ë–™–ï–î–ò–ù–ï–ù–ò–ï –†–ï–ï–°–¢–†–û–í –ó–ê–í–ï–†–®–ò–õ–û–°–¨ –° –û–®–ò–ë–ö–ê–ú–ò!")
        exit(1)