#!/usr/bin/env python3
"""
ONE-CLICK INSTALLER –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ ALADDIN
–ü–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞ 30 —Å–µ–∫—É–Ω–¥
"""

import sys
import os
import time
import json
import subprocess
import shutil
from pathlib import Path
from datetime import datetime
import getpass

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(str(Path(__file__).parent.parent))


class OneClickInstaller:
    """–ü–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫ ALADDIN"""

    def __init__(self):
        self.start_time = time.time()
        self.install_log = []
        self.success_count = 0
        self.error_count = 0
        self.project_root = Path(__file__).parent.parent

    def log(self, message, status="INFO"):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        log_entry = f"[{timestamp}] {status}: {message}"
        self.install_log.append(log_entry)
        print(f"üîß {log_entry}")

    def check_system_requirements(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π"""
        self.log("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π...")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Python –≤–µ—Ä—Å–∏–∏
        if sys.version_info < (3, 8):
            self.log("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8+", "ERROR")
            return False
        
        self.log(f"‚úÖ Python {sys.version.split()[0]} - OK")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–æ–≤
        ports_to_check = [8000, 8001, 8002, 8003, 8004, 8005, 8006]
        for port in ports_to_check:
            if self.is_port_available(port):
                self.log(f"‚úÖ –ü–æ—Ä—Ç {port} - —Å–≤–æ–±–æ–¥–µ–Ω")
            else:
                self.log(f"‚ö†Ô∏è –ü–æ—Ä—Ç {port} - –∑–∞–Ω—è—Ç (–±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π)")
        
        return True

    def is_port_available(self, port):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–∞"""
        import socket
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            return s.connect_ex(('localhost', port)) != 0

    def install_dependencies(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        self.log("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
        
        dependencies = [
            "cryptography",
            "requests",
            "psutil",
            "watchdog"
        ]
        
        for dep in dependencies:
            try:
                self.log(f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ {dep}...")
                subprocess.run([sys.executable, "-m", "pip", "install", dep], 
                             check=True, capture_output=True)
                self.log(f"‚úÖ {dep} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                self.success_count += 1
            except subprocess.CalledProcessError as e:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ {dep}: {e}", "ERROR")
                self.error_count += 1

    def create_directories(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
        self.log("–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...")
        
        directories = [
            "logs",
            "data",
            "backups",
            "config",
            "mobile",
            "docs",
            "tests"
        ]
        
        for directory in directories:
            dir_path = self.project_root / directory
            dir_path.mkdir(exist_ok=True)
            self.log(f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {directory} —Å–æ–∑–¥–∞–Ω–∞")
            self.success_count += 1

    def setup_configuration(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        self.log("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config = {
            "system": {
                "name": "ALADDIN Security System",
                "version": "1.0.0",
                "install_date": datetime.now().isoformat(),
                "installer": "one_click_installer"
            },
            "security": {
                "level": "high",
                "auto_update": True,
                "monitoring": True
            },
            "ports": {
                "main_api": 8000,
                "vpn": 8001,
                "antivirus": 8002,
                "mobile": 8003,
                "monitoring": 8004,
                "admin": 8005,
                "backup": 8006
            },
            "features": {
                "vpn": True,
                "antivirus": True,
                "mobile_api": True,
                "monitoring": True,
                "backup": True
            }
        }
        
        config_path = self.project_root / "config" / "system_config.json"
        config_path.parent.mkdir(exist_ok=True)
        
        with open(config_path, 'w', encoding='utf-8') as f:
            json.dump(config, f, indent=2, ensure_ascii=False)
        
        self.log("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞")
        self.success_count += 1

    def setup_database(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        self.log("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ SQLite –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            db_path = self.project_root / "data" / "aladdin.db"
            db_path.parent.mkdir(exist_ok=True)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            import sqlite3
            conn = sqlite3.connect(str(db_path))
            cursor = conn.cursor()
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    username TEXT UNIQUE NOT NULL,
                    email TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS security_events (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    event_type TEXT NOT NULL,
                    severity TEXT NOT NULL,
                    description TEXT,
                    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            conn.commit()
            conn.close()
            
            self.log("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
            self.success_count += 1
            
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ë–î: {e}", "ERROR")
            self.error_count += 1

    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.log("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è...")
        
        log_config = {
            "version": 1,
            "disable_existing_loggers": False,
            "formatters": {
                "standard": {
                    "format": "%(asctime)s [%(levelname)s] %(name)s: %(message)s"
                }
            },
            "handlers": {
                "default": {
                    "level": "INFO",
                    "formatter": "standard",
                    "class": "logging.StreamHandler",
                    "stream": "ext://sys.stdout"
                },
                "file": {
                    "level": "DEBUG",
                    "formatter": "standard",
                    "class": "logging.FileHandler",
                    "filename": str(self.project_root / "logs" / "aladdin.log"),
                    "mode": "a"
                }
            },
            "loggers": {
                "": {
                    "handlers": ["default", "file"],
                    "level": "DEBUG",
                    "propagate": False
                }
            }
        }
        
        log_config_path = self.project_root / "config" / "logging_config.json"
        with open(log_config_path, 'w', encoding='utf-8') as f:
            json.dump(log_config, f, indent=2, ensure_ascii=False)
        
        self.log("‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")
        self.success_count += 1

    def run_quality_tests(self):
        """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∫–∞—á–µ—Å—Ç–≤–∞"""
        self.log("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∫–∞—á–µ—Å—Ç–≤–∞...")
        
        try:
            # –ó–∞–ø—É—Å–∫ –±—ã—Å—Ç—Ä—ã—Ö —Ç–µ—Å—Ç–æ–≤
            test_script = self.project_root / "scripts" / "ultra_fast_test.py"
            if test_script.exists():
                result = subprocess.run([sys.executable, str(test_script)], 
                                      capture_output=True, text=True, timeout=30)
                if result.returncode == 0:
                    self.log("‚úÖ –¢–µ—Å—Ç—ã –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–π–¥–µ–Ω—ã")
                    self.success_count += 1
                else:
                    self.log(f"‚ö†Ô∏è –¢–µ—Å—Ç—ã –∫–∞—á–µ—Å—Ç–≤–∞ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏: {result.stderr}", "WARNING")
            else:
                self.log("‚ö†Ô∏è –§–∞–π–ª —Ç–µ—Å—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω", "WARNING")
                
        except subprocess.TimeoutExpired:
            self.log("‚ö†Ô∏è –¢–µ—Å—Ç—ã –ø—Ä–µ—Ä–≤–∞–Ω—ã –ø–æ —Ç–∞–π–º–∞—É—Ç—É", "WARNING")
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}", "ERROR")
            self.error_count += 1

    def create_startup_script(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –∑–∞–ø—É—Å–∫–∞"""
        self.log("–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –∑–∞–ø—É—Å–∫–∞...")
        
        startup_script = '''#!/bin/bash
# ALADDIN Security System - –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω One-Click Installer

echo "üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ ALADDIN..."

# –ü–µ—Ä–µ—Ö–æ–¥ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
cd "$(dirname "$0")"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Python
if ! command -v python3 &> /dev/null; then
    echo "‚ùå Python3 –Ω–µ –Ω–∞–π–¥–µ–Ω!"
    exit 1
fi

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
echo "üîß –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."

# API Gateway
python3 -m http.server 8000 &
echo "‚úÖ API Gateway –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8000"

# VPN Service
python3 scripts/real_vpn_api_server.py &
echo "‚úÖ VPN Service –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8001"

# Antivirus Service
python3 scripts/antivirus_api_server.py &
echo "‚úÖ Antivirus Service –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8002"

# Mobile API
python3 mobile/mobile_api.py &
echo "‚úÖ Mobile API –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8003"

echo "üéâ –°–∏—Å—Ç–µ–º–∞ ALADDIN —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞!"
echo "üì± –î–æ—Å—Ç—É–ø: http://localhost:8000"
echo "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: http://localhost:8004"
echo "üîß –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å: http://localhost:8005"

# –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
wait
'''
        
        startup_path = self.project_root / "start_aladdin.sh"
        with open(startup_path, 'w', encoding='utf-8') as f:
            f.write(startup_script)
        
        # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º
        os.chmod(startup_path, 0o755)
        
        self.log("‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ —Å–æ–∑–¥–∞–Ω")
        self.success_count += 1

    def create_uninstaller(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–∏–Ω—Å—Ç–∞–ª–ª—è—Ç–æ—Ä–∞"""
        self.log("–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–∏–Ω—Å—Ç–∞–ª–ª—è—Ç–æ—Ä–∞...")
        
        uninstaller_script = '''#!/bin/bash
# ALADDIN Security System - –î–µ–∏–Ω—Å—Ç–∞–ª–ª—è—Ç–æ—Ä
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω One-Click Installer

echo "üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ ALADDIN..."

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ ALADDIN
echo "‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
pkill -f "aladdin"
pkill -f "vpn"
pkill -f "antivirus"

# –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ (—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º)
read -p "–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã ALADDIN? (y/N): " confirm
if [[ $confirm == [yY] ]]; then
    echo "üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤..."
    rm -rf logs/
    rm -rf data/
    rm -rf backups/
    rm -rf config/
    echo "‚úÖ –§–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã"
else
    echo "‚ÑπÔ∏è –§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã"
fi

echo "‚úÖ –î–µ–∏–Ω—Å—Ç–∞–ª–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
'''
        
        uninstaller_path = self.project_root / "uninstall_aladdin.sh"
        with open(uninstaller_path, 'w', encoding='utf-8') as f:
            f.write(uninstaller_script)
        
        os.chmod(uninstaller_path, 0o755)
        
        self.log("‚úÖ –î–µ–∏–Ω—Å—Ç–∞–ª–ª—è—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω")
        self.success_count += 1

    def generate_install_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ–± —É—Å—Ç–∞–Ω–æ–≤–∫–µ"""
        self.log("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ–± —É—Å—Ç–∞–Ω–æ–≤–∫–µ...")
        
        install_time = time.time() - self.start_time
        
        report = {
            "install_info": {
                "installer": "One-Click Installer v1.0",
                "install_date": datetime.now().isoformat(),
                "install_time_seconds": round(install_time, 2),
                "python_version": sys.version.split()[0],
                "project_path": str(self.project_root)
            },
            "statistics": {
                "successful_operations": self.success_count,
                "failed_operations": self.error_count,
                "total_operations": self.success_count + self.error_count,
                "success_rate": round((self.success_count / (self.success_count + self.error_count)) * 100, 2) if (self.success_count + self.error_count) > 0 else 0
            },
            "installed_components": [
                "–°–∏—Å—Ç–µ–º–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏",
                "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π",
                "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã",
                "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö SQLite",
                "–°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è",
                "–°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞",
                "–î–µ–∏–Ω—Å—Ç–∞–ª–ª—è—Ç–æ—Ä"
            ],
            "access_urls": {
                "main_api": "http://localhost:8000",
                "vpn_service": "http://localhost:8001",
                "antivirus_service": "http://localhost:8002",
                "mobile_api": "http://localhost:8003",
                "monitoring": "http://localhost:8004",
                "admin_panel": "http://localhost:8005",
                "backup_service": "http://localhost:8006"
            },
            "install_log": self.install_log
        }
        
        report_path = self.project_root / "INSTALL_REPORT.json"
        with open(report_path, 'w', encoding='utf-8') as f:
            json.dump(report, f, indent=2, ensure_ascii=False)
        
        self.log("‚úÖ –û—Ç—á–µ—Ç –æ–± —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–æ–∑–¥–∞–Ω")
        return report

    def run_installation(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏"""
        print("üöÄ ONE-CLICK INSTALLER - ALADDIN SECURITY SYSTEM")
        print("=" * 60)
        print("–ü–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞ 30 —Å–µ–∫—É–Ω–¥!")
        print("=" * 60)
        print()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
        if not self.check_system_requirements():
            self.log("‚ùå –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã", "ERROR")
            return False
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        self.install_dependencies()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        self.create_directories()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.setup_configuration()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        self.setup_database()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self.setup_logging()
        
        # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∫–∞—á–µ—Å—Ç–≤–∞
        self.run_quality_tests()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –∑–∞–ø—É—Å–∫–∞
        self.create_startup_script()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–∏–Ω—Å—Ç–∞–ª–ª—è—Ç–æ—Ä–∞
        self.create_uninstaller()
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
        report = self.generate_install_report()
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        install_time = time.time() - self.start_time
        print()
        print("üéâ –£–°–¢–ê–ù–û–í–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
        print("=" * 60)
        print(f"‚è±Ô∏è –í—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {install_time:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: {self.success_count}")
        print(f"‚ùå –û—à–∏–±–æ–∫: {self.error_count}")
        print(f"üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {report['statistics']['success_rate']}%")
        print()
        print("üåê –î–û–°–¢–£–ü –ö –°–ò–°–¢–ï–ú–ï:")
        for service, url in report['access_urls'].items():
            print(f"   {service}: {url}")
        print()
        print("üöÄ –î–õ–Ø –ó–ê–ü–£–°–ö–ê –°–ò–°–¢–ï–ú–´:")
        print("   ./start_aladdin.sh")
        print()
        print("üìã –û–¢–ß–ï–¢ –£–°–¢–ê–ù–û–í–ö–ò:")
        print(f"   {self.project_root}/INSTALL_REPORT.json")
        print()
        
        return self.error_count == 0


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    installer = OneClickInstaller()
    success = installer.run_installation()
    
    if success:
        print("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        sys.exit(0)
    else:
        print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏!")
        sys.exit(1)


if __name__ == "__main__":
    main()