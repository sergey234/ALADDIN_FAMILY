#!/usr/bin/env python3
"""
–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –≠–¢–ê–ü–ê 8: –ü—Ä–æ–±–ª–µ–º—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å security.core
"""

import sys
import subprocess
from pathlib import Path
from typing import Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append('/Users/sergejhlystov/ALADDIN_NEW')

class IntegrationFixer:
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    
    def __init__(self):
        self.project_root = Path('/Users/sergejhlystov/ALADDIN_NEW')
        
    def fix_security_core_import(self) -> Dict[str, Any]:
        """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ security.core"""
        print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –≠–¢–ê–ü–ê 8: –ü—Ä–æ–±–ª–µ–º—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
        print("=" * 50)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞
        security_dir = self.project_root / "security"
        core_dir = security_dir / "core"
        
        print(f"   üìÅ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞...")
        print(f"      ‚Ä¢ security/: {'‚úÖ' if security_dir.exists() else '‚ùå'}")
        print(f"      ‚Ä¢ security/core/: {'‚úÖ' if core_dir.exists() else '‚ùå'}")
        
        if not core_dir.exists():
            print("   üîß –°–æ–∑–¥–∞—ë–º –Ω–µ–¥–æ—Å—Ç–∞—é—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É...")
            core_dir.mkdir(parents=True, exist_ok=True)
            print(f"      ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: {core_dir}")
        
        # –°–æ–∑–¥–∞—ë–º –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å SecurityBase
        security_base_file = core_dir / "security_base.py"
        if not security_base_file.exists():
            print("   üîß –°–æ–∑–¥–∞—ë–º –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å SecurityBase...")
            self._create_security_base(security_base_file)
            print(f"      ‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {security_base_file}")
        else:
            print(f"      ‚úÖ –§–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {security_base_file}")
        
        # –°–æ–∑–¥–∞—ë–º __init__.py
        init_file = core_dir / "__init__.py"
        if not init_file.exists():
            print("   üîß –°–æ–∑–¥–∞—ë–º __init__.py...")
            with open(init_file, 'w', encoding='utf-8') as f:
                f.write('"""Security Core Module"""\n')
                f.write('from .security_base import SecurityBase\n')
                f.write('__all__ = ["SecurityBase"]\n')
            print(f"      ‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {init_file}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
        print("   üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é...")
        integration_test = self._test_integration()
        
        return {
            "security_core_created": True,
            "integration_test": integration_test,
            "status": "success"
        }
    
    def _create_security_base(self, file_path: Path):
        """–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞ SecurityBase"""
        content = '''#!/usr/bin/env python3
"""
–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
"""

import logging
from datetime import datetime
from enum import Enum
from typing import Dict, Any, Optional
from pathlib import Path

class ComponentStatus(Enum):
    """–°—Ç–∞—Ç—É—Å—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    INITIALIZING = "initializing"
    RUNNING = "running"
    STOPPED = "stopped"
    ERROR = "error"
    MAINTENANCE = "maintenance"

class SecurityBase:
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    
    def __init__(self, name: str, config: Optional[Dict[str, Any]] = None):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        
        Args:
            name: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        """
        self.name = name
        self.config = config or {}
        self.status = ComponentStatus.INITIALIZING
        self.created_at = datetime.now()
        self.logger = self._setup_logger()
        
    def _setup_logger(self) -> logging.Logger:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞"""
        logger = logging.getLogger(f"security.{self.name}")
        if not logger.handlers:
            handler = logging.StreamHandler()
            formatter = logging.Formatter(
                '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
            )
            handler.setFormatter(formatter)
            logger.addHandler(handler)
            logger.setLevel(logging.INFO)
        return logger
    
    def initialize(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
        try:
            self.logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ {self.name}")
            self.status = ComponentStatus.RUNNING
            return True
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            self.status = ComponentStatus.ERROR
            return False
    
    def start(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
        try:
            self.logger.info(f"–ó–∞–ø—É—Å–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ {self.name}")
            self.status = ComponentStatus.RUNNING
            return True
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
            self.status = ComponentStatus.ERROR
            return False
    
    def stop(self) -> bool:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
        try:
            self.logger.info(f"–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ {self.name}")
            self.status = ComponentStatus.STOPPED
            return True
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
            self.status = ComponentStatus.ERROR
            return False
    
    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
        return {
            "name": self.name,
            "status": self.status.value,
            "created_at": self.created_at.isoformat(),
            "config": self.config
        }
    
    def log_activity(self, activity: str, level: str = "INFO") -> None:
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        log_level = getattr(logging, level.upper(), logging.INFO)
        self.logger.log(log_level, f"Activity: {activity}")
    
    def update_metrics(self, metrics: Dict[str, Any]) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫"""
        self.logger.info(f"Metrics updated: {metrics}")
    
    def add_security_event(self, event_type: str, description: str, severity: str = "medium") -> None:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        self.logger.warning(f"Security Event [{severity.upper()}]: {event_type} - {description}")
    
    def detect_threat(self, threat_data: Dict[str, Any]) -> bool:
        """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —É–≥—Ä–æ–∑—ã"""
        self.logger.warning(f"Threat detected: {threat_data}")
        return True
    
    def add_security_rule(self, rule: Dict[str, Any]) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        self.logger.info(f"Security rule added: {rule}")
        return True
    
    def get_security_events(self) -> list:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        return []
    
    def get_security_report(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á—ë—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        return {
            "component": self.name,
            "status": self.status.value,
            "events_count": 0,
            "last_updated": datetime.now().isoformat()
        }
    
    def clear_security_events(self) -> None:
        """–û—á–∏—Å—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        self.logger.info("Security events cleared")
    
    def set_security_level(self, level: str) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Ä–æ–≤–Ω—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        self.logger.info(f"Security level set to: {level}")
        return True
    
    def handle_threat(self, threat_data: Dict[str, Any]) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≥—Ä–æ–∑—ã"""
        self.logger.warning(f"Handling threat: {threat_data}")
        return True
'''
        
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(content)
    
    def _test_integration(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        try:
            # –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞
            result = subprocess.run([
                'python3', '-c', 
                'import sys; sys.path.append("/Users/sergejhlystov/ALADDIN_NEW"); from security.core.security_base import SecurityBase; print("Import successful")'
            ], capture_output=True, text=True, timeout=30)
            
            if result.returncode == 0:
                print("      ‚úÖ –ò–º–ø–æ—Ä—Ç SecurityBase: —Ä–∞–±–æ—Ç–∞–µ—Ç")
                import_success = True
            else:
                print(f"      ‚ùå –ò–º–ø–æ—Ä—Ç SecurityBase: {result.stderr}")
                import_success = False
            
            # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
            if import_success:
                result = subprocess.run([
                    'python3', '-c', 
                    'import sys; sys.path.append("/Users/sergejhlystov/ALADDIN_NEW"); from security.core.security_base import SecurityBase; sb = SecurityBase("test"); print("Instance created")'
                ], capture_output=True, text=True, timeout=30)
                
                if result.returncode == 0:
                    print("      ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞: —Ä–∞–±–æ—Ç–∞–µ—Ç")
                    instance_success = True
                else:
                    print(f"      ‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞: {result.stderr}")
                    instance_success = False
            else:
                instance_success = False
            
            # –¢–µ—Å—Ç RecoveryService —Å SecurityBase
            if instance_success:
                result = subprocess.run([
                    'python3', '-c', 
                    'import sys; sys.path.append("/Users/sergejhlystov/ALADDIN_NEW"); from security.reactive.recovery_service import RecoveryService; rs = RecoveryService("test", {}); print("RecoveryService works")'
                ], capture_output=True, text=True, timeout=30)
                
                if result.returncode == 0:
                    print("      ‚úÖ RecoveryService: —Ä–∞–±–æ—Ç–∞–µ—Ç")
                    recovery_success = True
                else:
                    print(f"      ‚ùå RecoveryService: {result.stderr}")
                    recovery_success = False
            else:
                recovery_success = False
            
            return {
                "import_success": import_success,
                "instance_success": instance_success,
                "recovery_success": recovery_success,
                "overall_success": import_success and instance_success and recovery_success
            }
            
        except Exception as e:
            print(f"      ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return {
                "import_success": False,
                "instance_success": False,
                "recovery_success": False,
                "overall_success": False,
                "error": str(e)
            }

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    fixer = IntegrationFixer()
    results = fixer.fix_security_core_import()
    
    print(f"\n‚úÖ –≠–¢–ê–ü 8 –ò–°–ü–†–ê–í–õ–ï–ù!")
    print(f"   ‚Ä¢ –°—Ç–∞—Ç—É—Å: {results.get('status', 'unknown')}")
    if 'integration_test' in results:
        test = results['integration_test']
        print(f"   ‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: {'‚úÖ' if test.get('overall_success', False) else '‚ùå'}")

if __name__ == "__main__":
    main()