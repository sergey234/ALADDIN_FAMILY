#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –≤ SFM
"""

import asyncio
import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from security.safe_function_manager import SafeFunctionManager


async def test_managers_integration():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –ù–û–í–´–• –ú–ï–ù–ï–î–ñ–ï–†–û–í –í SFM")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ SFM
    sfm = SafeFunctionManager()
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    print("\nüìã –¢–ï–°–¢ 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SFM —Å –Ω–æ–≤—ã–º–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏")
    managers_status = sfm.get_all_managers_status()
    print(f"–°—Ç–∞—Ç—É—Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤: {managers_status}")
    
    # –¢–µ—Å—Ç 2: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    print("\nüìã –¢–ï–°–¢ 2: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤")
    test_results = {}
    
    for manager_type in ['analytics', 'monitor', 'report', 'dashboard']:
        result = sfm.register_manager(f"test_{manager_type}", manager_type)
        test_results[f"register_{manager_type}"] = result
        print(f"  {manager_type}: {'‚úÖ' if result else '‚ùå'}")
    
    # –¢–µ—Å—Ç 3: –í–∫–ª—é—á–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    print("\nüìã –¢–ï–°–¢ 3: –í–∫–ª—é—á–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤")
    for manager_type in ['analytics', 'monitor', 'report', 'dashboard']:
        result = await sfm.enable_manager(manager_type)
        test_results[f"enable_{manager_type}"] = result
        print(f"  {manager_type}: {'‚úÖ' if result else '‚ùå'}")
    
    # –¢–µ—Å—Ç 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    print("\nüìã –¢–ï–°–¢ 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
    for manager_type in ['analytics', 'monitor', 'report', 'dashboard']:
        result = await sfm.test_manager_integration(manager_type)
        test_results[f"test_{manager_type}"] = result
        print(f"  {manager_type}: {'‚úÖ' if result else '‚ùå'}")
    
    # –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤
    print("\nüìã –¢–ï–°–¢ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤")
    final_status = sfm.get_all_managers_status()
    print(f"–§–∏–Ω–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã: {final_status}")
    
    # –¢–µ—Å—Ç 6: –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ (—Å–ø—è—â–∏–π —Ä–µ–∂–∏–º)
    print("\nüìã –¢–ï–°–¢ 6: –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ (—Å–ø—è—â–∏–π —Ä–µ–∂–∏–º)")
    for manager_type in ['analytics', 'monitor', 'report', 'dashboard']:
        result = await sfm.disable_manager(manager_type)
        test_results[f"disable_{manager_type}"] = result
        print(f"  {manager_type}: {'‚úÖ' if result else '‚ùå'}")
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)
    passed = sum(1 for result in test_results.values() if result)
    total = len(test_results)
    success_rate = (passed / total) * 100
    
    print(f"–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed}/{total} ({success_rate:.1f}%)")
    
    if success_rate >= 90:
        print("üéâ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –ü–†–û–®–õ–ê –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –í—Å–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ SFM")
        print("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è, –≤–∫–ª—é—á–µ–Ω–∏–µ, —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞—é—Ç")
        print("‚úÖ –°–ø—è—â–∏–π —Ä–µ–∂–∏–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç")
    elif success_rate >= 70:
        print("‚ö†Ô∏è –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –ß–ê–°–¢–ò–ß–ù–û –£–°–ü–ï–®–ù–ê")
        print("üîß –¢—Ä–µ–±—É—é—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
    else:
        print("‚ùå –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –ù–ï –£–î–ê–õ–ê–°–¨")
        print("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–µ—Ä—å–µ–∑–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞")
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\nüìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    for test_name, result in test_results.items():
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"  {test_name}: {status}")
    
    return success_rate >= 90


async def test_imports_quality():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–º–ø–æ—Ä—Ç–æ–≤"""
    print("\nüîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–ê–ß–ï–°–¢–í–ê –ò–ú–ü–û–†–¢–û–í")
    print("=" * 60)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ –Ω–æ–≤—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        from security.managers.analytics_manager import AnalyticsManager
        from security.managers.monitor_manager import MonitorManager
        from security.managers.report_manager import ReportManager
        from security.managers.dashboard_manager import DashboardManager
        
        print("‚úÖ –í—Å–µ –∏–º–ø–æ—Ä—Ç—ã –Ω–æ–≤—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ —É—Å–ø–µ—à–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤
        analytics = AnalyticsManager()
        monitor = MonitorManager()
        report = ReportManager()
        dashboard = DashboardManager()
        
        print("‚úÖ –í—Å–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã —Å–æ–∑–¥–∞—é—Ç—Å—è —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–æ–¥–æ–≤
        print("‚úÖ –í—Å–µ –º–µ—Ç–æ–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {e}")
        return False


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –ú–ï–ù–ï–î–ñ–ï–†–û–í")
    print("=" * 80)
    
    # –¢–µ—Å—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –∏–º–ø–æ—Ä—Ç–æ–≤
    imports_ok = await test_imports_quality()
    
    if not imports_ok:
        print("\n‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–ï–†–í–ê–ù–û - –ü–†–û–ë–õ–ï–ú–´ –° –ò–ú–ü–û–†–¢–ê–ú–ò")
        return False
    
    # –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    integration_ok = await test_managers_integration()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\nüéØ –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢")
    print("=" * 80)
    
    if imports_ok and integration_ok:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –ù–æ–≤—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ SFM")
        print("‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ –∏–º–ø–æ—Ä—Ç–æ–≤: A+")
        print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: A+")
        print("‚úÖ –°–ø—è—â–∏–π —Ä–µ–∂–∏–º: A+")
        print("‚úÖ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É: A+")
        return True
    else:
        print("‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–ï –ü–†–û–®–õ–û")
        print("üîß –¢—Ä–µ–±—É—é—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        return False


if __name__ == "__main__":
    asyncio.run(main())