#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è ExternalAPIManager —Å SafeFunctionManager
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from security.managers.external_api_manager import external_api_manager
from security.safe_function_manager import SafeFunctionManager
from core.base import SecurityLevel


def integrate_external_apis():
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤–Ω–µ—à–Ω–∏—Ö API —Å SafeFunctionManager"""
    print("üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è ExternalAPIManager —Å SafeFunctionManager...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º SafeFunctionManager
        safe_manager = SafeFunctionManager()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≤–Ω–µ—à–Ω–∏—Ö API
        functions_to_register = [
            {
                "function_id": "external_api_manager",
                "name": "External API Manager",
                "description": "–ú–µ–Ω–µ–¥–∂–µ—Ä –≤–Ω–µ—à–Ω–∏—Ö API –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —É–≥—Ä–æ–∑, –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ email",
                "function_type": "security",
                "security_level": SecurityLevel.HIGH,
                "auto_enable": False
            }
        ]
        
        registered_functions = []
        
        for func_config in functions_to_register:
            print(f"üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏: {func_config['name']}")
            
            result = safe_manager.register_function(
                function_id=func_config["function_id"],
                name=func_config["name"],
                description=func_config["description"],
                function_type=func_config["function_type"],
                security_level=func_config["security_level"],
                auto_enable=func_config["auto_enable"]
            )
            
            if result:
                print(f"‚úÖ {func_config['name']} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞")
                registered_functions.append(func_config["function_id"])
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ {func_config['name']}")
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {len(registered_functions)} —Ñ—É–Ω–∫—Ü–∏–π")
        print(f"üìã –§—É–Ω–∫—Ü–∏–∏: {', '.join(registered_functions)}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
        print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π...")
        
        for func_id in registered_functions:
            print(f"üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {func_id}...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —Ñ—É–Ω–∫—Ü–∏–∏
            status = safe_manager.get_function_status(func_id)
            if status:
                print(f"   üìä –°—Ç–∞—Ç—É—Å: {status.get('status', 'unknown')}")
                print(f"   üîí –£—Ä–æ–≤–µ–Ω—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {status.get('security_level', 'unknown')}")
                print(f"   üìù –û–ø–∏—Å–∞–Ω–∏–µ: {status.get('description', 'unknown')}")
                
                # –í–∫–ª—é—á–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
                enable_result = safe_manager.enable_function(func_id)
                if enable_result:
                    print(f"   ‚úÖ –§—É–Ω–∫—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞")
                else:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏")
            else:
                print(f"   ‚ùå –§—É–Ω–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        print(f"\nüéâ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è ExternalAPIManager –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        return False


def test_external_apis():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–Ω–µ—à–Ω–∏—Ö API"""
    print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–Ω–µ—à–Ω–∏—Ö API...")
    
    try:
        import asyncio
        
        # –¢–µ—Å—Ç –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
        print("üåç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ IP –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏...")
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        geo_result = loop.run_until_complete(
            external_api_manager.get_ip_geolocation("8.8.8.8")
        )
        loop.close()
        
        if geo_result:
            print("‚úÖ IP –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print(f"   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {len(geo_result)} API –æ—Ç–≤–µ—Ç–∏–ª–∏")
        else:
            print("‚ùå IP –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ email
        print("üìß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ email...")
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        email_result = loop.run_until_complete(
            external_api_manager.validate_email("test@example.com")
        )
        loop.close()
        
        if email_result:
            print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è email —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print(f"   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {len(email_result)} API –æ—Ç–≤–µ—Ç–∏–ª–∏")
        else:
            print("‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è email –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ —É–≥—Ä–æ–∑
        print("üõ°Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ —É–≥—Ä–æ–∑...")
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        threat_result = loop.run_until_complete(
            external_api_manager.check_threat_intelligence("8.8.8.8")
        )
        loop.close()
        
        if threat_result:
            print("‚úÖ –ê–Ω–∞–ª–∏–∑ —É–≥—Ä–æ–∑ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print(f"   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {len(threat_result)} API –æ—Ç–≤–µ—Ç–∏–ª–∏")
        else:
            print("‚ùå –ê–Ω–∞–ª–∏–∑ —É–≥—Ä–æ–∑ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = external_api_manager.get_usage_statistics()
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:")
        print(f"   üìà –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['usage_stats']['total_requests']}")
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {stats['usage_stats']['successful_requests']}")
        print(f"   ‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: {stats['usage_stats']['failed_requests']}")
        print(f"   üíæ –ö—ç—à –ø–æ–ø–∞–¥–∞–Ω–∏–π: {stats['usage_stats']['cache_hits']}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False


if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ExternalAPIManager...")
    print("=" * 50)
    
    # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
    integration_success = integrate_external_apis()
    
    if integration_success:
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        test_success = test_external_apis()
        
        if test_success:
            print(f"\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
            print(f"‚úÖ ExternalAPIManager –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å SafeFunctionManager")
            print(f"‚úÖ –í–Ω–µ—à–Ω–∏–µ API —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            print(f"\n‚ö†Ô∏è –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞, –Ω–æ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
    else:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –ò–ù–¢–ï–ì–†–ê–¶–ò–ò")
    
    print("=" * 50)