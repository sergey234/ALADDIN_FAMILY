#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ë—ã—Å—Ç—Ä—ã–π –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç–µ–ª—å backup —Ñ–∞–π–ª–æ–≤ –≤ formatting_work
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤—Å–µ—Ö –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤

–ê–≤—Ç–æ—Ä: ALADDIN Security Team
–í–µ—Ä—Å–∏—è: 1.0
–î–∞—Ç–∞: 2025-01-27
–ö–∞—á–µ—Å—Ç–≤–æ: A+
"""

import os
import shutil
import json
import time
from datetime import datetime
from pathlib import Path
from typing import List, Dict, Any, Tuple

class FastBackupMover:
    """–ë—ã—Å—Ç—Ä—ã–π –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç–µ–ª—å backup —Ñ–∞–π–ª–æ–≤"""
    
    def __init__(self):
        self.project_root = Path("/Users/sergejhlystov/ALADDIN_NEW")
        self.backup_dir = self.project_root / "security" / "formatting_work" / "backup_files"
        self.moved_files = []
        self.failed_files = []
        self.log_file = self.backup_dir / "MOVEMENT_LOG.json"
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        self.backup_dir.mkdir(parents=True, exist_ok=True)
        
    def find_all_backup_files(self) -> List[Tuple[Path, Path]]:
        """–ù–∞–π—Ç–∏ –≤—Å–µ backup —Ñ–∞–π–ª—ã –≤ —Å–∏—Å—Ç–µ–º–µ"""
        backup_patterns = [
            "*.backup_*",
            "*_original_backup_*", 
            "*_BACKUP*",
            "*_backup_before_formatting*",
            "*_backup_011225*",
            "*_backup_original_backup_*"
        ]
        
        backup_files = []
        
        # –ò—â–µ–º –≤ security –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        security_dir = self.project_root / "security"
        
        for pattern in backup_patterns:
            for backup_file in security_dir.rglob(pattern):
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª
                main_file = self._find_main_file(backup_file)
                if main_file and main_file.exists():
                    backup_files.append((backup_file, main_file))
                    
        return backup_files
    
    def _find_main_file(self, backup_file: Path) -> Path:
        """–ù–∞–π—Ç–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –¥–ª—è backup"""
        backup_name = backup_file.name
        
        # –£–±–∏—Ä–∞–µ–º backup —Å—É—Ñ—Ñ–∏–∫—Å—ã
        main_name = backup_name
        for suffix in [
            ".backup_20250927_231342",
            ".backup_20250927_231341", 
            ".backup_20250928_000215",
            ".backup_20250928_003940",
            ".backup_20250928_005946",
            ".backup_20250927_234616",
            ".backup_20250928_003043",
            ".backup_20250928_002228",
            ".backup_20250927_232629",
            ".backup_011225",
            ".backup_before_formatting",
            "_original_backup_20250103.py",
            "_BACKUP.py",
            "_backup_original_backup_20250103.py",
            ".backup_20250926_133852",
            ".backup_20250926_133733",
            ".backup_20250926_133317",
            ".backup_20250926_133258",
            ".backup_20250926_132405",
            ".backup_20250926_132307",
            ".backup_20250927_234000",
            ".backup_20250927_233351"
        ]:
            if suffix in main_name:
                main_name = main_name.replace(suffix, ".py")
                break
                
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å—É—Ñ—Ñ–∏–∫—Å, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        if main_name == backup_name:
            # –î–ª—è enhanced —Ñ–∞–π–ª–æ–≤
            if "_enhanced" in backup_name:
                main_name = backup_name.replace("_enhanced", "")
            # –î–ª—è v2 —Ñ–∞–π–ª–æ–≤  
            elif "_v2" in backup_name:
                main_name = backup_name.replace("_v2", "")
            # –î–ª—è replacement —Ñ–∞–π–ª–æ–≤
            elif "_replacement" in backup_name:
                main_name = backup_name.replace("_replacement", "")
            # –î–ª—è a_plus —Ñ–∞–π–ª–æ–≤
            elif "_a_plus" in backup_name:
                main_name = backup_name.replace("_a_plus", "")
                
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Ç—å –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Ñ–∞–π–ª—É
        main_file = backup_file.parent / main_name
        
        # –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∏–º–µ–Ω–∞
        if not main_file.exists():
            # –ü—Ä–æ–±—É–µ–º —Å _enhanced
            alt_main = backup_file.parent / backup_name.replace("_backup", "_enhanced")
            if alt_main.exists():
                return alt_main
                
            # –ü—Ä–æ–±—É–µ–º —Å _v2
            alt_main = backup_file.parent / backup_name.replace("_backup", "_v2")
            if alt_main.exists():
                return alt_main
                
        return main_file
    
    def validate_files(self, backup_file: Path, main_file: Path) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ–º"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ backup —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if not backup_file.exists():
                print(f"‚ùå Backup —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {backup_file}")
                return False
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if not main_file.exists():
                print(f"‚ùå –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {main_file}")
                return False
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ Python —Ñ–∞–π–ª—ã
            if not backup_file.suffix == '.py' and not backup_file.name.endswith('.py'):
                print(f"‚ùå –ù–µ Python —Ñ–∞–π–ª: {backup_file}")
                return False
                
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
            return False
    
    def move_backup_file(self, backup_file: Path, main_file: Path) -> bool:
        """–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –æ–¥–∏–Ω backup —Ñ–∞–π–ª"""
        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è
            if not self.validate_files(backup_file, main_file):
                return False
                
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
            new_path = self.backup_dir / backup_file.name
            
            # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª
            shutil.move(str(backup_file), str(new_path))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
            if new_path.exists() and not backup_file.exists():
                print(f"‚úÖ –ü–µ—Ä–µ–º–µ—â–µ–Ω: {backup_file.name}")
                self.moved_files.append({
                    "backup_file": str(backup_file),
                    "main_file": str(main_file),
                    "new_path": str(new_path),
                    "timestamp": datetime.now().isoformat()
                })
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è: {backup_file.name}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è {backup_file.name}: {e}")
            self.failed_files.append({
                "backup_file": str(backup_file),
                "main_file": str(main_file),
                "error": str(e),
                "timestamp": datetime.now().isoformat()
            })
            return False
    
    def test_main_files(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è"""
        test_results = {
            "total_tests": 0,
            "passed_tests": 0,
            "failed_tests": 0,
            "test_details": []
        }
        
        for moved in self.moved_files:
            main_file = Path(moved["main_file"])
            test_results["total_tests"] += 1
            
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                if main_file.exists():
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª —á–∏—Ç–∞–µ—Ç—Å—è
                    with open(main_file, 'r', encoding='utf-8') as f:
                        content = f.read(100)  # –ß–∏—Ç–∞–µ–º –ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤
                    
                    test_results["passed_tests"] += 1
                    test_results["test_details"].append({
                        "file": main_file.name,
                        "status": "PASSED",
                        "message": "–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
                    })
                else:
                    test_results["failed_tests"] += 1
                    test_results["test_details"].append({
                        "file": main_file.name,
                        "status": "FAILED", 
                        "message": "–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
                    })
                    
            except Exception as e:
                test_results["failed_tests"] += 1
                test_results["test_details"].append({
                    "file": main_file.name,
                    "status": "ERROR",
                    "message": str(e)
                })
                
        return test_results
    
    def save_log(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–≥ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è"""
        log_data = {
            "timestamp": datetime.now().isoformat(),
            "total_found": len(self.moved_files) + len(self.failed_files),
            "moved_files": len(self.moved_files),
            "failed_files": len(self.failed_files),
            "moved_details": self.moved_files,
            "failed_details": self.failed_files
        }
        
        with open(self.log_file, 'w', encoding='utf-8') as f:
            json.dump(log_data, f, ensure_ascii=False, indent=2)
            
        print(f"üìã –õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {self.log_file}")
    
    def run_fast_movement(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –±—ã—Å—Ç—Ä–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤—Å–µ—Ö backup —Ñ–∞–π–ª–æ–≤"""
        print("üöÄ –ó–ê–ü–£–°–ö –ë–´–°–¢–†–û–ì–û –ü–ï–†–ï–ú–ï–©–ï–ù–ò–Ø BACKUP –§–ê–ô–õ–û–í")
        print("=" * 60)
        
        start_time = time.time()
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ backup —Ñ–∞–π–ª—ã
        print("üîç –ü–æ–∏—Å–∫ backup —Ñ–∞–π–ª–æ–≤...")
        backup_files = self.find_all_backup_files()
        print(f"üìã –ù–∞–π–¥–µ–Ω–æ backup —Ñ–∞–π–ª–æ–≤: {len(backup_files)}")
        
        if not backup_files:
            print("‚ùå Backup —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            return {"success": False, "message": "Backup —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"}
        
        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
        print("\nüîÑ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ backup —Ñ–∞–π–ª–æ–≤...")
        success_count = 0
        
        for i, (backup_file, main_file) in enumerate(backup_files, 1):
            print(f"[{i}/{len(backup_files)}] {backup_file.name}")
            
            if self.move_backup_file(backup_file, main_file):
                success_count += 1
                
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
        test_results = self.test_main_files()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥
        self.save_log()
        
        # –ò—Ç–æ–≥–∏
        end_time = time.time()
        duration = end_time - start_time
        
        print("\n" + "=" * 60)
        print("üìä –ò–¢–û–ì–ò –ë–´–°–¢–†–û–ì–û –ü–ï–†–ï–ú–ï–©–ï–ù–ò–Ø:")
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"üìÅ –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {len(backup_files)} —Ñ–∞–π–ª–æ–≤")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–æ: {success_count} —Ñ–∞–π–ª–æ–≤")
        print(f"‚ùå –û—à–∏–±–æ–∫: {len(self.failed_files)} —Ñ–∞–π–ª–æ–≤")
        print(f"üß™ –¢–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ: {test_results['passed_tests']}/{test_results['total_tests']}")
        print("=" * 60)
        
        return {
            "success": True,
            "duration": duration,
            "total_found": len(backup_files),
            "moved_successfully": success_count,
            "failed": len(self.failed_files),
            "test_results": test_results,
            "moved_files": self.moved_files,
            "failed_files": self.failed_files
        }

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîí ALADDIN Security System - Fast Backup Mover")
    print("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ backup —Ñ–∞–π–ª–æ–≤")
    print()
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä
    mover = FastBackupMover()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±—ã—Å—Ç—Ä–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ
    result = mover.run_fast_movement()
    
    if result["success"]:
        print("\nüéâ –ë–´–°–¢–†–û–ï –ü–ï–†–ï–ú–ï–©–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
        print(f"üìÅ –ü–µ—Ä–µ–º–µ—â–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {result['moved_successfully']}")
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è: {result['duration']:.2f} —Å–µ–∫—É–Ω–¥")
        
        if result["failed"] > 0:
            print(f"\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: {result['failed']} —Ñ–∞–π–ª–æ–≤ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å")
            print("üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π")
    else:
        print("\n‚ùå –û–®–ò–ë–ö–ê –ü–†–ò –ü–ï–†–ï–ú–ï–©–ï–ù–ò–ò!")
        print(result.get("message", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"))

if __name__ == "__main__":
    main()