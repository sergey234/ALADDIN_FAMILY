# -*- coding: utf-8 -*-
"""
ALADDIN Security System - A+ SFM Checker
–°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ SFM –Ω–∞ A+ –∫–∞—á–µ—Å—Ç–≤–æ –¥–æ –∏ –ø–æ—Å–ª–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏

–ê–≤—Ç–æ—Ä: ALADDIN Security Team
–í–µ—Ä—Å–∏—è: 1.0
–î–∞—Ç–∞: 2025-09-11
"""

import sys
import os
import json
from datetime import datetime
from typing import Dict, List, Any, Tuple
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append('/Users/sergejhlystov/ALADDIN_NEW/security')
from safe_function_manager import SafeFunctionManager, SecurityLevel, FunctionStatus

class SFMAPlusChecker:
    """A+ –ü—Ä–æ–≤–µ—Ä–∫–∞ SFM –¥–æ –∏ –ø–æ—Å–ª–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    
    def __init__(self):
        self.project_root = Path('/Users/sergejhlystov/ALADDIN_NEW')
        self.registry_file = self.project_root / 'data' / 'sfm' / 'function_registry.json'
        self.backup_dir = self.project_root / 'data' / 'sfm' / 'backups'
        self.backup_dir.mkdir(exist_ok=True)
        
    def create_backup(self, prefix: str = "sfm_backup") -> str:
        """–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é SFM"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_file = self.backup_dir / f"{prefix}_{timestamp}.json"
        
        if self.registry_file.exists():
            with open(self.registry_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            with open(backup_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, indent=2, ensure_ascii=False)
            
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_file}")
            return str(backup_file)
        else:
            print("‚ö†Ô∏è –§–∞–π–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")
            return ""
    
    def check_sfm_before_integration(self, function_name: str) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ SFM –î–û –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        print(f"\nüîç A+ –ü–†–û–í–ï–†–ö–ê SFM –î–û –ò–ù–¢–ï–ì–†–ê–¶–ò–ò: {function_name}")
        print("=" * 60)
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        backup_file = self.create_backup(f"before_{function_name}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º SFM
        sfm = SafeFunctionManager()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        analysis = {
            'timestamp': datetime.now().isoformat(),
            'function_name': function_name,
            'backup_file': backup_file,
            'total_functions': len(sfm.functions),
            'total_handlers': len(sfm.function_handlers),
            'functions_without_handlers': [],
            'critical_functions_without_handlers': [],
            'handler_module_errors': [],
            'data_type_inconsistencies': [],
            'execution_test_results': {},
            'overall_health_score': 0,
            'issues': [],
            'recommendations': []
        }
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        for func_id, func in sfm.functions.items():
            if func_id not in sfm.function_handlers:
                analysis['functions_without_handlers'].append({
                    'function_id': func_id,
                    'name': func.name,
                    'type': func.function_type,
                    'is_critical': func.is_critical
                })
                
                if func.is_critical:
                    analysis['critical_functions_without_handlers'].append(func_id)
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥—É–ª–µ–π –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö
        for func_id, handler in sfm.function_handlers.items():
            if hasattr(handler, '__module__'):
                module = handler.__module__
                if module in ['safe_function_manager', 'complete_16_stage_algorithm']:
                    analysis['handler_module_errors'].append({
                        'function_id': func_id,
                        'current_module': module,
                        'expected_module': f'security.{module}' if module == 'safe_function_manager' else f'scripts.{module}'
                    })
        
        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö - –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        from security.safe_function_manager import SecurityLevel, FunctionStatus
        
        for func_id, func in sfm.functions.items():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º security_level - –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–±
            if not isinstance(func.security_level, SecurityLevel):
                analysis['data_type_inconsistencies'].append({
                    'function_id': func_id,
                    'field': 'security_level',
                    'memory_type': str(type(func.security_level)),
                    'file_type': 'SecurityLevel Enum'
                })
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º status - –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–±
            if not isinstance(func.status, FunctionStatus):
                analysis['data_type_inconsistencies'].append({
                    'function_id': func_id,
                    'field': 'status',
                    'memory_type': str(type(func.status)),
                    'file_type': 'FunctionStatus Enum'
                })
        
        # 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π
        for func_id in sfm.functions.keys():
            try:
                result = sfm.execute_function(func_id, {})
                analysis['execution_test_results'][func_id] = {
                    'success': True,
                    'result': str(result)[:100] + '...' if len(str(result)) > 100 else str(result)
                }
            except Exception as e:
                analysis['execution_test_results'][func_id] = {
                    'success': False,
                    'error': str(e)
                }
        
        # 5. –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ –±–∞–ª–ª–∞ –∑–¥–æ—Ä–æ–≤—å—è
        total_checks = 4
        passed_checks = 0
        
        if len(analysis['functions_without_handlers']) == 0:
            passed_checks += 1
        if len(analysis['handler_module_errors']) == 0:
            passed_checks += 1
        if len(analysis['data_type_inconsistencies']) == 0:
            passed_checks += 1
        
        execution_success_rate = sum(1 for r in analysis['execution_test_results'].values() if r['success']) / len(analysis['execution_test_results']) if analysis['execution_test_results'] else 0
        if execution_success_rate >= 0.95:
            passed_checks += 1
        
        analysis['overall_health_score'] = (passed_checks / total_checks) * 100
        
        # 6. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        if analysis['critical_functions_without_handlers']:
            analysis['issues'].append(f"–ö–†–ò–¢–ò–ß–ù–û: {len(analysis['critical_functions_without_handlers'])} –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤")
            analysis['recommendations'].append("–î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π")
        
        if analysis['handler_module_errors']:
            analysis['issues'].append(f"–û–®–ò–ë–ö–ê: {len(analysis['handler_module_errors'])} –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –º–æ–¥—É–ª—è–º–∏")
            analysis['recommendations'].append("–ò—Å–ø—Ä–∞–≤–∏—Ç—å –º–æ–¥—É–ª–∏ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö")
        
        if analysis['data_type_inconsistencies']:
            analysis['issues'].append(f"–ù–ï–°–û–û–¢–í–ï–¢–°–¢–í–ò–ï: {len(analysis['data_type_inconsistencies'])} –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö")
            analysis['recommendations'].append("–£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –ø–∞–º—è—Ç—å—é –∏ —Ñ–∞–π–ª–æ–º")
        
        if execution_success_rate < 0.95:
            analysis['issues'].append(f"–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: {execution_success_rate*100:.1f}% —É—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ (—Ç—Ä–µ–±—É–µ—Ç—Å—è 95%+)")
            analysis['recommendations'].append("–ò—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π")
        
        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self._print_analysis_results(analysis, "–î–û")
        
        return analysis
    
    def check_sfm_after_integration(self, function_name: str, before_analysis: Dict[str, Any]) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ SFM –ü–û–°–õ–ï –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        print(f"\nüîç A+ –ü–†–û–í–ï–†–ö–ê SFM –ü–û–°–õ–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–ò: {function_name}")
        print("=" * 60)
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        backup_file = self.create_backup(f"after_{function_name}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º SFM
        sfm = SafeFunctionManager()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        analysis = {
            'timestamp': datetime.now().isoformat(),
            'function_name': function_name,
            'backup_file': backup_file,
            'total_functions': len(sfm.functions),
            'total_handlers': len(sfm.function_handlers),
            'functions_added': len(sfm.functions) - before_analysis['total_functions'],
            'handlers_added': len(sfm.function_handlers) - before_analysis['total_handlers'],
            'functions_without_handlers': [],
            'critical_functions_without_handlers': [],
            'handler_module_errors': [],
            'data_type_inconsistencies': [],
            'execution_test_results': {},
            'overall_health_score': 0,
            'issues': [],
            'recommendations': [],
            'improvements': [],
            'regressions': []
        }
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ –∂–µ –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ –∏ –î–û –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        for func_id, func in sfm.functions.items():
            if func_id not in sfm.function_handlers:
                analysis['functions_without_handlers'].append({
                    'function_id': func_id,
                    'name': func.name,
                    'type': func.function_type,
                    'is_critical': func.is_critical
                })
                
                if func.is_critical:
                    analysis['critical_functions_without_handlers'].append(func_id)
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥—É–ª–µ–π –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö
        for func_id, handler in sfm.function_handlers.items():
            if hasattr(handler, '__module__'):
                module = handler.__module__
                if module in ['safe_function_manager', 'complete_16_stage_algorithm']:
                    analysis['handler_module_errors'].append({
                        'function_id': func_id,
                        'current_module': module,
                        'expected_module': f'security.{module}' if module == 'safe_function_manager' else f'scripts.{module}'
                    })
        
        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö - –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        from security.safe_function_manager import SecurityLevel, FunctionStatus
        
        for func_id, func in sfm.functions.items():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º security_level - –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–±
            if not isinstance(func.security_level, SecurityLevel):
                analysis['data_type_inconsistencies'].append({
                    'function_id': func_id,
                    'field': 'security_level',
                    'memory_type': str(type(func.security_level)),
                    'file_type': 'SecurityLevel Enum'
                })
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º status - –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–±
            if not isinstance(func.status, FunctionStatus):
                analysis['data_type_inconsistencies'].append({
                    'function_id': func_id,
                    'field': 'status',
                    'memory_type': str(type(func.status)),
                    'file_type': 'FunctionStatus Enum'
                })
        
        # 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π
        for func_id in sfm.functions.keys():
            try:
                result = sfm.execute_function(func_id, {})
                analysis['execution_test_results'][func_id] = {
                    'success': True,
                    'result': str(result)[:100] + '...' if len(str(result)) > 100 else str(result)
                }
            except Exception as e:
                analysis['execution_test_results'][func_id] = {
                    'success': False,
                    'error': str(e)
                }
        
        # 5. –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ –±–∞–ª–ª–∞ –∑–¥–æ—Ä–æ–≤—å—è
        total_checks = 4
        passed_checks = 0
        
        if len(analysis['functions_without_handlers']) == 0:
            passed_checks += 1
        if len(analysis['handler_module_errors']) == 0:
            passed_checks += 1
        if len(analysis['data_type_inconsistencies']) == 0:
            passed_checks += 1
        
        execution_success_rate = sum(1 for r in analysis['execution_test_results'].values() if r['success']) / len(analysis['execution_test_results']) if analysis['execution_test_results'] else 0
        if execution_success_rate >= 0.95:
            passed_checks += 1
        
        analysis['overall_health_score'] = (passed_checks / total_checks) * 100
        
        # 6. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –î–û –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        if analysis['overall_health_score'] > before_analysis['overall_health_score']:
            analysis['improvements'].append(f"–£–ª—É—á—à–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è SFM: {before_analysis['overall_health_score']:.1f}% ‚Üí {analysis['overall_health_score']:.1f}%")
        elif analysis['overall_health_score'] < before_analysis['overall_health_score']:
            analysis['regressions'].append(f"–£—Ö—É–¥—à–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è SFM: {before_analysis['overall_health_score']:.1f}% ‚Üí {analysis['overall_health_score']:.1f}%")
        
        if analysis['functions_added'] > 0:
            analysis['improvements'].append(f"–î–æ–±–∞–≤–ª–µ–Ω–æ —Ñ—É–Ω–∫—Ü–∏–π: +{analysis['functions_added']}")
        
        if analysis['handlers_added'] > 0:
            analysis['improvements'].append(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: +{analysis['handlers_added']}")
        
        # 7. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        if analysis['critical_functions_without_handlers']:
            analysis['issues'].append(f"–ö–†–ò–¢–ò–ß–ù–û: {len(analysis['critical_functions_without_handlers'])} –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤")
            analysis['recommendations'].append("–î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π")
        
        if analysis['handler_module_errors']:
            analysis['issues'].append(f"–û–®–ò–ë–ö–ê: {len(analysis['handler_module_errors'])} –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –º–æ–¥—É–ª—è–º–∏")
            analysis['recommendations'].append("–ò—Å–ø—Ä–∞–≤–∏—Ç—å –º–æ–¥—É–ª–∏ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö")
        
        if analysis['data_type_inconsistencies']:
            analysis['issues'].append(f"–ù–ï–°–û–û–¢–í–ï–¢–°–¢–í–ò–ï: {len(analysis['data_type_inconsistencies'])} –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö")
            analysis['recommendations'].append("–£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –ø–∞–º—è—Ç—å—é –∏ —Ñ–∞–π–ª–æ–º")
        
        if execution_success_rate < 0.95:
            analysis['issues'].append(f"–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: {execution_success_rate*100:.1f}% —É—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ (—Ç—Ä–µ–±—É–µ—Ç—Å—è 95%+)")
            analysis['recommendations'].append("–ò—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π")
        
        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self._print_analysis_results(analysis, "–ü–û–°–õ–ï")
        
        # –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        self._print_comparison_analysis(before_analysis, analysis)
        
        return analysis
    
    def _print_analysis_results(self, analysis: Dict[str, Any], phase: str):
        """–í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞"""
        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê {phase}:")
        print(f"  –í—Ä–µ–º—è: {analysis['timestamp']}")
        print(f"  –§—É–Ω–∫—Ü–∏–π: {analysis['total_functions']}")
        print(f"  –û–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {analysis['total_handlers']}")
        print(f"  –ë–∞–ª–ª –∑–¥–æ—Ä–æ–≤—å—è: {analysis['overall_health_score']:.1f}/100")
        
        if 'functions_added' in analysis:
            print(f"  –î–æ–±–∞–≤–ª–µ–Ω–æ —Ñ—É–Ω–∫—Ü–∏–π: +{analysis['functions_added']}")
            print(f"  –î–æ–±–∞–≤–ª–µ–Ω–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: +{analysis['handlers_added']}")
        
        print(f"\nüîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó:")
        
        if analysis['functions_without_handlers']:
            print(f"  ‚ùå –§—É–Ω–∫—Ü–∏–π –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {len(analysis['functions_without_handlers'])}")
            for func in analysis['functions_without_handlers'][:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                critical_mark = " (–ö–†–ò–¢–ò–ß–ù–ê–Ø)" if func['is_critical'] else ""
                print(f"    - {func['function_id']}: {func['name']}{critical_mark}")
        else:
            print(f"  ‚úÖ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–º–µ—é—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏")
        
        if analysis['handler_module_errors']:
            print(f"  ‚ùå –û—à–∏–±–∫–∏ –º–æ–¥—É–ª–µ–π: {len(analysis['handler_module_errors'])}")
            for error in analysis['handler_module_errors'][:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                print(f"    - {error['function_id']}: {error['current_module']} ‚Üí {error['expected_module']}")
        else:
            print(f"  ‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
        
        if analysis['data_type_inconsistencies']:
            print(f"  ‚ùå –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç–∏–ø–æ–≤: {len(analysis['data_type_inconsistencies'])}")
        else:
            print(f"  ‚úÖ –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã")
        
        execution_success_rate = sum(1 for r in analysis['execution_test_results'].values() if r['success']) / len(analysis['execution_test_results']) if analysis['execution_test_results'] else 0
        print(f"  üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–æ–≤: {execution_success_rate*100:.1f}%")
        
        if analysis['issues']:
            print(f"\n‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–´:")
            for issue in analysis['issues']:
                print(f"  - {issue}")
        
        if analysis['recommendations']:
            print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            for rec in analysis['recommendations']:
                print(f"  - {rec}")
    
    def _print_comparison_analysis(self, before: Dict[str, Any], after: Dict[str, Any]):
        """–í—ã–≤–æ–¥ —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        print(f"\nüìà –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó:")
        print(f"  –ë–∞–ª–ª –∑–¥–æ—Ä–æ–≤—å—è: {before['overall_health_score']:.1f}% ‚Üí {after['overall_health_score']:.1f}%")
        
        if after['overall_health_score'] > before['overall_health_score']:
            improvement = after['overall_health_score'] - before['overall_health_score']
            print(f"  ‚úÖ –£–ª—É—á—à–µ–Ω–∏–µ: +{improvement:.1f}%")
        elif after['overall_health_score'] < before['overall_health_score']:
            regression = before['overall_health_score'] - after['overall_health_score']
            print(f"  ‚ùå –£—Ö—É–¥—à–µ–Ω–∏–µ: -{regression:.1f}%")
        else:
            print(f"  ‚û°Ô∏è –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
        
        print(f"  –§—É–Ω–∫—Ü–∏–π: {before['total_functions']} ‚Üí {after['total_functions']} (+{after['total_functions'] - before['total_functions']})")
        print(f"  –û–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {before['total_handlers']} ‚Üí {after['total_handlers']} (+{after['total_handlers'] - before['total_handlers']})")
        
        if after['improvements']:
            print(f"\n‚úÖ –£–õ–£–ß–®–ï–ù–ò–Ø:")
            for improvement in after['improvements']:
                print(f"  - {improvement}")
        
        if after['regressions']:
            print(f"\n‚ùå –£–•–£–î–®–ï–ù–ò–Ø:")
            for regression in after['regressions']:
                print(f"  - {regression}")
    
    def fix_sfm_issues(self, analysis: Dict[str, Any]) -> bool:
        """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –≤ SFM"""
        print(f"\nüîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú SFM")
        print("=" * 40)
        
        sfm = SafeFunctionManager()
        fixes_applied = 0
        
        # 1. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª–µ–π –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö
        if analysis['handler_module_errors']:
            print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª–µ–π –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö...")
            sfm._save_functions()  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –º–æ–¥—É–ª—è–º–∏
            fixes_applied += 1
            print("  ‚úÖ –ú–æ–¥—É–ª–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã")
        
        # 2. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
        if analysis['critical_functions_without_handlers']:
            print("üîß –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π...")
            for func_id in analysis['critical_functions_without_handlers']:
                if func_id in sfm.functions:
                    # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫—Ä–∏—Ç–∏—á–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
                    def create_critical_handler(f_id):
                        def critical_handler(params):
                            return {
                                'status': 'success',
                                'function_id': f_id,
                                'message': f'–ö—Ä–∏—Ç–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è {f_id} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞',
                                'handler_type': 'critical_base'
                            }
                        return critical_handler
                    
                    sfm.register_function_handler(func_id, create_critical_handler(func_id))
                    print(f"  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è {func_id}")
                    fixes_applied += 1
        
        # 3. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        if fixes_applied > 0:
            print("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π...")
            sfm._save_functions()
            print(f"  ‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {fixes_applied}")
        
        return fixes_applied > 0

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    checker = SFMAPlusChecker()
    
    # –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –î–û –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    before_analysis = checker.check_sfm_before_integration("TestFunction")
    
    # –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ü–û–°–õ–ï –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    after_analysis = checker.check_sfm_after_integration("TestFunction", before_analysis)
    
    # –¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º
    if after_analysis['issues']:
        checker.fix_sfm_issues(after_analysis)

if __name__ == "__main__":
    main()