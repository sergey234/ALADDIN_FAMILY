#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π SFM
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é ThreadPoolManager –∏ AsyncIOManager
"""

import sys
import os
import time
import json
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from security.safe_function_manager import SafeFunctionManager

def test_sfm_optimizations():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π SFM"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π SFM")
    print("=" * 50)
    
    try:
        # –°–æ–∑–¥–∞–µ–º SFM —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏
        config = {
            "thread_pool_enabled": True,
            "max_thread_pool_workers": 5,
            "async_io_enabled": True,
            "enable_auto_management": False,  # –û—Ç–∫–ª—é—á–∞–µ–º –¥–ª—è —Ç–µ—Å—Ç–∞
            "enable_sleep_mode": False
        }
        
        sfm = SafeFunctionManager("TestSFM", config)
        
        print("‚úÖ SFM —Å–æ–∑–¥–∞–Ω —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏")
        print(f"   –ü—É–ª –ø–æ—Ç–æ–∫–æ–≤: {'‚úÖ' if sfm.thread_pool else '‚ùå'}")
        print(f"   Async I/O: {'‚úÖ' if sfm.async_io_manager else '‚ùå'}")
        print(f"   Redis Cache: {'‚úÖ' if sfm.redis_cache_manager else '‚ùå'}")
        
        # –¢–µ—Å—Ç 1: –°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
        print("\nüß™ –¢–µ—Å—Ç 1: –°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ")
        start_time = time.time()
        success, result, message = sfm.execute_function("test_function", {"test": "data"})
        sync_time = time.time() - start_time
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {success}")
        print(f"   –í—Ä–µ–º—è: {sync_time:.3f}—Å")
        
        # –¢–µ—Å—Ç 2: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
        print("\nüß™ –¢–µ—Å—Ç 2: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ")
        start_time = time.time()
        future = sfm.execute_function_async("test_function", {"test": "data"})
        if hasattr(future, 'result'):
            result = future.result(timeout=5)
            async_time = time.time() - start_time
            print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result[0] if isinstance(result, tuple) else 'OK'}")
            print(f"   –í—Ä–µ–º—è: {async_time:.3f}—Å")
        else:
            print("   Fallback –Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ")
        
        # –¢–µ—Å—Ç 3: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        print("\nüß™ –¢–µ—Å—Ç 3: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ")
        start_time = time.time()
        future = sfm.save_functions_async()
        if hasattr(future, 'result'):
            result = future.result(timeout=5)
            save_time = time.time() - start_time
            print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
            print(f"   –í—Ä–µ–º—è: {save_time:.3f}—Å")
        else:
            print("   Fallback –Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ")
        
        # –¢–µ—Å—Ç 4: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
        print("\nüß™ –¢–µ—Å—Ç 4: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞")
        start_time = time.time()
        future = sfm.load_functions_async()
        if hasattr(future, 'result'):
            result = future.result(timeout=5)
            load_time = time.time() - start_time
            print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
            print(f"   –í—Ä–µ–º—è: {load_time:.3f}—Å")
        else:
            print("   Fallback –Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É")
        
        # –¢–µ—Å—Ç 5: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        print(f"   –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π: {len(sfm.functions)}")
        print(f"   –£—Å–ø–µ—à–Ω—ã—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π: {sfm.successful_executions}")
        print(f"   –ù–µ—É–¥–∞—á–Ω—ã—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π: {sfm.failed_executions}")
        print(f"   –ö—ç—à –ø–æ–ø–∞–¥–∞–Ω–∏–π: {sfm.cache_hits}")
        print(f"   –ö—ç—à –ø—Ä–æ–º–∞—Ö–æ–≤: {sfm.cache_misses}")
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        print("\nüõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã")
        sfm.shutdown_optimizations()
        
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print(f"üïê –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    success = test_sfm_optimizations()
    
    if success:
        print("\nüéâ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π SFM —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        sys.exit(0)
    else:
        print("\nüí• –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π!")
        sys.exit(1)

if __name__ == "__main__":
    main()