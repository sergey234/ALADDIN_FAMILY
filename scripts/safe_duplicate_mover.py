#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ALADDIN Safe Duplicate Mover
–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–µ—Ä–µ–Ω–æ—Å –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫—É FORMATTING_WORK/duplicates/
–∏ —É–¥–∞–ª–µ–Ω–∏–µ –∏—Ö –∏–∑ SFM registry
"""

import os
import json
import shutil
from datetime import datetime
from pathlib import Path
import logging

class SafeDuplicateMover:
    def __init__(self):
        self.project_root = Path("/Users/sergejhlystov/ALADDIN_NEW")
        self.duplicates_dir = self.project_root / "security" / "formatting_work" / "duplicates"
        self.sfm_registry = self.project_root / "data" / "sfm" / "function_registry.json"
        
        # –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ (–∏–∑ –∞–Ω–∞–ª–∏–∑–∞)
        self.files_to_move = [
            # Security Analytics
            "security/security_analytics.py",  # 684 —Å—Ç—Ä–æ–∫–∏, 350 –æ—á–∫–æ–≤
            
            # Security Monitoring  
            "security/security_monitoring_backup.py",  # 837 —Å—Ç—Ä–æ–∫, 480 –æ—á–∫–æ–≤
            "security/security_monitoring.py",  # 166 —Å—Ç—Ä–æ–∫, 135 –æ—á–∫–æ–≤
            
            # Incident Response
            "security/incident_response.py",  # 776 —Å—Ç—Ä–æ–∫, 545 –æ—á–∫–æ–≤
            
            # Circuit Breaker
            "security/ai_agents/circuit_breaker_main.py",  # 512 —Å—Ç—Ä–æ–∫, 535 –æ—á–∫–æ–≤
            "security/microservices/circuit_breaker.py",  # 452 —Å—Ç—Ä–æ–∫–∏, 395 –æ—á–∫–æ–≤
            "security/microservices/circuit_breaker_extra.py",  # 227 —Å—Ç—Ä–æ–∫, 175 –æ—á–∫–æ–≤
            
            # Malware Protection
            "security/malware_protection_old_backup_20250928_125507.py",  # 391 —Å—Ç—Ä–æ–∫–∞, 260 –æ—á–∫–æ–≤
            
            # Intrusion Prevention
            "security/intrusion_prevention.py",  # 687 —Å—Ç—Ä–æ–∫, 390 –æ—á–∫–æ–≤
            
            # Device Security
            "security/device_security.py",  # 2209 —Å—Ç—Ä–æ–∫, 1025 –æ—á–∫–æ–≤
            
            # Network Monitoring
            "security/network_monitoring.py",  # 1969 —Å—Ç—Ä–æ–∫, 1130 –æ—á–∫–æ–≤
            
            # Put to Sleep
            "security/microservices/put_to_sleep.py",  # 159 —Å—Ç—Ä–æ–∫, 90 –æ—á–∫–æ–≤
            
            # User Interface Manager
            "security/managers/user_interface_manager_main.py",  # 332 —Å—Ç—Ä–æ–∫–∏, 280 –æ—á–∫–æ–≤
            
            # Parental Control Bot
            "security/bots/parental_control_bot_v2.py",  # 218 —Å—Ç—Ä–æ–∫, 235 –æ—á–∫–æ–≤
            
            # Notification Bot
            "security/ai_agents/notification_bot_main.py",  # 428 —Å—Ç—Ä–æ–∫, 335 –æ—á–∫–æ–≤
            "security/bots/notification_bot_extra.py",  # 198 —Å—Ç—Ä–æ–∫, 225 –æ—á–∫–æ–≤
            
            # Universal Privacy Manager
            "security/privacy/universal_privacy_manager_new.py",  # 606 —Å—Ç—Ä–æ–∫, 500 –æ—á–∫–æ–≤
            
            # Elderly Interface Manager
            "security/ai_agents/elderly_interface_manager_backup.py",  # 715 —Å—Ç—Ä–æ–∫, 420 –æ—á–∫–æ–≤
            
            # Family Profile Manager
            "security/family/family_profile_manager.py",  # 399 —Å—Ç—Ä–æ–∫, 265 –æ—á–∫–æ–≤
            
            # Child Protection
            "security/family/child_protection_new.py",  # 656 —Å—Ç—Ä–æ–∫, 350 –æ—á–∫–æ–≤
            
            # Trust Scoring
            "security/preliminary/trust_scoring.py",  # 459 —Å—Ç—Ä–æ–∫, 315 –æ—á–∫–æ–≤
            
            # Behavioral Analysis
            "security/preliminary/behavioral_analysis.py",  # 663 —Å—Ç—Ä–æ–∫–∏, 360 –æ—á–∫–æ–≤
            
            # Mobile Security Agent
            "security/ai_agents/mobile_security_agent_backup_20250921_103531.py",  # 2361 —Å—Ç—Ä–æ–∫–∞, 1145 –æ—á–∫–æ–≤
            "security/ai_agents/mobile_security_agent_extra.py",  # 712 —Å—Ç—Ä–æ–∫, 375 –æ—á–∫–æ–≤
            "security/ai_agents/mobile_security_agent_main.py",  # 695 —Å—Ç—Ä–æ–∫, 375 –æ—á–∫–æ–≤
            
            # Phishing Protection Agent
            "security/ai_agents/phishing_protection_agent_backup_20250921_104040.py",  # 699 —Å—Ç—Ä–æ–∫, 440 –æ—á–∫–æ–≤
            
            # Family Communication Hub
            "security/ai_agents/family_communication_hub_backup_20250921_103829.py",  # 413 —Å—Ç—Ä–æ–∫, 280 –æ—á–∫–æ–≤
            "security/ai_agents/family_communication_hub_a_plus.py",  # 361 —Å—Ç—Ä–æ–∫–∞, 210 –æ—á–∫–æ–≤
            
            # Behavioral Analytics Engine
            "security/ai_agents/behavioral_analytics_engine_extra.py",  # 454 —Å—Ç—Ä–æ–∫–∏, 295 –æ—á–∫–æ–≤
            "security/ai_agents/behavioral_analytics_engine_main.py",  # 371 —Å—Ç—Ä–æ–∫–∞, 225 –æ—á–∫–æ–≤
            
            # Financial Protection Hub
            "security/ai_agents/financial_protection_hub_backup_20250921_104412.py",  # 862 —Å—Ç—Ä–æ–∫–∏, 530 –æ—á–∫–æ–≤
            
            
            # __init__ files (17 files)
            "security/ai_agents/__init__.py",
            "security/bots/__init__.py", 
            "security/managers/__init__.py",
            "security/microservices/__init__.py",
            "security/family/__init__.py",
            "security/privacy/__init__.py",
            "security/compliance/__init__.py",
            "security/active/__init__.py",
            "security/reactive/__init__.py",
            "security/ai/__init__.py",
            "security/core/__init__.py",
            "security/ci_cd/__init__.py",
            "security/vpn/__init__.py",
            "security/scaling/__init__.py",
            "security/orchestration/__init__.py",
            "security/preliminary/__init__.py"
        ]
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logging.basicConfig(level=logging.INFO)
        self.logger = logging.getLogger("SafeDuplicateMover")
        
    def create_backup_manifest(self):
        """–°–æ–∑–¥–∞–µ—Ç –º–∞–Ω–∏—Ñ–µ—Å—Ç –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        manifest = {
            "moved_at": datetime.now().isoformat(),
            "total_files": len(self.files_to_move),
            "reason": "–£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã",
            "files": []
        }
        
        for file_path in self.files_to_move:
            full_path = self.project_root / file_path
            if full_path.exists():
                stat = full_path.stat()
                manifest["files"].append({
                    "original_path": str(file_path),
                    "moved_to": f"security/formatting_work/duplicates/{file_path.split('/')[-1]}",
                    "size_bytes": stat.st_size,
                    "lines": self.count_lines(full_path),
                    "modified_time": datetime.fromtimestamp(stat.st_mtime).isoformat()
                })
        
        return manifest
        
    def count_lines(self, file_path):
        """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ —Ñ–∞–π–ª–µ"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                return len(f.readlines())
        except:
            return 0
            
    def move_file(self, source_path, dest_path):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç —Ñ–∞–π–ª"""
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            dest_path.parent.mkdir(parents=True, exist_ok=True)
            
            # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª
            shutil.move(str(source_path), str(dest_path))
            self.logger.info(f"‚úÖ –ü–µ—Ä–µ–º–µ—â–µ–Ω: {source_path} ‚Üí {dest_path}")
            return True
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è {source_path}: {e}")
            return False
            
    def remove_from_sfm_registry(self):
        """–£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª—ã –∏–∑ SFM registry"""
        try:
            if not self.sfm_registry.exists():
                self.logger.warning("SFM registry –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
                
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π registry
            with open(self.sfm_registry, 'r', encoding='utf-8') as f:
                registry = json.load(f)
                
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
            backup_path = self.sfm_registry.with_suffix('.backup_before_cleanup.json')
            with open(backup_path, 'w', encoding='utf-8') as f:
                json.dump(registry, f, ensure_ascii=False, indent=2)
            self.logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")
            
            # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö
            removed_count = 0
            for file_path in self.files_to_move:
                file_name = Path(file_path).name
                # –ò—â–µ–º –∏ —É–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
                keys_to_remove = []
                for key, value in registry.items():
                    if isinstance(value, dict) and value.get('file_path', '').endswith(file_name):
                        keys_to_remove.append(key)
                
                for key in keys_to_remove:
                    del registry[key]
                    removed_count += 1
                    self.logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å –∏–∑ SFM: {key}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π registry
            with open(self.sfm_registry, 'w', encoding='utf-8') as f:
                json.dump(registry, f, ensure_ascii=False, indent=2)
                
            self.logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {removed_count} –∑–∞–ø–∏—Å–µ–π –∏–∑ SFM registry")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è SFM registry: {e}")
            return False
            
    def move_duplicates(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"""
        self.logger.info("üöÄ –ù–∞—á–∞–ª–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–µ—Ä–µ–Ω–æ—Å–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤...")
        
        # –°–æ–∑–¥–∞–µ–º –º–∞–Ω–∏—Ñ–µ—Å—Ç
        manifest = self.create_backup_manifest()
        
        moved_count = 0
        failed_count = 0
        
        for file_path in self.files_to_move:
            source_path = self.project_root / file_path
            
            if not source_path.exists():
                self.logger.warning(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {source_path}")
                failed_count += 1
                continue
                
            # –°–æ–∑–¥–∞–µ–º –ø—É—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
            dest_path = self.duplicates_dir / source_path.name
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ñ–∞–π–ª –≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏
            if dest_path.exists():
                # –î–æ–±–∞–≤–ª—è–µ–º timestamp –∫ –∏–º–µ–Ω–∏
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                name_parts = dest_path.stem, timestamp, dest_path.suffix
                dest_path = dest_path.parent / f"{name_parts[0]}_{name_parts[1]}{name_parts[2]}"
            
            # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª
            if self.move_file(source_path, dest_path):
                moved_count += 1
            else:
                failed_count += 1
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–Ω–∏—Ñ–µ—Å—Ç
        manifest_path = self.duplicates_dir / "MOVED_FILES_MANIFEST.json"
        with open(manifest_path, 'w', encoding='utf-8') as f:
            json.dump(manifest, f, ensure_ascii=False, indent=2)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º SFM registry
        self.remove_from_sfm_registry()
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.logger.info("="*80)
        self.logger.info("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–ï–†–ï–ù–û–°–ê:")
        self.logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–æ: {moved_count} —Ñ–∞–π–ª–æ–≤")
        self.logger.info(f"‚ùå –û—à–∏–±–æ–∫: {failed_count} —Ñ–∞–π–ª–æ–≤")
        self.logger.info(f"üìÅ –ü–∞–ø–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {self.duplicates_dir}")
        self.logger.info(f"üìã –ú–∞–Ω–∏—Ñ–µ—Å—Ç: {manifest_path}")
        self.logger.info("="*80)
        
        return moved_count, failed_count

if __name__ == "__main__":
    mover = SafeDuplicateMover()
    moved, failed = mover.move_duplicates()
    
    if failed == 0:
        print("üéâ –í—Å–µ —Ñ–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã!")
    else:
        print(f"‚ö†Ô∏è –ü–µ—Ä–µ–º–µ—â–µ–Ω–æ {moved} —Ñ–∞–π–ª–æ–≤, {failed} –æ—à–∏–±–æ–∫")