#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö API —Å SafeFunctionManager
–ë–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –∏ —Å–ª–æ–∂–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from security.russian_api_manager import russian_api_manager, RussianAPIType
from security.safe_function_manager import SafeFunctionManager
from core.base import SecurityLevel, ComponentStatus
from core.logging_module import LoggingManager

logger = LoggingManager(name="IntegrateRussianAPIsSimple")


def integrate_russian_apis_simple():
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö API"""
    logger.log("INFO", "üöÄ –ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö API...")
    print("=" * 60)
    print("üîó –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö API...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º SafeFunctionManager
        safe_manager = SafeFunctionManager()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–∞
        print("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏: Russian API Manager")
        
        result = safe_manager.register_function(
            function_id="russian_api_manager",
            name="Russian API Manager",
            description="–ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö API –¥–ª—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏, –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –∏ –ì–õ–û–ù–ê–°–°",
            function_type="geolocation",
            security_level=SecurityLevel.HIGH,
            auto_enable=False  # –ù–ï –≤–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        )
        
        if result:
            logger.log("INFO", "‚úÖ Russian API Manager —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
            print("‚úÖ Russian API Manager –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
            status = safe_manager.get_function_status("russian_api_manager")
            if status:
                print(f"üìä –°—Ç–∞—Ç—É—Å: {status.get('status')}")
                print(f"üîí –£—Ä–æ–≤–µ–Ω—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {status.get('security_level')}")
                print(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {status.get('description')}")
                logger.log("INFO", f"–°—Ç–∞—Ç—É—Å —Ñ—É–Ω–∫—Ü–∏–∏: {status}")
            else:
                print("‚ùå –§—É–Ω–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                logger.log("ERROR", "–§—É–Ω–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        else:
            logger.log("ERROR", "‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ Russian API Manager")
            print("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ Russian API Manager")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ API –Ω–∞–ø—Ä—è–º—É—é
        print("\nüß™ –ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö API...")
        
        # –¢–µ—Å—Ç –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
        print("üåç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è...")
        try:
            import asyncio
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            
            geocode_result = loop.run_until_complete(
                russian_api_manager.geocode_address("–ú–æ—Å–∫–≤–∞, –ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å")
            )
            loop.close()
            
            if geocode_result:
                print("‚úÖ –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                print(f"   üìç –ê–¥—Ä–µ—Å: {geocode_result.address}")
                print(f"   üìä –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {geocode_result.coordinates}")
                print(f"   üèôÔ∏è –ì–æ—Ä–æ–¥: {geocode_result.city}")
                print(f"   üåç –°—Ç—Ä–∞–Ω–∞: {geocode_result.country}")
                print(f"   üîß API: {geocode_result.api_source}")
                logger.log("INFO", f"–ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ: {geocode_result}")
            else:
                print("‚ùå –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                logger.log("ERROR", "–ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            logger.log("ERROR", f"–û—à–∏–±–∫–∞ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        
        # –¢–µ—Å—Ç –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
        print("üõ£Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏...")
        try:
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            
            route_result = loop.run_until_complete(
                russian_api_manager.build_route("–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥")
            )
            loop.close()
            
            if route_result:
                print("‚úÖ –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
                print(f"   üöó –ú–∞—Ä—à—Ä—É—Ç: {route_result.from_point} -> {route_result.to_point}")
                print(f"   üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {route_result.distance:.0f} –º")
                print(f"   ‚è±Ô∏è –í—Ä–µ–º—è: {route_result.duration:.0f} —Å–µ–∫")
                print(f"   üîß API: {route_result.api_source}")
                logger.log("INFO", f"–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ: {route_result}")
            else:
                print("‚ùå –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                logger.log("ERROR", "–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏: {e}")
            logger.log("ERROR", f"–û—à–∏–±–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏: {e}")
        
        # –¢–µ—Å—Ç –ì–õ–û–ù–ê–°–°
        print("üõ∞Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ì–õ–û–ù–ê–°–°...")
        try:
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            
            glonass_result = loop.run_until_complete(
                russian_api_manager.get_glonass_coordinates("test_device")
            )
            loop.close()
            
            if glonass_result:
                print("‚úÖ –ì–õ–û–ù–ê–°–° —Ä–∞–±–æ—Ç–∞–µ—Ç")
                print(f"   üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {glonass_result}")
                logger.log("INFO", f"–ì–õ–û–ù–ê–°–° —É—Å–ø–µ—à–Ω–æ: {glonass_result}")
            else:
                print("‚ùå –ì–õ–û–ù–ê–°–° –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                logger.log("ERROR", "–ì–õ–û–ù–ê–°–° –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ì–õ–û–ù–ê–°–°: {e}")
            logger.log("ERROR", f"–û—à–∏–±–∫–∞ –ì–õ–û–ù–ê–°–°: {e}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:")
        try:
            stats = russian_api_manager.get_usage_statistics()
            usage = stats.get('usage_stats', {})
            print(f"   üìà –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {usage.get('total_requests', 0)}")
            print(f"   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {usage.get('successful_requests', 0)}")
            print(f"   ‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: {usage.get('failed_requests', 0)}")
            print(f"   üíæ –ö—ç—à –ø–æ–ø–∞–¥–∞–Ω–∏–π: {usage.get('cache_hits', 0)}")
            print(f"   üîß API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π: {len(stats.get('api_configs', {}))}")
            logger.log("INFO", f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")
        except Exception as e:
            print(f"   –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            logger.log("ERROR", f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        
        print("\n‚úÖ –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print("=" * 60)
        
        return True
        
    except Exception as e:
        logger.log("CRITICAL", f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        return False


if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö API...")
    print("=" * 60)
    
    # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å SafeFunctionManager
    integration_success = integrate_russian_apis_simple()
    
    print(f"\n" + "=" * 60)
    print(f"üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print(f"‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è SafeFunctionManager: {'–î–∞' if integration_success else '–ù–µ—Ç'}")
    
    if integration_success:
        print(f"\nüéâ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –£–°–ü–ï–®–ù–ê!")
        print(f"‚úÖ –†–æ—Å—Å–∏–π—Å–∫–∏–µ API —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print(f"‚úÖ SafeFunctionManager –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
        print(f"üåê API –¥–æ—Å—Ç—É–ø–Ω–æ: http://localhost:5005/api/russian/")
    else:
        print(f"\n‚ö†Ô∏è –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    
    print("=" * 60)