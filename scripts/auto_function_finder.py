#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–ª—è SFM –∞–ª–≥–æ—Ä–∏—Ç–º–∞
"""

import json
import os
import glob
from datetime import datetime
from typing import Dict, List, Tuple, Optional
from dataclasses import dataclass


@dataclass
class FunctionVersion:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–µ—Ä—Å–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏"""
    source: str  # 'sfm', 'formatting_work', 'sleeping'
    path: str
    function_id: str
    name: str
    status: str
    lines_of_code: int
    file_size_kb: float
    flake8_errors: int
    quality_score: str
    last_updated: str
    description: str = ""


class AutoFunctionFinder:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫–æ–≤–∏–∫ —Ñ—É–Ω–∫—Ü–∏–π"""
    
    def __init__(self, base_path: str = "."):
        self.base_path = base_path
        self.sfm_registry_path = os.path.join(base_path, "data/sfm/function_registry.json")
        self.formatting_work_path = os.path.join(base_path, "formatting_work")
        
        # –°–ø–∏—Å–æ–∫ —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞
        self.target_functions = [
            "notification_bot.py",
            "threat_intelligence_agent.py", 
            "anti_fraud_master_ai.py",
            "network_monitoring.py",
            "circuit_breaker.py",
            "super_ai_support_assistant.py",
            "super_ai_support_assistant_improved.py",
            "emergency_security_utils.py",
            "natural_language_processor.py"
        ]
        
    def find_function_in_sfm(self, function_name: str) -> List[FunctionVersion]:
        """–ü–æ–∏—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ SFM —Ä–µ–µ—Å—Ç—Ä–µ"""
        versions = []
        
        try:
            if os.path.exists(self.sfm_registry_path):
                with open(self.sfm_registry_path, 'r', encoding='utf-8') as f:
                    registry = json.load(f)
                    
                if 'functions' in registry:
                    for func_id, func_data in registry['functions'].items():
                        if function_name in func_data.get('file_path', ''):
                            version = FunctionVersion(
                                source='sfm',
                                path=func_data.get('file_path', ''),
                                function_id=func_id,
                                name=func_data.get('name', ''),
                                status=func_data.get('status', 'unknown'),
                                lines_of_code=func_data.get('lines_of_code', 0),
                                file_size_kb=func_data.get('file_size_kb', 0),
                                flake8_errors=func_data.get('flake8_errors', 0),
                                quality_score=func_data.get('quality_score', 'unknown'),
                                last_updated=func_data.get('last_updated', ''),
                                description=func_data.get('description', '')
                            )
                            versions.append(version)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è SFM —Ä–µ–µ—Å—Ç—Ä–∞: {e}")
            
        return versions
    
    def find_function_in_formatting_work(self, function_name: str) -> List[FunctionVersion]:
        """–ü–æ–∏—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ formatting_work"""
        versions = []
        
        if os.path.exists(self.formatting_work_path):
            # –ü–æ–∏—Å–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ —Å –ø–æ—Ö–æ–∂–∏–º –∏–º–µ–Ω–µ–º
            patterns = [
                f"{self.formatting_work_path}/**/{function_name}",
                f"{self.formatting_work_path}/**/*{function_name.replace('.py', '')}*",
            ]
            
            for pattern in patterns:
                for file_path in glob.glob(pattern, recursive=True):
                    if os.path.isfile(file_path):
                        try:
                            with open(file_path, 'r', encoding='utf-8') as f:
                                content = f.read()
                                
                            version = FunctionVersion(
                                source='formatting_work',
                                path=file_path,
                                function_id=os.path.basename(file_path),
                                name=function_name,
                                status='backup',
                                lines_of_code=len(content.splitlines()),
                                file_size_kb=os.path.getsize(file_path) / 1024,
                                flake8_errors=0,  # –ë—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ –ø–æ–∑–∂–µ
                                quality_score='unknown',
                                last_updated=datetime.fromtimestamp(os.path.getmtime(file_path)).strftime('%Y-%m-%d %H:%M:%S'),
                                description='Backup version'
                            )
                            versions.append(version)
                        except Exception as e:
                            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {file_path}: {e}")
                            
        return versions
    
    def find_function_in_active_files(self, function_name: str) -> List[FunctionVersion]:
        """–ü–æ–∏—Å–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–µ—Ä—Å–∏–π —Ñ—É–Ω–∫—Ü–∏–∏"""
        versions = []
        
        # –ü–æ–∏—Å–∫ –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö
        search_dirs = [
            "security",
            "core", 
            "ai_agents",
            "bots",
            "scripts"
        ]
        
        for search_dir in search_dirs:
            search_path = os.path.join(self.base_path, search_dir)
            if os.path.exists(search_path):
                patterns = [
                    f"{search_path}/**/{function_name}",
                    f"{search_path}/**/*{function_name.replace('.py', '')}*",
                ]
                
                for pattern in patterns:
                    for file_path in glob.glob(pattern, recursive=True):
                        if os.path.isfile(file_path):
                            try:
                                with open(file_path, 'r', encoding='utf-8') as f:
                                    content = f.read()
                                    
                                version = FunctionVersion(
                                    source='active',
                                    path=file_path,
                                    function_id=os.path.basename(file_path),
                                    name=function_name,
                                    status='active',
                                    lines_of_code=len(content.splitlines()),
                                    file_size_kb=os.path.getsize(file_path) / 1024,
                                    flake8_errors=0,  # –ë—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ –ø–æ–∑–∂–µ
                                    quality_score='unknown',
                                    last_updated=datetime.fromtimestamp(os.path.getmtime(file_path)).strftime('%Y-%m-%d %H:%M:%S'),
                                    description='Active version'
                                )
                                versions.append(version)
                            except Exception as e:
                                print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {file_path}: {e}")
                                
        return versions
    
    def find_all_versions(self, function_name: str) -> List[FunctionVersion]:
        """–ù–∞–π—Ç–∏ –≤—Å–µ –≤–µ—Ä—Å–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏"""
        all_versions = []
        
        # –ü–æ–∏—Å–∫ –≤ SFM —Ä–µ–µ—Å—Ç—Ä–µ
        sfm_versions = self.find_function_in_sfm(function_name)
        all_versions.extend(sfm_versions)
        
        # –ü–æ–∏—Å–∫ –≤ formatting_work
        formatting_versions = self.find_function_in_formatting_work(function_name)
        all_versions.extend(formatting_versions)
        
        # –ü–æ–∏—Å–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–µ—Ä—Å–∏–π
        active_versions = self.find_function_in_active_files(function_name)
        all_versions.extend(active_versions)
        
        return all_versions
    
    def analyze_all_functions(self):
        """–ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ —Å–ø–∏—Å–∫–∞"""
        print("üîç –≠–¢–ê–ü 0: –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–´–ô –ü–û–ò–°–ö –ò –ê–ù–ê–õ–ò–ó")
        print("=" * 60)
        
        results = {}
        
        for function_name in self.target_functions:
            print(f"\nüìã –ê–Ω–∞–ª–∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏: {function_name}")
            print("-" * 40)
            
            versions = self.find_all_versions(function_name)
            
            if not versions:
                print(f"‚ùå –§—É–Ω–∫—Ü–∏—è '{function_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                results[function_name] = {
                    'status': 'not_found',
                    'versions': [],
                    'best_version': None
                }
                continue
            
            # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–π
            best_version = self.select_best_version(versions)
            
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤–µ—Ä—Å–∏–π: {len(versions)}")
            for version in versions:
                print(f"  üìÅ {version.source}: {version.path}")
                print(f"     üìä –°—Ç—Ä–æ–∫: {version.lines_of_code}, –†–∞–∑–º–µ—Ä: {version.file_size_kb:.1f}KB")
                print(f"     üè∑Ô∏è  –°—Ç–∞—Ç—É—Å: {version.status}, –û–±–Ω–æ–≤–ª–µ–Ω: {version.last_updated}")
            
            if best_version:
                print(f"üéØ –õ–£–ß–®–ê–Ø –í–ï–†–°–ò–Ø: {best_version.source} - {best_version.path}")
            else:
                print("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ª—É—á—à—É—é –≤–µ—Ä—Å–∏—é")
            
            results[function_name] = {
                'status': 'found',
                'versions': versions,
                'best_version': best_version
            }
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.save_analysis_results(results)
        return results
    
    def select_best_version(self, versions: List[FunctionVersion]) -> Optional[FunctionVersion]:
        """–í—ã–±–æ—Ä –ª—É—á—à–µ–π –≤–µ—Ä—Å–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏"""
        if not versions:
            return None
            
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: active > sfm > formatting_work
        priority_order = {'active': 3, 'sfm': 2, 'formatting_work': 1}
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –∏ –∫–∞—á–µ—Å—Ç–≤—É
        sorted_versions = sorted(versions, key=lambda v: (
            priority_order.get(v.source, 0),
            v.lines_of_code,
            -v.flake8_errors
        ), reverse=True)
        
        return sorted_versions[0] if sorted_versions else None
    
    def save_analysis_results(self, results: Dict):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞"""
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        report_path = os.path.join(self.base_path, f"function_search_report_{timestamp}.json")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
        serializable_results = {}
        for func_name, data in results.items():
            serializable_results[func_name] = {
                'status': data['status'],
                'versions_count': len(data['versions']),
                'best_version': {
                    'source': data['best_version'].source if data['best_version'] else None,
                    'path': data['best_version'].path if data['best_version'] else None,
                    'lines_of_code': data['best_version'].lines_of_code if data['best_version'] else 0,
                    'file_size_kb': data['best_version'].file_size_kb if data['best_version'] else 0,
                    'status': data['best_version'].status if data['best_version'] else None,
                    'last_updated': data['best_version'].last_updated if data['best_version'] else None
                } if data['best_version'] else None
            }
        
        try:
            with open(report_path, 'w', encoding='utf-8') as f:
                json.dump(serializable_results, f, indent=2, ensure_ascii=False)
            print(f"\nüíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_path}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    finder = AutoFunctionFinder()
    results = finder.analyze_all_functions()
    
    print(f"\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print("=" * 40)
    
    found_count = sum(1 for data in results.values() if data['status'] == 'found')
    not_found_count = sum(1 for data in results.values() if data['status'] == 'not_found')
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ñ—É–Ω–∫—Ü–∏–π: {found_count}")
    print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ—É–Ω–∫—Ü–∏–π: {not_found_count}")
    print(f"üìã –í—Å–µ–≥–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {len(results)}")


if __name__ == "__main__":
    main()