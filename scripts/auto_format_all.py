#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö Python —Ñ–∞–π–ª–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ ALADDIN
–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –æ—à–∏–±–∫–∏ –¥–ª–∏–Ω—ã —Å—Ç—Ä–æ–∫, –∏–º–ø–æ—Ä—Ç—ã –∏ —Å—Ç–∏–ª—å –∫–æ–¥–∞
"""

import os
import sys
import subprocess
import argparse
from pathlib import Path
from datetime import datetime

class AutoFormatter:
    def __init__(self, project_root="/Users/sergejhlystov/ALADDIN_NEW"):
        self.project_root = Path(project_root)
        self.security_dir = self.project_root / "security"
        self.scripts_dir = self.project_root / "scripts"
        self.core_dir = self.project_root / "core"
        self.config_dir = self.project_root / "config"
        
        # –ò—Å–∫–ª—é—á–∞–µ–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        self.exclude_dirs = {
            "backup", "backups", "test", "tests", "logs", 
            "formatting_work", "__pycache__", ".git"
        }
        
        self.stats = {
            "files_processed": 0,
            "files_fixed": 0,
            "errors_fixed": 0,
            "start_time": datetime.now()
        }

    def find_python_files(self):
        """–ù–∞–π—Ç–∏ –≤—Å–µ Python —Ñ–∞–π–ª—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        python_files = []
        
        for directory in [self.security_dir, self.scripts_dir, self.core_dir, self.config_dir]:
            if directory.exists():
                for file_path in directory.rglob("*.py"):
                    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–µ –≤ –∏—Å–∫–ª—é—á–∞–µ–º–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                    if not any(exclude in str(file_path) for exclude in self.exclude_dirs):
                        python_files.append(file_path)
        
        return python_files

    def run_black(self, file_path):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å black –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            result = subprocess.run([
                "black", 
                "--line-length=120",
                "--quiet",
                str(file_path)
            ], capture_output=True, text=True, timeout=30)
            
            return result.returncode == 0, result.stderr
        except subprocess.TimeoutExpired:
            return False, "Timeout"
        except Exception as e:
            return False, str(e)

    def run_autopep8(self, file_path):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å autopep8 –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è PEP8 –æ—à–∏–±–æ–∫"""
        try:
            result = subprocess.run([
                "autopep8",
                "--in-place",
                "--max-line-length=120",
                "--aggressive",
                "--aggressive",
                str(file_path)
            ], capture_output=True, text=True, timeout=30)
            
            return result.returncode == 0, result.stderr
        except subprocess.TimeoutExpired:
            return False, "Timeout"
        except Exception as e:
            return False, str(e)

    def run_isort(self, file_path):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å isort –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏–º–ø–æ—Ä—Ç–æ–≤"""
        try:
            result = subprocess.run([
                "isort",
                "--profile=black",
                "--line-length=120",
                str(file_path)
            ], capture_output=True, text=True, timeout=30)
            
            return result.returncode == 0, result.stderr
        except subprocess.TimeoutExpired:
            return False, "Timeout"
        except Exception as e:
            return False, str(e)

    def check_flake8_errors(self, file_path):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—à–∏–±–∫–∏ flake8"""
        try:
            result = subprocess.run([
                "flake8",
                "--max-line-length=120",
                "--exclude=*/backup*,*/test*,*/logs*,*/formatting_work*",
                str(file_path)
            ], capture_output=True, text=True, timeout=30)
            
            return result.returncode, result.stdout
        except subprocess.TimeoutExpired:
            return 1, "Timeout"
        except Exception as e:
            return 1, str(e)

    def format_file(self, file_path):
        """–û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–¥–∏–Ω —Ñ–∞–π–ª"""
        print(f"üîß –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {file_path.relative_to(self.project_root)}")
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—à–∏–±–∫–∏ –¥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        exit_code, errors_before = self.check_flake8_errors(file_path)
        error_count_before = len(errors_before.split('\n')) if errors_before else 0
        
        # –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        tools = [
            ("isort", self.run_isort),
            ("autopep8", self.run_autopep8),
            ("black", self.run_black)
        ]
        
        for tool_name, tool_func in tools:
            success, error = tool_func(file_path)
            if not success:
                print(f"‚ö†Ô∏è  {tool_name} –æ—à–∏–±–∫–∞: {error}")
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—à–∏–±–∫–∏ –ø–æ—Å–ª–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        exit_code, errors_after = self.check_flake8_errors(file_path)
        error_count_after = len(errors_after.split('\n')) if errors_after else 0
        
        errors_fixed = error_count_before - error_count_after
        self.stats["files_processed"] += 1
        
        if errors_fixed > 0:
            self.stats["files_fixed"] += 1
            self.stats["errors_fixed"] += errors_fixed
            print(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ {errors_fixed} –æ—à–∏–±–æ–∫")
        else:
            print("‚úÖ –§–∞–π–ª —É–∂–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω")
        
        return errors_fixed

    def format_all(self, dry_run=False):
        """–û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã"""
        print("üöÄ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï ALADDIN")
        print("=" * 50)
        
        python_files = self.find_python_files()
        print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(python_files)} Python —Ñ–∞–π–ª–æ–≤")
        
        if dry_run:
            print("üîç –†–ï–ñ–ò–ú –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–û–ì–û –ü–†–û–°–ú–û–¢–†–ê")
            for file_path in python_files:
                exit_code, errors = self.check_flake8_errors(file_path)
                if exit_code != 0:
                    print(f"‚ö†Ô∏è  {file_path.relative_to(self.project_root)}: {len(errors.split())} –æ—à–∏–±–æ–∫")
            return
        
        print("üîß –ù–∞—á–∏–Ω–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...")
        
        for file_path in python_files:
            try:
                self.format_file(file_path)
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ {file_path}: {e}")
        
        self.print_summary()

    def print_summary(self):
        """–í—ã–≤–µ—Å—Ç–∏ —Å–≤–æ–¥–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        duration = datetime.now() - self.stats["start_time"]
        
        print("\n" + "=" * 50)
        print("üìä –°–í–û–î–ö–ê –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 50)
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration.total_seconds():.2f} —Å–µ–∫")
        print(f"üìÅ –§–∞–π–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {self.stats['files_processed']}")
        print(f"‚úÖ –§–∞–π–ª–æ–≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: {self.stats['files_fixed']}")
        print(f"üîß –û—à–∏–±–æ–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: {self.stats['errors_fixed']}")
        
        if self.stats['files_processed'] > 0:
            success_rate = (self.stats['files_fixed'] / self.stats['files_processed']) * 100
            print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
        
        print("=" * 50)

    def setup_precommit(self):
        """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å pre-commit hooks"""
        print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ pre-commit hooks...")
        
        try:
            # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å pre-commit hooks
            result = subprocess.run([
                "pre-commit", "install"
            ], cwd=self.project_root, capture_output=True, text=True)
            
            if result.returncode == 0:
                print("‚úÖ Pre-commit hooks —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ pre-commit: {result.stderr}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def main():
    parser = argparse.ArgumentParser(description="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ALADDIN")
    parser.add_argument("--dry-run", action="store_true", help="–¢–æ–ª—å–∫–æ –ø–æ–∫–∞–∑–∞—Ç—å —Ñ–∞–π–ª—ã —Å –æ—à–∏–±–∫–∞–º–∏")
    parser.add_argument("--setup-precommit", action="store_true", help="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å pre-commit hooks")
    parser.add_argument("--project-root", default="/Users/sergejhlystov/ALADDIN_NEW", 
                       help="–ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞")
    
    args = parser.parse_args()
    
    formatter = AutoFormatter(args.project_root)
    
    if args.setup_precommit:
        formatter.setup_precommit()
    else:
        formatter.format_all(dry_run=args.dry_run)

if __name__ == "__main__":
    main()