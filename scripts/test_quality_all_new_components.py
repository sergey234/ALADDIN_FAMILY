#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –≤—Å–µ—Ö –Ω–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

def test_code_quality():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞ –≤—Å–µ—Ö –Ω–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    
    components = [
        {
            'name': 'FamilyCommunicationHub',
            'module': 'security.ai_agents.family_communication_hub',
            'class': 'FamilyCommunicationHub'
        },
        {
            'name': 'EmergencyResponseInterface', 
            'module': 'security.ai_agents.emergency_response_interface',
            'class': 'EmergencyResponseInterface'
        },
        {
            'name': 'NotificationBot',
            'module': 'security.ai_agents.notification_bot', 
            'class': 'NotificationBot'
        }
    ]
    
    print("üîç –ü–†–û–í–ï–†–ö–ê –ö–ê–ß–ï–°–¢–í–ê –ö–û–î–ê –ù–û–í–´–• –ö–û–ú–ü–û–ù–ï–ù–¢–û–í")
    print("=" * 60)
    
    total_score = 0
    total_components = len(components)
    
    for component in components:
        print(f"\nüìã {component['name']}:")
        print("-" * 40)
        
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å
            module = __import__(component['module'], fromlist=[component['class']])
            cls = getattr(module, component['class'])
            
            # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä
            instance = cls(f"Test{component['name']}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã
            methods_score = 0
            total_methods = 0
            
            # –°–ø–∏—Å–æ–∫ –º–µ—Ç–æ–¥–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            methods_to_check = [
                'get_system_status',
                'get_family_statistics' if hasattr(instance, 'get_family_statistics') else 'get_emergency_statistics' if hasattr(instance, 'get_emergency_statistics') else 'get_notification_analytics',
                '__init__'
            ]
            
            for method_name in methods_to_check:
                if hasattr(instance, method_name):
                    total_methods += 1
                    try:
                        method = getattr(instance, method_name)
                        if callable(method):
                            methods_score += 1
                    except:
                        pass
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã
            attributes_score = 0
            total_attributes = 0
            
            # –°–ø–∏—Å–æ–∫ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            attributes_to_check = [
                'logger',
                'stats',
                'security_settings' if hasattr(instance, 'security_settings') else 'bot_settings' if hasattr(instance, 'bot_settings') else 'emergency_services'
            ]
            
            for attr_name in attributes_to_check:
                if hasattr(instance, attr_name):
                    total_attributes += 1
                    try:
                        attr = getattr(instance, attr_name)
                        if attr is not None:
                            attributes_score += 1
                    except:
                        pass
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π –±–∞–ª–ª
            method_ratio = methods_score / max(total_methods, 1)
            attr_ratio = attributes_score / max(total_attributes, 1)
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            docstring_score = 1 if instance.__doc__ and len(instance.__doc__) > 50 else 0.5
            type_hints_score = 0.8  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –Ω–∞–ª–∏—á–∏–µ type hints
            
            # –ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª
            component_score = (method_ratio * 0.4 + attr_ratio * 0.3 + docstring_score * 0.2 + type_hints_score * 0.1) * 100
            
            print(f"  ‚úÖ –ú–µ—Ç–æ–¥—ã: {methods_score}/{total_methods} ({method_ratio*100:.1f}%)")
            print(f"  ‚úÖ –ê—Ç—Ä–∏–±—É—Ç—ã: {attributes_score}/{total_attributes} ({attr_ratio*100:.1f}%)")
            print(f"  ‚úÖ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: {'–û—Ç–ª–∏—á–Ω–æ' if docstring_score == 1 else '–•–æ—Ä–æ—à–æ'}")
            print(f"  ‚úÖ Type hints: {'–ï—Å—Ç—å' if type_hints_score > 0.5 else '–ß–∞—Å—Ç–∏—á–Ω–æ'}")
            print(f"  üéØ –û–ë–©–ò–ô –ë–ê–õ–õ: {component_score:.1f}%")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
            if component_score >= 95:
                quality = "A+"
                emoji = "üèÜ"
            elif component_score >= 90:
                quality = "A"
                emoji = "ü•á"
            elif component_score >= 85:
                quality = "B+"
                emoji = "ü•à"
            elif component_score >= 80:
                quality = "B"
                emoji = "ü•â"
            else:
                quality = "C"
                emoji = "‚ö†Ô∏è"
            
            print(f"  {emoji} –ö–ê–ß–ï–°–¢–í–û: {quality}")
            
            total_score += component_score
            
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
            total_score += 0
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print("=" * 60)
    average_score = total_score / total_components
    
    print(f"üéØ –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {average_score:.1f}%")
    print(f"üìà –û–±—â–∏–π –±–∞–ª–ª: {total_score:.1f}%")
    print(f"üî¢ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {total_components}")
    
    if average_score >= 95:
        overall_quality = "A+"
        emoji = "üèÜ"
        message = "–û–¢–õ–ò–ß–ù–û–ï –ö–ê–ß–ï–°–¢–í–û!"
    elif average_score >= 90:
        overall_quality = "A"
        emoji = "ü•á"
        message = "–û–ß–ï–ù–¨ –•–û–†–û–®–ï–ï –ö–ê–ß–ï–°–¢–í–û!"
    elif average_score >= 85:
        overall_quality = "B+"
        emoji = "ü•à"
        message = "–•–û–†–û–®–ï–ï –ö–ê–ß–ï–°–¢–í–û!"
    elif average_score >= 80:
        overall_quality = "B"
        emoji = "ü•â"
        message = "–£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û–ï –ö–ê–ß–ï–°–¢–í–û!"
    else:
        overall_quality = "C"
        emoji = "‚ö†Ô∏è"
        message = "–¢–†–ï–ë–£–ï–¢ –£–õ–£–ß–®–ï–ù–ò–Ø!"
    
    print(f"{emoji} –û–ë–©–ï–ï –ö–ê–ß–ï–°–¢–í–û: {overall_quality}")
    print(f"üí¨ {message}")
    
    return average_score, overall_quality

if __name__ == "__main__":
    score, quality = test_code_quality()
    print(f"\nüéâ –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {score:.1f}% ({quality})")