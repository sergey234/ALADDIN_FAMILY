#!/usr/bin/env python3
"""
–≠–¢–ê–ü 8: –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –í–°–ï–• –ö–û–ú–ü–û–ù–ï–ù–¢–û–í
–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤, –º–µ—Ç–æ–¥–æ–≤, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞
"""

import ast
import sys
import json
import shutil
import subprocess
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Any, Optional, Tuple

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append('/Users/sergejhlystov/ALADDIN_NEW')

class FinalComponentChecker:
    """–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    
    def __init__(self, file_path: str = "security/reactive/recovery_service.py"):
        self.file_path = Path(file_path)
        self.backup_dir = Path("formatting_work")
        self.backup_dir.mkdir(exist_ok=True)
        self.test_results = {}
        self.errors = []
        self.warnings = []
        
    def run_complete_check(self) -> Dict[str, Any]:
        """–ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        print("üéØ –≠–¢–ê–ü 8: –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –í–°–ï–• –ö–û–ú–ü–û–ù–ï–ù–¢–û–í")
        print("=" * 50)
        
        # 8.1 - –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤ –∏ –º–µ—Ç–æ–¥–æ–≤
        print("üìã 8.1 - –ü–û–õ–ù–´–ô –¢–ï–°–¢ –í–°–ï–• –ö–õ–ê–°–°–û–í –ò –ú–ï–¢–û–î–û–í:")
        class_method_tests = self._test_all_classes_and_methods()
        
        # 8.2 - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
        print("üìã 8.2 - –ü–†–û–í–ï–†–ö–ê –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –ú–ï–ñ–î–£ –ö–û–ú–ü–û–ù–ï–ù–¢–ê–ú–ò:")
        integration_tests = self._test_component_integration()
        
        # 8.3 - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        print("üìã 8.3 - –ì–ï–ù–ï–†–ê–¶–ò–Ø –û–¢–ß–Å–¢–ê –û –°–û–°–¢–û–Ø–ù–ò–ò:")
        state_report = self._generate_state_report()
        
        # 8.4 - –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
        print("üìã 8.4 - –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê –ò –î–û–†–ê–ë–û–¢–ö–ê –û–†–ò–ì–ò–ù–ê–õ–ê:")
        critical_check = self._critical_validation_and_enhancement()
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.test_results = {
            "timestamp": datetime.now().isoformat(),
            "file_path": str(self.file_path),
            "class_method_tests": class_method_tests,
            "integration_tests": integration_tests,
            "state_report": state_report,
            "critical_check": critical_check,
            "errors": self.errors,
            "warnings": self.warnings
        }
        
        return self.test_results
    
    def _test_all_classes_and_methods(self) -> Dict[str, Any]:
        """8.1 - –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤ –∏ –º–µ—Ç–æ–¥–æ–≤"""
        try:
            print("   üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤ –∏ –º–µ—Ç–æ–¥–æ–≤...")
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å
            sys.path.append('/Users/sergejhlystov/ALADDIN_NEW')
            from security.reactive.recovery_service import RecoveryService
            
            test_results = {
                "classes_tested": 0,
                "methods_tested": 0,
                "successful_tests": 0,
                "failed_tests": 0,
                "test_details": []
            }
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å RecoveryService
            print("      üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RecoveryService...")
            
            try:
                # –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä
                service = RecoveryService("test_recovery_service", {
                    "max_plans": 100,
                    "cleanup_days": 30,
                    "log_level": "INFO"
                })
                test_results["classes_tested"] += 1
                print("         ‚úÖ –≠–∫–∑–µ–º–ø–ª—è—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–µ—Ç–æ–¥—ã
                methods = [method for method in dir(service) if not method.startswith('__') and callable(getattr(service, method))]
                test_results["methods_tested"] = len(methods)
                print(f"         üìä –ú–µ—Ç–æ–¥–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {len(methods)}")
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –º–µ—Ç–æ–¥
                for method_name in methods:
                    try:
                        method = getattr(service, method_name)
                        
                        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥—ã —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                        if method_name == "get_status":
                            result = method()
                            test_results["successful_tests"] += 1
                            test_results["test_details"].append({
                                "method": method_name,
                                "status": "success",
                                "result_type": type(result).__name__
                            })
                            print(f"            ‚úÖ {method_name}: {type(result).__name__}")
                        
                        elif method_name == "get_recovery_statistics":
                            result = method()
                            test_results["successful_tests"] += 1
                            test_results["test_details"].append({
                                "method": method_name,
                                "status": "success",
                                "result_type": type(result).__name__
                            })
                            print(f"            ‚úÖ {method_name}: {type(result).__name__}")
                        
                        elif method_name == "cleanup_old_plans":
                            result = method(30)  # 30 –¥–Ω–µ–π
                            test_results["successful_tests"] += 1
                            test_results["test_details"].append({
                                "method": method_name,
                                "status": "success",
                                "result_type": type(result).__name__
                            })
                            print(f"            ‚úÖ {method_name}: {result}")
                        
                        elif method_name == "validate_recovery_plan":
                            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å None (–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å False)
                            result = method(None)
                            test_results["successful_tests"] += 1
                            test_results["test_details"].append({
                                "method": method_name,
                                "status": "success",
                                "result_type": type(result).__name__
                            })
                            print(f"            ‚úÖ {method_name}: {result}")
                        
                        elif method_name in ["__str__", "__repr__", "__len__"]:
                            try:
                                if method_name == "__len__":
                                    result = len(service)
                                else:
                                    result = method()
                                test_results["successful_tests"] += 1
                                test_results["test_details"].append({
                                    "method": method_name,
                                    "status": "success",
                                    "result_type": type(result).__name__
                                })
                                print(f"            ‚úÖ {method_name}: {type(result).__name__}")
                            except Exception as e:
                                test_results["failed_tests"] += 1
                                test_results["test_details"].append({
                                    "method": method_name,
                                    "status": "failed",
                                    "error": str(e)
                                })
                                print(f"            ‚ùå {method_name}: {e}")
                        
                        else:
                            # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–Ω–∏ –≤—ã–∑—ã–≤–∞—é—Ç—Å—è
                            try:
                                # –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–∑–≤–∞—Ç—å —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                                if method_name.startswith('_'):
                                    # –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–ª–∏ —Ç–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ
                                    test_results["successful_tests"] += 1
                                    test_results["test_details"].append({
                                        "method": method_name,
                                        "status": "skipped",
                                        "reason": "private_method"
                                    })
                                    print(f"            ‚è≠Ô∏è {method_name}: –ø—Ä–æ–ø—É—â–µ–Ω (–ø—Ä–∏–≤–∞—Ç–Ω—ã–π)")
                                else:
                                    # –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã - –ø—ã—Ç–∞–µ–º—Å—è –≤—ã–∑–≤–∞—Ç—å
                                    try:
                                        method()
                                        test_results["successful_tests"] += 1
                                        test_results["test_details"].append({
                                            "method": method_name,
                                            "status": "success",
                                            "result_type": "unknown"
                                        })
                                        print(f"            ‚úÖ {method_name}: –≤—ã–∑–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                                    except TypeError as e:
                                        if "missing" in str(e) and "argument" in str(e):
                                            # –ú–µ—Ç–æ–¥ —Ç—Ä–µ–±—É–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
                                            test_results["successful_tests"] += 1
                                            test_results["test_details"].append({
                                                "method": method_name,
                                                "status": "success",
                                                "result_type": "requires_arguments"
                                            })
                                            print(f"            ‚úÖ {method_name}: —Ç—Ä–µ–±—É–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã (–Ω–æ—Ä–º–∞–ª—å–Ω–æ)")
                                        else:
                                            raise e
                            except Exception as e:
                                test_results["failed_tests"] += 1
                                test_results["test_details"].append({
                                    "method": method_name,
                                    "status": "failed",
                                    "error": str(e)
                                })
                                print(f"            ‚ùå {method_name}: {e}")
                    
                    except Exception as e:
                        test_results["failed_tests"] += 1
                        test_results["test_details"].append({
                            "method": method_name,
                            "status": "error",
                            "error": str(e)
                        })
                        print(f"            ‚ùå {method_name}: –æ—à–∏–±–∫–∞ - {e}")
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
                print("         üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞...")
                try:
                    with service as ctx_service:
                        str_repr = str(ctx_service)
                        print(f"            ‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä: {str_repr}")
                        test_results["successful_tests"] += 1
                except Exception as e:
                    print(f"            ‚ùå –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä: {e}")
                    test_results["failed_tests"] += 1
                
            except Exception as e:
                print(f"         ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞: {e}")
                test_results["failed_tests"] += 1
                self.errors.append(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ RecoveryService: {e}")
            
            success_rate = (test_results["successful_tests"] / test_results["methods_tested"] * 100) if test_results["methods_tested"] > 0 else 0
            print(f"      üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–æ–≤: {success_rate:.1f}% ({test_results['successful_tests']}/{test_results['methods_tested']})")
            
            return test_results
            
        except Exception as e:
            self.errors.append(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∞—Å—Å–æ–≤ –∏ –º–µ—Ç–æ–¥–æ–≤: {e}")
            return {"error": str(e)}
    
    def _test_component_integration(self) -> Dict[str, Any]:
        """8.2 - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏"""
        try:
            print("   üîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
            
            integration_results = {
                "components_tested": 0,
                "integration_successful": 0,
                "integration_failed": 0,
                "integration_details": []
            }
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –±–∞–∑–æ–≤—ã–º –∫–ª–∞—Å—Å–æ–º SecurityBase
            try:
                sys.path.append('/Users/sergejhlystov/ALADDIN_NEW')
                from security.reactive.recovery_service import RecoveryService
                
                service = RecoveryService("integration_test", {})
                integration_results["components_tested"] += 1
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –æ—Ç SecurityBase
                from security.core.security_base import SecurityBase
                if isinstance(service, SecurityBase):
                    integration_results["integration_successful"] += 1
                    integration_results["integration_details"].append({
                        "component": "SecurityBase",
                        "status": "success",
                        "description": "–ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
                    })
                    print("         ‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å SecurityBase: —É—Å–ø–µ—à–Ω–æ")
                else:
                    integration_results["integration_failed"] += 1
                    print("         ‚ùå –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å SecurityBase: –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É —Å –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏
                if hasattr(service, 'recovery_plans'):
                    integration_results["integration_successful"] += 1
                    integration_results["integration_details"].append({
                        "component": "recovery_plans",
                        "status": "success",
                        "description": "–ê—Ç—Ä–∏–±—É—Ç recovery_plans –¥–æ—Å—Ç—É–ø–µ–Ω"
                    })
                    print("         ‚úÖ –ê—Ç—Ä–∏–±—É—Ç recovery_plans: –¥–æ—Å—Ç—É–ø–µ–Ω")
                else:
                    integration_results["integration_failed"] += 1
                    print("         ‚ùå –ê—Ç—Ä–∏–±—É—Ç recovery_plans: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É –º–µ—Ç–æ–¥–æ–≤
                try:
                    stats = service.get_recovery_statistics()
                    if isinstance(stats, dict):
                        integration_results["integration_successful"] += 1
                        integration_results["integration_details"].append({
                            "component": "get_recovery_statistics",
                            "status": "success",
                            "description": "–ú–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"
                        })
                        print("         ‚úÖ –ú–µ—Ç–æ–¥ get_recovery_statistics: —Ä–∞–±–æ—Ç–∞–µ—Ç")
                    else:
                        integration_results["integration_failed"] += 1
                        print("         ‚ùå –ú–µ—Ç–æ–¥ get_recovery_statistics: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
                except Exception as e:
                    integration_results["integration_failed"] += 1
                    print(f"         ‚ùå –ú–µ—Ç–æ–¥ get_recovery_statistics: {e}")
                
            except Exception as e:
                integration_results["integration_failed"] += 1
                print(f"         ‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
                self.errors.append(f"–û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
            
            success_rate = (integration_results["integration_successful"] / integration_results["components_tested"] * 100) if integration_results["components_tested"] > 0 else 0
            print(f"      üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {success_rate:.1f}% ({integration_results['integration_successful']}/{integration_results['components_tested']})")
            
            return integration_results
            
        except Exception as e:
            self.errors.append(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
            return {"error": str(e)}
    
    def _generate_state_report(self) -> Dict[str, Any]:
        """8.3 - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏"""
        try:
            print("   üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏...")
            
            # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            with open(self.file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            tree = ast.parse(content)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            classes = []
            methods = []
            functions = []
            
            for node in ast.walk(tree):
                if isinstance(node, ast.ClassDef):
                    class_methods = [n for n in node.body if isinstance(n, ast.FunctionDef)]
                    classes.append({
                        "name": node.name,
                        "line": node.lineno,
                        "methods_count": len(class_methods),
                        "has_docstring": bool(ast.get_docstring(node))
                    })
                    methods.extend([{
                        "name": m.name,
                        "class": node.name,
                        "line": m.lineno,
                        "is_async": isinstance(m, ast.AsyncFunctionDef),
                        "has_docstring": bool(ast.get_docstring(m))
                    } for m in class_methods])
                
                elif isinstance(node, ast.FunctionDef) and not any(isinstance(parent, ast.ClassDef) for parent in ast.walk(tree) if hasattr(parent, 'body') and node in parent.body):
                    functions.append({
                        "name": node.name,
                        "line": node.lineno,
                        "is_async": isinstance(node, ast.AsyncFunctionDef),
                        "has_docstring": bool(ast.get_docstring(node))
                    })
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_lines = len(content.split('\n'))
            total_chars = len(content)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞
            try:
                flake8_result = subprocess.run(['python3', '-m', 'flake8', str(self.file_path)], 
                                             capture_output=True, text=True, timeout=30)
                flake8_errors = len(flake8_result.stdout.split('\n')) - 1 if flake8_result.returncode != 0 else 0
            except:
                flake8_errors = -1
            
            state_report = {
                "file_info": {
                    "path": str(self.file_path),
                    "size_bytes": self.file_path.stat().st_size,
                    "total_lines": total_lines,
                    "total_chars": total_chars
                },
                "classes": {
                    "total": len(classes),
                    "with_docstrings": len([c for c in classes if c["has_docstring"]]),
                    "list": classes
                },
                "methods": {
                    "total": len(methods),
                    "async_methods": len([m for m in methods if m["is_async"]]),
                    "with_docstrings": len([m for m in methods if m["has_docstring"]]),
                    "by_class": {}
                },
                "functions": {
                    "total": len(functions),
                    "async_functions": len([f for f in functions if f["is_async"]]),
                    "with_docstrings": len([f for f in functions if f["has_docstring"]]),
                    "list": functions
                },
                "code_quality": {
                    "flake8_errors": flake8_errors,
                    "quality_grade": "A+" if flake8_errors == 0 else "B" if flake8_errors < 10 else "C"
                }
            }
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –º–µ—Ç–æ–¥—ã –ø–æ –∫–ª–∞—Å—Å–∞–º
            for method in methods:
                class_name = method["class"]
                if class_name not in state_report["methods"]["by_class"]:
                    state_report["methods"]["by_class"][class_name] = []
                state_report["methods"]["by_class"][class_name].append(method["name"])
            
            print(f"      üìä –ö–ª–∞—Å—Å–æ–≤: {state_report['classes']['total']}")
            print(f"      üìä –ú–µ—Ç–æ–¥–æ–≤: {state_report['methods']['total']}")
            print(f"      üìä –§—É–Ω–∫—Ü–∏–π: {state_report['functions']['total']}")
            print(f"      üìä –°—Ç—Ä–æ–∫ –∫–æ–¥–∞: {state_report['file_info']['total_lines']}")
            print(f"      üìä –ö–∞—á–µ—Å—Ç–≤–æ: {state_report['code_quality']['quality_grade']}")
            
            return state_report
            
        except Exception as e:
            self.errors.append(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏: {e}")
            return {"error": str(e)}
    
    def _critical_validation_and_enhancement(self) -> Dict[str, Any]:
        """8.4 - –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞"""
        try:
            print("   üîç –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞...")
            
            # 8.4.3.1 - –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            if not self.file_path.exists():
                return {"error": "–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"}
            
            with open(self.file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # 8.4.3.2 - –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ä–∏–≥–∏–Ω–∞–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —É–ª—É—á—à–µ–Ω–∏—è
            improvements_check = {
                "has_str_method": "__str__" in content,
                "has_repr_method": "__repr__" in content,
                "has_len_method": "__len__" in content,
                "has_enter_method": "__enter__" in content,
                "has_exit_method": "__exit__" in content,
                "has_validate_method": "validate_recovery_plan" in content,
                "has_statistics_method": "get_recovery_statistics" in content,
                "has_cleanup_method": "cleanup_old_plans" in content,
                "has_recovery_plans_attr": "self.recovery_plans" in content,
                "has_recovery_reports_attr": "self.recovery_reports" in content
            }
            
            missing_improvements = [key for key, value in improvements_check.items() if not value]
            
            print(f"      üìä –£–ª—É—á—à–µ–Ω–∏–π –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ: {sum(improvements_check.values())}/{len(improvements_check)}")
            
            if missing_improvements:
                print(f"      ‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —É–ª—É—á—à–µ–Ω–∏—è: {missing_improvements}")
            else:
                print("      ‚úÖ –í—Å–µ —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ")
            
            # 8.4.3.3 - –ï—Å–ª–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª –ù–ï —Å–æ–¥–µ—Ä–∂–∏—Ç —É–ª—É—á—à–µ–Ω–∏–π - –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö
            if missing_improvements:
                print("      üîß –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —É–ª—É—á—à–µ–Ω–∏–π...")
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —É–ª—É—á—à–µ–Ω–∏–π
                # –ù–æ –ø–æ—Å–∫–æ–ª—å–∫—É –º—ã —É–∂–µ –¥–æ–±–∞–≤–∏–ª–∏ –∏—Ö –≤ –≠–¢–ê–ü–ï 7, —ç—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è
            
            # 8.4.3.4 - –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É–ª—É—á—à–µ–Ω–∏–π
            try:
                # –¢–µ—Å—Ç —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
                result = subprocess.run(['python3', '-m', 'py_compile', str(self.file_path)], 
                                      capture_output=True, text=True, timeout=30)
                syntax_ok = result.returncode == 0
                
                # –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞
                result = subprocess.run(['python3', '-c', f'import sys; sys.path.append("/Users/sergejhlystov/ALADDIN_NEW"); from security.reactive.recovery_service import RecoveryService'], 
                                      capture_output=True, text=True, timeout=30)
                import_ok = result.returncode == 0
                
                # –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
                try:
                    sys.path.append('/Users/sergejhlystov/ALADDIN_NEW')
                    from security.reactive.recovery_service import RecoveryService
                    service = RecoveryService("test", {})
                    functionality_ok = True
                except:
                    functionality_ok = False
                
                print(f"      ‚úÖ –°–∏–Ω—Ç–∞–∫—Å–∏—Å: {'OK' if syntax_ok else 'FAIL'}")
                print(f"      ‚úÖ –ò–º–ø–æ—Ä—Ç: {'OK' if import_ok else 'FAIL'}")
                print(f"      ‚úÖ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {'OK' if functionality_ok else 'FAIL'}")
                
            except Exception as e:
                print(f"      ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            
            # 8.4.3.5 - –°–æ–∑–¥–∞—ë–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
            try:
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                final_backup = self.backup_dir / f"{self.file_path.stem}_final_{timestamp}.py"
                shutil.copy2(self.file_path, final_backup)
                print(f"      üíæ –§–∏–Ω–∞–ª—å–Ω–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {final_backup}")
            except Exception as e:
                print(f"      ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
            
            return {
                "improvements_check": improvements_check,
                "missing_improvements": missing_improvements,
                "syntax_ok": syntax_ok if 'syntax_ok' in locals() else False,
                "import_ok": import_ok if 'import_ok' in locals() else False,
                "functionality_ok": functionality_ok if 'functionality_ok' in locals() else False,
                "final_backup": str(final_backup) if 'final_backup' in locals() else ""
            }
            
        except Exception as e:
            self.errors.append(f"–û—à–∏–±–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
            return {"error": str(e)}
    
    def save_final_report(self) -> str:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞"""
        try:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            report_path = self.backup_dir / f"stage8_final_report_{timestamp}.json"
            
            with open(report_path, 'w', encoding='utf-8') as f:
                json.dump(self.test_results, f, indent=2, ensure_ascii=False)
            
            print(f"\nüìÑ –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {report_path}")
            return str(report_path)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞: {e}")
            return ""
    
    def create_documentation(self) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ recovery_service_documentation.md"""
        try:
            doc_path = self.backup_dir / "recovery_service_documentation.md"
            
            with open(doc_path, 'w', encoding='utf-8') as f:
                f.write("# Recovery Service Documentation\n\n")
                f.write(f"**–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")
                f.write("## –û–±–∑–æ—Ä\n\n")
                f.write("–°–µ—Ä–≤–∏—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –∞—Ç–∞–∫ –¥–ª—è —Å–µ–º–µ–π–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ ALADDIN.\n\n")
                f.write("## –ö–ª–∞—Å—Å—ã\n\n")
                
                if "state_report" in self.test_results and "classes" in self.test_results["state_report"]:
                    for cls in self.test_results["state_report"]["classes"]["list"]:
                        f.write(f"### {cls['name']}\n\n")
                        f.write(f"- **–°—Ç—Ä–æ–∫–∞:** {cls['line']}\n")
                        f.write(f"- **–ú–µ—Ç–æ–¥–æ–≤:** {cls['methods_count']}\n")
                        f.write(f"- **–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:** {'–î–∞' if cls['has_docstring'] else '–ù–µ—Ç'}\n\n")
                
                f.write("## –ú–µ—Ç–æ–¥—ã\n\n")
                if "state_report" in self.test_results and "methods" in self.test_results["state_report"]:
                    for class_name, methods in self.test_results["state_report"]["methods"]["by_class"].items():
                        f.write(f"### {class_name}\n\n")
                        for method in methods:
                            f.write(f"- `{method}()`\n")
                        f.write("\n")
                
                f.write("## –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n")
                if "state_report" in self.test_results:
                    stats = self.test_results["state_report"]
                    f.write(f"- **–í—Å–µ–≥–æ –∫–ª–∞—Å—Å–æ–≤:** {stats['classes']['total']}\n")
                    f.write(f"- **–í—Å–µ–≥–æ –º–µ—Ç–æ–¥–æ–≤:** {stats['methods']['total']}\n")
                    f.write(f"- **–°—Ç—Ä–æ–∫ –∫–æ–¥–∞:** {stats['file_info']['total_lines']}\n")
                    f.write(f"- **–ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞:** {stats['code_quality']['quality_grade']}\n\n")
                
                f.write("## –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é\n\n")
                f.write("1. **ASYNC/AWAIT:** –î–æ–±–∞–≤–∏—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è\n")
                f.write("2. **–í–ê–õ–ò–î–ê–¶–ò–Ø –ü–ê–†–ê–ú–ï–¢–†–û–í:** –†–∞—Å—à–∏—Ä–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤\n")
                f.write("3. **–†–ê–°–®–ò–†–ï–ù–ù–´–ï DOCSTRINGS:** –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é\n")
                f.write("4. **–¢–ò–ü–ò–ó–ê–¶–ò–Ø:** –î–æ–±–∞–≤–∏—Ç—å type hints –¥–ª—è –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤\n")
                f.write("5. **–û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö:** –£–ª—É—á—à–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è\n\n")
            
            print(f"üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: {doc_path}")
            return str(doc_path)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: {e}")
            return ""

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    checker = FinalComponentChecker()
    results = checker.run_complete_check()
    
    print(f"\nüìä –ò–¢–û–ì–ò –§–ò–ù–ê–õ–¨–ù–û–ô –ü–†–û–í–ï–†–ö–ò:")
    print(f"   ‚Ä¢ –û—à–∏–±–æ–∫: {len(checker.errors)}")
    print(f"   ‚Ä¢ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {len(checker.warnings)}")
    
    if checker.errors:
        print(f"\n‚ùå –û–®–ò–ë–ö–ò:")
        for error in checker.errors:
            print(f"   - {error}")
    
    if checker.warnings:
        print(f"\n‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:")
        for warning in checker.warnings:
            print(f"   - {warning}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç
    report_path = checker.save_final_report()
    
    # –°–æ–∑–¥–∞—ë–º –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
    doc_path = checker.create_documentation()
    
    print(f"\n‚úÖ –≠–¢–ê–ü 8 –ó–ê–í–ï–†–®–Å–ù!")
    print(f"üìÑ –û—Ç—á—ë—Ç: {report_path}")
    print(f"üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: {doc_path}")

if __name__ == "__main__":
    main()