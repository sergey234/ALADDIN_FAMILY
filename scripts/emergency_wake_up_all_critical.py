#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üö® –≠–ö–°–¢–†–ï–ù–ù–û–ï –ü–†–û–ë–£–ñ–î–ï–ù–ò–ï –í–°–ï–• –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –§–£–ù–ö–¶–ò–ô
=================================================

–ü—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ –≤—Å–µ—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ —Å–ø—è—â–µ–≥–æ —Ä–µ–∂–∏–º–∞
"""

import json
import os
from datetime import datetime

def emergency_wake_up_critical():
    """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
    
    print("üö® –≠–ö–°–¢–†–ï–ù–ù–û–ï –ü–†–û–ë–£–ñ–î–ï–ù–ò–ï –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –§–£–ù–ö–¶–ò–ô")
    print("=" * 50)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º SFM —Ä–µ–µ—Å—Ç—Ä
    sfm_path = "data/sfm/function_registry.json"
    
    if not os.path.exists(sfm_path):
        print(f"‚ùå –§–∞–π–ª {sfm_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    with open(sfm_path, 'r', encoding='utf-8') as f:
        data = json.load(f)
    
    functions = data.get('functions', {})
    total_functions = len(functions)
    
    print(f"üìä –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π: {total_functions}")
    
    # –ù–∞—Ö–æ–¥–∏–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
    critical_functions = []
    for func_id, func_data in functions.items():
        is_critical = func_data.get('is_critical', False)
        if is_critical:
            critical_functions.append(func_id)
    
    print(f"üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π: {len(critical_functions)}")
    
    # –ü—Ä–æ–±—É–∂–¥–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
    woken_up = 0
    for func_id in critical_functions:
        if func_id in functions:
            functions[func_id]['status'] = 'active'
            functions[func_id]['wake_time'] = datetime.now().isoformat()
            functions[func_id]['emergency_wake_up'] = True
            woken_up += 1
            print(f"‚úÖ {func_id} - –ø—Ä–æ–±—É–∂–¥–µ–Ω–∞")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ä–µ–µ—Å—Ç—Ä
    data['functions'] = functions
    data['last_updated'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    
    with open(sfm_path, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)
    
    print()
    print(f"üéØ –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print(f"   –ü—Ä–æ–±—É–∂–¥–µ–Ω–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π: {woken_up}")
    print(f"   SFM —Ä–µ–µ—Å—Ç—Ä –æ–±–Ω–æ–≤–ª–µ–Ω: {sfm_path}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    active_count = sum(1 for f in functions.values() if f.get('status') == 'active')
    sleeping_count = sum(1 for f in functions.values() if f.get('status') == 'sleeping')
    
    print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π: {active_count}")
    print(f"   –°–ø—è—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π: {sleeping_count}")
    
    return woken_up

if __name__ == "__main__":
    emergency_wake_up_critical()