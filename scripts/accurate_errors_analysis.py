#!/usr/bin/env python3
"""
–¢–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫ flake8 –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import subprocess
from pathlib import Path
from collections import defaultdict

def accurate_errors_analysis():
    """–¢–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫ flake8"""
    security_dir = Path("/Users/sergejhlystov/ALADDIN_NEW/security")
    
    print("üîç –¢–û–ß–ù–´–ô –ê–ù–ê–õ–ò–ó –û–®–ò–ë–û–ö FLAKE8")
    print("=" * 60)
    
    try:
        # –ö–æ–º–∞–Ω–¥–∞ flake8 —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è–º–∏
        cmd = [
            "python3", "-m", "flake8",
            "--max-line-length=120",
            "--exclude=*/backup*,*/test*,*/logs*,*/formatting_work*",
            str(security_dir)
        ]
        
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=120)
        
        if result.returncode == 0:
            print("‚úÖ –û—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
            return
        
        output = result.stdout
        error_lines = [line for line in output.split('\n') if line.strip()]
        
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–æ–∫ –ø–æ —Ñ–∞–π–ª–∞–º (—É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ)
        file_errors = defaultdict(list)
        for line in error_lines:
            if ':' in line:
                file_path = line.split(':')[0]
                file_errors[file_path].append(line)
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ—à–∏–±–æ–∫
        sorted_files = sorted(file_errors.items(), key=lambda x: len(x[1]), reverse=True)
        
        print(f"üìä –ù–ê–ô–î–ï–ù–û {len(error_lines)} –û–®–ò–ë–û–ö –í {len(file_errors)} –£–ù–ò–ö–ê–õ–¨–ù–´–• –§–ê–ô–õ–ê–•")
        print("=" * 60)
        
        # –ü–æ–∫–∞–∑ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏
        for i, (file_path, errors) in enumerate(sorted_files, 1):
            print(f"\n{i:3d}. {file_path}")
            print(f"     –û—à–∏–±–æ–∫: {len(errors)}")
            
            # –ü–æ–∫–∞–∑ –ø–µ—Ä–≤—ã—Ö 3 –æ—à–∏–±–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
            for error in errors[:3]:
                print(f"     ‚Ä¢ {error}")
            
            if len(errors) > 3:
                print(f"     ‚Ä¢ ... –∏ –µ—â–µ {len(errors) - 3} –æ—à–∏–±–æ–∫")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –æ—à–∏–±–æ–∫
        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –¢–ò–ü–ê–ú –û–®–ò–ë–û–ö:")
        error_types = defaultdict(int)
        for line in error_lines:
            if ':' in line and len(line.split(':')) >= 3:
                error_code = line.split(':')[2].strip().split()[0]
                error_types[error_code] += 1
        
        for error_type, count in sorted(error_types.items(), key=lambda x: x[1], reverse=True):
            print(f"  {error_type}: {count} –æ—à–∏–±–æ–∫")
        
        print(f"\nüéØ –ò–¢–û–ì–û: {len(error_lines)} –æ—à–∏–±–æ–∫ –≤ {len(file_errors)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
        print(f"\nüîç –ü–†–û–í–ï–†–ö–ê –ù–ê –î–£–ë–õ–ò–†–û–í–ê–ù–ò–ï:")
        file_counts = defaultdict(int)
        for line in error_lines:
            if ':' in line:
                file_path = line.split(':')[0]
                file_counts[file_path] += 1
        
        duplicates = {k: v for k, v in file_counts.items() if v > 1}
        if duplicates:
            print(f"  ‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Ñ–∞–π–ª—ã:")
            for file_path, count in duplicates.items():
                print(f"     {file_path}: {count} —Ä–∞–∑")
        else:
            print("  ‚úÖ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")

if __name__ == "__main__":
    accurate_errors_analysis()