#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç –∫–∞—á–µ—Å—Ç–≤–∞ ElderlyInterfaceManager
–°–æ–∑–¥–∞–Ω: 2024-09-05
–í–µ—Ä—Å–∏—è: 1.0.0
"""

import os
import sys
import json
import time
from datetime import datetime

def test_elderly_interface_quality():
    """–¢–µ—Å—Ç –∫–∞—á–µ—Å—Ç–≤–∞ ElderlyInterfaceManager"""
    print("üéØ –¢–ï–°–¢ –ö–ê–ß–ï–°–¢–í–ê ELDERLYINTERFACEMANAGER")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
    file_path = "security/ai_agents/elderly_interface_manager.py"
    if not os.path.exists(file_path):
        print("‚ùå –§–∞–π–ª ElderlyInterfaceManager –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    print("‚úÖ –§–∞–π–ª ElderlyInterfaceManager –Ω–∞–π–¥–µ–Ω")
    
    # –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–¥–∞
    lines = content.split('\n')
    total_lines = len(lines)
    code_lines = len([line for line in lines if line.strip() and not line.strip().startswith('#')])
    comment_lines = len([line for line in lines if line.strip().startswith('#')])
    docstring_lines = len([line for line in lines if '"""' in line or "'''" in line])
    
    print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–û–î–ê:")
    print(f"   üìÑ –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {total_lines}")
    print(f"   üíª –°—Ç—Ä–æ–∫ –∫–æ–¥–∞: {code_lines}")
    print(f"   üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {comment_lines}")
    print(f"   üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: {docstring_lines}")
    print(f"   üìà –ü–ª–æ—Ç–Ω–æ—Å—Ç—å –∫–æ–¥–∞: {(code_lines/total_lines)*100:.1f}%")
    
    # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã
    components = {
        "–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫": content.count("try:") + content.count("except") + content.count("raise"),
        "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è": content.count("config") + content.count("Config"),
        "–ö–ª–∞—Å—Å—ã": content.count("class "),
        "–í–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏": content.count("ElderlyAgeCategory") + content.count("age_category"),
        "AI –º–æ–¥–µ–ª–∏": content.count("ai_models") + content.count("AI"),
        "–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã": content.count("interface") + content.count("Interface"),
        "–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å": content.count("accessibility") + content.count("Accessibility"),
        "–°–µ–º–µ–π–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è": content.count("family") + content.count("Family"),
        "–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã": content.count("emergency") + content.count("Emergency"),
        "–ì–æ–ª–æ—Å–æ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ": content.count("voice") + content.count("Voice"),
        "–û–±—É—á–∞—é—â–∏–µ –º–æ–¥—É–ª–∏": content.count("learning") + content.count("Learning"),
        "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥": content.count("monitor") + content.count("Monitor"),
        "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è": content.count("notification") + content.count("Notification"),
        "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞": content.count("statistics") + content.count("Statistics"),
        "–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ": content.count("logger") + content.count("logging"),
        "–ú–µ—Ç–æ–¥—ã": content.count("def "),
        "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è": content.count('"""') + content.count("'''"),
        "–ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è": content.count("Enum"),
        "–î–∞—Ç–∞–∫–ª–∞—Å—Å—ã": content.count("@dataclass"),
        "–¢–∏–ø–∏–∑–∞—Ü–∏—è": content.count(": ") + content.count("-> ")
    }
    
    print(f"\nüîß –ö–û–ú–ü–û–ù–ï–ù–¢–´ –°–ò–°–¢–ï–ú–´:")
    for component, count in components.items():
        print(f"   {component}: {count}")
    
    # –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã
    architecture_checks = {
        "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è": docstring_lines >= 20,
        "–†–∞—Å—à–∏—Ä—è–µ–º–æ—Å—Ç—å": "class " in content and "def " in content,
        "DRY –ø—Ä–∏–Ω—Ü–∏–ø": content.count("def _") >= 8,
        "SOLID –ø—Ä–∏–Ω—Ü–∏–ø—ã": "class " in content and "def " in content and "Enum" in content,
        "–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ": "logger" in content and "logging" in content,
        "–ú–æ–¥—É–ª—å–Ω–æ—Å—Ç—å": "import " in content and "from " in content,
        "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è": "config" in content.lower(),
        "–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫": "try:" in content and "except" in content
    }
    
    print(f"\nüèóÔ∏è –ê–†–•–ò–¢–ï–ö–¢–£–†–ù–´–ï –ü–†–ò–ù–¶–ò–ü–´:")
    for principle, passed in architecture_checks.items():
        status = "‚úÖ –ü–†–û–ô–î–ï–ù–û" if passed else "‚ùå –ù–ï –ü–†–û–ô–î–ï–ù–û"
        print(f"   {principle}: {status}")
    
    # –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
    functionality_checks = {
        "–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤": "validate" in content.lower() or "check" in content.lower(),
        "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö": "save" in content.lower() or "store" in content.lower(),
        "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫": "generate" in content.lower(),
        "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤": "interface" in content.lower(),
        "–í–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏": "age_category" in content,
        "–ì–æ–ª–æ—Å–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã": "voice" in content.lower(),
        "–°–µ–º–µ–π–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è": "family" in content.lower(),
        "–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã": "emergency" in content.lower(),
        "AI –∞–Ω–∞–ª–∏–∑": "ai_models" in content,
        "–û–±—É—á–∞—é—â–∏–µ –º–æ–¥—É–ª–∏": "learning" in content.lower(),
        "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–≤–µ–¥–µ–Ω–∏—è": "monitor" in content.lower(),
        "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è": "notification" in content.lower(),
        "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞": "statistics" in content.lower(),
        "–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å": "accessibility" in content.lower(),
        "–®–∞–±–ª–æ–Ω—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤": "template" in content.lower(),
        "–ü—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π": "profile" in content.lower(),
        "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞": "settings" in content.lower(),
        "–§—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏": "accessibility" in content.lower()
    }
    
    print(f"\n‚öôÔ∏è –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–¨:")
    for feature, implemented in functionality_checks.items():
        status = "‚úÖ –†–ï–ê–õ–ò–ó–û–í–ê–ù–û" if implemented else "‚ùå –ù–ï –†–ï–ê–õ–ò–ó–û–í–ê–ù–û"
        print(f"   {feature}: {status}")
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
    security_checks = {
        "–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö": "encrypt" in content.lower() or "crypt" in content.lower(),
        "–ê—É–¥–∏—Ç –¥–µ–π—Å—Ç–≤–∏–π": "audit" in content.lower() or "log" in content.lower(),
        "–ö–æ–Ω—Ç—Ä–æ–ª—å –¥–æ—Å—Ç—É–ø–∞": "access" in content.lower() or "permission" in content.lower(),
        "–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö": "privacy" in content.lower() or "confidential" in content.lower(),
        "–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ": "logger" in content and "error" in content.lower(),
        "–í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö": "validate" in content.lower() or "check" in content.lower(),
        "–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫": "try:" in content and "except" in content,
        "–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤": "auth" in content.lower() or "authenticate" in content.lower()
    }
    
    print(f"\nÔøΩÔøΩ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨:")
    for security, implemented in security_checks.items():
        status = "‚úÖ –†–ï–ê–õ–ò–ó–û–í–ê–ù–û" if implemented else "‚ùå –ù–ï –†–ï–ê–õ–ò–ó–û–í–ê–ù–û"
        print(f"   {security}: {status}")
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    test_checks = {
        "–°–ø—è—â–∏–π —Ä–µ–∂–∏–º": os.path.exists("scripts/put_elderly_interface_to_sleep.py"),
        "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤": os.path.exists("scripts/test_elderly_interface_simple.py"),
        "Unit —Ç–µ—Å—Ç—ã": os.path.exists("scripts/test_elderly_interface_simple.py"),
        "–¢–µ—Å—Ç –∫–∞—á–µ—Å—Ç–≤–∞": os.path.exists("scripts/test_elderly_interface_quality.py"),
        "–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç": os.path.exists("scripts/test_elderly_interface_simple.py"),
        "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç": os.path.exists("scripts/test_elderly_interface_integration.py"),
        "–ü–æ–∫—Ä—ã—Ç–∏–µ –∫–æ–¥–∞": code_lines >= 500
    }
    
    print(f"\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï:")
    for test, exists in test_checks.items():
        status = "‚úÖ –ï–°–¢–¨" if exists else "‚ùå –ù–ï–¢"
        print(f"   {test}: {status}")
    
    # –†–∞—Å—á–µ—Ç –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
    architecture_score = sum(architecture_checks.values()) / len(architecture_checks) * 25
    functionality_score = sum(functionality_checks.values()) / len(functionality_checks) * 35
    security_score = sum(security_checks.values()) / len(security_checks) * 25
    test_score = sum(test_checks.values()) / len(test_checks) * 15
    
    total_score = architecture_score + functionality_score + security_score + test_score
    
    print(f"\nüèÜ –û–¶–ï–ù–ö–ê –ö–ê–ß–ï–°–¢–í–ê: {total_score:.1f}/100")
    
    if total_score >= 95:
        quality_grade = "A+ (–û–¢–õ–ò–ß–ù–û)"
    elif total_score >= 90:
        quality_grade = "A (–û–ß–ï–ù–¨ –•–û–†–û–®–û)"
    elif total_score >= 80:
        quality_grade = "B (–•–û–†–û–®–û)"
    elif total_score >= 70:
        quality_grade = "C (–£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û)"
    else:
        quality_grade = "D (–ù–ï–£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û)"
    
    print(f"‚úÖ –ö–ê–ß–ï–°–¢–í–û: {quality_grade}")
    
    # –ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –±–∞–ª–ª–æ–≤
    missing_points = 100 - total_score
    print(f"\nüìä –ê–ù–ê–õ–ò–ó –ù–ï–î–û–°–¢–ê–Æ–©–ò–• –ë–ê–õ–õ–û–í:")
    print(f"   üéØ –¢–µ–∫—É—â–∏–π –±–∞–ª–ª: {total_score:.1f}")
    print(f"   üéØ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª: 100")
    print(f"   üéØ –ù–µ–¥–æ—Å—Ç–∞–µ—Ç –±–∞–ª–ª–æ–≤: {missing_points:.1f}")
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    report_data = {
        "timestamp": datetime.now().isoformat(),
        "file": file_path,
        "total_lines": total_lines,
        "code_lines": code_lines,
        "comment_lines": comment_lines,
        "docstring_lines": docstring_lines,
        "code_density": (code_lines/total_lines)*100,
        "components": components,
        "architecture_score": architecture_score,
        "functionality_score": functionality_score,
        "security_score": security_score,
        "test_score": test_score,
        "total_score": total_score,
        "quality_grade": quality_grade,
        "missing_points": missing_points
    }
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
    os.makedirs("data/quality_reports", exist_ok=True)
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    report_file = f"data/quality_reports/elderly_interface_quality_test_{int(time.time())}.json"
    with open(report_file, 'w', encoding='utf-8') as f:
        json.dump(report_data, f, ensure_ascii=False, indent=2)
    
    print(f"\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
    
    if total_score >= 95:
        print(f"\nüéâ ELDERLYINTERFACEMANAGER –°–û–û–¢–í–ï–¢–°–¢–í–£–ï–¢ –°–¢–ê–ù–î–ê–†–¢–ê–ú A+ –ö–ê–ß–ï–°–¢–í–ê!")
        return True
    else:
        print(f"\n‚ö†Ô∏è ELDERLYINTERFACEMANAGER –¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò –î–õ–Ø –î–û–°–¢–ò–ñ–ï–ù–ò–Ø A+ –ö–ê–ß–ï–°–¢–í–ê!")
        return False

if __name__ == "__main__":
    success = test_elderly_interface_quality()
    sys.exit(0 if success else 1)
