#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Elasticsearch Simulator
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –ø–æ –ª–æ–≥–∞–º

–ê–≤—Ç–æ—Ä: ALADDIN Security Team
–í–µ—Ä—Å–∏—è: 1.0
–î–∞—Ç–∞: 2025-09-08
"""

import sys
import os
import time
import requests
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from elasticsearch_simulator import ElasticsearchSimulator, LogLevel, LogEntry


def test_elasticsearch_simulator():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞ Elasticsearch"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Elasticsearch Simulator")
    print("=" * 50)
    
    try:
        # 1. –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞
        print("1. –°–æ–∑–¥–∞–Ω–∏–µ Elasticsearch Simulator...")
        es = ElasticsearchSimulator()
        print("‚úÖ –°–∏–º—É–ª—è—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω")
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        print("2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
        stats = es.get_statistics()
        print(f"   –í—Å–µ–≥–æ –ª–æ–≥–æ–≤: {stats['total_logs']}")
        print(f"   –ò–Ω–¥–µ–∫—Å–æ–≤: {len(stats['indices'])}")
        print(f"   –ü–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['search_queries']}")
        
        # 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞
        print("3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞...")
        
        # –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É
        results = es.search("security", limit=5)
        print(f"   –ü–æ–∏—Å–∫ 'security': {results['hits']} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        
        # –ü–æ–∏—Å–∫ –ø–æ —É—Ä–æ–≤–Ω—é
        results = es.search("", level=LogLevel.ERROR, limit=5)
        print(f"   –ü–æ–∏—Å–∫ –æ—à–∏–±–æ–∫: {results['hits']} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        
        # –ü–æ–∏—Å–∫ –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É
        results = es.search("", component="Security", limit=5)
        print(f"   –ü–æ–∏—Å–∫ –ø–æ Security: {results['hits']} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        
        # 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
        print("4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏...")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ª–æ–≥–∞
        new_log = LogEntry(
            timestamp=datetime.now(),
            level=LogLevel.INFO,
            component="TestComponent",
            message="–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏",
            metadata={"test": True, "value": 123}
        )
        
        success = es.index_log(new_log)
        if success:
            print("‚úÖ –ù–æ–≤—ã–π –ª–æ–≥ –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –ª–æ–≥–∞")
        
        # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
        print("5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏...")
        stats_after = es.get_statistics()
        print(f"   –í—Å–µ–≥–æ –ª–æ–≥–æ–≤ –ø–æ—Å–ª–µ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏: {stats_after['total_logs']}")
        
        # 6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–π –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
        print("6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–π –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏...")
        
        bulk_logs = []
        for i in range(5):
            log = LogEntry(
                timestamp=datetime.now(),
                level=LogLevel.INFO,
                component=f"BulkComponent_{i}",
                message=f"–ú–∞—Å—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {i}",
                metadata={"bulk": True, "index": i}
            )
            bulk_logs.append(log)
        
        bulk_result = es.bulk_index(bulk_logs)
        print(f"   –ú–∞—Å—Å–æ–≤–∞—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è: {bulk_result['success_count']} —É—Å–ø–µ—à–Ω–æ, {bulk_result['error_count']} –æ—à–∏–±–æ–∫")
        
        # 7. –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("7. –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞...")
        final_stats = es.get_statistics()
        print(f"   –í—Å–µ–≥–æ –ª–æ–≥–æ–≤: {final_stats['total_logs']}")
        print(f"   –ò–Ω–¥–µ–∫—Å–æ–≤: {len(final_stats['indices'])}")
        print(f"   –ü–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {final_stats['search_queries']}")
        
        print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
        return False


def test_elasticsearch_api():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API Elasticsearch"""
    print("\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Elasticsearch API")
    print("=" * 50)
    
    try:
        base_url = "http://localhost:5001/api/elasticsearch"
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
        print("1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API...")
        response = requests.get(f"{base_url}/health", timeout=5)
        if response.status_code == 200:
            health_data = response.json()
            print(f"   –°—Ç–∞—Ç—É—Å: {health_data['status']}")
            print(f"   Elasticsearch: {health_data['elasticsearch']}")
            print(f"   –í—Å–µ–≥–æ –ª–æ–≥–æ–≤: {health_data['total_logs']}")
        else:
            print(f"   ‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
            return False
        
        # 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞
        print("2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ API...")
        
        # –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É
        response = requests.get(f"{base_url}/search?q=security&limit=5", timeout=5)
        if response.status_code == 200:
            data = response.json()
            print(f"   –ü–æ–∏—Å–∫ 'security': {data['hits']} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {response.status_code}")
        
        # –ü–æ–∏—Å–∫ –ø–æ —É—Ä–æ–≤–Ω—é
        response = requests.get(f"{base_url}/search?level=ERROR&limit=5", timeout=5)
        if response.status_code == 200:
            data = response.json()
            print(f"   –ü–æ–∏—Å–∫ –æ—à–∏–±–æ–∫: {data['hits']} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –æ—à–∏–±–æ–∫: {response.status_code}")
        
        # 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        print("3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
        response = requests.get(f"{base_url}/stats", timeout=5)
        if response.status_code == 200:
            stats = response.json()
            print(f"   –í—Å–µ–≥–æ –ª–æ–≥–æ–≤: {stats['total_logs']}")
            print(f"   –ò–Ω–¥–µ–∫—Å–æ–≤: {len(stats['indices'])}")
            print(f"   –ü–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['search_queries']}")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {response.status_code}")
        
        # 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ª–æ–≥–æ–≤
        print("4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ª–æ–≥–æ–≤...")
        response = requests.get(f"{base_url}/logs/recent?limit=5", timeout=5)
        if response.status_code == 200:
            data = response.json()
            print(f"   –ü–æ—Å–ª–µ–¥–Ω–∏—Ö –ª–æ–≥–æ–≤: {len(data['logs'])}")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ª–æ–≥–æ–≤: {response.status_code}")
        
        # 5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ API
        print("5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ API...")
        
        new_log = {
            "timestamp": datetime.now().isoformat(),
            "level": "INFO",
            "component": "APITestComponent",
            "message": "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API",
            "metadata": {"api_test": True, "timestamp": datetime.now().isoformat()}
        }
        
        response = requests.post(f"{base_url}/index", json=new_log, timeout=5)
        if response.status_code == 200:
            result = response.json()
            if result['success']:
                print(f"   ‚úÖ –õ–æ–≥ –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω: {result['log_id']}")
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏: {result['error']}")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ API –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏: {response.status_code}")
        
        print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except requests.exceptions.ConnectionError:
        print("‚ùå Elasticsearch API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–∑–∞–ø—É—Å—Ç–∏—Ç–µ elasticsearch_api.py)")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API: {e}")
        return False


def test_dashboard_integration():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –¥–∞—à–±–æ—Ä–¥–æ–º"""
    print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –¥–∞—à–±–æ—Ä–¥–æ–º")
    print("=" * 50)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –¥–∞—à–±–æ—Ä–¥
        print("1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞...")
        response = requests.get("http://localhost:5000/api/health", timeout=5)
        if response.status_code == 200:
            print("   ‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π –¥–∞—à–±–æ—Ä–¥ –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            print(f"   ‚ùå –û—Å–Ω–æ–≤–Ω–æ–π –¥–∞—à–±–æ—Ä–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Elasticsearch API
        print("2. –ü—Ä–æ–≤–µ—Ä–∫–∞ Elasticsearch API...")
        response = requests.get("http://localhost:5001/api/elasticsearch/health", timeout=5)
        if response.status_code == 200:
            print("   ‚úÖ Elasticsearch API –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            print(f"   ‚ùå Elasticsearch API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
            return False
        
        print("\n‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –¥–∞—à–±–æ—Ä–¥–æ–º —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        print("\nüåê –°—Å—ã–ª–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        print("   üìä –î–∞—à–±–æ—Ä–¥: http://localhost:5000")
        print("   üîç –ü–æ–∏—Å–∫ –ª–æ–≥–æ–≤: http://localhost:5000 (–≤–∫–ª–∞–¥–∫–∞ '–ü–æ–∏—Å–∫ –ª–æ–≥–æ–≤')")
        print("   üì° Elasticsearch API: http://localhost:5001/api/elasticsearch/health")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        return False


if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Elasticsearch")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞
    simulator_success = test_elasticsearch_simulator()
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API
    api_success = test_elasticsearch_api()
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    integration_success = test_dashboard_integration()
    
    print("\n" + "=" * 60)
    if simulator_success and api_success and integration_success:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –í–´–ü–û–õ–ù–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("\nüí° –î–ª—è –ø–æ–ª–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã:")
        print("   1. –û—Ç–∫—Ä–æ–π—Ç–µ –¥–∞—à–±–æ—Ä–¥: http://localhost:5000")
        print("   2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É '–ü–æ–∏—Å–∫ –ª–æ–≥–æ–≤'")
        print("   3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∏—Å–∫ –ø–æ –ª–æ–≥–∞–º")
        print("   4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É Elasticsearch")
    else:
        print("‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–®–õ–ò!")
        if not simulator_success:
            print("   - –°–∏–º—É–ª—è—Ç–æ—Ä Elasticsearch")
        if not api_success:
            print("   - Elasticsearch API")
        if not integration_success:
            print("   - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –¥–∞—à–±–æ—Ä–¥–æ–º")