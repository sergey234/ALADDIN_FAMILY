#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ö–ê–õ–¨–ù–û–ô –¢–ï–°–¢–û–í–û–ô –°–†–ï–î–´
–°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ä–µ–¥—ã –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
"""

import json
import os
import subprocess
import sys
from pathlib import Path
from typing import Dict, List


class LocalTestEnvironmentSetup:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã"""
    
    def __init__(self, project_root: str = "/Users/sergejhlystov/ALADDIN_NEW"):
        self.project_root = Path(project_root)
        self.test_env_dir = self.project_root / "test_environment"
        self.test_data_dir = self.test_env_dir / "test_data"
        self.test_config_dir = self.test_env_dir / "config"
        
    def create_test_environment(self) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã"""
        try:
            print("üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–π —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã...")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
            self.test_env_dir.mkdir(exist_ok=True)
            self.test_data_dir.mkdir(exist_ok=True)
            self.test_config_dir.mkdir(exist_ok=True)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã
            self._create_test_config()
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            self._create_test_data()
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–∑–æ–ª—è—Ü–∏–∏
            self._setup_isolation()
            
            print("‚úÖ –õ–æ–∫–∞–ª—å–Ω–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è —Å—Ä–µ–¥–∞ —Å–æ–∑–¥–∞–Ω–∞!")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã: {e}")
            return False
    
    def _create_test_config(self) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã"""
        test_config = {
            "test_environment": {
                "name": "ALADDIN Local Test Environment",
                "version": "1.0.0",
                "description": "–õ–æ–∫–∞–ª—å–Ω–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è —Å—Ä–µ–¥–∞ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã",
                "isolation": {
                    "enabled": True,
                    "separate_database": True,
                    "separate_logs": True,
                    "mock_external_apis": True
                },
                "test_data": {
                    "use_mock_data": True,
                    "mock_personal_data": True,
                    "mock_family_profiles": True,
                    "mock_devices": True,
                    "mock_threats": True
                },
                "features": {
                    "all_functions_enabled": True,
                    "personal_data_processing": True,
                    "family_security": True,
                    "biometric_analysis": True,
                    "geolocation_tracking": True,
                    "real_time_monitoring": True
                },
                "compliance": {
                    "test_mode_only": True,
                    "no_real_data": True,
                    "local_processing_only": True,
                    "no_external_transmission": True
                }
            }
        }
        
        config_file = self.test_config_dir / "test_environment_config.json"
        with open(config_file, 'w', encoding='utf-8') as f:
            json.dump(test_config, f, indent=2, ensure_ascii=False)
        
        print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: {config_file}")
    
    def _create_test_data(self) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        test_families = [
            {
                "family_id": "test_family_001",
                "family_name": "–¢–µ—Å—Ç–æ–≤–∞—è —Å–µ–º—å—è –ò–≤–∞–Ω–æ–≤—ã—Ö",
                "members": [
                    {
                        "member_id": "parent_001",
                        "name": "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤",
                        "age": 35,
                        "role": "parent",
                        "email": "ivan.test@example.com",
                        "phone": "+7-900-000-0001"
                    },
                    {
                        "member_id": "child_001",
                        "name": "–ê–Ω–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞",
                        "age": 12,
                        "role": "child",
                        "email": "anna.test@example.com",
                        "phone": "+7-900-000-0002"
                    }
                ],
                "devices": [
                    {
                        "device_id": "device_001",
                        "type": "smartphone",
                        "owner": "parent",
                        "os": "iOS 15.0",
                        "last_seen": "2024-01-15T10:30:00Z"
                    },
                    {
                        "device_id": "device_002",
                        "type": "tablet",
                        "owner": "child",
                        "os": "Android 11",
                        "last_seen": "2024-01-15T10:25:00Z"
                    }
                ]
            },
            {
                "family_id": "test_family_002",
                "family_name": "–¢–µ—Å—Ç–æ–≤–∞—è —Å–µ–º—å—è –ü–µ—Ç—Ä–æ–≤—ã—Ö",
                "members": [
                    {
                        "member_id": "parent_002",
                        "name": "–ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤",
                        "age": 42,
                        "role": "parent",
                        "email": "petr.test@example.com",
                        "phone": "+7-900-000-0003"
                    },
                    {
                        "member_id": "elderly_001",
                        "name": "–ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞",
                        "age": 68,
                        "role": "elderly",
                        "email": "maria.test@example.com",
                        "phone": "+7-900-000-0004"
                    }
                ],
                "devices": [
                    {
                        "device_id": "device_003",
                        "type": "laptop",
                        "owner": "parent",
                        "os": "Windows 11",
                        "last_seen": "2024-01-15T09:15:00Z"
                    },
                    {
                        "device_id": "device_004",
                        "type": "smartphone",
                        "owner": "elderly",
                        "os": "Android 10",
                        "last_seen": "2024-01-15T08:45:00Z"
                    }
                ]
            }
        ]
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–µ–º–µ–π
        families_file = self.test_data_dir / "test_families.json"
        with open(families_file, 'w', encoding='utf-8') as f:
            json.dump(test_families, f, indent=2, ensure_ascii=False)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —É–≥—Ä–æ–∑
        test_threats = [
            {
                "threat_id": "threat_001",
                "type": "phishing",
                "severity": "high",
                "description": "–§–∏—à–∏–Ω–≥–æ–≤–∞—è –∞—Ç–∞–∫–∞ –Ω–∞ email",
                "detected_at": "2024-01-15T10:00:00Z",
                "source_ip": "192.168.1.100",
                "target_device": "device_001",
                "status": "blocked"
            },
            {
                "threat_id": "threat_002",
                "type": "malware",
                "severity": "critical",
                "description": "–í—Ä–µ–¥–æ–Ω–æ—Å–Ω–æ–µ –ü–û –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ",
                "detected_at": "2024-01-15T09:30:00Z",
                "source_ip": "10.0.0.50",
                "target_device": "device_002",
                "status": "quarantined"
            }
        ]
        
        threats_file = self.test_data_dir / "test_threats.json"
        with open(threats_file, 'w', encoding='utf-8') as f:
            json.dump(test_threats, f, indent=2, ensure_ascii=False)
        
        print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã –≤: {self.test_data_dir}")
    
    def _setup_isolation(self) -> None:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–∑–æ–ª—è—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã"""
        isolation_config = {
            "database": {
                "type": "sqlite",
                "path": str(self.test_env_dir / "test_database.db"),
                "separate_from_production": True
            },
            "logs": {
                "path": str(self.test_env_dir / "test_logs"),
                "separate_from_production": True,
                "level": "DEBUG"
            },
            "external_apis": {
                "mock_mode": True,
                "mock_responses": True,
                "no_real_requests": True
            },
            "network": {
                "isolated": True,
                "no_external_connections": True,
                "local_only": True
            }
        }
        
        isolation_file = self.test_config_dir / "isolation_config.json"
        with open(isolation_file, 'w', encoding='utf-8') as f:
            json.dump(isolation_config, f, indent=2, ensure_ascii=False)
        
        print(f"‚úÖ –ò–∑–æ–ª—è—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞: {isolation_file}")
    
    def run_full_system_test(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        try:
            print("üß™ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã...")
            
            # –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
            test_mode_script = self.project_root / "security" / "test_mode_manager.py"
            if test_mode_script.exists():
                result = subprocess.run([
                    sys.executable, str(test_mode_script)
                ], capture_output=True, text=True)
                
                if result.returncode == 0:
                    print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
                    print(f"–í—ã–≤–æ–¥: {result.stdout}")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞: {result.stderr}")
                    return False
            else:
                print("‚ùå –§–∞–π–ª test_mode_manager.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return False
    
    def cleanup_test_environment(self) -> bool:
        """–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã"""
        try:
            print("üßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã...")
            
            # –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            import shutil
            if self.test_env_dir.exists():
                shutil.rmtree(self.test_env_dir)
                print("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ä–µ–¥–∞ –æ—á–∏—â–µ–Ω–∞")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")
            return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    setup = LocalTestEnvironmentSetup()
    
    print("üèóÔ∏è –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ö–ê–õ–¨–ù–û–ô –¢–ï–°–¢–û–í–û–ô –°–†–ï–î–´")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã
    if setup.create_test_environment():
        print("\n‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ä–µ–¥–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
        # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if setup.run_full_system_test():
            print("\n‚úÖ –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        else:
            print("\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏")
    else:
        print("\n‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã")
    
    print("\n" + "=" * 50)
    print("üéØ –¢–ï–°–¢–û–í–ê–Ø –°–†–ï–î–ê –ì–û–¢–û–í–ê –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!")


if __name__ == "__main__":
    main()