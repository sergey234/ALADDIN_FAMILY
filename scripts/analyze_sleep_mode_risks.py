#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤ –ø–µ—Ä–µ–≤–æ–¥–∞ —Ñ—É–Ω–∫—Ü–∏–π –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º
–í—ã—è–≤–ª—è–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
"""

import json
import os
import sys
from datetime import datetime
from typing import Dict, List, Set, Tuple
from collections import defaultdict

def load_sfm_registry() -> Dict:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–µ–µ—Å—Ç—Ä SFM"""
    try:
        with open('data/sfm/function_registry.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–µ—Å—Ç—Ä–∞ SFM: {e}")
        return None

def analyze_dependencies(registry: Dict) -> Dict:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –º–µ–∂–¥—É —Ñ—É–Ω–∫—Ü–∏—è–º–∏"""
    print("üîç –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –º–µ–∂–¥—É —Ñ—É–Ω–∫—Ü–∏—è–º–∏...")
    
    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    dependency_graph = defaultdict(list)
    reverse_dependency_graph = defaultdict(list)
    
    for func_id, func_data in registry['functions'].items():
        dependencies = func_data.get('dependencies', [])
        for dep in dependencies:
            dependency_graph[func_id].append(dep)
            reverse_dependency_graph[dep].append(func_id)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—É—Ç–∏
    critical_paths = []
    high_dependency_functions = []
    
    for func_id, deps in dependency_graph.items():
        if len(deps) > 3:  # –§—É–Ω–∫—Ü–∏–∏ —Å –≤—ã—Å–æ–∫–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            func_data = registry['functions'].get(func_id, {})
            high_dependency_functions.append({
                'id': func_id,
                'name': func_data.get('name', func_id),
                'dependencies': deps,
                'dependency_count': len(deps),
                'is_critical': func_data.get('is_critical', False),
                'security_level': func_data.get('security_level', 'unknown')
            })
    
    # –§—É–Ω–∫—Ü–∏–∏, –æ—Ç –∫–æ—Ç–æ—Ä—ã—Ö –∑–∞–≤–∏—Å—è—Ç –¥—Ä—É–≥–∏–µ
    high_dependents_functions = []
    for func_id, dependents in reverse_dependency_graph.items():
        if len(dependents) > 2:  # –§—É–Ω–∫—Ü–∏–∏, –æ—Ç –∫–æ—Ç–æ—Ä—ã—Ö –∑–∞–≤–∏—Å—è—Ç –±–æ–ª–µ–µ 2 –¥—Ä—É–≥–∏—Ö
            func_data = registry['functions'].get(func_id, {})
            high_dependents_functions.append({
                'id': func_id,
                'name': func_data.get('name', func_id),
                'dependents': dependents,
                'dependent_count': len(dependents),
                'is_critical': func_data.get('is_critical', False),
                'security_level': func_data.get('security_level', 'unknown')
            })
    
    return {
        'dependency_graph': dict(dependency_graph),
        'reverse_dependency_graph': dict(reverse_dependency_graph),
        'high_dependency_functions': high_dependency_functions,
        'high_dependents_functions': high_dependents_functions
    }

def identify_critical_risks(registry: Dict, dependencies: Dict) -> List[Dict]:
    """–í—ã—è–≤–ª—è–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∏—Å–∫–∏"""
    print("üö® –í—ã—è–≤–ª–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–∏—Å–∫–æ–≤...")
    
    risks = []
    
    # –†–∏—Å–∫ 1: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
    for func in dependencies['high_dependency_functions']:
        if func['is_critical'] and func['dependency_count'] > 5:
            risks.append({
                'type': 'critical_function_with_dependencies',
                'severity': 'CRITICAL',
                'function_id': func['id'],
                'function_name': func['name'],
                'description': f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è {func['name']} –∏–º–µ–µ—Ç {func['dependency_count']} –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π",
                'impact': '–ú–æ–∂–µ—Ç –Ω–∞—Ä—É—à–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º',
                'recommendation': '–ù–ï –ü–ï–†–ï–í–û–î–ò–¢–¨ –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º'
            })
    
    # –†–∏—Å–∫ 2: –§—É–Ω–∫—Ü–∏–∏, –æ—Ç –∫–æ—Ç–æ—Ä—ã—Ö –∑–∞–≤–∏—Å—è—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ
    for func in dependencies['high_dependents_functions']:
        critical_dependents = [dep for dep in func['dependents'] 
                             if registry['functions'].get(dep, {}).get('is_critical', False)]
        if critical_dependents:
            risks.append({
                'type': 'function_supports_critical',
                'severity': 'HIGH',
                'function_id': func['id'],
                'function_name': func['name'],
                'description': f"–§—É–Ω–∫—Ü–∏—è {func['name']} –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç {len(critical_dependents)} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π",
                'impact': '–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –º–æ–∂–µ—Ç –Ω–∞—Ä—É—à–∏—Ç—å —Ä–∞–±–æ—Ç—É –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π',
                'recommendation': '–¢—Ä–µ–±—É–µ—Ç –æ—Å–æ–±–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º'
            })
    
    # –†–∏—Å–∫ 3: –§—É–Ω–∫—Ü–∏–∏ —Å –≤—ã—Å–æ–∫–∏–º —É—Ä–æ–≤–Ω–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    for func_id, func_data in registry['functions'].items():
        security_level = func_data.get('security_level', 'unknown')
        is_critical = func_data.get('is_critical', False)
        if security_level in ['critical', 'high'] and not is_critical:
            risks.append({
                'type': 'high_security_non_critical',
                'severity': 'MEDIUM',
                'function_id': func_id,
                'function_name': func_data.get('name', func_id),
                'description': f"–§—É–Ω–∫—Ü–∏—è {func_data.get('name', func_id)} –∏–º–µ–µ—Ç –≤—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, –Ω–æ –Ω–µ –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è",
                'impact': '–ú–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–∞',
                'recommendation': '–ü–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏'
            })
    
    return risks

def analyze_sleep_mode_impact(registry: Dict, critical_functions: List[str]) -> Dict:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–ª–∏—è–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º"""
    print("üìä –ê–Ω–∞–ª–∏–∑ –≤–ª–∏—è–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º...")
    
    # –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º
    sleep_functions = []
    for func_id, func_data in registry['functions'].items():
        if func_id not in critical_functions and func_data.get('status') == 'enabled':
            sleep_functions.append(func_id)
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–∏–ø–∞–º —Ñ—É–Ω–∫—Ü–∏–π
    type_analysis = defaultdict(int)
    security_level_analysis = defaultdict(int)
    
    for func_id in sleep_functions:
        func_data = registry['functions'].get(func_id, {})
        func_type = func_data.get('function_type', 'unknown')
        security_level = func_data.get('security_level', 'unknown')
        
        type_analysis[func_type] += 1
        security_level_analysis[security_level] += 1
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
    potential_issues = []
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –≤—ã—Å–æ–∫–∏–º —É—Ä–æ–≤–Ω–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    high_security_sleep = [f for f in sleep_functions 
                          if registry['functions'].get(f, {}).get('security_level') in ['critical', 'high']]
    if high_security_sleep:
        potential_issues.append({
            'type': 'high_security_functions_sleep',
            'count': len(high_security_sleep),
            'description': f"{len(high_security_sleep)} —Ñ—É–Ω–∫—Ü–∏–π —Å –≤—ã—Å–æ–∫–∏–º —É—Ä–æ–≤–Ω–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º"
        })
    
    return {
        'sleep_functions_count': len(sleep_functions),
        'sleep_functions': sleep_functions,
        'type_analysis': dict(type_analysis),
        'security_level_analysis': dict(security_level_analysis),
        'potential_issues': potential_issues
    }

def generate_risk_report(registry: Dict, dependencies: Dict, risks: List[Dict], 
                        impact_analysis: Dict) -> Dict:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ —Ä–∏—Å–∫–∞—Ö"""
    
    report = {
        'timestamp': datetime.now().isoformat(),
        'total_functions': len(registry['functions']),
        'critical_functions_count': sum(1 for f in registry['functions'].values() if f.get('is_critical', False)),
        'functions_with_dependencies': len(dependencies['high_dependency_functions']),
        'functions_supporting_others': len(dependencies['high_dependents_functions']),
        'risks': {
            'total': len(risks),
            'critical': len([r for r in risks if r['severity'] == 'CRITICAL']),
            'high': len([r for r in risks if r['severity'] == 'HIGH']),
            'medium': len([r for r in risks if r['severity'] == 'MEDIUM']),
            'low': len([r for r in risks if r['severity'] == 'LOW'])
        },
        'impact_analysis': impact_analysis,
        'recommendations': generate_recommendations(risks, impact_analysis)
    }
    
    return report

def generate_recommendations(risks: List[Dict], impact_analysis: Dict) -> List[str]:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ —Ä–∏—Å–∫–æ–≤"""
    
    recommendations = []
    
    # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    critical_risks = [r for r in risks if r['severity'] == 'CRITICAL']
    if critical_risks:
        recommendations.append("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –†–ò–°–ö–ò –û–ë–ù–ê–†–£–ñ–ï–ù–´!")
        recommendations.append("   ‚Ä¢ –ù–ï –ü–ï–†–ï–í–û–î–ò–¢–¨ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏")
        recommendations.append("   ‚Ä¢ –ü—Ä–æ–≤–µ—Å—Ç–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
        recommendations.append("   ‚Ä¢ –°–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω –æ—Ç–∫–∞—Ç–∞")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    high_security_issues = [i for i in impact_analysis['potential_issues'] 
                           if 'high_security' in i['type']]
    if high_security_issues:
        recommendations.append("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –§—É–Ω–∫—Ü–∏–∏ —Å –≤—ã—Å–æ–∫–∏–º —É—Ä–æ–≤–Ω–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
        recommendations.append("   ‚Ä¢ –ü–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏")
        recommendations.append("   ‚Ä¢ –ü—Ä–æ–≤–µ—Å—Ç–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
    
    # –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    recommendations.extend([
        "üìã –û–ë–©–ò–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:",
        "   ‚Ä¢ –ù–∞—á–∞—Ç—å —Å –ø–∏–ª–æ—Ç–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ (10-20 —Ñ—É–Ω–∫—Ü–∏–π)",
        "   ‚Ä¢ –°–æ–∑–¥–∞—Ç—å –ø–æ–ª–Ω—É—é –∫–∞—Ä—Ç—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π",
        "   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∞–ª–µ—Ä—Ç—ã",
        "   ‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø–ª–∞–Ω –æ—Ç–∫–∞—Ç–∞",
        "   ‚Ä¢ –ü—Ä–æ–≤–µ—Å—Ç–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –∫–æ–ø–∏–∏ —Å–∏—Å—Ç–µ–º—ã"
    ])
    
    return recommendations

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üö® –ê–ù–ê–õ–ò–ó –†–ò–°–ö–û–í –ü–ï–†–ï–í–û–î–ê –í –°–ü–Ø–©–ò–ô –†–ï–ñ–ò–ú")
    print("=" * 60)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    print("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
    registry = load_sfm_registry()
    if not registry:
        return False
    
    print("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    dependencies = analyze_dependencies(registry)
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ñ—É–Ω–∫—Ü–∏–π —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏: {len(dependencies['high_dependency_functions'])}")
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ñ—É–Ω–∫—Ü–∏–π, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏—Ö –¥—Ä—É–≥–∏–µ: {len(dependencies['high_dependents_functions'])}")
    
    # –í—ã—è–≤–ª—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∏—Å–∫–∏
    risks = identify_critical_risks(registry, dependencies)
    print(f"‚úÖ –í—ã—è–≤–ª–µ–Ω–æ —Ä–∏—Å–∫–æ–≤: {len(risks)}")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
    try:
        with open('TOP_50_CRITICAL_FUNCTIONS.json', 'r', encoding='utf-8') as f:
            critical_functions_data = json.load(f)
        critical_functions = [f['id'] for f in critical_functions_data]
    except:
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π")
        critical_functions = []
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–ª–∏—è–Ω–∏–µ
    impact_analysis = analyze_sleep_mode_impact(registry, critical_functions)
    print(f"‚úÖ –§—É–Ω–∫—Ü–∏–π –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º: {impact_analysis['sleep_functions_count']}")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    report = generate_risk_report(registry, dependencies, risks, impact_analysis)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    report_file = f"SLEEP_MODE_RISKS_REPORT_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
    with open(report_file, 'w', encoding='utf-8') as f:
        json.dump(report, f, ensure_ascii=False, indent=2)
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê –†–ò–°–ö–û–í:")
    print("=" * 60)
    print(f"üìà –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π: {report['total_functions']}")
    print(f"üîí –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π: {report['critical_functions_count']}")
    print(f"üîó –§—É–Ω–∫—Ü–∏–π —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏: {report['functions_with_dependencies']}")
    print(f"üéØ –§—É–Ω–∫—Ü–∏–π, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏—Ö –¥—Ä—É–≥–∏–µ: {report['functions_supporting_others']}")
    
    print(f"\nüö® –í–´–Ø–í–õ–ï–ù–ù–´–ï –†–ò–°–ö–ò:")
    print("-" * 40)
    print(f"üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ: {report['risks']['critical']}")
    print(f"üü† –í—ã—Å–æ–∫–∏–µ: {report['risks']['high']}")
    print(f"üü° –°—Ä–µ–¥–Ω–∏–µ: {report['risks']['medium']}")
    print(f"üü¢ –ù–∏–∑–∫–∏–µ: {report['risks']['low']}")
    
    if risks:
        print(f"\n‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –†–ò–°–ö–ò:")
        print("-" * 40)
        for i, risk in enumerate(risks[:5], 1):
            print(f"{i}. {risk['function_name']} - {risk['description']}")
            print(f"   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {risk['recommendation']}")
            print()
    
    print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("-" * 40)
    for rec in report['recommendations']:
        print(rec)
    
    print(f"\nüìÅ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
    
    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)