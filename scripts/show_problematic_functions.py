#!/usr/bin/env python3
"""
–ü–æ–∫–∞–∑ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π —Å –ø—Ä–æ–±–ª–µ–º–Ω—ã–º–∏ –ø—É—Ç—è–º–∏ –≤ SFM —Ä–µ–µ—Å—Ç—Ä–µ
"""

import json
import os
from pathlib import Path
from typing import List, Dict, Tuple

def load_sfm_registry() -> Dict:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç SFM —Ä–µ–µ—Å—Ç—Ä –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    registry_path = Path("data/sfm/function_registry.json")
    
    if not registry_path.exists():
        print(f"‚ùå –§–∞–π–ª —Ä–µ–µ—Å—Ç—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {registry_path}")
        return {}
    
    try:
        with open(registry_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
        return data.get('functions', {})
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–µ—Å—Ç—Ä–∞: {e}")
        return {}

def find_similar_file(missing_path: str, base_dir: Path) -> Tuple[bool, str]:
    """–ù–∞—Ö–æ–¥–∏—Ç –ø–æ—Ö–æ–∂–∏–π —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ –ø—É—Ç–∏"""
    missing_name = Path(missing_path).name.lower()
    missing_stem = Path(missing_path).stem.lower()
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
    search_patterns = [
        missing_name,
        missing_stem,
        missing_name.replace('_', ''),
        missing_stem.replace('_', ''),
        missing_name.replace('_', '_'),
        missing_stem.replace('_', '_')
    ]
    
    found_files = []
    
    try:
        # –ò—â–µ–º —Ñ–∞–π–ª—ã —Å –ø–æ—Ö–æ–∂–∏–º–∏ –∏–º–µ–Ω–∞–º–∏
        for root, dirs, files in os.walk(base_dir):
            # –ò—Å–∫–ª—é—á–∞–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            dirs[:] = [d for d in dirs if d not in ['__pycache__', '.git', 'backups', 'scripts', 'tests', 'formatting_work']]
            
            for file in files:
                if file.lower().endswith('.py'):
                    file_lower = file.lower()
                    file_stem = Path(file).stem.lower()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
                    for pattern in search_patterns:
                        if (pattern in file_lower or 
                            pattern in file_stem or
                            file_lower in pattern or
                            file_stem in pattern):
                            
                            full_path = Path(root) / file
                            rel_path = full_path.relative_to(base_dir)
                            found_files.append((full_path, rel_path, pattern))
    
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: {e}")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if found_files:
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –±–ª–∏–∑–æ—Å—Ç–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        found_files.sort(key=lambda x: len(x[1].parts))
        return True, str(found_files[0][1])
    
    return False, ""

def show_problematic_functions():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –ø—Ä–æ–±–ª–µ–º–Ω—ã–º–∏ –ø—É—Ç—è–º–∏"""
    print("üîç –§–£–ù–ö–¶–ò–ò –° –ü–†–û–ë–õ–ï–ú–ù–´–ú–ò –ü–£–¢–Ø–ú–ò –í SFM –†–ï–ï–°–¢–†–ï")
    print("=" * 70)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–µ—Å—Ç—Ä
    functions = load_sfm_registry()
    if not functions:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å SFM —Ä–µ–µ—Å—Ç—Ä")
        return
    
    base_dir = Path.cwd()
    problematic_functions = []
    
    print(f"üìÅ –ë–∞–∑–æ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {base_dir}")
    print(f"üìä –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π –≤ —Ä–µ–µ—Å—Ç—Ä–µ: {len(functions)}")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
    for func_id, func_data in functions.items():
        file_path_str = func_data.get('file_path', '')
        if not file_path_str:
            continue
            
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—É—Ç—å
        if file_path_str.startswith('./'):
            file_path_str = file_path_str[2:]
        
        normalized_path = base_dir / file_path_str
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if not normalized_path.exists() or not normalized_path.is_file():
            # –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–π —Ñ–∞–π–ª
            found, similar_path = find_similar_file(file_path_str, base_dir)
            
            problematic_functions.append({
                'function_id': func_id,
                'name': func_data.get('name', func_id),
                'original_path': file_path_str,
                'normalized_path': str(normalized_path),
                'found_similar': found,
                'similar_path': similar_path,
                'category': func_data.get('function_type', 'unknown'),
                'status': func_data.get('status', 'unknown')
            })
    
    print(f"‚ùå –ù–∞–π–¥–µ–Ω–æ {len(problematic_functions)} —Ñ—É–Ω–∫—Ü–∏–π —Å –ø—Ä–æ–±–ª–µ–º–Ω—ã–º–∏ –ø—É—Ç—è–º–∏")
    print()
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    categories = {}
    for func in problematic_functions:
        category = func['category']
        if category not in categories:
            categories[category] = []
        categories[category].append(func)
    
    print("üìã –ü–†–û–ë–õ–ï–ú–ù–´–ï –§–£–ù–ö–¶–ò–ò –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú:")
    print("-" * 70)
    
    for category, funcs in sorted(categories.items()):
        print(f"\nüî∏ {category.upper()} ({len(funcs)} —Ñ—É–Ω–∫—Ü–∏–π):")
        
        for i, func in enumerate(funcs, 1):
            print(f"\n{i:2d}. {func['function_id']}")
            print(f"    –ù–∞–∑–≤–∞–Ω–∏–µ: {func['name']}")
            print(f"    –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—É—Ç—å: {func['original_path']}")
            print(f"    –°—Ç–∞—Ç—É—Å: {func['status']}")
            
            if func['found_similar']:
                print(f"    ‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ—Ö–æ–∂–∏–π: {func['similar_path']}")
            else:
                print(f"    ‚ùå –ü–æ—Ö–æ–∂–∏–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
    report_data = {
        'timestamp': str(Path.cwd()),
        'total_problematic': len(problematic_functions),
        'categories': {
            category: {
                'count': len(funcs),
                'functions': funcs
            }
            for category, funcs in categories.items()
        },
        'all_problematic': problematic_functions
    }
    
    report_path = f"data/reports/problematic_functions_{len(problematic_functions)}.json"
    os.makedirs(os.path.dirname(report_path), exist_ok=True)
    
    with open(report_path, 'w', encoding='utf-8') as f:
        json.dump(report_data, f, ensure_ascii=False, indent=2)
    
    print(f"\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_path}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    print(f"\nüéØ –¢–û–ü-20 –§–£–ù–ö–¶–ò–ô –î–õ–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:")
    print("-" * 70)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (—Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ –ø–æ—Ö–æ–∂–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏ —Å–Ω–∞—á–∞–ª–∞)
    sorted_funcs = sorted(problematic_functions, key=lambda x: (not x['found_similar'], x['category']))
    
    for i, func in enumerate(sorted_funcs[:20], 1):
        status_icon = "‚úÖ" if func['found_similar'] else "‚ùå"
        print(f"{i:2d}. {status_icon} {func['function_id']} ({func['category']})")
        print(f"    –ë—ã–ª–æ: {func['original_path']}")
        if func['found_similar']:
            print(f"    –°—Ç–∞–ª–æ: {func['similar_path']}")
        print()
    
    return problematic_functions

if __name__ == "__main__":
    try:
        problematic_functions = show_problematic_functions()
        print(f"\nüéØ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù")
        print(f"–ù–∞–π–¥–µ–Ω–æ {len(problematic_functions)} —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()