#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –∏–º–ø–æ—Ä—Ç–∞–º–∏ - –†–µ—à–µ–Ω–∏–µ 1
–£–±–∏—Ä–∞–µ—Ç sys.path.append() –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç PYTHONPATH
"""

import os
import re
import subprocess
import shutil
from pathlib import Path
import json
from datetime import datetime

class ImportFixer:
    def __init__(self):
        self.security_dir = Path("/Users/sergejhlystov/ALADDIN_NEW/security")
        self.backup_dir = Path("/Users/sergejhlystov/ALADDIN_NEW/backup_import_fix")
        self.stats = {
            "files_processed": 0,
            "imports_moved": 0,
            "sys_path_removed": 0,
            "errors_fixed": 0,
            "files_with_errors": 0
        }
        
    def create_backup(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏"""
        print("üîÑ –§–ê–ó–ê 0: –°–û–ó–î–ê–ù–ò–ï –†–ï–ó–ï–†–í–ù–û–ô –ö–û–ü–ò–ò")
        print("=" * 50)
        
        if self.backup_dir.exists():
            shutil.rmtree(self.backup_dir)
        
        shutil.copytree(self.security_dir, self.backup_dir)
        print(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {self.backup_dir}")
        
    def phase1_move_imports(self):
        """–§–ê–ó–ê 1: –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –∏–º–ø–æ—Ä—Ç—ã –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–æ–≤"""
        print("\nüîÑ –§–ê–ó–ê 1: –ü–ï–†–ï–ú–ï–©–ï–ù–ò–ï –ò–ú–ü–û–†–¢–û–í –í –ù–ê–ß–ê–õ–û –§–ê–ô–õ–û–í")
        print("=" * 50)
        
        python_files = self._get_python_files()
        print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(python_files)} Python —Ñ–∞–π–ª–æ–≤")
        
        for file_path in python_files:
            if self._move_imports_to_top(file_path):
                self.stats["files_processed"] += 1
                self.stats["imports_moved"] += 1
                
        print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {self.stats['files_processed']}")
        print(f"‚úÖ –ü–µ—Ä–µ–º–µ—â–µ–Ω–æ –∏–º–ø–æ—Ä—Ç–æ–≤: {self.stats['imports_moved']}")
        
    def phase2_remove_sys_path(self):
        """–§–ê–ó–ê 2: –£–±—Ä–∞—Ç—å sys.path.append() –∏–∑ —Ñ–∞–π–ª–æ–≤"""
        print("\nüîÑ –§–ê–ó–ê 2: –£–î–ê–õ–ï–ù–ò–ï sys.path.append()")
        print("=" * 50)
        
        python_files = self._get_python_files()
        sys_path_removed = 0
        
        for file_path in python_files:
            if self._remove_sys_path_append(file_path):
                sys_path_removed += 1
                
        self.stats["sys_path_removed"] = sys_path_removed
        print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ sys.path.append(): {sys_path_removed}")
        
    def phase3_setup_pythonpath(self):
        """–§–ê–ó–ê 3: –ù–∞—Å—Ç—Ä–æ–∏—Ç—å PYTHONPATH"""
        print("\nüîÑ –§–ê–ó–ê 3: –ù–ê–°–¢–†–û–ô–ö–ê PYTHONPATH")
        print("=" * 50)
        
        # –°–æ–∑–¥–∞–µ–º .env —Ñ–∞–π–ª —Å PYTHONPATH
        env_file = Path("/Users/sergejhlystov/ALADDIN_NEW/.env")
        pythonpath = "/Users/sergejhlystov/ALADDIN_NEW"
        
        with open(env_file, 'w') as f:
            f.write(f"PYTHONPATH={pythonpath}\n")
            f.write(f"export PYTHONPATH={pythonpath}\n")
            
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω .env —Ñ–∞–π–ª: {env_file}")
        print(f"‚úÖ PYTHONPATH —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {pythonpath}")
        
        # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ PYTHONPATH
        setup_script = Path("/Users/sergejhlystov/ALADDIN_NEW/setup_pythonpath.sh")
        with open(setup_script, 'w') as f:
            f.write("#!/bin/bash\n")
            f.write(f"export PYTHONPATH={pythonpath}\n")
            f.write("echo 'PYTHONPATH —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è ALADDIN'\n")
            
        setup_script.chmod(0o755)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Å–∫—Ä–∏–ø—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {setup_script}")
        
    def phase4_check_and_fix_errors(self):
        """–§–ê–ó–ê 4: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏"""
        print("\nüîÑ –§–ê–ó–ê 4: –ü–†–û–í–ï–†–ö–ê –ò –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –û–®–ò–ë–û–ö")
        print("=" * 50)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º flake8 –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        cmd = [
            "python3", "-m", "flake8",
            "--max-line-length=120",
            "--exclude=*/backup*,*/test*,*/logs*,*/formatting_work*",
            str(self.security_dir)
        ]
        
        try:
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=120)
            error_lines = [line for line in result.stdout.split('\n') if line.strip()]
            
            self.stats["files_with_errors"] = len(set([line.split(':')[0] for line in error_lines if ':' in line]))
            self.stats["errors_fixed"] = len(error_lines)
            
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ –æ—à–∏–±–æ–∫: {len(error_lines)}")
            print(f"üìä –§–∞–π–ª–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏: {self.stats['files_with_errors']}")
            
            if len(error_lines) == 0:
                print("üéâ –û–¢–õ–ò–ß–ù–û! –û—à–∏–±–æ–∫ flake8 –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
                return True
            else:
                print("‚ö†Ô∏è  –û—Å—Ç–∞–ª–∏—Å—å –æ—à–∏–±–∫–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10:")
                for i, error in enumerate(error_lines[:10]):
                    print(f"   {i+1}. {error}")
                return False
                
        except subprocess.TimeoutExpired:
            print("‚ùå Flake8 –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏")
            return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ flake8: {e}")
            return False
            
    def phase5_setup_precommit(self):
        """–§–ê–ó–ê 5: –ù–∞—Å—Ç—Ä–æ–∏—Ç—å pre-commit hooks"""
        print("\nüîÑ –§–ê–ó–ê 5: –ù–ê–°–¢–†–û–ô–ö–ê PRE-COMMIT HOOKS")
        print("=" * 50)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ pre-commit
        try:
            subprocess.run(["pre-commit", "--version"], capture_output=True, check=True)
            print("‚úÖ Pre-commit —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except (subprocess.CalledProcessError, FileNotFoundError):
            print("üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º pre-commit...")
            subprocess.run(["pip", "install", "pre-commit"], check=True)
            print("‚úÖ Pre-commit —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º hooks
        try:
            subprocess.run(["pre-commit", "install"], cwd="/Users/sergejhlystov/ALADDIN_NEW", check=True)
            print("‚úÖ Pre-commit hooks —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        except subprocess.CalledProcessError as e:
            print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å hooks: {e}")
            
    def _get_python_files(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ Python —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        exclude_patterns = [
            "*/backup*", "*/test*", "*/logs*", "*/formatting_work*",
            "*_backup_*.py", "*_original_backup_*.py", "*_BACKUP.py",
            "test_*.py"
        ]
        
        python_files = []
        for p in self.security_dir.rglob("*.py"):
            if not any(re.search(pattern.replace('*', '.*'), str(p)) for pattern in exclude_patterns):
                python_files.append(p)
                
        return python_files
        
    def _move_imports_to_top(self, file_path):
        """–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –∏–º–ø–æ—Ä—Ç—ã –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                lines = f.readlines()
                
            # –ò—â–µ–º –∏–º–ø–æ—Ä—Ç—ã –ø–æ—Å–ª–µ sys.path.append
            imports = []
            sys_path_found = False
            other_lines = []
            
            for line in lines:
                if "sys.path.append" in line:
                    sys_path_found = True
                    other_lines.append(line)
                elif sys_path_found and ("import " in line or "from " in line):
                    imports.append(line)
                else:
                    other_lines.append(line)
                    
            if not imports:
                return False
                
            # –ü–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–∞–π–ª
            new_lines = []
            in_header = True
            
            for line in lines:
                if in_header and (line.strip().startswith('#') or line.strip().startswith('"""') or line.strip().startswith("'''")):
                    new_lines.append(line)
                elif in_header and not (line.strip().startswith('#') or line.strip().startswith('"""') or line.strip().startswith("'''")):
                    in_header = False
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã
                    new_lines.extend(imports)
                    new_lines.append(line)
                else:
                    new_lines.append(line)
                    
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            with open(file_path, 'w', encoding='utf-8') as f:
                f.writelines(new_lines)
                
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–∞–π–ª–µ {file_path}: {e}")
            return False
            
    def _remove_sys_path_append(self, file_path):
        """–£–¥–∞–ª–∏—Ç—å sys.path.append() –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
                
            # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å sys.path.append
            lines = content.split('\n')
            new_lines = [line for line in lines if "sys.path.append" not in line]
            
            if len(new_lines) != len(lines):
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write('\n'.join(new_lines))
                return True
                
            return False
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–∞–π–ª–µ {file_path}: {e}")
            return False
            
    def run_quality_test(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞"""
        print("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–ê–ß–ï–°–¢–í–ê –ö–û–î–ê")
        print("=" * 50)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—à —Å–∫—Ä–∏–ø—Ç –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞
        try:
            result = subprocess.run([
                "python3", "scripts/quick_security_stats.py"
            ], capture_output=True, text=True, timeout=60)
            
            print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
            print(result.stdout)
            
            if "A+" in result.stdout:
                print("üéâ –£–°–ü–ï–•! –ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞ A+")
                return True
            else:
                print("‚ö†Ô∏è  –ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞ –Ω–µ A+")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
            return False
            
    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–¥–µ–ª–∞–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ"""
        print("\nüìä –û–¢–ß–ï–¢ –û –ü–†–û–î–ï–õ–ê–ù–ù–û–ô –†–ê–ë–û–¢–ï")
        print("=" * 50)
        
        report = {
            "timestamp": datetime.now().isoformat(),
            "solution": "–†–µ—à–µ–Ω–∏–µ 1: –£–±—Ä–∞—Ç—å sys.path.append()",
            "stats": self.stats,
            "backup_location": str(self.backup_dir),
            "quality_achieved": "A+" if self.stats["errors_fixed"] == 0 else "–¢—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏"
        }
        
        report_file = Path("/Users/sergejhlystov/ALADDIN_NEW/import_fix_report.json")
        with open(report_file, 'w') as f:
            json.dump(report, f, indent=2, ensure_ascii=False)
            
        print(f"üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
        print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {self.stats['files_processed']}")
        print(f"üìä –ü–µ—Ä–µ–º–µ—â–µ–Ω–æ –∏–º–ø–æ—Ä—Ç–æ–≤: {self.stats['imports_moved']}")
        print(f"üìä –£–¥–∞–ª–µ–Ω–æ sys.path.append(): {self.stats['sys_path_removed']}")
        print(f"üìä –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—à–∏–±–æ–∫: {self.stats['errors_fixed']}")
        print(f"üìä –§–∞–π–ª–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏: {self.stats['files_with_errors']}")
        
    def run_full_process(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        print("üöÄ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ò–ú–ü–û–†–¢–û–í - –†–ï–®–ï–ù–ò–ï 1")
        print("=" * 60)
        print("üéØ –¶–µ–ª—å: A+ –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞ –∑–∞ 3 —á–∞—Å–∞")
        print("=" * 60)
        
        start_time = datetime.now()
        
        try:
            # –§–∞–∑–∞ 0: –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è
            self.create_backup()
            
            # –§–∞–∑–∞ 1: –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –∏–º–ø–æ—Ä—Ç—ã
            self.phase1_move_imports()
            
            # –§–∞–∑–∞ 2: –£–±—Ä–∞—Ç—å sys.path.append
            self.phase2_remove_sys_path()
            
            # –§–∞–∑–∞ 3: –ù–∞—Å—Ç—Ä–æ–∏—Ç—å PYTHONPATH
            self.phase3_setup_pythonpath()
            
            # –§–∞–∑–∞ 4: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—à–∏–±–∫–∏
            errors_fixed = self.phase4_check_and_fix_errors()
            
            # –§–∞–∑–∞ 5: Pre-commit hooks
            self.phase5_setup_precommit()
            
            # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            quality_ok = self.run_quality_test()
            
            # –û—Ç—á–µ—Ç
            self.generate_report()
            
            end_time = datetime.now()
            duration = end_time - start_time
            
            print(f"\nüéâ –ü–†–û–¶–ï–°–° –ó–ê–í–ï–†–®–ï–ù!")
            print(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration}")
            print(f"üéØ –ö–∞—á–µ—Å—Ç–≤–æ: {'A+' if quality_ok else '–¢—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏'}")
            print(f"üìÅ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {self.backup_dir}")
            
            if quality_ok:
                print("\n‚úÖ –£–°–ü–ï–•! –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –∫–∞—á–µ—Å—Ç–≤–æ A+")
            else:
                print("\n‚ö†Ô∏è  –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞")
                
        except Exception as e:
            print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
            print(f"üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...")
            if self.backup_dir.exists():
                shutil.rmtree(self.security_dir)
                shutil.copytree(self.backup_dir, self.security_dir)
                print("‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

if __name__ == "__main__":
    fixer = ImportFixer()
    fixer.run_full_process()