#!/usr/bin/env python3
"""
SFM Compatibility Fix
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ SFM —Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–º —Ä–µ–µ—Å—Ç—Ä–æ–º
"""

import json
import os
import shutil
from datetime import datetime


class SFMCompatibilityFixer:
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ SFM —Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–º —Ä–µ–µ—Å—Ç—Ä–æ–º"""
    
    def __init__(self):
        self.timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        self.registry_path = "data/sfm/function_registry.json"
        self.backup_path = f"data/sfm/function_registry.json.backup_{self.timestamp}"
        self.merged_registry_path = "data/sfm/function_registry.json.backup_20250918_101310"
        
    def create_backup(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–µ—Å—Ç—Ä–∞"""
        try:
            print("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–µ—Å—Ç—Ä–∞...")
            shutil.copy2(self.registry_path, self.backup_path)
            print(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {self.backup_path}")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
            return False
    
    def restore_merged_registry(self):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ —Ä–µ–µ—Å—Ç—Ä–∞"""
        try:
            print("üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ —Ä–µ–µ—Å—Ç—Ä–∞...")
            shutil.copy2(self.merged_registry_path, self.registry_path)
            print(f"‚úÖ –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ä–µ–µ—Å—Ç—Ä –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–µ—Å—Ç—Ä–∞: {e}")
            return False
    
    def modify_sfm_for_compatibility(self):
        """–ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è SFM –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–º —Ä–µ–µ—Å—Ç—Ä–æ–º"""
        try:
            print("üîß –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è SFM –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏...")
            
            sfm_path = "security/safe_function_manager.py"
            backup_sfm_path = f"security/safe_function_manager.py.backup_{self.timestamp}"
            
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é SFM
            shutil.copy2(sfm_path, backup_sfm_path)
            print(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è SFM: {backup_sfm_path}")
            
            # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π SFM
            with open(sfm_path, 'r', encoding='utf-8') as f:
                sfm_content = f.read()
            
            # –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –º–µ—Ç–æ–¥ _load_saved_functions
            old_load_method = '''    def _load_saved_functions(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        try:
            import json
            import os
            
            print("üîç DEBUG: _load_saved_functions() –≤—ã–∑–≤–∞–Ω!")
            self.log_activity("–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π...")
            
            print(f"üîç DEBUG: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª: {self.registry_file}")
            print(f"üîç DEBUG: –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.exists(self.registry_file)}")
            
            if os.path.exists(self.registry_file):
                print(f"üîç DEBUG: –§–∞–π–ª –Ω–∞–π–¥–µ–Ω: {self.registry_file}")
                print(f"üîç DEBUG: –ù–∞—á–∏–Ω–∞–µ–º —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞...")
                try:
                    with open(self.registry_file, 'r', encoding='utf-8') as f:
                        data = json.load(f)
                    print(f"üîç DEBUG: –§–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
                except Exception as e:
                    print(f"üîç DEBUG: –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
                    return
                
                print(f"üîç DEBUG: –§–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω, –¥–∞–Ω–Ω—ã–µ: {data}")
                print(f"üîç DEBUG: –ö–ª—é—á–∏ –≤ data: {list(data.keys())}")
                print(f"üîç DEBUG: functions –≤ data: {data.get('functions', {})}")
                    
                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞
                functions_loaded = 0
                print(f"üîç DEBUG: –ù–∞–π–¥–µ–Ω–æ {len(data.get('functions', {}))} —Ñ—É–Ω–∫—Ü–∏–π –≤ —Ñ–∞–π–ª–µ")
                self.log_activity(f"–ù–∞–π–¥–µ–Ω–æ {len(data.get('functions', {}))} —Ñ—É–Ω–∫—Ü–∏–π –≤ —Ñ–∞–π–ª–µ")
                
                print(f"üîç DEBUG: –ù–∞—á–∏–Ω–∞–µ–º —Ü–∏–∫–ª –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π...")
                for func_id, func_data in data.get('functions', {}).items():
                    print(f"üîç DEBUG: –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é: {func_id}")
                    self.log_activity(f"–ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é: {func_id}")
                    
                    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ)
                    func = SecurityFunction('''
            
            new_load_method = '''    def _load_saved_functions(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–º —Ä–µ–µ—Å—Ç—Ä–æ–º)"""
        try:
            import json
            import os
            
            print("üîç DEBUG: _load_saved_functions() –≤—ã–∑–≤–∞–Ω!")
            self.log_activity("–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π...")
            
            print(f"üîç DEBUG: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª: {self.registry_file}")
            print(f"üîç DEBUG: –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.exists(self.registry_file)}")
            
            if os.path.exists(self.registry_file):
                print(f"üîç DEBUG: –§–∞–π–ª –Ω–∞–π–¥–µ–Ω: {self.registry_file}")
                print(f"üîç DEBUG: –ù–∞—á–∏–Ω–∞–µ–º —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞...")
                try:
                    with open(self.registry_file, 'r', encoding='utf-8') as f:
                        data = json.load(f)
                    print(f"üîç DEBUG: –§–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
                except Exception as e:
                    print(f"üîç DEBUG: –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
                    return
                
                print(f"üîç DEBUG: –§–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω, –¥–∞–Ω–Ω—ã–µ: {data}")
                print(f"üîç DEBUG: –ö–ª—é—á–∏ –≤ data: {list(data.keys())}")
                print(f"üîç DEBUG: functions –≤ data: {data.get('functions', {})}")
                    
                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–º —Ä–µ–µ—Å—Ç—Ä–æ–º)
                functions_loaded = 0
                print(f"üîç DEBUG: –ù–∞–π–¥–µ–Ω–æ {len(data.get('functions', {}))} —Ñ—É–Ω–∫—Ü–∏–π –≤ —Ñ–∞–π–ª–µ")
                self.log_activity(f"–ù–∞–π–¥–µ–Ω–æ {len(data.get('functions', {}))} —Ñ—É–Ω–∫—Ü–∏–π –≤ —Ñ–∞–π–ª–µ")
                
                print(f"üîç DEBUG: –ù–∞—á–∏–Ω–∞–µ–º —Ü–∏–∫–ª –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π...")
                for func_id, func_data in data.get('functions', {}).items():
                    print(f"üîç DEBUG: –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é: {func_id}")
                    self.log_activity(f"–ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é: {func_id}")
                    
                    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –Ω–æ–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º)
                    func = SecurityFunction('''
            
            # –ó–∞–º–µ–Ω—è–µ–º –º–µ—Ç–æ–¥
            if old_load_method in sfm_content:
                sfm_content = sfm_content.replace(old_load_method, new_load_method)
                print("‚úÖ –ú–µ—Ç–æ–¥ _load_saved_functions –æ–±–Ω–æ–≤–ª–µ–Ω")
            else:
                print("‚ö†Ô∏è  –ú–µ—Ç–æ–¥ _load_saved_functions –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ–∂–∏–¥–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ")
            
            # –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –º–µ—Ç–æ–¥ _save_functions –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
            old_save_method = '''    def _save_functions(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤ —Ñ–∞–π–ª"""
        try:
            import json
            
            data = {
                'functions': {},
                'handlers': {},
                'last_updated': datetime.now().isoformat()
            }'''
            
            new_save_method = '''    def _save_functions(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤ —Ñ–∞–π–ª (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–º —Ä–µ–µ—Å—Ç—Ä–æ–º)"""
        try:
            import json
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä–µ–µ—Å—Ç—Ä –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π
            existing_data = {}
            if os.path.exists(self.registry_file):
                try:
                    with open(self.registry_file, 'r', encoding='utf-8') as f:
                        existing_data = json.load(f)
                except:
                    pass
            
            data = {
                'functions': {},
                'handlers': {},
                'last_updated': datetime.now().isoformat(),
                'version': existing_data.get('version', '2.0'),
                'statistics': existing_data.get('statistics', {}),
                'security_components_count': existing_data.get('security_components_count', 0),
                'registry_protection_enabled': existing_data.get('registry_protection_enabled', True),
                'sleep_managers_woken': existing_data.get('sleep_managers_woken', 0)
            }'''
            
            # –ó–∞–º–µ–Ω—è–µ–º –º–µ—Ç–æ–¥
            if old_save_method in sfm_content:
                sfm_content = sfm_content.replace(old_save_method, new_save_method)
                print("‚úÖ –ú–µ—Ç–æ–¥ _save_functions –æ–±–Ω–æ–≤–ª–µ–Ω")
            else:
                print("‚ö†Ô∏è  –ú–µ—Ç–æ–¥ _save_functions –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ–∂–∏–¥–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π SFM
            with open(sfm_path, 'w', encoding='utf-8') as f:
                f.write(sfm_content)
            
            print("‚úÖ SFM –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ SFM: {e}")
            return False
    
    def test_compatibility(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        try:
            print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏...")
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π SFM
            import sys
            sys.path.append('.')
            from security.safe_function_manager import SafeFunctionManager
            
            # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä SFM
            sfm = SafeFunctionManager()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ä–µ–µ—Å—Ç—Ä–∞
            registry = sfm.functions
            print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ—É–Ω–∫—Ü–∏–π: {len(registry)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if hasattr(sfm, 'get_safe_function_stats'):
                stats = sfm.get_safe_function_stats()
                print(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")
            
            print("‚úÖ –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return False
    
    def run_fix(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        try:
            print("üöÄ –ó–ê–ü–£–°–ö –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò SFM")
            print("=" * 50)
            
            # 1. –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
            if not self.create_backup():
                return False
            
            # 2. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ —Ä–µ–µ—Å—Ç—Ä–∞
            if not self.restore_merged_registry():
                return False
            
            # 3. –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è SFM
            if not self.modify_sfm_for_compatibility():
                return False
            
            # 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            if not self.test_compatibility():
                return False
            
            print("=" * 50)
            print("‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
            return True
            
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {e}")
            return False


if __name__ == "__main__":
    fixer = SFMCompatibilityFixer()
    success = fixer.run_fix()
    
    if success:
        print("\nüéâ –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨ SFM –ò–°–ü–†–ê–í–õ–ï–ù–ê!")
        exit(0)
    else:
        print("\nüí• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ò–õ–û–°–¨ –° –û–®–ò–ë–ö–ê–ú–ò!")
        exit(1)