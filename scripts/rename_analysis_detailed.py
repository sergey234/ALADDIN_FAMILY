#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è backup —Ñ–∞–π–ª–æ–≤
"""

import os
import re
import json
from pathlib import Path
from datetime import datetime

def analyze_rename_impact():
    """–ê–Ω–∞–ª–∏–∑ –≤–ª–∏—è–Ω–∏—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –Ω–∞ —Å–∏—Å—Ç–µ–º—É"""
    
    print("üîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–ï–†–ï–ò–ú–ï–ù–û–í–ê–ù–ò–Ø BACKUP –§–ê–ô–õ–û–í")
    print("=" * 70)
    
    # –ü—É—Ç–∏
    backup_dir = Path('/Users/sergejhlystov/ALADDIN_NEW/security/formatting_work/backup_files')
    base_dir = Path('/Users/sergejhlystov/ALADDIN_NEW')
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ backup —Ñ–∞–π–ª—ã
    backup_files = []
    for file in backup_dir.glob('*.py'):
        if file.is_file():
            backup_files.append(file)
    
    print(f"üìä –ù–ê–ô–î–ï–ù–û BACKUP –§–ê–ô–õ–û–í: {len(backup_files)}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
    rename_analysis = []
    
    for i, backup_file in enumerate(backup_files, 1):
        print(f"\nüìÅ [{i}] {backup_file.name}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏
        old_name = backup_file.name
        base_name = old_name
        
        # –£–±–∏—Ä–∞–µ–º backup —Å—É—Ñ—Ñ–∏–∫—Å—ã
        for suffix in [
            '_original_backup_20250103',
            '.backup_20250909_212030',
            '.backup_20250909_212748', 
            '.backup_20250909_213215',
            '.backup_20250928_003043',
            '.backup_20250928_002228',
            '.backup_20250927_231340',
            '.backup_20250927_231341',
            '.backup_20250927_231342',
            '.backup_20250927_232629',
            '.backup_20250927_233351',
            '.backup_20250927_234000',
            '.backup_20250927_234616',
            '.backup_20250928_000215',
            '.backup_20250928_003940',
            '.backup_20250928_005946',
            '_before_formatting',
            '.backup_20250926_132307',
            '.backup_20250926_132405',
            '.backup_20250926_133258',
            '.backup_20250926_133317',
            '.backup_20250926_133733',
            '.backup_20250926_133852',
            '.backup_20250927_031442',
            '.backup_011225',
            '_BACKUP',
            '_backup',
            '.backup'
        ]:
            base_name = base_name.replace(suffix, '')
        
        # –í–∞—Ä–∏–∞–Ω—Ç—ã –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
        rename_options = {
            'option_1': base_name.replace('.py', '_enhanced.py'),
            'option_2': base_name.replace('.py', '_alternative.py'),
            'option_3': base_name.replace('.py', '_v2.py'),
            'option_4': base_name.replace('.py', '_extended.py')
        }
        
        print(f"  üîÑ –í–∞—Ä–∏–∞–Ω—Ç—ã –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è:")
        for opt, new_name in rename_options.items():
            print(f"     {opt}: {new_name}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        try:
            with open(backup_file, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –ò—â–µ–º –∫–ª–∞—Å—Å—ã
            classes = re.findall(r'class\s+(\w+)', content)
            # –ò—â–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
            functions = re.findall(r'def\s+(\w+)', content)
            # –ò—â–µ–º –∏–º–ø–æ—Ä—Ç—ã
            imports = re.findall(r'(?:from|import)\s+([\w\.]+)', content)
            
            print(f"  üìä –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {len(classes)} –∫–ª–∞—Å—Å–æ–≤, {len(functions)} —Ñ—É–Ω–∫—Ü–∏–π")
            print(f"  üì¶ –ò–º–ø–æ—Ä—Ç—ã: {len(set(imports))} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –≤–Ω—É—Ç—Ä–∏
            filename_mentions = []
            if old_name.replace('.py', '') in content:
                filename_mentions.append("—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞")
            if base_name.replace('.py', '') in content:
                filename_mentions.append("–±–∞–∑–æ–≤–æ–µ –∏–º—è")
            
            if filename_mentions:
                print(f"  ‚ö†Ô∏è –£–ø–æ–º–∏–Ω–∞–Ω–∏—è: {', '.join(filename_mentions)}")
            
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {e}")
            continue
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
        rename_analysis.append({
            'old_name': old_name,
            'base_name': base_name,
            'rename_options': rename_options,
            'classes': classes,
            'functions': functions,
            'imports': list(set(imports)),
            'filename_mentions': filename_mentions
        })
    
    return rename_analysis

def analyze_sfm_impact():
    """–ê–Ω–∞–ª–∏–∑ –≤–ª–∏—è–Ω–∏—è –Ω–∞ SFM —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"""
    
    print(f"\nüõ°Ô∏è –ê–ù–ê–õ–ò–ó –í–õ–ò–Ø–ù–ò–Ø –ù–ê SFM –†–ï–ì–ò–°–¢–†–ê–¶–ò–Æ")
    print("=" * 50)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º SFM
    sfm_path = Path('/Users/sergejhlystov/ALADDIN_NEW/data/sfm/function_registry.json')
    
    if not sfm_path.exists():
        print("‚ùå SFM —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    with open(sfm_path, 'r', encoding='utf-8') as f:
        sfm_data = json.load(f)
    
    functions = sfm_data.get('functions', {})
    print(f"üìä –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π –≤ SFM: {len(functions)}")
    
    # –ò—â–µ–º —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Å–≤—è–∑–∞–Ω—ã —Å backup —Ñ–∞–π–ª–∞–º–∏
    backup_related_functions = []
    
    for func_name, func_data in functions.items():
        if any(keyword in func_name.lower() for keyword in ['backup', 'alternative', 'enhanced', 'v2', 'extended']):
            backup_related_functions.append({
                'name': func_name,
                'status': func_data.get('status', 'unknown'),
                'category': func_data.get('category', 'unknown')
            })
    
    print(f"üîç –ù–∞–π–¥–µ–Ω–æ —Ñ—É–Ω–∫—Ü–∏–π —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å backup: {len(backup_related_functions)}")
    
    for func in backup_related_functions:
        print(f"  ‚Ä¢ {func['name']} - {func['status']} ({func['category']})")
    
    return backup_related_functions

def analyze_import_dependencies():
    """–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏–º–ø–æ—Ä—Ç–æ–≤"""
    
    print(f"\nüì¶ –ê–ù–ê–õ–ò–ó –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô –ò–ú–ü–û–†–¢–û–í")
    print("=" * 50)
    
    # –ü—É—Ç–∏
    backup_dir = Path('/Users/sergejhlystov/ALADDIN_NEW/security/formatting_work/backup_files')
    base_dir = Path('/Users/sergejhlystov/ALADDIN_NEW')
    
    # –ò—â–µ–º –≤—Å–µ Python —Ñ–∞–π–ª—ã –≤ —Å–∏—Å—Ç–µ–º–µ
    all_python_files = []
    for root, dirs, files in os.walk(base_dir / 'security'):
        if 'formatting_work' in root:
            continue
        for file in files:
            if file.endswith('.py'):
                all_python_files.append(Path(root) / file)
    
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ Python —Ñ–∞–π–ª–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: {len(all_python_files)}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã
    import_analysis = {}
    
    for file_path in all_python_files[:20]:  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 20 —Ñ–∞–π–ª–æ–≤
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –ò—â–µ–º –∏–º–ø–æ—Ä—Ç—ã
            imports = re.findall(r'(?:from|import)\s+([\w\.]+)', content)
            
            for imp in imports:
                if imp not in import_analysis:
                    import_analysis[imp] = []
                import_analysis[imp].append(str(file_path))
        
        except:
            continue
    
    print(f"üì¶ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤: {len(import_analysis)}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-10 –∏–º–ø–æ—Ä—Ç–æ–≤
    top_imports = sorted(import_analysis.items(), key=lambda x: len(x[1]), reverse=True)[:10]
    
    print(f"\nüîù –¢–û–ü-10 –ò–ú–ü–û–†–¢–û–í:")
    for imp, files in top_imports:
        print(f"  ‚Ä¢ {imp} - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ {len(files)} —Ñ–∞–π–ª–∞—Ö")
    
    return import_analysis

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞"""
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
    rename_analysis = analyze_rename_impact()
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º SFM
    sfm_analysis = analyze_sfm_impact()
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    import_analysis = analyze_import_dependencies()
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print(f"\nüí° –ò–¢–û–ì–û–í–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ü–ï–†–ï–ò–ú–ï–ù–û–í–ê–ù–ò–Æ")
    print("=" * 70)
    
    print(f"\n1. üîÑ –í–ê–†–ò–ê–ù–¢–´ –ü–ï–†–ï–ò–ú–ï–ù–û–í–ê–ù–ò–Ø:")
    print(f"   ‚Ä¢ _enhanced.py - –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –≤–µ—Ä—Å–∏–π")
    print(f"   ‚Ä¢ _alternative.py - –¥–ª—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–π")
    print(f"   ‚Ä¢ _v2.py - –¥–ª—è –≤–µ—Ä—Å–∏–π 2.0")
    print(f"   ‚Ä¢ _extended.py - –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –≤–µ—Ä—Å–∏–π")
    
    print(f"\n2. ‚ö†Ô∏è –†–ò–°–ö–ò –ü–ï–†–ï–ò–ú–ï–ù–û–í–ê–ù–ò–Ø:")
    print(f"   ‚Ä¢ –ù–ò–ó–ö–ò–ô –†–ò–°–ö - —Ñ–∞–π–ª—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ backup –ø–∞–ø–∫–µ")
    print(f"   ‚Ä¢ –ù–ò–ó–ö–ò–ô –†–ò–°–ö - –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ")
    print(f"   ‚Ä¢ –ù–ò–ó–ö–ò–ô –†–ò–°–ö - –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ SFM")
    print(f"   ‚Ä¢ –ù–ò–ó–ö–ò–ô –†–ò–°–ö - –∏–º–ø–æ—Ä—Ç—ã –Ω–µ –∏–∑–º–µ–Ω—è—Ç—Å—è")
    
    print(f"\n3. üõ°Ô∏è –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨:")
    print(f"   ‚Ä¢ ‚úÖ –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ–º")
    print(f"   ‚Ä¢ ‚úÖ –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã –≤ backup –ø–∞–ø–∫–µ")
    print(f"   ‚Ä¢ ‚úÖ –ù–µ –∑–∞—Ç—Ä–∞–≥–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—É")
    print(f"   ‚Ä¢ ‚úÖ SFM —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –∏–∑–º–µ–Ω–∏—Ç—Å—è")
    
    print(f"\n4. üîß –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –î–ï–¢–ê–õ–ò:")
    print(f"   ‚Ä¢ –ò–º–ø–æ—Ä—Ç—ã –ù–ï –∏–∑–º–µ–Ω—è—Ç—Å—è (—Ñ–∞–π–ª—ã –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è)")
    print(f"   ‚Ä¢ SFM —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ù–ï –∏–∑–º–µ–Ω–∏—Ç—Å—è (—Ñ–∞–π–ª—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã)")
    print(f"   ‚Ä¢ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ù–ï –∏–∑–º–µ–Ω—è—Ç—Å—è (—Ñ–∞–π–ª—ã –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω—ã)")
    print(f"   ‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ù–ï –ø–æ—Å—Ç—Ä–∞–¥–∞–µ—Ç")
    
    print(f"\n5. üìã –ü–õ–ê–ù –î–ï–ô–°–¢–í–ò–ô:")
    print(f"   1. –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é backup –ø–∞–ø–∫–∏")
    print(f"   2. –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ö–µ–º–µ")
    print(f"   3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã")
    print(f"   4. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ - –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
    analysis_file = Path('/Users/sergejhlystov/ALADDIN_NEW/security/formatting_work/backup_files/RENAME_ANALYSIS.json')
    with open(analysis_file, 'w', encoding='utf-8') as f:
        json.dump({
            'analysis_date': datetime.now().isoformat(),
            'rename_analysis': rename_analysis,
            'sfm_analysis': sfm_analysis,
            'import_analysis': dict(list(import_analysis.items())[:50])  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 50
        }, f, ensure_ascii=False, indent=2, default=str)
    
    print(f"\nüìã –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –°–û–•–†–ê–ù–ï–ù: {analysis_file}")

if __name__ == "__main__":
    main()