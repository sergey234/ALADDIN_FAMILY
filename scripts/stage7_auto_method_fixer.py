#!/usr/bin/env python3
"""
–≠–¢–ê–ü 7: –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ú–ï–¢–û–î–û–í
–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –º–µ—Ç–æ–¥–æ–≤, –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞—Ç—É—Ä, —É–ª—É—á—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
"""

import ast
import sys
import json
import shutil
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Any, Optional

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append('/Users/sergejhlystov/ALADDIN_NEW')

class AutoMethodFixer:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ —É–ª—É—á—à–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤"""
    
    def __init__(self, file_path: str = "security/reactive/recovery_service.py"):
        self.file_path = Path(file_path)
        self.backup_dir = Path("formatting_work")
        self.backup_dir.mkdir(exist_ok=True)
        self.fixes_applied = []
        self.errors = []
        
    def apply_all_fixes(self) -> Dict[str, Any]:
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""
        print("üîß –≠–¢–ê–ü 7: –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ú–ï–¢–û–î–û–í")
        print("=" * 50)
        
        # –°–æ–∑–¥–∞—ë–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        self._create_backup()
        
        # 7.1 - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –º–µ—Ç–æ–¥–æ–≤
        print("üìã 7.1 - –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –î–û–ë–ê–í–õ–ï–ù–ò–ï –û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–• –ú–ï–¢–û–î–û–í:")
        missing_methods_fix = self._add_missing_methods()
        
        # 7.2 - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞—Ç—É—Ä –º–µ—Ç–æ–¥–æ–≤
        print("üìã 7.2 - –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –°–ò–ì–ù–ê–¢–£–† –ú–ï–¢–û–î–û–í:")
        signature_fix = self._fix_method_signatures()
        
        # 7.3 - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤
        print("üìã 7.3 - –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –î–û–ë–ê–í–õ–ï–ù–ò–ï –û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–• –ê–¢–†–ò–ë–£–¢–û–í:")
        attributes_fix = self._add_missing_attributes()
        
        # 7.4 - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è
        print("üìã 7.4 - –ü–†–û–í–ï–†–ö–ê –ö–ê–ñ–î–û–ì–û –£–õ–£–ß–®–ï–ù–ò–Ø:")
        validation_results = self._validate_improvements()
        
        # –°–æ–∑–¥–∞—ë–º –≤–µ—Ä—Å–∏—é "enhanced"
        enhanced_version = self._create_enhanced_version()
        
        return {
            "timestamp": datetime.now().isoformat(),
            "file_path": str(self.file_path),
            "missing_methods_fix": missing_methods_fix,
            "signature_fix": signature_fix,
            "attributes_fix": attributes_fix,
            "validation_results": validation_results,
            "enhanced_version": enhanced_version,
            "fixes_applied": self.fixes_applied,
            "errors": self.errors
        }
    
    def _create_backup(self) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
        try:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            backup_path = self.backup_dir / f"{self.file_path.stem}_before_stage7_{timestamp}.py"
            shutil.copy2(self.file_path, backup_path)
            print(f"   üíæ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")
            return str(backup_path)
        except Exception as e:
            self.errors.append(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
            return ""
    
    def _add_missing_methods(self) -> Dict[str, Any]:
        """7.1 - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –º–µ—Ç–æ–¥–æ–≤"""
        try:
            # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
            with open(self.file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            tree = ast.parse(content)
            
            # –ù–∞—Ö–æ–¥–∏–º –∫–ª–∞—Å—Å RecoveryService
            recovery_service_class = None
            for node in ast.walk(tree):
                if isinstance(node, ast.ClassDef) and node.name == "RecoveryService":
                    recovery_service_class = node
                    break
            
            if not recovery_service_class:
                return {"error": "–ö–ª–∞—Å—Å RecoveryService –Ω–µ –Ω–∞–π–¥–µ–Ω"}
            
            # –°–ø–∏—Å–æ–∫ –º–µ—Ç–æ–¥–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            missing_methods = [
                {
                    "name": "__str__",
                    "code": '''    def __str__(self) -> str:
        """–°—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
        return f"RecoveryService(name={self.name}, status={self.status})"'''
                },
                {
                    "name": "__repr__",
                    "code": '''    def __repr__(self) -> str:
        """–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
        return f"RecoveryService(name='{self.name}', config={self.config})"'''
                },
                {
                    "name": "__len__",
                    "code": '''    def __len__(self) -> int:
        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
        try:
            return len(self.recovery_plans) if hasattr(self, 'recovery_plans') else 0
        except Exception:
            return 0'''
                },
                {
                    "name": "__enter__",
                    "code": '''    def __enter__(self):
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä - –≤—Ö–æ–¥"""
        self.logger.info("–í—Ö–æ–¥ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç RecoveryService")
        return self'''
                },
                {
                    "name": "__exit__",
                    "code": '''    def __exit__(self, exc_type, exc_val, exc_tb):
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä - –≤—ã—Ö–æ–¥"""
        if exc_type:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ RecoveryService: {exc_val}")
        else:
            self.logger.info("–í—ã—Ö–æ–¥ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ RecoveryService")
        return False'''
                },
                {
                    "name": "validate_recovery_plan",
                    "code": '''    def validate_recovery_plan(self, plan: 'RecoveryPlan') -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–ª–∞–Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
        try:
            if not plan or not hasattr(plan, 'plan_id'):
                return False
            
            if not plan.recovery_tasks or len(plan.recovery_tasks) == 0:
                self.logger.warning("–ü–ª–∞–Ω –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–¥–∞—á")
                return False
            
            if plan.estimated_duration <= 0:
                self.logger.warning("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
                return False
            
            self.logger.info(f"–ü–ª–∞–Ω –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è {plan.plan_id} –ø—Ä–æ—à—ë–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é")
            return True
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            return False'''
                },
                {
                    "name": "get_recovery_statistics",
                    "code": '''    def get_recovery_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
        try:
            stats = {
                "total_plans": len(self.recovery_plans) if hasattr(self, 'recovery_plans') else 0,
                "completed_plans": 0,
                "failed_plans": 0,
                "average_duration": 0.0,
                "success_rate": 0.0
            }
            
            if hasattr(self, 'recovery_plans') and self.recovery_plans:
                completed = sum(1 for plan in self.recovery_plans if getattr(plan, 'status', '') == 'completed')
                failed = sum(1 for plan in self.recovery_plans if getattr(plan, 'status', '') == 'failed')
                
                stats["completed_plans"] = completed
                stats["failed_plans"] = failed
                stats["success_rate"] = (completed / len(self.recovery_plans)) * 100 if self.recovery_plans else 0
                
                durations = [getattr(plan, 'estimated_duration', 0) for plan in self.recovery_plans]
                stats["average_duration"] = sum(durations) / len(durations) if durations else 0
            
            return stats
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {"error": str(e)}'''
                },
                {
                    "name": "cleanup_old_plans",
                    "code": '''    def cleanup_old_plans(self, days_old: int = 30) -> int:
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ø–ª–∞–Ω–æ–≤ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
        try:
            if not hasattr(self, 'recovery_plans') or not self.recovery_plans:
                return 0
            
            from datetime import datetime, timedelta
            cutoff_date = datetime.now() - timedelta(days=days_old)
            
            old_plans = []
            for plan in self.recovery_plans[:]:  # –ö–æ–ø–∏—è —Å–ø–∏—Å–∫–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
                plan_date = getattr(plan, 'created_at', None)
                if plan_date and plan_date < cutoff_date:
                    old_plans.append(plan)
                    self.recovery_plans.remove(plan)
            
            self.logger.info(f"–£–¥–∞–ª–µ–Ω–æ {len(old_plans)} —Å—Ç–∞—Ä—ã—Ö –ø–ª–∞–Ω–æ–≤ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
            return len(old_plans)
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –ø–ª–∞–Ω–æ–≤: {e}")
            return 0'''
                }
            ]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ –º–µ—Ç–æ–¥—ã —É–∂–µ –µ—Å—Ç—å
            existing_methods = set()
            for node in recovery_service_class.body:
                if isinstance(node, ast.FunctionDef):
                    existing_methods.add(node.name)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –º–µ—Ç–æ–¥—ã
            methods_to_add = []
            for method in missing_methods:
                if method["name"] not in existing_methods:
                    methods_to_add.append(method)
                    print(f"   ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥: {method['name']}")
                else:
                    print(f"   ‚ö†Ô∏è –ú–µ—Ç–æ–¥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {method['name']}")
            
            if methods_to_add:
                # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥—ã –≤ –∫–æ–Ω–µ—Ü –∫–ª–∞—Å—Å–∞
                new_content = content
                for method in methods_to_add:
                    # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Ç–æ–¥ –≤ –∫–ª–∞—Å—Å–µ
                    class_end = new_content.rfind("    def _generate_report_id(self):")
                    if class_end != -1:
                        # –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω–µ—Ü —ç—Ç–æ–≥–æ –º–µ—Ç–æ–¥–∞
                        method_end = new_content.find("\n\n", class_end)
                        if method_end == -1:
                            method_end = len(new_content)
                        
                        # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥
                        new_content = (new_content[:method_end] + 
                                     "\n\n" + method["code"] + 
                                     new_content[method_end:])
                        
                        self.fixes_applied.append(f"–î–æ–±–∞–≤–ª–µ–Ω –º–µ—Ç–æ–¥: {method['name']}")
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Ñ–∞–π–ª
                with open(self.file_path, 'w', encoding='utf-8') as f:
                    f.write(new_content)
                
                print(f"   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –º–µ—Ç–æ–¥–æ–≤: {len(methods_to_add)}")
            else:
                print("   ‚ÑπÔ∏è –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–µ—Ç–æ–¥—ã —É–∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            
            return {
                "methods_added": len(methods_to_add),
                "methods_list": [m["name"] for m in methods_to_add],
                "existing_methods": len(existing_methods)
            }
            
        except Exception as e:
            self.errors.append(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Ç–æ–¥–æ–≤: {e}")
            return {"error": str(e)}
    
    def _fix_method_signatures(self) -> Dict[str, Any]:
        """7.2 - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞—Ç—É—Ä –º–µ—Ç–æ–¥–æ–≤"""
        try:
            print("   üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞—Ç—É—Ä –º–µ—Ç–æ–¥–æ–≤...")
            
            # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
            with open(self.file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            tree = ast.parse(content)
            
            # –ù–∞—Ö–æ–¥–∏–º –∫–ª–∞—Å—Å RecoveryService
            recovery_service_class = None
            for node in ast.walk(tree):
                if isinstance(node, ast.ClassDef) and node.name == "RecoveryService":
                    recovery_service_class = node
                    break
            
            if not recovery_service_class:
                return {"error": "–ö–ª–∞—Å—Å RecoveryService –Ω–µ –Ω–∞–π–¥–µ–Ω"}
            
            signature_fixes = []
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥—ã –Ω–∞ –Ω–∞–ª–∏—á–∏–µ type hints
            for node in recovery_service_class.body:
                if isinstance(node, ast.FunctionDef):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–π —Ç–∏–ø
                    if not node.returns:
                        if node.name.startswith('_'):
                            # –î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç—ã–µ —Ç–∏–ø—ã
                            if 'bool' in node.name.lower() or 'check' in node.name.lower():
                                signature_fixes.append(f"–î–æ–±–∞–≤–∏—Ç—å -> bool –¥–ª—è {node.name}")
                            elif 'list' in node.name.lower() or 'get' in node.name.lower():
                                signature_fixes.append(f"–î–æ–±–∞–≤–∏—Ç—å -> List –¥–ª—è {node.name}")
                            elif 'dict' in node.name.lower() or 'create' in node.name.lower():
                                signature_fixes.append(f"–î–æ–±–∞–≤–∏—Ç—å -> Dict –¥–ª—è {node.name}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –Ω–∞ type hints
                    for arg in node.args.args:
                        if arg.annotation is None and arg.arg != 'self':
                            signature_fixes.append(f"–î–æ–±–∞–≤–∏—Ç—å type hint –¥–ª—è –∞—Ä–≥—É–º–µ–Ω—Ç–∞ {arg.arg} –≤ {node.name}")
            
            print(f"   üìä –ù–∞–π–¥–µ–Ω–æ —É–ª—É—á—à–µ–Ω–∏–π —Å–∏–≥–Ω–∞—Ç—É—Ä: {len(signature_fixes)}")
            for fix in signature_fixes[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                print(f"      - {fix}")
            
            return {
                "signature_improvements": len(signature_fixes),
                "improvements_list": signature_fixes
            }
            
        except Exception as e:
            self.errors.append(f"–û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏–≥–Ω–∞—Ç—É—Ä: {e}")
            return {"error": str(e)}
    
    def _add_missing_attributes(self) -> Dict[str, Any]:
        """7.3 - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤"""
        try:
            print("   üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –∫–ª–∞—Å—Å–∞...")
            
            # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
            with open(self.file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            tree = ast.parse(content)
            
            # –ù–∞—Ö–æ–¥–∏–º –∫–ª–∞—Å—Å RecoveryService
            recovery_service_class = None
            for node in ast.walk(tree):
                if isinstance(node, ast.ClassDef) and node.name == "RecoveryService":
                    recovery_service_class = node
                    break
            
            if not recovery_service_class:
                return {"error": "–ö–ª–∞—Å—Å RecoveryService –Ω–µ –Ω–∞–π–¥–µ–Ω"}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º __init__ –º–µ—Ç–æ–¥
            init_method = None
            for node in recovery_service_class.body:
                if isinstance(node, ast.FunctionDef) and node.name == "__init__":
                    init_method = node
                    break
            
            if not init_method:
                return {"error": "–ú–µ—Ç–æ–¥ __init__ –Ω–µ –Ω–∞–π–¥–µ–Ω"}
            
            # –°–ø–∏—Å–æ–∫ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            missing_attributes = [
                "recovery_plans",
                "recovery_reports", 
                "recovery_statistics",
                "last_cleanup_date"
            ]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ –∞—Ç—Ä–∏–±—É—Ç—ã —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
            existing_attributes = set()
            for node in init_method.body:
                if isinstance(node, ast.Assign):
                    for target in node.targets:
                        if isinstance(target, ast.Attribute) and isinstance(target.value, ast.Name) and target.value.id == 'self':
                            existing_attributes.add(target.attr)
            
            attributes_to_add = []
            for attr in missing_attributes:
                if attr not in existing_attributes:
                    attributes_to_add.append(attr)
                    print(f"   ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç: {attr}")
                else:
                    print(f"   ‚ö†Ô∏è –ê—Ç—Ä–∏–±—É—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {attr}")
            
            if attributes_to_add:
                # –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –≤ __init__
                init_content = content[init_method.lineno-1:init_method.end_lineno]
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –ø–µ—Ä–µ–¥ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–æ–π __init__
                new_attributes = []
                for attr in attributes_to_add:
                    if attr == "recovery_plans":
                        new_attributes.append("        self.recovery_plans = []  # –°–ø–∏—Å–æ–∫ –ø–ª–∞–Ω–æ–≤ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
                    elif attr == "recovery_reports":
                        new_attributes.append("        self.recovery_reports = []  # –°–ø–∏—Å–æ–∫ –æ—Ç—á—ë—Ç–æ–≤ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
                    elif attr == "recovery_statistics":
                        new_attributes.append("        self.recovery_statistics = {}  # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
                    elif attr == "last_cleanup_date":
                        new_attributes.append("        self.last_cleanup_date = None  # –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—á–∏—Å—Ç–∫–∏")
                
                # –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ (–ø–µ—Ä–µ–¥ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–æ–π __init__)
                lines = content.split('\n')
                init_start = init_method.lineno - 1
                init_end = init_method.end_lineno
                
                # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É —Å –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ–º –≤ __init__
                last_assign_line = init_end - 1
                for i in range(init_end - 1, init_start, -1):
                    if 'self.' in lines[i-1] and '=' in lines[i-1]:
                        last_assign_line = i
                        break
                
                # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
                for attr_code in new_attributes:
                    lines.insert(last_assign_line, attr_code)
                    last_assign_line += 1
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Ñ–∞–π–ª
                new_content = '\n'.join(lines)
                with open(self.file_path, 'w', encoding='utf-8') as f:
                    f.write(new_content)
                
                print(f"   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –∞—Ç—Ä–∏–±—É—Ç–æ–≤: {len(attributes_to_add)}")
                self.fixes_applied.extend([f"–î–æ–±–∞–≤–ª–µ–Ω –∞—Ç—Ä–∏–±—É—Ç: {attr}" for attr in attributes_to_add])
            else:
                print("   ‚ÑπÔ∏è –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã —É–∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            
            return {
                "attributes_added": len(attributes_to_add),
                "attributes_list": attributes_to_add,
                "existing_attributes": len(existing_attributes)
            }
            
        except Exception as e:
            self.errors.append(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞—Ç—Ä–∏–±—É—Ç–æ–≤: {e}")
            return {"error": str(e)}
    
    def _validate_improvements(self) -> Dict[str, Any]:
        """7.4 - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è"""
        try:
            print("   üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–ª—É—á—à–µ–Ω–∏–π...")
            
            validation_results = {
                "syntax_check": False,
                "import_check": False,
                "functionality_check": False,
                "flake8_check": False
            }
            
            # 7.4.1 - –¢–µ—Å—Ç —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
            try:
                import subprocess
                result = subprocess.run(['python3', '-m', 'py_compile', str(self.file_path)], 
                                      capture_output=True, text=True, timeout=30)
                if result.returncode == 0:
                    validation_results["syntax_check"] = True
                    print("      ‚úÖ –°–∏–Ω—Ç–∞–∫—Å–∏—Å: –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
                else:
                    print(f"      ‚ùå –°–∏–Ω—Ç–∞–∫—Å–∏—Å: {result.stderr}")
            except Exception as e:
                print(f"      ‚ùå –°–∏–Ω—Ç–∞–∫—Å–∏—Å: {e}")
            
            # 7.4.2 - –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤
            try:
                result = subprocess.run(['python3', '-c', f'import sys; sys.path.append("/Users/sergejhlystov/ALADDIN_NEW"); from security.reactive.recovery_service import RecoveryService'], 
                                      capture_output=True, text=True, timeout=30)
                if result.returncode == 0:
                    validation_results["import_check"] = True
                    print("      ‚úÖ –ò–º–ø–æ—Ä—Ç—ã: —Ä–∞–±–æ—Ç–∞—é—Ç")
                else:
                    print(f"      ‚ùå –ò–º–ø–æ—Ä—Ç—ã: {result.stderr}")
            except Exception as e:
                print(f"      ‚ùå –ò–º–ø–æ—Ä—Ç—ã: {e}")
            
            # 7.4.3 - –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
            try:
                sys.path.append('/Users/sergejhlystov/ALADDIN_NEW')
                from security.reactive.recovery_service import RecoveryService
                
                # –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä
                service = RecoveryService("test_service", {})
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã
                str_repr = str(service)
                repr_repr = repr(service)
                length = len(service)
                stats = service.get_recovery_statistics()
                
                validation_results["functionality_check"] = True
                print("      ‚úÖ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: —Ä–∞–±–æ—Ç–∞–µ—Ç")
                print(f"         - __str__: {str_repr}")
                print(f"         - __len__: {length}")
                print(f"         - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {len(stats)} –ø–æ–ª–µ–π")
                
            except Exception as e:
                print(f"      ‚ùå –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {e}")
            
            # 7.4.4 - –¢–µ—Å—Ç flake8
            try:
                result = subprocess.run(['python3', '-m', 'flake8', str(self.file_path)], 
                                      capture_output=True, text=True, timeout=30)
                if result.returncode == 0:
                    validation_results["flake8_check"] = True
                    print("      ‚úÖ Flake8: 0 –æ—à–∏–±–æ–∫")
                else:
                    error_count = len(result.stdout.split('\n')) - 1
                    print(f"      ‚ö†Ô∏è Flake8: {error_count} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π")
            except Exception as e:
                print(f"      ‚ùå Flake8: {e}")
            
            return validation_results
            
        except Exception as e:
            self.errors.append(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
            return {"error": str(e)}
    
    def _create_enhanced_version(self) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ 'enhanced'"""
        try:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            enhanced_path = self.backup_dir / f"{self.file_path.stem}_enhanced_{timestamp}.py"
            shutil.copy2(self.file_path, enhanced_path)
            print(f"   üìÑ –°–æ–∑–¥–∞–Ω–∞ –≤–µ—Ä—Å–∏—è 'enhanced': {enhanced_path}")
            return str(enhanced_path)
        except Exception as e:
            self.errors.append(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è enhanced –≤–µ—Ä—Å–∏–∏: {e}")
            return ""
    
    def save_fix_report(self) -> str:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á—ë—Ç–∞ –æ–± –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö"""
        try:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            report_path = self.backup_dir / f"stage7_fix_report_{timestamp}.json"
            
            report = {
                "timestamp": datetime.now().isoformat(),
                "file_path": str(self.file_path),
                "fixes_applied": self.fixes_applied,
                "errors": self.errors,
                "total_fixes": len(self.fixes_applied)
            }
            
            with open(report_path, 'w', encoding='utf-8') as f:
                json.dump(report, f, indent=2, ensure_ascii=False)
            
            print(f"\nüìÑ –û—Ç—á—ë—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {report_path}")
            return str(report_path)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á—ë—Ç–∞: {e}")
            return ""

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    fixer = AutoMethodFixer()
    results = fixer.apply_all_fixes()
    
    print(f"\nüìä –ò–¢–û–ì–ò –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô:")
    print(f"   ‚Ä¢ –ü—Ä–∏–º–µ–Ω–µ–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {len(fixer.fixes_applied)}")
    print(f"   ‚Ä¢ –û—à–∏–±–æ–∫: {len(fixer.errors)}")
    
    if fixer.fixes_applied:
        print(f"\n‚úÖ –ü–†–ò–ú–ï–ù–Å–ù–ù–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:")
        for fix in fixer.fixes_applied:
            print(f"   - {fix}")
    
    if fixer.errors:
        print(f"\n‚ùå –û–®–ò–ë–ö–ò:")
        for error in fixer.errors:
            print(f"   - {error}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á—ë—Ç
    report_path = fixer.save_fix_report()
    
    print(f"\n‚úÖ –≠–¢–ê–ü 7 –ó–ê–í–ï–†–®–Å–ù!")
    print(f"üìÑ –û—Ç—á—ë—Ç: {report_path}")

if __name__ == "__main__":
    main()