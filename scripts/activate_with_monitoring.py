#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –ø–∞–∫–µ—Ç–∞–º–∏ –ø–æ 10 –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –ø–∞–∫–µ—Ç–∞
"""

import sys
import os
import time
import psutil
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from security.safe_function_manager import SafeFunctionManager

def get_system_stats():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤"""
    cpu = psutil.cpu_percent(interval=0.1)
    ram = psutil.virtual_memory()
    
    return {
        'cpu_percent': cpu,
        'ram_percent': ram.percent,
        'ram_used_gb': ram.used / (1024**3),
        'ram_total_gb': ram.total / (1024**3),
        'ram_available_gb': ram.available / (1024**3)
    }

def get_sfm_performance(sfm_instance):
    """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ SFM"""
    try:
        start_time = time.time()
        for i in range(10):
            _ = list(sfm_instance.functions.keys())
            critical_functions = []
            for func_id, func_obj in sfm_instance.functions.items():
                if getattr(func_obj, 'is_critical', False):
                    critical_functions.append(func_id)
        end_time = time.time()
        
        avg_response = (end_time - start_time) / 10
        operations_per_sec = 10 / (end_time - start_time)
        
        return {
            'avg_response_ms': avg_response * 1000,
            'operations_per_sec': operations_per_sec
        }
    except Exception as e:
        return None

def get_function_stats(sfm_instance):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π"""
    total_functions = len(sfm_instance.functions)
    active_count = 0
    sleeping_count = 0
    critical_count = 0
    critical_sleeping_count = 0

    for func_id, func_obj in sfm_instance.functions.items():
        status_str = str(getattr(func_obj, 'status', 'UNKNOWN')).upper()
        is_critical = getattr(func_obj, 'is_critical', False)

        if 'ACTIVE' in status_str:
            active_count += 1
        elif 'SLEEPING' in status_str:
            sleeping_count += 1

        if is_critical:
            critical_count += 1
            if 'SLEEPING' in status_str:
                critical_sleeping_count += 1

    return {
        'total_functions': total_functions,
        'active_count': active_count,
        'sleeping_count': sleeping_count,
        'critical_count': critical_count,
        'critical_sleeping_count': critical_sleeping_count
    }

def print_status(sfm_instance, batch_num, activated_count):
    """–í—ã–≤–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
    print("=" * 60)
    print(f"üì¶ –ü–ê–ö–ï–¢ {batch_num}: –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ {activated_count} —Ñ—É–Ω–∫—Ü–∏–π")
    print("=" * 60)
    
    # –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
    sys_stats = get_system_stats()
    print(f"üíª CPU: {sys_stats['cpu_percent']:.1f}%")
    print(f"üíæ RAM: {sys_stats['ram_percent']:.1f}% ({sys_stats['ram_used_gb']:.2f}GB / {sys_stats['ram_total_gb']:.2f}GB)")
    print(f"üìä –î–æ—Å—Ç—É–ø–Ω–æ RAM: {sys_stats['ram_available_gb']:.2f}GB")
    
    # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å SFM
    sfm_perf = get_sfm_performance(sfm_instance)
    if sfm_perf:
        print(f"‚ö° SFM –æ—Ç–∫–ª–∏–∫: {sfm_perf['avg_response_ms']:.2f} –º—Å")
        print(f"üöÄ –û–ø–µ—Ä–∞—Ü–∏–π/—Å–µ–∫: {sfm_perf['operations_per_sec']:.0f}")
        
        # –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if sfm_perf['avg_response_ms'] < 1.0:
            print("‚úÖ –û—Ç–ª–∏—á–Ω–æ!")
        elif sfm_perf['avg_response_ms'] < 5.0:
            print("‚úÖ –•–æ—Ä–æ—à–æ")
        else:
            print("‚ö†Ô∏è  –¢—Ä–µ–±—É–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ SFM")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π
    func_stats = get_function_stats(sfm_instance)
    print(f"üì¶ –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π: {func_stats['total_functions']}")
    print(f"üí§ –°–ø—è—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π: {func_stats['sleeping_count']}")
    print(f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–ø—è—â–∏—Ö: {func_stats['critical_sleeping_count']}")
    
    print("=" * 60)

def activate_functions_batch(sfm_instance, function_list, batch_size=10):
    """–ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π –ø–∞–∫–µ—Ç–∞–º–∏"""
    total_activated = 0
    
    for i in range(0, len(function_list), batch_size):
        batch = function_list[i:i+batch_size]
        batch_num = (i // batch_size) + 1
        
        print(f"\nüöÄ –ê–ö–¢–ò–í–ê–¶–ò–Ø –ü–ê–ö–ï–¢–ê {batch_num}")
        print(f"   –§—É–Ω–∫—Ü–∏–π –≤ –ø–∞–∫–µ—Ç–µ: {len(batch)}")
        
        activated_in_batch = 0
        start_time = time.time()
        
        for func_id in batch:
            try:
                if func_id in sfm_instance.functions:
                    func_obj = sfm_instance.functions[func_id]
                    current_status = str(getattr(func_obj, 'status', 'UNKNOWN')).upper()
                    
                    if 'SLEEPING' in current_status:
                        # –ü–æ–ø—ã—Ç–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º wake_function –≤–º–µ—Å—Ç–æ activate_function)
                        sfm_instance.wake_function(func_id)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                        new_status = str(getattr(func_obj, 'status', 'UNKNOWN')).upper()
                        if 'ACTIVE' in new_status:
                            activated_in_batch += 1
                            print(f"   ‚úÖ {func_id}: SLEEPING ‚Üí ACTIVE")
                        else:
                            print(f"   ‚ùå {func_id}: –æ—Å—Ç–∞–ª—Å—è {new_status}")
                    else:
                        print(f"   ‚ÑπÔ∏è  {func_id}: —É–∂–µ {current_status}")
                else:
                    print(f"   ‚ùå {func_id}: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ SFM")
            except Exception as e:
                print(f"   ‚ùå {func_id}: –æ—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ - {e}")
        
        end_time = time.time()
        activation_time = end_time - start_time
        
        print(f"   ‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ: {activated_in_batch}")
        print(f"   ‚è±Ô∏è  –í—Ä–µ–º—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {activation_time:.3f} —Å–µ–∫")
        
        total_activated += activated_in_batch
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –ø–∞–∫–µ—Ç–∞
        print_status(sfm_instance, batch_num, total_activated)
        
        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏
        if i + batch_size < len(function_list):
            print(f"\n‚è∏Ô∏è  –ü–∞—É–∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –ø–∞–∫–µ—Ç–æ–º...")
            time.sleep(2)
    
    return total_activated

def main():
    print("üöÄ –ó–ê–ü–£–°–ö –ê–ö–¢–ò–í–ê–¶–ò–ò –§–£–ù–ö–¶–ò–ô –° –ú–û–ù–ò–¢–û–†–ò–ù–ì–û–ú")
    print()
    
    # –°–ø–∏—Å–æ–∫ 17 –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–ø—è—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
    CRITICAL_SLEEPING_FUNCTIONS = [
        'security_recoveryreport',
        'security_mobileinterface',
        'bot_website',
        'security_healthcheckinterface',
        'security_metricscollectorinterface',
        'security_interfacerequest',
        'security_loadbalancingalgorithminterface',
        'security_interfaceeventrecord',
        'security_interfaceconfig',
        'security_voiceinterface',
        'security_forensicsreport',
        'security_threatreport',
        'security_authenticationinterface',
        'security_webinterface',
        'security_interfaceresponse',
        'security_userinterfacemanager',
        'security_interfacerecord'
    ]
    
    config = {
        'thread_pool_enabled': True,
        'max_thread_pool_workers': 5,
        'async_io_enabled': True,
        'redis_cache_enabled': True,
        'enable_auto_management': False,
        'enable_sleep_mode': False
    }
    
    sfm = SafeFunctionManager('ActivationMonitorSFM', config)
    print(f"‚úÖ SFM –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {len(sfm.functions)} —Ñ—É–Ω–∫—Ü–∏–π")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print_status(sfm, "–ù–ê–ß–ê–õ–¨–ù–ê–Ø", 0)
    
    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–∞–∫–µ—Ç–∞–º–∏ –ø–æ 10
    print(f"\nüéØ –ê–ö–¢–ò–í–ê–¶–ò–Ø {len(CRITICAL_SLEEPING_FUNCTIONS)} –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –§–£–ù–ö–¶–ò–ô...")
    
    try:
        total_activated = activate_functions_batch(sfm, CRITICAL_SLEEPING_FUNCTIONS, 10)
        
        print(f"\nüéâ –ó–ê–í–ï–†–®–ï–ù–û!")
        print(f"üìä –ò—Ç–æ–≥–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ: {total_activated} –∏–∑ {len(CRITICAL_SLEEPING_FUNCTIONS)} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π")
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        func_stats = get_function_stats(sfm)
        print(f"\nüìà –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–ø—è—â–∏—Ö: {func_stats['critical_sleeping_count']}")
        print(f"   üí§ –í—Å–µ–≥–æ —Å–ø—è—â–∏—Ö: {func_stats['sleeping_count']}")
        
        if func_stats['critical_sleeping_count'] == 0:
            print("‚úÖ –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã!")
        else:
            print(f"‚ö†Ô∏è  –û—Å—Ç–∞–ª–æ—Å—å {func_stats['critical_sleeping_count']} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π –≤ —Å–ø—è—â–µ–º —Ä–µ–∂–∏–º–µ")
            
    except KeyboardInterrupt:
        print(f"\n‚èπÔ∏è  –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        func_stats = get_function_stats(sfm)
        print(f"üìä –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –¥–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è: {func_stats['total_functions'] - func_stats['sleeping_count'] - func_stats['active_count']} —Ñ—É–Ω–∫—Ü–∏–π")

if __name__ == "__main__":
    main()