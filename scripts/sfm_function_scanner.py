#!/usr/bin/env python3
"""
üîß –°–ö–ê–ù–ï–† –§–£–ù–ö–¶–ò–ô SFM (Safe Function Manager)
============================================

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –∏—â–µ—Ç –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤ SFM.
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–∫—Ä–∏–ø—Ç—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –Ω–∞—Ö–æ–¥–∏—Ç –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.

–ê–≤—Ç–æ—Ä: AI Assistant
–î–∞—Ç–∞: 2024
–í–µ—Ä—Å–∏—è: 1.0
"""

import os
import re
import json
from pathlib import Path
from collections import defaultdict
from typing import List, Dict, Any

class SFMFunctionScanner:
    """–°–∫–∞–Ω–µ—Ä —Ñ—É–Ω–∫—Ü–∏–π SFM"""
    
    def __init__(self, base_path: str = "."):
        self.base_path = Path(base_path)
        self.exclude_dirs = {
            'backups', 'tests', 'logs', 'formatting_work', 
            '__pycache__', '.git', '.pytest_cache', 'node_modules',
            'venv', 'env', '.env', 'temp', 'tmp'
        }
        self.sfm_functions = []
        self.registration_scripts = []
        self.function_categories = defaultdict(list)

    def should_exclude_path(self, path: Path) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–∫–ª—é—á–∏—Ç—å –ø—É—Ç—å"""
        for part in path.parts:
            if part.lower() in self.exclude_dirs:
                return True
        return False

    def scan_sfm_registration_scripts(self) -> None:
        """–°–∫–∞–Ω–∏—Ä—É–µ—Ç —Å–∫—Ä–∏–ø—Ç—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ SFM"""
        print("üîç –°–∫–∞–Ω–∏—Ä—É—é —Å–∫—Ä–∏–ø—Ç—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ SFM...")
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ SFM —Ñ—É–Ω–∫—Ü–∏–π
        patterns = {
            'register_function': r'register_function\s*\(\s*["\']([^"\']+)["\']',
            'function_id': r'function_id\s*[:=]\s*["\']([^"\']+)["\']',
            'function_name': r'name\s*[:=]\s*["\']([^"\']+)["\']',
            'function_description': r'description\s*[:=]\s*["\']([^"\']+)["\']',
            'function_type': r'type\s*[:=]\s*["\']([^"\']+)["\']',
            'security_level': r'security_level\s*[:=]\s*["\']([^"\']+)["\']',
            'is_critical': r'is_critical\s*[:=]\s*(True|False)',
            'auto_enable': r'auto_enable\s*[:=]\s*(True|False)'
        }
        
        for root, dirs, files in os.walk(self.base_path):
            dirs[:] = [d for d in dirs if d.lower() not in self.exclude_dirs]
            
            for file in files:
                if file.endswith('.py'):
                    file_path = Path(root) / file
                    if not self.should_exclude_path(file_path):
                        self.analyze_sfm_file(file_path, patterns)

    def analyze_sfm_file(self, file_path: Path, patterns: Dict[str, str]) -> None:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–∞–π–ª –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç SFM —Ñ—É–Ω–∫—Ü–∏–π"""
        try:
            with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
                content = f.read()
                lines = content.split('\n')
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª —Å–∫—Ä–∏–ø—Ç–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                is_registration_script = any(keyword in content.lower() for keyword in [
                    'register_function', 'function_id', 'sfm', 'safe_function_manager'
                ])
                
                if is_registration_script:
                    self.registration_scripts.append(str(file_path))
                
                # –ò—â–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
                current_function = {}
                in_function_block = False
                
                for i, line in enumerate(lines):
                    line = line.strip()
                    
                    # –ù–∞—á–∞–ª–æ –±–ª–æ–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏
                    if 'register_function' in line or 'function_id' in line:
                        in_function_block = True
                        current_function = {
                            'file': str(file_path),
                            'line': i + 1,
                            'raw_content': line
                        }
                    
                    # –ü–æ–∏—Å–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
                    if in_function_block:
                        for param, pattern in patterns.items():
                            match = re.search(pattern, line)
                            if match:
                                current_function[param] = match.group(1) if match.groups() else match.group(0)
                        
                        # –ö–æ–Ω–µ—Ü –±–ª–æ–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ (–ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ –Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
                        if not line or ('register_function' in line and current_function.get('function_id')):
                            if current_function.get('function_id'):
                                self.sfm_functions.append(current_function.copy())
                                # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é
                                func_type = current_function.get('function_type', 'unknown')
                                self.function_categories[func_type].append(current_function)
                            current_function = {}
                            in_function_block = False
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {file_path}: {e}")

    def find_functions_by_category(self, category: str) -> List[Dict]:
        """–ù–∞—Ö–æ–¥–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        return self.function_categories.get(category, [])

    def find_critical_functions(self) -> List[Dict]:
        """–ù–∞—Ö–æ–¥–∏—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏"""
        return [func for func in self.sfm_functions if func.get('is_critical') == 'True']

    def find_auto_enabled_functions(self) -> List[Dict]:
        """–ù–∞—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∫–ª—é—á–∞–µ–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏"""
        return [func for func in self.sfm_functions if func.get('auto_enable') == 'True']

    def get_statistics(self) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É SFM —Ñ—É–Ω–∫—Ü–∏–π"""
        stats = {
            'total_functions': len(self.sfm_functions),
            'registration_scripts': len(self.registration_scripts),
            'categories': dict(self.function_categories),
            'critical_functions': len(self.find_critical_functions()),
            'auto_enabled_functions': len(self.find_auto_enabled_functions()),
            'functions_by_file': defaultdict(int),
            'functions_by_type': defaultdict(int)
        }
        
        for func in self.sfm_functions:
            stats['functions_by_file'][func['file']] += 1
            func_type = func.get('function_type', 'unknown')
            stats['functions_by_type'][func_type] += 1
        
        return stats

    def print_detailed_report(self) -> None:
        """–í—ã–≤–æ–¥–∏—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç"""
        stats = self.get_statistics()
        
        print("\nüîß –î–ï–¢–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ SFM –§–£–ù–ö–¶–ò–ô:")
        print("=" * 50)
        
        print(f"üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   üîß –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π: {stats['total_functions']}")
        print(f"   üìÑ –°–∫—Ä–∏–ø—Ç–æ–≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {stats['registration_scripts']}")
        print(f"   ‚ö†Ô∏è  –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π: {stats['critical_functions']}")
        print(f"   üöÄ –ê–≤—Ç–æ–≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π: {stats['auto_enabled_functions']}")
        
        print(f"\nüìÅ –§–£–ù–ö–¶–ò–ò –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú:")
        for category, functions in stats['categories'].items():
            print(f"   {category.upper()}: {len(functions)} —Ñ—É–Ω–∫—Ü–∏–π")
        
        print(f"\nüìÑ –§–£–ù–ö–¶–ò–ò –ü–û –§–ê–ô–õ–ê–ú:")
        for file_path, count in sorted(stats['functions_by_file'].items(), key=lambda x: x[1], reverse=True):
            print(f"   {file_path}: {count} —Ñ—É–Ω–∫—Ü–∏–π")
        
        print(f"\nüè∑Ô∏è  –§–£–ù–ö–¶–ò–ò –ü–û –¢–ò–ü–ê–ú:")
        for func_type, count in sorted(stats['functions_by_type'].items(), key=lambda x: x[1], reverse=True):
            print(f"   {func_type}: {count} —Ñ—É–Ω–∫—Ü–∏–π")

    def print_functions_list(self) -> None:
        """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
        print("\nüìã –°–ü–ò–°–û–ö –í–°–ï–• SFM –§–£–ù–ö–¶–ò–ô:")
        print("=" * 50)
        
        for i, func in enumerate(self.sfm_functions, 1):
            print(f"{i:3d}. {func.get('function_id', 'Unknown')}")
            print(f"     üìÑ –§–∞–π–ª: {func['file']}")
            print(f"     üìù –û–ø–∏—Å–∞–Ω–∏–µ: {func.get('function_description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}")
            print(f"     üè∑Ô∏è  –¢–∏–ø: {func.get('function_type', 'Unknown')}")
            print(f"     üîí –£—Ä–æ–≤–µ–Ω—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {func.get('security_level', 'Unknown')}")
            print(f"     ‚ö†Ô∏è  –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è: {func.get('is_critical', 'Unknown')}")
            print(f"     üöÄ –ê–≤—Ç–æ–≤–∫–ª—é—á–µ–Ω–∏–µ: {func.get('auto_enable', 'Unknown')}")
            print()

    def export_to_json(self, filename: str = "sfm_functions.json") -> str:
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ JSON"""
        data = {
            'timestamp': str(Path().cwd()),
            'statistics': self.get_statistics(),
            'functions': self.sfm_functions,
            'registration_scripts': self.registration_scripts
        }
        
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        
        return filename

    def export_to_txt(self, filename: str = "sfm_functions.txt") -> str:
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª"""
        with open(filename, 'w', encoding='utf-8') as f:
            f.write("üîß –ü–û–õ–ù–´–ô –°–ü–ò–°–û–ö SFM –§–£–ù–ö–¶–ò–ô\n")
            f.write("=" * 50 + "\n\n")
            
            stats = self.get_statistics()
            f.write("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n")
            f.write(f"   –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π: {stats['total_functions']}\n")
            f.write(f"   –°–∫—Ä–∏–ø—Ç–æ–≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {stats['registration_scripts']}\n")
            f.write(f"   –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π: {stats['critical_functions']}\n")
            f.write(f"   –ê–≤—Ç–æ–≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π: {stats['auto_enabled_functions']}\n\n")
            
            f.write("üìã –í–°–ï –§–£–ù–ö–¶–ò–ò:\n")
            for i, func in enumerate(self.sfm_functions, 1):
                f.write(f"{i:3d}. {func.get('function_id', 'Unknown')}\n")
                f.write(f"     –§–∞–π–ª: {func['file']}\n")
                f.write(f"     –û–ø–∏—Å–∞–Ω–∏–µ: {func.get('function_description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}\n")
                f.write(f"     –¢–∏–ø: {func.get('function_type', 'Unknown')}\n")
                f.write(f"     –£—Ä–æ–≤–µ–Ω—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {func.get('security_level', 'Unknown')}\n")
                f.write(f"     –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è: {func.get('is_critical', 'Unknown')}\n")
                f.write(f"     –ê–≤—Ç–æ–≤–∫–ª—é—á–µ–Ω–∏–µ: {func.get('auto_enable', 'Unknown')}\n\n")
        
        return filename

    def run_scan(self) -> None:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        print("üöÄ –ó–ê–ü–£–°–ö –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Ø SFM –§–£–ù–ö–¶–ò–ô")
        print("=" * 40)
        
        # –°–∫–∞–Ω–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
        self.scan_sfm_registration_scripts()
        
        # –í—ã–≤–æ–¥–∏–º –æ—Ç—á–µ—Ç
        self.print_detailed_report()
        
        # –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ —Ñ—É–Ω–∫—Ü–∏–π
        self.print_functions_list()
        
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        json_file = self.export_to_json()
        txt_file = self.export_to_txt()
        
        print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:")
        print(f"   üìÑ JSON: {json_file}")
        print(f"   üìù TXT: {txt_file}")
        print("\nüéâ –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîß –°–ö–ê–ù–ï–† –§–£–ù–ö–¶–ò–ô SFM")
    print("=" * 30)
    
    # –°–æ–∑–¥–∞–µ–º —Å–∫–∞–Ω–µ—Ä
    scanner = SFMFunctionScanner()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    scanner.run_scan()

if __name__ == "__main__":
    main()