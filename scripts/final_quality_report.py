#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –∫–∞—á–µ—Å—Ç–≤—É –∫–æ–¥–∞ SafeFunctionManager
"""

import os
import sys
import subprocess
from datetime import datetime

def generate_final_report():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ –∫–∞—á–µ—Å—Ç–≤—É"""
    print("üìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –ü–û –ö–ê–ß–ï–°–¢–í–£ –ö–û–î–ê SAFEFUNCTIONMANAGER")
    print("=" * 80)
    print(f"üìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    # –ö–ª—é—á–µ–≤—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    key_files = [
        "security/safe_function_manager.py",
        "core/base.py", 
        "security/authentication.py",
        "security/family/child_protection.py",
        "security/security_monitoring.py",
        "security/access_control.py",
        "security/security_policy.py",
        "security/ai_agents/monitor_manager.py",
        "security/bots/notification_bot.py",
        "security/microservices/api_gateway.py"
    ]
    
    total_issues = 0
    issues_by_type = {
        'F': 0,  # Fatal/Error
        'E': 0,  # Error  
        'W': 0,  # Warning
        'C': 0,  # Convention
        'N': 0   # Naming
    }
    
    files_analysis = []
    
    print("üîç –ê–ù–ê–õ–ò–ó –ö–õ–Æ–ß–ï–í–´–• –§–ê–ô–õ–û–í –°–ò–°–¢–ï–ú–´:")
    print("-" * 80)
    
    for file_path in key_files:
        full_path = os.path.join("/Users/sergejhlystov/ALADDIN_NEW", file_path)
        if os.path.exists(full_path):
            print(f"\nüìÑ {file_path}:")
            
            try:
                result = subprocess.run(
                    ['python3', '-m', 'flake8', '--max-line-length=120', full_path],
                    capture_output=True,
                    text=True,
                    timeout=30
                )
                
                if result.returncode == 0:
                    print("   ‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ: A+ (0 –ø—Ä–æ–±–ª–µ–º)")
                    files_analysis.append({
                        'file': file_path,
                        'issues': 0,
                        'grade': 'A+',
                        'problems': []
                    })
                else:
                    output = result.stdout
                    lines = output.split('\n')
                    file_issues = 0
                    file_problems = []
                    
                    # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º
                    for line in lines:
                        if line.strip():
                            file_problems.append(line)
                            if ':' in line and ':' in line.split(':')[1]:
                                parts = line.split(':')
                                if len(parts) >= 3:
                                    error_code = parts[3].strip().split()[0] if parts[3].strip() else ''
                                    if error_code.startswith(('F', 'E', 'W', 'C', 'N')):
                                        category = error_code[0]
                                        issues_by_type[category] += 1
                                        file_issues += 1
                                        total_issues += 1
                    
                    # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Ñ–∞–π–ª–∞
                    if file_issues == 0:
                        grade = "A+"
                        desc = "–û—Ç–ª–∏—á–Ω–æ"
                    elif file_issues <= 5:
                        grade = "A"
                        desc = "–•–æ—Ä–æ—à–æ"
                    elif file_issues <= 15:
                        grade = "B"
                        desc = "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ"
                    elif file_issues <= 30:
                        grade = "C"
                        desc = "–¢—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è"
                    else:
                        grade = "D"
                        desc = "–ö—Ä–∏—Ç–∏—á–Ω–æ"
                    
                    print(f"   üìä –ö–∞—á–µ—Å—Ç–≤–æ: {grade} ({file_issues} –ø—Ä–æ–±–ª–µ–º) - {desc}")
                    
                    files_analysis.append({
                        'file': file_path,
                        'issues': file_issues,
                        'grade': grade,
                        'problems': file_problems[:10]  # –ü–µ—Ä–≤—ã–µ 10 –ø—Ä–æ–±–ª–µ–º
                    })
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –ø—Ä–æ–±–ª–µ–º
                    for i, line in enumerate(file_problems[:5]):
                        if line.strip():
                            print(f"   ‚ö†Ô∏è  {line}")
                    if len(file_problems) > 5:
                        print(f"   ... –∏ –µ—â–µ {len(file_problems) - 5} –ø—Ä–æ–±–ª–µ–º")
                            
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")
        else:
            print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
    
    print()
    print("üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–ê–ß–ï–°–¢–í–ê:")
    print("-" * 80)
    print(f"üîç –í—Å–µ–≥–æ –ø—Ä–æ–±–ª–µ–º –Ω–∞–π–¥–µ–Ω–æ: {total_issues}")
    print(f"üìÅ –§–∞–π–ª–æ–≤ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {len(files_analysis)}")
    print(f"üìÅ –§–∞–π–ª–æ–≤ —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏: {len([f for f in files_analysis if f['issues'] > 0])}")
    print()
    
    if total_issues > 0:
        print("üìã –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú –ü–û –¢–ò–ü–ê–ú:")
        print(f"   üî¥ Fatal/Error (F): {issues_by_type['F']:3d} –ø—Ä–æ–±–ª–µ–º")
        print(f"   ‚ùå Error (E):       {issues_by_type['E']:3d} –ø—Ä–æ–±–ª–µ–º") 
        print(f"   ‚ö†Ô∏è  Warning (W):     {issues_by_type['W']:3d} –ø—Ä–æ–±–ª–µ–º")
        print(f"   üìù Convention (C):  {issues_by_type['C']:3d} –ø—Ä–æ–±–ª–µ–º")
        print(f"   üè∑Ô∏è  Naming (N):     {issues_by_type['N']:3d} –ø—Ä–æ–±–ª–µ–º")
        print()
        
        # –¢–æ–ø –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        files_with_issues = [f for f in files_analysis if f['issues'] > 0]
        files_with_issues.sort(key=lambda x: x['issues'], reverse=True)
        
        if files_with_issues:
            print("üö® –¢–û–ü –ü–†–û–ë–õ–ï–ú–ù–´–• –§–ê–ô–õ–û–í:")
            for i, file_info in enumerate(files_with_issues[:5], 1):
                print(f"   {i}. {file_info['file']:40} | {file_info['grade']:2} | {file_info['issues']:3d} –ø—Ä–æ–±–ª–µ–º")
            print()
        
        # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
        if total_issues < 50:
            overall_grade = "A+"
            overall_desc = "–û—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ"
        elif total_issues < 100:
            overall_grade = "A"
            overall_desc = "–•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ"
        elif total_issues < 200:
            overall_grade = "B"
            overall_desc = "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ"
        elif total_issues < 500:
            overall_grade = "C"
            overall_desc = "–¢—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è"
        else:
            overall_grade = "D"
            overall_desc = "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ"
        
        print(f"üéØ –û–ë–©–ê–Ø –û–¶–ï–ù–ö–ê –°–ò–°–¢–ï–ú–´: {overall_grade} - {overall_desc}")
        print()
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
        print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –£–õ–£–ß–®–ï–ù–ò–Æ:")
        print("-" * 80)
        
        if issues_by_type['F'] > 0:
            print("üö® –ö–†–ò–¢–ò–ß–ù–û: –ò—Å–ø—Ä–∞–≤–∏—Ç—å Fatal –æ—à–∏–±–∫–∏ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ!")
            print("   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–º–ø–æ—Ä—Ç—ã –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
            print("   - –ò—Å–ø—Ä–∞–≤–∏—Ç—å —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏")
            print("   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ")
        
        if issues_by_type['E'] > 0:
            print("‚ùå –í–ê–ñ–ù–û: –ò—Å–ø—Ä–∞–≤–∏—Ç—å Error –ø—Ä–æ–±–ª–µ–º—ã")
            print("   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ")
            print("   - –ò—Å–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏")
            print("   - –î–æ–±–∞–≤–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∏–º–ø–æ—Ä—Ç—ã")
        
        if issues_by_type['W'] > 0:
            print("‚ö†Ô∏è  –†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø: –ò—Å–ø—Ä–∞–≤–∏—Ç—å Warning –ø—Ä–æ–±–ª–µ–º—ã")
            print("   - –£–±—Ä–∞—Ç—å –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –≤ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫–∞—Ö")
            print("   - –ò—Å–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—Å—Ç—É–ø—ã")
            print("   - –£–±—Ä–∞—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ")
        
        if issues_by_type['C'] > 0:
            print("üìù PEP8: –°–ª–µ–¥–æ–≤–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è Python")
            print("   - –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–±–µ–ª—ã –ø–µ—Ä–µ–¥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏")
            print("   - –ò—Å–ø—Ä–∞–≤–∏—Ç—å –¥–ª–∏–Ω—É —Å—Ç—Ä–æ–∫")
            print("   - –°–ª–µ–¥–æ–≤–∞—Ç—å —Å—Ç–∏–ª—é –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è")
        
        if issues_by_type['N'] > 0:
            print("üè∑Ô∏è  –ò–ú–ï–ù–û–í–ê–ù–ò–ï: –£–ª—É—á—à–∏—Ç—å –∏–º–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏ —Ñ—É–Ω–∫—Ü–∏–π")
            print("   - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞")
            print("   - –°–ª–µ–¥–æ–≤–∞—Ç—å –∫–æ–Ω–≤–µ–Ω—Ü–∏—è–º Python")
        
        print()
        print("üîß –ö–û–ù–ö–†–ï–¢–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø:")
        print("   1. –ó–∞–ø—É—Å—Ç–∏—Ç—å: python3 -m flake8 --max-line-length=120 [—Ñ–∞–π–ª]")
        print("   2. –ò—Å–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ F –∏ E –æ—à–∏–±–∫–∏ –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å")
        print("   3. –î–æ–±–∞–≤–∏—Ç—å docstrings –¥–ª—è –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –∏ –∫–ª–∞—Å—Å–æ–≤")
        print("   4. –°–ª–µ–¥–æ–≤–∞—Ç—å PEP8 —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º")
        print("   5. –£–ª—É—á—à–∏—Ç—å —á–∏—Ç–∞–µ–º–æ—Å—Ç—å –∫–æ–¥–∞")
        print("   6. –ü—Ä–æ–≤–µ—Å—Ç–∏ code review")
        
    else:
        print("üèÜ –û–¢–õ–ò–ß–ù–û! –ù–∏–∫–∞–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
        print("   –ö–æ–¥ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤—ã—Å–æ–∫–∏–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –∫–∞—á–µ—Å—Ç–≤–∞ A+")
    
    print()
    print("üìà –ü–õ–ê–ù –£–õ–£–ß–®–ï–ù–ò–Ø –ö–ê–ß–ï–°–¢–í–ê:")
    print("-" * 80)
    print("1. üö® –ù–ï–ú–ï–î–õ–ï–ù–ù–û (0-1 –¥–µ–Ω—å):")
    print("   - –ò—Å–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ Fatal –æ—à–∏–±–∫–∏")
    print("   - –ò—Å–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ Error –ø—Ä–æ–±–ª–µ–º—ã")
    print("   - –î–æ–±–∞–≤–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∏–º–ø–æ—Ä—Ç—ã")
    print()
    print("2. ‚ö†Ô∏è  –ö–†–ê–¢–ö–û–°–†–û–ß–ù–û (1-3 –¥–Ω—è):")
    print("   - –ò—Å–ø—Ä–∞–≤–∏—Ç—å Warning –ø—Ä–æ–±–ª–µ–º—ã")
    print("   - –î–æ–±–∞–≤–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ docstrings")
    print("   - –£–ª—É—á—à–∏—Ç—å —á–∏—Ç–∞–µ–º–æ—Å—Ç—å –∫–æ–¥–∞")
    print("   - –£–±—Ä–∞—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã")
    print()
    print("3. üìù –°–†–ï–î–ù–ï–°–†–û–ß–ù–û (1-2 –Ω–µ–¥–µ–ª–∏):")
    print("   - –ü–æ–ª–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ PEP8")
    print("   - –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ —Å–ª–æ–∂–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π")
    print("   - –£–ª—É—á—à–µ–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã")
    print("   - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤")
    print()
    print("4. üèÜ –î–û–õ–ì–û–°–†–û–ß–ù–û (–ø–æ—Å—Ç–æ—è–Ω–Ω–æ):")
    print("   - –†–µ–≥—É–ª—è—Ä–Ω—ã–µ code reviews")
    print("   - –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞")
    print("   - –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ")
    print("   - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞")
    
    print()
    print("üéØ –¶–ï–õ–ï–í–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò –ö–ê–ß–ï–°–¢–í–ê:")
    print("-" * 80)
    print("üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:")
    print(f"   - –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: {overall_grade if total_issues > 0 else 'A+'}")
    print(f"   - –í—Å–µ–≥–æ –ø—Ä–æ–±–ª–µ–º: {total_issues}")
    print(f"   - –§–∞–π–ª–æ–≤ —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏: {len([f for f in files_analysis if f['issues'] > 0])}")
    print()
    print("üéØ –¶–µ–ª–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:")
    print("   - –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: A+")
    print("   - –í—Å–µ–≥–æ –ø—Ä–æ–±–ª–µ–º: 0-10")
    print("   - –§–∞–π–ª–æ–≤ —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏: 0-2")
    print("   - –ü–æ–∫—Ä—ã—Ç–∏–µ —Ç–µ—Å—Ç–∞–º–∏: >80%")
    print("   - –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ PEP8: 100%")
    
    print()
    print("=" * 80)
    print("‚úÖ –§–ò–ù–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ö–ê–ß–ï–°–¢–í–ê –ó–ê–í–ï–†–®–ï–ù!")
    print("=" * 80)

if __name__ == "__main__":
    generate_final_report()