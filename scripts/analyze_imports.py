#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤ –≤ LoadBalancer
"""

import re
import ast
import sys
from pathlib import Path

def analyze_imports(file_path):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–º–ø–æ—Ä—Ç—ã –≤ —Ñ–∞–π–ª–µ"""
    print(f"üîç –ê–ù–ê–õ–ò–ó –ò–ú–ü–û–†–¢–û–í: {file_path}")
    print("=" * 60)
    
    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –ü–∞—Ä—Å–∏–º AST
    try:
        tree = ast.parse(content)
    except SyntaxError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞: {e}")
        return
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∏–º–ø–æ—Ä—Ç—ã
    imports = []
    for node in ast.walk(tree):
        if isinstance(node, ast.Import):
            for alias in node.names:
                imports.append(alias.name)
        elif isinstance(node, ast.ImportFrom):
            module = node.module or ''
            for alias in node.names:
                imports.append(f"{module}.{alias.name}" if module else alias.name)
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∏–º–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –≤ –∫–æ–¥–µ
    used_names = set()
    for node in ast.walk(tree):
        if isinstance(node, ast.Name):
            used_names.add(node.id)
        elif isinstance(node, ast.Attribute):
            used_names.add(node.attr)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –∏–º–ø–æ—Ä—Ç
    unused_imports = []
    used_imports = []
    
    for imp in imports:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ –∏–º–ø–æ—Ä—Ç
        if '.' in imp:
            # –î–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤ —Ç–∏–ø–∞ "module.name"
            module, name = imp.split('.', 1)
            if name in used_names or module in used_names:
                used_imports.append(imp)
            else:
                unused_imports.append(imp)
        else:
            # –î–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
            if imp in used_names:
                used_imports.append(imp)
            else:
                unused_imports.append(imp)
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print(f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   ‚Ä¢ –í—Å–µ–≥–æ –∏–º–ø–æ—Ä—Ç–æ–≤: {len(imports)}")
    print(f"   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö: {len(used_imports)}")
    print(f"   ‚Ä¢ –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö: {len(unused_imports)}")
    print()
    
    if unused_imports:
        print("‚ùå –ù–ï–ò–°–ü–û–õ–¨–ó–£–ï–ú–´–ï –ò–ú–ü–û–†–¢–´:")
        for imp in sorted(unused_imports):
            print(f"   ‚Ä¢ {imp}")
        print()
    
    if used_imports:
        print("‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú–´–ï –ò–ú–ü–û–†–¢–´:")
        for imp in sorted(used_imports):
            print(f"   ‚Ä¢ {imp}")
        print()
    
    return unused_imports, used_imports

if __name__ == "__main__":
    file_path = "security/microservices/load_balancer.py"
    if len(sys.argv) > 1:
        file_path = sys.argv[1]
    
    unused, used = analyze_imports(file_path)
    
    print("üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    if unused:
        print("   1. –£–¥–∞–ª–∏—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã")
        print("   2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å")
        print("   3. –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã")
    else:
        print("   ‚úÖ –í—Å–µ –∏–º–ø–æ—Ä—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è!")