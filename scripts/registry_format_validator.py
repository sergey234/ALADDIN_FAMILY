#!/usr/bin/env python3
"""
–í–∞–ª–∏–¥–∞—Ç–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ —Ä–µ–µ—Å—Ç—Ä–∞ —Ñ—É–Ω–∫—Ü–∏–π ALADDIN
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –æ—à–∏–±–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
"""

import json
import logging
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Any, Optional, Tuple

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/registry_validation.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class RegistryFormatValidator:
    """–í–∞–ª–∏–¥–∞—Ç–æ—Ä –∏ –∏—Å–ø—Ä–∞–≤–∏—Ç–µ–ª—å —Ñ–æ—Ä–º–∞—Ç–∞ —Ä–µ–µ—Å—Ç—Ä–∞ —Ñ—É–Ω–∫—Ü–∏–π"""
    
    def __init__(self, registry_path: str = "data/sfm/function_registry.json"):
        self.registry_path = Path(registry_path)
        self.validation_log = Path("logs/registry_validation.log")
        
        # –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
        self.validation_log.parent.mkdir(parents=True, exist_ok=True)
        
        logger.info("üîç –í–∞–ª–∏–¥–∞—Ç–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ —Ä–µ–µ—Å—Ç—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def validate_registry(self, registry: Dict[str, Any]) -> Tuple[bool, List[str], Dict[str, Any]]:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–µ—Å—Ç—Ä–∞ —Ñ—É–Ω–∫—Ü–∏–π
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (is_valid, errors, fixed_registry)
        """
        errors = []
        fixed_registry = registry.copy()
        
        try:
            # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è
            if not isinstance(registry, dict):
                errors.append("‚ùå –†–µ–µ—Å—Ç—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä—ë–º")
                return False, errors, registry
            
            # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            required_top_fields = ["functions"]
            for field in required_top_fields:
                if field not in registry:
                    errors.append(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ '{field}'")
                    if field == "functions":
                        fixed_registry[field] = {}
            
            # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—è functions
            if "functions" in registry:
                if not isinstance(registry["functions"], dict):
                    errors.append("‚ùå –ü–æ–ª–µ 'functions' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä—ë–º")
                    fixed_registry["functions"] = {}
                else:
                    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞–∂–¥–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
                    functions_errors, fixed_functions = self._validate_functions(registry["functions"])
                    errors.extend(functions_errors)
                    fixed_registry["functions"] = fixed_functions
            
            # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏
            if "version" not in registry:
                errors.append("‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'version'")
                fixed_registry["version"] = "1.0"
            
            # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            if "last_updated" not in registry:
                errors.append("‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'last_updated'")
                fixed_registry["last_updated"] = datetime.now().isoformat()
            
            # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            if "last_updated" in registry and not self._is_valid_iso_date(registry["last_updated"]):
                errors.append("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã 'last_updated'")
                fixed_registry["last_updated"] = datetime.now().isoformat()
            
            is_valid = len(errors) == 0
            return is_valid, errors, fixed_registry
            
        except Exception as e:
            errors.append(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
            return False, errors, registry
    
    def _validate_functions(self, functions: Dict[str, Any]) -> Tuple[List[str], Dict[str, Any]]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π –≤ —Ä–µ–µ—Å—Ç—Ä–µ"""
        errors = []
        fixed_functions = {}
        
        for func_id, func_data in functions.items():
            if not isinstance(func_data, dict):
                errors.append(f"‚ùå –§—É–Ω–∫—Ü–∏—è '{func_id}' –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä—ë–º")
                continue
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
            func_errors, fixed_func = self._validate_single_function(func_id, func_data)
            errors.extend(func_errors)
            fixed_functions[func_id] = fixed_func
        
        return errors, fixed_functions
    
    def _validate_single_function(self, func_id: str, func_data: Dict[str, Any]) -> Tuple[List[str], Dict[str, Any]]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏"""
        errors = []
        fixed_func = func_data.copy()
        
        # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        required_fields = {
            "name": "string",
            "status": "string"
        }
        
        for field, field_type in required_fields.items():
            if field not in func_data:
                errors.append(f"‚ùå –£ —Ñ—É–Ω–∫—Ü–∏–∏ '{func_id}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ '{field}'")
                if field == "name":
                    fixed_func[field] = func_id.replace("_", " ").title()
                elif field == "status":
                    fixed_func[field] = "unknown"
            else:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –ø–æ–ª—è
                if not isinstance(func_data[field], str):
                    errors.append(f"‚ö†Ô∏è –£ —Ñ—É–Ω–∫—Ü–∏–∏ '{func_id}' –ø–æ–ª–µ '{field}' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π")
                    fixed_func[field] = str(func_data[field])
        
        # –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –ø–æ–ª—è
        recommended_fields = {
            "description": "–û–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏",
            "function_type": "ai_agent",
            "security_level": "medium",
            "is_critical": False,
            "created_at": datetime.now().isoformat()
        }
        
        for field, default_value in recommended_fields.items():
            if field not in func_data:
                errors.append(f"‚ö†Ô∏è –£ —Ñ—É–Ω–∫—Ü–∏–∏ '{func_id}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –ø–æ–ª–µ '{field}'")
                fixed_func[field] = default_value
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏–π
        if "status" in fixed_func:
            valid_statuses = ["active", "inactive", "disabled", "running", "stopped", "unknown"]
            if fixed_func["status"] not in valid_statuses:
                errors.append(f"‚ö†Ô∏è –£ —Ñ—É–Ω–∫—Ü–∏–∏ '{func_id}' –Ω–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å '{fixed_func['status']}'")
                fixed_func["status"] = "unknown"
        
        if "security_level" in fixed_func:
            valid_levels = ["low", "medium", "high", "critical"]
            if fixed_func["security_level"] not in valid_levels:
                errors.append(f"‚ö†Ô∏è –£ —Ñ—É–Ω–∫—Ü–∏–∏ '{func_id}' –Ω–µ–≤–µ—Ä–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ '{fixed_func['security_level']}'")
                fixed_func["security_level"] = "medium"
        
        return errors, fixed_func
    
    def _is_valid_iso_date(self, date_string: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ ISO –¥–∞—Ç—ã"""
        try:
            datetime.fromisoformat(date_string.replace('Z', '+00:00'))
            return True
        except ValueError:
            return False
    
    def fix_registry_format(self, registry: Dict[str, Any]) -> Tuple[bool, Dict[str, Any], List[str]]:
        """
        –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ —Ä–µ–µ—Å—Ç—Ä–∞
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (success, fixed_registry, errors)
        """
        try:
            is_valid, errors, fixed_registry = self.validate_registry(registry)
            
            if not is_valid:
                logger.warning(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(errors)} –æ—à–∏–±–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ä–µ–µ—Å—Ç—Ä–∞")
                for error in errors:
                    logger.warning(f"   {error}")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            self._log_validation_results(errors, fixed_registry)
            
            return True, fixed_registry, errors
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞: {e}")
            return False, registry, [f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}"]
    
    def _log_validation_results(self, errors: List[str], fixed_registry: Dict[str, Any]) -> None:
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        log_entry = {
            "timestamp": datetime.now().isoformat(),
            "action": "format_validation",
            "errors_count": len(errors),
            "errors": errors,
            "functions_count": len(fixed_registry.get("functions", {}))
        }
        
        try:
            with open(self.validation_log, 'a', encoding='utf-8') as f:
                f.write(json.dumps(log_entry, ensure_ascii=False) + '\n')
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
    
    def validate_file(self) -> Tuple[bool, Dict[str, Any], List[str]]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞ —Ä–µ–µ—Å—Ç—Ä–∞"""
        try:
            if not self.registry_path.exists():
                logger.error(f"‚ùå –§–∞–π–ª —Ä–µ–µ—Å—Ç—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.registry_path}")
                return False, {}, ["–§–∞–π–ª —Ä–µ–µ—Å—Ç—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"]
            
            with open(self.registry_path, 'r', encoding='utf-8') as f:
                registry = json.load(f)
            
            return self.fix_registry_format(registry)
            
        except json.JSONDecodeError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            return False, {}, [f"–û—à–∏–±–∫–∞ JSON: {e}"]
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            return False, {}, [f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {e}"]
    
    def get_validation_report(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á—ë—Ç–∞ –æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        success, registry, errors = self.validate_file()
        
        return {
            "validation_success": success,
            "errors_count": len(errors),
            "functions_count": len(registry.get("functions", {})),
            "registry_path": str(self.registry_path),
            "last_validation": datetime.now().isoformat(),
            "errors": errors
        }

def main():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞"""
    print("üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–ê–õ–ò–î–ê–¢–û–†–ê –§–û–†–ú–ê–¢–ê –†–ï–ï–°–¢–†–ê")
    print("=" * 50)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞
    validator = RegistryFormatValidator()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
    success, registry, errors = validator.validate_file()
    
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏:")
    print(f"   ‚Ä¢ –£—Å–ø–µ—à–Ω–æ: {'‚úÖ' if success else '‚ùå'}")
    print(f"   ‚Ä¢ –û—à–∏–±–æ–∫: {len(errors)}")
    print(f"   ‚Ä¢ –§—É–Ω–∫—Ü–∏–π: {len(registry.get('functions', {}))}")
    
    if errors:
        print(f"\n‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏:")
        for i, error in enumerate(errors, 1):
            print(f"   {i}. {error}")
    
    # –û—Ç—á—ë—Ç
    report = validator.get_validation_report()
    print(f"\nüìã –û—Ç—á—ë—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏:")
    print(f"   ‚Ä¢ –ü—É—Ç—å –∫ —Ä–µ–µ—Å—Ç—Ä—É: {report['registry_path']}")
    print(f"   ‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –≤–∞–ª–∏–¥–∞—Ü–∏—è: {report['last_validation']}")
    print(f"   ‚Ä¢ –õ–æ–≥ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {validator.validation_log}")

if __name__ == "__main__":
    main()