#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ - –±–µ–∑ —Å–ª–æ–∂–Ω–æ–π –ª–æ–≥–∏–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
"""

import os
import json
from pathlib import Path
from datetime import datetime

def final_find_all_files():
    """–ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ Python —Ñ–∞–π–ª—ã –±–µ–∑ —Å–ª–æ–∂–Ω–æ–π –ª–æ–≥–∏–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è"""
    print("üîç –§–ò–ù–ê–õ–¨–ù–´–ô –ü–û–ò–°–ö –í–°–ï–• –§–ê–ô–õ–û–í")
    print("=" * 50)
    
    base_dir = Path.cwd()
    print(f"üìÅ –ë–∞–∑–æ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {base_dir}")
    
    all_files = []
    
    # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –≤—Å–µ—Ö .py —Ñ–∞–π–ª–æ–≤
    for root, dirs, files in os.walk(base_dir):
        # –ò—Å–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—á–µ–≤–∏–¥–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        dirs[:] = [d for d in dirs if d not in ['__pycache__', '.git', 'node_modules']]
        
        for file in files:
            if file.endswith('.py'):
                file_path = Path(root) / file
                try:
                    rel_path = file_path.relative_to(base_dir)
                    
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª—ã —Å backup –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
                    if 'backup' in file.lower():
                        continue
                    
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö —Å backup
                    if any(part.lower().startswith('backup') for part in rel_path.parts):
                        continue
                    
                    file_info = {
                        'path': str(rel_path),
                        'name': file,
                        'stem': Path(file).stem,
                        'size_bytes': file_path.stat().st_size,
                        'size_kb': round(file_path.stat().st_size / 1024, 1)
                    }
                    
                    all_files.append(file_info)
                    
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
                    continue
    
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(all_files)} Python —Ñ–∞–π–ª–æ–≤")
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º
    directories = {}
    for file_info in all_files:
        path_parts = Path(file_info['path']).parts
        if len(path_parts) > 1:
            dir_name = path_parts[0]
        else:
            dir_name = "ROOT"
        
        if dir_name not in directories:
            directories[dir_name] = []
        directories[dir_name].append(file_info)
    
    print(f"\nüìÇ –§–ê–ô–õ–´ –ü–û –î–ò–†–ï–ö–¢–û–†–ò–Ø–ú:")
    print("-" * 50)
    
    total_files = 0
    for dir_name, files in sorted(directories.items()):
        print(f"{dir_name:15} | {len(files):3d} —Ñ–∞–π–ª–æ–≤")
        total_files += len(files)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤
        for file_info in files[:3]:
            print(f"   üìÑ {file_info['path']}")
        if len(files) > 3:
            print(f"   ... –∏ –µ—â–µ {len(files) - 3} —Ñ–∞–π–ª–æ–≤")
        print()
    
    print(f"{'–í–°–ï–ì–û':15} | {total_files:3d} —Ñ–∞–π–ª–æ–≤")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    report_data = {
        'timestamp': datetime.now().isoformat(),
        'total_files': len(all_files),
        'directories': {
            dir_name: {
                'count': len(files),
                'files': files
            }
            for dir_name, files in directories.items()
        },
        'all_files': all_files
    }
    
    report_path = f"data/reports/final_files_found_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
    os.makedirs(os.path.dirname(report_path), exist_ok=True)
    
    with open(report_path, 'w', encoding='utf-8') as f:
        json.dump(report_data, f, ensure_ascii=False, indent=2)
    
    print(f"\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_path}")
    
    return all_files, directories

if __name__ == "__main__":
    try:
        all_files, directories = final_find_all_files()
        print(f"\nüéØ –ü–û–ò–°–ö –ó–ê–í–ï–†–®–ï–ù")
        print(f"–ù–∞–π–¥–µ–Ω–æ {len(all_files)} —Ñ–∞–π–ª–æ–≤")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()