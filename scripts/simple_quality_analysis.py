#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞ –¥–ª—è SafeFunctionManager
"""

import os
import sys
import subprocess
from datetime import datetime

def run_flake8_analysis():
    """–ó–∞–ø—É—Å–∫ flake8 –∞–Ω–∞–ª–∏–∑–∞"""
    print("üîç –ê–ù–ê–õ–ò–ó –ö–ê–ß–ï–°–¢–í–ê –ö–û–î–ê –° –ü–û–ú–û–©–¨–Æ FLAKE8")
    print("=" * 80)
    print(f"üìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    files_to_analyze = [
        "core/base.py",
        "core/service_base.py", 
        "core/database.py",
        "core/configuration.py",
        "core/logging_module.py",
        "core/security_base.py",
        "security/safe_function_manager.py",
        "security/security_monitoring.py",
        "security/authentication.py",
        "security/access_control.py",
        "security/security_policy.py",
        "security/security_reporting.py",
        "security/family/family_profile_manager.py",
        "security/family/child_protection.py",
        "security/family/elderly_protection.py",
        "security/preliminary/policy_engine.py",
        "security/preliminary/risk_assessment.py",
        "security/preliminary/behavioral_analysis.py",
        "security/preliminary/mfa_service.py",
        "security/preliminary/zero_trust_service.py",
        "security/preliminary/trust_scoring.py",
        "security/preliminary/context_aware_access.py",
        "security/reactive/recovery_service.py",
        "security/reactive/threat_intelligence.py",
        "security/reactive/forensics_service.py",
        "security/microservices/api_gateway.py",
        "security/microservices/load_balancer.py",
        "security/microservices/rate_limiter.py",
        "security/microservices/circuit_breaker.py",
        "security/microservices/user_interface_manager.py",
        "security/microservices/redis_cache_manager.py",
        "security/microservices/service_mesh_manager.py",
        "security/ai_agents/monitor_manager.py",
        "security/ai_agents/alert_manager.py",
        "security/managers/report_manager.py",
        "security/ai_agents/analytics_manager.py",
        "security/ai_agents/dashboard_manager.py",
        "security/ai_agents/data_protection_agent.py",
        "security/ai_agents/mobile_security_agent.py",
        "security/bots/mobile_navigation_bot.py",
        "security/bots/gaming_security_bot.py",
        "security/bots/emergency_response_bot.py",
        "security/bots/parental_control_bot.py",
        "security/bots/notification_bot.py",
        "security/bots/whatsapp_security_bot.py",
        "security/bots/telegram_security_bot.py",
        "security/bots/instagram_security_bot.py",
        "security/bots/analytics_bot.py",
        "security/bots/website_navigation_bot.py",
        "security/bots/browser_security_bot.py",
        "security/bots/cloud_storage_security_bot.py",
        "security/bots/network_security_bot.py",
        "security/bots/device_security_bot.py",
        "security/privacy/universal_privacy_manager.py",
        "security/compliance/russian_child_protection_manager.py",
        "security/compliance/russian_data_protection_manager.py",
        "security/ci_cd/ci_pipeline_manager.py",
        "security/scaling/auto_scaling_engine.py",
        "security/orchestration/kubernetes_orchestrator.py"
    ]
    
    total_files = len(files_to_analyze)
    analyzed_files = 0
    total_issues = 0
    issues_by_category = {
        'E': 0,  # Error
        'W': 0,  # Warning  
        'F': 0,  # Fatal
        'C': 0,  # Convention
        'N': 0   # Naming
    }
    
    print(f"üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {total_files} —Ñ–∞–π–ª–æ–≤ —Å –ø–æ–º–æ—â—å—é flake8...")
    print()
    
    for file_path in files_to_analyze:
        full_path = os.path.join("/Users/sergejhlystov/ALADDIN_NEW", file_path)
        if os.path.exists(full_path):
            print(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º: {file_path}")
            
            try:
                # –ó–∞–ø—É—Å–∫ flake8
                result = subprocess.run(
                    ['python3', '-m', 'flake8', '--max-line-length=120', '--statistics', full_path],
                    capture_output=True,
                    text=True,
                    timeout=30
                )
                
                if result.returncode == 0:
                    print(f"   ‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ: –û—Ç–ª–∏—á–Ω–æ (0 –ø—Ä–æ–±–ª–µ–º)")
                else:
                    output = result.stdout
                    lines = output.split('\n')
                    file_issues = 0
                    
                    for line in lines:
                        if ':' in line and ':' in line.split(':')[1]:
                            parts = line.split(':')
                            if len(parts) >= 3:
                                error_code = parts[3].strip().split()[0] if parts[3].strip() else ''
                                if error_code.startswith(('E', 'W', 'F', 'C', 'N')):
                                    category = error_code[0]
                                    issues_by_category[category] += 1
                                    file_issues += 1
                                    total_issues += 1
                    
                    if file_issues > 0:
                        print(f"   ‚ö†Ô∏è  –ö–∞—á–µ—Å—Ç–≤–æ: {file_issues} –ø—Ä–æ–±–ª–µ–º")
                        if file_issues > 20:
                            print(f"   üö® –ö—Ä–∏—Ç–∏—á–Ω–æ: –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø—Ä–æ–±–ª–µ–º!")
                        elif file_issues > 10:
                            print(f"   ‚ö†Ô∏è  –¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è")
                        else:
                            print(f"   ‚úÖ –ü—Ä–∏–µ–º–ª–µ–º–æ")
                    else:
                        print(f"   ‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ: –û—Ç–ª–∏—á–Ω–æ")
                
                analyzed_files += 1
                
            except subprocess.TimeoutExpired:
                print(f"   ‚è∞ –¢–∞–π–º–∞—É—Ç –∞–Ω–∞–ª–∏–∑–∞")
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        else:
            print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
    
    print()
    print("üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–ê–ß–ï–°–¢–í–ê:")
    print("-" * 80)
    print(f"üìÅ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {analyzed_files}/{total_files}")
    print(f"üîç –í—Å–µ–≥–æ –ø—Ä–æ–±–ª–µ–º –Ω–∞–π–¥–µ–Ω–æ: {total_issues}")
    print()
    
    if total_issues > 0:
        print("üìã –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú:")
        print(f"   üî¥ Fatal (F):     {issues_by_category['F']:3d} –ø—Ä–æ–±–ª–µ–º")
        print(f"   ‚ùå Error (E):     {issues_by_category['E']:3d} –ø—Ä–æ–±–ª–µ–º")
        print(f"   ‚ö†Ô∏è  Warning (W):   {issues_by_category['W']:3d} –ø—Ä–æ–±–ª–µ–º")
        print(f"   üìù Convention (C): {issues_by_category['C']:3d} –ø—Ä–æ–±–ª–µ–º")
        print(f"   üè∑Ô∏è  Naming (N):    {issues_by_category['N']:3d} –ø—Ä–æ–±–ª–µ–º")
        print()
        
        # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
        if total_issues < 50:
            quality_grade = "A+"
            quality_desc = "–û—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ"
        elif total_issues < 100:
            quality_grade = "A"
            quality_desc = "–•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ"
        elif total_issues < 200:
            quality_grade = "B"
            quality_desc = "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ"
        elif total_issues < 500:
            quality_grade = "C"
            quality_desc = "–¢—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è"
        else:
            quality_grade = "D"
            quality_desc = "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ"
        
        print(f"üéØ –û–ë–©–ê–Ø –û–¶–ï–ù–ö–ê: {quality_grade} - {quality_desc}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print()
        print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –£–õ–£–ß–®–ï–ù–ò–Æ:")
        print("-" * 80)
        
        if issues_by_category['F'] > 0:
            print("üö® –ö–†–ò–¢–ò–ß–ù–û: –ò—Å–ø—Ä–∞–≤–∏—Ç—å Fatal –æ—à–∏–±–∫–∏ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ!")
        
        if issues_by_category['E'] > 0:
            print("‚ùå –í–ê–ñ–ù–û: –ò—Å–ø—Ä–∞–≤–∏—Ç—å Error –ø—Ä–æ–±–ª–µ–º—ã")
        
        if issues_by_category['W'] > 0:
            print("‚ö†Ô∏è  –†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø: –ò—Å–ø—Ä–∞–≤–∏—Ç—å Warning –ø—Ä–æ–±–ª–µ–º—ã")
        
        if issues_by_category['C'] > 0:
            print("üìù PEP8: –°–ª–µ–¥–æ–≤–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è Python")
        
        if issues_by_category['N'] > 0:
            print("üè∑Ô∏è  –ò–ú–ï–ù–û–í–ê–ù–ò–ï: –£–ª—É—á—à–∏—Ç—å –∏–º–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏ —Ñ—É–Ω–∫—Ü–∏–π")
        
        print()
        print("üîß –ö–û–ù–ö–†–ï–¢–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø:")
        print("   1. –ó–∞–ø—É—Å—Ç–∏—Ç—å: flake8 --max-line-length=120 [—Ñ–∞–π–ª]")
        print("   2. –ò—Å–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ F –∏ E –æ—à–∏–±–∫–∏")
        print("   3. –î–æ–±–∞–≤–∏—Ç—å docstrings –¥–ª—è –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π")
        print("   4. –°–ª–µ–¥–æ–≤–∞—Ç—å PEP8 —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º")
        print("   5. –£–ª—É—á—à–∏—Ç—å —á–∏—Ç–∞–µ–º–æ—Å—Ç—å –∫–æ–¥–∞")
        
    else:
        print("üèÜ –û–¢–õ–ò–ß–ù–û! –ù–∏–∫–∞–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
        print("   –ö–æ–¥ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤—ã—Å–æ–∫–∏–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –∫–∞—á–µ—Å—Ç–≤–∞")
    
    print()
    print("=" * 80)
    print("‚úÖ –ê–ù–ê–õ–ò–ó –ö–ê–ß–ï–°–¢–í–ê –ó–ê–í–ï–†–®–ï–ù!")
    print("=" * 80)

def analyze_specific_files():
    """–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    print()
    print("üîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ö–õ–Æ–ß–ï–í–´–• –§–ê–ô–õ–û–í:")
    print("-" * 80)
    
    key_files = [
        "security/safe_function_manager.py",
        "core/base.py",
        "security/authentication.py",
        "security/family/child_protection.py"
    ]
    
    for file_path in key_files:
        full_path = os.path.join("/Users/sergejhlystov/ALADDIN_NEW", file_path)
        if os.path.exists(full_path):
            print(f"\nüìÑ {file_path}:")
            
            try:
                result = subprocess.run(
                    ['python3', '-m', 'flake8', '--max-line-length=120', full_path],
                    capture_output=True,
                    text=True,
                    timeout=30
                )
                
                if result.returncode == 0:
                    print("   ‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ: –û—Ç–ª–∏—á–Ω–æ")
                else:
                    output = result.stdout
                    lines = output.split('\n')
                    for line in lines[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –ø—Ä–æ–±–ª–µ–º
                        if line.strip():
                            print(f"   ‚ö†Ô∏è  {line}")
                    if len(lines) > 10:
                        print(f"   ... –∏ –µ—â–µ {len(lines) - 10} –ø—Ä–æ–±–ª–µ–º")
                        
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")

if __name__ == "__main__":
    run_flake8_analysis()
    analyze_specific_files()