#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—É—Ç–µ–π –∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º —Ñ–∞–π–ª–∞–º –≤ SFM —Ä–µ–µ—Å—Ç—Ä–µ
–ù–∞—Ö–æ–¥–∏—Ç —Ä–µ–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø—É—Ç–∏ –≤ —Ä–µ–µ—Å—Ç—Ä–µ
"""

import json
import os
import sys
import shutil
from pathlib import Path
from typing import Dict, List, Tuple, Optional
from datetime import datetime

def load_sfm_registry() -> Dict:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç SFM —Ä–µ–µ—Å—Ç—Ä –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    registry_path = Path("data/sfm/function_registry.json")
    
    if not registry_path.exists():
        print(f"‚ùå –§–∞–π–ª —Ä–µ–µ—Å—Ç—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {registry_path}")
        return {}
    
    try:
        with open(registry_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
        return data
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–µ—Å—Ç—Ä–∞: {e}")
        return {}

def save_sfm_registry(data: Dict) -> bool:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç SFM —Ä–µ–µ—Å—Ç—Ä –≤ JSON —Ñ–∞–π–ª"""
    registry_path = Path("data/sfm/function_registry.json")
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    backup_path = registry_path.with_suffix(f'.backup_{datetime.now().strftime("%Y%m%d_%H%M%S")}.json')
    shutil.copy2(registry_path, backup_path)
    print(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")
    
    try:
        with open(registry_path, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–µ—Å—Ç—Ä–∞: {e}")
        return False

def find_actual_file(missing_path: str, base_dir: Path) -> Optional[Path]:
    """–ù–∞—Ö–æ–¥–∏—Ç —Ä–µ–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –ø–æ –ø–æ—Ö–æ–∂–µ–º—É –∏–º–µ–Ω–∏"""
    missing_name = Path(missing_path).name.lower()
    missing_stem = Path(missing_path).stem.lower()
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
    search_patterns = [
        missing_name,
        missing_stem,
        missing_name.replace('_', ''),
        missing_stem.replace('_', ''),
        missing_name.replace('_', '_'),
        missing_stem.replace('_', '_')
    ]
    
    found_files = []
    
    try:
        # –ò—â–µ–º —Ñ–∞–π–ª—ã —Å –ø–æ—Ö–æ–∂–∏–º–∏ –∏–º–µ–Ω–∞–º–∏
        for root, dirs, files in os.walk(base_dir):
            for file in files:
                if file.lower().endswith('.py'):
                    file_lower = file.lower()
                    file_stem = Path(file).stem.lower()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
                    for pattern in search_patterns:
                        if (pattern in file_lower or 
                            pattern in file_stem or
                            file_lower in pattern or
                            file_stem in pattern):
                            
                            full_path = Path(root) / file
                            rel_path = full_path.relative_to(base_dir)
                            found_files.append((full_path, rel_path, pattern))
    
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: {e}")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if found_files:
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –±–ª–∏–∑–æ—Å—Ç–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        found_files.sort(key=lambda x: len(x[1].parts))
        return found_files[0][1]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å
    
    return None

def fix_file_paths():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—É—Ç–µ–π"""
    print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–£–¢–ï–ô –ö –û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–ú –§–ê–ô–õ–ê–ú")
    print("=" * 60)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–µ—Å—Ç—Ä
    registry_data = load_sfm_registry()
    if not registry_data:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å SFM —Ä–µ–µ—Å—Ç—Ä")
        return
    
    functions = registry_data.get('functions', {})
    base_dir = Path.cwd()
    
    print(f"üìÅ –ë–∞–∑–æ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {base_dir}")
    print(f"üìä –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π –≤ —Ä–µ–µ—Å—Ç—Ä–µ: {len(functions)}")
    print()
    
    fixed_count = 0
    removed_count = 0
    fixed_files = []
    removed_files = []
    
    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º
    for func_id, func_data in functions.items():
        file_path_str = func_data.get('file_path', '')
        if not file_path_str:
            continue
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—É—Ç—å
        if file_path_str.startswith('./'):
            file_path_str = file_path_str[2:]
        
        normalized_path = base_dir / file_path_str
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if not normalized_path.exists() or not normalized_path.is_file():
            print(f"üîç –ò—â—É —Ñ–∞–π–ª –¥–ª—è: {func_id}")
            print(f"   –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—É—Ç—å: {file_path_str}")
            
            # –ò—â–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
            actual_path = find_actual_file(file_path_str, base_dir)
            
            if actual_path:
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å –≤ —Ä–µ–µ—Å—Ç—Ä–µ
                new_path = f"./{actual_path}"
                func_data['file_path'] = new_path
                func_data['last_updated'] = datetime.now().isoformat()
                
                print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω: {actual_path}")
                print(f"   üîÑ –û–±–Ω–æ–≤–ª–µ–Ω –ø—É—Ç—å: {new_path}")
                
                fixed_count += 1
                fixed_files.append({
                    'function_id': func_id,
                    'original_path': file_path_str,
                    'new_path': str(actual_path),
                    'status': 'fixed'
                })
            else:
                print(f"   ‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–º–µ—á–∞—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
                
                # –ü–æ–º–µ—á–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω—É—é
                func_data['status'] = 'removed'
                func_data['removed_at'] = datetime.now().isoformat()
                func_data['removal_reason'] = 'file_not_found'
                
                removed_count += 1
                removed_files.append({
                    'function_id': func_id,
                    'original_path': file_path_str,
                    'status': 'removed'
                })
            
            print()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ä–µ–µ—Å—Ç—Ä
    if fixed_count > 0 or removed_count > 0:
        if save_sfm_registry(registry_data):
            print(f"‚úÖ –†–µ–µ—Å—Ç—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–µ—Å—Ç—Ä–∞")
            return
    
    # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:")
    print("-" * 60)
    print(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—É—Ç–µ–π: {fixed_count}")
    print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {removed_count}")
    print(f"üìä –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {fixed_count + removed_count}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    report_data = {
        'timestamp': datetime.now().isoformat(),
        'base_directory': str(base_dir),
        'total_processed': fixed_count + removed_count,
        'fixed_files': fixed_count,
        'removed_files': removed_count,
        'fixed_details': fixed_files,
        'removed_details': removed_files
    }
    
    report_path = f"data/reports/file_paths_fix_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
    os.makedirs(os.path.dirname(report_path), exist_ok=True)
    
    with open(report_path, 'w', encoding='utf-8') as f:
        json.dump(report_data, f, ensure_ascii=False, indent=2)
    
    print(f"\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_path}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
    if fixed_files:
        print(f"\nüîß –ü–†–ò–ú–ï–†–´ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–• –ü–£–¢–ï–ô:")
        print("-" * 60)
        for i, fix in enumerate(fixed_files[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            print(f"{i:2d}. {fix['function_id']}")
            print(f"    –ë—ã–ª–æ: {fix['original_path']}")
            print(f"    –°—Ç–∞–ª–æ: {fix['new_path']}")
            print()
    
    if removed_files:
        print(f"\nüóëÔ∏è –ü–†–ò–ú–ï–†–´ –£–î–ê–õ–ï–ù–ù–´–• –ó–ê–ü–ò–°–ï–ô:")
        print("-" * 60)
        for i, removed in enumerate(removed_files[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            print(f"{i:2d}. {removed['function_id']}")
            print(f"    –ü—É—Ç—å: {removed['original_path']}")
            print()

if __name__ == "__main__":
    try:
        fix_file_paths()
        print(f"\nüéØ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
        sys.exit(1)