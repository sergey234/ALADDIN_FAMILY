#!/usr/bin/env python3
"""
–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –≤ SafeFunctionManager
"""
import sys
import os
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from security.safe_function_manager import SafeFunctionManager, FunctionStatus, SecurityLevel

def register_all_functions():
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ SFM"""
    print("üîß –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –í–°–ï–• –§–£–ù–ö–¶–ò–ô –í SFM")
    print("=" * 60)
    print(f"–í—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # –°–æ–∑–¥–∞–µ–º SFM
    sfm = SafeFunctionManager()
    print("‚úÖ SafeFunctionManager —Å–æ–∑–¥–∞–Ω")
    
    # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    functions_to_register = [
        # Microservices
        {
            "id": "load_balancer",
            "name": "LoadBalancer",
            "description": "–ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤",
            "type": "Microservice",
            "security_level": SecurityLevel.HIGH,
            "is_critical": True,
            "auto_enable": True
        },
        {
            "id": "api_gateway",
            "name": "APIGateway", 
            "description": "API Gateway –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏",
            "type": "Microservice",
            "security_level": SecurityLevel.HIGH,
            "is_critical": True,
            "auto_enable": True
        },
        {
            "id": "rate_limiter",
            "name": "RateLimiter",
            "description": "–û–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—å —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–æ–≤",
            "type": "Microservice",
            "security_level": SecurityLevel.MEDIUM,
            "is_critical": False,
            "auto_enable": True
        },
        {
            "id": "circuit_breaker",
            "name": "CircuitBreaker",
            "description": "–ü—Ä–µ–¥–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª—å –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –∫–∞—Å–∫–∞–¥–Ω—ã—Ö —Å–±–æ–µ–≤",
            "type": "Microservice",
            "security_level": SecurityLevel.MEDIUM,
            "is_critical": False,
            "auto_enable": True
        },
        
        # AI Agents
        {
            "id": "analytics_manager",
            "name": "AnalyticsManager",
            "description": "AI –∞–≥–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏",
            "type": "AI Agent",
            "security_level": SecurityLevel.HIGH,
            "is_critical": True,
            "auto_enable": True
        },
        {
            "id": "dashboard_manager",
            "name": "DashboardManager",
            "description": "AI –∞–≥–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞—à–±–æ—Ä–¥–∞–º–∏",
            "type": "AI Agent",
            "security_level": SecurityLevel.HIGH,
            "is_critical": True,
            "auto_enable": True
        },
        {
            "id": "monitor_manager",
            "name": "MonitorManager",
            "description": "AI –∞–≥–µ–Ω—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã",
            "type": "AI Agent",
            "security_level": SecurityLevel.HIGH,
            "is_critical": True,
            "auto_enable": True
        },
        {
            "id": "report_manager",
            "name": "ReportManager",
            "description": "AI –∞–≥–µ–Ω—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤",
            "type": "AI Agent",
            "security_level": SecurityLevel.MEDIUM,
            "is_critical": False,
            "auto_enable": True
        },
        {
            "id": "behavioral_analysis_agent",
            "name": "BehavioralAnalysisAgent",
            "description": "AI –∞–≥–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            "type": "AI Agent",
            "security_level": SecurityLevel.HIGH,
            "is_critical": True,
            "auto_enable": True
        },
        
        # Privacy & Security
        {
            "id": "privacy_manager",
            "name": "UniversalPrivacyManager",
            "description": "–ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ GDPR",
            "type": "Privacy Manager",
            "security_level": SecurityLevel.HIGH,
            "is_critical": True,
            "auto_enable": True
        },
        {
            "id": "trust_scoring",
            "name": "TrustScoring",
            "description": "–°–∏—Å—Ç–µ–º–∞ –æ—Ü–µ–Ω–∫–∏ –¥–æ–≤–µ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            "type": "Preliminary",
            "security_level": SecurityLevel.HIGH,
            "is_critical": True,
            "auto_enable": True
        },
        {
            "id": "behavioral_analysis",
            "name": "BehavioralAnalysis",
            "description": "–°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è",
            "type": "Preliminary",
            "security_level": SecurityLevel.HIGH,
            "is_critical": True,
            "auto_enable": True
        },
        
        # Family Protection
        {
            "id": "child_protection",
            "name": "ChildProtection",
            "description": "–°–∏—Å—Ç–µ–º–∞ –∑–∞—â–∏—Ç—ã –¥–µ—Ç–µ–π",
            "type": "Family Protection",
            "security_level": SecurityLevel.HIGH,
            "is_critical": True,
            "auto_enable": True
        },
        
        # Security Bots
        {
            "id": "network_security_bot",
            "name": "NetworkSecurityBot",
            "description": "–ë–æ—Ç –¥–ª—è —Å–µ—Ç–µ–≤–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
            "type": "Security Bot",
            "security_level": SecurityLevel.MEDIUM,
            "is_critical": False,
            "auto_enable": True
        },
        {
            "id": "device_security_bot",
            "name": "DeviceSecurityBot",
            "description": "–ë–æ—Ç –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤",
            "type": "Security Bot",
            "security_level": SecurityLevel.MEDIUM,
            "is_critical": False,
            "auto_enable": True
        },
        {
            "id": "analytics_bot",
            "name": "AnalyticsBot",
            "description": "–ë–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏",
            "type": "Security Bot",
            "security_level": SecurityLevel.MEDIUM,
            "is_critical": False,
            "auto_enable": True
        },
        
        # Antivirus
        {
            "id": "antivirus_core",
            "name": "AntivirusCore",
            "description": "–Ø–¥—Ä–æ –∞–Ω—Ç–∏–≤–∏—Ä—É—Å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã",
            "type": "Antivirus",
            "security_level": SecurityLevel.HIGH,
            "is_critical": True,
            "auto_enable": True
        },
        
        # VPN
        {
            "id": "vpn_core",
            "name": "VpnCore",
            "description": "–Ø–¥—Ä–æ VPN —Å–∏—Å—Ç–µ–º—ã",
            "type": "VPN",
            "security_level": SecurityLevel.HIGH,
            "is_critical": True,
            "auto_enable": True
        },
        
        # Compliance
        {
            "id": "coppa_compliance",
            "name": "CoppaComplianceManager",
            "description": "–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è COPPA",
            "type": "Compliance",
            "security_level": SecurityLevel.HIGH,
            "is_critical": True,
            "auto_enable": True
        },
        {
            "id": "russian_child_protection",
            "name": "RussianChildProtectionManager",
            "description": "–ú–µ–Ω–µ–¥–∂–µ—Ä –∑–∞—â–∏—Ç—ã –¥–µ—Ç–µ–π (–†–æ—Å—Å–∏—è)",
            "type": "Compliance",
            "security_level": SecurityLevel.HIGH,
            "is_critical": True,
            "auto_enable": True
        }
    ]
    
    print(f"\nüìä –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {len(functions_to_register)}")
    print("\n" + "="*60)
    
    registered_count = 0
    failed_count = 0
    
    for i, func in enumerate(functions_to_register, 1):
        print(f"\nüîß {i}. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è {func['name']} ({func['type']})")
        
        try:
            success = sfm.register_function(
                function_id=func["id"],
                name=func["name"],
                description=func["description"],
                function_type=func["type"],
                security_level=func["security_level"],
                is_critical=func["is_critical"],
                auto_enable=func["auto_enable"]
            )
            
            if success:
                print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
                registered_count += 1
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
                status = sfm.get_function_status(func["id"])
                print(f"   üìç –°—Ç–∞—Ç—É—Å: {status.value}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∫–ª—é—á–µ–Ω –ª–∏
                if func["auto_enable"]:
                    enabled_status = sfm.get_function_status(func["id"])
                    if enabled_status == FunctionStatus.ENABLED:
                        print(f"   ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∫–ª—é—á–µ–Ω")
                    else:
                        print(f"   ‚ö†Ô∏è  –ù–µ –≤–∫–ª—é—á–µ–Ω (—Å—Ç–∞—Ç—É—Å: {enabled_status.value})")
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
                failed_count += 1
                
        except Exception as e:
            print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
            failed_count += 1
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\n" + "="*60)
    print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò:")
    print(f"‚Ä¢ –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π: {len(functions_to_register)}")
    print(f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {registered_count}")
    print(f"‚Ä¢ –û—à–∏–±–æ–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {failed_count}")
    print(f"‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {registered_count/len(functions_to_register)*100:.1f}%")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    print(f"\nüîç –í–°–ï –ó–ê–†–ï–ì–ò–°–¢–†–ò–†–û–í–ê–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò –í SFM:")
    print("-" * 60)
    
    if hasattr(sfm, 'functions') and sfm.functions:
        for func_id, func_info in sfm.functions.items():
            status = sfm.get_function_status(func_id)
            print(f"‚Ä¢ {func_id}: {func_info.get('name', 'N/A')} ({status.value})")
    else:
        print("‚ùå –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π")
    
    return registered_count, failed_count

if __name__ == "__main__":
    register_all_functions()