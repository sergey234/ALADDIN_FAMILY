#!/usr/bin/env python3
"""
–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –≠–¢–ê–ü–ê 7: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö 8 –º–µ—Ç–æ–¥–æ–≤
"""

import ast
import sys
import shutil
from datetime import datetime
from pathlib import Path
from typing import Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append('/Users/sergejhlystov/ALADDIN_NEW')

class MissingMethodsFixer:
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –º–µ—Ç–æ–¥–æ–≤ –≤ RecoveryService"""
    
    def __init__(self, file_path: str = "security/reactive/recovery_service.py"):
        self.file_path = Path(file_path)
        self.backup_dir = Path("formatting_work")
        self.backup_dir.mkdir(exist_ok=True)
        
    def add_missing_methods(self) -> Dict[str, Any]:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –º–µ—Ç–æ–¥–æ–≤"""
        print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –≠–¢–ê–ü–ê 7: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –º–µ—Ç–æ–¥–æ–≤")
        print("=" * 60)
        
        # –°–æ–∑–¥–∞—ë–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_path = self.backup_dir / f"{self.file_path.stem}_before_methods_fix_{timestamp}.py"
        shutil.copy2(self.file_path, backup_path)
        print(f"   üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")
        
        try:
            with open(self.file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –ú–µ—Ç–æ–¥—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            new_methods = [
                {
                    "name": "__str__",
                    "code": '''    def __str__(self) -> str:
        """–°—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
        return f"RecoveryService(name={self.name}, status={self.status})"'''
                },
                {
                    "name": "__repr__",
                    "code": '''    def __repr__(self) -> str:
        """–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
        return f"RecoveryService(name='{self.name}', config={self.config})"'''
                },
                {
                    "name": "__len__",
                    "code": '''    def __len__(self) -> int:
        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
        try:
            return len(self.recovery_plans) if hasattr(self, 'recovery_plans') else 0
        except Exception:
            return 0'''
                },
                {
                    "name": "__enter__",
                    "code": '''    def __enter__(self):
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä - –≤—Ö–æ–¥"""
        self.logger.info("–í—Ö–æ–¥ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç RecoveryService")
        return self'''
                },
                {
                    "name": "__exit__",
                    "code": '''    def __exit__(self, exc_type, exc_val, exc_tb):
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä - –≤—ã—Ö–æ–¥"""
        if exc_type:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ RecoveryService: {exc_val}")
        else:
            self.logger.info("–í—ã—Ö–æ–¥ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ RecoveryService")
        return False'''
                },
                {
                    "name": "validate_recovery_plan",
                    "code": '''    def validate_recovery_plan(self, plan: 'RecoveryPlan') -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–ª–∞–Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
        try:
            if not plan or not hasattr(plan, 'plan_id'):
                return False
            
            if not plan.recovery_tasks or len(plan.recovery_tasks) == 0:
                self.logger.warning("–ü–ª–∞–Ω –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–¥–∞—á")
                return False
            
            if plan.estimated_duration <= 0:
                self.logger.warning("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
                return False
            
            self.logger.info(f"–ü–ª–∞–Ω –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è {plan.plan_id} –ø—Ä–æ—à—ë–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é")
            return True
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            return False'''
                },
                {
                    "name": "get_recovery_statistics",
                    "code": '''    def get_recovery_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
        try:
            stats = {
                "total_plans": len(self.recovery_plans) if hasattr(self, 'recovery_plans') else 0,
                "completed_plans": 0,
                "failed_plans": 0,
                "average_duration": 0.0,
                "success_rate": 0.0
            }
            
            if hasattr(self, 'recovery_plans') and self.recovery_plans:
                completed = sum(1 for plan in self.recovery_plans if getattr(plan, 'status', '') == 'completed')
                failed = sum(1 for plan in self.recovery_plans if getattr(plan, 'status', '') == 'failed')
                
                stats["completed_plans"] = completed
                stats["failed_plans"] = failed
                stats["success_rate"] = (completed / len(self.recovery_plans)) * 100 if self.recovery_plans else 0
                
                durations = [getattr(plan, 'estimated_duration', 0) for plan in self.recovery_plans]
                stats["average_duration"] = sum(durations) / len(durations) if durations else 0
            
            return stats
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {"error": str(e)}'''
                },
                {
                    "name": "cleanup_old_plans",
                    "code": '''    def cleanup_old_plans(self, days_old: int = 30) -> int:
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ø–ª–∞–Ω–æ–≤ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
        try:
            if not hasattr(self, 'recovery_plans') or not self.recovery_plans:
                return 0
            
            from datetime import datetime, timedelta
            cutoff_date = datetime.now() - timedelta(days=days_old)
            
            old_plans = []
            for plan in self.recovery_plans[:]:  # –ö–æ–ø–∏—è —Å–ø–∏—Å–∫–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
                plan_date = getattr(plan, 'created_at', None)
                if plan_date and plan_date < cutoff_date:
                    old_plans.append(plan)
                    self.recovery_plans.remove(plan)
            
            self.logger.info(f"–£–¥–∞–ª–µ–Ω–æ {len(old_plans)} —Å—Ç–∞—Ä—ã—Ö –ø–ª–∞–Ω–æ–≤ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
            return len(old_plans)
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –ø–ª–∞–Ω–æ–≤: {e}")
            return 0'''
                }
            ]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ –º–µ—Ç–æ–¥—ã —É–∂–µ –µ—Å—Ç—å
            tree = ast.parse(content)
            existing_methods = set()
            
            for node in ast.walk(tree):
                if isinstance(node, ast.ClassDef) and node.name == "RecoveryService":
                    for item in node.body:
                        if isinstance(item, ast.FunctionDef):
                            existing_methods.add(item.name)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –º–µ—Ç–æ–¥—ã
            methods_to_add = []
            for method in new_methods:
                if method["name"] not in existing_methods:
                    methods_to_add.append(method)
                    print(f"   ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥: {method['name']}")
                else:
                    print(f"   ‚ö†Ô∏è –ú–µ—Ç–æ–¥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {method['name']}")
            
            if methods_to_add:
                # –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω–µ—Ü –∫–ª–∞—Å—Å–∞ RecoveryService
                lines = content.split('\n')
                class_end_line = -1
                
                for i, line in enumerate(lines):
                    if line.strip() == '    def _generate_report_id(self):':
                        # –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω–µ—Ü —ç—Ç–æ–≥–æ –º–µ—Ç–æ–¥–∞
                        for j in range(i, len(lines)):
                            if j + 1 < len(lines) and lines[j + 1].strip() == '':
                                class_end_line = j + 1
                                break
                        break
                
                if class_end_line == -1:
                    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
                    class_end_line = len(lines) - 1
                
                # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã
                for method in methods_to_add:
                    lines.insert(class_end_line, method["code"])
                    class_end_line += len(method["code"].split('\n')) + 1
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Ñ–∞–π–ª
                new_content = '\n'.join(lines)
                with open(self.file_path, 'w', encoding='utf-8') as f:
                    f.write(new_content)
                
                print(f"   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –º–µ—Ç–æ–¥–æ–≤: {len(methods_to_add)}")
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                self._test_added_methods()
                
                return {
                    "methods_added": len(methods_to_add),
                    "methods_list": [m["name"] for m in methods_to_add],
                    "status": "success"
                }
            else:
                print("   ‚ÑπÔ∏è –í—Å–µ –º–µ—Ç–æ–¥—ã —É–∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
                return {"status": "already_complete"}
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Ç–æ–¥–æ–≤: {e}")
            return {"error": str(e), "status": "failed"}
    
    def _test_added_methods(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤"""
        print("   üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤...")
        
        try:
            # –¢–µ—Å—Ç —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
            import subprocess
            result = subprocess.run(['python3', '-m', 'py_compile', str(self.file_path)], 
                                  capture_output=True, text=True, timeout=30)
            if result.returncode == 0:
                print("      ‚úÖ –°–∏–Ω—Ç–∞–∫—Å–∏—Å: –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
            else:
                print(f"      ‚ùå –°–∏–Ω—Ç–∞–∫—Å–∏—Å: {result.stderr}")
                return
            
            # –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞
            result = subprocess.run(['python3', '-c', f'import sys; sys.path.append("/Users/sergejhlystov/ALADDIN_NEW"); from security.reactive.recovery_service import RecoveryService'], 
                                  capture_output=True, text=True, timeout=30)
            if result.returncode == 0:
                print("      ‚úÖ –ò–º–ø–æ—Ä—Ç: —Ä–∞–±–æ—Ç–∞–µ—Ç")
            else:
                print(f"      ‚ùå –ò–º–ø–æ—Ä—Ç: {result.stderr}")
                return
            
            # –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
            sys.path.append('/Users/sergejhlystov/ALADDIN_NEW')
            from security.reactive.recovery_service import RecoveryService
            
            service = RecoveryService("test_service", {})
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã
            str_repr = str(service)
            repr_repr = repr(service)
            length = len(service)
            stats = service.get_recovery_statistics()
            cleanup_result = service.cleanup_old_plans(30)
            
            print("      ‚úÖ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print(f"         - __str__: {str_repr}")
            print(f"         - __repr__: {repr_repr}")
            print(f"         - __len__: {length}")
            print(f"         - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {len(stats)} –ø–æ–ª–µ–π")
            print(f"         - –û—á–∏—Å—Ç–∫–∞: {cleanup_result} –ø–ª–∞–Ω–æ–≤")
            
            # –¢–µ—Å—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            try:
                with service as ctx_service:
                    print(f"         - –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä: {str(ctx_service)}")
                print("      ‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä: —Ä–∞–±–æ—Ç–∞–µ—Ç")
            except Exception as e:
                print(f"      ‚ùå –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä: {e}")
            
        except Exception as e:
            print(f"      ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    fixer = MissingMethodsFixer()
    results = fixer.add_missing_methods()
    
    print(f"\n‚úÖ –≠–¢–ê–ü 7 –ò–°–ü–†–ê–í–õ–ï–ù!")
    print(f"   ‚Ä¢ –°—Ç–∞—Ç—É—Å: {results.get('status', 'unknown')}")
    if 'methods_added' in results:
        print(f"   ‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–æ –º–µ—Ç–æ–¥–æ–≤: {results['methods_added']}")

if __name__ == "__main__":
    main()