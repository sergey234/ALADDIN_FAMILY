#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–ª–∞–Ω –º–∏–≥—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤
–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏ –ø–æ—à–∞–≥–æ–≤—ã–π –ø–µ—Ä–µ–Ω–æ—Å
"""

import sys
import os
import re
import shutil
from pathlib import Path
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(str(Path(__file__).parent.parent))

def analyze_file_dependencies(file_path):
    """–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —Ñ–∞–π–ª–∞"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        dependencies = {
            'imports': [],
            'from_imports': [],
            'relative_imports': [],
            'external_dependencies': [],
            'internal_dependencies': []
        }
        
        # –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
        import_patterns = [
            r'import\s+(\w+)',
            r'from\s+(\S+)\s+import\s+(\S+)',
            r'from\s+\.(\w+)\s+import',
            r'from\s+\.\.(\w+)\s+import'
        ]
        
        for pattern in import_patterns:
            matches = re.findall(pattern, content)
            if pattern.startswith('import '):
                dependencies['imports'].extend(matches)
            elif pattern.startswith('from ') and 'import' in pattern:
                if pattern.startswith('from .'):
                    dependencies['relative_imports'].extend(matches)
                else:
                    dependencies['from_imports'].extend(matches)
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –∏ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        for imp in dependencies['imports'] + [imp[0] for imp in dependencies['from_imports']]:
            if imp.startswith('security.') or imp.startswith('core.') or imp.startswith('config.'):
                dependencies['internal_dependencies'].append(imp)
            else:
                dependencies['external_dependencies'].append(imp)
        
        return dependencies
        
    except Exception as e:
        return {'error': str(e)}

def find_files_importing_module(module_name, search_path="."):
    """–ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π –º–æ–¥—É–ª—å"""
    importing_files = []
    
    for root, dirs, files in os.walk(search_path):
        for file in files:
            if file.endswith('.py'):
                file_path = os.path.join(root, file)
                try:
                    with open(file_path, 'r', encoding='utf-8') as f:
                        content = f.read()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–º–ø–æ—Ä—Ç–∞
                    import_patterns = [
                        f'import {module_name}',
                        f'from {module_name} import',
                        f'from .{module_name} import',
                        f'from ..{module_name} import'
                    ]
                    
                    for pattern in import_patterns:
                        if re.search(pattern, content):
                            importing_files.append(file_path)
                            break
                            
                except Exception:
                    continue
    
    return importing_files

def create_backup(file_path, backup_dir="migration_backups"):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ —Ñ–∞–π–ª–∞"""
    if not os.path.exists(backup_dir):
        os.makedirs(backup_dir)
    
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    backup_name = f"{os.path.basename(file_path)}_{timestamp}.backup"
    backup_path = os.path.join(backup_dir, backup_name)
    
    shutil.copy2(file_path, backup_path)
    return backup_path

def create_migration_plan():
    """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –º–∏–≥—Ä–∞—Ü–∏–∏"""
    print("üöÄ –î–ï–¢–ê–õ–¨–ù–´–ô –ü–õ–ê–ù –ë–ï–ó–û–ü–ê–°–ù–û–ô –ú–ò–ì–†–ê–¶–ò–ò –§–ê–ô–õ–û–í")
    print("=" * 80)
    
    files_to_move = [
        {
            'file': 'emergency_formatters.py',
            'from': 'security/ai_agents/',
            'to': 'security/microservices/',
            'reason': '–ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö'
        },
        {
            'file': 'emergency_base_models.py',
            'from': 'security/ai_agents/',
            'to': 'security/microservices/',
            'reason': '–ë–∞–∑–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤'
        },
        {
            'file': 'emergency_base_models_refactored.py',
            'from': 'security/ai_agents/',
            'to': 'security/microservices/',
            'reason': '–†–µ—Ñ–∞–∫—Ç–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–∞–∑–æ–≤—ã–µ –º–æ–¥–µ–ª–∏'
        },
        {
            'file': 'emergency_service.py',
            'from': 'security/ai_agents/',
            'to': 'security/managers/',
            'reason': '–ú–µ–Ω–µ–¥–∂–µ—Ä —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤'
        },
        {
            'file': 'emergency_service_caller.py',
            'from': 'security/ai_agents/',
            'to': 'security/microservices/',
            'reason': '–ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å –≤—ã–∑–æ–≤–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤'
        },
        {
            'file': 'messenger_integration.py',
            'from': 'security/ai_agents/',
            'to': 'security/bots/',
            'reason': '–ë–æ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞–º–∏'
        }
    ]
    
    print("\nüìã –≠–¢–ê–ü 1: –ü–û–î–ì–û–¢–û–í–ö–ê –ò –ê–ù–ê–õ–ò–ó")
    print("-" * 50)
    print("1.1 –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤")
    print("1.2 –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞")
    print("1.3 –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç –ø–µ—Ä–µ–º–µ—â–∞–µ–º—ã–µ –º–æ–¥—É–ª–∏")
    print("1.4 –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ü–µ–ª–µ–≤—ã—Ö –ø–∞–ø–æ–∫")
    
    for i, file_info in enumerate(files_to_move, 1):
        print(f"\nüìÅ –§–ê–ô–õ {i}: {file_info['file']}")
        print("=" * 60)
        
        file_path = os.path.join(file_info['from'], file_info['file'])
        target_path = os.path.join(file_info['to'], file_info['file'])
        
        print(f"üìç –û—Ç–∫—É–¥–∞: {file_path}")
        print(f"üìç –ö—É–¥–∞: {target_path}")
        print(f"üí° –ü—Ä–∏—á–∏–Ω–∞: {file_info['reason']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if os.path.exists(file_path):
            print("‚úÖ –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
            dependencies = analyze_file_dependencies(file_path)
            if 'error' not in dependencies:
                print(f"üì¶ –ò–º–ø–æ—Ä—Ç—ã: {len(dependencies['imports'])}")
                print(f"üì¶ From –∏–º–ø–æ—Ä—Ç—ã: {len(dependencies['from_imports'])}")
                print(f"üì¶ –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã: {len(dependencies['relative_imports'])}")
                print(f"üì¶ –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {len(dependencies['internal_dependencies'])}")
                print(f"üì¶ –í–Ω–µ—à–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {len(dependencies['external_dependencies'])}")
                
                # –ò—â–µ–º —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç —ç—Ç–æ—Ç –º–æ–¥—É–ª—å
                module_name = file_info['file'][:-3]  # —É–±–∏—Ä–∞–µ–º .py
                importing_files = find_files_importing_module(module_name)
                
                if importing_files:
                    print(f"‚ö†Ô∏è  –§–∞–π–ª—ã, –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—â–∏–µ —ç—Ç–æ—Ç –º–æ–¥—É–ª—å ({len(importing_files)}):")
                    for imp_file in importing_files:
                        print(f"   ‚Ä¢ {imp_file}")
                else:
                    print("‚úÖ –ù–∏–∫—Ç–æ –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —ç—Ç–æ—Ç –º–æ–¥—É–ª—å")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {dependencies['error']}")
        else:
            print("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        
        print(f"\nüîß –ü–õ–ê–ù –î–ï–ô–°–¢–í–ò–ô –î–õ–Ø {file_info['file']}:")
        print("-" * 40)
        print(f"1. –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é: {file_path}")
        print(f"2. –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Ñ–∞–π–ª: mv {file_path} {target_path}")
        print(f"3. –û–±–Ω–æ–≤–∏—Ç—å –∏–º–ø–æ—Ä—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º—ã—Ö —Ñ–∞–π–ª–∞—Ö")
        print(f"4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏–Ω—Ç–∞–∫—Å–∏—Å: python3 -m py_compile {target_path}")
        print(f"5. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–º–ø–æ—Ä—Ç—ã: python3 -c \"import {file_info['file'][:-3]}\"")
        print(f"6. –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã –∑–∞–≤–∏—Å–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤")
    
    print(f"\nüìã –≠–¢–ê–ü 2: –ü–û–®–ê–ì–û–í–û–ï –í–´–ü–û–õ–ù–ï–ù–ò–ï")
    print("-" * 50)
    print("2.1 –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏")
    print("2.2 –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Ñ–∞–π–ª—ã –ø–æ –æ–¥–Ω–æ–º—É")
    print("2.3 –û–±–Ω–æ–≤–∏—Ç—å –∏–º–ø–æ—Ä—Ç—ã –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è")
    print("2.4 –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞")
    print("2.5 –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ - –æ—Ç–∫–∞—Ç–∏—Ç—å—Å—è –∫ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏")
    
    print(f"\nüìã –≠–¢–ê–ü 3: –í–ê–õ–ò–î–ê–¶–ò–Ø")
    print("-" * 50)
    print("3.1 –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã –Ω–∞ –Ω–æ–≤—ã—Ö –º–µ—Å—Ç–∞—Ö")
    print("3.2 –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—ã–µ —Ç–µ—Å—Ç—ã —Å–∏—Å—Ç–µ–º—ã")
    print("3.3 –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É SFM")
    print("3.4 –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –≤—Å–µ –∏–º–ø–æ—Ä—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç")
    
    return files_to_move

def create_execution_script(files_to_move):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏"""
    script_content = '''#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤
–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ—à–∞–≥–æ–≤–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
"""

import os
import shutil
import subprocess
import sys
from datetime import datetime

def run_command(command, description):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
    print(f"üîß {description}")
    print(f"   –ö–æ–º–∞–Ω–¥–∞: {command}")
    
    result = subprocess.run(command, shell=True, capture_output=True, text=True)
    
    if result.returncode == 0:
        print("   ‚úÖ –£—Å–ø–µ—à–Ω–æ")
        if result.stdout:
            print(f"   –í—ã–≤–æ–¥: {result.stdout.strip()}")
    else:
        print("   ‚ùå –û—à–∏–±–∫–∞")
        print(f"   –û—à–∏–±–∫–∞: {result.stderr.strip()}")
        return False
    
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏"""
    print("üöÄ –ù–ê–ß–ê–õ–û –ë–ï–ó–û–ü–ê–°–ù–û–ô –ú–ò–ì–†–ê–¶–ò–ò –§–ê–ô–õ–û–í")
    print("=" * 80)
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
    backup_dir = f"migration_backups_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    os.makedirs(backup_dir, exist_ok=True)
    print(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π: {backup_dir}")
    
    # –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
    files_to_move = [
        {
            'file': 'emergency_formatters.py',
            'from': 'security/ai_agents/',
            'to': 'security/microservices/'
        },
        {
            'file': 'emergency_base_models.py',
            'from': 'security/ai_agents/',
            'to': 'security/microservices/'
        },
        {
            'file': 'emergency_base_models_refactored.py',
            'from': 'security/ai_agents/',
            'to': 'security/microservices/'
        },
        {
            'file': 'emergency_service.py',
            'from': 'security/ai_agents/',
            'to': 'security/managers/'
        },
        {
            'file': 'emergency_service_caller.py',
            'from': 'security/ai_agents/',
            'to': 'security/microservices/'
        },
        {
            'file': 'messenger_integration.py',
            'from': 'security/ai_agents/',
            'to': 'security/bots/'
        }
    ]
    
    success_count = 0
    total_files = len(files_to_move)
    
    for i, file_info in enumerate(files_to_move, 1):
        print(f"\\nüìÅ –§–ê–ô–õ {i}/{total_files}: {file_info['file']}")
        print("=" * 60)
        
        source_path = os.path.join(file_info['from'], file_info['file'])
        target_path = os.path.join(file_info['to'], file_info['file'])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        if not os.path.exists(source_path):
            print(f"‚ùå –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {source_path}")
            continue
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        backup_path = os.path.join(backup_dir, file_info['file'])
        if not run_command(f"cp {source_path} {backup_path}", "–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"):
            continue
        
        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª
        if not run_command(f"mv {source_path} {target_path}", f"–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ {file_info['file']}"):
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
            run_command(f"cp {backup_path} {source_path}", "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏")
            continue
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
        if not run_command(f"python3 -m py_compile {target_path}", "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞"):
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
            run_command(f"cp {backup_path} {source_path}", "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏")
            run_command(f"rm {target_path}", "–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞")
            continue
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã
        module_name = file_info['file'][:-3]
        if not run_command(f"python3 -c \"import {module_name}\"", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤"):
            print(f"‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –∏–º–ø–æ—Ä—Ç {module_name} –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        success_count += 1
        print(f"‚úÖ –§–∞–π–ª {file_info['file']} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω")
    
    print(f"\\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢ –ú–ò–ì–†–ê–¶–ò–ò:")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–æ: {success_count}/{total_files} —Ñ–∞–π–ª–æ–≤")
    print(f"üìÅ –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {backup_dir}")
    
    if success_count == total_files:
        print("üéâ –í–°–ï –§–ê–ô–õ–´ –£–°–ü–ï–®–ù–û –ü–ï–†–ï–ú–ï–©–ï–ù–´!")
    else:
        print("‚ö†Ô∏è  –ù–ï–ö–û–¢–û–†–´–ï –§–ê–ô–õ–´ –ù–ï –£–î–ê–õ–û–°–¨ –ü–ï–†–ï–ú–ï–°–¢–ò–¢–¨")

if __name__ == "__main__":
    main()
'''
    
    with open('ALADDIN_NEW/scripts/execute_migration.py', 'w', encoding='utf-8') as f:
        f.write(script_content)
    
    print(f"\nüìù –°–æ–∑–¥–∞–Ω —Å–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: scripts/execute_migration.py")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –°–û–ó–î–ê–ù–ò–ï –î–ï–¢–ê–õ–¨–ù–û–ì–û –ü–õ–ê–ù–ê –ú–ò–ì–†–ê–¶–ò–ò")
    print("=" * 80)
    
    # –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω –º–∏–≥—Ä–∞—Ü–∏–∏
    files_to_move = create_migration_plan()
    
    # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    create_execution_script(files_to_move)
    
    print(f"\nüéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:")
    print("=" * 50)
    print("‚úÖ –°–æ–∑–¥–∞–Ω –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –º–∏–≥—Ä–∞—Ü–∏–∏ 6 —Ñ–∞–π–ª–æ–≤")
    print("‚úÖ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
    print("‚úÖ –°–æ–∑–¥–∞–Ω –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
    print("‚úÖ –ü—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω—ã —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –∏ –æ—Ç–∫–∞—Ç")
    print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –∫–∞–∂–¥–æ–º —à–∞–≥–µ")

if __name__ == "__main__":
    main()