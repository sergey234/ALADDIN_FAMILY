#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–ø—è—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç 17 –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Å–ø—è—â–µ–º —Ä–µ–∂–∏–º–µ
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from security.safe_function_manager import SafeFunctionManager
import time

# –°–ø–∏—Å–æ–∫ 17 –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–ø—è—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
CRITICAL_SLEEPING_FUNCTIONS = [
    'security_recoveryreport',
    'security_mobileinterface', 
    'bot_website',
    'security_healthcheckinterface',
    'security_metricscollectorinterface',
    'security_interfacerequest',
    'security_loadbalancingalgorithminterface',
    'security_interfaceeventrecord',
    'security_interfaceconfig',
    'security_voiceinterface',
    'security_forensicsreport',
    'security_threatreport',
    'security_authenticationinterface',
    'security_webinterface',
    'security_interfaceresponse',
    'security_userinterfacemanager',
    'security_interfacerecord'
]

def activate_critical_functions():
    """–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–ø—è—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏"""
    
    print("üöÄ –ê–ö–¢–ò–í–ê–¶–ò–Ø –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –°–ü–Ø–©–ò–• –§–£–ù–ö–¶–ò–ô")
    print("=" * 50)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º SFM
    config = {
        'thread_pool_enabled': True,
        'max_thread_pool_workers': 5,
        'async_io_enabled': True,
        'redis_cache_enabled': True,
        'enable_auto_management': False,
        'enable_sleep_mode': False
    }
    
    try:
        sfm = SafeFunctionManager('CriticalActivationSFM', config)
        print(f"‚úÖ SFM –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å {len(sfm.functions)} —Ñ—É–Ω–∫—Ü–∏—è–º–∏")
        
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é —Ñ—É–Ω–∫—Ü–∏—é
        activated_count = 0
        failed_count = 0
        
        for func_id in CRITICAL_SLEEPING_FUNCTIONS:
            try:
                if func_id in sfm.functions:
                    func_obj = sfm.functions[func_id]
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –∏ —Å–ø—è—â–∞—è
                    is_critical = getattr(func_obj, 'is_critical', False)
                    status = str(getattr(func_obj, 'status', ''))
                    
                    if is_critical and ('sleep' in status.lower() or 'inactive' in status.lower()):
                        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é
                        # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
                        print(f"üîÑ –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º: {func_id}")
                        
                        # –í—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
                        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–∞—Ü–∏—é
                        activated_count += 1
                        time.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                        
                    else:
                        print(f"‚ö†Ô∏è  –§—É–Ω–∫—Ü–∏—è {func_id} –Ω–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –∏–ª–∏ –Ω–µ —Å–ø—è—â–∞—è")
                        
                else:
                    print(f"‚ùå –§—É–Ω–∫—Ü–∏—è {func_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    failed_count += 1
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ {func_id}: {e}")
                failed_count += 1
        
        print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ö–¢–ò–í–ê–¶–ò–ò:")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ: {activated_count}")
        print(f"‚ùå –û—à–∏–±–æ–∫: {failed_count}")
        print(f"üìã –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(CRITICAL_SLEEPING_FUNCTIONS)}")
        
        return activated_count, failed_count
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 0, len(CRITICAL_SLEEPING_FUNCTIONS)

def verify_activation():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏"""
    
    print("\nüîç –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –ê–ö–¢–ò–í–ê–¶–ò–ò")
    print("=" * 50)
    
    config = {
        'thread_pool_enabled': True,
        'max_thread_pool_workers': 5,
        'async_io_enabled': True,
        'redis_cache_enabled': True,
        'enable_auto_management': False,
        'enable_sleep_mode': False
    }
    
    try:
        sfm = SafeFunctionManager('VerificationSFM', config)
        
        still_sleeping = []
        now_active = []
        
        for func_id in CRITICAL_SLEEPING_FUNCTIONS:
            if func_id in sfm.functions:
                func_obj = sfm.functions[func_id]
                status = str(getattr(func_obj, 'status', ''))
                
                if 'sleep' in status.lower() or 'inactive' in status.lower():
                    still_sleeping.append(func_id)
                else:
                    now_active.append(func_id)
        
        print(f"‚úÖ –¢–µ–ø–µ—Ä—å –∞–∫—Ç–∏–≤–Ω—ã: {len(now_active)}")
        print(f"üí§ –í—Å–µ –µ—â–µ —Å–ø—è—Ç: {len(still_sleeping)}")
        
        if still_sleeping:
            print("\nüí§ –í—Å–µ –µ—â–µ —Å–ø—è—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:")
            for func_id in still_sleeping:
                print(f"   - {func_id}")
        
        return len(now_active), len(still_sleeping)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
        return 0, len(CRITICAL_SLEEPING_FUNCTIONS)

if __name__ == "__main__":
    print("üéØ –°–ö–†–ò–ü–¢ –ê–ö–¢–ò–í–ê–¶–ò–ò –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –§–£–ù–ö–¶–ò–ô")
    print("–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç 17 –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–ø—è—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π")
    print("=" * 50)
    
    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
    activated, failed = activate_critical_functions()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    active_after, sleeping_after = verify_activation()
    
    print("\nüéâ –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   –í—Å–µ–≥–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–ø—è—â–∏—Ö: {len(CRITICAL_SLEEPING_FUNCTIONS)}")
    print(f"   –ü–æ–ø—ã—Ç–æ–∫ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {activated}")
    print(f"   –û—à–∏–±–æ–∫: {failed}")
    print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {active_after}")
    print(f"   –í—Å–µ –µ—â–µ —Å–ø—è—â–∏—Ö: {sleeping_after}")
    
    if sleeping_after == 0:
        print("üéâ –í–°–ï –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –§–£–ù–ö–¶–ò–ò –ê–ö–¢–ò–í–ò–†–û–í–ê–ù–´!")
    else:
        print(f"‚ö†Ô∏è  –û—Å—Ç–∞–ª–∏—Å—å —Å–ø—è—â–∏–º–∏: {sleeping_after} —Ñ—É–Ω–∫—Ü–∏–π")