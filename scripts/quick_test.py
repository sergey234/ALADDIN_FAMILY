#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ ALADDIN
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
"""

import sys
import os
import time
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(str(Path(__file__).parent.parent))

def quick_import_test():
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    print("üß™ –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –ò–ú–ü–û–†–¢–ê...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        from core.code_quality_manager import CodeQualityManager
        from core.configuration import ConfigurationManager
        from core.database import DatabaseManager
        from core.security_base import SecurityBase
        from core.base import CoreBase
        
        print("‚úÖ –ò–º–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: –£–°–ü–ï–®–ù–û")
        
        # –ò–º–ø–æ—Ä—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (—Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ)
        from security.authentication import AuthenticationManager
        from security.access_control import AccessControl
        
        print("‚úÖ –ò–º–ø–æ—Ä—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: –£–°–ü–ï–®–ù–û")
        
        # –ò–º–ø–æ—Ä—Ç AI –∞–≥–µ–Ω—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ)
        try:
            from ai_agents.security_analyst import SecurityAnalyst
            print("‚úÖ –ò–º–ø–æ—Ä—Ç AI –∞–≥–µ–Ω—Ç–æ–≤: –£–°–ü–ï–®–ù–û")
        except ImportError:
            print("‚ö†Ô∏è  AI –∞–≥–µ–Ω—Ç—ã: –ß–∞—Å—Ç–∏—á–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False

def quick_instantiation_test():
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤"""
    print("\nüß™ –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –°–û–ó–î–ê–ù–ò–Ø –≠–ö–ó–ï–ú–ü–õ–Ø–†–û–í...")
    
    try:
        from core.code_quality_manager import CodeQualityManager
        from core.configuration import ConfigurationManager
        from core.database import DatabaseManager
        from core.security_base import SecurityBase
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤
        cqm = CodeQualityManager()
        config = ConfigurationManager()
        db = DatabaseManager({'db_path': 'test_quick.db'})
        security = SecurityBase('quick_test_security')
        
        print("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤: –£–°–ü–ï–®–ù–û")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤
        cqm_status = cqm.get_status()
        config_status = config.get_status()
        db_status = db.get_status()
        security_status = security.get_status()
        
        print(f"‚úÖ –°—Ç–∞—Ç—É—Å—ã: CQM={cqm_status['status']}, "
              f"Config={config_status['status']}, "
              f"DB={db_status['status']}, "
              f"Security={security_status['status']}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤: {e}")
        return False

def quick_functionality_test():
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""
    print("\nüß™ –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–ò...")
    
    try:
        from core.code_quality_manager import CodeQualityManager
        
        cqm = CodeQualityManager()
        
        # –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        result = cqm.check_file_quality('core/base.py')
        score = result.metrics.overall_score
        print(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Ñ–∞–π–ª–∞: {score:.1f}/100")
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        status = cqm.get_status()
        print(f"‚úÖ –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã: {status['status']}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏: {e}")
        return False

def quick_pep8_test():
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç PEP8 —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è"""
    print("\nüß™ –ë–´–°–¢–†–´–ô –¢–ï–°–¢ PEP8...")
    
    try:
        import subprocess
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
        core_files = [
            'core/base.py',
            'core/configuration.py', 
            'core/database.py',
            'core/security_base.py',
            'core/code_quality_manager.py'
        ]
        
        total_errors = 0
        for file_path in core_files:
            if os.path.exists(file_path):
                result = subprocess.run([
                    'python3', '-m', 'flake8', '--select=E501', file_path
                ], capture_output=True, text=True)
                
                if result.returncode != 0:
                    errors = len(result.stdout.strip().split('\n'))
                    total_errors += errors
                    print(f"‚ö†Ô∏è  {file_path}: {errors} E501 –æ—à–∏–±–æ–∫")
                else:
                    print(f"‚úÖ {file_path}: PEP8 OK")
        
        if total_errors == 0:
            print("‚úÖ PEP8: 100% —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ!")
            return True
        else:
            print(f"‚ö†Ô∏è  PEP8: {total_errors} –æ—à–∏–±–æ–∫ E501")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ PEP8 —Ç–µ—Å—Ç–∞: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    print("üöÄ –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò ALADDIN")
    print("=" * 50)
    
    start_time = time.time()
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç—ã
    tests = [
        ("–ò–º–ø–æ—Ä—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤", quick_import_test),
        ("–°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤", quick_instantiation_test),
        ("–ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å", quick_functionality_test),
        ("PEP8 —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ", quick_pep8_test)
    ]
    
    results = []
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ {test_name}: {e}")
            results.append((test_name, False))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    end_time = time.time()
    duration = end_time - start_time
    
    print("\n" + "=" * 50)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ë–´–°–¢–†–û–ì–û –¢–ï–°–¢–ê")
    print("=" * 50)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{test_name}: {status}")
        if result:
            passed += 1
    
    success_rate = (passed / total) * 100
    print(f"\nüìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {passed}/{total} ({success_rate:.1f}%)")
    print(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.2f} —Å–µ–∫—É–Ω–¥")
    
    if success_rate == 100:
        print("üéØ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –†–ê–ë–û–¢–ï!")
        return True
    else:
        print("‚ö†Ô∏è  –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´! –¢–†–ï–ë–£–ï–¢–°–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï!")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)