#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ flake8 –¥–ª—è –≤—Å–µ—Ö 326 —Ñ—É–Ω–∫—Ü–∏–π SFM —Å–∏—Å—Ç–µ–º—ã
–°–æ–∑–¥–∞–µ—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –∫–∞–∂–¥–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ —Å –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π 1-2-3-4-5...
"""

import os
import subprocess
import json
from pathlib import Path
from collections import defaultdict
from datetime import datetime

def run_flake8_standard(file_path):
    """–ó–∞–ø—É—Å–∫ flake8 —Å –±–∞–∑–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
    try:
        result = subprocess.run([
            'python3', '-m', 'flake8', 
            file_path,
            '--statistics'
        ], capture_output=True, text=True, timeout=30)
        
        return result.returncode, result.stdout, result.stderr
    except Exception as e:
        return -1, "", str(e)

def analyze_errors(output):
    """–ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫ flake8"""
    errors = defaultdict(int)
    total_errors = 0
    
    lines = output.strip().split('\n')
    for line in lines:
        if ':' in line and not line.startswith('['):
            parts = line.split(':')
            if len(parts) >= 4:
                error_code = parts[3].strip().split()[0]
                errors[error_code] += 1
                total_errors += 1
    
    return total_errors, dict(errors)

def get_all_python_files():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ Python —Ñ–∞–π–ª—ã –≤ –ø—Ä–æ–µ–∫—Ç–µ"""
    python_files = []
    exclude_dirs = {
        'ALADDIN_BACKUP', 'ALADDIN_NEW_BACKUP', 'ALADDIN_SECURITY_FULL_BACKUP',
        'backup', '__pycache__', '.git', '.venv', 'venv', 'node_modules'
    }
    
    for root, dirs, files in os.walk('.'):
        # –ò—Å–∫–ª—é—á–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        dirs[:] = [d for d in dirs if not any(exclude in d for exclude in exclude_dirs)]
        
        for file in files:
            if file.endswith('.py') and not any(exclude in file for exclude in exclude_dirs):
                full_path = Path(root) / file
                relative_path = full_path.relative_to(Path('.'))
                python_files.append(relative_path)
    
    return sorted(python_files)

def categorize_file(file_path):
    """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ñ–∞–π–ª–∞"""
    path_str = str(file_path)
    
    if 'core/' in path_str:
        return 'CORE'
    elif 'security/safe_function_manager.py' in path_str:
        return 'SECURITY_SFM'
    elif 'security/ai_agents/' in path_str:
        return 'AI_AGENT'
    elif 'security/bots/' in path_str:
        return 'BOT'
    elif 'security/microservices/' in path_str:
        return 'MICROSERVICE'
    elif 'security/' in path_str:
        return 'SECURITY'
    elif 'config/' in path_str:
        return 'CONFIG'
    elif 'tests/' in path_str:
        return 'TEST'
    elif 'scripts/' in path_str:
        return 'SCRIPT'
    else:
        return 'OTHER'

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç –ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó FLAKE8 –î–õ–Ø –í–°–ï–• 326 –§–£–ù–ö–¶–ò–ô SFM –°–ò–°–¢–ï–ú–´")
    print("=" * 80)
    print("–°–æ–∑–¥–∞–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –∫–∞–∂–¥–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ —Å –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π 1-2-3-4-5...")
    print("=" * 80)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ Python —Ñ–∞–π–ª—ã
    all_python_files = get_all_python_files()
    print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(all_python_files)} Python —Ñ–∞–π–ª–æ–≤")
    
    results = {
        'total_files': len(all_python_files),
        'clean_files': 0,
        'files_with_errors': 0,
        'total_errors': 0,
        'error_types': defaultdict(int),
        'category_stats': defaultdict(lambda: {
            'total': 0,
            'clean': 0,
            'errors': 0,
            'total_error_count': 0
        }),
        'individual_reports': [],
        'analysis_time': datetime.now().isoformat()
    }
    
    print(f"\nüîç –ê–ù–ê–õ–ò–ó {len(all_python_files)} –§–ê–ô–õ–û–í:")
    print("-" * 80)
    
    for i, filepath in enumerate(all_python_files, 1):
        category = categorize_file(filepath)
        
        print(f"[{i:3d}/{len(all_python_files)}] {filepath}")
        
        # –ó–∞–ø—É—Å–∫ flake8
        returncode, stdout, stderr = run_flake8_standard(filepath)
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if returncode == 0:
            total_errors = 0
            errors = {}
            status = "‚úÖ –ß–ò–°–¢–´–ô"
            results['clean_files'] += 1
            results['category_stats'][category]['clean'] += 1
        else:
            total_errors, errors = analyze_errors(stdout)
            if total_errors == 0:
                status = "‚úÖ –ß–ò–°–¢–´–ô"
                results['clean_files'] += 1
                results['category_stats'][category]['clean'] += 1
            else:
                status = f"‚ùå {total_errors} –æ—à–∏–±–æ–∫"
                results['files_with_errors'] += 1
                results['category_stats'][category]['errors'] += 1
                results['category_stats'][category]['total_error_count'] += total_errors
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        results['total_errors'] += total_errors
        results['category_stats'][category]['total'] += 1
        
        for error_type, count in errors.items():
            results['error_types'][error_type] += count
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
        individual_report = {
            'function_number': i,
            'file_path': str(filepath),
            'category': category,
            'is_clean': total_errors == 0,
            'total_errors': total_errors,
            'errors': errors,
            'status': status,
            'full_output': stdout if total_errors > 0 else "",
            'analysis_time': datetime.now().isoformat()
        }
        results['individual_reports'].append(individual_report)
        
        print(f"     {status} ({category})")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-3 –æ—à–∏–±–∫–∏ –¥–ª—è —Ñ–∞–π–ª–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏
        if total_errors > 0 and total_errors <= 20:
            for error_type, count in sorted(errors.items(), key=lambda x: x[1], reverse=True)[:3]:
                print(f"       {error_type}: {count}")
        elif total_errors > 20:
            print(f"       –ú–ù–û–ì–û –û–®–ò–ë–û–ö - —Å–º. –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –ø–æ –∫–∞–∂–¥–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    create_individual_reports(results)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞
    create_summary_report(results)
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ JSON –¥–∞–Ω–Ω—ã—Ö
    output_file = 'COMPLETE_326_FUNCTIONS_ANALYSIS.json'
    with open(output_file, 'w', encoding='utf-8') as f:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º defaultdict –≤ –æ–±—ã—á–Ω—ã–µ dict –¥–ª—è JSON
        json_results = {
            'total_files': results['total_files'],
            'clean_files': results['clean_files'],
            'files_with_errors': results['files_with_errors'],
            'total_errors': results['total_errors'],
            'error_types': dict(results['error_types']),
            'category_stats': dict(results['category_stats']),
            'individual_reports': results['individual_reports'],
            'analysis_time': results['analysis_time']
        }
        json.dump(json_results, f, indent=2, ensure_ascii=False)
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print(f"\nüìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:")
    print("=" * 80)
    print(f"–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {results['total_files']}")
    print(f"–ß–∏—Å—Ç—ã—Ö —Ñ–∞–π–ª–æ–≤: {results['clean_files']} ({results['clean_files']/results['total_files']*100:.1f}%)")
    print(f"–§–∞–π–ª–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏: {results['files_with_errors']} ({results['files_with_errors']/results['total_files']*100:.1f}%)")
    print(f"–í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {results['total_errors']}")
    
    print(f"\nüìà –¢–û–ü-10 –û–®–ò–ë–û–ö –ü–û –¢–ò–ü–ê–ú:")
    for i, (error_type, count) in enumerate(sorted(results['error_types'].items(), key=lambda x: x[1], reverse=True)[:10], 1):
        print(f"  {i:2d}. {error_type}: {count}")
    
    print(f"\nüìÅ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú:")
    for category, stats in results['category_stats'].items():
        if stats['total'] > 0:
            clean_percent = stats['clean'] / stats['total'] * 100
            print(f"  {category}: {stats['clean']}/{stats['total']} —á–∏—Å—Ç—ã—Ö ({clean_percent:.1f}%), {stats['total_error_count']} –æ—à–∏–±–æ–∫")
    
    print(f"\nüíæ –û—Ç—á–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:")
    print(f"  - JSON: {output_file}")
    print(f"  - –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã: INDIVIDUAL_REPORTS/")
    print(f"  - –û–±—â–∏–π –æ—Ç—á–µ—Ç: COMPLETE_326_FUNCTIONS_SUMMARY.md")

def create_individual_reports(results):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –ø–æ –∫–∞–∂–¥–æ–π —Ñ—É–Ω–∫—Ü–∏–∏"""
    os.makedirs('INDIVIDUAL_REPORTS', exist_ok=True)
    
    for report in results['individual_reports']:
        function_num = report['function_number']
        file_path = report['file_path']
        category = report['category']
        total_errors = report['total_errors']
        errors = report['errors']
        status = report['status']
        
        # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –æ—Ç—á–µ—Ç–∞
        safe_filename = file_path.replace('/', '_').replace('\\', '_').replace('.py', '')
        report_filename = f"INDIVIDUAL_REPORTS/{function_num:03d}_{safe_filename}_REPORT.md"
        
        with open(report_filename, 'w', encoding='utf-8') as f:
            f.write(f"# üìã –û–¢–ß–ï–¢ #{function_num}: {file_path}\n\n")
            f.write(f"**–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞:** {report['analysis_time']}\n")
            f.write(f"**–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {category}\n")
            f.write(f"**–°—Ç–∞—Ç—É—Å:** {status}\n\n")
            
            f.write("## üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê\n\n")
            f.write(f"- **–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫:** {total_errors}\n")
            f.write(f"- **–¢–∏–ø —Ñ–∞–π–ª–∞:** {category}\n")
            f.write(f"- **–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É:** `{file_path}`\n\n")
            
            if total_errors == 0:
                f.write("## ‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢\n\n")
                f.write("**–§–∞–π–ª —á–∏—Å—Ç—ã–π! –û—à–∏–±–æ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.**\n\n")
                f.write("### üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n")
                f.write("- –§–∞–π–ª —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º PEP8\n")
                f.write("- –ö–æ–¥ –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥–∞–∫—à–Ω—É\n")
                f.write("- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è\n")
            else:
                f.write("## ‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–ù–´–ï –û–®–ò–ë–ö–ò\n\n")
                f.write("### üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –ø–æ —Ç–∏–ø–∞–º:\n\n")
                
                for error_type, count in sorted(errors.items(), key=lambda x: x[1], reverse=True):
                    error_desc = get_error_description(error_type)
                    f.write(f"- **{error_type}:** {count} –æ—à–∏–±–æ–∫ - {error_desc}\n")
                
                f.write("\n### üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é:\n\n")
                
                # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
                critical_errors = ['F401', 'F541', 'F841', 'F811', 'F821']
                critical_found = [e for e in errors.keys() if e in critical_errors]
                if critical_found:
                    f.write("#### üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï (–∏—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ):\n")
                    for error in critical_found:
                        f.write(f"- **{error}:** {get_error_fix_recommendation(error)}\n")
                    f.write("\n")
                
                # –í–∞–∂–Ω—ã–µ –æ—à–∏–±–∫–∏
                important_errors = ['E402', 'E302', 'E128', 'E129']
                important_found = [e for e in errors.keys() if e in important_errors]
                if important_found:
                    f.write("#### üü° –í–ê–ñ–ù–´–ï (–∏—Å–ø—Ä–∞–≤–∏—Ç—å –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è):\n")
                    for error in important_found:
                        f.write(f"- **{error}:** {get_error_fix_recommendation(error)}\n")
                    f.write("\n")
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                format_errors = ['W293', 'W291', 'W292', 'E501']
                format_found = [e for e in errors.keys() if e in format_errors]
                if format_found:
                    f.write("#### üü¢ –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï (–º–æ–∂–Ω–æ –æ—Ç–ª–æ–∂–∏—Ç—å):\n")
                    for error in format_found:
                        f.write(f"- **{error}:** {get_error_fix_recommendation(error)}\n")
                    f.write("\n")
                
                if report['full_output']:
                    f.write("### üìù –î–µ—Ç–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ flake8:\n\n")
                    f.write("```\n")
                    f.write(report['full_output'])
                    f.write("\n```\n")
            
            f.write("\n---\n")
            f.write(f"**–û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω:** AI Security Assistant  \n")
            f.write(f"**–î–∞—Ç–∞:** {report['analysis_time']}  \n")
            f.write(f"**–§—É–Ω–∫—Ü–∏—è #{function_num} –∏–∑ {results['total_files']}**\n")

def create_summary_report(results):
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—â–µ–≥–æ —Å–≤–æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    with open('COMPLETE_326_FUNCTIONS_SUMMARY.md', 'w', encoding='utf-8') as f:
        f.write("# üéØ –ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó FLAKE8 –î–õ–Ø –í–°–ï–• 326 –§–£–ù–ö–¶–ò–ô SFM –°–ò–°–¢–ï–ú–´\n\n")
        f.write(f"**–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞:** {results['analysis_time']}\n")
        f.write(f"**–ê–Ω–∞–ª–∏—Ç–∏–∫:** AI Security Assistant\n")
        f.write(f"**–í—Å–µ–≥–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ:** {results['total_files']} —Ñ–∞–π–ª–æ–≤\n\n")
        
        f.write("## üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê\n\n")
        f.write(f"- **–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤:** {results['total_files']}\n")
        f.write(f"- **–ß–∏—Å—Ç—ã—Ö —Ñ–∞–π–ª–æ–≤:** {results['clean_files']} ({results['clean_files']/results['total_files']*100:.1f}%)\n")
        f.write(f"- **–§–∞–π–ª–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏:** {results['files_with_errors']} ({results['files_with_errors']/results['total_files']*100:.1f}%)\n")
        f.write(f"- **–í—Å–µ–≥–æ –æ—à–∏–±–æ–∫:** {results['total_errors']}\n\n")
        
        f.write("## üìà –¢–û–ü-10 –û–®–ò–ë–û–ö –ü–û –¢–ò–ü–ê–ú\n\n")
        for i, (error_type, count) in enumerate(sorted(results['error_types'].items(), key=lambda x: x[1], reverse=True)[:10], 1):
            f.write(f"{i:2d}. **{error_type}:** {count} –æ—à–∏–±–æ–∫\n")
        
        f.write("\n## üìÅ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú\n\n")
        for category, stats in results['category_stats'].items():
            if stats['total'] > 0:
                clean_percent = stats['clean'] / stats['total'] * 100
                f.write(f"- **{category}:** {stats['clean']}/{stats['total']} —á–∏—Å—Ç—ã—Ö ({clean_percent:.1f}%), {stats['total_error_count']} –æ—à–∏–±–æ–∫\n")
        
        f.write("\n## üìã –°–ü–ò–°–û–ö –í–°–ï–• –§–£–ù–ö–¶–ò–ô\n\n")
        f.write("| ‚Ññ | –§–∞–π–ª | –ö–∞—Ç–µ–≥–æ—Ä–∏—è | –°—Ç–∞—Ç—É—Å | –û—à–∏–±–æ–∫ |\n")
        f.write("|---|------|-----------|--------|--------|\n")
        
        for report in results['individual_reports']:
            status_icon = "‚úÖ" if report['is_clean'] else "‚ùå"
            f.write(f"| {report['function_number']} | `{report['file_path']}` | {report['category']} | {status_icon} | {report['total_errors']} |\n")
        
        f.write("\n## üéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï\n\n")
        if results['clean_files'] / results['total_files'] > 0.8:
            f.write("‚úÖ **–°–ò–°–¢–ï–ú–ê –í –û–¢–õ–ò–ß–ù–û–ú –°–û–°–¢–û–Ø–ù–ò–ò** - –±–æ–ª–µ–µ 80% —Ñ–∞–π–ª–æ–≤ —á–∏—Å—Ç—ã–µ\n")
        elif results['clean_files'] / results['total_files'] > 0.5:
            f.write("‚ö†Ô∏è **–°–ò–°–¢–ï–ú–ê –í –•–û–†–û–®–ï–ú –°–û–°–¢–û–Ø–ù–ò–ò** - –±–æ–ª–µ–µ 50% —Ñ–∞–π–ª–æ–≤ —á–∏—Å—Ç—ã–µ\n")
        else:
            f.write("‚ùå **–°–ò–°–¢–ï–ú–ê –¢–†–ï–ë–£–ï–¢ –í–ù–ò–ú–ê–ù–ò–Ø** - –º–µ–Ω–µ–µ 50% —Ñ–∞–π–ª–æ–≤ —á–∏—Å—Ç—ã–µ\n")
        
        f.write(f"\n**–î–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –ø–æ –∫–∞–∂–¥–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –ø–∞–ø–∫–µ `INDIVIDUAL_REPORTS/`**\n")

def get_error_description(error_code):
    """–ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏"""
    descriptions = {
        'E501': '–î–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ (>79 —Å–∏–º–≤–æ–ª–æ–≤)',
        'W293': '–ü—Ä–æ–±–µ–ª—ã –≤ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫–∞—Ö',
        'F401': '–ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã',
        'W291': '–ü—Ä–æ–±–µ–ª—ã –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏',
        'E302': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫',
        'E402': '–ò–º–ø–æ—Ä—Ç—ã –Ω–µ –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞',
        'E128': '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã',
        'W292': '–ù–µ—Ç –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ –∫–æ–Ω—Ü–µ —Ñ–∞–π–ª–∞',
        'F841': '–ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ',
        'F541': 'f-—Å—Ç—Ä–æ–∫–∏ –±–µ–∑ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤',
        'E129': '–í–∏–∑—É–∞–ª—å–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã',
        'F811': '–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞',
        'F821': '–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –∏–º—è'
    }
    return descriptions.get(error_code, f'–û—à–∏–±–∫–∞ {error_code}')

def get_error_fix_recommendation(error_code):
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é –æ—à–∏–±–∫–∏"""
    recommendations = {
        'E501': '–†–∞–∑–±–∏—Ç—å –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ—Ä–æ—Ç–∫–∏—Ö',
        'W293': '–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–±–µ–ª—ã –≤ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫–∞—Ö',
        'F401': '–£–¥–∞–ª–∏—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã',
        'W291': '–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–±–µ–ª—ã –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫',
        'E302': '–î–æ–±–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –º–µ–∂–¥—É —Ñ—É–Ω–∫—Ü–∏—è–º–∏',
        'E402': '–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –∏–º–ø–æ—Ä—Ç—ã –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞',
        'E128': '–ò—Å–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—Å—Ç—É–ø—ã –≤ –∫–æ–¥–µ',
        'W292': '–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –≤ –∫–æ–Ω—Ü–µ —Ñ–∞–π–ª–∞',
        'F841': '–£–¥–∞–ª–∏—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ',
        'F541': '–ó–∞–º–µ–Ω–∏—Ç—å f-—Å—Ç—Ä–æ–∫–∏ –±–µ–∑ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤ –Ω–∞ –æ–±—ã—á–Ω—ã–µ',
        'E129': '–ò—Å–ø—Ä–∞–≤–∏—Ç—å –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã',
        'F811': '–£–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∏–º–ø–æ—Ä—Ç—ã',
        'F821': '–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ'
    }
    return recommendations.get(error_code, f'–ò—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É {error_code}')

if __name__ == "__main__":
    main()