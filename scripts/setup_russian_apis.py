#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö API –∫–ª—é—á–µ–π
"""

import json
import os
import sys

def setup_yandex_api_key():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ API –∫–ª—é—á–∞ –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç"""
    print("üó∫Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç—ã API")
    print("=" * 50)
    
    print("1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://developer.tech.yandex.ru/")
    print("2. –ù–∞–∂–º–∏—Ç–µ '–ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á'")
    print("3. –í–æ–π–¥–∏—Ç–µ —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å ID")
    print("4. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç 'ALADDIN Security'")
    print("5. –í—ã–±–µ—Ä–∏—Ç–µ '–ö–∞—Ä—Ç—ã' ‚Üí 'JavaScript API'")
    print("6. –£–∫–∞–∂–∏—Ç–µ –¥–æ–º–µ–Ω: localhost")
    print("7. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π API –∫–ª—é—á")
    print()
    
    api_key = input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à API –∫–ª—é—á –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç: ").strip()
    
    if not api_key or api_key == "YOUR_YANDEX_API_KEY_HERE":
        print("‚ùå API –∫–ª—é—á –Ω–µ –≤–≤–µ–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω")
        return False
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config_path = "config/russian_apis_config.json"
    
    try:
        if os.path.exists(config_path):
            with open(config_path, 'r', encoding='utf-8') as f:
                config = json.load(f)
        else:
            config = {}
        
        if "yandex_maps" not in config:
            config["yandex_maps"] = {}
        
        config["yandex_maps"]["api_key"] = api_key
        config["yandex_maps"]["enabled"] = True
        
        with open(config_path, 'w', encoding='utf-8') as f:
            json.dump(config, f, indent=2, ensure_ascii=False)
        
        print("‚úÖ API –∫–ª—é—á –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

def test_api_keys():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∫–ª—é—á–µ–π"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∫–ª—é—á–µ–π")
    print("=" * 50)
    
    try:
        from security.russian_api_manager import russian_api_manager
        import asyncio
        
        # –¢–µ—Å—Ç –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
        print("üåç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è...")
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        try:
            result = loop.run_until_complete(
                russian_api_manager.geocode_address("–ú–æ—Å–∫–≤–∞, –ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å")
            )
            loop.close()
            
            if result and result.coordinates != [0.0, 0.0]:
                print("‚úÖ –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                print(f"   üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {result.coordinates}")
                print(f"   üèôÔ∏è –ì–æ—Ä–æ–¥: {result.city}")
                print(f"   üåç –°—Ç—Ä–∞–Ω–∞: {result.country}")
            else:
                print("‚ùå –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–µ–Ω API –∫–ª—é—á)")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        
        # –¢–µ—Å—Ç –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
        print("\nüõ£Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏...")
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        try:
            result = loop.run_until_complete(
                russian_api_manager.build_route("–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥")
            )
            loop.close()
            
            if result and result.distance > 0:
                print("‚úÖ –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                print(f"   üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {result.distance:.0f} –º")
                print(f"   ‚è±Ô∏è –í—Ä–µ–º—è: {result.duration:.0f} —Å–µ–∫")
            else:
                print("‚ùå –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–µ–Ω API –∫–ª—é—á)")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏: {e}")
        
        # –¢–µ—Å—Ç –ì–õ–û–ù–ê–°–°
        print("\nüõ∞Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ì–õ–û–ù–ê–°–°...")
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        try:
            result = loop.run_until_complete(
                russian_api_manager.get_glonass_coordinates("test_device")
            )
            loop.close()
            
            if result:
                print("‚úÖ –ì–õ–û–ù–ê–°–° —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                print(f"   üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {result}")
            else:
                print("‚ùå –ì–õ–û–ù–ê–°–° –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ì–õ–û–ù–ê–°–°: {e}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üá∑üá∫ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö API –¥–ª—è ALADDIN Security")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config_path = "config/russian_apis_config.json"
    if not os.path.exists(config_path):
        print(f"‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_path}")
        print("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–Ω–∞—á–∞–ª–∞")
        return
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ø–Ω–¥–µ–∫—Å API
    if setup_yandex_api_key():
        print("\n‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        test_api_keys()
        
        print("\nüöÄ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ API:")
        print("   python3 russian_apis_server.py")
        print("   –∏–ª–∏")
        print("   ./start_russian_apis.sh")
    else:
        print("\n‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

if __name__ == '__main__':
    main()