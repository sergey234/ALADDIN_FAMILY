#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
"""

import csv
import json
import os
from datetime import datetime
from elasticsearch_simulator import ElasticsearchSimulator

def test_export():
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    es_simulator = ElasticsearchSimulator()
    export_dir = "exports"
    os.makedirs(export_dir, exist_ok=True)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    results = es_simulator.search(query="security", limit=10)
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ –ª–æ–≥–æ–≤: {len(results.get('logs', []))}")
    
    # –¢–µ—Å—Ç CSV —ç–∫—Å–ø–æ—Ä—Ç–∞
    try:
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"test_logs_{timestamp}.csv"
        filepath = os.path.join(export_dir, filename)
        
        with open(filepath, 'w', newline='', encoding='utf-8') as csvfile:
            writer = csv.writer(csvfile)
            writer.writerow(['Timestamp', 'Level', 'Component', 'Message', 'Metadata'])
            
            for log in results.get('logs', []):
                writer.writerow([
                    log.get('timestamp', ''),
                    log.get('level', ''),
                    log.get('component', ''),
                    log.get('message', ''),
                    json.dumps(log.get('metadata', {}), ensure_ascii=False)
                ])
        
        print(f"‚úÖ CSV —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {filename}")
        print(f"üìÅ –ü—É—Ç—å: {filepath}")
        print(f"üìè –†–∞–∑–º–µ—Ä: {os.path.getsize(filepath)} –±–∞–π—Ç")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ CSV —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
    
    # –¢–µ—Å—Ç JSON —ç–∫—Å–ø–æ—Ä—Ç–∞
    try:
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"test_logs_{timestamp}.json"
        filepath = os.path.join(export_dir, filename)
        
        with open(filepath, 'w', encoding='utf-8') as jsonfile:
            json.dump(results, jsonfile, ensure_ascii=False, indent=2)
        
        print(f"‚úÖ JSON —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {filename}")
        print(f"üìÅ –ü—É—Ç—å: {filepath}")
        print(f"üìè –†–∞–∑–º–µ—Ä: {os.path.getsize(filepath)} –±–∞–π—Ç")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ JSON —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
    
    # –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
    print("\nüìÅ –°–ø–∏—Å–æ–∫ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:")
    if os.path.exists(export_dir):
        for filename in os.listdir(export_dir):
            filepath = os.path.join(export_dir, filename)
            if os.path.isfile(filepath):
                stat = os.stat(filepath)
                size = stat.st_size
                created = datetime.fromtimestamp(stat.st_ctime).strftime("%Y-%m-%d %H:%M:%S")
                print(f"  üìÑ {filename} ({size} –±–∞–π—Ç, {created})")
    
    print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == '__main__':
    test_export()