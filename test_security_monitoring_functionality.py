#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ SecurityMonitoringManager
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏ –º–µ—Ç–æ–¥—ã
"""

import sys
import os
import asyncio
import tempfile
import shutil
from datetime import datetime, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from security.security_monitoring_a_plus import (
    SecurityMonitoringManager,
    MonitoringLevel,
    AlertType,
    SecurityEvent,
    MonitoringConfig,
    ThreatDetectionStrategy,
    AnomalyDetectionStrategy,
    MonitoringDataManager,
    AlertManager
)


def test_enums():
    """–¢–µ—Å—Ç –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–π"""
    print("1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–π...")
    
    # –¢–µ—Å—Ç MonitoringLevel
    assert MonitoringLevel.LOW.value == "low"
    assert MonitoringLevel.MEDIUM.value == "medium"
    assert MonitoringLevel.HIGH.value == "high"
    assert MonitoringLevel.CRITICAL.value == "critical"
    
    # –¢–µ—Å—Ç AlertType
    assert AlertType.THREAT_DETECTED.value == "threat_detected"
    assert AlertType.ANOMALY_FOUND.value == "anomaly_found"
    assert AlertType.SYSTEM_BREACH.value == "system_breach"
    
    print("‚úÖ –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")


def test_dataclasses():
    """–¢–µ—Å—Ç dataclasses"""
    print("2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ dataclasses...")
    
    # –¢–µ—Å—Ç SecurityEvent
    event = SecurityEvent(
        event_id="test_001",
        timestamp=datetime.now(),
        level=MonitoringLevel.MEDIUM,
        alert_type=AlertType.THREAT_DETECTED,
        description="Test event",
        source="test_source"
    )
    
    assert event.event_id == "test_001"
    assert event.level == MonitoringLevel.MEDIUM
    assert event.alert_type == AlertType.THREAT_DETECTED
    assert isinstance(event.timestamp, datetime)
    
    # –¢–µ—Å—Ç MonitoringConfig
    config = MonitoringConfig(
        enabled=True,
        alert_threshold=5,
        check_interval=30,
        retention_days=7,
        log_level="DEBUG"
    )
    
    assert config.enabled == True
    assert config.alert_threshold == 5
    assert config.check_interval == 30
    
    print("‚úÖ Dataclasses —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")


def test_security_checks():
    """–¢–µ—Å—Ç –∫–ª–∞—Å—Å–æ–≤ –ø—Ä–æ–≤–µ—Ä–æ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    print("3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ –ø—Ä–æ–≤–µ—Ä–æ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    config = MonitoringConfig(
        enabled=True,
        alert_threshold=5,
        check_interval=30,
        retention_days=7,
        log_level="INFO"
    )
    
    # –¢–µ—Å—Ç ThreatDetectionStrategy
    threat_check = ThreatDetectionStrategy(config)
    assert threat_check.get_strategy_name() == "ThreatDetection"
    
    # –¢–µ—Å—Ç AnomalyDetectionStrategy
    anomaly_check = AnomalyDetectionStrategy(config)
    assert anomaly_check.get_strategy_name() == "AnomalyDetection"
    
    # –¢–µ—Å—Ç MonitoringDataManager
    data_manager = MonitoringDataManager(config)
    assert data_manager is not None
    
    # –¢–µ—Å—Ç AlertManager
    alert_manager = AlertManager(config)
    assert alert_manager is not None
    
    print("‚úÖ –ö–ª–∞—Å—Å—ã –ø—Ä–æ–≤–µ—Ä–æ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")


async def test_security_monitoring_manager():
    """–¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    print("4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SecurityMonitoringManager...")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    temp_dir = tempfile.mkdtemp()
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        manager = SecurityMonitoringManager(
            config=MonitoringConfig(
                enabled=True,
                alert_threshold=3,
                check_interval=10,
                retention_days=7,
                log_level="INFO"
            )
        )
        
        # –¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        assert manager.config.enabled == True
        assert manager.config.alert_threshold == 3
        
        # –¢–µ—Å—Ç –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        await manager.start_monitoring()
        assert manager.is_monitoring_active() == True
        
        # –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–æ–∫
        threat_check = ThreatDetectionStrategy(manager.config)
        anomaly_check = AnomalyDetectionStrategy(manager.config)
        
        manager.add_security_check(threat_check)
        manager.add_security_check(anomaly_check)
        
        assert len(manager.security_checks) == 2
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
        event = SecurityEvent(
            event_id="test_event_001",
            timestamp=datetime.now(),
            level=MonitoringLevel.LOW,
            alert_type=AlertType.THREAT_DETECTED,
            description="Test security event",
            source="test_system"
        )
        
        manager.add_security_event(event)
        assert len(manager.security_events) == 1
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats = manager.get_statistics()
        assert "total_events" in stats
        assert "active_checks" in stats
        assert "monitoring_uptime" in stats
        
        # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞
        report = manager.generate_report()
        assert report is not None
        assert hasattr(report, 'total_events')
        assert hasattr(report, 'monitoring_level')
        
        # –¢–µ—Å—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        await manager.stop_monitoring()
        assert manager.is_monitoring_active() == False
        
        print("‚úÖ SecurityMonitoringManager —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
    finally:
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        shutil.rmtree(temp_dir, ignore_errors=True)


def test_error_handling():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
    print("5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫...")
    
    try:
        # –¢–µ—Å—Ç —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
        config = MonitoringConfig(
            enabled=True,
            alert_threshold=-1,  # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            check_interval=0,    # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            retention_days=0,
            log_level="INVALID"
        )
        
        manager = SecurityMonitoringManager(config=config)
        
        # –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞—Ç—å—Å—è, –Ω–æ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
        assert manager.config.alert_threshold >= 0
        assert manager.config.check_interval > 0
        
        print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—à–∏–±–æ–∫: {e}")
        raise


def test_performance():
    """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    print("6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
    
    import time
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    manager = SecurityMonitoringManager()
    
    # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —Å–æ–±—ã—Ç–∏–π
    start_time = time.time()
    
    for i in range(100):
        event = SecurityEvent(
            event_id=f"perf_test_{i:03d}",
            timestamp=datetime.now(),
            level=MonitoringLevel.LOW,
            alert_type=AlertType.THREAT_DETECTED,
            description=f"Performance test event {i}",
            source="performance_test"
        )
        manager.add_security_event(event)
    
    end_time = time.time()
    creation_time = end_time - start_time
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ 100 —Å–æ–±—ã—Ç–∏–π –∑–∞ {creation_time:.3f} —Å–µ–∫—É–Ω–¥")
    assert creation_time < 1.0  # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –±—ã—Å—Ç—Ä–µ–µ 1 —Å–µ–∫—É–Ω–¥—ã
    
    # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞
    start_time = time.time()
    report = manager.generate_report()
    end_time = time.time()
    
    report_time = end_time - start_time
    print(f"‚úÖ –û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∑–∞ {report_time:.3f} —Å–µ–∫—É–Ω–¥")
    assert report_time < 0.5  # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –±—ã—Å—Ç—Ä–µ–µ 0.5 —Å–µ–∫—É–Ω–¥—ã


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ê SECURITY MONITORING A+ SYSTEM")
    print("=" * 60)
    
    try:
        test_enums()
        test_dataclasses()
        test_security_checks()
        await test_security_monitoring_manager()
        test_error_handling()
        test_performance()
        
        print("=" * 60)
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("‚úÖ SecurityMonitoringManager –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ê–•: {e}")
        import traceback
        traceback.print_exc()
        return False


if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1)