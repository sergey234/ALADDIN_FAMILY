#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
API –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∞–ª–µ—Ä—Ç–æ–≤ ALADDIN
REST API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–∞–º–∏

–ê–≤—Ç–æ—Ä: ALADDIN Security Team
–í–µ—Ä—Å–∏—è: 1.0
–î–∞—Ç–∞: 2025-09-08
"""

import json
from datetime import datetime
from flask import Flask, jsonify, request
from flask_cors import CORS

# –ò–º–ø–æ—Ä—Ç —Å–∏—Å—Ç–µ–º—ã –∞–ª–µ—Ä—Ç–æ–≤
try:
    from security.advanced_alerting_system import alerting_system, AlertRule, AlertType, AlertSeverity, AlertChannel
except ImportError as e:
    print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –∞–ª–µ—Ä—Ç–æ–≤: {e}")
    alerting_system = None

app = Flask(__name__)
CORS(app)

@app.route('/api/alerts/health')
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è API –∞–ª–µ—Ä—Ç–æ–≤"""
    return jsonify({
        'status': 'healthy',
        'service': 'ALADDIN Alerts API',
        'version': '1.0',
        'timestamp': datetime.now().isoformat()
    })

@app.route('/api/alerts/active')
def get_active_alerts():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤"""
    try:
        if not alerting_system:
            return jsonify({'error': '–°–∏—Å—Ç–µ–º–∞ –∞–ª–µ—Ä—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'}), 500
        
        alerts = alerting_system.get_active_alerts()
        
        alerts_data = []
        for alert in alerts:
            alerts_data.append({
                'id': alert.id,
                'rule_name': alert.rule_name,
                'alert_type': alert.alert_type.value,
                'severity': alert.severity.value,
                'title': alert.title,
                'message': alert.message,
                'timestamp': alert.timestamp.isoformat(),
                'metadata': alert.metadata,
                'resolved': alert.resolved
            })
        
        return jsonify({
            'success': True,
            'alerts': alerts_data,
            'count': len(alerts_data)
        })
        
    except Exception as e:
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/alerts/history')
def get_alert_history():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∞–ª–µ—Ä—Ç–æ–≤"""
    try:
        if not alerting_system:
            return jsonify({'error': '–°–∏—Å—Ç–µ–º–∞ –∞–ª–µ—Ä—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'}), 500
        
        limit = request.args.get('limit', 100, type=int)
        alerts = alerting_system.get_alert_history(limit)
        
        alerts_data = []
        for alert in alerts:
            alerts_data.append({
                'id': alert.id,
                'rule_name': alert.rule_name,
                'alert_type': alert.alert_type.value,
                'severity': alert.severity.value,
                'title': alert.title,
                'message': alert.message,
                'timestamp': alert.timestamp.isoformat(),
                'resolved': alert.resolved,
                'resolved_at': alert.resolved_at.isoformat() if alert.resolved_at else None,
                'metadata': alert.metadata
            })
        
        return jsonify({
            'success': True,
            'alerts': alerts_data,
            'count': len(alerts_data)
        })
        
    except Exception as e:
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/alerts/resolve/<alert_id>', methods=['POST'])
def resolve_alert(alert_id):
    """–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞"""
    try:
        if not alerting_system:
            return jsonify({'error': '–°–∏—Å—Ç–µ–º–∞ –∞–ª–µ—Ä—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'}), 500
        
        success = alerting_system.resolve_alert(alert_id)
        
        if success:
            return jsonify({
                'success': True,
                'message': f'–ê–ª–µ—Ä—Ç {alert_id} —Ä–∞–∑—Ä–µ—à–µ–Ω'
            })
        else:
            return jsonify({
                'success': False,
                'error': '–ê–ª–µ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
            }), 404
            
    except Exception as e:
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/alerts/statistics')
def get_alert_statistics():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤"""
    try:
        if not alerting_system:
            return jsonify({'error': '–°–∏—Å—Ç–µ–º–∞ –∞–ª–µ—Ä—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'}), 500
        
        stats = alerting_system.get_alert_statistics()
        
        return jsonify({
            'success': True,
            'statistics': stats
        })
        
    except Exception as e:
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/alerts/rules')
def get_alert_rules():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –∞–ª–µ—Ä—Ç–æ–≤"""
    try:
        if not alerting_system:
            return jsonify({'error': '–°–∏—Å—Ç–µ–º–∞ –∞–ª–µ—Ä—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'}), 500
        
        rules_data = []
        for rule in alerting_system.alert_rules:
            rules_data.append({
                'name': rule.name,
                'description': rule.description,
                'alert_type': rule.alert_type.value,
                'severity': rule.severity.value,
                'condition': rule.condition,
                'channels': [ch.value for ch in rule.channels],
                'cooldown': rule.cooldown,
                'enabled': rule.enabled
            })
        
        return jsonify({
            'success': True,
            'rules': rules_data,
            'count': len(rules_data)
        })
        
    except Exception as e:
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/alerts/rules/<rule_name>/toggle', methods=['POST'])
def toggle_rule(rule_name):
    """–í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞"""
    try:
        if not alerting_system:
            return jsonify({'error': '–°–∏—Å—Ç–µ–º–∞ –∞–ª–µ—Ä—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'}), 500
        
        success = alerting_system.update_rule(rule_name, enabled=not alerting_system.alert_rules[0].enabled)
        
        if success:
            return jsonify({
                'success': True,
                'message': f'–ü—Ä–∞–≤–∏–ª–æ {rule_name} –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ'
            })
        else:
            return jsonify({
                'success': False,
                'error': '–ü—Ä–∞–≤–∏–ª–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
            }), 404
            
    except Exception as e:
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/alerts/check', methods=['POST'])
def check_alerts():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –∞–ª–µ—Ä—Ç—ã"""
    try:
        if not alerting_system:
            return jsonify({'error': '–°–∏—Å—Ç–µ–º–∞ –∞–ª–µ—Ä—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'}), 500
        
        data = request.get_json()
        if not data:
            return jsonify({'error': '–î–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã'}), 400
        
        alerts = alerting_system.check_alerts(data)
        
        alerts_data = []
        for alert in alerts:
            alerts_data.append({
                'id': alert.id,
                'rule_name': alert.rule_name,
                'alert_type': alert.alert_type.value,
                'severity': alert.severity.value,
                'title': alert.title,
                'message': alert.message,
                'timestamp': alert.timestamp.isoformat(),
                'metadata': alert.metadata
            })
        
        return jsonify({
            'success': True,
            'alerts': alerts_data,
            'count': len(alerts_data)
        })
        
    except Exception as e:
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/alerts/webhook', methods=['POST'])
def webhook_receiver():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    try:
        data = request.get_json()
        print(f"üîó –ü–æ–ª—É—á–µ–Ω webhook: {data}")
        
        return jsonify({
            'success': True,
            'message': 'Webhook –ø–æ–ª—É—á–µ–Ω'
        })
        
    except Exception as e:
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

if __name__ == '__main__':
    print("üö® –ó–∞–ø—É—Å–∫ ALADDIN Alerts API...")
    print("üìä API –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:5003")
    print("üîß –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:5003/api/alerts/health")
    print("üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    
    try:
        app.run(host='0.0.0.0', port=5003, debug=False, threaded=True)
    except KeyboardInterrupt:
        print("\nüõë API –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ API: {e}")