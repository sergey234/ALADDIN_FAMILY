package family.aladdin.android.ui.extensions

import androidx.compose.foundation.clickable
import androidx.compose.foundation.interaction.MutableInteractionSource
import androidx.compose.foundation.layout.sizeIn
import androidx.compose.material.ripple.rememberRipple
import androidx.compose.runtime.Composable
import androidx.compose.runtime.remember
import androidx.compose.ui.Modifier
import androidx.compose.ui.semantics.*
import androidx.compose.ui.state.ToggleableState
import androidx.compose.ui.unit.dp

/**
 * ü¶Ø Accessibility Extensions
 * –†–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Jetpack Compose
 * –£–ø—Ä–æ—â–∞—é—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ TalkBack –∏ –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
 */

// MARK: - Modifier Extensions

/**
 * –î–æ–±–∞–≤–∏—Ç—å TalkBack description –¥–ª—è –∫–Ω–æ–ø–∫–∏
 */
@Composable
fun Modifier.accessibilityButton(
    label: String,
    hint: String? = null,
    onClick: () -> Unit
): Modifier {
    return this
        .clickable(
            onClick = onClick,
            role = Role.Button,
            interactionSource = remember { MutableInteractionSource() },
            indication = rememberRipple()
        )
        .semantics {
            contentDescription = if (hint != null) "$label. $hint" else label
            role = Role.Button
        }
}

/**
 * –î–æ–±–∞–≤–∏—Ç—å content description (–¥–ª—è TalkBack)
 */
fun Modifier.accessibilityDescription(description: String): Modifier {
    return this.semantics {
        contentDescription = description
    }
}

/**
 * –î–æ–±–∞–≤–∏—Ç—å accessibility –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
 */
fun Modifier.accessibilityHeading(label: String): Modifier {
    return this.semantics {
        heading()
        contentDescription = label
    }
}

/**
 * –î–æ–±–∞–≤–∏—Ç—å accessibility –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
fun Modifier.accessibilityImage(label: String, isDecorative: Boolean = false): Modifier {
    return if (isDecorative) {
        this.semantics { 
            // –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ - —Å–∫—Ä—ã–≤–∞–µ–º –æ—Ç TalkBack
        }
    } else {
        this.semantics {
            contentDescription = label
            role = Role.Image
        }
    }
}

/**
 * –î–æ–±–∞–≤–∏—Ç—å accessibility –¥–ª—è toggle/switch
 */
fun Modifier.accessibilityToggle(label: String, isOn: Boolean): Modifier {
    return this.semantics {
        contentDescription = "$label. ${if (isOn) "–í–∫–ª—é—á–µ–Ω–æ" else "–í—ã–∫–ª—é—á–µ–Ω–æ"}"
        role = Role.Switch
        toggleableState = ToggleableState(isOn)
    }
}

/**
 * –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –∫–∞—Å–∞–Ω–∏—è (48dp)
 */
fun Modifier.minimumTouchTarget(): Modifier {
    return this.sizeIn(
        minWidth = 48.dp,
        minHeight = 48.dp
    )
}

/**
 * –°–∫—Ä—ã—Ç—å –æ—Ç TalkBack (–¥–ª—è –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤)
 */
fun Modifier.decorative(): Modifier {
    return this.semantics {
        // –°–∫—Ä—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –æ—Ç accessibility —Å–µ—Ä–≤–∏—Å–æ–≤
    }
}

// MARK: - Accessibility Labels Constants

object AccessibilityLabels {
    
    // Buttons
    const val BACK_BUTTON = "–ù–∞–∑–∞–¥"
    const val CLOSE_BUTTON = "–ó–∞–∫—Ä—ã—Ç—å"
    const val SETTINGS_BUTTON = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
    const val NOTIFICATIONS_BUTTON = "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
    const val ADD_BUTTON = "–î–æ–±–∞–≤–∏—Ç—å"
    const val DELETE_BUTTON = "–£–¥–∞–ª–∏—Ç—å"
    const val SAVE_BUTTON = "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"
    const val CANCEL_BUTTON = "–û—Ç–º–µ–Ω–∞"
    
    // VPN
    const val VPN_TOGGLE = "VPN –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å"
    const val VPN_STATUS_PROTECTED = "VPN –ø–æ–¥–∫–ª—é—á—ë–Ω, —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞—â–∏—â–µ–Ω–æ"
    const val VPN_STATUS_NOT_PROTECTED = "VPN –æ—Ç–∫–ª—é—á—ë–Ω, —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –∑–∞—â–∏—â–µ–Ω–æ"
    
    // Family
    const val FAMILY_MEMBER_CARD = "–ö–∞—Ä—Ç–æ—á–∫–∞ —á–ª–µ–Ω–∞ —Å–µ–º—å–∏"
    const val ADD_FAMILY_MEMBER = "–î–æ–±–∞–≤–∏—Ç—å —á–ª–µ–Ω–∞ —Å–µ–º—å–∏"
    
    // Threats
    const val THREAT_CARD = "–ö–∞—Ä—Ç–æ—á–∫–∞ —É–≥—Ä–æ–∑—ã"
    const val THREAT_BLOCKED = "–£–≥—Ä–æ–∑–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞"
    
    // Devices
    const val DEVICE_CARD = "–ö–∞—Ä—Ç–æ—á–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"
    const val ADD_DEVICE = "–î–æ–±–∞–≤–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ"
}



