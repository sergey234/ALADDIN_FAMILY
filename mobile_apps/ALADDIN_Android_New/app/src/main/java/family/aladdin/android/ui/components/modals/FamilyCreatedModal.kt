package family.aladdin.android.ui.components.modals

import android.graphics.Bitmap
import android.graphics.Color as AndroidColor
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.Checkbox
import androidx.compose.material3.CheckboxDefaults
import androidx.compose.material3.Text
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Brush
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.asImageBitmap
import androidx.compose.ui.text.font.FontFamily
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.compose.ui.window.Dialog
import androidx.compose.ui.window.DialogProperties
// import com.google.zxing.BarcodeFormat
// import com.google.zxing.qrcode.QRCodeWriter
import family.aladdin.android.ui.components.buttons.PrimaryButton
import family.aladdin.android.ui.theme.*

/**
 * ‚úÖ Family Created Modal
 * –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ "–°–µ–º—å—è —Å–æ–∑–¥–∞–Ω–∞!" —Å QR-–∫–æ–¥–æ–º
 * –û–∫–Ω–æ #4 –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
 * 
 * –†–ê–ó–ú–ï–†–´ (—Ç—â–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ!):
 * - Modal width: 340dp
 * - Modal height: 600dp (—Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π –µ—Å–ª–∏ –Ω—É–∂–Ω–æ!)
 * - QR code: 180dp √ó 180dp
 * - Padding: 24dp (—Å–≤–µ—Ä—Ö—É/—Å–Ω–∏–∑—É/—Å–ª–µ–≤–∞/—Å–ø—Ä–∞–≤–∞)
 * - Content height: ~580dp
 * - Scrollable: –¥–∞ (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
 * 
 * –ë–µ–∑–æ–ø–∞—Å–Ω–æ –¥–ª—è —ç–∫—Ä–∞–Ω–æ–≤ –æ—Ç 640dp –≤—ã—Å–æ—Ç–æ–π ‚úÖ
 */

@Composable
fun FamilyCreatedModal(
    familyID: String,
    recoveryCode: String,
    onContinue: () -> Unit,
    onDismiss: () -> Unit = { /* Modal cannot be dismissed */ }
) {
    var selectedSaveMethods by remember { mutableStateOf(setOf<SaveMethod>()) }
    var showEmailInput by remember { mutableStateOf(false) }
    var email by remember { mutableStateOf("") }
    // TODO: Use email for sending family details
    
    Dialog(
        onDismissRequest = { /* –ù–ï–õ–¨–ó–Ø –ó–ê–ö–†–´–¢–¨ –ë–ï–ó –°–û–•–†–ê–ù–ï–ù–ò–Ø! */ },
        properties = DialogProperties(
            dismissOnBackPress = false,
            dismissOnClickOutside = false
        )
    ) {
        Card(
            modifier = Modifier
                .width(340.dp)
                .heightIn(max = 600.dp),
            shape = RoundedCornerShape(24.dp),
            colors = CardDefaults.cardColors(
                containerColor = Color.Transparent
            )
        ) {
            Box(
                modifier = Modifier
                    .background(
                        Brush.linearGradient(
                            colors = listOf(
                                Color(0xFF0F172A),  // –ö–æ—Å–º–∏—á–µ—Å–∫–∏–π —Ç—ë–º–Ω—ã–π
                                Color(0xFF1E3A8A),  // –ì–ª—É–±–æ–∫–∏–π —Å–∏–Ω–∏–π
                                Color(0xFF3B82F6),  // –≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π —Å–∏–Ω–∏–π
                                Color(0xFF1E40AF)   // –ö–æ—Ä–æ–ª–µ–≤—Å–∫–∏–π —Å–∏–Ω–∏–π
                            )
                        )
                    )
            ) {
                Column(
                    modifier = Modifier
                        .fillMaxWidth()
                        .verticalScroll(rememberScrollState())
                        .padding(24.dp),
                    horizontalAlignment = Alignment.CenterHorizontally,
                    verticalArrangement = Arrangement.spacedBy(SpacingL)
                ) {
                    // Header
                    Column(
                        horizontalAlignment = Alignment.CenterHorizontally,
                        verticalArrangement = Arrangement.spacedBy(SpacingM)
                    ) {
                        Text(
                            text = "‚úÖ",
                            fontSize = 60.sp
                        )
                        
                        Text(
                            text = "–°–ï–ú–¨–Ø –°–û–ó–î–ê–ù–ê!",
                            fontSize = 24.sp,
                            fontWeight = FontWeight.Bold,
                            color = SuccessGreen
                        )
                    }
                    
                    // Recovery code section
                    Column(
                        horizontalAlignment = Alignment.CenterHorizontally,
                        verticalArrangement = Arrangement.spacedBy(SpacingM)
                    ) {
                        Text(
                            text = "üîë –í–∞—à –∫–æ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:",
                            fontSize = 14.sp,
                            color = TextSecondary
                        )
                        
                        // QR Code placeholder (180√ó180dp - –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–∞–∑–º–µ—Ä)
                        Box(
                            modifier = Modifier
                                .size(180.dp)
                                .background(Color.White, RoundedCornerShape(12.dp))
                                .padding(12.dp),
                            contentAlignment = Alignment.Center
                        ) {
                            Text(
                                text = "QR\nCODE\nPLACEHOLDER",
                                fontSize = 16.sp,
                                fontWeight = FontWeight.Bold,
                                color = Color.Black,
                                textAlign = TextAlign.Center
                            )
                        }
                        
                        // Recovery code text
                        Text(
                            text = recoveryCode,
                            fontSize = 18.sp,
                            fontWeight = FontWeight.Bold,
                            fontFamily = FontFamily.Monospace,
                            color = Color(0xFFFCD34D),  // –Ø—Ä–∫–æ–µ –∑–æ–ª–æ—Ç–æ –∏–∑ –∏–∫–æ–Ω–∫–∏!
                            letterSpacing = 2.sp,
                            textAlign = TextAlign.Center,
                            modifier = Modifier
                                .padding(SpacingM)
                                .background(
                                    Color.Black.copy(alpha = 0.3f),
                                    RoundedCornerShape(8.dp)
                                )
                                .padding(SpacingM)
                        )
                    }
                    
                    // Warning box
                    Row(
                        modifier = Modifier
                            .fillMaxWidth()
                            .background(
                                WarningOrange.copy(alpha = 0.15f),
                                RoundedCornerShape(12.dp)
                            )
                            .border(
                                width = 3.dp,
                                color = WarningOrange,
                                shape = RoundedCornerShape(12.dp)
                            )
                            .padding(SpacingM),
                        horizontalArrangement = Arrangement.spacedBy(SpacingM),
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        Text(
                            text = "‚ö†Ô∏è",
                            fontSize = 24.sp
                        )
                        
                        Text(
                            text = "–í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥!",
                            fontSize = 14.sp,
                            fontWeight = FontWeight.Bold,
                            color = WarningOrange
                        )
                    }
                    
                    // Save methods
                    Column(
                        modifier = Modifier.fillMaxWidth(),
                        verticalArrangement = Arrangement.spacedBy(SpacingM)
                    ) {
                        Text(
                            text = "–°–ü–û–°–û–ë–´ –°–û–•–†–ê–ù–ï–ù–ò–Ø:",
                            fontSize = 14.sp,
                            fontWeight = FontWeight.Bold,
                            color = TextPrimary
                        )
                        
                        SaveMethod.values().forEach { method ->
                            SaveMethodCheckbox(
                                method = method,
                                isSelected = selectedSaveMethods.contains(method),
                                onClick = {
                                    selectedSaveMethods = if (selectedSaveMethods.contains(method)) {
                                        selectedSaveMethods - method
                                    } else {
                                        selectedSaveMethods + method
                                    }
                                    
                                    if (method == SaveMethod.EMAIL) {
                                        showEmailInput = selectedSaveMethods.contains(method)
                                    }
                                }
                            )
                        }
                    }
                    
                    // Continue button
                    PrimaryButton(
                        text = "–°–û–•–†–ê–ù–ò–õ, –ü–†–û–î–û–õ–ñ–ò–¢–¨ ‚úÖ",
                        onClick = {
                            if (selectedSaveMethods.isNotEmpty()) {
                                onContinue()
                            }
                        },
                        enabled = selectedSaveMethods.isNotEmpty()
                    )
                    
                    if (selectedSaveMethods.isEmpty()) {
                        Text(
                            text = "‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã 1 —Å–ø–æ—Å–æ–± —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è",
                            fontSize = 12.sp,
                            color = DangerRed,
                            textAlign = TextAlign.Center
                        )
                    }
                }
            }
        }
    }
}

enum class SaveMethod(val label: String) {
    CLIPBOARD("üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ –±—É—Ñ–µ—Ä"),
    SCREENSHOT("üì∏ –°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç"),
    CLOUD("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –æ–±–ª–∞–∫–æ"),
    EMAIL("üìß –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ email")
}

@Composable
fun SaveMethodCheckbox(
    method: SaveMethod,
    isSelected: Boolean,
    onClick: () -> Unit
) {
    Row(
        modifier = Modifier
            .fillMaxWidth()
            .background(
                if (isSelected)
                    SuccessGreen.copy(alpha = 0.15f)
                else
                    Color.White.copy(alpha = 0.05f),
                RoundedCornerShape(8.dp)
            )
            .border(
                width = if (isSelected) 1.dp else 0.dp,
                color = if (isSelected) SuccessGreen else Color.Transparent,
                shape = RoundedCornerShape(8.dp)
            )
            .clickable(onClick = onClick)
            .padding(SpacingM),
        horizontalArrangement = Arrangement.spacedBy(SpacingM),
        verticalAlignment = Alignment.CenterVertically
    ) {
        Checkbox(
            checked = isSelected,
            onCheckedChange = { onClick() },
            colors = CheckboxDefaults.colors(
                checkedColor = SuccessGreen,
                uncheckedColor = TextSecondary
            )
        )
        
        Text(
            text = method.label,
            fontSize = 14.sp,
            color = TextPrimary
        )
    }
}

// QR Code generation removed - using placeholder instead

