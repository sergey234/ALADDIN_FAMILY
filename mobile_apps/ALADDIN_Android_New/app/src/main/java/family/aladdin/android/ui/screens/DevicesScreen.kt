package family.aladdin.android.ui.screens

import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import androidx.navigation.NavHostController
import family.aladdin.android.ui.components.buttons.PrimaryButton
import family.aladdin.android.ui.components.navigation.ALADDINTopAppBar
import family.aladdin.android.ui.theme.*
import family.aladdin.android.ui.theme.Size

/**
 * üì± Devices Screen
 * –≠–∫—Ä–∞–Ω —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏ —Å–µ–º—å–∏
 * 12_devices_screen –∏–∑ HTML
 */

data class Device(
    val id: String,
    val name: String,
    val owner: String,
    val type: DeviceType,
    val status: DeviceStatus,
    val lastActive: String
)

enum class DeviceType(val icon: String, val displayName: String) {
    IPHONE("üì±", "iPhone"),
    IPAD("üì±", "iPad"),
    MAC("üíª", "Mac"),
    ANDROID("üì±", "Android"),
    WINDOWS("üíª", "Windows")
}

enum class DeviceStatus(val icon: String, val color: androidx.compose.ui.graphics.Color, val text: String) {
    PROTECTED("üü¢", SuccessGreen, "–ó–∞—â–∏—â–µ–Ω–æ"),
    WARNING("‚ö†Ô∏è", WarningOrange, "–í–Ω–∏–º–∞–Ω–∏–µ"),
    DANGER("üî¥", DangerRed, "–û–ø–∞—Å–Ω–æ—Å—Ç—å"),
    INACTIVE("‚ö´", TextTertiary, "–ù–µ–∞–∫—Ç–∏–≤–Ω–æ")
}

@Composable
fun DevicesScreen(navController: NavHostController) {
    
    val devices = remember {
        listOf(
            Device("1", "iPhone 14 Pro", "–°–µ—Ä–≥–µ–π", DeviceType.IPHONE, DeviceStatus.PROTECTED, "–°–µ–π—á–∞—Å"),
            Device("2", "MacBook Pro", "–°–µ—Ä–≥–µ–π", DeviceType.MAC, DeviceStatus.PROTECTED, "5 –º–∏–Ω –Ω–∞–∑–∞–¥"),
            Device("3", "iPad Air", "–ú–∞—à–∞", DeviceType.IPAD, DeviceStatus.WARNING, "10 –º–∏–Ω –Ω–∞–∑–∞–¥"),
            Device("4", "iPhone 12", "–ú–∞—Ä–∏—è", DeviceType.IPHONE, DeviceStatus.PROTECTED, "1 —á–∞—Å –Ω–∞–∑–∞–¥"),
            Device("5", "Samsung Galaxy", "–ë–∞–±—É—à–∫–∞", DeviceType.ANDROID, DeviceStatus.INACTIVE, "2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥"),
            Device("6", "MacBook Air", "–ú–∞—à–∞", DeviceType.MAC, DeviceStatus.PROTECTED, "3 —á–∞—Å–∞ –Ω–∞–∑–∞–¥"),
            Device("7", "iPad Mini", "–ü–µ—Ç—è", DeviceType.IPAD, DeviceStatus.DANGER, "5 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥"),
            Device("8", "iPhone SE", "–ü–µ—Ç—è", DeviceType.IPHONE, DeviceStatus.WARNING, "1 –¥–µ–Ω—å –Ω–∞–∑–∞–¥")
        )
    }
    
    Box(modifier = Modifier.fillMaxSize().backgroundGradient()) {
        Column(modifier = Modifier.fillMaxSize()) {
            
            ALADDINTopAppBar(
                title = "–£–°–¢–†–û–ô–°–¢–í–ê",
                subtitle = "${devices.size} —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ø–æ–¥ –∑–∞—â–∏—Ç–æ–π",
                onBackClick = { navController.popBackStack() }
            )
            
            LazyColumn(
                modifier = Modifier.fillMaxSize(),
                contentPadding = PaddingValues(ScreenPadding)
            ) {
                
                // Stats
                item {
                    Column(modifier = Modifier.padding(bottom = SpacingL)) {
                        Text(
                            text = "üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê",
                            style = MaterialTheme.typography.headlineSmall,
                            color = TextPrimary,
                            modifier = Modifier.padding(bottom = SpacingM)
                        )
                        
                        Row(
                            modifier = Modifier
                                .fillMaxWidth()
                                .cardBackground()
                                .padding(CardPadding),
                            horizontalArrangement = Arrangement.SpaceEvenly
                        ) {
                            Column(horizontalAlignment = Alignment.CenterHorizontally) {
                                Text(
                                    text = "üõ°Ô∏è ${devices.count { it.status == DeviceStatus.PROTECTED }}",
                                    style = MaterialTheme.typography.headlineMedium,
                                    color = SuccessGreen
                                )
                                Text("–ó–∞—â–∏—â–µ–Ω–æ", style = MaterialTheme.typography.bodySmall, color = TextSecondary)
                            }
                            
                            Column(horizontalAlignment = Alignment.CenterHorizontally) {
                                Text(
                                    text = "‚ö†Ô∏è ${devices.count { it.status == DeviceStatus.WARNING || it.status == DeviceStatus.DANGER }}",
                                    style = MaterialTheme.typography.headlineMedium,
                                    color = WarningOrange
                                )
                                Text("–¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è", style = MaterialTheme.typography.bodySmall, color = TextSecondary)
                            }
                            
                            Column(horizontalAlignment = Alignment.CenterHorizontally) {
                                Text(
                                    text = "üì± ${devices.size}",
                                    style = MaterialTheme.typography.headlineMedium,
                                    color = InfoBlue
                                )
                                Text("–í—Å–µ–≥–æ", style = MaterialTheme.typography.bodySmall, color = TextSecondary)
                            }
                        }
                    }
                }
                
                // List Header
                item {
                    Text(
                        text = "–°–ü–ò–°–û–ö –£–°–¢–†–û–ô–°–¢–í",
                        style = MaterialTheme.typography.headlineSmall,
                        color = TextPrimary,
                        modifier = Modifier.padding(bottom = SpacingM)
                    )
                }
                
                // Devices List
                items(devices) { device ->
                    DeviceRow(
                        device = device,
                        onClick = { 
                            // TODO: Navigate to device details
                        }
                    )
                    Spacer(modifier = Modifier.height(SpacingM))
                }
                
                // Add Device Button
                item {
                    Column(
                        modifier = Modifier
                            .fillMaxWidth()
                            .cardBackground()
                            .padding(CardPadding)
                            .clickable { 
                                // TODO: Show add device dialog
                            }
                    ) {
                        Row(verticalAlignment = Alignment.CenterVertically) {
                            Text("‚ûï", style = MaterialTheme.typography.headlineMedium)
                            Spacer(modifier = Modifier.width(SpacingM))
                            Column(modifier = Modifier.weight(1f)) {
                                Text("–î–æ–±–∞–≤–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ", style = MaterialTheme.typography.headlineSmall, color = TextPrimary)
                                Text("–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –Ω–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∫ –∑–∞—â–∏—Ç–µ", style = MaterialTheme.typography.bodySmall, color = TextSecondary)
                            }
                            Text("‚Ä∫", style = MaterialTheme.typography.headlineMedium, color = TextSecondary)
                        }
                    }
                }
            }
        }
    }
}

@Composable
fun DeviceRow(device: Device, onClick: () -> Unit) {
    Row(
        modifier = Modifier
            .fillMaxWidth()
            .cardBackground()
            .padding(CardPadding)
            .clickable(onClick = onClick),
        verticalAlignment = Alignment.CenterVertically
    ) {
        // Device Icon
        Box(
            modifier = Modifier.size(Size.AvatarMedium),
            contentAlignment = Alignment.Center
        ) {
            Text(device.type.icon, style = MaterialTheme.typography.headlineMedium)
        }
        
        Spacer(modifier = Modifier.width(SpacingM))
        
        // Device Info
        Column(modifier = Modifier.weight(1f)) {
            Text(device.name, style = MaterialTheme.typography.headlineSmall, color = TextPrimary)
            Row {
                Text("üë§ ${device.owner}", style = MaterialTheme.typography.bodySmall, color = TextSecondary)
                Text(" ‚Ä¢ ", style = MaterialTheme.typography.bodySmall, color = TextTertiary)
                Text(device.type.displayName, style = MaterialTheme.typography.bodySmall, color = TextSecondary)
            }
            Text("‚è∞ ${device.lastActive}", style = MaterialTheme.typography.bodySmall, color = TextTertiary)
        }
        
        // Status
        Column(horizontalAlignment = Alignment.End) {
            Text(device.status.icon, style = MaterialTheme.typography.headlineMedium)
            Text(device.status.text, style = MaterialTheme.typography.bodySmall, color = device.status.color)
        }
    }
}



