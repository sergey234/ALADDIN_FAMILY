import Foundation
// import Firebase // Uncomment when Firebase SDK added

/**
 * üìä Analytics Manager
 * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * Firebase Analytics –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
 */

class AnalyticsManager {
    
    // MARK: - Singleton
    
    static let shared = AnalyticsManager()
    
    private init() {
        // Firebase –±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ AppDelegate
    }
    
    // MARK: - Screen Tracking
    
    /**
     * –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä —ç–∫—Ä–∞–Ω–∞
     */
    func trackScreen(_ screenName: String, screenClass: String? = nil) {
        #if DEBUG
        print("üìä Screen: \(screenName)")
        #endif
        
        // –í production:
        // Analytics.logEvent(AnalyticsEventScreenView, parameters: [
        //     AnalyticsParameterScreenName: screenName,
        //     AnalyticsParameterScreenClass: screenClass ?? screenName
        // ])
    }
    
    // MARK: - Event Tracking
    
    /**
     * –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ
     */
    func trackEvent(_ eventName: String, parameters: [String: Any]? = nil) {
        #if DEBUG
        print("üìä Event: \(eventName), params: \(parameters ?? [:])")
        #endif
        
        // –í production:
        // Analytics.logEvent(eventName, parameters: parameters)
    }
    
    // MARK: - User Properties
    
    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–≤–æ–π—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    func setUserProperty(_ value: String?, forName name: String) {
        #if DEBUG
        print("üìä User Property: \(name) = \(value ?? "nil")")
        #endif
        
        // –í production:
        // Analytics.setUserProperty(value, forName: name)
    }
    
    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å User ID
     */
    func setUserID(_ userID: String?) {
        #if DEBUG
        print("üìä User ID: \(userID ?? "nil")")
        #endif
        
        // –í production:
        // Analytics.setUserID(userID)
    }
    
    // MARK: - Predefined Events
    
    /**
     * –û—Ç—Å–ª–µ–¥–∏—Ç—å –≤—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    func trackLogin(method: String) {
        trackEvent("login", parameters: ["method": method])
    }
    
    /**
     * –û—Ç—Å–ª–µ–¥–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
     */
    func trackSignUp(method: String) {
        trackEvent("sign_up", parameters: ["method": method])
    }
    
    /**
     * –û—Ç—Å–ª–µ–¥–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
     */
    func trackPurchase(subscriptionID: String, price: Double, currency: String = "RUB") {
        trackEvent("purchase", parameters: [
            "subscription_id": subscriptionID,
            "value": price,
            "currency": currency
        ])
    }
    
    /**
     * –û—Ç—Å–ª–µ–¥–∏—Ç—å VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
     */
    func trackVPNConnect(server: String) {
        trackEvent("vpn_connect", parameters: ["server": server])
    }
    
    /**
     * –û—Ç—Å–ª–µ–¥–∏—Ç—å VPN –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ
     */
    func trackVPNDisconnect() {
        trackEvent("vpn_disconnect")
    }
    
    /**
     * –û—Ç—Å–ª–µ–¥–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–ª–µ–Ω–∞ —Å–µ–º—å–∏
     */
    func trackAddFamilyMember(role: String) {
        trackEvent("add_family_member", parameters: ["role": role])
    }
    
    /**
     * –û—Ç—Å–ª–µ–¥–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —É–≥—Ä–æ–∑—ã
     */
    func trackThreatBlocked(type: String) {
        trackEvent("threat_blocked", parameters: ["threat_type": type])
    }
    
    /**
     * –û—Ç—Å–ª–µ–¥–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ AI –ø–æ–º–æ—â–Ω–∏–∫–∞
     */
    func trackAIAssistantMessage() {
        trackEvent("ai_assistant_message")
    }
    
    /**
     * –û—Ç—Å–ª–µ–¥–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è
     */
    func trackParentalControlUsed(action: String) {
        trackEvent("parental_control", parameters: ["action": action])
    }
    
    /**
     * –û—Ç—Å–ª–µ–¥–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
     */
    func trackAddDevice(deviceType: String) {
        trackEvent("add_device", parameters: ["device_type": deviceType])
    }
    
    /**
     * –û—Ç—Å–ª–µ–¥–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
     */
    func trackReferralShare(method: String) {
        trackEvent("referral_share", parameters: ["method": method])
    }
    
    /**
     * –û—Ç—Å–ª–µ–¥–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–µ–º–µ–π–Ω–æ–º —á–∞—Ç–µ
     */
    func trackFamilyChatMessage() {
        trackEvent("family_chat_message")
    }
    
    // MARK: - Conversion Tracking
    
    /**
     * –û—Ç—Å–ª–µ–¥–∏—Ç—å –Ω–∞—á–∞–ª–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —Ç—Ä–∏–∞–ª–∞
     */
    func trackTrialStarted(subscriptionID: String) {
        trackEvent("trial_started", parameters: ["subscription_id": subscriptionID])
    }
    
    /**
     * –û—Ç—Å–ª–µ–¥–∏—Ç—å –∫–æ–Ω–≤–µ—Ä—Å–∏—é –∏–∑ —Ç—Ä–∏–∞–ª–∞ –≤ –ø–æ–¥–ø–∏—Å–∫—É
     */
    func trackTrialConverted(subscriptionID: String) {
        trackEvent("trial_converted", parameters: ["subscription_id": subscriptionID])
    }
    
    /**
     * –û—Ç—Å–ª–µ–¥–∏—Ç—å –æ—Ç–º–µ–Ω—É –ø–æ–¥–ø–∏—Å–∫–∏
     */
    func trackSubscriptionCancelled(subscriptionID: String, reason: String?) {
        var params: [String: Any] = ["subscription_id": subscriptionID]
        if let reason = reason {
            params["cancellation_reason"] = reason
        }
        trackEvent("subscription_cancelled", parameters: params)
    }
}

// MARK: - Analytics Events Constants

enum AnalyticsEvent {
    static let appLaunched = "app_launched"
    static let appBackgrounded = "app_backgrounded"
    static let appForegrounded = "app_foregrounded"
    static let screenView = "screen_view"
    static let buttonTapped = "button_tapped"
    static let errorOccurred = "error_occurred"
}

// MARK: - Analytics Parameters Constants

enum AnalyticsParameter {
    static let screenName = "screen_name"
    static let buttonName = "button_name"
    static let errorMessage = "error_message"
    static let userId = "user_id"
    static let subscriptionType = "subscription_type"
}




