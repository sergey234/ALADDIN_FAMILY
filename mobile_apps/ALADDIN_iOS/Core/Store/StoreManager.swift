import Foundation
import StoreKit

/**
 * üí∞ Store Manager
 * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∞–º–∏ –≤ App Store (StoreKit 2)
 * In-App Purchase –¥–ª—è iOS
 */

@MainActor
class StoreManager: ObservableObject {
    
    // MARK: - Published Properties
    
    @Published var products: [Product] = []
    @Published var purchasedProductIDs: Set<String> = []
    @Published var isLoading: Bool = false
    @Published var errorMessage: String?
    
    // MARK: - Product IDs
    
    enum ProductID: String, CaseIterable {
        case basic = "family.aladdin.ios.subscription.basic"
        case individual = "family.aladdin.ios.subscription.individual"
        case family = "family.aladdin.ios.subscription.family"
        case premium = "family.aladdin.ios.subscription.premium"
        
        var displayName: String {
            switch self {
            case .basic: return "–ë–∞–∑–æ–≤—ã–π"
            case .individual: return "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π"
            case .family: return "–°–µ–º–µ–π–Ω—ã–π"
            case .premium: return "–ü—Ä–µ–º–∏—É–º"
            }
        }
        
        var description: String {
            switch self {
            case .basic: return "1 —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ, –±–∞–∑–æ–≤–∞—è –∑–∞—â–∏—Ç–∞"
            case .individual: return "1 —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ, –ø–æ–ª–Ω–∞—è –∑–∞—â–∏—Ç–∞, AI –ø–æ–º–æ—â–Ω–∏–∫"
            case .family: return "–î–æ 5 —É—Å—Ç—Ä–æ–π—Å—Ç–≤, —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å"
            case .premium: return "–î–æ 10 —É—Å—Ç—Ä–æ–π—Å—Ç–≤, –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞"
            }
        }
        
        var features: [String] {
            switch self {
            case .basic:
                return ["1 —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ", "–ë–∞–∑–æ–≤–∞—è –∑–∞—â–∏—Ç–∞", "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞"]
            case .individual:
                return ["1 —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ", "–ü–æ–ª–Ω–∞—è –∑–∞—â–∏—Ç–∞", "–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞", "AI –ø–æ–º–æ—â–Ω–∏–∫"]
            case .family:
                return ["–î–æ 5 —É—Å—Ç—Ä–æ–π—Å—Ç–≤", "–ü–æ–ª–Ω–∞—è –∑–∞—â–∏—Ç–∞", "–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞", "AI –ø–æ–º–æ—â–Ω–∏–∫", "–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å"]
            case .premium:
                return ["–î–æ 10 —É—Å—Ç—Ä–æ–π—Å—Ç–≤", "–í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏", "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞", "–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏"]
            }
        }
    }
    
    // MARK: - Init
    
    init() {
        Task {
            await loadProducts()
            await updatePurchasedProducts()
            await listenForTransactions()
        }
    }
    
    // MARK: - Load Products
    
    /**
     * –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ App Store
     */
    func loadProducts() async {
        isLoading = true
        
        do {
            let productIDs = ProductID.allCases.map { $0.rawValue }
            products = try await Product.products(for: productIDs)
            isLoading = false
            print("‚úÖ Loaded \(products.count) products from App Store")
        } catch {
            errorMessage = "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: \(error.localizedDescription)"
            isLoading = false
            print("‚ùå Error loading products: \(error)")
        }
    }
    
    // MARK: - Purchase Product
    
    /**
     * –ö—É–ø–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç
     */
    func purchase(_ product: Product) async throws -> Transaction? {
        isLoading = true
        errorMessage = nil
        
        do {
            let result = try await product.purchase()
            
            switch result {
            case .success(let verification):
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                let transaction = try checkVerified(verification)
                
                // –û–±–Ω–æ–≤–∏—Ç—å purchased products
                await updatePurchasedProducts()
                
                // –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                await transaction.finish()
                
                isLoading = false
                print("‚úÖ Purchase successful: \(product.id)")
                return transaction
                
            case .userCancelled:
                isLoading = false
                print("‚ö†Ô∏è User cancelled purchase")
                return nil
                
            case .pending:
                isLoading = false
                print("‚è≥ Purchase pending")
                return nil
                
            @unknown default:
                isLoading = false
                return nil
            }
        } catch {
            errorMessage = "–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏: \(error.localizedDescription)"
            isLoading = false
            print("‚ùå Purchase error: \(error)")
            throw error
        }
    }
    
    // MARK: - Restore Purchases
    
    /**
     * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∫—É–ø–∫–∏
     */
    func restorePurchases() async {
        isLoading = true
        
        do {
            try await AppStore.sync()
            await updatePurchasedProducts()
            isLoading = false
            print("‚úÖ Purchases restored")
        } catch {
            errorMessage = "–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: \(error.localizedDescription)"
            isLoading = false
            print("‚ùå Restore error: \(error)")
        }
    }
    
    // MARK: - Update Purchased Products
    
    /**
     * –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
     */
    func updatePurchasedProducts() async {
        var purchasedIDs: Set<String> = []
        
        for await result in Transaction.currentEntitlements {
            do {
                let transaction = try checkVerified(result)
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞
                if transaction.revocationDate == nil {
                    purchasedIDs.insert(transaction.productID)
                }
            } catch {
                print("‚ùå Failed to verify transaction: \(error)")
            }
        }
        
        purchasedProductIDs = purchasedIDs
        print("‚úÖ Updated purchased products: \(purchasedIDs)")
    }
    
    // MARK: - Listen for Transactions
    
    /**
     * –°–ª—É—à–∞—Ç—å –Ω–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
     */
    func listenForTransactions() async {
        for await result in Transaction.updates {
            do {
                let transaction = try checkVerified(result)
                await updatePurchasedProducts()
                await transaction.finish()
                print("‚úÖ Transaction update: \(transaction.productID)")
            } catch {
                print("‚ùå Transaction verification failed: \(error)")
            }
        }
    }
    
    // MARK: - Check Verified
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
     */
    func checkVerified<T>(_ result: VerificationResult<T>) throws -> T {
        switch result {
        case .unverified:
            throw StoreError.failedVerification
        case .verified(let safe):
            return safe
        }
    }
    
    // MARK: - Helper Methods
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫—É–ø–ª–µ–Ω –ª–∏ –ø—Ä–æ–¥—É–∫—Ç
     */
    func isPurchased(_ productID: String) -> Bool {
        purchasedProductIDs.contains(productID)
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç –ø–æ ID
     */
    func product(for id: ProductID) -> Product? {
        products.first { $0.id == id.rawValue }
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
     */
    var activeSubscription: Product? {
        products.first { isPurchased($0.id) }
    }
}

// MARK: - Store Error

enum StoreError: LocalizedError {
    case failedVerification
    case productNotFound
    
    var errorDescription: String? {
        switch self {
        case .failedVerification:
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–∫—É–ø–∫—É"
        case .productNotFound:
            return "–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
        }
    }
}



