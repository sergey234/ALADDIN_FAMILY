import SwiftUI
import Combine

/**
 * ü¶Ø Accessibility Manager
 * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å—é –¥–ª—è –ª—é–¥–µ–π —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏
 * VoiceOver, Dynamic Type, Color Blind Mode, Reduce Motion
 */

class AccessibilityManager: ObservableObject {
    
    // MARK: - Published Properties
    
    @Published var isVoiceOverEnabled: Bool = false
    @Published var isReduceMotionEnabled: Bool = false
    @Published var contentSizeCategory: ContentSizeCategory = .large
    @Published var colorBlindMode: ColorBlindMode = .none
    
    // MARK: - Color Blind Mode
    
    enum ColorBlindMode: String, CaseIterable {
        case none = "–û–±—ã—á–Ω—ã–π"
        case protanopia = "–ü—Ä–æ—Ç–∞–Ω–æ–ø–∏—è (–∫—Ä–∞—Å–Ω—ã–π-–∑–µ–ª—ë–Ω—ã–π)"
        case deuteranopia = "–î–µ–π—Ç–µ—Ä–∞–Ω–æ–ø–∏—è (–∫—Ä–∞—Å–Ω—ã–π-–∑–µ–ª—ë–Ω—ã–π)"
        case tritanopia = "–¢—Ä–∏—Ç–∞–Ω–æ–ø–∏—è (—Å–∏–Ω–µ-–∂—ë–ª—Ç—ã–π)"
        case monochromacy = "–ú–æ–Ω–æ—Ö—Ä–æ–º–∞–∑–∏—è (—á/–±)"
        
        var icon: String {
            switch self {
            case .none: return "üëÅÔ∏è"
            case .protanopia: return "üî¥"
            case .deuteranopia: return "üü¢"
            case .tritanopia: return "üîµ"
            case .monochromacy: return "‚ö´"
            }
        }
    }
    
    // MARK: - Init
    
    init() {
        // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å VoiceOver
        isVoiceOverEnabled = UIAccessibility.isVoiceOverRunning
        
        // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å Reduce Motion
        isReduceMotionEnabled = UIAccessibility.isReduceMotionEnabled
        
        // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å Content Size Category
        contentSizeCategory = UIApplication.shared.preferredContentSizeCategory
        
        // –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        setupObservers()
    }
    
    // MARK: - Setup Observers
    
    private func setupObservers() {
        // VoiceOver –∏–∑–º–µ–Ω–∏–ª—Å—è
        NotificationCenter.default.addObserver(
            forName: UIAccessibility.voiceOverStatusDidChangeNotification,
            object: nil,
            queue: .main
        ) { [weak self] _ in
            self?.isVoiceOverEnabled = UIAccessibility.isVoiceOverRunning
            print("ü¶Ø VoiceOver: \(UIAccessibility.isVoiceOverRunning ? "ON" : "OFF")")
        }
        
        // Reduce Motion –∏–∑–º–µ–Ω–∏–ª—Å—è
        NotificationCenter.default.addObserver(
            forName: UIAccessibility.reduceMotionStatusDidChangeNotification,
            object: nil,
            queue: .main
        ) { [weak self] _ in
            self?.isReduceMotionEnabled = UIAccessibility.isReduceMotionEnabled
            print("üé¨ Reduce Motion: \(UIAccessibility.isReduceMotionEnabled ? "ON" : "OFF")")
        }
        
        // Content Size –∏–∑–º–µ–Ω–∏–ª—Å—è
        NotificationCenter.default.addObserver(
            forName: UIContentSizeCategory.didChangeNotification,
            object: nil,
            queue: .main
        ) { [weak self] _ in
            self?.contentSizeCategory = UIApplication.shared.preferredContentSizeCategory
            print("üìè Text Size Changed: \(UIApplication.shared.preferredContentSizeCategory.rawValue)")
        }
    }
    
    // MARK: - Animation with Accessibility
    
    /**
     * –ê–Ω–∏–º–∞—Ü–∏—è —Å —É—á—ë—Ç–æ–º Reduce Motion
     */
    func animation<V: Equatable>(_ animation: Animation?, value: V, completion: @escaping () -> Void = {}) -> Animation? {
        if isReduceMotionEnabled {
            return nil // –ë–µ–∑ –∞–Ω–∏–º–∞—Ü–∏–∏
        } else {
            return animation
        }
    }
    
    /**
     * Transition —Å —É—á—ë—Ç–æ–º Reduce Motion
     */
    func transition(_ transition: AnyTransition) -> AnyTransition {
        if isReduceMotionEnabled {
            return .identity // –ë–µ–∑ transition
        } else {
            return transition
        }
    }
    
    // MARK: - Color Adjustment
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç —Å —É—á—ë—Ç–æ–º Color Blind Mode
     */
    func adjustColor(_ color: Color) -> Color {
        switch colorBlindMode {
        case .none:
            return color
        case .protanopia:
            return adjustForProtanopia(color)
        case .deuteranopia:
            return adjustForDeuteranopia(color)
        case .tritanopia:
            return adjustForTritanopia(color)
        case .monochromacy:
            return adjustForMonochromacy(color)
        }
    }
    
    // MARK: - Color Blind Adjustments
    
    private func adjustForProtanopia(_ color: Color) -> Color {
        // –£–ø—Ä–æ—â—ë–Ω–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Ç–∞–Ω–æ–ø–∏–∏ (–∫—Ä–∞—Å–Ω—ã–π ‚Üí —Å–∏–Ω–∏–π)
        if color == .dangerRed {
            return Color.blue
        } else if color == .successGreen {
            return Color.cyan
        }
        return color
    }
    
    private func adjustForDeuteranopia(_ color: Color) -> Color {
        // –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –¥–ª—è –¥–µ–π—Ç–µ—Ä–∞–Ω–æ–ø–∏–∏
        if color == .successGreen {
            return Color.blue
        } else if color == .dangerRed {
            return Color.orange
        }
        return color
    }
    
    private func adjustForTritanopia(_ color: Color) -> Color {
        // –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –¥–ª—è —Ç—Ä–∏—Ç–∞–Ω–æ–ø–∏–∏ (—Å–∏–Ω–∏–π ‚Üí –∫—Ä–∞—Å–Ω—ã–π)
        if color == .infoBlue {
            return Color.red
        }
        return color
    }
    
    private func adjustForMonochromacy(_ color: Color) -> Color {
        // –ß—ë—Ä–Ω–æ-–±–µ–ª—ã–π —Ä–µ–∂–∏–º
        return Color.gray
    }
    
    // MARK: - Haptic Feedback with Accessibility
    
    /**
     * Haptic feedback —Å —É—á—ë—Ç–æ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
     */
    func hapticFeedback(style: UIImpactFeedbackGenerator.FeedbackStyle) {
        // VoiceOver –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª–∞–≥–∞—é—Ç—Å—è –Ω–∞ haptic
        let generator = UIImpactFeedbackGenerator(style: style)
        generator.impactOccurred()
    }
}

// MARK: - View Extensions

extension View {
    
    /**
     * –î–æ–±–∞–≤–∏—Ç—å VoiceOver label
     */
    func voiceOverLabel(_ label: String) -> some View {
        self.accessibilityLabel(label)
    }
    
    /**
     * –î–æ–±–∞–≤–∏—Ç—å VoiceOver hint
     */
    func voiceOverHint(_ hint: String) -> some View {
        self.accessibilityHint(hint)
    }
    
    /**
     * –î–æ–±–∞–≤–∏—Ç—å VoiceOver value
     */
    func voiceOverValue(_ value: String) -> some View {
        self.accessibilityValue(value)
    }
    
    /**
     * –°–¥–µ–ª–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç accessibility —ç–ª–µ–º–µ–Ω—Ç–æ–º
     */
    func accessibilityElement(label: String, hint: String? = nil, value: String? = nil) -> some View {
        self
            .accessibilityLabel(label)
            .accessibilityHint(hint ?? "")
            .accessibilityValue(value ?? "")
    }
}



