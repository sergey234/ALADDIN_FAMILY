import SwiftUI

/// üè† Main Screen
/// –ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω ALADDIN - —Ü–µ–Ω—Ç—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—â–∏—Ç–æ–π —Å–µ–º—å–∏
/// –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∏–∑–∞–π–Ω–∞: /mobile/wireframes/01_main_screen.html
struct MainScreen: View {
    
    // MARK: - State
    
    @State private var selectedTab: Int = 0
    @State private var isVPNEnabled: Bool = true
    
    // MARK: - Body
    
    var body: some View {
        ZStack {
            // –§–æ–Ω
            LinearGradient.backgroundGradient
                .ignoresSafeArea()
            
            VStack(spacing: 0) {
                // –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å
                ALADDINNavigationBar(
                    title: "ALADDIN",
                    subtitle: "AI –ó–∞—â–∏—Ç–∞ –°–µ–º—å–∏",
                    rightButtons: [
                        .init(icon: "bell") {
                            print("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
                        },
                        .init(icon: "gearshape") {
                            print("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
                        }
                    ]
                )
                
                // –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
                ScrollView(.vertical, showsIndicators: false) {
                    VStack(spacing: Spacing.m) {
                        // VPN –°—Ç–∞—Ç—É—Å
                        vpnStatusCard
                        
                        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
                        HStack {
                            Text("–û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò")
                                .font(.h3)
                                .foregroundColor(.textPrimary)
                            
                            Spacer()
                        }
                        .padding(.horizontal, Spacing.screenPadding)
                        .padding(.top, Spacing.s)
                        
                        // –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ (2x2 grid)
                        functionsGrid
                        
                        // –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
                        quickActionsSection
                        
                        // Spacer –¥–ª—è bottom nav
                        Spacer()
                            .frame(height: Spacing.xxl)
                    }
                    .padding(.top, Spacing.m)
                }
                
                // Bottom Navigation
                bottomNavigation
            }
        }
    }
    
    // MARK: - VPN Status Card
    
    private var vpnStatusCard: some View {
        HStack(spacing: Spacing.m) {
            // –ò–∫–æ–Ω–∫–∞ VPN
            Text("üõ°Ô∏è")
                .font(.system(size: 32))
            
            // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            VStack(alignment: .leading, spacing: Spacing.xxs) {
                Text("VPN –ó–ê–©–ò–¢–ê")
                    .font(.bodyBold)
                    .foregroundColor(.textPrimary)
                
                Text(isVPNEnabled ? "–ü–æ–¥–∫–ª—é—á–µ–Ω–æ ‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω–æ" : "–û—Ç–∫–ª—é—á–µ–Ω–æ")
                    .font(.caption)
                    .foregroundColor(isVPNEnabled ? .successGreen : .textSecondary)
            }
            
            Spacer()
            
            // Toggle VPN
            Button(action: {
                let generator = UIImpactFeedbackGenerator(style: .medium)
                generator.impactOccurred()
                
                withAnimation(.spring()) {
                    isVPNEnabled.toggle()
                }
            }) {
                Circle()
                    .fill(isVPNEnabled ? Color.successGreen : Color.textSecondary)
                    .frame(width: 20, height: 20)
                    .overlay(
                        Image(systemName: isVPNEnabled ? "checkmark" : "xmark")
                            .font(.system(size: 12, weight: .bold))
                            .foregroundColor(.white)
                    )
            }
        }
        .padding(Spacing.cardPadding)
        .background(
            LinearGradient(
                colors: isVPNEnabled ? 
                    [Color.secondaryGold, Color(hex: "#D97706")] :
                    [Color.backgroundMedium, Color.backgroundMedium],
                startPoint: .leading,
                endPoint: .trailing
            )
        )
        .cornerRadius(CornerRadius.large)
        .cardShadow()
        .padding(.horizontal, Spacing.screenPadding)
    }
    
    // MARK: - Functions Grid
    
    private var functionsGrid: some View {
        VStack(spacing: Spacing.m) {
            HStack(spacing: Spacing.m) {
                // –°–µ–º—å—è
                FunctionCard(
                    icon: "üë®‚Äçüë©‚Äçüëß‚Äçüë¶",
                    title: "–°–ï–ú–¨–Ø",
                    subtitle: "4 —á–ª–µ–Ω–∞ ‚Ä¢ –í—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ",
                    status: .active
                ) {
                    print("–û—Ç–∫—Ä—ã—Ç—å —Å–µ–º—å—é")
                }
                
                // VPN
                FunctionCard(
                    icon: "üåê",
                    title: "VPN",
                    subtitle: "–ü–æ–¥–∫–ª—é—á–µ–Ω–æ",
                    status: .active
                ) {
                    print("–û—Ç–∫—Ä—ã—Ç—å VPN")
                }
            }
            
            HStack(spacing: Spacing.m) {
                // –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
                FunctionCard(
                    icon: "üìä",
                    title: "–ê–ù–ê–õ–ò–¢–ò–ö–ê",
                    subtitle: "47 —É–≥—Ä–æ–∑ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ",
                    status: .warning
                ) {
                    print("–û—Ç–∫—Ä—ã—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É")
                }
                
                // AI –ü–æ–º–æ—â–Ω–∏–∫
                FunctionCard(
                    icon: "ü§ñ",
                    title: "AI",
                    subtitle: "–í—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å",
                    status: .neutral
                ) {
                    print("–û—Ç–∫—Ä—ã—Ç—å AI")
                }
            }
        }
        .padding(.horizontal, Spacing.screenPadding)
    }
    
    // MARK: - Quick Actions
    
    private var quickActionsSection: some View {
        VStack(alignment: .leading, spacing: Spacing.s) {
            // –ó–∞–≥–æ–ª–æ–≤–æ–∫
            HStack {
                Text("–ë–´–°–¢–†–´–ï –î–ï–ô–°–¢–í–ò–Ø")
                    .font(.h3)
                    .foregroundColor(.textPrimary)
                
                Spacer()
            }
            .padding(.horizontal, Spacing.screenPadding)
            
            // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
            VStack(spacing: Spacing.s) {
                quickActionButton(
                    icon: "üö®",
                    title: "–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å",
                    subtitle: "–ë—ã—Å—Ç—Ä—ã–π –≤—ã–∑–æ–≤ —Å–ª—É–∂–±—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
                ) {
                    print("SOS")
                }
                
                quickActionButton(
                    icon: "üë∂",
                    title: "–î–µ—Ç—Å–∫–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å",
                    subtitle: "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º –¥–µ—Ç–µ–π"
                ) {
                    print("–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å")
                }
                
                quickActionButton(
                    icon: "üì±",
                    title: "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤",
                    subtitle: "–°—Ç–∞—Ç—É—Å –∑–∞—â–∏—Ç—ã –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤"
                ) {
                    print("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞")
                }
            }
            .padding(.horizontal, Spacing.screenPadding)
        }
        .padding(.top, Spacing.m)
    }
    
    private func quickActionButton(
        icon: String,
        title: String,
        subtitle: String,
        action: @escaping () -> Void
    ) -> some View {
        Button(action: {
            let generator = UIImpactFeedbackGenerator(style: .light)
            generator.impactOccurred()
            action()
        }) {
            HStack(spacing: Spacing.m) {
                // –ò–∫–æ–Ω–∫–∞
                Text(icon)
                    .font(.system(size: 28))
                
                // –¢–µ–∫—Å—Ç
                VStack(alignment: .leading, spacing: Spacing.xxs) {
                    Text(title)
                        .font(.body)
                        .foregroundColor(.textPrimary)
                    
                    Text(subtitle)
                        .font(.caption)
                        .foregroundColor(.textSecondary)
                }
                
                Spacer()
                
                // –°—Ç—Ä–µ–ª–∫–∞
                Image(systemName: "chevron.right")
                    .font(.system(size: 14, weight: .semibold))
                    .foregroundColor(.textSecondary)
            }
            .padding(Spacing.m)
            .background(
                RoundedRectangle(cornerRadius: CornerRadius.medium)
                    .fill(Color.backgroundMedium.opacity(0.5))
            )
        }
        .buttonStyle(PlainButtonStyle())
    }
    
    // MARK: - Bottom Navigation
    
    private var bottomNavigation: some View {
        HStack(spacing: 0) {
            navButton(icon: "house.fill", label: "–ì–ª–∞–≤–Ω–∞—è", index: 0)
            navButton(icon: "person.3.fill", label: "–°–µ–º—å—è", index: 1)
            navButton(icon: "chart.bar.fill", label: "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", index: 2)
            navButton(icon: "gearshape.fill", label: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏", index: 3)
        }
        .padding(.vertical, Spacing.s)
        .padding(.horizontal, Spacing.xs)
        .background(
            Color.backgroundDark.opacity(0.95)
                .blur(radius: 10)
        )
        .overlay(
            Rectangle()
                .fill(
                    LinearGradient(
                        colors: [
                            Color.primaryBlue.opacity(0.3),
                            Color.secondaryBlue.opacity(0.1)
                        ],
                        startPoint: .leading,
                        endPoint: .trailing
                    )
                )
                .frame(height: 1),
            alignment: .top
        )
    }
    
    private func navButton(icon: String, label: String, index: Int) -> some View {
        Button(action: {
            let generator = UIImpactFeedbackGenerator(style: .light)
            generator.impactOccurred()
            selectedTab = index
        }) {
            VStack(spacing: Spacing.xxs) {
                Image(systemName: icon)
                    .font(.system(size: 20))
                    .foregroundColor(selectedTab == index ? .primaryBlue : .textSecondary)
                
                Text(label)
                    .font(.captionSmall)
                    .foregroundColor(selectedTab == index ? .primaryBlue : .textSecondary)
            }
            .frame(maxWidth: .infinity)
        }
    }
}

// MARK: - Preview

#Preview {
    MainScreen()
}




