import SwiftUI

/// üîî Notifications Screen
/// –≠–∫—Ä–∞–Ω —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
/// –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∏–∑–∞–π–Ω–∞: /mobile/wireframes/08_notifications_screen.html
struct NotificationsScreen: View {
    
    // MARK: - State
    
    @Environment(\.dismiss) private var dismiss
    
    struct Notification: Identifiable {
        let id = UUID()
        let icon: String
        let title: String
        let message: String
        let time: String
        let isRead: Bool
        let type: NotificationType
    }
    
    enum NotificationType {
        case threat, success, info, warning
        
        var color: Color {
            switch self {
            case .threat: return .dangerRed
            case .success: return .successGreen
            case .info: return .primaryBlue
            case .warning: return .warningOrange
            }
        }
    }
    
    @State private var notifications: [Notification] = [
        Notification(icon: "üõ°Ô∏è", title: "–£–≥—Ä–æ–∑–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞", message: "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã–π —Å–∞–π—Ç", time: "5 –º–∏–Ω –Ω–∞–∑–∞–¥", isRead: false, type: .threat),
        Notification(icon: "‚úÖ", title: "VPN –ø–æ–¥–∫–ª—é—á—ë–Ω", message: "–í–∞—à–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞—â–∏—â–µ–Ω–æ", time: "1 —á–∞—Å –Ω–∞–∑–∞–¥", isRead: true, type: .success),
        Notification(icon: "‚ö†Ô∏è", title: "–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", message: "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞", time: "2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥", isRead: true, type: .warning),
        Notification(icon: "‚ÑπÔ∏è", title: "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ", message: "–î–æ—Å—Ç—É–ø–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è ALADDIN", time: "–í—á–µ—Ä–∞", isRead: true, type: .info)
    ]
    
    // MARK: - Body
    
    var body: some View {
        ZStack {
            // –§–æ–Ω
            LinearGradient.backgroundGradient
                .ignoresSafeArea()
            
            VStack(spacing: 0) {
                // –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å
                ALADDINNavigationBar(
                    title: "–£–í–ï–î–û–ú–õ–ï–ù–ò–Ø",
                    subtitle: "\(notifications.filter { !$0.isRead }.count) –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö",
                    leftButton: .init(icon: "chevron.left") {
                        dismiss()
                    },
                    rightButtons: [
                        .init(icon: "checkmark.circle") {
                            print("–û—Ç–º–µ—Ç–∏—Ç—å –≤—Å—ë –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º")
                        }
                    ]
                )
                
                // –°–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                if notifications.isEmpty {
                    emptyState
                } else {
                    ScrollView(.vertical, showsIndicators: false) {
                        VStack(spacing: Spacing.m) {
                            ForEach(notifications) { notification in
                                notificationCard(notification)
                            }
                            
                            Spacer()
                                .frame(height: Spacing.xxl)
                        }
                        .padding(.top, Spacing.m)
                    }
                }
            }
        }
        .navigationBarHidden(true)
    }
    
    // MARK: - Notification Card
    
    private func notificationCard(_ notification: Notification) -> some View {
        Button(action: {
            print("–û—Ç–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
        }) {
            HStack(spacing: Spacing.m) {
                // –ò–∫–æ–Ω–∫–∞ —Ç–∏–ø–∞
                Text(notification.icon)
                    .font(.system(size: 32))
                    .frame(width: 50, height: 50)
                    .background(
                        Circle()
                            .fill(notification.type.color.opacity(0.2))
                    )
                
                // –¢–µ–∫—Å—Ç
                VStack(alignment: .leading, spacing: Spacing.xs) {
                    Text(notification.title)
                        .font(notification.isRead ? .body : .bodyBold)
                        .foregroundColor(.textPrimary)
                    
                    Text(notification.message)
                        .font(.caption)
                        .foregroundColor(.textSecondary)
                        .lineLimit(2)
                    
                    Text(notification.time)
                        .font(.captionSmall)
                        .foregroundColor(.textSecondary)
                }
                
                Spacer()
                
                // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ
                if !notification.isRead {
                    Circle()
                        .fill(notification.type.color)
                        .frame(width: 10, height: 10)
                }
            }
            .padding(Spacing.m)
            .background(
                RoundedRectangle(cornerRadius: CornerRadius.medium)
                    .fill(
                        notification.isRead ?
                        Color.backgroundMedium.opacity(0.3) :
                        Color.backgroundMedium.opacity(0.5)
                    )
                    .overlay(
                        RoundedRectangle(cornerRadius: CornerRadius.medium)
                            .stroke(
                                notification.isRead ?
                                Color.clear :
                                notification.type.color.opacity(0.3),
                                lineWidth: 1
                            )
                    )
            )
        }
        .buttonStyle(PlainButtonStyle())
        .padding(.horizontal, Spacing.screenPadding)
    }
    
    // MARK: - Empty State
    
    private var emptyState: some View {
        VStack(spacing: Spacing.l) {
            Spacer()
            
            Text("üîî")
                .font(.system(size: 80))
            
            Text("–ù–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
                .font(.h2)
                .foregroundColor(.textPrimary)
            
            Text("–í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å")
                .font(.body)
                .foregroundColor(.textSecondary)
            
            Spacer()
        }
    }
}

// MARK: - Preview

#Preview {
    NotificationsScreen()
}




