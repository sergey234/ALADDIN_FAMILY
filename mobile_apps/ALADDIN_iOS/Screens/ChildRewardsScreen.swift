import SwiftUI

/// ü¶Ñ Child Rewards Screen
/// –≠–∫—Ä–∞–Ω –Ω–∞–≥—Ä–∞–¥ –¥–ª—è –¥–µ—Ç—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
/// –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∏–∑–∞–π–Ω–∞: /mobile/wireframes/14b_child_rewards_screen.html
struct ChildRewardsScreen: View {
    
    // MARK: - State
    
    @Environment(\.dismiss) private var dismiss
    @State private var selectedTab: RewardTab = .shop
    @State private var unicornBalance: Int = 245
    @State private var weeklyEarned: Int = 128
    @State private var weeklyPunished: Int = 45
    @State private var goalProgress: Double = 0.306
    @State private var goalTitle: String = "–ù–æ–≤–∞—è –∏–≥—Ä–∞ PS5"
    @State private var goalCost: Int = 800
    @State private var showRequestModal: Bool = false
    
    // MARK: - Tabs
    
    enum RewardTab {
        case shop
        case history
        case achievements
        
        var title: String {
            switch self {
            case .shop: return "üè™ –ú–∞–≥–∞–∑–∏–Ω"
            case .history: return "üìä –ò—Å—Ç–æ—Ä–∏—è"
            case .achievements: return "üèÜ –£—Å–ø–µ—Ö–∏"
            }
        }
    }
    
    // MARK: - Body
    
    var body: some View {
        ZStack {
            // –§–æ–Ω
            LinearGradient.backgroundGradient
                .ignoresSafeArea()
            
            VStack(spacing: 0) {
                // –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å
                header
                
                // –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
                ScrollView(.vertical, showsIndicators: false) {
                    VStack(spacing: Spacing.l) {
                        // –ë–∞–ª–∞–Ω—Å –µ–¥–∏–Ω–æ—Ä–æ–≥–æ–≤
                        balanceCard
                        
                        // –ü—Ä–æ–≥—Ä–µ—Å—Å –∫ —Ü–µ–ª–∏
                        goalProgressCard
                        
                        // –ö–Ω–æ–ø–∫–∞ "–°–æ–æ–±—â–∏—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—è–º"
                        requestButton
                        
                        // –¢–∞–±—ã
                        tabSelector
                        
                        // –ö–æ–Ω—Ç–µ–Ω—Ç –≤–∫–ª–∞–¥–æ–∫
                        tabContent
                        
                        Spacer()
                            .frame(height: Spacing.xxl)
                    }
                    .padding(.top, Spacing.m)
                }
            }
        }
        .navigationBarHidden(true)
        .sheet(isPresented: $showRequestModal) {
            AchievementRequestModal(
                onSendRequest: { achievement in
                    sendRequestToParents(achievement)
                }
            )
        }
    }
    
    // MARK: - Header
    
    private var header: some View {
        HStack {
            Button(action: { dismiss() }) {
                Image(systemName: "chevron.left")
                    .font(.system(size: 20, weight: .semibold))
                    .foregroundColor(.textPrimary)
                    .frame(width: 44, height: 44)
                    .background(
                        Circle()
                            .fill(Color.backgroundMedium.opacity(0.5))
                    )
            }
            
            Text("–ú–æ–∏ –µ–¥–∏–Ω–æ—Ä–æ–≥–∏")
                .font(.h2)
                .foregroundColor(Color(hex: "C084FC"))
            
            Spacer()
            
            // –£—Ä–æ–≤–µ–Ω—å
            HStack(spacing: Spacing.xs) {
                Text("üíé")
                    .font(.system(size: 16))
                Text("–£—Ä–æ–≤–µ–Ω—å 2")
                    .font(.caption)
                    .foregroundColor(.textPrimary)
            }
            .padding(.horizontal, 12)
            .padding(.vertical, 6)
            .background(
                Capsule()
                    .fill(Color.primaryBlue.opacity(0.3))
            )
        }
        .padding(.horizontal, Spacing.screenPadding)
        .padding(.vertical, Spacing.m)
    }
    
    // MARK: - Balance Card
    
    private var balanceCard: some View {
        VStack(spacing: Spacing.m) {
            // –ò–∫–æ–Ω–∫–∞ –µ–¥–∏–Ω–æ—Ä–æ–≥–∞
            Text("ü¶Ñ")
                .font(.system(size: 60))
            
            // –ë–∞–ª–∞–Ω—Å
            Text("\(unicornBalance)")
                .font(.system(size: 48, weight: .bold))
                .foregroundColor(Color(hex: "C084FC"))
            
            Text("–ï–¥–∏–Ω–æ—Ä–æ–≥–æ–≤ –Ω–∞ —Å—á–µ—Ç—É")
                .font(.body)
                .foregroundColor(.textSecondary)
            
            // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
            Rectangle()
                .fill(Color.textSecondary.opacity(0.2))
                .frame(height: 1)
                .padding(.vertical, Spacing.s)
            
            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é
            HStack(spacing: Spacing.xxl) {
                VStack(spacing: Spacing.xs) {
                    Text("+\(weeklyEarned)")
                        .font(.h2)
                        .foregroundColor(.successGreen)
                    Text("–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ\n–∑–∞ –Ω–µ–¥–µ–ª—é")
                        .font(.captionSmall)
                        .foregroundColor(.textSecondary)
                        .multilineTextAlignment(.center)
                }
                
                VStack(spacing: Spacing.xs) {
                    Text("-\(weeklyPunished)")
                        .font(.h2)
                        .foregroundColor(.dangerRed)
                    Text("–ù–∞–∫–∞–∑–∞–Ω–æ\n–∑–∞ –Ω–µ–¥–µ–ª—é")
                        .font(.captionSmall)
                        .foregroundColor(.textSecondary)
                        .multilineTextAlignment(.center)
                }
            }
        }
        .frame(maxWidth: .infinity)
        .padding(Spacing.l)
        .background(
            RoundedRectangle(cornerRadius: CornerRadius.large)
                .fill(
                    LinearGradient(
                        gradient: Gradient(colors: [
                            Color(hex: "A855F7").opacity(0.15),
                            Color(hex: "EC4899").opacity(0.2)
                        ]),
                        startPoint: .topLeading,
                        endPoint: .bottomTrailing
                    )
                )
                .overlay(
                    RoundedRectangle(cornerRadius: CornerRadius.large)
                        .stroke(Color(hex: "A855F7").opacity(0.4), lineWidth: 2)
                )
        )
        .padding(.horizontal, Spacing.screenPadding)
    }
    
    // MARK: - Goal Progress Card
    
    private var goalProgressCard: some View {
        VStack(alignment: .leading, spacing: Spacing.m) {
            HStack(spacing: Spacing.xs) {
                Text("üéØ")
                    .font(.system(size: 20))
                Text("–ú–æ—è —Ü–µ–ª—å: \(goalTitle)")
                    .font(.body)
                    .fontWeight(.semibold)
                    .foregroundColor(.textPrimary)
            }
            
            // –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
            GeometryReader { geometry in
                ZStack(alignment: .leading) {
                    // –§–æ–Ω
                    RoundedRectangle(cornerRadius: 10)
                        .fill(Color.backgroundMedium.opacity(0.5))
                        .frame(height: 20)
                    
                    // –ü—Ä–æ–≥—Ä–µ—Å—Å
                    RoundedRectangle(cornerRadius: 10)
                        .fill(
                            LinearGradient(
                                gradient: Gradient(colors: [
                                    Color(hex: "A855F7"),
                                    Color(hex: "EC4899")
                                ]),
                                startPoint: .leading,
                                endPoint: .trailing
                            )
                        )
                        .frame(width: geometry.size.width * goalProgress, height: 20)
                }
            }
            .frame(height: 20)
            
            // –¢–µ–∫—Å—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            HStack {
                Text("\(unicornBalance) ü¶Ñ –Ω–∞–∫–æ–ø–ª–µ–Ω–æ")
                    .font(.caption)
                    .foregroundColor(.textSecondary)
                
                Spacer()
                
                Text("–ù—É–∂–Ω–æ: \(goalCost) ü¶Ñ")
                    .font(.caption)
                    .foregroundColor(.textSecondary)
            }
            
            Text("‚úÖ –û—Å—Ç–∞–ª–æ—Å—å: \(goalCost - unicornBalance) ü¶Ñ (–ø—Ä–∏–º–µ—Ä–Ω–æ 35 –¥–Ω–µ–π)")
                .font(.captionSmall)
                .foregroundColor(.successGreen)
        }
        .padding(Spacing.m)
        .background(
            RoundedRectangle(cornerRadius: CornerRadius.medium)
                .fill(Color.backgroundMedium.opacity(0.3))
        )
        .padding(.horizontal, Spacing.screenPadding)
    }
    
    // MARK: - Request Button
    
    private var requestButton: some View {
        Button(action: {
            showRequestModal = true
        }) {
            HStack(spacing: Spacing.m) {
                Text("üì£")
                    .font(.system(size: 24))
                Text("–°–æ–æ–±—â–∏—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—è–º –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏")
                    .font(.body)
                    .fontWeight(.semibold)
                    .foregroundColor(.textPrimary)
            }
            .frame(maxWidth: .infinity)
            .padding(Spacing.m)
            .background(
                RoundedRectangle(cornerRadius: CornerRadius.large)
                    .fill(
                        LinearGradient(
                            gradient: Gradient(colors: [
                                Color(hex: "A855F7").opacity(0.2),
                                Color(hex: "EC4899").opacity(0.2)
                            ]),
                            startPoint: .leading,
                            endPoint: .trailing
                        )
                    )
                    .overlay(
                        RoundedRectangle(cornerRadius: CornerRadius.large)
                            .stroke(Color(hex: "A855F7").opacity(0.4), lineWidth: 2)
                    )
            )
        }
        .buttonStyle(PlainButtonStyle())
        .padding(.horizontal, Spacing.screenPadding)
    }
    
    // MARK: - Tab Selector
    
    private var tabSelector: some View {
        HStack(spacing: 0) {
            ForEach([RewardTab.shop, .history, .achievements], id: \.self) { tab in
                Button(action: {
                    selectedTab = tab
                }) {
                    Text(tab.title)
                        .font(.body)
                        .fontWeight(selectedTab == tab ? .bold : .regular)
                        .foregroundColor(selectedTab == tab ? .textPrimary : .textSecondary)
                        .frame(maxWidth: .infinity)
                        .padding(.vertical, Spacing.m)
                        .background(
                            selectedTab == tab ?
                            RoundedRectangle(cornerRadius: CornerRadius.medium)
                                .fill(Color.primaryBlue.opacity(0.3)) :
                            nil
                        )
                }
                .buttonStyle(PlainButtonStyle())
            }
        }
        .padding(4)
        .background(
            RoundedRectangle(cornerRadius: CornerRadius.medium)
                .fill(Color.backgroundMedium.opacity(0.5))
        )
        .padding(.horizontal, Spacing.screenPadding)
    }
    
    // MARK: - Tab Content
    
    @ViewBuilder
    private var tabContent: some View {
        switch selectedTab {
        case .shop:
            rewardsShop
        case .history:
            rewardsHistory
        case .achievements:
            achievementsTab
        }
    }
    
    // MARK: - Rewards Shop
    
    private var rewardsShop: some View {
        VStack(alignment: .leading, spacing: Spacing.m) {
            HStack {
                Text("üè™")
                    .font(.system(size: 18))
                Text("–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã:")
                    .font(.h3)
                    .foregroundColor(.textPrimary)
            }
            .padding(.horizontal, Spacing.screenPadding)
            
            VStack(spacing: Spacing.s) {
                rewardItem(icon: "üéÆ", title: "+30 –º–∏–Ω—É—Ç –∏–≥—Ä", desc: "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è", price: 50, canAfford: true)
                rewardItem(icon: "üì±", title: "+1 —á–∞—Å —ç–∫—Ä–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏", desc: "–ù–∞ –ª—é–±–æ–π –¥–µ–Ω—å", price: 80, canAfford: true)
                rewardItem(icon: "üåô", title: "+30 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–Ω–æ–º", desc: "–°–¥–≤–∏–Ω—É—Ç—å –≤—Ä–µ–º—è —Å–Ω–∞", price: 100, canAfford: true)
                rewardItem(icon: "üçï", title: "–ó–∞–∫–∞–∑ –ø–∏—Ü—Ü—ã", desc: "–¢–≤–æ—è –ª—é–±–∏–º–∞—è!", price: 150, canAfford: true)
                rewardItem(icon: "üé¨", title: "–ü–æ—Ö–æ–¥ –≤ –∫–∏–Ω–æ", desc: "–° –¥—Ä—É–∑—å—è–º–∏!", price: 200, canAfford: unicornBalance >= 200)
                rewardItem(icon: "üéÅ", title: "–ü–æ–¥–∞—Ä–æ–∫ –ø–æ –≤—ã–±–æ—Ä—É", desc: "–î–æ 1000‚ÇΩ", price: 500, canAfford: unicornBalance >= 500)
            }
            .padding(.horizontal, Spacing.screenPadding)
        }
    }
    
    private func rewardItem(icon: String, title: String, desc: String, price: Int, canAfford: Bool) -> some View {
        Button(action: {
            if canAfford {
                buyReward(price: price, title: title)
            }
        }) {
            HStack(spacing: Spacing.m) {
                Text(icon)
                    .font(.system(size: 32))
                
                VStack(alignment: .leading, spacing: Spacing.xxs) {
                    Text(title)
                        .font(.body)
                        .fontWeight(.semibold)
                        .foregroundColor(.textPrimary)
                    Text(desc)
                        .font(.caption)
                        .foregroundColor(.textSecondary)
                }
                
                Spacer()
                
                VStack(alignment: .trailing, spacing: Spacing.xxs) {
                    Text("\(price) ü¶Ñ")
                        .font(.body)
                        .fontWeight(.bold)
                        .foregroundColor(Color(hex: "C084FC"))
                    
                    Text(canAfford ? "–ö—É–ø–∏—Ç—å!" : "–ö–æ–ø–∏ –µ—â–µ")
                        .font(.captionSmall)
                        .foregroundColor(canAfford ? .successGreen : .dangerRed)
                        .padding(.horizontal, 8)
                        .padding(.vertical, 4)
                        .background(
                            Capsule()
                                .fill(canAfford ? Color.successGreen.opacity(0.2) : Color.dangerRed.opacity(0.2))
                        )
                }
            }
            .padding(Spacing.m)
            .background(
                RoundedRectangle(cornerRadius: CornerRadius.medium)
                    .fill(canAfford ? Color.backgroundMedium.opacity(0.5) : Color.backgroundMedium.opacity(0.3))
                    .overlay(
                        RoundedRectangle(cornerRadius: CornerRadius.medium)
                            .stroke(canAfford ? Color(hex: "A855F7").opacity(0.4) : Color.textSecondary.opacity(0.2), lineWidth: canAfford ? 2 : 1)
                    )
            )
        }
        .buttonStyle(PlainButtonStyle())
        .disabled(!canAfford)
    }
    
    // MARK: - Rewards History
    
    private var rewardsHistory: some View {
        VStack(alignment: .leading, spacing: Spacing.m) {
            HStack {
                Text("üìä")
                    .font(.system(size: 18))
                Text("–ò—Å—Ç–æ—Ä–∏—è:")
                    .font(.h3)
                    .foregroundColor(.textPrimary)
            }
            .padding(.horizontal, Spacing.screenPadding)
            
            VStack(spacing: Spacing.s) {
                historyItem(icon: "üèÜ", title: "–ü–æ–ª—É—á–∏–ª '5' –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ", amount: "+50", isReward: true, date: "–°–µ–≥–æ–¥–Ω—è, 14:30")
                historyItem(icon: "üìö", title: "–°–¥–µ–ª–∞–ª –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ", amount: "+10", isReward: true, date: "–í—á–µ—Ä–∞, 18:00")
                historyItem(icon: "üò°", title: "–ü–ª–æ—Ö–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ", amount: "-15", isReward: false, date: "2 –¥–Ω—è –Ω–∞–∑–∞–¥, 16:00")
                historyItem(icon: "üßπ", title: "–£–±—Ä–∞–ª –≤ –∫–æ–º–Ω–∞—Ç–µ", amount: "+5", isReward: true, date: "3 –¥–Ω—è –Ω–∞–∑–∞–¥, 10:00")
                historyItem(icon: "üìñ", title: "–ü—Ä–æ—á–∏—Ç–∞–ª –∫–Ω–∏–≥—É '–ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä'", amount: "+20", isReward: true, date: "4 –¥–Ω—è –Ω–∞–∑–∞–¥, 20:00")
            }
            .padding(.horizontal, Spacing.screenPadding)
        }
    }
    
    private func historyItem(icon: String, title: String, amount: String, isReward: Bool, date: String) -> some View {
        HStack(spacing: Spacing.m) {
            Text(icon)
                .font(.system(size: 28))
            
            VStack(alignment: .leading, spacing: Spacing.xxs) {
                Text(title)
                    .font(.body)
                    .foregroundColor(.textPrimary)
                Text(date)
                    .font(.captionSmall)
                    .foregroundColor(.textSecondary)
            }
            
            Spacer()
            
            Text(amount)
                .font(.body)
                .fontWeight(.bold)
                .foregroundColor(isReward ? .successGreen : .dangerRed)
        }
        .padding(Spacing.m)
        .background(
            RoundedRectangle(cornerRadius: CornerRadius.medium)
                .fill(isReward ? Color.backgroundMedium.opacity(0.5) : Color.dangerRed.opacity(0.08))
                .overlay(
                    RoundedRectangle(cornerRadius: CornerRadius.medium)
                        .stroke(isReward ? Color.textSecondary.opacity(0.2) : Color.dangerRed.opacity(0.3), lineWidth: 1)
                )
        )
    }
    
    // MARK: - Achievements Tab
    
    private var achievementsTab: some View {
        VStack(alignment: .leading, spacing: Spacing.m) {
            HStack {
                Text("üèÜ")
                    .font(.system(size: 18))
                Text("–ú–æ–∏ —É—Å–ø–µ—Ö–∏:")
                    .font(.h3)
                    .foregroundColor(.textPrimary)
            }
            .padding(.horizontal, Spacing.screenPadding)
            
            VStack(spacing: Spacing.s) {
                achievementItem(icon: "üìö", title: "–û—Ç–ª–∏—á–Ω–∏–∫", desc: "10 –∑–∞–¥–∞–Ω–∏–π –ø–æ–¥—Ä—è–¥", progress: 0.7)
                achievementItem(icon: "üßπ", title: "–ü–æ–º–æ—â–Ω–∏–∫", desc: "30 –¥–Ω–µ–π –ø–æ–º–æ—â–∏", progress: 0.5)
                achievementItem(icon: "üìñ", title: "–ö–Ω–∏–∂–Ω—ã–π —á–µ—Ä–≤—å", desc: "–ü—Ä–æ—á–∏—Ç–∞–π 5 –∫–Ω–∏–≥", progress: 0.4)
            }
            .padding(.horizontal, Spacing.screenPadding)
        }
    }
    
    private func achievementItem(icon: String, title: String, desc: String, progress: Double) -> some View {
        VStack(alignment: .leading, spacing: Spacing.s) {
            HStack(spacing: Spacing.m) {
                Text(icon)
                    .font(.system(size: 32))
                
                VStack(alignment: .leading, spacing: Spacing.xxs) {
                    Text(title)
                        .font(.body)
                        .fontWeight(.semibold)
                        .foregroundColor(.textPrimary)
                    Text(desc)
                        .font(.caption)
                        .foregroundColor(.textSecondary)
                }
                
                Spacer()
                
                Text("\(Int(progress * 100))%")
                    .font(.caption)
                    .foregroundColor(.successGreen)
            }
            
            GeometryReader { geometry in
                ZStack(alignment: .leading) {
                    RoundedRectangle(cornerRadius: 5)
                        .fill(Color.backgroundMedium.opacity(0.5))
                        .frame(height: 8)
                    
                    RoundedRectangle(cornerRadius: 5)
                        .fill(Color.successGreen)
                        .frame(width: geometry.size.width * progress, height: 8)
                }
            }
            .frame(height: 8)
        }
        .padding(Spacing.m)
        .background(
            RoundedRectangle(cornerRadius: CornerRadius.medium)
                .fill(Color.backgroundMedium.opacity(0.5))
        )
    }
    
    // MARK: - Actions
    
    private func buyReward(price: Int, title: String) {
        let generator = UIImpactFeedbackGenerator(style: .medium)
        generator.impactOccurred()
        
        unicornBalance -= price
        print("üéÅ –ö—É–ø–ª–µ–Ω–∞ –Ω–∞–≥—Ä–∞–¥–∞: \(title) –∑–∞ \(price) ü¶Ñ")
    }
    
    private func sendRequestToParents(_ achievement: String) {
        let generator = UINotificationFeedbackGenerator()
        generator.notificationOccurred(.success)
        
        print("üì£ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å —Ä–æ–¥–∏—Ç–µ–ª—è–º: \(achievement)")
    }
}

// MARK: - Achievement Request Modal

struct AchievementRequestModal: View {
    
    @Environment(\.dismiss) private var dismiss
    let onSendRequest: (String) -> Void
    
    @State private var selectedTemplate: String? = nil
    @State private var customMessage: String = ""
    
    let templates = [
        ("üìö", "–°–¥–µ–ª–∞–ª –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ", "+10 ü¶Ñ"),
        ("üßπ", "–£–±—Ä–∞–ª –≤ –∫–æ–º–Ω–∞—Ç–µ", "+5 ü¶Ñ"),
        ("üìñ", "–ü—Ä–æ—á–∏—Ç–∞–ª –∫–Ω–∏–≥—É", "+20 ü¶Ñ"),
        ("üèÜ", "–ü–æ–ª—É—á–∏–ª '5' / –∑–∞–∫—Ä—ã–ª —á–µ—Ç–≤–µ—Ä—Ç—å", "+50 ü¶Ñ"),
        ("üè†", "–ü–æ–º–æ–≥ –ø–æ –¥–æ–º—É", "+15 ü¶Ñ")
    ]
    
    var body: some View {
        NavigationView {
            ZStack {
                LinearGradient.backgroundGradient
                    .ignoresSafeArea()
                
                ScrollView {
                    VStack(spacing: Spacing.l) {
                        Text("–í—ã–±–µ—Ä–∏, –æ —á—ë–º —Ö–æ—á–µ—à—å —Å–æ–æ–±—â–∏—Ç—å:")
                            .font(.body)
                            .foregroundColor(.textSecondary)
                            .padding(.horizontal, Spacing.screenPadding)
                        
                        VStack(spacing: Spacing.s) {
                            ForEach(0..<templates.count, id: \.self) { index in
                                let template = templates[index]
                                templateButton(icon: template.0, title: template.1, reward: template.2)
                            }
                            
                            customMessageButton()
                        }
                        .padding(.horizontal, Spacing.screenPadding)
                        
                        if selectedTemplate != nil || !customMessage.isEmpty {
                            sendButton
                        }
                    }
                    .padding(.top, Spacing.m)
                }
            }
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .principal) {
                    Text("üì£ –°–æ–æ–±—â–∏—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—è–º")
                        .font(.h3)
                        .foregroundColor(.textPrimary)
                }
                
                ToolbarItem(placement: .navigationBarTrailing) {
                    Button(action: { dismiss() }) {
                        Image(systemName: "xmark.circle.fill")
                            .font(.system(size: 24))
                            .foregroundColor(.textSecondary)
                    }
                }
            }
        }
    }
    
    private func templateButton(icon: String, title: String, reward: String) -> some View {
        Button(action: {
            selectedTemplate = title
            customMessage = ""
        }) {
            HStack(spacing: Spacing.m) {
                Text(icon)
                    .font(.system(size: 28))
                
                VStack(alignment: .leading, spacing: Spacing.xxs) {
                    Text(title)
                        .font(.body)
                        .foregroundColor(.textPrimary)
                    Text(reward)
                        .font(.caption)
                        .foregroundColor(.successGreen)
                }
                
                Spacer()
                
                if selectedTemplate == title {
                    Image(systemName: "checkmark.circle.fill")
                        .font(.system(size: 24))
                        .foregroundColor(.successGreen)
                }
            }
            .padding(Spacing.m)
            .background(
                RoundedRectangle(cornerRadius: CornerRadius.medium)
                    .fill(selectedTemplate == title ? Color.successGreen.opacity(0.2) : Color.backgroundMedium.opacity(0.5))
                    .overlay(
                        RoundedRectangle(cornerRadius: CornerRadius.medium)
                            .stroke(selectedTemplate == title ? Color.successGreen : Color.textSecondary.opacity(0.2), lineWidth: selectedTemplate == title ? 2 : 1)
                    )
            )
        }
        .buttonStyle(PlainButtonStyle())
    }
    
    private func customMessageButton() -> some View {
        VStack(alignment: .leading, spacing: Spacing.s) {
            HStack(spacing: Spacing.m) {
                Text("‚úçÔ∏è")
                    .font(.system(size: 28))
                Text("–ù–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ—ë")
                    .font(.body)
                    .fontWeight(.semibold)
                    .foregroundColor(.textPrimary)
            }
            
            TextField("–†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —Å–¥–µ–ª–∞–ª...", text: $customMessage)
                .textFieldStyle(.plain)
                .padding(Spacing.m)
                .background(
                    RoundedRectangle(cornerRadius: CornerRadius.small)
                        .fill(Color.backgroundMedium.opacity(0.5))
                )
                .foregroundColor(.textPrimary)
                .onChange(of: customMessage) { _ in
                    if !customMessage.isEmpty {
                        selectedTemplate = nil
                    }
                }
        }
        .padding(Spacing.m)
        .background(
            RoundedRectangle(cornerRadius: CornerRadius.medium)
                .fill(Color.backgroundMedium.opacity(0.5))
        )
    }
    
    private var sendButton: some View {
        Button(action: {
            let message = customMessage.isEmpty ? (selectedTemplate ?? "") : customMessage
            onSendRequest(message)
            dismiss()
        }) {
            Text("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å")
                .font(.body)
                .fontWeight(.semibold)
                .foregroundColor(.textPrimary)
                .frame(maxWidth: .infinity)
                .padding(Spacing.m)
                .background(
                    RoundedRectangle(cornerRadius: CornerRadius.large)
                        .fill(
                            LinearGradient(
                                gradient: Gradient(colors: [.successGreen, .successGreen.opacity(0.8)]),
                                startPoint: .leading,
                                endPoint: .trailing
                            )
                        )
                )
        }
        .buttonStyle(PlainButtonStyle())
        .padding(.horizontal, Spacing.screenPadding)
    }
}

// MARK: - Preview

#Preview {
    ChildRewardsScreen()
}



