import SwiftUI

/// üìä Analytics Screen
/// –≠–∫—Ä–∞–Ω –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—â–∏—Ç—ã –∏ —É–≥—Ä–æ–∑
/// –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∏–∑–∞–π–Ω–∞: /mobile/wireframes/04_analytics_screen.html
struct AnalyticsScreen: View {
    
    // MARK: - State
    
    @Environment(\.dismiss) private var dismiss
    @State private var selectedPeriod: TimePeriod = .week
    
    enum TimePeriod: String, CaseIterable {
        case day = "–î–µ–Ω—å"
        case week = "–ù–µ–¥–µ–ª—è"
        case month = "–ú–µ—Å—è—Ü"
        
        var stats: (threats: Int, blocked: Int, scanned: Int) {
            switch self {
            case .day: return (12, 12, 847)
            case .week: return (47, 45, 5_234)
            case .month: return (189, 185, 21_890)
            }
        }
    }
    
    // MARK: - Body
    
    var body: some View {
        ZStack {
            // –§–æ–Ω
            LinearGradient.backgroundGradient
                .ignoresSafeArea()
            
            VStack(spacing: 0) {
                // –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å
                ALADDINNavigationBar(
                    title: "–ê–ù–ê–õ–ò–¢–ò–ö–ê",
                    subtitle: "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—â–∏—Ç—ã",
                    leftButton: .init(icon: "chevron.left") {
                        dismiss()
                    },
                    rightButtons: [
                        .init(icon: "line.3.horizontal.decrease.circle") {
                            print("–§–∏–ª—å—Ç—Ä—ã")
                        }
                    ]
                )
                
                // –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
                ScrollView(.vertical, showsIndicators: false) {
                    VStack(spacing: Spacing.l) {
                        // –í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞
                        periodSelector
                        
                        // –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                        mainStatsCard
                        
                        // –ì—Ä–∞—Ñ–∏–∫ –∑–∞—â–∏—Ç—ã (–∑–∞–≥–ª—É—à–∫–∞)
                        protectionChart
                        
                        // –¢–æ–ø —É–≥—Ä–æ–∑
                        topThreatsSection
                        
                        // –¢–∏–ø—ã —É–≥—Ä–æ–∑
                        threatTypesSection
                        
                        // Spacer
                        Spacer()
                            .frame(height: Spacing.xxl)
                    }
                    .padding(.top, Spacing.m)
                }
            }
        }
        .navigationBarHidden(true)
    }
    
    // MARK: - Period Selector
    
    private var periodSelector: some View {
        HStack(spacing: Spacing.s) {
            ForEach(TimePeriod.allCases, id: \.self) { period in
                Button(action: {
                    let generator = UIImpactFeedbackGenerator(style: .light)
                    generator.impactOccurred()
                    
                    withAnimation(.easeInOut(duration: 0.2)) {
                        selectedPeriod = period
                    }
                }) {
                    Text(period.rawValue)
                        .font(.body)
                        .foregroundColor(selectedPeriod == period ? .white : .textSecondary)
                        .padding(.horizontal, Spacing.m)
                        .padding(.vertical, Spacing.s)
                        .background(
                            RoundedRectangle(cornerRadius: CornerRadius.medium)
                                .fill(
                                    selectedPeriod == period ?
                                    Color.primaryBlue :
                                    Color.backgroundMedium.opacity(0.3)
                                )
                        )
                }
            }
        }
        .padding(.horizontal, Spacing.screenPadding)
    }
    
    // MARK: - Main Stats Card
    
    private var mainStatsCard: some View {
        VStack(spacing: Spacing.m) {
            // –ó–∞–≥–æ–ª–æ–≤–æ–∫
            HStack {
                Text("–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
                    .font(.h3)
                    .foregroundColor(.textPrimary)
                
                Spacer()
                
                Text(selectedPeriod.rawValue.uppercased())
                    .font(.caption)
                    .foregroundColor(.primaryBlue)
            }
            
            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ 3 –∫–æ–ª–æ–Ω–∫–∏
            HStack(spacing: Spacing.m) {
                statColumn(
                    icon: "üõ°Ô∏è",
                    value: "\(selectedPeriod.stats.threats)",
                    label: "–£–≥—Ä–æ–∑\n–æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ",
                    color: .dangerRed
                )
                
                Rectangle()
                    .fill(Color.white.opacity(0.1))
                    .frame(width: 1)
                
                statColumn(
                    icon: "‚úÖ",
                    value: "\(selectedPeriod.stats.blocked)",
                    label: "–£—Å–ø–µ—à–Ω–æ\n–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ",
                    color: .successGreen
                )
                
                Rectangle()
                    .fill(Color.white.opacity(0.1))
                    .frame(width: 1)
                
                statColumn(
                    icon: "üì±",
                    value: "\(selectedPeriod.stats.scanned)",
                    label: "–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ\n—ç–ª–µ–º–µ–Ω—Ç–æ–≤",
                    color: .primaryBlue
                )
            }
            .frame(height: 80)
        }
        .padding(Spacing.cardPadding)
        .background(
            RoundedRectangle(cornerRadius: CornerRadius.large)
                .fill(Color.backgroundMedium.opacity(0.5))
        )
        .cardShadow()
        .padding(.horizontal, Spacing.screenPadding)
    }
    
    private func statColumn(icon: String, value: String, label: String, color: Color) -> some View {
        VStack(spacing: Spacing.xs) {
            Text(icon)
                .font(.system(size: 28))
            
            Text(value)
                .font(.h2)
                .foregroundColor(color)
            
            Text(label)
                .font(.captionSmall)
                .foregroundColor(.textSecondary)
                .multilineTextAlignment(.center)
                .lineLimit(2)
        }
        .frame(maxWidth: .infinity)
    }
    
    // MARK: - Protection Chart
    
    private var protectionChart: some View {
        VStack(alignment: .leading, spacing: Spacing.s) {
            // –ó–∞–≥–æ–ª–æ–≤–æ–∫
            HStack {
                Text("–£–†–û–í–ï–ù–¨ –ó–ê–©–ò–¢–´")
                    .font(.h3)
                    .foregroundColor(.textPrimary)
                
                Spacer()
            }
            .padding(.horizontal, Spacing.screenPadding)
            
            // –ì—Ä–∞—Ñ–∏–∫ (–ø—Ä–æ—Å—Ç–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è)
            VStack(spacing: Spacing.m) {
                // –ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞—â–∏—Ç—ã
                VStack(spacing: Spacing.s) {
                    Text("96%")
                        .font(.system(size: 48, weight: .bold))
                        .foregroundColor(.successGreen)
                    
                    Text("–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞—â–∏—Ç—ã")
                        .font(.body)
                        .foregroundColor(.textSecondary)
                }
                .padding(.vertical, Spacing.m)
                
                // –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
                VStack(alignment: .leading, spacing: Spacing.xs) {
                    HStack {
                        Text("–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ")
                            .font(.caption)
                            .foregroundColor(.textSecondary)
                        
                        Spacer()
                        
                        Text("96%")
                            .font(.captionBold)
                            .foregroundColor(.successGreen)
                    }
                    
                    GeometryReader { geometry in
                        ZStack(alignment: .leading) {
                            RoundedRectangle(cornerRadius: CornerRadius.small)
                                .fill(Color.backgroundMedium)
                                .frame(height: 8)
                            
                            RoundedRectangle(cornerRadius: CornerRadius.small)
                                .fill(
                                    LinearGradient(
                                        colors: [Color.successGreen, Color(hex: "#16A34A")],
                                        startPoint: .leading,
                                        endPoint: .trailing
                                    )
                                )
                                .frame(width: geometry.size.width * 0.96, height: 8)
                        }
                    }
                    .frame(height: 8)
                }
            }
            .padding(Spacing.cardPadding)
            .background(
                RoundedRectangle(cornerRadius: CornerRadius.large)
                    .fill(Color.backgroundMedium.opacity(0.3))
            )
            .padding(.horizontal, Spacing.screenPadding)
        }
    }
    
    // MARK: - Top Threats Section
    
    private var topThreatsSection: some View {
        VStack(alignment: .leading, spacing: Spacing.s) {
            // –ó–∞–≥–æ–ª–æ–≤–æ–∫
            HStack {
                Text("–¢–û–ü –£–ì–†–û–ó")
                    .font(.h3)
                    .foregroundColor(.textPrimary)
                
                Spacer()
            }
            .padding(.horizontal, Spacing.screenPadding)
            
            // –°–ø–∏—Å–æ–∫ —É–≥—Ä–æ–∑
            VStack(spacing: Spacing.s) {
                threatItem(rank: 1, name: "–í—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã–µ —Å–∞–π—Ç—ã", count: 23, icon: "üåê")
                threatItem(rank: 2, name: "–§–∏—à–∏–Ω–≥", count: 12, icon: "üé£")
                threatItem(rank: 3, name: "–¢—Ä–µ–∫–µ—Ä—ã", count: 8, icon: "üëÅÔ∏è")
                threatItem(rank: 4, name: "–í–∏—Ä—É—Å—ã", count: 4, icon: "ü¶†")
            }
            .padding(.horizontal, Spacing.screenPadding)
        }
    }
    
    private func threatItem(rank: Int, name: String, count: Int, icon: String) -> some View {
        HStack(spacing: Spacing.m) {
            // –†–∞–Ω–≥
            Text("\(rank)")
                .font(.h3)
                .foregroundColor(.primaryBlue)
                .frame(width: 30)
            
            // –ò–∫–æ–Ω–∫–∞
            Text(icon)
                .font(.system(size: 24))
            
            // –¢–µ–∫—Å—Ç
            VStack(alignment: .leading, spacing: Spacing.xxs) {
                Text(name)
                    .font(.body)
                    .foregroundColor(.textPrimary)
                
                Text("\(count) –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ")
                    .font(.caption)
                    .foregroundColor(.textSecondary)
            }
            
            Spacer()
            
            // –°—Ç—Ä–µ–ª–∫–∞
            Image(systemName: "chevron.right")
                .font(.system(size: 12, weight: .semibold))
                .foregroundColor(.textSecondary)
        }
        .padding(Spacing.m)
        .background(
            RoundedRectangle(cornerRadius: CornerRadius.medium)
                .fill(Color.backgroundMedium.opacity(0.3))
        )
    }
    
    // MARK: - Threat Types Section
    
    private var threatTypesSection: some View {
        VStack(alignment: .leading, spacing: Spacing.s) {
            // –ó–∞–≥–æ–ª–æ–≤–æ–∫
            HStack {
                Text("–¢–ò–ü–´ –£–ì–†–û–ó")
                    .font(.h3)
                    .foregroundColor(.textPrimary)
                
                Spacer()
            }
            .padding(.horizontal, Spacing.screenPadding)
            
            // –¢–∏–ø—ã —É–≥—Ä–æ–∑
            VStack(spacing: Spacing.s) {
                typeProgressBar(
                    label: "–í–µ–±-—É–≥—Ä–æ–∑—ã",
                    count: 23,
                    total: 47,
                    color: .dangerRed
                )
                
                typeProgressBar(
                    label: "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
                    count: 12,
                    total: 47,
                    color: .warningOrange
                )
                
                typeProgressBar(
                    label: "–°–µ—Ç—å",
                    count: 8,
                    total: 47,
                    color: .primaryBlue
                )
                
                typeProgressBar(
                    label: "–§–∞–π–ª—ã",
                    count: 4,
                    total: 47,
                    color: .successGreen
                )
            }
            .padding(.horizontal, Spacing.screenPadding)
        }
    }
    
    private func typeProgressBar(label: String, count: Int, total: Int, color: Color) -> some View {
        VStack(alignment: .leading, spacing: Spacing.xs) {
            HStack {
                Text(label)
                    .font(.body)
                    .foregroundColor(.textPrimary)
                
                Spacer()
                
                Text("\(count)")
                    .font(.bodyBold)
                    .foregroundColor(color)
            }
            
            GeometryReader { geometry in
                ZStack(alignment: .leading) {
                    RoundedRectangle(cornerRadius: CornerRadius.small)
                        .fill(Color.backgroundMedium)
                        .frame(height: 6)
                    
                    RoundedRectangle(cornerRadius: CornerRadius.small)
                        .fill(color)
                        .frame(width: geometry.size.width * CGFloat(count) / CGFloat(total), height: 6)
                }
            }
            .frame(height: 6)
        }
        .padding(Spacing.m)
        .background(
            RoundedRectangle(cornerRadius: CornerRadius.medium)
                .fill(Color.backgroundMedium.opacity(0.2))
        )
    }
}

// MARK: - Preview

#Preview {
    AnalyticsScreen()
}




