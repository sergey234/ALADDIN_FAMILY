import Foundation
import Combine
import StoreKit
import SwiftUI

/**
 * üí≥ Tariffs View Model
 * –õ–æ–≥–∏–∫–∞ –¥–ª—è —ç–∫—Ä–∞–Ω–∞ —Ç–∞—Ä–∏—Ñ–æ–≤
 * –ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù –°–û STOREKIT 2!
 */

class TariffsViewModel: ObservableObject {
    
    // MARK: - Published Properties
    
    @Published var tariffs: [Tariff] = []
    @Published var selectedTariff: Tariff?
    @Published var isLoading: Bool = false
    @Published var errorMessage: String?
    @Published var isPurchaseSuccessful: Bool = false
    
    // MARK: - Store Manager
    
    private let storeManager: StoreManager
    private var cancellables = Set<AnyCancellable>()
    
    // MARK: - Init
    
    init(storeManager: StoreManager = StoreManager()) {
        self.storeManager = storeManager
        
        // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        storeManager.$products
            .sink { [weak self] products in
                self?.updateTariffs(from: products)
            }
            .store(in: &cancellables)
        
        // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        storeManager.$purchasedProductIDs
            .sink { [weak self] _ in
                self?.updatePurchaseStatus()
            }
            .store(in: &cancellables)
        
        // –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã
        Task {
            await loadProducts()
        }
    }
    
    // MARK: - Load Products
    
    /**
     * –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ App Store
     */
    func loadProducts() async {
        isLoading = true
        await storeManager.loadProducts()
        isLoading = false
    }
    
    // MARK: - Update Tariffs
    
    /**
     * –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–∞—Ä–∏—Ñ–æ–≤ –∏–∑ StoreKit –ø—Ä–æ–¥—É–∫—Ç–æ–≤
     */
    private func updateTariffs(from products: [Product]) {
        tariffs = StoreManager.ProductID.allCases.compactMap { productID in
            guard let product = products.first(where: { $0.id == productID.rawValue }) else {
                return nil
            }
            
            return Tariff(
                id: product.id,
                title: productID.displayName,
                price: product.displayPrice,
                period: getPeriod(from: product),
                features: productID.features,
                product: product,
                isPurchased: storeManager.isPurchased(product.id)
            )
        }
        
        // –í—ã–±—Ä–∞—Ç—å –ø–µ—Ä–≤—ã–π —Ç–∞—Ä–∏—Ñ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if selectedTariff == nil {
            selectedTariff = tariffs.first
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–∫—É–ø–æ–∫
     */
    private func updatePurchaseStatus() {
        for index in tariffs.indices {
            tariffs[index].isPurchased = storeManager.isPurchased(tariffs[index].id)
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏
     */
    private func getPeriod(from product: Product) -> String {
        if let subscription = product.subscription {
            switch subscription.subscriptionPeriod.unit {
            case .day:
                return "–≤ –¥–µ–Ω—å"
            case .week:
                return "–≤ –Ω–µ–¥–µ–ª—é"
            case .month:
                return "–≤ –º–µ—Å—è—Ü"
            case .year:
                return "–≤ –≥–æ–¥"
            @unknown default:
                return "–ø–æ–¥–ø–∏—Å–∫–∞"
            }
        }
        return "–Ω–∞–≤—Å–µ–≥–¥–∞"
    }
    
    // MARK: - Select Tariff
    
    /**
     * –í—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ
     */
    func selectTariff(_ tariff: Tariff) {
        selectedTariff = tariff
        print("Selected tariff: \(tariff.title)")
    }
    
    // MARK: - Purchase Tariff
    
    /**
     * –ö—É–ø–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ
     * –í –†–æ—Å—Å–∏–∏ ‚Üí –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç PaymentQRScreen
     * –ó–∞ –≥—Ä–∞–Ω–∏—Ü–µ–π ‚Üí –∏—Å–ø–æ–ª—å–∑—É–µ—Ç IAP (App Store)
     */
    func purchaseSelectedTariff() async {
        guard let selectedTariff = selectedTariff else {
            errorMessage = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ"
            return
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏–æ–Ω
        if AppConfig.useAlternativePayments {
            // –†–æ—Å—Å–∏—è ‚Üí QR –æ–ø–ª–∞—Ç–∞
            // –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ PaymentQRScreen –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ UI
            print("üá∑üá∫ –†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä–µ–≥–∏–æ–Ω: –∏—Å–ø–æ–ª—å–∑—É–µ–º QR –æ–ø–ª–∞—Ç—É")
            return
        }
        
        // –ù–µ –†–æ—Å—Å–∏—è ‚Üí IAP (App Store)
        isLoading = true
        errorMessage = nil
        isPurchaseSuccessful = false
        
        do {
            let transaction = try await storeManager.purchase(selectedTariff.product)
            
            if transaction != nil {
                isPurchaseSuccessful = true
                print("‚úÖ IAP Purchase successful!")
            }
            
            isLoading = false
        } catch {
            errorMessage = "–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏: \(error.localizedDescription)"
            isLoading = false
            print("‚ùå IAP Purchase failed: \(error)")
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å QR –æ–ø–ª–∞—Ç—É
     */
    func shouldUseQRPayment() -> Bool {
        return AppConfig.useAlternativePayments
    }
    
    // MARK: - Restore Purchases
    
    /**
     * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∫—É–ø–∫–∏
     */
    func restorePurchases() async {
        isLoading = true
        errorMessage = nil
        
        await storeManager.restorePurchases()
        
        isLoading = false
        print("‚úÖ Purchases restored")
    }
    
    // MARK: - Get Active Subscription
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
     */
    func getActiveSubscription() -> Tariff? {
        return tariffs.first { $0.isPurchased }
    }
}

// MARK: - Tariff Model

struct Tariff: Identifiable {
    let id: String
    let title: String
    let price: String
    let period: String
    let features: [String]
    let product: Product
    var isPurchased: Bool
}

