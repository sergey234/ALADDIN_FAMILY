import SwiftUI

/**
 * ü¶Ø Accessibility Extensions
 * –†–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ SwiftUI
 * –£–ø—Ä–æ—â–∞—é—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ VoiceOver –∏ –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
 */

// MARK: - View Extensions

extension View {
    
    /**
     * –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–Ω—ã–π accessibility –¥–ª—è –∫–Ω–æ–ø–∫–∏
     */
    func accessibilityButton(label: String, hint: String? = nil) -> some View {
        self
            .accessibilityElement(children: .ignore)
            .accessibilityLabel(label)
            .accessibilityHint(hint ?? "")
            .accessibilityAddTraits(.isButton)
    }
    
    /**
     * –î–æ–±–∞–≤–∏—Ç—å accessibility –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
     */
    func accessibilityHeading(label: String) -> some View {
        self
            .accessibilityElement(children: .ignore)
            .accessibilityLabel(label)
            .accessibilityAddTraits(.isHeader)
    }
    
    /**
     * –î–æ–±–∞–≤–∏—Ç—å accessibility –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    func accessibilityImage(label: String, isDecorative: Bool = false) -> some View {
        if isDecorative {
            return self.accessibilityHidden(true)
        } else {
            return self
                .accessibilityElement(children: .ignore)
                .accessibilityLabel(label)
                .accessibilityAddTraits(.isImage)
        }
    }
    
    /**
     * –î–æ–±–∞–≤–∏—Ç—å accessibility –¥–ª—è toggle/switch
     */
    func accessibilityToggle(label: String, isOn: Bool) -> some View {
        self
            .accessibilityElement(children: .ignore)
            .accessibilityLabel(label)
            .accessibilityValue(isOn ? "–í–∫–ª—é—á–µ–Ω–æ" : "–í—ã–∫–ª—é—á–µ–Ω–æ")
            .accessibilityAddTraits(.isButton)
    }
    
    /**
     * –î–æ–±–∞–≤–∏—Ç—å accessibility –¥–ª—è slider
     */
    func accessibilitySlider(label: String, value: String) -> some View {
        self
            .accessibilityElement(children: .ignore)
            .accessibilityLabel(label)
            .accessibilityValue(value)
            .accessibilityAdjustableAction { direction in
                // –ü–æ–∑–≤–æ–ª—è–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ VoiceOver
            }
    }
    
    /**
     * –°–∫—Ä—ã—Ç—å –æ—Ç VoiceOver (–¥–ª—è –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤)
     */
    func decorative() -> some View {
        self.accessibilityHidden(true)
    }
    
    /**
     * –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è VoiceOver
     */
    func accessibilityGroup(label: String, children: AccessibilityChildBehavior = .combine) -> some View {
        self
            .accessibilityElement(children: children)
            .accessibilityLabel(label)
    }
}

// MARK: - Text Extensions

extension Text {
    
    /**
     * Dynamic Type –ø–æ–¥–¥–µ—Ä–∂–∫–∞
     * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç
     */
    func scalableText() -> some View {
        self.lineLimit(nil)
            .minimumScaleFactor(0.5)
            .dynamicTypeSize(...DynamicTypeSize.accessibility5)
    }
}

// MARK: - Color Extensions

extension Color {
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å –¥–ª—è WCAG AA
     * –ú–∏–Ω–∏–º—É–º 4.5:1 –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
     * –ú–∏–Ω–∏–º—É–º 3:1 –¥–ª—è –∫—Ä—É–ø–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
     */
    func hasGoodContrast(with otherColor: Color) -> Bool {
        // –£–ø—Ä–æ—â—ë–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        // –í production –Ω—É–∂–Ω–∞ –ø–æ–ª–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è WCAG contrast ratio
        return true
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç–æ–º
     */
    func withAccessibleContrast(on background: Color) -> Color {
        // –ï—Å–ª–∏ —Ñ–æ–Ω —Ç—ë–º–Ω—ã–π - —Å–≤–µ—Ç–ª—ã–π —Ç–µ–∫—Å—Ç
        // –ï—Å–ª–∏ —Ñ–æ–Ω —Å–≤–µ—Ç–ª—ã–π - —Ç—ë–º–Ω—ã–π —Ç–µ–∫—Å—Ç
        return self
    }
}

// MARK: - Button Accessibility

struct AccessibleButton: View {
    let title: String
    let hint: String?
    let action: () -> Void
    
    var body: some View {
        Button(action: action) {
            Text(title)
        }
        .accessibilityButton(label: title, hint: hint)
    }
}

// MARK: - Accessibility Labels Constants

enum AccessibilityLabels {
    
    // Buttons
    static let backButton = "–ù–∞–∑–∞–¥"
    static let closeButton = "–ó–∞–∫—Ä—ã—Ç—å"
    static let settingsButton = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
    static let notificationsButton = "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
    static let addButton = "–î–æ–±–∞–≤–∏—Ç—å"
    static let deleteButton = "–£–¥–∞–ª–∏—Ç—å"
    static let saveButton = "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"
    static let cancelButton = "–û—Ç–º–µ–Ω–∞"
    
    // VPN
    static let vpnToggle = "VPN –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å"
    static let vpnStatusProtected = "VPN –ø–æ–¥–∫–ª—é—á—ë–Ω, —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞—â–∏—â–µ–Ω–æ"
    static let vpnStatusNotProtected = "VPN –æ—Ç–∫–ª—é—á—ë–Ω, —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –∑–∞—â–∏—â–µ–Ω–æ"
    
    // Family
    static let familyMemberCard = "–ö–∞—Ä—Ç–æ—á–∫–∞ —á–ª–µ–Ω–∞ —Å–µ–º—å–∏"
    static let addFamilyMember = "–î–æ–±–∞–≤–∏—Ç—å —á–ª–µ–Ω–∞ —Å–µ–º—å–∏"
    
    // Threats
    static let threatCard = "–ö–∞—Ä—Ç–æ—á–∫–∞ —É–≥—Ä–æ–∑—ã"
    static let threatBlocked = "–£–≥—Ä–æ–∑–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞"
    
    // Devices
    static let deviceCard = "–ö–∞—Ä—Ç–æ—á–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"
    static let addDevice = "–î–æ–±–∞–≤–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ"
}




