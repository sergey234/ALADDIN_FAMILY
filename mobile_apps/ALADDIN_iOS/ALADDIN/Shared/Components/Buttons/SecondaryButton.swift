import SwiftUI

/// üîò Secondary Button
/// –í—Ç–æ—Ä–∏—á–Ω–∞—è –∫–Ω–æ–ø–∫–∞ ALADDIN (–æ–±–≤–æ–¥–∫–∞, –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–∞—è)
/// –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∏–∑–∞–π–Ω–∞: HTML .secondary-button
struct SecondaryButton: View {
    
    // MARK: - Properties
    
    let title: String
    let icon: String?
    let action: () -> Void
    let isDisabled: Bool
    
    // MARK: - Init
    
    init(
        _ title: String,
        icon: String? = nil,
        isDisabled: Bool = false,
        action: @escaping () -> Void
    ) {
        self.title = title
        self.icon = icon
        self.isDisabled = isDisabled
        self.action = action
    }
    
    // MARK: - Body
    
    var body: some View {
        Button(action: {
            if !isDisabled {
                // Haptic feedback
                let generator = UIImpactFeedbackGenerator(style: .light)
                generator.impactOccurred()
                
                action()
            }
        }) {
            HStack(spacing: Spacing.xs) {
                if let icon = icon {
                    Image(systemName: icon)
                        .font(.system(size: 18, weight: .semibold))
                }
                
                Text(title)
                    .font(.button)
            }
            .frame(maxWidth: .infinity)
            .frame(height: Size.buttonHeight)
            .foregroundColor(isDisabled ? .textSecondary : .primaryBlue)
            .background(Color.clear)
            .overlay(
                RoundedRectangle(cornerRadius: CornerRadius.medium)
                    .stroke(
                        isDisabled ? Color.textSecondary : Color.primaryBlue,
                        lineWidth: 2
                    )
            )
            .opacity(isDisabled ? 0.6 : 1.0)
        }
        .disabled(isDisabled)
    }
}

// MARK: - Preview

#Preview {
    VStack(spacing: Spacing.m) {
        // –û–±—ã—á–Ω–∞—è –∫–Ω–æ–ø–∫–∞
        SecondaryButton("–û—Ç–º–µ–Ω–∏—Ç—å") {
            print("–û—Ç–º–µ–Ω–µ–Ω–æ")
        }
        
        // –ö–Ω–æ–ø–∫–∞ —Å –∏–∫–æ–Ω–∫–æ–π
        SecondaryButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏", icon: "gear") {
            print("–û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        }
        
        // –û—Ç–∫–ª—é—á—ë–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞
        SecondaryButton("–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ", isDisabled: true) {
            // –ù–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è
        }
    }
    .padding()
    .background(Color.backgroundDark)
}




