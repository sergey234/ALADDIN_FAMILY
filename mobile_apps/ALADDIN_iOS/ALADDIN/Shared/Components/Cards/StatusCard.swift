import SwiftUI

/// üìá Status Card
/// –ö–∞—Ä—Ç–æ—á–∫–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞ –≥–ª–∞–≤–Ω–æ–º —ç–∫—Ä–∞–Ω–µ –∏ –≤ —Å–µ–º—å–µ)
/// –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∏–∑–∞–π–Ω–∞: HTML .status-card
struct StatusCard: View {
    
    // MARK: - Properties
    
    let icon: String
    let title: String
    let value: String
    let status: StatusType
    let action: (() -> Void)?
    
    // MARK: - Status Type
    
    enum StatusType {
        case protected  // üü¢ –ó–∞—â–∏—â–µ–Ω–æ
        case threat     // üî¥ –£–≥—Ä–æ–∑–∞
        case warning    // ‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        case neutral    // ‚ö™ –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ
        
        var color: Color {
            switch self {
            case .protected: return .statusProtected
            case .threat: return .statusThreat
            case .warning: return .statusWarning
            case .neutral: return .textSecondary
            }
        }
        
        var indicator: String {
            switch self {
            case .protected: return "üü¢"
            case .threat: return "üî¥"
            case .warning: return "‚ö†Ô∏è"
            case .neutral: return "‚ö™"
            }
        }
    }
    
    // MARK: - Init
    
    init(
        icon: String,
        title: String,
        value: String,
        status: StatusType = .neutral,
        action: (() -> Void)? = nil
    ) {
        self.icon = icon
        self.title = title
        self.value = value
        self.status = status
        self.action = action
    }
    
    // MARK: - Body
    
    var body: some View {
        Button(action: {
            if let action = action {
                let generator = UIImpactFeedbackGenerator(style: .light)
                generator.impactOccurred()
                action()
            }
        }) {
            HStack(spacing: Spacing.m) {
                // –ò–∫–æ–Ω–∫–∞
                ZStack {
                    Circle()
                        .fill(
                            LinearGradient(
                                colors: [Color.primaryBlue.opacity(0.3), Color.primaryBlue.opacity(0.1)],
                                startPoint: .topLeading,
                                endPoint: .bottomTrailing
                            )
                        )
                        .frame(width: 56, height: 56)
                    
                    Image(systemName: icon)
                        .font(.system(size: 24, weight: .semibold))
                        .foregroundColor(.secondaryGold)
                }
                
                // –¢–µ–∫—Å—Ç
                VStack(alignment: .leading, spacing: Spacing.xxs) {
                    Text(title)
                        .font(.caption)
                        .foregroundColor(.textSecondary)
                    
                    Text(value)
                        .font(.h3)
                        .foregroundColor(.textPrimary)
                }
                
                Spacer()
                
                // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞
                VStack(spacing: Spacing.xxs) {
                    Text(status.indicator)
                        .font(.system(size: 20))
                    
                    Circle()
                        .fill(status.color)
                        .frame(width: Size.statusIndicator, height: Size.statusIndicator)
                }
            }
            .padding(Spacing.cardPadding)
            .background(
                // –ì—Ä–∞–¥–∏–µ–Ω—Ç —Ñ–æ–Ω–∞ –∫–∞–∫ –≤ HTML
                LinearGradient.cardGradient
            )
            .cornerRadius(CornerRadius.large)
            .cardShadow()
        }
        .buttonStyle(PlainButtonStyle())
        .disabled(action == nil)
    }
}

// MARK: - Preview

#Preview {
    VStack(spacing: Spacing.m) {
        // –ó–∞—â–∏—â–µ–Ω–æ
        StatusCard(
            icon: "shield.fill",
            title: "VPN –°—Ç–∞—Ç—É—Å",
            value: "–ó–∞—â–∏—â–µ–Ω–æ",
            status: .protected
        ) {
            print("–û—Ç–∫—Ä—ã—Ç—å VPN")
        }
        
        // –£–≥—Ä–æ–∑–∞
        StatusCard(
            icon: "exclamationmark.triangle.fill",
            title: "–£–≥—Ä–æ–∑—ã",
            value: "3 –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ",
            status: .threat
        ) {
            print("–ü–æ–∫–∞–∑–∞—Ç—å —É–≥—Ä–æ–∑—ã")
        }
        
        // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        StatusCard(
            icon: "eye.fill",
            title: "–ú–æ—à–µ–Ω–Ω–∏–∫–∏",
            value: "1 –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π",
            status: .warning
        ) {
            print("–ü–æ–∫–∞–∑–∞—Ç—å –º–æ—à–µ–Ω–Ω–∏–∫–æ–≤")
        }
        
        // –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è (–±–µ–∑ –¥–µ–π—Å—Ç–≤–∏—è)
        StatusCard(
            icon: "chart.bar.fill",
            title: "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
            value: "47 —É–≥—Ä–æ–∑ –∑–∞ –Ω–µ–¥–µ–ª—é",
            status: .neutral
        )
    }
    .padding()
    .background(Color.backgroundDark)
}




