import SwiftUI

/// üé® ALADDIN Color Palette
/// –í—Å–µ —Ü–≤–µ—Ç–∞ –≤–∑—è—Ç—ã –∏–∑ HTML wireframes (CSS)
extension Color {
    
    // MARK: - Primary Colors
    
    /// –û—Å–Ω–æ–≤–Ω–æ–π —Å–∏–Ω–∏–π —Ü–≤–µ—Ç (–∫–Ω–æ–ø–∫–∏, –∞–∫—Ü–µ–Ω—Ç—ã)
    /// –ò—Å—Ç–æ—á–Ω–∏–∫: HTML CSS --primary-blue
    static let primaryBlue = Color(hex: "#2E5BFF")
    
    /// –í—Ç–æ—Ä–∏—á–Ω—ã–π —Å–∏–Ω–∏–π (–¥–ª—è –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤)
    /// –ò—Å—Ç–æ—á–Ω–∏–∫: HTML CSS –≥—Ä–∞–¥–∏–µ–Ω—Ç—ã
    static let secondaryBlue = Color(hex: "#60A5FA")
    
    /// –í—Ç–æ—Ä–∏—á–Ω—ã–π –∑–æ–ª–æ—Ç–æ–π —Ü–≤–µ—Ç (–∞–∫—Ü–µ–Ω—Ç—ã, –∏–∫–æ–Ω–∫–∏)
    /// –ò—Å—Ç–æ—á–Ω–∏–∫: HTML CSS --secondary-gold
    static let secondaryGold = Color(hex: "#FCD34D")
    
    // MARK: - Semantic Colors
    
    /// –£—Å–ø–µ—Ö, OK —Å—Ç–∞—Ç—É—Å üü¢
    /// –ò—Å—Ç–æ—á–Ω–∏–∫: HTML CSS --success-color
    static let successGreen = Color(hex: "#10B981")
    
    /// –û–ø–∞—Å–Ω–æ—Å—Ç—å, –æ—à–∏–±–∫–∞, —É–≥—Ä–æ–∑–∞ üî¥
    /// –ò—Å—Ç–æ—á–Ω–∏–∫: HTML CSS --danger-color
    static let dangerRed = Color(hex: "#EF4444")
    
    /// –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ ‚ö†Ô∏è
    /// –ò—Å—Ç–æ—á–Ω–∏–∫: HTML CSS --warning-color
    static let warningOrange = Color(hex: "#F59E0B")
    
    /// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚ÑπÔ∏è
    /// –ò—Å—Ç–æ—á–Ω–∏–∫: HTML CSS --info-color
    static let infoBlue = Color(hex: "#3B82F6")
    
    // MARK: - Background Colors
    
    /// –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–æ–Ω –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (—Ç—ë–º–Ω—ã–π)
    /// –ò—Å—Ç–æ—á–Ω–∏–∫: HTML body background
    static let backgroundDark = Color(hex: "#0F172A")
    
    /// –°—Ä–µ–¥–Ω–∏–π —Ñ–æ–Ω (–¥–ª—è inputs, toggles)
    /// –ò—Å—Ç–æ—á–Ω–∏–∫: HTML .input background
    static let backgroundMedium = Color(hex: "#1E293B")
    
    /// –§–æ–Ω –∫–∞—Ä—Ç–æ—á–µ–∫ –∏ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
    /// –ò—Å—Ç–æ—á–Ω–∏–∫: HTML .card background
    static let surfaceDark = Color(hex: "#1E293B")
    
    /// –ì—Ä–∞–¥–∏–µ–Ω—Ç —Ñ–æ–Ω–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –±–æ–ª—å—à–∏—Ö —ç–∫—Ä–∞–Ω–æ–≤)
    static let gradientStart = Color(hex: "#0a1128")
    static let gradientMiddle = Color(hex: "#1e3a5f")
    static let gradientEnd = Color(hex: "#2e5090")
    
    // MARK: - Text Colors
    
    /// –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç (–±–µ–ª—ã–π)
    static let textPrimary = Color.white
    
    /// –í—Ç–æ—Ä–∏—á–Ω—ã–π —Ç–µ–∫—Å—Ç (—Å–µ—Ä—ã–π)
    static let textSecondary = Color(hex: "#94A3B8")
    
    /// –¢—Ä–µ—Ç–∏—á–Ω—ã–π —Ç–µ–∫—Å—Ç (–±–æ–ª–µ–µ —Å–µ—Ä—ã–π)
    static let textTertiary = Color(hex: "#64748B")
    
    // MARK: - Status Indicator Colors
    
    /// –ó–∞—â–∏—â–µ–Ω–æ, –æ–Ω–ª–∞–π–Ω
    static let statusProtected = Color(hex: "#10B981")
    
    /// –£–≥—Ä–æ–∑–∞, –æ—Ñ–ª–∞–π–Ω
    static let statusThreat = Color(hex: "#EF4444")
    
    /// –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    static let statusWarning = Color(hex: "#F59E0B")
    
    // MARK: - Helper
    
    /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ü–≤–µ—Ç–∞ –∏–∑ HEX —Å—Ç—Ä–æ–∫–∏
    init(hex: String) {
        let hex = hex.trimmingCharacters(in: CharacterSet.alphanumerics.inverted)
        var int: UInt64 = 0
        Scanner(string: hex).scanHexInt64(&int)
        let a, r, g, b: UInt64
        switch hex.count {
        case 3: // RGB (12-bit)
            (a, r, g, b) = (255, (int >> 8) * 17, (int >> 4 & 0xF) * 17, (int & 0xF) * 17)
        case 6: // RGB (24-bit)
            (a, r, g, b) = (255, int >> 16, int >> 8 & 0xFF, int & 0xFF)
        case 8: // ARGB (32-bit)
            (a, r, g, b) = (int >> 24, int >> 16 & 0xFF, int >> 8 & 0xFF, int & 0xFF)
        default:
            (a, r, g, b) = (1, 1, 1, 0)
        }
        
        self.init(
            .sRGB,
            red: Double(r) / 255,
            green: Double(g) / 255,
            blue:  Double(b) / 255,
            opacity: Double(a) / 255
        )
    }
}

// MARK: - Gradient Helpers

extension LinearGradient {
    
    /// –û—Å–Ω–æ–≤–Ω–æ–π –≥—Ä–∞–¥–∏–µ–Ω—Ç —Ñ–æ–Ω–∞ (–∫–∞–∫ –≤ HTML)
    static let backgroundGradient = LinearGradient(
        colors: [
            Color.gradientStart,
            Color.gradientMiddle,
            Color.gradientEnd
        ],
        startPoint: .topLeading,
        endPoint: .bottomTrailing
    )
    
    /// –ì—Ä–∞–¥–∏–µ–Ω—Ç –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫
    static let cardGradient = LinearGradient(
        colors: [
            Color(hex: "#1e3a5f"),
            Color(hex: "#2e5090")
        ],
        startPoint: .topLeading,
        endPoint: .bottomTrailing
    )
}

