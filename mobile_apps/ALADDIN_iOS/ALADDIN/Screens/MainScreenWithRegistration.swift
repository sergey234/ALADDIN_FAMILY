import SwiftUI

/**
 * üì± Main Screen with Progressive Registration
 * –û–±—ë—Ä—Ç–∫–∞ –¥–ª—è MainScreen —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π
 * 
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–≤–µ—Ä—Ö MainScreen:
 * - –û–∫–Ω–æ #1: –í—ã–±–æ—Ä —Ä–æ–ª–∏ (—á–µ—Ä–µ–∑ 0.5 —Å–µ–∫)
 * - –û–∫–Ω–æ #2: –í—ã–±–æ—Ä –≤–æ–∑—Ä–∞—Å—Ç–∞ (—á–µ—Ä–µ–∑ 1 —Å–µ–∫ –ø–æ—Å–ª–µ —Ä–æ–ª–∏)
 * - –û–∫–Ω–æ #3: –í—ã–±–æ—Ä –±—É–∫–≤—ã (—á–µ—Ä–µ–∑ 1 —Å–µ–∫ –ø–æ—Å–ª–µ –≤–æ–∑—Ä–∞—Å—Ç–∞)
 * - –û–∫–Ω–æ #4: –°–µ–º—å—è —Å–æ–∑–¥–∞–Ω–∞! (—á–µ—Ä–µ–∑ 2 —Å–µ–∫ –ø–æ—Å–ª–µ –±—É–∫–≤—ã)
 * - Notification: –ü–æ–¥—Å–∫–∞–∑–∫–∞ (—á–µ—Ä–µ–∑ 5 —Å–µ–∫ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è)
 */

struct MainScreenWithRegistration: View {
    
    @ObservedObject var registrationVM: FamilyRegistrationViewModel
    @State private var showTip: Bool = false
    
    var body: some View {
        ZStack {
            // Main Screen (–æ—Å–Ω–æ–≤–Ω–æ–π —ç–∫—Ä–∞–Ω)
            MainScreen()
            
            // Progressive registration modals
            if registrationVM.showRoleModal {
                RoleSelectionModal(
                    isPresented: $registrationVM.showRoleModal,
                    selectedRole: $registrationVM.selectedRole,
                    onRoleSelected: registrationVM.onRoleSelected
                )
            }
            
            if registrationVM.showAgeGroupModal {
                AgeGroupSelectionModal(
                    isPresented: $registrationVM.showAgeGroupModal,
                    selectedAgeGroup: $registrationVM.selectedAgeGroup,
                    onAgeGroupSelected: registrationVM.onAgeGroupSelected
                )
            }
            
            if registrationVM.showLetterModal {
                LetterSelectionModal(
                    isPresented: $registrationVM.showLetterModal,
                    selectedLetter: $registrationVM.selectedLetter,
                    onLetterSelected: registrationVM.onLetterSelected
                )
            }
            
            if registrationVM.showFamilyCreatedModal,
               let familyID = registrationVM.familyID,
               let recoveryCode = registrationVM.recoveryCode {
                FamilyCreatedModal(
                    isPresented: $registrationVM.showFamilyCreatedModal,
                    familyID: familyID,
                    recoveryCode: recoveryCode,
                    onContinue: {
                        registrationVM.showFamilyCreatedModal = false
                        
                        // Show tip after 5 seconds
                        DispatchQueue.main.asyncAfter(deadline: .now() + 5.0) {
                            showTip = true
                            
                            // Auto-dismiss tip after 10 seconds
                            DispatchQueue.main.asyncAfter(deadline: .now() + 10.0) {
                                withAnimation {
                                    showTip = false
                                }
                            }
                        }
                    }
                )
            }
            
            if registrationVM.showSuccessModal {
                RegistrationSuccessModal(
                    isPresented: $registrationVM.showSuccessModal,
                    mode: .joined,
                    familyMembers: registrationVM.familyMembers,
                    onContinue: {
                        registrationVM.showSuccessModal = false
                    }
                )
            }
            
            // Tip notification
            if showTip {
                VStack {
                    TipNotification(
                        isPresented: $showTip,
                        message: "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —á–ª–µ–Ω–æ–≤ —Å–µ–º—å–∏?\n‚Üí –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –°–µ–º—å—è ‚Üí \"–î–æ–±–∞–≤–∏—Ç—å —á–ª–µ–Ω–∞ —Å–µ–º—å–∏\""
                    )
                    .padding(.top, 60)
                    
                    Spacer()
                }
                .transition(.move(edge: .top).combined(with: .opacity))
            }
        }
        .onAppear {
            // Check if family already exists
            if !hasFamilyRegistration() {
                // Start progressive registration after 0.5 seconds
                DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
                    registrationVM.startRegistration()
                }
            }
        }
    }
    
    // MARK: - Helper Methods
    
    private func hasFamilyRegistration() -> Bool {
        // Check UserDefaults or Keychain
        return UserDefaults.standard.string(forKey: "family_id") != nil
    }
}

// MARK: - Tip Notification Component

struct TipNotification: View {
    
    @Binding var isPresented: Bool
    let message: String
    
    var body: some View {
        HStack(spacing: Spacing.m) {
            VStack(alignment: .leading, spacing: Spacing.s) {
                HStack {
                    Text("üí° –°–æ–≤–µ—Ç")
                        .font(.system(size: 14, weight: .bold))
                        .foregroundColor(.white)
                    
                    Spacer()
                    
                    Button(action: {
                        withAnimation {
                            isPresented = false
                        }
                    }) {
                        Image(systemName: "xmark")
                            .font(.system(size: 12))
                            .foregroundColor(.white)
                    }
                }
                
                Text(message)
                    .font(.system(size: 13))
                    .foregroundColor(.white)
                    .fixedSize(horizontal: false, vertical: true)
                
                HStack(spacing: Spacing.m) {
                    Button(action: {
                        // Navigate to settings
                        isPresented = false
                    }) {
                        Text("–ü–û–ö–ê–ñ–ò–¢–ï –ö–ê–ö")
                            .font(.caption)
                            .foregroundColor(.white)
                            .padding(.horizontal, Spacing.m)
                            .padding(.vertical, Spacing.xs)
                            .background(Color.white.opacity(0.2))
                            .cornerRadius(8)
                    }
                    
                    Button(action: {
                        withAnimation {
                            isPresented = false
                        }
                    }) {
                        Text("–ü–û–ó–ñ–ï")
                            .font(.caption)
                            .foregroundColor(.white.opacity(0.7))
                    }
                }
            }
        }
        .padding(Spacing.m)
        .frame(maxWidth: 340)
        .background(
            Color.secondaryGold.opacity(0.95)
                .blur(radius: 10)
        )
        .cornerRadius(16)
        .shadow(color: Color.secondaryGold.opacity(0.3), radius: 10)
        .padding(.horizontal, Spacing.m)
    }
}

// MARK: - Preview

struct MainScreenWithRegistration_Previews: PreviewProvider {
    static var previews: some View {
        MainScreenWithRegistration(
            registrationVM: FamilyRegistrationViewModel()
        )
    }
}




