import SwiftUI

/// üí¨ Support Screen
/// –≠–∫—Ä–∞–Ω –ø–æ–¥–¥–µ—Ä–∂–∫–∏ - –ø–æ–º–æ—â—å –∏ FAQ
/// –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∏–∑–∞–π–Ω–∞: –∫–æ–º–±–∏–Ω–∞—Ü–∏—è –∏–∑ —Ä–∞–∑–Ω—ã—Ö wireframes
struct SupportScreen: View {
    
    // MARK: - State
    
    @Environment(\.dismiss) private var dismiss
    @State private var searchText: String = ""
    
    struct FAQItem: Identifiable {
        let id = UUID()
        let icon: String
        let question: String
        let answer: String
        var isExpanded: Bool = false
    }
    
    @State private var faqItems: [FAQItem] = [
        FAQItem(icon: "üõ°Ô∏è", question: "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç VPN?", answer: "VPN —à–∏—Ñ—Ä—É–µ—Ç –≤–µ—Å—å –≤–∞—à –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Ç—Ä–∞—Ñ–∏–∫ –∏ —Å–∫—Ä—ã–≤–∞–µ—Ç IP –∞–¥—Ä–µ—Å."),
        FAQItem(icon: "üë∂", question: "–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å?", answer: "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª –°–µ–º—å—è ‚Üí –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–±—ë–Ω–∫–∞ ‚Üí –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è."),
        FAQItem(icon: "üí≥", question: "–ö–∞–∫ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?", answer: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π ‚Üí –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É."),
        FAQItem(icon: "üîê", question: "–ë–µ–∑–æ–ø–∞—Å–Ω—ã –ª–∏ –º–æ–∏ –¥–∞–Ω–Ω—ã–µ?", answer: "–î–∞! –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –∏ –Ω–µ —Ö—Ä–∞–Ω–∏–º –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö.")
    ]
    
    // MARK: - Body
    
    var body: some View {
        ZStack {
            // –§–æ–Ω
            LinearGradient.backgroundGradient
                .ignoresSafeArea()
            
            VStack(spacing: 0) {
                // –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å
                ALADDINNavigationBar(
                    title: "–ü–û–î–î–ï–†–ñ–ö–ê",
                    subtitle: "–ú—ã –≤—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º",
                    leftButton: .init(icon: "chevron.left") {
                        dismiss()
                    }
                )
                
                // –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
                ScrollView(.vertical, showsIndicators: false) {
                    VStack(spacing: Spacing.l) {
                        // –ü–æ–∏—Å–∫
                        searchBar
                        
                        // –°–ø–æ—Å–æ–±—ã —Å–≤—è–∑–∏
                        contactMethods
                        
                        // FAQ
                        faqSection
                        
                        // Spacer
                        Spacer()
                            .frame(height: Spacing.xxl)
                    }
                    .padding(.top, Spacing.m)
                }
            }
        }
        .navigationBarHidden(true)
    }
    
    // MARK: - Search Bar
    
    private var searchBar: some View {
        ALADDINTextField(
            "–ü–æ–∏—Å–∫ –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º...",
            text: $searchText,
            icon: "magnifyingglass"
        )
        .padding(.horizontal, Spacing.screenPadding)
    }
    
    // MARK: - Contact Methods
    
    private var contactMethods: some View {
        VStack(alignment: .leading, spacing: Spacing.s) {
            Text("–°–í–Ø–ó–ê–¢–¨–°–Ø –° –ù–ê–ú–ò")
                .font(.h3)
                .foregroundColor(.textPrimary)
                .padding(.horizontal, Spacing.screenPadding)
            
            VStack(spacing: Spacing.s) {
                contactButton(icon: "üí¨", title: "–ß–∞—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π", subtitle: "–û—Ç–≤–µ—Ç–∏–º –∑–∞ 5 –º–∏–Ω—É—Ç", color: .primaryBlue)
                contactButton(icon: "üìß", title: "Email", subtitle: "support@aladdin.family", color: .successGreen)
                contactButton(icon: "üì±", title: "–¢–µ–ª–µ—Ñ–æ–Ω", subtitle: "+7 (800) 555-35-35", color: .warningOrange)
            }
            .padding(.horizontal, Spacing.screenPadding)
        }
    }
    
    private func contactButton(icon: String, title: String, subtitle: String, color: Color) -> some View {
        Button(action: {
            print(title)
        }) {
            HStack(spacing: Spacing.m) {
                Text(icon)
                    .font(.system(size: 32))
                
                VStack(alignment: .leading, spacing: Spacing.xxs) {
                    Text(title)
                        .font(.bodyBold)
                        .foregroundColor(.textPrimary)
                    
                    Text(subtitle)
                        .font(.caption)
                        .foregroundColor(.textSecondary)
                }
                
                Spacer()
                
                Image(systemName: "chevron.right")
                    .foregroundColor(color)
            }
            .padding(Spacing.m)
            .background(
                RoundedRectangle(cornerRadius: CornerRadius.medium)
                    .fill(Color.backgroundMedium.opacity(0.3))
                    .overlay(
                        RoundedRectangle(cornerRadius: CornerRadius.medium)
                            .stroke(color.opacity(0.3), lineWidth: 1)
                    )
            )
        }
        .buttonStyle(PlainButtonStyle())
    }
    
    // MARK: - FAQ Section
    
    private var faqSection: some View {
        VStack(alignment: .leading, spacing: Spacing.s) {
            Text("–ß–ê–°–¢–´–ï –í–û–ü–†–û–°–´")
                .font(.h3)
                .foregroundColor(.textPrimary)
                .padding(.horizontal, Spacing.screenPadding)
            
            VStack(spacing: Spacing.s) {
                ForEach($faqItems) { $item in
                    faqCard(item: $item)
                }
            }
            .padding(.horizontal, Spacing.screenPadding)
        }
    }
    
    private func faqCard(item: Binding<FAQItem>) -> some View {
        VStack(alignment: .leading, spacing: Spacing.m) {
            // –í–æ–ø—Ä–æ—Å
            Button(action: {
                withAnimation(.spring()) {
                    item.wrappedValue.isExpanded.toggle()
                }
            }) {
                HStack(spacing: Spacing.m) {
                    Text(item.wrappedValue.icon)
                        .font(.system(size: 24))
                    
                    Text(item.wrappedValue.question)
                        .font(.bodyBold)
                        .foregroundColor(.textPrimary)
                    
                    Spacer()
                    
                    Image(systemName: item.wrappedValue.isExpanded ? "chevron.up" : "chevron.down")
                        .font(.system(size: 14, weight: .semibold))
                        .foregroundColor(.primaryBlue)
                }
            }
            .buttonStyle(PlainButtonStyle())
            
            // –û—Ç–≤–µ—Ç (—Ä–∞—Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è)
            if item.wrappedValue.isExpanded {
                Text(item.wrappedValue.answer)
                    .font(.body)
                    .foregroundColor(.textSecondary)
                    .padding(.leading, 36)
                    .transition(.opacity)
            }
        }
        .padding(Spacing.m)
        .background(
            RoundedRectangle(cornerRadius: CornerRadius.medium)
                .fill(Color.backgroundMedium.opacity(0.3))
        )
    }
}

// MARK: - Preview

#if DEBUG
struct SupportScreen_Previews: PreviewProvider {
    static var previews: some View {
        SupportScreen()
    }
}
#endif




