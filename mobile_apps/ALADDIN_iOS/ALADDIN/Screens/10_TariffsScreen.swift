import SwiftUI

/// üí≥ Tariffs Screen
/// –≠–∫—Ä–∞–Ω —Ç–∞—Ä–∏—Ñ–æ–≤ - –≤—ã–±–æ—Ä –ø–æ–¥–ø–∏—Å–∫–∏
/// –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∏–∑–∞–π–Ω–∞: /mobile/wireframes/09_tariffs_screen.html
struct TariffsScreen: View {
    
    // MARK: - State
    
    @Environment(\.dismiss) private var dismiss
    @StateObject private var viewModel = TariffsViewModel()
    @State private var selectedTariff: TariffType = .family
    @State private var showPaymentQRScreen = false
    @State private var selectedTariffForPayment: Tariff?
    
    enum TariffType {
        case free, personal, family, premium
        
        var title: String {
            switch self {
            case .free: return "–ë–ê–ó–û–í–´–ô"
            case .personal: return "–õ–ò–ß–ù–´–ô"
            case .family: return "–°–ï–ú–ï–ô–ù–´–ô"
            case .premium: return "–ü–†–ï–ú–ò–£–ú"
            }
        }
        
        var price: String {
            switch self {
            case .free: return "0 ‚ÇΩ"
            case .personal: return "290 ‚ÇΩ"
            case .family: return "590 ‚ÇΩ"
            case .premium: return "990 ‚ÇΩ"
            }
        }
        
        var period: String {
            switch self {
            case .free: return "–ë–µ—Å–ø–ª–∞—Ç–Ω–æ"
            case .personal, .family, .premium: return "–≤ –º–µ—Å—è—Ü"
            }
        }
        
        var features: [String] {
            switch self {
            case .free: return ["VPN –±–∞–∑–æ–≤—ã–π", "1 —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ", "–†–µ–∫–ª–∞–º–∞"]
            case .personal: return ["VPN Pro", "3 —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞", "–ë–µ–∑ —Ä–µ–∫–ª–∞–º—ã", "AI –ø–æ–º–æ—â–Ω–∏–∫"]
            case .family: return ["VPN Ultra", "10 —É—Å—Ç—Ä–æ–π—Å—Ç–≤", "–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å", "AI + –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞"]
            case .premium: return ["VPN Max", "–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ", "–í—Å—ë –∏–∑ –°–µ–º–µ–π–Ω–æ–≥–æ", "–ö–æ–Ω—Å—å–µ—Ä–∂-—Å–µ—Ä–≤–∏—Å", "–ü—Ä–µ–º–∏—É–º –ø–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7"]
            }
        }
        
        var color: Color {
            switch self {
            case .free: return .textSecondary
            case .personal: return .primaryBlue
            case .family: return .secondaryGold
            case .premium: return Color(hex: "#A855F7")
            }
        }
        
        var recommended: Bool {
            return self == .family
        }
    }
    
    // MARK: - Body
    
    var body: some View {
        ZStack {
            // –§–æ–Ω
            LinearGradient.backgroundGradient
                .ignoresSafeArea()
            
            VStack(spacing: 0) {
                // –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å
                ALADDINNavigationBar(
                    title: "–¢–ê–†–ò–§–´",
                    subtitle: "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–ª–∞–Ω",
                    leftButton: .init(icon: "chevron.left") {
                        dismiss()
                    }
                )
                
                // –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
                ScrollView(.vertical, showsIndicators: false) {
                    VStack(spacing: Spacing.l) {
                        // –ö–∞—Ä—Ç–æ—á–∫–∏ —Ç–∞—Ä–∏—Ñ–æ–≤
                        tariffCard(.free)
                        tariffCard(.personal)
                        tariffCard(.family)
                        tariffCard(.premium)
                        
                        // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–æ–≤
                        comparisonButton
                        
                        // Spacer
                        Spacer()
                            .frame(height: Spacing.xxl)
                    }
                    .padding(.top, Spacing.m)
                }
            }
        }
        .navigationBarHidden(true)
        .sheet(isPresented: $showPaymentQRScreen) {
            if let tariff = selectedTariffForPayment {
                PaymentQRScreen(tariff: tariff) {
                    // Callback –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
                    print("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω–∞!")
                }
            }
        }
    }
    
    // MARK: - Helpers
    
    private func getButtonText(for tariff: TariffType) -> String {
        if tariff == .free {
            return "–ë–ï–°–ü–õ–ê–¢–ù–û"
        } else if selectedTariff == tariff {
            return "‚úì –í–´–ë–†–ê–ù"
        } else {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏–æ–Ω
            if AppConfig.useAlternativePayments {
                return "–û–ü–õ–ê–¢–ò–¢–¨ –ß–ï–†–ï–ó QR"
            } else {
                return "–ü–û–î–ö–õ–Æ–ß–ò–¢–¨"
            }
        }
    }
    
    // MARK: - Tariff Card
    
    private func tariffCard(_ tariff: TariffType) -> some View {
        VStack(alignment: .leading, spacing: Spacing.m) {
            // –ë–µ–π–¥–∂ "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º"
            if tariff.recommended {
                HStack {
                    Spacer()
                    Text("‚≠ê –†–ï–ö–û–ú–ï–ù–î–£–ï–ú")
                        .font(.captionBold)
                        .foregroundColor(.backgroundDark)
                        .padding(.horizontal, Spacing.m)
                        .padding(.vertical, Spacing.xs)
                        .background(
                            Capsule()
                                .fill(tariff.color)
                        )
                }
            }
            
            // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞—Ä–∏—Ñ–∞
            HStack(alignment: .top) {
                VStack(alignment: .leading, spacing: Spacing.xs) {
                    Text(tariff.title)
                        .font(.h2)
                        .foregroundColor(tariff.color)
                    
                    HStack(alignment: .firstTextBaseline, spacing: Spacing.xs) {
                        Text(tariff.price)
                            .font(.system(size: 36, weight: .bold))
                            .foregroundColor(.white)
                        
                        Text(tariff.period)
                            .font(.caption)
                            .foregroundColor(.textSecondary)
                    }
                }
                
                Spacer()
            }
            
            // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
            Rectangle()
                .fill(tariff.color.opacity(0.3))
                .frame(height: 1)
            
            // –°–ø–∏—Å–æ–∫ —Ñ—É–Ω–∫—Ü–∏–π
            VStack(alignment: .leading, spacing: Spacing.s) {
                ForEach(tariff.features, id: \.self) { feature in
                    HStack(spacing: Spacing.s) {
                        Image(systemName: "checkmark.circle.fill")
                            .font(.system(size: 18))
                            .foregroundColor(tariff.color)
                        
                        Text(feature)
                            .font(.body)
                            .foregroundColor(.textPrimary)
                    }
                }
            }
            
            // –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞/–æ–ø–ª–∞—Ç—ã
            Button(action: {
                HapticFeedback.mediumImpact()
                selectedTariff = tariff
                
                // –ï—Å–ª–∏ —Ç–∞—Ä–∏—Ñ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π
                if tariff == .free {
                    print("–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ")
                    return
                }
                
                // –°–æ–∑–¥–∞–µ–º Tariff –æ–±—ä–µ–∫—Ç –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ PaymentQRScreen
                let tariffObj = Tariff(
                    id: String(describing: tariff),
                    title: tariff.title,
                    price: tariff.price,
                    period: tariff.period,
                    features: tariff.features,
                    product: nil,
                    isPurchased: false
                )
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏–æ–Ω
                if AppConfig.useAlternativePayments {
                    // –†–æ—Å—Å–∏—è ‚Üí QR –æ–ø–ª–∞—Ç–∞
                    selectedTariffForPayment = tariffObj
                    showPaymentQRScreen = true
                } else {
                    // –ó–∞ –≥—Ä–∞–Ω–∏—Ü–µ–π ‚Üí IAP (–Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ –ø—Ä–æ—Å—Ç–æ–π –≤–µ—Ä—Å–∏–∏)
                    print("IAP purchase for: \(tariff.title)")
                }
            }) {
                Text(getButtonText(for: tariff))
                    .font(.buttonText)
                    .foregroundColor(.white)
                    .frame(maxWidth: .infinity)
                    .frame(height: Size.buttonHeight)
                    .background(
                        selectedTariff == tariff ?
                        LinearGradient(
                            colors: [Color.successGreen, Color(hex: "#16A34A")],
                            startPoint: .leading,
                            endPoint: .trailing
                        ) :
                        LinearGradient(
                            colors: [tariff.color, tariff.color.opacity(0.8)],
                            startPoint: .leading,
                            endPoint: .trailing
                        )
                    )
                    .cornerRadius(CornerRadius.large)
            }
        }
        .padding(Spacing.cardPadding)
        .background(
            RoundedRectangle(cornerRadius: CornerRadius.large)
                .fill(Color.backgroundMedium.opacity(0.5))
                .overlay(
                    RoundedRectangle(cornerRadius: CornerRadius.large)
                        .stroke(
                            selectedTariff == tariff ?
                            tariff.color :
                            Color.white.opacity(0.1),
                            lineWidth: selectedTariff == tariff ? 2 : 1
                        )
                )
        )
        .cardShadow()
        .padding(.horizontal, Spacing.screenPadding)
    }
    
    // MARK: - Comparison Button
    
    private var comparisonButton: some View {
        Button(action: {
            print("–°—Ä–∞–≤–Ω–∏—Ç—å —Ç–∞—Ä–∏—Ñ—ã")
        }) {
            HStack(spacing: Spacing.m) {
                Text("üìä")
                    .font(.system(size: 24))
                
                Text("–°—Ä–∞–≤–Ω–∏—Ç—å –≤—Å–µ —Ç–∞—Ä–∏—Ñ—ã")
                    .font(.body)
                    .foregroundColor(.textPrimary)
                
                Spacer()
                
                Image(systemName: "chevron.right")
                    .font(.system(size: 14, weight: .semibold))
                    .foregroundColor(.textSecondary)
            }
            .padding(Spacing.m)
            .background(
                RoundedRectangle(cornerRadius: CornerRadius.medium)
                    .fill(Color.backgroundMedium.opacity(0.3))
            )
        }
        .buttonStyle(PlainButtonStyle())
        .padding(.horizontal, Spacing.screenPadding)
    }
}

// MARK: - Preview

#if DEBUG
struct TariffsScreen_Previews: PreviewProvider {
    static var previews: some View {
        TariffsScreen()
    }
}
#endif

