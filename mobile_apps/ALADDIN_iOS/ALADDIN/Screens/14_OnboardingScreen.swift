import SwiftUI

/// üëã Onboarding Screen
/// –≠–∫—Ä–∞–Ω –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ - –ø–µ—Ä–≤–æ–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º + –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
/// –ò—Å—Ç–æ—á–Ω–∏–∫: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω iOS –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
struct OnboardingScreen: View {
    
    // MARK: - State
    
    @State private var currentPage: Int = 0
    @State private var isCompleted: Bool = false
    @State private var showJoinFamily: Bool = false
    @State private var showRecovery: Bool = false
    
    @StateObject private var registrationVM = FamilyRegistrationViewModel()
    
    struct OnboardingPage {
        let icon: String
        let title: String
        let description: String
        let color: Color
    }
    
    private let pages: [OnboardingPage] = [
        OnboardingPage(
            icon: "üõ°Ô∏è",
            title: "–ó–ê–©–ò–¢–ê –°–ï–ú–¨–ò",
            description: "–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –∑–∞—â–∏—Ç–∞ –¥–ª—è –≤—Å–µ–π –≤–∞—à–µ–π —Å–µ–º—å–∏ –æ—Ç —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —É–≥—Ä–æ–∑",
            color: Color(hex: "#3B82F6")
        ),
        OnboardingPage(
            icon: "ü§ñ",
            title: "AI –ü–û–ú–û–©–ù–ò–ö",
            description: "–£–º–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
            color: Color(hex: "#10B981")
        ),
        OnboardingPage(
            icon: "üë∂",
            title: "–†–û–î–ò–¢–ï–õ–¨–°–ö–ò–ô –ö–û–ù–¢–†–û–õ–¨",
            description: "–ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏ –¥–µ—Ç–µ–π –∏ –∏—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é",
            color: Color(hex: "#F59E0B")
        ),
        OnboardingPage(
            icon: "üìä",
            title: "–ê–ù–ê–õ–ò–¢–ò–ö–ê",
            description: "–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–≥—Ä–æ–∑ –∏ –∑–∞—â–∏—Ç—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏",
            color: Color(hex: "#EF4444")
        )
    ]
    
    // MARK: - Body
    
    var body: some View {
        ZStack {
            // –§–æ–Ω
            LinearGradient.backgroundGradient
                .ignoresSafeArea()
            
            VStack(spacing: 0) {
                // –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å
                HStack {
                    Spacer()
                    
                    Button(action: {
                        isCompleted = true
                    }) {
                        Text("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
                            .font(.body)
                            .foregroundColor(.textSecondary)
                    }
                }
                .padding(Spacing.m)
                
                // –ö–æ–Ω—Ç–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü
                TabView(selection: $currentPage) {
                    ForEach(0..<pages.count, id: \.self) { index in
                        onboardingPage(pages[index])
                            .tag(index)
                    }
                }
                .tabViewStyle(.page(indexDisplayMode: .never))
                
                // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü
                HStack(spacing: Spacing.s) {
                    ForEach(0..<pages.count, id: \.self) { index in
                        Circle()
                            .fill(currentPage == index ? Color.primaryBlue : Color.textSecondary.opacity(0.3))
                            .frame(width: currentPage == index ? 12 : 8, height: currentPage == index ? 12 : 8)
                            .animation(.spring(), value: currentPage)
                    }
                }
                .padding(.vertical, Spacing.l)
                
                // –ö–Ω–æ–ø–∫–∏ (–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–ª–∞–π–¥–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ)
                VStack(spacing: Spacing.m) {
                    // –û—Å–Ω–æ–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞
                    Button(action: {
                        if currentPage < pages.count - 1 {
                            withAnimation {
                                currentPage += 1
                            }
                        } else {
                            // –ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
                            isCompleted = true
                        }
                    }) {
                        Text(currentPage < pages.count - 1 ? "–ü–†–û–î–û–õ–ñ–ò–¢–¨" : "–ù–ê–ß–ê–¢–¨")
                            .font(.buttonText)
                            .foregroundColor(.white)
                            .frame(maxWidth: .infinity)
                            .frame(height: Size.buttonHeight)
                            .background(
                                LinearGradient(
                                    colors: [Color.primaryBlue, Color.secondaryBlue],
                                    startPoint: .leading,
                                    endPoint: .trailing
                                )
                            )
                            .cornerRadius(CornerRadius.large)
                    }
                    
                    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–ª–∞–π–¥–µ
                    if currentPage == pages.count - 1 {
                        HStack(spacing: Spacing.m) {
                            // –£ –º–µ–Ω—è –µ—Å—Ç—å –∫–æ–¥
                            Button(action: {
                                showJoinFamily = true
                                HapticFeedback.lightImpact()
                            }) {
                                Text("–£ –ú–ï–ù–Ø –ï–°–¢–¨ –ö–û–î")
                                    .font(.caption)
                                    .foregroundColor(.secondaryGold)
                                    .frame(maxWidth: .infinity)
                                    .frame(height: 44)
                                    .background(Color.secondaryGold.opacity(0.15))
                                    .cornerRadius(CornerRadius.medium)
                            }
                            
                            // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø
                            Button(action: {
                                showRecovery = true
                                HapticFeedback.lightImpact()
                            }) {
                                Text("–í–û–°–°–¢–ê–ù–û–í–ò–¢–¨")
                                    .font(.caption)
                                    .foregroundColor(.primaryBlue)
                                    .frame(maxWidth: .infinity)
                                    .frame(height: 44)
                                    .background(Color.primaryBlue.opacity(0.15))
                                    .cornerRadius(CornerRadius.medium)
                            }
                        }
                        .transition(.move(edge: .bottom).combined(with: .opacity))
                    }
                }
                .padding(.horizontal, Spacing.screenPadding)
                .padding(.bottom, Spacing.xl)
            }
        }
        .fullScreenCover(isPresented: $isCompleted) {
            MainScreenWithRegistration(registrationVM: registrationVM)
        }
        .sheet(isPresented: $showJoinFamily) {
            QRScannerModal(
                isPresented: $showJoinFamily,
                mode: .joinFamily,
                onCodeScanned: { code in
                    registrationVM.startRegistration()
                    // –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏/–≤–æ–∑—Ä–∞—Å—Ç–∞/–±—É–∫–≤—ã ‚Üí join
                }
            )
        }
        .sheet(isPresented: $showRecovery) {
            RecoveryOptionsModal(
                isPresented: $showRecovery,
                onRecoveryComplete: {
                    isCompleted = true
                }
            )
        }
    }
    
    // MARK: - Onboarding Page
    
    private func onboardingPage(_ page: OnboardingPage) -> some View {
        VStack(spacing: Spacing.xxl) {
            Spacer()
            
            // –ò–∫–æ–Ω–∫–∞
            ZStack {
                Circle()
                    .fill(page.color.opacity(0.2))
                    .frame(width: 200, height: 200)
                
                Circle()
                    .fill(page.color.opacity(0.1))
                    .frame(width: 160, height: 160)
                
                Text(page.icon)
                    .font(.system(size: 80))
            }
            
            // –¢–µ–∫—Å—Ç
            VStack(spacing: Spacing.m) {
                Text(page.title)
                    .font(.system(size: 32, weight: .bold))
                    .foregroundColor(.white)
                    .multilineTextAlignment(.center)
                
                Text(page.description)
                    .font(.system(size: 18))
                    .foregroundColor(.textSecondary)
                    .multilineTextAlignment(.center)
                    .lineSpacing(6)
            }
            .padding(.horizontal, Spacing.xl)
            
            Spacer()
        }
    }
}

// MARK: - Preview

#if DEBUG
struct OnboardingScreen_Previews: PreviewProvider {
    static var previews: some View {
        OnboardingScreen()
    }
}
#endif

