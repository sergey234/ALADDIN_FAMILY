import SwiftUI

/**
 * üì± Devices Screen
 * –≠–∫—Ä–∞–Ω —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏ —Å–µ–º—å–∏
 * 12_devices_screen –∏–∑ HTML
 */

struct DevicesScreen: View {
    
    @Environment(\.dismiss) var dismiss
    @State private var devices: [Device] = [
        Device(name: "iPhone 14 Pro", owner: "–°–µ—Ä–≥–µ–π", type: .iphone, status: .protected, lastActive: "–°–µ–π—á–∞—Å"),
        Device(name: "MacBook Pro", owner: "–°–µ—Ä–≥–µ–π", type: .mac, status: .protected, lastActive: "5 –º–∏–Ω –Ω–∞–∑–∞–¥"),
        Device(name: "iPad Air", owner: "–ú–∞—à–∞", type: .ipad, status: .warning, lastActive: "10 –º–∏–Ω –Ω–∞–∑–∞–¥"),
        Device(name: "iPhone 12", owner: "–ú–∞—Ä–∏—è", type: .iphone, status: .protected, lastActive: "1 —á–∞—Å –Ω–∞–∑–∞–¥"),
        Device(name: "Samsung Galaxy", owner: "–ë–∞–±—É—à–∫–∞", type: .android, status: .inactive, lastActive: "2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥"),
        Device(name: "MacBook Air", owner: "–ú–∞—à–∞", type: .mac, status: .protected, lastActive: "3 —á–∞—Å–∞ –Ω–∞–∑–∞–¥"),
        Device(name: "iPad Mini", owner: "–ü–µ—Ç—è", type: .ipad, status: .danger, lastActive: "5 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥"),
        Device(name: "iPhone SE", owner: "–ü–µ—Ç—è", type: .iphone, status: .warning, lastActive: "1 –¥–µ–Ω—å –Ω–∞–∑–∞–¥")
    ]
    @State private var showAddDevice: Bool = false
    
    var body: some View {
        ScrollView {
            VStack(spacing: Spacing.l) {
                ALADDINNavigationBar(
                    title: "–£–°–¢–†–û–ô–°–¢–í–ê",
                    subtitle: "\(devices.count) —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ø–æ–¥ –∑–∞—â–∏—Ç–æ–π",
                    showBackButton: true,
                    showAddButton: true,
                    onBack: { dismiss() },
                    onAdd: { showAddDevice = true }
                )
                .padding(.bottom, Spacing.m)
                
                // Device Stats
                VStack(spacing: Spacing.m) {
                    Text("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
                        .font(.h3)
                        .foregroundColor(.textPrimary)
                        .frame(maxWidth: .infinity, alignment: .leading)
                    
                    HStack {
                        Spacer()
                        VStack {
                            Text("üõ°Ô∏è \(devices.filter { $0.status == .protected }.count)")
                                .font(.h2)
                                .foregroundColor(.successGreen)
                            Text("–ó–∞—â–∏—â–µ–Ω–æ")
                                .font(.caption)
                                .foregroundColor(.textSecondary)
                        }
                        Spacer()
                        VStack {
                            Text("‚ö†Ô∏è \(devices.filter { $0.status == .warning || $0.status == .danger }.count)")
                                .font(.h2)
                                .foregroundColor(.warningOrange)
                            Text("–¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è")
                                .font(.caption)
                                .foregroundColor(.textSecondary)
                        }
                        Spacer()
                        VStack {
                            Text("üì± \(devices.count)")
                                .font(.h2)
                                .foregroundColor(.infoBlue)
                            Text("–í—Å–µ–≥–æ")
                                .font(.caption)
                                .foregroundColor(.textSecondary)
                        }
                        Spacer()
                    }
                    .padding(Spacing.cardPadding)
                    .background(
                        LinearGradient.cardGradient
                            .appGlassmorphism()
                    )
                    .cornerRadius(CornerRadius.large)
                    .cardShadow()
                }
                .padding(.horizontal, Spacing.screenPadding)
                
                // Devices List
                Text("–°–ü–ò–°–û–ö –£–°–¢–†–û–ô–°–¢–í")
                    .font(.h3)
                    .foregroundColor(.textPrimary)
                    .frame(maxWidth: .infinity, alignment: .leading)
                    .padding(.horizontal, Spacing.screenPadding)
                
                VStack(spacing: Spacing.m) {
                    ForEach(devices) { device in
                        DeviceRow(device: device) {
                            print("Device details: \(device.name)")
                        }
                    }
                }
                .padding(.horizontal, Spacing.screenPadding)
                
                // Add Device Button
                Button(action: {
                    showAddDevice = true
                    HapticFeedback.lightImpact()
                }) {
                    HStack(spacing: Spacing.m) {
                        Image(systemName: "plus.circle.fill")
                            .font(.system(size: Size.iconMedium))
                            .foregroundColor(.secondaryGold)
                        VStack(alignment: .leading) {
                            Text("–î–æ–±–∞–≤–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
                                .font(.h3)
                                .foregroundColor(.textPrimary)
                            Text("–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –Ω–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∫ –∑–∞—â–∏—Ç–µ")
                                .font(.caption)
                                .foregroundColor(.textSecondary)
                        }
                        Spacer()
                        Image(systemName: "chevron.right")
                            .foregroundColor(.textSecondary)
                    }
                    .padding(Spacing.cardPadding)
                    .frame(maxWidth: .infinity)
                    .background(
                        LinearGradient.cardGradient
                            .appGlassmorphism()
                    )
                    .cornerRadius(CornerRadius.large)
                    .cardShadow()
                }
                .padding(.horizontal, Spacing.screenPadding)
            }
            .background(LinearGradient.backgroundGradient.ignoresSafeArea())
        }
        .navigationBarHidden(true)
        .sheet(isPresented: $showAddDevice) {
            AddDeviceView()
        }
    }
}

// MARK: - Device Model

struct Device: Identifiable {
    let id = UUID()
    let name: String
    let owner: String
    let type: DeviceType
    var status: FunctionStatus
    let lastActive: String
}

enum DeviceType {
    case iphone, ipad, mac, android, windows
    
    var icon: String {
        switch self {
        case .iphone: return "üì±"
        case .ipad: return "üì±"
        case .mac: return "üíª"
        case .android: return "üì±"
        case .windows: return "üíª"
        }
    }
    
    var name: String {
        switch self {
        case .iphone: return "iPhone"
        case .ipad: return "iPad"
        case .mac: return "Mac"
        case .android: return "Android"
        case .windows: return "Windows"
        }
    }
}

// MARK: - Device Row

struct DeviceRow: View {
    let device: Device
    let action: () -> Void
    
    var body: some View {
        Button(action: {
            action()
            HapticFeedback.lightImpact()
        }) {
            HStack(spacing: Spacing.m) {
                // Device Icon
                ZStack {
                    Circle()
                        .fill(Color.surfaceDark)
                        .frame(width: Size.avatarSize, height: Size.avatarSize)
                    Text(device.type.icon)
                        .font(.system(size: Size.iconMedium))
                    Circle()
                        .stroke(device.status.color, lineWidth: 2)
                        .frame(width: Size.avatarSize + 4, height: Size.avatarSize + 4)
                }
                
                // Device Info
                VStack(alignment: .leading, spacing: Spacing.xxs) {
                    Text(device.name)
                        .font(.h3)
                        .foregroundColor(.textPrimary)
                    HStack(spacing: Spacing.xs) {
                        Text("üë§ \(device.owner)")
                            .font(.caption)
                            .foregroundColor(.textSecondary)
                        Text("‚Ä¢")
                            .font(.caption)
                            .foregroundColor(.textTertiary)
                        Text(device.type.name)
                            .font(.caption)
                            .foregroundColor(.textSecondary)
                    }
                    Text("‚è∞ \(device.lastActive)")
                        .font(.captionSmall)
                        .foregroundColor(.textTertiary)
                }
                
                Spacer()
                
                // Status
                VStack(alignment: .trailing, spacing: Spacing.xxs) {
                    Text(device.status.icon)
                        .font(.system(size: Size.statusIndicatorLarge))
                        .shadow(color: device.status.color.opacity(0.5), radius: 5)
                    Text(statusText(device.status))
                        .font(.captionSmall)
                        .foregroundColor(device.status.color)
                }
            }
            .padding(Spacing.cardPadding)
            .frame(maxWidth: .infinity)
            .background(
                LinearGradient.cardGradient
                    .appGlassmorphism()
            )
            .cornerRadius(CornerRadius.large)
            .cardShadow()
        }
    }
    
    private func statusText(_ status: FunctionStatus) -> String {
        switch status {
        case .active: return "–ó–∞—â–∏—â–µ–Ω–æ"
        case .warning: return "–í–Ω–∏–º–∞–Ω–∏–µ"
        case .danger: return "–û–ø–∞—Å–Ω–æ—Å—Ç—å"
        case .inactive: return "–ù–µ–∞–∫—Ç–∏–≤–Ω–æ"
        }
    }
}

// MARK: - Add Device View

struct AddDeviceView: View {
    @Environment(\.dismiss) var dismiss
    @State private var deviceName: String = ""
    @State private var selectedOwner: String = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞"
    
    var body: some View {
        ZStack {
            LinearGradient.backgroundGradient.ignoresSafeArea()
            
            VStack(spacing: Spacing.l) {
                HStack {
                    Button(action: { dismiss() }) {
                        Image(systemName: "xmark")
                            .font(.bodyBold)
                            .foregroundColor(.textPrimary)
                            .frame(width: Size.navButtonSize, height: Size.navButtonSize)
                            .background(Color.surfaceDark.opacity(0.6))
                            .cornerRadius(CornerRadius.medium)
                    }
                    Spacer()
                    Text("–î–æ–±–∞–≤–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
                        .font(.h2)
                        .foregroundColor(.secondaryGold)
                    Spacer()
                    Color.clear.frame(width: Size.navButtonSize, height: Size.navButtonSize)
                }
                .padding(.horizontal, Spacing.screenPadding)
                
                Spacer()
                
                VStack(spacing: Spacing.xl) {
                    Text("üì±")
                        .font(.system(size: Size.iconXLarge * 1.5))
                    
                    Text("–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR –∫–æ–¥")
                        .font(.h1)
                        .foregroundColor(.textPrimary)
                    
                    Text("–ù–∞ –Ω–æ–≤–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –æ—Ç–∫—Ä–æ–π—Ç–µ ALADDIN –∏ –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR –∫–æ–¥")
                        .font(.body)
                        .foregroundColor(.textSecondary)
                        .multilineTextAlignment(.center)
                    
                    // QR Code Placeholder
                    RoundedRectangle(cornerRadius: CornerRadius.large)
                        .fill(Color.white)
                        .frame(width: 200, height: 200)
                        .overlay(
                            Text("QR CODE")
                                .font(.h3)
                                .foregroundColor(.backgroundDark)
                        )
                    
                    PrimaryButton(title: "–î–æ–±–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é") {
                        print("Manual add")
                    }
                }
                .padding(.horizontal, Spacing.screenPadding)
                
                Spacer()
            }
        }
    }
}

// MARK: - Preview

struct DevicesScreen_Previews: PreviewProvider {
    static var previews: some View {
        DevicesScreen()
    }
}




