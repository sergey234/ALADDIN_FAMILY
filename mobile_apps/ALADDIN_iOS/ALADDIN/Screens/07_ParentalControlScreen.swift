import SwiftUI

/// üë∂ Parental Control Screen
/// –≠–∫—Ä–∞–Ω —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–µ—Ç—Å–∫–∏–º–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏
/// –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∏–∑–∞–π–Ω–∞: /mobile/wireframes/14_parental_control_screen.html
struct ParentalControlScreen: View {
    
    // MARK: - State
    
    @Environment(\.dismiss) private var dismiss
    @State private var isContentFilterEnabled: Bool = true
    @State private var isAppBlockingEnabled: Bool = true
    @State private var screenTimeLimit: Double = 3
    @State private var selectedChild: String = "–ú–∞—à–∞"
    
    // –ù–û–í–û–ï: –í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è —Å –µ–¥–∏–Ω–æ—Ä–æ–≥–∞–º–∏ ü¶Ñ
    @State private var showRewardsModal: Bool = false
    @State private var unicornBalance: Int = 245
    @State private var weeklyRewarded: Int = 128
    @State private var weeklyPunished: Int = 45
    
    // MARK: - Body
    
    var body: some View {
        ZStack {
            // –§–æ–Ω
            LinearGradient.backgroundGradient
                .ignoresSafeArea()
            
            VStack(spacing: 0) {
                // –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å
                ALADDINNavigationBar(
                    title: "–†–û–î–ò–¢–ï–õ–¨–°–ö–ò–ô –ö–û–ù–¢–†–û–õ–¨",
                    subtitle: "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –¥–µ—Ç–µ–π",
                    leftButton: .init(icon: "chevron.left") {
                        dismiss()
                    }
                )
                
                // –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
                ScrollView(.vertical, showsIndicators: false) {
                    VStack(spacing: Spacing.l) {
                        // –í—ã–±–æ—Ä —Ä–µ–±—ë–Ω–∫–∞
                        childSelector
                        
                        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–±—ë–Ω–∫–∞
                        childStats
                        
                        // –§–∏–ª—å—Ç—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                        contentFilterSection
                        
                        // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
                        appBlockingSection
                        
                        // –õ–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ —ç–∫—Ä–∞–Ω–∞
                        screenTimeLimitSection
                        
                        // –ù–û–í–û–ï: –í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ —Ä–µ–±—ë–Ω–∫–∞ ü¶Ñ
                        rewardsSection
                        
                        // –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
                        quickActionsSection
                        
                        // Spacer
                        Spacer()
                            .frame(height: Spacing.xxl)
                    }
                    .padding(.top, Spacing.m)
                }
            }
        }
        .navigationBarHidden(true)
    }
    
    // MARK: - Child Selector
    
    private var childSelector: some View {
        Button(action: {
            print("–í—ã–±—Ä–∞—Ç—å —Ä–µ–±—ë–Ω–∫–∞")
        }) {
            HStack(spacing: Spacing.m) {
                // –ê–≤–∞—Ç–∞—Ä
                Text("üëß")
                    .font(.system(size: 40))
                    .frame(width: 60, height: 60)
                    .background(
                        Circle()
                            .fill(Color.primaryBlue.opacity(0.3))
                    )
                
                // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                VStack(alignment: .leading, spacing: Spacing.xs) {
                    Text(selectedChild)
                        .font(.h3)
                        .foregroundColor(.textPrimary)
                    
                    HStack(spacing: Spacing.xs) {
                        Text("–†–µ–±—ë–Ω–æ–∫")
                            .font(.caption)
                            .foregroundColor(.textSecondary)
                        
                        Text("‚Ä¢")
                            .font(.caption)
                            .foregroundColor(.textSecondary)
                        
                        Text("10 –ª–µ—Ç")
                            .font(.caption)
                            .foregroundColor(.textSecondary)
                    }
                }
                
                Spacer()
                
                Image(systemName: "chevron.right")
                    .font(.system(size: 14, weight: .semibold))
                    .foregroundColor(.textSecondary)
            }
            .padding(Spacing.cardPadding)
            .background(
                RoundedRectangle(cornerRadius: CornerRadius.large)
                    .fill(Color.backgroundMedium.opacity(0.5))
            )
            .cardShadow()
        }
        .buttonStyle(PlainButtonStyle())
        .padding(.horizontal, Spacing.screenPadding)
    }
    
    // MARK: - Child Stats
    
    private var childStats: some View {
        HStack(spacing: Spacing.m) {
            statBox(icon: "‚è∞", value: "2:45", label: "–°–µ–≥–æ–¥–Ω—è\n–Ω–∞ —ç–∫—Ä–∞–Ω–µ", color: .successGreen)
            statBox(icon: "üö´", value: "12", label: "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤.\n—Å–∞–π—Ç–æ–≤", color: .dangerRed)
            statBox(icon: "üì±", value: "8", label: "–î–æ—Å—Ç—É–ø–Ω—ã—Ö\n–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π", color: .primaryBlue)
        }
        .padding(.horizontal, Spacing.screenPadding)
    }
    
    private func statBox(icon: String, value: String, label: String, color: Color) -> some View {
        VStack(spacing: Spacing.s) {
            Text(icon)
                .font(.system(size: 28))
            
            Text(value)
                .font(.h2)
                .foregroundColor(color)
            
            Text(label)
                .font(.captionSmall)
                .foregroundColor(.textSecondary)
                .multilineTextAlignment(.center)
                .lineLimit(2)
        }
        .frame(maxWidth: .infinity)
        .padding(Spacing.m)
        .background(
            RoundedRectangle(cornerRadius: CornerRadius.medium)
                .fill(Color.backgroundMedium.opacity(0.3))
        )
    }
    
    // MARK: - Content Filter Section
    
    private var contentFilterSection: some View {
        VStack(alignment: .leading, spacing: Spacing.s) {
            HStack {
                Text("üõ°Ô∏è")
                    .font(.system(size: 20))
                Text("–§–ò–õ–¨–¢–† –ö–û–ù–¢–ï–ù–¢–ê")
                    .font(.h3)
                    .foregroundColor(.textPrimary)
                Spacer()
            }
            .padding(.horizontal, Spacing.screenPadding)
            
            VStack(spacing: Spacing.s) {
                ALADDINToggle(
                    "–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ–ø–∞—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞",
                    subtitle: "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞",
                    icon: "üö´",
                    isOn: $isContentFilterEnabled
                )
            }
            .padding(.horizontal, Spacing.screenPadding)
        }
    }
    
    // MARK: - App Blocking Section
    
    private var appBlockingSection: some View {
        VStack(alignment: .leading, spacing: Spacing.s) {
            HStack {
                Text("üì±")
                    .font(.system(size: 20))
                Text("–ë–õ–û–ö–ò–†–û–í–ö–ê –ü–†–ò–õ–û–ñ–ï–ù–ò–ô")
                    .font(.h3)
                    .foregroundColor(.textPrimary)
                Spacer()
            }
            .padding(.horizontal, Spacing.screenPadding)
            
            VStack(spacing: Spacing.s) {
                ALADDINToggle(
                    "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π",
                    subtitle: "–¢–æ–ª—å–∫–æ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
                    icon: "üîí",
                    isOn: $isAppBlockingEnabled
                )
                
                Button(action: {
                    print("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º–∏")
                }) {
                    HStack {
                        Text("–°–ø–∏—Å–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π")
                            .font(.body)
                            .foregroundColor(.textPrimary)
                        
                        Spacer()
                        
                        Text("8 —Ä–∞–∑—Ä–µ—à–µ–Ω–æ")
                            .font(.caption)
                            .foregroundColor(.successGreen)
                        
                        Image(systemName: "chevron.right")
                            .font(.system(size: 12, weight: .semibold))
                            .foregroundColor(.textSecondary)
                    }
                    .padding(Spacing.m)
                    .background(
                        RoundedRectangle(cornerRadius: CornerRadius.medium)
                            .fill(Color.backgroundMedium.opacity(0.3))
                    )
                }
                .buttonStyle(PlainButtonStyle())
            }
            .padding(.horizontal, Spacing.screenPadding)
        }
    }
    
    // MARK: - Screen Time Limit Section
    
    private var screenTimeLimitSection: some View {
        VStack(alignment: .leading, spacing: Spacing.s) {
            HStack {
                Text("‚è∞")
                    .font(.system(size: 20))
                Text("–õ–ò–ú–ò–¢ –í–†–ï–ú–ï–ù–ò –≠–ö–†–ê–ù–ê")
                    .font(.h3)
                    .foregroundColor(.textPrimary)
                Spacer()
            }
            .padding(.horizontal, Spacing.screenPadding)
            
            VStack(spacing: Spacing.s) {
                ALADDINSlider(
                    "–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç",
                    subtitle: "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞",
                    icon: "‚è±Ô∏è",
                    value: $screenTimeLimit,
                    range: 1...12,
                    unit: " —á"
                )
            }
            .padding(.horizontal, Spacing.screenPadding)
        }
    }
    
    // MARK: - Rewards Section (–ù–û–í–û–ï! ü¶Ñ)
    
    private var rewardsSection: some View {
        VStack(alignment: .leading, spacing: Spacing.s) {
            HStack {
                Text("ü¶Ñ")
                    .font(.system(size: 20))
                Text("–í–û–ó–ù–ê–ì–†–ê–ñ–î–ï–ù–ò–ï –†–ï–ë–Å–ù–ö–ê")
                    .font(.h3)
                    .foregroundColor(Color(hex: "C084FC"))
                Spacer()
                
                // –ë–µ–π–¥–∂ —Å –±–∞–ª–∞–Ω—Å–æ–º
                Text("\(unicornBalance) ü¶Ñ")
                    .font(.caption)
                    .foregroundColor(Color(hex: "C084FC"))
                    .padding(.horizontal, 10)
                    .padding(.vertical, 5)
                    .background(
                        Capsule()
                            .fill(Color(hex: "A855F7").opacity(0.2))
                            .overlay(
                                Capsule()
                                    .stroke(Color(hex: "C084FC"), lineWidth: 1)
                            )
                    )
            }
            .padding(.horizontal, Spacing.screenPadding)
            
            // –ö–∞—Ä—Ç–æ—á–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            Button(action: {
                showRewardsModal = true
            }) {
                VStack(spacing: Spacing.m) {
                    // –ò–∫–æ–Ω–∫–∞ –µ–¥–∏–Ω–æ—Ä–æ–≥–∞ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
                    Text("ü¶Ñ")
                        .font(.system(size: 40))
                    
                    // –ë–∞–ª–∞–Ω—Å
                    HStack(spacing: Spacing.xs) {
                        Text("üí∞")
                            .font(.system(size: 16))
                        Text("\(unicornBalance) –µ–¥–∏–Ω–æ—Ä–æ–≥–æ–≤")
                            .font(.body)
                            .foregroundColor(.textPrimary)
                    }
                    
                    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é
                    HStack(spacing: Spacing.l) {
                        VStack(spacing: Spacing.xxs) {
                            Text("+\(weeklyRewarded)")
                                .font(.h3)
                                .foregroundColor(.successGreen)
                            Text("–í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–æ")
                                .font(.captionSmall)
                                .foregroundColor(.textSecondary)
                        }
                        
                        Rectangle()
                            .fill(Color.textSecondary.opacity(0.3))
                            .frame(width: 1, height: 30)
                        
                        VStack(spacing: Spacing.xxs) {
                            Text("-\(weeklyPunished)")
                                .font(.h3)
                                .foregroundColor(.dangerRed)
                            Text("–ù–∞–∫–∞–∑–∞–Ω–æ")
                                .font(.captionSmall)
                                .foregroundColor(.textSecondary)
                        }
                    }
                }
                .frame(maxWidth: .infinity)
                .padding(Spacing.cardPadding)
                .background(
                    RoundedRectangle(cornerRadius: CornerRadius.large)
                        .fill(
                            LinearGradient(
                                gradient: Gradient(colors: [
                                    Color(hex: "A855F7").opacity(0.12),
                                    Color(hex: "EC4899").opacity(0.18)
                                ]),
                                startPoint: .topLeading,
                                endPoint: .bottomTrailing
                            )
                        )
                        .overlay(
                            RoundedRectangle(cornerRadius: CornerRadius.large)
                                .stroke(Color(hex: "A855F7").opacity(0.4), lineWidth: 2)
                        )
                )
            }
            .buttonStyle(PlainButtonStyle())
            .padding(.horizontal, Spacing.screenPadding)
        }
        .sheet(isPresented: $showRewardsModal) {
            RewardsModalView(
                unicornBalance: $unicornBalance,
                weeklyRewarded: $weeklyRewarded,
                weeklyPunished: $weeklyPunished
            )
        }
    }
    
    // MARK: - Quick Actions Section
    
    private var quickActionsSection: some View {
        VStack(alignment: .leading, spacing: Spacing.s) {
            HStack {
                Text("–ë–´–°–¢–†–´–ï –î–ï–ô–°–¢–í–ò–Ø")
                    .font(.h3)
                    .foregroundColor(.textPrimary)
                Spacer()
            }
            .padding(.horizontal, Spacing.screenPadding)
            
            VStack(spacing: Spacing.s) {
                quickActionButton(
                    icon: "üïê",
                    title: "–î–æ–±–∞–≤–∏—Ç—å –≤—Ä–µ–º—è",
                    subtitle: "+30 –º–∏–Ω—É—Ç –∫ –ª–∏–º–∏—Ç—É"
                )
                
                quickActionButton(
                    icon: "üîí",
                    title: "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ",
                    subtitle: "–ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞"
                )
                
                quickActionButton(
                    icon: "üìç",
                    title: "–ì–¥–µ —Ä–µ–±—ë–Ω–æ–∫?",
                    subtitle: "–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ"
                )
            }
            .padding(.horizontal, Spacing.screenPadding)
        }
    }
    
    private func quickActionButton(icon: String, title: String, subtitle: String) -> some View {
        Button(action: {
            let generator = UIImpactFeedbackGenerator(style: .light)
            generator.impactOccurred()
            print(title)
        }) {
            HStack(spacing: Spacing.m) {
                Text(icon)
                    .font(.system(size: 28))
                
                VStack(alignment: .leading, spacing: Spacing.xxs) {
                    Text(title)
                        .font(.body)
                        .foregroundColor(.textPrimary)
                    
                    Text(subtitle)
                        .font(.caption)
                        .foregroundColor(.textSecondary)
                }
                
                Spacer()
                
                Image(systemName: "chevron.right")
                    .font(.system(size: 12, weight: .semibold))
                    .foregroundColor(.textSecondary)
            }
            .padding(Spacing.m)
            .background(
                RoundedRectangle(cornerRadius: CornerRadius.medium)
                    .fill(Color.backgroundMedium.opacity(0.3))
            )
        }
        .buttonStyle(PlainButtonStyle())
    }
}

// MARK: - Preview

#if DEBUG
struct ParentalControlScreen_Previews: PreviewProvider {
    static var previews: some View {
        ParentalControlScreen()
    }
}
#endif

