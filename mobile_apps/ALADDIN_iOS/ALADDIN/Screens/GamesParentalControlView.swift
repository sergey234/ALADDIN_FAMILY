import SwiftUI

/// üéÆ Games Parental Control View
/// –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
/// –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∏–∑–∞–π–Ω–∞: /mobile/wireframes/14c_games_parental_control.html
struct GamesParentalControlView: View {
    
    // MARK: - State
    
    @Environment(\.dismiss) private var dismiss
    @State private var isWheelEnabled: Bool = true
    @State private var isTournamentEnabled: Bool = true
    @State private var isUniverseEnabled: Bool = true
    @State private var wheelFrequency: Double = 1
    @State private var prizeSector1: Double = 5
    @State private var prizeSector2: Double = 10
    @State private var prizeSector3: Double = 20
    @State private var prizeSector4: Double = 50
    @State private var prizeSector5: Double = 100
    @State private var prizeSector6: Double = 500
    
    // MARK: - Body
    
    var body: some View {
        ZStack {
            // –§–æ–Ω
            LinearGradient.backgroundGradient
                .ignoresSafeArea()
            
            VStack(spacing: 0) {
                // –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å
                ALADDINNavigationBar(
                    title: "–£–ü–†–ê–í–õ–ï–ù–ò–ï –ò–ì–†–ê–ú–ò",
                    subtitle: "–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å",
                    leftButton: .init(icon: "chevron.left") {
                        dismiss()
                    }
                )
                
                // –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
                ScrollView(.vertical, showsIndicators: false) {
                    VStack(spacing: Spacing.l) {
                        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                        infoCard
                        
                        // –ö–æ–ª–µ—Å–æ —É–¥–∞—á–∏
                        wheelGameCard
                        
                        // –°–µ–º–µ–π–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä
                        tournamentGameCard
                        
                        // –ï–¥–∏–Ω–æ—Ä–æ–≥-–ø–∏—Ç–æ–º–µ—Ü (–≤—Å–µ–≥–¥–∞ –í–ö–õ)
                        petGameCard
                        
                        // –ï–¥–∏–Ω–æ—Ä–æ–≥-–≤—Å–µ–ª–µ–Ω–Ω–∞—è
                        universeGameCard
                        
                        // –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
                        quickActions
                        
                        // –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                        currentSettings
                        
                        // –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
                        saveButton
                        
                        Spacer()
                            .frame(height: Spacing.xxl)
                    }
                    .padding(.top, Spacing.m)
                }
            }
        }
        .navigationBarHidden(true)
    }
    
    // MARK: - Info Card
    
    private var infoCard: some View {
        HStack(spacing: Spacing.m) {
            Text("üí°")
                .font(.system(size: 20))
            
            VStack(alignment: .leading, spacing: Spacing.xs) {
                Text("–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å –∏–≥—Ä")
                    .font(.body)
                    .fontWeight(.semibold)
                    .foregroundColor(.textPrimary)
                Text("–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–∫–ª—é—á–∞—Ç—å/–æ—Ç–∫–ª—é—á–∞—Ç—å –∏–≥—Ä–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã. –ï–¥–∏–Ω–æ—Ä–æ–≥-–ø–∏—Ç–æ–º–µ—Ü –≤—Å–µ–≥–¥–∞ –∞–∫—Ç–∏–≤–µ–Ω - —ç—Ç–æ –æ—Å–Ω–æ–≤–Ω–∞—è –º–æ—Ç–∏–≤–∞—Ü–∏—è! ü¶Ñ")
                    .font(.captionSmall)
                    .foregroundColor(.textSecondary)
                    .fixedSize(horizontal: false, vertical: true)
            }
        }
        .padding(Spacing.m)
        .background(
            RoundedRectangle(cornerRadius: CornerRadius.medium)
                .fill(Color.primaryBlue.opacity(0.15))
        )
        .padding(.horizontal, Spacing.screenPadding)
    }
    
    // MARK: - Wheel Game Card
    
    private var wheelGameCard: some View {
        VStack(alignment: .leading, spacing: Spacing.m) {
            // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–º
            HStack {
                HStack(spacing: Spacing.xs) {
                    Text("üé∞")
                        .font(.system(size: 22))
                    Text("–ö–æ–ª–µ—Å–æ —É–¥–∞—á–∏")
                        .font(.body)
                        .fontWeight(.semibold)
                        .foregroundColor(.textPrimary)
                }
                
                Spacer()
                
                Toggle("", isOn: $isWheelEnabled)
                    .labelsHidden()
            }
            
            // –û–ø–∏—Å–∞–Ω–∏–µ
            Text("–†–µ–±—ë–Ω–æ–∫ –∫—Ä—É—Ç–∏—Ç –∫–æ–ª–µ—Å–æ –∏ –ø–æ–ª—É—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–∏–∑ –æ—Ç 5 –¥–æ 500 ü¶Ñ. –ü—Ä–∏–∑—ã: 1Ô∏è‚É£ 5ü¶Ñ ‚Ä¢ 2Ô∏è‚É£ 10ü¶Ñ ‚Ä¢ 3Ô∏è‚É£ 20ü¶Ñ ‚Ä¢ 4Ô∏è‚É£ 50ü¶Ñ ‚Ä¢ 5Ô∏è‚É£ 100ü¶Ñ ‚Ä¢ 6Ô∏è‚É£ 500ü¶Ñ –î–ñ–ï–ö–ü–û–¢!")
                .font(.captionSmall)
                .foregroundColor(.textSecondary)
                .fixedSize(horizontal: false, vertical: true)
            
            if isWheelEnabled {
                // –ß–∞—Å—Ç–æ—Ç–∞ –≤—Ä–∞—â–µ–Ω–∏–π
                VStack(alignment: .leading, spacing: Spacing.s) {
                    Text("–ß–∞—Å—Ç–æ—Ç–∞ –≤—Ä–∞—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å:")
                        .font(.caption)
                        .foregroundColor(.textPrimary)
                    
                    Slider(value: $wheelFrequency, in: 1...7, step: 1)
                        .accentColor(.successGreen)
                    
                    HStack {
                        Text("1 —Ä–∞–∑")
                            .font(.captionSmall)
                            .foregroundColor(.textSecondary)
                        Spacer()
                        Text("\(Int(wheelFrequency)) \(wheelFrequency == 1 ? "—Ä–∞–∑ –≤ –¥–µ–Ω—å" : (wheelFrequency <= 4 ? "—Ä–∞–∑–∞ –≤ –¥–µ–Ω—å" : "—Ä–∞–∑ –≤ –¥–µ–Ω—å"))")
                            .font(.caption)
                            .fontWeight(.semibold)
                            .foregroundColor(.successGreen)
                        Spacer()
                        Text("7 —Ä–∞–∑")
                            .font(.captionSmall)
                            .foregroundColor(.textSecondary)
                    }
                }
                
                // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–∑–æ–≤
                VStack(alignment: .leading, spacing: Spacing.s) {
                    Text("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–∑–æ–≤ –Ω–∞ –±–∞—Ä–∞–±–∞–Ω–µ:")
                        .font(.caption)
                        .foregroundColor(.textPrimary)
                    
                    prizeSlider(sector: 1, chance: "40%", prize: $prizeSector1, range: 1...50)
                    prizeSlider(sector: 2, chance: "30%", prize: $prizeSector2, range: 5...100)
                    prizeSlider(sector: 3, chance: "15%", prize: $prizeSector3, range: 10...150)
                    prizeSlider(sector: 4, chance: "10%", prize: $prizeSector4, range: 20...200)
                    prizeSlider(sector: 5, chance: "4%", prize: $prizeSector5, range: 50...300)
                    prizeSlider(sector: 6, chance: "1%", prize: $prizeSector6, range: 100...1000, isJackpot: true)
                    
                    Text("üí° –°–æ–≤–µ—Ç: –ù–∞—á–Ω–∏—Ç–µ —Å –º–∞–ª—ã—Ö –ø—Ä–∏–∑–æ–≤ –∏ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–π—Ç–µ –¥–ª—è –º–æ—Ç–∏–≤–∞—Ü–∏–∏!")
                        .font(.captionSmall)
                        .foregroundColor(.textSecondary)
                        .padding(Spacing.s)
                        .background(
                            RoundedRectangle(cornerRadius: CornerRadius.small)
                                .fill(Color.primaryBlue.opacity(0.1))
                        )
                }
            }
        }
        .padding(Spacing.m)
        .background(
            RoundedRectangle(cornerRadius: CornerRadius.large)
                .fill(Color.backgroundMedium.opacity(0.5))
                .opacity(isWheelEnabled ? 1.0 : 0.6)
        )
        .padding(.horizontal, Spacing.screenPadding)
    }
    
    private func prizeSlider(sector: Int, chance: String, prize: Binding<Double>, range: ClosedRange<Double>, isJackpot: Bool = false) -> some View {
        VStack(alignment: .leading, spacing: 4) {
            HStack {
                Text("\(sector)Ô∏è‚É£ –°–µ–∫—Ç–æ—Ä \(sector)\(isJackpot ? " –î–ñ–ï–ö–ü–û–¢" : "") (\(chance) —à–∞–Ω—Å):")
                    .font(.captionSmall)
                    .foregroundColor(.textSecondary)
                Spacer()
                Text("\(Int(prize.wrappedValue)) ü¶Ñ")
                    .font(.caption)
                    .fontWeight(.semibold)
                    .foregroundColor(Color(hex: "FFD700"))
            }
            
            Slider(value: prize, in: range, step: 1)
                .accentColor(Color(hex: "FFD700"))
                .frame(height: 4)
        }
    }
    
    // MARK: - Tournament Game Card
    
    private var tournamentGameCard: some View {
        gameCard(
            icon: "üèÜ",
            title: "–°–µ–º–µ–π–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä",
            description: "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ –≤—Å–µ–π —Å–µ–º—å–∏. 5 —Ç–∏–ø–æ–≤ —Ç—É—Ä–Ω–∏—Ä–æ–≤: –æ—Ç–ª–∏—á–Ω–∏–∫–∏ üìö, –ø–æ–º–æ—â–Ω–∏–∫–∏ üßπ, –±–µ–∑ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ üòä, —á—Ç–µ–Ω–∏–µ üìñ, —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π üéØ. –ü—Ä–∏–∑—ã: ü•á +50 ‚Ä¢ ü•à +30 ‚Ä¢ ü•â +20 ü¶Ñ",
            isEnabled: $isTournamentEnabled
        )
    }
    
    // MARK: - Pet Game Card
    
    private var petGameCard: some View {
        VStack(alignment: .leading, spacing: Spacing.m) {
            HStack {
                HStack(spacing: Spacing.xs) {
                    Text("ü¶Ñ")
                        .font(.system(size: 22))
                    Text("–ï–¥–∏–Ω–æ—Ä–æ–≥-–ø–∏—Ç–æ–º–µ—Ü")
                        .font(.body)
                        .fontWeight(.semibold)
                        .foregroundColor(.textPrimary)
                }
                
                Spacer()
                
                Text("üîí –í–°–ï–ì–î–ê –í–ö–õ")
                    .font(.captionSmall)
                    .foregroundColor(Color(hex: "C084FC"))
                    .padding(.horizontal, 10)
                    .padding(.vertical, 5)
                    .background(
                        Capsule()
                            .fill(Color(hex: "A855F7").opacity(0.3))
                            .overlay(
                                Capsule()
                                    .stroke(Color(hex: "C084FC"), lineWidth: 1)
                            )
                    )
            }
            
            Text("–¢–∞–º–∞–≥–æ—á–∏-–ø–∏—Ç–æ–º–µ—Ü —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏ ‚ù§Ô∏èüçé‚≠êüòä. –†–µ–±—ë–Ω–æ–∫ –∫–æ—Ä–º–∏—Ç, –∏–≥—Ä–∞–µ—Ç, –≥–ª–∞–¥–∏—Ç. 4 —Å—Ç–∞–¥–∏–∏ —ç–≤–æ–ª—é—Ü–∏–∏. –ù–µ–ª—å–∑—è –æ—Ç–∫–ª—é—á–∏—Ç—å - —ç—Ç–æ –æ—Å–Ω–æ–≤–∞ –º–æ—Ç–∏–≤–∞—Ü–∏–∏!")
                .font(.captionSmall)
                .foregroundColor(.textSecondary)
                .fixedSize(horizontal: false, vertical: true)
        }
        .padding(Spacing.m)
        .background(
            RoundedRectangle(cornerRadius: CornerRadius.large)
                .fill(Color(hex: "A855F7").opacity(0.1))
                .overlay(
                    RoundedRectangle(cornerRadius: CornerRadius.large)
                        .stroke(Color(hex: "C084FC"), lineWidth: 1)
                )
        )
        .padding(.horizontal, Spacing.screenPadding)
    }
    
    // MARK: - Universe Game Card
    
    private var universeGameCard: some View {
        gameCard(
            icon: "üå≥",
            title: "–ï–¥–∏–Ω–æ—Ä–æ–≥-–≤—Å–µ–ª–µ–Ω–Ω–∞—è",
            description: "–°–∞–¥ –µ–¥–∏–Ω–æ—Ä–æ–≥–æ–≤, –∫–æ–ª–ª–µ–∫—Ü–∏—è 10 –≤–∏–¥–æ–≤, —Å—Ç–æ—Ä–∏—Ç–µ–ª–ª–∏–Ω–≥ 5 –≥–ª–∞–≤. –ß–µ–º –±–æ–ª—å—à–µ –µ–¥–∏–Ω–æ—Ä–æ–≥–æ–≤, —Ç–µ–º –∫—Ä–∞—Å–∏–≤–µ–µ —Å–∞–¥!",
            isEnabled: $isUniverseEnabled
        )
    }
    
    private func gameCard(icon: String, title: String, description: String, isEnabled: Binding<Bool>) -> some View {
        VStack(alignment: .leading, spacing: Spacing.m) {
            HStack {
                HStack(spacing: Spacing.xs) {
                    Text(icon)
                        .font(.system(size: 22))
                    Text(title)
                        .font(.body)
                        .fontWeight(.semibold)
                        .foregroundColor(.textPrimary)
                }
                
                Spacer()
                
                Toggle("", isOn: isEnabled)
                    .labelsHidden()
            }
            
            Text(description)
                .font(.captionSmall)
                .foregroundColor(.textSecondary)
                .fixedSize(horizontal: false, vertical: true)
        }
        .padding(Spacing.m)
        .background(
            RoundedRectangle(cornerRadius: CornerRadius.large)
                .fill(Color.backgroundMedium.opacity(0.5))
                .opacity(isEnabled.wrappedValue ? 1.0 : 0.6)
        )
        .padding(.horizontal, Spacing.screenPadding)
    }
    
    // MARK: - Quick Actions
    
    private var quickActions: some View {
        VStack(spacing: Spacing.s) {
            Button(action: disableAllGames) {
                Text("–û—Ç–∫–ª—é—á–∏—Ç—å –≤—Å–µ (–∫—Ä–æ–º–µ ü¶Ñ)")
                    .font(.body)
                    .fontWeight(.semibold)
                    .foregroundColor(.dangerRed)
                    .frame(maxWidth: .infinity)
                    .padding(Spacing.m)
                    .background(
                        RoundedRectangle(cornerRadius: CornerRadius.medium)
                            .fill(Color.dangerRed.opacity(0.2))
                            .overlay(
                                RoundedRectangle(cornerRadius: CornerRadius.medium)
                                    .stroke(Color.dangerRed, lineWidth: 2)
                            )
                    )
            }
            .buttonStyle(PlainButtonStyle())
            
            Button(action: enableAllGames) {
                Text("–í–∫–ª—é—á–∏—Ç—å –≤—Å–µ")
                    .font(.body)
                    .fontWeight(.semibold)
                    .foregroundColor(.successGreen)
                    .frame(maxWidth: .infinity)
                    .padding(Spacing.m)
                    .background(
                        RoundedRectangle(cornerRadius: CornerRadius.medium)
                            .fill(Color.successGreen.opacity(0.2))
                            .overlay(
                                RoundedRectangle(cornerRadius: CornerRadius.medium)
                                    .stroke(Color.successGreen, lineWidth: 2)
                            )
                    )
            }
            .buttonStyle(PlainButtonStyle())
        }
        .padding(.horizontal, Spacing.screenPadding)
    }
    
    // MARK: - Current Settings
    
    private var currentSettings: some View {
        VStack(alignment: .leading, spacing: Spacing.s) {
            Text("üìä –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
                .font(.body)
                .fontWeight(.semibold)
                .foregroundColor(.textPrimary)
            
            VStack(alignment: .leading, spacing: Spacing.xs) {
                if isWheelEnabled {
                    Text("‚Ä¢ –ö–æ–ª–µ—Å–æ —É–¥–∞—á–∏: ‚úÖ –í–∫–ª—é—á–µ–Ω–æ (\(Int(wheelFrequency)) \(wheelFrequency == 1 ? "—Ä–∞–∑ –≤ –¥–µ–Ω—å" : "—Ä–∞–∑ –≤ –¥–µ–Ω—å"))")
                        .font(.captionSmall)
                        .foregroundColor(.textSecondary)
                    Text("  –ü—Ä–∏–∑—ã: 1Ô∏è‚É£\(Int(prizeSector1)) ‚Ä¢ 2Ô∏è‚É£\(Int(prizeSector2)) ‚Ä¢ 3Ô∏è‚É£\(Int(prizeSector3)) ‚Ä¢ 4Ô∏è‚É£\(Int(prizeSector4)) ‚Ä¢ 5Ô∏è‚É£\(Int(prizeSector5)) ‚Ä¢ 6Ô∏è‚É£\(Int(prizeSector6)) ü¶Ñ")
                        .font(.captionSmall)
                        .foregroundColor(.textSecondary)
                } else {
                    Text("‚Ä¢ –ö–æ–ª–µ—Å–æ —É–¥–∞—á–∏: ‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ")
                        .font(.captionSmall)
                        .foregroundColor(.textSecondary)
                }
                
                Text(isTournamentEnabled ? "‚Ä¢ –°–µ–º–µ–π–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä: ‚úÖ –í–∫–ª—é—á–µ–Ω" : "‚Ä¢ –°–µ–º–µ–π–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä: ‚ùå –û—Ç–∫–ª—é—á–µ–Ω")
                    .font(.captionSmall)
                    .foregroundColor(.textSecondary)
                
                Text("‚Ä¢ –ï–¥–∏–Ω–æ—Ä–æ–≥-–ø–∏—Ç–æ–º–µ—Ü: üîí –í—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–µ–Ω")
                    .font(.captionSmall)
                    .foregroundColor(.textSecondary)
                
                Text(isUniverseEnabled ? "‚Ä¢ –ï–¥–∏–Ω–æ—Ä–æ–≥-–≤—Å–µ–ª–µ–Ω–Ω–∞—è: ‚úÖ –í–∫–ª—é—á–µ–Ω–∞" : "‚Ä¢ –ï–¥–∏–Ω–æ—Ä–æ–≥-–≤—Å–µ–ª–µ–Ω–Ω–∞—è: ‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞")
                    .font(.captionSmall)
                    .foregroundColor(.textSecondary)
            }
        }
        .padding(Spacing.m)
        .background(
            RoundedRectangle(cornerRadius: CornerRadius.medium)
                .fill(Color.backgroundMedium.opacity(0.5))
        )
        .padding(.horizontal, Spacing.screenPadding)
    }
    
    // MARK: - Save Button
    
    private var saveButton: some View {
        Button(action: saveSettings) {
            Text("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
                .font(.body)
                .fontWeight(.semibold)
                .foregroundColor(.textPrimary)
                .frame(maxWidth: .infinity)
                .padding(Spacing.m)
                .background(
                    LinearGradient(
                        colors: [.successGreen, .successGreen.opacity(0.8)],
                        startPoint: .leading,
                        endPoint: .trailing
                    )
                    .clipShape(RoundedRectangle(cornerRadius: CornerRadius.large))
                )
        }
        .buttonStyle(PlainButtonStyle())
        .padding(.horizontal, Spacing.screenPadding)
    }
    
    // MARK: - Actions
    
    private func disableAllGames() {
        isWheelEnabled = false
        isTournamentEnabled = false
        isUniverseEnabled = false
        
        let generator = UINotificationFeedbackGenerator()
        generator.notificationOccurred(.success)
        print("–í—Å–µ –∏–≥—Ä—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã (–∫—Ä–æ–º–µ –ø–∏—Ç–æ–º—Ü–∞)")
    }
    
    private func enableAllGames() {
        isWheelEnabled = true
        isTournamentEnabled = true
        isUniverseEnabled = true
        
        let generator = UINotificationFeedbackGenerator()
        generator.notificationOccurred(.success)
        print("–í—Å–µ –∏–≥—Ä—ã –≤–∫–ª—é—á–µ–Ω—ã")
    }
    
    private func saveSettings() {
        let generator = UINotificationFeedbackGenerator()
        generator.notificationOccurred(.success)
        
        print("üíæ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:")
        print("- –ö–æ–ª–µ—Å–æ: \(isWheelEnabled ? "–í–ö–õ" : "–í–´–ö–õ"), —á–∞—Å—Ç–æ—Ç–∞: \(Int(wheelFrequency))")
        print("- –ü—Ä–∏–∑—ã: \(Int(prizeSector1)), \(Int(prizeSector2)), \(Int(prizeSector3)), \(Int(prizeSector4)), \(Int(prizeSector5)), \(Int(prizeSector6))")
        print("- –¢—É—Ä–Ω–∏—Ä: \(isTournamentEnabled ? "–í–ö–õ" : "–í–´–ö–õ")")
        print("- –í—Å–µ–ª–µ–Ω–Ω–∞—è: \(isUniverseEnabled ? "–í–ö–õ" : "–í–´–ö–õ")")
        
        dismiss()
    }
}

// MARK: - Preview

#if DEBUG
struct GamesParentalControlView_Previews: PreviewProvider {
    static var previews: some View {
        GamesParentalControlView()
    }
}
#endif




