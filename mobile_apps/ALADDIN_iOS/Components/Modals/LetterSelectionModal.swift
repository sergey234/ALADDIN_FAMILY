import SwiftUI

/**
 * üî§ Letter Selection Modal
 * –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –±—É–∫–≤—ã
 * –û–∫–Ω–æ #3 –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
 */

struct LetterSelectionModal: View {
    
    @Binding var isPresented: Bool
    @Binding var selectedLetter: String?
    
    var onLetterSelected: (String) -> Void
    
    // MARK: - Russian Alphabet
    
    private let russianAlphabet = [
        ["–ê", "–ë", "–í", "–ì", "–î", "–ï", "–Å", "–ñ", "–ó", "–ò"],
        ["–ö", "–õ", "–ú", "–ù", "–û", "–ü", "–†", "–°", "–¢", "–£"],
        ["–§", "–•", "–¶", "–ß", "–®", "–©", "–´", "–≠", "–Æ", "–Ø"]
    ]
    
    // MARK: - Body
    
    var body: some View {
        ZStack {
            // Backdrop blur
            Color.black.opacity(0.5)
                .ignoresSafeArea()
                .blur(radius: 20)
            
            // Modal content
            VStack(spacing: Spacing.xl) {
                // Header
                VStack(spacing: Spacing.m) {
                    Text("üî§")
                        .font(.system(size: 40))
                    
                    Text("–í–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –±—É–∫–≤–∞")
                        .font(.system(size: 20, weight: .bold))
                        .foregroundColor(Color(hex: "#FCD34D"))  // –Ø—Ä–∫–æ–µ –∑–æ–ª–æ—Ç–æ –∏–∑ –∏–∫–æ–Ω–∫–∏!
                        .multilineTextAlignment(.center)
                    
                    Text("(–í–º–µ—Å—Ç–æ –∏–º–µ–Ω–∏, –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç–∏)")
                        .font(.system(size: 14))
                        .foregroundColor(.textSecondary)
                }
                
                // Letter grid (–ø—Ä–æ–≤–µ—Ä–µ–Ω–æ - –ø–æ–º–µ—â–∞–µ—Ç—Å—è!)
                VStack(spacing: 3) {  // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: 3 –≤–º–µ—Å—Ç–æ 6
                    ForEach(russianAlphabet, id: \.self) { row in
                        HStack(spacing: 3) {  // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: 3 –≤–º–µ—Å—Ç–æ 6
                            ForEach(row, id: \.self) { letter in
                                LetterButton(
                                    letter: letter,
                                    isSelected: selectedLetter == letter
                                ) {
                                    selectLetter(letter)
                                }
                            }
                        }
                    }
                }
                
                // Selected letter display
                if let letter = selectedLetter {
                    HStack(spacing: Spacing.s) {
                        Text("–í—ã–±—Ä–∞–Ω–∞ –±—É–∫–≤–∞:")
                            .font(.system(size: 14))
                            .foregroundColor(.textSecondary)
                        
                        Text(letter)
                            .font(.system(size: 20, weight: .bold))
                            .foregroundColor(Color(hex: "#60A5FA"))  // –≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π —Å–∏–Ω–∏–π!
                    }
                    .padding(Spacing.m)
                    .background(Color(hex: "#60A5FA").opacity(0.1))  // –≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π —Å–∏–Ω–∏–π!
                    .cornerRadius(12)
                }
            }
            .padding(Spacing.xl)
            .frame(width: 340)
            .background(
                LinearGradient(
                    colors: [
                        Color(hex: "#0F172A"),  // –ö–æ—Å–º–∏—á–µ—Å–∫–∏–π —Ç—ë–º–Ω—ã–π
                        Color(hex: "#1E3A8A"),  // –ì–ª—É–±–æ–∫–∏–π —Å–∏–Ω–∏–π
                        Color(hex: "#3B82F6"),  // –≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π —Å–∏–Ω–∏–π
                        Color(hex: "#1E40AF")   // –ö–æ—Ä–æ–ª–µ–≤—Å–∫–∏–π —Å–∏–Ω–∏–π
                    ],
                    startPoint: .topLeading,
                    endPoint: .bottomTrailing
                )
            )
            .cornerRadius(24)
            .shadow(color: .black.opacity(0.5), radius: 30, x: 0, y: 20)
        }
        .transition(.asymmetric(
            insertion: .scale(scale: 0.8).combined(with: .opacity),
            removal: .scale(scale: 0.8).combined(with: .opacity)
        ))
        .animation(.spring(response: 0.4, dampingFraction: 0.8), value: isPresented)
    }
    
    // MARK: - Actions
    
    private func selectLetter(_ letter: String) {
        selectedLetter = letter
        HapticFeedback.selection()
        
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.3) {
            onLetterSelected(letter)
        }
    }
}

// MARK: - Letter Button Component

struct LetterButton: View {
    let letter: String
    let isSelected: Bool
    let action: () -> Void
    
    var body: some View {
        Button(action: action) {
            Text(letter)
                .font(.system(size: 16, weight: .semibold))
                .foregroundColor(.white)
                .frame(width: 25, height: 25)  // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: 25 –≤–º–µ—Å—Ç–æ 28 (–±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–∞–∑–º–µ—Ä!)
                .background(
                    isSelected
                        ? Color(hex: "#60A5FA")  // –≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π —Å–∏–Ω–∏–π –∏–∑ –∏–∫–æ–Ω–∫–∏!
                        : Color.white.opacity(0.1)
                )
                .cornerRadius(8)
                .shadow(
                    color: isSelected ? Color(hex: "#60A5FA").opacity(0.5) : .clear,  // –≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–æ–µ —Å–≤–µ—á–µ–Ω–∏–µ!
                    radius: isSelected ? 10 : 0
                )
                .scaleEffect(isSelected ? 1.1 : 1.0)
        }
        .buttonStyle(.plain)
    }
}

// MARK: - Preview

struct LetterSelectionModal_Previews: PreviewProvider {
    static var previews: some View {
        LetterSelectionModal(
            isPresented: .constant(true),
            selectedLetter: .constant("–ê"),
            onLetterSelected: { _ in }
        )
    }
}

