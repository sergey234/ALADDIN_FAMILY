import SwiftUI

struct ConsentModal: View {
    @Binding var isPresented: Bool
    let onAccept: () -> Void
    let onReadMore: () -> Void
    
    @State private var isAnimating = false
    
    var body: some View {
        ZStack {
            // –ó–∞—Ç–µ–º–Ω—ë–Ω–Ω—ã–π —Ñ–æ–Ω —Å —Ä–∞–∑–º—ã—Ç–∏–µ–º (Glassmorphism)
            Color.black.opacity(0.85)
                .ignoresSafeArea()
                .background(
                    .ultraThinMaterial
                )
                .blur(radius: isAnimating ? 0 : 20)
            
            // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            VStack(spacing: 0) {
                // –ó–∞–≥–æ–ª–æ–≤–æ–∫
                consentHeader
                    .padding(.bottom, 20)
                
                // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
                ScrollView(.vertical, showsIndicators: false) {
                    VStack(spacing: 12) {
                        // ‚ùå –ß—Ç–æ –ù–ï —Å–æ–±–∏—Ä–∞–µ–º
                        notCollectingSection
                        
                        // ‚úÖ –í–æ–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
                        militaryTechSection
                        
                        // üõ°Ô∏è –ì–∞—Ä–∞–Ω—Ç–∏–∏
                        guaranteesSection
                    }
                }
                .frame(maxHeight: 280)
                
                // –ö–Ω–æ–ø–∫–∏
                buttonsSection
                    .padding(.top, 12)
                
                // –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π —Ç–µ–∫—Å—Ç
                legalText
                    .padding(.top, 10)
            }
            .padding(25)
            .frame(maxWidth: 340)
            .background(
                // –ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –≥—Ä–∞–¥–∏–µ–Ω—Ç —Å glassmorphism
                LinearGradient(
                    colors: [
                        Color(hex: "#0F172A"),
                        Color(hex: "#1E3A8A"),
                        Color(hex: "#3B82F6")
                    ],
                    startPoint: .topLeading,
                    endPoint: .bottomTrailing
                )
                .overlay(
                    Color.white.opacity(0.05) // Glassmorphism overlay
                )
            )
            .clipShape(RoundedRectangle(cornerRadius: 20))
            .overlay(
                RoundedRectangle(cornerRadius: 20)
                    .stroke(
                        LinearGradient(
                            colors: [
                                Color(hex: "#FCD34D").opacity(0.5),
                                Color(hex: "#F59E0B").opacity(0.3)
                            ],
                            startPoint: .topLeading,
                            endPoint: .bottomTrailing
                        ),
                        lineWidth: 2
                    )
            )
            .shadow(color: Color.black.opacity(0.5), radius: 30, x: 0, y: 20)
            .scaleEffect(isAnimating ? 1 : 0.8)
            .opacity(isAnimating ? 1 : 0)
            .offset(y: isAnimating ? 0 : 50)
        }
        .onAppear {
            withAnimation(.spring(response: 0.4, dampingFraction: 0.8)) {
                isAnimating = true
            }
        }
    }
    
    // MARK: - –ó–∞–≥–æ–ª–æ–≤–æ–∫
    private var consentHeader: some View {
        VStack(spacing: 10) {
            // –õ–æ–≥–æ —Å –ø—É–ª—å—Å–∞—Ü–∏–µ–π
            Text("üõ°Ô∏è")
                .font(.system(size: 48))
                .scaleEffect(isAnimating ? 1.05 : 1.0)
                .animation(
                    .easeInOut(duration: 2.0).repeatForever(autoreverses: true),
                    value: isAnimating
                )
            
            Text("ALADDIN")
                .font(.system(size: 24, weight: .bold))
                .foregroundColor(Color(hex: "#FCD34D"))
            
            Text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É\n—Å–µ–º–µ–π–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏!")
                .font(.system(size: 13))
                .foregroundColor(.white.opacity(0.8))
                .multilineTextAlignment(.center)
                .lineSpacing(4)
        }
    }
    
    // MARK: - ‚ùå –ß—Ç–æ –ù–ï —Å–æ–±–∏—Ä–∞–µ–º
    private var notCollectingSection: some View {
        VStack(alignment: .leading, spacing: 10) {
            Text("‚ùå –ú—ã –ù–ï —Å–æ–±–∏—Ä–∞–µ–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:")
                .font(.system(size: 13, weight: .semibold))
                .foregroundColor(Color(hex: "#FCD34D"))
            
            VStack(alignment: .leading, spacing: 6) {
                Text("‚Ä¢ –ò–º—è, email, —Ç–µ–ª–µ—Ñ–æ–Ω")
                Text("‚Ä¢ –ê–¥—Ä–µ—Å, –ø–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
                Text("‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–µ—â–µ–Ω–∏–π")
                Text("‚Ä¢ –õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
            }
            .font(.system(size: 12))
            .foregroundColor(.white.opacity(0.9))
        }
        .padding(15)
        .frame(maxWidth: .infinity, alignment: .leading)
        .background(
            Color.black.opacity(0.3)
                .overlay(
                    Color.white.opacity(0.03) // Glassmorphism
                )
        )
        .clipShape(RoundedRectangle(cornerRadius: 12))
    }
    
    // MARK: - ‚úÖ –í–æ–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
    private var militaryTechSection: some View {
        VStack(alignment: .leading, spacing: 8) {
            Text("‚úÖ –í–æ–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∑–∞—â–∏—Ç—ã:")
                .font(.system(size: 12, weight: .bold))
                .foregroundColor(Color(hex: "#10B981"))
            
            VStack(alignment: .leading, spacing: 4) {
                Text("üÜî –¢–æ–ª—å–∫–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π ID –Ω–æ–º–µ—Ä")
                Text("üîê AES-256-GCM (–±–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å–µ–π—Ñ –ê+)")
                Text("üîí ChaCha20-Poly1305 (–∑–∞—â–∏—Ç–∞ ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê)")
                Text("üõ°Ô∏è XChaCha20-Poly1305 (–∫–æ—Å–º–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å)")
                Text("üá∑üá∫ –†–æ—Å—Å–∏–π—Å–∫–∏–µ —Å–µ—Ä–≤–µ—Ä—ã (152-–§–ó –†–§)")
                Text("üìä –û–±–µ–∑–ª–∏—á–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
            }
            .font(.system(size: 11))
            .foregroundColor(.white.opacity(0.9))
        }
        .padding(12)
        .frame(maxWidth: .infinity, alignment: .leading)
        .background(
            LinearGradient(
                colors: [
                    Color(hex: "#10B981").opacity(0.15),
                    Color(hex: "#059669").opacity(0.10)
                ],
                startPoint: .leading,
                endPoint: .trailing
            )
            .overlay(
                Color.white.opacity(0.05) // Glassmorphism
            )
        )
        .clipShape(RoundedRectangle(cornerRadius: 12))
        .overlay(
            RoundedRectangle(cornerRadius: 12)
                .stroke(Color(hex: "#10B981"), lineWidth: 1)
        )
    }
    
    // MARK: - üõ°Ô∏è –ì–∞—Ä–∞–Ω—Ç–∏–∏
    private var guaranteesSection: some View {
        VStack(alignment: .leading, spacing: 8) {
            Text("üõ°Ô∏è –ù–∞—à–∏ –≥–∞—Ä–∞–Ω—Ç–∏–∏:")
                .font(.system(size: 11, weight: .bold))
                .foregroundColor(Color(hex: "#10B981"))
            
            VStack(alignment: .leading, spacing: 3) {
                Text("‚úÖ –ü–æ–ª–Ω–∞—è –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å")
                Text("‚úÖ –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ E2E (—Å–∫–≤–æ–∑–Ω–æ–µ)")
                Text("‚úÖ Zero-logs VPN (–Ω–µ—Ç –ª–æ–≥–æ–≤)")
                Text("‚úÖ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ 152-–§–ó")
            }
            .font(.system(size: 11))
            .foregroundColor(.white.opacity(0.9))
        }
        .padding(15)
        .frame(maxWidth: .infinity, alignment: .leading)
        .background(
            Color.black.opacity(0.2)
                .overlay(
                    Color.white.opacity(0.03) // Glassmorphism
                )
        )
        .clipShape(RoundedRectangle(cornerRadius: 12))
    }
    
    // MARK: - –ö–Ω–æ–ø–∫–∏
    private var buttonsSection: some View {
        HStack(spacing: 10) {
            // –ö–Ω–æ–ø–∫–∞ "–ü–æ–¥—Ä–æ–±–Ω–µ–µ"
            Button(action: {
                onReadMore()
            }) {
                Text("–ü–æ–¥—Ä–æ–±–Ω–µ–µ")
                    .font(.system(size: 14, weight: .semibold))
                    .foregroundColor(.white)
                    .frame(maxWidth: .infinity)
                    .frame(height: 48)
                    .background(
                        Color.white.opacity(0.1)
                            .overlay(
                                Color.white.opacity(0.05) // Glassmorphism
                            )
                    )
                    .clipShape(RoundedRectangle(cornerRadius: 12))
                    .overlay(
                        RoundedRectangle(cornerRadius: 12)
                            .stroke(Color.white.opacity(0.3), lineWidth: 1)
                    )
            }
            .buttonStyle(ScaleButtonStyle())
            
            // –ö–Ω–æ–ø–∫–∞ "–ü—Ä–∏–Ω—è—Ç—å ‚úì"
            Button(action: {
                acceptWithAnimation()
            }) {
                Text("–ü—Ä–∏–Ω—è—Ç—å ‚úì")
                    .font(.system(size: 14, weight: .bold))
                    .foregroundColor(.white)
                    .frame(maxWidth: .infinity)
                    .frame(height: 48)
                    .background(
                        LinearGradient(
                            colors: [
                                Color(hex: "#FCD34D"),
                                Color(hex: "#F59E0B"),
                                Color(hex: "#D97706")
                            ],
                            startPoint: .topLeading,
                            endPoint: .bottomTrailing
                        )
                        .overlay(
                            Color.white.opacity(0.1) // Glassmorphism shine
                        )
                    )
                    .clipShape(RoundedRectangle(cornerRadius: 12))
                    .shadow(color: Color(hex: "#F59E0B").opacity(0.5), radius: 15, x: 0, y: 5)
            }
            .buttonStyle(PulseButtonStyle())
        }
    }
    
    // MARK: - –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π —Ç–µ–∫—Å—Ç
    private var legalText: some View {
        VStack(spacing: 4) {
            Text("–ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É \"–ü—Ä–∏–Ω—è—Ç—å\", –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ,")
                .font(.system(size: 10))
                .foregroundColor(.white.opacity(0.7))
            
            (Text("—á—Ç–æ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω—ã –∏ —Å–æ–≥–ª–∞—Å–Ω—ã —Å ")
                .foregroundColor(.white.opacity(0.7)) +
             Text("–ü–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏")
                .foregroundColor(Color(hex: "#3B82F6"))
                .underline() +
             Text(" —Å–∏—Å—Ç–µ–º—ã —Å–µ–º–µ–π–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ ALADDIN –∏ –ü–æ–ª–∏—Ç–∏–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö VPN-—Å–µ—Ä–≤–∏—Å–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ ")
                .foregroundColor(.white.opacity(0.7)) +
             Text("–§–µ–¥–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∑–∞–∫–æ–Ω–∞ –æ—Ç 27.07.2006 ‚Ññ 152-–§–ó \"–û –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö\" (—Å—Ç–∞—Ç—å—è 9)")
                .foregroundColor(.white.opacity(0.7))
                .bold()
            )
            .font(.system(size: 10))
            .multilineTextAlignment(.center)
        }
        .padding(10)
        .background(
            Color.black.opacity(0.2)
                .overlay(
                    Color.white.opacity(0.02) // Glassmorphism
                )
        )
        .clipShape(RoundedRectangle(cornerRadius: 8))
    }
    
    // MARK: - Actions
    private func acceptWithAnimation() {
        withAnimation(.spring(response: 0.3)) {
            isAnimating = false
        }
        
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.3) {
            onAccept()
            isPresented = false
        }
    }
}

// MARK: - Button Styles
struct ScaleButtonStyle: ButtonStyle {
    func makeBody(configuration: Configuration) -> some View {
        configuration.label
            .scaleEffect(configuration.isPressed ? 0.95 : 1.0)
            .animation(.spring(response: 0.2), value: configuration.isPressed)
    }
}

struct PulseButtonStyle: ButtonStyle {
    func makeBody(configuration: Configuration) -> some View {
        configuration.label
            .scaleEffect(configuration.isPressed ? 1.05 : 1.0)
            .animation(.spring(response: 0.2), value: configuration.isPressed)
    }
}

// MARK: - Preview
struct ConsentModal_Previews: PreviewProvider {
    static var previews: some View {
        ConsentModal(
            isPresented: .constant(true),
            onAccept: {
                print("Consent accepted!")
            },
            onReadMore: {
                print("Read more tapped!")
            }
        )
    }
}



