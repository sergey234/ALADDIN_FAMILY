package family.aladdin.android.viewmodels

import androidx.lifecycle.ViewModel
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow

/**
 * üîî Notifications View Model
 * –õ–æ–≥–∏–∫–∞ –¥–ª—è —ç–∫—Ä–∞–Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 * –ò—Å—Ç–æ—á–Ω–∏–∫: iOS NotificationsViewModel.swift
 */

data class AppNotificationItem(
    val id: String,
    val icon: String,
    val title: String,
    val message: String,
    val time: String,
    val isRead: Boolean,
    val type: NotificationType
)

enum class NotificationType {
    THREAT, SUCCESS, INFO, WARNING
}

class NotificationsViewModel : ViewModel() {
    
    // MARK: - State
    
    private val _notifications = MutableStateFlow<List<AppNotificationItem>>(emptyList())
    val notifications: StateFlow<List<AppNotificationItem>> = _notifications
    
    private val _unreadCount = MutableStateFlow(0)
    val unreadCount: StateFlow<Int> = _unreadCount
    
    // MARK: - Init
    
    init {
        loadNotifications()
    }
    
    // MARK: - Public Methods
    
    /**
     * –ó–∞–≥—Ä—É–∑–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    fun loadNotifications() {
        _notifications.value = listOf(
            AppNotificationItem(
                id = "1",
                icon = "üõ°Ô∏è",
                title = "–£–≥—Ä–æ–∑–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞",
                message = "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã–π —Å–∞–π—Ç",
                time = "5 –º–∏–Ω –Ω–∞–∑–∞–¥",
                isRead = false,
                type = NotificationType.THREAT
            ),
            AppNotificationItem(
                id = "2",
                icon = "‚úÖ",
                title = "VPN –ø–æ–¥–∫–ª—é—á—ë–Ω",
                message = "–í–∞—à–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞—â–∏—â–µ–Ω–æ",
                time = "1 —á–∞—Å –Ω–∞–∑–∞–¥",
                isRead = true,
                type = NotificationType.SUCCESS
            ),
            AppNotificationItem(
                id = "3",
                icon = "‚ö†Ô∏è",
                title = "–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
                message = "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞",
                time = "2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥",
                isRead = true,
                type = NotificationType.WARNING
            ),
            AppNotificationItem(
                id = "4",
                icon = "‚ÑπÔ∏è",
                title = "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ",
                message = "–î–æ—Å—Ç—É–ø–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è ALADDIN",
                time = "–í—á–µ—Ä–∞",
                isRead = true,
                type = NotificationType.INFO
            )
        )
        updateUnreadCount()
    }
    
    /**
     * –û—Ç–º–µ—Ç–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
     */
    fun markAsRead(notificationId: String) {
        _notifications.value = _notifications.value.map {
            if (it.id == notificationId) {
                it.copy(isRead = true)
            } else {
                it
            }
        }
        updateUnreadCount()
    }
    
    /**
     * –û—Ç–º–µ—Ç–∏—Ç—å –≤—Å–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
     */
    fun markAllAsRead() {
        _notifications.value = _notifications.value.map { it.copy(isRead = true) }
        updateUnreadCount()
    }
    
    /**
     * –£–¥–∞–ª–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
     */
    fun deleteNotification(notificationId: String) {
        _notifications.value = _notifications.value.filter { it.id != notificationId }
        updateUnreadCount()
    }
    
    /**
     * –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    fun clearAll() {
        _notifications.value = emptyList()
        _unreadCount.value = 0
    }
    
    // MARK: - Private Methods
    
    private fun updateUnreadCount() {
        _unreadCount.value = _notifications.value.count { !it.isRead }
    }
}



