package family.aladdin.android.viewmodels

import android.util.Log
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.setValue
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import family.aladdin.android.config.AppConfig
import family.aladdin.android.models.MerchantInfo
import family.aladdin.android.network.RetrofitClient
import kotlinx.coroutines.Job
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import java.util.*

/**
 * üí≥ Payment QR View Model
 * –õ–æ–≥–∏–∫–∞ –¥–ª—è —ç–∫—Ä–∞–Ω–∞ QR-–æ–ø–ª–∞—Ç—ã
 */

class PaymentQRViewModel : ViewModel() {
    
    // MARK: - State
    
    var isLoading by mutableStateOf(false)
        private set
    
    var errorMessage by mutableStateOf<String?>(null)
        private set
    
    var showErrorDialog by mutableStateOf(false)
    
    var showSuccessDialog by mutableStateOf(false)
    
    var paymentId by mutableStateOf<String?>(null)
        private set
    
    var qrCodeImageSBP by mutableStateOf<String?>(null)
        private set
    
    var qrCodeImageSberPay by mutableStateOf<String?>(null)
        private set
    
    var qrCodeImageUniversal by mutableStateOf<String?>(null)
        private set
    
    var expiresAt by mutableStateOf<Long?>(null)
        private set
    
    var merchantInfo by mutableStateOf<MerchantInfo?>(null)
        private set
    
    private var autoCheckJob: Job? = null
    
    // MARK: - Create Payment
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ QR-–∫–æ–¥–æ–≤
     */
    fun createPayment(tariffTitle: String, tariffPrice: String) {
        viewModelScope.launch {
            isLoading = true
            errorMessage = null
            
            try {
                // –ü–∞—Ä—Å–∏–º —Å—É–º–º—É –∏–∑ —Å—Ç—Ä–æ–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "590 ‚ÇΩ" ‚Üí 590.0)
                val amount = tariffPrice
                    .replace(Regex("[^0-9]"), "")
                    .toDoubleOrNull() ?: run {
                        errorMessage = "–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—É–º–º—ã –ø–ª–∞—Ç–µ–∂–∞"
                        showErrorDialog = true
                        isLoading = false
                        return@launch
                    }
                
                // –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å
                val request = mapOf(
                    "family_id" to getFamilyId(),
                    "tariff" to tariffTitle,
                    "amount" to amount,
                    "payment_method" to "sbp"
                )
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ backend
                val response = RetrofitClient.apiService.createQRPayment(
                    token = "Bearer ${AppConfig.apiKey}",
                    request = request
                )
                
                if (response.success) {
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞
                    paymentId = response.payment_id
                    
                    response.qr_codes?.let { qrCodes ->
                        qrCodeImageSBP = qrCodes.sbp
                        qrCodeImageSberPay = qrCodes.sberpay
                        qrCodeImageUniversal = qrCodes.universal
                    }
                    
                    response.expires_at?.let { _ ->
                        // –ü–∞—Ä—Å–∏–º ISO 8601 –¥–∞—Ç—É
                        try {
                            val calendar = Calendar.getInstance()
                            // –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–µ–Ω DateTimeFormatter)
                            expiresAt = calendar.timeInMillis + (24 * 60 * 60 * 1000) // 24 —á–∞—Å–∞
                        } catch (e: Exception) {
                            Log.e("PaymentQR", "Error parsing expires_at: $e")
                        }
                    }
                    
                    response.merchant_info?.let { merchantData ->
                        merchantInfo = MerchantInfo(
                            name = merchantData.name,
                            card = merchantData.card,
                            phone = merchantData.phone
                        )
                    }
                    
                    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫—É
                    startAutoCheck()
                    
                    Log.d("PaymentQR", "‚úÖ QR-–∫–æ–¥—ã –ø–æ–ª—É—á–µ–Ω—ã: payment_id=${response.payment_id}")
                } else {
                    errorMessage = response.error ?: "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞"
                    showErrorDialog = true
                }
                
            } catch (e: Exception) {
                errorMessage = "–û—à–∏–±–∫–∞: ${e.message}"
                showErrorDialog = true
                Log.e("PaymentQR", "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: $e")
            } finally {
                isLoading = false
            }
        }
    }
    
    // MARK: - Check Payment Status
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã
     */
    fun checkPaymentStatus() {
        val currentPaymentId = paymentId ?: run {
            errorMessage = "ID –ø–ª–∞—Ç–µ–∂–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"
            showErrorDialog = true
            return
        }
        
        viewModelScope.launch {
            isLoading = true
            errorMessage = null
            
            try {
                val response = RetrofitClient.apiService.checkQRPaymentStatus(
                    token = "Bearer ${AppConfig.apiKey}",
                    paymentId = currentPaymentId
                )
                
                Log.d("PaymentQR", "‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: ${response.status}")
                
                when (response.status) {
                    "completed" -> {
                        // –ü–ª–∞—Ç–µ–∂ –∑–∞–≤–µ—Ä—à–µ–Ω!
                        showSuccessDialog = true
                        stopAutoCheck()
                        
                        // TODO: Firebase Analytics —Å–æ–±—ã—Ç–∏–µ
                        Log.d("PaymentQR", "‚úÖ –ü–ª–∞—Ç–µ–∂ –∑–∞–≤–µ—Ä—à–µ–Ω!")
                    }
                    "expired" -> {
                        errorMessage = "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø–ª–∞—Ç–µ–∂–∞ –∏—Å—Ç–µ–∫"
                        showErrorDialog = true
                        stopAutoCheck()
                    }
                    else -> {
                        // –ü–ª–∞—Ç–µ–∂ –µ—â–µ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏
                        Log.d("PaymentQR", "‚è≥ –ü–ª–∞—Ç–µ–∂ –æ–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã")
                    }
                }
                
            } catch (e: Exception) {
                errorMessage = "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: ${e.message}"
                showErrorDialog = true
                Log.e("PaymentQR", "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: $e")
            } finally {
                isLoading = false
            }
        }
    }
    
    // MARK: - Auto Check
    
    /**
     * –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
     */
    private fun startAutoCheck() {
        autoCheckJob = viewModelScope.launch {
            while (true) {
                delay(30000) // 30 —Å–µ–∫—É–Ω–¥
                checkPaymentStatus()
            }
        }
    }
    
    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
     */
    private fun stopAutoCheck() {
        autoCheckJob?.cancel()
        autoCheckJob = null
    }
    
    // MARK: - Helpers
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ ID —Å–µ–º—å–∏ (–∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ)
     */
    private fun getFamilyId(): String {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ –±—É–¥–µ—Ç ID –∏–∑ SharedPreferences
        // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º UUID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        return UUID.randomUUID().toString()
    }
    
    // MARK: - Cleanup
    
    override fun onCleared() {
        super.onCleared()
        stopAutoCheck()
    }
}

// MARK: - API Response Models

data class CreateQRPaymentResponse(
    val success: Boolean,
    val payment_id: String,
    val qr_codes: QRCodes?,
    val merchant_info: MerchantInfoAPI?,
    val expires_at: String?,
    val error: String?
)

data class QRCodes(
    val sbp: String?,
    val sberpay: String?,
    val universal: String?
)

data class MerchantInfoAPI(
    val name: String,
    val card: String,
    val phone: String
)

data class CheckQRPaymentStatusResponse(
    val success: Boolean,
    val payment_id: String,
    val status: String,  // "pending", "completed", "expired", "cancelled"
    val amount: Double?,
    val message: String?,
    val error: String?
)



