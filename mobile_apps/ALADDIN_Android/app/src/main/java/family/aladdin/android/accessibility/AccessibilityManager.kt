package family.aladdin.android.accessibility

import android.content.Context
import android.view.accessibility.AccessibilityManager as SystemAccessibilityManager
import androidx.compose.foundation.layout.sizeIn
import androidx.compose.runtime.Composable
import androidx.compose.runtime.remember
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.semantics.contentDescription
import androidx.compose.ui.semantics.semantics
import androidx.compose.ui.unit.dp
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow

/**
 * ü¶Ø Accessibility Manager
 * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å—é –¥–ª—è –ª—é–¥–µ–π —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏
 * TalkBack, Scalable Text, Color Blind Mode, Touch Targets
 */

class AccessibilityManager(private val context: Context) {
    
    // MARK: - Properties
    
    private val systemAccessibilityManager = context.getSystemService(Context.ACCESSIBILITY_SERVICE) as SystemAccessibilityManager
    
    private val _isTalkBackEnabled = MutableStateFlow(false)
    val isTalkBackEnabled: StateFlow<Boolean> = _isTalkBackEnabled.asStateFlow()
    
    private val _colorBlindMode = MutableStateFlow(ColorBlindMode.NONE)
    val colorBlindMode: StateFlow<ColorBlindMode> = _colorBlindMode.asStateFlow()
    
    // MARK: - Color Blind Mode
    
    enum class ColorBlindMode(val displayName: String, val icon: String) {
        NONE("–û–±—ã—á–Ω—ã–π", "üëÅÔ∏è"),
        PROTANOPIA("–ü—Ä–æ—Ç–∞–Ω–æ–ø–∏—è (–∫—Ä–∞—Å–Ω—ã–π-–∑–µ–ª—ë–Ω—ã–π)", "üî¥"),
        DEUTERANOPIA("–î–µ–π—Ç–µ—Ä–∞–Ω–æ–ø–∏—è (–∫—Ä–∞—Å–Ω—ã–π-–∑–µ–ª—ë–Ω—ã–π)", "üü¢"),
        TRITANOPIA("–¢—Ä–∏—Ç–∞–Ω–æ–ø–∏—è (—Å–∏–Ω–µ-–∂—ë–ª—Ç—ã–π)", "üîµ"),
        MONOCHROMACY("–ú–æ–Ω–æ—Ö—Ä–æ–º–∞–∑–∏—è (—á/–±)", "‚ö´")
    }
    
    // MARK: - Init
    
    init {
        checkTalkBackStatus()
    }
    
    // MARK: - Check TalkBack
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å TalkBack
     */
    private fun checkTalkBackStatus() {
        _isTalkBackEnabled.value = systemAccessibilityManager.isEnabled &&
            systemAccessibilityManager.isTouchExplorationEnabled
        
        println("ü¶Ø TalkBack: ${if (_isTalkBackEnabled.value) "ON" else "OFF"}")
    }
    
    /**
     * TalkBack –≤–∫–ª—é—á—ë–Ω?
     */
    fun isTalkBackRunning(): Boolean {
        return _isTalkBackEnabled.value
    }
    
    // MARK: - Color Blind Mode
    
    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∂–∏–º –¥–∞–ª—å—Ç–æ–Ω–∏–∑–º–∞
     */
    fun setColorBlindMode(mode: ColorBlindMode) {
        _colorBlindMode.value = mode
        
        // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ SharedPreferences
        val prefs = context.getSharedPreferences("aladdin_prefs", Context.MODE_PRIVATE)
        prefs.edit().putString("colorBlindMode", mode.name).apply()
        
        println("üëÅÔ∏è Color Blind Mode: ${mode.displayName}")
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —Ä–µ–∂–∏–º
     */
    fun getSavedColorBlindMode(): ColorBlindMode {
        val prefs = context.getSharedPreferences("aladdin_prefs", Context.MODE_PRIVATE)
        val modeName = prefs.getString("colorBlindMode", ColorBlindMode.NONE.name)
        return try {
            ColorBlindMode.valueOf(modeName ?: ColorBlindMode.NONE.name)
        } catch (e: Exception) {
            ColorBlindMode.NONE
        }
    }
    
    // MARK: - Touch Target Validation
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–ª—å—à–æ–π –¥–ª—è –∫–∞—Å–∞–Ω–∏—è
     * –ú–∏–Ω–∏–º—É–º 48dp —Å–æ–≥–ª–∞—Å–Ω–æ Material Design
     */
    fun isValidTouchTarget(sizeDp: Float): Boolean {
        return sizeDp >= 48f
    }
    
    /**
     * –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∫–∞—Å–∞–Ω–∏—è
     */
    companion object {
        const val MIN_TOUCH_TARGET_SIZE_DP = 48f
        const val RECOMMENDED_TOUCH_TARGET_SIZE_DP = 56f
    }
}

// MARK: - Composable Helpers

/**
 * Composable –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è AccessibilityManager
 */
@Composable
fun rememberAccessibilityManager(): AccessibilityManager {
    val context = LocalContext.current
    return remember { AccessibilityManager(context) }
}

/**
 * Modifier –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è content description (–¥–ª—è TalkBack)
 */
fun Modifier.accessibilityDescription(description: String): Modifier {
    return this.semantics {
        contentDescription = description
    }
}

/**
 * Modifier –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ touch target
 */
fun Modifier.minimumTouchTarget(): Modifier {
    return this.sizeIn(
        minWidth = AccessibilityManager.MIN_TOUCH_TARGET_SIZE_DP.dp,
        minHeight = AccessibilityManager.MIN_TOUCH_TARGET_SIZE_DP.dp
    )
}



