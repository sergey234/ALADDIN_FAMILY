package family.aladdin.android.ui.screens

import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Brush
import androidx.compose.ui.unit.dp
import family.aladdin.android.ui.components.navigation.ALADDINTopBar
import family.aladdin.android.ui.theme.*

/// üéÆ Games Parental Control Screen
/// –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
/// –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∏–∑–∞–π–Ω–∞: /mobile/wireframes/14c_games_parental_control.html
@Composable
fun GamesParentalControlScreen(
    navController: androidx.navigation.NavHostController,
    onBackClick: () -> Unit = {}
) {
    var isWheelEnabled by remember { mutableStateOf(true) }
    var isTournamentEnabled by remember { mutableStateOf(true) }
    var isUniverseEnabled by remember { mutableStateOf(true) }
    var wheelFrequency by remember { mutableStateOf(1f) }
    var prizeSector1 by remember { mutableStateOf(5f) }
    var prizeSector2 by remember { mutableStateOf(10f) }
    var prizeSector3 by remember { mutableStateOf(20f) }
    var prizeSector4 by remember { mutableStateOf(50f) }
    var prizeSector5 by remember { mutableStateOf(100f) }
    var prizeSector6 by remember { mutableStateOf(500f) }
    
    Box(
        modifier = Modifier
            .fillMaxSize()
            .background(Brush.linearGradient(listOf(GradientStart, GradientMiddle, GradientEnd)))
    ) {
        Column {
            ALADDINTopBar(
                title = "–£–ü–†–ê–í–õ–ï–ù–ò–ï –ò–ì–†–ê–ú–ò",
                subtitle = "–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å",
                onBackClick = { navController.popBackStack() }
            )
            
            Column(
                modifier = Modifier
                    .verticalScroll(rememberScrollState())
                    .padding(top = Spacing.M),
                verticalArrangement = Arrangement.spacedBy(Spacing.L)
            ) {
                // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                InfoCard()
                
                // –ö–æ–ª–µ—Å–æ —É–¥–∞—á–∏
                WheelGameCard(
                    isEnabled = isWheelEnabled,
                    onToggle = { isWheelEnabled = it },
                    frequency = wheelFrequency,
                    onFrequencyChange = { wheelFrequency = it },
                    prizes = listOf(prizeSector1, prizeSector2, prizeSector3, prizeSector4, prizeSector5, prizeSector6),
                    onPrizeChange = { index, value ->
                        when (index) {
                            0 -> prizeSector1 = value
                            1 -> prizeSector2 = value
                            2 -> prizeSector3 = value
                            3 -> prizeSector4 = value
                            4 -> prizeSector5 = value
                            5 -> prizeSector6 = value
                        }
                    }
                )
                
                // –°–µ–º–µ–π–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä
                GameCard(
                    icon = "üèÜ",
                    title = "–°–µ–º–µ–π–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä",
                    description = "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ –≤—Å–µ–π —Å–µ–º—å–∏. 5 —Ç–∏–ø–æ–≤ —Ç—É—Ä–Ω–∏—Ä–æ–≤. –ü—Ä–∏–∑—ã: ü•á +50 ‚Ä¢ ü•à +30 ‚Ä¢ ü•â +20 ü¶Ñ",
                    isEnabled = isTournamentEnabled,
                    onToggle = { isTournamentEnabled = it }
                )
                
                // –ï–¥–∏–Ω–æ—Ä–æ–≥-–ø–∏—Ç–æ–º–µ—Ü (–≤—Å–µ–≥–¥–∞ –í–ö–õ)
                PetGameCard()
                
                // –ï–¥–∏–Ω–æ—Ä–æ–≥-–≤—Å–µ–ª–µ–Ω–Ω–∞—è
                GameCard(
                    icon = "üå≥",
                    title = "–ï–¥–∏–Ω–æ—Ä–æ–≥-–≤—Å–µ–ª–µ–Ω–Ω–∞—è",
                    description = "–°–∞–¥ –µ–¥–∏–Ω–æ—Ä–æ–≥–æ–≤, –∫–æ–ª–ª–µ–∫—Ü–∏—è 10 –≤–∏–¥–æ–≤, —Å—Ç–æ—Ä–∏—Ç–µ–ª–ª–∏–Ω–≥ 5 –≥–ª–∞–≤.",
                    isEnabled = isUniverseEnabled,
                    onToggle = { isUniverseEnabled = it }
                )
                
                // –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
                QuickActionsSection(
                    onDisableAll = {
                        isWheelEnabled = false
                        isTournamentEnabled = false
                        isUniverseEnabled = false
                    },
                    onEnableAll = {
                        isWheelEnabled = true
                        isTournamentEnabled = true
                        isUniverseEnabled = true
                    }
                )
                
                // –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                CurrentSettingsCard(
                    isWheelEnabled, wheelFrequency.toInt(),
                    listOf(prizeSector1.toInt(), prizeSector2.toInt(), prizeSector3.toInt(), prizeSector4.toInt(), prizeSector5.toInt(), prizeSector6.toInt()),
                    isTournamentEnabled, isUniverseEnabled
                )
                
                // –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
                SaveButton(onBackClick)
                
                Spacer(modifier = Modifier.height(Spacing.XXL))
            }
        }
    }
}

@Composable
private fun InfoCard() {
    Surface(
        modifier = Modifier
            .fillMaxWidth()
            .padding(horizontal = Spacing.ScreenPadding),
        shape = RoundedCornerShape(CornerRadius.Medium),
        color = PrimaryBlue.copy(alpha = 0.15f)
    ) {
        Row(
            modifier = Modifier.padding(Spacing.M),
            horizontalArrangement = Arrangement.spacedBy(Spacing.M)
        ) {
            Text("üí°", style = MaterialTheme.typography.titleLarge)
            Column {
                Text("–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å –∏–≥—Ä", style = MaterialTheme.typography.titleMedium, color = TextPrimary)
                Text("–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–∫–ª—é—á–∞—Ç—å/–æ—Ç–∫–ª—é—á–∞—Ç—å –∏–≥—Ä–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã. –ï–¥–∏–Ω–æ—Ä–æ–≥-–ø–∏—Ç–æ–º–µ—Ü –≤—Å–µ–≥–¥–∞ –∞–∫—Ç–∏–≤–µ–Ω! ü¶Ñ", style = MaterialTheme.typography.bodySmall, color = TextSecondary)
            }
        }
    }
}

@Composable
private fun WheelGameCard(
    isEnabled: Boolean,
    onToggle: (Boolean) -> Unit,
    frequency: Float,
    onFrequencyChange: (Float) -> Unit,
    prizes: List<Float>,
    onPrizeChange: (Int, Float) -> Unit
) {
    Surface(
        modifier = Modifier
            .fillMaxWidth()
            .padding(horizontal = Spacing.ScreenPadding),
        shape = RoundedCornerShape(CornerRadius.Large),
        color = BackgroundMedium.copy(alpha = if (isEnabled) 0.5f else 0.3f)
    ) {
        Column(
            modifier = Modifier.padding(Spacing.M),
            verticalArrangement = Arrangement.spacedBy(Spacing.M)
        ) {
            Row(horizontalArrangement = Arrangement.SpaceBetween, verticalAlignment = Alignment.CenterVertically) {
                Row(horizontalArrangement = Arrangement.spacedBy(Spacing.XS)) {
                    Text("üé∞", style = MaterialTheme.typography.titleLarge)
                    Text("–ö–æ–ª–µ—Å–æ —É–¥–∞—á–∏", style = MaterialTheme.typography.titleMedium, color = TextPrimary)
                }
                
                Switch(checked = isEnabled, onCheckedChange = onToggle)
            }
            
            Text("–†–µ–±—ë–Ω–æ–∫ –∫—Ä—É—Ç–∏—Ç –∫–æ–ª–µ—Å–æ –∏ –ø–æ–ª—É—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–∏–∑ –æ—Ç 5 –¥–æ 500 ü¶Ñ.", style = MaterialTheme.typography.labelSmall, color = TextSecondary)
            
            if (isEnabled) {
                Column(verticalArrangement = Arrangement.spacedBy(Spacing.S)) {
                    Text("–ß–∞—Å—Ç–æ—Ç–∞ –≤—Ä–∞—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å:", style = MaterialTheme.typography.bodySmall, color = TextPrimary)
                    
                    Slider(
                        value = frequency,
                        onValueChange = onFrequencyChange,
                        valueRange = 1f..7f,
                        steps = 5,
                        colors = SliderDefaults.colors(thumbColor = SuccessGreen, activeTrackColor = SuccessGreen)
                    )
                    
                    Row(horizontalArrangement = Arrangement.SpaceBetween) {
                        Text("1 —Ä–∞–∑", style = MaterialTheme.typography.labelSmall, color = TextSecondary)
                        Text("${frequency.toInt()} —Ä–∞–∑ –≤ –¥–µ–Ω—å", style = MaterialTheme.typography.bodySmall.copy(fontWeight = androidx.compose.ui.text.font.FontWeight.SemiBold), color = SuccessGreen)
                        Text("7 —Ä–∞–∑", style = MaterialTheme.typography.labelSmall, color = TextSecondary)
                    }
                    
                    Text("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–∑–æ–≤ –Ω–∞ –±–∞—Ä–∞–±–∞–Ω–µ:", style = MaterialTheme.typography.bodySmall, color = TextPrimary)
                    
                    PrizeSlider(1, "40%", prizes[0], 1f..50f) { onPrizeChange(0, it) }
                    PrizeSlider(2, "30%", prizes[1], 5f..100f) { onPrizeChange(1, it) }
                    PrizeSlider(3, "15%", prizes[2], 10f..150f) { onPrizeChange(2, it) }
                    PrizeSlider(4, "10%", prizes[3], 20f..200f) { onPrizeChange(3, it) }
                    PrizeSlider(5, "4%", prizes[4], 50f..300f) { onPrizeChange(4, it) }
                    PrizeSlider(6, "1% –î–ñ–ï–ö–ü–û–¢", prizes[5], 100f..1000f) { onPrizeChange(5, it) }
                }
            }
        }
    }
}

@Composable
private fun PrizeSlider(sector: Int, chance: String, value: Float, range: ClosedFloatingPointRange<Float>, onValueChange: (Float) -> Unit) {
    Column {
        Row(horizontalArrangement = Arrangement.SpaceBetween, modifier = Modifier.fillMaxWidth()) {
            Text("${sector}Ô∏è‚É£ –°–µ–∫—Ç–æ—Ä $sector ($chance):", style = MaterialTheme.typography.labelSmall, color = TextSecondary)
            Text("${value.toInt()} ü¶Ñ", style = MaterialTheme.typography.bodySmall.copy(fontWeight = androidx.compose.ui.text.font.FontWeight.Bold), color = androidx.compose.ui.graphics.Color(0xFFFFD700))
        }
        Slider(value = value, onValueChange = onValueChange, valueRange = range, colors = SliderDefaults.colors(thumbColor = androidx.compose.ui.graphics.Color(0xFFFFD700), activeTrackColor = androidx.compose.ui.graphics.Color(0xFFFFD700)))
    }
}

@Composable
private fun GameCard(icon: String, title: String, description: String, isEnabled: Boolean, onToggle: (Boolean) -> Unit) {
    Surface(
        modifier = Modifier
            .fillMaxWidth()
            .padding(horizontal = Spacing.ScreenPadding),
        shape = RoundedCornerShape(CornerRadius.Large),
        color = BackgroundMedium.copy(alpha = if (isEnabled) 0.5f else 0.3f)
    ) {
        Column(
            modifier = Modifier.padding(Spacing.M),
            verticalArrangement = Arrangement.spacedBy(Spacing.M)
        ) {
            Row(horizontalArrangement = Arrangement.SpaceBetween) {
                Row(horizontalArrangement = Arrangement.spacedBy(Spacing.XS)) {
                    Text(icon, style = MaterialTheme.typography.titleLarge)
                    Text(title, style = MaterialTheme.typography.titleMedium, color = TextPrimary)
                }
                Switch(checked = isEnabled, onCheckedChange = onToggle)
            }
            Text(description, style = MaterialTheme.typography.labelSmall, color = TextSecondary)
        }
    }
}

@Composable
private fun PetGameCard() {
    Surface(
        modifier = Modifier
            .fillMaxWidth()
            .padding(horizontal = Spacing.ScreenPadding),
        shape = RoundedCornerShape(CornerRadius.Large),
        color = UnicornPurple.copy(alpha = 0.1f),
        border = androidx.compose.foundation.BorderStroke(1.dp, UnicornPurple)
    ) {
        Column(
            modifier = Modifier.padding(Spacing.M),
            verticalArrangement = Arrangement.spacedBy(Spacing.M)
        ) {
            Row(horizontalArrangement = Arrangement.SpaceBetween) {
                Row(horizontalArrangement = Arrangement.spacedBy(Spacing.XS)) {
                    Text("ü¶Ñ", style = MaterialTheme.typography.titleLarge)
                    Text("–ï–¥–∏–Ω–æ—Ä–æ–≥-–ø–∏—Ç–æ–º–µ—Ü", style = MaterialTheme.typography.titleMedium, color = TextPrimary)
                }
                
                Text("üîí –í–°–ï–ì–î–ê –í–ö–õ", style = MaterialTheme.typography.labelSmall, color = UnicornPurple, modifier = Modifier.padding(horizontal = 10.dp, vertical = 5.dp).background(UnicornPurple.copy(alpha = 0.3f), RoundedCornerShape(20.dp)))
            }
            Text("–¢–∞–º–∞–≥–æ—á–∏ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏ ‚ù§Ô∏èüçé‚≠êüòä. –ù–µ–ª—å–∑—è –æ—Ç–∫–ª—é—á–∏—Ç—å - –æ—Å–Ω–æ–≤–∞ –º–æ—Ç–∏–≤–∞—Ü–∏–∏!", style = MaterialTheme.typography.labelSmall, color = TextSecondary)
        }
    }
}

@Composable
private fun QuickActionsSection(onDisableAll: () -> Unit, onEnableAll: () -> Unit) {
    Column(
        modifier = Modifier.padding(horizontal = Spacing.ScreenPadding),
        verticalArrangement = Arrangement.spacedBy(Spacing.S)
    ) {
        Surface(
            modifier = Modifier.fillMaxWidth(),
            shape = RoundedCornerShape(CornerRadius.Medium),
            color = DangerRed.copy(alpha = 0.2f),
            border = androidx.compose.foundation.BorderStroke(2.dp, DangerRed),
            onClick = onDisableAll
        ) {
            Text("–û—Ç–∫–ª—é—á–∏—Ç—å –≤—Å–µ (–∫—Ä–æ–º–µ ü¶Ñ)", style = MaterialTheme.typography.titleMedium.copy(fontWeight = androidx.compose.ui.text.font.FontWeight.SemiBold), color = DangerRed, modifier = Modifier.padding(Spacing.M))
        }
        
        Surface(
            modifier = Modifier.fillMaxWidth(),
            shape = RoundedCornerShape(CornerRadius.Medium),
            color = SuccessGreen.copy(alpha = 0.2f),
            border = androidx.compose.foundation.BorderStroke(2.dp, SuccessGreen),
            onClick = onEnableAll
        ) {
            Text("–í–∫–ª—é—á–∏—Ç—å –≤—Å–µ", style = MaterialTheme.typography.titleMedium.copy(fontWeight = androidx.compose.ui.text.font.FontWeight.SemiBold), color = SuccessGreen, modifier = Modifier.padding(Spacing.M))
        }
    }
}

@Composable
private fun CurrentSettingsCard(
    isWheelEnabled: Boolean, wheelFrequency: Int, prizes: List<Int>,
    isTournamentEnabled: Boolean, isUniverseEnabled: Boolean
) {
    Surface(
        modifier = Modifier
            .fillMaxWidth()
            .padding(horizontal = Spacing.ScreenPadding),
        shape = RoundedCornerShape(CornerRadius.Medium),
        color = BackgroundMedium.copy(alpha = 0.5f)
    ) {
        Column(modifier = Modifier.padding(Spacing.M)) {
            Text("üìä –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:", style = MaterialTheme.typography.titleMedium, color = TextPrimary)
            Spacer(modifier = Modifier.height(Spacing.S))
            
            if (isWheelEnabled) {
                Text("‚Ä¢ –ö–æ–ª–µ—Å–æ —É–¥–∞—á–∏: ‚úÖ –í–∫–ª—é—á–µ–Ω–æ ($wheelFrequency —Ä–∞–∑ –≤ –¥–µ–Ω—å)", style = MaterialTheme.typography.labelSmall, color = TextSecondary)
                Text("  –ü—Ä–∏–∑—ã: 1Ô∏è‚É£${prizes[0]} ‚Ä¢ 2Ô∏è‚É£${prizes[1]} ‚Ä¢ 3Ô∏è‚É£${prizes[2]} ‚Ä¢ 4Ô∏è‚É£${prizes[3]} ‚Ä¢ 5Ô∏è‚É£${prizes[4]} ‚Ä¢ 6Ô∏è‚É£${prizes[5]} ü¶Ñ", style = MaterialTheme.typography.labelSmall, color = TextSecondary)
            } else {
                Text("‚Ä¢ –ö–æ–ª–µ—Å–æ —É–¥–∞—á–∏: ‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ", style = MaterialTheme.typography.labelSmall, color = TextSecondary)
            }
            
            Text(if (isTournamentEnabled) "‚Ä¢ –°–µ–º–µ–π–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä: ‚úÖ –í–∫–ª—é—á–µ–Ω" else "‚Ä¢ –°–µ–º–µ–π–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä: ‚ùå –û—Ç–∫–ª—é—á–µ–Ω", style = MaterialTheme.typography.labelSmall, color = TextSecondary)
            Text("‚Ä¢ –ï–¥–∏–Ω–æ—Ä–æ–≥-–ø–∏—Ç–æ–º–µ—Ü: üîí –í—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–µ–Ω", style = MaterialTheme.typography.labelSmall, color = TextSecondary)
            Text(if (isUniverseEnabled) "‚Ä¢ –ï–¥–∏–Ω–æ—Ä–æ–≥-–≤—Å–µ–ª–µ–Ω–Ω–∞—è: ‚úÖ –í–∫–ª—é—á–µ–Ω–∞" else "‚Ä¢ –ï–¥–∏–Ω–æ—Ä–æ–≥-–≤—Å–µ–ª–µ–Ω–Ω–∞—è: ‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞", style = MaterialTheme.typography.labelSmall, color = TextSecondary)
        }
    }
}

@Composable
private fun SaveButton(onSave: () -> Unit) {
    Surface(
        modifier = Modifier
            .fillMaxWidth()
            .padding(horizontal = Spacing.ScreenPadding),
        shape = RoundedCornerShape(CornerRadius.Large),
        color = SuccessGreen,
        onClick = onSave
    ) {
        Text("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", style = MaterialTheme.typography.titleMedium.copy(fontWeight = androidx.compose.ui.text.font.FontWeight.SemiBold), color = TextPrimary, modifier = Modifier.padding(Spacing.M))
    }
}



