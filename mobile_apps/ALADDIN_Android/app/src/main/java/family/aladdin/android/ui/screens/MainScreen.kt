package family.aladdin.android.ui.screens

import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Notifications
import androidx.compose.material.icons.filled.Settings
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Brush
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.unit.dp
import androidx.navigation.NavHostController
import family.aladdin.android.ui.components.buttons.PrimaryButton
import family.aladdin.android.ui.components.cards.FunctionCard
import family.aladdin.android.ui.components.cards.StatusType
import family.aladdin.android.ui.components.navigation.ALADDINTopBar
import family.aladdin.android.ui.components.navigation.TopBarAction
import family.aladdin.android.ui.theme.*

/**
 * üè† Main Screen
 * –ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω ALADDIN
 * –ò—Å—Ç–æ—á–Ω–∏–∫: iOS MainScreen.swift –∏ 01_main_screen.html
 */

@Composable
fun MainScreen(navController: NavHostController) {
    var isVPNEnabled by remember { mutableStateOf(true) }
    var selectedTab by remember { mutableStateOf(0) }
    
    // TODO: Use navController for navigation
    // TODO: Use selectedTab for tab switching
    
    Box(
        modifier = Modifier
            .fillMaxSize()
            .background(
                brush = Brush.linearGradient(
                    colors = listOf(
                        GradientStart,
                        GradientMiddle,
                        GradientEnd
                    )
                )
            )
    ) {
        Column(modifier = Modifier.fillMaxSize()) {
            // –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å
            ALADDINTopBar(
                title = "ALADDIN",
                subtitle = "AI –ó–∞—â–∏—Ç–∞ –°–µ–º—å–∏",
                actions = {
                    TopBarAction(
                        icon = Icons.Default.Notifications,
                        onClick = { 
                            // TODO: Navigate to notifications
                        }
                    )
                    TopBarAction(
                        icon = Icons.Default.Settings,
                        onClick = { 
                            // TODO: Navigate to settings
                        }
                    )
                }
            )
            
            // –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
            Column(
                modifier = Modifier
                    .fillMaxSize()
                    .verticalScroll(rememberScrollState())
                    .padding(top = Spacing.M),
                verticalArrangement = Arrangement.spacedBy(Spacing.M)
            ) {
                // VPN —Å—Ç–∞—Ç—É—Å –∫–∞—Ä—Ç–æ—á–∫–∞
                VPNStatusCard(
                    isEnabled = isVPNEnabled,
                    onToggle = { isVPNEnabled = !isVPNEnabled }
                )
                
                // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
                Text(
                    text = "–û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò",
                    style = MaterialTheme.typography.displaySmall,
                    color = TextPrimary,
                    modifier = Modifier.padding(horizontal = Spacing.ScreenPadding)
                )
                
                // –°–µ—Ç–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π 2x2
                FunctionsGrid()
                
                // –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
                QuickActionsSection()
                
                Spacer(modifier = Modifier.height(Spacing.XXL))
            }
        }
    }
}

@Composable
private fun VPNStatusCard(
    isEnabled: Boolean,
    onToggle: () -> Unit
) {
    Surface(
        modifier = Modifier
            .fillMaxWidth()
            .padding(horizontal = Spacing.ScreenPadding),
        shape = RoundedCornerShape(CornerRadius.Large),
        color = if (isEnabled) SecondaryGold else BackgroundMedium
    ) {
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(Spacing.CardPadding),
            horizontalArrangement = Arrangement.spacedBy(Spacing.M),
            verticalAlignment = Alignment.CenterVertically
        ) {
            // –ò–∫–æ–Ω–∫–∞
            Text(
                text = "üõ°Ô∏è",
                style = MaterialTheme.typography.displayLarge
            )
            
            // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            Column(
                modifier = Modifier.weight(1f),
                verticalArrangement = Arrangement.spacedBy(Spacing.XXS)
            ) {
                Text(
                    text = "VPN –ó–ê–©–ò–¢–ê",
                    style = MaterialTheme.typography.bodyMedium,
                    color = if (isEnabled) BackgroundDark else TextPrimary
                )
                Text(
                    text = if (isEnabled) "–ü–æ–¥–∫–ª—é—á–µ–Ω–æ ‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω–æ" else "–û—Ç–∫–ª—é—á–µ–Ω–æ",
                    style = MaterialTheme.typography.bodySmall,
                    color = if (isEnabled) SuccessGreen else TextSecondary
                )
            }
            
            // Toggle
            IconButton(onClick = onToggle) {
                Surface(
                    shape = CircleShape,
                    color = if (isEnabled) SuccessGreen else TextSecondary,
                    modifier = Modifier.size(20.dp)
                ) {
                    Text(
                        text = if (isEnabled) "‚úì" else "‚úó",
                        color = Color.White,
                        modifier = Modifier.wrapContentSize(Alignment.Center)
                    )
                }
            }
        }
    }
}

@Composable
private fun FunctionsGrid() {
    Column(
        modifier = Modifier.padding(horizontal = Spacing.ScreenPadding),
        verticalArrangement = Arrangement.spacedBy(Spacing.M)
    ) {
        Row(
            modifier = Modifier.fillMaxWidth(),
            horizontalArrangement = Arrangement.spacedBy(Spacing.M)
        ) {
            FunctionCard(
                icon = "üë®‚Äçüë©‚Äçüëß‚Äçüë¶",
                title = "–°–ï–ú–¨–Ø",
                subtitle = "4 —á–ª–µ–Ω–∞ ‚Ä¢ –í—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ",
                status = StatusType.ACTIVE,
                modifier = Modifier.weight(1f),
                onClick = { 
                    // TODO: Navigate to screen
                }
            )
            
            FunctionCard(
                icon = "üåê",
                title = "VPN",
                subtitle = "–ü–æ–¥–∫–ª—é—á–µ–Ω–æ",
                status = StatusType.ACTIVE,
                modifier = Modifier.weight(1f),
                onClick = { 
                    // TODO: Navigate to screen
                }
            )
        }
        
        Row(
            modifier = Modifier.fillMaxWidth(),
            horizontalArrangement = Arrangement.spacedBy(Spacing.M)
        ) {
            FunctionCard(
                icon = "üìä",
                title = "–ê–ù–ê–õ–ò–¢–ò–ö–ê",
                subtitle = "47 —É–≥—Ä–æ–∑ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ",
                status = StatusType.WARNING,
                modifier = Modifier.weight(1f),
                onClick = { 
                    // TODO: Navigate to screen
                }
            )
            
            FunctionCard(
                icon = "ü§ñ",
                title = "AI",
                subtitle = "–í—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å",
                status = StatusType.NEUTRAL,
                modifier = Modifier.weight(1f),
                onClick = { 
                    // TODO: Navigate to screen
                }
            )
        }
    }
}

@Composable
private fun QuickActionsSection() {
    Column(
        modifier = Modifier.padding(horizontal = Spacing.ScreenPadding),
        verticalArrangement = Arrangement.spacedBy(Spacing.S)
    ) {
        Text(
            text = "–ë–´–°–¢–†–´–ï –î–ï–ô–°–¢–í–ò–Ø",
            style = MaterialTheme.typography.displaySmall,
            color = TextPrimary
        )
        
        QuickActionButton(
            icon = "üö®",
            title = "–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å",
            subtitle = "–ë—ã—Å—Ç—Ä—ã–π –≤—ã–∑–æ–≤ —Å–ª—É–∂–±—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
        )
        
        QuickActionButton(
            icon = "üë∂",
            title = "–î–µ—Ç—Å–∫–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å",
            subtitle = "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º –¥–µ—Ç–µ–π"
        )
        
        QuickActionButton(
            icon = "üì±",
            title = "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤",
            subtitle = "–°—Ç–∞—Ç—É—Å –∑–∞—â–∏—Ç—ã –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤"
        )
    }
}

@Composable
private fun QuickActionButton(
    icon: String,
    title: String,
    subtitle: String
) {
    Surface(
        onClick = { 
            // TODO: Navigate to screen
        },
        shape = RoundedCornerShape(CornerRadius.Medium),
        color = BackgroundMedium.copy(alpha = 0.5f)
    ) {
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(Spacing.M),
            horizontalArrangement = Arrangement.spacedBy(Spacing.M),
            verticalAlignment = Alignment.CenterVertically
        ) {
            Text(
                text = icon,
                style = MaterialTheme.typography.displayMedium
            )
            
            Column(modifier = Modifier.weight(1f)) {
                Text(
                    text = title,
                    style = MaterialTheme.typography.bodyLarge,
                    color = TextPrimary
                )
                Text(
                    text = subtitle,
                    style = MaterialTheme.typography.bodySmall,
                    color = TextSecondary
                )
            }
            
            Text(
                text = "‚Ä∫",
                style = MaterialTheme.typography.displaySmall,
                color = TextSecondary
            )
        }
    }
}



