package family.aladdin.android.viewmodels

import android.app.Activity
import android.content.Context
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.android.billingclient.api.ProductDetails
import family.aladdin.android.billing.BillingManager
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch

/**
 * üí≥ Tariffs View Model
 * –õ–æ–≥–∏–∫–∞ –¥–ª—è —ç–∫—Ä–∞–Ω–∞ —Ç–∞—Ä–∏—Ñ–æ–≤
 * –ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù –° GOOGLE PLAY BILLING!
 */

data class AndroidTariff(
    val id: String,
    val title: String,
    val price: String,
    val period: String,
    val features: List<String>,
    val productDetails: ProductDetails?,
    val isPurchased: Boolean = false,
    val isRecommended: Boolean = false
)

class TariffsViewModel(
    private val context: Context
) : ViewModel() {
    
    // MARK: - Billing Manager
    
    private val billingManager = BillingManager(context)
    
    // MARK: - State
    
    private val _tariffs = MutableStateFlow<List<AndroidTariff>>(emptyList())
    val tariffs: StateFlow<List<AndroidTariff>> = _tariffs.asStateFlow()
    
    private val _selectedTariff = MutableStateFlow<AndroidTariff?>(null)
    val selectedTariff: StateFlow<AndroidTariff?> = _selectedTariff.asStateFlow()
    
    private val _isLoading = MutableStateFlow(false)
    val isLoading: StateFlow<Boolean> = _isLoading.asStateFlow()
    
    private val _errorMessage = MutableStateFlow<String?>(null)
    val errorMessage: StateFlow<String?> = _errorMessage.asStateFlow()
    
    private val _isPurchaseSuccessful = MutableStateFlow(false)
    val isPurchaseSuccessful: StateFlow<Boolean> = _isPurchaseSuccessful.asStateFlow()
    
    // MARK: - Init
    
    init {
        // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        viewModelScope.launch {
            billingManager.products.collect { products ->
                updateTariffs(products)
            }
        }
        
        // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        viewModelScope.launch {
            billingManager.purchasedProductIds.collect { purchasedIds ->
                updatePurchaseStatus(purchasedIds)
            }
        }
        
        // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏
        viewModelScope.launch {
            billingManager.errorMessage.collect { error ->
                _errorMessage.value = error
            }
        }
        
        // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ loading
        viewModelScope.launch {
            billingManager.isLoading.collect { loading ->
                _isLoading.value = loading
            }
        }
    }
    
    // MARK: - Update Tariffs
    
    /**
     * –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–∞—Ä–∏—Ñ–æ–≤ –∏–∑ Billing –ø—Ä–æ–¥—É–∫—Ç–æ–≤
     */
    private fun updateTariffs(products: List<ProductDetails>) {
        val productMap = mapOf(
            BillingManager.PRODUCT_BASIC to TariffInfo("–ë–∞–∑–æ–≤—ã–π", listOf("1 —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ", "–ë–∞–∑–æ–≤–∞—è –∑–∞—â–∏—Ç–∞", "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞"), false),
            BillingManager.PRODUCT_INDIVIDUAL to TariffInfo("–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π", listOf("1 —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ", "–ü–æ–ª–Ω–∞—è –∑–∞—â–∏—Ç–∞", "–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞", "AI –ø–æ–º–æ—â–Ω–∏–∫"), false),
            BillingManager.PRODUCT_FAMILY to TariffInfo("–°–µ–º–µ–π–Ω—ã–π", listOf("–î–æ 5 —É—Å—Ç—Ä–æ–π—Å—Ç–≤", "–ü–æ–ª–Ω–∞—è –∑–∞—â–∏—Ç–∞", "AI –ø–æ–º–æ—â–Ω–∏–∫", "–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å"), true),
            BillingManager.PRODUCT_PREMIUM to TariffInfo("–ü—Ä–µ–º–∏—É–º", listOf("–î–æ 10 —É—Å—Ç—Ä–æ–π—Å—Ç–≤", "–í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏", "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞", "–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏"), false)
        )
        
        _tariffs.value = products.map { product ->
            val info = productMap[product.productId] ?: TariffInfo("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", emptyList(), false)
            AndroidTariff(
                id = product.productId,
                title = info.title,
                price = billingManager.getProductPrice(product),
                period = "–≤ –º–µ—Å—è—Ü",
                features = info.features,
                productDetails = product,
                isPurchased = billingManager.isPurchased(product.productId),
                isRecommended = info.isRecommended
            )
        }
        
        // –í—ã–±—Ä–∞—Ç—å –ø–µ—Ä–≤—ã–π —Ç–∞—Ä–∏—Ñ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if (_selectedTariff.value == null && _tariffs.value.isNotEmpty()) {
            _selectedTariff.value = _tariffs.value.first()
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–∫—É–ø–æ–∫
     */
    private fun updatePurchaseStatus(purchasedIds: Set<String>) {
        _tariffs.value = _tariffs.value.map { tariff ->
            tariff.copy(isPurchased = purchasedIds.contains(tariff.id))
        }
    }
    
    // MARK: - Public Methods
    
    /**
     * –í—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ
     */
    fun selectTariff(tariff: AndroidTariff) {
        _selectedTariff.value = tariff
        println("Selected tariff: ${tariff.title}")
    }
    
    /**
     * –ö—É–ø–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ
     */
    fun purchaseSelectedTariff(activity: Activity) {
        val tariff = _selectedTariff.value
        
        if (tariff == null) {
            _errorMessage.value = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ"
            return
        }
        
        if (tariff.productDetails == null) {
            _errorMessage.value = "–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
            return
        }
        
        _isLoading.value = true
        _errorMessage.value = null
        _isPurchaseSuccessful.value = false
        
        billingManager.purchase(activity, tariff.productDetails)
        
        println("‚úÖ Initiating purchase for: ${tariff.title}")
    }
    
    /**
     * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∫—É–ø–∫–∏
     */
    fun restorePurchases() {
        _isLoading.value = true
        _errorMessage.value = null
        
        billingManager.queryPurchases()
        
        _isLoading.value = false
        println("‚úÖ Purchases restored")
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
     */
    fun getActiveSubscription(): AndroidTariff? {
        return _tariffs.value.firstOrNull { it.isPurchased }
    }
    
    // MARK: - Cleanup
    
    override fun onCleared() {
        super.onCleared()
        billingManager.endConnection()
    }
}

// MARK: - Helper Models

private data class TariffInfo(
    val title: String,
    val features: List<String>,
    val isRecommended: Boolean
)

