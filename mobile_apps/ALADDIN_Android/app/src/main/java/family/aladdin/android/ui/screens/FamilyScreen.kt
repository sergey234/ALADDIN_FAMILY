package family.aladdin.android.ui.screens

import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Add
import androidx.compose.material.icons.filled.ArrowBack
import androidx.compose.material.icons.filled.Close
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Brush
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavHostController
import family.aladdin.android.ui.components.cards.FamilyMemberCard
import family.aladdin.android.ui.components.cards.FamilyRole
import family.aladdin.android.ui.components.cards.ProtectionStatus
import family.aladdin.android.ui.components.navigation.ALADDINTopBar
import family.aladdin.android.ui.components.navigation.TopBarAction
import family.aladdin.android.ui.theme.*

/**
 * üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Family Screen
 * –≠–∫—Ä–∞–Ω —Å–µ–º—å–∏
 * –ò—Å—Ç–æ—á–Ω–∏–∫: iOS FamilyScreen.swift –∏ 03_family_screen.html
 */

@Composable
fun FamilyScreen(
    navController: NavHostController
) {
    var showRewardsQuickModal by remember { mutableStateOf(false) }
    var unicornBalance by remember { mutableStateOf(245) }
    Box(
        modifier = Modifier
            .fillMaxSize()
            .background(
                brush = Brush.linearGradient(
                    colors = listOf(
                        GradientStart,
                        GradientMiddle,
                        GradientEnd
                    )
                )
            )
    ) {
        Column(modifier = Modifier.fillMaxSize()) {
            // –ù–∞–≤–∏–≥–∞—Ü–∏—è
            ALADDINTopBar(
                title = "–°–ï–ú–¨–Ø",
                subtitle = "4 —á–ª–µ–Ω–∞ –ø–æ–¥ –∑–∞—â–∏—Ç–æ–π",
                onBackClick = { navController.popBackStack() },
                actions = {
                    TopBarAction(
                        icon = Icons.Default.Add,
                        onClick = { 
                            // TODO: Navigate to add member screen
                        }
                    )
                }
            )
            
            // –ö–æ–Ω—Ç–µ–Ω—Ç
            Column(
                modifier = Modifier
                    .fillMaxSize()
                    .verticalScroll(rememberScrollState())
                    .padding(top = Spacing.M),
                verticalArrangement = Arrangement.spacedBy(Spacing.M)
            ) {
                // –û–±–∑–æ—Ä —Å–µ–º—å–∏
                FamilyOverview()
                
                // –ó–∞–≥–æ–ª–æ–≤–æ–∫
                Text(
                    text = "–ß–õ–ï–ù–´ –°–ï–ú–¨–ò",
                    style = MaterialTheme.typography.displaySmall,
                    color = TextPrimary,
                    modifier = Modifier.padding(horizontal = Spacing.ScreenPadding)
                )
                
                // –°–ø–∏—Å–æ–∫ —á–ª–µ–Ω–æ–≤
                Column(
                    modifier = Modifier.padding(horizontal = Spacing.ScreenPadding),
                    verticalArrangement = Arrangement.spacedBy(Spacing.M)
                ) {
                    FamilyMemberCard(
                        name = "–°–µ—Ä–≥–µ–π",
                        role = FamilyRole.PARENT,
                        avatar = "üë®",
                        status = ProtectionStatus.PROTECTED,
                        threatsBlocked = 47
                    )
                    
                    FamilyMemberCard(
                        name = "–ú–∞—Ä–∏—è",
                        role = FamilyRole.PARENT,
                        avatar = "üë©",
                        status = ProtectionStatus.PROTECTED,
                        threatsBlocked = 32,
                        lastActive = "5 –º–∏–Ω –Ω–∞–∑–∞–¥"
                    )
                    
                    FamilyMemberCard(
                        name = "–ú–∞—à–∞",
                        role = FamilyRole.CHILD,
                        avatar = "üëß",
                        status = ProtectionStatus.WARNING,
                        threatsBlocked = 23,
                        lastActive = "10 –º–∏–Ω –Ω–∞–∑–∞–¥"
                    )
                    
                    FamilyMemberCard(
                        name = "–ë–∞–±—É—à–∫–∞",
                        role = FamilyRole.ELDERLY,
                        avatar = "üëµ",
                        status = ProtectionStatus.OFFLINE,
                        threatsBlocked = 12,
                        lastActive = "2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥"
                    )
                }
                
                // –ù–û–í–û–ï: –ö–∞—Ä—Ç–æ—á–∫–∞ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–π ü¶Ñ
                RewardsQuickCard(
                    unicornBalance = unicornBalance,
                    weeklyRewarded = 128,
                    onClick = { showRewardsQuickModal = true }
                )
                
                Spacer(modifier = Modifier.height(Spacing.XXL))
            }
        }
        
        // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–π
        if (showRewardsQuickModal) {
            RewardsQuickModalDialog(
                unicornBalance = unicornBalance,
                onReward = { unicornBalance += 10 },
                onPunish = { unicornBalance -= 10 },
                onDismiss = { showRewardsQuickModal = false }
            )
        }
    }
}

@Composable
private fun FamilyOverview() {
    Surface(
        modifier = Modifier
            .fillMaxWidth()
            .padding(horizontal = Spacing.ScreenPadding),
        shape = RoundedCornerShape(CornerRadius.Large),
        color = BackgroundMedium.copy(alpha = 0.5f)
    ) {
        Column(
            modifier = Modifier.padding(Spacing.CardPadding),
            horizontalAlignment = Alignment.CenterHorizontally,
            verticalArrangement = Arrangement.spacedBy(Spacing.M)
        ) {
            Text(text = "üë®‚Äçüë©‚Äçüëß‚Äçüë¶", style = MaterialTheme.typography.displayLarge)
            
            Column(horizontalAlignment = Alignment.CenterHorizontally) {
                Text(
                    text = "–í–∞—à–∞ —Å–µ–º—å—è",
                    style = MaterialTheme.typography.displayMedium,
                    color = TextPrimary
                )
                Text(
                    text = "4 —á–ª–µ–Ω–∞ ‚Ä¢ –í—Å–µ –ø–æ–¥ –∑–∞—â–∏—Ç–æ–π",
                    style = MaterialTheme.typography.bodyLarge,
                    color = TextSecondary
                )
            }
            
            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceEvenly
            ) {
                StatItem("üõ°Ô∏è", "47", "–£–≥—Ä–æ–∑")
                Divider(modifier = Modifier.width(1.dp).height(40.dp), color = Color.White.copy(alpha = 0.2f))
                StatItem("‚è∞", "24/7", "–ó–∞—â–∏—Ç–∞")
                Divider(modifier = Modifier.width(1.dp).height(40.dp), color = Color.White.copy(alpha = 0.2f))
                StatItem("üì±", "8", "–£—Å—Ç—Ä–æ–π—Å—Ç–≤")
            }
        }
    }
}

@Composable
private fun StatItem(icon: String, value: String, label: String) {
    Column(
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.spacedBy(Spacing.XS)
    ) {
        Text(text = icon, style = MaterialTheme.typography.displayMedium)
        Text(text = value, style = MaterialTheme.typography.displaySmall, color = PrimaryBlue)
        Text(text = label, style = MaterialTheme.typography.labelSmall, color = TextSecondary)
    }
}

@Composable
private fun RewardsQuickCard(unicornBalance: Int, weeklyRewarded: Int, onClick: () -> Unit) {
    Surface(
        modifier = Modifier
            .fillMaxWidth()
            .padding(horizontal = Spacing.ScreenPadding),
        shape = RoundedCornerShape(CornerRadius.Large),
        color = UnicornPurple.copy(alpha = 0.12f),
        border = androidx.compose.foundation.BorderStroke(2.dp, UnicornPurple.copy(alpha = 0.4f)),
        onClick = onClick
    ) {
        Column(
            modifier = Modifier.padding(Spacing.CardPadding),
            horizontalAlignment = Alignment.CenterHorizontally,
            verticalArrangement = Arrangement.spacedBy(Spacing.M)
        ) {
            Text("ü¶Ñ", style = MaterialTheme.typography.displayLarge)
            
            Text("–í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ —Ä–µ–±—ë–Ω–∫–∞", style = MaterialTheme.typography.titleMedium.copy(fontWeight = FontWeight.SemiBold), color = UnicornPurple)
            
            Row(
                horizontalArrangement = Arrangement.spacedBy(Spacing.L),
                modifier = Modifier.fillMaxWidth(),
                verticalAlignment = Alignment.CenterVertically
            ) {
                Column(horizontalAlignment = Alignment.CenterHorizontally) {
                    Text("$unicornBalance", style = MaterialTheme.typography.displayMedium, color = UnicornPurple)
                    Text("–ë–∞–ª–∞–Ω—Å ü¶Ñ", style = MaterialTheme.typography.labelSmall, color = TextSecondary)
                }
                
                Box(
                    modifier = Modifier
                        .width(1.dp)
                        .height(30.dp)
                        .background(TextSecondary.copy(alpha = 0.3f))
                )
                
                Column(horizontalAlignment = Alignment.CenterHorizontally) {
                    Text("+$weeklyRewarded", style = MaterialTheme.typography.displayMedium, color = SuccessGreen)
                    Text("–ó–∞ –Ω–µ–¥–µ–ª—é", style = MaterialTheme.typography.labelSmall, color = TextSecondary)
                }
            }
        }
    }
}

@Composable
private fun RewardsQuickModalDialog(
    unicornBalance: Int,
    onReward: () -> Unit,
    onPunish: () -> Unit,
    onDismiss: () -> Unit
) {
    Box(
        modifier = Modifier
            .fillMaxSize()
            .background(Brush.linearGradient(listOf(GradientStart, GradientMiddle, GradientEnd)))
    ) {
        Column {
            Surface(color = BackgroundMedium.copy(alpha = 0.3f), tonalElevation = 4.dp) {
                Row(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(horizontal = Spacing.ScreenPadding, vertical = Spacing.M),
                    horizontalArrangement = Arrangement.SpaceBetween,
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Row(horizontalArrangement = Arrangement.spacedBy(Spacing.XS)) {
                        Text("ü¶Ñ", style = MaterialTheme.typography.titleLarge)
                        Text("–í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ —Ä–µ–±—ë–Ω–∫–∞", style = MaterialTheme.typography.displaySmall, color = UnicornPurple)
                    }
                    
                    IconButton(onClick = onDismiss) {
                        Icon(Icons.Default.Close, contentDescription = "–ó–∞–∫—Ä—ã—Ç—å", tint = TextSecondary)
                    }
                }
            }
            
            Column(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(Spacing.L),
                verticalArrangement = Arrangement.spacedBy(Spacing.L),
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                // –ë–∞–ª–∞–Ω—Å
                Surface(
                    modifier = Modifier.fillMaxWidth(),
                    shape = RoundedCornerShape(CornerRadius.Large),
                    color = UnicornPurple.copy(alpha = 0.15f)
                ) {
                    Column(
                        modifier = Modifier.padding(Spacing.L),
                        horizontalAlignment = Alignment.CenterHorizontally
                    ) {
                        Text("ü¶Ñ", style = MaterialTheme.typography.displayLarge.copy(fontSize = 48.sp))
                        Text("$unicornBalance", style = MaterialTheme.typography.displayLarge.copy(fontSize = 36.sp), color = UnicornPurple)
                        Text("–ï–¥–∏–Ω–æ—Ä–æ–≥–æ–≤ –Ω–∞ —Å—á–µ—Ç—É", style = MaterialTheme.typography.bodyMedium, color = TextSecondary)
                    }
                }
                
                // –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
                Row(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.spacedBy(Spacing.M)
                ) {
                    Surface(
                        modifier = Modifier.weight(1f),
                        shape = RoundedCornerShape(CornerRadius.Medium),
                        color = SuccessGreen.copy(alpha = 0.2f),
                        border = androidx.compose.foundation.BorderStroke(2.dp, SuccessGreen),
                        onClick = { onReward(); onDismiss() }
                    ) {
                        Column(
                            modifier = Modifier.padding(Spacing.M),
                            horizontalAlignment = Alignment.CenterHorizontally
                        ) {
                            Text("‚úÖ", style = MaterialTheme.typography.displaySmall)
                            Text("–í–æ–∑–Ω–∞–≥—Ä–∞–¥–∏—Ç—å", style = MaterialTheme.typography.bodySmall, color = SuccessGreen)
                        }
                    }
                    
                    Surface(
                        modifier = Modifier.weight(1f),
                        shape = RoundedCornerShape(CornerRadius.Medium),
                        color = DangerRed.copy(alpha = 0.2f),
                        border = androidx.compose.foundation.BorderStroke(2.dp, DangerRed),
                        onClick = { onPunish(); onDismiss() }
                    ) {
                        Column(
                            modifier = Modifier.padding(Spacing.M),
                            horizontalAlignment = Alignment.CenterHorizontally
                        ) {
                            Text("‚ùå", style = MaterialTheme.typography.displaySmall)
                            Text("–ù–∞–∫–∞–∑–∞—Ç—å", style = MaterialTheme.typography.bodySmall, color = DangerRed)
                        }
                    }
                }
            }
        }
    }
}

