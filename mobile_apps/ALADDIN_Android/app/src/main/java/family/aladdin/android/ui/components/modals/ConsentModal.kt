package family.aladdin.android.ui.components.modals

import androidx.compose.animation.*
import androidx.compose.animation.core.*
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.blur
import androidx.compose.ui.draw.scale
import androidx.compose.ui.draw.shadow
import androidx.compose.ui.graphics.Brush
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.SpanStyle
import androidx.compose.ui.text.buildAnnotatedString
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.text.style.TextDecoration
import androidx.compose.ui.text.withStyle
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.compose.ui.window.Dialog
import androidx.compose.ui.window.DialogProperties
import family.aladdin.android.ui.theme.*
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch

@Composable
fun ConsentModal(
    onDismiss: () -> Unit = { /* Modal cannot be dismissed */ },
    onAccept: () -> Unit,
    onReadMore: () -> Unit
) {
    val scope = rememberCoroutineScope()
    var isAnimating by remember { mutableStateOf(false) }
    
    LaunchedEffect(Unit) {
        isAnimating = true
    }
    
    Dialog(
        onDismissRequest = { /* –ù–µ–ª—å–∑—è –∑–∞–∫—Ä—ã—Ç—å —Å–≤–∞–π–ø–æ–º */ },
        properties = DialogProperties(
            dismissOnBackPress = false,
            dismissOnClickOutside = false,
            usePlatformDefaultWidth = false
        )
    ) {
        Box(
            modifier = Modifier
                .fillMaxSize()
                .background(Color.Black.copy(alpha = 0.85f))
                .blur(if (isAnimating) 0.dp else 20.dp),
            contentAlignment = Alignment.Center
        ) {
            AnimatedVisibility(
                visible = isAnimating,
                enter = fadeIn(animationSpec = tween(400)) + 
                        scaleIn(initialScale = 0.8f, animationSpec = tween(400)) +
                        slideInVertically(initialOffsetY = { 50 }, animationSpec = tween(400)),
                exit = fadeOut() + scaleOut()
            ) {
                ConsentContent(
                    onAccept = {
                        isAnimating = false
                        scope.launch {
                            delay(300)
                            onAccept()
                        }
                    },
                    onReadMore = onReadMore
                )
            }
        }
    }
}

@Composable
private fun ConsentContent(
    onAccept: () -> Unit,
    onReadMore: () -> Unit
) {
    // –ü—É–ª—å—Å–∞—Ü–∏—è –ª–æ–≥–æ
    val infiniteTransition = rememberInfiniteTransition(label = "pulse")
    val logoScale by infiniteTransition.animateFloat(
        initialValue = 1.0f,
        targetValue = 1.05f,
        animationSpec = infiniteRepeatable(
            animation = tween(2000, easing = EaseInOut),
            repeatMode = RepeatMode.Reverse
        ),
        label = "logoScale"
    )
    
    Column(
        modifier = Modifier
            .padding(horizontal = 16.dp)
            .widthIn(max = 340.dp)
            .shadow(
                elevation = 30.dp,
                shape = RoundedCornerShape(20.dp),
                ambientColor = Color.Black.copy(alpha = 0.5f)
            )
            .background(
                brush = Brush.linearGradient(
                    colors = listOf(
                        Color(0xFF0F172A),
                        Color(0xFF1E3A8A),
                        Color(0xFF3B82F6)
                    )
                ),
                shape = RoundedCornerShape(20.dp)
            )
            .border(
                width = 2.dp,
                brush = Brush.linearGradient(
                    colors = listOf(
                        Color(0xFFFCD34D).copy(alpha = 0.5f),
                        Color(0xFFF59E0B).copy(alpha = 0.3f)
                    )
                ),
                shape = RoundedCornerShape(20.dp)
            )
            .padding(25.dp)
    ) {
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫
        Column(
            horizontalAlignment = Alignment.CenterHorizontally,
            modifier = Modifier.fillMaxWidth()
        ) {
            Text(
                text = "üõ°Ô∏è",
                fontSize = 48.sp,
                modifier = Modifier.scale(logoScale)
            )
            
            Spacer(modifier = Modifier.height(10.dp))
            
            Text(
                text = "ALADDIN",
                fontSize = 24.sp,
                fontWeight = FontWeight.Bold,
                color = Color(0xFFFCD34D)
            )
            
            Spacer(modifier = Modifier.height(5.dp))
            
            Text(
                text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É\n—Å–µ–º–µ–π–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏!",
                fontSize = 13.sp,
                color = Color.White.copy(alpha = 0.8f),
                textAlign = TextAlign.Center,
                lineHeight = 18.sp
            )
        }
        
        Spacer(modifier = Modifier.height(20.dp))
        
        // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        Column(
            modifier = Modifier
                .heightIn(max = 280.dp)
                .verticalScroll(rememberScrollState()),
            verticalArrangement = Arrangement.spacedBy(12.dp)
        ) {
            // ‚ùå –ß—Ç–æ –ù–ï —Å–æ–±–∏—Ä–∞–µ–º
            NotCollectingSection()
            
            // ‚úÖ –í–æ–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
            MilitaryTechSection()
            
            // üõ°Ô∏è –ì–∞—Ä–∞–Ω—Ç–∏–∏
            GuaranteesSection()
        }
        
        Spacer(modifier = Modifier.height(12.dp))
        
        // –ö–Ω–æ–ø–∫–∏
        ButtonsSection(
            onAccept = onAccept,
            onReadMore = onReadMore
        )
        
        Spacer(modifier = Modifier.height(10.dp))
        
        // –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π —Ç–µ–∫—Å—Ç
        LegalText(onReadMore = onReadMore)
    }
}

@Composable
private fun NotCollectingSection() {
    Column(
        modifier = Modifier
            .fillMaxWidth()
            .background(
                color = Color.Black.copy(alpha = 0.3f),
                shape = RoundedCornerShape(12.dp)
            )
            .padding(15.dp),
        verticalArrangement = Arrangement.spacedBy(10.dp)
    ) {
        Text(
            text = "‚ùå –ú—ã –ù–ï —Å–æ–±–∏—Ä–∞–µ–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:",
            fontSize = 13.sp,
            fontWeight = FontWeight.SemiBold,
            color = Color(0xFFFCD34D)
        )
        
        Column(verticalArrangement = Arrangement.spacedBy(6.dp)) {
            Text("‚Ä¢ –ò–º—è, email, —Ç–µ–ª–µ—Ñ–æ–Ω", fontSize = 12.sp, color = Color.White.copy(alpha = 0.9f))
            Text("‚Ä¢ –ê–¥—Ä–µ—Å, –ø–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", fontSize = 12.sp, color = Color.White.copy(alpha = 0.9f))
            Text("‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–µ—â–µ–Ω–∏–π", fontSize = 12.sp, color = Color.White.copy(alpha = 0.9f))
            Text("‚Ä¢ –õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è", fontSize = 12.sp, color = Color.White.copy(alpha = 0.9f))
        }
    }
}

@Composable
private fun MilitaryTechSection() {
    Column(
        modifier = Modifier
            .fillMaxWidth()
            .background(
                brush = Brush.linearGradient(
                    colors = listOf(
                        Color(0xFF10B981).copy(alpha = 0.15f),
                        Color(0xFF059669).copy(alpha = 0.10f)
                    )
                ),
                shape = RoundedCornerShape(12.dp)
            )
            .border(
                width = 1.dp,
                color = Color(0xFF10B981),
                shape = RoundedCornerShape(12.dp)
            )
            .padding(12.dp),
        verticalArrangement = Arrangement.spacedBy(8.dp)
    ) {
        Text(
            text = "‚úÖ –í–æ–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∑–∞—â–∏—Ç—ã:",
            fontSize = 12.sp,
            fontWeight = FontWeight.Bold,
            color = Color(0xFF10B981)
        )
        
        Column(verticalArrangement = Arrangement.spacedBy(4.dp)) {
            Text("üÜî –¢–æ–ª—å–∫–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π ID –Ω–æ–º–µ—Ä", fontSize = 11.sp, color = Color.White.copy(alpha = 0.9f))
            Text("üîê AES-256-GCM (–±–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å–µ–π—Ñ –ê+)", fontSize = 11.sp, color = Color.White.copy(alpha = 0.9f))
            Text("üîí ChaCha20-Poly1305 (–∑–∞—â–∏—Ç–∞ ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê)", fontSize = 11.sp, color = Color.White.copy(alpha = 0.9f))
            Text("üõ°Ô∏è XChaCha20-Poly1305 (–∫–æ—Å–º–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å)", fontSize = 11.sp, color = Color.White.copy(alpha = 0.9f))
            Text("üá∑üá∫ –†–æ—Å—Å–∏–π—Å–∫–∏–µ —Å–µ—Ä–≤–µ—Ä—ã (152-–§–ó –†–§)", fontSize = 11.sp, color = Color.White.copy(alpha = 0.9f))
            Text("üìä –û–±–µ–∑–ª–∏—á–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", fontSize = 11.sp, color = Color.White.copy(alpha = 0.9f))
        }
    }
}

@Composable
private fun GuaranteesSection() {
    Column(
        modifier = Modifier
            .fillMaxWidth()
            .background(
                color = Color.Black.copy(alpha = 0.2f),
                shape = RoundedCornerShape(12.dp)
            )
            .padding(15.dp),
        verticalArrangement = Arrangement.spacedBy(8.dp)
    ) {
        Text(
            text = "üõ°Ô∏è –ù–∞—à–∏ –≥–∞—Ä–∞–Ω—Ç–∏–∏:",
            fontSize = 11.sp,
            fontWeight = FontWeight.Bold,
            color = Color(0xFF10B981)
        )
        
        Column(verticalArrangement = Arrangement.spacedBy(3.dp)) {
            Text("‚úÖ –ü–æ–ª–Ω–∞—è –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å", fontSize = 11.sp, color = Color.White.copy(alpha = 0.9f))
            Text("‚úÖ –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ E2E (—Å–∫–≤–æ–∑–Ω–æ–µ)", fontSize = 11.sp, color = Color.White.copy(alpha = 0.9f))
            Text("‚úÖ Zero-logs VPN (–Ω–µ—Ç –ª–æ–≥–æ–≤)", fontSize = 11.sp, color = Color.White.copy(alpha = 0.9f))
            Text("‚úÖ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ 152-–§–ó", fontSize = 11.sp, color = Color.White.copy(alpha = 0.9f))
        }
    }
}

@Composable
private fun ButtonsSection(
    onAccept: () -> Unit,
    onReadMore: () -> Unit
) {
    Row(
        modifier = Modifier.fillMaxWidth(),
        horizontalArrangement = Arrangement.spacedBy(10.dp)
    ) {
        // –ö–Ω–æ–ø–∫–∞ "–ü–æ–¥—Ä–æ–±–Ω–µ–µ"
        Button(
            onClick = onReadMore,
            modifier = Modifier
                .weight(1f)
                .height(48.dp),
            colors = ButtonDefaults.buttonColors(
                containerColor = Color.White.copy(alpha = 0.1f)
            ),
            shape = RoundedCornerShape(12.dp),
            border = androidx.compose.foundation.BorderStroke(
                width = 1.dp,
                color = Color.White.copy(alpha = 0.3f)
            )
        ) {
            Text(
                text = "–ü–æ–¥—Ä–æ–±–Ω–µ–µ",
                fontSize = 14.sp,
                fontWeight = FontWeight.SemiBold,
                color = Color.White
            )
        }
        
        // –ö–Ω–æ–ø–∫–∞ "–ü—Ä–∏–Ω—è—Ç—å ‚úì"
        Button(
            onClick = onAccept,
            modifier = Modifier
                .weight(1f)
                .height(48.dp)
                .shadow(
                    elevation = 15.dp,
                    shape = RoundedCornerShape(12.dp),
                    ambientColor = Color(0xFFF59E0B).copy(alpha = 0.5f)
                ),
            colors = ButtonDefaults.buttonColors(
                containerColor = Color.Transparent
            ),
            shape = RoundedCornerShape(12.dp),
            contentPadding = PaddingValues(0.dp)
        ) {
            Box(
                modifier = Modifier
                    .fillMaxSize()
                    .background(
                        brush = Brush.linearGradient(
                            colors = listOf(
                                Color(0xFFFCD34D),
                                Color(0xFFF59E0B),
                                Color(0xFFD97706)
                            )
                        )
                    ),
                contentAlignment = Alignment.Center
            ) {
                Text(
                    text = "–ü—Ä–∏–Ω—è—Ç—å ‚úì",
                    fontSize = 14.sp,
                    fontWeight = FontWeight.Bold,
                    color = Color.White
                )
            }
        }
    }
}

@Composable
private fun LegalText(onReadMore: () -> Unit) {
    Column(
        modifier = Modifier
            .fillMaxWidth()
            .background(
                color = Color.Black.copy(alpha = 0.2f),
                shape = RoundedCornerShape(8.dp)
            )
            .padding(10.dp),
        verticalArrangement = Arrangement.spacedBy(4.dp),
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Text(
            text = "–ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É \"–ü—Ä–∏–Ω—è—Ç—å\", –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ,",
            fontSize = 10.sp,
            color = Color.White.copy(alpha = 0.7f),
            textAlign = TextAlign.Center
        )
        
        val annotatedText = buildAnnotatedString {
            withStyle(style = SpanStyle(color = Color.White.copy(alpha = 0.7f))) {
                append("—á—Ç–æ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω—ã –∏ —Å–æ–≥–ª–∞—Å–Ω—ã —Å ")
            }
            
            pushStringAnnotation(tag = "POLICY", annotation = "policy")
            withStyle(
                style = SpanStyle(
                    color = Color(0xFF3B82F6),
                    textDecoration = TextDecoration.Underline
                )
            ) {
                append("–ü–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏")
            }
            pop()
            
            withStyle(style = SpanStyle(color = Color.White.copy(alpha = 0.7f))) {
                append(" —Å–∏—Å—Ç–µ–º—ã —Å–µ–º–µ–π–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ ALADDIN –∏ –ü–æ–ª–∏—Ç–∏–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö VPN-—Å–µ—Ä–≤–∏—Å–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ ")
            }
            
            withStyle(style = SpanStyle(color = Color.White.copy(alpha = 0.7f), fontWeight = FontWeight.Bold)) {
                append("–§–µ–¥–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∑–∞–∫–æ–Ω–∞ –æ—Ç 27.07.2006 ‚Ññ 152-–§–ó \"–û –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö\" (—Å—Ç–∞—Ç—å—è 9)")
            }
        }
        
        Text(
            text = annotatedText,
            fontSize = 10.sp,
            textAlign = TextAlign.Center,
            lineHeight = 14.sp,
            modifier = Modifier.clickable {
                // Handle click on "–ü–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"
                onReadMore()
            }
        )
    }
}



