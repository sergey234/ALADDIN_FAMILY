package family.aladdin.android.ui.screens

import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowBack
import androidx.compose.material.icons.filled.Settings
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Brush
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.unit.dp
import androidx.navigation.NavHostController
import family.aladdin.android.ui.components.buttons.PrimaryButton
import family.aladdin.android.ui.components.navigation.ALADDINTopBar
import family.aladdin.android.ui.components.navigation.TopBarAction
import family.aladdin.android.ui.theme.*

/**
 * üõ°Ô∏è VPN Screen
 * –≠–∫—Ä–∞–Ω VPN –∑–∞—â–∏—Ç—ã
 * –ò—Å—Ç–æ—á–Ω–∏–∫: iOS VPNScreen.swift –∏ 02_protection_screen.html
 */

@Composable
fun VPNScreen(
    navController: NavHostController
) {
    var isVPNEnabled by remember { mutableStateOf(true) }
    
    Box(
        modifier = Modifier
            .fillMaxSize()
            .background(
                brush = Brush.linearGradient(
                    colors = listOf(
                        GradientStart,
                        GradientMiddle,
                        GradientEnd
                    )
                )
            )
    ) {
        Column(modifier = Modifier.fillMaxSize()) {
            // –ù–∞–≤–∏–≥–∞—Ü–∏—è
            ALADDINTopBar(
                title = "VPN –ó–ê–©–ò–¢–ê",
                subtitle = if (isVPNEnabled) "–ü–æ–¥–∫–ª—é—á–µ–Ω–æ" else "–û—Ç–∫–ª—é—á–µ–Ω–æ",
                onBackClick = { navController.popBackStack() },
                actions = {
                    TopBarAction(
                        icon = Icons.Default.Settings,
                        onClick = { 
                            // TODO: Navigate to VPN settings
                        }
                    )
                }
            )
            
            // –ö–æ–Ω—Ç–µ–Ω—Ç
            Column(
                modifier = Modifier
                    .fillMaxSize()
                    .verticalScroll(rememberScrollState())
                    .padding(top = Spacing.L),
                verticalArrangement = Arrangement.spacedBy(Spacing.L)
            ) {
                // VPN Status Card
                VPNStatusCard(isEnabled = isVPNEnabled)
                
                // –ö–Ω–æ–ø–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                PrimaryButton(
                    text = if (isVPNEnabled) "–û—Ç–∫–ª—é—á–∏—Ç—å VPN" else "–í–∫–ª—é—á–∏—Ç—å VPN",
                    onClick = { isVPNEnabled = !isVPNEnabled },
                    modifier = Modifier.padding(horizontal = Spacing.ScreenPadding)
                )
                
                // –í—ã–±–æ—Ä —Å–µ—Ä–≤–µ—Ä–∞
                ServerSelection()
                
                // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                StatisticsSection()
                
                Spacer(modifier = Modifier.height(Spacing.XXL))
            }
        }
    }
}

@Composable
private fun VPNStatusCard(isEnabled: Boolean) {
    Surface(
        modifier = Modifier
            .fillMaxWidth()
            .padding(horizontal = Spacing.ScreenPadding),
        shape = RoundedCornerShape(CornerRadius.Large),
        color = BackgroundMedium.copy(alpha = 0.3f)
    ) {
        Column(
            modifier = Modifier.padding(Spacing.CardPadding),
            horizontalAlignment = Alignment.CenterHorizontally,
            verticalArrangement = Arrangement.spacedBy(Spacing.L)
        ) {
            // –ò–∫–æ–Ω–∫–∞
            Box(
                modifier = Modifier
                    .size(120.dp)
                    .background(
                        color = if (isEnabled)
                            SuccessGreen.copy(alpha = 0.2f)
                        else
                            TextSecondary.copy(alpha = 0.2f),
                        shape = CircleShape
                    ),
                contentAlignment = Alignment.Center
            ) {
                Text(
                    text = if (isEnabled) "üõ°Ô∏è" else "üîí",
                    style = MaterialTheme.typography.displayLarge.copy(fontSize = MaterialTheme.typography.displayLarge.fontSize * 1.5f)
                )
            }
            
            // –°—Ç–∞—Ç—É—Å
            Column(horizontalAlignment = Alignment.CenterHorizontally) {
                Text(
                    text = if (isEnabled) "–ó–ê–©–ò–©–ï–ù–û" else "–ù–ï –ó–ê–©–ò–©–ï–ù–û",
                    style = MaterialTheme.typography.displayLarge,
                    color = if (isEnabled) SuccessGreen else DangerRed
                )
                Text(
                    text = if (isEnabled)
                        "–í–∞—à–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ"
                    else
                        "–í–∫–ª—é—á–∏—Ç–µ VPN –¥–ª—è –∑–∞—â–∏—Ç—ã",
                    style = MaterialTheme.typography.bodyLarge,
                    color = TextSecondary
                )
            }
            
            // IP –∞–¥—Ä–µ—Å
            if (isEnabled) {
                Surface(
                    shape = RoundedCornerShape(CornerRadius.Medium),
                    color = BackgroundMedium.copy(alpha = 0.5f),
                    modifier = Modifier.fillMaxWidth()
                ) {
                    Row(
                        modifier = Modifier.padding(Spacing.M),
                        horizontalArrangement = Arrangement.spacedBy(Spacing.S)
                    ) {
                        Text(text = "üåê", style = MaterialTheme.typography.bodyLarge)
                        Column(modifier = Modifier.weight(1f)) {
                            Text(
                                text = "–í–∞—à IP –∞–¥—Ä–µ—Å",
                                style = MaterialTheme.typography.bodySmall,
                                color = TextSecondary
                            )
                            Text(
                                text = "192.168.1.147",
                                style = MaterialTheme.typography.bodyMedium,
                                color = PrimaryBlue
                            )
                        }
                    }
                }
            }
        }
    }
}

@Composable
private fun ServerSelection() {
    Column(
        modifier = Modifier.padding(horizontal = Spacing.ScreenPadding),
        verticalArrangement = Arrangement.spacedBy(Spacing.S)
    ) {
        Text(
            text = "–°–ï–†–í–ï–†",
            style = MaterialTheme.typography.displaySmall,
            color = TextPrimary
        )
        
        Surface(
            onClick = { 
                // TODO: Show server selection dialog
            },
            shape = RoundedCornerShape(CornerRadius.Large),
            color = BackgroundMedium.copy(alpha = 0.5f)
        ) {
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(Spacing.CardPadding),
                horizontalArrangement = Arrangement.spacedBy(Spacing.M),
                verticalAlignment = Alignment.CenterVertically
            ) {
                Text(text = "üá∑üá∫", style = MaterialTheme.typography.displayLarge)
                
                Column(modifier = Modifier.weight(1f)) {
                    Text(
                        text = "–†–æ—Å—Å–∏—è ‚Ä¢ –ú–æ—Å–∫–≤–∞",
                        style = MaterialTheme.typography.bodyLarge,
                        color = TextPrimary
                    )
                    Row(horizontalArrangement = Arrangement.spacedBy(Spacing.XS)) {
                        Box(
                            modifier = Modifier
                                .size(8.dp)
                                .background(SuccessGreen, CircleShape)
                        )
                        Text(
                            text = "Ping: 12 ms",
                            style = MaterialTheme.typography.bodySmall,
                            color = SuccessGreen
                        )
                    }
                }
                
                Text(text = "‚Ä∫", style = MaterialTheme.typography.displaySmall, color = TextSecondary)
            }
        }
    }
}

@Composable
private fun StatisticsSection() {
    Column(
        modifier = Modifier.padding(horizontal = Spacing.ScreenPadding),
        verticalArrangement = Arrangement.spacedBy(Spacing.S)
    ) {
        Text(
            text = "–°–¢–ê–¢–ò–°–¢–ò–ö–ê",
            style = MaterialTheme.typography.displaySmall,
            color = TextPrimary
        )
        
        Column(verticalArrangement = Arrangement.spacedBy(Spacing.S)) {
            StatCard("‚¨áÔ∏è", "–ó–∞–≥—Ä—É–∂–µ–Ω–æ", "2.4 GB", "–ó–∞ —Å–µ–≥–æ–¥–Ω—è")
            StatCard("‚¨ÜÔ∏è", "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ", "1.2 GB", "–ó–∞ —Å–µ–≥–æ–¥–Ω—è")
            StatCard("‚è±Ô∏è", "–í—Ä–µ–º—è —Å–µ—Å—Å–∏–∏", "4:37:21", "–ê–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è")
            StatCard("üõ°Ô∏è", "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ", "47", "–£–≥—Ä–æ–∑ –∑–∞ –Ω–µ–¥–µ–ª—é")
        }
    }
}

@Composable
private fun StatCard(icon: String, title: String, value: String, subtitle: String) {
    Surface(
        shape = RoundedCornerShape(CornerRadius.Medium),
        color = BackgroundMedium.copy(alpha = 0.3f)
    ) {
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(Spacing.M),
            horizontalArrangement = Arrangement.spacedBy(Spacing.M)
        ) {
            Text(text = icon, style = MaterialTheme.typography.displayMedium)
            
            Column {
                Text(text = title, style = MaterialTheme.typography.bodySmall, color = TextSecondary)
                Text(text = value, style = MaterialTheme.typography.displaySmall, color = TextPrimary)
                Text(text = subtitle, style = MaterialTheme.typography.labelSmall, color = TextSecondary)
            }
        }
    }
}



