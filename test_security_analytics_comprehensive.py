# -*- coding: utf-8 -*-
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è security_analytics.py
–°–æ–≥–ª–∞—Å–Ω–æ –∞–ª–≥–æ—Ä–∏—Ç–º—É –ö–û–ú–ü–û–ù–ï–ù–¢–û–í (–ù–û–í–´–ô) –ø—É–Ω–∫—Ç 8

–ê–≤—Ç–æ—Ä: ALADDIN Security Team
–í–µ—Ä—Å–∏—è: 1.0
–î–∞—Ç–∞: 2025-01-27
"""

import asyncio
import json
import sys
import time
from datetime import datetime, timedelta
from typing import Dict, List, Any

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append('ALADDIN_NEW')

from security.security_analytics import (
    SecurityMetric,
    SecurityAnalyticsManager,
    AsyncSecurityAnalyticsManager,
    EnhancedSecurityAnalyticsManager,
    MetricType,
    AnalyticsType,
    ValidationError,
    SecurityAnalyticsError,
    MetricNotFoundError,
    InvalidMetricValueError,
    ConfigurationError,
    validate_metric_id,
    validate_metric_value,
    validate_threshold_value,
    validate_config_dict,
    enhanced_error_handler
)


class SecurityAnalyticsTester:
    """–ö–ª–∞—Å—Å –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥—É–ª—è security_analytics"""
    
    def __init__(self):
        self.test_results = {
            "classes_tested": [],
            "methods_tested": [],
            "integration_tests": [],
            "errors_found": [],
            "performance_metrics": {},
            "recommendations": []
        }
        self.start_time = datetime.now()
        
    def log_test(self, test_name: str, status: str, details: str = ""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞"""
        timestamp = datetime.now().isoformat()
        result = {
            "test_name": test_name,
            "status": status,
            "timestamp": timestamp,
            "details": details
        }
        
        if status == "PASS":
            print(f"‚úÖ {test_name}: {status}")
        elif status == "FAIL":
            print(f"‚ùå {test_name}: {status} - {details}")
            self.test_results["errors_found"].append(result)
        else:
            print(f"‚ö†Ô∏è  {test_name}: {status} - {details}")
            
        self.test_results["methods_tested"].append(result)
        
    def test_validation_functions(self):
        """8.1.1 - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        print("\nüîç 8.1.1 - –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –§–£–ù–ö–¶–ò–ô –í–ê–õ–ò–î–ê–¶–ò–ò")
        
        # –¢–µ—Å—Ç validate_metric_id
        try:
            validate_metric_id("test_metric_123")
            self.log_test("validate_metric_id_valid", "PASS")
        except Exception as e:
            self.log_test("validate_metric_id_valid", "FAIL", str(e))
            
        try:
            validate_metric_id("")
            self.log_test("validate_metric_id_empty", "FAIL", "–î–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –≤—ã–∑–≤–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ")
        except ValidationError:
            self.log_test("validate_metric_id_empty", "PASS")
        except Exception as e:
            self.log_test("validate_metric_id_empty", "FAIL", f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
            
        # –¢–µ—Å—Ç validate_metric_value
        try:
            validate_metric_value(100.0, MetricType.COUNTER)
            self.log_test("validate_metric_value_valid", "PASS")
        except Exception as e:
            self.log_test("validate_metric_value_valid", "FAIL", str(e))
            
        try:
            validate_metric_value(-10.0, MetricType.COUNTER)
            self.log_test("validate_metric_value_negative", "FAIL", "–î–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –≤—ã–∑–≤–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ")
        except ValidationError:
            self.log_test("validate_metric_value_negative", "PASS")
        except Exception as e:
            self.log_test("validate_metric_value_negative", "FAIL", f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
            
        # –¢–µ—Å—Ç validate_threshold_value
        try:
            validate_threshold_value(0.5)
            self.log_test("validate_threshold_value_valid", "PASS")
        except Exception as e:
            self.log_test("validate_threshold_value_valid", "FAIL", str(e))
            
        # –¢–µ—Å—Ç validate_config_dict
        try:
            valid_config = {
                "data_retention_days": 90,
                "analysis_interval": 300,
                "enable_real_time": True
            }
            validate_config_dict(valid_config)
            self.log_test("validate_config_dict_valid", "PASS")
        except Exception as e:
            self.log_test("validate_config_dict_valid", "FAIL", str(e))
            
    def test_security_metric_class(self):
        """8.1.1 - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞ SecurityMetric"""
        print("\nüîç 8.1.1 - –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–õ–ê–°–°–ê SecurityMetric")
        
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
            metric = SecurityMetric(
                metric_id="test_metric",
                name="Test Metric",
                metric_type=MetricType.COUNTER,
                value=100.0,
                unit="count",
                tags={"category": "test"}
            )
            self.log_test("SecurityMetric_creation", "PASS")
            self.test_results["classes_tested"].append("SecurityMetric")
            
            # –¢–µ—Å—Ç –º–µ—Ç–æ–¥–æ–≤
            methods_to_test = [
                ("update_value", lambda: metric.update_value(150.0)),
                ("set_threshold", lambda: metric.set_threshold("max", 200.0)),
                ("check_thresholds", lambda: metric.check_thresholds()),
                ("to_dict", lambda: metric.to_dict()),
                ("validate", lambda: metric.validate()),
                ("reset", lambda: metric.reset()),
                ("get_statistics", lambda: metric.get_statistics()),
                ("export_data", lambda: metric.export_data()),
                ("add_threshold", lambda: metric.add_threshold("warning", 150.0)),
                ("get_history", lambda: metric.get_history(10)),
                ("clear_history", lambda: metric.clear_history())
            ]
            
            for method_name, method_call in methods_to_test:
                try:
                    result = method_call()
                    self.log_test(f"SecurityMetric_{method_name}", "PASS")
                except Exception as e:
                    self.log_test(f"SecurityMetric_{method_name}", "FAIL", str(e))
                    
            # –¢–µ—Å—Ç –º–∞–≥–∏—á–µ—Å–∫–∏—Ö –º–µ—Ç–æ–¥–æ–≤
            magic_methods = [
                ("__str__", lambda: str(metric)),
                ("__repr__", lambda: repr(metric)),
                ("__eq__", lambda: metric == metric),
                ("__hash__", lambda: hash(metric)),
                ("__len__", lambda: len(metric)),
                ("__contains__", lambda: 100.0 in metric)
            ]
            
            for method_name, method_call in magic_methods:
                try:
                    result = method_call()
                    self.log_test(f"SecurityMetric_{method_name}", "PASS")
                except Exception as e:
                    self.log_test(f"SecurityMetric_{method_name}", "FAIL", str(e))
                    
        except Exception as e:
            self.log_test("SecurityMetric_creation", "FAIL", str(e))
            
    def test_security_analytics_manager_class(self):
        """8.1.1 - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞ SecurityAnalyticsManager"""
        print("\nüîç 8.1.1 - –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–õ–ê–°–°–ê SecurityAnalyticsManager")
        
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
            config = {
                "data_retention_days": 30,
                "analysis_interval": 60,
                "enable_real_time": True,
                "alert_threshold": 0.8
            }
            manager = SecurityAnalyticsManager("TestManager", config)
            self.log_test("SecurityAnalyticsManager_creation", "PASS")
            self.test_results["classes_tested"].append("SecurityAnalyticsManager")
            
            # –¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            try:
                init_result = manager.initialize()
                self.log_test("SecurityAnalyticsManager_initialize", "PASS" if init_result else "FAIL")
            except Exception as e:
                self.log_test("SecurityAnalyticsManager_initialize", "FAIL", str(e))
                
            # –¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
            methods_to_test = [
                ("add_metric", lambda: manager.add_metric(SecurityMetric("test", "Test", MetricType.COUNTER))),
                ("update_metric", lambda: manager.update_metric("test", 50.0)),
                ("get_metric", lambda: manager.get_metric("test")),
                ("get_metrics_by_category", lambda: manager.get_metrics_by_category("test")),
                ("conduct_threat_analysis", lambda: manager.conduct_threat_analysis()),
                ("conduct_risk_assessment", lambda: manager.conduct_risk_assessment()),
                ("analyze_performance_metrics", lambda: manager.analyze_performance_metrics()),
                ("detect_anomalies", lambda: manager.detect_anomalies()),
                ("generate_insights", lambda: manager.generate_insights()),
                ("get_analytics_dashboard_data", lambda: manager.get_analytics_dashboard_data()),
                ("get_analytics_stats", lambda: manager.get_analytics_stats()),
                ("start", lambda: manager.start()),
                ("stop", lambda: manager.stop()),
                ("get_health_status", lambda: manager.get_health_status()),
                ("backup_data", lambda: manager.backup_data()),
                ("cleanup_old_data", lambda: manager.cleanup_old_data(1)),
                ("get_performance_metrics", lambda: manager.get_performance_metrics()),
                ("validate_integrity", lambda: manager.validate_integrity()),
                ("remove_metric", lambda: manager.remove_metric("test")),
                ("analyze_security_metrics", lambda: manager.analyze_security_metrics()),
                ("get_analytics_summary", lambda: manager.get_analytics_summary()),
                ("export_analytics", lambda: manager.export_analytics()),
                ("import_analytics", lambda: manager.import_analytics({}))
            ]
            
            for method_name, method_call in methods_to_test:
                try:
                    result = method_call()
                    self.log_test(f"SecurityAnalyticsManager_{method_name}", "PASS")
                except Exception as e:
                    self.log_test(f"SecurityAnalyticsManager_{method_name}", "FAIL", str(e))
                    
            # –¢–µ—Å—Ç –º–∞–≥–∏—á–µ—Å–∫–∏—Ö –º–µ—Ç–æ–¥–æ–≤
            magic_methods = [
                ("__str__", lambda: str(manager)),
                ("__repr__", lambda: repr(manager)),
                ("__eq__", lambda: manager == manager),
                ("__hash__", lambda: hash(manager)),
                ("__len__", lambda: len(manager)),
                ("__contains__", lambda: "test" in manager)
            ]
            
            for method_name, method_call in magic_methods:
                try:
                    result = method_call()
                    self.log_test(f"SecurityAnalyticsManager_{method_name}", "PASS")
                except Exception as e:
                    self.log_test(f"SecurityAnalyticsManager_{method_name}", "FAIL", str(e))
                    
        except Exception as e:
            self.log_test("SecurityAnalyticsManager_creation", "FAIL", str(e))
            
    def test_async_security_analytics_manager_class(self):
        """8.1.1 - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞ AsyncSecurityAnalyticsManager"""
        print("\nüîç 8.1.1 - –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–õ–ê–°–°–ê AsyncSecurityAnalyticsManager")
        
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
            config = {
                "data_retention_days": 30,
                "analysis_interval": 60,
                "enable_real_time": True
            }
            async_manager = AsyncSecurityAnalyticsManager("TestAsyncManager", config)
            self.log_test("AsyncSecurityAnalyticsManager_creation", "PASS")
            self.test_results["classes_tested"].append("AsyncSecurityAnalyticsManager")
            
            # –¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            try:
                init_result = async_manager.initialize()
                self.log_test("AsyncSecurityAnalyticsManager_initialize", "PASS" if init_result else "FAIL")
            except Exception as e:
                self.log_test("AsyncSecurityAnalyticsManager_initialize", "FAIL", str(e))
                
            # –¢–µ—Å—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
            async def test_async_methods():
                methods_to_test = [
                    ("async_analyze_security_metrics", lambda: async_manager.async_analyze_security_metrics()),
                    ("async_detect_anomalies", lambda: async_manager.async_detect_anomalies()),
                    ("async_generate_insights", lambda: async_manager.async_generate_insights())
                ]
                
                for method_name, method_call in methods_to_test:
                    try:
                        result = await method_call()
                        self.log_test(f"AsyncSecurityAnalyticsManager_{method_name}", "PASS")
                    except Exception as e:
                        self.log_test(f"AsyncSecurityAnalyticsManager_{method_name}", "FAIL", str(e))
                        
            # –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
            asyncio.run(test_async_methods())
            
            # –¢–µ—Å—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
            try:
                result = async_manager.get_async_performance_metrics()
                self.log_test("AsyncSecurityAnalyticsManager_get_async_performance_metrics", "PASS")
            except Exception as e:
                self.log_test("AsyncSecurityAnalyticsManager_get_async_performance_metrics", "FAIL", str(e))
            
        except Exception as e:
            self.log_test("AsyncSecurityAnalyticsManager_creation", "FAIL", str(e))
            
    def test_enhanced_security_analytics_manager_class(self):
        """8.1.1 - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞ EnhancedSecurityAnalyticsManager"""
        print("\nüîç 8.1.1 - –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–õ–ê–°–°–ê EnhancedSecurityAnalyticsManager")
        
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
            config = {
                "data_retention_days": 30,
                "analysis_interval": 60,
                "enable_real_time": True,
                "max_cache_size": 100,
                "memory_threshold": 500000,
                "metrics_threshold": 500,
                "error_threshold": 5
            }
            enhanced_manager = EnhancedSecurityAnalyticsManager("TestEnhancedManager", config)
            self.log_test("EnhancedSecurityAnalyticsManager_creation", "PASS")
            self.test_results["classes_tested"].append("EnhancedSecurityAnalyticsManager")
            
            # –¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            try:
                init_result = enhanced_manager.initialize()
                self.log_test("EnhancedSecurityAnalyticsManager_initialize", "PASS" if init_result else "FAIL")
            except Exception as e:
                self.log_test("EnhancedSecurityAnalyticsManager_initialize", "FAIL", str(e))
                
            # –¢–µ—Å—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
            methods_to_test = [
                ("get_cached_statistics", lambda: enhanced_manager.get_cached_statistics("test")),
                ("get_enhanced_performance_metrics", lambda: enhanced_manager.get_enhanced_performance_metrics()),
                ("export_enhanced_analytics", lambda: enhanced_manager.export_enhanced_analytics())
            ]
            
            for method_name, method_call in methods_to_test:
                try:
                    result = method_call()
                    self.log_test(f"EnhancedSecurityAnalyticsManager_{method_name}", "PASS")
                except Exception as e:
                    self.log_test(f"EnhancedSecurityAnalyticsManager_{method_name}", "FAIL", str(e))
                    
        except Exception as e:
            self.log_test("EnhancedSecurityAnalyticsManager_creation", "FAIL", str(e))
            
    def test_integration_between_components(self):
        """8.2 - –ü–†–û–í–ï–†–ö–ê –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –ú–ï–ñ–î–£ –ö–û–ú–ü–û–ù–ï–ù–¢–ê–ú–ò"""
        print("\nüîç 8.2 - –ü–†–û–í–ï–†–ö–ê –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –ú–ï–ñ–î–£ –ö–û–ú–ü–û–ù–ï–ù–¢–ê–ú–ò")
        
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            manager = SecurityAnalyticsManager("IntegrationTestManager")
            manager.initialize()
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
            metrics = [
                SecurityMetric("metric1", "Metric 1", MetricType.COUNTER, 100.0, "count", {"category": "test"}),
                SecurityMetric("metric2", "Metric 2", MetricType.GAUGE, 50.0, "percent", {"category": "test"}),
                SecurityMetric("metric3", "Metric 3", MetricType.TIMER, 200.0, "ms", {"category": "performance"})
            ]
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –≤ –º–µ–Ω–µ–¥–∂–µ—Ä
            for metric in metrics:
                success = manager.add_metric(metric)
                if success:
                    self.log_test(f"Integration_add_metric_{metric.metric_id}", "PASS")
                else:
                    self.log_test(f"Integration_add_metric_{metric.metric_id}", "FAIL", "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ç—Ä–∏–∫—É")
                    
            # –¢–µ—Å—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
            integration_tests = [
                ("update_metric_interaction", lambda: manager.update_metric("metric1", 150.0)),
                ("get_metric_interaction", lambda: manager.get_metric("metric1")),
                ("category_filtering", lambda: manager.get_metrics_by_category("test")),
                ("threat_analysis_with_metrics", lambda: manager.conduct_threat_analysis()),
                ("anomaly_detection_with_metrics", lambda: manager.detect_anomalies()),
                ("insight_generation_with_metrics", lambda: manager.generate_insights())
            ]
            
            for test_name, test_func in integration_tests:
                try:
                    result = test_func()
                    self.log_test(f"Integration_{test_name}", "PASS")
                    self.test_results["integration_tests"].append({
                        "test_name": test_name,
                        "status": "PASS",
                        "result_type": type(result).__name__
                    })
                except Exception as e:
                    self.log_test(f"Integration_{test_name}", "FAIL", str(e))
                    self.test_results["integration_tests"].append({
                        "test_name": test_name,
                        "status": "FAIL",
                        "error": str(e)
                    })
                    
            # –¢–µ—Å—Ç –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –º–µ—Ç–æ–¥–∞–º–∏
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫—É
                manager.update_metric("metric1", 200.0)
                
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                metric_data = manager.get_metric("metric1")
                if metric_data and metric_data["value"] == 200.0:
                    self.log_test("Integration_data_flow", "PASS")
                else:
                    self.log_test("Integration_data_flow", "FAIL", "–î–∞–Ω–Ω—ã–µ –Ω–µ –ø–µ—Ä–µ–¥–∞–ª–∏—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                    
            except Exception as e:
                self.log_test("Integration_data_flow", "FAIL", str(e))
                
            # –¢–µ—Å—Ç –æ–±—â–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç—Ä–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–µ
                if len(manager.metrics) == 3:
                    self.log_test("Integration_shared_state", "PASS")
                else:
                    self.log_test("Integration_shared_state", "FAIL", f"–û–∂–∏–¥–∞–ª–æ—Å—å 3 –º–µ—Ç—Ä–∏–∫–∏, –ø–æ–ª—É—á–µ–Ω–æ {len(manager.metrics)}")
                    
            except Exception as e:
                self.log_test("Integration_shared_state", "FAIL", str(e))
                
        except Exception as e:
            self.log_test("Integration_setup", "FAIL", str(e))
            
    def test_error_handling(self):
        """8.1.4 - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
        print("\nüîç 8.1.4 - –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ë–†–ê–ë–û–¢–ö–ò –û–®–ò–ë–û–ö")
        
        # –¢–µ—Å—Ç ValidationError
        try:
            validate_metric_id("")
            self.log_test("ErrorHandling_ValidationError", "FAIL", "–î–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –≤—ã–∑–≤–∞—Ç—å ValidationError")
        except ValidationError:
            self.log_test("ErrorHandling_ValidationError", "PASS")
        except Exception as e:
            self.log_test("ErrorHandling_ValidationError", "FAIL", f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
            
        # –¢–µ—Å—Ç SecurityAnalyticsError
        try:
            manager = SecurityAnalyticsManager("ErrorTestManager")
            # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –º–µ—Ç—Ä–∏–∫—É
            result = manager.get_metric("nonexistent_metric")
            if result is None:
                self.log_test("ErrorHandling_NonexistentMetric", "PASS")
            else:
                self.log_test("ErrorHandling_NonexistentMetric", "FAIL", "–î–æ–ª–∂–µ–Ω –±—ã–ª –≤–µ—Ä–Ω—É—Ç—å None")
        except Exception as e:
            self.log_test("ErrorHandling_NonexistentMetric", "FAIL", str(e))
            
        # –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        try:
            metric = SecurityMetric("test", "Test", MetricType.COUNTER, -10.0)  # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è COUNTER
            self.log_test("ErrorHandling_InvalidValue", "FAIL", "–î–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –≤—ã–∑–≤–∞—Ç—å ValidationError")
        except ValidationError:
            self.log_test("ErrorHandling_InvalidValue", "PASS")
        except Exception as e:
            self.log_test("ErrorHandling_InvalidValue", "FAIL", f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
            
    def test_performance_metrics(self):
        """8.1.3 - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        print("\nüîç 8.1.3 - –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
        
        try:
            manager = SecurityAnalyticsManager("PerformanceTestManager")
            manager.initialize()
            
            # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –º–µ—Ç—Ä–∏–∫
            start_time = time.time()
            for i in range(100):
                metric = SecurityMetric(f"perf_metric_{i}", f"Performance Metric {i}", MetricType.COUNTER, i * 10.0)
                manager.add_metric(metric)
            creation_time = time.time() - start_time
            
            self.test_results["performance_metrics"]["metric_creation_time"] = creation_time
            self.log_test("Performance_metric_creation", "PASS", f"100 –º–µ—Ç—Ä–∏–∫ —Å–æ–∑–¥–∞–Ω—ã –∑–∞ {creation_time:.3f}—Å")
            
            # –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫
            start_time = time.time()
            for i in range(100):
                manager.update_metric(f"perf_metric_{i}", i * 20.0)
            update_time = time.time() - start_time
            
            self.test_results["performance_metrics"]["metric_update_time"] = update_time
            self.log_test("Performance_metric_update", "PASS", f"100 –º–µ—Ç—Ä–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∑–∞ {update_time:.3f}—Å")
            
            # –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞
            start_time = time.time()
            analysis_result = manager.conduct_threat_analysis()
            analysis_time = time.time() - start_time
            
            self.test_results["performance_metrics"]["analysis_time"] = analysis_time
            self.log_test("Performance_analysis", "PASS", f"–ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞ {analysis_time:.3f}—Å")
            
        except Exception as e:
            self.log_test("Performance_testing", "FAIL", str(e))
            
    def generate_comprehensive_report(self):
        """8.3 - –ì–ï–ù–ï–†–ê–¶–ò–Ø –û–¢–ß–ï–¢–ê –û –°–û–°–¢–û–Ø–ù–ò–ò"""
        print("\nüìä 8.3 - –ì–ï–ù–ï–†–ê–¶–ò–Ø –û–¢–ß–ï–¢–ê –û –°–û–°–¢–û–Ø–ù–ò–ò")
        
        end_time = datetime.now()
        total_time = (end_time - self.start_time).total_seconds()
        
        # 8.3.1 - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤ –∏ –∏—Ö –º–µ—Ç–æ–¥–æ–≤
        classes_info = {
            "SecurityMetric": {
                "methods": [
                    "update_value", "set_threshold", "check_thresholds", "to_dict",
                    "validate", "reset", "get_statistics", "export_data", "import_data",
                    "add_threshold", "get_history", "clear_history"
                ],
                "magic_methods": ["__str__", "__repr__", "__eq__", "__hash__", "__len__", "__contains__"]
            },
            "SecurityAnalyticsManager": {
                "methods": [
                    "initialize", "add_metric", "update_metric", "get_metric",
                    "get_metrics_by_category", "conduct_threat_analysis", "conduct_risk_assessment",
                    "analyze_performance_metrics", "detect_anomalies", "generate_insights",
                    "get_analytics_dashboard_data", "get_analytics_stats", "start", "stop",
                    "get_health_status", "backup_data", "restore_data", "cleanup_old_data",
                    "get_performance_metrics", "validate_integrity", "remove_metric",
                    "analyze_security_metrics", "get_analytics_summary", "export_analytics", "import_analytics"
                ],
                "magic_methods": ["__str__", "__repr__", "__eq__", "__hash__", "__len__", "__contains__"]
            },
            "AsyncSecurityAnalyticsManager": {
                "methods": [
                    "async_analyze_security_metrics", "async_detect_anomalies", "async_generate_insights",
                    "get_async_performance_metrics"
                ]
            },
            "EnhancedSecurityAnalyticsManager": {
                "methods": [
                    "get_cached_statistics", "get_enhanced_performance_metrics", "export_enhanced_analytics"
                ]
            }
        }
        
        # 8.3.2 - –°—Ç–∞—Ç—É—Å –∫–∞–∂–¥–æ–≥–æ –º–µ—Ç–æ–¥–∞
        method_status = {}
        for test_result in self.test_results["methods_tested"]:
            test_name = test_result["test_name"]
            status = test_result["status"]
            method_status[test_name] = status
            
        # 8.3.3 - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º
        total_tests = len(self.test_results["methods_tested"])
        passed_tests = len([t for t in self.test_results["methods_tested"] if t["status"] == "PASS"])
        failed_tests = len([t for t in self.test_results["methods_tested"] if t["status"] == "FAIL"])
        success_rate = (passed_tests / total_tests * 100) if total_tests > 0 else 0
        
        # 8.3.4 - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
        recommendations = []
        
        if success_rate < 90:
            recommendations.append("–£–ª—É—á—à–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
            
        if failed_tests > 0:
            recommendations.append("–ò—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏ –≤ –º–µ—Ç–æ–¥–∞—Ö —Å —Å—Ç–∞—Ç—É—Å–æ–º FAIL")
            
        if "async" not in str(self.test_results["classes_tested"]):
            recommendations.append("–î–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
            
        recommendations.extend([
            "–î–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ unit-—Ç–µ—Å—Ç–æ–≤ –¥–ª—è –ø–æ–∫—Ä—ã—Ç–∏—è edge cases",
            "–£–ª—É—á—à–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –º–µ—Ç–æ–¥–æ–≤",
            "–î–æ–±–∞–≤–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏",
            "–†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–≥—Ä—É–∑–∫–∏"
        ])
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
        report = {
            "test_summary": {
                "total_time_seconds": total_time,
                "total_tests": total_tests,
                "passed_tests": passed_tests,
                "failed_tests": failed_tests,
                "success_rate_percent": success_rate,
                "classes_tested": self.test_results["classes_tested"],
                "integration_tests_passed": len([t for t in self.test_results["integration_tests"] if t["status"] == "PASS"])
            },
            "classes_analysis": classes_info,
            "method_status": method_status,
            "performance_metrics": self.test_results["performance_metrics"],
            "errors_found": self.test_results["errors_found"],
            "recommendations": recommendations,
            "test_timestamp": end_time.isoformat()
        }
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        with open("security_analytics_test_report.json", "w", encoding="utf-8") as f:
            json.dump(report, f, ensure_ascii=False, indent=2)
            
        print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        print(f"   –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"   –£—Å–ø–µ—à–Ω—ã—Ö: {passed_tests}")
        print(f"   –ù–µ—É–¥–∞—á–Ω—ã—Ö: {failed_tests}")
        print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
        print(f"   –ö–ª–∞—Å—Å–æ–≤ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: {len(self.test_results['classes_tested'])}")
        
        print(f"\nüîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        for i, rec in enumerate(recommendations, 1):
            print(f"   {i}. {rec}")
            
        return report
        
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üöÄ –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø SECURITY_ANALYTICS.PY")
        print("=" * 80)
        
        # 8.1 - –ü–û–õ–ù–´–ô –¢–ï–°–¢ –í–°–ï–• –ö–õ–ê–°–°–û–í –ò –ú–ï–¢–û–î–û–í
        self.test_validation_functions()
        self.test_security_metric_class()
        self.test_security_analytics_manager_class()
        self.test_async_security_analytics_manager_class()
        self.test_enhanced_security_analytics_manager_class()
        
        # 8.2 - –ü–†–û–í–ï–†–ö–ê –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –ú–ï–ñ–î–£ –ö–û–ú–ü–û–ù–ï–ù–¢–ê–ú–ò
        self.test_integration_between_components()
        
        # 8.1.4 - –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ë–†–ê–ë–û–¢–ö–ò –û–®–ò–ë–û–ö
        self.test_error_handling()
        
        # 8.1.3 - –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò
        self.test_performance_metrics()
        
        # 8.3 - –ì–ï–ù–ï–†–ê–¶–ò–Ø –û–¢–ß–ï–¢–ê
        report = self.generate_comprehensive_report()
        
        print("\n" + "=" * 80)
        print("‚úÖ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
        print(f"üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: security_analytics_test_report.json")
        
        return report


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    tester = SecurityAnalyticsTester()
    report = tester.run_all_tests()
    return report


if __name__ == "__main__":
    main()